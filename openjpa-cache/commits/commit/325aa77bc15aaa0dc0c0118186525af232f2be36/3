{"sha":"325aa77bc15aaa0dc0c0118186525af232f2be36","node_id":"MDY6Q29tbWl0MjA2MzY0OjMyNWFhNzdiYzE1YWFhMGRjMGMwMTE4MTg2NTI1YWYyMzJmMmJlMzY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-15T09:19:55Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-15T09:19:55Z"},"message":"New test cases, currently disabled.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@627979 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4deeb4f9aeb3d6f72b3c10b78a384fa4a13e3d20","url":"https://api.github.com/repos/apache/openjpa/git/trees/4deeb4f9aeb3d6f72b3c10b78a384fa4a13e3d20"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/325aa77bc15aaa0dc0c0118186525af232f2be36","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/325aa77bc15aaa0dc0c0118186525af232f2be36","html_url":"https://github.com/apache/openjpa/commit/325aa77bc15aaa0dc0c0118186525af232f2be36","comments_url":"https://api.github.com/repos/apache/openjpa/commits/325aa77bc15aaa0dc0c0118186525af232f2be36/comments","author":null,"committer":null,"parents":[{"sha":"ff42968eed5a7a90fcb4245f6b25bce56659d150","url":"https://api.github.com/repos/apache/openjpa/commits/ff42968eed5a7a90fcb4245f6b25bce56659d150","html_url":"https://github.com/apache/openjpa/commit/ff42968eed5a7a90fcb4245f6b25bce56659d150"}],"stats":{"total":83278,"additions":82831,"deletions":447},"files":[{"sha":"17f9f78856303477f2efc2cd12ec0f45620ee6dc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleId.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleId.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleId.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,30 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel.common.apps;\r\n+\r\n+public interface SingleId {\r\n+\r\n+    public String getPkString();\r\n+\r\n+    public void setString(String s);\r\n+\r\n+    public String getString();\r\n+\r\n+    public boolean correctIdClass(Class oid);\r\n+}\r"},{"sha":"834d44f28326a171e636800162264c8e4fb442e8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdByte.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdByte.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdByte.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdByte.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,56 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel.common.apps;\r\n+\r\n+\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+import org.apache.openjpa.util.ByteId;\r\n+\r\n+@Entity\r\n+public class SingleIdByte implements SingleId {\r\n+\r\n+    private byte pk;\r\n+    private String str;\r\n+\r\n+    public boolean correctIdClass(Class c) {\r\n+        return ByteId.class.equals(c);\r\n+    }\r\n+\r\n+    public byte getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public void setPk(byte i) {\r\n+        pk = i;\r\n+    }\r\n+\r\n+    public String getPkString() {\r\n+        return pk + \"\";\r\n+    }\r\n+\r\n+    public String getString() {\r\n+        return str;\r\n+    }\r\n+\r\n+    public void setString(String s) {\r\n+        str = s;\r\n+    }\r\n+}\r"},{"sha":"88399278cb047af6d20a79ed0e3262e956c918aa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdChar.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdChar.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdChar.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdChar.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,56 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel.common.apps;\r\n+\r\n+\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+import org.apache.openjpa.util.CharId;\r\n+\r\n+@Entity\r\n+public class SingleIdChar implements SingleId {\r\n+\r\n+    private char pk;\r\n+    private String str;\r\n+\r\n+    public boolean correctIdClass(Class c) {\r\n+        return CharId.class.equals(c);\r\n+    }\r\n+\r\n+    public char getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public String getPkString() {\r\n+        return pk + \"\";\r\n+    }\r\n+\r\n+    public void setPk(char i) {\r\n+        pk = i;\r\n+    }\r\n+\r\n+    public String getString() {\r\n+        return str;\r\n+    }\r\n+\r\n+    public void setString(String s) {\r\n+        str = s;\r\n+    }\r\n+}\r"},{"sha":"753de7eff62a63c6703a7b3874fa750a8bb03e11","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdInt.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdInt.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdInt.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdInt.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,56 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel.common.apps;\r\n+\r\n+\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+import org.apache.openjpa.util.IntId;\r\n+\r\n+@Entity\r\n+public class SingleIdInt implements SingleId {\r\n+\r\n+    private int pk;\r\n+    private String str;\r\n+\r\n+    public boolean correctIdClass(Class c) {\r\n+        return IntId.class.equals(c);\r\n+    }\r\n+\r\n+    public String getPkString() {\r\n+        return pk + \"\";\r\n+    }\r\n+\r\n+    public int getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public void setPk(int i) {\r\n+        pk = i;\r\n+    }\r\n+\r\n+    public String getString() {\r\n+        return str;\r\n+    }\r\n+\r\n+    public void setString(String s) {\r\n+        str = s;\r\n+    }\r\n+}\r"},{"sha":"43a6df6c63509387db998ad74903e34385831043","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdLong.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdLong.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdLong.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdLong.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,56 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel.common.apps;\r\n+\r\n+\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+import org.apache.openjpa.util.LongId;\r\n+\r\n+@Entity\r\n+public class SingleIdLong implements SingleId {\r\n+\r\n+    private long pk;\r\n+    private String str;\r\n+\r\n+    public boolean correctIdClass(Class c) {\r\n+        return LongId.class.equals(c);\r\n+    }\r\n+\r\n+    public String getPkString() {\r\n+        return pk + \"\";\r\n+    }\r\n+\r\n+    public long getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public void setPk(long i) {\r\n+        pk = i;\r\n+    }\r\n+\r\n+    public String getString() {\r\n+        return str;\r\n+    }\r\n+\r\n+    public void setString(String s) {\r\n+        str = s;\r\n+    }\r\n+}\r"},{"sha":"7006162d6c8fa1f168dd926fb08581c812b16e7b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdShort.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdShort.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdShort.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdShort.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,56 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel.common.apps;\r\n+\r\n+\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+import org.apache.openjpa.util.ShortId;\r\n+\r\n+@Entity\r\n+public class SingleIdShort implements SingleId {\r\n+\r\n+    private short pk;\r\n+    private String str;\r\n+\r\n+    public boolean correctIdClass(Class c) {\r\n+        return ShortId.class.equals(c);\r\n+    }\r\n+\r\n+    public String getPkString() {\r\n+        return pk + \"\";\r\n+    }\r\n+\r\n+    public short getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public void setPk(short i) {\r\n+        pk = i;\r\n+    }\r\n+\r\n+    public String getString() {\r\n+        return str;\r\n+    }\r\n+\r\n+    public void setString(String s) {\r\n+        str = s;\r\n+    }\r\n+}\r"},{"sha":"50b3d4e565fac69652d4554ddea5f6e85e74adc0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdString.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdString.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdString.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdString.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,56 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel.common.apps;\r\n+\r\n+\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+import org.apache.openjpa.util.StringId;\r\n+\r\n+@Entity\r\n+public class SingleIdString implements SingleId {\r\n+\r\n+    private String pk;\r\n+    private String str;\r\n+\r\n+    public boolean correctIdClass(Class c) {\r\n+        return StringId.class.equals(c);\r\n+    }\r\n+\r\n+    public String getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public String getPkString() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public void setPk(String i) {\r\n+        pk = i;\r\n+    }\r\n+\r\n+    public String getString() {\r\n+        return str;\r\n+    }\r\n+\r\n+    public void setString(String s) {\r\n+        str = s;\r\n+    }\r\n+}\r"},{"sha":"e3aed6b4bf6e301bfdd94ff49cf0d2e783c45d79","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdWrapper.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdWrapper.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdWrapper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdWrapper.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,60 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel.common.apps;\r\n+\r\n+\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+import org.apache.openjpa.util.IntId;\r\n+\r\n+@Entity\r\n+public class SingleIdWrapper implements SingleId {\r\n+\r\n+    private Integer pk;\r\n+    private String str;\r\n+\r\n+    public boolean correctIdClass(Class c) {\r\n+        return IntId.class.equals(c);\r\n+    }\r\n+\r\n+    public String getPkString() {\r\n+        return pk == null ? \"null\" : pk.toString();\r\n+    }\r\n+\r\n+    public int getPk() {\r\n+        return pk.intValue();\r\n+    }\r\n+\r\n+    public void setPk(int i) {\r\n+        pk = new Integer(i);\r\n+    }\r\n+\r\n+    public String getString() {\r\n+        return str;\r\n+    }\r\n+\r\n+    public void setString(String s) {\r\n+        str = s;\r\n+    }\r\n+\r\n+    public static void main(String[] args) {\r\n+        SingleIdWrapper wrap = new SingleIdWrapper();\r\n+    }\r\n+}\r"},{"sha":"f49abadacb0cc47fe6b8e0eb52bd5e393b897a14","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/TransactionalClassPC.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/TransactionalClassPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/TransactionalClassPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/TransactionalClassPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,37 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel.common.apps;\r\n+\r\n+/**\r\n+ * <p>Transactional type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class TransactionalClassPC {\r\n+\r\n+    private int intField;\r\n+\r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+\r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+}\r"},{"sha":"b3598df62857116ae80a79e4beddc0d263e9a148","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/UnAnnotPojo.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/UnAnnotPojo.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/UnAnnotPojo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/UnAnnotPojo.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,53 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel.common.apps;\r\n+\r\n+/**\r\n+ * <p>Pojo type used in testing.</p>\r\n+ *\r\n+ * @author Afam Okeke\r\n+ */\r\n+public class UnAnnotPojo {\r\n+\r\n+    private String name;\r\n+    private int num;\r\n+\r\n+    public UnAnnotPojo() {\r\n+    }\r\n+\r\n+    public UnAnnotPojo(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public int getNum() {\r\n+        return num;\r\n+    }\r\n+\r\n+    public void setNum(int num) {\r\n+        this.num = num;\r\n+    }\r\n+}\r"},{"sha":"8d67c0fe86e29ad642e273992740afece74e6075","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ValueStrategyPC.java","status":"added","additions":132,"deletions":0,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ValueStrategyPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ValueStrategyPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ValueStrategyPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,132 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel.common.apps;\r\n+\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name = \"valstratpc\")\r\n+public class ValueStrategyPC {\r\n+\r\n+    @Id\r\n+    private int id;\r\n+\r\n+    @Column(length = 35)\r\n+    private String uuid;\r\n+    @Column(length = 35)\r\n+    private String uuidHex;\r\n+    @Column(length = 35)\r\n+    private String name;\r\n+    @Column(name = \"ignupdate\")\r\n+    private int ignoreUpdate;\r\n+    @Column(name = \"resupdate\")\r\n+    private int restrictUpdate;\r\n+    private int version;\r\n+    private int sequence;\r\n+\r\n+    public ValueStrategyPC() {\r\n+    }\r\n+\r\n+    public ValueStrategyPC(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return this.name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public int getIgnoreUpdate() {\r\n+        return this.ignoreUpdate;\r\n+    }\r\n+\r\n+    public void setIgnoreUpdate(int ignoreUpdate) {\r\n+        this.ignoreUpdate = ignoreUpdate;\r\n+    }\r\n+\r\n+    public int getRestrictUpdate() {\r\n+        return this.restrictUpdate;\r\n+    }\r\n+\r\n+    public void setRestrictUpdate(int restrictUpdate) {\r\n+        this.restrictUpdate = restrictUpdate;\r\n+    }\r\n+\r\n+    public String getUUID() {\r\n+        return this.uuid;\r\n+    }\r\n+\r\n+    public void setUUID(String uuid) {\r\n+        this.uuid = uuid;\r\n+    }\r\n+\r\n+    public String getUUIDHex() {\r\n+        return this.uuidHex;\r\n+    }\r\n+\r\n+    public void setUUIDHex(String uuidHex) {\r\n+        this.uuidHex = uuidHex;\r\n+    }\r\n+\r\n+    public int getVersion() {\r\n+        return this.version;\r\n+    }\r\n+\r\n+    public void setVersion(int version) {\r\n+        this.version = version;\r\n+    }\r\n+\r\n+    public int getSequence() {\r\n+        return this.sequence;\r\n+    }\r\n+\r\n+    public void setSequence(int sequence) {\r\n+        this.sequence = sequence;\r\n+    }\r\n+\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getUuid() {\r\n+        return uuid;\r\n+    }\r\n+\r\n+    public void setUuid(String uuid) {\r\n+        this.uuid = uuid;\r\n+    }\r\n+\r\n+    public String getUuidHex() {\r\n+        return uuidHex;\r\n+    }\r\n+\r\n+    public void setUuidHex(String uuidHex) {\r\n+        this.uuidHex = uuidHex;\r\n+    }\r\n+}\r"},{"sha":"830091259e2f3542b38f254b7a1c4703792077d1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestClassMetaData.java","status":"added","additions":309,"deletions":0,"changes":309,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestClassMetaData.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,309 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta;\r\n+\r\n+import java.util.Map;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.meta.common.apps.MetaTest1;\r\n+import org.apache.openjpa.persistence.meta.common.apps.MetaTest2;\r\n+import org.apache.openjpa.persistence.meta.common.apps.MetaTest3;\r\n+import org.apache.openjpa.persistence.meta.common.apps.MetaTest5;\r\n+import org.apache.openjpa.persistence.meta.common.apps.MetaTest6;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+import org.apache.openjpa.enhance.PersistenceCapable;\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.meta.FieldMetaData;\r\n+import org.apache.openjpa.meta.JavaTypes;\r\n+import org.apache.openjpa.meta.MetaDataRepository;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+\r\n+/**\r\n+ * <p>Tests the {@link ClassMetaData} type, and in so doing tests parts of\r\n+ * the {@link MetaDataRepository} and {@link FieldMetaData} types.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class TestClassMetaData\r\n+    extends AbstractTestCase {\r\n+\r\n+    private MetaDataRepository _repos = null;\r\n+\r\n+    private ClassMetaData _metaTest1 = null;\r\n+    private ClassMetaData _metaTest2 = null;\r\n+    private ClassMetaData _metaTest3 = null;\r\n+    private ClassMetaData _metaTest5 = null;\r\n+    private ClassMetaData _metaTest6 = null;\r\n+\r\n+    public TestClassMetaData(String test) {\r\n+        super(test, \"metacactusapp\");\r\n+    }\r\n+\r\n+    public void setUp()\r\n+        throws Exception {\r\n+        _repos = getRepository();\r\n+        _metaTest5 = _repos.getMetaData(MetaTest5.class, null, true);\r\n+        _metaTest3 = _repos.getMetaData(MetaTest3.class, null, true);\r\n+        _metaTest2 = _repos.getMetaData(MetaTest2.class, null, true);\r\n+        _metaTest1 = _repos.getMetaData(MetaTest1.class, null, true);\r\n+        _metaTest6 = _repos.getMetaData(MetaTest6.class, null, true);\r\n+    }\r\n+\r\n+    protected MetaDataRepository getRepository()\r\n+        throws Exception {\r\n+        //return new OpenJPAConfigurationImpl().newMetaDataRepositoryInstance();\r\n+        //return getConfiguration().newMetaDataRepositoryInstance();\r\n+        EntityManager em = currentEntityManager();\r\n+        Broker broker = JPAFacadeHelper.toBroker(em);\r\n+        return broker.getConfiguration().newMetaDataRepositoryInstance();\r\n+    }\r\n+\r\n+    /**\r\n+     * Test the class-level defaults.\r\n+     */\r\n+    public void testClassDefaults() {\r\n+        assertEquals(MetaTest1.class.getName(),\r\n+            _metaTest1.getDescribedType().getName());\r\n+        assertNull(_metaTest1.getPCSuperclass());\r\n+        assertEquals(ClassMetaData.ID_DATASTORE,\r\n+            _metaTest1.getIdentityType());\r\n+        assertTrue(_metaTest1.getRequiresExtent());\r\n+    }\r\n+\r\n+    /**\r\n+     * Test non-persistent fields.\r\n+     */\r\n+    public void testDefaultNonPersistentFields() {\r\n+        assertNull(_metaTest1.getField(\"staticField\"));\r\n+        assertNull(_metaTest1.getField(\"finalfield\"));\r\n+        assertNull(_metaTest1.getField(\"transientfield\"));\r\n+        assertNull(_metaTest1.getField(\"metaTest4Field\"));\r\n+        assertNull(_metaTest1.getField(\"metaTest4ArrayField\"));\r\n+        assertNull(_metaTest1.getField(\"objectField\"));\r\n+        assertNull(_metaTest1.getField(\"longWrapperField\"));\r\n+\r\n+        FieldMetaData fmd = _metaTest1.getField(\"doubleField\");\r\n+        assertEquals(FieldMetaData.MANAGE_TRANSACTIONAL, fmd.getManagement());\r\n+    }\r\n+\r\n+    /**\r\n+     * Test basics on persistent fields.\r\n+     */\r\n+    public void testBasicFields() {\r\n+        FieldMetaData fmd;\r\n+        fmd = _metaTest1.getField(\"stringField\");\r\n+        assertEquals(JavaTypes.STRING, fmd.getTypeCode());\r\n+        assertEquals(JavaTypes.STRING, fmd.getDeclaredTypeCode());\r\n+        assertNull(fmd.getTypeMetaData());\r\n+        assertNull(fmd.getDeclaredTypeMetaData());\r\n+        fmd = _metaTest1.getField(\"intWrapperField\");\r\n+        assertEquals(JavaTypes.INT_OBJ, fmd.getTypeCode());\r\n+        assertEquals(JavaTypes.INT_OBJ, fmd.getDeclaredTypeCode());\r\n+        fmd = _metaTest1.getField(\"intField\");\r\n+        assertEquals(JavaTypes.INT, fmd.getTypeCode());\r\n+        assertEquals(JavaTypes.INT, fmd.getDeclaredTypeCode());\r\n+        fmd = _metaTest1.getField(\"metaTest2Field\");\r\n+        assertEquals(JavaTypes.PC, fmd.getTypeCode());\r\n+        assertEquals(JavaTypes.PC, fmd.getDeclaredTypeCode());\r\n+        assertEquals(_metaTest2, fmd.getTypeMetaData());\r\n+        assertEquals(_metaTest2, fmd.getDeclaredTypeMetaData());\r\n+        fmd = _metaTest1.getField(\"metaTest2ArrayField\");\r\n+        assertEquals(JavaTypes.ARRAY, fmd.getTypeCode());\r\n+        assertEquals(JavaTypes.PC, fmd.getElement().getTypeCode());\r\n+        assertEquals(JavaTypes.ARRAY, fmd.getDeclaredTypeCode());\r\n+        assertEquals(JavaTypes.PC,\r\n+            fmd.getElement().getDeclaredTypeCode());\r\n+        fmd = _metaTest1.getField(\"intArrayField\");\r\n+        assertEquals(JavaTypes.ARRAY, fmd.getTypeCode());\r\n+        assertEquals(JavaTypes.INT, fmd.getElement().getTypeCode());\r\n+        assertEquals(JavaTypes.ARRAY, fmd.getDeclaredTypeCode());\r\n+        assertEquals(JavaTypes.INT,\r\n+            fmd.getElement().getDeclaredTypeCode());\r\n+        fmd = _metaTest1.getField(\"intField\");\r\n+        assertEquals(FieldMetaData.NULL_EXCEPTION, fmd.getNullValue());\r\n+        assertTrue(!fmd.isInDefaultFetchGroup());\r\n+        assertTrue(!fmd.isEmbedded());\r\n+        fmd = _metaTest1.getField(\"stringField\");\r\n+        assertEquals(FieldMetaData.NULL_UNSET, fmd.getNullValue());\r\n+        assertTrue(fmd.isInDefaultFetchGroup());\r\n+        assertTrue(fmd.isEmbedded());\r\n+    }\r\n+\r\n+    /**\r\n+     * Test collection and map fields.\r\n+     */\r\n+    public void testCollectionFields() {\r\n+        FieldMetaData fmd;\r\n+        fmd = _metaTest2.getField(\"collectionField1\");\r\n+        assertEquals(JavaTypes.COLLECTION, fmd.getTypeCode());\r\n+        assertEquals(JavaTypes.OBJECT, fmd.getElement().getTypeCode());\r\n+        assertEquals(Object.class, fmd.getElement().getType());\r\n+        assertNull(fmd.getElement().getTypeMetaData());\r\n+        assertEquals(JavaTypes.COLLECTION,\r\n+            fmd.getDeclaredTypeCode());\r\n+        assertEquals(JavaTypes.OBJECT,\r\n+            fmd.getElement().getDeclaredTypeCode());\r\n+        assertEquals(Object.class, fmd.getElement().getDeclaredType());\r\n+        assertNull(fmd.getElement().getTypeMetaData());\r\n+        assertTrue(fmd.getElement().isEmbedded());\r\n+        fmd = _metaTest2.getField(\"collectionField2\");\r\n+        assertEquals(JavaTypes.COLLECTION, fmd.getTypeCode());\r\n+        assertEquals(JavaTypes.PC, fmd.getElement().getTypeCode());\r\n+        assertEquals(MetaTest3.class, fmd.getElement().getType());\r\n+        assertEquals(_metaTest3, fmd.getElement().getTypeMetaData());\r\n+        assertEquals(JavaTypes.COLLECTION,\r\n+            fmd.getDeclaredTypeCode());\r\n+        assertEquals(JavaTypes.PC,\r\n+            fmd.getElement().getDeclaredTypeCode());\r\n+        assertEquals(MetaTest3.class, fmd.getElement().getDeclaredType());\r\n+        assertEquals(_metaTest3, fmd.getElement().getDeclaredTypeMetaData());\r\n+        assertTrue(!fmd.getElement().isEmbedded());\r\n+\r\n+        fmd = _metaTest2.getField(\"mapField1\");\r\n+        assertEquals(JavaTypes.MAP, fmd.getTypeCode());\r\n+        assertEquals(JavaTypes.OBJECT, fmd.getKey().getTypeCode());\r\n+        assertEquals(JavaTypes.OBJECT, fmd.getElement().getTypeCode());\r\n+        assertEquals(Object.class, fmd.getKey().getType());\r\n+        assertNull(fmd.getKey().getTypeMetaData());\r\n+        assertEquals(Object.class, fmd.getElement().getType());\r\n+        assertEquals(JavaTypes.MAP, fmd.getDeclaredTypeCode());\r\n+        assertEquals(JavaTypes.OBJECT, fmd.getKey().getDeclaredTypeCode());\r\n+        assertEquals(JavaTypes.OBJECT,\r\n+            fmd.getElement().getDeclaredTypeCode());\r\n+        assertEquals(Object.class, fmd.getKey().getDeclaredType());\r\n+        assertNull(fmd.getKey().getDeclaredTypeMetaData());\r\n+        assertEquals(Object.class, fmd.getElement().getDeclaredType());\r\n+        assertTrue(fmd.getKey().isEmbedded());\r\n+        assertTrue(fmd.getElement().isEmbedded());\r\n+        fmd = _metaTest2.getField(\"mapField2\");\r\n+        assertEquals(JavaTypes.MAP, fmd.getTypeCode());\r\n+        assertEquals(JavaTypes.STRING, fmd.getKey().getTypeCode());\r\n+        assertEquals(JavaTypes.INT_OBJ, fmd.getElement().getTypeCode());\r\n+        assertEquals(String.class, fmd.getKey().getType());\r\n+        assertEquals(Integer.class, fmd.getElement().getType());\r\n+        assertEquals(JavaTypes.MAP, fmd.getDeclaredTypeCode());\r\n+        assertEquals(JavaTypes.STRING, fmd.getKey().getDeclaredTypeCode());\r\n+        assertEquals(JavaTypes.INT_OBJ,\r\n+            fmd.getElement().getDeclaredTypeCode());\r\n+        assertEquals(String.class, fmd.getKey().getDeclaredType());\r\n+        assertEquals(Integer.class, fmd.getElement().getDeclaredType());\r\n+        assertTrue(fmd.getKey().isEmbedded());\r\n+        assertTrue(!fmd.getElement().isEmbedded());\r\n+    }\r\n+\r\n+    /**\r\n+     * Test the basic class-level meta data.\r\n+     */\r\n+    public void testBasicClass() {\r\n+        assertEquals(_metaTest1, _metaTest2.getPCSuperclassMetaData());\r\n+        assertTrue(!_metaTest2.getRequiresExtent());\r\n+    }\r\n+\r\n+    /**\r\n+     * Test application identity.\r\n+     */\r\n+    public void testApplicationIdentity() {\r\n+        assertEquals(ClassMetaData.ID_APPLICATION,\r\n+            _metaTest5.getIdentityType());\r\n+        assertEquals(MetaTest5.MetaTest5Id.class.getName(),\r\n+            _metaTest5.getObjectIdType().getName());\r\n+        assertEquals(ClassMetaData.ID_APPLICATION,\r\n+            _metaTest6.getIdentityType());\r\n+        assertEquals(MetaTest5.MetaTest5Id.class.getName(),\r\n+            _metaTest6.getObjectIdType().getName());\r\n+    }\r\n+\r\n+    /**\r\n+     * Test absolute field numbering.\r\n+     */\r\n+    public void testAbsoluteFieldNumbering() {\r\n+        assertEquals(0, _metaTest1.getField(\"doubleField\").getIndex());\r\n+        assertEquals(1, _metaTest1.getField(\"intArrayField\").getIndex());\r\n+        assertEquals(2, _metaTest1.getField(\"intField\").getIndex());\r\n+        assertEquals(3, _metaTest1.getField(\"intWrapperField\").getIndex());\r\n+        assertEquals(4, _metaTest1.getField(\"metaTest2ArrayField\").\r\n+            getIndex());\r\n+        assertEquals(5, _metaTest1.getField(\"metaTest2Field\").getIndex());\r\n+        assertEquals(6, _metaTest1.getField(\"stringField\").getIndex());\r\n+        assertEquals(7, _metaTest2.getField(\"collectionField1\").getIndex());\r\n+        assertEquals(8, _metaTest2.getField(\"collectionField2\").getIndex());\r\n+        assertEquals(9, _metaTest2.getField(\"mapField1\").getIndex());\r\n+        assertEquals(10, _metaTest2.getField(\"mapField2\").getIndex());\r\n+    }\r\n+\r\n+    /**\r\n+     * Test the methods to get fields.\r\n+     */\r\n+    public void testGetFields() {\r\n+        FieldMetaData[] fmds = _metaTest2.getFields();\r\n+        assertEquals(\"doubleField\", fmds[0].getName());\r\n+        assertEquals(\"intField\", fmds[2].getName());\r\n+        assertEquals(\"collectionField2\", fmds[8].getName());\r\n+    }\r\n+\r\n+    /**\r\n+     * Test that metadata on inner classes is available.\r\n+     */\r\n+    public void testStaticInnerClasses() {\r\n+        assertNotNull(_repos.getMetaData(MetaTest1.Inner.class, null, true));\r\n+    }\r\n+\r\n+    /**\r\n+     * Test extensions for external values and declared vs external types.\r\n+     */\r\n+    public void testExternalTypes() {\r\n+        // note that below, declared type code is promoted\r\n+        FieldMetaData fmd = _metaTest3.getField(\"pcField\");\r\n+        assertEquals(JavaTypes.PC_UNTYPED, fmd.getTypeCode());\r\n+        assertEquals(JavaTypes.PC_UNTYPED, fmd.getDeclaredTypeCode());\r\n+        assertEquals(PersistenceCapable.class, fmd.getType());\r\n+        assertEquals(Object.class, fmd.getDeclaredType());\r\n+        assertNull(fmd.getDeclaredTypeMetaData());\r\n+        assertNull(fmd.getTypeMetaData());\r\n+\r\n+        // note that below, declared type code is promoted\r\n+        fmd = _metaTest3.getField(\"metaField\");\r\n+        assertEquals(JavaTypes.PC, fmd.getTypeCode());\r\n+        assertEquals(JavaTypes.PC, fmd.getDeclaredTypeCode());\r\n+        assertEquals(MetaTest2.class, fmd.getType());\r\n+        assertEquals(Object.class, fmd.getDeclaredType());\r\n+        assertEquals(_metaTest2, fmd.getDeclaredTypeMetaData());\r\n+        assertEquals(_metaTest2, fmd.getTypeMetaData());\r\n+\r\n+        fmd = _metaTest3.getField(\"externalField\");\r\n+        assertTrue(fmd.isExternalized());\r\n+        assertEquals(JavaTypes.MAP, fmd.getTypeCode());\r\n+        assertEquals(JavaTypes.OBJECT, fmd.getDeclaredTypeCode());\r\n+        assertEquals(Map.class, fmd.getType());\r\n+        assertEquals(Object.class, fmd.getDeclaredType());\r\n+        assertEquals(JavaTypes.STRING, fmd.getKey().getTypeCode());\r\n+        assertEquals(JavaTypes.OBJECT, fmd.getKey().getDeclaredTypeCode());\r\n+        assertEquals(String.class, fmd.getKey().getType());\r\n+        assertEquals(Object.class, fmd.getKey().getDeclaredType());\r\n+        assertEquals(JavaTypes.PC, fmd.getElement().getTypeCode());\r\n+        assertEquals(JavaTypes.OBJECT,\r\n+            fmd.getElement().getDeclaredTypeCode());\r\n+        assertEquals(MetaTest2.class, fmd.getElement().getType());\r\n+        assertEquals(Object.class, fmd.getElement().getDeclaredType());\r\n+        assertEquals(_metaTest2, fmd.getElement().getTypeMetaData());\r\n+        assertNull(fmd.getElement().getDeclaredTypeMetaData());\r\n+    }\r\n+}\r"},{"sha":"cb34943098a81128fc3ba84e7e63896f33c36d0e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestExternalValues.java","status":"added","additions":115,"deletions":0,"changes":115,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestExternalValues.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestExternalValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestExternalValues.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,115 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.meta.common.apps.ExternalValues;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+/**\r\n+ * <p>Tests the {@link ExternalValuesFieldMapping}.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class TestExternalValues\r\n+    extends AbstractTestCase {\r\n+\r\n+    public TestExternalValues(String test) {\r\n+        super(test, \"metacactusapp\");\r\n+    }\r\n+\r\n+    public void setUp()\r\n+        throws Exception {\r\n+        deleteAll(ExternalValues.class);\r\n+    }\r\n+\r\n+    public void testInsert() {\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+\r\n+        ExternalValues pc = new ExternalValues();\r\n+        pc.setBooleanToShort(true);\r\n+        pc.setByteToDouble((byte) 4);\r\n+        pc.setIntToFloat(4);\r\n+        pc.setLongToChar(4);\r\n+        pc.setShortToString((short) 4);\r\n+        pc.setFloatToBoolean(4.5f);\r\n+        pc.setDoubleToByte(4.5);\r\n+        pc.setCharToInt('f');\r\n+        pc.setStringToLong(\"foo\");\r\n+\r\n+        pm.persist(pc);\r\n+        Object oid = pm.getObjectId(pc);\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        pc = (ExternalValues) pm.find(ExternalValues.class, oid);\r\n+\r\n+        assertTrue(pc.getBooleanToShort());\r\n+        assertEquals((byte) 4, pc.getByteToDouble());\r\n+        assertEquals(4, pc.getIntToFloat());\r\n+        assertEquals(4, pc.getLongToChar());\r\n+        assertEquals((short) 4, pc.getShortToString());\r\n+        assertTrue(4.5f == pc.getFloatToBoolean());\r\n+        assertTrue(4.5 == pc.getDoubleToByte());\r\n+        assertEquals('f', pc.getCharToInt());\r\n+        assertEquals(\"foo\", pc.getStringToLong());\r\n+\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testComplexStrings() {\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+\r\n+        ExternalValues pc = new ExternalValues();\r\n+        pc.setShortToString((short) 3);\r\n+        pc.setStringToLong(\"long string\");\r\n+\r\n+        pm.persist(pc);\r\n+        Object oid = pm.getObjectId(pc);\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        pc = (ExternalValues) pm.find(ExternalValues.class, oid);\r\n+        assertEquals(3, pc.getShortToString());\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testAllNull() {\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+\r\n+        ExternalValues pc = new ExternalValues();\r\n+        pm.persist(pc);\r\n+        Object oid = pm.getObjectId(pc);\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        pc = (ExternalValues) pm.find(ExternalValues.class, oid);\r\n+        endEm(pm);\r\n+    }\r\n+}\r"},{"sha":"1c1c6f4fcf5802ea8a2a48e02dfde5f61f10fd23","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestFieldDeclarationOrder.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestFieldDeclarationOrder.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestFieldDeclarationOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestFieldDeclarationOrder.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,70 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.meta.common.apps.FieldOrderPC;\r\n+import org.apache.openjpa.persistence.meta.common.apps.FieldOrderPCSubclass;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.meta.FieldMetaData;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+\r\n+public class TestFieldDeclarationOrder\r\n+    extends AbstractTestCase {\r\n+\r\n+    public TestFieldDeclarationOrder(String test) {\r\n+        super(test, \"metacactusapp\");\r\n+    }\r\n+\r\n+    public void testSubclass() {\r\n+        ClassMetaData meta = JPAFacadeHelper\r\n+            .getMetaData(getEmf(),\r\n+                FieldOrderPCSubclass.class);\r\n+        FieldMetaData[] fmds = meta.getFieldsInListingOrder();\r\n+\r\n+        assertEquals(11, fmds.length);\r\n+        assertEquals(\"firstField\", fmds[0].getName());\r\n+        assertEquals(\"secondField\", fmds[1].getName());\r\n+        assertEquals(\"thirdField\", fmds[2].getName());\r\n+        assertEquals(\"unmanagedField\", fmds[3].getName());\r\n+        assertEquals(\"intField\", fmds[4].getName());\r\n+        assertEquals(\"oneToOneField\", fmds[5].getName());\r\n+        assertEquals(\"sub1\", fmds[6].getName());\r\n+        assertEquals(\"sub2\", fmds[7].getName());\r\n+        assertEquals(\"sub3\", fmds[8].getName());\r\n+        assertEquals(\"unmanagedSubField\", fmds[9].getName());\r\n+        assertEquals(\"undeclaredSubField\", fmds[10].getName());\r\n+    }\r\n+\r\n+    public void testSuperclass() {\r\n+        ClassMetaData meta = JPAFacadeHelper\r\n+            .getMetaData(getEmf(),\r\n+                FieldOrderPC.class);\r\n+        FieldMetaData[] fmds = meta.getFieldsInListingOrder();\r\n+\r\n+        assertEquals(6, fmds.length);\r\n+        assertEquals(\"firstField\", fmds[0].getName());\r\n+        assertEquals(\"secondField\", fmds[1].getName());\r\n+        assertEquals(\"thirdField\", fmds[2].getName());\r\n+        assertEquals(\"unmanagedField\", fmds[3].getName());\r\n+        assertEquals(\"intField\", fmds[4].getName());\r\n+        assertEquals(\"oneToOneField\", fmds[5].getName());\r\n+    }\r\n+}\r"},{"sha":"f9360143dbc8994044f15415e131eb3da8f08c2d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestNonPersistentFields.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestNonPersistentFields.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestNonPersistentFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestNonPersistentFields.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,58 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.meta.common.apps.NonPersistentFieldsPC;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.meta.FieldMetaData;\r\n+import org.apache.openjpa.meta.MetaDataRepository;\r\n+\r\n+/**\r\n+ * <p>Tests that fields that should not be persistent actually aren't.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class TestNonPersistentFields\r\n+    extends AbstractTestCase {\r\n+\r\n+    private ClassMetaData _meta = null;\r\n+\r\n+    public TestNonPersistentFields(String test) {\r\n+        super(test, \"metacactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        MetaDataRepository repos = new OpenJPAConfigurationImpl().\r\n+            newMetaDataRepositoryInstance();\r\n+        _meta = repos.getMetaData(NonPersistentFieldsPC.class, null, true);\r\n+    }\r\n+\r\n+    public void testNonPersistentFields() {\r\n+        FieldMetaData[] fmds = _meta.getFields();\r\n+        assertEquals(5, fmds.length);\r\n+        assertEquals(\"persistentField\", fmds[0].getName());\r\n+        assertEquals(\"persistentInterfaceField\", fmds[1].getName());\r\n+        assertEquals(\"persistentObjectField\", fmds[2].getName());\r\n+        assertEquals(\"persistentUserInterfaceField\", fmds[3].getName());\r\n+        assertEquals(\"persistentUserObjectField\", fmds[4].getName());\r\n+    }\r\n+}\r"},{"sha":"737d1e795848d6ae7810879ee5b2e3a52f6f3139","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestOrderBy.java","status":"added","additions":283,"deletions":0,"changes":283,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestOrderBy.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestOrderBy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestOrderBy.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,283 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.meta.common.apps.OrderByPC;\r\n+import org.apache.openjpa.persistence.meta.common.apps.OrderByPCRel;\r\n+import org.apache.openjpa.persistence.meta.common.apps.OrderByPCRelSub;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+import org.apache.openjpa.persistence.FetchPlan;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+/**\r\n+ * <p>Test the <code>order-by</code> field extension.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class TestOrderBy\r\n+    extends AbstractTestCase {\r\n+\r\n+    public TestOrderBy(String test) {\r\n+        super(test, \"metacactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(OrderByPCRel.class);\r\n+        deleteAll(OrderByPC.class);\r\n+    }\r\n+\r\n+    public void testStringList() {\r\n+        stringListTest(false, false);\r\n+    }\r\n+\r\n+    public void testEagerParallelStringList() {\r\n+        stringListTest(true, true);\r\n+    }\r\n+\r\n+    public void testEagerJoinStringList() {\r\n+        stringListTest(true, false);\r\n+    }\r\n+\r\n+    private void stringListTest(boolean eager, boolean parallel) {\r\n+        String[] strs = new String[]{\r\n+            \"9\", \"0\", \"5\", \"1\", \"3\", \"7\", \"8\", \"2\", \"6\", \"4\",\r\n+        };\r\n+        OrderByPC pc = new OrderByPC();\r\n+        pc.setId(1L);\r\n+        pc.getStringListAsc().addAll(Arrays.asList(strs));\r\n+\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        pm.persist(pc);\r\n+        endTx(pm);\r\n+        Object oid = pm.getObjectId(pc);\r\n+        endEm(pm);\r\n+\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        if (eager)\r\n+            ((FetchPlan) pm.getFetchPlan()).addField(OrderByPC.class,\r\n+                \"stringListAsc\");\r\n+        if (parallel) {\r\n+\r\n+            OpenJPAQuery q = pm.createQuery(\r\n+                \"select a FROM \" + OrderByPC.class.getSimpleName());\r\n+            List res = (List) q.getResultList();\r\n+            assertEquals(1, res.size());\r\n+            pc = (OrderByPC) res.get(0);\r\n+        } else\r\n+            pc = (OrderByPC) pm.find(OrderByPC.class, oid);\r\n+        List stringList = pc.getStringListAsc();\r\n+        for (int i = 0; i < 10; i++)\r\n+            assertEquals(String.valueOf(i), stringList.get(i));\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testIntArray() {\r\n+        int[] ints = new int[]{ 9, 0, 5, 1, 3, 7, 8, 2, 6, 4, };\r\n+        OrderByPC pc = new OrderByPC();\r\n+        pc.setId(1L);\r\n+        pc.setIntArrayDesc(ints);\r\n+\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        pm.persist(pc);\r\n+        endTx(pm);\r\n+        Object oid = pm.getObjectId(pc);\r\n+        endEm(pm);\r\n+\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        pc = (OrderByPC) pm.find(OrderByPC.class, oid);\r\n+        int[] intArray = pc.getIntArrayDesc();\r\n+        for (int i = 0; i < 10; i++)\r\n+            assertEquals(9 - i, intArray[i]);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testOrderByPK() {\r\n+        orderByPKTest(false, false, false);\r\n+    }\r\n+\r\n+    public void testEagerJoinOrderByPK() {\r\n+        orderByPKTest(true, false, false);\r\n+    }\r\n+\r\n+    public void testEagerParallelOrderByPK() {\r\n+        orderByPKTest(true, true, false);\r\n+    }\r\n+\r\n+    public void testOneToManyOrderByPK() {\r\n+        orderByPKTest(false, false, true);\r\n+    }\r\n+\r\n+    public void testEagerJoinOneToManyOrderByPK() {\r\n+        orderByPKTest(true, false, true);\r\n+    }\r\n+\r\n+    public void testEagerParallelOneToManyOrderByPK() {\r\n+        orderByPKTest(true, true, true);\r\n+    }\r\n+\r\n+    private void orderByPKTest(boolean eager, boolean parallel,\r\n+        boolean oneToMany) {\r\n+        long[] ids = new long[]{ 9, 0, 5, 1, 3, 7, 8, 2, 6, 4, };\r\n+        OrderByPC pc = new OrderByPC();\r\n+        pc.setId(1L);\r\n+        OrderByPC pc2 = new OrderByPC();\r\n+        pc2.setId(2L);\r\n+        for (int i = 0; i < ids.length; i++) {\r\n+            OrderByPCRel rel = (i % 2 == 0) ? new OrderByPCRel()\r\n+                : new OrderByPCRelSub();\r\n+            rel.setId(ids[i]);\r\n+            if (oneToMany) {\r\n+                pc.getOneToManyAsc().add(rel);\r\n+                rel.setToOne(pc);\r\n+            } else\r\n+                pc.getOrderByPKAsc().add(rel);\r\n+\r\n+            if (parallel)\r\n+                pc2.getOrderByPKAsc().add(rel);\r\n+        }\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        pm.persist(pc);\r\n+        pm.persist(pc2);\r\n+        endTx(pm);\r\n+        Object oid = pm.getObjectId(pc);\r\n+        endEm(pm);\r\n+\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        if (eager)\r\n+            ((FetchPlan) pm.getFetchPlan()).addField(OrderByPC.class,\r\n+                \"orderByPKAsc\");\r\n+        if (parallel) {\r\n+\r\n+            OpenJPAQuery q = pm.createQuery(\"select a FROM \" +\r\n+                OrderByPC.class.getSimpleName() + \" select order by id asc\");\r\n+            pc = (OrderByPC) ((List) q.getResultList()).get(0);\r\n+            q.closeAll();\r\n+        } else\r\n+            pc = (OrderByPC) pm.find(OrderByPC.class, oid);\r\n+\r\n+        List orderByPK = (oneToMany) ? pc.getOneToManyAsc()\r\n+            : pc.getOrderByPKAsc();\r\n+        for (int i = 0; i < 10; i++)\r\n+            assertEquals(i, ((OrderByPCRel) orderByPK.get(i)).getId());\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testOrderByRelatedField() {\r\n+        String[] strs = new String[]{\r\n+            \"9\", \"0\", \"5\", \"1\", \"3\", \"7\", \"8\", \"2\", \"6\", \"4\",\r\n+        };\r\n+        OrderByPC pc = new OrderByPC();\r\n+        pc.setId(1L);\r\n+        for (int i = 0; i < strs.length; i++) {\r\n+            OrderByPCRel rel = (i % 2 == 0) ? new OrderByPCRel()\r\n+                : new OrderByPCRelSub();\r\n+            rel.setId(i);\r\n+            rel.setString(strs[i]);\r\n+            pc.getOrderByStringDesc().add(rel);\r\n+        }\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        pm.persist(pc);\r\n+        endTx(pm);\r\n+        Object oid = pm.getObjectId(pc);\r\n+        endEm(pm);\r\n+\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        pc = (OrderByPC) pm.find(OrderByPC.class, oid);\r\n+        List orderByRelField = pc.getOrderByStringDesc();\r\n+        for (int i = 0; i < 10; i++)\r\n+            assertEquals(String.valueOf(9 - i), ((OrderByPCRel)\r\n+                orderByRelField.get(i)).getString());\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testOrderByPKAndRelatedField() {\r\n+        orderByPKAndRelatedFieldTest(false, false);\r\n+    }\r\n+\r\n+    public void testEagerJoinOrderByPKAndRelatedField() {\r\n+        orderByPKAndRelatedFieldTest(true, false);\r\n+    }\r\n+\r\n+    public void testEagerParallelOrderByPKAndRelatedField() {\r\n+        orderByPKAndRelatedFieldTest(true, true);\r\n+    }\r\n+\r\n+    private void orderByPKAndRelatedFieldTest(boolean eager, boolean parallel) {\r\n+        OrderByPC pc = new OrderByPC();\r\n+        pc.setId(1L);\r\n+        OrderByPC pc2 = new OrderByPC();\r\n+        pc.setId(2L);\r\n+\r\n+        OrderByPCRel rel1 = new OrderByPCRel();\r\n+        rel1.setId(1L);\r\n+        rel1.setString(\"1\");\r\n+        OrderByPCRel rel2 = new OrderByPCRelSub();\r\n+        rel2.setId(2L);\r\n+        rel2.setString(\"1\");\r\n+        OrderByPCRel rel3 = new OrderByPCRel();\r\n+        rel3.setId(3L);\r\n+        rel3.setString(\"2\");\r\n+        OrderByPCRel rel4 = new OrderByPCRelSub();\r\n+        rel4.setId(4L);\r\n+        rel4.setString(\"2\");\r\n+        pc.getOrderByStringAndPKDesc().addAll(Arrays.asList\r\n+            (new Object[]{ rel1, rel2, rel4, rel3, }));\r\n+        if (parallel)\r\n+            pc2.getOrderByStringAndPKDesc().addAll(Arrays.asList\r\n+                (new Object[]{ rel1, rel2, rel4, rel3, }));\r\n+\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        pm.persist(pc);\r\n+        pm.persist(pc2);\r\n+        endTx(pm);\r\n+        Object oid = pm.getObjectId(pc);\r\n+        endEm(pm);\r\n+\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        if (eager)\r\n+            ((FetchPlan) pm.getFetchPlan()).addField(OrderByPC.class,\r\n+                \"orderByStringAndPKDesc\");\r\n+        if (parallel) {\r\n+            OpenJPAQuery q = pm.createQuery(\"select a FROM \" +\r\n+                OrderByPC.class.getSimpleName() + \" select order by id asc\");\r\n+            pc = (OrderByPC) ((List) q.getResultList()).get(0);\r\n+            q.closeAll();\r\n+        } else\r\n+            pc = (OrderByPC) pm.find(OrderByPC.class, oid);\r\n+        List multiOrder = pc.getOrderByStringAndPKDesc();\r\n+        for (int i = 0; i < 4; i++)\r\n+            assertEquals(4 - i, ((OrderByPCRel) multiOrder.get(i)).getId());\r\n+        endEm(pm);\r\n+    }\r\n+}\r"},{"sha":"5a5ad547ccda6bed0e9be50674f35b48464df7dc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestPersistentClasses.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestPersistentClasses.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestPersistentClasses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestPersistentClasses.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,111 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+import org.apache.openjpa.persistence.meta.common.apps.RuntimeTest1;\r\n+import org.apache.openjpa.persistence.meta.common.apps.RuntimeTest2;\r\n+import org.apache.openjpa.persistence.meta.common.apps.RuntimeTest3;\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n+\r\n+public class TestPersistentClasses\r\n+    extends AbstractTestCase {\r\n+\r\n+    public TestPersistentClasses(String test) {\r\n+        super(test, \"metacactusapp\");\r\n+    }\r\n+\r\n+    private void assertClass(Class cls, OpenJPAConfiguration conf,\r\n+        boolean shouldExist) {\r\n+        assertClass(cls.getName(), conf, shouldExist);\r\n+    }\r\n+\r\n+    private void assertClass(String clsName, OpenJPAConfiguration conf,\r\n+        boolean shouldExist) {\r\n+\r\n+        Collection names = conf.getMetaDataRepositoryInstance().\r\n+            getPersistentTypeNames(false, null);\r\n+\r\n+        if (shouldExist)\r\n+            assertTrue(\"expected element \" + clsName + \" was not found in \"\r\n+                + names, names.contains(clsName));\r\n+        else\r\n+            assertTrue(\"unexpected element \" + clsName + \" was found in \"\r\n+                + names, !names.contains(clsName));\r\n+    }\r\n+\r\n+    public void testNoneConfigured() {\r\n+\r\n+        Map map = new HashMap();\r\n+        map.put(\"openjpa.MetaDataFactory\", \"jpa\");\r\n+        OpenJPAEntityManagerFactory pmf = getEmf(map);\r\n+\r\n+        assertNull(((OpenJPAEntityManagerFactorySPI) pmf).getConfiguration()\r\n+            .getMetaDataRepositoryInstance().\r\n+\r\n+            getPersistentTypeNames(false, null));\r\n+\r\n+        pmf.close();\r\n+    }\r\n+\r\n+    public void testJPAClasspathScanner() {\r\n+        Map map = new HashMap();\r\n+        map.put(\"openjpa.MetaDataFactory\", \"jpa(ClasspathScan=src;jdk1.5-test)\");\r\n+        OpenJPAEntityManagerFactory pmf = getEmf(map);\r\n+\r\n+        assertClass(RuntimeTest1.class,\r\n+            ((OpenJPAEntityManagerFactorySPI) pmf).getConfiguration(), false);\r\n+\r\n+        assertClass(RuntimeTest2.class,\r\n+            ((OpenJPAEntityManagerFactorySPI) pmf).getConfiguration(), false);\r\n+\r\n+        assertClass(\"openjpa.meta.GenericFields\",\r\n+            ((OpenJPAEntityManagerFactorySPI) pmf).getConfiguration(), true);\r\n+\r\n+        pmf.close();\r\n+    }\r\n+\r\n+    public void testTypes() {\r\n+\r\n+        Map map = new HashMap();\r\n+\r\n+        map.put(\"openjpa.MetaDataFactory\",\r\n+            \"jpa(Types=org.apache.openjpa.persistence.kernel.RuntimeTest1;\" +\r\n+                \"org.apache.openjpa.persistence.kernel.RuntimeTest2)\");\r\n+\r\n+        OpenJPAEntityManagerFactory pmf = getEmf(map);\r\n+        assertClass(RuntimeTest1.class,\r\n+            ((OpenJPAEntityManagerFactorySPI) pmf).getConfiguration(), true);\r\n+\r\n+        assertClass(RuntimeTest2.class,\r\n+            ((OpenJPAEntityManagerFactorySPI) pmf).getConfiguration(), true);\r\n+\r\n+        assertClass(RuntimeTest3.class,\r\n+            ((OpenJPAEntityManagerFactorySPI) pmf).getConfiguration(), false);\r\n+\r\n+        pmf.close();\r\n+    }\r\n+}\r\n+\r"},{"sha":"7834539336241f886ec69446c450deee7a8b348c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestSequenceAssigned.java","status":"added","additions":172,"deletions":0,"changes":172,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestSequenceAssigned.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestSequenceAssigned.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestSequenceAssigned.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,172 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.meta.common.apps.SequenceAssigned;\r\n+import org.apache.openjpa.persistence.meta.common.apps.SequenceAssigned2;\r\n+import org.apache.openjpa.persistence.meta.common.apps.SequenceAssigned3;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+public class TestSequenceAssigned\r\n+    extends AbstractTestCase {\r\n+\r\n+    public TestSequenceAssigned(String testName) {\r\n+        super(testName, \"metacactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(SequenceAssigned.class);\r\n+        deleteAll(SequenceAssigned3.class);\r\n+    }\r\n+\r\n+    public void testGetObjectId() {\r\n+        SequenceAssigned pc = new SequenceAssigned();\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        pm.persist(pc);\r\n+        SequenceAssigned.Id id = (SequenceAssigned.Id)\r\n+            pm.getObjectId(pc);\r\n+        assertTrue(0 != id.pk);\r\n+        assertTrue(0 != pc.getPK());\r\n+        assertEquals(pc.getPK(), id.pk);\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testGetValue() {\r\n+        SequenceAssigned pc = new SequenceAssigned();\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        assertEquals(0, pc.getPK());\r\n+        pm.persist(pc);\r\n+        assertTrue(0 != pc.getPK());\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testPrimitive() {\r\n+        SequenceAssigned pc = new SequenceAssigned();\r\n+        SequenceAssigned pc2 = new SequenceAssigned();\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        pm.persist(pc);\r\n+        pm.persist(pc2);\r\n+        pm.flush();\r\n+        assertTrue(0 != pc.getPK());\r\n+        assertTrue(0 != pc2.getPK());\r\n+        assertTrue(pc.getPK() != pc2.getPK());\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testManualAssign() {\r\n+        SequenceAssigned pc = new SequenceAssigned();\r\n+        SequenceAssigned3 pc2 = new SequenceAssigned3();\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        pc.setPK(-100);\r\n+        pc2.setPK(new Long(-100));\r\n+        pm.persist(pc);\r\n+        pm.persist(pc2);\r\n+        pm.flush();\r\n+        endTx(pm);\r\n+        Object oid = pm.getObjectId(pc);\r\n+        Object oid2 = pm.getObjectId(pc2);\r\n+        endEm(pm);\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        pc = (SequenceAssigned) pm.find(SequenceAssigned.class, oid);\r\n+        pc2 = (SequenceAssigned3) pm.find(SequenceAssigned3.class, oid2);\r\n+        assertEquals(-100, pc.getPK());\r\n+        assertEquals(new Long(-100), pc2.getPK());\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testInheritance() {\r\n+        SequenceAssigned2 pc = new SequenceAssigned2();\r\n+        SequenceAssigned2 pc2 = new SequenceAssigned2();\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        pm.persist(pc);\r\n+        pm.persist(pc2);\r\n+        pm.flush();\r\n+        assertTrue(0 != pc.getPK());\r\n+        assertTrue(0 != pc2.getPK());\r\n+        assertTrue(pc.getPK() != pc2.getPK());\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testWrapper() {\r\n+        SequenceAssigned3 pc = new SequenceAssigned3();\r\n+        SequenceAssigned3 pc2 = new SequenceAssigned3();\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        pm.persist(pc);\r\n+        pm.persist(pc2);\r\n+        pm.flush();\r\n+        assertNotNull(pc.getPK());\r\n+        assertNotNull(pc2.getPK());\r\n+        assertTrue(0 != pc.getPK().longValue());\r\n+        assertTrue(0 != pc2.getPK().longValue());\r\n+        assertNotEquals(pc.getPK(), pc2.getPK());\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testGetObjectById() {\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        SequenceAssigned pc = new SequenceAssigned();\r\n+        pm.persist(pc);\r\n+        Object oid = pm.getObjectId(pc);\r\n+        assertTrue(0 != ((SequenceAssigned.Id) oid).pk);\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        pm.find(SequenceAssigned.class, oid);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testReachability() {\r\n+        SequenceAssigned pc = new SequenceAssigned();\r\n+        SequenceAssigned pc2 = new SequenceAssigned();\r\n+        pc.setOther(pc2);\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        pm.persist(pc);\r\n+        endTx(pm);\r\n+        SequenceAssigned.Id id = (SequenceAssigned.Id)\r\n+            pm.getObjectId(pc2);\r\n+        assertTrue(0 != id.pk);\r\n+        assertTrue(0 != pc2.getPK());\r\n+        assertEquals(pc2.getPK(), id.pk);\r\n+        endEm(pm);\r\n+    }\r\n+}\r"},{"sha":"0e4bd761b1817a7b86d21532c83e1eb4506e08c3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestValueStrategies.java","status":"added","additions":404,"deletions":0,"changes":404,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestValueStrategies.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestValueStrategies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestValueStrategies.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,404 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta;\r\n+\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import javax.persistence.EntityManagerFactory;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.meta.common.apps.ValueStrategyPC;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.util.OpenJPAException;\r\n+\r\n+/**\r\n+ * <p>Test value and update strategies.  Also tests version fields, which\r\n+ * are represented in JDO as a value strategy.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class TestValueStrategies\r\n+    extends AbstractTestCase {\r\n+\r\n+    public TestValueStrategies(String test) {\r\n+        super(test, \"metacactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(ValueStrategyPC.class);\r\n+    }\r\n+\r\n+    public void testIgnoreUpdate() {\r\n+        ValueStrategyPC pc = new ValueStrategyPC();\r\n+        pc.setName(\"pc\");\r\n+        pc.setIgnoreUpdate(10);\r\n+\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        pm.persist(pc);\r\n+        assertEquals(10, pc.getIgnoreUpdate());\r\n+        endTx(pm);\r\n+        Object oid = pm.getObjectId(pc);\r\n+        endEm(pm);\r\n+\r\n+        //pm = getPM(false, false);\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        pc = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid);\r\n+        assertNotNull(pc);\r\n+        assertEquals(10, pc.getIgnoreUpdate());\r\n+        startTx(pm);\r\n+        pc.setIgnoreUpdate(100);\r\n+        assertFalse(pm.isDirty(pc));\r\n+        pm.transactional(pc, false);\r\n+        endTx(pm);\r\n+        assertEquals(10, pc.getIgnoreUpdate());\r\n+        endEm(pm);\r\n+\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        pc = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid);\r\n+        assertNotNull(pc);\r\n+        assertEquals(10, pc.getIgnoreUpdate());\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testRestrictUpdate() {\r\n+        ValueStrategyPC pc = new ValueStrategyPC();\r\n+        pc.setName(\"pc\");\r\n+        pc.setRestrictUpdate(10);\r\n+\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        pm.persist(pc);\r\n+        assertEquals(10, pc.getRestrictUpdate());\r\n+        endTx(pm);\r\n+        Object oid = pm.getObjectId(pc);\r\n+        endEm(pm);\r\n+\r\n+        //pm = getPM(false, false);\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        pc = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid);\r\n+        assertNotNull(pc);\r\n+        assertEquals(10, pc.getRestrictUpdate());\r\n+        startTx(pm);\r\n+        try {\r\n+            pc.setRestrictUpdate(100);\r\n+            fail(\"Allowed update of restricted field.\");\r\n+        } catch (RuntimeException re) {\r\n+        }\r\n+        endTx(pm);\r\n+        assertEquals(10, pc.getRestrictUpdate());\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testUUID() {\r\n+        ValueStrategyPC pc = new ValueStrategyPC();\r\n+        ValueStrategyPC pc2 = new ValueStrategyPC();\r\n+        pc.setName(\"pc\");\r\n+        pc2.setName(\"pc2\");\r\n+        assertNull(pc.getUUID());\r\n+        assertNull(pc2.getUUID());\r\n+        assertNull(pc.getUUIDHex());\r\n+        assertNull(pc2.getUUIDHex());\r\n+\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        pm.setOptimistic(true);\r\n+        startTx(pm);\r\n+        pm.persist(pc);\r\n+        pm.persist(pc2);\r\n+        String str = pc.getUUID();\r\n+        String hex = pc.getUUIDHex();\r\n+        assertTrue(!pm.isStoreActive());    // no flush needed\r\n+        endTx(pm);\r\n+        String str2 = pc2.getUUID();\r\n+        String hex2 = pc2.getUUIDHex();\r\n+        Object oid = pm.getObjectId(pc);\r\n+        Object oid2 = pm.getObjectId(pc2);\r\n+        endEm(pm);\r\n+\r\n+        assertNotNull(str);\r\n+        assertNotNull(str2);\r\n+        assertTrue(!str.equals(str2));\r\n+        assertNotNull(hex);\r\n+        assertNotNull(hex2);\r\n+        assertTrue(!hex.equals(hex2));\r\n+\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        pc = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid);\r\n+        pc2 = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid2);\r\n+        assertEquals(str, pc.getUUID());\r\n+        assertEquals(str2, pc2.getUUID());\r\n+        assertEquals(hex, pc.getUUIDHex());\r\n+        assertEquals(hex2, pc2.getUUIDHex());\r\n+        startTx(pm);\r\n+        pc.setUUIDHex(\"foo\");\r\n+        pc2.setUUIDHex(\"bar\");\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        pc = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid);\r\n+        pc2 = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid2);\r\n+        assertEquals(\"foo\", pc.getUUIDHex());\r\n+        assertEquals(\"bar\", pc2.getUUIDHex());\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testSequence() {\r\n+        ValueStrategyPC pc = new ValueStrategyPC();\r\n+        ValueStrategyPC pc2 = new ValueStrategyPC();\r\n+        pc.setName(\"pc\");\r\n+        pc2.setName(\"pc2\");\r\n+        assertEquals(0, pc.getSequence());\r\n+        assertEquals(0, pc2.getSequence());\r\n+\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        pm.setOptimistic(true);\r\n+        startTx(pm);\r\n+        pm.persist(pc);\r\n+        pm.persist(pc2);\r\n+        int seq = pc.getSequence();\r\n+        assertTrue(!pm.isStoreActive());    // no flush needed\r\n+        endTx(pm);\r\n+        int seq2 = pc2.getSequence();\r\n+        Object oid = pm.getObjectId(pc);\r\n+        Object oid2 = pm.getObjectId(pc2);\r\n+        endEm(pm);\r\n+\r\n+        assertTrue(seq > 0);\r\n+        assertTrue(seq2 > 0);\r\n+        assertTrue(seq != seq2);\r\n+\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        pc = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid);\r\n+        pc2 = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid2);\r\n+        assertEquals(seq, pc.getSequence());\r\n+        assertEquals(seq2, pc2.getSequence());\r\n+        startTx(pm);\r\n+        pc.setSequence(99);\r\n+        pc2.setSequence(100);\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        pc = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid);\r\n+        pc2 = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid2);\r\n+        assertEquals(99, pc.getSequence());\r\n+        assertEquals(100, pc2.getSequence());\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testVersion() {\r\n+        versionTest(getEmf());\r\n+    }\r\n+\r\n+    public void testVersionDataCache() {\r\n+\r\n+        Map map = new HashMap();\r\n+        map.put(\"openjpa.DataCache\", \"true\");\r\n+        map.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n+        versionTest(getEmf(map));\r\n+    }\r\n+\r\n+    private void versionTest(EntityManagerFactory pmf) {\r\n+        ValueStrategyPC pc = new ValueStrategyPC();\r\n+        pc.setName(\"pc\");\r\n+\r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)\r\n+            pmf.createEntityManager();\r\n+        startTx(pm);\r\n+        pm.persist(pc);\r\n+        ClassMetaData meta = getConfiguration()\r\n+            .getMetaDataRepositoryInstance().\r\n+            getMetaData(pc.getClass(), null, false);\r\n+        assertNotNull(meta.getVersionField());\r\n+        assertEquals(\"version\", meta.getVersionField().getName());\r\n+        assertEquals(0, pc.getVersion());\r\n+        endTx(pm);\r\n+        assertEquals(1, pc.getVersion());\r\n+        Object oid = pm.getObjectId(pc);\r\n+        endEm(pm);\r\n+\r\n+        // do no-op commit\r\n+        pm = (OpenJPAEntityManager) pmf.createEntityManager();\r\n+        pc = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid);\r\n+        assertNotNull(pc);\r\n+        assertEquals(1, pc.getVersion());\r\n+        startTx(pm);\r\n+        try {\r\n+            pc.setVersion(10);\r\n+            fail(\"Allowed change to version field.\");\r\n+        } catch (RuntimeException re) {\r\n+        }\r\n+        endTx(pm);\r\n+        assertEquals(1, pc.getVersion());\r\n+        endEm(pm);\r\n+\r\n+        // do real commit\r\n+        pm = (OpenJPAEntityManager) pmf.createEntityManager();\r\n+        pc = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid);\r\n+        assertNotNull(pc);\r\n+        assertEquals(1, pc.getVersion());\r\n+        startTx(pm);\r\n+        pc.setName(\"changed\");\r\n+        pm.flush();\r\n+        assertEquals(1, pc.getVersion());\r\n+        endTx(pm);\r\n+        assertEquals(\"changed\", pc.getName());\r\n+        assertEquals(2, pc.getVersion());\r\n+        endEm(pm);\r\n+\r\n+        // rollback\r\n+        pm = (OpenJPAEntityManager) pmf.createEntityManager();\r\n+        pc = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid);\r\n+        assertNotNull(pc);\r\n+        assertEquals(2, pc.getVersion());\r\n+        startTx(pm);\r\n+        pc.setName(\"changed2\");\r\n+        pm.flush();\r\n+        assertEquals(2, pc.getVersion());\r\n+        rollbackTx(pm);\r\n+        assertEquals(2, pc.getVersion());\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testVersionDetach() {\r\n+        ValueStrategyPC pc = new ValueStrategyPC();\r\n+        ValueStrategyPC pc2 = new ValueStrategyPC();\r\n+        pc.setName(\"pc\");\r\n+        pc2.setName(\"pc2\");\r\n+\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        pm.persist(pc);\r\n+        pm.persist(pc2);\r\n+        endTx(pm);\r\n+        startTx(pm);\r\n+        pc.setName(\"changed\");\r\n+        pc2.setName(\"changed2\");\r\n+        endTx(pm);\r\n+        assertEquals(2, pc.getVersion());\r\n+        assertEquals(2, pc2.getVersion());\r\n+        ValueStrategyPC detached = (ValueStrategyPC) pm.detach(pc);\r\n+        ValueStrategyPC detached2 = (ValueStrategyPC) pm.detach(pc2);\r\n+        endEm(pm);\r\n+\r\n+        // clean attach\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        pc = (ValueStrategyPC) pm.merge(detached);\r\n+        assertEquals(2, pc.getVersion());\r\n+        endTx(pm);\r\n+        assertEquals(2, pc.getVersion());\r\n+        endEm(pm);\r\n+\r\n+        // dirty attach\r\n+        detached.setName(\"changed-detached\");\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        pc = (ValueStrategyPC) pm.merge(detached);\r\n+        assertEquals(2, pc.getVersion());\r\n+        endTx(pm);\r\n+        assertEquals(3, pc.getVersion());\r\n+        endEm(pm);\r\n+\r\n+        // stale attach\r\n+        detached.setName(\"stale\");\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        try {\r\n+            pm.merge(detached);\r\n+            endTx(pm);\r\n+            fail(\"Committed stale version.\");\r\n+        } catch (OpenJPAException je) {\r\n+        }\r\n+        if (isActiveTx(pm))\r\n+            rollbackTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        // modify version field in detached; allow either exception or\r\n+        // allow the update to be ignored\r\n+        detached2.setName(\"changed2-detached\");\r\n+        detached2.setVersion(99);\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        try {\r\n+            pc2 = (ValueStrategyPC) pm.merge(detached2);\r\n+            assertEquals(2, pc2.getVersion());\r\n+            endTx(pm);\r\n+            assertEquals(3, pc2.getVersion());\r\n+        } catch (OpenJPAException je) {\r\n+        }\r\n+        if (isActiveTx(pm))\r\n+            rollbackTx(pm);\r\n+        ;\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testVersionRefresh() {\r\n+        ValueStrategyPC pc = new ValueStrategyPC();\r\n+        pc.setName(\"pc\");\r\n+\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        pm.persist(pc);\r\n+        endTx(pm);\r\n+        startTx(pm);\r\n+        pc.setName(\"changed\");\r\n+        endTx(pm);\r\n+        assertEquals(2, pc.getVersion());\r\n+\r\n+        // clean refresh\r\n+        startTx(pm);\r\n+        pm.refresh(pc);\r\n+        assertEquals(2, pc.getVersion());\r\n+\r\n+        // concurrent mod\r\n+        OpenJPAEntityManager pm2 =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm2);\r\n+        ValueStrategyPC pc2 = (ValueStrategyPC) pm2.find\r\n+            (ValueStrategyPC.class, pm2.getObjectId(pc));\r\n+        pc2.setName(\"changed2\");\r\n+        endTx(pm2);\r\n+        assertEquals(3, pc2.getVersion());\r\n+        endEm(pm2);\r\n+\r\n+        // stale refresh\r\n+        pm.refresh(pc);\r\n+        assertEquals(3, pc.getVersion());\r\n+\r\n+        // dirty refresh\r\n+        pc.setName(\"changed-1\");\r\n+        pm.refresh(pc);\r\n+        assertEquals(3, pc.getVersion());\r\n+\r\n+        pc.setName(\"changed-2\");\r\n+        endTx(pm);\r\n+        assertEquals(4, pc.getVersion());\r\n+        endEm(pm);\r\n+    }\r\n+}\r"},{"sha":"4fc2d7c662acf77e1a0c2589bb63a20bde025bf6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestXMLPersistenceMetaDataSerializer.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestXMLPersistenceMetaDataSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestXMLPersistenceMetaDataSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestXMLPersistenceMetaDataSerializer.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,75 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta;\r\n+\r\n+import java.io.ByteArrayInputStream;\r\n+import java.io.ByteArrayOutputStream;\r\n+import java.io.InputStreamReader;\r\n+import java.io.OutputStreamWriter;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.meta.common.apps.MetaTest1;\r\n+import org.apache.openjpa.persistence.meta.common.apps.MetaTest2;\r\n+import org.apache.openjpa.persistence.meta.common.apps.MetaTest3;\r\n+import org.apache.openjpa.persistence.meta.common.apps.MetaTest5;\r\n+import org.apache.openjpa.persistence.meta.common.apps.MetaTest6;\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\r\n+import org.apache.openjpa.meta.MetaDataRepository;\r\n+import org.apache.openjpa.persistence.XMLPersistenceMetaDataParser;\r\n+import org.apache.openjpa.persistence.XMLPersistenceMetaDataSerializer;\r\n+\r\n+/**\r\n+ * <p>Tests the {@link MetaDataSerializer} by parsing all the metadata\r\n+ * files, serializing them to a buffer, then deserializing them from the\r\n+ * buffer and invoking the tests defined by {@link TestClassMetaData}.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class TestXMLPersistenceMetaDataSerializer\r\n+    extends TestClassMetaData {\r\n+\r\n+    public TestXMLPersistenceMetaDataSerializer(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    protected MetaDataRepository getRepository()\r\n+        throws Exception {\r\n+        OpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\r\n+        MetaDataRepository repos = conf.newMetaDataRepositoryInstance();\r\n+        repos.getMetaData(MetaTest5.class, null, true);\r\n+        repos.getMetaData(MetaTest3.class, null, true);\r\n+        repos.getMetaData(MetaTest2.class, null, true);\r\n+        repos.getMetaData(MetaTest1.class, null, true);\r\n+        repos.getMetaData(MetaTest6.class, null, true);\r\n+\r\n+        XMLPersistenceMetaDataSerializer ser =\r\n+            new XMLPersistenceMetaDataSerializer(conf);\r\n+        ser.addAll(repos);\r\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n+        ser.serialize(new OutputStreamWriter(out), ser.PRETTY);\r\n+        byte[] bytes = out.toByteArray();\r\n+\r\n+        XMLPersistenceMetaDataParser parser =\r\n+            new XMLPersistenceMetaDataParser(conf);\r\n+        parser.parse(new InputStreamReader\r\n+            (new ByteArrayInputStream(bytes)), \"bytes\");\r\n+        return parser.getRepository();\r\n+    }\r\n+}\r"},{"sha":"7fc91dd12fae0b24fb13f647ce5b84ff05cdfa37","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ExternalValues.java","status":"added","additions":108,"deletions":0,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ExternalValues.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ExternalValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ExternalValues.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,108 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta.common.apps;\r\n+\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class ExternalValues {\r\n+\r\n+    private boolean booleanToShort;\r\n+    private byte byteToDouble;\r\n+    private int intToFloat;\r\n+    private long longToChar;\r\n+    private short shortToString;\r\n+    private float floatToBoolean;\r\n+    private double doubleToByte;\r\n+    private char charToInt;\r\n+    private String stringToLong;\r\n+\r\n+    public boolean getBooleanToShort() {\r\n+        return booleanToShort;\r\n+    }\r\n+\r\n+    public void setBooleanToShort(boolean b) {\r\n+        booleanToShort = b;\r\n+    }\r\n+\r\n+    public byte getByteToDouble() {\r\n+        return byteToDouble;\r\n+    }\r\n+\r\n+    public void setByteToDouble(byte b) {\r\n+        byteToDouble = b;\r\n+    }\r\n+\r\n+    public int getIntToFloat() {\r\n+        return intToFloat;\r\n+    }\r\n+\r\n+    public void setIntToFloat(int i) {\r\n+        intToFloat = i;\r\n+    }\r\n+\r\n+    public long getLongToChar() {\r\n+        return longToChar;\r\n+    }\r\n+\r\n+    public void setLongToChar(long l) {\r\n+        longToChar = l;\r\n+    }\r\n+\r\n+    public short getShortToString() {\r\n+        return shortToString;\r\n+    }\r\n+\r\n+    public void setShortToString(short s) {\r\n+        shortToString = s;\r\n+    }\r\n+\r\n+    public double getDoubleToByte() {\r\n+        return doubleToByte;\r\n+    }\r\n+\r\n+    public void setDoubleToByte(double d) {\r\n+        doubleToByte = d;\r\n+    }\r\n+\r\n+    public float getFloatToBoolean() {\r\n+        return floatToBoolean;\r\n+    }\r\n+\r\n+    public void setFloatToBoolean(float f) {\r\n+        floatToBoolean = f;\r\n+    }\r\n+\r\n+    public char getCharToInt() {\r\n+        return charToInt;\r\n+    }\r\n+\r\n+    public void setCharToInt(char c) {\r\n+        charToInt = c;\r\n+    }\r\n+\r\n+    public String getStringToLong() {\r\n+        return stringToLong;\r\n+    }\r\n+\r\n+    public void setStringToLong(String s) {\r\n+        stringToLong = s;\r\n+    }\r\n+}\r"},{"sha":"d91d58c8ff3fae6d7eeb0a7b7bea17d2b0c41a55","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPC.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,34 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class FieldOrderPC {\r\n+\r\n+    private transient String firstField;\r\n+    private static char staticField;\r\n+    private int intField;\r\n+    private int thirdField;\r\n+    private int unmanagedField;\r\n+    private final Long finalField = null;\r\n+    private Double secondField;\r\n+    private FieldOrderPC oneToOneField;\r\n+}\n\\ No newline at end of file"},{"sha":"f08fed3b0cf7a79574e14894c4ef6d268d2d5c75","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPCSubclass.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPCSubclass.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPCSubclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPCSubclass.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,32 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class FieldOrderPCSubclass\r\n+    extends FieldOrderPC {\r\n+\r\n+    private transient String sub1;\r\n+    private int sub2;\r\n+    private Double sub3;\r\n+    private int unmanagedSubField;\r\n+    private int undeclaredSubField;\r\n+}\n\\ No newline at end of file"},{"sha":"da6a4e2a9ac2ea64c42171b96d1214e3a0e551b2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest1.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,58 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+import org.apache.openjpa.persistence.PersistentCollection;\r\n+\r\n+@Entity\r\n+public class MetaTest1 {\r\n+\r\n+    // these should not be persistent\r\n+    private static int staticField;\r\n+    private final String finalField = null;\r\n+    private transient char transientField;\r\n+    private MetaTest4 metaTest4Field;\r\n+    //@OneToMany(mappedBy=\"MetaTest4\", fetch=FetchType.LAZY)\r\n+    @PersistentCollection\r\n+    private java.util.Set<MetaTest4> metaTest4ArrayField;\r\n+    //private MetaTest4[] metaTest4ArrayField;\r\n+    private Object objectField;\r\n+    private Long longWrapperField;\r\n+    private double doubleField;\r\n+\r\n+    // persistent fields -- see metadata\r\n+    private String stringField;\r\n+    private Integer intWrapperField;\r\n+    private int intField;\r\n+    private MetaTest2 metaTest2Field;\r\n+    //@OneToMany(mappedBy=\"MetaTest2\", fetch=FetchType.LAZY)\r\n+    @PersistentCollection\r\n+    private java.util.Set<MetaTest2> metaTest2ArrayField;\r\n+    //private MetaTest2[] metaTest2ArrayField;\r\n+    @PersistentCollection\r\n+    private int[] intArrayField;\r\n+\r\n+    @Entity\r\n+    public static class Inner {\r\n+\r\n+        private long longField;\r\n+    }\r\n+}\r"},{"sha":"356e392732528d08d7241f84d9ea0f29e12e0998","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest2.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,37 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta.common.apps;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.Map;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.ManyToOne;\r\n+\r\n+@Entity\r\n+public class MetaTest2\r\n+    extends MetaTest1 {\r\n+\r\n+    private Collection collectionField1;\r\n+    private Collection collectionField2;\r\n+    private Map mapField1;\r\n+    private Map mapField2;\r\n+    @ManyToOne(fetch = FetchType.LAZY)\r\n+    private MetaTest2 metaTest2Field;\r\n+}\r"},{"sha":"a01c4bc92ca16517ee20ee4385177863b2f2a72a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest3.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest3.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest3.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,41 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta.common.apps;\r\n+\r\n+import java.util.Map;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class MetaTest3\r\n+    extends MetaTest2 {\r\n+\r\n+    private Object pcField;\r\n+    private Object externalField;\r\n+    private Object metaField;\r\n+\r\n+    public static Map toMap(Object fieldValue) {\r\n+        // dummy method\r\n+        return null;\r\n+    }\r\n+\r\n+    public static Object fromMap(Map externalValue) {\r\n+        // dummy method\r\n+        return null;\r\n+    }\r\n+}\r"},{"sha":"dd3f58e6a1cfa501c65fb161da0a0e008333f5cf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest4.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest4.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest4.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,26 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class MetaTest4 {\r\n+\r\n+}\r"},{"sha":"f8506d7440a99cc38b36af45a76bafb3ac6284f2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest5.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest5.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest5.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest5.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,57 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+/**\r\n+ * <p>Persistent type used in the testing of the JDO metadata.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public abstract class MetaTest5 {\r\n+\r\n+    private long id;\r\n+\r\n+    public static class MetaTest5Id {\r\n+\r\n+        public long id;\r\n+\r\n+        public MetaTest5Id() {\r\n+        }\r\n+\r\n+        public MetaTest5Id(String str) {\r\n+            id = Long.parseLong(str);\r\n+        }\r\n+\r\n+        public String toString() {\r\n+            return String.valueOf(id);\r\n+        }\r\n+\r\n+        public boolean equals(Object other) {\r\n+            return other instanceof MetaTest5Id\r\n+                && ((MetaTest5Id) other).id == id;\r\n+        }\r\n+\r\n+        public int hashCode() {\r\n+            return (int) (id % Integer.MAX_VALUE);\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"5f4c05cb3091b4b063e9d42fff48672f9a87deba","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest6.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest6.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest6.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest6.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,28 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class MetaTest6\r\n+    extends MetaTest5 {\r\n+\r\n+    private String name;\r\n+}\r"},{"sha":"44b7c49a92937849b2140cff1f247b0e7b3c530b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/NonPersistentFieldsPC.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/NonPersistentFieldsPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/NonPersistentFieldsPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/NonPersistentFieldsPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,43 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta.common.apps;\r\n+\r\n+import java.io.Serializable;\r\n+import javax.persistence.Entity;\r\n+\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+\r\n+@Entity\r\n+public class NonPersistentFieldsPC {\r\n+\r\n+    private String persistentField;\r\n+    private String nonPersistentField;\r\n+    private Object objectField;\r\n+    private Serializable interfaceField;\r\n+    private ClassMetaData userObjectField;\r\n+    private ClassMetaData userInterfaceField;\r\n+    private Object explicitObjectField;\r\n+    private Serializable explicitInterfaceField;\r\n+    private ClassMetaData explicitUserObjectField;\r\n+    private ClassMetaData explicitUserInterfaceField;\r\n+    private Object persistentObjectField;\r\n+    private Serializable persistentInterfaceField;\r\n+    private ClassMetaData persistentUserObjectField;\r\n+    private ClassMetaData persistentUserInterfaceField;\r\n+}\r"},{"sha":"a64237b6c39f1231e1e061d7e2602bda5fab83d2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPC.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,76 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta.common.apps;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+import javax.persistence.Entity;\r\n+\r\n+import org.apache.openjpa.persistence.PersistentCollection;\r\n+\r\n+@Entity\r\n+public class OrderByPC {\r\n+\r\n+    private long id;\r\n+\r\n+    private List stringListAsc = new ArrayList();\r\n+    @PersistentCollection\r\n+    private int[] intArrayDesc;\r\n+    private List orderByPKAsc = new ArrayList();\r\n+    private List orderByStringDesc = new ArrayList();\r\n+    private List orderByStringAndPKDesc = new ArrayList();\r\n+\r\n+    private List oneToManyAsc = new ArrayList();\r\n+\r\n+    public long getId() {\r\n+        return this.id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public List getStringListAsc() {\r\n+        return this.stringListAsc;\r\n+    }\r\n+\r\n+    public int[] getIntArrayDesc() {\r\n+        return this.intArrayDesc;\r\n+    }\r\n+\r\n+    public void setIntArrayDesc(int[] intArrayDesc) {\r\n+        this.intArrayDesc = intArrayDesc;\r\n+    }\r\n+\r\n+    public List getOrderByPKAsc() {\r\n+        return this.orderByPKAsc;\r\n+    }\r\n+\r\n+    public List getOrderByStringDesc() {\r\n+        return this.orderByStringDesc;\r\n+    }\r\n+\r\n+    public List getOrderByStringAndPKDesc() {\r\n+        return this.orderByStringAndPKDesc;\r\n+    }\r\n+\r\n+    public List getOneToManyAsc() {\r\n+        return this.oneToManyAsc;\r\n+    }\r\n+}\r"},{"sha":"b416bb52f02a965e9536c444938003e0958faabd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRel.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRel.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRel.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRel.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,53 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class OrderByPCRel {\r\n+\r\n+    private long id;\r\n+    private String string;\r\n+    private OrderByPC toOne;\r\n+\r\n+    public long getId() {\r\n+        return this.id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getString() {\r\n+        return this.string;\r\n+    }\r\n+\r\n+    public void setString(String string) {\r\n+        this.string = string;\r\n+    }\r\n+\r\n+    public OrderByPC getToOne() {\r\n+        return this.toOne;\r\n+    }\r\n+\r\n+    public void setToOne(OrderByPC toOne) {\r\n+        this.toOne = toOne;\r\n+    }\r\n+}\r"},{"sha":"b3786cbd84e168cc88dd6a48a69a3a1f381844b1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRelSub.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRelSub.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRelSub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRelSub.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,36 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class OrderByPCRelSub\r\n+    extends OrderByPCRel {\r\n+\r\n+    private int sub;\r\n+\r\n+    public int getSub() {\r\n+        return this.sub;\r\n+    }\r\n+\r\n+    public void setSub(int sub) {\r\n+        this.sub = sub;\r\n+    }\r\n+}\r"},{"sha":"205b9a06b9f3c63d5178293697b352ca4875b21e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest1.java","status":"added","additions":268,"deletions":0,"changes":268,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,268 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta.common.apps;\r\n+\r\n+import java.io.Serializable;\r\n+import java.math.BigDecimal;\r\n+import java.math.BigInteger;\r\n+import java.util.Date;\r\n+import java.util.HashSet;\r\n+import java.util.Locale;\r\n+import java.util.Set;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class RuntimeTest1\r\n+    implements Serializable {\r\n+\r\n+    public static final String someStaticField = \"someField\";\r\n+\r\n+    private byte byteField;\r\n+    private boolean booleanField;\r\n+    private char charField;\r\n+    private double doubleField;\r\n+    private float floatField;\r\n+    private int intField;\r\n+    private long longField;\r\n+    private short shortField;\r\n+    private String stringField;\r\n+    private BigInteger bigIntegerField;\r\n+    private BigDecimal bigDecimalField;\r\n+    private Date dateField;\r\n+    private Locale localeField;\r\n+    private Byte byteObjfield;\r\n+    private Boolean booleanObjField;\r\n+    private Character charObjField;\r\n+    private Double doubleObjField;\r\n+    private Float floatObjField;\r\n+    private Integer intObjField;\r\n+    private Long longObjField;\r\n+    private Short shortObjField;\r\n+\r\n+    // transactional only\r\n+    private TransactionalClassPC transField;\r\n+    public String transString;\r\n+\r\n+    // relations\r\n+    private RuntimeTest1 selfOneOne;\r\n+    private Set selfOneMany = new HashSet();\r\n+\r\n+    public RuntimeTest1() {\r\n+    }\r\n+\r\n+    public RuntimeTest1(String str, int i) {\r\n+        stringField = str;\r\n+        intField = i;\r\n+        //FIXME Seetha Oct 25,2006\r\n+        //mySQL 0.0 float issue\r\n+        floatField = 1.0f;\r\n+    }\r\n+\r\n+    public byte getByteField() {\r\n+        return this.byteField;\r\n+    }\r\n+\r\n+    public void setByteField(byte byteField) {\r\n+        this.byteField = byteField;\r\n+    }\r\n+\r\n+    public boolean getBooleanField() {\r\n+        return this.booleanField;\r\n+    }\r\n+\r\n+    public void setBooleanField(boolean booleanField) {\r\n+        this.booleanField = booleanField;\r\n+    }\r\n+\r\n+    public char getCharField() {\r\n+        return this.charField;\r\n+    }\r\n+\r\n+    public void setCharField(char charField) {\r\n+        this.charField = charField;\r\n+    }\r\n+\r\n+    public double getDoubleField() {\r\n+        return this.doubleField;\r\n+    }\r\n+\r\n+    public void setDoubleField(double doubleField) {\r\n+        this.doubleField = doubleField;\r\n+    }\r\n+\r\n+    public float getFloatField() {\r\n+        return this.floatField;\r\n+    }\r\n+\r\n+    public void setFloatField(float floatField) {\r\n+        this.floatField = floatField;\r\n+    }\r\n+\r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+\r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+\r\n+    public long getLongField() {\r\n+        return this.longField;\r\n+    }\r\n+\r\n+    public void setLongField(long longField) {\r\n+        this.longField = longField;\r\n+    }\r\n+\r\n+    public short getShortField() {\r\n+        return this.shortField;\r\n+    }\r\n+\r\n+    public void setShortField(short shortField) {\r\n+        this.shortField = shortField;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return this.stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+\r\n+    public BigInteger getBigIntegerField() {\r\n+        return this.bigIntegerField;\r\n+    }\r\n+\r\n+    public void setBigIntegerField(BigInteger bigIntegerField) {\r\n+        this.bigIntegerField = bigIntegerField;\r\n+    }\r\n+\r\n+    public BigDecimal getBigDecimalField() {\r\n+        return this.bigDecimalField;\r\n+    }\r\n+\r\n+    public void setBigDecimalField(BigDecimal bigDecimalField) {\r\n+        this.bigDecimalField = bigDecimalField;\r\n+    }\r\n+\r\n+    public Date getDateField() {\r\n+        return this.dateField;\r\n+    }\r\n+\r\n+    public void setDateField(Date dateField) {\r\n+        this.dateField = dateField;\r\n+    }\r\n+\r\n+    public Locale getLocaleField() {\r\n+        return this.localeField;\r\n+    }\r\n+\r\n+    public void setLocaleField(Locale localeField) {\r\n+        this.localeField = localeField;\r\n+    }\r\n+\r\n+    public Byte getByteObjfield() {\r\n+        return this.byteObjfield;\r\n+    }\r\n+\r\n+    public void setByteObjfield(Byte byteObjfield) {\r\n+        this.byteObjfield = byteObjfield;\r\n+    }\r\n+\r\n+    public Boolean getBooleanObjField() {\r\n+        return this.booleanObjField;\r\n+    }\r\n+\r\n+    public void setBooleanObjField(Boolean booleanObjField) {\r\n+        this.booleanObjField = booleanObjField;\r\n+    }\r\n+\r\n+    public Character getCharObjField() {\r\n+        return this.charObjField;\r\n+    }\r\n+\r\n+    public void setCharObjField(Character charObjField) {\r\n+        this.charObjField = charObjField;\r\n+    }\r\n+\r\n+    public Double getDoubleObjField() {\r\n+        return this.doubleObjField;\r\n+    }\r\n+\r\n+    public void setDoubleObjField(Double doubleObjField) {\r\n+        this.doubleObjField = doubleObjField;\r\n+    }\r\n+\r\n+    public Float getFloatObjField() {\r\n+        return this.floatObjField;\r\n+    }\r\n+\r\n+    public void setFloatObjField(Float floatObjField) {\r\n+        this.floatObjField = floatObjField;\r\n+    }\r\n+\r\n+    public Integer getIntObjField() {\r\n+        return this.intObjField;\r\n+    }\r\n+\r\n+    public void setIntObjField(Integer intObjField) {\r\n+        this.intObjField = intObjField;\r\n+    }\r\n+\r\n+    public Long getLongObjField() {\r\n+        return this.longObjField;\r\n+    }\r\n+\r\n+    public void setLongObjField(Long longObjField) {\r\n+        this.longObjField = longObjField;\r\n+    }\r\n+\r\n+    public Short getShortObjField() {\r\n+        return this.shortObjField;\r\n+    }\r\n+\r\n+    public void setShortObjField(Short shortObjField) {\r\n+        this.shortObjField = shortObjField;\r\n+    }\r\n+\r\n+    public TransactionalClassPC getTransField() {\r\n+        return this.transField;\r\n+    }\r\n+\r\n+    public void setTransField(TransactionalClassPC transField) {\r\n+        this.transField = transField;\r\n+    }\r\n+\r\n+    public RuntimeTest1 getSelfOneOne() {\r\n+        return this.selfOneOne;\r\n+    }\r\n+\r\n+    public void setSelfOneOne(RuntimeTest1 selfOneOne) {\r\n+        this.selfOneOne = selfOneOne;\r\n+    }\r\n+\r\n+    public Set getSelfOneMany() {\r\n+        return this.selfOneMany;\r\n+    }\r\n+\r\n+    public void setSelfOneMany(Set selfOneMany) {\r\n+        this.selfOneMany = selfOneMany;\r\n+    }\r\n+}\r"},{"sha":"4a87cd801283ba719e7a1078cc758f6fa591e2e7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest2.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,43 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class RuntimeTest2\r\n+    extends RuntimeTest1 {\r\n+\r\n+    private int intField2;\r\n+\r\n+    public RuntimeTest2() {\r\n+    }\r\n+\r\n+    public RuntimeTest2(String str, int i) {\r\n+        super(str, i);\r\n+    }\r\n+\r\n+    public int getIntField2() {\r\n+        return this.intField2;\r\n+    }\r\n+\r\n+    public void setIntField2(int intField2) {\r\n+        this.intField2 = intField2;\r\n+    }\r\n+}\r"},{"sha":"8b24fcbc8ba3965ca37161dede4ac57bf0550995","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest3.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest3.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest3.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,43 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class RuntimeTest3\r\n+    extends RuntimeTest2 {\r\n+\r\n+    private int intField3;\r\n+\r\n+    public RuntimeTest3() {\r\n+    }\r\n+\r\n+    public RuntimeTest3(String str, int i) {\r\n+        super(str, i);\r\n+    }\r\n+\r\n+    public int getIntField3() {\r\n+        return this.intField3;\r\n+    }\r\n+\r\n+    public void setIntField3(int intField3) {\r\n+        this.intField3 = intField3;\r\n+    }\r\n+}\r"},{"sha":"ae57fabb0c963bcde709bc871ce74970b698f7ae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,70 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class SequenceAssigned {\r\n+\r\n+    private long pk;\r\n+    private SequenceAssigned other;\r\n+\r\n+    public void setPK(long l) {\r\n+        pk = l;\r\n+    }\r\n+\r\n+    public long getPK() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public void setOther(SequenceAssigned other) {\r\n+        this.other = other;\r\n+    }\r\n+\r\n+    public SequenceAssigned getOther() {\r\n+        return other;\r\n+    }\r\n+\r\n+    public static class Id implements java.io.Serializable {\r\n+\r\n+        public long pk;\r\n+\r\n+        public Id() {\r\n+        }\r\n+\r\n+        public Id(String str) {\r\n+            pk = Long.parseLong(str);\r\n+        }\r\n+\r\n+        public int hashCode() {\r\n+            return (int) (pk % (long) Integer.MAX_VALUE);\r\n+        }\r\n+\r\n+        public String toString() {\r\n+            return pk + \"\";\r\n+        }\r\n+\r\n+        public boolean equals(Object o) {\r\n+            if (o == null || !(o instanceof Id))\r\n+                return false;\r\n+            return pk == ((Id) o).pk;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"603ebe355722b868ff0539180d51da4457cdd818","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned2.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,27 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class SequenceAssigned2 extends SequenceAssigned {\r\n+\r\n+    private int foo;\r\n+}\r"},{"sha":"bc0073195a643208d34a060fe837835a8b7874e5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned3.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned3.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned3.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,62 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class SequenceAssigned3 {\r\n+\r\n+    private Long pk;\r\n+\r\n+    public void setPK(Long l) {\r\n+        pk = l;\r\n+    }\r\n+\r\n+    public Long getPK() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public static class Id implements java.io.Serializable {\r\n+\r\n+        public Long pk;\r\n+\r\n+        public Id() {\r\n+        }\r\n+\r\n+        public Id(String str) {\r\n+            pk = Long.valueOf(str);\r\n+        }\r\n+\r\n+        public int hashCode() {\r\n+            return (int) (pk == null ? 0 : pk.longValue()\r\n+                % (long) Integer.MAX_VALUE);\r\n+        }\r\n+\r\n+        public String toString() {\r\n+            return pk + \"\";\r\n+        }\r\n+\r\n+        public boolean equals(Object o) {\r\n+            if (o == null || !(o instanceof Id))\r\n+                return false;\r\n+            return pk == ((Id) o).pk;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"de75a337b8dff48fe6000776610a802bd629d440","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/TransactionalClassPC.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/TransactionalClassPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/TransactionalClassPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/TransactionalClassPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,41 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * <p>Persitent type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+\r\n+@Entity\r\n+public class TransactionalClassPC {\r\n+\r\n+    private int intField;\r\n+\r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+\r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+}\r"},{"sha":"70940708fd40b54c8744a98b83ad1ae2aaadea3a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ValueStrategyPC.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ValueStrategyPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ValueStrategyPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ValueStrategyPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,89 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class ValueStrategyPC {\r\n+\r\n+    private String uuid;\r\n+    private String uuidHex;\r\n+    private String name;\r\n+    private int ignoreUpdate;\r\n+    private int restrictUpdate;\r\n+    private int version;\r\n+    private int sequence;\r\n+\r\n+    public String getName() {\r\n+        return this.name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public int getIgnoreUpdate() {\r\n+        return this.ignoreUpdate;\r\n+    }\r\n+\r\n+    public void setIgnoreUpdate(int ignoreUpdate) {\r\n+        this.ignoreUpdate = ignoreUpdate;\r\n+    }\r\n+\r\n+    public int getRestrictUpdate() {\r\n+        return this.restrictUpdate;\r\n+    }\r\n+\r\n+    public void setRestrictUpdate(int restrictUpdate) {\r\n+        this.restrictUpdate = restrictUpdate;\r\n+    }\r\n+\r\n+    public String getUUID() {\r\n+        return this.uuid;\r\n+    }\r\n+\r\n+    public void setUUID(String uuid) {\r\n+        this.uuid = uuid;\r\n+    }\r\n+\r\n+    public String getUUIDHex() {\r\n+        return this.uuidHex;\r\n+    }\r\n+\r\n+    public void setUUIDHex(String uuidHex) {\r\n+        this.uuidHex = uuidHex;\r\n+    }\r\n+\r\n+    public int getVersion() {\r\n+        return this.version;\r\n+    }\r\n+\r\n+    public void setVersion(int version) {\r\n+        this.version = version;\r\n+    }\r\n+\r\n+    public int getSequence() {\r\n+        return this.sequence;\r\n+    }\r\n+\r\n+    public void setSequence(int sequence) {\r\n+        this.sequence = sequence;\r\n+    }\r\n+}\r"},{"sha":"aa724176cefc87955f89769a507bd25cc48bcfe7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/BaseQueryTest.java","status":"added","additions":146,"deletions":0,"changes":146,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/BaseQueryTest.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/BaseQueryTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/BaseQueryTest.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,146 @@\n+/*\r\n+ * BaseKernelTest.java\r\n+ *\r\n+ * Created on October 9, 2006, 12:56 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Properties;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n+import org.apache.openjpa.lib.conf.ConfigurationProvider;\r\n+import org.apache.openjpa.lib.conf.Configurations;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+public abstract class BaseQueryTest extends org.apache.openjpa.persistence.common.utils.AbstractTestCase {\r\n+\r\n+    private static Map _sysprops = new HashMap();\r\n+\r\n+    /**\r\n+     * Creates a new instance of BaseQueryTest\r\n+     */\r\n+    public BaseQueryTest(String name) {\r\n+        super(name, \"querycactusapp\");\r\n+    }\r\n+\r\n+    protected OpenJPAEntityManager getPM() {\r\n+        return (OpenJPAEntityManager) currentEntityManager();\r\n+    }\r\n+\r\n+    protected OpenJPAEntityManager getPM(boolean optimistic,\r\n+        boolean retainValues) {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        em.setNontransactionalRead(true);\r\n+        em.setRetainState(retainValues);\r\n+        em.setOptimistic(optimistic);\r\n+        return em;\r\n+    }\r\n+\r\n+    /**\r\n+     * Delete all instances of the given class.\r\n+     */\r\n+    protected int deleteAll(Broker broker, Class clazz,\r\n+        boolean subclasses) {\r\n+        final boolean useDeleteByQuery = false;\r\n+\r\n+        if (useDeleteByQuery) {\r\n+            org.apache.openjpa.kernel.Query query = broker.newQuery(\r\n+                JPQLParser.LANG_JPQL, clazz, \"\");\r\n+            query.setCandidateType(clazz, subclasses);\r\n+            return (int) query.deleteAll();\r\n+        } else {\r\n+            org.apache.openjpa.kernel.Extent extent =\r\n+                broker.newExtent(clazz, subclasses);\r\n+            List list = extent.list();\r\n+            int size = list.size();\r\n+            broker.deleteAll(list, null);\r\n+            return size;\r\n+        }\r\n+    }\r\n+\r\n+    protected Object persist(Object ob) {\r\n+        Broker broker = getBrokerFactory().newBroker();\r\n+        broker.begin();\r\n+        broker.persist(ob, null);\r\n+        Object id = broker.getObjectId(ob);\r\n+        broker.commit();\r\n+        broker.close();\r\n+        return id;\r\n+    }\r\n+\r\n+    protected Properties getProperties() {\r\n+        return getProperties(null);\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the runtime properties, optionally overriding or setting\r\n+     * some via the given array, which should be in the form\r\n+     * { key, val, key, val, ... }.\r\n+     */\r\n+    protected synchronized Properties getProperties(String[] props) {\r\n+        Properties p = new Properties(System.getProperties());\r\n+        String str = p.getProperty(\"openjpa.properties\", \"kodo.properties\");\r\n+        if (str != null && str.length() > 0) {\r\n+            // cache system properties to reduce load on file system\r\n+            Properties loaded = (Properties) _sysprops.get(str);\r\n+            if (loaded == null) {\r\n+                loaded = new Properties();\r\n+                ConfigurationProvider cp =\r\n+                    (ConfigurationProvider) Configurations\r\n+                        .getProperty(str, null);\r\n+                if (cp != null)\r\n+                    loaded.putAll(cp.getProperties());\r\n+                _sysprops.put(str, loaded);\r\n+            }\r\n+            p.putAll(loaded);\r\n+        }\r\n+\r\n+        for (int i = 0; props != null && i < props.length; i += 2) {\r\n+            if (props[i + 1] != null) {\r\n+                // remove any duplicate kodo/openjpa property so we don't clash\r\n+                if (props[i].startsWith(\"openjpa.\"))\r\n+                    p.remove(\"openjpa.\" + props[i].substring(5));\r\n+                else if (props[i].startsWith(\"openjpa.\"))\r\n+                    p.remove(\"openjpa.\" + props[i].substring(8));\r\n+\r\n+                p.setProperty(props[i], props[i + 1]);\r\n+            } else {\r\n+                p.remove(props[i]);\r\n+            }\r\n+        }\r\n+        return p;\r\n+    }\r\n+}\r"},{"sha":"0e1027a4b27106785e69f1334283535c76479076","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestAccessPathsOfSubqueries.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestAccessPathsOfSubqueries.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestAccessPathsOfSubqueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestAccessPathsOfSubqueries.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,90 @@\n+/*\r\n+ * TestAccessPathsOfSubqueries.java\r\n+ *\r\n+ * Created on October 17, 2006, 2:51 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.Collection;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest1;\r\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest4;\r\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest5;\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.Query;\r\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+\r\n+public class TestAccessPathsOfSubqueries extends BaseQueryTest {\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestAccessPathsOfSubqueries\r\n+     */\r\n+\r\n+    public TestAccessPathsOfSubqueries(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void testSimpleSubqueryAccessPath() {\r\n+        Broker broker = getBrokerFactory().newBroker();\r\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL,\r\n+            \"SELECT o FROM RuntimeTest1 o WHERE EXISTS (SELECT rt5.name FROM RuntimeTest5 rt5 WHERE rt5.name IS NOT NULL)\");\r\n+        ClassMetaData[] metas = q.getAccessPathMetaDatas();\r\n+        Collection c = Arrays.asList(metas);\r\n+        ClassMetaData rt1 = broker.getConfiguration().\r\n+            getMetaDataRepositoryInstance().getMetaData(RuntimeTest1.class,\r\n+            broker.getClassLoader(), true);\r\n+        ClassMetaData rt5 = broker.getConfiguration().\r\n+            getMetaDataRepositoryInstance().getMetaData(RuntimeTest5.class,\r\n+            broker.getClassLoader(), true);\r\n+        assertTrue(c.contains(rt1));\r\n+        assertTrue(c.contains(rt5));\r\n+        assertEquals(2, c.size());\r\n+    }\r\n+\r\n+    public void testRelationTraversalSubqueryAccessPath() {\r\n+        Broker broker = getBrokerFactory().newBroker();\r\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL,\r\n+            \"SELECT o FROM RuntimeTest1 o WHERE EXISTS (SELECT rt5.runtimeTest4.name FROM RuntimeTest5 rt5 WHERE rt5.name IS NOT NULL)\");\r\n+\r\n+        ClassMetaData[] metas = q.getAccessPathMetaDatas();\r\n+        Collection c = Arrays.asList(metas);\r\n+        ClassMetaData rt1 = broker.getConfiguration().\r\n+            getMetaDataRepositoryInstance().getMetaData(RuntimeTest1.class,\r\n+            broker.getClassLoader(), true);\r\n+        ClassMetaData rt4 = broker.getConfiguration().\r\n+            getMetaDataRepositoryInstance().getMetaData(RuntimeTest4.class,\r\n+            broker.getClassLoader(), true);\r\n+        ClassMetaData rt5 = broker.getConfiguration().\r\n+            getMetaDataRepositoryInstance().getMetaData(RuntimeTest5.class,\r\n+            broker.getClassLoader(), true);\r\n+        assertTrue(c.contains(rt1));\r\n+        assertTrue(c.contains(rt4));\r\n+        assertTrue(c.contains(rt5));\r\n+        assertEquals(3, c.size());\r\n+    }\r\n+}\r"},{"sha":"a2060a558d800dcd94baf7375dc65bda41a5c044","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestComplexQueries.java","status":"added","additions":422,"deletions":0,"changes":422,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestComplexQueries.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestComplexQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestComplexQueries.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,422 @@\n+/*\r\n+ * TestComplexQueries.java\r\n+ *\r\n+ * Created on October 17, 2006, 2:59 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.apache.openjpa.persistence.query.common.apps.ComplexA;\r\n+import org.apache.openjpa.persistence.query.common.apps.ComplexB;\r\n+import org.apache.openjpa.persistence.query.common.apps.ComplexC;\r\n+import org.apache.openjpa.persistence.query.common.apps.ComplexD;\r\n+import org.apache.openjpa.persistence.query.common.apps.ComplexE;\r\n+import org.apache.openjpa.persistence.query.common.apps.ComplexF;\r\n+import org.apache.openjpa.persistence.query.common.apps.ComplexG;\r\n+import junit.framework.AssertionFailedError;\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+public class TestComplexQueries extends BaseQueryTest {\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestComplexQueries\r\n+     */\r\n+\r\n+    public TestComplexQueries(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        clear();\r\n+    }\r\n+\r\n+    public void clear() {\r\n+        deleteAll(ComplexA.class);\r\n+        deleteAll(ComplexB.class);\r\n+        deleteAll(ComplexC.class);\r\n+        deleteAll(ComplexD.class);\r\n+        deleteAll(ComplexE.class);\r\n+        deleteAll(ComplexF.class);\r\n+        deleteAll(ComplexG.class);\r\n+    }\r\n+\r\n+    public void complexQuery(int size, Object ob, String filter, Class c) {\r\n+\r\n+//        PersistenceManager pm = getPM();\r\n+        Broker broker = getBrokerFactory().newBroker();\r\n+        broker.setIgnoreChanges(false);\r\n+        broker.begin();\r\n+\r\n+        broker.persist(ob, null);\r\n+        // test in-memory\r\n+        // assertSize (size, pm.newQuery (c, filter));\r\n+        broker.commit();\r\n+\r\n+        broker.begin();\r\n+        // test against database\r\n+//        OpenJPAQuery q = pm.createQuery(\"SELECT o FROM \"+c.getSimpleName()+\"o WHERE o.\"+filter);\r\n+        String qstrng =\r\n+            \"SELECT o FROM \" + c.getSimpleName() + \" o WHERE o.\" + filter;\r\n+        assertSize(size,\r\n+            (List) broker.newQuery(JPQLParser.LANG_JPQL, c, qstrng).execute());\r\n+\r\n+        broker.commit();\r\n+        broker.close();\r\n+\r\n+        broker = getBrokerFactory().newBroker();\r\n+        broker.begin();\r\n+        // test again against a new PM, for good measure\r\n+        assertSize(size,\r\n+            (List) broker.newQuery(JPQLParser.LANG_JPQL, c, qstrng).execute());\r\n+        broker.rollback();\r\n+\r\n+        broker.close();\r\n+    }\r\n+\r\n+    public void testComplex1() {\r\n+        complexQuery(1,\r\n+            new ComplexA(\"test\", 0, null, null),\r\n+            \"stringA = \\'test\\'\",\r\n+            ComplexA.class);\r\n+    }\r\n+\r\n+    public void testComplex2() {\r\n+        complexQuery(1,\r\n+            new ComplexG(\"testg\", 0, null,\r\n+                new ComplexF(\"testf\", 0, null, null,\r\n+                    new ComplexE(\"teste\", 0, null, null,\r\n+                        new ComplexD(\"testd\", 0, null, null,\r\n+                            new ComplexC(\"testc\", 0, null, null,\r\n+                                new ComplexB(\"testb\", 0, null, null,\r\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n+            \"stringG = \\'testg\\'\",\r\n+            ComplexG.class);\r\n+    }\r\n+\r\n+    public void testComplex3() {\r\n+        complexQuery(1,\r\n+            new ComplexG(\"testg\", 0, null,\r\n+                new ComplexF(\"testf\", 0, null, null,\r\n+                    new ComplexE(\"teste\", 0, null, null,\r\n+                        new ComplexD(\"testd\", 0, null, null,\r\n+                            new ComplexC(\"testc\", 0, null, null,\r\n+                                new ComplexB(\"testb\", 0, null, null,\r\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n+            \"f.e.d.c.b.a.stringA = \\'testa\\'\",\r\n+            ComplexG.class);\r\n+    }\r\n+\r\n+    public void testComplex4() {\r\n+        complexQuery(1,\r\n+            new ComplexG(\"testg\", 0, null,\r\n+                new ComplexF(\"testf\", 0, null, null,\r\n+                    new ComplexE(\"teste\", 0, null, null,\r\n+                        new ComplexD(\"testd\", 0, null, null,\r\n+                            new ComplexC(\"testc\", 0, null, null,\r\n+                                new ComplexB(\"testb\", 0, null, null,\r\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n+            \"f.e.d.c.b.a.stringA = \\'testa\\'\"\r\n+                + \" AND o.f.e.d.c.b.stringB = \\'testb\\'\",\r\n+            ComplexG.class);\r\n+    }\r\n+\r\n+    public void testComplex5() {\r\n+        complexQuery(1,\r\n+            new ComplexG(\"testg\", 0, null,\r\n+                new ComplexF(\"testf\", 0, null, null,\r\n+                    new ComplexE(\"teste\", 0, null, null,\r\n+                        new ComplexD(\"testd\", 0, null, null,\r\n+                            new ComplexC(\"testc\", 0, null, null,\r\n+                                new ComplexB(\"testb\", 0, null, null,\r\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n+            \"f.e.d.c.b.a.stringA = \\'testa\\'\"\r\n+                + \" AND o.f.e.d.c.b.stringB = \\'testb\\'\"\r\n+                + \" AND o.f.e.d.c.stringC = \\'testc\\'\",\r\n+            ComplexG.class);\r\n+    }\r\n+\r\n+    public void testComplex6() {\r\n+        complexQuery(1,\r\n+            new ComplexG(\"testg\", 0, null,\r\n+                new ComplexF(\"testf\", 0, null, null,\r\n+                    new ComplexE(\"teste\", 0, null, null,\r\n+                        new ComplexD(\"testd\", 0, null, null,\r\n+                            new ComplexC(\"testc\", 0, null, null,\r\n+                                new ComplexB(\"testb\", 0, null, null,\r\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n+            \"f.e.d.c.b.a.stringA = \\'testa\\'\"\r\n+                + \" AND o.f.e.d.c.b.stringB = \\'testb\\'\"\r\n+                + \" AND o.f.e.d.c.stringC = \\'testc\\'\"\r\n+                + \" AND o.f.e.d.stringD = \\'testd\\'\",\r\n+            ComplexG.class);\r\n+    }\r\n+\r\n+    public void testComplex7() {\r\n+        complexQuery(1,\r\n+            new ComplexG(\"testg\", 0, null,\r\n+                new ComplexF(\"testf\", 0, null, null,\r\n+                    new ComplexE(\"teste\", 0, null, null,\r\n+                        new ComplexD(\"testd\", 0, null, null,\r\n+                            new ComplexC(\"testc\", 0, null, null,\r\n+                                new ComplexB(\"testb\", 0, null, null,\r\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n+            \"f.e.d.c.b.a.stringA = \\'testa\\'\"\r\n+                + \" AND o.f.e.d.c.b.stringB = \\'testb\\'\"\r\n+                + \" AND o.f.e.d.c.stringC = \\'testc\\'\"\r\n+                + \" AND o.f.e.d.stringD = \\'testd\\'\"\r\n+                + \" AND o.f.e.stringE = \\'teste\\'\",\r\n+            ComplexG.class);\r\n+    }\r\n+\r\n+    public void testComplex8() {\r\n+        complexQuery(1,\r\n+            new ComplexG(\"testg\", 0, null,\r\n+                new ComplexF(\"testf\", 0, null, null,\r\n+                    new ComplexE(\"teste\", 0, null, null,\r\n+                        new ComplexD(\"testd\", 0, null, null,\r\n+                            new ComplexC(\"testc\", 0, null, null,\r\n+                                new ComplexB(\"testb\", 0, null, null,\r\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n+            \"f.e.d.c.b.a.stringA = \\'testa\\'\"\r\n+                + \" AND o.f.e.d.c.b.stringB = \\'testb\\'\"\r\n+                + \" AND o.f.e.d.c.stringC = \\'testc\\'\"\r\n+                + \" AND o.f.e.d.stringD = \\'testd\\'\"\r\n+                + \" AND o.f.e.stringE = \\'teste\\'\"\r\n+                + \" AND o.f.stringF = \\'testf\\'\",\r\n+            ComplexG.class);\r\n+    }\r\n+\r\n+    public void testComplex9() {\r\n+        complexQuery(1,\r\n+            new ComplexG(\"testg\", 0, null,\r\n+                new ComplexF(\"testf\", 0, null, null,\r\n+                    new ComplexE(\"teste\", 0, null, null,\r\n+                        new ComplexD(\"testd\", 0, null, null,\r\n+                            new ComplexC(\"testc\", 0, null, null,\r\n+                                new ComplexB(\"testb\", 0, null, null,\r\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n+            \"f.e.d.c.b.a.stringA = \\'testa\\'\"\r\n+                + \" AND o.f.e.d.c.b.stringB = \\'testb\\'\"\r\n+                + \" AND o.f.e.d.c.stringC = \\'testc\\'\"\r\n+                + \" AND o.f.e.d.stringD = \\'testd\\'\"\r\n+                + \" AND o.f.e.stringE = \\'teste\\'\"\r\n+                + \" AND o.f.stringF = \\'testf\\'\"\r\n+                + \" AND o.f.e.d.intD < 1\"\r\n+                + \" AND o.f.e.d.intD > -1\",\r\n+            ComplexG.class);\r\n+    }\r\n+\r\n+    public void testComplex10() {\r\n+        complexQuery(1,\r\n+            new ComplexG(\"testg\", 0, null,\r\n+                new ComplexF(\"testf\", 0, null, null,\r\n+                    new ComplexE(\"teste\", 0, null, null,\r\n+                        new ComplexD(\"testd\", 0, null, null,\r\n+                            new ComplexC(\"testc\", 0, null, null,\r\n+                                new ComplexB(\"testb\", 0, null, null,\r\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n+            \"f.stringF = \\'testf\\'\",\r\n+            ComplexG.class);\r\n+    }\r\n+\r\n+    public void testComplex11() {\r\n+        complexQuery(1,\r\n+            new ComplexG(\"testg\", 0, null,\r\n+                new ComplexF(\"testf\", 0, null, null,\r\n+                    new ComplexE(\"teste\", 0, null, null,\r\n+                        new ComplexD(\"testd\", 0, null, null,\r\n+                            new ComplexC(\"testc\", 0, null, null,\r\n+                                new ComplexB(\"testb\", 0, null, null,\r\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n+            \"f.stringF = \\'testf\\' AND o.stringG = \\'testg\\'\",\r\n+            ComplexG.class);\r\n+    }\r\n+\r\n+    public void testComplex12() {\r\n+        try {\r\n+            complexQuery(1,\r\n+                new ComplexG(\"testg\", 0, null,\r\n+                    new ComplexF(\"testf\", 0, null, null,\r\n+                        new ComplexE(\"teste\", 0, null, null,\r\n+                            new ComplexD(\"testd\", 0, null, null,\r\n+                                new ComplexC(\"testc\", 0, null, null,\r\n+                                    new ComplexB(\"testb\", 0, null, null,\r\n+                                        new ComplexA(\"testa\", 0, null,\r\n+                                            null))))))),\r\n+                \"f.stringF = \\'testf\\'OR o.stringG = \\'testg\\'\",\r\n+                ComplexG.class);\r\n+        } catch (junit.framework.AssertionFailedError afe) {\r\n+            bug(449, afe, \"ORs and relational queries\");\r\n+        }\r\n+    }\r\n+\r\n+    public void testComplex13() {\r\n+        complexQuery(0,\r\n+            new ComplexG(\"testg\", 0, null,\r\n+                new ComplexF(\"testf\", 0, null, null,\r\n+                    new ComplexE(\"teste\", 0, null, null,\r\n+                        new ComplexD(\"testd\", 0, null, null,\r\n+                            new ComplexC(\"testc\", 0, null, null,\r\n+                                new ComplexB(\"testb\", 0, null, null,\r\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n+            \"f.stringF = \\'testfXXX\\'\",\r\n+            ComplexG.class);\r\n+    }\r\n+\r\n+    public void testRelationsIgnoreCache() {\r\n+        try {\r\n+            relationsIgnoreCacheTest();\r\n+        } catch (AssertionFailedError afe) {\r\n+            bug(631, afe, \"IgnoreCache=false queries do not detect \"\r\n+                + \"all relationship changed\");\r\n+        }\r\n+    }\r\n+\r\n+    public void relationsIgnoreCacheTest() {\r\n+        OpenJPAEntityManager pm;\r\n+        ComplexC c = new ComplexC();\r\n+        ComplexB b = new ComplexB();\r\n+        ComplexA a = new ComplexA();\r\n+\r\n+        c.setB(b);\r\n+        b.setA(a);\r\n+\r\n+        a.setStringA(\"Foo\");\r\n+        pm = getPM();\r\n+        startTx(pm);\r\n+        pm.persist(c);\r\n+        endTx(pm);\r\n+\r\n+        assertSize(1,\r\n+            getPM().createNativeQuery(\"b.a.stringA = \\'Foo\\'\", ComplexC.class));\r\n+        assertSize(0, getPM().createNativeQuery(\"b.a.stringA = \\'FooX\\'\",\r\n+            ComplexC.class));\r\n+\r\n+        pm = getPM();\r\n+        startTx(pm);\r\n+        ComplexA pca = (ComplexA) pm.createExtent(ComplexA.class, false)\r\n+            .iterator().next();\r\n+        ComplexB pcb = (ComplexB) pm.createExtent(ComplexB.class, false)\r\n+            .iterator().next();\r\n+        ComplexC pcc = (ComplexC) pm.createExtent(ComplexC.class, false)\r\n+            .iterator().next();\r\n+\r\n+        pcc.getB().getA().setStringA(\"Foo2\"); // change the value for\r\n+\r\n+        final OpenJPAQuery q;\r\n+\r\n+        q = pm.createNativeQuery(\"b.a.stringA = \\'Foo\\'\", ComplexC.class);\r\n+        //FIXME jthomas\r\n+        //q.setIgnoreCache(true);\r\n+        assertEquals(1, q.getMaxResults());\r\n+\r\n+        //FIXME jthomas\r\n+        //q.setIgnoreCache(false);\r\n+        assertEquals(0, q.getMaxResults());\r\n+\r\n+        // now see if the ignore cache change picks up the current object\r\n+        //FIXME jthomas\r\n+        //q.setFilter(\"b.a.stringA = \\'Foo2\\'\");\r\n+        //q.setIgnoreCache(false);\r\n+        assertEquals(1, q.getMaxResults());\r\n+\r\n+        /*\r\n+         Query query = pm.newQuery (C.class, \"b.a = param\");\r\n+         query.declareParameters (\"A param\");\r\n+\r\n+         query.setIgnoreCache (true);\r\n+         assertSize (1, query.execute (pca));\r\n+\r\n+         query.setIgnoreCache (false);\r\n+         assertSize (1, query.execute (pca));\r\n+\r\n+         // now change the instance of b.a and see if we fail (as expected)\r\n+         pcb.setA (new A ());\r\n+\r\n+         query.setIgnoreCache (true);\r\n+         assertSize (1, query.execute (pca));\r\n+\r\n+         query.setIgnoreCache (false);\r\n+         // the bug is that the following line will fail: 1 object is returned\r\n+         assertSize (0, query.execute (pca));\r\n+        */\r\n+\r\n+        final OpenJPAQuery q2;\r\n+\r\n+        q2 = pm.createNativeQuery(\"b.a = param\", ComplexC.class);\r\n+        //FIXME jthomas\r\n+        /*\r\n+        q2.declareParameters(\"ComplexA param\");\r\n+        \r\n+        q2.setIgnoreCache(true);\r\n+        assertSize(1, q2.execute(pca));\r\n+        \r\n+        q2.setIgnoreCache(false);\r\n+        assertSize(1, q2.execute(pca));\r\n+        \r\n+        // now change the instance of b.a to null and see if we fail\r\n+        pcb.setA(null);\r\n+        q2.setIgnoreCache(true);\r\n+        assertSize(1, q2.execute(pca));\r\n+        q2.setIgnoreCache(false);\r\n+        assertSize(0, q2.execute(pca));\r\n+        \r\n+        int fbq = ((FetchPlan) q2.getFetchPlan()).\r\n+                getFlushBeforeQueries();\r\n+        boolean isFlushing =\r\n+                fbq = FetchPlanImpl.FLUSH_TRUEOR\r\n+                (fbq = FetchPlanImpl.FLUSH_WITH_CONNECTION AND\r\n+                KodoJDOHelper.toBroker(pm).hasConnection());\r\n+        \r\n+        // now change the instance of b.a and see if we fail (as expected)\r\n+        pcb.setA(new ComplexA());\r\n+        q2.setIgnoreCache(true);\r\n+        if (isFlushing)\r\n+            assertSize(0, q2.execute(pca)); // we've already flushed earlier\r\n+        else\r\n+            assertSize(1, q2.execute(pca));\r\n+        q2.setIgnoreCache(false);\r\n+        assertSize(0, q2.execute(pca));\r\n+        \r\n+        // now change the instance of b.a back to the orig value\r\n+        pcb.setA(pca);\r\n+        q2.setIgnoreCache(true);\r\n+        if (isFlushing)\r\n+            assertSize(0, q2.execute(pca)); // we've already flushed earlier\r\n+        else\r\n+            assertSize(1, q2.execute(pca));\r\n+        q2.setIgnoreCache(false);\r\n+        assertSize(1, q2.execute(pca));\r\n+        \r\n+        endTx(pm);\r\n+         */\r\n+    }\r\n+\r\n+}\r"},{"sha":"fd1702470af48f709fa256d1a796bb478c69dc3c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBDeleteUpdateImpl.java","status":"added","additions":197,"deletions":0,"changes":197,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBDeleteUpdateImpl.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBDeleteUpdateImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBDeleteUpdateImpl.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,197 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import javax.persistence.Query;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.query.common.apps.Entity1;\r\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest1;\r\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest2;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+public class TestEJBDeleteUpdateImpl extends BaseQueryTest {\r\n+\r\n+    RuntimeTest1 runt1;\r\n+    RuntimeTest2 runt2;\r\n+    Entity1 ent;\r\n+\r\n+    public TestEJBDeleteUpdateImpl(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(RuntimeTest1.class);\r\n+        deleteAll(RuntimeTest2.class);\r\n+        deleteAll(Entity1.class);\r\n+\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        runt1 = new RuntimeTest1(1);\r\n+        runt1.setStringField(\"runt1\");\r\n+        runt1.setSelfOneOne(new RuntimeTest1(2));\r\n+        runt2 = new RuntimeTest2(3);\r\n+        runt2.setStringField(\"runt2\");\r\n+\r\n+        ent = new Entity1(23, \"UPDATEST\", 100);\r\n+\r\n+        em.persist(runt1);\r\n+        em.persist(runt2);\r\n+        em.persist(ent);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testUpdate1() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        RuntimeTest1 ret = em.find(RuntimeTest1.class, em.getObjectId(runt1));\r\n+\r\n+        assertNotNull(ret);\r\n+        assertEquals(\"runt1\", ret.getStringField());\r\n+        assertNotNull(ret.getSelfOneOne());\r\n+\r\n+        String ejbqlUpdate =\r\n+            \"UPDATE RuntimeTest1 x SET x.stringField = :strngfld WHERE x.stringField = :stdfield\";\r\n+        int updatedEntities = em.createQuery(ejbqlUpdate)\r\n+            .setParameter(\"strngfld\", \"runner13\")\r\n+            .setParameter(\"stdfield\", \"runt1\")\r\n+            .executeUpdate();\r\n+\r\n+        assertEquals(1, updatedEntities);\r\n+\r\n+        endTx(em);\r\n+\r\n+        RuntimeTest1 ret2 = em.find(RuntimeTest1.class, em.getObjectId(runt1));\r\n+        em.refresh(ret2);\r\n+\r\n+        assertNotNull(ret2);\r\n+        assertEquals(\"runner13\", ret2.getStringField());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testUpdate2() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        RuntimeTest1 run = em.find(RuntimeTest1.class, em.getObjectId(runt1));\r\n+        assertNotNull(run);\r\n+        assertEquals(\"runt1\", run.getStringField());\r\n+        assertNotNull(run.getSelfOneOne());\r\n+\r\n+        String ejbqlUpdate = \"UPDATE RuntimeTest1 x \" +\r\n+            \"SET x.stringField = :strngfld \" +\r\n+            \"WHERE x.stringField = :field\";\r\n+        int upEntities = em.createQuery(ejbqlUpdate)\r\n+            .setParameter(\"strngfld\", \"upd\")\r\n+            .setParameter(\"field\", \"runt1\")\r\n+            .executeUpdate();\r\n+\r\n+        assertEquals(1, upEntities);\r\n+\r\n+        endTx(em);\r\n+\r\n+        em = (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        RuntimeTest1 inst = em.find(RuntimeTest1.class, em.getObjectId(runt1));\r\n+        em.refresh(inst);\r\n+\r\n+        assertNotNull(inst);\r\n+        assertEquals(\"upd\", inst.getStringField());\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testDelete1() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        RuntimeTest1 run = em.find(RuntimeTest1.class, em.getObjectId(runt1));\r\n+        assertNotNull(run);\r\n+        assertEquals(\"runt1\", run.getStringField());\r\n+        assertNotNull(run.getSelfOneOne());\r\n+\r\n+        String ejbdelUpdate = \"DELETE  FROM RuntimeTest1 s \" +\r\n+            \"WHERE s.stringField = :strngfld\";\r\n+        int delEntity = em.createQuery(ejbdelUpdate)\r\n+            .setParameter(\"strngfld\", \"runt1\")\r\n+            .executeUpdate();\r\n+\r\n+        assertEquals(1, delEntity);\r\n+\r\n+        RuntimeTest1 del = em.find(RuntimeTest1.class, em.getObjectId(runt1));\r\n+        assertNull(del);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testDelete2() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        RuntimeTest1 run = em.find(RuntimeTest1.class, em.getObjectId(runt1));\r\n+        assertNotNull(run);\r\n+        assertEquals(\"runt1\", run.getStringField());\r\n+        assertNotNull(run.getSelfOneOne());\r\n+\r\n+        String ejbdelUpdate =\r\n+            \"DELETE  FROM RuntimeTest1 r WHERE r.stringField = ?1\";\r\n+        Query query = em.createQuery(ejbdelUpdate);\r\n+\r\n+        query.setParameter(1, \"runt1\");\r\n+        int ok = query.executeUpdate();\r\n+\r\n+        assertEquals(1, ok);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testUpdate3() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        Entity1 ent = em.find(Entity1.class, 23);\r\n+\r\n+        assertNotNull(ent);\r\n+        assertEquals(\"UPDATEST\", ent.getStringField());\r\n+\r\n+        int upd = em.createQuery(\r\n+            \"UPDATE Entity1 e SET e.stringField = \\'UPDATEFAILED\\' WHERE \" +\r\n+                \"e.pk = 23\").executeUpdate();\r\n+\r\n+        assertEquals(1, upd);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+}\r"},{"sha":"c7020e6eda83eb6a1b02c145b9a47032287829fc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBPolymorphicQuery.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBPolymorphicQuery.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBPolymorphicQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBPolymorphicQuery.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,88 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.List;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest1;\r\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest2;\r\n+\r\n+public class TestEJBPolymorphicQuery extends BaseQueryTest {\r\n+\r\n+    public TestEJBPolymorphicQuery(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(RuntimeTest1.class);\r\n+        deleteAll(RuntimeTest2.class);\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        int run1 = 10;\r\n+        int run2 = 15;\r\n+\r\n+        for (int i = 0; i < run1; i++) {\r\n+            RuntimeTest1 rt = new RuntimeTest1(i);\r\n+            rt.setStringField(\"foo \" + i);\r\n+            em.persist(rt);\r\n+        }\r\n+\r\n+        for (int i = 10; i < run2; i++) {\r\n+            em.persist(new RuntimeTest2(i));\r\n+        }\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    /**\r\n+     * Ensures that when a select query is ran against an entity at the top of the hierarchy\r\n+     * that the result is its instances and that of all its subclass.\r\n+     */\r\n+    public void testPolymorphicSelect() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        List l = em.createQuery(\"Select object(o) from RuntimeTest1 o\")\r\n+            .getResultList();\r\n+\r\n+        assertNotNull(l);\r\n+        assertEquals(15, l.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testPolymorphicDelete() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        int l = em.createQuery(\"Delete from RuntimeTest1\")\r\n+            .executeUpdate();\r\n+\r\n+        assertNotNull(l);\r\n+        assertEquals(15, l);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+}\r"},{"sha":"43e543bb666e12e6a0b7e01b8d0dcf1583f59c82","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBQueryInterface.java","status":"added","additions":151,"deletions":0,"changes":151,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBQueryInterface.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBQueryInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBQueryInterface.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,151 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.List;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.query.common.apps.Entity1;\r\n+import org.apache.openjpa.persistence.query.common.apps.Entity2;\r\n+\r\n+public class TestEJBQueryInterface extends BaseQueryTest {\r\n+\r\n+    public TestEJBQueryInterface(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(Entity1.class);\r\n+\r\n+        int instNum = 10;\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        //create and persist multiple entity1 instances\r\n+        for (int i = 0; i < instNum; i++) {\r\n+            Entity1 ent = new Entity1(i, \"string\" + i, i + 2);\r\n+            Entity2 ent2 = new Entity2(i * 2, \"ent2\" + i, i);\r\n+            ent.setEntity2Field(ent2);\r\n+            em.persist(ent);\r\n+        }\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testResultList() {\r\n+        EntityManager em = currentEntityManager();\r\n+        List list = em.createQuery(\"Select object(o) from Entity1 o\")\r\n+            .getResultList();\r\n+\r\n+        assertEquals(10, list.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testGetSingleList() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        Entity1 ret =\r\n+            (Entity1) em.createQuery(\"SELECT o FROM Entity1 o WHERE o.pk = 2\")\r\n+                .getSingleResult();\r\n+\r\n+        assertNotNull(ret);\r\n+        assertEquals(\"string2\", ret.getStringField());\r\n+        assertEquals(4, ret.getIntField());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testExecuteUpdate() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+        int ret = em.createQuery(\"DELETE FROM Entity1 o WHERE o.pk = 2\")\r\n+            .executeUpdate();\r\n+\r\n+        assertEquals(ret, 1);\r\n+\r\n+        int ret2 = em.createQuery(\"DELETE FROM Entity1 o WHERE o.pk = 22\")\r\n+            .executeUpdate();\r\n+\r\n+        assertEquals(ret2, 0);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testSetMaxResults() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        List l = em.createQuery(\"Select object(o) from Entity1 o\")\r\n+            .setMaxResults(5)\r\n+            .getResultList();\r\n+\r\n+        assertNotNull(l);\r\n+        assertEquals(5, l.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testSetFirstResults() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        List l = em.createQuery(\"Select object(o) from Entity1 o\")\r\n+            .setFirstResult(3)\r\n+            .getResultList();\r\n+\r\n+        Entity1 ent = (Entity1) l.get(0);\r\n+\r\n+        assertNotNull(ent);\r\n+        assertEquals(\"string3\", ent.getStringField());\r\n+        assertEquals(5, ent.getIntField());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    // Tests Binding an argument to a named parameter.\r\n+    // pk, the named parameter --Not working yet--\r\n+    public void testSetParameter1() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        List ret =\r\n+            em.createQuery(\"SELECT o FROM Entity1 o WHERE o.stringField = :fld\")\r\n+                .setParameter(\"fld\", \"string1\")\r\n+                .getResultList();\r\n+\r\n+        assertNotNull(ret);\r\n+        assertEquals(1, ret.size());\r\n+\r\n+        ret = em.createNamedQuery(\"setParam1\")\r\n+            .setParameter(\"fld\", \"string1\")\r\n+            .getResultList();\r\n+\r\n+        assertNotNull(ret);\r\n+        assertEquals(1, ret.size());\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    //rest of the interface is tested by the CTS\r\n+}\r"},{"sha":"ab9a43db3a7488d9fdb34f12b56ac77ec9f014a7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJPAQuerySubclassFunc.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJPAQuerySubclassFunc.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJPAQuerySubclassFunc.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJPAQuerySubclassFunc.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,91 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.List;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest1;\r\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest3;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+public class TestJPAQuerySubclassFunc extends BaseQueryTest {\r\n+\r\n+    public TestJPAQuerySubclassFunc(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(RuntimeTest1.class);\r\n+\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        startTx(pm);\r\n+\r\n+        pm.persist(new RuntimeTest1(\"TestQueryResults1\", 10));\r\n+        pm.persist(new RuntimeTest1(\"TestQueryResults3\", 10));\r\n+        pm.persist(new RuntimeTest1(\"TestQueryResults5\", 10));\r\n+\r\n+        pm.persist(new RuntimeTest3(\"TestQueryResults2\", 10));\r\n+        pm.persist(new RuntimeTest3(\"TestQueryResults4\", 10));\r\n+        pm.persist(new RuntimeTest3(\"TestQueryResults6\", 10));\r\n+\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testSubClassIsTrueFunction() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        startTx(pm);\r\n+\r\n+        OpenJPAQuery query =\r\n+            pm.createQuery(\"SELECT r.stringField FROM RuntimeTest1 r\");\r\n+        query.setSubclasses(true);\r\n+\r\n+        List list = query.getResultList();\r\n+\r\n+        assertEquals(\"I expect size to be 6 since subclasses are included\", 6,\r\n+            list.size());\r\n+        assertTrue(list.contains(\"TestQueryResults1\"));\r\n+        assertTrue(list.contains(\"TestQueryResults2\"));\r\n+\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testSubClassIsFalseFunction() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        startTx(pm);\r\n+\r\n+        OpenJPAQuery query =\r\n+            pm.createQuery(\"SELECT r.stringField FROM RuntimeTest1 r\");\r\n+        query.setSubclasses(false);\r\n+\r\n+        List list = query.getResultList();\r\n+\r\n+        assertEquals(\"I expect size to be 3 since subclasses are not included\",\r\n+            3, list.size());\r\n+        assertTrue(list.contains(\"TestQueryResults1\"));\r\n+        assertTrue(list.contains(\"TestQueryResults3\"));\r\n+        assertTrue(list.contains(\"TestQueryResults5\"));\r\n+\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"39b2f84a1b227844cea3e89a86fefa1ebeb73db6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMathQueries.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMathQueries.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMathQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMathQueries.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,86 @@\n+/*\r\n+ * TestMathQueries.java\r\n+ *\r\n+ * Created on October 18, 2006, 1:06 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.List;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.query.common.apps.QueryTest1;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+public class TestMathQueries extends BaseQueryTest {\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestMathQueries\r\n+     */\r\n+\r\n+    public TestMathQueries(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(QueryTest1.class);\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        startTx(pm);\r\n+\r\n+        for (int i = 0; i <= 100; i++) {\r\n+            QueryTest1 ob = new QueryTest1();\r\n+            ob.setNum(i);\r\n+            pm.persist(ob);\r\n+        }\r\n+        endTx(pm);\r\n+\r\n+        for (long i = 0; i < 100; i++) {\r\n+            OpenJPAQuery q =\r\n+                pm.createQuery(\"SELECT q FROM QueryTest1 q WHERE q.numb = :ind\")\r\n+                    .setParameter(\"ind\", i);\r\n+            List l = q.getResultList();\r\n+            assertSize(1, l);\r\n+        }\r\n+    }\r\n+\r\n+    public void testMultipleQuery() {\r\n+        try {\r\n+\r\n+            OpenJPAQuery q1, q2;\r\n+            q1 = getPM().createQuery(\r\n+                \"SELECT q FROM QueryTest1 q WHERE q.numb * q.numb = 25\");\r\n+            q2 = getPM().createQuery(\r\n+                \"SELECT q FROM QueryTest1 q WHERE q.numb * q.numb > 25\");\r\n+\r\n+            assertSize(95, q2.getResultList());\r\n+            assertSize(1, q1.getResultList());\r\n+        }\r\n+        catch (Exception e) {\r\n+            bug(AbstractTestCase.Platform.EMPRESS, 890, e,\r\n+                \"Empress cannot handle certain \"\r\n+                    + \"aggregate functions\");\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"979009450883a398cbea8e279ba1e1280ca295d1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNamedQueries.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNamedQueries.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNamedQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNamedQueries.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,114 @@\n+/*\r\n+ * TestNamedQueries.java\r\n+ *\r\n+ * Created on October 18, 2006, 1:17 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.Collection;\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.query.common.apps.QueryTest1;\r\n+\r\n+import org.apache.openjpa.meta.QueryMetaData;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+public class TestNamedQueries extends BaseQueryTest {\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestNamedQueries\r\n+     */\r\n+\r\n+    public TestNamedQueries(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(QueryTest1.class);\r\n+\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        startTx(pm);\r\n+        QueryTest1 pc = null;\r\n+        for (int i = 0; i < 10; i++) {\r\n+            pc = new QueryTest1();\r\n+            if (i < 5)\r\n+                pc.setNum(4);\r\n+            else\r\n+                pc.setNum(i + 10);\r\n+            pm.persist(pc);\r\n+        }\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testNamedClassQuery() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+\r\n+        OpenJPAQuery query = pm.createQuery(\"SELECT o FROM QueryTest1 o\");\r\n+        query.setResultClass(QueryTest1.class);\r\n+\r\n+        assertEquals(QueryTest1.class, query.getResultClass());\r\n+        assertEquals(\"SELECT o FROM QueryTest1 o\", query.getQueryString());\r\n+        assertEquals(QueryTest1.class, query.getResultClass());\r\n+        //FIXME jthomas\r\n+        /*\r\n+        assertEquals(\"import java.util.*\", query.getImports());\r\n+        assertEquals(\"int pnum\", query.getParameters());\r\n+        assertEquals(\"QueryTest4 v4\", query.getVariables());\r\n+        assertEquals(\"sum(num)\", query.getResult());\r\n+        assertEquals(\"num\", query.getGrouping());\r\n+        */\r\n+        QueryMetaData meta = ((OpenJPAEntityManagerSPI) pm).getConfiguration().\r\n+            getMetaDataRepositoryInstance().getQueryMetaData(null,\r\n+            \"named\", pm.getClassLoader(), true);\r\n+        assertNotNull(meta);\r\n+        assertEquals(\"SELECT o FROM QueryTest1 o\", meta.getQueryString());\r\n+        assertEquals(null, meta.getResultType());\r\n+\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testNamespace() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        OpenJPAQuery query = (OpenJPAQuery) pm.createNamedQuery(\"named\");\r\n+        assertEquals(\"SELECT o FROM QueryTest1 o\", query.getQueryString());\r\n+        query.closeAll();\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testSystemJDOQL() {\r\n+        // make sure local query metadata is parsed\r\n+        OpenJPAEntityManager pm = getPM();\r\n+\r\n+        OpenJPAQuery query = (OpenJPAQuery) pm.createNamedQuery(\"named\");\r\n+        assertEquals(\"SELECT o FROM QueryTest1 o\", query.getQueryString());\r\n+        assertEquals(QueryTest1.class, query.getResultClass());\r\n+        assertEquals(10, ((Collection) query.getResultList()).size());\r\n+        query.closeAll();\r\n+        endEm(pm);\r\n+    }\r\n+}\r"},{"sha":"f2526f4e421519a205acfb9c97ef7526752894d2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryExpressionSplit.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryExpressionSplit.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryExpressionSplit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryExpressionSplit.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,80 @@\n+/*\r\n+ * TestQueryExpressionSplit.java\r\n+ *\r\n+ * Created on October 18, 2006, 1:57 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.kernel.Filters;\r\n+\r\n+public class TestQueryExpressionSplit extends BaseQueryTest {\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestQueryExpressionSplit\r\n+     */\r\n+\r\n+    public TestQueryExpressionSplit(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    public void testSimple() {\r\n+        assertEquals(new String[]{ \"foo() bar(boo)\" },\r\n+            Filters.splitExpressions(\"foo() bar(boo)\", ',', 3));\r\n+        assertEquals(new String[]{ \"foo() bar(boo)\", \"biz()\", \"baz(boo)\" },\r\n+            Filters.splitExpressions(\"foo() bar(boo), bizbaz(boo)\",\r\n+                ',', 3));\r\n+    }\r\n+\r\n+    public void testCommaInString() {\r\n+        assertEquals(new String[]{ \"foo \\\"bar(),biz)\\\"\" },\r\n+            Filters.splitExpressions(\"foo \\\"bar(),biz)\\\"\", ',', 3));\r\n+        assertEquals(new String[]{ \"foo 'bar(),\\\"biz)'\", \"boo\" },\r\n+            Filters.splitExpressions(\"foo 'bar(),\\\"biz)', boo\", ',', 3));\r\n+    }\r\n+\r\n+    public void testCommaInFunction() {\r\n+        assertEquals(new String[]{ \"(foo(bar, biz))\",\r\n+            \"boo(biz, baz('xxx,yyy'))\" },\r\n+            Filters.splitExpressions(\"(foo(bar, biz)), \"\r\n+                + \"boo(biz, baz('xxx,yyy'))\", ',', 3));\r\n+    }\r\n+\r\n+    public void testEscapedString() {\r\n+        assertEquals(new String[]{ \"foo \\\"bar\\\\\\\", biz(\\\"\",\r\n+            \"\\\"baz\\\\\\\", boo\\\"\" },\r\n+            Filters.splitExpressions(\"foo \\\"bar\\\\\\\", biz(\\\", \"\r\n+                + \"\\\"baz\\\\\\\", boo\\\"\", ',', 3));\r\n+    }\r\n+\r\n+    private void assertEquals(String[] ans, List test) {\r\n+        List l = Arrays.asList(ans);\r\n+        assertEquals(l + \" != \" + test, l, test);\r\n+    }\r\n+}\r"},{"sha":"6e7095f87d4f3db526e079171d0a790715935e7b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryResults.java","status":"added","additions":625,"deletions":0,"changes":625,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryResults.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryResults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryResults.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,625 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.Iterator;\r\n+import java.util.List;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest1;\r\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest2;\r\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest3;\r\n+import org.apache.openjpa.persistence.Extent;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+import org.apache.openjpa.persistence.jdbc.FetchMode;\r\n+import org.apache.openjpa.persistence.jdbc.JDBCFetchPlan;\r\n+\r\n+/**\r\n+ * Test that ResultList objects behaver correctly.\r\n+ *\r\n+ * @author Marc Prud'hommeaux\r\n+ */\r\n+public class TestQueryResults extends BaseQueryTest {\r\n+\r\n+    public TestQueryResults(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(RuntimeTest1.class);\r\n+\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        em.persist(new RuntimeTest1(\"TestQueryResults1\", 10));\r\n+        em.persist(new RuntimeTest1(\"TestQueryResults3\", 10));\r\n+        em.persist(new RuntimeTest1(\"TestQueryResults5\", 10));\r\n+        em.persist(new RuntimeTest3(\"TestQueryResults2\", 10));\r\n+        em.persist(new RuntimeTest3(\"TestQueryResults4\", 10));\r\n+        em.persist(new RuntimeTest3(\"TestQueryResults6\", 10));\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testQueryIteratorsReturnFalseForClosedQuery() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        OpenJPAQuery q = em.createQuery(\"SELECT o FROM RuntimeTest1 o\");\r\n+        List c = q.getResultList();\r\n+        Iterator i = c.iterator();\r\n+        if (!(i.hasNext()))\r\n+            fail(\"Iterator should have had next()\");\r\n+        q.closeAll();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        if (i.hasNext())\r\n+            fail(\"Iterator obtained from Query should return false \"\r\n+                + \"for hasNext() after Query has been closed\");\r\n+    }\r\n+\r\n+    public void testQueryIteratorsThrowExceptionForClosedQuery() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        OpenJPAQuery q = em.createQuery(\"SELECT o FROM RuntimeTest1 o\");\r\n+        List c = q.getResultList();\r\n+        Iterator i = c.iterator();\r\n+        if (!(i.hasNext()))\r\n+            fail(\"Iterator should have had next()\");\r\n+        q.closeAll();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        try {\r\n+            i.next();\r\n+            fail(\"Iterator.next() should have thrown Exception \"\r\n+                + \"after query.closeAll() was called\");\r\n+        }\r\n+        catch (Exception e) {\r\n+            //\r\n+        }\r\n+    }\r\n+\r\n+    public void testLazyQueryIteratorsReturnFalseForClosedem() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        String query = \"SELECT o FROM RuntimeTest1 o\";\r\n+        OpenJPAQuery q = em.createQuery(query);\r\n+        q.getFetchPlan().setFetchBatchSize(5);\r\n+        List c = q.getResultList();\r\n+\r\n+        Iterator i = c.iterator();\r\n+        if (!(i.hasNext()))\r\n+            fail(\"Iterator should have had next()\");\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        if (i.hasNext())\r\n+            fail(\"Lazy result iterator obtained from Query should return \"\r\n+                + \"false for hasNext() after em has been closed\");\r\n+    }\r\n+\r\n+    public void testEagerQueryIteratorsWorkForClosedem() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        String query = \"SELECT o FROM RuntimeTest1 o\";\r\n+        OpenJPAQuery q = em.createQuery(query);\r\n+        q.getFetchPlan().setFetchBatchSize(-1);\r\n+\r\n+        List c = q.getResultList();\r\n+\r\n+        Iterator i = c.iterator();\r\n+        if (!(i.hasNext()))\r\n+            fail(\"Iterator should have had next()\");\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        if (!i.hasNext())\r\n+            fail(\"Eager result iterator obtained from Query should return \"\r\n+                + \"true for hasNext() after em has been closed\");\r\n+    }\r\n+\r\n+    public void testQueryResultIsList() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        String query = \"SELECT o FROM RuntimeTest1 o\";\r\n+\r\n+        Collection c = (Collection) em.createQuery(query).getResultList();\r\n+        if (!(c instanceof List))\r\n+            fail(\"Collection (\" + c.getClass() + \") should have \"\r\n+                + \"been a List instance\");\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testQueryResultSizeIsCorrect() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        em.persist(new RuntimeTest2(\"TestQueryResults1\", 10));\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        em = (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        String query =\r\n+            \"SELECT r FROM RuntimeTest2 r WHERE r.stringField = \\'TestQueryResults1\\'\";\r\n+        List c = em.createQuery(query).getResultList();\r\n+\r\n+        assertEquals(1, c.size());\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testExtentIteratorsReturnFalseForClosedExtent() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        Extent extent = em.createExtent(RuntimeTest1.class, true);\r\n+\r\n+        Iterator i = extent.iterator();\r\n+        if (!(i.hasNext()))\r\n+            fail(\"Iterator should have had next()\");\r\n+        extent.closeAll();\r\n+\r\n+        if (i.hasNext())\r\n+            fail(\"Iterator obtained from Extent should return false \"\r\n+                + \"for hasNext() after Extent has been closed\");\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testExtentIteratorsThrowExceptionForClosedExtent() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        Extent extent = em.createExtent(RuntimeTest1.class, true);\r\n+\r\n+        Iterator i = extent.iterator();\r\n+        if (!(i.hasNext()))\r\n+            fail(\"Iterator should have had next()\");\r\n+        extent.closeAll();\r\n+\r\n+        try {\r\n+            i.next();\r\n+            fail(\"Iterator.next() should have thrown Exception \"\r\n+                + \"after Extent.closeAll() was called\");\r\n+        } catch (Exception e) {\r\n+            // this is a *good* thing.\r\n+        }\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testExtentIteratorsReturnFalseForClosedem() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        Extent extent = em.createExtent(RuntimeTest1.class, true);\r\n+        Iterator i = extent.iterator();\r\n+        if (!(i.hasNext()))\r\n+            fail(\"Iterator should have had next()\");\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        if (i.hasNext())\r\n+            fail(\"Iterator obtained from Extent should return false \"\r\n+                + \"for hasNext() after em has been closed\");\r\n+    }\r\n+\r\n+    public void testUniqueReturnsSingleResult() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        String query =\r\n+            \"SELECT DISTINCT r FROM RuntimeTest1 r WHERE r.stringField = \\'TestQueryResults1\\'\";\r\n+        Object obj = em.createQuery(query).getSingleResult();\r\n+\r\n+        assertTrue(obj instanceof RuntimeTest1);\r\n+\r\n+        query =\r\n+            \"SELECT DISTINCT r FROM RuntimeTest1 r WHERE r.stringField = \\'xxxx\\'\";\r\n+        OpenJPAQuery q = em.createQuery(query);\r\n+        List l = q.getResultList();\r\n+        assertNotNull(\r\n+            \"expecting l to be null since there is no RuntimeTest1 instance with stringfield=xxxx\",\r\n+            l);\r\n+\r\n+        q.closeAll();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testUniqueThrowsExceptionIfMultipleResults() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        String query = \"SELECT DISTINCT r FROM RuntimeTest1 r\";\r\n+        OpenJPAQuery q = em.createQuery(query);\r\n+\r\n+        try {\r\n+            Object l = q.getSingleResult();\r\n+            fail(\"Unique query matched multiple results.\");\r\n+        }\r\n+        catch (Exception jue) {\r\n+        }\r\n+        q.closeAll();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testImpossibleRangeReturnsEmptyList() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        String query = \"SELECT r FROM RuntimeTest1 r\";\r\n+        OpenJPAQuery q = em.createQuery(query);\r\n+        q.setFirstResult(2);\r\n+        q.setMaxResults(0);\r\n+\r\n+        List results = q.getResultList();\r\n+\r\n+        assertEquals(0, results.size());\r\n+        assertFalse(results.iterator().hasNext());\r\n+        q.closeAll();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testImpossibleUniqueRangeReturnsNull() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        OpenJPAQuery q = em.createQuery(\r\n+            \"SELECT DISTINCT r FROM RuntimeTest1 r WHERE r.stringField = \\'TestQueryResults1\\'\");\r\n+        q.setFirstResult(2);\r\n+        q.setMaxResults(0);\r\n+        assertTrue(\r\n+            \"resultlist is not null its size is: \" + q.getResultList().size(),\r\n+            q.getResultList().isEmpty());\r\n+        q.closeAll();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testSingleResultUniqueRange() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        OpenJPAQuery q = em.createQuery(\r\n+            \"SELECT DISTINCT r FROM RuntimeTest1 r WHERE r.stringField = \\'TestQueryResults1\\'\");\r\n+        q.setFirstResult(1);\r\n+        q.setMaxResults(1000000);\r\n+\r\n+        assertTrue(\"resultlist is not empty\", (q.getResultList()).isEmpty());\r\n+        q.closeAll();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testMultiResultUniqueRange() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        OpenJPAQuery q = em.createQuery(\r\n+            \"SELECT DISTINCT r FROM RuntimeTest1 r ORDER BY r.stringField ASC\");\r\n+        q.setFirstResult(1);\r\n+        q.setMaxResults(2);\r\n+\r\n+        assertEquals(\"TestQueryResults2\",\r\n+            ((RuntimeTest1) q.getResultList().get(0)).getStringField());\r\n+        q.closeAll();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    /* This test is being commented because it was supposed to be a converted test complementing the original JDO test\r\n+      * which uses the setUnique() method available in JDO Query. OpenJPAQuery does not have such a method and hence this test\r\n+      * does not make sense.\r\n+      public void testUniqueThrowsExceptionIfNonUniqueRange()\r\n+     {\r\n+         OpenJPAEntityManager em = (OpenJPAEntityManager) currentEntityManager();\r\n+         startTx(em);\r\n+\r\n+         OpenJPAQuery q = em.createQuery(\"SELECT DISTINCT r FROM RuntimeTest1 r ORDER BY r.stringField ASC\");\r\n+         q.setFirstResult(1);\r\n+         q.setMaxResults(3);\r\n+\r\n+         try\r\n+         {\r\n+             q.getResultList();\r\n+             fail(\"Unique allowed non-unique range.\");\r\n+         }\r\n+         catch (Exception jue)\r\n+         {\r\n+         }\r\n+         q.closeAll();\r\n+         endTx(em);\r\n+         endEm(em);\r\n+     }\r\n+     */\r\n+    public void testFullRange() {\r\n+        try {\r\n+            OpenJPAEntityManager em =\r\n+                (OpenJPAEntityManager) currentEntityManager();\r\n+            startTx(em);\r\n+\r\n+            OpenJPAQuery q = em.createQuery(\r\n+                \"SELECT r FROM RuntimeTest1 ORDER BY r.stringField ASC\");\r\n+            q.setSubclasses(false);\r\n+            q.setFirstResult(0);\r\n+            Long l = new Long(Long.MAX_VALUE);\r\n+            q.setMaxResults(l.intValue());\r\n+\r\n+            List res = (List) q.getResultList();\r\n+            assertEquals(3, res.size());\r\n+            for (int i = 0; i < res.size(); i++)\r\n+                assertEquals(\"TestQueryResults\" + (i * 2 + 1),\r\n+                    ((RuntimeTest1) res.get(i)).getStringField());\r\n+            q.closeAll();\r\n+            endTx(em);\r\n+            endEm(em);\r\n+        }\r\n+        catch (Exception uoe) {\r\n+            //FIXME:AFAM -- Figure out JPA Equivalence of createExtent(class, false) ie how to restrict the query result to the base entity and\r\n+            //not the subclasses\r\n+        }\r\n+    }\r\n+\r\n+    public void testFullRangeSubs() {\r\n+        try {\r\n+            OpenJPAEntityManager em =\r\n+                (OpenJPAEntityManager) currentEntityManager();\r\n+            startTx(em);\r\n+\r\n+            OpenJPAQuery q = em.createQuery(\r\n+                \"SELECT r FROM RuntimeTest1 ORDER BY r.stringField ASC\");\r\n+            q.setFirstResult(0);\r\n+            Long l = new Long(Long.MAX_VALUE);\r\n+            q.setMaxResults(l.intValue());\r\n+\r\n+            List res = (List) q.getResultList();\r\n+            assertEquals(6, res.size());\r\n+            for (int i = 0; i < res.size(); i++)\r\n+                assertEquals(\"TestQueryResults\" + (i + 1),\r\n+                    ((RuntimeTest1) res.get(i)).getStringField());\r\n+            q.closeAll();\r\n+            endTx(em);\r\n+            endEm(em);\r\n+        }\r\n+        catch (Exception uoe) {\r\n+        }\r\n+    }\r\n+\r\n+    public void testBeginRange() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        OpenJPAQuery q = em.createQuery(\r\n+            \"SELECT r FROM RuntimeTest1 r ORDER BY r.stringField ASC\");\r\n+        q.setSubclasses(false);\r\n+        for (int i = 0; i < 4; i++) {\r\n+            q.setFirstResult(i);\r\n+            q.setMaxResults(100000);\r\n+\r\n+            List res = (List) q.getResultList();\r\n+            assertEquals(\"they are not equal\", 3 - i, res.size());\r\n+            int idx = 0;\r\n+\r\n+            // try both random acess and iteration\r\n+            for (int j = 0; j < res.size(); j++)\r\n+                assertEquals(\"TestQueryResults\" + (j * 2 + 1 + i * 2),\r\n+                    (((RuntimeTest1) res.get(j)).getStringField()));\r\n+            for (Iterator itr = res.iterator(); itr.hasNext(); idx++)\r\n+                assertEquals(\"TestQueryResults\" + (idx * 2 + 1 + i * 2),\r\n+                    ((RuntimeTest1) itr.next()).getStringField());\r\n+        }\r\n+        q.closeAll();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testBeginRangeSubs() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        OpenJPAQuery q = em.createQuery(\r\n+            \"SELECT r FROM RuntimeTest1 r ORDER BY r.stringField ASC\");\r\n+\r\n+        for (int i = 0; i < 7; i++) {\r\n+            q.setFirstResult(i);\r\n+            Long l = new Long(Long.MAX_VALUE);\r\n+            q.setMaxResults(100000);\r\n+\r\n+            List res = (List) q.getResultList();\r\n+            assertEquals(6 - i, res.size());\r\n+            int idx = 0;\r\n+\r\n+            // try both random acess and iteration\r\n+            for (int j = 0; j < res.size(); j++)\r\n+                assertEquals(\"TestQueryResults\" + (j + 1 + i),\r\n+                    ((RuntimeTest1) res.get(j)).getStringField());\r\n+            for (Iterator itr = res.iterator(); itr.hasNext(); idx++)\r\n+                assertEquals(\"TestQueryResults\" + (idx + 1 + i),\r\n+                    ((RuntimeTest1) itr.next()).getStringField());\r\n+        }\r\n+        q.closeAll();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testEndRange() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        OpenJPAQuery q = em.createQuery(\r\n+            \"SELECT r FROM RuntimeTest1 r ORDER BY r.stringField ASC\");\r\n+        q.setSubclasses(false);\r\n+\r\n+        for (int i = 0; i < 4; i++) {\r\n+            q.setFirstResult(0);\r\n+            q.setMaxResults(i);\r\n+\r\n+            List res = (List) q.getResultList();\r\n+            assertEquals(i, res.size());\r\n+            int idx = 0;\r\n+\r\n+            // try both random acess and iteration\r\n+            for (int j = 0; j < res.size(); j++)\r\n+                assertEquals(\"TestQueryResults\" + (j * 2 + 1),\r\n+                    ((RuntimeTest1) res.get(j)).getStringField());\r\n+            for (Iterator itr = res.iterator(); itr.hasNext(); idx++)\r\n+                assertEquals(\"TestQueryResults\" + (idx * 2 + 1),\r\n+                    ((RuntimeTest1) itr.next()).getStringField());\r\n+        }\r\n+        q.closeAll();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testEndRangeSubs() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        OpenJPAQuery q = em.createQuery(\r\n+            \"SELECT r FROM RuntimeTest1 r ORDER BY r.stringField ASC\");\r\n+\r\n+        for (int i = 0; i < 7; i++) {\r\n+            q.setFirstResult(0);\r\n+            q.setMaxResults(i);\r\n+            List res = (List) q.getResultList();\r\n+            assertEquals(i, res.size());\r\n+            int idx = 0;\r\n+\r\n+            // try both random acess and iteration\r\n+            for (int j = 0; j < res.size(); j++)\r\n+                assertEquals(\"TestQueryResults\" + (j + 1),\r\n+                    ((RuntimeTest1) res.get(j)).getStringField());\r\n+            for (Iterator itr = res.iterator(); itr.hasNext(); idx++)\r\n+                assertEquals(\"TestQueryResults\" + (idx + 1),\r\n+                    ((RuntimeTest1) itr.next()).getStringField());\r\n+        }\r\n+        q.closeAll();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testMidRange() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        OpenJPAQuery q = em.createQuery(\r\n+            \"SELECT r FROM RuntimeTest1 r ORDER BY r.stringField ASC\");\r\n+        q.setSubclasses(false);\r\n+\r\n+        q.setFirstResult(1);\r\n+        q.setMaxResults(3);\r\n+        List res = (List) q.getResultList();\r\n+        assertEquals(2, res.size());\r\n+        for (int i = 0; i < res.size(); i++)\r\n+            assertEquals(\"TestQueryResults\" + (i * 2 + 1 + 2),\r\n+                ((RuntimeTest1) res.get(i)).getStringField());\r\n+        int idx = 0;\r\n+        for (Iterator itr = res.iterator(); itr.hasNext(); idx++)\r\n+            assertEquals(\"TestQueryResults\" + (idx * 2 + 1 + 2),\r\n+                ((RuntimeTest1) itr.next()).getStringField());\r\n+        q.closeAll();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testMidRangeSubs() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        OpenJPAQuery q = em.createQuery(\r\n+            \"SELECT r FROM RuntimeTest1 r ORDER BY r.stringField ASC\");\r\n+        q.setFirstResult(1);\r\n+        q.setMaxResults(3);\r\n+\r\n+        List res = (List) q.getResultList();\r\n+        assertEquals(3, res.size());\r\n+        for (int i = 0; i < res.size(); i++)\r\n+            assertEquals(\"TestQueryResults\" + (i + 1 + 1),\r\n+                ((RuntimeTest1) res.get(i)).getStringField());\r\n+        int idx = 0;\r\n+        for (Iterator itr = res.iterator(); itr.hasNext(); idx++)\r\n+            assertEquals(\"TestQueryResults\" + (idx + 1 + 1),\r\n+                ((RuntimeTest1) itr.next()).getStringField());\r\n+        q.closeAll();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testPessimisticOrderedRange() {\r\n+        // test to make sure whatever machinations we do to get a range doesn't\r\n+        // interfere with FOR UPDATE\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        OpenJPAQuery q = em.createQuery(\r\n+            \"SELECT r FROM RuntimeTest1 r ORDER BY r.stringField ASC\");\r\n+        q.setSubclasses(false);\r\n+        q.setFirstResult(0);\r\n+        q.setMaxResults(2);\r\n+\r\n+        ((JDBCFetchPlan) q.getFetchPlan()).setEagerFetchMode(FetchMode.NONE);\r\n+\r\n+        List res = (List) q.getResultList();\r\n+        assertEquals(2, res.size());\r\n+        assertEquals(\"TestQueryResults1\",\r\n+            ((RuntimeTest1) res.get(0)).getStringField());\r\n+        assertEquals(\"TestQueryResults3\",\r\n+            ((RuntimeTest1) res.get(1)).getStringField());\r\n+        q.closeAll();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+}\r\n+\r"},{"sha":"dc3546c37c585846045f85ad54f7ed6e476eb64c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQuotedNumbersInFilters2.java","status":"added","additions":198,"deletions":0,"changes":198,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQuotedNumbersInFilters2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQuotedNumbersInFilters2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQuotedNumbersInFilters2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,198 @@\n+/*\r\n+ * TestQuotedNumbersInFilters.java\r\n+ *\r\n+ * Created on October 18, 2006, 2:29 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import javax.persistence.Query;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest1;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+public class TestQuotedNumbersInFilters2 extends BaseQueryTest {\r\n+\r\n+    public TestQuotedNumbersInFilters2(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(RuntimeTest1.class);\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        startTx(pm);\r\n+        pm.persist(new RuntimeTest1(\"foo\", 3));\r\n+        pm.persist(new RuntimeTest1(\"bar\", 15));\r\n+        pm.persist(new RuntimeTest1(\"baz\", -8));\r\n+        pm.persist(new RuntimeTest1(\"baz2\", 45)); // 45 is '-'\r\n+        pm.persist(new RuntimeTest1(\"3\", (int) '4'));\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        // make sure everything is working as expected for the base case.\r\n+        assertEquals(1, helper(\"intField = -8\"));\r\n+        assertEquals(1, helper(\"intField = 15\"));\r\n+        assertEquals(1, helper(\"intField = 3\"));\r\n+        assertEquals(0, helper(\"intField = 51\")); // the int value of '3'\r\n+        assertEquals(0, helper(\"intField = 4\"));\r\n+        assertEquals(1, helper(\"intField = 52\")); // the int value of '4'\r\n+        assertEquals(1, helper(\"stringField = \\'foo\\'\"));\r\n+        assertEquals(1, helper(\"stringField = \\'bar\\'\"));\r\n+    }\r\n+\r\n+    public void testUnquotedNumbersWithExtraPrecision() {\r\n+        assertEquals(1, helper(\"intField = 15\"));\r\n+        assertEquals(1, helper(\"intField = -8\"));\r\n+        assertEquals(1, helper(\"intField = 3\"));\r\n+        assertEquals(1, helper(\"intField = 45\"));\r\n+\r\n+//    try {\r\n+//        // test without casting ... some DBs don't like this\r\n+////        assertEquals(1, helper(\"intField = 15.0\"));\r\n+////        assertEquals(1, helper(\"intField = -8.0\"));\r\n+//        assertEquals(1, helper(\"intField = 3.0\"));\r\n+//        assertEquals(1, helper(\"intField = 45.0\"));\r\n+//    } catch (Exception jdoe) {\r\n+//        bug(AbstractTestCase.Platform.HYPERSONIC, 414, jdoe,\r\n+//            \"Some databases require explicit casts\");\r\n+//    }\r\n+    }\r\n+\r\n+    public void testSingleQuotedStrings() {\r\n+        assertEquals(1, helper(\"stringField = 'foo'\"));\r\n+        assertEquals(1, helper(\"stringField = '3'\"));\r\n+    }\r\n+\r\n+    public void testDoubleQuotedStrings() {\r\n+        assertEquals(1, helper(\"stringField = \\'foo\\'\"));\r\n+        assertEquals(1, helper(\"stringField = \\'3\\'\"));\r\n+    }\r\n+\r\n+    /**\r\n+     * Kodo 3.1 and prior treated single-quoted numbers as character literals,\r\n+     * to the degree that prepared statement setInt() calls were made.\r\n+     * Only the first digit of multiple-digit single-quoted numbers was used.\r\n+     * FIX ME: aokeke - commenting this --> applies to kodo 3.1 and prior\r\n+     */\r\n+    public void testKodo31SingleQuotedMultipleCharacterBehavior() {\r\n+        assertEquals(0, helper31(\"intField = '15'\", true)); // looks like '1'\r\n+        assertEquals(0, helper31(\"intField = '52'\", true)); // looks like '5'\r\n+        assertEquals(1, helper31(\"intField = '49'\", true)); // looks like '4'\r\n+        assertEquals(1, helper31(\"intField = '-8'\", true)); // looks like '-'\r\n+\r\n+        assertEquals(0, helper31(\"intField = '15'\", false));\r\n+        assertEquals(0, helper31(\"intField = '52'\", false));\r\n+    }\r\n+\r\n+    /**\r\n+     * Kodo 3.1 and prior did not match negative numbers of different types\r\n+     * in in-mem queries.\r\n+     */\r\n+    public void testKodo31UnquotedInMemBehavior() {\r\n+        assertEquals(1, helper31(\"intField = 3\", false));\r\n+        assertEquals(1, helper31(\"intField = -8\", false));\r\n+        assertEquals(1, helper31(\"intField = 15\", false));\r\n+        assertEquals(1, helper31(\"intField = 45\", false));\r\n+    }\r\n+\r\n+    public void testKodo31UnquotedDatastoreBehavior() {\r\n+        assertEquals(1, helper31(\"intField = 3\", false));\r\n+        assertEquals(1, helper31(\"intField = -8\", false));\r\n+        assertEquals(1, helper31(\"intField = 15\", false));\r\n+        assertEquals(1, helper31(\"intField = 45\", false));\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns the # of matches to the query.\r\n+     */\r\n+    private long helper(String filter) {\r\n+        return helper(filter, false);\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns the # of matches to the query. Returns -1 if shouldFail\r\n+     * is true and the query raised an exception in both in-mem and datastore\r\n+     * queries.\r\n+     */\r\n+    private long helper(String filter, boolean shouldFail) {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+\r\n+        OpenJPAQuery q =\r\n+            pm.createQuery(\"SELECT r FROM RuntimeTest1 r WHERE r.\" + filter);\r\n+\r\n+        long datastore = getResults(q, shouldFail);\r\n+\r\n+        q.setCandidateCollection((Collection) q.getResultList());\r\n+        long inmem = getResults(q, shouldFail);\r\n+\r\n+        if (datastore != inmem)\r\n+            fail(\"datastore query returned \" + datastore + \" values; \" +\r\n+                \"inmem query returned \" + inmem);\r\n+\r\n+        endEm(pm);\r\n+        return datastore;\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns the # of matches to the query. Performs the query in datastore\r\n+     * or memory as appropriate.\r\n+     */\r\n+    private long helper31(String filter, boolean datastore) {\r\n+        Map props = new HashMap();\r\n+        props.put(\"openjpa.Compatibility\", \"QuotedNumbersInQueries=true\");\r\n+        OpenJPAEntityManager pm = getEmf(props).createEntityManager();\r\n+\r\n+        try {\r\n+            OpenJPAQuery q = pm.createQuery(\r\n+                \"SELECT r FROM RuntimeTest1 r WHERE r.\" + filter);\r\n+\r\n+            if (!datastore)\r\n+                q.setCandidateCollection((Collection) q.getResultList());\r\n+            return getResults(q, false);\r\n+        }\r\n+        finally {\r\n+            endEm(pm);\r\n+        }\r\n+    }\r\n+\r\n+    private long getResults(Query q, boolean shouldFail) {\r\n+        try {\r\n+\r\n+            Integer result = new Integer(q.getResultList().size());\r\n+            if (shouldFail) {\r\n+                fail(\"should have failed\");\r\n+            }\r\n+\r\n+            return ((Number) result).longValue();\r\n+        } catch (IllegalArgumentException e) {\r\n+            if (!shouldFail)\r\n+                throw e;\r\n+            return -1;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"d0a90c3b548aad0f328f33cdf058cffe1342df82","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSimple.java","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSimple.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSimple.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSimple.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,102 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.List;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.query.common.apps.Entity1;\r\n+\r\n+public class TestSimple extends BaseQueryTest {\r\n+\r\n+    private Query q = null;\r\n+\r\n+    public TestSimple(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(Entity1.class);\r\n+    }\r\n+\r\n+    public void testSimple() throws java.io.IOException {\r\n+        // test create\r\n+        {\r\n+            EntityManager em = currentEntityManager();\r\n+            startTx(em);\r\n+            em.persist(new Entity1(0, \"testSimple\", 12));\r\n+            endTx(em);\r\n+            endEm(em);\r\n+        }\r\n+\r\n+        // test Query\r\n+        {\r\n+            EntityManager em = currentEntityManager();\r\n+            startTx(em);\r\n+            List l = em.createQuery(\"SELECT o FROM Entity1 o \"\r\n+                + \"WHERE o.stringField = 'testSimple'\").getResultList();\r\n+            assertSize(1, l);\r\n+            endTx(em);\r\n+            endEm(em);\r\n+        }\r\n+\r\n+        // test Update\r\n+        {\r\n+            EntityManager em = currentEntityManager();\r\n+            startTx(em);\r\n+            ((Entity1) em.createQuery(\"SELECT o FROM Entity1 o \"\r\n+                + \"WHERE o.stringField = 'testSimple'\").getSingleResult())\r\n+                .setStringField(\"testSimple2\");\r\n+            endTx(em);\r\n+            endEm(em);\r\n+\r\n+            em = currentEntityManager();\r\n+            startTx(em);\r\n+            q = em.createQuery(\"SELECT o FROM Entity1 o \"\r\n+                + \"WHERE o.stringField = 'testSimple'\");\r\n+            assertSize(0, q);\r\n+            q = em.createQuery(\"SELECT o FROM Entity1 o \"\r\n+                + \"WHERE o.stringField = 'testSimple2'\");\r\n+            assertSize(1, q);\r\n+            endTx(em);\r\n+            endEm(em);\r\n+        }\r\n+\r\n+        // test delete\r\n+        {\r\n+            EntityManager em = currentEntityManager();\r\n+            startTx(em);\r\n+            em.remove(em.createQuery(\"SELECT o FROM Entity1 o \"\r\n+                + \"WHERE o.stringField = 'testSimple2'\").getSingleResult());\r\n+            endTx(em);\r\n+            endEm(em);\r\n+\r\n+            em = currentEntityManager();\r\n+            startTx(em);\r\n+\r\n+            q = em.createQuery(\"SELECT o FROM Entity1 o \"\r\n+                + \"WHERE o.stringField = 'testSimple2'\");\r\n+            assertSize(0, q);\r\n+            endTx(em);\r\n+            endEm(em);\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"60ae06b2242a26e94f29f829489383b35be268ad","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+/**\r\n+ * <p>Persistent type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class CircularFKPC {\r\n+\r\n+    private String stringField;\r\n+    private CircularFKPC2 fkField;\r\n+\r\n+    public String getStringField() {\r\n+        return this.stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+\r\n+    public CircularFKPC2 getFKField() {\r\n+        return this.fkField;\r\n+    }\r\n+\r\n+    public void setFKField(CircularFKPC2 fkField) {\r\n+        this.fkField = fkField;\r\n+    }\r\n+}\r"},{"sha":"16bc6730a11f1111fcfaa18acc7c94e73f29ca5f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC2.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+/**\r\n+ * <p>Persistent type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class CircularFKPC2 {\r\n+\r\n+    private String stringField;\r\n+    private CircularFKPC fkField;\r\n+\r\n+    public String getStringField() {\r\n+        return this.stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+\r\n+    public CircularFKPC getFKField() {\r\n+        return this.fkField;\r\n+    }\r\n+\r\n+    public void setFKField(CircularFKPC fkField) {\r\n+        this.fkField = fkField;\r\n+    }\r\n+}\r"},{"sha":"ad57a9edcabe09ebc3bb875bea1e47875b3afbd6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexA.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexA.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexA.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,81 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.Collection;\r\n+import java.util.Date;\r\n+import java.util.LinkedList;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Temporal;\r\n+import javax.persistence.TemporalType;\r\n+\r\n+@Entity\r\n+public class ComplexA {\r\n+\r\n+    private String stringA;\r\n+    private int intA;\r\n+    @Temporal(TemporalType.DATE)\r\n+    private Date dateA;\r\n+    private Collection bs = new LinkedList();\r\n+\r\n+    public ComplexA() {\r\n+\r\n+    }\r\n+\r\n+    public ComplexA(String stringA, int intA, Date dateA, ComplexB[] bs) {\r\n+        this.stringA = stringA;\r\n+        this.intA = intA;\r\n+        this.dateA = dateA;\r\n+        if (bs != null)\r\n+            this.bs.addAll(Arrays.asList(bs));\r\n+    }\r\n+\r\n+    public void setStringA(String stringA) {\r\n+        this.stringA = stringA;\r\n+    }\r\n+\r\n+    public String getStringA() {\r\n+        return this.stringA;\r\n+    }\r\n+\r\n+    public void setIntA(int intA) {\r\n+        this.intA = intA;\r\n+    }\r\n+\r\n+    public int getIntA() {\r\n+        return this.intA;\r\n+    }\r\n+\r\n+    public void setDateA(Date dateA) {\r\n+        this.dateA = dateA;\r\n+    }\r\n+\r\n+    public Date getDateA() {\r\n+        return this.dateA;\r\n+    }\r\n+\r\n+    public void setBs(Collection bs) {\r\n+        this.bs = bs;\r\n+    }\r\n+\r\n+    public Collection getBs() {\r\n+        return this.bs;\r\n+    }\r\n+}\r"},{"sha":"5fd79308b2135063dcec00b5aeef7268f88f223d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexB.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexB.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexB.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,97 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Arrays;\r\n+import java.util.Collection;\r\n+import java.util.Date;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Temporal;\r\n+import javax.persistence.TemporalType;\r\n+\r\n+@Entity\r\n+public class ComplexB\r\n+    extends ComplexA {\r\n+\r\n+    private String stringB;\r\n+    private int intB;\r\n+    @Temporal(TemporalType.DATE)\r\n+    private Date dateB;\r\n+    private Collection cs = new ArrayList();\r\n+    @OneToOne(cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\r\n+    private ComplexA a;\r\n+\r\n+    public ComplexB() {\r\n+\r\n+    }\r\n+\r\n+    public ComplexB(String stringB, int intB, Date dateB, ComplexC[] cs,\r\n+        ComplexA a) {\r\n+        this.stringB = stringB;\r\n+        this.intB = intB;\r\n+        this.dateB = dateB;\r\n+        if (cs != null)\r\n+            this.cs.addAll(Arrays.asList(cs));\r\n+        this.a = a;\r\n+    }\r\n+\r\n+    public void setStringB(String stringB) {\r\n+        this.stringB = stringB;\r\n+    }\r\n+\r\n+    public String getStringB() {\r\n+        return this.stringB;\r\n+    }\r\n+\r\n+    public void setIntB(int intB) {\r\n+        this.intB = intB;\r\n+    }\r\n+\r\n+    public int getIntB() {\r\n+        return this.intB;\r\n+    }\r\n+\r\n+    public void setDateB(Date dateB) {\r\n+        this.dateB = dateB;\r\n+    }\r\n+\r\n+    public Date getDateB() {\r\n+        return this.dateB;\r\n+    }\r\n+\r\n+    public void setCs(Collection cs) {\r\n+        this.cs = cs;\r\n+    }\r\n+\r\n+    public Collection getCs() {\r\n+        return this.cs;\r\n+    }\r\n+\r\n+    public void setA(ComplexA a) {\r\n+        this.a = a;\r\n+    }\r\n+\r\n+    public ComplexA getA() {\r\n+        return this.a;\r\n+    }\r\n+}\r\n+\r"},{"sha":"ab5f5199fe6c4900105459d98fc762f68dc81e22","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexC.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,97 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.Date;\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Temporal;\r\n+import javax.persistence.TemporalType;\r\n+\r\n+@Entity\r\n+public class ComplexC\r\n+    extends ComplexB {\r\n+\r\n+    private String stringC;\r\n+    private int intC;\r\n+    @Temporal(TemporalType.DATE)\r\n+    private Date dateC;\r\n+    private Set ds = new HashSet();\r\n+    @OneToOne(cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\r\n+    private ComplexB b;\r\n+\r\n+    public ComplexC() {\r\n+\r\n+    }\r\n+\r\n+    public ComplexC(String stringC, int intC, Date dateC, ComplexD[] ds,\r\n+        ComplexB b) {\r\n+        this.stringC = stringC;\r\n+        this.intC = intC;\r\n+        this.dateC = dateC;\r\n+        if (ds != null)\r\n+            this.ds.addAll(Arrays.asList(ds));\r\n+        this.b = b;\r\n+    }\r\n+\r\n+    public void setStringC(String stringC) {\r\n+        this.stringC = stringC;\r\n+    }\r\n+\r\n+    public String getStringC() {\r\n+        return this.stringC;\r\n+    }\r\n+\r\n+    public void setIntC(int intC) {\r\n+        this.intC = intC;\r\n+    }\r\n+\r\n+    public int getIntC() {\r\n+        return this.intC;\r\n+    }\r\n+\r\n+    public void setDateC(Date dateC) {\r\n+        this.dateC = dateC;\r\n+    }\r\n+\r\n+    public Date getDateC() {\r\n+        return this.dateC;\r\n+    }\r\n+\r\n+    public void setDs(Set ds) {\r\n+        this.ds = ds;\r\n+    }\r\n+\r\n+    public Set getDs() {\r\n+        return this.ds;\r\n+    }\r\n+\r\n+    public void setB(ComplexB b) {\r\n+        this.b = b;\r\n+    }\r\n+\r\n+    public ComplexB getB() {\r\n+        return this.b;\r\n+    }\r\n+}\r\n+\r"},{"sha":"1ac2e0384f5194a061cf022cc2e5669bdc4cdd98","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexD.java","status":"added","additions":96,"deletions":0,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexD.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexD.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,96 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.Date;\r\n+import java.util.Set;\r\n+import java.util.TreeSet;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Temporal;\r\n+import javax.persistence.TemporalType;\r\n+\r\n+@Entity\r\n+public class ComplexD {\r\n+\r\n+    private String stringD;\r\n+    private int intD;\r\n+    @Temporal(TemporalType.DATE)\r\n+    private Date dateD;\r\n+    private Set es = new TreeSet();\r\n+    @OneToOne(cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\r\n+    private ComplexC c;\r\n+\r\n+    public ComplexD() {\r\n+\r\n+    }\r\n+\r\n+    public ComplexD(String stringD, int intD, Date dateD, ComplexE[] es,\r\n+        ComplexC c) {\r\n+        this.stringD = stringD;\r\n+        this.intD = intD;\r\n+        this.dateD = dateD;\r\n+        if (es != null)\r\n+            this.es.addAll(Arrays.asList(es));\r\n+        this.c = c;\r\n+    }\r\n+\r\n+    public void setStringD(String stringD) {\r\n+        this.stringD = stringD;\r\n+    }\r\n+\r\n+    public String getStringD() {\r\n+        return this.stringD;\r\n+    }\r\n+\r\n+    public void setIntD(int intD) {\r\n+        this.intD = intD;\r\n+    }\r\n+\r\n+    public int getIntD() {\r\n+        return this.intD;\r\n+    }\r\n+\r\n+    public void setDateD(Date dateD) {\r\n+        this.dateD = dateD;\r\n+    }\r\n+\r\n+    public Date getDateD() {\r\n+        return this.dateD;\r\n+    }\r\n+\r\n+    public void setEs(Set es) {\r\n+        this.es = es;\r\n+    }\r\n+\r\n+    public Set getEs() {\r\n+        return this.es;\r\n+    }\r\n+\r\n+    public void setC(ComplexC c) {\r\n+        this.c = c;\r\n+    }\r\n+\r\n+    public ComplexC getC() {\r\n+        return this.c;\r\n+    }\r\n+}\r\n+\r"},{"sha":"61e964c307baee35ce4b62b79efe84a66b814e40","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexE.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexE.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexE.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,97 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.Collection;\r\n+import java.util.Date;\r\n+import java.util.LinkedList;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Temporal;\r\n+import javax.persistence.TemporalType;\r\n+\r\n+@Entity\r\n+public class ComplexE\r\n+    extends ComplexD {\r\n+\r\n+    private String stringE;\r\n+    private int intE;\r\n+    @Temporal(TemporalType.DATE)\r\n+    private Date dateE;\r\n+    private Collection fs = new LinkedList();\r\n+    @OneToOne(cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\r\n+    private ComplexD d;\r\n+\r\n+    public ComplexE() {\r\n+\r\n+    }\r\n+\r\n+    public ComplexE(String stringE, int intE, Date dateE, ComplexF[] fs,\r\n+        ComplexD d) {\r\n+        this.stringE = stringE;\r\n+        this.intE = intE;\r\n+        this.dateE = dateE;\r\n+        if (fs != null)\r\n+            this.fs.addAll(Arrays.asList(fs));\r\n+        this.d = d;\r\n+    }\r\n+\r\n+    public void setStringE(String stringE) {\r\n+        this.stringE = stringE;\r\n+    }\r\n+\r\n+    public String getStringE() {\r\n+        return this.stringE;\r\n+    }\r\n+\r\n+    public void setIntE(int intE) {\r\n+        this.intE = intE;\r\n+    }\r\n+\r\n+    public int getIntE() {\r\n+        return this.intE;\r\n+    }\r\n+\r\n+    public void setDateE(Date dateE) {\r\n+        this.dateE = dateE;\r\n+    }\r\n+\r\n+    public Date getDateE() {\r\n+        return this.dateE;\r\n+    }\r\n+\r\n+    public void setFs(Collection fs) {\r\n+        this.fs = fs;\r\n+    }\r\n+\r\n+    public Collection getFs() {\r\n+        return this.fs;\r\n+    }\r\n+\r\n+    public void setD(ComplexD d) {\r\n+        this.d = d;\r\n+    }\r\n+\r\n+    public ComplexD getD() {\r\n+        return this.d;\r\n+    }\r\n+}\r\n+\r"},{"sha":"0c50bbcd54eb5343cff0dccd434ff9efd7a28a90","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexF.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexF.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexF.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,97 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.Collection;\r\n+import java.util.Date;\r\n+import java.util.HashSet;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Temporal;\r\n+import javax.persistence.TemporalType;\r\n+\r\n+@Entity\r\n+public class ComplexF\r\n+    extends ComplexE {\r\n+\r\n+    private String stringF;\r\n+    private int intF;\r\n+    @Temporal(TemporalType.DATE)\r\n+    private Date dateF;\r\n+    private Collection gs = new HashSet();\r\n+    @OneToOne(cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\r\n+    private ComplexE e;\r\n+\r\n+    public ComplexF() {\r\n+\r\n+    }\r\n+\r\n+    public ComplexF(String stringF, int intF, Date dateF, ComplexG[] gs,\r\n+        ComplexE e) {\r\n+        this.stringF = stringF;\r\n+        this.intF = intF;\r\n+        this.dateF = dateF;\r\n+        if (gs != null)\r\n+            this.gs.addAll(Arrays.asList(gs));\r\n+        this.e = e;\r\n+    }\r\n+\r\n+    public void setStringF(String stringF) {\r\n+        this.stringF = stringF;\r\n+    }\r\n+\r\n+    public String getStringF() {\r\n+        return this.stringF;\r\n+    }\r\n+\r\n+    public void setIntF(int intF) {\r\n+        this.intF = intF;\r\n+    }\r\n+\r\n+    public int getIntF() {\r\n+        return this.intF;\r\n+    }\r\n+\r\n+    public void setDateF(Date dateF) {\r\n+        this.dateF = dateF;\r\n+    }\r\n+\r\n+    public Date getDateF() {\r\n+        return this.dateF;\r\n+    }\r\n+\r\n+    public void setGs(Collection gs) {\r\n+        this.gs = gs;\r\n+    }\r\n+\r\n+    public Collection getGs() {\r\n+        return this.gs;\r\n+    }\r\n+\r\n+    public void setE(ComplexE e) {\r\n+        this.e = e;\r\n+    }\r\n+\r\n+    public ComplexE getE() {\r\n+        return this.e;\r\n+    }\r\n+}\r\n+\r"},{"sha":"98eac8cee166cd0f03c415c75a8d547923ffb00e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexG.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexG.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexG.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,82 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.util.Date;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Temporal;\r\n+import javax.persistence.TemporalType;\r\n+\r\n+@Entity\r\n+public class ComplexG\r\n+    extends ComplexE {\r\n+\r\n+    private String stringG;\r\n+    private int intG;\r\n+    @Temporal(TemporalType.DATE)\r\n+    private Date dateG;\r\n+    @OneToOne(cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\r\n+    private ComplexF f;\r\n+\r\n+    public ComplexG() {\r\n+\r\n+    }\r\n+\r\n+    public ComplexG(String stringG, int intG, Date dateG, ComplexF f) {\r\n+        this.stringG = stringG;\r\n+        this.intG = intG;\r\n+        this.dateG = dateG;\r\n+        this.f = f;\r\n+    }\r\n+\r\n+    public void setStringG(String stringG) {\r\n+        this.stringG = stringG;\r\n+    }\r\n+\r\n+    public String getStringG() {\r\n+        return this.stringG;\r\n+    }\r\n+\r\n+    public void setIntG(int intG) {\r\n+        this.intG = intG;\r\n+    }\r\n+\r\n+    public int getIntG() {\r\n+        return this.intG;\r\n+    }\r\n+\r\n+    public void setDateG(Date dateG) {\r\n+        this.dateG = dateG;\r\n+    }\r\n+\r\n+    public Date getDateG() {\r\n+        return this.dateG;\r\n+    }\r\n+\r\n+    public void setF(ComplexF f) {\r\n+        this.f = f;\r\n+    }\r\n+\r\n+    public ComplexF getF() {\r\n+        return this.f;\r\n+    }\r\n+}\r\n+\r"},{"sha":"96592f0be55ed52fa06d67190955382b7ad11f00","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CompoundAppIdPC.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CompoundAppIdPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CompoundAppIdPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CompoundAppIdPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,111 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.io.Serializable;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.IdClass;\r\n+\r\n+/**\r\n+ * <p>Application identity type with a compound primary key.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+\r\n+@Entity\r\n+@IdClass(CompoundAppIdPC.Idkey.class)\r\n+public class CompoundAppIdPC {\r\n+\r\n+    @Id\r\n+    private String pk1;\r\n+\r\n+    @Id\r\n+    private int pk2;\r\n+\r\n+    private int intField;\r\n+\r\n+    public String getPk1() {\r\n+        return this.pk1;\r\n+    }\r\n+\r\n+    public void setPk1(String pk1) {\r\n+        this.pk1 = pk1;\r\n+    }\r\n+\r\n+    public int getPk2() {\r\n+        return this.pk2;\r\n+    }\r\n+\r\n+    public void setPk2(int pk2) {\r\n+        this.pk2 = pk2;\r\n+    }\r\n+\r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+\r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+\r\n+    public static class Idkey implements Serializable {\r\n+\r\n+        public String pk1;\r\n+        public int pk2;\r\n+\r\n+        public Idkey() {\r\n+        }\r\n+\r\n+        public Idkey(String str) {\r\n+            int index = str.indexOf(\"/\");\r\n+            if (index != -1) {\r\n+                pk2 = Integer.parseInt(str.substring(0, index));\r\n+                pk1 = str.substring(index + 1);\r\n+            }\r\n+        }\r\n+\r\n+        public String toString() {\r\n+            return pk2 + \"/\" + pk1;\r\n+        }\r\n+\r\n+        @Override\r\n+        public boolean equals(Object other) {\r\n+            if (!(other instanceof Idkey))\r\n+                return false;\r\n+\r\n+            Idkey id = (Idkey) other;\r\n+            if (pk1 == null && id.pk1 != null)\r\n+                return false;\r\n+            if (pk1 != null && id.pk1 == null)\r\n+                return false;\r\n+            if (!(pk1 == id.pk1))\r\n+                return false;\r\n+            if (!(pk1.equals(id.pk1)))\r\n+                return false;\r\n+\r\n+            return true;\r\n+        }\r\n+\r\n+        @Override\r\n+        public int hashCode() {\r\n+            return (pk2 + pk1).hashCode();\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"b14ce316dd159c7fab1d36afa57560e9676d8a13","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity1.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,104 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.io.Serializable;\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.EntityResult;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.NamedQuery;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.SqlResultSetMapping;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity\r\n+@Table(name = \"entity_1\")\r\n+@Inheritance(strategy = InheritanceType.JOINED)\r\n+@SqlResultSetMapping(name = \"NativeTestResult\",\r\n+    entities = @EntityResult(entityClass = Entity1.class))\r\n+@NamedQuery(name = \"setParam1\",\r\n+    query = \"SELECT o FROM Entity1 o WHERE o.stringField = :fld\")\r\n+public class Entity1 implements Serializable {\r\n+\r\n+    private static final long serialVersionUID = 2882935803066041165L;\r\n+\r\n+    @Id\r\n+    protected long pk;\r\n+\r\n+    @Basic\r\n+    @Column(length = 35)\r\n+    protected String stringField;\r\n+\r\n+    @Basic\r\n+    protected int intField;\r\n+\r\n+    @OneToOne(cascade = { CascadeType.REMOVE, CascadeType.PERSIST })\r\n+    protected Entity2 entity2Field;\r\n+\r\n+    @Version\r\n+    protected int versionField;\r\n+\r\n+    public Entity1() {\r\n+    }\r\n+\r\n+    public Entity1(long pk, String stringField, int intField) {\r\n+        this.pk = pk;\r\n+        this.stringField = stringField;\r\n+        this.intField = intField;\r\n+    }\r\n+\r\n+    public long getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public void setStringField(String val) {\r\n+        stringField = val;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return stringField;\r\n+    }\r\n+\r\n+    public void setIntField(int val) {\r\n+        intField = val;\r\n+    }\r\n+\r\n+    public int getIntField() {\r\n+        return intField;\r\n+    }\r\n+\r\n+    public void setEntity2Field(Entity2 val) {\r\n+        entity2Field = val;\r\n+    }\r\n+\r\n+    public Entity2 getEntity2Field() {\r\n+        return entity2Field;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return (\"PK: \" + pk + \" StringField: \" + stringField + \" IntField: \" +\r\n+            intField);\r\n+    }\r\n+}\r"},{"sha":"a92e7b14f1248f87d709abb37b88212c1a32e929","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity2.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,86 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.io.Serializable;\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+\r\n+//@Entity(name=\"entity2ExplicitName\")\r\n+\r\n+//@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n+/**\r\n+ * FIX-ME\r\n+ * <p/>\r\n+ * It should complain if i uncomment the above strategies...but it does\r\n+ */\r\n+@Entity\r\n+public class Entity2 implements Serializable {\r\n+\r\n+    /**\r\n+     *\r\n+     */\r\n+    private static final long serialVersionUID = 4723739219953167343L;\r\n+\r\n+    @Id\r\n+    protected long pk;\r\n+\r\n+    @Basic\r\n+    @Column(length = 35)\r\n+    protected String stringField;\r\n+\r\n+    @Basic\r\n+    protected int intField;\r\n+\r\n+    public Entity2() {\r\n+    }\r\n+\r\n+    public Entity2(long pk, String stringField, int intField) {\r\n+        this.pk = pk;\r\n+        this.stringField = stringField;\r\n+        this.intField = intField;\r\n+    }\r\n+\r\n+    public long getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public void setStringField(String val) {\r\n+        stringField = val;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return stringField;\r\n+    }\r\n+\r\n+    public void setIntField(int val) {\r\n+        intField = val;\r\n+    }\r\n+\r\n+    public int getIntField() {\r\n+        return intField;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return (\"PK: \" + pk + \" StringField: \" + stringField + \" IntField: \" +\r\n+            intField);\r\n+    }\r\n+}\r"},{"sha":"0f81c3e55b9f2bc3e09d6c4324b499506625a6b2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest1.java","status":"added","additions":124,"deletions":0,"changes":124,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,124 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.io.Serializable;\r\n+import java.util.HashSet;\r\n+import java.util.Locale;\r\n+import java.util.Set;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.Transient;\r\n+\r\n+/**\r\n+ * <p>Persitent type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+@Table(name = \"mrtest1\")\r\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n+public class ModRuntimeTest1 implements Serializable {\r\n+\r\n+    private static final long serialVersionUID = 1L;\r\n+\r\n+    @Transient\r\n+    public static final String someStaticField = \"someField\";\r\n+\r\n+    private Locale localeField;\r\n+\r\n+    @Id\r\n+    private int intField;\r\n+\r\n+    @Column(length = 35)\r\n+    private String stringField;\r\n+\r\n+    @Column(length = 35)\r\n+    public String transString;\r\n+\r\n+    @OneToOne(fetch = FetchType.LAZY,\r\n+        cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\r\n+    private ModRuntimeTest1 selfOneOne;\r\n+\r\n+    @Transient\r\n+    private Set selfOneMany = new HashSet();\r\n+\r\n+    public ModRuntimeTest1() {\r\n+    }\r\n+\r\n+    public ModRuntimeTest1(int key) {\r\n+        this.intField = key;\r\n+    }\r\n+\r\n+    public ModRuntimeTest1(String str, int i) {\r\n+        stringField = str;\r\n+        intField = i;\r\n+    }\r\n+\r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+\r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return this.stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+\r\n+    public ModRuntimeTest1 getSelfOneOne() {\r\n+        return this.selfOneOne;\r\n+    }\r\n+\r\n+    public void setSelfOneOne(ModRuntimeTest1 selfOneOne) {\r\n+        this.selfOneOne = selfOneOne;\r\n+    }\r\n+\r\n+    public Set getSelfOneMany() {\r\n+        return this.selfOneMany;\r\n+    }\r\n+\r\n+    public void setSelfOneMany(Set selfOneMany) {\r\n+        this.selfOneMany = selfOneMany;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return \"IntField: \" + intField + \", StringField: \" + stringField + \" .\";\r\n+    }\r\n+\r\n+    public Locale getLocaleField() {\r\n+        return localeField;\r\n+    }\r\n+\r\n+    public void setLocaleField(Locale localeField) {\r\n+        this.localeField = localeField;\r\n+    }\r\n+}\r"},{"sha":"4683463dbbdb1c7cf2a84df307e5c01d699224c3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest2.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,56 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * <p>Persitent type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+@DiscriminatorValue(\"mRT2\")\r\n+public class ModRuntimeTest2 extends ModRuntimeTest1 {\r\n+\r\n+    private static final long serialVersionUID = 1L;\r\n+    private int intField2;\r\n+\r\n+    public ModRuntimeTest2(int key) {\r\n+        super(key);\r\n+    }\r\n+\r\n+    public ModRuntimeTest2(String str, int i) {\r\n+        super(str, i);\r\n+    }\r\n+\r\n+    public int getIntField2() {\r\n+        return this.intField2;\r\n+    }\r\n+\r\n+    public void setIntField2(int intField2) {\r\n+        this.intField2 = intField2;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return \"IntField: \" + intField2 + \", StringField: \" +\r\n+            super.getStringField() + \" .\";\r\n+    }\r\n+}\r"},{"sha":"ccdeb19f5fe2616de756e88e40f03333d3b1e7a8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest1.java","status":"added","additions":149,"deletions":0,"changes":149,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,149 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.util.Date;\r\n+import java.util.List;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToMany;\r\n+import javax.persistence.NamedQueries;\r\n+import javax.persistence.NamedQuery;\r\n+\r\n+/**\r\n+ * <p>Used in testing; should be enhanced.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+@NamedQueries({\r\n+@NamedQuery(name = \"named\",\r\n+    query = \"SELECT o FROM QueryTest1 o\"),\r\n+@NamedQuery(name = \"sql\",\r\n+    query = \"select * from foo\"),\r\n+@NamedQuery(name = \"systemsql\",\r\n+    query = \"select * from foo\"),\r\n+@NamedQuery(name = \"systemjdoql\",\r\n+    query = \"select o FROM QueryTest1 where o.numb == 4\")\r\n+    })\r\n+public class QueryTest1 {\r\n+\r\n+    /*\r\n+      * Changed Variable names : Afam Okeke\r\n+      * Reason: The old var names are reserved my some DB's namely MYSQL.\r\n+      */\r\n+    @Id\r\n+    @GeneratedValue(strategy = GenerationType.AUTO)\r\n+    public int id;\r\n+\r\n+    public static final long FIVE = 5L;\r\n+\r\n+    private long numb = 0L;\r\n+    private String strong = null;\r\n+\r\n+    @Column(length = -1)\r\n+    private String cField = null;\r\n+    private boolean boolt = false;\r\n+    private float decar = 1.0f;\r\n+    private char chart = ' ';\r\n+    private Date datum = null;\r\n+\r\n+    @ManyToMany(mappedBy = \"manyToMany3\")\r\n+    private List<QueryTest4> manyToMany = null;\r\n+\r\n+    public QueryTest1() {\r\n+        decar = 1.0f;\r\n+    }\r\n+\r\n+    public QueryTest1(int id) {\r\n+        decar = 1.0f;\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public long getNum() {\r\n+        return numb;\r\n+    }\r\n+\r\n+    public void setNum(long val) {\r\n+        numb = val;\r\n+    }\r\n+\r\n+    public String getString() {\r\n+        return strong;\r\n+    }\r\n+\r\n+    public void setString(String val) {\r\n+        strong = val;\r\n+    }\r\n+\r\n+    public String getClob() {\r\n+        return cField;\r\n+    }\r\n+\r\n+    public void setClob(String val) {\r\n+        cField = val;\r\n+    }\r\n+\r\n+    public boolean getBool() {\r\n+        return boolt;\r\n+    }\r\n+\r\n+    public void setBool(boolean val) {\r\n+        boolt = val;\r\n+    }\r\n+\r\n+    public float getDecimal() {\r\n+        return decar;\r\n+    }\r\n+\r\n+    public void setDecimal(float val) {\r\n+        decar = val;\r\n+    }\r\n+\r\n+    public char getCharacter() {\r\n+        return chart;\r\n+    }\r\n+\r\n+    public void setCharacter(char val) {\r\n+        chart = val;\r\n+    }\r\n+\r\n+    public void setDate(Date val) {\r\n+        datum = val;\r\n+    }\r\n+\r\n+    public Date getDate() {\r\n+        return datum;\r\n+    }\r\n+\r\n+    public List<QueryTest4> getManyToMany() {\r\n+        return manyToMany;\r\n+    }\r\n+\r\n+    public void setManyToMany(List<QueryTest4> val) {\r\n+        manyToMany = val;\r\n+    }\r\n+\r\n+    public int getId() {\r\n+        return this.id;\r\n+    }\r\n+}\r"},{"sha":"50e33e30d4943ee255625dcfe9ec2b4e2300e523","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest2.java","status":"added","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,106 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.OneToMany;\r\n+import javax.persistence.OneToOne;\r\n+\r\n+import org.apache.openjpa.persistence.PersistentCollection;\r\n+import org.apache.openjpa.persistence.PersistentMap;\r\n+import org.apache.openjpa.persistence.jdbc.KeyColumn;\r\n+\r\n+/**\r\n+ * <p>Used in testing; should be enhanced.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+@DiscriminatorValue(\"query2\")\r\n+public class QueryTest2 extends QueryTest1 {\r\n+\r\n+    @OneToOne(cascade = { CascadeType.ALL })\r\n+    private QueryTest2 oneToOne = null;\r\n+\r\n+    @PersistentCollection\r\n+    private List<String> stringCollection = null;\r\n+\r\n+    @OneToMany(cascade = { CascadeType.ALL })\r\n+    private List<QueryTest2> oneToMany = null;\r\n+\r\n+    @PersistentMap\r\n+    @KeyColumn(name = \"SMAP\")\r\n+    private Map<String, String> stringMap = null;\r\n+\r\n+    @OneToMany(cascade = { CascadeType.ALL })\r\n+    @KeyColumn(name = \"QT2\")\r\n+    private Map<String, QueryTest2> stringToManyMap = null;\r\n+\r\n+    public QueryTest2() {\r\n+    }\r\n+\r\n+    public QueryTest2(int id) {\r\n+        super(id);\r\n+    }\r\n+\r\n+    public QueryTest2 getOneToOne() {\r\n+        return oneToOne;\r\n+    }\r\n+\r\n+    public void setOneToOne(QueryTest2 val) {\r\n+        oneToOne = val;\r\n+    }\r\n+\r\n+    public Collection getStringCollection() {\r\n+        return stringCollection;\r\n+    }\r\n+\r\n+    public void setStringCollection(List<String> val) {\r\n+        stringCollection = val;\r\n+    }\r\n+\r\n+    public Collection getOneToMany() {\r\n+        return oneToMany;\r\n+    }\r\n+\r\n+    public void setOneToMany(List<QueryTest2> val) {\r\n+        oneToMany = val;\r\n+    }\r\n+\r\n+    public Map getStringMap() {\r\n+        return stringMap;\r\n+    }\r\n+\r\n+    public void setStringMap(Map val) {\r\n+        stringMap = val;\r\n+    }\r\n+\r\n+    public Map getStringToManyMap() {\r\n+        return stringToManyMap;\r\n+    }\r\n+\r\n+    public void setStringToManyMap(Map val) {\r\n+        stringToManyMap = val;\r\n+    }\r\n+}\r"},{"sha":"0eaeb05788b2a80a56b01d2139e0b1fa410168b9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest3.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest3.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest3.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,43 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * <p>Used in testing; should be enhanced.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+public class QueryTest3 extends QueryTest2 {\r\n+\r\n+    private int num2 = 0;\r\n+\r\n+    public QueryTest3() {\r\n+    }\r\n+\r\n+    public QueryTest3(int id) {\r\n+        super(id);\r\n+    }\r\n+\r\n+    public void setNum2(int val) {\r\n+        num2 = val;\r\n+    }\r\n+}\r"},{"sha":"e7a6a383187471b452ad95a9f8226c8977d4c5dd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest4.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest4.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest4.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,64 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.util.Collection;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.ManyToMany;\r\n+import javax.persistence.OneToOne;\r\n+\r\n+/**\r\n+ * <p>Used in testing; should be enhanced.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+public class QueryTest4 {\r\n+\r\n+    public int num3 = 0;\r\n+    @OneToOne(cascade = { CascadeType.ALL })\r\n+    public QueryTest2 oneToOne2 = null;\r\n+\r\n+    @OneToOne(cascade = { CascadeType.ALL })\r\n+    public QueryTest2 oneToOne3 = null;\r\n+\r\n+    @ManyToMany(cascade = { CascadeType.ALL })\r\n+    public Collection<QueryTest2> manyToMany3 = null;\r\n+\r\n+    public int getNum3() {\r\n+        return num3;\r\n+    }\r\n+\r\n+    public void setNum3(int val) {\r\n+        num3 = val;\r\n+    }\r\n+\r\n+    public void setOneToOne2(QueryTest2 qt2) {\r\n+        oneToOne2 = qt2;\r\n+    }\r\n+\r\n+    public void setOneToOne3(QueryTest2 qt2) {\r\n+        oneToOne3 = qt2;\r\n+    }\r\n+\r\n+    public void setManyToMany3(Collection<QueryTest2> val) {\r\n+        manyToMany3 = val;\r\n+    }\r\n+}\r"},{"sha":"8eaaa5ac3969e908adc04adee91e27ac878c49dc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest1.java","status":"added","additions":283,"deletions":0,"changes":283,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest1.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,283 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.io.Serializable;\r\n+import java.math.BigDecimal;\r\n+import java.math.BigInteger;\r\n+import java.util.Date;\r\n+import java.util.HashSet;\r\n+import java.util.Locale;\r\n+import java.util.Set;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.OneToOne;\r\n+\r\n+import org.apache.openjpa.persistence.PersistentCollection;\r\n+\r\n+/**\r\n+ * <p>Persitent type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+@DiscriminatorValue(\"RT1\")\r\n+public class RuntimeTest1 implements Serializable {\r\n+\r\n+    public static final String someStaticField = \"someField\";\r\n+\r\n+    private byte byteField;\r\n+    private boolean booleanField;\r\n+    private char charField;\r\n+    private double doubleField;\r\n+    private float floatField;\r\n+    private int intField;\r\n+    private long longField;\r\n+    private short shortField;\r\n+    private String stringField;\r\n+    private BigInteger bigIntegerField;\r\n+    private BigDecimal bigDecimalField;\r\n+    private Date dateField;\r\n+    private Locale localeField;\r\n+    private Byte byteObjfield;\r\n+    private Boolean booleanObjField;\r\n+    private Character charObjField;\r\n+    private Double doubleObjField;\r\n+    private Float floatObjField;\r\n+    private Integer intObjField;\r\n+    private Long longObjField;\r\n+    private Short shortObjField;\r\n+\r\n+    // transactional only\r\n+    private TransactionalClassPC transField;\r\n+    public String transString;\r\n+\r\n+    // relations\r\n+    @OneToOne(cascade = { CascadeType.ALL })\r\n+    private RuntimeTest1 selfOneOne;\r\n+    @PersistentCollection\r\n+    private Set selfOneMany = new HashSet();\r\n+\r\n+    public RuntimeTest1() {\r\n+    }\r\n+\r\n+    public RuntimeTest1(int key) {\r\n+        this.intField = key;\r\n+        floatField = 1.0f;\r\n+    }\r\n+\r\n+    public RuntimeTest1(String str, int i) {\r\n+        stringField = str;\r\n+        intField = i;\r\n+        floatField = 1.0f;\r\n+    }\r\n+\r\n+    public byte getByteField() {\r\n+        return this.byteField;\r\n+    }\r\n+\r\n+    public void setByteField(byte byteField) {\r\n+        this.byteField = byteField;\r\n+    }\r\n+\r\n+    public boolean getBooleanField() {\r\n+        return this.booleanField;\r\n+    }\r\n+\r\n+    public void setBooleanField(boolean booleanField) {\r\n+        this.booleanField = booleanField;\r\n+    }\r\n+\r\n+    public char getCharField() {\r\n+        return this.charField;\r\n+    }\r\n+\r\n+    public void setCharField(char charField) {\r\n+        this.charField = charField;\r\n+    }\r\n+\r\n+    public double getDoubleField() {\r\n+        return this.doubleField;\r\n+    }\r\n+\r\n+    public void setDoubleField(double doubleField) {\r\n+        this.doubleField = doubleField;\r\n+    }\r\n+\r\n+    public float getFloatField() {\r\n+        return this.floatField;\r\n+    }\r\n+\r\n+    public void setFloatField(float floatField) {\r\n+        this.floatField = floatField;\r\n+    }\r\n+\r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+\r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+\r\n+    public long getLongField() {\r\n+        return this.longField;\r\n+    }\r\n+\r\n+    public void setLongField(long longField) {\r\n+        this.longField = longField;\r\n+    }\r\n+\r\n+    public short getShortField() {\r\n+        return this.shortField;\r\n+    }\r\n+\r\n+    public void setShortField(short shortField) {\r\n+        this.shortField = shortField;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return this.stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+\r\n+    public BigInteger getBigIntegerField() {\r\n+        return this.bigIntegerField;\r\n+    }\r\n+\r\n+    public void setBigIntegerField(BigInteger bigIntegerField) {\r\n+        this.bigIntegerField = bigIntegerField;\r\n+    }\r\n+\r\n+    public BigDecimal getBigDecimalField() {\r\n+        return this.bigDecimalField;\r\n+    }\r\n+\r\n+    public void setBigDecimalField(BigDecimal bigDecimalField) {\r\n+        this.bigDecimalField = bigDecimalField;\r\n+    }\r\n+\r\n+    public Date getDateField() {\r\n+        return this.dateField;\r\n+    }\r\n+\r\n+    public void setDateField(Date dateField) {\r\n+        this.dateField = dateField;\r\n+    }\r\n+\r\n+    public Locale getLocaleField() {\r\n+        return this.localeField;\r\n+    }\r\n+\r\n+    public void setLocaleField(Locale localeField) {\r\n+        this.localeField = localeField;\r\n+    }\r\n+\r\n+    public Byte getByteObjfield() {\r\n+        return this.byteObjfield;\r\n+    }\r\n+\r\n+    public void setByteObjfield(Byte byteObjfield) {\r\n+        this.byteObjfield = byteObjfield;\r\n+    }\r\n+\r\n+    public Boolean getBooleanObjField() {\r\n+        return this.booleanObjField;\r\n+    }\r\n+\r\n+    public void setBooleanObjField(Boolean booleanObjField) {\r\n+        this.booleanObjField = booleanObjField;\r\n+    }\r\n+\r\n+    public Character getCharObjField() {\r\n+        return this.charObjField;\r\n+    }\r\n+\r\n+    public void setCharObjField(Character charObjField) {\r\n+        this.charObjField = charObjField;\r\n+    }\r\n+\r\n+    public Double getDoubleObjField() {\r\n+        return this.doubleObjField;\r\n+    }\r\n+\r\n+    public void setDoubleObjField(Double doubleObjField) {\r\n+        this.doubleObjField = doubleObjField;\r\n+    }\r\n+\r\n+    public Float getFloatObjField() {\r\n+        return this.floatObjField;\r\n+    }\r\n+\r\n+    public void setFloatObjField(Float floatObjField) {\r\n+        this.floatObjField = floatObjField;\r\n+    }\r\n+\r\n+    public Integer getIntObjField() {\r\n+        return this.intObjField;\r\n+    }\r\n+\r\n+    public void setIntObjField(Integer intObjField) {\r\n+        this.intObjField = intObjField;\r\n+    }\r\n+\r\n+    public Long getLongObjField() {\r\n+        return this.longObjField;\r\n+    }\r\n+\r\n+    public void setLongObjField(Long longObjField) {\r\n+        this.longObjField = longObjField;\r\n+    }\r\n+\r\n+    public Short getShortObjField() {\r\n+        return this.shortObjField;\r\n+    }\r\n+\r\n+    public void setShortObjField(Short shortObjField) {\r\n+        this.shortObjField = shortObjField;\r\n+    }\r\n+\r\n+    public TransactionalClassPC getTransField() {\r\n+        return this.transField;\r\n+    }\r\n+\r\n+    public void setTransField(TransactionalClassPC transField) {\r\n+        this.transField = transField;\r\n+    }\r\n+\r\n+    public RuntimeTest1 getSelfOneOne() {\r\n+        return this.selfOneOne;\r\n+    }\r\n+\r\n+    public void setSelfOneOne(RuntimeTest1 selfOneOne) {\r\n+        this.selfOneOne = selfOneOne;\r\n+    }\r\n+\r\n+    public Set getSelfOneMany() {\r\n+        return this.selfOneMany;\r\n+    }\r\n+\r\n+    public void setSelfOneMany(Set selfOneMany) {\r\n+        this.selfOneMany = selfOneMany;\r\n+    }\r\n+}\r"},{"sha":"93c1d16dbf1c506222a2a4766365edeb4ecda8e6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest2.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest2.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,59 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * <p>Persitent type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+@DiscriminatorValue(\"RT2\")\r\n+public class RuntimeTest2 extends RuntimeTest1 {\r\n+\r\n+    private static final long serialVersionUID = 1L;\r\n+    private int intField2;\r\n+\r\n+    public RuntimeTest2() {\r\n+    }\r\n+\r\n+    public RuntimeTest2(int key) {\r\n+        super(key);\r\n+    }\r\n+\r\n+    public RuntimeTest2(String str, int i) {\r\n+        super(str, i);\r\n+    }\r\n+\r\n+    public int getIntField2() {\r\n+        return this.intField2;\r\n+    }\r\n+\r\n+    public void setIntField2(int intField2) {\r\n+        this.intField2 = intField2;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return \"IntField: \" + intField2 + \", StringField: \" +\r\n+            super.getStringField() + \" .\";\r\n+    }\r\n+}\r"},{"sha":"35c633ff4778a56ab6cbf0da78d5fa100198ac38","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest3.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest3.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest3.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,49 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * <p>Persitent type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+@DiscriminatorValue(\"RT3\")\r\n+public class RuntimeTest3 extends RuntimeTest2 {\r\n+\r\n+    private int intField3;\r\n+\r\n+    public RuntimeTest3() {\r\n+    }\r\n+\r\n+    public RuntimeTest3(String str, int i) {\r\n+        super(str, i);\r\n+    }\r\n+\r\n+    public int getIntField3() {\r\n+        return this.intField3;\r\n+    }\r\n+\r\n+    public void setIntField3(int intField3) {\r\n+        this.intField3 = intField3;\r\n+    }\r\n+}\r"},{"sha":"353f2834166d89188b33c81f0735834ec4abce6d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest4.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest4.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest4.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class RuntimeTest4 {\r\n+\r\n+    private String name;\r\n+    private Collection runtimeTest5s = new ArrayList();\r\n+\r\n+    public RuntimeTest4(String str) {\r\n+        name = str;\r\n+    }\r\n+\r\n+    public void setName(String val) {\r\n+        name = val;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public Collection getRuntimeTest5s() {\r\n+        return runtimeTest5s;\r\n+    }\r\n+\r\n+    public void setRuntimeTest5s(Collection c) {\r\n+        runtimeTest5s = c;\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"ac0a6abb3f34bd06af5f631075efd581cf2bd491","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest5.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest5.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest5.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest5.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,52 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.OneToOne;\r\n+\r\n+@Entity\r\n+public class RuntimeTest5 {\r\n+\r\n+    private String name;\r\n+\r\n+    @OneToOne(cascade = { CascadeType.ALL })\r\n+    private RuntimeTest4 runtimeTest4;\r\n+\r\n+    public RuntimeTest5(String str) {\r\n+        name = str;\r\n+    }\r\n+\r\n+    public void setName(String val) {\r\n+        name = val;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setRuntimeTest4(RuntimeTest4 val) {\r\n+        runtimeTest4 = val;\r\n+    }\r\n+\r\n+    public RuntimeTest4 getRuntimeTest4() {\r\n+        return runtimeTest4;\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"7cd82b43532bb39ce81bdda6f3a1c9385bf6b66c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/SimpleAppIdPC.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/SimpleAppIdPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/SimpleAppIdPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/SimpleAppIdPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,52 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+\r\n+/**\r\n+ * <p>Single-field application identity class.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+public class SimpleAppIdPC {\r\n+\r\n+    @Id\r\n+    private String pk;\r\n+\r\n+    private int intField;\r\n+\r\n+    public String getPk() {\r\n+        return this.pk;\r\n+    }\r\n+\r\n+    public void setPk(String pk) {\r\n+        this.pk = pk;\r\n+    }\r\n+\r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+\r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+}\r"},{"sha":"eb59d5f23a6600ae510e1a7c4edc691d52b40d19","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/TransactionalClassPC.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/TransactionalClassPC.java","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/TransactionalClassPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/TransactionalClassPC.java?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,35 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class TransactionalClassPC {\r\n+\r\n+    private int intField;\r\n+\r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+\r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+}\r"},{"sha":"47d77df17c2f9827104e3b6eb1c096045fc5cb29","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/orm.xml","status":"added","additions":160,"deletions":0,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/orm.xml","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/orm.xml?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,160 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<!--\r\n+ Licensed to the Apache Software Foundation (ASF) under one\r\n+ or more contributor license agreements.  See the NOTICE file\r\n+ distributed with this work for additional information\r\n+ regarding copyright ownership.  The ASF licenses this file\r\n+ to you under the Apache License, Version 2.0 (the\r\n+ \"License\"); you may not use this file except in compliance\r\n+ with the License.  You may obtain a copy of the License at\r\n+ \r\n+ http://www.apache.org/licenses/LICENSE-2.0\r\n+ \r\n+ Unless required by applicable law or agreed to in writing,\r\n+ software distributed under the License is distributed on an\r\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ KIND, either express or implied.  See the License for the\r\n+ specific language governing permissions and limitations\r\n+ under the License.   \r\n+-->\r\n+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\" \r\n+xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \r\n+xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm\r\n+                    http://java.sun.com/xml/ns/persistence/orm_1_0.xsd\" \r\n+version=\"1.0\">\r\n+\r\n+<persistence-unit-metadata>\r\n+   <persistence-unit-defaults>\r\n+       <entity-listeners>\r\n+            <entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.DefaultCallbackListener\">\r\n+                 <pre-persist method-name=\"prePersist\" />\r\n+                 <post-persist method-name=\"postPersist\" />\r\n+                 <pre-remove method-name=\"preRemove\" />\r\n+                 <post-remove method-name=\"postRemove\" />\r\n+                 <pre-update method-name=\"preUpdate\" />\r\n+                 <post-update method-name=\"postUpdate\" />\r\n+                 <post-load method-name=\"postLoad\" />\r\n+            </entity-listener>\r\n+        </entity-listeners> \r\n+   </persistence-unit-defaults>\r\n+</persistence-unit-metadata>\r\n+\r\n+<!-- <entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Schedule\" metadata-complete=\"true\">\r\n+\t\t<description>\r\n+\t\t\tSchedule class represents the superclass of this app...\r\n+\t\t</description>\r\n+\t\t<inheritance strategy=\"TABLE_PER_CLASS\" />\r\n+\r\n+\t     <entity-listeners>\r\n+\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.DateValidator\">\r\n+\t\t\t\t<pre-persist method-name=\"prePersist\" />\r\n+\t\t\t\t<post-persist method-name=\"postPersist\" />\r\n+\t\t\t</entity-listener>\r\n+\r\n+\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.StringValidator\">\r\n+\t\t\t\t<pre-persist method-name=\"prePersist\" />\r\n+\t\t\t\t<post-persist method-name=\"postPersist\" />\r\n+\t\t\t</entity-listener>\r\n+\t\t</entity-listeners> \r\n+\r\n+\t\t<attributes>\r\n+\t\t\t<id name=\"id\">\r\n+\t\t\t\t<generated-value strategy=\"AUTO\" />\r\n+\t\t\t</id>\r\n+\t\t\t<basic name=\"dob\">\r\n+\t\t\t\t<temporal>DATE</temporal>\r\n+\t\t\t</basic>\r\n+\t\t\t<basic name=\"startDate\">\r\n+\t\t\t\t<temporal>TIME</temporal>\r\n+\t\t\t</basic>\r\n+\t\t\t<basic name=\"endDate\">\r\n+\t\t\t\t<temporal>TIMESTAMP</temporal>\r\n+\t\t\t</basic>\r\n+\t\t\t<basic name=\"name\">\r\n+\t\t\t</basic>\r\n+\t\t</attributes>\r\n+\t</entity>\r\n+\r\n+\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.FlightSchedule\" metadata-complete=\"true\">\r\n+\t\t<description>\r\n+\t\t\tFlightSchedule, subclass of schedule specifies the real life flight schedule \r\n+\t\t</description>\r\n+\r\n+\t\t<table name=\"Flight_Sched\">\r\n+\t\t\t<unique-constraint>\r\n+\t\t\t\t<column-name>planeName</column-name>\r\n+\t\t\t</unique-constraint>\r\n+\t\t</table>\r\n+\r\n+\t\t<attributes>\r\n+\t\t\t<id name=\"FlightNum\">\r\n+\t\t\t\t<generated-value strategy=\"AUTO\" />\r\n+\t\t\t</id>\r\n+\t\t\t<basic name=\"planeName\">\r\n+\t\t\t\t<column name=\"flight_name\"/>\r\n+\t\t\t</basic>\r\n+\t\t</attributes>\r\n+\t</entity>\r\n+\r\n+\t <entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Employee\" metadata-complete=\"true\">\r\n+\t\t<inheritance strategy=\"JOINED\" />\r\n+\r\n+\t\t<entity-listeners>\r\n+\t\t\t<entity-listener class=\"annotations.common.apps.NameValidator\">\r\n+\t\t\t\t<pre-persist method-name=\"validateName\" />\r\n+\t\t\t\t<pre-remove method-name=\"validateNothing1\" />\r\n+\t\t\t\t<post-remove method-name=\"validateNothing\" />\r\n+\t\t\t\t<post-update method-name=\"testpost\" />\r\n+\t\t\t</entity-listener>\r\n+\r\n+\t\t\t<entity-listener class=\"annotations.common.apps.LongNameValidator\">\r\n+\t\t\t\t<pre-persist method-name=\"validateName\" />\r\n+\t\t\t\t<post-update method-name=\"testpost\" />\r\n+\t\t\t</entity-listener>\r\n+\t\t</entity-listeners> \r\n+\r\n+\t\t<attributes>\r\n+\t\t\t<id name=\"id\">\r\n+\t\t\t</id>\r\n+\t\t\t<basic name=\"name\">\r\n+\t\t\t</basic>\r\n+\t\t\t<transient name=\"syncTime\" />\r\n+\t\t</attributes>\r\n+\t</entity>\r\n+\r\n+\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.ContractEmployee\" metadata-complete=\"true\">\r\n+\t</entity>  \r\n+\r\n+\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.TxRollbackEntity\" metadata-complete=\"true\">\r\n+\t</entity> -->\r\n+\r\n+\r\n+\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.LifeCycleDDEntity\">\r\n+    <exclude-default-listeners />\r\n+    <entity-listeners>\r\n+\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.EntityDDListener\">\r\n+\t\t\t\t<post-remove method-name=\"verifyPostRemove\" />\r\n+\t\t\t\t<post-update method-name=\"verifyPostUpdate\" />\r\n+\t\t\t</entity-listener>\r\n+\r\n+\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.EntityDDListener2\">\r\n+\t\t\t\t<pre-update method-name=\"verifyPreUpdate\" />\r\n+\t\t\t\t<post-load method-name=\"verifyPostLoad\" /> \r\n+\t\t\t</entity-listener>\r\n+\t\t</entity-listeners>\r\n+\r\n+        <pre-persist method-name=\"verifyPrePersist\" />\r\n+        <post-persist method-name=\"verifyPostPersist\" />\r\n+        <pre-remove method-name=\"verifyPreRemove\" />\r\n+\r\n+\t\t<attributes>\r\n+\t\t\t<id name=\"id\">\r\n+\t\t\t\t<generated-value strategy=\"AUTO\" />\r\n+\t\t\t</id>\r\n+\t\t\t<basic name=\"name\">\r\n+\t\t\t</basic>\r\n+\t\t\t<basic name=\"surname\">\r\n+\t\t\t</basic>\r\n+\t\t</attributes>\r\n+\t</entity> \r\n+</entity-mappings>\r"},{"sha":"91a307b6d148dfd113ce8e27a59c58eada0235a3","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/persistence.xml","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/persistence.xml?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,48 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<!--\r\n+ Licensed to the Apache Software Foundation (ASF) under one\r\n+ or more contributor license agreements.  See the NOTICE file\r\n+ distributed with this work for additional information\r\n+ regarding copyright ownership.  The ASF licenses this file\r\n+ to you under the Apache License, Version 2.0 (the\r\n+ \"License\"); you may not use this file except in compliance\r\n+ with the License.  You may obtain a copy of the License at\r\n+ \r\n+ http://www.apache.org/licenses/LICENSE-2.0\r\n+ \r\n+ Unless required by applicable law or agreed to in writing,\r\n+ software distributed under the License is distributed on an\r\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ KIND, either express or implied.  See the License for the\r\n+ specific language governing permissions and limitations\r\n+ under the License.   \r\n+-->\r\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" version=\"1.0\">\r\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbedOwner</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.AnnoTest1</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.AnnoTest2</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.AnnoTest3</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.ContractEmployee</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Employee</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Entity1</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Entity2</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Flat1</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Flat2</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Generator</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.TablePerClass1</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.TablePerClass2</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.OrderByEntity</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbeddableSuperSub</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.PropertyAccess1</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbeddedIdEntity</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbedValue</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbedValue2</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Schedule</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.FlightSchedule</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbeddedIdClass</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbeddableSuper</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.TxRollbackEntity</class>\r\n+\t</persistence-unit>\r\n+</persistence>\r"},{"sha":"dfd2b4623112ce22d48faea89579c7d14d6c4d51","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/orm.xml","status":"added","additions":160,"deletions":0,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/orm.xml","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/orm.xml?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,160 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<!--\r\n+ Licensed to the Apache Software Foundation (ASF) under one\r\n+ or more contributor license agreements.  See the NOTICE file\r\n+ distributed with this work for additional information\r\n+ regarding copyright ownership.  The ASF licenses this file\r\n+ to you under the Apache License, Version 2.0 (the\r\n+ \"License\"); you may not use this file except in compliance\r\n+ with the License.  You may obtain a copy of the License at\r\n+ \r\n+ http://www.apache.org/licenses/LICENSE-2.0\r\n+ \r\n+ Unless required by applicable law or agreed to in writing,\r\n+ software distributed under the License is distributed on an\r\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ KIND, either express or implied.  See the License for the\r\n+ specific language governing permissions and limitations\r\n+ under the License.   \r\n+-->\r\n+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\" \r\n+xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \r\n+xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm\r\n+                    http://java.sun.com/xml/ns/persistence/orm_1_0.xsd\" \r\n+version=\"1.0\">\r\n+\r\n+<persistence-unit-metadata>\r\n+   <persistence-unit-defaults>\r\n+       <entity-listeners>\r\n+            <entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.DefaultCallbackListener\">\r\n+                 <pre-persist method-name=\"prePersist\" />\r\n+                 <post-persist method-name=\"postPersist\" />\r\n+                 <pre-remove method-name=\"preRemove\" />\r\n+                 <post-remove method-name=\"postRemove\" />\r\n+                 <pre-update method-name=\"preUpdate\" />\r\n+                 <post-update method-name=\"postUpdate\" />\r\n+                 <post-load method-name=\"postLoad\" />\r\n+            </entity-listener>\r\n+        </entity-listeners> \r\n+   </persistence-unit-defaults>\r\n+</persistence-unit-metadata>\r\n+\r\n+<!-- <entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Schedule\" metadata-complete=\"true\">\r\n+\t\t<description>\r\n+\t\t\tSchedule class represents the superclass of this app...\r\n+\t\t</description>\r\n+\t\t<inheritance strategy=\"TABLE_PER_CLASS\" />\r\n+\r\n+\t     <entity-listeners>\r\n+\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.DateValidator\">\r\n+\t\t\t\t<pre-persist method-name=\"prePersist\" />\r\n+\t\t\t\t<post-persist method-name=\"postPersist\" />\r\n+\t\t\t</entity-listener>\r\n+\r\n+\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.StringValidator\">\r\n+\t\t\t\t<pre-persist method-name=\"prePersist\" />\r\n+\t\t\t\t<post-persist method-name=\"postPersist\" />\r\n+\t\t\t</entity-listener>\r\n+\t\t</entity-listeners> \r\n+\r\n+\t\t<attributes>\r\n+\t\t\t<id name=\"id\">\r\n+\t\t\t\t<generated-value strategy=\"AUTO\" />\r\n+\t\t\t</id>\r\n+\t\t\t<basic name=\"dob\">\r\n+\t\t\t\t<temporal>DATE</temporal>\r\n+\t\t\t</basic>\r\n+\t\t\t<basic name=\"startDate\">\r\n+\t\t\t\t<temporal>TIME</temporal>\r\n+\t\t\t</basic>\r\n+\t\t\t<basic name=\"endDate\">\r\n+\t\t\t\t<temporal>TIMESTAMP</temporal>\r\n+\t\t\t</basic>\r\n+\t\t\t<basic name=\"name\">\r\n+\t\t\t</basic>\r\n+\t\t</attributes>\r\n+\t</entity>\r\n+\r\n+\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.FlightSchedule\" metadata-complete=\"true\">\r\n+\t\t<description>\r\n+\t\t\tFlightSchedule, subclass of schedule specifies the real life flight schedule \r\n+\t\t</description>\r\n+\r\n+\t\t<table name=\"Flight_Sched\">\r\n+\t\t\t<unique-constraint>\r\n+\t\t\t\t<column-name>planeName</column-name>\r\n+\t\t\t</unique-constraint>\r\n+\t\t</table>\r\n+\r\n+\t\t<attributes>\r\n+\t\t\t<id name=\"FlightNum\">\r\n+\t\t\t\t<generated-value strategy=\"AUTO\" />\r\n+\t\t\t</id>\r\n+\t\t\t<basic name=\"planeName\">\r\n+\t\t\t\t<column name=\"flight_name\"/>\r\n+\t\t\t</basic>\r\n+\t\t</attributes>\r\n+\t</entity>\r\n+\r\n+\t <entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Employee\" metadata-complete=\"true\">\r\n+\t\t<inheritance strategy=\"JOINED\" />\r\n+\r\n+\t\t<entity-listeners>\r\n+\t\t\t<entity-listener class=\"annotations.common.apps.NameValidator\">\r\n+\t\t\t\t<pre-persist method-name=\"validateName\" />\r\n+\t\t\t\t<pre-remove method-name=\"validateNothing1\" />\r\n+\t\t\t\t<post-remove method-name=\"validateNothing\" />\r\n+\t\t\t\t<post-update method-name=\"testpost\" />\r\n+\t\t\t</entity-listener>\r\n+\r\n+\t\t\t<entity-listener class=\"annotations.common.apps.LongNameValidator\">\r\n+\t\t\t\t<pre-persist method-name=\"validateName\" />\r\n+\t\t\t\t<post-update method-name=\"testpost\" />\r\n+\t\t\t</entity-listener>\r\n+\t\t</entity-listeners> \r\n+\r\n+\t\t<attributes>\r\n+\t\t\t<id name=\"id\">\r\n+\t\t\t</id>\r\n+\t\t\t<basic name=\"name\">\r\n+\t\t\t</basic>\r\n+\t\t\t<transient name=\"syncTime\" />\r\n+\t\t</attributes>\r\n+\t</entity>\r\n+\r\n+\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.ContractEmployee\" metadata-complete=\"true\">\r\n+\t</entity>  \r\n+\r\n+\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.TxRollbackEntity\" metadata-complete=\"true\">\r\n+\t</entity> -->\r\n+\r\n+\r\n+  <!-- <entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.LifeCycleDDEntity\">\r\n+    <exclude-default-listeners />\r\n+    <entity-listeners>\r\n+\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.EntityDDListener\">\r\n+\t\t\t\t<post-remove method-name=\"verifyPostRemove\" />\r\n+\t\t\t\t<post-update method-name=\"verifyPostUpdate\" />\r\n+\t\t\t</entity-listener>\r\n+\r\n+\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.EntityDDListener2\">\r\n+\t\t\t\t<pre-update method-name=\"verifyPreUpdate\" />\r\n+\t\t\t\t<post-load method-name=\"verifyPostLoad\" /> \r\n+\t\t\t</entity-listener>\r\n+\t\t</entity-listeners>\r\n+\r\n+        <pre-persist method-name=\"verifyPrePersist\" />\r\n+        <post-persist method-name=\"verifyPostPersist\" />\r\n+        <pre-remove method-name=\"verifyPreRemove\" />\r\n+\r\n+\t\t<attributes>\r\n+\t\t\t<id name=\"id\">\r\n+\t\t\t\t<generated-value strategy=\"AUTO\" />\r\n+\t\t\t</id>\r\n+\t\t\t<basic name=\"name\">\r\n+\t\t\t</basic>\r\n+\t\t\t<basic name=\"surname\">\r\n+\t\t\t</basic>\r\n+\t\t</attributes>\r\n+\t</entity> -->\r\n+</entity-mappings>\r"},{"sha":"0e0a1b9ebecd4cde58632a2270013cd1aaaa1b59","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/persistence.xml","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/persistence.xml?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,33 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<!--\r\n+ Licensed to the Apache Software Foundation (ASF) under one\r\n+ or more contributor license agreements.  See the NOTICE file\r\n+ distributed with this work for additional information\r\n+ regarding copyright ownership.  The ASF licenses this file\r\n+ to you under the Apache License, Version 2.0 (the\r\n+ \"License\"); you may not use this file except in compliance\r\n+ with the License.  You may obtain a copy of the License at\r\n+ \r\n+ http://www.apache.org/licenses/LICENSE-2.0\r\n+ \r\n+ Unless required by applicable law or agreed to in writing,\r\n+ software distributed under the License is distributed on an\r\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ KIND, either express or implied.  See the License for the\r\n+ specific language governing permissions and limitations\r\n+ under the License.   \r\n+-->\r\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" version=\"1.0\">\r\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.Employee</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.ContractEmployee</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.TxRollbackEntity</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.LifeCycleDDEntity</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.LifeCycleDDEntity2</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.LifeCycleDDEntitySub</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.Entity1</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.Entity2</class>\r\n+\t</persistence-unit>\r\n+\r\n+</persistence>\r"},{"sha":"fe205a2d62e941b0475da00ebec78af548efb56b","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/cache/common/apps/META-INF/persistence.xml","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/cache/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/cache/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/cache/common/apps/META-INF/persistence.xml?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,29 @@\n+<!--\r\n+ Licensed to the Apache Software Foundation (ASF) under one\r\n+ or more contributor license agreements.  See the NOTICE file\r\n+ distributed with this work for additional information\r\n+ regarding copyright ownership.  The ASF licenses this file\r\n+ to you under the Apache License, Version 2.0 (the\r\n+ \"License\"); you may not use this file except in compliance\r\n+ with the License.  You may obtain a copy of the License at\r\n+ \r\n+ http://www.apache.org/licenses/LICENSE-2.0\r\n+ \r\n+ Unless required by applicable law or agreed to in writing,\r\n+ software distributed under the License is distributed on an\r\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ KIND, either express or implied.  See the License for the\r\n+ specific language governing permissions and limitations\r\n+ under the License.   \r\n+-->\r\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\r\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+  xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"\r\n+  version=\"1.0\">\r\n+\r\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n+\t    <class>org.apache.openjpa.persistence.cache.common.apps.Entity1</class>\r\n+\t    <class>org.apache.openjpa.persistence.cache.common.apps.Entity2</class>\r\n+\t</persistence-unit>\r\n+</persistence>\r"},{"sha":"23b474f8d8fcc8ee5d818eccffaff5a3fad0e5a7","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/common/apps/META-INF/persistence.xml","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/common/apps/META-INF/persistence.xml?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,45 @@\n+<!--\r\n+ Licensed to the Apache Software Foundation (ASF) under one\r\n+ or more contributor license agreements.  See the NOTICE file\r\n+ distributed with this work for additional information\r\n+ regarding copyright ownership.  The ASF licenses this file\r\n+ to you under the Apache License, Version 2.0 (the\r\n+ \"License\"); you may not use this file except in compliance\r\n+ with the License.  You may obtain a copy of the License at\r\n+ \r\n+ http://www.apache.org/licenses/LICENSE-2.0\r\n+ \r\n+ Unless required by applicable law or agreed to in writing,\r\n+ software distributed under the License is distributed on an\r\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ KIND, either express or implied.  See the License for the\r\n+ specific language governing permissions and limitations\r\n+ under the License.   \r\n+-->\r\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\r\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n+\t\t<class>persistence.common.apps.Entity1</class>\r\n+\t\t<class>persistence.common.apps.Entity2</class>\r\n+\t\t<class>persistence.common.apps.RuntimeTest1</class>\r\n+\t\t<class>persistence.common.apps.RuntimeTest2</class>\r\n+\t\t<class>persistence.common.apps.Course</class>\r\n+\t\t<class>persistence.common.apps.Department</class>\r\n+\t\t<class>persistence.common.apps.Student</class>\r\n+\t\t<class>persistence.common.apps.ArtCourse</class>\r\n+\t\t<class>persistence.common.apps.ScienceCourse</class>\r\n+\t\t<class>persistence.common.apps.EmbeddedOwnerPC</class>\r\n+\t\t<class>persistence.common.apps.EmbeddedPC</class>\r\n+\t\t<class>persistence.common.apps.ComplexEmbeddedPC</class>\r\n+\t\t<class>persistence.common.apps.CompUser</class>\r\n+\t\t<class>persistence.common.apps.MaleUser</class>\r\n+\t\t<class>persistence.common.apps.Address</class>\r\n+\t\t<class>persistence.common.apps.FemaleUser</class>\r\n+\t\t<properties>\r\n+\t\t\t<property name=\"openjpa.ConnectionFactoryProperties\" value=\"MaxActive=110, MaxIdle=10, ValidationTimeout=50000, \r\n+                                                                     MaxCachedStatements=10, ValidationSQL='', MaxWait=10000, TestOnBorrow=true\" />\r\n+\t\t\t<property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema(ForeignKeys=true)\" />\r\n+\t\t</properties>\r\n+\t</persistence-unit>\r\n+</persistence>\r"},{"sha":"d428dad6a6737879c61002f36577630e1c102b1d","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/conf/common/apps/META-INF/persistence.xml","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/conf/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/conf/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/conf/common/apps/META-INF/persistence.xml?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,25 @@\n+<!--\r\n+ Licensed to the Apache Software Foundation (ASF) under one\r\n+ or more contributor license agreements.  See the NOTICE file\r\n+ distributed with this work for additional information\r\n+ regarding copyright ownership.  The ASF licenses this file\r\n+ to you under the Apache License, Version 2.0 (the\r\n+ \"License\"); you may not use this file except in compliance\r\n+ with the License.  You may obtain a copy of the License at\r\n+ \r\n+ http://www.apache.org/licenses/LICENSE-2.0\r\n+ \r\n+ Unless required by applicable law or agreed to in writing,\r\n+ software distributed under the License is distributed on an\r\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ KIND, either express or implied.  See the License for the\r\n+ specific language governing permissions and limitations\r\n+ under the License.   \r\n+-->\r\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\r\n+\r\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n+\t</persistence-unit>\r\n+</persistence>\r"},{"sha":"a2c7a8fab2b9ae5f4f9ec139376ec5e359a9f2b5","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/datacache/common/apps/META-INF/persistence.xml","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/datacache/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/datacache/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/datacache/common/apps/META-INF/persistence.xml?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,53 @@\n+<!--\r\n+ Licensed to the Apache Software Foundation (ASF) under one\r\n+ or more contributor license agreements.  See the NOTICE file\r\n+ distributed with this work for additional information\r\n+ regarding copyright ownership.  The ASF licenses this file\r\n+ to you under the Apache License, Version 2.0 (the\r\n+ \"License\"); you may not use this file except in compliance\r\n+ with the License.  You may obtain a copy of the License at\r\n+ \r\n+ http://www.apache.org/licenses/LICENSE-2.0\r\n+ \r\n+ Unless required by applicable law or agreed to in writing,\r\n+ software distributed under the License is distributed on an\r\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ KIND, either express or implied.  See the License for the\r\n+ specific language governing permissions and limitations\r\n+ under the License.   \r\n+-->\r\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\r\n+\r\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n+\t\t\r\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AppIdCacheObject</class>\r\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AttachA</class>\r\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AttachB</class>\r\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AttachC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AttachD</class>\r\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AttachE</class>\r\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AttachF</class>\r\n+<!--\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectInterface</class>-->\r\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectWithExternalizedFields</class>\r\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA</class>\r\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectB</class>\r\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectD</class>\r\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectE</class>\r\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectF</class>\r\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectG</class>\r\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectH</class>\r\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectJ</class>\r\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.FlushDataCacheObject</class>\r\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild1</class>\r\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild2</class>\r\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectBChild1</class>\r\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.RuntimeTest1</class>\r\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.RuntimeTest2</class>\r\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.ScheduledEviction</class>\r\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.SelfReferencingCacheTestObject</class>\r\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.TransactionalClassPC</class>\r\n+\t</persistence-unit>\r\n+</persistence>\r"},{"sha":"bf0e14cd349ad15724d9e379722c397eca6f46b3","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/enhance/common/apps/META-INF/persistence.xml","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/enhance/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/enhance/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/enhance/common/apps/META-INF/persistence.xml?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,41 @@\n+<!--\r\n+ Licensed to the Apache Software Foundation (ASF) under one\r\n+ or more contributor license agreements.  See the NOTICE file\r\n+ distributed with this work for additional information\r\n+ regarding copyright ownership.  The ASF licenses this file\r\n+ to you under the Apache License, Version 2.0 (the\r\n+ \"License\"); you may not use this file except in compliance\r\n+ with the License.  You may obtain a copy of the License at\r\n+ \r\n+ http://www.apache.org/licenses/LICENSE-2.0\r\n+ \r\n+ Unless required by applicable law or agreed to in writing,\r\n+ software distributed under the License is distributed on an\r\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ KIND, either express or implied.  See the License for the\r\n+ specific language governing permissions and limitations\r\n+ under the License.   \r\n+-->\r\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\r\n+\r\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.PCClone</class>\r\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.NonPCClone</class>\r\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.SubclassClone</class>\r\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.NoClone</class>\r\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.NoNoArgs</class>\r\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.No2NoArgs</class>\r\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.No3NoArgs</class>\r\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.BackingFieldNameMismatchInstance</class>\r\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.BaseEntity</class>\r\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.BasicSubclassInstance</class>\r\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.DetachablePC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.DetachableVersionedPC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.ManagedInverseTestInstance</class>\r\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.ManagedInverseTestInstance2</class>\r\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.DerivedEntity</class>\r\n+\r\n+\t</persistence-unit>\r\n+</persistence>\r"},{"sha":"d88b56e965551fc6e7fd1195487cb1768bf0f333","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/entityoperation/common/apps/META-INF/persistence.xml","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/entityoperation/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/entityoperation/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/entityoperation/common/apps/META-INF/persistence.xml?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,26 @@\n+<!--\r\n+ Licensed to the Apache Software Foundation (ASF) under one\r\n+ or more contributor license agreements.  See the NOTICE file\r\n+ distributed with this work for additional information\r\n+ regarding copyright ownership.  The ASF licenses this file\r\n+ to you under the Apache License, Version 2.0 (the\r\n+ \"License\"); you may not use this file except in compliance\r\n+ with the License.  You may obtain a copy of the License at\r\n+ \r\n+ http://www.apache.org/licenses/LICENSE-2.0\r\n+ \r\n+ Unless required by applicable law or agreed to in writing,\r\n+ software distributed under the License is distributed on an\r\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ KIND, either express or implied.  See the License for the\r\n+ specific language governing permissions and limitations\r\n+ under the License.   \r\n+-->\r\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\r\n+\r\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n+\t\t<class>org.apache.openjpa.persistence.entityoperation.common.apps.CascadesEntity</class>\r\n+\t</persistence-unit>\r\n+</persistence>\r"},{"sha":"3d7d2cb1606c4cf1d584aa75ff77592819f8b093","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/event/common/apps/META-INF/persistence.xml","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/event/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/event/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/event/common/apps/META-INF/persistence.xml?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,29 @@\n+<!--\r\n+ Licensed to the Apache Software Foundation (ASF) under one\r\n+ or more contributor license agreements.  See the NOTICE file\r\n+ distributed with this work for additional information\r\n+ regarding copyright ownership.  The ASF licenses this file\r\n+ to you under the Apache License, Version 2.0 (the\r\n+ \"License\"); you may not use this file except in compliance\r\n+ with the License.  You may obtain a copy of the License at\r\n+ \r\n+ http://www.apache.org/licenses/LICENSE-2.0\r\n+ \r\n+ Unless required by applicable law or agreed to in writing,\r\n+ software distributed under the License is distributed on an\r\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ KIND, either express or implied.  See the License for the\r\n+ specific language governing permissions and limitations\r\n+ under the License.   \r\n+-->\r\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\r\n+\r\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n+\t\t<class>org.apache.openjpa.persistence.event.common.apps.RuntimeTest1</class>\r\n+\t\t<class>org.apache.openjpa.persistence.event.common.apps.RuntimeTest2</class>\r\n+\t\t<class>org.apache.openjpa.persistence.event.common.apps.RuntimeTest4</class>\r\n+\t\t<class>org.apache.openjpa.persistence.event.common.apps.TransactionalClassPC</class>\r\n+\t</persistence-unit>\r\n+</persistence>\r"},{"sha":"4ce71126b60c0a077e2d39e89a6f7379f408402b","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/META-INF/persistence.xml","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/META-INF/persistence.xml?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,42 @@\n+<!--\r\n+ Licensed to the Apache Software Foundation (ASF) under one\r\n+ or more contributor license agreements.  See the NOTICE file\r\n+ distributed with this work for additional information\r\n+ regarding copyright ownership.  The ASF licenses this file\r\n+ to you under the Apache License, Version 2.0 (the\r\n+ \"License\"); you may not use this file except in compliance\r\n+ with the License.  You may obtain a copy of the License at\r\n+ \r\n+ http://www.apache.org/licenses/LICENSE-2.0\r\n+ \r\n+ Unless required by applicable law or agreed to in writing,\r\n+ software distributed under the License is distributed on an\r\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ KIND, either express or implied.  See the License for the\r\n+ specific language governing permissions and limitations\r\n+ under the License.   \r\n+-->\r\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\r\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+  xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"\r\n+  version=\"1.0\">\r\n+\r\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.AutoIncrementPC1</class>\r\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.AutoIncrementPC2</class>\r\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.AutoIncrementPC3</class>\r\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.ConstantJoinPC4</class>\r\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.ConstantJoinPC5</class>\r\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.CustomMappingPC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.EagerPC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.EagerPCSub</class>\r\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.HelperPC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.HelperPC2</class>\r\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.HelperPC3</class>\r\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.HelperPC4</class>\r\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.InvertA</class>\r\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.InvertB</class>\r\n+\t</persistence-unit>\r\n+</persistence>\r"},{"sha":"541304d10149da6ae6ed586fcc5ab4aea5ad01f8","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/META-INF/persistence.xml","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/META-INF/persistence.xml?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,34 @@\n+<!--\r\n+ Licensed to the Apache Software Foundation (ASF) under one\r\n+ or more contributor license agreements.  See the NOTICE file\r\n+ distributed with this work for additional information\r\n+ regarding copyright ownership.  The ASF licenses this file\r\n+ to you under the Apache License, Version 2.0 (the\r\n+ \"License\"); you may not use this file except in compliance\r\n+ with the License.  You may obtain a copy of the License at\r\n+ \r\n+ http://www.apache.org/licenses/LICENSE-2.0\r\n+ \r\n+ Unless required by applicable law or agreed to in writing,\r\n+ software distributed under the License is distributed on an\r\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ KIND, either express or implied.  See the License for the\r\n+ specific language governing permissions and limitations\r\n+ under the License.   \r\n+-->\r\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\r\n+\r\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.EntityWithCompositeId</class>\r\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.OwnerOfEntityWithCompositeId</class>\r\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.RecursiveEntityWithCompositeId</class>\r\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.SQLMapAddress</class>\r\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.SQLMapItem</class>\r\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.SQLMapOrder</class>\r\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.SQLMapPerson</class>\r\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.Entity1</class>\r\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.Entity2</class>\r\n+\t</persistence-unit>\r\n+</persistence>\r"},{"sha":"1e45823949724ec1d66add9cde3ca41651c684e6","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/kernel/common/apps/META-INF/persistence.xml","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/kernel/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/kernel/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/kernel/common/apps/META-INF/persistence.xml?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,125 @@\n+<!--\r\n+ Licensed to the Apache Software Foundation (ASF) under one\r\n+ or more contributor license agreements.  See the NOTICE file\r\n+ distributed with this work for additional information\r\n+ regarding copyright ownership.  The ASF licenses this file\r\n+ to you under the Apache License, Version 2.0 (the\r\n+ \"License\"); you may not use this file except in compliance\r\n+ with the License.  You may obtain a copy of the License at\r\n+ \r\n+ http://www.apache.org/licenses/LICENSE-2.0\r\n+ \r\n+ Unless required by applicable law or agreed to in writing,\r\n+ software distributed under the License is distributed on an\r\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ KIND, either express or implied.  See the License for the\r\n+ specific language governing permissions and limitations\r\n+ under the License.   \r\n+-->\r\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\r\n+\r\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n+\t\t<!-- <class>org.apache.openjpa.persistence.kernel.common.apps.AbstractMappedAppIdSuper</class> -->\r\n+\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AImplB</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AllFieldsTypeTest</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AllFieldTypesTest</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdClassString</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdHolder</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdSubB</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AbstractMappedAppIdSuper</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdSubC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdSubD</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdSubE</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdSubF</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ArraysTest</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachA</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachB</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachD</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachE</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachF</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachVersionA</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachVersionB</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachVersionC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.BlobTest</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ByteArray</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.CalendarFields</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ColumnIOPC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ComplexEmbeddedPC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ConcreteMappedAppIdSub</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.DateVersion</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.DependentFieldsPC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.DetachAttachEvent</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.DetachSMPC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.EmbeddedOwnerPC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.EmbeddedPC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.Entity1</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.Entity2</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ExternalValues</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.FetchGroupTestObject</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.FetchGroupTestObjectChild</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.Inner</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InstanceCallbacksTest</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ModInstanceCallbackTests</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InterfaceHolder</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InterfaceTestImpl1</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InterfaceTestImpl2</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InterfaceTestImpl3</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InterfaceTestImpl4</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InverseA</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InverseB</class>\r\n+        \t<class>org.apache.openjpa.persistence.kernel.common.apps.Lobs</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.LockGroupPC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.LockGroupPC2</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.LockGroupPCKnownSubclass</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ManagedInterfaceOwner</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ManagedInterfaceOwnerAppId</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.MapElementPC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.MapElementPCChild</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.MixedInterfaceImpl</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.NonMappedInterfaceImpl</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ObjectCollectionHolder</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.OuterJoinValuePC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCAddress</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCClassPC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCCompany</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCCountry</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCDepartment</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCDirectory</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCEmployee</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCFile</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCPerson</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PersistenceAware</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PersistentMapHolder</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ProxiesPC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.RecursivelyEmbeddedPC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest2</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest3</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest4</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest5</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SCOTest</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SecondaryTab</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SequenceAssigned</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SequenceAssigned2</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SequenceAssigned3</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdByte</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdChar</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdInt</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdLong</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdShort</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdString</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdWrapper</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ValueStrategyPC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.TestEJBLobs$Inner</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.TestEJBLobs$Inner2</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.TestStaticInnerClasses$Inner</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.TestEJBNoPersistentFields$Nholder</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.TestEJBNoPersistentFields$NoPersistentFieldsPC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ModRuntimeTest1</class>\r\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ModRuntimeTest2</class>\r\n+\t</persistence-unit>\r\n+</persistence>\r"},{"sha":"ed80b03924bfa8168285094398831c05b5136585","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/meta/common/apps/META-INF/persistence.xml","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/meta/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/meta/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/meta/common/apps/META-INF/persistence.xml?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,47 @@\n+<!--\r\n+ Licensed to the Apache Software Foundation (ASF) under one\r\n+ or more contributor license agreements.  See the NOTICE file\r\n+ distributed with this work for additional information\r\n+ regarding copyright ownership.  The ASF licenses this file\r\n+ to you under the Apache License, Version 2.0 (the\r\n+ \"License\"); you may not use this file except in compliance\r\n+ with the License.  You may obtain a copy of the License at\r\n+ \r\n+ http://www.apache.org/licenses/LICENSE-2.0\r\n+ \r\n+ Unless required by applicable law or agreed to in writing,\r\n+ software distributed under the License is distributed on an\r\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ KIND, either express or implied.  See the License for the\r\n+ specific language governing permissions and limitations\r\n+ under the License.   \r\n+-->\r\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\r\n+\r\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.ExternalValues</class>\r\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.FieldOrderPC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.FieldOrderPCSubclass</class>\r\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest1</class>\r\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest1$Inner</class>\r\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest2</class>\r\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest3</class>\r\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest4</class>\r\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest5</class>\r\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest6</class>\r\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.NonPersistentFieldsPC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.OrderByPC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.OrderByPCRel</class>\r\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.OrderByPCRelSub</class>\r\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.RuntimeTest1</class>\r\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.RuntimeTest2</class>\r\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.RuntimeTest3</class>\r\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.SequenceAssigned</class>\r\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.SequenceAssigned2</class>\r\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.SequenceAssigned3</class>\r\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.ValueStrategyPC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.TransactionalClassPC</class>\r\n+\t</persistence-unit>\r\n+</persistence>\r"},{"sha":"72c66c771382b1b011572b60bab37c3469eeef96","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/query/common/apps/META-INF/persistence.xml","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/query/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/325aa77bc15aaa0dc0c0118186525af232f2be36/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/query/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/query/common/apps/META-INF/persistence.xml?ref=325aa77bc15aaa0dc0c0118186525af232f2be36","patch":"@@ -0,0 +1,48 @@\n+<!--\r\n+ Licensed to the Apache Software Foundation (ASF) under one\r\n+ or more contributor license agreements.  See the NOTICE file\r\n+ distributed with this work for additional information\r\n+ regarding copyright ownership.  The ASF licenses this file\r\n+ to you under the Apache License, Version 2.0 (the\r\n+ \"License\"); you may not use this file except in compliance\r\n+ with the License.  You may obtain a copy of the License at\r\n+ \r\n+ http://www.apache.org/licenses/LICENSE-2.0\r\n+ \r\n+ Unless required by applicable law or agreed to in writing,\r\n+ software distributed under the License is distributed on an\r\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ KIND, either express or implied.  See the License for the\r\n+ specific language governing permissions and limitations\r\n+ under the License.   \r\n+-->\r\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\r\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.Entity2</class>\r\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.RuntimeTest1</class>\r\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.RuntimeTest2</class>\r\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.RuntimeTest3</class>\r\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.RuntimeTest4</class>\r\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.RuntimeTest5</class>\r\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.SimpleAppIdPC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.CompoundAppIdPC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.QueryTest1</class>\r\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.QueryTest2</class>\r\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.QueryTest3</class>\r\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.QueryTest4</class>\r\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.CompoundAppIdPC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexA</class>\r\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexB</class>\r\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexD</class>\r\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexE</class>\r\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexF</class>\r\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexG</class>\r\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.CircularFKPC</class>\r\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.CircularFKPC2</class>\r\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.ModRuntimeTest1</class>\r\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.ModRuntimeTest2</class>\r\n+\t</persistence-unit>\r\n+</persistence>\r"}]}

