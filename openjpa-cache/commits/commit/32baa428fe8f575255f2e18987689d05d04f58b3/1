{"sha":"32baa428fe8f575255f2e18987689d05d04f58b3","node_id":"MDY6Q29tbWl0MjA2MzY0OjMyYmFhNDI4ZmU4ZjU3NTI1NWYyZTE4OTg3Njg5ZDA1ZDA0ZjU4YjM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-07-14T19:48:07Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-07-14T19:48:07Z"},"message":"updates to configuration. Committed on behalf of Abe\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@422003 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6c5cb9d058c4fd18fa3d685902c4ead9fe7d30d2","url":"https://api.github.com/repos/apache/openjpa/git/trees/6c5cb9d058c4fd18fa3d685902c4ead9fe7d30d2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/32baa428fe8f575255f2e18987689d05d04f58b3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/32baa428fe8f575255f2e18987689d05d04f58b3","html_url":"https://github.com/apache/openjpa/commit/32baa428fe8f575255f2e18987689d05d04f58b3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/32baa428fe8f575255f2e18987689d05d04f58b3/comments","author":null,"committer":null,"parents":[{"sha":"6577d2f166a07688870db4014961ec1f8b5b4ead","url":"https://api.github.com/repos/apache/openjpa/commits/6577d2f166a07688870db4014961ec1f8b5b4ead","html_url":"https://github.com/apache/openjpa/commit/6577d2f166a07688870db4014961ec1f8b5b4ead"}],"stats":{"total":73,"additions":46,"deletions":27},"files":[{"sha":"434caf1d2c5c47e91463b25d432960c694f9a233","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/JMSRemoteCommitProvider.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/32baa428fe8f575255f2e18987689d05d04f58b3/openjpa-kernel/src/main/java/org/apache/openjpa/event/JMSRemoteCommitProvider.java","raw_url":"https://github.com/apache/openjpa/raw/32baa428fe8f575255f2e18987689d05d04f58b3/openjpa-kernel/src/main/java/org/apache/openjpa/event/JMSRemoteCommitProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/JMSRemoteCommitProvider.java?ref=32baa428fe8f575255f2e18987689d05d04f58b3","patch":"@@ -15,7 +15,6 @@\n  */\n package org.apache.openjpa.event;\n \n-import java.util.Map;\n import java.util.Properties;\n import javax.jms.ExceptionListener;\n import javax.jms.JMSException;\n@@ -36,6 +35,7 @@\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.GenericConfigurable;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.UserException;\n \n@@ -92,11 +92,11 @@ public void setExceptionReconnectAttempts(int attempts) {\n      * constructor for JNDI lookups. Implementation of\n      * {@link GenericConfigurable}.\n      */\n-    public void setInto(Map m) {\n-        if (m != null && !m.isEmpty()) {\n+    public void setInto(Options opts) {\n+        if (opts != null && !opts.isEmpty()) {\n             _ctxProps = new Properties();\n-            _ctxProps.putAll(m);\n-            m.clear();\n+            _ctxProps.putAll(opts);\n+            opts.clear();\n         } else\n             _ctxProps = null;\n     }"},{"sha":"ed28e1daa2a91b96a051e8b3b6b9354f74307865","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/32baa428fe8f575255f2e18987689d05d04f58b3/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","raw_url":"https://github.com/apache/openjpa/raw/32baa428fe8f575255f2e18987689d05d04f58b3/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java?ref=32baa428fe8f575255f2e18987689d05d04f58b3","patch":"@@ -274,16 +274,16 @@ else if (properties != null) {\n             configurable.startConfiguration();\n         }\n         if (opts != null) {\n-            Map invalidEntries = opts.setInto(obj);\n+            Options invalidEntries = opts.setInto(obj);\n             if (obj instanceof GenericConfigurable)\n                 ((GenericConfigurable) obj).setInto(invalidEntries);\n \n             if (!invalidEntries.isEmpty() && configurationName != null) {\n                 String msg = null;\n                 String first = (String) invalidEntries.keySet().iterator()\n                     .next();\n-                if (invalidEntries.keySet().size() == 1 &&\n-                    first.indexOf('.') == -1) {\n+                if (invalidEntries.keySet().size() == 1 \n+                    && first.indexOf('.') == -1) {\n                     // if there's just one misspelling and this is not a\n                     // path traversal, check for near misses.\n                     Collection options = Options.findOptionsFor(obj.getClass());"},{"sha":"404445e4a3adf7d16afd9d7ab4f759d7ab95d832","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/GenericConfigurable.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/32baa428fe8f575255f2e18987689d05d04f58b3/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/GenericConfigurable.java","raw_url":"https://github.com/apache/openjpa/raw/32baa428fe8f575255f2e18987689d05d04f58b3/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/GenericConfigurable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/GenericConfigurable.java?ref=32baa428fe8f575255f2e18987689d05d04f58b3","patch":"@@ -15,24 +15,24 @@\n  */\n package org.apache.openjpa.lib.conf;\n \n-import java.util.Map;\n+import org.apache.openjpa.lib.util.Options;\n \n /**\n  * Implementations of this interface may perform additional\n  * generic configuration with any key-value pairs that cannot be set\n- * into the object via the normal {@link org.apache.openjpa.lib.util.Options#setInto}\n- * means.\n+ * into the object via the normal \n+ * {@link org.apache.openjpa.lib.util.Options#setInto} means.\n  *\n  * @author Patrick Linskey\n  */\n public interface GenericConfigurable {\n \n     /**\n      * Perform any generic configuration based on the data in\n-     * <code>m</code>. This method should remove any values in\n-     * <code>m</code> that have been successfully processed; if any\n-     * values remain in <code>m</code> after this method is executed,\n+     * <code>opts</code>. This method should remove any values in\n+     * <code>opts</code> that have been successfully processed; if any\n+     * values remain in <code>opts</code> after this method is executed,\n      * an exception will be thrown identifying those key-value pairs as invalid.\n      */\n-    public void setInto(Map m);\n+    public void setInto(Options opts);\n }"},{"sha":"3f7789b707f2b466e0eb70af7df3843ffffce196","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/32baa428fe8f575255f2e18987689d05d04f58b3/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/32baa428fe8f575255f2e18987689d05d04f58b3/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java?ref=32baa428fe8f575255f2e18987689d05d04f58b3","patch":"@@ -28,6 +28,7 @@\n import org.apache.openjpa.lib.conf.GenericConfigurable;\n import org.apache.openjpa.lib.util.Files;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap;\n \n /**\n@@ -222,15 +223,15 @@ public static short getLevel(String str) {\n \n     // ---------- GenericConfigurable implementation ----------\n \n-    public void setInto(Map m) {\n-        if (!m.isEmpty()) {\n+    public void setInto(Options opts) {\n+        if (!opts.isEmpty()) {\n             Map.Entry e;\n-            for (Iterator iter = m.entrySet().iterator(); iter.hasNext();) {\n+            for (Iterator iter = opts.entrySet().iterator(); iter.hasNext();) {\n                 e = (Map.Entry) iter.next();\n                 _configuredLevels.put(shorten((String) e.getKey()),\n                     new Short(getLevel((String) e.getValue())));\n             }\n-            m.clear();\n+            opts.clear();\n         }\n     }\n "},{"sha":"62b318db20287f96a38191e331b15b37d51dd138","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java","status":"modified","additions":26,"deletions":8,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/32baa428fe8f575255f2e18987689d05d04f58b3/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java","raw_url":"https://github.com/apache/openjpa/raw/32baa428fe8f575255f2e18987689d05d04f58b3/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java?ref=32baa428fe8f575255f2e18987689d05d04f58b3","patch":"@@ -49,6 +49,11 @@\n  */\n public class Options extends TypedProperties {\n \n+    /**\n+     * Immutable empty instance.\n+     */\n+    public static Options EMPTY = new EmptyOptions();\n+\n     // maps primitive types to the appropriate wrapper class and default value\n     private static Object[][] _primWrappers = new Object[][]{\n         { boolean.class, Boolean.class, Boolean.FALSE },\n@@ -152,15 +157,16 @@ public Options(Properties defaults) {\n      * <li>Map Entry: <code>\"brother.name\"-&gt;\"Bob\"</code><br />\n      * Resultant method call: <code>obj.getBrother().setName(\"Bob\")\n      * <code></li>\n-     * </ul> Any keys present in the map for which there is no\n+     * </ul> \n+     * Any keys present in the map for which there is no\n      * corresponding property in the given object will be ignored,\n      * and will be returned in the {@link Map} returned by this method.\n      *\n-     * @return a {@link Map} of key-value pairs in this object\n+     * @return an {@link Options} of key-value pairs in this object\n      * for which no setters could be found.\n      * @throws RuntimeException on parse error\n      */\n-    public Map setInto(Object obj) {\n+    public Options setInto(Object obj) {\n         // set all defaults that have no explicit value\n         Map.Entry entry = null;\n         if (defaults != null) {\n@@ -173,19 +179,17 @@ public Map setInto(Object obj) {\n         }\n \n         // set from main map\n-        Map invalidEntries = null;\n+        Options invalidEntries = null;\n         Map.Entry e;\n         for (Iterator itr = entrySet().iterator(); itr.hasNext();) {\n             e = (Map.Entry) itr.next();\n             if (!setInto(obj, e)) {\n                 if (invalidEntries == null)\n-                    invalidEntries = new HashMap();\n+                    invalidEntries = new Options();\n                 invalidEntries.put(e.getKey(), e.getValue());\n             }\n         }\n-\n-        return (invalidEntries == null) ? Collections.EMPTY_MAP :\n-            invalidEntries;\n+        return (invalidEntries == null) ? EMPTY : invalidEntries;\n     }\n \n     /**\n@@ -606,4 +610,18 @@ public String removeProperty(String key, String key2, String def) {\n         String val = removeProperty(key);\n         return (val == null) ? removeProperty(key2, def) : val;\n     }\n+\n+    /**\n+     * Immutable empty options.\n+     */\n+    private static class EmptyOptions extends Options {\n+\n+        public Object setProperty(String key, String value) {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        public Object put(Object key, Object value) {\n+            throw new UnsupportedOperationException();\n+        }\n+    }\n }"}]}

