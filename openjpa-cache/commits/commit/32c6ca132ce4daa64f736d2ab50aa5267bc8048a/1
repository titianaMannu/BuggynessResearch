{"sha":"32c6ca132ce4daa64f736d2ab50aa5267bc8048a","node_id":"MDY6Q29tbWl0MjA2MzY0OjMyYzZjYTEzMmNlNGRhYTY0ZjczNmQyYWI1MGFhNTI2N2JjODA0OGE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-11T19:09:20Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-11T19:09:20Z"},"message":"OPENJPA-1184 Testcase contributed by David Minor.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813985 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c465bff71a3355994850974315a96170beff0d02","url":"https://api.github.com/repos/apache/openjpa/git/trees/c465bff71a3355994850974315a96170beff0d02"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/32c6ca132ce4daa64f736d2ab50aa5267bc8048a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/32c6ca132ce4daa64f736d2ab50aa5267bc8048a","html_url":"https://github.com/apache/openjpa/commit/32c6ca132ce4daa64f736d2ab50aa5267bc8048a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/32c6ca132ce4daa64f736d2ab50aa5267bc8048a/comments","author":null,"committer":null,"parents":[{"sha":"0d24829c8c2c1b7380587e67c21c87c83817afd7","url":"https://api.github.com/repos/apache/openjpa/commits/0d24829c8c2c1b7380587e67c21c87c83817afd7","html_url":"https://github.com/apache/openjpa/commit/0d24829c8c2c1b7380587e67c21c87c83817afd7"}],"stats":{"total":192,"additions":192,"deletions":0},"files":[{"sha":"d2adeb69f24ed6534ac01611910947d920010cb8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/MapKeyChild.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/32c6ca132ce4daa64f736d2ab50aa5267bc8048a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/MapKeyChild.java","raw_url":"https://github.com/apache/openjpa/raw/32c6ca132ce4daa64f736d2ab50aa5267bc8048a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/MapKeyChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/MapKeyChild.java?ref=32c6ca132ce4daa64f736d2ab50aa5267bc8048a","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+\n+@Entity\n+public class MapKeyChild implements Serializable {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    @Basic\n+    @Column(length=32)\n+    private String mapKey;\n+\n+\t@ManyToOne\n+\t@JoinColumn\n+    private MapKeyParent parent;\n+\n+    public long getId() { \n+        return id; \n+    }\n+    \n+\tpublic MapKeyParent getParent() {\n+\t\treturn this.parent;\n+\t}\n+\n+\tpublic void setParent(MapKeyParent parent) {\n+\t\tthis.parent = parent;\n+\t}\n+\n+\tpublic String getMapKey() {\n+\t\treturn this.mapKey;\n+\t}\n+\n+\tpublic void setMapKey(String mapKey) {\n+\t\tthis.mapKey = mapKey;\n+\t}\n+}"},{"sha":"5822ece61d22948f60d34fda0d8697e1192a092d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/MapKeyParent.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/32c6ca132ce4daa64f736d2ab50aa5267bc8048a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/MapKeyParent.java","raw_url":"https://github.com/apache/openjpa/raw/32c6ca132ce4daa64f736d2ab50aa5267bc8048a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/MapKeyParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/MapKeyParent.java?ref=32c6ca132ce4daa64f736d2ab50aa5267bc8048a","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.io.Serializable;\n+import java.util.Map;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.MapKey;\n+import javax.persistence.OneToMany;\n+\n+\n+@Entity\n+public class MapKeyParent implements Serializable {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+\t@OneToMany(mappedBy = \"parent\", cascade = CascadeType.ALL, \n+\t\t\tfetch=FetchType.EAGER)\n+\t@MapKey(name = \"mapKey\")\n+    private Map<String,MapKeyChild> children;\n+\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+\tpublic Map<String, MapKeyChild> getChildren() {\n+\t\treturn this.children;\n+\t}\n+\n+\tpublic void setChildren(Map<String, MapKeyChild> children) {\n+\t\tthis.children = children;\n+\t}\n+\n+}"},{"sha":"a51634af90b7511eedc494c9358aec8843e67a28","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestParallelEagerMap.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/32c6ca132ce4daa64f736d2ab50aa5267bc8048a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestParallelEagerMap.java","raw_url":"https://github.com/apache/openjpa/raw/32c6ca132ce4daa64f736d2ab50aa5267bc8048a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestParallelEagerMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestParallelEagerMap.java?ref=32c6ca132ce4daa64f736d2ab50aa5267bc8048a","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestParallelEagerMap\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+    \tsuper.setUp(CLEAR_TABLES, MapKeyParent.class, MapKeyChild.class,\n+    \t\t\t\"openjpa.jdbc.EagerFetchMode\", \"parallel\");\n+    }\n+\n+    public void testParentNotNull() {\n+    \t\n+    \tMapKeyParent[] parents = { new MapKeyParent(), new MapKeyParent() };\n+    \tfor( MapKeyParent parent : parents ) {\n+\t    \tMap<String,MapKeyChild> children = new HashMap<String,MapKeyChild>();\n+\t    \tfor(String key : new String[]{\"childA\"}) {\n+\t    \t\tMapKeyChild child = new MapKeyChild();\n+\t    \t\tchild.setParent(parent);\n+\t    \t\tchild.setMapKey(key);\n+\t    \t\tchildren.put(key, child);\n+\t    \t}\n+\t    \tparent.setChildren(children);\n+    \t}\n+    \t\n+    \tOpenJPAEntityManager em = emf.createEntityManager();\n+    \tem.getTransaction().begin();\n+    \tfor(MapKeyParent parent : parents) {\n+    \t\tem.persist(parent);\n+    \t}\n+    \tem.getTransaction().commit();\n+    \tem.close();\n+    \t\n+    \tem = emf.createEntityManager();\n+    \tMapKeyParent parent2 = (MapKeyParent)em.createQuery(\n+    \t\t\t\"SELECT p FROM MapKeyParent p WHERE p.id=\" + parents[0].getId() + \n+    \t\t\t\" OR p.id=\" + parents[1].getId()).getResultList().get(1);\n+    \tem.close();\n+    \t\n+    \tfor(MapKeyChild child : parent2.getChildren().values()) {\n+    \t\tassertNotNull(\"Parent should not be null\", child.getParent());\n+    \t}\n+    }\n+}"}]}

