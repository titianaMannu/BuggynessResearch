{"sha":"3320287392e035415d7867ac7312d9109d02306a","node_id":"MDY6Q29tbWl0MjA2MzY0OjMzMjAyODczOTJlMDM1NDE1ZDc4NjdhYzczMTJkOTEwOWQwMjMwNmE=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-04T21:17:35Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-04T21:17:35Z"},"message":"OPENJPA-1020: fix class cast exception when retrieving eager persistent collection\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@895788 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"610c0e2f01df4216eb2130ab3bed52d6c61f0e3b","url":"https://api.github.com/repos/apache/openjpa/git/trees/610c0e2f01df4216eb2130ab3bed52d6c61f0e3b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3320287392e035415d7867ac7312d9109d02306a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3320287392e035415d7867ac7312d9109d02306a","html_url":"https://github.com/apache/openjpa/commit/3320287392e035415d7867ac7312d9109d02306a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3320287392e035415d7867ac7312d9109d02306a/comments","author":null,"committer":null,"parents":[{"sha":"f78ddef9c2032a92c9af40e383480033fb8e2a51","url":"https://api.github.com/repos/apache/openjpa/commits/f78ddef9c2032a92c9af40e383480033fb8e2a51","html_url":"https://github.com/apache/openjpa/commit/f78ddef9c2032a92c9af40e383480033fb8e2a51"}],"stats":{"total":163,"additions":161,"deletions":2},"files":[{"sha":"e7d7bd87bd619077f8397a3d2ae43c8f86c03c66","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3320287392e035415d7867ac7312d9109d02306a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/3320287392e035415d7867ac7312d9109d02306a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=3320287392e035415d7867ac7312d9109d02306a","patch":"@@ -407,7 +407,7 @@ private void setInverseRelation(OpenJPAStateManager owner,\n         // Check if the owner has eagerly loaded ToMany relations.\n         for (int i = 0; i < fms.length; i++) {\n             if (res.getEager(fms[i]) != null) {\n-                if (fms[i].isElementCollection() && !fms[i].getElement().isTypePC())\n+                if (!fms[i].getElement().isTypePC())\n                     continue;\n                 Object coll =  owner.fetchObject(fms[i].getIndex());\n                 if (coll instanceof Map)"},{"sha":"fe3299823aea811a90a57b3e409b4b531281f3bf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityStringEager.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/3320287392e035415d7867ac7312d9109d02306a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityStringEager.java","raw_url":"https://github.com/apache/openjpa/raw/3320287392e035415d7867ac7312d9109d02306a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityStringEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityStringEager.java?ref=3320287392e035415d7867ac7312d9109d02306a","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.annotations;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+\n+import org.apache.openjpa.persistence.PersistentCollection;\n+\n+@Entity\n+public class PColl_EntityStringEager {\n+\n+    @Id\n+    private int id;\n+\n+    @PersistentCollection(fetch=FetchType.EAGER)\n+    private Set<String> collectionOfStrings = new HashSet<String>();\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public Set<String> getCollectionOfStrings() {\n+        return collectionOfStrings;\n+    }\n+\n+    public void setCollectionOfStrings(Set<String> collectionOfStrings) {\n+        this.collectionOfStrings = collectionOfStrings;\n+    }\n+}"},{"sha":"60828e5364e30dfdfee1fb5224d7711dfffa6434","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityStringLazy.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/3320287392e035415d7867ac7312d9109d02306a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityStringLazy.java","raw_url":"https://github.com/apache/openjpa/raw/3320287392e035415d7867ac7312d9109d02306a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityStringLazy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityStringLazy.java?ref=3320287392e035415d7867ac7312d9109d02306a","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.annotations;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+\n+import org.apache.openjpa.persistence.PersistentCollection;\n+\n+@Entity\n+public class PColl_EntityStringLazy {\n+\n+    @Id\n+    private int id;\n+\n+    @PersistentCollection(fetch=FetchType.LAZY)\n+    private Set<String> collectionOfStrings = new HashSet<String>();\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public Set<String> getCollectionOfStrings() {\n+        return collectionOfStrings;\n+    }\n+\n+    public void setCollectionOfStrings(Set<String> collectionOfStrings) {\n+        this.collectionOfStrings = collectionOfStrings;\n+    }\n+}"},{"sha":"a50d73cc5348498c0a9ddea05849bdbca76c49f0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestPersistentCollection.java","status":"modified","additions":54,"deletions":1,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/3320287392e035415d7867ac7312d9109d02306a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestPersistentCollection.java","raw_url":"https://github.com/apache/openjpa/raw/3320287392e035415d7867ac7312d9109d02306a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestPersistentCollection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestPersistentCollection.java?ref=3320287392e035415d7867ac7312d9109d02306a","patch":"@@ -35,7 +35,8 @@\n \n     public void setUp() {\n         setUp(PColl_EntityA.class, PColl_EmbedB.class, PColl_EntityC.class,\n-                PColl_EntityA1.class, PColl_EntityB.class, CLEAR_TABLES);\n+                PColl_EntityA1.class, PColl_EntityB.class, PColl_EntityStringEager.class,\n+                PColl_EntityStringLazy.class, CLEAR_TABLES);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n@@ -116,4 +117,56 @@ public void testPersistentCollectionOfEntities() {\n             fail(t.getMessage());\n         }\n     }    \n+\n+    public void testPersistentCollectionStringsLazy() {\n+        try {\n+            EntityManager em = emf.createEntityManager();\n+\n+            em.getTransaction().begin();\n+\n+            PColl_EntityStringLazy a = new PColl_EntityStringLazy();\n+            a.setId(1);\n+            a.getCollectionOfStrings().add(\"one\");\n+            em.persist(a);\n+            em.getTransaction().commit();\n+            em.close();\n+            \n+            em = emf.createEntityManager();\n+            Query q = em.createQuery(\"SELECT o FROM PColl_EntityStringLazy o\"); \n+            PColl_EntityStringLazy a1 = (PColl_EntityStringLazy)q.getSingleResult();\n+            \n+            assertEquals(1, a1.getCollectionOfStrings().size());\n+            assertEquals(\"one\", a1.getCollectionOfStrings().toArray()[0]);\n+            assertEquals(1, a1.getId());\n+            em.close();\n+        } catch (Throwable t) {\n+            fail(t.getMessage());\n+        }\n+    }    \n+\n+    public void testPersistentCollectionStringsEager() {\n+        try {\n+            EntityManager em = emf.createEntityManager();\n+\n+            em.getTransaction().begin();\n+\n+            PColl_EntityStringEager a = new PColl_EntityStringEager();\n+            a.setId(1);\n+            a.getCollectionOfStrings().add(\"one\");\n+            em.persist(a);\n+            em.getTransaction().commit();\n+            em.close();\n+            \n+            em = emf.createEntityManager();\n+            Query q = em.createQuery(\"SELECT o FROM PColl_EntityStringEager o\"); \n+            PColl_EntityStringEager a1 = (PColl_EntityStringEager)q.getSingleResult();\n+            \n+            assertEquals(1, a1.getCollectionOfStrings().size());\n+            assertEquals(\"one\", a1.getCollectionOfStrings().toArray()[0]);\n+            assertEquals(1, a1.getId());\n+            em.close();\n+        } catch (Throwable t) {\n+            fail(t.getMessage());\n+        }\n+    }    \n }"}]}

