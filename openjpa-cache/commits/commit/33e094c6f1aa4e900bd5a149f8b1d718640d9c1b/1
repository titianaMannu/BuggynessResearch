{"sha":"33e094c6f1aa4e900bd5a149f8b1d718640d9c1b","node_id":"MDY6Q29tbWl0MjA2MzY0OjMzZTA5NGM2ZjFhYTRlOTAwYmQ1YTE0OWY4YjFkNzE4NjQwZDljMWI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-05-07T21:06:16Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-05-07T21:06:16Z"},"message":"OPENJPA-586 Query parameter binding for externalized fields\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@654272 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b517fc0c8d81e2d6e423c9c289072ae14703a5a6","url":"https://api.github.com/repos/apache/openjpa/git/trees/b517fc0c8d81e2d6e423c9c289072ae14703a5a6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/33e094c6f1aa4e900bd5a149f8b1d718640d9c1b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/33e094c6f1aa4e900bd5a149f8b1d718640d9c1b","html_url":"https://github.com/apache/openjpa/commit/33e094c6f1aa4e900bd5a149f8b1d718640d9c1b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/33e094c6f1aa4e900bd5a149f8b1d718640d9c1b/comments","author":null,"committer":null,"parents":[{"sha":"a31dfaa31f4181956b7430fb9ec590b68ffd2c8e","url":"https://api.github.com/repos/apache/openjpa/commits/a31dfaa31f4181956b7430fb9ec590b68ffd2c8e","html_url":"https://github.com/apache/openjpa/commit/a31dfaa31f4181956b7430fb9ec590b68ffd2c8e"}],"stats":{"total":104,"additions":101,"deletions":3},"files":[{"sha":"de5df78bb0c0ef5782c97c0816530b3c49cdeae3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/33e094c6f1aa4e900bd5a149f8b1d718640d9c1b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/33e094c6f1aa4e900bd5a149f8b1d718640d9c1b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=33e094c6f1aa4e900bd5a149f8b1d718640d9c1b","patch":"@@ -1160,7 +1160,7 @@ protected void setImplicitTypes(Value val1, Value val2, Class expected) {\n         if (fmd == null)\n             return;\n \n-        Class type = path.isXPath() ? path.getType() : fmd.getType();\n+        Class type = path.isXPath() ? path.getType() : fmd.getDeclaredType();\n         if (type == null)\n             return;\n "},{"sha":"c6db1d288a05f05a591e64274d3a85fefb8237b0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestExternalValues.java","status":"modified","additions":82,"deletions":2,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/33e094c6f1aa4e900bd5a149f8b1d718640d9c1b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestExternalValues.java","raw_url":"https://github.com/apache/openjpa/raw/33e094c6f1aa4e900bd5a149f8b1d718640d9c1b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestExternalValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestExternalValues.java?ref=33e094c6f1aa4e900bd5a149f8b1d718640d9c1b","patch":"@@ -19,18 +19,26 @@\n package org.apache.openjpa.persistence.meta;\r\n \r\n \r\n+import java.util.List;\r\n+import java.util.UUID;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+\r\n import org.apache.openjpa.persistence.meta.common.apps.ExternalValues;\r\n import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+import org.apache.openjpa.persistence.ArgumentException;\r\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n \r\n /**\r\n  * <p>Tests the {@link ExternalValuesFieldMapping}.</p>\r\n  *\r\n  * @author Abe White\r\n+ * @author Pinaki Poddar (added binding query parameter tests) \r\n  */\r\n public class TestExternalValues\r\n     extends AbstractTestCase {\r\n-\r\n+    \r\n     public TestExternalValues(String test) {\r\n         super(test, \"metacactusapp\");\r\n     }\r\n@@ -55,7 +63,6 @@ public void testInsert() {\n         pc.setDoubleToByte(4.5);\r\n         pc.setCharToInt('f');\r\n         pc.setStringToLong(\"foo\");\r\n-\r\n         pm.persist(pc);\r\n         Object oid = pm.getObjectId(pc);\r\n         endTx(pm);\r\n@@ -112,4 +119,77 @@ public void testAllNull() {\n         pc = (ExternalValues) pm.find(ExternalValues.class, oid);\r\n         endEm(pm);\r\n     }\r\n+    \r\n+    public void testPositionalBindingQueryParameterEqualsDeclaredType() {\r\n+        UUID uuid = new UUID(1,4);\r\n+        createInstance(uuid);\r\n+        \r\n+        EntityManager em = currentEntityManager();\r\n+        String jpql = \"SELECT p FROM ExternalValues p WHERE p.uuid=?1\";\r\n+        List<ExternalValues> result = em.createQuery(jpql)\r\n+                                        .setParameter(1, uuid)\r\n+                                        .getResultList();\r\n+        assertFalse(result.isEmpty());\r\n+        for (ExternalValues x:result) {\r\n+            assertEquals(uuid, x.getUuid());\r\n+        }\r\n+    }\r\n+    \r\n+    public void testNamedBindingQueryParameterEqualsDeclaredType() {\r\n+        UUID uuid = new UUID(2,4);\r\n+        createInstance(uuid);\r\n+        \r\n+        EntityManager em = currentEntityManager();\r\n+        String jpql = \"SELECT p FROM ExternalValues p WHERE p.uuid=:uuid\";\r\n+        List<ExternalValues> result = em.createQuery(jpql)\r\n+                                        .setParameter(\"uuid\", uuid)\r\n+                                        .getResultList();\r\n+        assertFalse(result.isEmpty());\r\n+        for (ExternalValues pc:result) {\r\n+            assertEquals(uuid, pc.getUuid());\r\n+        }\r\n+    }\r\n+    \r\n+    public void testPositionalBindingQueryParameterNotEqualsExternalizedType() {\r\n+        UUID uuid = new UUID(1,4);\r\n+        createInstance(uuid);\r\n+        \r\n+        EntityManager em = currentEntityManager();\r\n+        String jpql = \"SELECT p FROM ExternalValues p WHERE p.uuid=?1\";\r\n+        Query query = em.createQuery(jpql)\r\n+                        .setParameter(1, uuid.toString());\r\n+                                        \r\n+        try {\r\n+            query.getResultList();\r\n+            fail(\"Expected ArgumentException\");\r\n+       } catch (ArgumentException ex) {\r\n+           // expected\r\n+       }\r\n+    }\r\n+\r\n+    public void testNamedBindingQueryParameterNotEqualsExternalizedType() {\r\n+        UUID uuid = new UUID(2,4);\r\n+        createInstance(uuid);\r\n+        \r\n+        EntityManager em = currentEntityManager();\r\n+        String jpql = \"SELECT p FROM ExternalValues p WHERE p.uuid=:uuid\";\r\n+        Query query = em.createQuery(jpql)\r\n+                        .setParameter(\"uuid\", uuid.toString());\r\n+        try {\r\n+             query.getResultList();\r\n+             fail(\"Expected ArgumentException\");\r\n+        } catch (ArgumentException ex) {\r\n+            // expected\r\n+        }\r\n+    }\r\n+    \r\n+    private void createInstance(UUID uuid) {\r\n+        EntityManager em = currentEntityManager();\r\n+        em.getTransaction().begin();\r\n+        ExternalValues pc = new ExternalValues();\r\n+        pc.setUuid(uuid);\r\n+        em.persist(pc);\r\n+        em.getTransaction().commit();\r\n+        em.clear();\r\n+    }\r\n }\r"},{"sha":"2c2920d835d413432d50d04d150eb012fb5f47c9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ExternalValues.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/33e094c6f1aa4e900bd5a149f8b1d718640d9c1b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ExternalValues.java","raw_url":"https://github.com/apache/openjpa/raw/33e094c6f1aa4e900bd5a149f8b1d718640d9c1b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ExternalValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ExternalValues.java?ref=33e094c6f1aa4e900bd5a149f8b1d718640d9c1b","patch":"@@ -19,8 +19,14 @@\n package org.apache.openjpa.persistence.meta.common.apps;\r\n \r\n \r\n+import java.util.UUID;\r\n+\r\n import javax.persistence.Entity;\r\n \r\n+import org.apache.openjpa.persistence.Externalizer;\r\n+import org.apache.openjpa.persistence.Factory;\r\n+import org.apache.openjpa.persistence.Persistent;\r\n+\r\n @Entity\r\n public class ExternalValues {\r\n \r\n@@ -33,6 +39,10 @@\n     private double doubleToByte;\r\n     private char charToInt;\r\n     private String stringToLong;\r\n+    @Persistent\r\n+    @Externalizer(\"toString\")        \r\n+    @Factory(\"UUID.fromString\")\r\n+    private UUID    uuid;\r\n \r\n     public boolean getBooleanToShort() {\r\n         return booleanToShort;\r\n@@ -105,4 +115,12 @@ public String getStringToLong() {\n     public void setStringToLong(String s) {\r\n         stringToLong = s;\r\n     }\r\n+\r\n+    public UUID getUuid() {\r\n+        return uuid;\r\n+    }\r\n+\r\n+    public void setUuid(UUID uuid) {\r\n+        this.uuid = uuid;\r\n+    }\r\n }\r"}]}

