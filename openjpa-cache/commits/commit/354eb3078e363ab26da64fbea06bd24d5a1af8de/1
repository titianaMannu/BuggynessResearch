{"sha":"354eb3078e363ab26da64fbea06bd24d5a1af8de","node_id":"MDY6Q29tbWl0MjA2MzY0OjM1NGViMzA3OGUzNjNhYjI2ZGE2NGZiZWEwNmJkMjRkNWExYWY4ZGU=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2011-04-20T13:27:56Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2011-04-20T13:27:56Z"},"message":"OPENJPA-1983: Don't cascade to an unloaded field when merge is called on a managed Entity.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1095401 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"abab866cc3c7c750aea9262838637e92026f229f","url":"https://api.github.com/repos/apache/openjpa/git/trees/abab866cc3c7c750aea9262838637e92026f229f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/354eb3078e363ab26da64fbea06bd24d5a1af8de","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/354eb3078e363ab26da64fbea06bd24d5a1af8de","html_url":"https://github.com/apache/openjpa/commit/354eb3078e363ab26da64fbea06bd24d5a1af8de","comments_url":"https://api.github.com/repos/apache/openjpa/commits/354eb3078e363ab26da64fbea06bd24d5a1af8de/comments","author":null,"committer":null,"parents":[{"sha":"77b7ced1d511a8a73a053bf8f3eb171be05fc2cb","url":"https://api.github.com/repos/apache/openjpa/commits/77b7ced1d511a8a73a053bf8f3eb171be05fc2cb","html_url":"https://github.com/apache/openjpa/commit/77b7ced1d511a8a73a053bf8f3eb171be05fc2cb"}],"stats":{"total":245,"additions":234,"deletions":11},"files":[{"sha":"0f40ab38a8b7bced5ebeb13884b5ef55ee2e5f3e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java","status":"modified","additions":13,"deletions":11,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/354eb3078e363ab26da64fbea06bd24d5a1af8de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java","raw_url":"https://github.com/apache/openjpa/raw/354eb3078e363ab26da64fbea06bd24d5a1af8de/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java?ref=354eb3078e363ab26da64fbea06bd24d5a1af8de","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.kernel;\n \n import java.util.ArrayList;\n+import java.util.BitSet;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Iterator;\n@@ -37,11 +38,11 @@\n import org.apache.openjpa.meta.ValueMetaData;\n import org.apache.openjpa.util.CallbackException;\n import org.apache.openjpa.util.Exceptions;\n+import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.OptimisticException;\n import org.apache.openjpa.util.ProxyManager;\n import org.apache.openjpa.util.UserException;\n-import org.apache.openjpa.util.ImplHelper;\n \n /**\n  * Handles attaching instances.\n@@ -59,7 +60,7 @@\n     private final boolean _copyNew;\n     private final boolean _failFast;\n     private final IdentityMap _attached = new IdentityMap();\n-    private final Collection _visitedNodes = new ArrayList();\n+    private final Collection<StateManagerImpl> _visitedNodes = new ArrayList();\n \n     // reusable strategies\n     private AttachStrategy _version;\n@@ -253,17 +254,18 @@ Object attach(Object toAttach, PersistenceCapable into,\n     }\n \n     private Object handleCascade(Object toAttach, OpenJPAStateManager owner) {\n-        FieldMetaData[] fields = _broker.getStateManager(toAttach).getMetaData()\n-            .getDefinedFields();\n-        for (int i = 0; i < fields.length; i++) {\n-            FieldMetaData fd = (FieldMetaData) fields[i];\n-            if (fd.getElement().getCascadeAttach() == fd.CASCADE_IMMEDIATE) {\n-                FieldMetaData[] inverseFieldMappings = fd.getInverseMetaDatas();\n+        StateManagerImpl sm = _broker.getStateManagerImpl(toAttach, true);\n+        BitSet loaded = sm.getLoaded();\n+        FieldMetaData[] fmds = sm.getMetaData().getDefinedFields();\n+        for (FieldMetaData fmd : fmds) {\n+            if (fmd.getElement().getCascadeAttach() == ValueMetaData.CASCADE_IMMEDIATE) {\n+                FieldMetaData[] inverseFieldMappings = fmd.getInverseMetaDatas();\n                 if (inverseFieldMappings.length != 0) {\n-                    OpenJPAStateManager sm = _broker.getStateManager(toAttach);\n                     _visitedNodes.add(sm);\n-                    getStrategy(toAttach).attachField(this, toAttach,\n-                        _broker.getStateManagerImpl(toAttach, true), fd, true);\n+                    // Only try to attach this field is it is loaded\n+                    if (loaded.get(fmd.getIndex())) {\n+                        getStrategy(toAttach).attachField(this, toAttach, sm, fmd, true);\n+                    }\n                 }\n             }\n         }"},{"sha":"d6eb455e1cb9baba16ae5163cab77aeed9d21309","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/TestLazyFields.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/354eb3078e363ab26da64fbea06bd24d5a1af8de/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/TestLazyFields.java","raw_url":"https://github.com/apache/openjpa/raw/354eb3078e363ab26da64fbea06bd24d5a1af8de/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/TestLazyFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/TestLazyFields.java?ref=354eb3078e363ab26da64fbea06bd24d5a1af8de","patch":"@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.merge;\n+\n+import java.util.ArrayList;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.merge.featureSelection.Inner;\n+import org.apache.openjpa.persistence.merge.featureSelection.Outer;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestLazyFields extends SingleEMFTestCase {\n+    public void setUp() {\n+        setUp(CLEAR_TABLES, Outer.class, Inner.class);\n+    }\n+\n+    public void testMergeOfLazyFields() {\n+        EntityManager em = emf.createEntityManager();\n+        try {\n+            em.getTransaction().begin();\n+            Outer o1 = new Outer();\n+            Inner i1 = new Inner();\n+            o1.setInners(new ArrayList<Inner>());\n+            o1.getInners().add(i1);\n+\n+            em.persist(o1);\n+\n+            em.getTransaction().commit();\n+            em.clear(); // the objects will now get detached.\n+\n+            long id = o1.getId();\n+\n+            em.getTransaction().begin();\n+            Outer o2 = em.find(Outer.class, id);\n+\n+            // Since o2 is in the context, it should be ignored... but the merge will needs to be cascaded\n+            // to loaded fields.\n+            Outer mergedO2 = em.merge(o2);\n+            \n+            // Make sure that the merge operation didn't return a different outer.\n+            assertEquals(mergedO2, o2);\n+\n+            em.getTransaction().commit();\n+            em.clear();\n+\n+            // Fetch again\n+            em.getTransaction().begin();\n+            Outer o3 = em.find(Outer.class, id);\n+\n+            // We're checking that the merge didn't cascade to the unloaded field and wipe out all Inners\n+            assertTrue(o3.getInners().size() > 0);\n+            \n+            em.getTransaction().commit();\n+            em.clear();\n+\n+        } finally {\n+            if (em != null) {\n+                if (em.getTransaction().isActive()) {\n+                    em.getTransaction().rollback();\n+                }\n+                em.close();\n+            }\n+        }\n+    }\n+}"},{"sha":"216d60d47768b3a5a1d81c2170640a8843a0f896","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/featureSelection/Inner.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/354eb3078e363ab26da64fbea06bd24d5a1af8de/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/featureSelection/Inner.java","raw_url":"https://github.com/apache/openjpa/raw/354eb3078e363ab26da64fbea06bd24d5a1af8de/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/featureSelection/Inner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/featureSelection/Inner.java?ref=354eb3078e363ab26da64fbea06bd24d5a1af8de","patch":"@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.merge.featureSelection;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"INNER_TBL\")\n+public class Inner {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id = null;\n+\n+    private String name = null;\n+\n+    @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = \"inners\")\n+    private Collection<Outer> outers = new ArrayList<Outer>();\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public Collection<Outer> getOuters() {\n+        return outers;\n+    }\n+\n+    public void setOuters(Collection<Outer> outers) {\n+        this.outers = outers;\n+    }\n+\n+}"},{"sha":"a38de33a97255387486cc9314327e67ec67e3a31","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/featureSelection/Outer.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/354eb3078e363ab26da64fbea06bd24d5a1af8de/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/featureSelection/Outer.java","raw_url":"https://github.com/apache/openjpa/raw/354eb3078e363ab26da64fbea06bd24d5a1af8de/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/featureSelection/Outer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/featureSelection/Outer.java?ref=354eb3078e363ab26da64fbea06bd24d5a1af8de","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.merge.featureSelection;\n+\n+import java.util.List;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"OUTER_TBL\")\n+public class Outer {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id = null;\n+\n+    private String name = null;\n+\n+    @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n+    private List<Inner> inners = null;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public List<Inner> getInners() {\n+        return inners;\n+    }\n+\n+    public void setInners(List<Inner> inners) {\n+        this.inners = inners;\n+    }\n+\n+}"}]}

