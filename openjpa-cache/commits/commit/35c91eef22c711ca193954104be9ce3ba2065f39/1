{"sha":"35c91eef22c711ca193954104be9ce3ba2065f39","node_id":"MDY6Q29tbWl0MjA2MzY0OjM1YzkxZWVmMjJjNzExY2ExOTM5NTQxMDRiZTljZTNiYTIwNjVmMzk=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2013-10-17T11:04:35Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2013-10-17T11:04:35Z"},"message":"OPENJPA-2221 AbstractValueHandler map() fix applied to trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1533047 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f843d5c67d361ab37fdeeb8c8bbee40a6923e3c1","url":"https://api.github.com/repos/apache/openjpa/git/trees/f843d5c67d361ab37fdeeb8c8bbee40a6923e3c1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/35c91eef22c711ca193954104be9ce3ba2065f39","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/35c91eef22c711ca193954104be9ce3ba2065f39","html_url":"https://github.com/apache/openjpa/commit/35c91eef22c711ca193954104be9ce3ba2065f39","comments_url":"https://api.github.com/repos/apache/openjpa/commits/35c91eef22c711ca193954104be9ce3ba2065f39/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"70ccfae92fc5fb0704bf8c25d4dce93a08dd71e4","url":"https://api.github.com/repos/apache/openjpa/commits/70ccfae92fc5fb0704bf8c25d4dce93a08dd71e4","html_url":"https://github.com/apache/openjpa/commit/70ccfae92fc5fb0704bf8c25d4dce93a08dd71e4"}],"stats":{"total":189,"additions":186,"deletions":3},"files":[{"sha":"bc3d0e0bdc676ea439d22cb9fa693cefc035c835","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":15,"deletions":3,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/35c91eef22c711ca193954104be9ce3ba2065f39/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/35c91eef22c711ca193954104be9ce3ba2065f39/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=35c91eef22c711ca193954104be9ce3ba2065f39","patch":"@@ -1424,9 +1424,21 @@ public void setTyped(PreparedStatement stmnt, int idx, Object val,\n     /**\n      * Set a completely unknown parameter into a prepared statement.\n      */\n-    public void setUnknown(PreparedStatement stmnt, int idx, Object val,\n-        Column col)\n-        throws SQLException {\n+    public void setUnknown(PreparedStatement stmt, int idx, Object val, Column col) throws SQLException {\n+        if (val instanceof Object[]) {\n+            Object[] valArray = (Object[])val;\n+            for (Object object : valArray) {\n+                setUnknown(stmt, idx, col, object);\n+            }\n+        } else {\n+            setUnknown(stmt, idx, col, val);\n+        }\n+    }\n+    \n+    /**\n+     * Set a completely unknown parameter into a prepared statement.\n+     */\n+    public void setUnknown(PreparedStatement stmnt, int idx, Column col, Object val) throws SQLException {\n         Sized sized = null;\n         Calendard cald = null;\n         if (val instanceof Sized) {"},{"sha":"c65916a5c1352138e5071f19c4f0128af6e567ca","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/TestValueStrategy.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/35c91eef22c711ca193954104be9ce3ba2065f39/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/TestValueStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/35c91eef22c711ca193954104be9ce3ba2065f39/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/TestValueStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/TestValueStrategy.java?ref=35c91eef22c711ca193954104be9ce3ba2065f39","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.strategy.value;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+public class TestValueStrategy extends SQLListenerTestCase {\n+    public void setUp(){\n+      setUp(ValueStrategyEntity.class, DROP_TABLES);\n+      assertNotNull(emf);\n+      \n+      create();\n+}\n+    \n+    public void testIt() {\n+        EntityManager em = emf.createEntityManager();\n+        ValueStrategyEntity se = em.find(ValueStrategyEntity.class, \"id1\");\n+        assertNotNull(se);\n+        \n+        em.close();\n+    }\n+\n+        private void create() {\n+            EntityManager em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            \n+            ValueStrategyEntity stratEnt = new ValueStrategyEntity();\n+            stratEnt.setId(\"id1\");\n+            stratEnt.setName(\"name1\");\n+            \n+            em.persist(stratEnt);\n+            \n+            em.getTransaction().commit();\n+            em.close();\n+        }\n+}"},{"sha":"9fcef38b9834999cf1d7e8673dd20cd681895998","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/ValueStrategyEntity.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/35c91eef22c711ca193954104be9ce3ba2065f39/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/ValueStrategyEntity.java","raw_url":"https://github.com/apache/openjpa/raw/35c91eef22c711ca193954104be9ce3ba2065f39/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/ValueStrategyEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/ValueStrategyEntity.java?ref=35c91eef22c711ca193954104be9ce3ba2065f39","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.strategy.value;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+import org.apache.openjpa.persistence.jdbc.Strategy;\n+\n+@Entity\n+public class ValueStrategyEntity {\n+    @Id\n+    @Strategy (\"org.apache.openjpa.persistence.strategy.value.ValueStrategyHandler\")\n+    private String id;\n+    \n+    @Strategy (\"org.apache.openjpa.persistence.strategy.value.ValueStrategyHandler\")\n+    private String name;\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+}"},{"sha":"d43a0e1dd56fd925d883c3cbdcb9779a10e3a7fd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/ValueStrategyHandler.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/35c91eef22c711ca193954104be9ce3ba2065f39/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/ValueStrategyHandler.java","raw_url":"https://github.com/apache/openjpa/raw/35c91eef22c711ca193954104be9ce3ba2065f39/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/ValueStrategyHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/ValueStrategyHandler.java?ref=35c91eef22c711ca193954104be9ce3ba2065f39","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.strategy.value;\n+\n+import org.apache.openjpa.jdbc.kernel.JDBCStore;\n+import org.apache.openjpa.jdbc.meta.ValueMapping;\n+import org.apache.openjpa.jdbc.meta.strats.AbstractValueHandler;\n+import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.schema.ColumnIO;\n+import org.apache.openjpa.meta.JavaTypes;\n+\n+public class ValueStrategyHandler extends AbstractValueHandler {\n+\n+\tprivate static final long serialVersionUID = 8371304701543038775L;\n+\t\n+\tprivate static final ValueStrategyHandler _instance = new ValueStrategyHandler();\n+\t\n+\tpublic static ValueStrategyHandler getInstance(){\n+\t\treturn _instance;\n+\t}\n+\t\n+\t@Override\n+\tpublic Column[] map(ValueMapping arg0, String name, ColumnIO arg2,\n+\t\t\tboolean arg3) {\n+\n+\t\tColumn col = new Column();\n+\t\tcol.setName(name);\n+\t\tcol.setJavaType(JavaTypes.STRING);\n+\t\t\n+\t\treturn new Column[]{col};\n+\t}\n+\t\n+\tpublic Object toDataStoreValue(ValueMapping vm, Object val, JDBCStore store){\n+\t\t\n+\t\tif(val == null){\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\treturn val.toString();\n+\t}\n+\t\n+\tpublic Object toObjectValue(ValueMapping vm, Object val){\n+\t\tif(val == null){\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\treturn val.toString();\n+\t}\n+\n+}"}]}

