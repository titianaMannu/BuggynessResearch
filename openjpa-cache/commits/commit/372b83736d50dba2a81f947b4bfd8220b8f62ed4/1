{"sha":"372b83736d50dba2a81f947b4bfd8220b8f62ed4","node_id":"MDY6Q29tbWl0MjA2MzY0OjM3MmI4MzczNmQ1MGRiYTJhODFmOTQ3YjRiZmQ4MjIwYjhmNjJlZDQ=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-02-20T17:37:18Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-02-20T17:37:18Z"},"message":"OPENJPA-150 : Re-use parseColumns method when parsing AttributeOverride columns\nso that we get secondary table information.  \n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@509674 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a28ccd2d8ff05c535e0d2dbc83ded4fe7c850510","url":"https://api.github.com/repos/apache/openjpa/git/trees/a28ccd2d8ff05c535e0d2dbc83ded4fe7c850510"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/372b83736d50dba2a81f947b4bfd8220b8f62ed4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/372b83736d50dba2a81f947b4bfd8220b8f62ed4","html_url":"https://github.com/apache/openjpa/commit/372b83736d50dba2a81f947b4bfd8220b8f62ed4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/372b83736d50dba2a81f947b4bfd8220b8f62ed4/comments","author":null,"committer":null,"parents":[{"sha":"1b446958f5699c2adecb3163ab9ce44b873b2f57","url":"https://api.github.com/repos/apache/openjpa/commits/1b446958f5699c2adecb3163ab9ce44b873b2f57","html_url":"https://github.com/apache/openjpa/commit/1b446958f5699c2adecb3163ab9ce44b873b2f57"}],"stats":{"total":22,"additions":4,"deletions":18},"files":[{"sha":"8669621c6b9dac081799d7415e4111237b1b0331","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","status":"modified","additions":4,"deletions":18,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/372b83736d50dba2a81f947b4bfd8220b8f62ed4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/372b83736d50dba2a81f947b4bfd8220b8f62ed4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java?ref=372b83736d50dba2a81f947b4bfd8220b8f62ed4","patch":"@@ -378,22 +378,15 @@ private void parseAssociationOverrides(ClassMapping cm,\n     private void parseAttributeOverrides(ClassMapping cm,\n         AttributeOverride... attrs) {\n         FieldMapping sup;\n-        javax.persistence.Column scol;\n-        int unique;\n         for (AttributeOverride attr : attrs) {\n             if (StringUtils.isEmpty(attr.name()))\n                 throw new MetaDataException(_loc.get(\"no-override-name\", cm));\n             sup = (FieldMapping) cm.getDefinedSuperclassField(attr.name());\n             if (sup == null)\n                 sup = (FieldMapping) cm.addDefinedSuperclassField(attr.name(),\n                     Object.class, Object.class);\n-            scol = attr.column();\n-            if (scol == null)\n-                continue;\n-\n-            unique = (scol.unique()) ? TRUE : FALSE;\n-            setColumns(sup, sup.getValueInfo(), Arrays.asList\n-                (new Column[]{ newColumn(scol) }), unique);\n+            if (attr.column() != null)\n+                parseColumns(sup, attr.column());\n         }\n     }\n \n@@ -967,20 +960,13 @@ private void parseAttributeOverrides(FieldMapping fm,\n             throw new MetaDataException(_loc.get(\"not-embedded\", fm));\n \n         FieldMapping efm;\n-        javax.persistence.Column ecol;\n-        int unique;\n         for (AttributeOverride attr : attrs) {\n             efm = embed.getFieldMapping(attr.name());\n             if (efm == null)\n                 throw new MetaDataException(_loc.get(\"embed-override-name\",\n                     fm, attr.name()));\n-            ecol = attr.column();\n-            if (ecol == null)\n-                continue;\n-\n-            unique = (ecol.unique()) ? TRUE : FALSE;\n-            setColumns(efm, efm.getValueInfo(), Arrays.asList\n-                (new Column[]{ newColumn(ecol) }), unique);\n+            if (attr.column() != null)\n+                parseColumns(efm, attr.column());\n         }\n     }\n "}]}

