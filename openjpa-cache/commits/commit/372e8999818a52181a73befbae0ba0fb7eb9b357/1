{"sha":"372e8999818a52181a73befbae0ba0fb7eb9b357","node_id":"MDY6Q29tbWl0MjA2MzY0OjM3MmU4OTk5ODE4YTUyMTgxYTczYmVmYmFlMGJhMGZiN2ViOWIzNTc=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-01-30T16:56:13Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-01-30T16:56:13Z"},"message":"Change EntityManagerImpl.assertOpen to EntityManagerImpl.assertNotCloseInvoked\nto more accurately reflect the purpose of the method.  Fix several instances\nwhere we were relying on the method to actually check whether the underlying\nbroker was open.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@501468 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f151cd09b6558049d38ccb78a747ee91eebef1e3","url":"https://api.github.com/repos/apache/openjpa/git/trees/f151cd09b6558049d38ccb78a747ee91eebef1e3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/372e8999818a52181a73befbae0ba0fb7eb9b357","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/372e8999818a52181a73befbae0ba0fb7eb9b357","html_url":"https://github.com/apache/openjpa/commit/372e8999818a52181a73befbae0ba0fb7eb9b357","comments_url":"https://api.github.com/repos/apache/openjpa/commits/372e8999818a52181a73befbae0ba0fb7eb9b357/comments","author":null,"committer":null,"parents":[{"sha":"17c6580e4ce21e706513f77586372d9bf257a244","url":"https://api.github.com/repos/apache/openjpa/commits/17c6580e4ce21e706513f77586372d9bf257a244","html_url":"https://github.com/apache/openjpa/commit/17c6580e4ce21e706513f77586372d9bf257a244"}],"stats":{"total":258,"additions":132,"deletions":126},"files":[{"sha":"797e0e5f9a0deb32352088179d02d2a3179ab2e3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExtentImpl.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/372e8999818a52181a73befbae0ba0fb7eb9b357/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExtentImpl.java","raw_url":"https://github.com/apache/openjpa/raw/372e8999818a52181a73befbae0ba0fb7eb9b357/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExtentImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExtentImpl.java?ref=372e8999818a52181a73befbae0ba0fb7eb9b357","patch":"@@ -88,6 +88,7 @@ public boolean getIgnoreChanges() {\n     }\n \n     public void setIgnoreChanges(boolean ignoreChanges) {\n+        _broker.assertOpen();\n         _ignore = ignoreChanges;\n     }\n "},{"sha":"d19cd7d15fb13efd1605fada467d05a605654913","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":102,"deletions":100,"changes":202,"blob_url":"https://github.com/apache/openjpa/blob/372e8999818a52181a73befbae0ba0fb7eb9b357/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/372e8999818a52181a73befbae0ba0fb7eb9b357/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=372e8999818a52181a73befbae0ba0fb7eb9b357","patch":"@@ -95,7 +95,7 @@ public ConnectionMetaData getMetaData()\n \r\n     public Interaction createInteraction()\r\n         throws ResourceException {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         return _broker.createInteraction();\r\n     }\r\n \r\n@@ -118,7 +118,7 @@ public OpenJPAConfiguration getConfiguration() {\n     }\r\n \r\n     public FetchPlan getFetchPlan() {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.lock();\r\n         try {\r\n             if (_fetch == null)\r\n@@ -147,7 +147,7 @@ public boolean getSyncWithManagedTransactions() {\n     }\r\n \r\n     public void setSyncWithManagedTransactions(boolean sync) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.setSyncWithManagedTransactions(sync);\r\n     }\r\n \r\n@@ -168,7 +168,7 @@ public boolean getMultithreaded() {\n     }\r\n \r\n     public void setMultithreaded(boolean multithreaded) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.setMultithreaded(multithreaded);\r\n     }\r\n \r\n@@ -177,7 +177,7 @@ public boolean getIgnoreChanges() {\n     }\r\n \r\n     public void setIgnoreChanges(boolean val) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.setIgnoreChanges(val);\r\n     }\r\n \r\n@@ -186,7 +186,7 @@ public boolean getNontransactionalRead() {\n     }\r\n \r\n     public void setNontransactionalRead(boolean val) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.setNontransactionalRead(val);\r\n     }\r\n \r\n@@ -195,7 +195,7 @@ public boolean getNontransactionalWrite() {\n     }\r\n \r\n     public void setNontransactionalWrite(boolean val) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.setNontransactionalWrite(val);\r\n     }\r\n \r\n@@ -204,7 +204,7 @@ public boolean getOptimistic() {\n     }\r\n \r\n     public void setOptimistic(boolean val) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.setOptimistic(val);\r\n     }\r\n \r\n@@ -213,7 +213,7 @@ public int getRestoreState() {\n     }\r\n \r\n     public void setRestoreState(int val) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.setRestoreState(val);\r\n     }\r\n \r\n@@ -222,7 +222,7 @@ public boolean getRetainState() {\n     }\r\n \r\n     public void setRetainState(boolean val) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.setRetainState(val);\r\n     }\r\n \r\n@@ -231,7 +231,7 @@ public int getAutoClear() {\n     }\r\n \r\n     public void setAutoClear(int val) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.setAutoClear(val);\r\n     }\r\n \r\n@@ -240,7 +240,7 @@ public int getDetachState() {\n     }\r\n \r\n     public void setDetachState(int mode) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.setDetachState(mode);\r\n     }\r\n \r\n@@ -249,12 +249,12 @@ public int getAutoDetach() {\n     }\r\n \r\n     public void setAutoDetach(int flags) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.setAutoDetach(flags);\r\n     }\r\n \r\n     public void setAutoDetach(int flag, boolean on) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.setAutoDetach(flag, on);\r\n     }\r\n \r\n@@ -263,7 +263,7 @@ public boolean getEvictFromStoreCache() {\n     }\r\n \r\n     public void setEvictFromStoreCache(boolean evict) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.setEvictFromDataCache(evict);\r\n     }\r\n \r\n@@ -272,7 +272,7 @@ public boolean getPopulateStoreCache() {\n     }\r\n \r\n     public void setPopulateStoreCache(boolean cache) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.setPopulateDataCache(cache);\r\n     }\r\n \r\n@@ -281,7 +281,7 @@ public boolean isLargeTransaction() {\n     }\r\n \r\n     public void setLargeTransaction(boolean largeTransaction) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.setLargeTransaction(largeTransaction);\r\n     }\r\n \r\n@@ -290,17 +290,17 @@ public Object getUserObject(Object key) {\n     }\r\n \r\n     public Object putUserObject(Object key, Object val) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         return _broker.putUserObject(key, val);\r\n     }\r\n \r\n     public void addTransactionListener(Object listener) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.addTransactionListener(listener);\r\n     }\r\n \r\n     public void removeTransactionListener(Object listener) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.removeTransactionListener(listener);\r\n     }\r\n \r\n@@ -309,17 +309,17 @@ public int getTransactionListenerCallbackMode() {\n     }\r\n \r\n     public void setTransactionListenerCallbackMode(int mode) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.setTransactionListenerCallbackMode(mode);\r\n     }\r\n \r\n     public void addLifecycleListener(Object listener, Class... classes) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.addLifecycleListener(listener, classes);\r\n     }\r\n \r\n     public void removeLifecycleListener(Object listener) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.removeLifecycleListener(listener);\r\n     }\r\n \r\n@@ -328,20 +328,20 @@ public int getLifecycleListenerCallbackMode() {\n     }\r\n \r\n     public void setLifecycleListenerCallbackMode(int mode) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.setLifecycleListenerCallbackMode(mode);\r\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r\n     public <T> T getReference(Class<T> cls, Object oid) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         oid = _broker.newObjectId(cls, oid);\r\n         return (T) _broker.find(oid, false, this);\r\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r\n     public <T> T find(Class<T> cls, Object oid) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         oid = _broker.newObjectId(cls, oid);\r\n         return (T) _broker.find(oid, true, this);\r\n     }\r\n@@ -356,7 +356,7 @@ public void setLifecycleListenerCallbackMode(int mode) {\n \r\n     @SuppressWarnings(\"unchecked\")\r\n     public <T> Collection<T> findAll(final Class<T> cls, Collection oids) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         Object[] objs = _broker.findAll(oids, true, new FindCallbacks() {\r\n             public Object processArgument(Object oid) {\r\n                 return _broker.newObjectId(cls, oid);\r\n@@ -371,12 +371,12 @@ public Object processReturn(Object oid, OpenJPAStateManager sm) {\n \r\n     @SuppressWarnings(\"unchecked\")\r\n     public <T> T findCached(Class<T> cls, Object oid) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         return (T) _broker.findCached(_broker.newObjectId(cls, oid), this);\r\n     }\r\n \r\n     public Class getObjectIdClass(Class cls) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         if (cls == null)\r\n             return null;\r\n         return OpenJPAPersistence.fromOpenJPAObjectIdClass\r\n@@ -391,7 +391,7 @@ public EntityTransaction getTransaction() {\n     }\r\n \r\n     public void joinTransaction() {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         if (!_broker.syncWithManagedTransaction())\r\n             throw new TransactionRequiredException(_loc.get\r\n                 (\"no-managed-trans\"), null, null, false);\r\n@@ -443,43 +443,43 @@ public void setRollbackOnly() {\n     }\r\n \r\n     public void setSavepoint(String name) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.setSavepoint(name);\r\n     }\r\n \r\n     public void rollbackToSavepoint() {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.rollbackToSavepoint();\r\n     }\r\n \r\n     public void rollbackToSavepoint(String name) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.rollbackToSavepoint(name);\r\n     }\r\n \r\n     public void releaseSavepoint() {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.releaseSavepoint();\r\n     }\r\n \r\n     public void releaseSavepoint(String name) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.releaseSavepoint(name);\r\n     }\r\n \r\n     public void flush() {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.assertActiveTransaction();\r\n         _broker.flush();\r\n     }\r\n \r\n     public void preFlush() {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.preFlush();\r\n     }\r\n \r\n     public void validateChanges() {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.validateChanges();\r\n     }\r\n \r\n@@ -496,7 +496,7 @@ public void beginStore() {\n     }\r\n \r\n     public boolean contains(Object entity) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         if (entity == null)\r\n             return false;\r\n         OpenJPAStateManager sm = _broker.getStateManager(entity);\r\n@@ -521,7 +521,7 @@ public boolean containsAll(Collection entities) {\n     }\r\n \r\n     public void persist(Object entity) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.persist(entity, this);\r\n     }\r\n \r\n@@ -530,12 +530,12 @@ public void persistAll(Object... entities) {\n     }\r\n \r\n     public void persistAll(Collection entities) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.persistAll(entities, this);\r\n     }\r\n \r\n     public void remove(Object entity) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.delete(entity, this);\r\n     }\r\n \r\n@@ -544,17 +544,17 @@ public void removeAll(Object... entities) {\n     }\r\n \r\n     public void removeAll(Collection entities) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.deleteAll(entities, this);\r\n     }\r\n \r\n     public void release(Object entity) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.release(entity, this);\r\n     }\r\n \r\n     public void releaseAll(Collection entities) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.releaseAll(entities, this);\r\n     }\r\n \r\n@@ -563,19 +563,19 @@ public void releaseAll(Object... entities) {\n     }\r\n \r\n     public void refresh(Object entity) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.assertWriteOperation();\r\n         _broker.refresh(entity, this);\r\n     }\r\n \r\n     public void refreshAll() {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.assertWriteOperation();\r\n         _broker.refreshAll(_broker.getTransactionalObjects(), this);\r\n     }\r\n \r\n     public void refreshAll(Collection entities) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.assertWriteOperation();\r\n         _broker.refreshAll(entities, this);\r\n     }\r\n@@ -585,12 +585,12 @@ public void refreshAll(Object... entities) {\n     }\r\n \r\n     public void retrieve(Object entity) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.retrieve(entity, true, this);\r\n     }\r\n \r\n     public void retrieveAll(Collection entities) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.retrieveAll(entities, true, this);\r\n     }\r\n \r\n@@ -599,12 +599,12 @@ public void retrieveAll(Object... entities) {\n     }\r\n \r\n     public void evict(Object entity) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.evict(entity, this);\r\n     }\r\n \r\n     public void evictAll(Collection entities) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.evictAll(entities, this);\r\n     }\r\n \r\n@@ -613,39 +613,39 @@ public void evictAll(Object... entities) {\n     }\r\n \r\n     public void evictAll() {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.evictAll(this);\r\n     }\r\n \r\n     public void evictAll(Class cls) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.evictAll(_broker.newExtent(cls, true), this);\r\n     }\r\n \r\n     public void evictAll(Extent extent) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.evictAll(extent.getDelegate(), this);\r\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r\n     public <T> T detach(T entity) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         return (T) _broker.detach(entity, this);\r\n     }\r\n \r\n     public Object[] detachAll(Object... entities) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         return _broker.detachAll(Arrays.asList(entities), this);\r\n     }\r\n \r\n     public Collection detachAll(Collection entities) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         return Arrays.asList(_broker.detachAll(entities, this));\r\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r\n     public <T> T merge(T entity) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         return (T) _broker.attach(entity, true, this);\r\n     }\r\n \r\n@@ -656,42 +656,42 @@ public Collection detachAll(Collection entities) {\n     }\r\n \r\n     public Collection mergeAll(Collection entities) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         return Arrays.asList(_broker.attachAll(entities, true, this));\r\n     }\r\n \r\n     public void transactional(Object entity, boolean updateVersion) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.transactional(entity, updateVersion, this);\r\n     }\r\n \r\n     public void transactionalAll(Collection objs, boolean updateVersion) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.transactionalAll(objs, updateVersion, this);\r\n     }\r\n \r\n     public void transactionalAll(Object[] objs, boolean updateVersion) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.transactionalAll(Arrays.asList(objs), updateVersion, this);\r\n     }\r\n \r\n     public void nontransactional(Object entity) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.nontransactional(entity, this);\r\n     }\r\n \r\n     public void nontransactionalAll(Collection objs) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.nontransactionalAll(objs, this);\r\n     }\r\n \r\n     public void nontransactionalAll(Object[] objs) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.nontransactionalAll(Arrays.asList(objs), this);\r\n     }\r\n \r\n     public Generator getNamedGenerator(String name) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         try {\r\n             SequenceMetaData meta = _broker.getConfiguration().\r\n                 getMetaDataRepositoryInstance().getSequenceMetaData(name,\r\n@@ -704,7 +704,7 @@ public Generator getNamedGenerator(String name) {\n     }\r\n \r\n     public Generator getIdGenerator(Class forClass) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         try {\r\n             ClassMetaData meta = _broker.getConfiguration().\r\n                 getMetaDataRepositoryInstance().getMetaData(forClass,\r\n@@ -718,7 +718,7 @@ public Generator getIdGenerator(Class forClass) {\n     }\r\n \r\n     public Generator getFieldGenerator(Class forClass, String fieldName) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         try {\r\n             ClassMetaData meta = _broker.getConfiguration().\r\n                 getMetaDataRepositoryInstance().getMetaData(forClass,\r\n@@ -737,7 +737,7 @@ public Generator getFieldGenerator(Class forClass, String fieldName) {\n     }\r\n \r\n     public <T> Extent<T> createExtent(Class<T> cls, boolean subclasses) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         return new ExtentImpl<T>(this, _broker.newExtent(cls, subclasses));\r\n     }\r\n \r\n@@ -746,21 +746,21 @@ public OpenJPAQuery createQuery(String query) {\n     }\r\n \r\n     public OpenJPAQuery createQuery(String language, String query) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         return new QueryImpl(this, _broker.newQuery(language, query));\r\n     }\r\n \r\n     public OpenJPAQuery createQuery(Query query) {\r\n         if (query == null)\r\n             return createQuery((String) null);\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         org.apache.openjpa.kernel.Query q = ((QueryImpl) query).getDelegate();\r\n         return new QueryImpl(this, _broker.newQuery(q.getLanguage(),\r\n             q));\r\n     }\r\n \r\n     public OpenJPAQuery createNamedQuery(String name) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         try {\r\n             QueryMetaData meta = _broker.getConfiguration().\r\n                 getMetaDataRepositoryInstance().getQueryMetaData(null, name,\r\n@@ -791,7 +791,7 @@ public OpenJPAQuery createNativeQuery(String query, Class cls) {\n     }\r\n \r\n     public OpenJPAQuery createNativeQuery(String query, String mappingName) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         validateSQL(query);\r\n         org.apache.openjpa.kernel.Query kernelQuery = _broker.newQuery(\r\n             QueryLanguages.LANG_SQL, query);\r\n@@ -808,13 +808,13 @@ private static void validateSQL(String query) {\n     }\r\n \r\n     public void setFlushMode(FlushModeType flushMode) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.getFetchConfiguration().setFlushBeforeQueries\r\n             (toFlushBeforeQueries(flushMode));\r\n     }\r\n \r\n     public FlushModeType getFlushMode() {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         return fromFlushBeforeQueries(_broker.getFetchConfiguration().\r\n             getFlushBeforeQueries());\r\n     }\r\n@@ -848,42 +848,43 @@ static int toFlushBeforeQueries(FlushModeType flushMode) {\n     }\r\n \r\n     public void clear() {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.detachAll(this);\r\n     }\r\n \r\n     public Object getDelegate() {\r\n         _broker.assertOpen();\r\n+        assertNotCloseInvoked();\r\n         return this;\r\n     }\r\n \r\n     public LockModeType getLockMode(Object entity) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         return fromLockLevel(_broker.getLockLevel(entity));\r\n     }\r\n \r\n     public void lock(Object entity, LockModeType mode) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.lock(entity, toLockLevel(mode), -1, this);\r\n     }\r\n \r\n     public void lock(Object entity) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.lock(entity, this);\r\n     }\r\n \r\n     public void lock(Object entity, LockModeType mode, int timeout) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.lock(entity, toLockLevel(mode), timeout, this);\r\n     }\r\n \r\n     public void lockAll(Collection entities) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.lockAll(entities, this);\r\n     }\r\n \r\n     public void lockAll(Collection entities, LockModeType mode, int timeout) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.lockAll(entities, toLockLevel(mode), timeout, this);\r\n     }\r\n \r\n@@ -948,12 +949,12 @@ public boolean getOrderDirtyObjects() {\n     }\r\n \r\n     public void setOrderDirtyObjects(boolean order) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.setOrderDirtyObjects(order);\r\n     }\r\n \r\n     public void dirtyClass(Class cls) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.dirtyType(cls);\r\n     }\r\n \r\n@@ -973,12 +974,12 @@ public void dirtyClass(Class cls) {\n     }\r\n \r\n     public <T> T createInstance(Class<T> cls) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         return (T) _broker.newInstance(cls);\r\n     }\r\n \r\n     public void close() {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         _broker.close();\r\n     }\r\n \r\n@@ -987,7 +988,7 @@ public boolean isOpen() {\n     }\r\n \r\n     public void dirty(Object o, String field) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         OpenJPAStateManager sm = _broker.getStateManager(o);\r\n         try {\r\n             if (sm != null)\r\n@@ -998,51 +999,52 @@ public void dirty(Object o, String field) {\n     }\r\n \r\n     public Object getObjectId(Object o) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         return OpenJPAPersistence.fromOpenJPAObjectId(_broker.getObjectId(o));\r\n     }\r\n \r\n     public boolean isDirty(Object o) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         return _broker.isDirty(o);\r\n     }\r\n \r\n     public boolean isTransactional(Object o) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         return _broker.isTransactional(o);\r\n     }\r\n \r\n     public boolean isPersistent(Object o) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         return _broker.isPersistent(o);\r\n     }\r\n \r\n     public boolean isNewlyPersistent(Object o) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         return _broker.isNew(o);\r\n     }\r\n \r\n     public boolean isRemoved(Object o) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         return _broker.isDeleted(o);\r\n     }\r\n \r\n     public boolean isDetached(Object entity) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         return _broker.isDetached(entity);\r\n     }\r\n \r\n     public Object getVersion(Object o) {\r\n-        assertOpen();\r\n+        assertNotCloseInvoked();\r\n         return _broker.getVersion(o);\r\n     }\r\n \r\n     /**\r\n-     * Throw appropriate exception if entity manager is closed.\r\n+     * Throw appropriate exception if close has been invoked but the broker\r\n+     * is still open.  We test only for this because if the broker is already\r\n+     * closed, it will throw its own more informative exception when we \r\n+     * delegate the pending operation to it.\r\n      */\r\n-    void assertOpen() {\r\n-        // only throw when broker wouldn't throw anyway, because we prefer\r\n-        // the broker's more detailed exception when available\r\n+    void assertNotCloseInvoked() {\r\n         if (!_broker.isClosed() && _broker.isCloseInvoked())\r\n             throw new InvalidStateException(_loc.get(\"close-invoked\"), null,\r\n                 null, true);\r"},{"sha":"3db011678821f1d7585141aea4771e51dfd21aee","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ExtentImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/372e8999818a52181a73befbae0ba0fb7eb9b357/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ExtentImpl.java","raw_url":"https://github.com/apache/openjpa/raw/372e8999818a52181a73befbae0ba0fb7eb9b357/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ExtentImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ExtentImpl.java?ref=372e8999818a52181a73befbae0ba0fb7eb9b357","patch":"@@ -61,7 +61,7 @@ public OpenJPAEntityManager getEntityManager() {\n     }\n \n     public FetchPlan getFetchPlan() {\n-        _em.assertOpen();\n+        _em.assertNotCloseInvoked();\n         _extent.lock();\n         try {\n             if (_fetch == null)\n@@ -79,17 +79,17 @@ public boolean getIgnoreChanges() {\n     }\n \n     public void setIgnoreChanges(boolean ignoreChanges) {\n-        _em.assertOpen();\n+        _em.assertNotCloseInvoked();\n         _extent.setIgnoreChanges(ignoreChanges);\n     }\n \n     public List<T> list() {\n-        _em.assertOpen();\n+        _em.assertNotCloseInvoked();\n         return _extent.list();\n     }\n \n     public Iterator<T> iterator() {\n-        _em.assertOpen();\n+        _em.assertNotCloseInvoked();\n         return _extent.iterator();\n     }\n "},{"sha":"5dd37a89f53f5fb0ad492142536a438f7fd324b3","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":25,"deletions":22,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/372e8999818a52181a73befbae0ba0fb7eb9b357/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/372e8999818a52181a73befbae0ba0fb7eb9b357/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=372e8999818a52181a73befbae0ba0fb7eb9b357","patch":"@@ -91,7 +91,7 @@ public int getOperation() {\n     }\n \n     public FetchPlan getFetchPlan() {\n-        _em.assertOpen();\n+        _em.assertNotCloseInvoked();\n         _query.assertNotSerialized();\n         _query.lock();\n         try {\n@@ -114,31 +114,31 @@ public boolean getIgnoreChanges() {\n     }\n \n     public OpenJPAQuery setIgnoreChanges(boolean ignore) {\n-        _em.assertOpen();\n+        _em.assertNotCloseInvoked();\n         _query.setIgnoreChanges(ignore);\n         return this;\n     }\n \n     public OpenJPAQuery addFilterListener(FilterListener listener) {\n-        _em.assertOpen();\n+        _em.assertNotCloseInvoked();\n         _query.addFilterListener(listener);\n         return this;\n     }\n \n     public OpenJPAQuery removeFilterListener(FilterListener listener) {\n-        _em.assertOpen();\n+        _em.assertNotCloseInvoked();\n         _query.removeFilterListener(listener);\n         return this;\n     }\n \n     public OpenJPAQuery addAggregateListener(AggregateListener listener) {\n-        _em.assertOpen();\n+        _em.assertNotCloseInvoked();\n         _query.addAggregateListener(listener);\n         return this;\n     }\n \n     public OpenJPAQuery removeAggregateListener(AggregateListener listener) {\n-        _em.assertOpen();\n+        _em.assertNotCloseInvoked();\n         _query.removeAggregateListener(listener);\n         return this;\n     }\n@@ -148,7 +148,7 @@ public Collection getCandidateCollection() {\n     }\n \n     public OpenJPAQuery setCandidateCollection(Collection coll) {\n-        _em.assertOpen();\n+        _em.assertNotCloseInvoked();\n         _query.setCandidateCollection(coll);\n         return this;\n     }\n@@ -161,7 +161,7 @@ public Class getResultClass() {\n     }\n \n     public OpenJPAQuery setResultClass(Class cls) {\n-        _em.assertOpen();\n+        _em.assertNotCloseInvoked();\n         if (OpenJPAPersistence.isManagedType(_em, cls))\n             _query.setCandidateType(cls, true);\n         else\n@@ -174,7 +174,7 @@ public boolean hasSubclasses() {\n     }\n \n     public OpenJPAQuery setSubclasses(boolean subs) {\n-        _em.assertOpen();\n+        _em.assertNotCloseInvoked();\n         Class cls = _query.getCandidateType();\n         _query.setCandidateExtent(_query.getBroker().newExtent(cls, subs));\n         return this;\n@@ -185,7 +185,7 @@ public int getFirstResult() {\n     }\n \n     public OpenJPAQuery setFirstResult(int startPosition) {\n-        _em.assertOpen();\n+        _em.assertNotCloseInvoked();\n         _query.setRange(startPosition, _query.getEndRange());\n         return this;\n     }\n@@ -195,7 +195,7 @@ public int getMaxResults() {\n     }\n \n     public OpenJPAQuery setMaxResults(int max) {\n-        _em.assertOpen();\n+        _em.assertNotCloseInvoked();\n         long start = _query.getStartRange();\n         if (max == Integer.MAX_VALUE)\n             _query.setRange(start, Long.MAX_VALUE);\n@@ -205,7 +205,7 @@ public OpenJPAQuery setMaxResults(int max) {\n     }\n \n     public OpenJPAQuery compile() {\n-        _em.assertOpen();\n+        _em.assertNotCloseInvoked();\n         _query.compile();\n         return this;\n     }\n@@ -260,7 +260,7 @@ private void validateParameter(String paramDesc, Class type, Object param) {\n     }\n \n     public List getResultList() {\n-        _em.assertOpen();\n+        _em.assertNotCloseInvoked();\n         Object ob = execute();\n         if (ob instanceof List) {\n             List ret = (List) ob;\n@@ -278,7 +278,7 @@ public List getResultList() {\n      * Execute a query that returns a single result.\n      */\n     public Object getSingleResult() {\n-        _em.assertOpen();\n+        _em.assertNotCloseInvoked();\n         Object ob = execute();\n         if (!(ob instanceof List))\n             return ob;\n@@ -301,7 +301,7 @@ public Object getSingleResult() {\n     }\n \n     public int executeUpdate() {\n-        _em.assertOpen();\n+        _em.assertNotCloseInvoked();\n         if (_query.getOperation() == OP_DELETE) {\n             // handle which types of parameters we are using, if any\n             if (_positional != null)\n@@ -339,14 +339,14 @@ public FlushModeType getFlushMode() {\n     }\n \n     public OpenJPAQuery setFlushMode(FlushModeType flushMode) {\n-        _em.assertOpen();\n+        _em.assertNotCloseInvoked();\n         _query.getFetchConfiguration().setFlushBeforeQueries\n             (EntityManagerImpl.toFlushBeforeQueries(flushMode));\n         return this;\n     }\n \n     public OpenJPAQuery setHint(String key, Object value) {\n-        _em.assertOpen();\n+        _em.assertNotCloseInvoked();\n         if (key == null || !key.startsWith(\"openjpa.\"))\n             return this;\n         String k = key.substring(\"openjpa.\".length());\n@@ -397,7 +397,8 @@ public OpenJPAQuery setParameter(int position, Date value,\n     }\n \n     public OpenJPAQuery setParameter(int position, Object value) {\n-        _em.assertOpen();\n+        _query.assertOpen();\n+        _em.assertNotCloseInvoked();\n         _query.lock();\n         try {\n             // not allowed to mix positional and named parameters (EDR2 3.6.4)\n@@ -437,7 +438,8 @@ public OpenJPAQuery setParameter(String name, Date value,\n     }\n \n     public OpenJPAQuery setParameter(String name, Object value) {\n-        _em.assertOpen();\n+        _query.assertOpen();\n+        _em.assertNotCloseInvoked();\n         _query.lock();\n         try {\n             // not allowed to mix positional and named parameters (EDR2 3.6.4)\n@@ -460,7 +462,6 @@ public boolean hasPositionalParameters() {\n     }\n \n     public Object[] getPositionalParameters() {\n-        _em.assertOpen();\n         _query.lock();\n         try {\n             return (_positional == null) ? EMPTY_ARRAY : _positional.toArray();\n@@ -470,7 +471,8 @@ public boolean hasPositionalParameters() {\n     }\n \n     public OpenJPAQuery setParameters(Object... params) {\n-        _em.assertOpen();\n+        _query.assertOpen();\n+        _em.assertNotCloseInvoked();\n         _query.lock();\n         try {\n             _positional = null;\n@@ -495,7 +497,8 @@ public Map getNamedParameters() {\n     }\n \n     public OpenJPAQuery setParameters(Map params) {\n-        _em.assertOpen();\n+        _query.assertOpen();\n+        _em.assertNotCloseInvoked();\n         _query.lock();\n         try {\n             _positional = null;"}]}

