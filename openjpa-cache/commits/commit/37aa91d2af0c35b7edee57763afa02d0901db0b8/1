{"sha":"37aa91d2af0c35b7edee57763afa02d0901db0b8","node_id":"MDY6Q29tbWl0MjA2MzY0OjM3YWE5MWQyYWYwYzM1YjdlZGVlNTc3NjNhZmEwMmQwOTAxZGIwYjg=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-09-08T22:45:39Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-09-08T22:45:39Z"},"message":"Simplify determination of identity type in metadata, also correcting problems\nwith determining the identity type of hierarchies involving @MappedSuperclasses.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@441679 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"04e9f882015cdaa5ce40f44d19c95f3800a70c61","url":"https://api.github.com/repos/apache/openjpa/git/trees/04e9f882015cdaa5ce40f44d19c95f3800a70c61"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/37aa91d2af0c35b7edee57763afa02d0901db0b8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/37aa91d2af0c35b7edee57763afa02d0901db0b8","html_url":"https://github.com/apache/openjpa/commit/37aa91d2af0c35b7edee57763afa02d0901db0b8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/37aa91d2af0c35b7edee57763afa02d0901db0b8/comments","author":null,"committer":null,"parents":[{"sha":"554f55f46efb1c4d897dcf585e501a7042ee9c70","url":"https://api.github.com/repos/apache/openjpa/commits/554f55f46efb1c4d897dcf585e501a7042ee9c70","html_url":"https://github.com/apache/openjpa/commit/554f55f46efb1c4d897dcf585e501a7042ee9c70"}],"stats":{"total":52,"additions":20,"deletions":32},"files":[{"sha":"185ebdeae3280ec0d4100bb348c61d7964ee2c7e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/37aa91d2af0c35b7edee57763afa02d0901db0b8/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","raw_url":"https://github.com/apache/openjpa/raw/37aa91d2af0c35b7edee57763afa02d0901db0b8/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java?ref=37aa91d2af0c35b7edee57763afa02d0901db0b8","patch":"@@ -1006,7 +1006,7 @@ protected ValueHandler defaultHandler(ValueMapping val, boolean adapting) {\n                 return ImmutableValueHandler.getInstance();\n             case JavaTypes.PC:\n                 if (!val.getTypeMapping().isMapped()\n-                    && useUntypedPCHandler(val))\n+                    && useUntypedPCHandler(val)) \n                     return UntypedPCValueHandler.getInstance();\n                 break;\n             case JavaTypes.PC_UNTYPED:"},{"sha":"16fcc10914a8e565f6a547fe6adacec1cdeb0d82","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":17,"deletions":24,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/37aa91d2af0c35b7edee57763afa02d0901db0b8/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/37aa91d2af0c35b7edee57763afa02d0901db0b8/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=37aa91d2af0c35b7edee57763afa02d0901db0b8","patch":"@@ -142,7 +142,7 @@\n     private Boolean _embedded = null;\n     private Boolean _interface = null;\n     private Class _impl = null;\n-    private int _identity = -1;\n+    private int _identity = ID_UNKNOWN;\n     private int _idStrategy = ValueStrategies.NONE;\n     private int _accessType = ACCESS_UNKNOWN;\n \n@@ -374,23 +374,16 @@ public ClassMetaData getMappedPCSuperclassMetaData() {\n      * primary key fields, and {@link #ID_APPLICATION} otherwise.\n      */\n     public int getIdentityType() {\n-        switch (_identity) {\n-            case -1:\n-                ClassMetaData sup = getPCSuperclassMetaData();\n-                if (sup != null && sup.getIdentityType() != ID_UNKNOWN)\n-                    _identity = sup.getIdentityType();\n-                else {\n-                    FieldMetaData[] pks = getPrimaryKeyFields();\n-                    if (pks.length > 0)\n-                        _identity = ID_APPLICATION;\n-                    else\n-                        _identity = ID_DATASTORE;\n-                }\n-                break;\n-            case ID_UNKNOWN:\n+        if (_identity == ID_UNKNOWN) {\n+            ClassMetaData sup = getPCSuperclassMetaData();\n+            if (sup != null && sup.getIdentityType() != ID_UNKNOWN)\n+                _identity = sup.getIdentityType();\n+            else {\n                 if (getPrimaryKeyFields().length > 0)\n                     _identity = ID_APPLICATION;\n-                break;\n+                else \n+                    _identity = (isMapped()) ? ID_DATASTORE : ID_UNKNOWN;\n+            }\n         }\n         return _identity;\n     }\n@@ -1636,8 +1629,6 @@ protected void resolveMapping(boolean runtime) {\n      * Validate mapping data.\n      */\n     protected void validateMapping(boolean runtime) {\n-        if (isMapped() && getIdentityType() == ID_UNKNOWN)\n-            throw new MetaDataException(_loc.get(\"mapped-unknownid\", this));\n     }\n \n     /**\n@@ -1676,28 +1667,30 @@ private void validateDataCache() {\n      */\n     private void validateIdentity(boolean runtime) {\n         // make sure identity types are consistent\n-        if (_super != null && _identity != -1\n-            && getPCSuperclassMetaData().getIdentityType() != _identity)\n+        ClassMetaData sup = getPCSuperclassMetaData();\n+        int id = getIdentityType();\n+        if (sup != null && sup.getIdentityType() != ID_UNKNOWN\n+            && sup.getIdentityType() != id)\n             throw new MetaDataException(_loc.get(\"id-types\", _type));\n \n         // check for things the data store doesn't support\n         Collection opts = _repos.getConfiguration().supportedOptions();\n-        if (getIdentityType() == ID_APPLICATION\n+        if (id == ID_APPLICATION\n             && !opts.contains(OpenJPAConfiguration.OPTION_ID_APPLICATION)) {\n             throw new UnsupportedException(_loc.get(\"appid-not-supported\",\n                 _type));\n         }\n-        if (getIdentityType() == ID_DATASTORE\n+        if (id == ID_DATASTORE\n             && !opts.contains(OpenJPAConfiguration.OPTION_ID_DATASTORE)) {\n             throw new UnsupportedException(_loc.get\n                 (\"datastoreid-not-supported\", _type));\n         }\n \n-        if (getIdentityType() == ID_APPLICATION) {\n+        if (id == ID_APPLICATION) {\n             if (_idStrategy != ValueStrategies.NONE)\n                 throw new MetaDataException(_loc.get(\"appid-strategy\", _type));\n             validateAppIdClass(runtime);\n-        } else\n+        } else if (id != ID_UNKNOWN)\n             validateNoPKFields();\n \n         int strategy = getIdentityStrategy();"},{"sha":"eb6bc5c756112f7aa8628838a66a39ee920deaa8","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/37aa91d2af0c35b7edee57763afa02d0901db0b8/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/37aa91d2af0c35b7edee57763afa02d0901db0b8/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties?ref=37aa91d2af0c35b7edee57763afa02d0901db0b8","patch":"@@ -250,9 +250,6 @@ access-field-and-prop: Type \"{0}\" attempts to use both field and property \\\n \taccess. Only one access method is permitted.\n unsupported-id-type: Type \"{0}\" declares field \"{1}\" as a primary key, but \\\n \tkeys of type \"{2}\" are not supported.\n-mapped-unknownid: Type \"{0}\" is mapped to the data store, but does not have \\\n-\tan identity type.  Alter its metadata to declare datastore identity or \\\n-\tto have at least one primary key field.\n empty-fg-name: Attempt to add an unnamed fetch group to \"{0}\".\n invalid-fg-depth: Fetch group \"{0}\" specifies invalid recursion depth \"{2}\" \\\n     for field \"{1}\". Recursion depth must be greater than or equal to -1."},{"sha":"67131270bd4e6d576b69dcd9e9c53f50bb70c3c9","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/37aa91d2af0c35b7edee57763afa02d0901db0b8/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/37aa91d2af0c35b7edee57763afa02d0901db0b8/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=37aa91d2af0c35b7edee57763afa02d0901db0b8","patch":"@@ -472,11 +472,9 @@ private ClassMetaData parseClassAnnotations() {\n         if (isMetaDataMode()) {\n             // while the spec only provides for embedded exclusive, it doesn't\n             // seem hard to support otherwise\n-            if (entity == null) {\n+            if (entity == null)\n                 meta.setEmbeddedOnly(true);\n-                if (_cls.isAnnotationPresent(MappedSuperclass.class))\n-                    meta.setIdentityType(ClassMetaData.ID_UNKNOWN);\n-            } else {\n+            else {\n                 meta.setEmbeddedOnly(false);\n                 if (!StringUtils.isEmpty(entity.name()))\n                     meta.setTypeAlias(entity.name());"}]}

