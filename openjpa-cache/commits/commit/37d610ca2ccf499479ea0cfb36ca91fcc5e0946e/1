{"sha":"37d610ca2ccf499479ea0cfb36ca91fcc5e0946e","node_id":"MDY6Q29tbWl0MjA2MzY0OjM3ZDYxMGNhMmNjZjQ5OTQ3OWVhMGNmYjM2Y2E5MWZjYzVlMDk0NmU=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2008-07-23T18:20:25Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2008-07-23T18:20:25Z"},"message":"Fix a bug in which joined classes using an application identity hierarchy\ncouldn't be loaded correctly as an inverse relation.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@679152 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2c1165a5d60486ff1be9f1dec11ef3544252a6be","url":"https://api.github.com/repos/apache/openjpa/git/trees/2c1165a5d60486ff1be9f1dec11ef3544252a6be"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/37d610ca2ccf499479ea0cfb36ca91fcc5e0946e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/37d610ca2ccf499479ea0cfb36ca91fcc5e0946e","html_url":"https://github.com/apache/openjpa/commit/37d610ca2ccf499479ea0cfb36ca91fcc5e0946e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/37d610ca2ccf499479ea0cfb36ca91fcc5e0946e/comments","author":null,"committer":null,"parents":[{"sha":"2ed656a2a0bdf6bc719fab7d7870974fbe8b1fbc","url":"https://api.github.com/repos/apache/openjpa/commits/2ed656a2a0bdf6bc719fab7d7870974fbe8b1fbc","html_url":"https://github.com/apache/openjpa/commit/2ed656a2a0bdf6bc719fab7d7870974fbe8b1fbc"}],"stats":{"total":233,"additions":198,"deletions":35},"files":[{"sha":"09660105f58e89e8d978acffdee7ef51ae58d608","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","status":"modified","additions":20,"deletions":27,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/37d610ca2ccf499479ea0cfb36ca91fcc5e0946e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","raw_url":"https://github.com/apache/openjpa/raw/37d610ca2ccf499479ea0cfb36ca91fcc5e0946e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java?ref=37d610ca2ccf499479ea0cfb36ca91fcc5e0946e","patch":"@@ -189,34 +189,27 @@ private Object getObjectId(ClassMapping cls, JDBCStore store, Result res,\n                     return null;\n             }\n         }\n-        Object oid = ApplicationIds.fromPKValues(vals, cls);\n-        \n-        /**\n-         * For polymorphic relations,\n-         * the type field in the oid is initially set to base type.\n-         * If the discriminator value is preset in the current result,\n-         * then the type field needs reset based on the discriminator value.\n-         * If the discriminator value is not present or invalid,\n-         * ignore any exceptions being thrown.\n-         */        \n+\n+        // the oid data is loaded by the base type, but if discriminator data\n+        // is present, make sure to use it to construct the actual oid instance\n+        // so that we get the correct app id class, etc\n+        ClassMapping dcls = cls;\n+        if (subs) {\n+            res.startDataRequest(cls.getDiscriminator());\n+            try {\n+                Class dtype = cls.getDiscriminator().getClass(store, cls, res);\n+                if (dtype != cls.getDescribedType())\n+                  dcls = cls.getMappingRepository().getMapping(dtype, \n+                    store.getContext().getClassLoader(), true); \n+            } catch (Exception e) {\n+                // intentionally ignored\n+            }\n+            res.endDataRequest();  \n+        }\n+        Object oid = ApplicationIds.fromPKValues(vals, dcls);\n         if (oid instanceof OpenJPAId) {\n-            Class type = cls.getDescribedType();\n-            if (!subs)\n-                // non-polymorphic relations\n-                ((OpenJPAId) oid).setManagedInstanceType(type);\n-            else if (cls.getDiscriminator() != null\n-                && !StringUtils.equals(\"none\",\n-                    cls.getDiscriminator().getStrategy().getAlias())) {\n-                // polymorphic relations\n-                res.startDataRequest(cls.getDiscriminator());\n-                try {\n-                    type = cls.getDiscriminator().getClass(store, cls, res);\n-                    ((OpenJPAId) oid).setManagedInstanceType(type, true);\n-                } catch (Exception e) {\n-                    // intentionally ignored\n-                }\n-                res.endDataRequest();  \n-            } \n+            ((OpenJPAId) oid).setManagedInstanceType(dcls.getDescribedType(), \n+                subs);\n         }\n         return oid;\n     }"},{"sha":"32c2c7b4cbaf5f54079b1d2179333466a878f019","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/37d610ca2ccf499479ea0cfb36ca91fcc5e0946e/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","raw_url":"https://github.com/apache/openjpa/raw/37d610ca2ccf499479ea0cfb36ca91fcc5e0946e/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java?ref=37d610ca2ccf499479ea0cfb36ca91fcc5e0946e","patch":"@@ -193,12 +193,16 @@ public static Object fromPKValues(Object[] pks, ClassMetaData meta) {\n                     return new ObjectId(meta.getDescribedType(), val);\n                 case JavaTypes.BIGDECIMAL:\n                     if (!convert && !(val instanceof BigDecimal))\n-                        throw new ClassCastException(\"!(x instanceof BigDecimal)\");\n-                    return new BigDecimalId(meta.getDescribedType(), (BigDecimal)val);\n+                        throw new ClassCastException(\n+                            \"!(x instanceof BigDecimal)\");\n+                    return new BigDecimalId(meta.getDescribedType(), \n+                        (BigDecimal)val);\n                 case JavaTypes.BIGINTEGER:\n                     if (!convert && !(val instanceof BigInteger))\n-                        throw new ClassCastException(\"!(x instanceof BigInteger)\");\n-                    return new BigIntegerId(meta.getDescribedType(), (BigInteger)val);\n+                        throw new ClassCastException(\n+                            \"!(x instanceof BigInteger)\");\n+                    return new BigIntegerId(meta.getDescribedType(), \n+                        (BigInteger)val);\n                 default:\n                     throw new InternalException();\n             }"},{"sha":"8879de04bde32573ee2ecdaa251926c75b0bf7a9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAId.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/37d610ca2ccf499479ea0cfb36ca91fcc5e0946e/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAId.java","raw_url":"https://github.com/apache/openjpa/raw/37d610ca2ccf499479ea0cfb36ca91fcc5e0946e/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAId.java?ref=37d610ca2ccf499479ea0cfb36ca91fcc5e0946e","patch":"@@ -55,7 +55,7 @@ protected OpenJPAId(Class type, boolean subs) {\n     }\r\n \r\n     /**\r\n-     * Return the persitent class which this id instance represents.\r\n+     * Return the persistent class which this id instance represents.\r\n      */\r\n     public Class getType() {\r\n         return type;\r\n@@ -73,8 +73,7 @@ public boolean hasSubclasses() {\n      * Set the exact type of the described instance once it is known.\r\n      */\r\n     public void setManagedInstanceType(Class type) {\r\n-        this.type = type;\r\n-        this.subs = false;\r\n+        setManagedInstanceType(type, false);\r\n     }\r\n \r\n     /**\r"},{"sha":"de70bf03d929639d974aefd4636452eec0ec06fb","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/37d610ca2ccf499479ea0cfb36ca91fcc5e0946e/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/37d610ca2ccf499479ea0cfb36ca91fcc5e0946e/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties?ref=37d610ca2ccf499479ea0cfb36ca91fcc5e0946e","patch":"@@ -117,7 +117,7 @@ trans-not-managed: This broker is not configured to use managed transactions.\n bad-detached-op: You cannot perform operation {0} on detached object \"{1}\". \\\n \tThis operation only applies to managed objects.\n persist-detached: Attempt to persist detached object \"{0}\".  If this is a new \\\n-  instance, make sure any versino and/or auto-generated primary key fields are \\\n+  instance, make sure any version and/or auto-generated primary key fields are \\\n   null/default when persisting.\n null-value: The field \"{0}\" of instance \"{1}\" contained a null value; \\\n \tthe metadata for this field specifies that nulls are illegal."},{"sha":"0eabce4198e28097a0f9c1720e6d96631b74a64b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/RelationOwner.java","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/37d610ca2ccf499479ea0cfb36ca91fcc5e0946e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/RelationOwner.java","raw_url":"https://github.com/apache/openjpa/raw/37d610ca2ccf499479ea0cfb36ca91fcc5e0946e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/RelationOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/RelationOwner.java?ref=37d610ca2ccf499479ea0cfb36ca91fcc5e0946e","patch":"@@ -0,0 +1,24 @@\n+package org.apache.openjpa.persistence.inheritance.abstractjoinedappid;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.*;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.ElementJoinColumn;\r\n+\r\n+@Entity\r\n+@Table(name=\"TEST\")\r\n+public class RelationOwner {\r\n+\t\r\n+\tprivate Integer id;\r\n+\tprivate Collection<Superclass> supers = new ArrayList<Superclass>();\r\n+\t\r\n+\t@Id\r\n+\t@Column(name=\"ID\")\r\n+\tpublic Integer getId() { return id;\t}\r\n+\tpublic void setId(Integer id) { this.id = id; }\r\n+\t\r\n+\t@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.EAGER)\r\n+\t@ElementJoinColumn(name=\"TEST\", referencedColumnName=\"ID\")\r\n+\tpublic Collection<Superclass> getSupers() {\treturn supers; }\r\n+\tpublic void setSupers(Collection<Superclass> supers) { this.supers = supers; }\r\n+}\r"},{"sha":"4c280392edfe09e48e2d61ae2b43fd80e6429085","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SubID.java","status":"added","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/37d610ca2ccf499479ea0cfb36ca91fcc5e0946e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SubID.java","raw_url":"https://github.com/apache/openjpa/raw/37d610ca2ccf499479ea0cfb36ca91fcc5e0946e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SubID.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SubID.java?ref=37d610ca2ccf499479ea0cfb36ca91fcc5e0946e","patch":"@@ -0,0 +1,5 @@\n+package org.apache.openjpa.persistence.inheritance.abstractjoinedappid;\r\n+\r\n+public class SubID extends SuperID {\r\n+\r\n+}\r"},{"sha":"8ef67f4e7e3196401731bb1fe05048fc86ae1fb2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Subclass.java","status":"added","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/37d610ca2ccf499479ea0cfb36ca91fcc5e0946e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Subclass.java","raw_url":"https://github.com/apache/openjpa/raw/37d610ca2ccf499479ea0cfb36ca91fcc5e0946e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Subclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Subclass.java?ref=37d610ca2ccf499479ea0cfb36ca91fcc5e0946e","patch":"@@ -0,0 +1,16 @@\n+package org.apache.openjpa.persistence.inheritance.abstractjoinedappid;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@IdClass(SubID.class)\r\n+@Table(name=\"SUB\")\r\n+public class Subclass extends Superclass {\r\n+\t\r\n+\tprivate String attr2;\r\n+\t\r\n+\t@Column(name=\"ATTR2\")\r\n+\tpublic String getAttr2() { return attr2; }\r\n+\tpublic void setAttr2(String attr2) { this.attr2 = attr2; }\r\n+\r\n+}\r"},{"sha":"a8182f426d0c30cfcf2ae5e54eb09e643df123e0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SuperID.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/37d610ca2ccf499479ea0cfb36ca91fcc5e0946e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SuperID.java","raw_url":"https://github.com/apache/openjpa/raw/37d610ca2ccf499479ea0cfb36ca91fcc5e0946e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SuperID.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SuperID.java?ref=37d610ca2ccf499479ea0cfb36ca91fcc5e0946e","patch":"@@ -0,0 +1,26 @@\n+package org.apache.openjpa.persistence.inheritance.abstractjoinedappid;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+public abstract class SuperID implements Serializable {\r\n+\t\r\n+\tprivate Integer id;\r\n+\r\n+\tpublic Integer getId() { return id; }\r\n+\tpublic void setId(Integer id) {\tthis.id = id; }\r\n+\t\r\n+\tpublic int hashCode() {\r\n+\t\treturn id;\r\n+\t}\r\n+\t\r\n+\tpublic boolean equals(Object obj) {\r\n+\t\tif (obj == this) return true;\r\n+\t\tif (!(obj instanceof SuperID)) return false;\r\n+\t\tSuperID pk = (SuperID) obj;\r\n+\t\tif ( pk.getId().equals(id)) {\r\n+\t\t\treturn true;\r\n+\t\t} else {\r\n+\t\t\treturn false;\r\n+\t\t}\r\n+\t}\r\n+}\r"},{"sha":"af3e3f49c5d20f158fddda1a1f7e259ec38dff2e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Superclass.java","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/37d610ca2ccf499479ea0cfb36ca91fcc5e0946e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Superclass.java","raw_url":"https://github.com/apache/openjpa/raw/37d610ca2ccf499479ea0cfb36ca91fcc5e0946e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Superclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Superclass.java?ref=37d610ca2ccf499479ea0cfb36ca91fcc5e0946e","patch":"@@ -0,0 +1,22 @@\n+package org.apache.openjpa.persistence.inheritance.abstractjoinedappid;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@IdClass(SuperID.class)\r\n+@Table(name=\"SUPER\")\r\n+@Inheritance(strategy=InheritanceType.JOINED)\r\n+public abstract class Superclass {\r\n+\t\r\n+\tprivate Integer id;\r\n+\tprivate String attr1;\r\n+\t\r\n+\t@Id\r\n+\t@Column(name=\"ID\")\r\n+\tpublic Integer getId() { return id; }\r\n+\tpublic void setId(Integer id) {\tthis.id = id; }\r\n+\t\r\n+\t@Column(name=\"ATTR1\")\r\n+\tpublic String getAttr1() { return attr1; }\r\n+\tpublic void setAttr1(String attr1) { this.attr1 = attr1; }\r\n+}\r"},{"sha":"1aa23140ceb57c47b455301eae4609e2df0fd1b5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/TestAbstractJoinedAppId.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/37d610ca2ccf499479ea0cfb36ca91fcc5e0946e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/TestAbstractJoinedAppId.java","raw_url":"https://github.com/apache/openjpa/raw/37d610ca2ccf499479ea0cfb36ca91fcc5e0946e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/TestAbstractJoinedAppId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/TestAbstractJoinedAppId.java?ref=37d610ca2ccf499479ea0cfb36ca91fcc5e0946e","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance.abstractjoinedappid;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import javax.persistence.EntityManager;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test that you traverse an inverse key-baesd relation to an abstract\n+ * class using joined inheritance.\n+ */\n+public class TestAbstractJoinedAppId\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(Superclass.class, Subclass.class, RelationOwner.class, \n+            DROP_TABLES);\n+\n+        Subclass s = new Subclass();\n+        s.setId(99);\n+        s.setAttr1(\"supattr\");\n+        s.setAttr2(\"subattr\");\n+    \n+        RelationOwner ro = new RelationOwner();\n+        ro.setId(1);\n+        ro.setSupers(Arrays.asList(new Superclass[] { s }));\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(ro);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testTraverseRelation() {\n+        EntityManager em = emf.createEntityManager();\n+        RelationOwner ro = em.find(RelationOwner.class, 1);\n+        assertNotNull(ro);\n+\n+        Collection supers = ro.getSupers();\n+        assertEquals(1, supers.size());        \n+        Superclass s = (Superclass) supers.iterator().next();\n+        assertTrue(s instanceof Subclass);\n+        assertEquals(new Integer(99), s.getId());\n+        assertEquals(\"supattr\", s.getAttr1());\n+        assertEquals(\"subattr\", ((Subclass) s).getAttr2());\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestAbstractJoinedAppId.class);\n+    }\n+}\n+"}]}

