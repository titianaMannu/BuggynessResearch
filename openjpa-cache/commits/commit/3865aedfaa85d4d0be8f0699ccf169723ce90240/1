{"sha":"3865aedfaa85d4d0be8f0699ccf169723ce90240","node_id":"MDY6Q29tbWl0MjA2MzY0OjM4NjVhZWRmYWE4NWQ0ZDBiZThmMDY5OWNjZjE2OTcyM2NlOTAyNDA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-06-15T00:09:17Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-06-15T00:09:17Z"},"message":"OPENJPA-1686: Upgrade to Java runtime version 5. Remove reflection. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@954678 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"42d547183382d41d24c79fdc519053edee93d725","url":"https://api.github.com/repos/apache/openjpa/git/trees/42d547183382d41d24c79fdc519053edee93d725"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3865aedfaa85d4d0be8f0699ccf169723ce90240","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3865aedfaa85d4d0be8f0699ccf169723ce90240","html_url":"https://github.com/apache/openjpa/commit/3865aedfaa85d4d0be8f0699ccf169723ce90240","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3865aedfaa85d4d0be8f0699ccf169723ce90240/comments","author":null,"committer":null,"parents":[{"sha":"2d21d726ab41b3e80b3326c41e9e9bfe9523c8d6","url":"https://api.github.com/repos/apache/openjpa/commits/2d21d726ab41b3e80b3326c41e9e9bfe9523c8d6","html_url":"https://github.com/apache/openjpa/commit/2d21d726ab41b3e80b3326c41e9e9bfe9523c8d6"}],"stats":{"total":232,"additions":31,"deletions":201},"files":[{"sha":"bd74cbd31913ae649962bab7f87f54b6ae56f8c9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/3865aedfaa85d4d0be8f0699ccf169723ce90240/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","raw_url":"https://github.com/apache/openjpa/raw/3865aedfaa85d4d0be8f0699ccf169723ce90240/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java?ref=3865aedfaa85d4d0be8f0699ccf169723ce90240","patch":"@@ -1463,9 +1463,7 @@ protected VersionStrategy defaultStrategy(Version vers,\n         switch (vfield.getTypeCode()) {\n             case JavaTypes.DATE:\n             case JavaTypes.CALENDAR:\n-                return (JavaVersions.VERSION >= 5) \n-                    ? new NanoPrecisionTimestampVersionStrategy()\n-                    : new TimestampVersionStrategy();\n+                return new NanoPrecisionTimestampVersionStrategy();\n             case JavaTypes.BYTE:\n             case JavaTypes.INT:\n             case JavaTypes.LONG:\n@@ -1478,7 +1476,6 @@ protected VersionStrategy defaultStrategy(Version vers,\n                 return new NumberVersionStrategy();\n             default:\n                 throw new UserException(_loc.get(\"version-type-unsupported\", vfield, vfield.getDeclaredType()));\n-//                return NoneVersionStrategy.getInstance();\n         }\n     }\n     "},{"sha":"669214a0f69a2afb14432a7c065ed2c0f21239b0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/3865aedfaa85d4d0be8f0699ccf169723ce90240/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","raw_url":"https://github.com/apache/openjpa/raw/3865aedfaa85d4d0be8f0699ccf169723ce90240/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java?ref=3865aedfaa85d4d0be8f0699ccf169723ce90240","patch":"@@ -380,15 +380,12 @@ public boolean run() {\n         // static block to register class\n         code.tab().append(\"static\").openBrace(2).endl();\n         code.tab(2).append(\"// register persistent class in JVM\").endl();\n-        if (JavaVersions.VERSION >= 5) {\n-            code.tab(2).append(\"try { Class.forName\").openParen(true).\n+        code.tab(2).append(\"try { Class.forName\").openParen(true).\n                 append(\"\\\"\").append(_type.getName()).append(\"\\\"\").\n                 closeParen().append(\";\").append(\" }\").endl();\n-            code.tab(2).append(\"catch\").openParen(true).\n+        code.tab(2).append(\"catch\").openParen(true).\n                 append(\"Exception e\").closeParen().append(\" {}\").endl();\n-        } else\n-            code.tab(2).append(\"Class c = \").append(_type.getName()).\n-                append(\".class;\").endl();\n+        \n         code.closeBrace(2);\n \n         // field declarations"},{"sha":"0e3391ccdfbdc1e36a1bb0285a283461bbdc2cec","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3865aedfaa85d4d0be8f0699ccf169723ce90240/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","raw_url":"https://github.com/apache/openjpa/raw/3865aedfaa85d4d0be8f0699ccf169723ce90240/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java?ref=3865aedfaa85d4d0be8f0699ccf169723ce90240","patch":"@@ -274,7 +274,7 @@ private static void write(BCClass bc, PCEnhancer enhancer,\n             // but do set the metadata accordingly.\n             if (enhancer.isAlreadyRedefined())\n                 ints.add(bc.getType());\n-            else if (JavaVersions.VERSION >= 5) {\n+            else {\n                 map.put(bc.getType(), bc.toByteArray());\n                 debugBytecodes(bc);\n             }"},{"sha":"2a68bf498c43b20a0bd1a403bdd77a8b2873cd2f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3865aedfaa85d4d0be8f0699ccf169723ce90240/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/3865aedfaa85d4d0be8f0699ccf169723ce90240/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java?ref=3865aedfaa85d4d0be8f0699ccf169723ce90240","patch":"@@ -648,7 +648,7 @@ public boolean isInDefaultFetchGroup() {\n     private boolean isEnum() {\n         if (_enumField == null) {\n             Class<?> decl = getDeclaredType();\n-            _enumField = JavaVersions.isEnumeration(decl)\n+            _enumField =  Enum.class.isAssignableFrom(decl) \n                 ? Boolean.TRUE : Boolean.FALSE;\n         }\n         return _enumField.booleanValue();"},{"sha":"b59450e1ac825a2275d95e0082ce8c24b941c861","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","status":"modified","additions":12,"deletions":9,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/3865aedfaa85d4d0be8f0699ccf169723ce90240/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","raw_url":"https://github.com/apache/openjpa/raw/3865aedfaa85d4d0be8f0699ccf169723ce90240/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java?ref=3865aedfaa85d4d0be8f0699ccf169723ce90240","patch":"@@ -282,9 +282,10 @@ public static ConfigurationProvider load(String resource, String anchor,\n         }\n         reportErrors(errs, resource, err);\n         String rsrc = resource + \"#\" + anchor;\n-        throw (MissingResourceException) JavaVersions.initCause\n-            (new MissingResourceException(rsrc,\n-                ProductDerivations.class.getName(), rsrc), err);\n+        MissingResourceException ex = new MissingResourceException(rsrc,\n+                ProductDerivations.class.getName(), rsrc);\n+        ex.initCause(err);\n+        throw ex;\n     }\n \n     /**\n@@ -319,9 +320,10 @@ public static ConfigurationProvider load(File file, String anchor,\n             J2DoPrivHelper.getAbsolutePathAction(file));\n         reportErrors(errs, aPath, err);\n         String rsrc = aPath + \"#\" + anchor;\n-        throw (MissingResourceException) JavaVersions.initCause\n-            (new MissingResourceException(rsrc,\n-                ProductDerivations.class.getName(), rsrc), err);\n+        MissingResourceException ex = new MissingResourceException(rsrc,\n+                ProductDerivations.class.getName(), rsrc);\n+        ex.initCause(err);\n+        throw ex;\n     }\n    \n     /**\n@@ -375,9 +377,10 @@ private static void reportErrors(StringBuilder errs, String resource,\n         Throwable nested) {\n         if (errs == null)\n             return;\n-        throw (MissingResourceException) JavaVersions.initCause\n-            (new MissingResourceException(errs.toString(),\n-                ProductDerivations.class.getName(), resource), nested);\n+        MissingResourceException ex = new MissingResourceException(errs.toString(),\n+                ProductDerivations.class.getName(), resource);\n+        ex.initCause(nested);\n+        throw ex;\n     }\n \n     /**"},{"sha":"db7591880fe8358694f1e7bb03c4217ef09e4ce2","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3865aedfaa85d4d0be8f0699ccf169723ce90240/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/3865aedfaa85d4d0be8f0699ccf169723ce90240/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java?ref=3865aedfaa85d4d0be8f0699ccf169723ce90240","patch":"@@ -394,7 +394,7 @@ protected void parseNewResource(Reader xml, String sourceName)\n             finish();\n         } catch (SAXException se) {\n             IOException ioe = new IOException(se.toString());\n-            JavaVersions.initCause(ioe, se);\n+            ioe.initCause(se);\n             throw ioe;\n         } finally {\n             reset();"},{"sha":"118c6f3390a139af4ba18e13f5628801cd1c544f","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/JavaVersions.java","status":"modified","additions":12,"deletions":178,"changes":190,"blob_url":"https://github.com/apache/openjpa/blob/3865aedfaa85d4d0be8f0699ccf169723ce90240/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/JavaVersions.java","raw_url":"https://github.com/apache/openjpa/raw/3865aedfaa85d4d0be8f0699ccf169723ce90240/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/JavaVersions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/JavaVersions.java?ref=3865aedfaa85d4d0be8f0699ccf169723ce90240","patch":"@@ -20,6 +20,8 @@\n \n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n import java.security.AccessController;\n \n /**\n@@ -39,16 +41,6 @@\n \n     private static final Class<?>[] EMPTY_CLASSES = new Class[0];\n \n-    private static Class<?> PARAM_TYPE = null;\n-    private static Class<?> ENUM_TYPE  = null;\n-    private static Class<?> ANNO_TYPE  = null;\n-    private static Method GET_STACK = null;\n-    private static Method SET_STACK = null;\n-    private static Method GET_CAUSE = null;\n-    private static Method INIT_CAUSE = null;\n-    private static Object[] NO_ARGS  = null;\n-    private static Class<?>[] NO_CLASS_ARGS = null;\n-\n     static {\n         String specVersion = AccessController.doPrivileged(\n             J2DoPrivHelper.getPropertyAction(\"java.specification.version\")); \n@@ -64,104 +56,14 @@ else if (\"1.6\".equals(specVersion))\n             VERSION = 6;\n         else\n             VERSION = 7; // maybe someday...\n-\n-        if (VERSION >= 5) {\n-            try {\n-                PARAM_TYPE = Class.forName(\"java.lang.reflect.ParameterizedType\");\n-                ENUM_TYPE = Class.forName(\"java.lang.Enum\");\n-                ANNO_TYPE = Class.forName(\"java.lang.annotation.Annotation\");\n-            } catch (Throwable t) {\n-            }\n-        }\n-\n-        if (VERSION >= 4) {\n-            try {\n-                Class<?> stack = Class.forName(\"[Ljava.lang.StackTraceElement;\");\n-                GET_STACK = Throwable.class.getMethod(\"getStackTrace\", NO_CLASS_ARGS);\n-                SET_STACK = Throwable.class.getMethod(\"setStackTrace\", new Class[]{ stack });\n-                GET_CAUSE = Throwable.class.getMethod(\"getCause\", NO_CLASS_ARGS);\n-                INIT_CAUSE = Throwable.class.getMethod(\"initCause\", new Class[]{ Throwable.class });\n-            } catch (Throwable t) {\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Returns a version-specific instance of the specified class\n-     *\n-     * @param base the base class to check\n-     * @return the JDK-version-specific version of the class\n-     * @see #getVersionSpecificClass(String)\n-     */\n-    public static Class<?> getVersionSpecificClass(Class<?> base) {\n-        try {\n-            return getVersionSpecificClass(base.getName());\n-        } catch (ClassNotFoundException e) {\n-            return base;\n-        }\n-    }\n-\n-    /**\n-     * Obtains a subclass of the specific base class that is\n-     * specific to the current version of Java in use. The\n-     * heuristic for the class name to load will be that OpenJPA\n-     * first checks for the name of the class with the current\n-     * setting of the {@link #VERSION} field, then each number in\n-     * decreasing order, until ending in the unqualified name.\n-     * For example, if we are using JDK 1.5.1, and we want to load\n-     * \"org.apache.openjpa.lib.SomeClass\", we will try to load the following\n-     * classes in order and return the first one that is successfully\n-     * found and loaded:\n-     * <ol>\n-     * <li>org.apache.openjpa.lib.SomeClass5</li>\n-     * <li>org.apache.openjpa.lib.SomeClass4</li>\n-     * <li>org.apache.openjpa.lib.SomeClass3</li>\n-     * <li>org.apache.openjpa.lib.SomeClass2</li>\n-     * <li>org.apache.openjpa.lib.SomeClass1</li>\n-     * <li>org.apache.openjpa.lib.SomeClass</li>\n-     * </ol>\n-     *\n-     * @param base the base name of the class to load\n-     * @return the subclass appropriate for the current Java version\n-     */\n-    public static Class<?> getVersionSpecificClass(String base)\n-        throws ClassNotFoundException {\n-        for (int i = VERSION; i >= 1; i--) {\n-            try {\n-                return Class.forName(base + i);\n-            } catch (Throwable e) {\n-                // throwables might occur with bytecode that we cannot understand\n-            }\n-        }\n-        return Class.forName(base);\n-    }\n-\n-    /**\n-     * Return true if the given type is an annotation.\n-     */\n-    public static boolean isAnnotation(Class<?> cls) {\n-        return ANNO_TYPE != null && ANNO_TYPE.isAssignableFrom(cls);\n-    }\n-\n-    /**\n-     * Return true if the given type is an enumeration.\n-     */\n-    public static boolean isEnumeration(Class<?> cls) {\n-        return ENUM_TYPE != null && ENUM_TYPE.isAssignableFrom(cls);\n     }\n \n     /**\n      * Collects the parameterized type declarations for a given field.\n      */\n     public static Class<?>[] getParameterizedTypes(Field f) {\n-        if (f == null)\n-            return null;\n-        if (VERSION < 5)\n-            return EMPTY_CLASSES;\n-\n         try {\n-            Object type = invokeGetter(f, \"getGenericType\");\n-            return collectParameterizedTypes(type, f.getType());\n+            return collectParameterizedTypes(f.getGenericType(), f.getType());\n         } catch (Exception e) {\n             return EMPTY_CLASSES;\n         }\n@@ -171,14 +73,8 @@ public static boolean isEnumeration(Class<?> cls) {\n      * Collects the parameterized return type declarations for a given method.\n      */\n     public static Class<?>[] getParameterizedTypes(Method meth) {\n-        if (meth == null)\n-            return null;\n-        if (VERSION < 5)\n-            return EMPTY_CLASSES;\n-\n         try {\n-            Object type = invokeGetter(meth, \"getGenericReturnType\");\n-            return collectParameterizedTypes(type, meth.getReturnType());\n+            return collectParameterizedTypes(meth.getGenericReturnType(), meth.getReturnType());\n         } catch (Exception e) {\n             return EMPTY_CLASSES;\n         }\n@@ -187,9 +83,9 @@ public static boolean isEnumeration(Class<?> cls) {\n     /**\n      * Return all parameterized classes for the given type.\n      */\n-    private static Class<?>[] collectParameterizedTypes(Object type, Class<?> cls) throws Exception {\n-        if (isParameterizedType(type)) {\n-            Object[] args = (Object[]) invokeGetter(type, \"getActualTypeArguments\");\n+    private static Class<?>[] collectParameterizedTypes(Type type, Class<?> cls) throws Exception {\n+        if (type instanceof ParameterizedType) {\n+            Type[] args = ((ParameterizedType)type).getActualTypeArguments();\n             Class<?>[] clss = new Class[args.length];\n             for (int i = 0; i < args.length; i++) {\n                 Class<?> c = extractClass(args[i]);\n@@ -209,74 +105,12 @@ public static boolean isEnumeration(Class<?> cls) {\n     /**\n      * Extracts the class from the given argument, if possible. Null otherwise.\n      */\n-    static Class<?> extractClass(Object o) throws Exception {\n-        if (o == null)\n-            return null;\n-        if (o instanceof Class)\n-            return (Class<?>)o;\n-        \n-        if (isParameterizedType(o)) {\n-            return extractClass(invokeGetter(o, \"getRawType\"));\n+    static Class<?> extractClass(Type type) throws Exception {\n+        if (type instanceof Class) {\n+            return (Class<?>)type;\n+        } else if (type instanceof ParameterizedType) {\n+            return extractClass(((ParameterizedType)type).getRawType());\n         }\n         return null;\n     }\n-    \n-    static Object invokeGetter(Object target, String method) throws Exception {\n-        return AccessController.doPrivileged(\n-                J2DoPrivHelper.getDeclaredMethodAction(target.getClass(), method, NO_CLASS_ARGS))\n-                     .invoke(target, NO_ARGS);\n-    }\n-    \n-    static boolean isParameterizedType(Object cls) {\n-        return PARAM_TYPE != null && PARAM_TYPE.isInstance(cls);\n-    }\n-\n-    /**\n-     * Transfer the stack from one throwable to another, or return\n-     * false if it cannot be done, possibly due to an unsupported Java version.\n-     */\n-    public static boolean transferStackTrace(Throwable from, Throwable to) {\n-        if (GET_STACK == null || SET_STACK == null || from == null || to == null)\n-            return false;\n-\n-        try {\n-            Object stack = GET_STACK.invoke(from, NO_ARGS);\n-            SET_STACK.invoke(to, new Object[]{ stack });\n-            return true;\n-        } catch (Throwable t) {\n-            return false;\n-        }\n-    }\n-\n-    /**\n-     * Return the cause of the given throwable.\n-     */\n-    public static Throwable getCause(Throwable ex) {\n-        if (GET_CAUSE == null || ex == null)\n-            return null;\n-\n-        try {\n-            return (Throwable) GET_CAUSE.invoke(ex, NO_ARGS);\n-        } catch (Throwable t) {\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * Set the cause of the given throwable.\n-     */\n-    public static Throwable initCause(Throwable ex, Throwable cause) {\n-        if (INIT_CAUSE == null || ex == null || cause == null)\n-            return ex;\n-\n-        try {\n-            return (Throwable) INIT_CAUSE.invoke(ex, new Object[]{ cause });\n-        } catch (Throwable t) {\n-            return ex;\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        System.out.println(\"Java version is: \" + VERSION);\n-    }\n }"},{"sha":"e9baf92fbe92e4358b86c5c443d1f69262a5ebb4","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/3865aedfaa85d4d0be8f0699ccf169723ce90240/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/3865aedfaa85d4d0be8f0699ccf169723ce90240/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=3865aedfaa85d4d0be8f0699ccf169723ce90240","patch":"@@ -62,7 +62,6 @@\n import static org.apache.openjpa.persistence.MetaDataTag.QUERIES;\n import static org.apache.openjpa.persistence.MetaDataTag.QUERY;\n import static org.apache.openjpa.persistence.MetaDataTag.READ_ONLY;\n-import static org.apache.openjpa.persistence.MetaDataTag.REPLICATED;\n import static org.apache.openjpa.persistence.MetaDataTag.SEQ_GENERATOR;\n import static org.apache.openjpa.persistence.MetaDataTag.TYPE;\n import static org.apache.openjpa.persistence.MetaDataTag.VERSION;"}]}

