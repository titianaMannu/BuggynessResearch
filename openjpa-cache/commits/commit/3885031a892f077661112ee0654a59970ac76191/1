{"sha":"3885031a892f077661112ee0654a59970ac76191","node_id":"MDY6Q29tbWl0MjA2MzY0OjM4ODUwMzFhODkyZjA3NzY2MTExMmVlMDY1NGE1OTk3MGFjNzYxOTE=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-04-11T20:25:11Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-04-11T20:25:11Z"},"message":"OPENJPA-214 : Support float and double fields as single-field identity primary\nkeys.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@527648 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7db2575aa9d90dac03efe2a46ca9e1673fae737e","url":"https://api.github.com/repos/apache/openjpa/git/trees/7db2575aa9d90dac03efe2a46ca9e1673fae737e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3885031a892f077661112ee0654a59970ac76191","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3885031a892f077661112ee0654a59970ac76191","html_url":"https://github.com/apache/openjpa/commit/3885031a892f077661112ee0654a59970ac76191","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3885031a892f077661112ee0654a59970ac76191/comments","author":null,"committer":null,"parents":[{"sha":"b4a3a77840af840f9cd2800b717c585a3c135e5e","url":"https://api.github.com/repos/apache/openjpa/commits/b4a3a77840af840f9cd2800b717c585a3c135e5e","html_url":"https://github.com/apache/openjpa/commit/b4a3a77840af840f9cd2800b717c585a3c135e5e"}],"stats":{"total":376,"additions":375,"deletions":1},"files":[{"sha":"76e8427b0588a83478997441a235b1b9e0ae5a38","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/3885031a892f077661112ee0654a59970ac76191/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/3885031a892f077661112ee0654a59970ac76191/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=3885031a892f077661112ee0654a59970ac76191","patch":"@@ -62,8 +62,10 @@\n import org.apache.openjpa.util.ByteId;\n import org.apache.openjpa.util.CharId;\n import org.apache.openjpa.util.DateId;\n+import org.apache.openjpa.util.DoubleId;\n import org.apache.openjpa.util.Id;\n import org.apache.openjpa.util.IntId;\n+import org.apache.openjpa.util.FloatId;\n import org.apache.openjpa.util.LongId;\n import org.apache.openjpa.util.ObjectId;\n import org.apache.openjpa.util.ShortId;\n@@ -1632,6 +1634,32 @@ private void addExtractObjectIdFieldValueCode(Code code, FieldMetaData pk) {\n                         code.invokespecial().setMethod(Character.class, \n                             \"<init>\", void.class, new Class[] {char.class});\n                     break;\n+                case JavaTypes.DOUBLE_OBJ:\n+                    code.anew().setType(Double.class);\n+                    code.dup();\n+                    // no break\n+                case JavaTypes.DOUBLE:\n+                    code.aload().setLocal(oid);\n+                    code.checkcast().setType(DoubleId.class);\n+                    code.invokevirtual().setMethod(DoubleId.class, \"getId\",\n+                        double.class, null);\n+                    if (pkcode == JavaTypes.DOUBLE_OBJ)\n+                        code.invokespecial().setMethod(Double.class, \"<init>\", \n+                            void.class, new Class[]{double.class});\n+                    break;\n+                case JavaTypes.FLOAT_OBJ:\n+                    code.anew().setType(Float.class);\n+                    code.dup();\n+                    // no break\n+                case JavaTypes.FLOAT:\n+                    code.aload().setLocal(oid);\n+                    code.checkcast().setType(FloatId.class);\n+                    code.invokevirtual().setMethod(FloatId.class, \"getId\",\n+                        float.class, null);\n+                    if (pkcode == JavaTypes.FLOAT_OBJ)\n+                        code.invokespecial().setMethod(Float.class, \"<init>\", \n+                            void.class, new Class[]{float.class});\n+                    break;\n                 case JavaTypes.INT_OBJ:\n                     code.anew().setType(Integer.class);\n                     code.dup();\n@@ -1927,6 +1955,10 @@ private Class unwrapSingleFieldIdentity(FieldMetaData fmd) {\n                 return byte.class;\n             case JavaTypes.CHAR_OBJ:\n                 return char.class;\n+            case JavaTypes.DOUBLE_OBJ:\n+                return double.class;\n+            case JavaTypes.FLOAT_OBJ:\n+                return float.class;\n             case JavaTypes.INT_OBJ:\n                 return int.class;\n             case JavaTypes.SHORT_OBJ:"},{"sha":"939ee57a67ef4017fb00646b0a2a410072956b5c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/3885031a892f077661112ee0654a59970ac76191/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/3885031a892f077661112ee0654a59970ac76191/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=3885031a892f077661112ee0654a59970ac76191","patch":"@@ -44,6 +44,8 @@\n import org.apache.openjpa.util.ByteId;\n import org.apache.openjpa.util.CharId;\n import org.apache.openjpa.util.DateId;\n+import org.apache.openjpa.util.DoubleId;\n+import org.apache.openjpa.util.FloatId;\n import org.apache.openjpa.util.GeneralException;\n import org.apache.openjpa.util.IntId;\n import org.apache.openjpa.util.InternalException;\n@@ -438,6 +440,14 @@ public Class getObjectIdType() {\n             case JavaTypes.CHAR_OBJ:\n                 _objectId = CharId.class;\n                 break;\n+            case JavaTypes.DOUBLE:\n+            case JavaTypes.DOUBLE_OBJ:\n+                _objectId = DoubleId.class;\n+                break;\n+            case JavaTypes.FLOAT:\n+            case JavaTypes.FLOAT_OBJ:\n+                _objectId = FloatId.class;\n+                break;\n             case JavaTypes.INT:\n             case JavaTypes.INT_OBJ:\n                 _objectId = IntId.class;"},{"sha":"b7cab3c7de28298b881f49db859ef744a05aa9f6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/3885031a892f077661112ee0654a59970ac76191/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","raw_url":"https://github.com/apache/openjpa/raw/3885031a892f077661112ee0654a59970ac76191/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java?ref=3885031a892f077661112ee0654a59970ac76191","patch":"@@ -125,6 +125,18 @@ public static Object fromPKValues(Object[] pks, ClassMetaData meta) {\n                 case JavaTypes.CHAR_OBJ:\n                     return new CharId(meta.getDescribedType(),\n                         ((Character) val).charValue());\n+                case JavaTypes.DOUBLE:\n+                case JavaTypes.DOUBLE_OBJ:\n+                    if (!convert && !(val instanceof Double))\n+                        throw new ClassCastException(\"!(x instanceof Double)\");\n+                    return new DoubleId(meta.getDescribedType(),\n+                        ((Number) val).doubleValue());\n+                case JavaTypes.FLOAT:\n+                case JavaTypes.FLOAT_OBJ:\n+                    if (!convert && !(val instanceof Float))\n+                        throw new ClassCastException(\"!(x instanceof Float)\");\n+                    return new FloatId(meta.getDescribedType(),\n+                        ((Number) val).floatValue());\n                 case JavaTypes.INT:\n                 case JavaTypes.INT_OBJ:\n                     if (!convert && !(val instanceof Integer))\n@@ -217,6 +229,14 @@ public static Object copy(Object oid, ClassMetaData meta) {\n                 case JavaTypes.CHAR_OBJ:\n                     return new CharId(cls, ((CharId) oid).getId(),\n                         koid.hasSubclasses());\n+                case JavaTypes.DOUBLE:\n+                case JavaTypes.DOUBLE_OBJ:\n+                    return new DoubleId(cls, ((DoubleId) oid).getId(),\n+                        koid.hasSubclasses());\n+                case JavaTypes.FLOAT:\n+                case JavaTypes.FLOAT_OBJ:\n+                    return new FloatId(cls, ((FloatId) oid).getId(),\n+                        koid.hasSubclasses());\n                 case JavaTypes.INT:\n                 case JavaTypes.INT_OBJ:\n                     return new IntId(cls, ((IntId) oid).getId(),"},{"sha":"cbd4241a7a226d303b0b6a537a02d47355c8ddf1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/DoubleId.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/3885031a892f077661112ee0654a59970ac76191/openjpa-kernel/src/main/java/org/apache/openjpa/util/DoubleId.java","raw_url":"https://github.com/apache/openjpa/raw/3885031a892f077661112ee0654a59970ac76191/openjpa-kernel/src/main/java/org/apache/openjpa/util/DoubleId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/DoubleId.java?ref=3885031a892f077661112ee0654a59970ac76191","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.util;\n+\n+/**\n+ * {@link OpenJPAId} subclass appropriate for double fields.\n+ *\n+ * @author Abe White\n+ */\n+public final class DoubleId \n+    extends OpenJPAId {\n+\n+    private final double key;\n+\n+    public DoubleId(Class cls, Double key) {\n+        this(cls, (key == null) ? 0D : key.doubleValue());\n+    }\n+\n+    public DoubleId(Class cls, String key) {\n+        this(cls, (key == null) ? 0D : Double.parseDouble(key));\n+    }\n+\n+    public DoubleId(Class cls, double key) {\n+        super(cls);\n+        this.key = key;\n+    }\n+\n+    public DoubleId(Class cls, double key, boolean subs) {\n+        super(cls, subs);\n+        this.key = key;\n+    }\n+\n+    public double getId() {\n+        return key;\n+    }\n+\n+    public Object getIdObject() {\n+        return new Double(key);\n+    }\n+\n+    public String toString() {\n+        return Double.toString(key);\n+    }\n+\n+    protected int idHash() {\n+        return (int) (Double.doubleToLongBits(key) \n+            ^ (Double.doubleToLongBits(key) >>> 32));\n+    }\n+\n+    protected boolean idEquals(OpenJPAId o) {\n+        return key == ((DoubleId) o).key;\n+    }\n+}"},{"sha":"95ae0236d1762d38b0c682d00882420c342e0937","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/FloatId.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/3885031a892f077661112ee0654a59970ac76191/openjpa-kernel/src/main/java/org/apache/openjpa/util/FloatId.java","raw_url":"https://github.com/apache/openjpa/raw/3885031a892f077661112ee0654a59970ac76191/openjpa-kernel/src/main/java/org/apache/openjpa/util/FloatId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/FloatId.java?ref=3885031a892f077661112ee0654a59970ac76191","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.util;\n+\n+/**\n+ * {@link OpenJPAId} subclass appropriate for float fields.\n+ *\n+ * @author Abe White\n+ */\n+public final class FloatId \n+    extends OpenJPAId {\n+\n+    private final float key;\n+\n+    public FloatId(Class cls, Float key) {\n+        this(cls, (key == null) ? 0F : key.floatValue());\n+    }\n+\n+    public FloatId(Class cls, String key) {\n+        this(cls, (key == null) ? 0F : Float.parseFloat(key));\n+    }\n+\n+    public FloatId(Class cls, float key) {\n+        super(cls);\n+        this.key = key;\n+    }\n+\n+    public FloatId(Class cls, float key, boolean subs) {\n+        super(cls, subs);\n+        this.key = key;\n+    }\n+\n+    public float getId() {\n+        return key;\n+    }\n+\n+    public Object getIdObject() {\n+        return new Float(key);\n+    }\n+\n+    public String toString() {\n+        return Float.toString(key);\n+    }\n+\n+    protected int idHash() {\n+        return Float.floatToIntBits(key);\n+    }\n+\n+    protected boolean idEquals(OpenJPAId o) {\n+        return key == ((FloatId) o).key;\n+    }\n+}"},{"sha":"4fc872f1b2ce08f77102e7ef5ee5da2da39b59f1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/DoubleObjIdEntity.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/3885031a892f077661112ee0654a59970ac76191/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/DoubleObjIdEntity.java","raw_url":"https://github.com/apache/openjpa/raw/3885031a892f077661112ee0654a59970ac76191/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/DoubleObjIdEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/DoubleObjIdEntity.java?ref=3885031a892f077661112ee0654a59970ac76191","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.identity;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class DoubleObjIdEntity {\n+\n+    @Id\n+    private Double id;\n+    private int data;\n+\n+    public Double getId() {\n+        return id;\n+    }\n+\n+    public void setId(Double id) {\n+        this.id = id;\n+    }\n+\n+    public int getData() {\n+        return data;\n+    }\n+\n+    public void setData(int data) {\n+        this.data = data;\n+    }\n+}"},{"sha":"c03c823bb36b485b1662de65b0bda1db5919ffe5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/FloatIdEntity.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/3885031a892f077661112ee0654a59970ac76191/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/FloatIdEntity.java","raw_url":"https://github.com/apache/openjpa/raw/3885031a892f077661112ee0654a59970ac76191/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/FloatIdEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/FloatIdEntity.java?ref=3885031a892f077661112ee0654a59970ac76191","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.identity;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class FloatIdEntity {\n+\n+    @Id\n+    private float id;\n+    private int data;\n+\n+    public float getId() {\n+        return id;\n+    }\n+\n+    public void setId(float id) {\n+        this.id = id;\n+    }\n+\n+    public int getData() {\n+        return data;\n+    }\n+\n+    public void setData(int data) {\n+        this.data = data;\n+    }\n+}"},{"sha":"3220a7d8947cb2b8a522027e8cc7e5eff8bc3504","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestFloatingPointIds.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/3885031a892f077661112ee0654a59970ac76191/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestFloatingPointIds.java","raw_url":"https://github.com/apache/openjpa/raw/3885031a892f077661112ee0654a59970ac76191/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestFloatingPointIds.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestFloatingPointIds.java?ref=3885031a892f077661112ee0654a59970ac76191","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.identity;\n+\n+import java.sql.Date;\n+import javax.persistence.EntityManager;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test that entities can use floating point ids.\n+ *\n+ * @author Abe White\n+ */\n+public class TestFloatingPointIds\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(FloatIdEntity.class, DoubleObjIdEntity.class);\n+    }\n+\n+    public void testPersistFloat() {\n+        FloatIdEntity e = new FloatIdEntity();\n+        e.setId(3F);\n+        e.setData(33);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(e);\n+        em.getTransaction().commit();\n+        assertEquals(3F, e.getId());\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        e = em.find(FloatIdEntity.class, 3F);\n+        assertEquals(33, e.getData());\n+        em.close();\n+    }\n+\n+    public void testPersistDoubleObj() {\n+        DoubleObjIdEntity e = new DoubleObjIdEntity();\n+        e.setId(new Double(4D));\n+        e.setData(44);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(e);\n+        em.getTransaction().commit();\n+        assertEquals(new Double(4D), e.getId());\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        e = em.find(DoubleObjIdEntity.class, new Double(4D));\n+        assertEquals(44, e.getData());\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestFloatingPointIds.class);\n+    }\n+}\n+"},{"sha":"8bfe09e89e9067334164f639bb1c850257ba1049","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java","status":"modified","additions":20,"deletions":1,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/3885031a892f077661112ee0654a59970ac76191/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java","raw_url":"https://github.com/apache/openjpa/raw/3885031a892f077661112ee0654a59970ac76191/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java?ref=3885031a892f077661112ee0654a59970ac76191","patch":"@@ -35,7 +35,18 @@\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n-import org.apache.openjpa.util.*;\n+import org.apache.openjpa.util.ByteId;\n+import org.apache.openjpa.util.CharId;\n+import org.apache.openjpa.util.DoubleId;\n+import org.apache.openjpa.util.FloatId;\n+import org.apache.openjpa.util.Id;\n+import org.apache.openjpa.util.ImplHelper;\n+import org.apache.openjpa.util.IntId;\n+import org.apache.openjpa.util.LongId;\n+import org.apache.openjpa.util.ObjectId;\n+import org.apache.openjpa.util.OpenJPAId;\n+import org.apache.openjpa.util.ShortId;\n+import org.apache.openjpa.util.StringId;\n \n /**\n  * Static helper method for JPA users, including switching\n@@ -373,6 +384,10 @@ public static Object toOpenJPAObjectId(ClassMetaData meta, Object oid) {\n             return new ByteId(cls, (Byte) oid);\n         if (oid instanceof Character)\n             return new CharId(cls, (Character) oid);\n+        if (oid instanceof Double)\n+            return new DoubleId(cls, (Double) oid);\n+        if (oid instanceof Float)\n+            return new FloatId(cls, (Float) oid);\n         if (oid instanceof Integer)\n             return new IntId(cls, (Integer) oid);\n         if (oid instanceof Long)\n@@ -440,6 +455,10 @@ public static Class fromOpenJPAObjectIdClass(Class oidClass) {\n             return Byte.class;\n         if (oidClass == CharId.class)\n             return Character.class;\n+        if (oidClass == DoubleId.class)\n+            return Double.class;\n+        if (oidClass == FloatId.class)\n+            return Float.class;\n         if (oidClass == IntId.class)\n             return Integer.class;\n         if (oidClass == LongId.class)"}]}

