{"sha":"388b18650f0f4f480ce64b73165fcbe3e51f88ca","node_id":"MDY6Q29tbWl0MjA2MzY0OjM4OGIxODY1MGYwZjRmNDgwY2U2NGI3MzE2NWZjYmUzZTUxZjg4Y2E=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-08-25T01:19:32Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-08-25T01:19:32Z"},"message":"OPENJPA-1112 JPA2 Query result of embeddable object can not be further updated\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@807446 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"08aed42f093c6ac7c8d9ada4b0197b7053b864dd","url":"https://api.github.com/repos/apache/openjpa/git/trees/08aed42f093c6ac7c8d9ada4b0197b7053b864dd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/388b18650f0f4f480ce64b73165fcbe3e51f88ca","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/388b18650f0f4f480ce64b73165fcbe3e51f88ca","html_url":"https://github.com/apache/openjpa/commit/388b18650f0f4f480ce64b73165fcbe3e51f88ca","comments_url":"https://api.github.com/repos/apache/openjpa/commits/388b18650f0f4f480ce64b73165fcbe3e51f88ca/comments","author":null,"committer":null,"parents":[{"sha":"d45a82157e87e1be8cc0a90babd7b8e75e4789d7","url":"https://api.github.com/repos/apache/openjpa/commits/d45a82157e87e1be8cc0a90babd7b8e75e4789d7","html_url":"https://github.com/apache/openjpa/commit/d45a82157e87e1be8cc0a90babd7b8e75e4789d7"}],"stats":{"total":72,"additions":68,"deletions":4},"files":[{"sha":"a44476ee18a7bfe68d14b908e56fd073799fc43f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/388b18650f0f4f480ce64b73165fcbe3e51f88ca/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/388b18650f0f4f480ce64b73165fcbe3e51f88ca/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=388b18650f0f4f480ce64b73165fcbe3e51f88ca","patch":"@@ -1630,8 +1630,7 @@ public void dirty(int field) {\n \n     private boolean isEmbeddedNotUpdatable() {\n         // embeddable object returned from query result is not uptable\n-        return (_ownerId != null ||\n-            _state instanceof ENonTransState);\n+        return (_owner == null && _ownerId != null);\n     }\n \n     /**"},{"sha":"b555222a67b63c72c13bc614ea9b51a78dd0bdfb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Geocode.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/388b18650f0f4f480ce64b73165fcbe3e51f88ca/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Geocode.java","raw_url":"https://github.com/apache/openjpa/raw/388b18650f0f4f480ce64b73165fcbe3e51f88ca/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Geocode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Geocode.java?ref=388b18650f0f4f480ce64b73165fcbe3e51f88ca","patch":"@@ -27,7 +27,7 @@\n  *\n  */\n @Embeddable\n-public class Geocode extends BaseEntity {\n+public class Geocode {\n     float latitude, longtitude;\n \n     public float getLatitude() {"},{"sha":"32f50ee040477be89618d54261fb3c408693ee74","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestUpdateEmbeddedQueryResult.java","status":"modified","additions":66,"deletions":1,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/388b18650f0f4f480ce64b73165fcbe3e51f88ca/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestUpdateEmbeddedQueryResult.java","raw_url":"https://github.com/apache/openjpa/raw/388b18650f0f4f480ce64b73165fcbe3e51f88ca/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestUpdateEmbeddedQueryResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestUpdateEmbeddedQueryResult.java?ref=388b18650f0f4f480ce64b73165fcbe3e51f88ca","patch":"@@ -34,10 +34,75 @@\n     public void setUp() {\n         setUp(Embed.class,\n             Embed_Embed.class, \n-            EntityA_Embed_Embed.class, \n+            EntityA_Embed_Embed.class,\n+            BaseEntity.class, Address.class, Geocode.class,\n             DROP_TABLES);\n     }\n \n+    public void testUpdateEmbedded() {\n+        EntityManager em = emf.createEntityManager();\n+        Address a = new Address();\n+        a.setStreetAddress(\"555 Bailey Ave\");\n+        a.setCity(\"San Jose\");\n+        a.setState(\"CA\");\n+        a.setZip(12955);\n+        Geocode g = new Geocode();\n+        g.setLatitude(1.0f);\n+        g.setLongtitude(2.0f);\n+        a.setGeocode(g);\n+        em.getTransaction().begin();        \n+        em.persist(a);\n+        em.getTransaction().commit();\n+\n+        em.clear();\n+        em.getTransaction().begin();\n+        String query = \"select address from Address address\" +\n+            \" where address.streetAddress = '555 Bailey Ave'\";\n+        List<Address> list = (List<Address>) em.createQuery(query).getResultList();\n+        Address a1 = list.get(0);\n+\n+        assertEquals(a1.getGeocode().getLatitude(),1.0f);\n+        \n+        Long id = a1.getId();\n+\n+        g = new Geocode();\n+        g.setLatitude(3.0f);\n+        g.setLongtitude(4.0f);\n+        a1.setGeocode(g);\n+\n+        em.getTransaction().commit();\n+\n+        Address a2 = em.find(Address.class, id);\n+        assertEquals(a2.getGeocode().getLatitude(),3.0f);\n+\n+        em.getTransaction().begin();\n+        g.setLatitude(5.0f);\n+        a2.setGeocode(g);\n+        em.getTransaction().commit();\n+\n+        em.clear();\n+        Address a3 = em.find(Address.class, id);\n+        assertEquals(a3.getGeocode().getLatitude(),5.0f);\n+\n+        em.clear();\n+        query = \"select a.geocode from Address a where a.id = ?1\";\n+        List<Geocode> rs = em.createQuery(query).setParameter(1, id).getResultList();\n+        Geocode g2 = rs.get(0);\n+        em.getTransaction().begin();\n+        try {\n+            g2.setLatitude(7.0f);\n+        } catch (ArgumentException e) {\n+            //as expected: update of embeddable field in query result is not allowed.\n+        }\n+\n+        try {\n+            em.getTransaction().commit();\n+        } catch (RollbackException e) {\n+            //as expected: update of embeddable field in query result is not allowed.\n+        }\n+        em.close();\n+    }\n+\n     public void testEntityA_Embed_Embed_update() {\n         createEntityA_Embed_Embed();\n         updateEmbedded_EntityA_Embed_Embed();"}]}

