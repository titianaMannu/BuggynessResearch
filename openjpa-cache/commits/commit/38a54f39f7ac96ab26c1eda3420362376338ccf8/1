{"sha":"38a54f39f7ac96ab26c1eda3420362376338ccf8","node_id":"MDY6Q29tbWl0MjA2MzY0OjM4YTU0ZjM5ZjdhYzk2YWIyNmMxZWRhMzQyMDM2MjM3NjMzOGNjZjg=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-10-05T17:14:29Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-10-05T17:14:29Z"},"message":"OPENJPA-250: Moved preloading to later in the init process and only create MDR if preload is configured.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@821925 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"265f3e76bc925be11e8b41a85deefdd97783e696","url":"https://api.github.com/repos/apache/openjpa/git/trees/265f3e76bc925be11e8b41a85deefdd97783e696"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/38a54f39f7ac96ab26c1eda3420362376338ccf8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/38a54f39f7ac96ab26c1eda3420362376338ccf8","html_url":"https://github.com/apache/openjpa/commit/38a54f39f7ac96ab26c1eda3420362376338ccf8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/38a54f39f7ac96ab26c1eda3420362376338ccf8/comments","author":null,"committer":null,"parents":[{"sha":"cc5664fe2d6d2cdd08e7b9744d69075541931965","url":"https://api.github.com/repos/apache/openjpa/commits/cc5664fe2d6d2cdd08e7b9744d69075541931965","html_url":"https://github.com/apache/openjpa/commit/cc5664fe2d6d2cdd08e7b9744d69075541931965"}],"stats":{"total":57,"additions":25,"deletions":32},"files":[{"sha":"12bd7ec76bc333e5d95a5e7d8f40fc28e2246d5d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/38a54f39f7ac96ab26c1eda3420362376338ccf8/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/38a54f39f7ac96ab26c1eda3420362376338ccf8/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java?ref=38a54f39f7ac96ab26c1eda3420362376338ccf8","patch":"@@ -85,11 +85,7 @@ public static JDBCBrokerFactory getInstance(ConfigurationProvider cp) {\n     public JDBCBrokerFactory(JDBCConfiguration conf) {\n         super(conf);\n     }\n-\n-    public JDBCBrokerFactory(JDBCConfiguration conf, boolean earlyInit) {\n-        super(conf, earlyInit);\n-    }\n-    \n+   \n     public Map<String,Object> getProperties() {\n         // add platform property\n         Map<String,Object> props = super.getProperties();"},{"sha":"387ece883436e7c6208047a90cd4ac3006a59664","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":1,"deletions":23,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/38a54f39f7ac96ab26c1eda3420362376338ccf8/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/38a54f39f7ac96ab26c1eda3420362376338ccf8/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=38a54f39f7ac96ab26c1eda3420362376338ccf8","patch":"@@ -150,13 +150,10 @@ public static AbstractBrokerFactory getPooledFactoryForKey(Object key) {\n         return (AbstractBrokerFactory) _pool.get(key);\n     }\n \n-    protected AbstractBrokerFactory(OpenJPAConfiguration config) {\n-       this(config, true); \n-    }\n     /**\n      * Constructor. Configuration must be provided on construction.\n      */\n-    protected AbstractBrokerFactory(OpenJPAConfiguration config, boolean earlyInit) {\n+    protected AbstractBrokerFactory(OpenJPAConfiguration config) {\n         _conf = config;\n         _brokers = newBrokerSet();\n         getPcClassLoaders();\n@@ -167,25 +164,6 @@ protected AbstractBrokerFactory(OpenJPAConfiguration config, boolean earlyInit)\n                 _conf.getConnectionRetainModeConstant(), false).close(); \n         }\n \n-        if (!earlyInit)\n-            return;\n-        // This eager metadata loading is invoked at construction. \n-        // It can not happen during the MetaDataRepository configuration because \n-        // within a container environment an uninitialized repository must be passed\n-        // to the PCClassFileTransformer. If we attempt to load before registering\n-        // the class transformer, we miss the class being defined by the JVM and in turn\n-        // we fail to enhance our entities.\n-        try {\n-            MetaDataRepository mdr = config.getMetaDataRepositoryInstance();\n-            mdr.preload();\n-        } catch (MetaDataException e) {\n-            // recognize metadata related error if using early initialization\n-            throw e;\n-        } catch (Throwable t) {\n-            // swallow other errors because merely trying to obtain a repository \n-            // may trigger a database connection \n-            _conf.getConfigurationLog().error(_loc.get(\"factory-init-error\",t));\n-        }\n         initWriteBehindCallback();        \n     }\n "},{"sha":"a0a25ea18a989ed2d83758e832e2cc5f98017d4e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/38a54f39f7ac96ab26c1eda3420362376338ccf8/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/38a54f39f7ac96ab26c1eda3420362376338ccf8/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=38a54f39f7ac96ab26c1eda3420362376338ccf8","patch":"@@ -315,8 +315,7 @@ public boolean getNoLock() {\n      * all internal data container structures.\n      * If the openjpa.MetaDataRepository plugin value preload=false is set, this method will noop.\n      * <p>\n-     * NOTE : This method is not thread safe and should ONLY be called by the AbstractBrokerFactory\n-     * constructor.\n+     * NOTE : This method is not thread safe and should ONLY be called by PersistenceProviderImpl.\n      * \n      * @see #getPersistentTypeNames(boolean, ClassLoader)\n      */"},{"sha":"cbb1fcae07dc522b876932bbcaf5a41a43c5bfd0","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","status":"modified","additions":22,"deletions":2,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/38a54f39f7ac96ab26c1eda3420362376338ccf8/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/38a54f39f7ac96ab26c1eda3420362376338ccf8/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java?ref=38a54f39f7ac96ab26c1eda3420362376338ccf8","patch":"@@ -42,6 +42,7 @@\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.meta.MetaDataModes;\n import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.persistence.validation.ValidationUtils;\n@@ -94,6 +95,16 @@ public OpenJPAEntityManagerFactory createEntityManagerFactory(String name, Strin\n             // TODO - Can this be moved back to BrokerImpl.initialize()?\n             // Create appropriate LifecycleEventManager\n             loadValidator(_log, conf);\n+\n+            // We need to wait to preload until after we get back a fully configured/instantiated\n+            // BrokerFactory. This is because it is possible that someone has extended OpenJPA\n+            // functions and they need to be allowed time to configure themselves before we go off and\n+            // start instanting configurable objects (ie:openjpa.MetaDataRepository). Don't catch\n+            // any exceptions here because we want to fail-fast.\n+            Options o = Configurations.parseProperties(Configurations.getProperties(\"openjpa.MetaDataRepository\"));\n+            if(o.getBooleanProperty(\"Preload\")){\n+                conf.getMetaDataRepositoryInstance().preload();\n+            }\n             \n             return JPAFacadeHelper.toEntityManagerFactory(factory);\n         } catch (Exception e) {\n@@ -180,7 +191,16 @@ public OpenJPAEntityManagerFactory createContainerEntityManagerFactory(Persisten\n             OpenJPAConfiguration conf = factory.getConfiguration();\n             _log = conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n             loadValidator(_log, conf);\n-\n+            // We need to wait to preload until after we get back a fully configured/instantiated\n+            // BrokerFactory. This is because it is possible that someone has extended OpenJPA\n+            // functions and they need to be allowed time to configure themselves before we go off and\n+            // start instanting configurable objects (ie:openjpa.MetaDataRepository). Don't catch\n+            // any exceptions here because we want to fail-fast.\n+            Options o = Configurations.parseProperties(Configurations.getProperties(\"openjpa.MetaDataRepository\"));\n+            if(o.getBooleanProperty(\"Preload\")){\n+                conf.getAbstractBrokerFactoryInstance().preload();\n+            }\n+            \n             return JPAFacadeHelper.toEntityManagerFactory(factory);\n         } catch (Exception e) {\n             throw PersistenceExceptions.toPersistenceException(e);\n@@ -213,7 +233,7 @@ protected String getDefaultBrokerAlias() {\n     protected OpenJPAConfiguration newConfigurationImpl() {\n         return new OpenJPAConfigurationImpl();\n     }\n-    \n+        \n     /**\n      * Java EE 5 class transformer.\n      */"}]}

