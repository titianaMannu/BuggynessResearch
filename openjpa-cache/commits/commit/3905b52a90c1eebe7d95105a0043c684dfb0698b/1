{"sha":"3905b52a90c1eebe7d95105a0043c684dfb0698b","node_id":"MDY6Q29tbWl0MjA2MzY0OjM5MDViNTJhOTBjMWVlYmU3ZDk1MTA1YTAwNDNjNjg0ZGZiMDY5OGI=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-06-11T18:51:47Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-06-11T18:51:47Z"},"message":"OPENJPA-1692: Update method signature for BrokerFactory.getInstance(...) to take a classloader.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@953830 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1393f290946b254d6963ffd0564d24f4c16b78ee","url":"https://api.github.com/repos/apache/openjpa/git/trees/1393f290946b254d6963ffd0564d24f4c16b78ee"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3905b52a90c1eebe7d95105a0043c684dfb0698b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3905b52a90c1eebe7d95105a0043c684dfb0698b","html_url":"https://github.com/apache/openjpa/commit/3905b52a90c1eebe7d95105a0043c684dfb0698b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3905b52a90c1eebe7d95105a0043c684dfb0698b/comments","author":null,"committer":null,"parents":[{"sha":"ea8dc8b630305acd9e680744c486eff12afb1ba8","url":"https://api.github.com/repos/apache/openjpa/commits/ea8dc8b630305acd9e680744c486eff12afb1ba8","html_url":"https://github.com/apache/openjpa/commit/ea8dc8b630305acd9e680744c486eff12afb1ba8"}],"stats":{"total":25,"additions":15,"deletions":10},"files":[{"sha":"71f97afda7a3adfdc151f78e1eca11dba56fe8d4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/3905b52a90c1eebe7d95105a0043c684dfb0698b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/3905b52a90c1eebe7d95105a0043c684dfb0698b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java?ref=3905b52a90c1eebe7d95105a0043c684dfb0698b","patch":"@@ -65,15 +65,15 @@ public static JDBCBrokerFactory newInstance(ConfigurationProvider cp) {\n      * Factory method for obtaining a possibly-pooled factory from properties.\n      * Invoked from {@link Bootstrap#getBrokerFactory}.\n      */\n-    public static JDBCBrokerFactory getInstance(ConfigurationProvider cp) {\n+    public static JDBCBrokerFactory getInstance(ConfigurationProvider cp, ClassLoader loader) {\n         Map<String, Object> props = cp.getProperties();\n         Object key = toPoolKey(props);\n         JDBCBrokerFactory factory = (JDBCBrokerFactory) getPooledFactoryForKey(key);\n         if (factory != null)\n             return factory;\n         \n         // The creation of all BrokerFactories should be driven through Bootstrap.\n-        factory = (JDBCBrokerFactory) Bootstrap.newBrokerFactory(cp, null);\n+        factory = (JDBCBrokerFactory) Bootstrap.newBrokerFactory(cp, loader);\n         pool(key, factory);\n         return factory;\n     }"},{"sha":"8066f26eca671633d04812cbdc38baf763471fa4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","status":"modified","additions":13,"deletions":8,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/3905b52a90c1eebe7d95105a0043c684dfb0698b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","raw_url":"https://github.com/apache/openjpa/raw/3905b52a90c1eebe7d95105a0043c684dfb0698b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java?ref=3905b52a90c1eebe7d95105a0043c684dfb0698b","patch":"@@ -39,8 +39,11 @@\n  */\n public class Bootstrap {\n \n-    private static final Class[] FACTORY_ARGS =\n-        new Class[]{ ConfigurationProvider.class };\n+    private static final Class<?>[] CONFIGURATION_ARG =\n+        new Class<?>[]{ ConfigurationProvider.class };\n+    \n+    private static final Class<?>[] CONFIGURATION_CLASSLOADER_ARGS =\n+        new Class<?>[] { ConfigurationProvider.class, ClassLoader.class };\n \n     private static Localizer s_loc = Localizer.forPackage(Bootstrap.class);\n \n@@ -59,7 +62,8 @@ public static BrokerFactory newBrokerFactory() {\n     public static BrokerFactory newBrokerFactory(ConfigurationProvider conf,\n         ClassLoader loader) {\n         try {\n-            BrokerFactory factory = invokeFactory(conf, loader, \"newInstance\");\n+            BrokerFactory factory =\n+                invokeFactory(conf, loader, \"newInstance\", CONFIGURATION_ARG, new Object[] { conf });\n             factory.postCreationCallback();\n             return factory;\n         } catch (InvocationTargetException ite) {\n@@ -89,7 +93,8 @@ public static BrokerFactory getBrokerFactory() {\n     public static BrokerFactory getBrokerFactory(ConfigurationProvider conf,\n         ClassLoader loader) {\n         try {\n-            return invokeFactory(conf, loader, \"getInstance\");\n+            return invokeFactory(conf, loader, \"getInstance\", CONFIGURATION_CLASSLOADER_ARGS, new Object[] { conf,\n+                loader });\n         } catch (InvocationTargetException ite) {\n             Throwable cause = ite.getTargetException();\n             if (cause instanceof OpenJPAException)\n@@ -103,7 +108,7 @@ public static BrokerFactory getBrokerFactory(ConfigurationProvider conf,\n     }\n \n     private static BrokerFactory invokeFactory(ConfigurationProvider conf,\n-        ClassLoader loader, String methodName)\n+        ClassLoader loader, String methodName, Class<?>[] argTypes, Object[] args)\n         throws InvocationTargetException, NoSuchMethodException,\n             IllegalAccessException {\n         if (conf == null)\n@@ -113,17 +118,17 @@ private static BrokerFactory invokeFactory(ConfigurationProvider conf,\n         Class cls = getFactoryClass(conf, loader);\n         Method meth;\n         try {\n-            meth = cls.getMethod(methodName, FACTORY_ARGS); \n+            meth = cls.getMethod(methodName, argTypes); \n         } catch (NoSuchMethodException nsme) {\n             // handle cases where there is a mismatch between loaders by falling\n             // back to the configuration's class loader for broker resolution\n             cls = getFactoryClass(conf,\n                 AccessController.doPrivileged(\n                     J2DoPrivHelper.getClassLoaderAction(conf.getClass()))); \n-            meth = cls.getMethod(methodName, FACTORY_ARGS); \n+            meth = cls.getMethod(methodName, argTypes); \n         }\n \n-        return (BrokerFactory) meth.invoke(null, new Object[]{ conf });\n+        return (BrokerFactory) meth.invoke(null, args);\n     }\n \n     private static String getFactoryClassName(ConfigurationProvider conf,"}]}

