{"sha":"3963e826926e19ec83947f0b4db2fe631c4933d7","node_id":"MDY6Q29tbWl0MjA2MzY0OjM5NjNlODI2OTI2ZTE5ZWM4Mzk0N2YwYjRkYjJmZTYzMWM0OTMzZDc=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-06-14T17:52:29Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-06-14T17:52:29Z"},"message":"OPENJPA-1641: Try JDBC standard column names as well as Sybase specific ones\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@954567 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0ba941697f6a610aad044068bae85b87c1ca20f7","url":"https://api.github.com/repos/apache/openjpa/git/trees/0ba941697f6a610aad044068bae85b87c1ca20f7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3963e826926e19ec83947f0b4db2fe631c4933d7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3963e826926e19ec83947f0b4db2fe631c4933d7","html_url":"https://github.com/apache/openjpa/commit/3963e826926e19ec83947f0b4db2fe631c4933d7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3963e826926e19ec83947f0b4db2fe631c4933d7/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"3ee3f244006a7f268157a6f98fcc9cdb22f5a272","url":"https://api.github.com/repos/apache/openjpa/commits/3ee3f244006a7f268157a6f98fcc9cdb22f5a272","html_url":"https://github.com/apache/openjpa/commit/3ee3f244006a7f268157a6f98fcc9cdb22f5a272"}],"stats":{"total":55,"additions":46,"deletions":9},"files":[{"sha":"11ed12367b73292c05fc90fab4431602e0a27933","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java","status":"modified","additions":46,"deletions":9,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/3963e826926e19ec83947f0b4db2fe631c4933d7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/3963e826926e19ec83947f0b4db2fe631c4933d7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java?ref=3963e826926e19ec83947f0b4db2fe631c4933d7","patch":"@@ -323,17 +323,50 @@ public Connection decorate(Connection conn)\n         \n         return ConcreteClassGenerator.newInstance(sybaseConnectionImpl, conn);\n     }\n+    \n+    /**\n+     * Helper method obtains a string value from a given column in a ResultSet. Strings provided are column names,\n+     * jdbcName will be tried first if an SQLException occurs we'll try the sybase name.\n+     */\n+    protected String getStringFromResultSet(ResultSet rs, String jdbcName, String sybaseName) throws SQLException {\n+        try { \n+            return rs.getString(jdbcName);\n+        }\n+        catch(SQLException sqle) { \n+            // if the generic JDBC identifier isn't found an SQLException will be thrown\n+            // try the Sybase specific id\n+            return rs.getString(sybaseName);\n+        }\n+    }\n+    /**\n+     * Helper method obtains a boolean value from a given column in a ResultSet. Strings provided are column names,\n+     * jdbcName will be tried first if an SQLException occurs we'll try the sybase name.\n+     */\n+    protected boolean getBooleanFromResultSet(ResultSet rs, String jdbcName, String sybaseName) throws SQLException {\n+        try { \n+            return rs.getBoolean(jdbcName);\n+        }\n+        catch(SQLException sqle) {\n+            // if the generic JDBC identifier isn't found an SQLException will be thrown\n+            // try the Sybase specific id\n+            return rs.getBoolean(sybaseName);\n+        }\n+    }\n \n     /**\n      * Create a new primary key from the information in the schema metadata.\n      */\n     protected PrimaryKey newPrimaryKey(ResultSet pkMeta)\n         throws SQLException {\n         PrimaryKey pk = new PrimaryKey();\n-        pk.setSchemaIdentifier(fromDBName(pkMeta.getString(\"table_owner\"), DBIdentifierType.SCHEMA));\n-        pk.setTableIdentifier(fromDBName(pkMeta.getString(\"table_name\"), DBIdentifierType.TABLE));\n-        pk.setColumnIdentifier(fromDBName(pkMeta.getString(\"column_name\"), DBIdentifierType.COLUMN));\n-        pk.setIdentifier(fromDBName(pkMeta.getString(\"index_name\"), DBIdentifierType.CONSTRAINT));\n+        pk.setSchemaIdentifier(fromDBName(getStringFromResultSet(pkMeta, \"TABLE_SCHEM\", \"table_owner\"),\n+            DBIdentifierType.SCHEMA));\n+        pk.setTableIdentifier(fromDBName(getStringFromResultSet(pkMeta, \"TABLE_NAME\", \"table_name\"),\n+            DBIdentifierType.TABLE));\n+        pk.setColumnIdentifier(fromDBName(getStringFromResultSet(pkMeta, \"COLUMN_NAME\", \"column_name\"),\n+            DBIdentifierType.COLUMN));\n+        pk.setIdentifier(fromDBName(getStringFromResultSet(pkMeta, \"PK_NAME\", \"index_name\"),\n+            DBIdentifierType.CONSTRAINT));\n         return pk;\n     }\n \n@@ -343,11 +376,15 @@ protected PrimaryKey newPrimaryKey(ResultSet pkMeta)\n     protected Index newIndex(ResultSet idxMeta)\n         throws SQLException {\n         Index idx = new Index();\n-        idx.setSchemaIdentifier(fromDBName(idxMeta.getString(\"table_owner\"), DBIdentifierType.SCHEMA));\n-        idx.setTableIdentifier(fromDBName(idxMeta.getString(\"table_name\"), DBIdentifierType.TABLE));\n-        idx.setColumnIdentifier(fromDBName(idxMeta.getString(\"column_name\"), DBIdentifierType.COLUMN));\n-        idx.setIdentifier(fromDBName(idxMeta.getString(\"index_name\"), DBIdentifierType.INDEX));\n-        idx.setUnique(!idxMeta.getBoolean(\"non_unique\"));\n+        idx.setSchemaIdentifier(fromDBName(getStringFromResultSet(idxMeta, \"TABLE_SCHEM\", \"table_owner\"),\n+            DBIdentifierType.SCHEMA));\n+        idx.setTableIdentifier(fromDBName(getStringFromResultSet(idxMeta, \"TABLE_NAME\", \"table_name\"),\n+            DBIdentifierType.TABLE));\n+        idx.setColumnIdentifier(fromDBName(getStringFromResultSet(idxMeta, \"COLUMN_NAME\", \"column_name\"),\n+            DBIdentifierType.COLUMN));\n+        idx.setIdentifier(fromDBName(getStringFromResultSet(idxMeta, \"INDEX_NAME\", \"index_name\"),\n+            DBIdentifierType.INDEX));\n+        idx.setUnique(!getBooleanFromResultSet(idxMeta, \"NON_UNIQUE\", \"non_unique\"));\n         return idx;\n     }\n "}]}

