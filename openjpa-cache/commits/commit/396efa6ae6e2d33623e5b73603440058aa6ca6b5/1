{"sha":"396efa6ae6e2d33623e5b73603440058aa6ca6b5","node_id":"MDY6Q29tbWl0MjA2MzY0OjM5NmVmYTZhZTZlMmQzMzYyM2U1YjczNjAzNDQwMDU4YWE2Y2E2YjU=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-01-18T22:21:08Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-01-18T22:21:08Z"},"message":"Support native queries making stored procedure calls, or insert, update, delete.\nFor native queries returning ResultSet should use getResultList or getSingleResult interfaces on Query.\nFor native queries performing updates without returning any results use executeUpdate interface on Query.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@497605 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"24631b22fdf699dac41c63aaad47c500d03c5fe2","url":"https://api.github.com/repos/apache/openjpa/git/trees/24631b22fdf699dac41c63aaad47c500d03c5fe2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/396efa6ae6e2d33623e5b73603440058aa6ca6b5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/396efa6ae6e2d33623e5b73603440058aa6ca6b5","html_url":"https://github.com/apache/openjpa/commit/396efa6ae6e2d33623e5b73603440058aa6ca6b5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/396efa6ae6e2d33623e5b73603440058aa6ca6b5/comments","author":null,"committer":null,"parents":[{"sha":"4f0c54211df547e848b6a7605b2f255563634fda","url":"https://api.github.com/repos/apache/openjpa/commits/4f0c54211df547e848b6a7605b2f255563634fda","html_url":"https://github.com/apache/openjpa/commit/4f0c54211df547e848b6a7605b2f255563634fda"}],"stats":{"total":59,"additions":59,"deletions":0},"files":[{"sha":"1ddfaafab159da65bf8d7a8c957bd3a7066c0f88","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","status":"modified","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/396efa6ae6e2d33623e5b73603440058aa6ca6b5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/396efa6ae6e2d33623e5b73603440058aa6ca6b5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java?ref=396efa6ae6e2d33623e5b73603440058aa6ca6b5","patch":"@@ -43,6 +43,7 @@\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.util.UserException;\n+import serp.util.Numbers;\n \n /**\n  * A SQL query.\n@@ -158,6 +159,7 @@ public boolean requiresParameterDeclarations() {\n \n         private final ClassMetaData _meta;\n         private final boolean _select;\n+        private final boolean _call;   // native call stored procedure\n         private final QueryResultMapping _resultMapping;\n \n         public SQLExecutor(SQLStoreQuery q, ClassMetaData candidate) {\n@@ -180,6 +182,63 @@ public SQLExecutor(SQLStoreQuery q, ClassMetaData candidate) {\n                 throw new UserException(_loc.get(\"no-sql\"));\n             _select = sql.length() > 6\n                 && sql.substring(0, 6).equalsIgnoreCase(\"select\");\n+            _call = sql.length() > 4\n+                && sql.substring(0, 4).equalsIgnoreCase(\"call\");\n+        }\n+\n+        public int getOperation(StoreQuery q) {\n+           return _select ? OP_SELECT : \n+                (q.getContext().getCandidateType() != null\n+                        || q.getContext().getResultType() != null\n+                        || q.getContext().getResultMappingName() != null \n+                        || q.getContext().getResultMappingScope() != null)\n+                        ? OP_SELECT : OP_UPDATE;\n+        }\n+\n+        public Number executeUpdate(StoreQuery q, Object[] params) {\n+            JDBCStore store = ((SQLStoreQuery) q).getStore();\n+            DBDictionary dict = store.getDBDictionary();\n+            String sql = q.getContext().getQueryString();\n+\n+            List paramList;\n+            if (params.length > 0) {\n+                paramList = new ArrayList(Arrays.asList(params));\n+                try {\n+                    sql = substituteParams(sql, paramList);\n+                } catch (IOException ioe) {\n+                    throw new UserException(ioe);\n+                }\n+            } else\n+                paramList = Collections.EMPTY_LIST;\n+\n+            SQLBuffer buf = new SQLBuffer(dict).append(sql);\n+            Connection conn = store.getConnection();\n+            JDBCFetchConfiguration fetch = (JDBCFetchConfiguration)\n+                q.getContext().getFetchConfiguration();\n+\n+            PreparedStatement stmnt = null;\n+            try {\n+                stmnt = buf.prepareCall(conn);\n+\n+                int index = 0;\n+                for (Iterator i = paramList.iterator(); i.hasNext();)\n+                    dict.setUnknown(stmnt, ++index, i.next(), null);\n+                \n+                int count = 0;\n+                if (_call && stmnt.execute() == false) {\n+                    count = stmnt.getUpdateCount();\n+                }\n+                else {\n+                    // native insert, update, delete\n+                    count = stmnt.executeUpdate();\n+                }\n+                return Numbers.valueOf(count);\n+            } catch (SQLException se) {\n+                if (stmnt != null)\n+                    try { stmnt.close(); } catch (SQLException se2) {}\n+                try { conn.close(); } catch (SQLException se2) {}\n+                throw SQLExceptions.getStore(se, dict);\n+            }\n         }\n \n         public ResultObjectProvider executeQuery(StoreQuery q,"}]}

