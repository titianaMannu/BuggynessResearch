{"sha":"39f1071085c02dfb4a4d94f1f508c2e82dc44cf7","node_id":"MDY6Q29tbWl0MjA2MzY0OjM5ZjEwNzEwODVjMDJkZmI0YTRkOTRmMWY1MDhjMmU4MmRjNDRjZjc=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-24T09:16:57Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-24T09:16:57Z"},"message":"OPENJPA-262\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@550185 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d66a97ff1ca3c387564ae703489c2258e19971d5","url":"https://api.github.com/repos/apache/openjpa/git/trees/d66a97ff1ca3c387564ae703489c2258e19971d5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/39f1071085c02dfb4a4d94f1f508c2e82dc44cf7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/39f1071085c02dfb4a4d94f1f508c2e82dc44cf7","html_url":"https://github.com/apache/openjpa/commit/39f1071085c02dfb4a4d94f1f508c2e82dc44cf7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/39f1071085c02dfb4a4d94f1f508c2e82dc44cf7/comments","author":null,"committer":null,"parents":[{"sha":"cbb7bded12af4b523c0c4823a2db42cda1a2463a","url":"https://api.github.com/repos/apache/openjpa/commits/cbb7bded12af4b523c0c4823a2db42cda1a2463a","html_url":"https://github.com/apache/openjpa/commit/cbb7bded12af4b523c0c4823a2db42cda1a2463a"}],"stats":{"total":370,"additions":218,"deletions":152},"files":[{"sha":"037a384fd7c1a9891386bd83fe44b5cd6b46cf00","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/39f1071085c02dfb4a4d94f1f508c2e82dc44cf7/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/39f1071085c02dfb4a4d94f1f508c2e82dc44cf7/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java?ref=39f1071085c02dfb4a4d94f1f508c2e82dc44cf7","patch":"@@ -39,6 +39,7 @@\n import org.apache.openjpa.kernel.RestoreState;\n import org.apache.openjpa.kernel.SavepointManager;\n import org.apache.openjpa.kernel.Seq;\n+import org.apache.openjpa.event.BrokerFactoryEventManager;\n import org.apache.openjpa.kernel.exps.AggregateListener;\n import org.apache.openjpa.kernel.exps.FilterListener;\n import org.apache.openjpa.lib.conf.Configuration;\n@@ -1386,4 +1387,10 @@\n      * configuration.\n      */\n     public StoreFacadeTypeRegistry getStoreFacadeTypeRegistry();\n+\n+    /**\n+     * Return the {@link org.apache.openjpa.event.BrokerFactoryEventManager} associated with this\n+     * configuration.\n+     */\n+    public BrokerFactoryEventManager getBrokerFactoryEventManager();\n }"},{"sha":"3c9e11a5c0f48b57e6c76511443dfbf1f30c5a10","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/39f1071085c02dfb4a4d94f1f508c2e82dc44cf7/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/39f1071085c02dfb4a4d94f1f508c2e82dc44cf7/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=39f1071085c02dfb4a4d94f1f508c2e82dc44cf7","patch":"@@ -31,6 +31,7 @@\n import org.apache.openjpa.event.OrphanedKeyAction;\n import org.apache.openjpa.event.RemoteCommitEventManager;\n import org.apache.openjpa.event.RemoteCommitProvider;\n+import org.apache.openjpa.event.BrokerFactoryEventManager;\n import org.apache.openjpa.kernel.AutoClear;\n import org.apache.openjpa.kernel.BrokerImpl;\n import org.apache.openjpa.kernel.ConnectionRetainModes;\n@@ -140,6 +141,8 @@\n     private String spec = null;\n     private final StoreFacadeTypeRegistry _storeFacadeRegistry =\n         new StoreFacadeTypeRegistry();\n+    private BrokerFactoryEventManager _brokerFactoryEventManager =\n+        new BrokerFactoryEventManager(this);\n \n     /**\n      * Default constructor. Attempts to load global properties.\n@@ -1408,7 +1411,11 @@ public Map getQueryCompilationCacheInstance() {\n     public StoreFacadeTypeRegistry getStoreFacadeTypeRegistry() {\n         return _storeFacadeRegistry;\n     }\n-    \n+\n+    public BrokerFactoryEventManager getBrokerFactoryEventManager() {\n+        return _brokerFactoryEventManager;\n+    }\n+\n     public void instantiateAll() {\n         super.instantiateAll();\n         getMetaDataRepositoryInstance();"},{"sha":"ea6cc36d547eb14fcbb9fc21a00b20d6c734bc57","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryEvent.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/39f1071085c02dfb4a4d94f1f508c2e82dc44cf7/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryEvent.java","raw_url":"https://github.com/apache/openjpa/raw/39f1071085c02dfb4a4d94f1f508c2e82dc44cf7/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryEvent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryEvent.java?ref=39f1071085c02dfb4a4d94f1f508c2e82dc44cf7","patch":"@@ -0,0 +1,52 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.event;\r\n+\r\n+import java.util.EventObject;\r\n+\r\n+import org.apache.openjpa.kernel.BrokerFactory;\r\n+\r\n+/**\r\n+ * Event fired when a {@link BrokerFactory} is created.\r\n+ *\r\n+ * @since 1.0.0\r\n+ */\r\n+public class BrokerFactoryEvent\r\n+    extends EventObject {\r\n+\r\n+    public final static int BROKER_FACTORY_CREATED = 0;\r\n+\r\n+    private int eventType;\r\n+\r\n+    public BrokerFactoryEvent(BrokerFactory brokerFactory, int eventType) {\r\n+        super(brokerFactory);\r\n+        this.eventType = eventType;\r\n+    }\r\n+\r\n+    public BrokerFactory getBrokerFactory() {\r\n+        return (BrokerFactory) getSource();\r\n+    }\r\n+\r\n+    /**\r\n+     * @return one of the event type codes defined in this event class.\r\n+     */\r\n+    public int getEventType() {\r\n+        return eventType;\r\n+    }\r\n+}\r"},{"sha":"0e34ae9454f7134977836781f227b7aaef160e7f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryEventManager.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/39f1071085c02dfb4a4d94f1f508c2e82dc44cf7/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/39f1071085c02dfb4a4d94f1f508c2e82dc44cf7/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryEventManager.java?ref=39f1071085c02dfb4a4d94f1f508c2e82dc44cf7","patch":"@@ -0,0 +1,53 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.event;\r\n+\r\n+import org.apache.openjpa.lib.util.concurrent.AbstractConcurrentEventManager;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.lib.conf.Configuration;\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+\r\n+/**\r\n+ * {@link EventManager} responsible for notifying listeners of\r\n+ * {@link BrokerFactoryEvent}s.\r\n+ *\r\n+ * @since 1.0.0\r\n+ */\r\n+public class BrokerFactoryEventManager\r\n+    extends AbstractConcurrentEventManager {\r\n+\r\n+    private static final Localizer _loc = Localizer.forPackage(\r\n+        BrokerFactoryEventManager.class);\r\n+\r\n+    private final Configuration _conf;\r\n+\r\n+    public BrokerFactoryEventManager(Configuration conf) {\r\n+        _conf = conf;\r\n+    }\r\n+\r\n+    protected void fireEvent(Object event, Object listener) {\r\n+        try {\r\n+            BrokerFactoryEvent e = (BrokerFactoryEvent) event;\r\n+            ((BrokerFactoryListener) listener).afterBrokerFactoryCreate(e);\r\n+        } catch (Exception e) {\r\n+            _conf.getLog(OpenJPAConfiguration.LOG_RUNTIME).warn(\r\n+                _loc.get(\"broker-factory-listener-exception\"), e);\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"7172419d0226617ed83fba31696c3e14200bbf63","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryListener.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/39f1071085c02dfb4a4d94f1f508c2e82dc44cf7/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryListener.java","raw_url":"https://github.com/apache/openjpa/raw/39f1071085c02dfb4a4d94f1f508c2e82dc44cf7/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryListener.java?ref=39f1071085c02dfb4a4d94f1f508c2e82dc44cf7","patch":"@@ -0,0 +1,35 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.event;\r\n+\r\n+/**\r\n+ * Interface for listening to {@link BrokerFactoryEvent} objects. Should be\r\n+ * registered with a {@link OpenJPAConfiguration}'s\r\n+ * {@link BrokerFactoryEventManager}.\r\n+ *\r\n+ * @since 1.0.0\r\n+ */\r\n+public interface BrokerFactoryListener {\r\n+\r\n+    /**\r\n+     * Invoked after a {@link AbstractBrokerFactory} has been fully created.\r\n+     * This happens after the factory has been made read-only.\r\n+     */\r\n+    public void afterBrokerFactoryCreate(BrokerFactoryEvent event);\r\n+}\r"},{"sha":"7c2fb1d3e9c17c43d629cb6ff64c2d27c2c5ea9e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/39f1071085c02dfb4a4d94f1f508c2e82dc44cf7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/39f1071085c02dfb4a4d94f1f508c2e82dc44cf7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=39f1071085c02dfb4a4d94f1f508c2e82dc44cf7","patch":"@@ -37,6 +37,7 @@\n import org.apache.openjpa.datacache.DataCacheStoreManager;\n import org.apache.openjpa.enhance.PCRegistry;\n import org.apache.openjpa.event.RemoteCommitEventManager;\n+import org.apache.openjpa.event.BrokerFactoryEvent;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.ReferenceHashSet;\n@@ -545,6 +546,12 @@ public void makeReadOnly() {\n             // avoid synchronization\n             _conf.setReadOnly(true);\n             _conf.instantiateAll();\n+\n+            // fire an event for all the broker factory listeners\n+            // registered on the configuration.\n+            _conf.getBrokerFactoryEventManager().fireEvent(\n+                new BrokerFactoryEvent(this,\n+                    BrokerFactoryEvent.BROKER_FACTORY_CREATED));\n         } finally {\n             unlock();\n         }"},{"sha":"0d8ee774e32e332fd614dcd17e837b4f4dcc2bfb","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/event/localizer.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/39f1071085c02dfb4a4d94f1f508c2e82dc44cf7/openjpa-kernel/src/main/resources/org/apache/openjpa/event/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/39f1071085c02dfb4a4d94f1f508c2e82dc44cf7/openjpa-kernel/src/main/resources/org/apache/openjpa/event/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/event/localizer.properties?ref=39f1071085c02dfb4a4d94f1f508c2e82dc44cf7","patch":"@@ -95,3 +95,5 @@ bean-constructor: Could not instantiate class {0}.  Make sure it has an \\\n     accessible no-args constructor.\n method-notfound: Method \"{1}\" with arguments of type: {2} \\\n     not found in class \"{0}\".\n+broker-factory-listener-exception: Exception thrown while calling a \\\n+    BrokerFactoryListener. This exception will be ignored.\n\\ No newline at end of file"},{"sha":"db073f1ae73f18dd6c4b120a571c50d920ee1fe6","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/AbstractEventManager.java","status":"removed","additions":0,"deletions":149,"changes":149,"blob_url":"https://github.com/apache/openjpa/blob/cbb7bded12af4b523c0c4823a2db42cda1a2463a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/AbstractEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/cbb7bded12af4b523c0c4823a2db42cda1a2463a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/AbstractEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/AbstractEventManager.java?ref=cbb7bded12af4b523c0c4823a2db42cda1a2463a","patch":"@@ -1,149 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.lib.util;\n-\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Iterator;\n-import java.util.LinkedList;\n-import java.util.List;\n-\n-/**\n- * Base event manager that handles adding/removing listeners\n- * and firing events. This class is reentrant-safe; listeners can be added\n- * and removed by other listeners when they receive events. The changes will\n- * not be visible until the event fire that initiated the recursive sequence\n- * of calls completes, however.\n- *\n- * @author Abe White\n- */\n-public abstract class AbstractEventManager implements EventManager {\n-\n-    private static Exception[] EMPTY_EXCEPTIONS = new Exception[0];\n-\n-    private boolean _firing = false;\n-    private Collection _listeners = null;\n-    private Collection _newListeners = null;\n-\n-    /**\n-     * Register an event listener.\n-     */\n-    public synchronized void addListener(Object listener) {\n-        if (listener == null)\n-            return;\n-        if (_firing) {\n-            if (_newListeners == null) {\n-                _newListeners = newListenerCollection();\n-                _newListeners.addAll(_listeners);\n-            }\n-            _newListeners.add(listener);\n-        } else {\n-            if (_listeners == null)\n-                _listeners = newListenerCollection();\n-            _listeners.add(listener);\n-        }\n-    }\n-\n-    /**\n-     * Remove an event listener.\n-     */\n-    public synchronized boolean removeListener(Object listener) {\n-        if (listener == null)\n-            return false;\n-        if (_firing && _listeners.contains(listener)) {\n-            if (_newListeners == null) {\n-                _newListeners = newListenerCollection();\n-                _newListeners.addAll(_listeners);\n-            }\n-            return _newListeners.remove(listener);\n-        }\n-        return _listeners != null && _listeners.remove(listener);\n-    }\n-\n-    /**\n-     * Return whether the given instance is in the list of listeners.\n-     */\n-    public synchronized boolean hasListener(Object listener) {\n-        return _listeners != null && _listeners.contains(listener);\n-    }\n-\n-    /**\n-     * Return true if there are any registered listeners.\n-     */\n-    public synchronized boolean hasListeners() {\n-        return _listeners != null && !_listeners.isEmpty();\n-    }\n-\n-    /**\n-     * Return a read-only list of listeners.\n-     */\n-    public synchronized Collection getListeners() {\n-        return (_listeners == null) ? Collections.EMPTY_LIST\n-            : Collections.unmodifiableCollection(_listeners);\n-    }\n-\n-    /**\n-     * Fire the given event to all listeners.\n-     */\n-    public synchronized Exception[] fireEvent(Object event) {\n-        if (_listeners == null || _listeners.isEmpty())\n-            return EMPTY_EXCEPTIONS;\n-\n-        boolean reentrant = _firing;\n-        _firing = true;\n-        List exceptions = null;\n-        for (Iterator itr = _listeners.iterator(); itr.hasNext();) {\n-            try {\n-                fireEvent(event, itr.next());\n-            } catch (Exception e) {\n-                if (exceptions == null)\n-                    exceptions = new LinkedList();\n-                exceptions.add(e);\n-            }\n-        }\n-\n-        // if this wasn't a reentrant call, record that we're no longer\n-        // in the process of firing events and replace our initial listener\n-        // list with the set of new listeners\n-        if (!reentrant) {\n-            _firing = false;\n-            if (_newListeners != null)\n-                _listeners = _newListeners;\n-            _newListeners = null;\n-        }\n-\n-        if (exceptions == null)\n-            return EMPTY_EXCEPTIONS;\n-        return (Exception[]) exceptions.toArray\n-            (new Exception[exceptions.size()]);\n-    }\n-\n-    /**\n-     * Implement this method to fire the given event to the given listener.\n-     */\n-    protected abstract void fireEvent(Object event, Object listener)\n-        throws Exception;\n-\n-    /**\n-     * Return a new container for listeners. Uses a linked list by default.\n-     */\n-    protected Collection newListenerCollection() {\n-        return new LinkedList();\n-    }\n-}"},{"sha":"bfb6538f3d8c2517b0663ab7572f2292ed3a82f8","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestAbstractEventManager.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/39f1071085c02dfb4a4d94f1f508c2e82dc44cf7/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestAbstractEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/39f1071085c02dfb4a4d94f1f508c2e82dc44cf7/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestAbstractEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestAbstractEventManager.java?ref=39f1071085c02dfb4a4d94f1f508c2e82dc44cf7","patch":"@@ -22,9 +22,10 @@\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n+import org.apache.openjpa.lib.util.concurrent.AbstractConcurrentEventManager;\n \n /**\n- * Tests the {@link AbstractEventManager}.\n+ * Tests the {@link AbstractConcurrentEventManager}.\n  *\n  * @author Abe White\n  */\n@@ -67,7 +68,7 @@ public static void main(String[] args) {\n         TestRunner.run(suite());\n     }\n \n-    private static class EventManager extends AbstractEventManager {\n+    private static class EventManager extends AbstractConcurrentEventManager {\n \n         protected void fireEvent(Object event, Object listener) {\n             ((Listener) listener).fire();"},{"sha":"4203a5e9927a65629e0e2e24623f989ce809fdbf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestBrokerFactoryEventManager.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/39f1071085c02dfb4a4d94f1f508c2e82dc44cf7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestBrokerFactoryEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/39f1071085c02dfb4a4d94f1f508c2e82dc44cf7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestBrokerFactoryEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestBrokerFactoryEventManager.java?ref=39f1071085c02dfb4a4d94f1f508c2e82dc44cf7","patch":"@@ -0,0 +1,51 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.kernel;\r\n+\r\n+import javax.persistence.Persistence;\r\n+\r\n+import junit.framework.TestCase;\r\n+import org.apache.openjpa.event.BrokerFactoryListener;\r\n+import org.apache.openjpa.event.BrokerFactoryEvent;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+\r\n+public class TestBrokerFactoryEventManager\r\n+    extends TestCase {\r\n+\r\n+    public void testCreateEvent() {\r\n+        OpenJPAEntityManagerFactory emf = OpenJPAPersistence.cast(\r\n+            Persistence.createEntityManagerFactory(\"test\"));\r\n+        ListenerImpl listener = new ListenerImpl();\r\n+        emf.getConfiguration().getBrokerFactoryEventManager()\r\n+            .addListener(listener);\r\n+        emf.createEntityManager().close();\r\n+        assertTrue(listener.createEventReceived);\r\n+        emf.close();\r\n+    }\r\n+\r\n+    private class ListenerImpl implements BrokerFactoryListener {\r\n+\r\n+        boolean createEventReceived = false;\r\n+\r\n+        public void afterBrokerFactoryCreate(BrokerFactoryEvent event) {\r\n+            createEventReceived = true;\r\n+        }\r\n+    }\r\n+}\r"}]}

