{"sha":"3a2d50e0114aa180d9b2d31bde16ddf943f5c13a","node_id":"MDY6Q29tbWl0MjA2MzY0OjNhMmQ1MGUwMTE0YWExODBkOWIyZDMxYmRlMTZkZGY5NDNmNWMxM2E=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-06-27T20:59:01Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-06-27T20:59:01Z"},"message":"OPENJPA-1768: Check whether the broker is already loading before recursively loading an entity from datacache\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1140315 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"007a74c7888e06c3c34d7e90aec2bdcafb78f119","url":"https://api.github.com/repos/apache/openjpa/git/trees/007a74c7888e06c3c34d7e90aec2bdcafb78f119"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3a2d50e0114aa180d9b2d31bde16ddf943f5c13a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3a2d50e0114aa180d9b2d31bde16ddf943f5c13a","html_url":"https://github.com/apache/openjpa/commit/3a2d50e0114aa180d9b2d31bde16ddf943f5c13a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3a2d50e0114aa180d9b2d31bde16ddf943f5c13a/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"ba7f21fcf1c196d15080e7cd2b4c6e2b20ac5a5e","url":"https://api.github.com/repos/apache/openjpa/commits/ba7f21fcf1c196d15080e7cd2b4c6e2b20ac5a5e","html_url":"https://github.com/apache/openjpa/commit/ba7f21fcf1c196d15080e7cd2b4c6e2b20ac5a5e"}],"stats":{"total":108,"additions":79,"deletions":29},"files":[{"sha":"e149dafe46cab6966eb711333ce26d411d6f611e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/3a2d50e0114aa180d9b2d31bde16ddf943f5c13a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3a2d50e0114aa180d9b2d31bde16ddf943f5c13a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=3a2d50e0114aa180d9b2d31bde16ddf943f5c13a","patch":"@@ -1167,6 +1167,13 @@ protected StateManagerImpl initialize(StateManagerImpl sm, boolean load,\n         }\n     }\n \n+    public boolean isLoading(Object o) { \n+        if(_loading == null ) {\n+            return false; \n+        }\n+        return _loading.containsKey(o); \n+    }\n+\n     private boolean hasFlushed() {\n         return (_flags & FLAG_FLUSHED) != 0;\n     }"},{"sha":"191d6228805c5e690a7b95c2ffd2a4cb288d6495","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/3a2d50e0114aa180d9b2d31bde16ddf943f5c13a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3a2d50e0114aa180d9b2d31bde16ddf943f5c13a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java?ref=3a2d50e0114aa180d9b2d31bde16ddf943f5c13a","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.kernel;\n \n import java.util.BitSet;\n+import java.util.Map;\n \n import org.apache.openjpa.datacache.DataCache;\n import org.apache.openjpa.meta.ClassMetaData;\n@@ -168,8 +169,13 @@ public void load(OpenJPAStateManager sm, BitSet fields,\n                 continue;\n \n             fmd = sm.getMetaData().getField(i);\n-            if (!isLoaded(i))\n+            boolean loading = false; \n+            if(sm.getContext() != null && sm.getContext() instanceof BrokerImpl) { \n+                loading = ((BrokerImpl) sm.getContext()).isLoading(sm.getObjectId());\n+            }\n+            if (!isLoaded(i) || loading) { // prevent reentrant calls. \n                 loadIntermediate(sm, fmd);\n+            }\n             else {\n                 loadField(sm, fmd, fetch, context);\n                 loadImplData(sm, fmd);"},{"sha":"63864f9ccf4ec4b73a69fe2b9286bf707add8160","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestM2MInDataCache.java","status":"modified","additions":65,"deletions":28,"changes":93,"blob_url":"https://github.com/apache/openjpa/blob/3a2d50e0114aa180d9b2d31bde16ddf943f5c13a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestM2MInDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/3a2d50e0114aa180d9b2d31bde16ddf943f5c13a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestM2MInDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestM2MInDataCache.java?ref=3a2d50e0114aa180d9b2d31bde16ddf943f5c13a","patch":"@@ -18,29 +18,22 @@\n  */\n package org.apache.openjpa.persistence.datacache;\n \n-import java.util.Map;\n-\n import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.openjpa.persistence.datacache.common.apps.M2MEntityE;\n import org.apache.openjpa.persistence.datacache.common.apps.M2MEntityF;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n public class TestM2MInDataCache extends SingleEMFTestCase {\n     public void setUp() {\n-        setUp(\"openjpa.DataCache\", \"true\", \n-            \"openjpa.RemoteCommitProvider\", \"sjvm\", \n-            M2MEntityE.class,\n-            M2MEntityF.class, CLEAR_TABLES);\n+        setUp(\"openjpa.DataCache\", \"true\", \"openjpa.RemoteCommitProvider\", \"sjvm\", M2MEntityE.class, M2MEntityF.class,\n+            CLEAR_TABLES);\n     }\n \n-    /**\n-     * Test if child list is in order after new child list is added in setup().\n-     *\n-     */\n-    public void testM2MDataCache(){\n-    \tEntityManager em = emf.createEntityManager();\n+    public void populate(EntityManager em) {\n         em.getTransaction().begin();\n-\n         M2MEntityE e1 = new M2MEntityE();\n         e1.setId(1);\n         e1.setName(\"ABC\");\n@@ -49,39 +42,83 @@ public void testM2MDataCache(){\n         e2.setId(2);\n         e2.setName(\"DEF\");\n         em.persist(e2);\n-        \n+\n         M2MEntityF f1 = new M2MEntityF();\n         f1.setId(10);\n         em.persist(f1);\n         M2MEntityF f2 = new M2MEntityF();\n         f2.setId(20);\n         em.persist(f2);\n-        \n+\n         e1.getEntityF().put(f1.getId(), f1);\n         e1.getEntityF().put(f2.getId(), f2);\n         e2.getEntityF().put(f1.getId(), f1);\n         e2.getEntityF().put(f2.getId(), f2);\n-        \n+\n         f1.getEntityE().put(e1.getName(), e1);\n         f1.getEntityE().put(e2.getName(), e2);\n         f2.getEntityE().put(e1.getName(), e1);\n         f2.getEntityE().put(e2.getName(), e2);\n         em.getTransaction().commit();\n+    }\n+\n+    public void validateGraph(M2MEntityE e1, M2MEntityE e2, M2MEntityF f1, M2MEntityF f2) {\n+        assertNotNull(e1);\n+        assertNotNull(e2);\n+        assertNotNull(f1);\n+        assertNotNull(f2);\n+\n+        assertEquals(f1, e1.getEntityF().get(f1.getId()));\n+        assertEquals(f2, e1.getEntityF().get(f2.getId()));\n+        assertEquals(f1, e2.getEntityF().get(f1.getId()));\n+        assertEquals(f2, e2.getEntityF().get(f2.getId()));\n+\n+        assertEquals(e1, f1.getEntityE().get(e1.getName()));\n+        assertEquals(e2, f1.getEntityE().get(e2.getName()));\n+        assertEquals(e1, f2.getEntityE().get(e1.getName()));\n+        assertEquals(e2, f2.getEntityE().get(e2.getName()));\n+    }\n+\n+    /**\n+     * Test if child list is in order after new child list is added in setup().\n+     * \n+     */\n+    public void testM2MDataCache() {\n+        EntityManager em = emf.createEntityManager();\n+        populate(em);\n         em.close();\n \n         em = emf.createEntityManager();\n-        try {\n-            M2MEntityE e1a = em.find(M2MEntityE.class, 1);\n-            Map entityf1 = e1a.getEntityF();\n-            M2MEntityE e2a = em.find(M2MEntityE.class, 2);\n-            Map entityf2 = e2a.getEntityF();\n-            M2MEntityF f1a = em.find(M2MEntityF.class, 10);\n-            Map entitye1 = f1a.getEntityE();\n-            M2MEntityF f2a = em.find(M2MEntityF.class, 20);\n-            Map entitye2 = f2a.getEntityE();\n-        } catch (Exception e) {\n-            fail(\"Fail to get a Map field when DataCache is on\");\n-        }\n+        M2MEntityE e1a = em.find(M2MEntityE.class, 1);\n+        assertNotNull(e1a.getEntityF());\n+        M2MEntityE e2a = em.find(M2MEntityE.class, 2);\n+        assertNotNull(e2a.getEntityF());\n+        M2MEntityF f1a = em.find(M2MEntityF.class, 10);\n+        assertNotNull(f1a.getEntityE());\n+        M2MEntityF f2a = em.find(M2MEntityF.class, 20);\n+        assertNotNull(f2a.getEntityE());\n+        em.close();\n+    }\n+\n+    public void testEagerFetch() {\n+        EntityManager em = emf.createEntityManager();\n+        populate(em);\n         em.close();\n+\n+        em = emf.createEntityManager();\n+\n+        OpenJPAEntityManager ojEm = OpenJPAPersistence.cast(em);\n+        ojEm.getFetchPlan().addField(M2MEntityE.class, \"entityf\");\n+        ojEm.getFetchPlan().addField(M2MEntityF.class, \"entitye\");\n+\n+        M2MEntityE e1, e2;\n+        M2MEntityF f1, f2;\n+\n+        e1 = em.find(M2MEntityE.class, 1);\n+        e2 = em.find(M2MEntityE.class, 2);\n+        f1 = em.find(M2MEntityF.class, 10);\n+        f2 = em.find(M2MEntityF.class, 20);\n+\n+        validateGraph(e1, e2, f1, f2);\n     }\n }"}]}

