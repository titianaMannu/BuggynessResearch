{"sha":"3a5e61238d9e472053230df7a46e79f9ec3c3c37","node_id":"MDY6Q29tbWl0MjA2MzY0OjNhNWU2MTIzOGQ5ZTQ3MjA1MzIzMGRmN2E0NmU3OWY5ZWMzYzNjMzc=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-05-20T10:51:42Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-05-20T10:51:42Z"},"message":"OPENJPA-213\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@658197 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b4f0d4a7de3a40f89acbbf26cba1c347ba40ead2","url":"https://api.github.com/repos/apache/openjpa/git/trees/b4f0d4a7de3a40f89acbbf26cba1c347ba40ead2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3a5e61238d9e472053230df7a46e79f9ec3c3c37","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3a5e61238d9e472053230df7a46e79f9ec3c3c37","html_url":"https://github.com/apache/openjpa/commit/3a5e61238d9e472053230df7a46e79f9ec3c3c37","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3a5e61238d9e472053230df7a46e79f9ec3c3c37/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"8c756bf65566e8ed69794a03c10716b1c3d83350","url":"https://api.github.com/repos/apache/openjpa/commits/8c756bf65566e8ed69794a03c10716b1c3d83350","html_url":"https://github.com/apache/openjpa/commit/8c756bf65566e8ed69794a03c10716b1c3d83350"}],"stats":{"total":285,"additions":284,"deletions":1},"files":[{"sha":"3e8761dd0ae1688873c85d72b90533778c7c28af","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3a5e61238d9e472053230df7a46e79f9ec3c3c37/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/3a5e61238d9e472053230df7a46e79f9ec3c3c37/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=3a5e61238d9e472053230df7a46e79f9ec3c3c37","patch":"@@ -1499,7 +1499,7 @@ public int getJDBCType(int metaTypeCode, boolean lob) {\n             case JavaTypes.BIGDECIMAL:\n                 if (storeLargeNumbersAsStrings)\n                     return getPreferredType(Types.VARCHAR);\n-                return getPreferredType(Types.DOUBLE);\n+                return getPreferredType(Types.NUMERIC);\n             case JavaTypes.NUMBER:\n                 if (storeLargeNumbersAsStrings)\n                     return getPreferredType(Types.VARCHAR);"},{"sha":"f263867248a4d503002cde214d8189147034d151","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/PrecisionTestEntity.java","status":"added","additions":173,"deletions":0,"changes":173,"blob_url":"https://github.com/apache/openjpa/blob/3a5e61238d9e472053230df7a46e79f9ec3c3c37/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/PrecisionTestEntity.java","raw_url":"https://github.com/apache/openjpa/raw/3a5e61238d9e472053230df7a46e79f9ec3c3c37/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/PrecisionTestEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/PrecisionTestEntity.java?ref=3a5e61238d9e472053230df7a46e79f9ec3c3c37","patch":"@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.mapping;\n+\n+import java.math.BigDecimal;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class PrecisionTestEntity {\n+    @Id\n+    @GeneratedValue\n+    private int id;\n+    @Version\n+    private int version;\n+\n+    private double primDbl;\n+    private Double dbl;\n+    private BigDecimal bigDecimal;\n+\n+    @Column(precision = 10)\n+    private double primDblPrecis;\n+    @Column(precision = 10)\n+    private Double dblPrecis;\n+    @Column(precision = 10)\n+    private BigDecimal bigDecimalPrecis;\n+\n+    @Column(scale = 10)\n+    private double primDblScale;\n+    @Column(scale = 10)\n+    private Double dblScale;\n+    @Column(scale = 10)\n+    private BigDecimal bigDecimalScale;\n+\n+    @Column(precision = 10, scale = 10)\n+    private double primDblPrecisScale;\n+    @Column(precision = 10, scale = 10)\n+    private Double dblPrecisScale;\n+    @Column(precision = 10, scale = 10)\n+    private BigDecimal bigDecimalPrecisScale;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public double getPrimDbl() {\n+        return primDbl;\n+    }\n+\n+    public void setPrimDbl(double primDbl) {\n+        this.primDbl = primDbl;\n+    }\n+\n+    public Double getDbl() {\n+        return dbl;\n+    }\n+\n+    public void setDbl(Double dbl) {\n+        this.dbl = dbl;\n+    }\n+\n+    public BigDecimal getBigDecimal() {\n+        return bigDecimal;\n+    }\n+\n+    public void setBigDecimal(BigDecimal bigDecimal) {\n+        this.bigDecimal = bigDecimal;\n+    }\n+\n+    public double getPrimDblPrecis() {\n+        return primDblPrecis;\n+    }\n+\n+    public void setPrimDblPrecis(double primDblPrecis) {\n+        this.primDblPrecis = primDblPrecis;\n+    }\n+\n+    public Double getDblPrecis() {\n+        return dblPrecis;\n+    }\n+\n+    public void setDblPrecis(Double dblPrecis) {\n+        this.dblPrecis = dblPrecis;\n+    }\n+\n+    public BigDecimal getBigDecimalPrecis() {\n+        return bigDecimalPrecis;\n+    }\n+\n+    public void setBigDecimalPrecis(BigDecimal bigDecimalPrecis) {\n+        this.bigDecimalPrecis = bigDecimalPrecis;\n+    }\n+\n+    public double getPrimDblScale() {\n+        return primDblScale;\n+    }\n+\n+    public void setPrimDblScale(double primDblScale) {\n+        this.primDblScale = primDblScale;\n+    }\n+\n+    public Double getDblScale() {\n+        return dblScale;\n+    }\n+\n+    public void setDblScale(Double dblScale) {\n+        this.dblScale = dblScale;\n+    }\n+\n+    public BigDecimal getBigDecimalScale() {\n+        return bigDecimalScale;\n+    }\n+\n+    public void setBigDecimalScale(BigDecimal bigDecimalScale) {\n+        this.bigDecimalScale = bigDecimalScale;\n+    }\n+\n+    public double getPrimDblPrecisScale() {\n+        return primDblPrecisScale;\n+    }\n+\n+    public void setPrimDblPrecisScale(double primDblPrecisScale) {\n+        this.primDblPrecisScale = primDblPrecisScale;\n+    }\n+\n+    public Double getDblPrecisScale() {\n+        return dblPrecisScale;\n+    }\n+\n+    public void setDblPrecisScale(Double dblPrecisScale) {\n+        this.dblPrecisScale = dblPrecisScale;\n+    }\n+\n+    public BigDecimal getBigDecimalPrecisScale() {\n+        return bigDecimalPrecisScale;\n+    }\n+\n+    public void setBigDecimalPrecisScale(BigDecimal bigDecimalPrecisScale) {\n+        this.bigDecimalPrecisScale = bigDecimalPrecisScale;\n+    }\n+}"},{"sha":"64a9a5776f0961a937709e0942406c6f7c94001a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestPrecisionMapping.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/3a5e61238d9e472053230df7a46e79f9ec3c3c37/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestPrecisionMapping.java","raw_url":"https://github.com/apache/openjpa/raw/3a5e61238d9e472053230df7a46e79f9ec3c3c37/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestPrecisionMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestPrecisionMapping.java?ref=3a5e61238d9e472053230df7a46e79f9ec3c3c37","patch":"@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.mapping;\n+\n+import java.sql.Types;\n+\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestPrecisionMapping extends SingleEMFTestCase {\n+    \n+    private static final String[] _DOUBLE_FIELDS =\n+            { \"primDbl\", \"dbl\" };\n+    private static final String _BIG_DECIMAL_FIELD = \"bigDecimal\";\n+    \n+    public void setUp() { \n+        setUp(PrecisionTestEntity.class);\n+    }\n+    \n+    public void testUnspecified() {\n+        testDoubleMapping(\"\", Types.DOUBLE,0,0);\n+        testBigDecimalMapping(\"\", Types.NUMERIC, 0, 0);\n+    }\n+    \n+    public void testPrecisionOnly() { \n+        // testDoubleMapping(\"Precis\", Types.NUMERIC, 10, 0);\n+        testBigDecimalMapping(\"Precis\", Types.NUMERIC, 10, 0);\n+    }\n+    \n+    public void testScaleOnly() { \n+        // testDoubleMapping(\"Scale\", Types.NUMERIC, 0 , 10);\n+        testBigDecimalMapping(\"Scale\", Types.NUMERIC, 0, 10);\n+    }\n+    \n+    public void testPrecisionAndScale() { \n+//        testDoubleMapping(\"PrecisScale\", Types.NUMERIC,10,10);\n+        testBigDecimalMapping(\"PrecisScale\", Types.NUMERIC, 10, 10);\n+    }\n+    \n+    private void testBigDecimalMapping(String fieldSuffix, int expectedType,\n+            int expectedPrecision, int expectedScale) {\n+        ClassMapping mapping = getMapping(PrecisionTestEntity.class);\n+        FieldMapping fm =\n+                mapping.getFieldMapping(_BIG_DECIMAL_FIELD + fieldSuffix);\n+\n+        Column[] cols = fm.getColumns();\n+        assertEquals(1, cols.length);\n+        assertEquals(expectedType, cols[0].getType());\n+        assertEquals(expectedPrecision, cols[0].getSize());\n+        assertEquals(expectedScale, cols[0].getDecimalDigits());\n+    }\n+    \n+    private void testDoubleMapping(String fieldSuffix, int expectedType,\n+            int expectedPrecision, int expectedScale) {\n+        ClassMapping mapping = getMapping(PrecisionTestEntity.class);\n+        FieldMapping fm; \n+        \n+        for(String s : _DOUBLE_FIELDS) {\n+            fm = mapping.getFieldMapping(s + fieldSuffix);\n+            \n+            Column[] cols = fm.getColumns();\n+            assertEquals(1, cols.length);\n+            assertEquals(expectedType ,cols[0].getType()); \n+            assertEquals(expectedPrecision, cols[0].getSize());\n+            assertEquals(expectedScale, cols[0].getDecimalDigits());\n+        }\n+    }\n+    \n+}"},{"sha":"168c6dc6f4d47e7b2dc5a5347ebe520e594ad059","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/3a5e61238d9e472053230df7a46e79f9ec3c3c37/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/3a5e61238d9e472053230df7a46e79f9ec3c3c37/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java?ref=3a5e61238d9e472053230df7a46e79f9ec3c3c37","patch":"@@ -68,9 +68,32 @@ public void tearDown() throws Exception {\n         }\n     }\n     \n+    /**\n+     * Get the class mapping for a given entity\n+     * \n+     * @param name\n+     *            The Entity's name.\n+     * \n+     * @return If the entity is a known type the ClassMapping for the Entity\n+     *         will be returned. Otherwise null\n+     */\n     protected ClassMapping getMapping(String name) {\n         return (ClassMapping) emf.getConfiguration()\n                 .getMetaDataRepositoryInstance().getMetaData(name,\n                         getClass().getClassLoader(), true);\n     }\n+    \n+    /**\n+     * Get the class mapping for a given entity\n+     * \n+     * @param entityClass an entity class.\n+     * \n+     * @return If the entity is a known type the ClassMapping for the Entity\n+     *         will be returned. Otherwise null\n+     */\n+    protected ClassMapping getMapping(Class<?> entityClass) {\n+        return (ClassMapping) emf.getConfiguration()\n+                .getMetaDataRepositoryInstance().getMetaData(entityClass,\n+                        getClass().getClassLoader(), true);\n+    }\n }"}]}

