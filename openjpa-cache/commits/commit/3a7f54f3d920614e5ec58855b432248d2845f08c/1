{"sha":"3a7f54f3d920614e5ec58855b432248d2845f08c","node_id":"MDY6Q29tbWl0MjA2MzY0OjNhN2Y1NGYzZDkyMDYxNGU1ZWM1ODg1NWI0MzIyNDhkMjg0NWYwOGM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-25T19:32:22Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-25T19:32:22Z"},"message":"OPENJPA-245\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@615313 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9a8088e0437e9d42c8c46f894c273c63bb989beb","url":"https://api.github.com/repos/apache/openjpa/git/trees/9a8088e0437e9d42c8c46f894c273c63bb989beb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3a7f54f3d920614e5ec58855b432248d2845f08c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3a7f54f3d920614e5ec58855b432248d2845f08c","html_url":"https://github.com/apache/openjpa/commit/3a7f54f3d920614e5ec58855b432248d2845f08c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3a7f54f3d920614e5ec58855b432248d2845f08c/comments","author":null,"committer":null,"parents":[{"sha":"72db5680fa7a9954cd1ba5e6d8d90ca265c0e20d","url":"https://api.github.com/repos/apache/openjpa/commits/72db5680fa7a9954cd1ba5e6d8d90ca265c0e20d","html_url":"https://github.com/apache/openjpa/commit/72db5680fa7a9954cd1ba5e6d8d90ca265c0e20d"}],"stats":{"total":64,"additions":33,"deletions":31},"files":[{"sha":"a1e7b873c17cedb6d1352fc219e4ee43f9f81cbd","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java","status":"modified","additions":1,"deletions":31,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/3a7f54f3d920614e5ec58855b432248d2845f08c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java","raw_url":"https://github.com/apache/openjpa/raw/3a7f54f3d920614e5ec58855b432248d2845f08c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java?ref=3a7f54f3d920614e5ec58855b432248d2845f08c","patch":"@@ -98,11 +98,7 @@ public Object attach(Object pc) {\n \n         CallbackException excep = null;\n         try {\n-            PersistenceCapable into = findFromDatabase(pc);\n-            OpenJPAStateManager owner = (into == null) ? null\n-                    : (OpenJPAStateManager) into.pcGetStateManager();\n-            return attach(pc, into, owner, null, true);\n-\n+            return attach(pc, null, null, null, true);\n         } catch (CallbackException ce) {\n             excep = ce;\n             return null; // won't be reached as the exceps will be rethrown\n@@ -339,30 +335,4 @@ StateManagerImpl assertManaged(Object obj) {\n                 Exceptions.toString(obj))).setFailedObject (obj);\n \t\treturn sm;\n \t}\n-\n-    /**\n-     * Find a PersistenceCapable instance of an Object if it exists in the \n-     * database. If the object is null or can't be found in the database.  \n-     *  \n-     * @param pc An object which will be attached into the current context. The \n-     * object may or may not correspond to a row in the database. \n-     * \n-     * @return If the object is null or can't be found in the database this \n-     * method returns null. Otherwise a PersistenceCapable representation of the\n-     * object is returned.\n-     */\n-    protected PersistenceCapable findFromDatabase(Object pc) {\n-        PersistenceCapable rval = null;\n-\n-        if (pc != null) {\n-            Object oid = _broker.newObjectId(pc.getClass(),\n-                    getDetachedObjectId(pc));\n-\n-            if (oid != null) {\n-                rval = ImplHelper.toPersistenceCapable(_broker.find(oid, true,\n-                        null), getBroker().getConfiguration());\n-            }\n-        }\n-        return rval;\n-    }\n }"},{"sha":"b41f63c44b91f978da49862b0b8172ebcf32fe0c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","status":"modified","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/3a7f54f3d920614e5ec58855b432248d2845f08c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/3a7f54f3d920614e5ec58855b432248d2845f08c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java?ref=3a7f54f3d920614e5ec58855b432248d2845f08c","patch":"@@ -68,6 +68,13 @@ protected void provideField(Object toAttach, StateManagerImpl sm,\n     public Object attach(AttachManager manager, Object toAttach,\n         ClassMetaData meta, PersistenceCapable into, OpenJPAStateManager owner,\n         ValueMetaData ownerMeta, boolean explicit) {\n+\n+        // VersionAttachStrategy is invoked in the case where no more\n+        // intelligent strategy could be found; let's be more lenient\n+        // about new vs. detached record determination.\n+        if (into == null)\n+            into = findFromDatabase(manager, toAttach);\n+\n         BrokerImpl broker = manager.getBroker();\n         PersistenceCapable pc = ImplHelper.toPersistenceCapable(toAttach,\n             meta.getRepository().getConfiguration());\n@@ -342,4 +349,29 @@ private Map attachInPlace(AttachManager manager, StateManagerImpl sm,\n         }\n         return (copy == null) ? map : copy;\n \t}\n+\n+    /**\n+     * Find a PersistenceCapable instance of an Object if it exists in the\n+     * database. If the object is null or can't be found in the database.\n+     *\n+     * @param pc An object which will be attached into the current context. The\n+     * object may or may not correspond to a row in the database.\n+     *\n+     * @return If the object is null or can't be found in the database this\n+     * method returns null. Otherwise a PersistenceCapable representation of the\n+     * object is returned.\n+     */\n+    protected PersistenceCapable findFromDatabase(AttachManager manager,\n+        Object pc) {\n+        Object oid = manager.getBroker().newObjectId(pc.getClass(),\n+            manager.getDetachedObjectId(pc));\n+\n+        if (oid != null) {\n+            return ImplHelper.toPersistenceCapable(\n+                manager.getBroker().find(oid, true, null),\n+                manager.getBroker().getConfiguration());\n+        } else {\n+            return null;\n+        }\n+    }\n }"}]}

