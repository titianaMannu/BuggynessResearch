{"sha":"3adf70a029dadfe5e5a5765b02f04c89af149244","node_id":"MDY6Q29tbWl0MjA2MzY0OjNhZGY3MGEwMjlkYWRmZTVlNWE1NzY1YjAyZjA0Yzg5YWYxNDkyNDQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-02-12T18:56:08Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-02-12T18:56:08Z"},"message":"OPENJPA-917 add testcases contributed by B.J. Reed. Changes to QueryImpl were already made in OPENJPA-900 svn rev 743396\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@743836 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8f2c4de3391c2d446c0244e9252269ba47cdf625","url":"https://api.github.com/repos/apache/openjpa/git/trees/8f2c4de3391c2d446c0244e9252269ba47cdf625"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3adf70a029dadfe5e5a5765b02f04c89af149244","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3adf70a029dadfe5e5a5765b02f04c89af149244","html_url":"https://github.com/apache/openjpa/commit/3adf70a029dadfe5e5a5765b02f04c89af149244","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3adf70a029dadfe5e5a5765b02f04c89af149244/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"7d0452763ae5b3abb09ac03a78dd146c33a7029f","url":"https://api.github.com/repos/apache/openjpa/commits/7d0452763ae5b3abb09ac03a78dd146c33a7029f","html_url":"https://github.com/apache/openjpa/commit/7d0452763ae5b3abb09ac03a78dd146c33a7029f"}],"stats":{"total":269,"additions":269,"deletions":0},"files":[{"sha":"636f14afd0129814b50f991b78e1edc4dbd3ec02","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryProcedures.java","status":"added","additions":168,"deletions":0,"changes":168,"blob_url":"https://github.com/apache/openjpa/blob/3adf70a029dadfe5e5a5765b02f04c89af149244/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryProcedures.java","raw_url":"https://github.com/apache/openjpa/raw/3adf70a029dadfe5e5a5765b02f04c89af149244/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryProcedures.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryProcedures.java?ref=3adf70a029dadfe5e5a5765b02f04c89af149244","patch":"@@ -0,0 +1,168 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.query;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DerbyDictionary;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.jdbc.query.domain.Applicant;\n+import org.apache.openjpa.persistence.jdbc.query.procedure.DerbyProcedureList;\n+import org.apache.openjpa.persistence.jdbc.query.procedure.ProcedureList;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Tests that Native queries use only 1-based positional parameters and \n+ * disallows named parameters.\n+ * \n+ * Originally reported in \n+ * <A HRE=\"http://issues.apache.org/jira/browse/OPENJPA-112>OPENJPA-112</A>\n+ *  \n+ * @author B.J. Reed\n+ *\n+ */\n+public class TestNativeQueryProcedures extends SingleEMFTestCase {\n+    ProcedureList procedureList = null;\n+    \n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp(Applicant.class, CLEAR_TABLES);\n+\n+        // Figure out which DB we have and get the proper DB Procedure List\n+        OpenJPAEntityManagerFactorySPI ojpaEmf = \n+            (OpenJPAEntityManagerFactorySPI) emf;\n+        JDBCConfiguration conf = (JDBCConfiguration) ojpaEmf.getConfiguration();\n+        \n+        if (conf.getDBDictionaryInstance() instanceof DerbyDictionary) {\n+            procedureList = new DerbyProcedureList();\n+        }\n+\n+        if (procedureList != null) {\n+            EntityManager em = emf.createEntityManager();\n+            List<String> createList = procedureList.getCreateProcedureList();\n+            try {\n+                for (String createProcedure : createList) {\n+                    em.getTransaction().begin();\n+                    Query query = em.createNativeQuery(createProcedure);\n+                    query.executeUpdate();\n+                    em.getTransaction().commit();\n+                }\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+                em.getTransaction().commit();\n+            }\n+            em.clear();\n+            em.close();\n+        }\n+    }\n+\n+    public void tearDown() throws Exception {\n+        if (procedureList != null) {\n+            EntityManager em = emf.createEntityManager();\n+            List<String> dropList = procedureList.getDropProcedureList();\n+            try {\n+                for (String dropProcedure : dropList) {\n+                    em.getTransaction().begin();\n+                    Query query = em.createNativeQuery(dropProcedure);\n+                    query.executeUpdate();\n+                    em.getTransaction().commit();\n+                }\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+                em.getTransaction().commit();\n+            }\n+            em.clear();\n+            em.close();\n+        }\n+        super.tearDown();\n+    }\n+    \n+    public void testNoReturnNoParamProcedure() {\n+        if (procedureList != null) {\n+            EntityManager em = emf.createEntityManager();\n+\n+            Applicant applicant1 = new Applicant();\n+            applicant1.setName(\"Charlie\");\n+            Applicant applicant2 = new Applicant();\n+            applicant2.setName(\"Snoopy\");\n+\n+            em.getTransaction().begin();\n+            em.persist(applicant1);\n+            em.persist(applicant2);\n+            em.getTransaction().commit();\n+\n+            String sql = procedureList.callAddXToCharlie();\n+\n+            // query.getSingleResult() and query.getResultList() both throw an\n+            // exception: Statement.executeQuery() cannot be called with a\n+            // statement that returns a row count\n+            try {\n+                em.getTransaction().begin();\n+                Query query = em.createNativeQuery(sql);\n+                query.getSingleResult();\n+                em.getTransaction().commit();\n+                fail(\"Expected exception. getSingleResult() with no returns \"+ \n+                    \"should fail.\");\n+            } catch (Exception e) {\n+                //Expected exception\n+                em.getTransaction().rollback();\n+            }\n+            try {\n+                em.getTransaction().begin();\n+                Query query = em.createNativeQuery(sql);\n+                query.getResultList();\n+                em.getTransaction().commit();\n+                fail(\"Expected exception. getResultList() with no returns \" + \n+                    \"should fail.\");\n+            } catch (Exception e) {\n+                //Expected exception\n+                em.getTransaction().rollback();\n+            }\n+\n+            // This one should work properly\n+            try {\n+                em.getTransaction().begin();\n+                Query query = em.createNativeQuery(sql);\n+                query.executeUpdate();\n+                em.getTransaction().commit();\n+            } catch (Exception e) {\n+                fail(\"Caught unexpected exception executing stored procedure: \"\n+                    + e.getMessage());\n+                em.getTransaction().commit();\n+            }\n+        \n+            em.clear();\n+            em.close();\n+            em = emf.createEntityManager();\n+            applicant1 = em.find(Applicant.class, applicant1.getId());\n+            applicant2 = em.find(Applicant.class, applicant2.getId());\n+\n+            // verify one changed and one didn't\n+            assertEquals(\"Charliex\", applicant1.getName());\n+            assertEquals(\"Snoopy\", applicant2.getName());\n+        \n+            em.clear();\n+            em.close();\n+        }\n+    }\n+}\n\\ No newline at end of file"},{"sha":"2035a5b8aa1266ead70c7347cdd0e283864de52d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/procedure/DerbyProcedureList.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/3adf70a029dadfe5e5a5765b02f04c89af149244/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/procedure/DerbyProcedureList.java","raw_url":"https://github.com/apache/openjpa/raw/3adf70a029dadfe5e5a5765b02f04c89af149244/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/procedure/DerbyProcedureList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/procedure/DerbyProcedureList.java?ref=3adf70a029dadfe5e5a5765b02f04c89af149244","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.query.procedure;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/*\n+ * holds the stored procedures that will be used by test cases\n+ */\n+public class DerbyProcedureList extends ProcedureList {\n+\n+    public List<String> getCreateProcedureList () {\n+        ArrayList<String> retList = new ArrayList<String>();\n+\n+        retList.add (\"create procedure ADD_X_TO_CHARLIE () \" +\n+                     \"PARAMETER STYLE JAVA LANGUAGE JAVA MODIFIES SQL DATA \" +\n+                     \"EXTERNAL NAME 'org.apache.openjpa.persistence.jdbc.query.procedure.DerbyProcedureList.addXToCharlie'\");\n+\n+        return retList;\n+    }\n+\n+    public List<String> getDropProcedureList () {\n+        ArrayList<String> retList = new ArrayList<String>();\n+\n+        retList.add (\"drop procedure ADD_X_TO_CHARLIE\");\n+\n+        return retList;\n+    }\n+\n+    public String callAddXToCharlie () {\n+        return \"{ call ADD_X_TO_CHARLIE () }\";\n+    }\n+\n+    public static void addXToCharlie () throws Exception {\n+        Connection conn = DriverManager.getConnection(\"jdbc:default:connection\");\n+        PreparedStatement ps1 = conn.prepareStatement(\"update APPLICANT set name = 'Charliex' where name = 'Charlie'\");\n+        ps1.executeUpdate();\n+\n+        conn.close();\n+    }\n+}"},{"sha":"ac62bc03a61463360a2cf2cb3eee62093e9da839","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/procedure/ProcedureList.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/3adf70a029dadfe5e5a5765b02f04c89af149244/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/procedure/ProcedureList.java","raw_url":"https://github.com/apache/openjpa/raw/3adf70a029dadfe5e5a5765b02f04c89af149244/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/procedure/ProcedureList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/procedure/ProcedureList.java?ref=3adf70a029dadfe5e5a5765b02f04c89af149244","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.query.procedure;\n+\n+import java.util.List;\n+\n+/*\n+ * holds the stored procedures that will be used by test cases\n+ */\n+public abstract class ProcedureList {\n+\n+    abstract public List<String> getCreateProcedureList ();\n+\n+    abstract public List<String> getDropProcedureList ();\n+\n+    abstract public String callAddXToCharlie ();\n+\n+    // This method should also be overriden, but it needs to be static so \n+    // that it can be called as a stored procedure\n+    public static void addXToCharlie () throws Exception {\n+        Exception e = new Exception (\"Method not implemented by inheriting class\");\n+        throw e;\n+    }\n+}"}]}

