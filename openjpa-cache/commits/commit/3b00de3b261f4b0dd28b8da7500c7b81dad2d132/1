{"sha":"3b00de3b261f4b0dd28b8da7500c7b81dad2d132","node_id":"MDY6Q29tbWl0MjA2MzY0OjNiMDBkZTNiMjYxZjRiMGRkMjhiOGRhNzUwMGM3YjgxZGFkMmQxMzI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-05T07:23:41Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-05T07:23:41Z"},"message":"OPENJPA-665: Check for null constraint on insert and update\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@682610 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7b12923112bd7880987c7c38acb869da91d9a3c5","url":"https://api.github.com/repos/apache/openjpa/git/trees/7b12923112bd7880987c7c38acb869da91d9a3c5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3b00de3b261f4b0dd28b8da7500c7b81dad2d132","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3b00de3b261f4b0dd28b8da7500c7b81dad2d132","html_url":"https://github.com/apache/openjpa/commit/3b00de3b261f4b0dd28b8da7500c7b81dad2d132","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3b00de3b261f4b0dd28b8da7500c7b81dad2d132/comments","author":null,"committer":null,"parents":[{"sha":"b683569de095f7e9d24606816f5d09d88e12f3e2","url":"https://api.github.com/repos/apache/openjpa/commits/b683569de095f7e9d24606816f5d09d88e12f3e2","html_url":"https://github.com/apache/openjpa/commit/b683569de095f7e9d24606816f5d09d88e12f3e2"}],"stats":{"total":223,"additions":187,"deletions":36},"files":[{"sha":"1b82463902dd1a19b69e710bb451bdc68f403ed4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","status":"modified","additions":17,"deletions":8,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/3b00de3b261f4b0dd28b8da7500c7b81dad2d132/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/3b00de3b261f4b0dd28b8da7500c7b81dad2d132/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java?ref=3b00de3b261f4b0dd28b8da7500c7b81dad2d132","patch":"@@ -42,6 +42,7 @@\n import org.apache.openjpa.meta.ValueStrategies;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.MetaDataException;\n+import org.apache.openjpa.util.UserException;\n \n /**\n  * Mapping for a single-valued field that delegates to a {@link ValueHandler}.\n@@ -122,19 +123,27 @@ else if (_cols.length == 1)\n     public void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         throws SQLException {\n         Row row = field.getRow(sm, store, rm, Row.ACTION_INSERT);\n-        if (row != null)\n-            HandlerStrategies.set(field, sm.fetch(field.getIndex()), store,\n-                row, _cols, _io, field.getNullValue() ==\n-                FieldMapping.NULL_NONE);\n+        if (row != null) {\n+            Object value = sm.fetch(field.getIndex());\n+            if (!HandlerStrategies.set(field, value, store, row, _cols, _io, \n+            \tfield.getNullValue() == FieldMapping.NULL_NONE))\n+            \tif (field.getValueStrategy() != ValueStrategies.AUTOASSIGN)\n+            \t\tthrow new UserException(_loc.get(\"cant-set-value\", \n+            \t\t\t\trow.getFailedObject(), field, value));\n+        }\n     }\n \n     public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         throws SQLException {\n         Row row = field.getRow(sm, store, rm, Row.ACTION_UPDATE);\n-        if (row != null)\n-            HandlerStrategies.set(field, sm.fetch(field.getIndex()), store,\n-                row, _cols, _io, field.getNullValue() ==\n-                FieldMapping.NULL_NONE);\n+        if (row != null){\n+            Object value = sm.fetch(field.getIndex());\n+            if (!HandlerStrategies.set(field, value, store, row, _cols, _io,\n+                 field.getNullValue() == FieldMapping.NULL_NONE)) \n+            \tif (field.getValueStrategy() != ValueStrategies.AUTOASSIGN)\n+            \tthrow new UserException(_loc.get(\"cant-set-value\", \n+            \t\t\trow.getFailedObject(), field, value));\n+        }\n     }\n \n     public void delete(OpenJPAStateManager sm, JDBCStore store, RowManager rm)"},{"sha":"12f04c3752ca424fa2453185af23d749cff88e57","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java","status":"modified","additions":19,"deletions":7,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/3b00de3b261f4b0dd28b8da7500c7b81dad2d132/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java","raw_url":"https://github.com/apache/openjpa/raw/3b00de3b261f4b0dd28b8da7500c7b81dad2d132/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java?ref=3b00de3b261f4b0dd28b8da7500c7b81dad2d132","patch":"@@ -23,6 +23,7 @@\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.RelationId;\n import org.apache.openjpa.jdbc.meta.ValueHandler;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n@@ -35,6 +36,7 @@\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.InvalidStateException;\n+import org.apache.openjpa.util.UserException;\n \n /**\n  * Utility methods for strategies using value handlers.\n@@ -78,28 +80,38 @@\n \n     /**\n      * Set the given value into the given row.\n+     * Return false if the given value can not be set, for example, due to \n+     * null constraints on the columns. \n      */\n-    public static void set(ValueMapping vm, Object val, JDBCStore store,\n+    public static boolean set(ValueMapping vm, Object val, JDBCStore store,\n         Row row, Column[] cols, ColumnIO io, boolean nullNone)\n         throws SQLException {\n         if (!canSetAny(row, io, cols))\n-            return;\n+            return false;\n \n         ValueHandler handler = vm.getHandler();\n         val = handler.toDataStoreValue(vm, val, store);\n+        boolean isSet = false;\n         if (val == null) {\n             for (int i = 0; i < cols.length; i++)\n-                if (canSet(row, io, i, true))\n+                if (canSet(row, io, i, true)) {\n+                    isSet = true;\n                     set(row, cols[i], null, handler, nullNone);\n+                }\n         } else if (cols.length == 1) {\n-            if (canSet(row, io, 0, val == null))\n+            if (canSet(row, io, 0, val == null)) {\n+                isSet = true;\n                 set(row, cols[0], val, handler, nullNone);\n+            }\n         } else {\n             Object[] vals = (Object[]) val;\n             for (int i = 0; i < vals.length; i++)\n-                if (canSet(row, io, i, vals[i] == null))\n+                if (canSet(row, io, i, vals[i] == null)) {\n+                    isSet = true;\n                     set(row, cols[i], vals[i], handler, nullNone);\n+                }\n         }\n+        return isSet;\n     }\n \n     /**\n@@ -108,9 +120,9 @@ public static void set(ValueMapping vm, Object val, JDBCStore store,\n     private static boolean canSet(Row row, ColumnIO io, int i,\n         boolean nullValue) {\n         if (row.getAction() == Row.ACTION_INSERT)\n-            return io.isInsertable(i, nullValue);\n+        \treturn io.isInsertable(i, nullValue);\n         if (row.getAction() == Row.ACTION_UPDATE)\n-            return io.isUpdatable(i, nullValue);\n+        \treturn io.isUpdatable(i, nullValue);\n         return true;\n     }\n "},{"sha":"f441b19ffad5808b066836b021eed7e702594c40","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/3b00de3b261f4b0dd28b8da7500c7b81dad2d132/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/3b00de3b261f4b0dd28b8da7500c7b81dad2d132/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties?ref=3b00de3b261f4b0dd28b8da7500c7b81dad2d132","patch":"@@ -136,3 +136,4 @@ unmapped-datastore-value: Instances of type \"{0}\" are not valid query \\\n \tparameters because the type is not mapped.\n cache-hit: SQL Cache hit with key: {0} in {1}\n cache-missed: SQL Cache missed with key: {0} in {1}\n+cant-set-value: Field \"{1}\" of \"{0}\" can not be set to \"{2}\" value."},{"sha":"cc9b2dc7558f1328098f1ed178fcd305d62a9927","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/BlobValue.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/3b00de3b261f4b0dd28b8da7500c7b81dad2d132/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/BlobValue.java","raw_url":"https://github.com/apache/openjpa/raw/3b00de3b261f4b0dd28b8da7500c7b81dad2d132/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/BlobValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/BlobValue.java?ref=3b00de3b261f4b0dd28b8da7500c7b81dad2d132","patch":"@@ -0,0 +1,33 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.nullity;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+/**\r\n+ * Simple serializable entity for testing null constraint on field values.\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+public class BlobValue implements Serializable {\r\n+    private String  strVal;\r\n+    private int     intVal;\r\n+    private byte[]  bytes;\r\n+}\r"},{"sha":"0c397991595830137891ac4eccaf13dca938f8ab","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java","status":"modified","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/3b00de3b261f4b0dd28b8da7500c7b81dad2d132/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java","raw_url":"https://github.com/apache/openjpa/raw/3b00de3b261f4b0dd28b8da7500c7b81dad2d132/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java?ref=3b00de3b261f4b0dd28b8da7500c7b81dad2d132","patch":"@@ -21,7 +21,9 @@\n import javax.persistence.Basic;\r\n import javax.persistence.Column;\r\n import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n import javax.persistence.Id;\r\n+import javax.persistence.Version;\r\n \r\n /**\r\n  * Persistent entity used to test behavior of null constraint on basic fields.\r\n@@ -32,6 +34,7 @@\n @Entity\r\n public class NullValues {\r\n \t@Id\r\n+\t@GeneratedValue\r\n \tprivate long id;\r\n \t\r\n \t@Column(nullable=true)\r\n@@ -46,6 +49,22 @@\n \t@Basic(optional=false)\r\n \tprivate Integer notOptional;\r\n \t\r\n+\t@Column(nullable=true)\r\n+\tprivate BlobValue nullableBlob;\r\n+\t\r\n+\t@Column(nullable=false)\r\n+\tprivate BlobValue notNullableBlob;\r\n+\t\r\n+\t@Basic(optional=true)\r\n+\tprivate BlobValue optionalBlob;\r\n+\t\r\n+\t@Basic(optional=false)\r\n+\tprivate BlobValue notOptionalBlob;\r\n+\t\r\n+\t@Version\r\n+\tprivate int version;\r\n+\t\r\n+\t\r\n \t/**\r\n \t * Construct with all fields set to non-null values.\r\n \t */\r\n@@ -54,6 +73,11 @@ public NullValues() {\n \t\tsetNotOptional(42);\r\n \t\tsetNotNullable(42);\r\n \t\tsetNullable(42);\r\n+\t\t\r\n+\t\tsetNullableBlob(new BlobValue());\r\n+\t\tsetNotNullableBlob(new BlobValue());\r\n+\t\tsetOptionalBlob(new BlobValue());\r\n+\t\tsetNotOptionalBlob(new BlobValue());\r\n \t}\r\n \t\r\n \tpublic long getId() {\r\n@@ -91,4 +115,36 @@ public Integer getNotOptional() {\n \tpublic void setNotOptional(Integer notOptional) {\r\n \t\tthis.notOptional = notOptional;\r\n \t}\r\n+\r\n+\tpublic BlobValue getNullableBlob() {\r\n+\t\treturn nullableBlob;\r\n+\t}\r\n+\r\n+\tpublic void setNullableBlob(BlobValue nullableBlob) {\r\n+\t\tthis.nullableBlob = nullableBlob;\r\n+\t}\r\n+\r\n+\tpublic BlobValue getNotNullableBlob() {\r\n+\t\treturn notNullableBlob;\r\n+\t}\r\n+\r\n+\tpublic void setNotNullableBlob(BlobValue notNullableBlob) {\r\n+\t\tthis.notNullableBlob = notNullableBlob;\r\n+\t}\r\n+\r\n+\tpublic BlobValue getOptionalBlob() {\r\n+\t\treturn optionalBlob;\r\n+\t}\r\n+\r\n+\tpublic void setOptionalBlob(BlobValue optionalBlob) {\r\n+\t\tthis.optionalBlob = optionalBlob;\r\n+\t}\r\n+\r\n+\tpublic BlobValue getNotOptionalBlob() {\r\n+\t\treturn notOptionalBlob;\r\n+\t}\r\n+\r\n+\tpublic void setNotOptionalBlob(BlobValue notOptionalBlob) {\r\n+\t\tthis.notOptionalBlob = notOptionalBlob;\r\n+\t}\r\n }\r"},{"sha":"d8bf5cbbdbcc27ccb20d840ac83e9c5dd1bad2c2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","status":"modified","additions":61,"deletions":21,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/3b00de3b261f4b0dd28b8da7500c7b81dad2d132/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","raw_url":"https://github.com/apache/openjpa/raw/3b00de3b261f4b0dd28b8da7500c7b81dad2d132/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java?ref=3b00de3b261f4b0dd28b8da7500c7b81dad2d132","patch":"@@ -22,6 +22,7 @@\n import javax.persistence.RollbackException;\r\n \r\n import org.apache.openjpa.persistence.InvalidStateException;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n \r\n \r\n@@ -34,86 +35,125 @@\n  * @author Pinaki Poddar\r\n  */\r\n public class TestBasicFieldNullity extends SingleEMFTestCase {\r\n-\r\n+\tprivate static boolean NEW = true;\r\n \r\n     public void setUp() {\r\n-        setUp(NullValues.class);\r\n+        setUp(CLEAR_TABLES, NullValues.class);\r\n     }\r\n \r\n     public void testNullOnOptionalFieldIsAllowed() {\r\n     \tNullValues pc = new NullValues();\r\n-    \tpc.setOptional(null);\r\n-    \tassertCommitSucceeds(pc);\r\n+    \tpc.setOptional(null); \r\n+    \tassertCommitSucceeds(pc, NEW);\r\n     }\r\n     \r\n     public void testNullOnNonOptionalFieldIsDisallowed() {\r\n     \tNullValues pc = new NullValues();\r\n     \tpc.setNotOptional(null);\r\n-    \tassertCommitFails(pc, InvalidStateException.class);\r\n+    \tassertCommitFails(pc, NEW, InvalidStateException.class);\r\n     }\r\n     \r\n     public void testNotNullOnOptionalFieldIsAllowed() {\r\n     \tNullValues pc = new NullValues();\r\n-    \tassertCommitSucceeds(pc);\r\n+    \tassertCommitSucceeds(pc, NEW);\r\n     }\r\n     \r\n     public void testNotNullOnNonOptionalFieldIsAllowed() {\r\n     \tNullValues pc = new NullValues();\r\n-    \tassertCommitSucceeds(pc);\r\n+    \tassertCommitSucceeds(pc, NEW);\r\n     }\r\n     \r\n     public void testNullOnNullableColumnAllowed() {\r\n     \tNullValues pc = new NullValues();\r\n     \tpc.setNullable(null);\r\n-    \tassertCommitSucceeds(pc);\r\n+    \tassertCommitSucceeds(pc, NEW);\r\n     }\r\n     \r\n     public void testNullOnNonNullableColumnIsDisallowed() {\r\n     \tNullValues pc = new NullValues();\r\n     \tpc.setNotNullable(null);\r\n-    \tassertCommitFails(pc, RollbackException.class);\r\n+    \tassertCommitFails(pc, NEW, RollbackException.class);\r\n     }\r\n     \r\n     public void testNotNullOnNullableColumnIsAllowed() {\r\n     \tNullValues pc = new NullValues();\r\n-    \tassertCommitSucceeds(pc);\r\n+    \tassertCommitSucceeds(pc, NEW);\r\n     }\r\n     \r\n     public void testNotNullOnNonNullableColumnIsAllowed() {\r\n     \tNullValues pc = new NullValues();\r\n-    \tassertCommitSucceeds(pc);\r\n+    \tassertCommitSucceeds(pc, NEW);\r\n+    }\r\n+    \r\n+    public void testNullOnOptionalBlobFieldIsAllowed() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tpc.setOptionalBlob(null);\r\n+    \tassertCommitSucceeds(pc, NEW);\r\n+    }\r\n+    \r\n+    public void testNullOnNonOptionalBlobFieldIsDisallowed() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tpc.setNotOptionalBlob(null);\r\n+    \tassertCommitFails(pc, NEW, InvalidStateException.class);\r\n+    }\r\n+    \r\n+    public void testNullOnNullableBlobColumnAllowed() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tpc.setNullableBlob(null);\r\n+    \tassertCommitSucceeds(pc, NEW);\r\n+    }\r\n+    \r\n+    public void testNullOnNonNullableBlobColumnIsDisallowed() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tpc.setNotNullableBlob(null);\r\n+    \tassertCommitFails(pc, NEW, RollbackException.class);\r\n+    }\r\n+    \r\n+    public void testX() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tassertCommitSucceeds(pc, NEW);\r\n+    \tOpenJPAPersistence.getEntityManager(pc).close();\r\n+    \t\r\n+    \tpc.setNotNullableBlob(null);\r\n+    \tassertCommitFails(pc, !NEW, RollbackException.class);\r\n+    \t\r\n     }\r\n     \r\n     /**\r\n      * Asserts that the given instance can not be committed.\r\n      */\r\n-    void assertCommitFails(Object pc, Class expected) {\r\n+    void assertCommitFails(Object pc, boolean isNew, Class expected) {\r\n     \tEntityManager em = emf.createEntityManager();\r\n     \tem.getTransaction().begin();\r\n-    \tem.persist(pc);\r\n+    \tif (isNew)\r\n+    \t\tem.persist(pc);\r\n+    \telse {\r\n+    \t\tObject merged = em.merge(pc);\r\n+    \t}\r\n     \ttry {\r\n \t\t\tem.getTransaction().commit();\r\n \t\t\tfail();\r\n-\t\t} catch (RuntimeException e) {\r\n+\t\t} catch (Exception e) {\r\n \t\t\tif (!expected.isAssignableFrom(e.getClass())) {\r\n-\t\t\t\tfail(\"Expected \" + expected.getName());\r\n \t\t\t\te.printStackTrace();\r\n-\t\t\t}\r\n+\t\t\t\tfail(\"Expected \" + expected.getName());\r\n+\t\t\t} \r\n \t\t}\r\n     }\r\n     \r\n-    void assertCommitSucceeds(Object pc) {\r\n+    void assertCommitSucceeds(Object pc, boolean isNew) {\r\n     \tEntityManager em = emf.createEntityManager();\r\n     \tem.getTransaction().begin();\r\n-    \tem.persist(pc);\r\n+    \tif (isNew)\r\n+    \t\tem.persist(pc);\r\n+    \telse \r\n+    \t\tem.merge(pc);\r\n     \ttry {\r\n \t\t\tem.getTransaction().commit();\r\n \t\t} catch (RuntimeException e) {\r\n-\t\t\tfail();\r\n \t\t\te.printStackTrace();\r\n+\t\t\tfail();\r\n \t\t}\r\n     }\r\n-\r\n-\r\n }\r\n \r"}]}

