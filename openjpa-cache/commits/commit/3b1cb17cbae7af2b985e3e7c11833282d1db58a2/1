{"sha":"3b1cb17cbae7af2b985e3e7c11833282d1db58a2","node_id":"MDY6Q29tbWl0MjA2MzY0OjNiMWNiMTdjYmFlN2FmMmI5ODVlM2U3YzExODMzMjgyZDFkYjU4YTI=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-07-25T18:14:45Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-07-25T18:14:45Z"},"message":"General cleanup of cruft accumulated during separation from Kodo.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@425473 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"590f73952b6004ef6e8496337ee6dd266cbe407f","url":"https://api.github.com/repos/apache/openjpa/git/trees/590f73952b6004ef6e8496337ee6dd266cbe407f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3b1cb17cbae7af2b985e3e7c11833282d1db58a2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3b1cb17cbae7af2b985e3e7c11833282d1db58a2","html_url":"https://github.com/apache/openjpa/commit/3b1cb17cbae7af2b985e3e7c11833282d1db58a2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/comments","author":null,"committer":null,"parents":[{"sha":"884ff1b86393b49d0d88fc95a7b80511dd9cb7c3","url":"https://api.github.com/repos/apache/openjpa/commits/884ff1b86393b49d0d88fc95a7b80511dd9cb7c3","html_url":"https://github.com/apache/openjpa/commit/884ff1b86393b49d0d88fc95a7b80511dd9cb7c3"}],"stats":{"total":1933,"additions":1024,"deletions":909},"files":[{"sha":"851743dc8e6c6ac9243eb37486b7e24cd7c1d7a5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java","status":"modified","additions":9,"deletions":15,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -44,21 +44,21 @@\n \n     /**\n      * Name of the logger for SQL execution messages:\n-     * <code>org.apache.openjpa.jdbc.SQL</code>.\n+     * <code>openjpa.jdbc.SQL</code>.\n      */\n-    public static final String LOG_SQL = \"org.apache.openjpa.jdbc.SQL\";\n+    public static final String LOG_SQL = \"openjpa.jdbc.SQL\";\n \n     /**\n      * Name of the logger for JDBC-related messages:\n-     * <code>org.apache.openjpa.jdbc.JDBC</code>.\n+     * <code>openjpa.jdbc.JDBC</code>.\n      */\n-    public static final String LOG_JDBC = \"org.apache.openjpa.jdbc.JDBC\";\n+    public static final String LOG_JDBC = \"openjpa.jdbc.JDBC\";\n \n     /**\n      * Name of the logger for schema-related messages:\n-     * <code>org.apache.openjpa.jdbc.Schema</code>.\n+     * <code>openjpa.jdbc.Schema</code>.\n      */\n-    public static final String LOG_SCHEMA = \"org.apache.openjpa.jdbc.Schema\";\n+    public static final String LOG_SCHEMA = \"openjpa.jdbc.Schema\";\n \n     /**\n      * Default schema for unqualified tables.\n@@ -564,20 +564,14 @@\n      * Return the mapping repository. Convenience method to cast from\n      * the internal metadata repository.\n      */\n-    public MappingRepository getMappingRepository();\n+    public MappingRepository getMappingRepositoryInstance();\n \n     /**\n-     * Return a new mapping repository instance for this configuration.\n+     * Return a new empty mapping repository of the configured type.  \n+     * Convenience method to cast from metadata repository.\n      */\n     public MappingRepository newMappingRepositoryInstance();\n \n-    /**\n-     * Return a new mapping repository instance for this configuration with\n-     * the specified {@link MetaDataFactory} and {@link MappingDefaults}.\n-     */\n-    public MappingRepository newMappingRepositoryInstance(MetaDataFactory mdf,\n-        MappingDefaults mapDefaults);\n-\n     /**\n      * Return the primary data source to use. The data source will\n      * automatically use the given context's user name and password on calls"},{"sha":"f5cda14140eba9851af508fa2447df849b910ddf","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","status":"modified","additions":11,"deletions":34,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -77,7 +77,6 @@\n     public ObjectValue mappingDefaultsPlugin;\n     public PluginValue driverDataSourcePlugin;\n     public MappingFactoryValue mappingFactoryPlugin;\n-    public MappingRepositoryValue mappingRepositoryPlugin;\n \n     // used internally\n     private String firstUser = null;\n@@ -218,8 +217,7 @@ public JDBCConfigurationImpl(boolean derivations, boolean loadDefaults) {\n         updateManagerPlugin.setString(aliases[0]);\n         updateManagerPlugin.setInstantiatingGetter(\"getUpdateManagerInstance\");\n \n-        driverDataSourcePlugin = addPlugin(\"jdbc.DriverDataSource\",\n-            false);\n+        driverDataSourcePlugin = addPlugin(\"jdbc.DriverDataSource\", false);\n         aliases = new String[]{\n             \"simple\", \"org.apache.openjpa.jdbc.schema.SimpleDriverDataSource\",\n         };\n@@ -253,18 +251,6 @@ public JDBCConfigurationImpl(boolean derivations, boolean loadDefaults) {\n         mappingFactoryPlugin = new MappingFactoryValue(\"jdbc.MappingFactory\");\n         addValue(mappingFactoryPlugin);\n \n-        mappingRepositoryPlugin = new MappingRepositoryValue\n-            (\"jdbc.MappingRepository\");\n-        addValue(mappingRepositoryPlugin);\n-        aliases = new String[]{\n-            \"default\", \"org.apache.openjpa.jdbc.meta.MappingRepository\",\n-        };\n-        mappingRepositoryPlugin.setAliases(aliases);\n-        mappingRepositoryPlugin.setDefault(aliases[0]);\n-        mappingRepositoryPlugin.setString(aliases[0]);\n-        mappingRepositoryPlugin.setInstantiatingGetter\n-            (\"getMappingRepository\");\n-\n         mappingDefaultsPlugin = addPlugin(\"jdbc.MappingDefaults\", true);\n         aliases = new String[]{\n             \"default\", \"org.apache.openjpa.jdbc.meta.MappingDefaultsImpl\",\n@@ -276,11 +262,16 @@ public JDBCConfigurationImpl(boolean derivations, boolean loadDefaults) {\n             (\"getMappingDefaultsInstance\");\n \n         // set up broker factory defaults\n-        brokerFactoryPlugin.setAlias(\"jdbc\",\n-            JDBCBrokerFactory.class.getName());\n+        brokerFactoryPlugin.setAlias(\"jdbc\", JDBCBrokerFactory.class.getName());\n         brokerFactoryPlugin.setDefault(\"jdbc\");\n         brokerFactoryPlugin.setString(\"jdbc\");\n \n+        // set new default for mapping repos\n+        metaRepositoryPlugin.setAlias(\"default\",\n+            \"org.apache.openjpa.jdbc.meta.MappingRepository\");\n+        metaRepositoryPlugin.setDefault(\"default\");\n+        metaRepositoryPlugin.setString(\"default\");\n+\n         // set new default for lock manager\n         lockManagerPlugin.setAlias(\"pessimistic\",\n             PessimisticLockManager.class.getName());\n@@ -688,26 +679,12 @@ public MappingDefaults getMappingDefaultsInstance() {\n         return (MappingDefaults) mappingDefaultsPlugin.get();\n     }\n \n-    public MappingRepository getMappingRepository() {\n-        return (MappingRepository) getMetaDataRepository();\n+    public MappingRepository getMappingRepositoryInstance() {\n+        return (MappingRepository) getMetaDataRepositoryInstance();\n     }\n \n     public MappingRepository newMappingRepositoryInstance() {\n-        return (MappingRepository) getMappingRepository().newInstance();\n-    }\n-\n-    public MappingRepository newMappingRepositoryInstance(MetaDataFactory mdf,\n-        MappingDefaults mapDefaults) {\n-        return (MappingRepository) getMappingRepository().\n-            newInstance(mdf, mapDefaults);\n-    }\n-\n-    public MetaDataRepository getMetaDataRepository() {\n-        if (metaRepos == null) {\n-            mappingRepositoryPlugin.instantiate(MappingRepository.class, this);\n-            metaRepos = (MetaDataRepository) mappingRepositoryPlugin.get();\n-        }\n-        return metaRepos;\n+        return (MappingRepository) newMetaDataRepositoryInstance();\n     }\n \n     public BrokerImpl newBrokerInstance(String user, String pass) {"},{"sha":"5adf2c6becf1f3327900d26ee74d31f76583936e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -27,14 +27,19 @@\n public class JDBCProductDerivation\n     implements ProductDerivation {\n \n+    static {\n+        BrokerFactoryValue.addDefaultAlias(\"jdbc\",\n+            JDBCBrokerFactory.class.getName());\n+    }\n+\n     public int getType() {\n         return TYPE_STORE;\n     }\n \n     public void beforeConfigurationConstruct(ConfigurationProvider cp) {\n         // default to JDBC when no broker factory set\n-        if (BrokerFactoryValue.getBrokerFactoryClassName(cp) == null) {\n-            cp.addProperty(BrokerFactoryValue.getBrokerFactoryProperty(cp),\n+        if (BrokerFactoryValue.get(cp) == null) {\n+            cp.addProperty(BrokerFactoryValue.getKey(cp),\n                 JDBCBrokerFactory.class.getName());\n         }\n     }\n@@ -44,7 +49,4 @@ public void beforeConfigurationLoad(OpenJPAConfiguration c) {\n \n     public void afterSpecificationSet(OpenJPAConfiguration c) {\n     }\n-\n-    public void afterClose(OpenJPAConfiguration c) {\n-    }\n }"},{"sha":"aed273dbff2a30a26893c9a596ee3e0c2e943407","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ClassTableJDBCSeq.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ClassTableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ClassTableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ClassTableJDBCSeq.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -214,13 +214,13 @@ public static boolean run(JDBCConfiguration conf, String[] args,\n                 loader = conf.getClassResolverInstance().getClassLoader(\n                     ClassTableJDBCSeq.class, null);\n \n-            ClassArgParser cap = conf.getMetaDataRepository()\n+            ClassArgParser cap = conf.getMetaDataRepositoryInstance()\n                 .getMetaDataFactory().newClassArgParser();\n             cap.setClassLoader(loader);\n             Class cls = cap.parseTypes(args[0])[0];\n \n             if (repos == null)\n-                repos = conf.getMappingRepository();\n+                repos = conf.getMappingRepositoryInstance();\n             ClassMapping mapping = repos.getMapping(cls, null, true);\n \n             Connection conn = conf.getDataSource2(null).getConnection();"},{"sha":"51aa30e892c74761f420647e1045911b748f19cd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -16,6 +16,7 @@\n package org.apache.openjpa.jdbc.kernel;\n \n import java.util.Collection;\n+import java.util.Set;\n \n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.kernel.DelegatingFetchConfiguration;\n@@ -170,7 +171,7 @@ public JDBCFetchConfiguration setJoinSyntax(int syntax) {\n         }\n     }\n \n-    public String[] getJoins() {\n+    public Set getJoins() {\n         try {\n             return getJDBCDelegate().getJoins();\n         } catch (RuntimeException re) {"},{"sha":"51ee13a1835c91c2c687f6be29b587c3edd8ba45","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/GenericResultObjectProvider.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/GenericResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/GenericResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/GenericResultObjectProvider.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -48,7 +48,7 @@\n      */\n     public GenericResultObjectProvider(Class pcClass,\n         JDBCStore store, JDBCFetchConfiguration fetch, Result res) {\n-        this(store.getConfiguration().getMappingRepository().getMapping\n+        this(store.getConfiguration().getMappingRepositoryInstance().getMapping\n             (pcClass, store.getContext().getClassLoader(), true),\n             store, fetch, res);\n     }"},{"sha":"a041884b6aef43c826ffc09b972fbe57b744ebe2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -141,7 +141,7 @@ private void synchronizeMappings(ClassLoader loader) {\n         if (action == null || action.length() == 0)\n             return;\n \n-        Collection classes = conf.getMetaDataRepository().\n+        Collection classes = conf.getMetaDataRepositoryInstance().\n             loadPersistentTypes(false, loader);\n         if (classes.isEmpty())\n             return;"},{"sha":"2cdbce6a77ee71e6225ebc1880198260f0392b6d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -17,6 +17,7 @@\n \n import java.sql.ResultSet;\n import java.util.Collection;\n+import java.util.Set;\n \n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.sql.JoinSyntaxes;\n@@ -108,11 +109,12 @@\n \n     /**\n      * Returns the names of the joins that this component will use\n-     * when loading objects. Defaults to the empty set.\n+     * when loading objects. Defaults to the empty set.  This set is not\n+     * thread safe.\n      *\n      * @since 4.0.0\n      */\n-    public String[] getJoins();\n+    public Set getJoins();\n \n     /**\n      * Return true if the given fully-qualified join has been added."},{"sha":"cff186919c47f838be0034c2facb31d7eae1de67","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","status":"modified","additions":67,"deletions":43,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -18,9 +18,12 @@\n import java.sql.ResultSet;\n import java.util.Arrays;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.HashSet;\n+import java.util.Iterator;\n import java.util.Set;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n@@ -35,6 +38,8 @@\n import org.apache.openjpa.lib.rop.SimpleResultList;\n import org.apache.openjpa.lib.rop.SoftRandomAccessResultList;\n import org.apache.openjpa.lib.rop.WindowResultList;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.UserException;\n \n /**\n  * JDBC extensions to OpenJPA's {@link FetchConfiguration}.\n@@ -46,15 +51,15 @@\n     extends FetchConfigurationImpl\n     implements JDBCFetchConfiguration {\n \n-    private static final String[] EMPTY_STRINGS = new String[0];\n+    private static final Localizer _loc = Localizer.forPackage\n+        (JDBCFetchConfigurationImpl.class);\n \n     private int _eagerMode = 0;\n     private int _subclassMode = 0;\n     private int _type = 0;\n     private int _direction = 0;\n     private int _size = 0;\n     private int _syntax = 0;\n-\n     private Set _joins = null;\n \n     public void setContext(StoreContext ctx) {\n@@ -85,7 +90,7 @@ public void copy(FetchConfiguration fetch) {\n         setFetchDirection(jf.getFetchDirection());\n         setLRSSize(jf.getLRSSize());\n         setJoinSyntax(jf.getJoinSyntax());\n-        addJoins(Arrays.asList(jf.getJoins()));\n+        addJoins(jf.getJoins());\n     }\n \n     public int getEagerFetchMode() {\n@@ -215,67 +220,86 @@ public ResultList newResultList(ResultObjectProvider rop) {\n         return new SimpleResultList(rop);\n     }\n \n-    /**\n-     * Access JDBC configuration information. May return null if not a\n-     * JDBC back-end (possible to get a JDBCFetchConfiguration on non-JDBC\n-     * back end in remote client).\n-     */\n-    private JDBCConfiguration getJDBCConfiguration() {\n-        StoreContext ctx = getContext();\n-        if (ctx == null)\n-            return null;\n-\n-        OpenJPAConfiguration conf = ctx.getConfiguration();\n-        if (!(conf instanceof JDBCConfiguration))\n-            return null;\n-        return (JDBCConfiguration) conf;\n-    }\n-\n-    public synchronized String[] getJoins() {\n-        if (_joins == null || _joins.isEmpty())\n-            return EMPTY_STRINGS;\n-        return (String[]) _joins.toArray(new String[_joins.size()]);\n+    public Set getJoins() {\n+        return (_joins == null) ? Collections.EMPTY_SET : _joins;\n     }\n \n-    public synchronized boolean hasJoin(String field) {\n-        return _joins != null && field != null && _joins.contains(field);\n+    public boolean hasJoin(String field) {\n+        return _joins != null && _joins.contains(field);\n     }\n \n-    public synchronized JDBCFetchConfiguration addJoin(String field) {\n-        if (_joins == null)\n-            _joins = new HashSet();\n-        _joins.add(field);\n+    public JDBCFetchConfiguration addJoin(String join) {\n+        if (StringUtils.isEmpty(join))\n+            throw new UserException(_loc.get(\"null-join\"));\n+        \n+        lock();\n+        try {\n+            if (_joins == null)\n+                _joins = new HashSet();\n+            _joins.add(join);\n+        } finally {\n+            unlock();\n+        }\n         return this;\n     }\n \n-    public synchronized JDBCFetchConfiguration addJoins(Collection fields) {\n-        if (fields.isEmpty())\n+    public JDBCFetchConfiguration addJoins(Collection joins) {\n+        if (joins == null || joins.isEmpty())\n             return this;\n-        if (_joins == null)\n-            _joins = new HashSet();\n-        _joins.addAll(fields);\n+        for (Iterator itr = joins.iterator(); itr.hasNext();)\n+            addJoin((String) itr.next());\n         return this;\n     }\n \n-    public synchronized JDBCFetchConfiguration removeJoin(String field) {\n-        if (_joins != null)\n-            _joins.remove(field);\n+    public JDBCFetchConfiguration removeJoin(String field) {\n+        lock();\n+        try {\n+            if (_joins != null)\n+                _joins.remove(field);\n+        } finally {\n+            unlock();\n+        }\n         return this;\n     }\n \n-    public synchronized JDBCFetchConfiguration removeJoins(Collection fields) {\n-        if (_joins != null)\n-            _joins.removeAll(fields);\n+    public JDBCFetchConfiguration removeJoins(Collection joins) {\n+        lock();\n+        try {\n+            if (_joins != null)\n+                _joins.removeAll(joins);\n+        } finally {\n+            unlock();\n+        }\n         return this;\n     }\n \n-    public synchronized JDBCFetchConfiguration clearJoins() {\n-        if (_joins != null)\n-            _joins.clear();\n+    public JDBCFetchConfiguration clearJoins() {\n+        lock();\n+        try {\n+            if (_joins != null)\n+                _joins.clear();\n+        } finally {\n+            unlock();\n+        }\n         return this;\n     }\n \n     public FetchState newFetchState() {\n         return new JDBCFetchStateImpl(this);\n     }\n+\n+    /**\n+     * Access JDBC configuration information. May return null if not a\n+     * JDBC back-end (possible to get a JDBCFetchConfiguration on non-JDBC\n+     * back end in remote client).\n+     */\n+    private JDBCConfiguration getJDBCConfiguration() {\n+        StoreContext ctx = getContext();\n+        if (ctx == null)\n+            return null;\n+        OpenJPAConfiguration conf = ctx.getConfiguration();\n+        if (!(conf instanceof JDBCConfiguration))\n+            return null;\n+        return (JDBCConfiguration) conf;\n+    }\n }"},{"sha":"d2a134f7607ced73e62a1febc9a02bd510e0c56a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -167,7 +167,7 @@ public SQLExecutor(SQLStoreQuery q, ClassMetaData candidate) {\n             else {\n                 ClassLoader envLoader = ctx.getStoreContext().getClassLoader();\n                 MappingRepository repos = q.getStore().getConfiguration().\n-                    getMappingRepository();\n+                    getMappingRepositoryInstance();\n                 _resultMapping = repos.getQueryResultMapping\n                     (ctx.getResultMappingScope(), resultMapping, envLoader,\n                         true);"},{"sha":"fc8ab5853fbf386ca501568d6e880f360fa028a7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InstanceofExpression.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InstanceofExpression.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InstanceofExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InstanceofExpression.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -86,7 +86,7 @@ public void initialize(Select sel, JDBCStore store,\n         if (_dsc != null) {\n             // cache mapping for cast\n             MappingRepository repos = store.getConfiguration().\n-                getMappingRepository();\n+                getMappingRepositoryInstance();\n             _mapping = repos.getMapping(_cls, store.getContext().\n                 getClassLoader(), false);\n "},{"sha":"0c5561d545c076a2e2d6f0ba5c0d514d15b104e3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","status":"modified","additions":31,"deletions":24,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -95,29 +95,18 @@\n             \"org.apache.openjpa.jdbc.meta.strats.EnumValueHandler\");\n     }\n \n-    private final MappingDefaults _defaults;\n-    private final DBDictionary _dict;\n-    private final Map _results = new HashMap(); // object->queryresultmapping\n+    private DBDictionary _dict = null;\n+    private MappingDefaults _defaults = null;\n+    private Map _results = new HashMap(); // object->queryresultmapping\n     private SchemaGroup _schema = null;\n     private StrategyInstaller _installer = null;\n \n     /**\n-     * Constructor; supply configuration.\n+     * Default constructor.  Configure via \n+     * {@link org.apache.openjpa.lib.conf.Configurable}.\n      */\n-    public MappingRepository(JDBCConfiguration conf) {\n-        this(conf, conf.newMetaDataFactoryInstance(),\n-            conf.getMappingDefaultsInstance());\n-    }\n-\n-    /**\n-     * Constructor; supply configuration and mapping factory.\n-     */\n-    public MappingRepository(JDBCConfiguration conf, MetaDataFactory mdf,\n-        MappingDefaults mapDefaults) {\n-        super(conf, mdf);\n+    public MappingRepository() {\n         setValidate(VALIDATE_MAPPING, true);\n-        _defaults = mapDefaults;\n-        _dict = conf.getDBDictionaryInstance();\n     }\n \n     /**\n@@ -134,6 +123,13 @@ public MappingDefaults getMappingDefaults() {\n         return _defaults;\n     }\n \n+    /**\n+     * Mapping default.\n+     */\n+    public void setMappingDefaults(MappingDefaults defaults) {\n+        _defaults = defaults;\n+    }\n+\n     /**\n      * Representation of the database schema.\n      */\n@@ -272,13 +268,11 @@ private static Object getQueryResultKey(Class cls, String name) {\n     }\n \n     public MetaDataRepository newInstance() {\n-        return new MappingRepository((JDBCConfiguration) getConfiguration());\n-    }\n-\n-    public MetaDataRepository newInstance(MetaDataFactory mdf,\n-        MappingDefaults mapDefaults) {\n-        return new MappingRepository\n-            ((JDBCConfiguration) getConfiguration(), mdf, mapDefaults);\n+        MappingRepository repos = new MappingRepository();\n+        repos.setConfiguration(getConfiguration());\n+        repos.startConfiguration();\n+        repos.endConfiguration();\n+        return repos;\n     }\n \n     public ClassMapping getMapping(Class cls, ClassLoader envLoader,\n@@ -614,6 +608,9 @@ else if (StateComparisonVersionStrategy.ALIAS.equals(name))\n         return instantiateVersionStrategy(strat, version, props);\n     }\n \n+    /**\n+     * Instantiate the given version strategy.\n+     */\n     protected VersionStrategy instantiateVersionStrategy(Class strat,\n         Version version, String props) {\n         try {\n@@ -1132,4 +1129,14 @@ protected VersionStrategy defaultStrategy(Version vers,\n                 return NoneVersionStrategy.getInstance();\n         }\n     }\n+\n+    public void endConfiguration()\n+    {\n+        super.endConfiguration();\n+\n+        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\n+        _dict = conf.getDBDictionaryInstance();\n+        if (_defaults == null)\n+            _defaults = conf.getMappingDefaultsInstance();\n+    }\n }"},{"sha":"f8f7919ed41fd19277bd841b6254c7d22268d634","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -968,11 +968,11 @@ public static boolean run(JDBCConfiguration conf, String[] args,\n             if (ACTION_IMPORT.equals(flags.action))\n                 return false;\n             log.info(_loc.get(\"running-all-classes\"));\n-            classes = conf.getMappingRepository().loadPersistentTypes(true,\n-                loader);\n+            classes = conf.getMappingRepositoryInstance().\n+                loadPersistentTypes(true, loader);\n         } else {\n             classes = new HashSet();\n-            ClassArgParser classParser = conf.getMetaDataRepository().\n+            ClassArgParser classParser = conf.getMetaDataRepositoryInstance().\n                 getMetaDataFactory().newClassArgParser();\n             classParser.setClassLoader(loader);\n             Class[] parsed;"},{"sha":"b36db91ed677e47ca87d2d3be4666e3d54ed1bce","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -516,9 +516,9 @@ public void setCustomizer(ReverseCustomizer customizer) {\n     public MappingRepository getRepository() {\n         if (_repos == null) {\n             // create empty repository\n-            _repos = _conf.newMappingRepositoryInstance\n-                (NoneMetaDataFactory.getInstance(),\n-                    NoneMappingDefaults.getInstance());\n+            _repos = _conf.newMappingRepositoryInstance();\n+            _repos.setMetaDataFactory(NoneMetaDataFactory.getInstance());\n+            _repos.setMappingDefaults(NoneMappingDefaults.getInstance());\n             _repos.setResolve(MODE_NONE);\n             _repos.setValidate(_repos.VALIDATE_NONE);\n         }"},{"sha":"2892c44ac6bf4fe1de164505bc1e4bf6705f38f9","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties","status":"modified","additions":21,"deletions":26,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/conf/localizer.properties?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -99,27 +99,27 @@ ConnectionDecorators-expert: true\n ConnectionDecorators-interface: org.apache.openjpa.lib.jdbc.ConnectionDecorator\n \n DBDictionary-name: Database dictionary\n-DBDictionary-desc: The org.apache.openjpa.jdbc.sql.DBDictionary to use for database \\\n-\tinteraction. This is auto-detected based on the ConnectionURL setting, \\\n-\tso you need only set this to override the default with your own custom \\\n-\tdictionary or if you are using an unrecognized driver.\n+DBDictionary-desc: The org.apache.openjpa.jdbc.sql.DBDictionary to use for \\\n+    database interaction. This is auto-detected based on the ConnectionURL \\\n+    setting, so you need only set this to override the default with your own \\\n+    custom dictionary or if you are using an unrecognized driver.\n DBDictionary-type: Connecting\n DBDictionary-cat: Database\n DBDictionary-displayorder: 50\n DBDictionary-interface: org.apache.openjpa.jdbc.sql.DBDictionary\n \n UpdateManager-name: Update manager\n-UpdateManager-desc: The org.apache.openjpa.jdbc.kernel.UpdateManager to use to flush \\\n-\tpersistent object modifications to the database.\n+UpdateManager-desc: The org.apache.openjpa.jdbc.kernel.UpdateManager to use to \\\n+    flush persistent object modifications to the database.\n UpdateManager-type: General\n UpdateManager-cat: JDBC.Interaction\n UpdateManager-displayorder: 50\n UpdateManager-expert: true\n UpdateManager-interface: org.apache.openjpa.jdbc.kernel.UpdateManager\n \n DriverDataSource-name: Update manager\n-DriverDataSource-desc: The org.apache.openjpa.jdbc.schema.DriverDataSource to use to wrap \\\n-\ta JDBC driver in a DataSource.\n+DriverDataSource-desc: The org.apache.openjpa.jdbc.schema.DriverDataSource to \\\n+    use to wrap a JDBC driver in a DataSource.\n DriverDataSource-type: General\n DriverDataSource-cat: JDBC.Interaction\n DriverDataSource-displayorder: 50\n@@ -137,38 +137,33 @@ SchemaFactory-expert: true\n SchemaFactory-interface: org.apache.openjpa.jdbc.schema.SchemaFactory\n \n SQLFactory-name: SQL factory\n-SQLFactory-desc: The org.apache.openjpa.jdbc.sql.SQLFactory used to create SQL constructs.\n+SQLFactory-desc: The org.apache.openjpa.jdbc.sql.SQLFactory used to create \\\n+    SQL constructs.\n SQLFactory-type: General\n SQLFactory-cat: JDBC.Interaction\n SQLFactory-displayorder: 50\n SQLFactory-expert: true\n SQLFactory-interface: org.apache.openjpa.jdbc.sql.SQLFactory\n \n MappingFactory-name: Mapping factory\n-MappingFactory-desc: The org.apache.openjpa.meta.MetaDataFactory that will provide the \\\n-\tobject-relational mapping information needed to map each persistent class \\\n-\tto the database, if it isn't provided by current metadata MetaDataFactory.\n+MappingFactory-desc: The org.apache.openjpa.meta.MetaDataFactory that will \\\n+    provide the object-relational mapping information needed to map each \\\n+    persistent class to the database, if it isn't provided by current metadata \\\n+    MetaDataFactory.\n MappingFactory-type: General\n MappingFactory-cat: Mappings\n MappingFactory-displayorder: 50\n MappingFactory-expert: true\n MappingFactory-interface: org.apache.openjpa.meta.MetaDataFactory\n \n MappingDefaults-name: Mapping defaults\n-MappingDefaults-desc: The org.apache.openjpa.jdbc.meta.MappingDefaults that determines \\\n-\tdefault table names, column names, and other information.\n+MappingDefaults-desc: The org.apache.openjpa.jdbc.meta.MappingDefaults that \\\n+    determines default table names, column names, and other information.\n MappingDefaults-type: General\n MappingDefaults-cat: Mappings\n MappingDefaults-displayorder: 50\n MappingDefaults-interface: org.apache.openjpa.jdbc.meta.MappingDefaults\n \n-MappingRepository-name: Mapping repository\n-MappingRepository-desc: TODO\n-MappingRepository-type: JDBC\n-MappingRepository-cat: Mappings\n-MappingDefaults-displayorder: 50\n-MappingDefaults-interface: org.apache.openjpa.jdbc.meta.MappingRepository\n-\n ConnectionDriverName-values: org.hsqldb.jdbcDriver,org.hsql.jdbcDriver,\\\n \tCOM.cloudscape.core.JDBCDriver,in.co.daffodil.db.jdbc.DaffodilDBDriver,\\\n \tcom.ddtek.jdbc.db2.DB2Driver,interbase.interclient.Driver,\\\n@@ -224,10 +219,10 @@ ConnectionURL-values: jdbc:JSQLConnect://<hostname>/database=<database>,\\\n \tjdbc:solid://<hostname>:<port>/<UID>/<PWD>,\\\n \tjdbc:dbaw://<hostname>:8889/<database>\n \n-connecting-for-dictionary: OpenJPA will now connect to the database to attempt to \\\n-\tdetermine what type of database dictionary to use.  To prevent this \\\n-\tconnection in the future, set your org.apache.openjpa.jdbc.DBDictionary configuration \\\n-\tproperty to the appropriate value for your database (see the documentation \\\n-\tfor available values).\n+connecting-for-dictionary: OpenJPA will now connect to the database to attempt \\\n+    to determine what type of database dictionary to use.  To prevent this \\\n+\tconnection in the future, set your org.apache.openjpa.jdbc.DBDictionary \\\n+    configuration property to the appropriate value for your database (see \\\n+    the documentation for available values).\n map-factory: Using mapping factory \"{0}\".\n meta-factory: Using metadata factory \"{0}\"."},{"sha":"3879cc8a801b0c4e34a5590b88f5e44b54b9451b","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -66,6 +66,7 @@ insert-seq: Inserting row for this mapping into sequence table.\n no-seq-row: There is no row for mapping \"{0}\" in sequence table \"{1}\", and \\\n \tthe attempt to insert a row has apparently failed.\n update-seq: Updating sequence values.\n+null-join: Attempt to add a null/empty fetch join field.\n get-seq: Getting current sequence values.\n seq-usage: Usage: java org.apache.openjpa.jdbc.kernel.TableJDBCSeq\\n\\\n \t\\t[-properties/-p <properties file or resource>]\\n\\"},{"sha":"944249cfc9aeb1d7a00b69916da11b4fc5c89d73","filename":"openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","status":"modified","additions":10,"deletions":47,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -16,7 +16,6 @@\n package org.apache.openjpa.enhance;\n \n import java.io.ByteArrayInputStream;\n-import java.io.UnsupportedEncodingException;\n import java.lang.instrument.ClassFileTransformer;\n import java.lang.instrument.IllegalClassFormatException;\n import java.security.ProtectionDomain;\n@@ -29,6 +28,7 @@\n import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.util.GeneralException;\n import serp.bytecode.Project;\n+import serp.bytecode.lowlevel.ConstantPoolTable;\n \n /**\n  * Transformer that makes persistent classes implement the\n@@ -173,58 +173,21 @@ private Boolean needsEnhance(String clsName, Class redef, byte[] bytes) {\n      * {@link PersistenceCapable}.\n      */\n     private static boolean isEnhanced(byte[] b) {\n-        // each entry is the index in the byte array of the data for a const\n-        // pool entry\n-        int[] entries = new int[readUnsignedShort(b, 8)];\n-        int idx = 10;\n-        for (int i = 1; i < entries.length; i++) {\n-            entries[i] = idx + 1; // skip entry type\n-            switch (b[idx]) {\n-                case 1: // utf8\n-                    idx += 3 + readUnsignedShort(b, idx + 1);\n-                    break;\n-                case 3: // integer\n-                case 4: // float\n-                case 9: // field\n-                case 10: // method\n-                case 11: // interface method\n-                case 12: // name\n-                    idx += 5;\n-                    break;\n-                case 5: // long\n-                case 6: // double\n-                    idx += 9;\n-                    i++; // wide entry\n-                    break;\n-                default:\n-                    idx += 3;\n-            }\n-        }\n+        ConstantPoolTable table = new ConstantPoolTable(b);\n+        int idx = table.getEndIndex();\n \n-        idx += 6;\n-        int ifaces = readUnsignedShort(b, idx);\n+        idx += 6; // skip access, cls, super\n+        int ifaces = table.readUnsignedShort(idx);\n         int clsEntry, utfEntry, len;\n         String name;\n         for (int i = 0; i < ifaces; i++) {\n             idx += 2;\n-            clsEntry = readUnsignedShort(b, idx);\n-            utfEntry = readUnsignedShort(b, entries[clsEntry]);\n-            len = readUnsignedShort(b, entries[utfEntry]);\n-            try {\n-                name = new String(b, entries[utfEntry] + 2, len, \"UTF-8\");\n-                if (\"openjpa/enhance/PersistenceCapable\".equals(name))\n-                    return true;\n-            } catch (UnsupportedEncodingException uee) {\n-                throw new ClassFormatError(uee.toString());\n-            }\n+            clsEntry = table.readUnsignedShort(idx);\n+            utfEntry = table.readUnsignedShort(table.get(clsEntry));\n+            name = table.readString(table.get(utfEntry));\n+            if (\"openjpa/enhance/PersistenceCapable\".equals(name))\n+                return true;\n         }\n         return false;\n     }\n-\n-    /**\n-     * Read an unsigned short from the given array at the given offset.\n-     */\n-    private static int readUnsignedShort(byte[] b, int idx) {\n-        return ((b[idx] & 0xFF) << 8) | (b[idx + 1] & 0xFF);\n-\t}\n }"},{"sha":"ee2c1e00ee9f120d4d2ae8432ec1f84c29d23650","filename":"openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -63,7 +63,7 @@ public ClassLoader getClassLoader(Class context, ClassLoader env) {\n         conf.instantiateAll(); // avoid threading issues\n \n         PCClassFileTransformer transformer = new PCClassFileTransformer\n-            (new MetaDataRepository(conf), opts, tmpLoader);\n+            (conf.newMetaDataRepositoryInstance(), opts, tmpLoader);\n         inst.addTransformer(transformer);\n     }\n }"},{"sha":"0f064f84d80d096eed81c16bbc1c073656f211f0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ant/PCEnhancerTask.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/ant/PCEnhancerTask.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/ant/PCEnhancerTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ant/PCEnhancerTask.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -82,7 +82,7 @@ protected void executeOn(String[] files)\n         flags.directory = (dirName == null) ? null\n             : Files.getFile(dirName, getClassLoader());\n         OpenJPAConfiguration conf = (OpenJPAConfiguration) getConfiguration();\n-        MetaDataRepository repos = new MetaDataRepository(conf);\n+        MetaDataRepository repos = conf.newMetaDataRepositoryInstance();\n         PCEnhancer.run(conf, files, flags, repos, null, getClassLoader ());\n \t}\n }"},{"sha":"92675782dfb3944acbb535d888b7f984973b9922","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerFactoryValue.java","status":"modified","additions":32,"deletions":39,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerFactoryValue.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerFactoryValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerFactoryValue.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -22,6 +22,7 @@\n import java.util.Iterator;\n import java.util.Map;\n \n+import org.apache.openjpa.abstractstore.AbstractStoreBrokerFactory;\n import org.apache.openjpa.kernel.BrokerFactory;\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n import org.apache.openjpa.lib.conf.PluginValue;\n@@ -32,64 +33,30 @@\n  * and in {@link org.apache.openjpa.kernel.Bootstrap} with the same\n  * encapsulated configuration.\n  *\n- * @author Abe White\n  * @nojavadoc\n  */\n public class BrokerFactoryValue\n     extends PluginValue {\n \n-    private static final String KEY = \"BrokerFactory\";\n+    public static final String KEY = \"BrokerFactory\";\n \n     private static final List _aliases = new ArrayList();\n-    private static final Collection _prefixes = new HashSet();\n-    \n+    private static final List _prefixes = new ArrayList(2);\n     static {\n         _prefixes.add(\"openjpa\");\n         addDefaultAlias(\"abstractstore\",\n-            \"org.apache.openjpa.abstractstore.AbstractStoreBrokerFactory\");\n-    }\n-\n-    public BrokerFactoryValue() {\n-        this(KEY);\n-    }\n-\n-    public BrokerFactoryValue(String prop) {\n-        super(prop, false);\n-        setAliases((String[]) _aliases.toArray(new String[_aliases.size()]));\n-    }\n-\n-    /**\n-     * Extract the concrete {@link BrokerFactory} class name that the specified\n-     * configuration will use.\n-     */\n-    public static Object getBrokerFactoryClassName(ConfigurationProvider cp) {\n-        Map props = cp.getProperties();\n-        for (Iterator iter = _prefixes.iterator(); iter.hasNext(); ) {\n-            Object bf = props.get(iter.next() + \".\" + KEY);\n-            if (bf != null)\n-                return  bf;\n-        }\n-        return null;\n-    }\n-\n-    /**\n-     * Return the property to use for setting the broker factory for \n-     * <code>cp</code>.\n-     */\n-    public static String getBrokerFactoryProperty(ConfigurationProvider cp) {\n-        return _prefixes.iterator().next() + \".\" \n-            + BrokerFactoryValue.KEY; \n+            AbstractStoreBrokerFactory.class.getName());\n     }\n     \n     /**\n      * Add <code>prefix</code> to the list of prefixes under which configuration\n      * properties may be scoped.\n      */\n     public static void addPropertyPrefix(String prefix) {\n-        _prefixes.add(prefix);\n+        if (!_prefixes.contains(prefix))\n+            _prefixes.add(prefix);\n     }\n     \n-    \n     /**\n      * Add a mapping from <code>alias</code> to <code>cls</code> to the list\n      * of default aliases for new values created after this invocation.\n@@ -98,4 +65,30 @@ public static void addDefaultAlias(String alias, String cls) {\n         _aliases.add(alias);\n         _aliases.add(cls);\n     }\n+\n+    /**\n+     * Extract the value of this property if set in the given provider.\n+     */\n+    public static Object get(ConfigurationProvider cp) {\n+        Map props = cp.getProperties();\n+        Object bf;\n+        for (int i = 0; i < _prefixes.size (); i++) {\n+            bf = props.get(_prefixes.get(i) + \".\" + KEY);\n+            if (bf != null)\n+                return  bf;\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Return the key to use for this property.\n+     */\n+    public static String getKey(ConfigurationProvider cp) {\n+        return _prefixes.get(0) + \".\" + KEY;\n+    }\n+\n+    public BrokerFactoryValue() {\n+        super(KEY, false);\n+        setAliases((String[]) _aliases.toArray(new String[_aliases.size()]));\n+    }\n }"},{"sha":"cf88fbc4fef6de6654ba6e96d6dd81bd2297c6e8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","status":"modified","additions":46,"deletions":33,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -42,6 +42,7 @@\n import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.util.ClassResolver;\n import org.apache.openjpa.util.ProxyManager;\n+import org.apache.openjpa.util.StoreFacadeTypeRegistry;\n \n /**\n  * Defines the properties necessary to configure runtime properties and\n@@ -60,146 +61,143 @@\n \n     /**\n      * Name of logger for metadata-related messages:\n-     * <code>org.apache.openjpa.MetaData</code>.\n+     * <code>openjpa.MetaData</code>.\n      */\n-    public static final String LOG_METADATA = \"org.apache.openjpa.MetaData\";\n+    public static final String LOG_METADATA = \"openjpa.MetaData\";\n \n     /**\n      * Name of logger for enhancement-related messages:\n-     * <code>org.apache.openjpa.Enhance</code>.\n+     * <code>openjpa.Enhance</code>.\n      */\n-    public static final String LOG_ENHANCE = \"org.apache.openjpa.Enhance\";\n+    public static final String LOG_ENHANCE = \"openjpa.Enhance\";\n \n     /**\n      * Name of logger for messages from the runtime system:\n-     * <code>org.apache.openjpa.Runtime</code>.\n+     * <code>openjpa.Runtime</code>.\n      */\n-    public static final String LOG_RUNTIME = \"org.apache.openjpa.Runtime\";\n+    public static final String LOG_RUNTIME = \"openjpa.Runtime\";\n \n     /**\n      * Name of logger for query logging:\n-     * <code>org.apache.openjpa.Query</code>.\n+     * <code>openjpa.Query</code>.\n      */\n-    public static final String LOG_QUERY = \"org.apache.openjpa.Query\";\n+    public static final String LOG_QUERY = \"openjpa.Query\";\n \n     /**\n      * Name of logger for messages from the data cache:\n-     * <code>org.apache.openjpa.DataCache</code>.\n+     * <code>openjpa.DataCache</code>.\n      */\n-    public static final String LOG_DATACACHE = \"org.apache.openjpa.DataCache\";\n+    public static final String LOG_DATACACHE = \"openjpa.DataCache\";\n \n     /**\n      * Name of logger for messages from the development tools:\n-     * <code>org.apache.openjpa.Tool</code>.\n+     * <code>openjpa.Tool</code>.\n      */\n-    public static final String LOG_TOOL = \"org.apache.openjpa.Tool\";\n+    public static final String LOG_TOOL = \"openjpa.Tool\";\n \n     /**\n      * Option for runtimes that support nontransactional reads.\n      */\n     public static final String OPTION_NONTRANS_READ =\n-        \"org.apache.openjpa.option.NontransactionalRead\";\n+        \"openjpa.option.NontransactionalRead\";\n \n     /**\n      * Option for runtimes that support optimistic transactions.\n      */\n     public static final String OPTION_OPTIMISTIC =\n-        \"org.apache.openjpa.option.Optimistic\";\n+        \"openjpa.option.Optimistic\";\n \n     /**\n      * Option for runtimes that support application identity.\n      */\n     public static final String OPTION_ID_APPLICATION =\n-        \"org.apache.openjpa.option.ApplicationIdentity\";\n+        \"openjpa.option.ApplicationIdentity\";\n \n     /**\n      * Option for runtimes that support application identity.\n      */\n     public static final String OPTION_ID_DATASTORE =\n-        \"org.apache.openjpa.option.DatastoreIdentity\";\n+        \"openjpa.option.DatastoreIdentity\";\n \n     /**\n      * Option for SQL support.\n      */\n-    public static final String OPTION_QUERY_SQL =\n-        \"org.apache.openjpa.option.SQL\";\n+    public static final String OPTION_QUERY_SQL = \"openjpa.option.SQL\";\n \n     /**\n      * Option for runtimes that support persistent collection fields.\n      */\n     public static final String OPTION_TYPE_COLLECTION =\n-        \"org.apache.openjpa.option.Collection\";\n+        \"openjpa.option.Collection\";\n \n     /**\n      * Option for runtimes that support persistent map fields.\n      */\n-    public static final String OPTION_TYPE_MAP =\n-        \"org.apache.openjpa.option.Map\";\n+    public static final String OPTION_TYPE_MAP = \"openjpa.option.Map\";\n \n     /**\n      * Option for runtimes that support persistent array fields.\n      */\n-    public static final String OPTION_TYPE_ARRAY =\n-        \"org.apache.openjpa.option.Array\";\n+    public static final String OPTION_TYPE_ARRAY = \"openjpa.option.Array\";\n \n     /**\n      * Option for runtime that can differentiate between null and empty\n      * container fields.\n      */\n     public static final String OPTION_NULL_CONTAINER =\n-        \"org.apache.openjpa.option.NullContainer\";\n+        \"openjpa.option.NullContainer\";\n \n     /**\n      * Option for runtimes that support embedded relations to other\n      * persistence capable objects.\n      */\n     public static final String OPTION_EMBEDDED_RELATION =\n-        \"org.apache.openjpa.option.EmbeddedRelation\";\n+        \"openjpa.option.EmbeddedRelation\";\n \n     /**\n      * Option for runtimes that support collections of embedded\n      * relations to other persistence capable objects.\n      */\n     public static final String OPTION_EMBEDDED_COLLECTION_RELATION =\n-        \"org.apache.openjpa.option.EmbeddedCollectionRelation\";\n+        \"openjpa.option.EmbeddedCollectionRelation\";\n \n     /**\n      * Option for runtimes that support maps of embedded\n      * relations to other persistence capable objects.\n      */\n     public static final String OPTION_EMBEDDED_MAP_RELATION =\n-        \"org.apache.openjpa.option.EmbeddedMapRelation\";\n+        \"openjpa.option.EmbeddedMapRelation\";\n \n     /**\n      * Option for runtimes that support incremental flushing.\n      */\n     public static final String OPTION_INC_FLUSH =\n-        \"org.apache.openjpa.option.IncrementalFlush\";\n+        \"openjpa.option.IncrementalFlush\";\n \n     /**\n      * Option for runtimes that the autoassign value strategy.\n      */\n     public static final String OPTION_VALUE_AUTOASSIGN =\n-        \"org.apache.openjpa.option.AutoassignValue\";\n+        \"openjpa.option.AutoassignValue\";\n \n     /**\n      * Option for runtimes that the increment value strategy.\n      */\n     public static final String OPTION_VALUE_INCREMENT =\n-        \"org.apache.openjpa.option.IncrementValue\";\n+        \"openjpa.option.IncrementValue\";\n \n     /**\n      * Option for runtimes that support returning the datastore connection.\n      */\n     public static final String OPTION_DATASTORE_CONNECTION =\n-        \"org.apache.openjpa.option.DataStoreConnection\";\n+        \"openjpa.option.DataStoreConnection\";\n \n     /**\n      * Option for runtimes that support returning the datastore connection\n      * that is a JDBC Connection.\n      */\n     public static final String OPTION_JDBC_CONNECTION =\n-        \"org.apache.openjpa.option.JDBCConnection\";\n+        \"openjpa.option.JDBCConnection\";\n \n     /**\n      * Return the set of option strings supported by this runtime. This set\n@@ -591,13 +589,28 @@\n      */\n     public MetaDataFactory newMetaDataFactoryInstance();\n \n+    /**\n+     * A plugin string describing the {@link MetaDataRepository} to use.\n+     */\n+    public String getMetaDataRepository();\n+\n+    /**\n+     * A plugin string describing the {@link MetaDataRepository} to use.\n+     */\n+    public void setMetaDataRepository(String meta);\n+\n     /**\n      * The metadata repository of managed class information. If no\n      * repository has been set, creates one.\n      *\n      * @since 3.0\n      */\n-    public MetaDataRepository getMetaDataRepository();\n+    public MetaDataRepository getMetaDataRepositoryInstance();\n+\n+    /**\n+     * Create a new empty metadata repository of the configured type.\n+     */\n+    public MetaDataRepository newMetaDataRepositoryInstance();\n \n     /**\n      * The metadata repository of managed class information."},{"sha":"6a0dba075b19cf112713d402f971d44f5e191ffd","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":61,"deletions":67,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -54,6 +54,7 @@\n import org.apache.openjpa.util.ClassResolver;\n import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.ProxyManager;\n+import org.apache.openjpa.util.StoreFacadeTypeRegistry;\n \n /**\n  * Implementation of the {@link OpenJPAConfiguration} interface.\n@@ -75,7 +76,7 @@\n \n     // cached state; some of this is created in getter methods, so make\n     // protected in case subclasses want to access without creating\n-    protected MetaDataRepository metaRepos = null;\n+    protected MetaDataRepository metaRepository = null;\n     protected RemoteCommitEventManager remoteEventManager = null;\n \n     // openjpa properties\n@@ -128,6 +129,7 @@\n     public BooleanValue multithreaded;\n     public StringValue mapping;\n     public PluginValue metaFactoryPlugin;\n+    public ObjectValue metaRepositoryPlugin;\n     public ObjectValue lockManagerPlugin;\n     public ObjectValue inverseManagerPlugin;\n     public ObjectValue savepointManagerPlugin;\n@@ -175,14 +177,13 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n \n         // setup super's log factory plugin\n         logFactoryPlugin.setProperty(\"Log\");\n-        logFactoryPlugin\n-            .setAlias(\"openjpa\", \"org.apache.openjpa.lib.log.LogFactoryImpl\");\n+        logFactoryPlugin.setAlias(\"openjpa\", \n+            \"org.apache.openjpa.lib.log.LogFactoryImpl\");\n         aliases = logFactoryPlugin.getAliases();\n         logFactoryPlugin.setDefault(aliases[0]);\n         logFactoryPlugin.setString(aliases[0]);\n \n-        classResolverPlugin =\n-            addPlugin(\"ClassResolver\", true);\n+        classResolverPlugin = addPlugin(\"ClassResolver\", true);\n         aliases = new String[]{\n             \"default\", \"org.apache.openjpa.util.ClassResolverImpl\",\n             // deprecated alias\n@@ -202,8 +203,7 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n         brokerPlugin.setDefault(aliases[0]);\n         brokerPlugin.setString(aliases[0]);\n \n-        dataCacheManagerPlugin =\n-            addPlugin(\"DataCacheManager\", true);\n+        dataCacheManagerPlugin = addPlugin(\"DataCacheManager\", true);\n         aliases = new String[]{\n             \"default\", DataCacheManagerImpl.class.getName(),\n         };\n@@ -236,8 +236,7 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n         queryCachePlugin.setDefault(aliases[0]);\n         queryCachePlugin.setString(aliases[0]);\n \n-        dynamicDataStructs =\n-            addBoolean(\"DynamicDataStructs\");\n+        dynamicDataStructs = addBoolean(\"DynamicDataStructs\");\n         dynamicDataStructs.setDefault(\"false\");\n         dynamicDataStructs.set(false);\n \n@@ -250,8 +249,7 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n         lockManagerPlugin.setDefault(aliases[0]);\n         lockManagerPlugin.setString(aliases[0]);\n \n-        inverseManagerPlugin =\n-            addPlugin(\"InverseManager\", false);\n+        inverseManagerPlugin = addPlugin(\"InverseManager\", false);\n         aliases = new String[]{\n             \"false\", null,\n             \"true\", \"org.apache.openjpa.kernel.InverseManager\",\n@@ -260,8 +258,7 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n         inverseManagerPlugin.setDefault(aliases[0]);\n         inverseManagerPlugin.setString(aliases[0]);\n \n-        savepointManagerPlugin =\n-            addPlugin(\"SavepointManager\", true);\n+        savepointManagerPlugin = addPlugin(\"SavepointManager\", true);\n         aliases = new String[]{\n             \"in-mem\", \"org.apache.openjpa.kernel.InMemorySavepointManager\",\n         };\n@@ -271,8 +268,7 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n         savepointManagerPlugin.setInstantiatingGetter\n             (\"getSavepointManagerInstance\");\n \n-        orphanedKeyPlugin =\n-            addPlugin(\"OrphanedKeyAction\", true);\n+        orphanedKeyPlugin = addPlugin(\"OrphanedKeyAction\", true);\n         aliases = new String[]{\n             \"log\", \"org.apache.openjpa.event.LogOrphanedKeyAction\",\n             \"exception\", \"org.apache.openjpa.event.ExceptionOrphanedKeyAction\",\n@@ -295,8 +291,7 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n         transactionMode.setAliases(aliases);\n         transactionMode.setDefault(aliases[0]);\n \n-        managedRuntimePlugin =\n-            addPlugin(\"ManagedRuntime\", true);\n+        managedRuntimePlugin = addPlugin(\"ManagedRuntime\", true);\n         aliases = new String[]{\n             \"auto\", \"org.apache.openjpa.ee.AutomaticManagedRuntime\",\n             \"jndi\", \"org.apache.openjpa.ee.JNDIManagedRuntime\",\n@@ -319,6 +314,13 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n         mapping = addString(\"Mapping\");\n         metaFactoryPlugin = addPlugin(\"MetaDataFactory\", false);\n \n+        metaRepositoryPlugin = addPlugin(\"MetaDataRepository\", false);\n+        aliases = new String[]{ \"default\", \n+            \"org.apache.openjpa.meta.MetaDataRepository\" };\n+        metaRepositoryPlugin.setAliases(aliases);\n+        metaRepositoryPlugin.setDefault(aliases[0]);\n+        metaRepositoryPlugin.setString(aliases[0]);\n+\n         connectionFactory = addObject(\"ConnectionFactory\");\n         connectionFactory.setInstantiatingGetter(\"getConnectionFactory\");\n \n@@ -328,29 +330,20 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n         connectionUserName = addString(\"ConnectionUserName\");\n         connectionPassword = addString(\"ConnectionPassword\");\n         connectionURL = addString(\"ConnectionURL\");\n-        connectionDriverName =\n-            addString(\"ConnectionDriverName\");\n-        connectionFactoryName =\n-            addString(\"ConnectionFactoryName\");\n-        connectionProperties =\n-            addString(\"ConnectionProperties\");\n+        connectionDriverName = addString(\"ConnectionDriverName\");\n+        connectionFactoryName = addString(\"ConnectionFactoryName\");\n+        connectionProperties = addString(\"ConnectionProperties\");\n         connectionFactoryProperties = addString(\"ConnectionFactoryProperties\");\n-        connection2UserName =\n-            addString(\"Connection2UserName\");\n-        connection2Password =\n-            addString(\"Connection2Password\");\n+        connection2UserName = addString(\"Connection2UserName\");\n+        connection2Password = addString(\"Connection2Password\");\n         connection2URL = addString(\"Connection2URL\");\n-        connection2DriverName =\n-            addString(\"Connection2DriverName\");\n-        connection2Properties =\n-            addString(\"Connection2Properties\");\n+        connection2DriverName = addString(\"Connection2DriverName\");\n+        connection2Properties = addString(\"Connection2Properties\");\n         connectionFactory2Properties = addString(\n             \"ConnectionFactory2Properties\");\n-        connectionFactory2Name =\n-            addString(\"ConnectionFactory2Name\");\n+        connectionFactory2Name = addString(\"ConnectionFactory2Name\");\n \n-        connectionFactoryMode =\n-            addBoolean(\"ConnectionFactoryMode\");\n+        connectionFactoryMode = addBoolean(\"ConnectionFactoryMode\");\n         aliases = new String[]{\n             \"local\", \"false\",\n             \"managed\", \"true\",\n@@ -404,13 +397,11 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n \n         ignoreChanges = addBoolean(\"IgnoreChanges\");\n \n-        nontransactionalRead =\n-            addBoolean(\"NontransactionalRead\");\n+        nontransactionalRead = addBoolean(\"NontransactionalRead\");\n         nontransactionalRead.setDefault(\"true\");\n         nontransactionalRead.set(true);\n \n-        nontransactionalWrite =\n-            addBoolean(\"NontransactionalWrite\");\n+        nontransactionalWrite = addBoolean(\"NontransactionalWrite\");\n         multithreaded = addBoolean(\"Multithreaded\");\n \n         fetchBatchSize = addInt(\"FetchBatchSize\");\n@@ -460,8 +451,7 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n         seqPlugin.setInstantiatingGetter(\"getSequenceInstance\");\n         addValue(seqPlugin);\n \n-        connectionRetainMode =\n-            addInt(\"ConnectionRetainMode\");\n+        connectionRetainMode = addInt(\"ConnectionRetainMode\");\n         aliases = new String[]{\n             \"on-demand\",\n             String.valueOf(ConnectionRetainModes.CONN_RETAIN_DEMAND),\n@@ -478,21 +468,17 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n         connectionRetainMode.setAliasListComprehensive(true);\n         connectionRetainMode.set(ConnectionRetainModes.CONN_RETAIN_DEMAND);\n \n-        filterListenerPlugins =\n-            addPluginList(\"FilterListeners\");\n+        filterListenerPlugins = addPluginList(\"FilterListeners\");\n         filterListenerPlugins.setInstantiatingGetter\n             (\"getFilterListenerInstances\");\n \n-        aggregateListenerPlugins =\n-            addPluginList(\"AggregateListeners\");\n+        aggregateListenerPlugins = addPluginList(\"AggregateListeners\");\n         aggregateListenerPlugins.setInstantiatingGetter\n             (\"getAggregateListenerInstances\");\n \n-        retryClassRegistration =\n-            addBoolean(\"RetryClassRegistration\");\n+        retryClassRegistration = addBoolean(\"RetryClassRegistration\");\n \n-        compatibilityPlugin =\n-            addPlugin(\"Compatibility\", true);\n+        compatibilityPlugin = addPlugin(\"Compatibility\", true);\n         aliases = new String[]{ \"default\", Compatibility.class.getName() };\n         compatibilityPlugin.setAliases(aliases);\n         compatibilityPlugin.setDefault(aliases[0]);\n@@ -522,10 +508,6 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {\n             loadDefaults();\n     }\n \n-    public String getProductName() {\n-        return \"openjpa\";\n-    }\n-\n     public Collection supportedOptions() {\n         return supportedOptions;\n     }\n@@ -842,15 +824,30 @@ public MetaDataFactory newMetaDataFactoryInstance() {\n             (MetaDataFactory.class, this);\n     }\n \n+    public void setMetaDataRepository(String meta) {\n+        assertNotReadOnly();\n+        this.metaRepositoryPlugin.setString(meta);\n+    }\n+\n+    public String getMetaDataRepository() {\n+        return metaRepositoryPlugin.getString();\n+    }\n+\n     public void setMetaDataRepository(MetaDataRepository meta) {\n         assertNotReadOnly();\n-        metaRepos = meta;\n+        metaRepository = meta;\n+    }\n+\n+    public MetaDataRepository getMetaDataRepositoryInstance() {\n+        if (metaRepository == null)\n+            metaRepository = (MetaDataRepository) metaRepositoryPlugin.\n+                instantiate(MetaDataRepository.class, this);\n+        return metaRepository;\n     }\n \n-    public MetaDataRepository getMetaDataRepository() {\n-        if (metaRepos == null)\n-            metaRepos = new MetaDataRepository(this);\n-        return metaRepos;\n+    public MetaDataRepository newMetaDataRepositoryInstance() {\n+        return (MetaDataRepository) metaRepositoryPlugin.instantiate\n+            (MetaDataRepository.class, this);\n     }\n \n     public void setConnectionUserName(String connectionUserName) {\n@@ -1396,26 +1393,23 @@ public Compatibility getCompatibilityInstance() {\n         return (Compatibility) compatibilityPlugin.get();\n     }\n \n+    public StoreFacadeTypeRegistry getStoreFacadeTypeRegistry() {\n+        return _storeFacadeRegistry;\n+    }\n+\n     public void instantiateAll() {\n         super.instantiateAll();\n-\n-        // instantiate singletons without values\n+        getMetaDataRepositoryInstance();\n         getRemoteCommitEventManager();\n-        getMetaDataRepository();\n     }\n \n     public void close() {\n+        ImplHelper.close(metaRepository);\n         ImplHelper.close(remoteEventManager);\n-        ImplHelper.close(metaRepos);\n         super.close();\n-        ProductDerivations.afterClose(this);\n     }\n \n     public Log getConfigurationLog() {\n         return getLog(LOG_RUNTIME);\n \t}\n-\n-    public StoreFacadeTypeRegistry getStoreFacadeTypeRegistry() {\n-        return _storeFacadeRegistry;\n-    }\n }"},{"sha":"4d3cbdd05cfe412d816bda454f5d1b7a46c16ac7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivation.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivation.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -60,9 +60,4 @@\n      * Called after the specification has been set.\n      */\n     public void afterSpecificationSet(OpenJPAConfiguration conf);\n-\n-    /**\n-     * Called after the configuration has been closed.\n-     */\n-    public void afterClose(OpenJPAConfiguration conf);\n }"},{"sha":"5d6f42f017a7c6bb3645b57c4ea5328a696af003","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivations.java","status":"modified","additions":0,"deletions":15,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivations.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivations.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -93,21 +93,6 @@ public static void afterSpecificationSet(OpenJPAConfiguration conf) {\n         }\n     }\n \n-    /**\n-     * Apply {@link ProductDerivation#afterClose} callbacks\n-     * to the the given instance. Exceptions are swallowed.\n-     */\n-    public static void afterClose(OpenJPAConfigurationImpl impl) {\n-        for (int i = 0; i < _derivations.length; i++) {\n-            try {\n-                _derivations[i].afterClose(impl);\n-            } catch (Exception e) {\n-                // logging not available\n-                e.printStackTrace();\n-            }\n-        }\n-    }\n-\n     /**\n      * Compare {@link ProductDerivation}s.\n      */"},{"sha":"17f682b26d158cffbd83253ef8b63410a4f36573","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractQueryCache.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractQueryCache.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -28,9 +28,10 @@\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.log.Log;\n-import org.apache.openjpa.lib.util.AbstractEventManager;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.ReferenceHashSet;\n+import org.apache.openjpa.lib.util.concurrent.AbstractConcurrentEventManager;\n+import org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashSet;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.util.Id;\n@@ -44,7 +45,7 @@\n  * @author Abe White\n  */\n public abstract class AbstractQueryCache\n-    extends AbstractEventManager //### use concurrent; need to mod OpenJPA\n+    extends AbstractConcurrentEventManager \n     implements QueryCache, Configurable {\n \n     private static final Localizer s_loc =\n@@ -216,7 +217,7 @@ private Set addTypes(Collection oids, Set classes) {\n         if (classes == null)\n             classes = new HashSet();\n \n-        MetaDataRepository repos = conf.getMetaDataRepository();\n+        MetaDataRepository repos = conf.getMetaDataRepositoryInstance();\n         ClassMetaData meta;\n         Object oid;\n         for (Iterator itr = oids.iterator(); itr.hasNext();) {\n@@ -314,7 +315,6 @@ protected void fireEvent(Object event, Object listener) {\n      * the only reference is held by the list of expiration listeners.\n      */\n     protected Collection newListenerCollection() {\n-        //### use concurrent\n-        return new ReferenceHashSet (ReferenceHashSet.WEAK);\n+        return new ConcurrentReferenceHashSet (ConcurrentReferenceHashSet.WEAK);\n \t}\n }"},{"sha":"475078297e121adddf812a93b91cb376ccfe5881","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentQueryCache.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentQueryCache.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -81,7 +81,7 @@ public int getSoftReferenceSize() {\n      * <code>size</code>, then this method will result in the cache\n      * flushing values.\n      */\n-    public synchronized void setSoftReferenceSize(int size) {\n+    public void setSoftReferenceSize(int size) {\n         _cache.setSoftReferenceSize(size);\n     }\n "},{"sha":"d6e75e36c2322b8573887ef05d1c3911af1afa23","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -34,9 +34,9 @@\n /**\n  * Cron-style cache eviction. Understands schedules based on cron format:\n  * <code>minute hour mday month wday</code>\n- *  For example:\n+ * For example:\n  * <code>15,30 6,19 2,10 1 2 </code>\n- *  Would run at 15 and 30 past the 6AM and 7PM, on the 2nd and 10th\n+ * Would run at 15 and 30 past the 6AM and 7PM, on the 2nd and 10th\n  * of January when its a Monday.\n  *\n  * @author Steve Kim"},{"sha":"1f5cf56053bad48c1097b9d079efe57bf0704b6e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -109,7 +109,7 @@ private void evictTypes(Collection classes) {\n             return;\n \n         MetaDataRepository mdr = _ctx.getConfiguration().\n-            getMetaDataRepository();\n+            getMetaDataRepositoryInstance();\n         ClassLoader loader = _ctx.getClassLoader();\n \n         Class cls;"},{"sha":"b31c1828533e0ff131b0a6450edd0afc2c806ed1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -211,7 +211,7 @@ public QueryContext getContext() {\n     public void setContext(QueryContext qctx) {\n         _query.setContext(qctx);\n         _sctx = qctx.getStoreContext();\n-        _repos = _sctx.getConfiguration().getMetaDataRepository();\n+        _repos = _sctx.getConfiguration().getMetaDataRepositoryInstance();\n     }\n \n     public boolean setQuery(Object query) {"},{"sha":"33ae63e436290fd632a60cdaac7279277bb9c5f6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -214,7 +214,7 @@ private static QueryKey createKey(QueryContext q, boolean packed,\n \n         // calculate the timeout for the key\n         MetaDataRepository repos = ctx.getConfiguration().\n-            getMetaDataRepository();\n+            getMetaDataRepositoryInstance();\n \n         // won't find metadata for interfaces.\n         if (candidateClass.isInterface())"},{"sha":"4a3a97d36fb98b21a1aacb37182a8d9d4f815189","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -93,7 +93,7 @@ public ApplicationIdTool(OpenJPAConfiguration conf, Class type) {\n         _log = conf.getLog(OpenJPAConfiguration.LOG_ENHANCE);\n         _type = type;\n \n-        MetaDataRepository repos = new MetaDataRepository(conf);\n+        MetaDataRepository repos = conf.newMetaDataRepositoryInstance();\n         repos.setValidate(repos.VALIDATE_NONE);\n         repos.setSourceMode(repos.MODE_MAPPING, false);\n         loadObjectIds(repos, true);\n@@ -1324,7 +1324,7 @@ public static boolean run(OpenJPAConfiguration conf, String[] args,\n     public static boolean run(OpenJPAConfiguration conf, String[] args,\n         Flags flags, ClassLoader loader)\n         throws IOException, ClassNotFoundException {\n-        MetaDataRepository repos = new MetaDataRepository(conf);\n+        MetaDataRepository repos = conf.newMetaDataRepositoryInstance();\n         repos.setValidate(repos.VALIDATE_NONE, true);\n         loadObjectIds(repos, flags.name == null && flags.suffix == null);\n \n@@ -1334,7 +1334,7 @@ public static boolean run(OpenJPAConfiguration conf, String[] args,\n             log.info(_loc.get(\"running-all-classes\"));\n             classes = repos.loadPersistentTypes(true, loader);\n         } else {\n-            ClassArgParser cap = conf.getMetaDataRepository().\n+            ClassArgParser cap = conf.getMetaDataRepositoryInstance().\n                 getMetaDataFactory().newClassArgParser();\n             cap.setClassLoader(loader);\n             classes = new HashSet();"},{"sha":"8617e532d45f84c043c4b35a00d4ecdbd700bcb7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/CodeGenerator.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/CodeGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/CodeGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/CodeGenerator.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -53,7 +53,8 @@\n      * Constructor. Supply configuration and class to generate code for.\n      */\n     public CodeGenerator(OpenJPAConfiguration conf, Class type) {\n-        this(new MetaDataRepository(conf).getMetaData(type, null, true));\n+        this(conf.newMetaDataRepositoryInstance().\n+            getMetaData(type, null, true));\n     }\n \n     /**"},{"sha":"01ea77c5551bd5609257a1fc518ebf6a7285a75c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -155,7 +155,7 @@ public PCEnhancer(OpenJPAConfiguration conf, BCClass type,\n         _log = conf.getLog(OpenJPAConfiguration.LOG_ENHANCE);\n \n         if (repos == null) {\n-            _repos = new MetaDataRepository(conf);\n+            _repos = conf.newMetaDataRepositoryInstance();\n             _repos.setSourceMode(MetaDataRepository.MODE_META);\n         } else\n             _repos = repos;\n@@ -3408,7 +3408,7 @@ public static boolean run(OpenJPAConfiguration conf, String[] args,\n             loader = new TemporaryClassLoader(loader);\n \n         if (repos == null) {\n-            repos = new MetaDataRepository(conf);\n+            repos = conf.newMetaDataRepositoryInstance();\n             repos.setSourceMode(MetaDataRepository.MODE_META);\n         }\n \n@@ -3418,7 +3418,7 @@ public static boolean run(OpenJPAConfiguration conf, String[] args,\n             log.info(_loc.get(\"running-all-classes\"));\n             classes = repos.loadPersistentTypes(true, loader);\n         } else {\n-            ClassArgParser cap = conf.getMetaDataRepository().\n+            ClassArgParser cap = conf.getMetaDataRepositoryInstance().\n                 getMetaDataFactory().newClassArgParser();\n             cap.setClassLoader(loader);\n             classes = new HashSet();"},{"sha":"cd74810a21234c14f1724b11dc1a6009cdf3bc07","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java","status":"modified","additions":14,"deletions":16,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -20,7 +20,9 @@\n import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.Map;\n-import java.util.WeakHashMap;\n+\n+import org.apache.openjpa.lib.util.ReferenceMap;\n+import org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap;\n \n /**\n  * Tracks registered persistence-capable classes.\n@@ -37,8 +39,8 @@\n     private static final String NO_META = \"No metadata found for class \";\n \n     // map of pc classes to meta structs; weak so the VM can GC classes\n-    private static final Map _metas = new WeakHashMap();\n-\n+    private static final Map _metas = new ConcurrentReferenceHashMap\n+        (ReferenceMap.WEAK, ReferenceMap.HARD);\n     // register class listeners\n     private static final Collection _listeners = new LinkedList();\n \n@@ -49,6 +51,8 @@ public static void addRegisterClassListener(RegisterClassListener rcl) {\n         if (rcl == null)\n             return;\n \n+        // we have to be positive that every listener gets notified for\n+        // every class, so lots of locking\n         synchronized (_listeners) {\n             _listeners.add(rcl);\n         }\n@@ -182,14 +186,15 @@ public static void register(Class pcClass, String[] fieldNames,\n         if (pcClass == null)\n             throw new NullPointerException();\n \n+        // we have to be positive that every listener gets notified for\n+        // every class, so lots of locking\n         Meta meta = new Meta(pc, fieldNames, fieldTypes, sup, alias);\n         synchronized (_metas) {\n             _metas.put(pcClass, meta);\n         }\n         synchronized (_listeners) {\n-            if (!_listeners.isEmpty())\n-                for (Iterator i = _listeners.iterator(); i.hasNext();)\n-                    ((RegisterClassListener) i.next()).register(pcClass);\n+            for (Iterator i = _listeners.iterator(); i.hasNext();)\n+                ((RegisterClassListener) i.next()).register(pcClass);\n         }\n     }\n \n@@ -198,28 +203,21 @@ public static void register(Class pcClass, String[] fieldNames,\n      * persistence-capable classes.\n      */\n     public static Collection getRegisteredTypes() {\n-        synchronized (_metas) {\n-            return Collections.unmodifiableCollection(_metas.keySet());\n-        }\n+        return Collections.unmodifiableCollection(_metas.keySet());\n     }\n \n     /**\n      * Returns <code>true</code> if <code>cls</code> is already registered.\n      */\n     public static boolean isRegistered(Class cls) {\n-        synchronized (_metas) {\n-            return _metas.containsKey(cls);\n-        }\n+        return _metas.containsKey(cls);\n     }\n \n     /**\n      * Look up the metadata for a <code>PersistenceCapable</code> class.\n      */\n     private static Meta getMeta(Class pcClass) {\n-        Meta ret;\n-        synchronized (_metas) {\n-            ret = (Meta) _metas.get(pcClass);\n-        }\n+        Meta ret = (Meta) _metas.get(pcClass);\n         if (ret == null)\n             throw new IllegalStateException(NO_META + pcClass.getName());\n         return ret;"},{"sha":"d26ad164f78c3846d253048c228e71d220bac321","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/SingleJVMRemoteCommitProvider.java","status":"modified","additions":14,"deletions":19,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/event/SingleJVMRemoteCommitProvider.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/event/SingleJVMRemoteCommitProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/SingleJVMRemoteCommitProvider.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -15,10 +15,11 @@\n  */\n package org.apache.openjpa.event;\n \n-import java.util.HashSet;\n import java.util.Iterator;\n import java.util.Set;\n \n+import org.apache.openjpa.lib.util.concurrent.ConcurrentHashSet;\n+\n /**\n  * Single-JVM-only implementation of {@link RemoteCommitProvider}\n  * that listens for object modifications and propagates those changes\n@@ -33,34 +34,28 @@\n public class SingleJVMRemoteCommitProvider\n     extends AbstractRemoteCommitProvider {\n \n-    private static Set s_providers = new HashSet();\n+    private static Set s_providers = new ConcurrentHashSet();\n \n     public SingleJVMRemoteCommitProvider() {\n-        synchronized (s_providers) {\n-            s_providers.add(this);\n-        }\n+        s_providers.add(this);\n     }\n \n     public void broadcast(RemoteCommitEvent event) {\n-        synchronized (s_providers) {\n-            SingleJVMRemoteCommitProvider provider;\n-            for (Iterator iter = s_providers.iterator(); iter.hasNext();) {\n-                provider = (SingleJVMRemoteCommitProvider) iter.next();\n+        SingleJVMRemoteCommitProvider provider;\n+        for (Iterator iter = s_providers.iterator(); iter.hasNext();) {\n+            provider = (SingleJVMRemoteCommitProvider) iter.next();\n \n-                // don't notify this object -- this provider's factory\n-                // should not be notified of commits that originated\n-                // with one of its brokers\n-                if (provider == this)\n-                    continue;\n+            // don't notify this object -- this provider's factory\n+            // should not be notified of commits that originated\n+            // with one of its brokers\n+            if (provider == this)\n+                continue;\n \n-                provider.fireEvent(event);\n-            }\n+            provider.fireEvent(event);\n         }\n     }\n \n     public void close() {\n-        synchronized (s_providers) {\n-            s_providers.remove(this);\n-        }\n+        s_providers.remove(this);\n     }\n }"},{"sha":"9509ecebca27853093232f920e10799641e73d3e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -215,8 +215,8 @@ private void loadPersistentTypes(ClassLoader envLoader) {\n         ClassLoader loader = _conf.getClassResolverInstance().\n             getClassLoader(getClass(), envLoader);\n         if (_pcClassNames == null) {\n-            Collection clss = _conf.getMetaDataRepository().loadPersistentTypes\n-                (false, loader);\n+            Collection clss = _conf.getMetaDataRepositoryInstance().\n+                loadPersistentTypes(false, loader);\n             if (clss.isEmpty())\n                 _pcClassNames = Collections.EMPTY_SET;\n             else {\n@@ -294,7 +294,7 @@ public void close() {\n \n             // remove metadata repository from listener list\n             PCRegistry.removeRegisterClassListener\n-                (_conf.getMetaDataRepository());\n+                (_conf.getMetaDataRepositoryInstance());\n \n             _conf.close();\n             _closed = new IllegalStateException();\n@@ -523,7 +523,7 @@ public void makeReadOnly() {\n \n             // register the metdata repository to auto-load persistent types\n             // and make sure types are enhanced\n-            MetaDataRepository repos = _conf.getMetaDataRepository();\n+            MetaDataRepository repos = _conf.getMetaDataRepositoryInstance();\n             repos.setValidate(repos.VALIDATE_RUNTIME, true);\n             repos.setResolve(repos.MODE_MAPPING_INIT, true);\n             PCRegistry.addRegisterClassListener(repos);"},{"sha":"e685ff8b78cf7da827960a7e1e2cbe9646f78108","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCResultObjectProvider.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCResultObjectProvider.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -63,7 +63,7 @@ public Object getResultObject()\n         throws Exception {\n         Class type = getPCType();\n         MetaDataRepository repos = ctx.getConfiguration().\n-            getMetaDataRepository();\n+            getMetaDataRepositoryInstance();\n         ClassMetaData meta = repos.getMetaData\n             (type, ctx.getClassLoader(), true);\n "},{"sha":"085d120b0e9caff7cc0ca1eed3729072415953e8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -66,7 +66,7 @@ public AttachManager(BrokerImpl broker, boolean copyNew, OpCallbacks call) {\n         _proxy = broker.getConfiguration().getProxyManagerInstance();\n         _call = call;\n         _copyNew = copyNew;\n-        _failFast = (broker.getConfiguration().getMetaDataRepository().\n+        _failFast = (broker.getConfiguration().getMetaDataRepositoryInstance().\n             getMetaDataFactory().getDefaults().getCallbackMode()\n             & CallbackModes.CALLBACK_FAIL_FAST) != 0;\n     }\n@@ -230,7 +230,7 @@ Object attach(Object toAttach, PersistenceCapable into,\n \n         //### need to handle ACT_RUN without also ACT_CASCADE\n         ClassMetaData meta = _broker.getConfiguration().\n-            getMetaDataRepository().getMetaData(toAttach.getClass(),\n+            getMetaDataRepositoryInstance().getMetaData(toAttach.getClass(),\n             _broker.getClassLoader(), true);\n         return getStrategy(toAttach).attach(this, toAttach, meta, into,\n             owner, ownerMeta);"},{"sha":"2bd566d5ea9ed3e2cdc9c0639b44db55c83b23ba","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -115,7 +115,7 @@ private static Class getFactoryClass(ConfigurationProvider conf,\n         if (loader == null)\n             loader = Thread.currentThread().getContextClassLoader();\n \n-        Object cls = BrokerFactoryValue.getBrokerFactoryClassName(conf);\n+        Object cls = BrokerFactoryValue.get(conf);\n         if (cls instanceof Class)\n             return (Class) cls;\n "},{"sha":"f188e1b2d9656e9857b74b967b34c21c98bbf90f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":32,"deletions":26,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -255,8 +255,8 @@ public void initialize(AbstractBrokerFactory factory,\n         _log = _conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n         _cache = new ManagedCache(newManagedObjectCache());\n         _lifeEventManager = new LifecycleEventManager();\n-        _callbackMode = _conf.getMetaDataRepository().getMetaDataFactory().\n-            getDefaults().getCallbackMode();\n+        _callbackMode = _conf.getMetaDataRepositoryInstance().\n+            getMetaDataFactory(). getDefaults().getCallbackMode();\n         _connRetainMode = connMode;\n         _managed = managed;\n         if (managed)\n@@ -1009,7 +1009,7 @@ public Class getObjectIdType(Class cls) {\n \n         beginOperation(false);\n         try {\n-            ClassMetaData meta = _conf.getMetaDataRepository().\n+            ClassMetaData meta = _conf.getMetaDataRepositoryInstance().\n                 getMetaData(cls, _loader, false);\n             if (meta == null\n                 || meta.getIdentityType() == ClassMetaData.ID_UNKNOWN)\n@@ -1033,7 +1033,7 @@ public Object newObjectId(Class cls, Object val) {\n \n         beginOperation(false);\n         try {\n-            ClassMetaData meta = _conf.getMetaDataRepository().\n+            ClassMetaData meta = _conf.getMetaDataRepositoryInstance().\n                 getMetaData(cls, _loader, true);\n \n             // delegate to store manager for datastore ids\n@@ -1092,7 +1092,7 @@ private StateManagerImpl newStateManagerImpl(Object oid, boolean copy) {\n \n         // find metadata for the oid\n         Class pcType = _store.getManagedType(oid);\n-        MetaDataRepository repos = _conf.getMetaDataRepository();\n+        MetaDataRepository repos = _conf.getMetaDataRepositoryInstance();\n         ClassMetaData meta;\n         if (pcType != null)\n             meta = repos.getMetaData(pcType, _loader, true);\n@@ -2266,8 +2266,8 @@ public OpenJPAStateManager persist(Object obj, Object id,\n                         setFailedObject(obj);\n             }\n \n-            ClassMetaData meta = _conf.getMetaDataRepository().getMetaData\n-                (obj.getClass(), _loader, true);\n+            ClassMetaData meta = _conf.getMetaDataRepositoryInstance().\n+                getMetaData(obj.getClass(), _loader, true);\n             fireLifecycleEvent(obj, null, meta, LifecycleEvent.BEFORE_PERSIST);\n \n             // create id for instance\n@@ -2277,7 +2277,7 @@ public OpenJPAStateManager persist(Object obj, Object id,\n                 else if (meta.getIdentityType() == ClassMetaData.ID_UNKNOWN)\n                     throw new UserException(_loc.get(\"meta-unknownid\", meta));\n                 else\n-                    id = StateManagerId.newInstance();\n+                    id = StateManagerId.newInstance(this);\n             }\n \n             // make sure we don't already have the instance cached\n@@ -2320,10 +2320,10 @@ private void cascadeTransient(int op, Object obj, OpCallbacks call,\n         if (pc.pcGetStateManager() != null)\n             throw newDetachedException(obj, errOp);\n \n-        ClassMetaData meta = _conf.getMetaDataRepository().getMetaData\n-            (obj.getClass(), _loader, true);\n+        ClassMetaData meta = _conf.getMetaDataRepositoryInstance().\n+            getMetaData(obj.getClass(), _loader, true);\n         StateManagerImpl sm = new StateManagerImpl(StateManagerId.\n-            newInstance(), meta, this);\n+            newInstance(this), meta, this);\n         sm.initialize(pc, PCState.TLOADED);\n         try {\n             switch (op) {\n@@ -2492,7 +2492,7 @@ public OpenJPAStateManager embed(Object obj, Object id,\n                 throw new InternalException(_loc.get(\"bad-embed\", ownerMeta));\n \n             if (id == null)\n-                id = StateManagerId.newInstance();\n+                id = StateManagerId.newInstance(this);\n \n             StateManagerImpl sm = new StateManagerImpl(id, meta, this);\n             sm.setOwner((StateManagerImpl) owner, ownerMeta);\n@@ -2568,7 +2568,8 @@ OpenJPAStateManager copy(OpenJPAStateManager copy, PCState state) {\n             if (!copy.isEmbedded())\n                 sm = getStateManagerImplById(oid, true);\n             if (sm == null) {\n-                MetaDataRepository repos = _conf.getMetaDataRepository();\n+                MetaDataRepository repos = _conf.\n+                    getMetaDataRepositoryInstance();\n                 ClassMetaData meta = repos.getMetaData(type, _loader, true);\n                 // construct a new state manager with all info known\n                 sm = new StateManagerImpl(oid, meta, this);\n@@ -3161,11 +3162,11 @@ public void transactionalAll(Collection objs, boolean updateVersion,\n \n                     if (sm == null) {\n                         // manage transient instance\n-                        meta = _conf.getMetaDataRepository().getMetaData\n-                            (obj.getClass(), _loader, true);\n+                        meta = _conf.getMetaDataRepositoryInstance().\n+                            getMetaData(obj.getClass(), _loader, true);\n \n                         sm = new StateManagerImpl\n-                            (StateManagerId.newInstance(), meta, this);\n+                            (StateManagerId.newInstance(this), meta, this);\n                         sm.initialize(assertPersistenceCapable(obj),\n                             PCState.TCLEAN);\n                     } else if (sm.isPersistent()) {\n@@ -3234,9 +3235,9 @@ public void transactional(Object obj, boolean updateVersion,\n                 _flags |= FLAG_FLUSH_REQUIRED; // version check/up\n             } else if (sm == null) {\n                 // manage transient instance\n-                ClassMetaData meta = _conf.getMetaDataRepository().\n+                ClassMetaData meta = _conf.getMetaDataRepositoryInstance().\n                     getMetaData(obj.getClass(), _loader, true);\n-                Object id = StateManagerId.newInstance();\n+                Object id = StateManagerId.newInstance(this);\n                 sm = new StateManagerImpl(id, meta, this);\n                 sm.initialize(assertPersistenceCapable(obj),\n                     PCState.TCLEAN);\n@@ -4078,7 +4079,7 @@ public boolean isDetached(Object obj) {\n             return detached.booleanValue();\n \n         // last resort: instance is detached if it has a store record\n-        ClassMetaData meta = _conf.getMetaDataRepository().\n+        ClassMetaData meta = _conf.getMetaDataRepositoryInstance().\n             getMetaData(pc.getClass(), _loader, true);\n         Object oid = ApplicationIds.create(pc, meta);\n         if (oid == null)\n@@ -4616,37 +4617,42 @@ public boolean retainAll(Collection c) {\n \n         public static final String STRING_PREFIX = \"openjpasm:\";\n \n-        private static long _generator = System.currentTimeMillis();\n+        private static long _generator = 0;\n \n+        private final int _bhash;\n         private final long _id;\n \n-        public static synchronized StateManagerId newInstance() {\n-            return new StateManagerId(_generator++);\n+        public static StateManagerId newInstance(Broker b) {\n+            return new StateManagerId(System.identityHashCode(b), _generator++);\n         }\n \n-        private StateManagerId(long id) {\n+        private StateManagerId(int bhash, long id) {\n+            _bhash = bhash;\n             _id = id;\n         }\n \n         public StateManagerId(String str) {\n             str = str.substring(STRING_PREFIX.length());\n-            _id = Long.parseLong(str);\n+            int idx = str.indexOf(':');\n+            _bhash = Integer.parseInt(str.substring(0, idx));\n+            _id = Long.parseLong(str.substring(idx + 1));\n         }\n \n         public boolean equals(Object other) {\n             if (other == this)\n                 return true;\n             if (!(other instanceof StateManagerId))\n                 return false;\n-            return _id == ((StateManagerId) other)._id;\n+            StateManagerId sid = (StateManagerId) other;\n+            return _bhash == sid._bhash && _id == sid._id;\n         }\n \n         public int hashCode() {\n             return (int) (_id ^ (_id >>> 32));\n         }\n \n         public String toString() {\n-            return STRING_PREFIX + _id;\n+            return STRING_PREFIX + _bhash + \":\" + _id;\n         }\n     }\n "},{"sha":"c460b32b278cc5c3511379c4a90dd112abeca82d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -450,4 +450,20 @@ public Object getHint(String name) {\n             throw translate(re);\n \t\t}\n \t}\n+\n+    public void lock() {\n+        try {\n+            _fetch.lock();\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+\t\t}\n+\t}\n+\n+    public void unlock() {\n+        try {\n+            _fetch.unlock();\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+\t\t}\n+\t}\n }"},{"sha":"43b74626b89d28c472e033ac9a9f9728eb0a695d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -244,7 +244,7 @@ public DetachManager(BrokerImpl broker, boolean full, OpCallbacks call) {\n         _copy = !full;\n         _flushed = full;\n         _call = call;\n-        _failFast = (broker.getConfiguration().getMetaDataRepository().\n+        _failFast = (broker.getConfiguration().getMetaDataRepositoryInstance().\n             getMetaDataFactory().getDefaults().getCallbackMode()\n             & CallbackModes.CALLBACK_FAIL_FAST) != 0;\n "},{"sha":"9551d742c750bcc048be8c3c1a7d2bd24e63aea7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateAttachStrategy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateAttachStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateAttachStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateAttachStrategy.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -47,7 +47,7 @@ protected Object getDetachedObjectId(AttachManager manager,\n         PersistenceCapable pc = (PersistenceCapable) toAttach;\n         Broker broker = manager.getBroker();\n         ClassMetaData meta = broker.getConfiguration().\n-            getMetaDataRepository().getMetaData(toAttach.getClass(),\n+            getMetaDataRepositoryInstance().getMetaData(toAttach.getClass(),\n             broker.getClassLoader(), true);\n \n         switch (meta.getIdentityType()) {"},{"sha":"294ee4ddb418c10b0cb65ecbcb48ccbd0a943944","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -50,7 +50,7 @@\n \n     public DetachedValueStateManager(Object pc, StoreContext ctx) {\n         this((PersistenceCapable) pc, ctx.getConfiguration().\n-            getMetaDataRepository().getMetaData(pc.getClass(),\n+            getMetaDataRepositoryInstance().getMetaData(pc.getClass(),\n             ctx.getClassLoader(), true), ctx);\n     }\n "},{"sha":"4cff23f8fd425c323f70452a176c57326b91ffe1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExtentImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExtentImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExtentImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExtentImpl.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -115,7 +115,7 @@ public Iterator iterator() {\n \n             // add database iterators for each implementing class\n             MetaDataRepository repos = _broker.getConfiguration().\n-                getMetaDataRepository();\n+                getMetaDataRepositoryInstance();\n             ClassMetaData meta = repos.getMetaData(_type,\n                 _broker.getClassLoader(), false);\n "},{"sha":"bccaa8eb99580ab2b04f2b2a6fa8d00c589303b1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","status":"modified","additions":31,"deletions":9,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -42,10 +42,14 @@\n      * Special fetch group name that is used by OpenJPA to indicate that all\n      * fetch groups should be loaded by this configuration.\n      */\n-    public static final String FETCH_GROUP_ALL =\n-        \"org.apache.openjpa.kernel.FetchConfiguration.FETCH_GROUP_ALL\";\n+    public static final String FETCH_GROUP_ALL = \"openjpa.FetchGroupAll\";\n \n+    /**\n+     * Special fetch group name that is used by OpenJPA to denote the default\n+     * fetch group.\n+     */\n     public static final String FETCH_GROUP_DEFAULT = \"default\";\n+\n     /**\n      * Return the context assiciated with this configuration;\n      * may be null if it has not been set or this object has been serialized.\n@@ -73,14 +77,14 @@\n \n     /**\n      * Return the fetch batch size for large result set support.\n-     * Defaults to the\t<code>org.apache.openjpa.FetchBatchSize</code> setting. Note\n+     * Defaults to the\t<code>openjpa.FetchBatchSize</code> setting. Note\n      * that this property will be ignored under some data stores.\n      */\n     public int getFetchBatchSize();\n \n     /**\n      * Set the fetch batch size for large result set support.\n-     * Defaults to the\t<code>org.apache.openjpa.FetchBatchSize</code> setting. Note\n+     * Defaults to the\t<code>openjpa.FetchBatchSize</code> setting. Note\n      * that this property will be ignored under some data stores.\n      */\n     public FetchConfiguration setFetchBatchSize(int fetchBatchSize);\n@@ -129,9 +133,7 @@\n     /**\n      * Returns immutable set of names of the fetch groups that this component\n      * will use when loading objects. Defaults to the\n-     * <code>org.apache.openjpa.FetchGroups</code> setting.\n-     *\n-     * @return empty set if no group has been added.\n+     * <code>openjpa.FetchGroups</code> setting.  This set is not thread safe.\n      */\n     public Set getFetchGroups();\n \n@@ -185,7 +187,8 @@\n \n     /**\n      * Returns the set of fully-qualified field names that this component\n-     * will use when loading objects. Defaults to the empty set.\n+     * will use when loading objects. Defaults to the empty set.  This set is\n+     * not thread safe.\n      */\n     public Set getFields();\n \n@@ -225,14 +228,23 @@\n     public FetchConfiguration clearFields();\n \n     /**\n-     * Return the root instances.\n+     * Root classes for recursive operations. This set is not thread safe.\n      */\n     public Set getRootClasses();\n \n+    /**\n+     * Root classes for recursive operations.\n+     */\n     public FetchConfiguration setRootClasses(Collection classes);\n \n+    /**\n+     * Root instances for recursive operations. This set is not thread safe.\n+     */\n     public Set getRootInstances();\n \n+    /**\n+     * Root instances for recursive operations.\n+     */\n     public FetchConfiguration setRootInstances(Collection roots);\n \n     /**\n@@ -310,4 +322,14 @@\n \t * @since\t4.0\n \t */\n \tpublic Object getHint (String name);\n+\n+    /**\n+     * Synchronize on internal lock if multithreaded is true.\n+     */\n+    public void lock();\n+\n+    /**\n+     * Release internal lock if multithreaded is true.\n+     */\n+    public void unlock();\n }"},{"sha":"ea53664ec2edd7c02605df8f9321bae127b513b1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","status":"modified","additions":188,"deletions":121,"changes":309,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -34,8 +34,8 @@\n import org.apache.openjpa.lib.rop.WindowResultList;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.InternalException;\n-import org.apache.openjpa.util.MetaDataException;\n import org.apache.openjpa.util.NoTransactionException;\n+import org.apache.openjpa.util.UserException;\n \n /**\n  * Allows configuration and optimization of how objects are loaded from\n@@ -79,9 +79,8 @@ public void setContext(StoreContext ctx) {\n         if (ctx == null)\n             return;\n \n-        OpenJPAConfiguration conf = ctx.getConfiguration();\n-\n         // initialize to conf info\n+        OpenJPAConfiguration conf = ctx.getConfiguration();\n         setFetchBatchSize(conf.getFetchBatchSize());\n         setFlushBeforeQueries(conf.getFlushBeforeQueriesConstant());\n         clearFetchGroups();\n@@ -131,7 +130,6 @@ public FetchConfiguration setFetchBatchSize(int fetchBatchSize) {\n             fetchBatchSize = _ctx.getConfiguration().getFetchBatchSize();\n         if (fetchBatchSize != DEFAULT)\n             _fetchBatchSize = fetchBatchSize;\n-\n         return this;\n     }\n \n@@ -141,7 +139,6 @@ public int getMaxFetchDepth() {\n \n     public FetchConfiguration setMaxFetchDepth(int depth) {\n         _maxFetchDepth = depth;\n-\n         return this;\n     }\n \n@@ -167,25 +164,22 @@ else if (flush != DEFAULT)\n         return this;\n     }\n \n-    public synchronized Set getFetchGroups() {\n-        return getImmutableSet(_fetchGroups);\n+    public Set getFetchGroups() {\n+        return (_fetchGroups == null) ? Collections.EMPTY_SET : _fetchGroups;\n     }\n \n-    public synchronized boolean hasFetchGroup(String group) {\n+    public boolean hasFetchGroup(String group) {\n         return _fetchGroups != null\n             && (_fetchGroups.contains(group)\n             || _fetchGroups.contains(FETCH_GROUP_ALL));\n     }\n \n-    public synchronized boolean hasAnyFetchGroup(Set groups) {\n-        if (_fetchGroups != null && groups != null) {\n-            Iterator iter = groups.iterator();\n-            while (iter.hasNext()) {\n-                Object fg = iter.next();\n-                if (fg != null && hasFetchGroup(fg.toString()))\n-                    return true;\n-            }\n-        }\n+    public boolean hasAnyFetchGroup(Set groups) {\n+        if (groups == null || groups.isEmpty())\n+            return false;\n+        for (Iterator itr = groups.iterator(); itr.hasNext();)\n+            if (hasFetchGroup((String) itr.next()))\n+                return true;\n         return false;\n     }\n \n@@ -194,96 +188,138 @@ public synchronized boolean hasAnyFetchGroup(Set groups) {\n      *\n      * @param name must not be null or empty.\n      */\n-    public synchronized FetchConfiguration addFetchGroup(String name) {\n+    public FetchConfiguration addFetchGroup(String name) {\n         if (StringUtils.isEmpty(name))\n-            throw new MetaDataException(_loc.get(\"null-fg\", name));\n-\n-        if (_fetchGroups == null)\n-            _fetchGroups = new HashSet();\n-        _fetchGroups.add(name);\n+            throw new UserException(_loc.get(\"null-fg\"));\n+\n+        lock();\n+        try {\n+            if (_fetchGroups == null)\n+                _fetchGroups = new HashSet();\n+            _fetchGroups.add(name);\n+        } finally {\n+            unlock();\n+        }\n         return this;\n     }\n \n-    public synchronized FetchConfiguration addFetchGroups(Collection groups) {\n+    public FetchConfiguration addFetchGroups(Collection groups) {\n         if (groups == null || groups.isEmpty())\n             return this;\n-\n-        Iterator iter = groups.iterator();\n-        while (iter.hasNext()) {\n-            Object group = iter.next();\n-            if (group instanceof String)\n-                addFetchGroup((String) group);\n-        }\n+        for (Iterator itr = groups.iterator(); itr.hasNext();)\n+            addFetchGroup((String) itr.next());\n         return this;\n     }\n \n-    public synchronized FetchConfiguration removeFetchGroup(String group) {\n-        if (_fetchGroups != null)\n-            _fetchGroups.remove(group);\n+    public FetchConfiguration removeFetchGroup(String group) {\n+        lock();\n+        try {\n+            if (_fetchGroups != null)\n+                _fetchGroups.remove(group);\n+        } finally {\n+            unlock();\n+        }\n         return this;\n     }\n \n-    public synchronized FetchConfiguration removeFetchGroups(\n-        Collection groups) {\n-        if (_fetchGroups != null)\n-            _fetchGroups.removeAll(groups);\n+    public FetchConfiguration removeFetchGroups(Collection groups) {\n+        lock();\n+        try {\n+            if (_fetchGroups != null)\n+                _fetchGroups.removeAll(groups);\n+        } finally {\n+            unlock();\n+        }\n         return this;\n     }\n \n-    public synchronized FetchConfiguration clearFetchGroups() {\n-        if (_fetchGroups != null)\n-            _fetchGroups.clear();\n+    public FetchConfiguration clearFetchGroups() {\n+        lock();\n+        try {\n+            if (_fetchGroups != null)\n+                _fetchGroups.clear();\n+        } finally {\n+            unlock();\n+        }\n         return this;\n     }\n \n-    public synchronized FetchConfiguration resetFetchGroups() {\n+    public FetchConfiguration resetFetchGroups() {\n         clearFetchGroups();\n         if (_ctx != null)\n             addFetchGroups(Arrays.asList(_ctx.getConfiguration().\n                 getFetchGroupsList()));\n         return this;\n     }\n \n-    public synchronized Set getFields() {\n-        return getImmutableSet(_fields);\n+    public Set getFields() {\n+        return (_fields == null) ? Collections.EMPTY_SET : _fields;\n     }\n \n-    public synchronized boolean hasField(String field) {\n-        return _fields != null && field != null && _fields.contains(field);\n+    public boolean hasField(String field) {\n+        return _fields != null && _fields.contains(field);\n     }\n \n-    public synchronized FetchConfiguration addField(String field) {\n-        if (_fields == null)\n-            _fields = new HashSet();\n-        _fields.add(field);\n+    public FetchConfiguration addField(String field) {\n+        if (StringUtils.isEmpty(field))\n+            throw new UserException(_loc.get(\"null-field\"));\n+\n+        lock();\n+        try {\n+            if (_fields == null)\n+                _fields = new HashSet();\n+            _fields.add(field);\n+        } finally {\n+            unlock();\n+        }\n         return this;\n     }\n \n-    public synchronized FetchConfiguration addFields(Collection fields) {\n-        if (fields.isEmpty())\n+    public FetchConfiguration addFields(Collection fields) {\n+        if (fields == null || fields.isEmpty())\n             return this;\n \n-        if (_fields == null)\n-            _fields = new HashSet();\n-        _fields.addAll(fields);\n+        lock();\n+        try {\n+            if (_fields == null)\n+                _fields = new HashSet();\n+            _fields.addAll(fields);\n+        } finally {\n+            unlock();\n+        }\n         return this;\n     }\n \n-    public synchronized FetchConfiguration removeField(String field) {\n-        if (_fields != null)\n-            _fields.remove(field);\n+    public FetchConfiguration removeField(String field) {\n+        lock();\n+        try {\n+            if (_fields != null)\n+                _fields.remove(field);\n+        } finally {\n+            unlock();\n+        }\n         return this;\n     }\n \n-    public synchronized FetchConfiguration removeFields(Collection fields) {\n-        if (_fields != null)\n-            _fields.removeAll(fields);\n+    public FetchConfiguration removeFields(Collection fields) {\n+        lock();\n+        try {\n+            if (_fields != null)\n+                _fields.removeAll(fields);\n+        } finally {\n+            unlock();\n+        }\n         return this;\n     }\n \n-    public synchronized FetchConfiguration clearFields() {\n-        if (_fields != null)\n-            _fields.clear();\n+    public FetchConfiguration clearFields() {\n+        lock();\n+        try {\n+            if (_fields != null)\n+                _fields.clear();\n+        } finally {\n+            unlock();\n+        }\n         return this;\n     }\n \n@@ -306,12 +342,18 @@ public int getReadLockLevel() {\n     public FetchConfiguration setReadLockLevel(int level) {\n         if (_ctx == null)\n             return this;\n-        assertActiveTransaction();\n-        if (level == DEFAULT)\n-            _readLockLevel = _ctx.getConfiguration().\n-                getReadLockLevelConstant();\n-        else\n-            _readLockLevel = level;\n+\n+        lock();\n+        try {\n+            assertActiveTransaction();\n+            if (level == DEFAULT)\n+                _readLockLevel = _ctx.getConfiguration().\n+                    getReadLockLevelConstant();\n+            else\n+                _readLockLevel = level;\n+        } finally {\n+            unlock();\n+        }\n         return this;\n     }\n \n@@ -322,12 +364,18 @@ public int getWriteLockLevel() {\n     public FetchConfiguration setWriteLockLevel(int level) {\n         if (_ctx == null)\n             return this;\n-        assertActiveTransaction();\n-        if (level == DEFAULT)\n-            _writeLockLevel = _ctx.getConfiguration().\n-                getWriteLockLevelConstant();\n-        else\n-            _writeLockLevel = level;\n+\n+        lock();\n+        try {\n+            assertActiveTransaction();\n+            if (level == DEFAULT)\n+                _writeLockLevel = _ctx.getConfiguration().\n+                    getWriteLockLevelConstant();\n+            else\n+                _writeLockLevel = level;\n+        } finally {\n+            unlock();\n+        }\n         return this;\n     }\n \n@@ -359,74 +407,93 @@ public String toString() {\n             return \"Default\";\n \n         StringBuffer buf = new StringBuffer();\n-        if (_fetchGroups != null && !_fetchGroups.isEmpty()) {\n-            for (Iterator itr = _fetchGroups.iterator(); itr.hasNext();) {\n-                if (buf.length() > 0)\n-                    buf.append(\", \");\n-                buf.append(itr.next());\n+        lock();\n+        try {\n+            if (_fetchGroups != null && !_fetchGroups.isEmpty()) {\n+                for (Iterator itr = _fetchGroups.iterator(); itr.hasNext();) {\n+                    if (buf.length() > 0)\n+                        buf.append(\", \");\n+                    buf.append(itr.next());\n+                }\n             }\n-        }\n-        if (_fields != null && !_fields.isEmpty()) {\n-            for (Iterator itr = _fields.iterator(); itr.hasNext();) {\n-                if (buf.length() > 0)\n-                    buf.append(\", \");\n-                buf.append(itr.next());\n+            if (_fields != null && !_fields.isEmpty()) {\n+                for (Iterator itr = _fields.iterator(); itr.hasNext();) {\n+                    if (buf.length() > 0)\n+                        buf.append(\", \");\n+                    buf.append(itr.next());\n+                }\n             }\n+        } finally {\n+            unlock();\n         }\n         return buf.toString();\n     }\n \n-    public synchronized void setHint(String name, Object value) {\n-        if (_hints == null)\n-            _hints = new HashMap();\n-\n-        synchronized (_hints) {\n+    public void setHint(String name, Object value) {\n+        lock();\n+        try {\n+            if (_hints == null)\n+                _hints = new HashMap();\n             _hints.put(name, value);\n+        } finally {\n+            unlock();\n         }\n     }\n \n     public Object getHint(String name) {\n-        if (_hints == null)\n-            return null;\n-\n-        synchronized (_hints) {\n-            return _hints.get(name);\n-        }\n+        return (_hints == null) ? null : _hints.get(name);\n     }\n \n     public Set getRootClasses() {\n-        return getImmutableSet(_rootClasses);\n+        return (_rootClasses == null) ? Collections.EMPTY_SET : _rootClasses;\n     }\n \n     public FetchConfiguration setRootClasses(Collection classes) {\n-        if (classes == null || classes.isEmpty())\n-            return this;\n-\n-        if (_rootClasses == null)\n-            _rootClasses = new HashSet(classes.size());\n-\n-        _rootClasses.addAll(classes);\n-\n+        lock();\n+        try {\n+            if (_rootClasses != null)\n+                _rootClasses.clear();\n+            if (classes != null && !classes.isEmpty()) {\n+                if (_rootClasses == null)\n+                    _rootClasses = new HashSet(classes);\n+                else \n+                    _rootClasses.addAll(classes);\n+            }\n+        } finally {\n+            unlock();\n+        }\n         return this;\n     }\n \n     public Set getRootInstances() {\n-        return getImmutableSet(_rootInstances);\n+        return (_rootInstances == null) ? Collections.EMPTY_SET \n+            : _rootInstances;\n+    }\n+\n+    public FetchConfiguration setRootInstances(Collection instances) {\n+        lock();\n+        try {\n+            if (_rootInstances != null)\n+                _rootInstances.clear();\n+            if (instances != null && !instances.isEmpty()) {\n+                if (_rootInstances == null)\n+                    _rootInstances = new HashSet(instances);\n+                else \n+                    _rootInstances.addAll(instances);\n+            }\n+        } finally {\n+            unlock();\n+        }\n+        return this;\n     }\n \n-    public FetchConfiguration setRootInstances(Collection roots) {\n-        if (roots == null)\n-            return this;\n-        if (_rootInstances == null)\n-            _rootInstances = new HashSet(roots.size());\n-\n-        _rootInstances.addAll(roots);\n-\n-        return this;\n+    public void lock() {\n+        if (_ctx != null)\n+            _ctx.lock();\n     }\n \n-    private Set getImmutableSet(Set input) {\n-        return (input == null) ? Collections.EMPTY_SET\n-            : Collections.unmodifiableSet(input);\n-\t}\n+    public void unlock() {\n+        if (_ctx != null)\n+            _ctx.unlock();\n+    }\n }"},{"sha":"9820461540bf86d98278fac6c9d63689b4e3998b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchState.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchState.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchState.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -1,10 +1,13 @@\n /*\r\n  * Copyright 2006 The Apache Software Foundation.\r\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n  * You may obtain a copy of the License at\r\n- *  http://www.apache.org/licenses/LICENSE-2.0\r\n- *  Unless required by applicable law or agreed to in writing, software\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  * See the License for the specific language governing permissions and\r\n@@ -40,7 +43,7 @@\n      * Affirms if the given field requires to be fetched in the context\r\n      * of current fetch operation.\r\n      *\r\n-     * @param fm          field metadata. must not be null.\r\n+     * @param fm field metadata. must not be null.\r\n      */\r\n     public boolean requiresFetch(FieldMetaData fm);\r\n \r\n@@ -56,7 +59,6 @@\n     /**\r\n      * Traverse the given field to generate (possibly) a new state.\r\n      * \r\n-     * @param fm\r\n      * @return a new state resulting out of traversal. If the given field is\r\n      * not a relation then return itself.\r\n      */\r\n@@ -73,20 +75,20 @@\n     \r\n     /**\r\n      * Gets the root state where this receiver is derived from.\r\n-     * @return itself if the state is not derived from another state.\r\n      * \r\n+     * @return itself if the state is not derived from another state.\r\n      */\r\n     public FetchState getRoot ();\r\n     \r\n     /**\r\n      * Affirms if this receiver is the root state i.e. not derived as a result\r\n      * of traversing a relationship.\r\n-     *  \r\n      */\r\n     public boolean isRoot ();\r\n     \r\n     /**\r\n      * Gets the parent state.\r\n+     *\r\n      * @return can be null for the root state.\r\n      */\r\n     public FetchState getParent ();\r\n@@ -114,9 +116,6 @@\n     /**\r\n      * Gets the number of times the given field is traversed to arrive\r\n      * at this state.\r\n-     * \r\n-     * @param fm\r\n-     * @return\r\n      */\r\n     public int getCurrentRecursionDepth (FieldMetaData fm);\r\n     \r"},{"sha":"d886ae63db7ea1e572d859cd2dee4274cbe3c473","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchStateImpl.java","status":"modified","additions":101,"deletions":108,"changes":209,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchStateImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchStateImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchStateImpl.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -1,18 +1,18 @@\n /*\r\n  * Copyright 2006 The Apache Software Foundation.\r\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n  * You may obtain a copy of the License at\r\n- *  http://www.apache.org/licenses/LICENSE-2.0\r\n- *  Unless required by applicable law or agreed to in writing, software\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n-/**\r\n- * \r\n- */\r\n package org.apache.openjpa.kernel;\r\n \r\n import java.util.*;\r\n@@ -32,111 +32,110 @@\n public class FetchStateImpl implements FetchState {\r\n \r\n     private final FetchConfiguration _config;\r\n-    private FetchState         _parent;\r\n-    private FieldMetaData      _relation;\r\n-    private int                _availableDepth;\r\n+    private FetchState _parent;\r\n+    private FieldMetaData _relation;\r\n+    private int _availableDepth;\r\n     \r\n     /**\r\n      * Supply configuration.\r\n      *\r\n      * @param fc must not be null.\r\n      */\r\n     public FetchStateImpl(FetchConfiguration fc) {\r\n-     \t_config = fc;\r\n-    \t_parent = null;\r\n-    \t_relation = null;\r\n-    \t_availableDepth  = _config.getMaxFetchDepth();\r\n+        _config = fc;\r\n+        _parent = null;\r\n+        _relation = null;\r\n+        _availableDepth  = _config.getMaxFetchDepth();\r\n     }\r\n \r\n     public FetchConfiguration getFetchConfiguration() {\r\n         return _config;\r\n     }\r\n \r\n-    public FetchState getParent () {\r\n-    \treturn _parent;\r\n+    public FetchState getParent() {\r\n+        return _parent;\r\n     }\r\n     \r\n-    public boolean isRoot () {\r\n-    \treturn _parent == null;\r\n+    public boolean isRoot() {\r\n+        return _parent == null;\r\n     }\r\n     \r\n     public FetchState getRoot() {\r\n-    \treturn (isRoot()) ? this : getParent().getRoot();\r\n+        return (isRoot()) ? this : getParent().getRoot();\r\n     }\r\n \r\n     public int getAvailableFetchDepth() {\r\n         return _availableDepth;\r\n     }\r\n \r\n-    public List getPath () {\r\n-    \tif (isRoot())\r\n-    \t\treturn Collections.EMPTY_LIST;\r\n-    \tList result = new ArrayList();\r\n-    \tresult.add (this);\r\n-    \treturn ((FetchStateImpl)_parent).trackPath (result);\r\n+    public List getPath() {\r\n+        if (isRoot())\r\n+            return Collections.EMPTY_LIST;\r\n+        List result = new ArrayList();\r\n+        result.add(this);\r\n+        return ((FetchStateImpl)_parent).trackPath(result);\r\n     }\r\n     \r\n-    private List trackPath (List path) {\r\n-    \tif (isRoot())\r\n-    \t\treturn path;\r\n-    \tpath.add(this);\r\n-    \treturn ((FetchStateImpl)_parent).trackPath(path);\r\n+    private List trackPath(List path) {\r\n+        if (isRoot())\r\n+            return path;\r\n+        path.add(this);\r\n+        return ((FetchStateImpl)_parent).trackPath(path);\r\n     }\r\n     \r\n-    public List getRelationPath () {\r\n-    \tif (isRoot())\r\n-    \t\treturn Collections.EMPTY_LIST;\r\n-    \tList result = new ArrayList();\r\n-    \tresult.add (_relation);\r\n-    \treturn ((FetchStateImpl)_parent).trackRelationPath (result);\r\n+    public List getRelationPath() {\r\n+        if (isRoot())\r\n+            return Collections.EMPTY_LIST;\r\n+        List result = new ArrayList();\r\n+        result.add(_relation);\r\n+        return ((FetchStateImpl)_parent).trackRelationPath(result);\r\n     }\r\n     \r\n-    private List trackRelationPath (List path) {\r\n-    \tif (isRoot())\r\n-    \t\treturn path;\r\n-    \tpath.add(_relation);\r\n-    \treturn ((FetchStateImpl)_parent).trackRelationPath(path);\r\n+    private List trackRelationPath(List path) {\r\n+        if (isRoot())\r\n+            return path;\r\n+        path.add(_relation);\r\n+        return ((FetchStateImpl)_parent).trackRelationPath(path);\r\n     }\r\n     \r\n     \r\n-    public int getCurrentRecursionDepth (FieldMetaData fm) {\r\n-    \tif (isRoot())\r\n-    \t\treturn 0;\r\n-    \tint rd = (_relation == fm) ? 1 : 0;\r\n-    \t\r\n-    \treturn rd + _parent.getCurrentRecursionDepth(fm);\r\n+    public int getCurrentRecursionDepth(FieldMetaData fm) {\r\n+        if (isRoot())\r\n+            return 0;\r\n+        int rd = (_relation == fm) ? 1 : 0;\r\n+        return rd + _parent.getCurrentRecursionDepth(fm);\r\n     }\r\n     \r\n     public boolean isDefault(FieldMetaData fm) {\r\n-        return (_config.hasFetchGroup(FetchConfiguration.FETCH_GROUP_DEFAULT) \r\n-        \t\t&& fm.isInDefaultFetchGroup())\r\n-        \t\t|| _config.hasFetchGroup(FetchConfiguration.FETCH_GROUP_ALL);\r\n+        return (fm.isInDefaultFetchGroup() \r\n+            && _config.hasFetchGroup(FetchConfiguration.FETCH_GROUP_DEFAULT)) \r\n+            || _config.hasFetchGroup(FetchConfiguration.FETCH_GROUP_ALL);\r\n     }\r\n \r\n     public boolean requiresFetch(FieldMetaData fm) {\r\n         boolean selectable = isDefault(fm)\r\n             || _config.hasAnyFetchGroup(fm.getFetchGroups())\r\n             || _config.hasField(fm.getFullName());\r\n         if (selectable && isRelation(fm)) {\r\n-        \tint rd  = getRecursionDepth(fm);\r\n-        \tint crd = getCurrentRecursionDepth(fm);\r\n-        \tselectable = (_availableDepth==INFINITE_DEPTH || _availableDepth>0)\r\n-        \t\t&& ( rd == INFINITE_DEPTH || crd <rd);\r\n+            int rd  = getRecursionDepth(fm);\r\n+            int crd = getCurrentRecursionDepth(fm);\r\n+            selectable = (_availableDepth==INFINITE_DEPTH || _availableDepth>0)\r\n+                && (rd == INFINITE_DEPTH || crd < rd);\r\n         }\r\n         return selectable;\r\n     }\r\n \r\n     public boolean requiresLoad(OpenJPAStateManager sm, FieldMetaData fm) {\r\n-    \tif (sm!=null && sm.getLoaded().get(fm.getIndex()))\r\n-    \t\treturn false;\r\n+        if (sm!=null && sm.getLoaded().get(fm.getIndex()))\r\n+            return false;\r\n         boolean loadable = isDefault(fm)\r\n             || _config.hasAnyFetchGroup(fm.getFetchGroups())\r\n             || _config.hasField(fm.getFullName());\r\n         if (loadable && isRelation(fm)) {\r\n-        \tint rd  = getRecursionDepth(fm);\r\n-        \tint crd = getCurrentRecursionDepth(fm);\r\n+            int rd  = getRecursionDepth(fm);\r\n+            int crd = getCurrentRecursionDepth(fm);\r\n             loadable = (_availableDepth==INFINITE_DEPTH || _availableDepth>0)\r\n-    \t\t\t&& (rd == INFINITE_DEPTH || crd<rd);\r\n+                && (rd == INFINITE_DEPTH || crd<rd);\r\n         }\r\n         return loadable;\r\n     }\r\n@@ -167,68 +166,62 @@ public int getRecursionDepth(FieldMetaData fm) {\n             }\r\n             dMax = Math.max(d, dMax);\r\n         }\r\n-    \tint maxDepth = _config.getMaxFetchDepth();\r\n-    \tif (maxDepth != INFINITE_DEPTH)\r\n-    \t\tif (dMax != INFINITE_DEPTH)\r\n-    \t\t   dMax = Math.min (maxDepth, dMax);\r\n-    \t\telse\r\n-    \t\t   dMax = maxDepth;\r\n+        int maxDepth = _config.getMaxFetchDepth();\r\n+        if (maxDepth != INFINITE_DEPTH)\r\n+            if (dMax != INFINITE_DEPTH)\r\n+                dMax = Math.min (maxDepth, dMax);\r\n+            else\r\n+                dMax = maxDepth;\r\n \r\n         return dMax;\r\n     }\r\n \r\n \r\n     public FetchState traverse(FieldMetaData fm) {\r\n-    \tif (isRelation(fm)) {\r\n-    \t\ttry\r\n-\t\t\t{\r\n-\t\t\t\tFetchStateImpl clone = (FetchStateImpl)clone();\r\n-\t\t\t\tclone._parent   = this;\r\n-\t\t\t\tclone._relation = fm;\r\n-\t\t\t\tclone._availableDepth  = reduce(_availableDepth);\r\n-\t\t\t\treturn clone;\r\n-\t\t\t}\r\n-\t\t\tcatch (CloneNotSupportedException e)\r\n-\t\t\t{\r\n-\t\t\t\t// ignore\r\n-\t\t\t}\r\n-    \t}\r\n-    \treturn this;\r\n-    }\r\n-\r\n-\r\n-    int reduce (int d) {\r\n-    \tif (d==0)\r\n-    \t\treturn 0;//throw new InternalException(this.toString());\r\n-    \tif (d==INFINITE_DEPTH)\r\n-   \t\t\treturn INFINITE_DEPTH;\r\n-    \t\t\t\r\n-    \treturn d-1;\r\n+        if (isRelation(fm)) {\r\n+            try {\r\n+                FetchStateImpl clone = (FetchStateImpl)clone();\r\n+                clone._parent = this;\r\n+                clone._relation = fm;\r\n+                clone._availableDepth  = reduce(_availableDepth);\r\n+                return clone;\r\n+            } catch (CloneNotSupportedException e) {\r\n+                // ignore\r\n+            }\r\n+        }\r\n+        return this;\r\n+    }\r\n+\r\n+\r\n+    int reduce(int d) {\r\n+        if (d==0)\r\n+            return 0;//throw new InternalException(this.toString());\r\n+        if (d==INFINITE_DEPTH)\r\n+            return INFINITE_DEPTH;\r\n+        return d-1;\r\n     }\r\n     \r\n-    protected boolean isRelation (FieldMetaData fm) {\r\n-    \treturn fm != null && \r\n-    \t\t(fm.isDeclaredTypePC() \r\n-    \t\t|| (fm.getElement() != null && fm.getElement().isTypePC())\r\n-    \t\t|| (fm.getKey() != null && fm.getKey().isTypePC())\r\n-    \t\t|| (fm.getValue() != null && fm.getValue().isTypePC()));\r\n+    protected boolean isRelation(FieldMetaData fm) {\r\n+        return fm != null && (fm.isDeclaredTypePC() \r\n+            || fm.getElement().isDeclaredTypePC()\r\n+            || fm.getKey().isDeclaredTypePC());\r\n     }\r\n     \r\n-    public String toString () {\r\n-    \treturn System.identityHashCode(this) + \"(\"+_availableDepth+\"): \" \r\n-    \t    + printPath();\r\n+    public String toString() {\r\n+        return System.identityHashCode(this) + \"(\"+_availableDepth+\"): \" \r\n+            + printPath();\r\n     }\r\n     \r\n-    private String printPath ()\r\n+    private String printPath()\r\n     {\r\n-    \tList path = getRelationPath();\r\n-    \tif (path.isEmpty())\r\n-    \t\treturn \"\";\r\n-    \tStringBuffer tmp = new StringBuffer();\r\n-    \tIterator i = path.iterator();\r\n-    \ttmp.append(((FieldMetaData)i.next()).getName());\r\n-    \tfor (;i.hasNext();)\r\n-    \t\ttmp.append(\".\").append(((FieldMetaData)i.next()).getName());\r\n-    \treturn tmp.toString();\r\n+        List path = getRelationPath();\r\n+        if (path.isEmpty())\r\n+            return \"\";\r\n+        StringBuffer tmp = new StringBuffer();\r\n+        Iterator i = path.iterator();\r\n+        tmp.append(((FieldMetaData)i.next()).getName());\r\n+        for (;i.hasNext();)\r\n+            tmp.append(\".\").append(((FieldMetaData)i.next()).getName());\r\n+        return tmp.toString();\r\n     }\r\n }\r"},{"sha":"e0bbd3ae42cf9b08ffc54ed57f45b0d0f18188df","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -668,7 +668,7 @@ protected Compilation newCompilation() {\n         assertCandidateType();\n \n         MetaDataRepository repos = _broker.getConfiguration().\n-            getMetaDataRepository();\n+            getMetaDataRepositoryInstance();\n         ClassMetaData meta = repos.getMetaData(_class,\n             _broker.getClassLoader(), false);\n \n@@ -1572,7 +1572,7 @@ public Class classForName(String name, String[] imports) {\n         ClassLoader loader = (_class == null) ? _loader\n             : _class.getClassLoader();\n         ClassMetaData meta = _broker.getConfiguration().\n-            getMetaDataRepository().getMetaData(name, loader, false);\n+            getMetaDataRepositoryInstance().getMetaData(name, loader, false);\n         if (meta != null)\n             return meta.getDescribedType();\n "},{"sha":"2c337e644db9258942cf3473e4ad4e52cf3d6a6f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -358,7 +358,7 @@ public ResultObjectProvider executeExtent(ClassMetaData meta,\n \n     /**\n      * Return a fetch configuration suitable for this runtime. Typically\n-     * will be or extend <code>org.apache.openjpa.kernel.FetchConfigurationImpl</code>.\n+     * will be or extend <code>FetchConfigurationImpl</code>.\n      */\n     public FetchConfiguration newFetchConfiguration();\n "},{"sha":"eddecd76b53fd12c29f42ac6140837e8afc1ec2f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -47,7 +47,7 @@ protected Object getDetachedObjectId(AttachManager manager,\n         Object toAttach) {\n         Broker broker = manager.getBroker();\n         ClassMetaData meta = broker.getConfiguration().\n-            getMetaDataRepository().getMetaData(toAttach.getClass(),\n+            getMetaDataRepositoryInstance().getMetaData(toAttach.getClass(),\n             broker.getClassLoader(), true);\n         return ApplicationIds.create((PersistenceCapable) toAttach, meta);\n     }"},{"sha":"c0928018c424a9c1ede1000b775700583e27bdc3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -229,7 +229,7 @@ protected ClassMetaData getMetaData(Class c, boolean required) {\n      */\n     protected ClassMetaData getMetaData(Class c, boolean required,\n         ClassLoader loader) {\n-        return resolver.getConfiguration().getMetaDataRepository().\n+        return resolver.getConfiguration().getMetaDataRepositoryInstance().\n             getMetaData(c, loader, required);\n     }\n "},{"sha":"d649a0d11e1c6992206742c9b8b5a3673201ec80","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -147,7 +147,7 @@ protected ClassMetaData resolveClassMetaData(JPQLNode node) {\n     private ClassMetaData getClassMetaData(String alias, boolean assertValid) {\n         ClassLoader loader = getClassLoader();\n         MetaDataRepository repos = resolver.getConfiguration().\n-            getMetaDataRepository();\n+            getMetaDataRepositoryInstance();\n \n         // first check for the alias\n         ClassMetaData cmd = repos.getMetaData(alias, loader, false);"},{"sha":"68f918d4f372d1053c96f3048f4eb336270c8112","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":43,"deletions":26,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -34,6 +34,8 @@\n import org.apache.openjpa.enhance.PCRegistry.RegisterClassListener;\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.event.LifecycleEventManager;\n+import org.apache.openjpa.lib.conf.Configurable;\n+import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Closeable;\n import org.apache.openjpa.lib.util.Localizer;\n@@ -50,7 +52,8 @@\n  * @author Steve Kim (query metadata)\n  */\n public class MetaDataRepository\n-    implements PCRegistry.RegisterClassListener, Closeable, MetaDataModes {\n+    implements PCRegistry.RegisterClassListener, Configurable, Closeable, \n+    MetaDataModes {\n \n     /**\n      * Constant to not validate any metadata.\n@@ -106,10 +109,9 @@\n     // map of classes to lists of their subclasses\n     private final Map _subs = Collections.synchronizedMap(new HashMap());\n \n-    private final OpenJPAConfiguration _conf;\n-    private final Log _log;\n-    private final MetaDataFactory _factory;\n-\n+    private OpenJPAConfiguration _conf = null;\n+    private Log _log = null;\n+    private MetaDataFactory _factory = null;\n     private int _resMode = MODE_META | MODE_MAPPING;\n     private int _sourceMode = MODE_META | MODE_MAPPING | MODE_QUERY;\n     private int _validate = VALIDATE_META | VALIDATE_UNENHANCED;\n@@ -130,21 +132,9 @@\n         new LifecycleEventManager.ListenerList(3);\n \n     /**\n-     * Constructor. Supply configuration.\n-     */\n-    public MetaDataRepository(OpenJPAConfiguration conf) {\n-        this(conf, conf.newMetaDataFactoryInstance());\n-    }\n-\n-    /**\n-     * Constructor. Supply configuration and metadata generator.\n+     * Default constructor.  Configure via {@link Configurable}.\n      */\n-    public MetaDataRepository(OpenJPAConfiguration conf,\n-        MetaDataFactory factory) {\n-        _conf = conf;\n-        _log = conf.getLog(OpenJPAConfiguration.LOG_METADATA);\n-        _factory = factory;\n-        _factory.setRepository(this);\n+    public MetaDataRepository() {\n         EMPTY_METAS = newClassMetaDataArray(0);\n         EMPTY_FIELDS = newFieldMetaDataArray(0);\n         EMPTY_ORDERS = newOrderArray(0);\n@@ -164,6 +154,18 @@ public Log getLog() {\n         return _log;\n     }\n \n+    /**\n+     * Create a new instance of the same type as this instance, using this\n+     * instance's configuration.\n+     */\n+    public MetaDataRepository newInstance() {\n+        MetaDataRepository repos = new MetaDataRepository();\n+        repos.setConfiguration(_conf);\n+        repos.startConfiguration();\n+        repos.endConfiguration();\n+        return repos;\n+    }\n+\n     /**\n      * The I/O used to load metadata.\n      */\n@@ -172,11 +174,11 @@ public MetaDataFactory getMetaDataFactory() {\n     }\n \n     /**\n-     * Create a new instance of the same type as this instance, using this\n-     * instance's configuration.\n+     * The I/O used to load metadata.\n      */\n-    public MetaDataRepository newInstance() {\n-        return new MetaDataRepository(getConfiguration());\n+    public void setMetaDataFactory(MetaDataFactory factory) {\n+        factory.setRepository(this);\n+        _factory = factory;\n     }\n \n     /**\n@@ -314,13 +316,12 @@ public ClassMetaData getMetaData(String alias, ClassLoader envLoader,\n         processRegisteredClasses();\n         List classList = (List) _aliases.get(alias);\n \n-        Class cls = null;\n-\n         // multiple classes may have been defined with the same alias: we\n         // will filter by checking against the current list of the\n         // persistent types and filted based on which classes are loadable\n         // via the current environment's ClassLoader\n         Set pcNames = getPersistentTypeNames(false, envLoader);\n+        Class cls = null;\n         for (int i = 0; classList != null && i < classList.size(); i++) {\n             Class c = (Class) classList.get(i);\n             try {\n@@ -345,7 +346,6 @@ public ClassMetaData getMetaData(String alias, ClassLoader envLoader,\n                 // other class loading problems\n             }\n         }\n-\n         if (cls != null)\n             return getMetaData(cls, envLoader, mustExist);\n \n@@ -1272,6 +1272,23 @@ private void addToCollection(Map map, Class key, Class value,\n         }\n     }\n \n+    ///////////////////////////////\n+    // Configurable implementation\n+    ///////////////////////////////\n+\n+    public void setConfiguration(Configuration conf) {\n+        _conf = (OpenJPAConfiguration) conf;\n+        _log = _conf.getLog(OpenJPAConfiguration.LOG_METADATA);\n+    }\n+\n+    public void startConfiguration() {\n+    }\n+\n+    public void endConfiguration() {\n+        if (_factory == null)\n+            setMetaDataFactory(_conf.newMetaDataFactoryInstance());\n+    }\n+\n     //////////////////\n     // Query metadata\n     //////////////////"},{"sha":"bb681e87e8bb399906b5a0f826524a0f14479008","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataTool.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataTool.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataTool.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -129,7 +129,7 @@ public MetaDataRepository getRepository() {\n      * Create a new metadata repository.\n      */\n     protected MetaDataRepository newRepository() {\n-        return new MetaDataRepository(_conf);\n+        return _conf.newMetaDataRepositoryInstance();\n     }\n \n     /**\n@@ -312,7 +312,7 @@ public static boolean run(OpenJPAConfiguration conf, String[] args,\n             tool.setWriter(flags.writer);\n \n         Log log = conf.getLog(OpenJPAConfiguration.LOG_TOOL);\n-        ClassArgParser cap = conf.getMetaDataRepository().\n+        ClassArgParser cap = conf.getMetaDataRepositoryInstance().\n             getMetaDataFactory().newClassArgParser();\n         cap.setClassLoader(loader);\n         Class[] classes;"},{"sha":"c8bd0a0f6299acb28b57bce96a4af335f7c9e85c","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","status":"modified","additions":17,"deletions":9,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -1,15 +1,16 @@\n ClassResolver-name: Class resolver\n-ClassResolver-desc: The org.apache.openjpa.util.ClassResolver implementation that should be \\\n-\tused for class resolution.  Defaults to a spec-compliant resolver.\n+ClassResolver-desc: The org.apache.openjpa.util.ClassResolver implementation \\\n+    that should be used for class resolution.  Defaults to a spec-compliant \\\n+    resolver.\n ClassResolver-type: General\n ClassResolver-cat: JDO.Classes\n ClassResolver-displayorder: 50\n ClassResolver-expert: true\n ClassResolver-interface: org.apache.openjpa.util.ClassResolver\n \n BrokerFactory-name: BrokerFactory implementation\n-BrokerFactory-desc: The name of the org.apache.openjpa.kernel.BrokerFactory class that \\\n-\tOpenJPAHelper.getBrokerFactory should create.  Typically \\\n+BrokerFactory-desc: The name of the org.apache.openjpa.kernel.BrokerFactory \\\n+    class that Bootstrap.getBrokerFactory should create.  Typically \\\n \torg.apache.openjpa.jdbc.kernel.JDBCBrokerFactory\n BrokerFactory-type: JDO\n BrokerFactory-cat: JDO.Advanced\n@@ -244,7 +245,6 @@ Connection2UserName-cat: Connecting.XA\n Connection2UserName-displayorder: 50\n Connection2UserName-expert: true\n \n-\n Connection2Password-name: Unmanaged connection password\n Connection2Password-desc: The password for the user specified in \\\n \tConnection2UserName\n@@ -470,8 +470,8 @@ SavepointManager-expert: true\n SavepointManager-interface: org.apache.openjpa.kernel.SavepointManager\n \n OrphanedKeyAction-name: Orphaned key action\n-OrphanedKeyAction-desc: Action to take when OpenJPA discovers an orphaned key in \\\n-\tthe database.  May be a custom action implementing \\\n+OrphanedKeyAction-desc: Action to take when OpenJPA discovers an orphaned key \\\n+    in the database.  May be a custom action implementing \\\n \torg.apache.openjpa.event.OrphanedKeyAction.\n OrphanedKeyAction-type: General\n OrphanedKeyAction-cat: JDO.Advanced\n@@ -494,13 +494,21 @@ DynamicDataStructs-displayorder: 50\n DynamicDataStructs-expert: true\n \n MetaDataFactory-name: Metadata factory\n-MetaDataFactory-desc: The org.apache.openjpa.meta.MetaDataFactory that provides persistence \\\n-\tmetadata.\n+MetaDataFactory-desc: The org.apache.openjpa.meta.MetaDataFactory that \\\n+    provides persistence metadata.\n MetaDataFactory-type: General\n MetaDataFactory-cat: Mappings\n MetaDataFactory-displayorder: 50\n MetaDataFactory-interface: org.apache.openjpa.meta.MetaDataFactory\n \n+MetaDataRepository-name: Metadata repository\n+MetaDataRepository-desc: The org.apache.openjpa.meta.MetaDataRepository that \\\n+    manages persistence metadata.\n+MetaDataRepository-type: General\n+MetaDataRepository-cat: Mappings\n+MetaDataRepository-displayorder: 50\n+MetaDataRepository-interface: org.apache.openjpa.meta.MetaDataRepository\n+\n Mapping-name: Datastore mapping\n Mapping-desc: The name of the datastore mapping to use.\n Mapping-type: JDO"},{"sha":"b4c06c3a9aed467de2e667f7200f9afc5ab25931","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -326,3 +326,5 @@ illegal-op-in-prestore: This operation is illegal when called during \\\n \ttransaction completion.\n no-expressions: The query cannot be executed because it has no \\\n \tvalid expressions.\n+null-fg: Attempt to add null/empty fetch group name to fetch configuration.\n+null-field: Attempt to add null/empty field name to fetch configuration."},{"sha":"22932efea93b9d2117dfabb62f2bb6607334a403","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","status":"modified","additions":10,"deletions":7,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -33,18 +33,23 @@\n  * Ant tasks all have a nested <code>&lt;config&rt;</code> tag, which uses\n  * the configuration as a bean-like task. E.g., you can do:\n  * \n- * <code> &lt;mytask&rt;<br />\n- * &nbsp;&nbsp;&lt;config connectionUserName=\"foo\"/&rt;<br /> &lt;/mytask&rt;\n- * </code> The defailt configuration for the system will be used if the\n+ * <code> \n+ * &lt;mytask&rt;<br />\n+ * &nbsp;&nbsp;&lt;config connectionUserName=\"foo\"/&rt;<br /> \n+ * &lt;/mytask&rt;\n+ * </code> \n+ *\n+ * The defailt configuration for the system will be used if the\n  * <code>&lt;config&rt;</code> subtask is excluded.\n  *\n  * @nojavadoc\n  */\n public abstract class AbstractTask extends MatchingTask {\n \n-    static final Localizer _loc = Localizer.forPackage(AbstractTask.class);\n+    private static final Localizer _loc = Localizer.forPackage\n+        (AbstractTask.class);\n \n-    protected List fileSets = new ArrayList();\n+    protected final List fileSets = new ArrayList();\n     protected boolean haltOnError = true;\n     protected Path classpath = null;\n     protected boolean useParent = false;\n@@ -168,11 +173,9 @@ public void execute() throws BuildException {\n                 File f = new File(dsFiles[j]);\n                 if (!f.isFile())\n                     f = new File(ds.getBasedir(), dsFiles[j]);\n-\n                 files.add(f.getAbsolutePath());\n             }\n         }\n-\n         return (String[]) files.toArray(new String[files.size()]);\n     }\n }"},{"sha":"a9d79a753d09c8da2815d7234512d036bc1f610e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","status":"modified","additions":15,"deletions":7,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -73,9 +73,15 @@\n     public static final String ATTRIBUTE_XML = \"xmlName\";\n \n     /**\n-     * Return the product name. Defaults to <code>solarmetric</code>.\n+     * Return the product name. Defaults to <code>openjpa</code>.\n      */\n     public String getProductName();\n+    \n+    /**\n+     * Set the product name.  The set name will automatically be added to\n+     * the property prefixes.\n+     */\n+    public void setProductName(String name);\n \n     /**\n      * The log factory. If no log factory has been set explicitly,\n@@ -154,6 +160,14 @@\n      */\n     public void fromProperties(Map map);\n \n+    /**\n+     * Add <code>prefix</code> to the list of prefixes to use\n+     * to identify valid configuration properties. \"openjpa\" and any\n+     * product name set with {@link #setProductName} will automatically\n+     * be added.\n+     */\n+    public void addPropertyPrefix(String prefix);\n+\n     /**\n      * Adds a listener for any property changes. The property events fired\n      * will <b>not</b> include the old value.\n@@ -196,10 +210,4 @@\n      * Return a copy of this configuration.\n      */\n     public Object clone();\n-\n-    /**\n-     * Add <code>prefix</code> to the list of prefixes to use\n-     * to identify valid configuration properties.\n-     */\n-    public void addPropertyPrefix(String prefix);\n }"},{"sha":"28a949eec661679c9519c487879874ec57e60c9b","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":100,"deletions":59,"changes":159,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -53,6 +53,8 @@\n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.log.LogFactory;\n+import org.apache.openjpa.lib.log.LogFactoryImpl;\n+import org.apache.openjpa.lib.log.NoneLogFactory;\n import org.apache.openjpa.lib.util.Closeable;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.ParseException;\n@@ -102,19 +104,19 @@\n \n     public ObjectValue logFactoryPlugin;\n \n+    private String _product = null;\n     private boolean _readOnly = false;\n     private Map _props = null;\n     private boolean _defaults = false;\n     private final List _vals = new ArrayList();\n+    private List _prefixes = new ArrayList(2);\n \n     // property listener helper\n     private PropertyChangeSupport _changeSupport = null;\n \n     // cache descriptors\n     private PropertyDescriptor[] _pds = null;\n     private MethodDescriptor[] _mds = null;\n-    \n-    private Set _prefixes = new HashSet();\n \n     /**\n      * Default constructor. Attempts to load default properties through\n@@ -130,15 +132,16 @@ public ConfigurationImpl() {\n      * @param loadDefaults whether to attempt to load the default properties\n      */\n     public ConfigurationImpl(boolean loadDefaults) {\n-        _prefixes.add(\"openjpa\");\n+        setProductName(\"openjpa\"); // also adds as prop prefix\n \n         logFactoryPlugin = addPlugin(\"Log\", true);\n         String[] aliases = new String[]{\n-            \"true\", \"org.apache.openjpa.lib.log.LogFactoryImpl\",\n+            \"true\", LogFactoryImpl.class.getName(),\n             \"commons\", \"org.apache.openjpa.lib.log.CommonsLogFactory\",\n             \"log4j\", \"org.apache.openjpa.lib.log.Log4JLogFactory\",\n-            \"none\", \"org.apache.openjpa.lib.log.NoneLogFactory\",\n-            \"false\", \"org.apache.openjpa.lib.log.NoneLogFactory\", };\n+            \"none\", NoneLogFactory.class.getName(),\n+            \"false\", NoneLogFactory.class.getName(),\n+        };\n         logFactoryPlugin.setAliases(aliases);\n         logFactoryPlugin.setDefault(aliases[0]);\n         logFactoryPlugin.setString(aliases[0]);\n@@ -176,7 +179,12 @@ public boolean loadDefaults() {\n     }\n \n     public String getProductName() {\n-        return \"openjpa\";\n+        return _product;\n+    }\n+\n+    public void setProductName(String name) {\n+        _product = name;\n+        addPropertyPrefix(name);\n     }\n \n     public LogFactory getLogFactory() {\n@@ -204,11 +212,10 @@ public Log getLog(String category) {\n     }\n \n     /**\n-     * Returns the logging channel <code>org.apache.openjpa.Runtime</code> by\n-     * default.\n+     * Returns the logging channel <code>openjpa.Runtime</code> by default.\n      */\n     public Log getConfigurationLog() {\n-        return getLog(\"org.apache.openjpa.Runtime\");\n+        return getLog(\"openjpa.Runtime\");\n     }\n \n     public Value[] getValues() {\n@@ -301,20 +308,26 @@ public void valueChanged(Value val) {\n         // keep cached props up to date\n         if (_props != null) {\n             if (newString == null)\n-                _props.remove(val.getProperty());\n-            else if (_props.containsKey(val.getProperty())\n+                remove(_props, val);\n+            else if (containsKey(_props, val)\n                 || val.getDefault() == null\n                 || !val.getDefault().equals(newString))\n-                _props.put(val.getProperty(), newString);\n+                put(_props, val, newString);\n         }\n     }\n \n     /**\n-     * Closes all closeable plugins.\n+     * Closes all closeable values and plugins.\n      */\n     public void close() {\n         ObjectValue val;\n         for (int i = 0; i < _vals.size(); i++) {\n+            if (_vals.get(i) instanceof Closeable) {\n+                try { ((Closeable) _vals.get(i)).close(); }\n+                catch (Exception e) {} \n+                continue;\n+            }\n+\n             if (!(_vals.get(i) instanceof ObjectValue))\n                 continue;\n \n@@ -515,6 +528,11 @@ private String findLocalized(String key, boolean fatal, Class scope) {\n     // To/from maps\n     ////////////////\n \n+    public void addPropertyPrefix(String prefix) {\n+        if (!_prefixes.contains(prefix))\n+            _prefixes.add(prefix);\n+    }\n+\n     public Map toProperties(boolean storeDefaults) {\n         // clone properties before making any modifications; we need to keep\n         // the internal properties instance consistent to maintain equals and\n@@ -536,13 +554,13 @@ else if (_props instanceof Properties)\n                 // if key in existing properties, we already know value is up\n                 // to date\n                 val = (Value) _vals.get(i);\n-                if (_props != null && _props.containsKey(val.getProperty()))\n+                if (_props != null && containsKey(_props, val))\n                     continue;\n \n                 str = val.getString();\n                 if (str != null && (storeDefaults\n                     || !str.equals(val.getDefault())))\n-                    clone.put(val.getProperty(), str);\n+                    put(clone, val, str);\n             }\n             if (_props == null)\n                 _props = new HashMap(clone);\n@@ -567,30 +585,28 @@ public void fromProperties(Map map) {\n         Map remaining = new HashMap(map);\n         boolean ser = true;\n         Value val;\n-        Object set;\n+        Object o;\n         for (int i = 0; i < _vals.size(); i++) {\n             val = (Value) _vals.get(i);\n-            Object[] propertyInfo = lookUpProperty(val.getProperty(), map);\n-            set = propertyInfo[1];\n-            if (set == null)\n+            o = get(map, val, true);\n+            if (o == null)\n                 continue;\n \n-            if (set instanceof String) {\n-                if (!StringUtils.equals((String) set, val.getString()))\n-                    val.setString((String) set);\n+            if (o instanceof String) {\n+                if (!StringUtils.equals((String) o, val.getString()))\n+                    val.setString((String) o);\n             } else {\n-                ser = ser && set instanceof Serializable;\n-                val.setObject(set);\n+                ser &= o instanceof Serializable;\n+                val.setObject(o);\n             }\n-\n-            removeFoundProperty(val, remaining);\n+            remove(remaining, val);\n         }\n         \n         // convention is to point product at a resource with the\n         // <prefix>.properties System property; remove that property so we\n         // we don't warn about it\n-        for (Iterator iter = _prefixes.iterator(); iter.hasNext(); )\n-            remaining.remove((String) iter.next() + \".properties\");\n+        for (int i = 0; i < _prefixes.size(); i++)\n+            remaining.remove(_prefixes.get(i) + \".properties\");\n \n         // now warn if there are any remaining properties that there\n         // is an unhandled prop\n@@ -599,7 +615,7 @@ public void fromProperties(Map map) {\n             entry = (Map.Entry) itr.next();\n             if (entry.getKey() != null)\n                 warnInvalidProperty((String) entry.getKey());\n-            ser = ser && entry.getValue() instanceof Serializable;\n+            ser &= entry.getValue() instanceof Serializable;\n         }\n \n         // cache properties\n@@ -608,20 +624,46 @@ public void fromProperties(Map map) {\n     }\n \n     /**\n-     * Removes <code>val</code> from <code>remaining</code>. Use this method\n+     * Adds <code>o</code> to <code>map</code> under key for <code>val</code>.\n+     * Use this method instead of attempting to add the value directly because \n+     * this will account for the property prefix.\n+     */\n+    private void put(Map map, Value val, Object o) {\n+        Object key = val.getLoadKey();\n+        if (key == null)\n+            key = _prefixes.get(0) + \".\" + val.getProperty();\n+        map.put(key, o);\n+    }\n+\n+    /**\n+     * Return whether <code>map</code> contains an entry for <code>val</code>.\n+     */\n+    private boolean containsKey(Map map, Value val) {\n+        for (int i = 0; i < _prefixes.size(); i++)\n+            if (map.containsKey(_prefixes.get(i) + \".\" + val.getProperty()))\n+                return true;\n+        return false;\n+    }\n+\n+    /**\n+     * Removes <code>val</code> from <code>map</code>. Use this method\n      * instead of attempting to remove the value directly because this will\n      * account for any duplicate-but-same-valued keys in the map.\n      */\n-    private void removeFoundProperty(Value val, Map remaining) {\n-        for (Iterator iter = _prefixes.iterator(); iter.hasNext(); )\n-            remaining.remove((String) iter.next() + \".\" + val.getProperty());\n+    private void remove(Map map, Value val) {\n+        for (int i = 0; i < _prefixes.size(); i++)\n+            map.remove(_prefixes.get(i) + \".\" + val.getProperty());\n     }\n \n-    private Object[] lookUpProperty(String property, Map map) {\n+    /**\n+     * Look up the given value, testing all available prefixes.\n+     */\n+    private Object get(Map map, Value val, boolean setLoadKey) {\n         String firstKey = null;\n+        String key;\n         Object o = null;\n-        for (Iterator iter = _prefixes.iterator(); iter.hasNext(); ) {\n-            String key = (String) iter.next() + \".\" + property;\n+        for (int i = 0; i < _prefixes.size(); i++) {\n+            key = _prefixes.get(i) + \".\" + val.getProperty();\n             if (firstKey == null) {\n                 o = map.get(key);\n                 if (o != null)\n@@ -633,7 +675,9 @@ private void removeFoundProperty(Value val, Map remaining) {\n                     _loc.get(\"dup-with-different-prefixes\", firstKey, key));\n             }\n         }\n-        return new Object[] { firstKey, o };\n+        if (firstKey != null && setLoadKey)\n+            val.setLoadKey(firstKey);\n+        return o;\n     }\n \n     /**\n@@ -657,14 +701,17 @@ private void warnInvalidProperty(String propName) {\n             log.warn(_loc.get(\"invalid-property-hint\", propName, closest));\n     }\n \n+    /**\n+     * Return a comprehensive list of recognized map keys.\n+     */\n     private Collection newPropertyList() {\n-        Set s = new HashSet();\n-        for (Iterator iter = _vals.iterator(); iter.hasNext(); ) {\n-            Value val = (Value) iter.next();\n-            for (Iterator iter2 = _prefixes.iterator(); iter2.hasNext(); )\n-                s.add(((String) iter2.next()) + \".\" + val.getProperty());  \n+        List l = new ArrayList(_vals.size() * _prefixes.size());\n+        for (int i = 0; i < _vals.size(); i++) {\n+            for (int j = 0; j < _prefixes.size(); j++)\n+                l.add(_prefixes.get(j) + \".\" \n+                    + ((Value) _vals.get(i)).getProperty());\n         }\n-        return s;\n+        return l;\n     }\n \n     /**\n@@ -676,13 +723,13 @@ protected boolean isInvalidProperty(String propName) {\n         // openjpa.some.subpackage.SomeString, since it might be valid for some\n         // specific implementation of OpenJPA\n         boolean invalid = false;\n-        for (Iterator iter = _prefixes.iterator(); iter.hasNext(); ) {\n-            String prefix = (String) iter.next();\n+        String prefix;\n+        for (int i = 0; i < _prefixes.size(); i++) {\n+            prefix = (String) _prefixes.get(i);\n             if (propName.toLowerCase().startsWith(prefix)\n                 && propName.indexOf('.', prefix.length()) != -1)\n                 invalid = true;\n         }\n-\n         return invalid;\n     }\n \n@@ -767,18 +814,17 @@ public static String toXMLName(String propName) {\n             // downcase word.\n             if (i != 0 && Character.isUpperCase(c) \n                 && (Character.isLowerCase(propName.charAt(i-1))\n-                    || (i > 1 && i < propName.length() - 1\n-                        && Character.isUpperCase(propName.charAt(i-1)) \n-                        && Character.isLowerCase(propName.charAt(i+1)))))\n+                || (i > 1 && i < propName.length() - 1\n+                && Character.isUpperCase(propName.charAt(i-1)) \n+                && Character.isLowerCase(propName.charAt(i+1)))))\n                 buf.append('-');\n             \n             // surround sequences of digits with dashes.\n             if (i != 0\n                 && ((!Character.isLetter(c) && Character.isLetter(propName\n                     .charAt(i - 1))) \n-                    || \n-                    (Character.isLetter(c) && !Character.isLetter(propName\n-                        .charAt(i - 1)))))\n+                || (Character.isLetter(c) && !Character.isLetter(propName\n+                    .charAt(i - 1)))))\n                 buf.append('-');\n             \n             buf.append(Character.toLowerCase(c));\n@@ -793,7 +839,7 @@ public static String toXMLName(String propName) {\n     public void readExternal(ObjectInput in)\n         throws IOException, ClassNotFoundException {\n         fromProperties((Map) in.readObject());\n-        _prefixes = (Set) in.readObject();\n+        _prefixes = (List) in.readObject();\n         _defaults = in.readBoolean();\n     }\n \n@@ -806,7 +852,6 @@ public void writeExternal(ObjectOutput out) throws IOException {\n             out.writeObject(_props);\n         else\n             out.writeObject(toProperties(false));\n-        \n         out.writeObject(_prefixes);\n         out.writeBoolean(_defaults);\n     }\n@@ -846,10 +891,6 @@ public Value addValue(Value val) {\n         return val;\n     }\n \n-    public void addPropertyPrefix(String prefix) {\n-        _prefixes.add(prefix);\n-    }\n-\n     /**\n      * Add the given value to the set of configuration properties.\n      */"},{"sha":"f1cef82cca99864b72e7deda40360790f955c86a","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java","status":"modified","additions":21,"deletions":6,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -33,13 +33,20 @@\n     private static final Localizer s_loc = Localizer.forPackage(Value.class);\n \n     private String prop = null;\n+    private String loadKey = null;\n     private String def = null;\n     private String[] aliases = null;\n     private String getter = null;\n     private ValueListener listen = null;\n     private boolean aliasListComprehensive = false;\n     private Class scope = null;\n \n+    /**\n+     * Default constructor.\n+     */\n+    public Value() {\n+    }\n+\n     /**\n      * Constructor. Supply the property name.\n      *\n@@ -49,12 +56,6 @@ public Value(String prop) {\n         setProperty(prop);\n     }\n \n-    /**\n-     * Default constructor.\n-     */\n-    public Value() {\n-    }\n-\n     /**\n      * The property name that will be used when setting or\n      * getting this value in a {@link Map}.\n@@ -71,6 +72,20 @@ public void setProperty(String prop) {\n         this.prop = prop;\n     }\n \n+    /**\n+     * The key under which this value was loaded, or null.\n+     */\n+    public String getLoadKey() {\n+        return loadKey;\n+    }\n+\n+    /**\n+     * The key under which this value was loaded, or null.\n+     */\n+    public void setLoadKey(String loadKey) {\n+        this.loadKey = loadKey;\n+    }\n+\n     /**\n      * Aliases for the value in the form key1, value1, key2, value2, ...\n      * All alias values must be in string form."},{"sha":"615639ce2f81ad3df81737d81afe8551d8a71ead","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/MultiLogFactory.java","status":"modified","additions":15,"deletions":19,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/MultiLogFactory.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/MultiLogFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/MultiLogFactory.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -18,9 +18,10 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Iterator;\n-import java.util.LinkedList;\n import java.util.List;\n \n+import org.apache.openjpa.lib.util.concurrent.CopyOnWriteArrayList;\n+\n /**\n  * A LogFactory implementation to pass events through multiple\n  * LogFactory implementations(such as log4j and LogPanelFactory).\n@@ -32,41 +33,43 @@\n     private List _delegates;\n \n     /**\n-     * create an instance with two delegates\n+     * Create an instance with the given delegates.\n      */\n     public MultiLogFactory(LogFactory d1, LogFactory d2) {\n-        this(new LogFactory []{ d1, d2 });\n+        this(new LogFactory[]{ d1, d2 });\n     }\n \n+    /**\n+     * Create an instance with the given delegates.\n+     */\n     public MultiLogFactory(LogFactory d1, LogFactory d2, LogFactory d3) {\n-        this(new LogFactory []{ d1, d2, d3 });\n+        this(new LogFactory[]{ d1, d2, d3 });\n     }\n \n     /**\n-     * create an instance with the given delegates\n+     * Create an instance with the given delegates.\n      */\n-    public MultiLogFactory(LogFactory [] delegates) {\n-        _delegates = new LinkedList(Arrays.asList(delegates));\n-        ;\n+    public MultiLogFactory(LogFactory[] delegates) {\n+        _delegates = new CopyOnWriteArrayList(Arrays.asList(delegates));\n     }\n \n-    public synchronized void addLogFactory(LogFactory factory) {\n+    public void addLogFactory(LogFactory factory) {\n         _delegates.add(factory);\n     }\n \n-    public synchronized void removeLogFactory(LogFactory factory) {\n+    public void removeLogFactory(LogFactory factory) {\n         _delegates.remove(factory);\n     }\n \n     /**\n      * Returns the delegates that this MultiLogFactory delegates messages to.\n      */\n-    public synchronized LogFactory[] getDelegates() {\n+    public LogFactory[] getDelegates() {\n         return (LogFactory[]) _delegates.toArray(new LogFactory[0]);\n     }\n \n     /**\n-     * returns a Log impl that combines all logs.\n+     * Returns a Log impl that combines all logs.\n      */\n     public synchronized Log getLog(String channel) {\n         List logs = new ArrayList(_delegates.size());\n@@ -78,7 +81,6 @@ public synchronized Log getLog(String channel) {\n                     logs.add(l);\n             }\n         }\n-\n         return new MultiLog((Log[]) logs.toArray(new Log[logs.size()]));\n     }\n \n@@ -164,47 +166,41 @@ public boolean isTraceEnabled() {\n             for (int i = 0; i < _logs.length; i++)\n                 if (_logs[i].isTraceEnabled())\n                     return true;\n-\n             return false;\n         }\n \n         public boolean isInfoEnabled() {\n             for (int i = 0; i < _logs.length; i++)\n                 if (_logs[i].isInfoEnabled())\n                     return true;\n-\n             return false;\n         }\n \n         public boolean isWarnEnabled() {\n             for (int i = 0; i < _logs.length; i++)\n                 if (_logs[i].isWarnEnabled())\n                     return true;\n-\n             return false;\n         }\n \n         public boolean isDebugEnabled() {\n             for (int i = 0; i < _logs.length; i++)\n                 if (_logs[i].isDebugEnabled())\n                     return true;\n-\n             return false;\n         }\n \n         public boolean isErrorEnabled() {\n             for (int i = 0; i < _logs.length; i++)\n                 if (_logs[i].isErrorEnabled())\n                     return true;\n-\n             return false;\n         }\n \n         public boolean isFatalEnabled() {\n             for (int i = 0; i < _logs.length; i++)\n                 if (_logs[i].isFatalEnabled())\n                     return true;\n-\n             return false;\n         }\n     }"},{"sha":"bf72ea64689b9b2a9723d6a648022b6db3f7b7f0","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -24,13 +24,15 @@\n \n /**\n  * UUID value generator. Based on the time-based generator in the LGPL\n- * project:<br /> http://www.doomdark.org/doomdark/proj/jug/<br />\n+ * project:<br /> \n+ * http://www.doomdark.org/doomdark/proj/jug/<br />\n  * The code has been vastly simplified and modified to replace the ethernet\n  * address of the host machine with the IP, since we do not want to require\n  * native libs and Java cannot access the MAC address directly.\n  * Aside from the above modification, implements the IETF UUID draft\n- * specification, found here: http://www1.ics.uci.edu/~ejw/authoring/uuid-guid/\n- * draft-leach-uuids-guids-01.txt\n+ * specification, found here:<br />\n+ * http://www1.ics.uci.edu/~ejw/authoring/uuid-guid/draft-leach-uuids-guids-01\n+ * .txt\n  *\n  * @author Abe White\n  * @nojavadoc"},{"sha":"fa2f22f1647801d509e3d95869709c9f096d6cf0","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractConcurrentEventManager.java","status":"modified","additions":18,"deletions":2,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractConcurrentEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractConcurrentEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractConcurrentEventManager.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -26,7 +26,8 @@\n /**\n  * Base event manager that handles adding/removing listeners\n  * and firing events. Meant for high concurrency. This class is\n- * reentrant-safe; listeners can be added and removed by other listeners when * they receive events. The changes will not be visible until the event fire\n+ * reentrant-safe; listeners can be added and removed by other listeners when \n+ * they receive events. The changes will not be visible until the event fire\n  * that initiated the recursive sequence of calls completes, however.\n  *\n  * @author Abe White\n@@ -35,7 +36,14 @@\n \n     private static Exception[] EMPTY_EXCEPTIONS = new Exception[0];\n \n-    private Collection _listeners = new CopyOnWriteArraySet();\n+    private final Collection _listeners;\n+\n+    /**\n+     * Default constructor.\n+     */\n+    public AbstractConcurrentEventManager() {\n+        _listeners = newListenerCollection();\n+    }\n \n     /**\n      * Register an event listener.\n@@ -102,4 +110,12 @@ public Collection getListeners() {\n      */\n     protected abstract void fireEvent(Object event, Object listener)\n         throws Exception;\n+\n+    /**\n+     * Return a new concurrent container for listeners. Uses a \n+     * {@link CopyOnWriteArrayList} by default.\n+     */\n+    protected Collection newListenerCollection() {\n+        return new CopyOnWriteArrayList();\n+    }\n }"},{"sha":"c35d39af0f47895b88167440ffcaae409948a817","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -157,12 +157,6 @@ public AnnotationPersistenceMappingParser(JDBCConfiguration conf) {\n         super(conf);\n     }\n \n-    @Override\n-    protected MetaDataRepository newRepository() {\n-        return ((JDBCConfiguration) getConfiguration()).\n-            newMappingRepositoryInstance();\n-    }\n-\n     @Override\n     protected void parsePackageMappingAnnotations(Package pkg) {\n         MappingTag tag;"},{"sha":"1658c310d2dfe613132e4febe2b13fec2af730e2","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -39,11 +39,10 @@ public void beforeConfigurationConstruct(ConfigurationProvider cp) {\n     }\n \n     public void beforeConfigurationLoad(OpenJPAConfiguration c) {\n-        if (!(c instanceof JDBCConfigurationImpl))\n-            return;\n-\n         c.getStoreFacadeTypeRegistry().registerImplementation(\n             FetchPlan.class, JDBCFetchPlan.class);\n+        if (!(c instanceof JDBCConfigurationImpl))\n+            return;\n \n         JDBCConfigurationImpl conf = (JDBCConfigurationImpl) c;\n         String jpa = PersistenceProductDerivation.SPEC_JPA;\n@@ -75,7 +74,4 @@ public void afterSpecificationSet(OpenJPAConfiguration c) {\n         conf.mappingDefaultsPlugin.setDefault(jpa);\n         conf.mappingDefaultsPlugin.setString(jpa);\n     }\n-\n-    public void afterClose(OpenJPAConfiguration c) {\n-    }\n }"},{"sha":"2f6475da365fc633062b98aec1f6f69aaece2276","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","status":"modified","additions":0,"deletions":9,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -112,15 +112,6 @@ public XMLPersistenceMappingParser(JDBCConfiguration conf) {\n         super(conf);\n     }\n \n-    /**\n-     * Create a new metadata repository.\n-     */\n-    @Override\n-    protected MetaDataRepository newRepository() {\n-        return ((JDBCConfiguration) getConfiguration()).\n-            newMappingRepositoryInstance();\n-    }\n-\n     @Override\n     protected void reset() {\n         super.reset();"},{"sha":"55ad584d56b527a8082ca3b7bc4f5ae3e1934603","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":1,"deletions":8,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -210,7 +210,7 @@ public Log getLog() {\n      */\n     public MetaDataRepository getRepository() {\n         if (_repos == null) {\n-            MetaDataRepository repos = newRepository();\n+            MetaDataRepository repos = _conf.newMetaDataRepositoryInstance();\n             MetaDataFactory mdf = repos.getMetaDataFactory();\n             if (mdf instanceof DelegatingMetaDataFactory)\n                 mdf = ((DelegatingMetaDataFactory) mdf).getInnermostDelegate();\n@@ -221,13 +221,6 @@ public MetaDataRepository getRepository() {\n         return _repos;\n     }\n \n-    /**\n-     * Create a new metadata repository.\n-     */\n-    protected MetaDataRepository newRepository() {\n-        return new MetaDataRepository(_conf);\n-    }\n-\n     /**\n      * Set the metadata repository for this parser.\n      */"},{"sha":"970abf5582dce0d4bcde78d8692d953ab07a936c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -609,7 +609,7 @@ public void nontransactionalAll(Object[] objs) {\n     public Generator getNamedGenerator(String name) {\n         try {\n             SequenceMetaData meta = _broker.getConfiguration().\n-                getMetaDataRepository().getSequenceMetaData(name,\n+                getMetaDataRepositoryInstance().getSequenceMetaData(name,\n                 _broker.getClassLoader(), true);\n             Seq seq = meta.getInstance(_broker.getClassLoader());\n             return new Generator(seq, name, _broker, null);\n@@ -621,7 +621,7 @@ public Generator getNamedGenerator(String name) {\n     public Generator getIdGenerator(Class forClass) {\n         try {\n             ClassMetaData meta = _broker.getConfiguration().\n-                getMetaDataRepository().getMetaData(forClass,\n+                getMetaDataRepositoryInstance().getMetaData(forClass,\n                 _broker.getClassLoader(), true);\n             Seq seq = _broker.getIdentitySequence(meta);\n             return (seq == null) ? null : new Generator(seq, null, _broker,\n@@ -634,7 +634,7 @@ public Generator getIdGenerator(Class forClass) {\n     public Generator getFieldGenerator(Class forClass, String fieldName) {\n         try {\n             ClassMetaData meta = _broker.getConfiguration().\n-                getMetaDataRepository().getMetaData(forClass,\n+                getMetaDataRepositoryInstance().getMetaData(forClass,\n                 _broker.getClassLoader(), true);\n             FieldMetaData fmd = meta.getField(fieldName);\n             if (fmd == null)\n@@ -672,7 +672,7 @@ public OpenJPAQuery createQuery(Query query) {\n     public OpenJPAQuery createNamedQuery(String name) {\n         try {\n             QueryMetaData meta = _broker.getConfiguration().\n-                getMetaDataRepository().getQueryMetaData(null, name,\n+                getMetaDataRepositoryInstance().getQueryMetaData(null, name,\n                 _broker.getClassLoader(), true);\n             org.apache.openjpa.kernel.Query del =\n                 _broker.newQuery(meta.getLanguage(), null);"},{"sha":"7b6ac135acd5e77c708448d695b3cbd8b4c09bab","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -276,7 +276,7 @@ public static ClassMetaData getMetaData(EntityManager em, Class cls) {\n \n         OpenJPAEntityManager kem = cast(em);\n         try {\n-            return kem.getConfiguration().getMetaDataRepository().\n+            return kem.getConfiguration().getMetaDataRepositoryInstance().\n                 getMetaData(cls, kem.getClassLoader(), false);\n         } catch (Exception e) {\n             throw PersistenceExceptions.toPersistenceException(e);\n@@ -294,7 +294,7 @@ public static ClassMetaData getMetaData(EntityManagerFactory emf,\n \n         OpenJPAEntityManagerFactory kemf = cast(emf);\n         try {\n-            return kemf.getConfiguration().getMetaDataRepository().\n+            return kemf.getConfiguration().getMetaDataRepositoryInstance().\n                 getMetaData(cls, null, false);\n         } catch (Exception e) {\n             throw PersistenceExceptions.toPersistenceException(e);"},{"sha":"5c58ac3f0c1771e6d5c25509d6ece10ae7da654a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -63,7 +63,4 @@ public void afterSpecificationSet(OpenJPAConfiguration c) {\n         conf.nontransactionalWrite.setDefault(\"true\");\n         conf.nontransactionalWrite.set(true);\n     }\n-\n-    public void afterClose(OpenJPAConfiguration c) {\n-    }\n }"},{"sha":"decf97c2971400cbc27d127c9e6202d4421d6f78","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -109,7 +109,7 @@ public EntityManagerFactory createContainerEntityManagerFactory(\n \n         private ClassTransformerImpl(OpenJPAConfiguration conf, String options,\n             ClassLoader tempClassLoader) {\n-            MetaDataRepository repos = conf.getMetaDataRepository().\n+            MetaDataRepository repos = conf.getMetaDataRepositoryInstance().\n                 newInstance();\n             repos.setResolve(MetaDataModes.MODE_MAPPING, false);\n             _trans = new PCClassFileTransformer(repos,"},{"sha":"f50e21b8580a316a814a45fde78b242ed87b28d4","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCache.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCache.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCache.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -42,7 +42,7 @@\n      * Constructor; supply delegate.\n      */\n     public StoreCache(EntityManagerFactoryImpl emf, DataCache cache) {\n-        _repos = emf.getConfiguration().getMetaDataRepository();\n+        _repos = emf.getConfiguration().getMetaDataRepositoryInstance();\n         _cache = new DelegatingDataCache(cache,\n             PersistenceExceptions.TRANSLATOR);\n     }"},{"sha":"fed7f4c655a885380e729a9350903d7c4a76ba73","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":1,"deletions":8,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -207,7 +207,7 @@ public void setAnnotationParser(\n      */\n     public MetaDataRepository getRepository() {\n         if (_repos == null) {\n-            MetaDataRepository repos = newRepository();\n+            MetaDataRepository repos = _conf.newMetaDataRepositoryInstance();\n             MetaDataFactory mdf = repos.getMetaDataFactory();\n             if (mdf instanceof DelegatingMetaDataFactory)\n                 mdf = ((DelegatingMetaDataFactory) mdf).getInnermostDelegate();\n@@ -218,13 +218,6 @@ public MetaDataRepository getRepository() {\n         return _repos;\n     }\n \n-    /**\n-     * Create a new metadata repository.\n-     */\n-    protected MetaDataRepository newRepository() {\n-        return new MetaDataRepository(_conf);\n-    }\n-\n     /**\n      * Set the metadata repository for this parser.\n      */"},{"sha":"ee24d0b50fb6963865dfac9bca33c6d0553698be","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataSerializer.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataSerializer.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -470,7 +470,7 @@ else if (unique) {\n         }\n         if (fieldAccess != propertyAccess) // i.e. only one\n         {\n-            int def = getConfiguration().getMetaDataRepository().\n+            int def = getConfiguration().getMetaDataRepositoryInstance().\n                 getMetaDataFactory().getDefaults().getDefaultAccessType();\n             String access = null;\n             if (fieldAccess && def == ClassMetaData.ACCESS_PROPERTY)\n@@ -798,7 +798,7 @@ private static MetaDataTag getEntityTag(ClassMetaData meta) {\n     private void addClassAttributes(ClassMetaData meta, boolean access) {\n         if (!access)\n             return;\n-        int def = getConfiguration().getMetaDataRepository().\n+        int def = getConfiguration().getMetaDataRepositoryInstance().\n             getMetaDataFactory().getDefaults().getDefaultAccessType();\n         if (meta.getAccessType() == ClassMetaData.ACCESS_FIELD\n             && def == ClassMetaData.ACCESS_PROPERTY)\n@@ -941,9 +941,9 @@ else if (fmd.isVersion())\n             serializeCascades(cascades);\n         if (isMappingMode() && strat == PersistenceStrategy.EMBEDDED) {\n             ClassMetaData meta = fmd.getEmbeddedMetaData();\n-            ClassMetaData owner = getConfiguration().getMetaDataRepository().\n-                getMetaData(meta.getDescribedType(),\n-                    meta.getEnvClassLoader(), true);\n+            ClassMetaData owner = getConfiguration().\n+                getMetaDataRepositoryInstance().getMetaData\n+                (meta.getDescribedType(), meta.getEnvClassLoader(), true);\n             FieldMetaData eorig;\n             for (FieldMetaData efmd : meta.getFields()) {\n                 eorig = owner.getField(efmd.getName());"},{"sha":"d13e6be5091966cecd0434fac06cede9ccdc0d6a","filename":"openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLFileHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLFileHandler.java","raw_url":"https://github.com/apache/openjpa/raw/3b1cb17cbae7af2b985e3e7c11833282d1db58a2/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLFileHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLFileHandler.java?ref=3b1cb17cbae7af2b985e3e7c11833282d1db58a2","patch":"@@ -346,7 +346,7 @@ private void startElement(String qName, Attributes attrs)\n                 case 'o': // object\n                     // get the metadata for the type we're reading\n                     String type = attrs.getValue(\"class\");\n-                    ClassMetaData meta = _conf.getMetaDataRepository().\n+                    ClassMetaData meta = _conf.getMetaDataRepositoryInstance().\n                         getMetaData(classForName(type), null, true);\n \n                     // construct the oid object"}]}

