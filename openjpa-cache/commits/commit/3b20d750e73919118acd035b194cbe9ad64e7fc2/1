{"sha":"3b20d750e73919118acd035b194cbe9ad64e7fc2","node_id":"MDY6Q29tbWl0MjA2MzY0OjNiMjBkNzUwZTczOTE5MTE4YWNkMDM1YjE5NGNiZTlhZDY0ZTdmYzI=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-08-19T21:38:25Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-08-19T21:38:25Z"},"message":"OPENJPA-1770: Fix fetching an Entity with a null embeddable from the DataCache.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@987321 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9d55369392f1d9abd03444e1316b23cdef81067d","url":"https://api.github.com/repos/apache/openjpa/git/trees/9d55369392f1d9abd03444e1316b23cdef81067d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3b20d750e73919118acd035b194cbe9ad64e7fc2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3b20d750e73919118acd035b194cbe9ad64e7fc2","html_url":"https://github.com/apache/openjpa/commit/3b20d750e73919118acd035b194cbe9ad64e7fc2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3b20d750e73919118acd035b194cbe9ad64e7fc2/comments","author":null,"committer":null,"parents":[{"sha":"3a62393e068bb7ddd1237fa96e6a29d30f4efab6","url":"https://api.github.com/repos/apache/openjpa/commits/3a62393e068bb7ddd1237fa96e6a29d30f4efab6","html_url":"https://github.com/apache/openjpa/commit/3a62393e068bb7ddd1237fa96e6a29d30f4efab6"}],"stats":{"total":119,"additions":94,"deletions":25},"files":[{"sha":"a1aac8e1c481355a9f9909a1e5574ce974c652fb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/3b20d750e73919118acd035b194cbe9ad64e7fc2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3b20d750e73919118acd035b194cbe9ad64e7fc2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java?ref=3b20d750e73919118acd035b194cbe9ad64e7fc2","patch":"@@ -198,10 +198,18 @@ protected void loadImplData(OpenJPAStateManager sm) {\n     /**\n      * Set field-level information into the given state manager.\n      */\n-    protected void loadField(OpenJPAStateManager sm, FieldMetaData fmd,\n-        FetchConfiguration fetch, Object context) {\n+    protected void loadField(OpenJPAStateManager sm, FieldMetaData fmd, FetchConfiguration fetch, Object context) {\n         int index = fmd.getIndex();\n         Object val = toField(sm, fmd, getData(index), fetch, context);\n+        \n+        // If val is null, make sure that we don't send back a null Embeddable or ElementCollection...perhaps others?\n+        // Probably should think about trying to shove this data back into the cache at this point so we don't\n+        // continually run through this code.\n+        if (val == null && fmd.isEmbeddedPC()) {\n+            val = sm.getContext().embed(null, null, sm, fmd).getManagedInstance();\n+        } else if (val == null && fmd.isElementCollection()) {\n+            val = sm.newProxy(index);\n+        }\n         sm.storeField(index, val);\n     }\n "},{"sha":"5c6aaadff189b3777908e1d299aa3f80c3ad3933","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransState.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3b20d750e73919118acd035b194cbe9ad64e7fc2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransState.java","raw_url":"https://github.com/apache/openjpa/raw/3b20d750e73919118acd035b194cbe9ad64e7fc2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransState.java?ref=3b20d750e73919118acd035b194cbe9ad64e7fc2","patch":"@@ -42,7 +42,7 @@ void initialize(StateManagerImpl context) {\n         context.clearSavedFields();\n \n         // spec says all proxies to second class objects should be reset\n-        context.proxyFields(true, true);\n+        context.proxyFields(true, false);\n     }\n \n     PCState delete(StateManagerImpl context) {"},{"sha":"8f26ba3db5bf4ba030cbda2652784fb56a05752f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedOwner.java","status":"modified","additions":22,"deletions":1,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/3b20d750e73919118acd035b194cbe9ad64e7fc2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedOwner.java","raw_url":"https://github.com/apache/openjpa/raw/3b20d750e73919118acd035b194cbe9ad64e7fc2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedOwner.java?ref=3b20d750e73919118acd035b194cbe9ad64e7fc2","patch":"@@ -19,7 +19,21 @@\n package org.apache.openjpa.persistence.jdbc.annotations;\n \n \n-import javax.persistence.*;\n+import java.util.Set;\n+\n+import javax.persistence.AssociationOverride;\n+import javax.persistence.AttributeOverride;\n+import javax.persistence.Basic;\n+import javax.persistence.Column;\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Embedded;\n+import javax.persistence.Entity;\n+import javax.persistence.EntityResult;\n+import javax.persistence.FieldResult;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.SqlResultSetMapping;\n \n @Entity\n @SqlResultSetMapping(name = \"EmbedMapping\", entities = {\n@@ -38,6 +52,9 @@\n         joinColumns = @JoinColumn(name = \"OVER_OWNER\"))\n     protected EmbedValue embed;\n \n+    @ElementCollection\n+    Set<EmbedValue> embedCollection;\n+    \n     @Basic\n     @Column(name = \"OWN_BASIC\")\n     protected String basic;\n@@ -65,4 +82,8 @@ public void setEmbed(EmbedValue embed) {\n     public EmbedValue getEmbed() {\n         return embed;\n     }\n+    \n+    public Set<EmbedValue> getEmbedCollection() {\n+        return embedCollection;\n+    }\n }"},{"sha":"d603c1343e88e448ac240517f341ebba5707eb4d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEJBEmbedded.java","status":"modified","additions":61,"deletions":21,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/3b20d750e73919118acd035b194cbe9ad64e7fc2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEJBEmbedded.java","raw_url":"https://github.com/apache/openjpa/raw/3b20d750e73919118acd035b194cbe9ad64e7fc2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEJBEmbedded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEJBEmbedded.java?ref=3b20d750e73919118acd035b194cbe9ad64e7fc2","patch":"@@ -19,6 +19,8 @@\n package org.apache.openjpa.persistence.jdbc.annotations;\n \n import java.sql.Types;\n+import java.util.Set;\n+\n import javax.persistence.EntityManager;\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n@@ -28,10 +30,11 @@\n import org.apache.openjpa.jdbc.meta.strats.MaxEmbeddedClobFieldStrategy;\n import org.apache.openjpa.jdbc.meta.strats.StringFieldStrategy;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n /**\n  * Test for embedded\n@@ -50,10 +53,13 @@\n     }\n \n     public void setUp() {\n-        setUp(EmbedOwner.class, EmbedValue.class, CLEAR_TABLES);\n+        setUp(EmbedOwner.class, EmbedValue.class, CLEAR_TABLES\n+        ,\"openjpa.Log\",\"SQL=trace\"    \n+        );\n     }\n \n     public void testEmbedded() {\n+\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n         EmbedOwner owner = new EmbedOwner();\n@@ -90,25 +96,59 @@ public void testEmbeddedMetaData() {\n         assertNull(embeddedMeta.getField(\"transientField\"));\n     }\n \n-    public void testNull() {\n-        EntityManager em = emf.createEntityManager();\n-        em.getTransaction().begin();\n-        EmbedOwner owner = new EmbedOwner();\n-        owner.setBasic(\"foo\");\n-        em.persist(owner);\n-        int pk = owner.getPk();\n-        em.getTransaction().commit();\n-        em.close();\n+    private void nullTestLogic(boolean cache) {\n+        // A place holder to swap the existing emf back in... maybe unnecessary?\n+        OpenJPAEntityManagerFactorySPI tempEmf = null;\n+        if (cache) {\n+            tempEmf = emf;\n+            emf = createEMF(\"openjpa.DataCache\", \"true\");\n+        }\n+        try {\n+            EntityManager em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            \n+            EmbedOwner owner = new EmbedOwner();\n+            owner.setBasic(\"foo\");\n+            \n+            assertNull(owner.getEmbed());\n+            assertNull(owner.getEmbedCollection());\n+            em.persist(owner);\n+            assertNull(owner.getEmbed());\n+            assertNull(owner.getEmbedCollection());\n+            \n+            int pk = owner.getPk();\n+            em.getTransaction().commit();\n+            assertNull(owner.getEmbed());\n+            assertNull(owner.getEmbedCollection());\n+            em.close();\n+            assertNull(owner.getEmbed());            \n+            assertNull(owner.getEmbedCollection());\n \n-        em = emf.createEntityManager();\n-        owner = em.find(EmbedOwner.class, pk);\n-        assertEquals(\"foo\", owner.getBasic());\n-        EmbedValue embed = owner.getEmbed();\n-        assertNotNull(embed);\n-        assertNull(embed.getClob());\n-        assertNull(embed.getBasic());\n-        assertNull(embed.getBlob());\n-        em.close();\n+            em = emf.createEntityManager();\n+            owner = em.find(EmbedOwner.class, pk);\n+            assertEquals(\"foo\", owner.getBasic());\n+            EmbedValue embed = owner.getEmbed();\n+            assertNotNull(embed);\n+            assertNull(embed.getClob());\n+            assertNull(embed.getBasic());\n+            assertNull(embed.getBlob());\n+            \n+            Set<EmbedValue> embedCollection = owner.getEmbedCollection(); \n+            assertNotNull(embedCollection);\n+            assertEquals(0, embedCollection.size());\n+            em.close();\n+        } finally {\n+            if(tempEmf!=null){\n+                emf.close();\n+                emf = tempEmf;\n+            }\n+        }\n+    }\n+    public void testNullNoCache() {\n+        nullTestLogic(false);\n+    }\n+    public void testNullCacheEnabled() {\n+        nullTestLogic(true);\n     }\n \n     public void testMappingTransferAndOverride() {"}]}

