{"sha":"3b2585f39b0e61e6224b20b5b3201704a3aef59c","node_id":"MDY6Q29tbWl0MjA2MzY0OjNiMjU4NWYzOWIwZTYxZTYyMjRiMjBiNWIzMjAxNzA0YTNhZWY1OWM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-04-09T15:07:33Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-04-09T15:07:33Z"},"message":"OPENJPA-1028 OPENJPA-1021 fix eol style for new classes\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@763677 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6c5027aa290ebe325453e6c7281bb8ccadadbc5c","url":"https://api.github.com/repos/apache/openjpa/git/trees/6c5027aa290ebe325453e6c7281bb8ccadadbc5c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3b2585f39b0e61e6224b20b5b3201704a3aef59c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3b2585f39b0e61e6224b20b5b3201704a3aef59c","html_url":"https://github.com/apache/openjpa/commit/3b2585f39b0e61e6224b20b5b3201704a3aef59c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3b2585f39b0e61e6224b20b5b3201704a3aef59c/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"be8731aafae9f336b96e7e7d985081f10178152a","url":"https://api.github.com/repos/apache/openjpa/commits/be8731aafae9f336b96e7e7d985081f10178152a","html_url":"https://github.com/apache/openjpa/commit/be8731aafae9f336b96e7e7d985081f10178152a"}],"stats":{"total":2308,"additions":1154,"deletions":1154},"files":[{"sha":"a2645e8b39c16c3f8d062fa0874124a19ec223be","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_MappedToOne.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/3b2585f39b0e61e6224b20b5b3201704a3aef59c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_MappedToOne.java","raw_url":"https://github.com/apache/openjpa/raw/3b2585f39b0e61e6224b20b5b3201704a3aef59c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_MappedToOne.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_MappedToOne.java?ref=3b2585f39b0e61e6224b20b5b3201704a3aef59c","patch":"@@ -1,65 +1,65 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.embed;\r\n-\r\n-import javax.persistence.Embeddable;\r\n-import javax.persistence.OneToOne;\r\n-\r\n-@Embeddable \r\n-public class Embed_MappedToOne {\r\n-    protected String name1;\r\n-    protected String name2;\r\n-    protected String name3;\r\n-    \r\n-    @OneToOne(mappedBy=\"entityA\")\r\n-    protected EntityB1 bm;\r\n-    \r\n-    \r\n-    public String getName1() {\r\n-        return name1;\r\n-    }\r\n-    \r\n-    public void setName1(String name1) {\r\n-        this.name1 = name1;\r\n-    }\r\n-    \r\n-    public String getName2() {\r\n-        return name2;\r\n-    }\r\n-    \r\n-    public void setName2(String name2) {\r\n-        this.name2 = name2;\r\n-    }\r\n-    \r\n-    public String getName3() {\r\n-        return name3;\r\n-    }\r\n-    \r\n-    public void setName3(String name3) {\r\n-        this.name3 = name3;\r\n-    }\r\n-    \r\n-    public void setMappedEntityB(EntityB1 bm) {\r\n-        this.bm = bm;\r\n-    }\r\n-    \r\n-    public EntityB1 getMappedEntityB() {\r\n-        return bm;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.embed;\n+\n+import javax.persistence.Embeddable;\n+import javax.persistence.OneToOne;\n+\n+@Embeddable \n+public class Embed_MappedToOne {\n+    protected String name1;\n+    protected String name2;\n+    protected String name3;\n+    \n+    @OneToOne(mappedBy=\"entityA\")\n+    protected EntityB1 bm;\n+    \n+    \n+    public String getName1() {\n+        return name1;\n+    }\n+    \n+    public void setName1(String name1) {\n+        this.name1 = name1;\n+    }\n+    \n+    public String getName2() {\n+        return name2;\n+    }\n+    \n+    public void setName2(String name2) {\n+        this.name2 = name2;\n+    }\n+    \n+    public String getName3() {\n+        return name3;\n+    }\n+    \n+    public void setName3(String name3) {\n+        this.name3 = name3;\n+    }\n+    \n+    public void setMappedEntityB(EntityB1 bm) {\n+        this.bm = bm;\n+    }\n+    \n+    public EntityB1 getMappedEntityB() {\n+        return bm;\n+    }\n+}"},{"sha":"c0169cf13de2762db9a5d14509ebe468947e66ae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_MappedToOne.java","status":"modified","additions":75,"deletions":75,"changes":150,"blob_url":"https://github.com/apache/openjpa/blob/3b2585f39b0e61e6224b20b5b3201704a3aef59c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_MappedToOne.java","raw_url":"https://github.com/apache/openjpa/raw/3b2585f39b0e61e6224b20b5b3201704a3aef59c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_MappedToOne.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_MappedToOne.java?ref=3b2585f39b0e61e6224b20b5b3201704a3aef59c","patch":"@@ -1,75 +1,75 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.embed;\r\n-import java.io.Serializable;\r\n-\r\n-import javax.persistence.Basic;\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Embedded;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.FetchType;\r\n-import javax.persistence.Id;\r\n-\r\n-@Entity\r\n-public class EntityA_Embed_MappedToOne implements Serializable {\r\n-    @Id\r\n-    Integer id;\r\n-\r\n-    @Column(length=30)\r\n-    String name;\r\n-    \r\n-    @Basic(fetch=FetchType.LAZY)\r\n-    int age;\r\n-\r\n-    @Embedded\r\n-    protected Embed_MappedToOne embed;\r\n-    \r\n-    public int getAge() {\r\n-        return age;\r\n-    }\r\n-\r\n-    public void setAge(int age) {\r\n-        this.age = age;\r\n-    }\r\n-\r\n-    public Integer getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(Integer id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    public Embed_MappedToOne getEmbed() {\r\n-        return embed;\r\n-    }\r\n-    \r\n-    public void setEmbed(Embed_MappedToOne embed) {\r\n-        this.embed = embed;\r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.embed;\n+import java.io.Serializable;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Column;\n+import javax.persistence.Embedded;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class EntityA_Embed_MappedToOne implements Serializable {\n+    @Id\n+    Integer id;\n+\n+    @Column(length=30)\n+    String name;\n+    \n+    @Basic(fetch=FetchType.LAZY)\n+    int age;\n+\n+    @Embedded\n+    protected Embed_MappedToOne embed;\n+    \n+    public int getAge() {\n+        return age;\n+    }\n+\n+    public void setAge(int age) {\n+        this.age = age;\n+    }\n+\n+    public Integer getId() {\n+        return id;\n+    }\n+\n+    public void setId(Integer id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public Embed_MappedToOne getEmbed() {\n+        return embed;\n+    }\n+    \n+    public void setEmbed(Embed_MappedToOne embed) {\n+        this.embed = embed;\n+    }\n+}\n+"},{"sha":"16ea7b1b159f9f1f570b65ead9785bf3821ab952","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex6/Company.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/3b2585f39b0e61e6224b20b5b3201704a3aef59c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex6/Company.java","raw_url":"https://github.com/apache/openjpa/raw/3b2585f39b0e61e6224b20b5b3201704a3aef59c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex6/Company.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex6/Company.java?ref=3b2585f39b0e61e6224b20b5b3201704a3aef59c","patch":"@@ -1,60 +1,60 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_27_ex6;\r\n-\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-@Table(name=\"S27x6Comp\")\r\n-public class Company {\r\n-    @Id\r\n-    int id;\r\n-\r\n-    @OneToMany\r\n-    @MapKey(name=\"div\")\r\n-    Map<Division, VicePresident> organization =\r\n-        new HashMap<Division, VicePresident>();\r\n-\r\n-    public int getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(int id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public Map getOrganization() {\r\n-        return organization;\r\n-    }\r\n-\r\n-    public void addToOrganization(VicePresident vp) {\r\n-        organization.put(vp.getDivision(), vp);\r\n-    }\r\n-\r\n-    public void removeFromOrganization(Division d) {\r\n-        organization.remove(d);\r\n-    }\r\n-\r\n-    public VicePresident getOrganization(Division d) {\r\n-        return organization.get(d);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_27_ex6;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@Table(name=\"S27x6Comp\")\n+public class Company {\n+    @Id\n+    int id;\n+\n+    @OneToMany\n+    @MapKey(name=\"div\")\n+    Map<Division, VicePresident> organization =\n+        new HashMap<Division, VicePresident>();\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public Map getOrganization() {\n+        return organization;\n+    }\n+\n+    public void addToOrganization(VicePresident vp) {\n+        organization.put(vp.getDivision(), vp);\n+    }\n+\n+    public void removeFromOrganization(Division d) {\n+        organization.remove(d);\n+    }\n+\n+    public VicePresident getOrganization(Division d) {\n+        return organization.get(d);\n+    }\n+}"},{"sha":"8fe482cd024a55cc9ad49d3d739e9032cb393041","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex6/Division.java","status":"modified","additions":63,"deletions":63,"changes":126,"blob_url":"https://github.com/apache/openjpa/blob/3b2585f39b0e61e6224b20b5b3201704a3aef59c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex6/Division.java","raw_url":"https://github.com/apache/openjpa/raw/3b2585f39b0e61e6224b20b5b3201704a3aef59c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex6/Division.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex6/Division.java?ref=3b2585f39b0e61e6224b20b5b3201704a3aef59c","patch":"@@ -1,63 +1,63 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_27_ex6;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"S27x6Div\")\r\n-public class Division {\r\n-    @Id\r\n-    int id;\r\n-\r\n-    String name;\r\n-\r\n-    public int getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(int id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    public boolean equals(Object o) {\r\n-        Division d = (Division) o;\r\n-        if (d.name.equals(name) &&\r\n-            d.getId() == id)\r\n-            return true;\r\n-        return false;\r\n-    }\r\n-\r\n-    public int hashCode() {\r\n-        int ret = 0;\r\n-        ret = ret * 31 + name.hashCode();\r\n-        ret = ret *31 + id;\r\n-        return ret;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_27_ex6;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"S27x6Div\")\n+public class Division {\n+    @Id\n+    int id;\n+\n+    String name;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public boolean equals(Object o) {\n+        Division d = (Division) o;\n+        if (d.name.equals(name) &&\n+            d.getId() == id)\n+            return true;\n+        return false;\n+    }\n+\n+    public int hashCode() {\n+        int ret = 0;\n+        ret = ret * 31 + name.hashCode();\n+        ret = ret *31 + id;\n+        return ret;\n+    }\n+}"},{"sha":"0cf676528322e6b07ceb067b3ee96b569dfbc442","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex6/TestSpec10_1_27_Ex6.java","status":"modified","additions":293,"deletions":293,"changes":586,"blob_url":"https://github.com/apache/openjpa/blob/3b2585f39b0e61e6224b20b5b3201704a3aef59c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex6/TestSpec10_1_27_Ex6.java","raw_url":"https://github.com/apache/openjpa/raw/3b2585f39b0e61e6224b20b5b3201704a3aef59c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex6/TestSpec10_1_27_Ex6.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex6/TestSpec10_1_27_Ex6.java?ref=3b2585f39b0e61e6224b20b5b3201704a3aef59c","patch":"@@ -1,293 +1,293 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_27_ex6;\r\n-\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import javax.persistence.EntityTransaction;\r\n-import javax.persistence.Query;\r\n-\r\n-import junit.framework.Assert;\r\n-\r\n-import org.apache.openjpa.kernel.QueryImpl;\r\n-import org.apache.openjpa.persistence.test.AllowFailure;\r\n-import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n-\r\n-public class TestSpec10_1_27_Ex6 extends SQLListenerTestCase {\r\n-    public int numCompany = 2;\r\n-    public int numDivisionsPerCo = 2;\r\n-\r\n-    public int compId = 1;\r\n-    public int divId = 1;\r\n-    public int vpId = 1;\r\n-    public int newDivId = 100;\r\n-    public int newVpId = 100;\r\n-    public List rsAllCompany = null;\r\n-\r\n-    public void setUp() {\r\n-        super.setUp(CLEAR_TABLES,\r\n-            Company.class,\r\n-            Division.class,\r\n-            VicePresident.class);\r\n-        createObj(emf);\r\n-        rsAllCompany = getAll(Company.class);\r\n-    }\r\n-\r\n-    public void testQueryObj() throws Exception {\r\n-        queryObj(emf);\r\n-    }\r\n-\r\n-    @AllowFailure\r\n-    public void testQueryInMemoryQualifiedId() throws Exception {\r\n-        queryQualifiedId(true);\r\n-    }\r\n-    \r\n-    @AllowFailure\r\n-    public void testQueryQualifiedId() throws Exception {\r\n-        queryQualifiedId(false);\r\n-    }\r\n-\r\n-    public void setCandidate(Query q, Class clz) \r\n-        throws Exception {\r\n-        org.apache.openjpa.persistence.QueryImpl q1 = \r\n-            (org.apache.openjpa.persistence.QueryImpl) q;\r\n-        org.apache.openjpa.kernel.Query q2 = q1.getDelegate();\r\n-        org.apache.openjpa.kernel.QueryImpl qi = (QueryImpl) q2;\r\n-        if (clz == Company.class)\r\n-            qi.setCandidateCollection(rsAllCompany);\r\n-    }\r\n-\r\n-    public void queryQualifiedId(boolean inMemory) throws Exception {\r\n-        EntityManager em = emf.createEntityManager();\r\n-\r\n-        String query = \"select KEY(e) from Company c, \" +\r\n-            \" in (c.organization) e order by c.id\";\r\n-        Query q = em.createQuery(query);\r\n-        if (inMemory) \r\n-            setCandidate(q, Company.class);\r\n-        List rs = q.getResultList();\r\n-        Division d = (Division) rs.get(0);\r\n-\r\n-        em.clear();\r\n-        query = \"select ENTRY(e) from Company c, \" +\r\n-            \" in (c.organization) e order by c.id\";\r\n-        q = em.createQuery(query);\r\n-        if (inMemory) \r\n-            setCandidate(q, Company.class);\r\n-        rs = q.getResultList();\r\n-        Map.Entry me = (Map.Entry) rs.get(0);\r\n-        assertTrue(d.equals(me.getKey()));\r\n-\r\n-        em.clear();\r\n-        query = \"select KEY(e) from Company c \" +\r\n-            \" left join c.organization e order by c.id\";\r\n-        q = em.createQuery(query);\r\n-        if (inMemory) \r\n-            setCandidate(q, Company.class);\r\n-        rs = q.getResultList();\r\n-        d = (Division) rs.get(0);\r\n-\r\n-        em.clear();\r\n-        query = \"select ENTRY(e) from Company c \" +\r\n-            \" left join c.organization e order by c.id\";\r\n-        q = em.createQuery(query);\r\n-        if (inMemory) \r\n-            setCandidate(q, Company.class);\r\n-        rs = q.getResultList();\r\n-        me = (Map.Entry) rs.get(0);\r\n-        assertTrue(d.equals(me.getKey()));\r\n-\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void createObj(EntityManagerFactory emf) {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        for (int i = 0; i < numCompany; i++)\r\n-            createCompany(em, compId++);\r\n-        tran.begin();\r\n-        em.flush();\r\n-        tran.commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void createCompany(EntityManager em, int id) {\r\n-        Company c = new Company();\r\n-        c.setId(id);\r\n-        for (int i = 0; i < numDivisionsPerCo; i++) {\r\n-            Division d = createDivision(em, divId++);\r\n-            VicePresident vp = createVicePresident(em, vpId++, d);\r\n-            c.addToOrganization(vp);\r\n-            em.persist(d);\r\n-            em.persist(vp);\r\n-        }\r\n-        em.persist(c);\r\n-    }\r\n-\r\n-    public Division createDivision(EntityManager em, int id) {\r\n-        Division d = new Division();\r\n-        d.setId(id);\r\n-        d.setName(\"d\" + id);\r\n-        return d;\r\n-    }\r\n-\r\n-    public VicePresident createVicePresident(EntityManager em, int id,\r\n-    \tDivision div) {\r\n-        VicePresident vp = new VicePresident();\r\n-        vp.setId(id);\r\n-        vp.setDivision(div);\r\n-        vp.setName(\"vp\" + id);\r\n-        return vp;\r\n-    }\r\n-\r\n-    public void findObj(EntityManagerFactory emf) {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        Company c = em.find(Company.class, 1);\r\n-        assertCompany(c);\r\n-\r\n-        Division d = em.find(Division.class, 1);\r\n-        assertDivision(d);\r\n-\r\n-        VicePresident vp = em.find(VicePresident.class, 1);\r\n-        assertVicePresident(vp);\r\n-\r\n-        updateObj(em, c);\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        c = em.find(Company.class, 1);\r\n-        assertCompany(c);\r\n-        deleteObj(em, c);\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void updateObj(EntityManager em, Company c) {\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        // remove an element\r\n-        tran.begin();\r\n-        Map orgs = c.getOrganization();\r\n-        Set keys = orgs.keySet();\r\n-        for (Object key : keys) {\r\n-            Division d = (Division)key;\r\n-            VicePresident vp = c.getOrganization(d);\r\n-            vp.setCompany(null);\r\n-            em.persist(vp);\r\n-            orgs.remove(d);\r\n-            break;\r\n-        }\r\n-        em.persist(c);\r\n-        em.flush();\r\n-        tran.commit();\r\n-\r\n-        // add an element\r\n-        tran.begin();\r\n-        Division d = createDivision(em, newDivId++);\r\n-        VicePresident vp = createVicePresident(em, newVpId++, d);\r\n-        c.addToOrganization(vp);\r\n-        vp.setCompany(c);\r\n-        em.persist(d);\r\n-        em.persist(vp);\r\n-        em.persist(c);\r\n-        em.flush();\r\n-        tran.commit();\r\n-\r\n-        // modify an element\r\n-        tran.begin();\r\n-        vp = c.getOrganization(d);\r\n-        vp.setName(\"newAgain\");\r\n-        em.persist(vp);\r\n-        em.persist(c);\r\n-        em.flush();\r\n-        tran.commit();\r\n-\r\n-    }\t\r\n-\r\n-    public void deleteObj(EntityManager em, Company c) {\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        tran.begin();\r\n-        em.remove(c);\r\n-        tran.commit();\r\n-    }\r\n-\r\n-    public void assertCompany(Company c) {\r\n-        int id = c.getId();\r\n-        Map organization = c.getOrganization();\r\n-        Assert.assertEquals(2,organization.size());\r\n-    }\r\n-\r\n-    public void assertDivision(Division d) {\r\n-        int id = d.getId();\r\n-        String name = d.getName();\r\n-    }\r\n-\r\n-    public void assertVicePresident(VicePresident vp) {\r\n-        int id = vp.getId();\r\n-        String name = vp.getName();\r\n-    }\r\n-\r\n-\r\n-    public void queryObj(EntityManagerFactory emf) {\r\n-        queryCompany(emf);\r\n-        queryDivision(emf);\r\n-        queryVicePresident(emf);\r\n-    }\r\n-\r\n-    public void queryCompany(EntityManagerFactory emf) {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        tran.begin();\r\n-        Query q = em.createQuery(\"select c from Company c\");\r\n-        List<Company> cs = q.getResultList();\r\n-        for (Company c : cs){\r\n-            assertCompany(c);\r\n-        }\r\n-        tran.commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void queryDivision(EntityManagerFactory emf) {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        tran.begin();\r\n-        Query q = em.createQuery(\"select d from Division d\");\r\n-        List<Division> ds = q.getResultList();\r\n-        for (Division d : ds){\r\n-            assertDivision(d);\r\n-        }\r\n-        tran.commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void queryVicePresident(EntityManagerFactory emf) {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        tran.begin();\r\n-        Query q = em.createQuery(\"select vp from VicePresident vp\");\r\n-        List<VicePresident> vps = q.getResultList();\r\n-        for (VicePresident vp : vps){\r\n-            assertVicePresident(vp);\r\n-        }\r\n-        tran.commit();\r\n-        em.close();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_27_ex6;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.EntityTransaction;\n+import javax.persistence.Query;\n+\n+import junit.framework.Assert;\n+\n+import org.apache.openjpa.kernel.QueryImpl;\n+import org.apache.openjpa.persistence.test.AllowFailure;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+public class TestSpec10_1_27_Ex6 extends SQLListenerTestCase {\n+    public int numCompany = 2;\n+    public int numDivisionsPerCo = 2;\n+\n+    public int compId = 1;\n+    public int divId = 1;\n+    public int vpId = 1;\n+    public int newDivId = 100;\n+    public int newVpId = 100;\n+    public List rsAllCompany = null;\n+\n+    public void setUp() {\n+        super.setUp(CLEAR_TABLES,\n+            Company.class,\n+            Division.class,\n+            VicePresident.class);\n+        createObj(emf);\n+        rsAllCompany = getAll(Company.class);\n+    }\n+\n+    public void testQueryObj() throws Exception {\n+        queryObj(emf);\n+    }\n+\n+    @AllowFailure\n+    public void testQueryInMemoryQualifiedId() throws Exception {\n+        queryQualifiedId(true);\n+    }\n+    \n+    @AllowFailure\n+    public void testQueryQualifiedId() throws Exception {\n+        queryQualifiedId(false);\n+    }\n+\n+    public void setCandidate(Query q, Class clz) \n+        throws Exception {\n+        org.apache.openjpa.persistence.QueryImpl q1 = \n+            (org.apache.openjpa.persistence.QueryImpl) q;\n+        org.apache.openjpa.kernel.Query q2 = q1.getDelegate();\n+        org.apache.openjpa.kernel.QueryImpl qi = (QueryImpl) q2;\n+        if (clz == Company.class)\n+            qi.setCandidateCollection(rsAllCompany);\n+    }\n+\n+    public void queryQualifiedId(boolean inMemory) throws Exception {\n+        EntityManager em = emf.createEntityManager();\n+\n+        String query = \"select KEY(e) from Company c, \" +\n+            \" in (c.organization) e order by c.id\";\n+        Query q = em.createQuery(query);\n+        if (inMemory) \n+            setCandidate(q, Company.class);\n+        List rs = q.getResultList();\n+        Division d = (Division) rs.get(0);\n+\n+        em.clear();\n+        query = \"select ENTRY(e) from Company c, \" +\n+            \" in (c.organization) e order by c.id\";\n+        q = em.createQuery(query);\n+        if (inMemory) \n+            setCandidate(q, Company.class);\n+        rs = q.getResultList();\n+        Map.Entry me = (Map.Entry) rs.get(0);\n+        assertTrue(d.equals(me.getKey()));\n+\n+        em.clear();\n+        query = \"select KEY(e) from Company c \" +\n+            \" left join c.organization e order by c.id\";\n+        q = em.createQuery(query);\n+        if (inMemory) \n+            setCandidate(q, Company.class);\n+        rs = q.getResultList();\n+        d = (Division) rs.get(0);\n+\n+        em.clear();\n+        query = \"select ENTRY(e) from Company c \" +\n+            \" left join c.organization e order by c.id\";\n+        q = em.createQuery(query);\n+        if (inMemory) \n+            setCandidate(q, Company.class);\n+        rs = q.getResultList();\n+        me = (Map.Entry) rs.get(0);\n+        assertTrue(d.equals(me.getKey()));\n+\n+        em.close();\n+    }\n+\n+    public void createObj(EntityManagerFactory emf) {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        for (int i = 0; i < numCompany; i++)\n+            createCompany(em, compId++);\n+        tran.begin();\n+        em.flush();\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public void createCompany(EntityManager em, int id) {\n+        Company c = new Company();\n+        c.setId(id);\n+        for (int i = 0; i < numDivisionsPerCo; i++) {\n+            Division d = createDivision(em, divId++);\n+            VicePresident vp = createVicePresident(em, vpId++, d);\n+            c.addToOrganization(vp);\n+            em.persist(d);\n+            em.persist(vp);\n+        }\n+        em.persist(c);\n+    }\n+\n+    public Division createDivision(EntityManager em, int id) {\n+        Division d = new Division();\n+        d.setId(id);\n+        d.setName(\"d\" + id);\n+        return d;\n+    }\n+\n+    public VicePresident createVicePresident(EntityManager em, int id,\n+    \tDivision div) {\n+        VicePresident vp = new VicePresident();\n+        vp.setId(id);\n+        vp.setDivision(div);\n+        vp.setName(\"vp\" + id);\n+        return vp;\n+    }\n+\n+    public void findObj(EntityManagerFactory emf) {\n+        EntityManager em = emf.createEntityManager();\n+        Company c = em.find(Company.class, 1);\n+        assertCompany(c);\n+\n+        Division d = em.find(Division.class, 1);\n+        assertDivision(d);\n+\n+        VicePresident vp = em.find(VicePresident.class, 1);\n+        assertVicePresident(vp);\n+\n+        updateObj(em, c);\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        c = em.find(Company.class, 1);\n+        assertCompany(c);\n+        deleteObj(em, c);\n+        em.close();\n+    }\n+\n+    public void updateObj(EntityManager em, Company c) {\n+        EntityTransaction tran = em.getTransaction();\n+        // remove an element\n+        tran.begin();\n+        Map orgs = c.getOrganization();\n+        Set keys = orgs.keySet();\n+        for (Object key : keys) {\n+            Division d = (Division)key;\n+            VicePresident vp = c.getOrganization(d);\n+            vp.setCompany(null);\n+            em.persist(vp);\n+            orgs.remove(d);\n+            break;\n+        }\n+        em.persist(c);\n+        em.flush();\n+        tran.commit();\n+\n+        // add an element\n+        tran.begin();\n+        Division d = createDivision(em, newDivId++);\n+        VicePresident vp = createVicePresident(em, newVpId++, d);\n+        c.addToOrganization(vp);\n+        vp.setCompany(c);\n+        em.persist(d);\n+        em.persist(vp);\n+        em.persist(c);\n+        em.flush();\n+        tran.commit();\n+\n+        // modify an element\n+        tran.begin();\n+        vp = c.getOrganization(d);\n+        vp.setName(\"newAgain\");\n+        em.persist(vp);\n+        em.persist(c);\n+        em.flush();\n+        tran.commit();\n+\n+    }\t\n+\n+    public void deleteObj(EntityManager em, Company c) {\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        em.remove(c);\n+        tran.commit();\n+    }\n+\n+    public void assertCompany(Company c) {\n+        int id = c.getId();\n+        Map organization = c.getOrganization();\n+        Assert.assertEquals(2,organization.size());\n+    }\n+\n+    public void assertDivision(Division d) {\n+        int id = d.getId();\n+        String name = d.getName();\n+    }\n+\n+    public void assertVicePresident(VicePresident vp) {\n+        int id = vp.getId();\n+        String name = vp.getName();\n+    }\n+\n+\n+    public void queryObj(EntityManagerFactory emf) {\n+        queryCompany(emf);\n+        queryDivision(emf);\n+        queryVicePresident(emf);\n+    }\n+\n+    public void queryCompany(EntityManagerFactory emf) {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        Query q = em.createQuery(\"select c from Company c\");\n+        List<Company> cs = q.getResultList();\n+        for (Company c : cs){\n+            assertCompany(c);\n+        }\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public void queryDivision(EntityManagerFactory emf) {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        Query q = em.createQuery(\"select d from Division d\");\n+        List<Division> ds = q.getResultList();\n+        for (Division d : ds){\n+            assertDivision(d);\n+        }\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public void queryVicePresident(EntityManagerFactory emf) {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        Query q = em.createQuery(\"select vp from VicePresident vp\");\n+        List<VicePresident> vps = q.getResultList();\n+        for (VicePresident vp : vps){\n+            assertVicePresident(vp);\n+        }\n+        tran.commit();\n+        em.close();\n+    }\n+}"},{"sha":"24911ae9c57486bc7e7897576980eb37dc3f7f2a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex6/VicePresident.java","status":"modified","additions":68,"deletions":68,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/3b2585f39b0e61e6224b20b5b3201704a3aef59c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex6/VicePresident.java","raw_url":"https://github.com/apache/openjpa/raw/3b2585f39b0e61e6224b20b5b3201704a3aef59c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex6/VicePresident.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex6/VicePresident.java?ref=3b2585f39b0e61e6224b20b5b3201704a3aef59c","patch":"@@ -1,68 +1,68 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_27_ex6;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-@Table(name=\"S27x6VP\")\r\n-public class VicePresident {\r\n-    @Id\r\n-    int id;\r\n-\r\n-    String name;\r\n-\r\n-    @ManyToOne\r\n-    Company co;\r\n-    \r\n-    @OneToOne\r\n-    Division div;\r\n-\r\n-    public int getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(int id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    public Company getCompany() {\r\n-        return co;\r\n-    }\r\n-\r\n-    public void setCompany(Company co) {\r\n-        this.co = co;\r\n-    }\r\n-\r\n-    public Division getDivision() {\r\n-        return div;\r\n-    }\r\n-\r\n-    public void setDivision(Division div) {\r\n-        this.div = div;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_27_ex6;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@Table(name=\"S27x6VP\")\n+public class VicePresident {\n+    @Id\n+    int id;\n+\n+    String name;\n+\n+    @ManyToOne\n+    Company co;\n+    \n+    @OneToOne\n+    Division div;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public Company getCompany() {\n+        return co;\n+    }\n+\n+    public void setCompany(Company co) {\n+        this.co = co;\n+    }\n+\n+    public Division getDivision() {\n+        return div;\n+    }\n+\n+    public void setDivision(Division div) {\n+        this.div = div;\n+    }\n+}"},{"sha":"ed642e30ab42467b2144199a4a93b27e2ea7c2ff","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex7/Company.java","status":"modified","additions":61,"deletions":61,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/3b2585f39b0e61e6224b20b5b3201704a3aef59c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex7/Company.java","raw_url":"https://github.com/apache/openjpa/raw/3b2585f39b0e61e6224b20b5b3201704a3aef59c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex7/Company.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex7/Company.java?ref=3b2585f39b0e61e6224b20b5b3201704a3aef59c","patch":"@@ -1,61 +1,61 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_27_ex7;\r\n-\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-@Table(name=\"S27x7Comp\")\r\n-public class Company {\r\n-    @Id\r\n-    int id;\r\n-\r\n-    @OneToMany(mappedBy=\"co\")\r\n-    @MapKey(name=\"div\")\r\n-    Map<Division, VicePresident> orgs =\r\n-        new HashMap<Division, VicePresident>();\r\n-\r\n-    public int getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(int id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public Map getOrganization() {\r\n-        return orgs;\r\n-    }\r\n-\r\n-    public void addToOrganization(VicePresident vp) {\r\n-        orgs.put(vp.getDivision(), vp);\r\n-    }\r\n-\r\n-    public void removeFromOrganization(Division d) {\r\n-        orgs.remove(d);\r\n-    }\r\n-\r\n-    public VicePresident getOrganization(Division d) {\r\n-        return orgs.get(d);\r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_27_ex7;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@Table(name=\"S27x7Comp\")\n+public class Company {\n+    @Id\n+    int id;\n+\n+    @OneToMany(mappedBy=\"co\")\n+    @MapKey(name=\"div\")\n+    Map<Division, VicePresident> orgs =\n+        new HashMap<Division, VicePresident>();\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public Map getOrganization() {\n+        return orgs;\n+    }\n+\n+    public void addToOrganization(VicePresident vp) {\n+        orgs.put(vp.getDivision(), vp);\n+    }\n+\n+    public void removeFromOrganization(Division d) {\n+        orgs.remove(d);\n+    }\n+\n+    public VicePresident getOrganization(Division d) {\n+        return orgs.get(d);\n+    }\n+}\n+"},{"sha":"299e469ad76dd7ca316231c49e1c42213a8f4aa8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex7/Division.java","status":"modified","additions":63,"deletions":63,"changes":126,"blob_url":"https://github.com/apache/openjpa/blob/3b2585f39b0e61e6224b20b5b3201704a3aef59c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex7/Division.java","raw_url":"https://github.com/apache/openjpa/raw/3b2585f39b0e61e6224b20b5b3201704a3aef59c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex7/Division.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex7/Division.java?ref=3b2585f39b0e61e6224b20b5b3201704a3aef59c","patch":"@@ -1,63 +1,63 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_27_ex7;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"S27x7Div\")\r\n-public class Division {\r\n-    @Id\r\n-    int id;\r\n-\r\n-    String name;\r\n-\r\n-    public int getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(int id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    public boolean equals(Object o) {\r\n-        Division d = (Division) o;\r\n-        if (d.name.equals(name) &&\r\n-            d.getId() == id)\r\n-            return true;\r\n-        return false;\r\n-    }\r\n-\r\n-    public int hashCode() {\r\n-        int ret = 0;\r\n-        ret = ret * 31 + name.hashCode();\r\n-        ret = ret *31 + id;\r\n-        return ret;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_27_ex7;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"S27x7Div\")\n+public class Division {\n+    @Id\n+    int id;\n+\n+    String name;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public boolean equals(Object o) {\n+        Division d = (Division) o;\n+        if (d.name.equals(name) &&\n+            d.getId() == id)\n+            return true;\n+        return false;\n+    }\n+\n+    public int hashCode() {\n+        int ret = 0;\n+        ret = ret * 31 + name.hashCode();\n+        ret = ret *31 + id;\n+        return ret;\n+    }\n+}"},{"sha":"bb9f0c3c8406cb9d7b690d0daa14be394a3a9719","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex7/TestSpec10_1_27_Ex7.java","status":"modified","additions":338,"deletions":338,"changes":676,"blob_url":"https://github.com/apache/openjpa/blob/3b2585f39b0e61e6224b20b5b3201704a3aef59c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex7/TestSpec10_1_27_Ex7.java","raw_url":"https://github.com/apache/openjpa/raw/3b2585f39b0e61e6224b20b5b3201704a3aef59c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex7/TestSpec10_1_27_Ex7.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex7/TestSpec10_1_27_Ex7.java?ref=3b2585f39b0e61e6224b20b5b3201704a3aef59c","patch":"@@ -1,338 +1,338 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_27_ex7;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import javax.persistence.EntityTransaction;\r\n-import javax.persistence.Query;\r\n-\r\n-import junit.framework.Assert;\r\n-\r\n-import org.apache.openjpa.kernel.QueryImpl;\r\n-import org.apache.openjpa.persistence.test.AllowFailure;\r\n-import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n-\r\n-public class TestSpec10_1_27_Ex7 extends SQLListenerTestCase {\r\n-    public int numCompany = 2;\r\n-    public int numDivisionsPerCo = 2;\r\n-    public List<String> namedQueries = new ArrayList<String>();\r\n-    \r\n-    public int compId = 1;\r\n-    public int divId = 1;\r\n-    public int vpId = 1;\r\n-    public int newDivId = 100;\r\n-    public int newVpId = 100;\r\n-    public List rsAllCompany = null;\r\n-\r\n-    public void setUp() {\r\n-        super.setUp(CLEAR_TABLES,\r\n-            Company.class,\r\n-            Division.class,\r\n-            VicePresident.class);\r\n-        createObj(emf);\r\n-        rsAllCompany = getAll(Company.class);\r\n-    }\r\n-\r\n-    public void testQueryObj() throws Exception {\r\n-        queryObj(emf);\r\n-    }\r\n-\r\n-    @AllowFailure\r\n-    public void testQueryInMemoryQualifiedId() throws Exception {\r\n-        queryQualifiedId(true);\r\n-    }\r\n-    \r\n-    @AllowFailure\r\n-    public void testQueryQualifiedId() throws Exception {\r\n-        queryQualifiedId(false);\r\n-    }\r\n-\r\n-    public void setCandidate(Query q, Class clz) \r\n-        throws Exception {\r\n-        org.apache.openjpa.persistence.QueryImpl q1 = \r\n-            (org.apache.openjpa.persistence.QueryImpl) q;\r\n-        org.apache.openjpa.kernel.Query q2 = q1.getDelegate();\r\n-        org.apache.openjpa.kernel.QueryImpl qi = (QueryImpl) q2;\r\n-        if (clz == Company.class)\r\n-            qi.setCandidateCollection(rsAllCompany);\r\n-    }\r\n-\r\n-    public void queryQualifiedId(boolean inMemory) throws Exception {\r\n-        EntityManager em = emf.createEntityManager();\r\n-\r\n-        String query = \"select KEY(e) from Company c, \" +\r\n-            \" in (c.orgs) e order by c.id\";\r\n-        Query q = em.createQuery(query);\r\n-        if (inMemory) \r\n-            setCandidate(q, Company.class);\r\n-        List rs = q.getResultList();\r\n-        Division d = (Division) rs.get(0);\r\n-\r\n-        em.clear();\r\n-        query = \"select ENTRY(e) from Company c, \" +\r\n-            \" in (c.orgs) e order by c.id\";\r\n-        q = em.createQuery(query);\r\n-        if (inMemory) \r\n-            setCandidate(q, Company.class);\r\n-        rs = q.getResultList();\r\n-        Map.Entry me = (Map.Entry) rs.get(0);\r\n-\r\n-        assertTrue(d.equals(me.getKey()));\r\n-\r\n-        em.clear();\r\n-        query = \"select KEY(e) from Company c \" +\r\n-            \" left join c.orgs e order by c.id\";\r\n-        q = em.createQuery(query);\r\n-        if (inMemory) \r\n-            setCandidate(q, Company.class);\r\n-        rs = q.getResultList();\r\n-        d = (Division) rs.get(0);\r\n-\r\n-        em.clear();\r\n-        query = \"select ENTRY(e) from Company c \" +\r\n-            \" left join c.orgs e order by c.id\";\r\n-        q = em.createQuery(query);\r\n-        if (inMemory) \r\n-            setCandidate(q, Company.class);\r\n-        rs = q.getResultList();\r\n-        me = (Map.Entry) rs.get(0);\r\n-        assertTrue(d.equals(me.getKey()));\r\n-\r\n-        em.close();\r\n-    }\r\n-    \r\n-\tpublic void createObj(EntityManagerFactory emf) {\r\n-\t\tEntityManager em = emf.createEntityManager();\r\n-\t\tEntityTransaction tran = em.getTransaction();\r\n-\t\tfor (int i = 0; i < numCompany; i++)\r\n-\t\t    createCompany(em, compId++);\r\n-\t\ttran.begin();\r\n-\t\tem.flush();\r\n-\t\ttran.commit();\r\n-        em.close();\r\n-\t}\r\n-\r\n-\tpublic void createCompany(EntityManager em, int id) {\r\n-        Company c = new Company();\r\n-        c.setId(id);\r\n-        for (int i = 0; i < numDivisionsPerCo; i++) {\r\n-            Division d = createDivision(em, divId++);\r\n-            VicePresident vp = createVicePresident(em, vpId++, d);\r\n-            c.addToOrganization(vp);\r\n-            vp.setCompany(c);\r\n-            em.persist(d);\r\n-            em.persist(vp);\r\n-        }\r\n-        em.persist(c);\r\n- \t}\r\n-\t\r\n-    public Division createDivision(EntityManager em, int id) {\r\n-        Division d = new Division();\r\n-        d.setId(id);\r\n-        d.setName(\"d\" + id);\r\n-        return d;\r\n-    }\r\n-\t\r\n-    public VicePresident createVicePresident(EntityManager em, int id,\r\n-    \tDivision d) {\r\n-        VicePresident vp = new VicePresident();\r\n-        vp.setId(id);\r\n-        vp.setDivision(d);\r\n-        vp.setName(\"vp\" + id);\r\n-        return vp;\r\n-    }\r\n-\t\r\n-\tpublic void findObj(EntityManagerFactory emf) {\r\n-        EntityManager em = emf.createEntityManager();\r\n- \t    Company c = em.find(Company.class, 1);\r\n-\t    assertCompany(c);\r\n-\t    \r\n-        Division d = em.find(Division.class, 1);\r\n-        assertDivision(d);\r\n-        \r\n-        VicePresident vp = em.find(VicePresident.class, 1);\r\n-        assertVicePresident(vp);\r\n-        \r\n-        updateObj1(em, c);\r\n-        \r\n-/*        \r\n-        updateObj(em, c);\r\n-        em.close();\r\n-        \r\n-        em = emf.createEntityManager();\r\n-        c = em.find(Company.class, 1);\r\n-        assertCompany(c);\r\n-        deleteObj(em, c);\r\n-\t    em.close();\r\n-*/\t    \r\n-\t}\r\n-\r\n-    public void updateObj1(EntityManager em, Company c) {\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        // remove an element\r\n-        tran.begin();\r\n-        Map orgs = c.getOrganization();\r\n-        VicePresident vp = null;\r\n-        Set keys = orgs.keySet();\r\n-        for (Object key : keys) {\r\n-            Division d = (Division)key;\r\n-            vp = c.getOrganization(d);\r\n-            vp.setCompany(null);\r\n-            em.persist(vp);\r\n-            c.removeFromOrganization(d);\r\n-            break;\r\n-        }\r\n-        em.persist(c);\r\n-        em.flush();\r\n-        tran.commit();\r\n-        \r\n-        tran.begin();\r\n-        em.remove(c);\r\n-        em.flush();\r\n-        tran.commit();\r\n-        \r\n-        tran.begin();\r\n-        Company c1 = new Company();\r\n-        c1.setId(1);\r\n-        Division d = createDivision(em, divId++);\r\n-        c1.addToOrganization(vp);\r\n-        vp.setCompany(c1);\r\n-        em.persist(d);\r\n-        em.persist(c1);\r\n-        em.flush();\r\n-        tran.commit();\r\n-    }\r\n-    \r\n-    public void updateObj(EntityManager em, Company c) {\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        // remove an element\r\n-        tran.begin();\r\n-        Map orgs = c.getOrganization();\r\n-        Set keys = orgs.keySet();\r\n-        for (Object key : keys) {\r\n-            Division d = (Division)key;\r\n-            VicePresident vp = c.getOrganization(d);\r\n-            vp.setCompany(null);\r\n-            em.persist(vp);\r\n-            c.removeFromOrganization(d);\r\n-            break;\r\n-        }\r\n-        em.persist(c);\r\n-        em.flush();\r\n-        tran.commit();\r\n-        \r\n-        // add an element\r\n-        tran.begin();\r\n-        Division d = createDivision(em, newDivId++);\r\n-        VicePresident vp = createVicePresident(em, newVpId++, d);\r\n-        c.addToOrganization(vp);\r\n-        vp.setCompany(c);\r\n-        em.persist(d);\r\n-        em.persist(vp);\r\n-        em.persist(c);\r\n-        em.flush();\r\n-        tran.commit();\r\n-        \r\n-        // modify an element\r\n-        tran.begin();\r\n-        vp = c.getOrganization(d);\r\n-        vp.setName(\"newAgain\");\r\n-        em.persist(vp);\r\n-        em.persist(c);\r\n-        em.flush();\r\n-        tran.commit();\r\n-        \r\n-    }   \r\n-\r\n-    public void deleteObj(EntityManager em, Company c) {\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        tran.begin();\r\n-        em.remove(c);\r\n-        tran.commit();\r\n-    }\r\n-    \r\n-\tpublic void assertCompany(Company c) {\r\n-        int id = c.getId();\r\n-        Map organization = c.getOrganization();\r\n-        Assert.assertEquals(2,organization.size());\r\n-\t}\r\n-\t\r\n-    public void assertDivision(Division d) {\r\n-        int id = d.getId();\r\n-        String name = d.getName();\r\n-    }\r\n-\r\n-    public void assertVicePresident(VicePresident vp) {\r\n-        int id = vp.getId();\r\n-        String name = vp.getName();\r\n-    }\r\n-\t\r\n-\t\r\n-\tpublic void queryObj(EntityManagerFactory emf) {\r\n-        queryCompany(emf);\r\n-        queryDivision(emf);\r\n-        queryVicePresident(emf);\r\n-\t}\r\n-\t\r\n-\tpublic void queryCompany(EntityManagerFactory emf) {\r\n-\t\tEntityManager em = emf.createEntityManager();\r\n-\t\tEntityTransaction tran = em.getTransaction();\r\n-\t\ttran.begin();\r\n-\t\tQuery q = em.createQuery(\"select c from Company c\");\r\n-\t\tList<Company> cs = q.getResultList();\r\n-\t\tfor (Company c : cs){\r\n-\t\t    assertCompany(c);\r\n-\t\t}\r\n-\t\ttran.commit();\r\n-\t\tem.close();\r\n-\t}\r\n-\r\n-\tpublic void queryDivision(EntityManagerFactory emf) {\r\n-\t    EntityManager em = emf.createEntityManager();\r\n-\t    EntityTransaction tran = em.getTransaction();\r\n-\t    tran.begin();\r\n-\t    Query q = em.createQuery(\"select d from Division d\");\r\n-\t    List<Division> ds = q.getResultList();\r\n-\t    for (Division d : ds){\r\n-\t        assertDivision(d);\r\n-\t    }\r\n-\t    tran.commit();\r\n-\t    em.close();\r\n-\t}\r\n-\r\n-    public void queryVicePresident(EntityManagerFactory emf) {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        tran.begin();\r\n-        Query q = em.createQuery(\"select vp from VicePresident vp\");\r\n-        List<VicePresident> vps = q.getResultList();\r\n-        for (VicePresident vp : vps){\r\n-            assertVicePresident(vp);\r\n-        }\r\n-        tran.commit();\r\n-        em.close();\r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_27_ex7;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.EntityTransaction;\n+import javax.persistence.Query;\n+\n+import junit.framework.Assert;\n+\n+import org.apache.openjpa.kernel.QueryImpl;\n+import org.apache.openjpa.persistence.test.AllowFailure;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+public class TestSpec10_1_27_Ex7 extends SQLListenerTestCase {\n+    public int numCompany = 2;\n+    public int numDivisionsPerCo = 2;\n+    public List<String> namedQueries = new ArrayList<String>();\n+    \n+    public int compId = 1;\n+    public int divId = 1;\n+    public int vpId = 1;\n+    public int newDivId = 100;\n+    public int newVpId = 100;\n+    public List rsAllCompany = null;\n+\n+    public void setUp() {\n+        super.setUp(CLEAR_TABLES,\n+            Company.class,\n+            Division.class,\n+            VicePresident.class);\n+        createObj(emf);\n+        rsAllCompany = getAll(Company.class);\n+    }\n+\n+    public void testQueryObj() throws Exception {\n+        queryObj(emf);\n+    }\n+\n+    @AllowFailure\n+    public void testQueryInMemoryQualifiedId() throws Exception {\n+        queryQualifiedId(true);\n+    }\n+    \n+    @AllowFailure\n+    public void testQueryQualifiedId() throws Exception {\n+        queryQualifiedId(false);\n+    }\n+\n+    public void setCandidate(Query q, Class clz) \n+        throws Exception {\n+        org.apache.openjpa.persistence.QueryImpl q1 = \n+            (org.apache.openjpa.persistence.QueryImpl) q;\n+        org.apache.openjpa.kernel.Query q2 = q1.getDelegate();\n+        org.apache.openjpa.kernel.QueryImpl qi = (QueryImpl) q2;\n+        if (clz == Company.class)\n+            qi.setCandidateCollection(rsAllCompany);\n+    }\n+\n+    public void queryQualifiedId(boolean inMemory) throws Exception {\n+        EntityManager em = emf.createEntityManager();\n+\n+        String query = \"select KEY(e) from Company c, \" +\n+            \" in (c.orgs) e order by c.id\";\n+        Query q = em.createQuery(query);\n+        if (inMemory) \n+            setCandidate(q, Company.class);\n+        List rs = q.getResultList();\n+        Division d = (Division) rs.get(0);\n+\n+        em.clear();\n+        query = \"select ENTRY(e) from Company c, \" +\n+            \" in (c.orgs) e order by c.id\";\n+        q = em.createQuery(query);\n+        if (inMemory) \n+            setCandidate(q, Company.class);\n+        rs = q.getResultList();\n+        Map.Entry me = (Map.Entry) rs.get(0);\n+\n+        assertTrue(d.equals(me.getKey()));\n+\n+        em.clear();\n+        query = \"select KEY(e) from Company c \" +\n+            \" left join c.orgs e order by c.id\";\n+        q = em.createQuery(query);\n+        if (inMemory) \n+            setCandidate(q, Company.class);\n+        rs = q.getResultList();\n+        d = (Division) rs.get(0);\n+\n+        em.clear();\n+        query = \"select ENTRY(e) from Company c \" +\n+            \" left join c.orgs e order by c.id\";\n+        q = em.createQuery(query);\n+        if (inMemory) \n+            setCandidate(q, Company.class);\n+        rs = q.getResultList();\n+        me = (Map.Entry) rs.get(0);\n+        assertTrue(d.equals(me.getKey()));\n+\n+        em.close();\n+    }\n+    \n+\tpublic void createObj(EntityManagerFactory emf) {\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\tEntityTransaction tran = em.getTransaction();\n+\t\tfor (int i = 0; i < numCompany; i++)\n+\t\t    createCompany(em, compId++);\n+\t\ttran.begin();\n+\t\tem.flush();\n+\t\ttran.commit();\n+        em.close();\n+\t}\n+\n+\tpublic void createCompany(EntityManager em, int id) {\n+        Company c = new Company();\n+        c.setId(id);\n+        for (int i = 0; i < numDivisionsPerCo; i++) {\n+            Division d = createDivision(em, divId++);\n+            VicePresident vp = createVicePresident(em, vpId++, d);\n+            c.addToOrganization(vp);\n+            vp.setCompany(c);\n+            em.persist(d);\n+            em.persist(vp);\n+        }\n+        em.persist(c);\n+ \t}\n+\t\n+    public Division createDivision(EntityManager em, int id) {\n+        Division d = new Division();\n+        d.setId(id);\n+        d.setName(\"d\" + id);\n+        return d;\n+    }\n+\t\n+    public VicePresident createVicePresident(EntityManager em, int id,\n+    \tDivision d) {\n+        VicePresident vp = new VicePresident();\n+        vp.setId(id);\n+        vp.setDivision(d);\n+        vp.setName(\"vp\" + id);\n+        return vp;\n+    }\n+\t\n+\tpublic void findObj(EntityManagerFactory emf) {\n+        EntityManager em = emf.createEntityManager();\n+ \t    Company c = em.find(Company.class, 1);\n+\t    assertCompany(c);\n+\t    \n+        Division d = em.find(Division.class, 1);\n+        assertDivision(d);\n+        \n+        VicePresident vp = em.find(VicePresident.class, 1);\n+        assertVicePresident(vp);\n+        \n+        updateObj1(em, c);\n+        \n+/*        \n+        updateObj(em, c);\n+        em.close();\n+        \n+        em = emf.createEntityManager();\n+        c = em.find(Company.class, 1);\n+        assertCompany(c);\n+        deleteObj(em, c);\n+\t    em.close();\n+*/\t    \n+\t}\n+\n+    public void updateObj1(EntityManager em, Company c) {\n+        EntityTransaction tran = em.getTransaction();\n+        // remove an element\n+        tran.begin();\n+        Map orgs = c.getOrganization();\n+        VicePresident vp = null;\n+        Set keys = orgs.keySet();\n+        for (Object key : keys) {\n+            Division d = (Division)key;\n+            vp = c.getOrganization(d);\n+            vp.setCompany(null);\n+            em.persist(vp);\n+            c.removeFromOrganization(d);\n+            break;\n+        }\n+        em.persist(c);\n+        em.flush();\n+        tran.commit();\n+        \n+        tran.begin();\n+        em.remove(c);\n+        em.flush();\n+        tran.commit();\n+        \n+        tran.begin();\n+        Company c1 = new Company();\n+        c1.setId(1);\n+        Division d = createDivision(em, divId++);\n+        c1.addToOrganization(vp);\n+        vp.setCompany(c1);\n+        em.persist(d);\n+        em.persist(c1);\n+        em.flush();\n+        tran.commit();\n+    }\n+    \n+    public void updateObj(EntityManager em, Company c) {\n+        EntityTransaction tran = em.getTransaction();\n+        // remove an element\n+        tran.begin();\n+        Map orgs = c.getOrganization();\n+        Set keys = orgs.keySet();\n+        for (Object key : keys) {\n+            Division d = (Division)key;\n+            VicePresident vp = c.getOrganization(d);\n+            vp.setCompany(null);\n+            em.persist(vp);\n+            c.removeFromOrganization(d);\n+            break;\n+        }\n+        em.persist(c);\n+        em.flush();\n+        tran.commit();\n+        \n+        // add an element\n+        tran.begin();\n+        Division d = createDivision(em, newDivId++);\n+        VicePresident vp = createVicePresident(em, newVpId++, d);\n+        c.addToOrganization(vp);\n+        vp.setCompany(c);\n+        em.persist(d);\n+        em.persist(vp);\n+        em.persist(c);\n+        em.flush();\n+        tran.commit();\n+        \n+        // modify an element\n+        tran.begin();\n+        vp = c.getOrganization(d);\n+        vp.setName(\"newAgain\");\n+        em.persist(vp);\n+        em.persist(c);\n+        em.flush();\n+        tran.commit();\n+        \n+    }   \n+\n+    public void deleteObj(EntityManager em, Company c) {\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        em.remove(c);\n+        tran.commit();\n+    }\n+    \n+\tpublic void assertCompany(Company c) {\n+        int id = c.getId();\n+        Map organization = c.getOrganization();\n+        Assert.assertEquals(2,organization.size());\n+\t}\n+\t\n+    public void assertDivision(Division d) {\n+        int id = d.getId();\n+        String name = d.getName();\n+    }\n+\n+    public void assertVicePresident(VicePresident vp) {\n+        int id = vp.getId();\n+        String name = vp.getName();\n+    }\n+\t\n+\t\n+\tpublic void queryObj(EntityManagerFactory emf) {\n+        queryCompany(emf);\n+        queryDivision(emf);\n+        queryVicePresident(emf);\n+\t}\n+\t\n+\tpublic void queryCompany(EntityManagerFactory emf) {\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\tEntityTransaction tran = em.getTransaction();\n+\t\ttran.begin();\n+\t\tQuery q = em.createQuery(\"select c from Company c\");\n+\t\tList<Company> cs = q.getResultList();\n+\t\tfor (Company c : cs){\n+\t\t    assertCompany(c);\n+\t\t}\n+\t\ttran.commit();\n+\t\tem.close();\n+\t}\n+\n+\tpublic void queryDivision(EntityManagerFactory emf) {\n+\t    EntityManager em = emf.createEntityManager();\n+\t    EntityTransaction tran = em.getTransaction();\n+\t    tran.begin();\n+\t    Query q = em.createQuery(\"select d from Division d\");\n+\t    List<Division> ds = q.getResultList();\n+\t    for (Division d : ds){\n+\t        assertDivision(d);\n+\t    }\n+\t    tran.commit();\n+\t    em.close();\n+\t}\n+\n+    public void queryVicePresident(EntityManagerFactory emf) {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        Query q = em.createQuery(\"select vp from VicePresident vp\");\n+        List<VicePresident> vps = q.getResultList();\n+        for (VicePresident vp : vps){\n+            assertVicePresident(vp);\n+        }\n+        tran.commit();\n+        em.close();\n+    }\n+}\n+"},{"sha":"e8c50b5bf67a7c115ef239ce3bb2fff4a464684b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex7/VicePresident.java","status":"modified","additions":68,"deletions":68,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/3b2585f39b0e61e6224b20b5b3201704a3aef59c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex7/VicePresident.java","raw_url":"https://github.com/apache/openjpa/raw/3b2585f39b0e61e6224b20b5b3201704a3aef59c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex7/VicePresident.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_27_ex7/VicePresident.java?ref=3b2585f39b0e61e6224b20b5b3201704a3aef59c","patch":"@@ -1,68 +1,68 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_27_ex7;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-@Table(name=\"S27x7VP\")\r\n-public class VicePresident {\r\n-    @Id\r\n-    int id;\r\n-\r\n-    String name;\r\n-\r\n-    @ManyToOne\r\n-    Company co;\r\n-    \r\n-    @OneToOne\r\n-    Division div;\r\n-\r\n-    public int getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(int id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    public Company getCompany() {\r\n-        return co;\r\n-    }\r\n-\r\n-    public void setCompany(Company co) {\r\n-        this.co = co;\r\n-    }\r\n-\r\n-    public Division getDivision() {\r\n-        return div;\r\n-    }\r\n-\r\n-    public void setDivision(Division div) {\r\n-        this.div = div;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_27_ex7;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@Table(name=\"S27x7VP\")\n+public class VicePresident {\n+    @Id\n+    int id;\n+\n+    String name;\n+\n+    @ManyToOne\n+    Company co;\n+    \n+    @OneToOne\n+    Division div;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public Company getCompany() {\n+        return co;\n+    }\n+\n+    public void setCompany(Company co) {\n+        this.co = co;\n+    }\n+\n+    public Division getDivision() {\n+        return div;\n+    }\n+\n+    public void setDivision(Division div) {\n+        this.div = div;\n+    }\n+}"}]}

