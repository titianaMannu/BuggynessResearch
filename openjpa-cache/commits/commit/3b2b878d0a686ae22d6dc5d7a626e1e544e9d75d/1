{"sha":"3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d","node_id":"MDY6Q29tbWl0MjA2MzY0OjNiMmI4NzhkMGE2ODZhZTIyZDZkYzVkN2E2MjZlMWU1NDRlOWQ3NWQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-12T23:50:55Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-12T23:50:55Z"},"message":"OPENJPA-399 committing Teresa's patch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@584337 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0060f75748ee85385565b06c27173a014b0c18d8","url":"https://api.github.com/repos/apache/openjpa/git/trees/0060f75748ee85385565b06c27173a014b0c18d8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d","html_url":"https://github.com/apache/openjpa/commit/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"008ac73d7cfd1ad5943f7d036e168c7b9b2b4478","url":"https://api.github.com/repos/apache/openjpa/commits/008ac73d7cfd1ad5943f7d036e168c7b9b2b4478","html_url":"https://github.com/apache/openjpa/commit/008ac73d7cfd1ad5943f7d036e168c7b9b2b4478"}],"stats":{"total":946,"additions":910,"deletions":36},"files":[{"sha":"52897c27474bf0a11f052d4b72b59e107da0367e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","status":"modified","additions":65,"deletions":21,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java?ref=3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d","patch":"@@ -24,11 +24,13 @@\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Types;\n+import java.util.HashMap;\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.schema.Index;\n import org.apache.openjpa.jdbc.schema.PrimaryKey;\n import org.apache.openjpa.jdbc.schema.Schema;\n import org.apache.openjpa.jdbc.schema.SchemaGroup;\n@@ -77,14 +79,15 @@\n     private transient Log _log = null;\n     private int _alloc = 50;\n     private int _intValue = 1;\n-    private final Status _stat = new Status();\n+    private final HashMap _stat = new HashMap();\n \n     private String _table = \"OPENJPA_SEQUENCE_TABLE\";\n     private String _seqColumnName = \"SEQUENCE_VALUE\";\n     private String _pkColumnName = \"ID\";\n \n     private Column _seqColumn = null;\n     private Column _pkColumn = null;\n+    private int _schemasIdx = 0;    \n \n     /**\n      * The sequence table name. Defaults to <code>OPENJPA_SEQUENCE_TABLE</code>.\n@@ -212,20 +215,37 @@ public void endConfiguration() {\n         buildTable();\n     }\n     \n-    public void addSchema(ClassMapping mapping, SchemaGroup group) {\n-        // table already exists?\n-        if (group.isKnownTable(_table))\n-            return;\n \n-        String schemaName = Strings.getPackageName(_table);\n-        if (schemaName.length() == 0)\n-            schemaName = Schemas.getNewTableSchema(_conf);\n-\n-        // create table in this group\n-        Schema schema = group.getSchema(schemaName);\n-        if (schema == null)\n-            schema = group.addSchema(schemaName);\n-        schema.importTable(_pkColumn.getTable());\n+    public void addSchema(ClassMapping mapping, SchemaGroup group) {\n+        // Since the table is created by openjpa internally\n+        // we can create the table for each schema within the PU\n+        // in here.\n+        \n+        Schema[] schemas = group.getSchemas();\n+        for (int i = 0; i < schemas.length; i++) {\n+            String schemaName = Strings.getPackageName(_table);\n+            if (schemaName.length() == 0)\n+                schemaName = Schemas.getNewTableSchema(_conf);\n+            if (schemaName == null)\n+                schemaName = schemas[i].getName();\n+\n+            // create table in this group\n+            Schema schema = group.getSchema(schemaName);\n+            if (schema == null)\n+                schema = group.addSchema(schemaName);\n+            \n+            schema.importTable(_pkColumn.getTable());\n+            // build the index for the sequence tables\n+            // the index name will the fully qualified table name +_IDX\n+            Table tab = schema.getTable(_table); \n+            Index idx = tab.addIndex(tab.getFullName()+\"_IDX\");\n+            idx.setUnique(true);\n+            // we need to reset the table name in the column with the\n+            // fully qualified name for matching the table name from the\n+            // Column.\n+            _pkColumn.resetTableName(schemaName+\".\"+_pkColumn.getTableName());\n+            idx.addColumn(_pkColumn);       \n+        }\n     }\n \n     protected Object nextInternal(JDBCStore store, ClassMapping mapping)\n@@ -285,8 +305,14 @@ protected void allocateInternal(int count, JDBCStore store,\n      * Return the appropriate status object for the given class, or null\n      * if cannot handle the given class. The mapping may be null.\n      */\n-    protected Status getStatus(ClassMapping mapping) {\n-        return _stat;\n+    protected Status getStatus(ClassMapping mapping) {  \n+        Status status = (Status)_stat.get(mapping);        \n+        if (status == null){ \n+            status = new Status();\n+            _stat.put(mapping, status);\n+        }\n+        return status;\n+            \n     }\n \n     /**\n@@ -392,8 +418,9 @@ private void insertSequence(ClassMapping mapping, Connection conn)\n                 getClass(), mapping));\n \n         DBDictionary dict = _conf.getDBDictionaryInstance();\n+        String tableName = resolveTableName(mapping, _pkColumn.getTable());\n         SQLBuffer insert = new SQLBuffer(dict).append(\"INSERT INTO \").\n-            append(_pkColumn.getTable()).append(\" (\").\n+            append(tableName).append(\" (\").\n             append(_pkColumn).append(\", \").append(_seqColumn).\n             append(\") VALUES (\").\n             appendValue(pk, _pkColumn).append(\", \").\n@@ -431,7 +458,8 @@ protected long getSequence(ClassMapping mapping, Connection conn)\n         SQLBuffer sel = new SQLBuffer(dict).append(_seqColumn);\n         SQLBuffer where = new SQLBuffer(dict).append(_pkColumn).append(\" = \").\n             appendValue(pk, _pkColumn);\n-        SQLBuffer tables = new SQLBuffer(dict).append(_seqColumn.getTable());\n+        String tableName = resolveTableName(mapping, _seqColumn.getTable());\n+        SQLBuffer tables = new SQLBuffer(dict).append(tableName);\n \n         SQLBuffer select = dict.toSelect(sel, null, tables, where, null,\n             null, null, false, dict.supportsSelectForUpdate, 0, Long.MAX_VALUE);\n@@ -467,7 +495,7 @@ protected boolean setSequence(ClassMapping mapping, Status stat, int inc,\n             throw new InvalidStateException(_loc.get(\"bad-seq-type\",\n                 getClass(), mapping));\n \n-        DBDictionary dict = _conf.getDBDictionaryInstance();\n+        DBDictionary dict = _conf.getDBDictionaryInstance();        \n         SQLBuffer where = new SQLBuffer(dict).append(_pkColumn).append(\" = \").\n             appendValue(pk, _pkColumn);\n \n@@ -486,7 +514,8 @@ protected boolean setSequence(ClassMapping mapping, Status stat, int inc,\n \n                 // update the value\n                 upd = new SQLBuffer(dict);\n-                upd.append(\"UPDATE \").append(_seqColumn.getTable()).\n+                String tableName = resolveTableName(mapping, _seqColumn.getTable());\n+                upd.append(\"UPDATE \").append(tableName).\n                     append(\" SET \").append(_seqColumn).append(\" = \").\n                     appendValue(Numbers.valueOf(cur + inc), _seqColumn).\n                     append(\" WHERE \").append(where).append(\" AND \").\n@@ -503,7 +532,7 @@ protected boolean setSequence(ClassMapping mapping, Status stat, int inc,\n             }\n         }\n \n-        // setup new sequence range\n+        // setup new sequence range        \n         synchronized (stat) {\n             if (updateStatSeq && stat.seq < cur)\n                 stat.seq = cur;\n@@ -512,6 +541,21 @@ protected boolean setSequence(ClassMapping mapping, Status stat, int inc,\n         }\n         return true;\n     }\n+    /**\n+     * Resolve a fully qualified table name\n+     * \n+     * @param class\n+     *            mapping to get the schema name\n+     */\n+    public String resolveTableName(ClassMapping mapping, Table table) {\n+        String sName = mapping.getTable().getSchemaName();\n+        String tableName;\n+        if (sName == null)\n+            tableName = table.getFullName();\n+        else\n+            tableName = sName + \".\" + table.getFullName();\n+        return tableName;\n+    }\n \n     /**\n      * Creates the sequence table in the DB."},{"sha":"deda088e8666cdf95fa8e8b7079371686b0fcc32","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","raw_url":"https://github.com/apache/openjpa/raw/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java?ref=3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d","patch":"@@ -180,6 +180,14 @@ public void setTableName(String name) {\n         _tableName = name;\n         _fullName = null;\n     }\n+    \n+    /**\n+     * Reset the table name with the fully qualified table name which\n+     * includes the schema name\n+     */\n+    public void resetTableName(String name) {\n+        _tableName = name;\n+    }\n \n     /**\n      * The column's schema name."},{"sha":"c68a674b7856268d6f0d4a10f59dc4ff9e516146","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java","raw_url":"https://github.com/apache/openjpa/raw/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java?ref=3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d","patch":"@@ -93,11 +93,6 @@ public void setColumns(Column[] cols) {\n      * Add a column to the constraint.\n      */\n     public void addColumn(Column col) {\n-        if (col == null || !ObjectUtils.equals(col.getTable(), getTable()))\n-            throw new InvalidStateException(_loc.get(\"table-mismatch\",\n-                col == null ? null : col.getTable(),\n-                col == null ? null : getTable()));\n-\n         if (_colList == null)\n             _colList = new ArrayList(3);\n         else if (_colList.contains(col))"},{"sha":"a5d7fd3f3deb485ad9caf1df1db0183492d8a3d6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGroup.java","status":"modified","additions":67,"deletions":2,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGroup.java","raw_url":"https://github.com/apache/openjpa/raw/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGroup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGroup.java?ref=3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d","patch":"@@ -186,6 +186,42 @@ public Table findTable(String name) {\n         return null;\n     }\n \n+    /**\n+     * Find the table with the given name in the group, using '.' as the catalog\n+     * separator. Returns null if no table found.\n+     */\n+    public Table findTable(Schema inSchema, String name) {\n+        if (name == null)\n+            return null;\n+\n+        int dotIdx = name.indexOf('.');\n+        if (dotIdx != -1) {\n+            String schemaName = name.substring(0, dotIdx);\n+            name = name.substring(dotIdx + 1);\n+            Schema schema = getSchema(schemaName);\n+            if (schema != null)\n+                return schema.getTable(name);\n+        } else {\n+            Schema[] schemas = getSchemas();\n+            for (int i = 0; i < schemas.length; i++) {\n+                Table tab = schemas[i].getTable(name);\n+                // if a table is found and it has the same schema\n+                // as the input schema , it means that the table\n+                // exists. However, if the input schema is null,\n+                // then we assume that there is only one table for the\n+                // db default schema, in this case, table exists..\n+                // We can't handle the case that one entity has schema name\n+                // and other entity does not have schema name but both entities\n+                // map to the same table.\n+                if (tab != null\n+                        && (schemas[i] == inSchema || inSchema.getName() == null))\n+                    return tab;\n+\n+            }\n+        }\n+        return null;\n+    }\n+\n     /**\n      * Return true if the given sequence is known to exist. While\n      * {@link #findSequence} may exhibit dynamic behavior in some schema group\n@@ -242,8 +278,37 @@ public Sequence findSequence(String name) {\n     }\n \n     /**\n-     * Find all foreign keys exported by a given primary key (all foreign\n-     * keys that link to the primary key).\n+     * Find the sequence with the given name in the group, using '.' as the\n+     * catalog separator. Returns null if no sequence found.\n+     */\n+    public Sequence findSequence(Schema inSchema, String name) {\n+        if (name == null)\n+            return null;\n+\n+        int dotIdx = name.indexOf('.');\n+        if (dotIdx != -1) {\n+            String schemaName = name.substring(0, dotIdx);\n+            name = name.substring(dotIdx + 1);\n+            Schema schema = getSchema(schemaName);\n+            if (schema != null)\n+                return schema.getSequence(name);\n+        } else {\n+            Schema[] schemas = getSchemas();\n+            Sequence seq;\n+            for (int i = 0; i < schemas.length; i++) {\n+                seq = schemas[i].getSequence(name);\n+                if ((seq != null)\n+                        && (schemas[i] == inSchema || inSchema.getName() == null))\n+                    return seq;\n+            }\n+\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Find all foreign keys exported by a given primary key (all foreign keys\n+     * that link to the primary key).\n      */\n     public ForeignKey[] findExportedForeignKeys(PrimaryKey pk) {\n         if (pk == null)"},{"sha":"199b624d42e9c3efa29ae15da9092249dc13c100","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","raw_url":"https://github.com/apache/openjpa/raw/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java?ref=3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d","patch":"@@ -450,7 +450,7 @@ private void add(SchemaGroup db, SchemaGroup repos)\n             for (int i = 0; i < schemas.length; i++) {\n                 seqs = schemas[i].getSequences();\n                 for (int j = 0; j < seqs.length; j++) {\n-                    if (db.findSequence(seqs[j]) != null)\n+                    if (db.findSequence(schemas[i], seqs[j].getFullName()) != null)\n                         continue;\n \n                     if (createSequence(seqs[j])) {\n@@ -473,7 +473,7 @@ private void add(SchemaGroup db, SchemaGroup repos)\n             tabs = schemas[i].getTables();\n             for (int j = 0; j < tabs.length; j++) {\n                 cols = tabs[j].getColumns();\n-                dbTable = db.findTable(tabs[j]);\n+                dbTable = db.findTable(schemas[i], tabs[j].getFullName());\n                 for (int k = 0; k < cols.length; k++) {\n                     if (dbTable != null) {\n                         col = dbTable.getColumn(cols[k].getName());\n@@ -500,7 +500,7 @@ private void add(SchemaGroup db, SchemaGroup repos)\n                 tabs = schemas[i].getTables();\n                 for (int j = 0; j < tabs.length; j++) {\n                     pk = tabs[j].getPrimaryKey();\n-                    dbTable = db.findTable(tabs[j]);\n+                    dbTable = db.findTable(schemas[i], tabs[j].getFullName());\n                     if (pk != null && !pk.isLogical() && dbTable != null) {\n                         if (dbTable.getPrimaryKey() == null\n                             && addPrimaryKey(pk))\n@@ -520,7 +520,7 @@ else if (!pk.equalsPrimaryKey(dbTable.getPrimaryKey()))\n         for (int i = 0; i < schemas.length; i++) {\n             tabs = schemas[i].getTables();\n             for (int j = 0; j < tabs.length; j++) {\n-                if (db.findTable(tabs[j]) != null)\n+                if (db.findTable(schemas[i], tabs[j].getFullName()) != null)\n                     continue;\n \n                 if (createTable(tabs[j])) {\n@@ -546,7 +546,7 @@ else if (!pk.equalsPrimaryKey(dbTable.getPrimaryKey()))\n                     continue;\n \n                 idxs = tabs[j].getIndexes();\n-                dbTable = db.findTable(tabs[j]);\n+                dbTable = db.findTable(schemas[i], tabs[j].getFullName());\n                 for (int k = 0; k < idxs.length; k++) {\n                     if (dbTable != null) {\n                         idx = findIndex(dbTable, idxs[k]);\n@@ -596,7 +596,7 @@ else if (!pk.equalsPrimaryKey(dbTable.getPrimaryKey()))\n                     continue;\n \n                 fks = tabs[j].getForeignKeys();\n-                dbTable = db.findTable(tabs[j]);\n+                dbTable = db.findTable(schemas[i],tabs[j].getFullName());\n                 for (int k = 0; k < fks.length; k++) {\n                     if (!fks[k].isLogical() && dbTable != null) {\n                         fk = findForeignKey(dbTable, fks[k]);"},{"sha":"926cccf14a61a6e6f9c7b9439daa79be7eef6fbf","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","raw_url":"https://github.com/apache/openjpa/raw/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java?ref=3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d","patch":"@@ -498,7 +498,7 @@ public ForeignKey importForeignKey(ForeignKey fk) {\n      * Return the table's indexes.\n      */\n     public Index[] getIndexes() {\n-        if (_idxs == null)\n+        if (_idxs == null || _idxs.length == 0)\n             _idxs = (_idxMap == null) ? Schemas.EMPTY_INDEXES : (Index[])\n                 _idxMap.values().toArray(new Index[_idxMap.size()]);\n         return _idxs;"},{"sha":"b6ee13c955d12ca1795c5bbcc85f8fc9580703a3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog1.java","status":"added","additions":96,"deletions":0,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog1.java","raw_url":"https://github.com/apache/openjpa/raw/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog1.java?ref=3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d","patch":"@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.generationtype;\n+\n+import javax.persistence.*;\n+import java.io.*;\n+\n+/**\n+ * Extension of Animal class illustrating inheritance.\n+ */\n+@Entity(name = \"Dog1\")\n+@Table(name = \"DOGTAB\", schema = \"SCHEMA1\")\n+@IdClass(DogId.class)\n+public class Dog1 implements Serializable\n+\n+{\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    private int id2;\n+\n+    @Id\n+    private int datastoreid;\n+\n+    private String name;\n+\n+    private float price;\n+\n+    private boolean domestic;\n+\n+    public Dog1() {\n+        super();\n+\n+    }\n+\n+    public Dog1(String name) {\n+        this.id2 = id2;\n+        this.name = name;\n+\n+    }\n+\n+    public int getId2() {\n+        return id2;\n+    }\n+\n+    public void setId2(int id) {\n+        this.id2 = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public float getPrice() {\n+        return price;\n+    }\n+\n+    public void setPrice(float price) {\n+        this.price = price;\n+    }\n+\n+    public boolean isDomestic() {\n+        return domestic;\n+    }\n+\n+    public void setDomestic(boolean domestic) {\n+        this.domestic = domestic;\n+    }\n+\n+    public int getDatastoreid() {\n+        return datastoreid;\n+    }\n+\n+    public void setDatastoreid(int datastoreid) {\n+        this.datastoreid = datastoreid;\n+    }\n+}"},{"sha":"9e7c5656a96ec2bf6a06ff510bde4b68664b43c1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog2.java","status":"added","additions":96,"deletions":0,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog2.java","raw_url":"https://github.com/apache/openjpa/raw/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog2.java?ref=3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d","patch":"@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.generationtype;\n+\n+import javax.persistence.*;\n+import java.io.*;\n+\n+/**\n+ * Extension of Animal class illustrating inheritance.\n+ */\n+@Entity(name = \"Dog2\")\n+@Table(name = \"DOGTAB\", schema = \"SCHEMA2\")\n+@IdClass(DogId.class)\n+public class Dog2 implements Serializable\n+\n+{\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    private int id2;\n+\n+    @Id\n+    private int datastoreid;\n+\n+    private String name;\n+\n+    private float price;\n+\n+    private boolean domestic;\n+\n+    public Dog2() {\n+        super();\n+\n+    }\n+\n+    public Dog2(String name) {\n+        this.id2 = id2;\n+        this.name = name;\n+\n+    }\n+\n+    public int getId2() {\n+        return id2;\n+    }\n+\n+    public void setId2(int id) {\n+        this.id2 = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public float getPrice() {\n+        return price;\n+    }\n+\n+    public void setPrice(float price) {\n+        this.price = price;\n+    }\n+\n+    public boolean isDomestic() {\n+        return domestic;\n+    }\n+\n+    public void setDomestic(boolean domestic) {\n+        this.domestic = domestic;\n+    }\n+\n+    public int getDatastoreid() {\n+        return datastoreid;\n+    }\n+\n+    public void setDatastoreid(int datastoreid) {\n+        this.datastoreid = datastoreid;\n+    }\n+}"},{"sha":"f7d68629d31e7de9f11863bc91dfbd1c560dbbae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogId.java","status":"added","additions":103,"deletions":0,"changes":103,"blob_url":"https://github.com/apache/openjpa/blob/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogId.java","raw_url":"https://github.com/apache/openjpa/raw/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogId.java?ref=3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d","patch":"@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.generationtype;\n+\n+\n+import java.io.*;\n+\n+/**\n+ * Application identity class for: tutorial.ejb.Animal\n+ * \n+ * Auto-generated by: org.apache.openjpa.enhance.ApplicationIdTool\n+ */\n+public class DogId implements Serializable {\n+    static {\n+        // register persistent class in JVM\n+        try {\n+            Class.forName(\"tutorial.ejb.Dog\");\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    public int id2;\n+\n+    public int datastoreid;\n+\n+    public DogId() {\n+    }\n+\n+    public DogId(String str) {\n+        fromString(str);\n+    }\n+\n+    public String toString() {\n+        return String.valueOf(id2) + \"::\" + datastoreid;\n+    }\n+\n+    public int hashCode() {\n+        int rs = 17;\n+        rs = rs * 37 + (int) (id2 ^ (id2 >>> 32));\n+        rs = rs\n+                * 37\n+                + ((datastoreid == 0) ? 0 : new Integer(datastoreid).hashCode());\n+        return rs;\n+    }\n+\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null || obj.getClass() != getClass())\n+            return false;\n+\n+        DogId other = (DogId) obj;\n+        return (id2 == other.id2)\n+                && ((datastoreid == 0 && other.datastoreid == 0) || (datastoreid != 0 && datastoreid == other.datastoreid));\n+    }\n+\n+    private void fromString(String str) {\n+        Tokenizer toke = new Tokenizer(str);\n+        str = toke.nextToken();\n+        id2 = Integer.parseInt(str);\n+        str = toke.nextToken();\n+        datastoreid = Integer.parseInt(str);\n+    }\n+\n+    protected static class Tokenizer {\n+        private final String str;\n+\n+        private int last;\n+\n+        public Tokenizer(String str) {\n+            this.str = str;\n+        }\n+\n+        public String nextToken() {\n+            int next = str.indexOf(\"::\", last);\n+            String part;\n+            if (next == -1) {\n+                part = str.substring(last);\n+                last = str.length();\n+            } else {\n+                part = str.substring(last, next);\n+                last = next + 2;\n+            }\n+            return part;\n+        }\n+    }\n+}\n\\ No newline at end of file"},{"sha":"537ccec76a9307e6a215439752f16997f59febb9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/apache/openjpa/blob/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable.java","raw_url":"https://github.com/apache/openjpa/raw/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable.java?ref=3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d","patch":"@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.generationtype;\n+\n+\n+import javax.persistence.*;\n+import java.io.*;\n+\n+/**\n+ * Extension of Animal class illustrating inheritance.\n+ */\n+@Entity(name = \"DogTable\")\n+@Table(name = \"DOGTABLE\", schema = \"SCHEMA1\")\n+@IdClass(DogId.class)\n+public class DogTable implements Serializable\n+\n+{\n+    @Id\n+    @TableGenerator(name = \"Dog_Gen1\", table = \"ID_Gen1\", \n+            pkColumnName = \"GEN_NAME\", valueColumnName = \"GEN_VAL\", \n+            pkColumnValue = \"ID2\", initialValue = 20, allocationSize = 10)\n+    @GeneratedValue(strategy = GenerationType.TABLE, generator = \"Dog_Gen1\")\n+    private int id2;\n+\n+    @Id\n+    private int datastoreid;\n+\n+    private String name;\n+\n+    private float price;\n+\n+    private boolean domestic;\n+\n+    public DogTable() {\n+        super();\n+\n+    }\n+\n+    public DogTable(String name) {\n+        this.id2 = id2;\n+        this.name = name;\n+\n+    }\n+\n+    public int getId2() {\n+        return id2;\n+    }\n+\n+    public void setId2(int id) {\n+        this.id2 = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public float getPrice() {\n+        return price;\n+    }\n+\n+    public void setPrice(float price) {\n+\n+        this.price = price;\n+    }\n+\n+    public boolean isDomestic() {\n+        return domestic;\n+    }\n+\n+    public void setDomestic(boolean domestic) {\n+        this.domestic = domestic;\n+    }\n+\n+    public int getDatastoreid() {\n+        return datastoreid;\n+    }\n+\n+    public void setDatastoreid(int datastoreid) {\n+        this.datastoreid = datastoreid;\n+    }\n+}"},{"sha":"4ddf69e5b298c5bd092080494cf336b0c97a0c2a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable2.java","status":"added","additions":100,"deletions":0,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable2.java","raw_url":"https://github.com/apache/openjpa/raw/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable2.java?ref=3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d","patch":"@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.generationtype;\n+\n+import java.io.*;\n+import javax.persistence.*;\n+\n+/**\n+ * Extension of Animal class illustrating inheritance.\n+ */\n+@Entity(name = \"DogTable2\")\n+@Table(name = \"DOGTABLE\", schema = \"SCHEMA2\")\n+@IdClass(DogId.class)\n+public class DogTable2 implements Serializable\n+\n+{\n+    @Id\n+    @TableGenerator(name = \"Dog_Gen2\", table = \"ID_Gen2\", \n+            pkColumnName = \"GEN_NAME\", valueColumnName = \"GEN_VAL\", \n+            pkColumnValue = \"ID2\", initialValue = 100, allocationSize = 10)\n+    @GeneratedValue(strategy = GenerationType.TABLE, generator = \"Dog_Gen2\")\n+    private int id2;\n+\n+    @Id\n+    private int datastoreid;\n+\n+    private String name;\n+\n+    private float price;\n+\n+    private boolean domestic;\n+\n+    public DogTable2() {\n+        super();\n+\n+    }\n+\n+    public DogTable2(String name) {\n+        this.id2 = id2;\n+        this.name = name;\n+\n+    }\n+\n+    public int getId2() {\n+        return id2;\n+    }\n+\n+    public void setId2(int id) {\n+        this.id2 = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public float getPrice() {\n+        return price;\n+    }\n+\n+    public void setPrice(float price) {\n+\n+        this.price = price;\n+    }\n+\n+    public boolean isDomestic() {\n+        return domestic;\n+    }\n+\n+    public void setDomestic(boolean domestic) {\n+        this.domestic = domestic;\n+    }\n+\n+    public int getDatastoreid() {\n+        return datastoreid;\n+    }\n+\n+    public void setDatastoreid(int datastoreid) {\n+        this.datastoreid = datastoreid;\n+    }\n+}"},{"sha":"c3a44c4ed41fc0c711992b41302f3a62ee0d72da","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","status":"added","additions":237,"deletions":0,"changes":237,"blob_url":"https://github.com/apache/openjpa/blob/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","raw_url":"https://github.com/apache/openjpa/raw/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java?ref=3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d","patch":"@@ -0,0 +1,237 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.generationtype;\n+\n+import java.util.List;\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+import org.apache.openjpa.persistence.*;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestMultipleSchemaNames extends SingleEMFTestCase {\n+    public void setUp() {\n+        setUp(Dog1.class, Dog2.class, DogTable.class, DogTable2.class);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        // cleanup database first\n+        Query qry = em.createQuery(\"select d from Dog1 d\");\n+        List result = qry.getResultList();\n+\n+        for (int index = 0; index < result.size(); index++) {\n+            Dog1 Obj = (Dog1) result.get(index);\n+            em.remove(Obj);\n+        }\n+        Query qry2 = em.createQuery(\"select d from Dog2 d\");\n+        List result2 = qry2.getResultList();\n+\n+        for (int index = 0; index < result2.size(); index++) {\n+            Dog2 Obj = (Dog2) result2.get(index);\n+            em.remove(Obj);\n+        }\n+        Query qry3 = em.createQuery(\"select d from DogTable d\");\n+        List result3 = qry3.getResultList();\n+\n+        for (int index = 0; index < result3.size(); index++) {\n+            DogTable Obj = (DogTable) result3.get(index);\n+            em.remove(Obj);\n+        }\n+        Query qry4 = em.createQuery(\"select d from DogTable2 d\");\n+        List result4 = qry4.getResultList();\n+\n+        for (int index = 0; index < result4.size(); index++) {\n+            DogTable2 Obj = (DogTable2) result4.get(index);\n+            em.remove(Obj);\n+        }\n+\n+        Query delschema1 = em\n+                .createNativeQuery(\"delete from schema1.openjpa_sequence_table\");\n+        delschema1.executeUpdate();\n+        Query delschema2 = em\n+                .createNativeQuery(\"delete from schema2.openjpa_sequence_table\");\n+        delschema2.executeUpdate();\n+        Query delgentable = em.createNativeQuery(\"delete from schema1.id_gen1\");\n+        delgentable.executeUpdate();\n+        Query delgentable2 = em\n+                .createNativeQuery(\"delete from schema2.id_gen2\");\n+        delgentable2.executeUpdate();\n+\n+        em.getTransaction().commit();\n+\n+    }\n+\n+    public void testGeneratedAUTO() {\n+        EntityManager em = emf.createEntityManager();\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\n+        em.getTransaction().begin();\n+\n+        Dog1 dog1 = new Dog1();\n+        dog1.setName(\"helloDog1\");\n+        dog1.setDatastoreid(12);\n+        dog1.setPrice(12000);\n+\n+        em.persist(dog1);\n+        Dog1 dog1a = new Dog1();\n+        dog1a.setName(\"helloDog2\");\n+        dog1a.setDatastoreid(15);\n+        dog1a.setPrice(22000);\n+        em.persist(dog1a);\n+        // add dog2\n+        Dog2 dog2 = new Dog2();\n+        dog2.setName(\"helloDog3\");\n+        dog2.setDatastoreid(12);\n+        dog2.setPrice(15000);\n+        em.persist(dog2);\n+\n+        Dog2 dog2a = new Dog2();\n+        dog2a.setName(\"helloDog4\");\n+        dog2a.setDatastoreid(19);\n+        dog2a.setPrice(25000);\n+        em.persist(dog2a);\n+        em.getTransaction().commit();\n+        // System.out.println(\"persist dogs are done\");\n+\n+        Dog1 dog1x = em.find(Dog1.class, kem.getObjectId(dog1));\n+        assertTrue(dog1x.getId2() == 1 || dog1x.getId2() == 2);\n+        assertEquals(dog1x.getName(), \"helloDog1\");\n+        dog1x.setName(\"Dog1\");\n+        dog1x.setDomestic(true);\n+        Dog1 dog11 = em.find(Dog1.class, kem.getObjectId(dog1a));\n+        assertTrue(dog11.getId2() == 1 || dog11.getId2() == 2);\n+        assertEquals(dog11.getName(), \"helloDog2\");\n+        dog11.setName(\"Dog2\");\n+        dog11.setDomestic(true);\n+        // update dog2\n+        Dog2 dog2x = em.find(Dog2.class, kem.getObjectId(dog2));\n+        assertTrue(dog2x.getId2() == 1 || dog2x.getId2() == 2);\n+        assertEquals(dog2x.getName(), \"helloDog3\");\n+        dog2x.setName(\"Dog3\");\n+        dog2x.setDomestic(true);\n+        Dog2 dog21 = em.find(Dog2.class, kem.getObjectId(dog2a));\n+        assertTrue(dog21.getId2() == 1 || dog21.getId2() == 2);\n+        assertEquals(dog21.getName(), \"helloDog4\");\n+        dog21.setName(\"Dog4\");\n+        dog21.setDomestic(true);\n+\n+        // get the update dog name\n+\n+        em.getTransaction().begin();\n+        Query qry1 = em.createQuery(\"select d from Dog1 d order by d.name\");\n+        List result1 = qry1.getResultList();\n+        for (int index = 0; index < result1.size(); index++) {\n+            Dog1 dog4 = (Dog1) result1.get(index);\n+            int i = index + 1;\n+            assertTrue(dog4.getId2() == 1 || dog4.getId2() == 2);\n+            assertEquals(dog4.getName(), \"Dog\" + i);\n+        }\n+\n+        Query qry2 = em.createQuery(\"select d from Dog2 d order by d.name\");\n+        List result2 = qry2.getResultList();\n+\n+        for (int index = 0; index < result2.size(); index++) {\n+            Dog2 dog5 = (Dog2) result2.get(index);\n+            assertTrue(dog5.getId2() == 1 || dog5.getId2() == 2);\n+            int j = index + 3;\n+            assertEquals(dog5.getName(), \"Dog\" + j);\n+        }\n+\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testGeneratedTABLE() {\n+        EntityManager em = emf.createEntityManager();\n+        OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\n+        em.getTransaction().begin();\n+\n+        DogTable dog1 = new DogTable();\n+        dog1.setName(\"helloDog1\");\n+        dog1.setDatastoreid(12);\n+        dog1.setPrice(12000);\n+\n+        em.persist(dog1);\n+        DogTable dog1a = new DogTable();\n+        dog1a.setName(\"helloDog2\");\n+        dog1a.setDatastoreid(15);\n+        dog1a.setPrice(22000);\n+        em.persist(dog1a);\n+        // add dog2\n+        DogTable2 dog2 = new DogTable2();\n+        dog2.setName(\"helloDog3\");\n+        dog2.setDatastoreid(12);\n+        dog2.setPrice(15000);\n+        em.persist(dog2);\n+\n+        DogTable2 dog2a = new DogTable2();\n+        dog2a.setName(\"helloDog4\");\n+        dog2a.setDatastoreid(19);\n+        dog2a.setPrice(25000);\n+        em.persist(dog2a);\n+        em.getTransaction().commit();\n+\n+        DogTable dog1x = em.find(DogTable.class, kem.getObjectId(dog1));\n+        assertTrue(dog1x.getId2() == 20 || dog1x.getId2() == 21);\n+        assertEquals(dog1x.getName(), \"helloDog1\");\n+        dog1x.setName(\"Dog1\");\n+        dog1x.setDomestic(true);\n+        DogTable dog11 = em.find(DogTable.class, kem.getObjectId(dog1a));\n+        assertTrue(dog11.getId2() == 20 || dog11.getId2() == 21);\n+        assertEquals(dog11.getName(), \"helloDog2\");\n+        dog11.setName(\"Dog2\");\n+        dog11.setDomestic(true);\n+        // update dog2\n+        DogTable2 dog2x = em.find(DogTable2.class, kem.getObjectId(dog2));\n+        assertTrue(dog2x.getId2() == 100 || dog2x.getId2() == 101);\n+        assertEquals(dog2x.getName(), \"helloDog3\");\n+        dog2x.setName(\"Dog3\");\n+        dog2x.setDomestic(true);\n+        DogTable2 dog21 = em.find(DogTable2.class, kem.getObjectId(dog2a));\n+        assertTrue(dog2x.getId2() == 100 || dog2x.getId2() == 101);\n+        assertEquals(dog21.getName(), \"helloDog4\");\n+        dog21.setName(\"Dog4\");\n+        dog21.setDomestic(true);\n+\n+        // get the update dog name\n+\n+        em.getTransaction().begin();\n+        Query qry1 = em.createQuery(\"select d from DogTable d order by d.name\");\n+        List result1 = qry1.getResultList();\n+        for (int index = 0; index < result1.size(); index++) {\n+            DogTable dog4 = (DogTable) result1.get(index);\n+            assertTrue(dog4.getId2() == 20 || dog4.getId2() == 21);\n+            int j = index + 1;\n+            assertEquals(dog4.getName(), \"Dog\" + j);\n+\n+        }\n+\n+        Query qry2 = em\n+                .createQuery(\"select d from DogTable2 d order by d.name\");\n+        List result2 = qry2.getResultList();\n+\n+        for (int index = 0; index < result2.size(); index++) {\n+            DogTable2 dog5 = (DogTable2) result2.get(index);\n+            assertTrue(dog5.getId2() == 100 || dog5.getId2() == 101);\n+            int j = index + 3;\n+            assertEquals(dog5.getName(), \"Dog\" + j);\n+        }\n+\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+} // end of TestMultipleSchemaNames"},{"sha":"5d90a6f8985ed7f0ec074c89d9c671cf56708ccd","filename":"openjpa-project/src/doc/manual/jpa_overview_meta.xml","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-project/src/doc/manual/jpa_overview_meta.xml","raw_url":"https://github.com/apache/openjpa/raw/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-project/src/doc/manual/jpa_overview_meta.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_meta.xml?ref=3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d","patch":"@@ -883,6 +883,19 @@ These string constants are defined in\n <ulink url=\"../javadoc/org/apache/openjpa/persistence/Generator.html\">\n <classname>org.apache.openjpa.persistence.Generator</classname></ulink>.\n                 </para>\n+                 <para>\n+If the entities are mapped to the same table name but with different schema \n+name within one <literal>PersistenceUnit</literal> intentionally, and the \n+strategy of <literal>GeneratedType.AUTO</literal> is used to generate the ID \n+for each entity, a schema name for each entity must be explicitly declared \n+either through the annotation or the mapping.xml file. Otherwise, the mapping \n+tool only creates the tables for those entities with the schema names under \n+each schema. In addition, there will be only one \n+<literal>OPENJPA_SEQUENCE_TABLE</literal> created for all the entities within \n+the <literal>PersistenceUnit</literal> if the entities are not identified \n+with the schema name. Read <xref linkend=\"ref_guide_sequence\"/> and \n+<xref linkend=\"ref_guide_schema_def\"/> in the Reference Guide.\n+                </para>\n             </note>\n         </section>\n         <section id=\"jpa_overview_meta_embedid\">"},{"sha":"a39294bf69c67f8cb387dc512e5359fc244db168","filename":"openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","raw_url":"https://github.com/apache/openjpa/raw/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml?ref=3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d","patch":"@@ -3299,6 +3299,19 @@ The <literal>Schema</literal> property also establishes the default schema for\n new tables created through OpenJPA tools, such as the mapping tool covered in\n <xref linkend=\"ref_guide_mapping_mappingtool\"/>.\n         </para>\n+        <para>\n+If the entities are mapped to the same table name but with different schema \n+name within one <literal>PersistenceUnit</literal> intentionally, and the \n+strategy of <literal>GeneratedType.AUTO</literal> is used to generate the ID \n+for each entity, a schema name for each entity must be explicitly declared \n+either through the annotation or the mapping.xml file. Otherwise, the mapping \n+tool only creates the tables for those entities with the schema names under \n+each schema. In addition, there will be only one \n+<literal>OPENJPA_SEQUENCE_TABLE</literal> created for all the entities within \n+the <literal>PersistenceUnit</literal> if the entities are not identified \n+with the schema name. \n+Read <xref linkend=\"ref_guide_sequence\"/> in the Reference Guide.\n+        </para>\n     </section>\n     <section id=\"ref_guide_schema_info\">\n         <title>"},{"sha":"8b87c4a02ee03be3415d7d0265d91b78eacd5315","filename":"openjpa-project/src/doc/manual/ref_guide_runtime.xml","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-project/src/doc/manual/ref_guide_runtime.xml","raw_url":"https://github.com/apache/openjpa/raw/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-project/src/doc/manual/ref_guide_runtime.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_runtime.xml?ref=3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d","patch":"@@ -1455,7 +1455,10 @@ This <classname>Seq</classname> has the following properties:\n                     <listitem>\n                         <para>\n <literal>Table</literal>: The name of the sequence number table to use.\n-Defaults to <literal>OPENJPA_SEQUENCE_TABLE</literal>.\n+Defaults to <literal>OPENJPA_SEQUENCE_TABLE</literal>. If the entities are \n+mapped to the same table name but with different schema name within one \n+PersistenceUnit, one <literal>OPENJPA_SEQUENCE_TABLE</literal> is created \n+for each schema.\n                         </para>\n                     </listitem>\n                     <listitem>"}]}

