{"sha":"3b327b5fbb3fe45f6f691d738b16fa567d345541","node_id":"MDY6Q29tbWl0MjA2MzY0OjNiMzI3YjVmYmIzZmU0NWY2ZjY5MWQ3MzhiMTZmYTU2N2QzNDU1NDE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-07T21:31:45Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-07T21:31:45Z"},"message":"OPENJPA-1232: \nCall toNestedFields for Map Keys as well as Map values.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@802211 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3f7f27f92647aee0ae453d5b6d9b5ca1dc30fb72","url":"https://api.github.com/repos/apache/openjpa/git/trees/3f7f27f92647aee0ae453d5b6d9b5ca1dc30fb72"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3b327b5fbb3fe45f6f691d738b16fa567d345541","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3b327b5fbb3fe45f6f691d738b16fa567d345541","html_url":"https://github.com/apache/openjpa/commit/3b327b5fbb3fe45f6f691d738b16fa567d345541","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3b327b5fbb3fe45f6f691d738b16fa567d345541/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"a54f47dfc8e5f58f2f592447715958ee59887666","url":"https://api.github.com/repos/apache/openjpa/commits/a54f47dfc8e5f58f2f592447715958ee59887666","html_url":"https://github.com/apache/openjpa/commit/a54f47dfc8e5f58f2f592447715958ee59887666"}],"stats":{"total":198,"additions":196,"deletions":2},"files":[{"sha":"1897c5f8679d62e70774ecc8fe6119c09c591e3e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/3b327b5fbb3fe45f6f691d738b16fa567d345541/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","raw_url":"https://github.com/apache/openjpa/raw/3b327b5fbb3fe45f6f691d738b16fa567d345541/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java?ref=3b327b5fbb3fe45f6f691d738b16fa567d345541","patch":"@@ -95,8 +95,8 @@ protected Object toField(OpenJPAStateManager sm, FieldMetaData fmd,\n                     keys.add(e.getKey());\n                     values.add(e.getValue());\n                 }\n-\n-                Object[] keyArray = keys.toArray();\n+                Object[] keyArray = toNestedFields(sm, fmd.getKey(),\n+                    keys, fetch, context).toArray();\n                 Object[] valueArray = toNestedFields(sm, fmd.getElement(),\n                     values, fetch, context).toArray();\n                 for (int idx = 0; idx < keyArray.length; idx++)"},{"sha":"f780dae77681f3c13a9e7917db93bf0bb1daa38f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/MapEmbeddable.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/3b327b5fbb3fe45f6f691d738b16fa567d345541/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/MapEmbeddable.java","raw_url":"https://github.com/apache/openjpa/raw/3b327b5fbb3fe45f6f691d738b16fa567d345541/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/MapEmbeddable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/MapEmbeddable.java?ref=3b327b5fbb3fe45f6f691d738b16fa567d345541","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import javax.persistence.Embeddable;\n+\n+@Embeddable\n+public class MapEmbeddable {\n+    private int value;\n+\n+    MapEmbeddable(int value) {\n+        this.value = value;\n+    }\n+\n+    public int getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(int value) {\n+        this.value = value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"MapEmbeddable [_value=\" + value + \"]\";\n+    }\n+}"},{"sha":"19cdbabdb2e1c715965cc8b88f583cc8128733a2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/MapHolder.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/3b327b5fbb3fe45f6f691d738b16fa567d345541/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/MapHolder.java","raw_url":"https://github.com/apache/openjpa/raw/3b327b5fbb3fe45f6f691d738b16fa567d345541/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/MapHolder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/MapHolder.java?ref=3b327b5fbb3fe45f6f691d738b16fa567d345541","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.Map;\n+\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+@Entity(name = \"MapHolder\")\n+public class MapHolder {\n+    @Id\n+    private int id;\n+\n+    @Version\n+    private int version;\n+\n+    @ElementCollection\n+    private Map<MapEmbeddable, MapEmbeddable> embeddableMap;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public Map<MapEmbeddable, MapEmbeddable> getEmbeddableMap() {\n+        return embeddableMap;\n+    }\n+\n+    public void setEmbeddableMap(Map<MapEmbeddable, MapEmbeddable> embeddableMap) {\n+        this.embeddableMap = embeddableMap;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"MapHolder [embeddableMap=\" + embeddableMap + \", id=\" + id + \", version=\" + version + \"]\";\n+    }\n+}"},{"sha":"57b1db959f7ffdc89f33a0574bd838cd18c2787d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestEntitiesAsKeys.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/3b327b5fbb3fe45f6f691d738b16fa567d345541/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestEntitiesAsKeys.java","raw_url":"https://github.com/apache/openjpa/raw/3b327b5fbb3fe45f6f691d738b16fa567d345541/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestEntitiesAsKeys.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestEntitiesAsKeys.java?ref=3b327b5fbb3fe45f6f691d738b16fa567d345541","patch":"@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.test.PersistenceTestCase;\n+\n+public class TestEntitiesAsKeys extends PersistenceTestCase {\n+\n+    OpenJPAEntityManagerFactorySPI emf =\n+        createEMF(MapHolder.class, MapEmbeddable.class, \"openjpa.DataCache\", \"true\", \"openjpa.RemoteCommitProvider\",\n+            \"sjvm\", \"openjpa.RuntimeUnenhancedClasses\", \"unsupported\");\n+\n+    public void setUp() {\n+        populate();\n+    }\n+\n+    public void populate() {\n+        EntityManager em = emf.createEntityManager();\n+        // clean up before execution\n+        em.getTransaction().begin();\n+        em.createQuery(\"Delete from MapHolder\").executeUpdate();\n+        em.getTransaction().commit();\n+\n+        em.getTransaction().begin();\n+        MapHolder mh = new MapHolder();\n+        mh.setId(10);\n+        mh.setEmbeddableMap(getEmbeddableMap(1, 2, 3, 4, 5, 6, 7, 8));\n+        em.persist(mh);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testMapContents() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        MapHolder mh = em.find(MapHolder.class, 10);\n+        mh.getEmbeddableMap();\n+        assertNotNull(mh);\n+\n+        for (Object o : mh.getEmbeddableMap().keySet()) {\n+            assertTrue(\"Expected key to be instanceof MapEmbeddable but was \" + o.getClass().getCanonicalName(),\n+                o instanceof MapEmbeddable);\n+        }\n+\n+        for (Object o : mh.getEmbeddableMap().values()) {\n+            assertTrue(\"Expected value to be instanceof MapEmbeddable but was \" + o.getClass().getCanonicalName(),\n+                o instanceof MapEmbeddable);\n+        }\n+        em.close();\n+    }\n+\n+    private Map<MapEmbeddable, MapEmbeddable> getEmbeddableMap(Integer... integers) {\n+        Map<MapEmbeddable, MapEmbeddable> rval = new HashMap<MapEmbeddable, MapEmbeddable>();\n+        assertEquals(0, integers.length % 2);\n+\n+        for (int i = 0; i < integers.length; i += 2) {\n+            rval.put(new MapEmbeddable(integers[i]), new MapEmbeddable(integers[i + 1]));\n+        }\n+\n+        return rval;\n+    }\n+}"}]}

