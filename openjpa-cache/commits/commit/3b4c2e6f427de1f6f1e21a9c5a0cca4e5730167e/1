{"sha":"3b4c2e6f427de1f6f1e21a9c5a0cca4e5730167e","node_id":"MDY6Q29tbWl0MjA2MzY0OjNiNGMyZTZmNDI3ZGUxZjZmMWUyMWE5YzVhMGNjYTRlNTczMDE2N2U=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2018-11-01T13:20:49Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2018-11-01T13:20:49Z"},"message":"OPENJPA-2755 OPENJPA-2555 use scale to set Date fractions","tree":{"sha":"2d0607b763af51707d983b57d6bda893bdbc8f23","url":"https://api.github.com/repos/apache/openjpa/git/trees/2d0607b763af51707d983b57d6bda893bdbc8f23"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3b4c2e6f427de1f6f1e21a9c5a0cca4e5730167e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3b4c2e6f427de1f6f1e21a9c5a0cca4e5730167e","html_url":"https://github.com/apache/openjpa/commit/3b4c2e6f427de1f6f1e21a9c5a0cca4e5730167e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3b4c2e6f427de1f6f1e21a9c5a0cca4e5730167e/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"9461ffdfcd870b1aeadf1eab3e8181c983a595b4","url":"https://api.github.com/repos/apache/openjpa/commits/9461ffdfcd870b1aeadf1eab3e8181c983a595b4","html_url":"https://github.com/apache/openjpa/commit/9461ffdfcd870b1aeadf1eab3e8181c983a595b4"}],"stats":{"total":84,"additions":82,"deletions":2},"files":[{"sha":"d0e31296e4252e2c4a3d976caab18093649f0470","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3b4c2e6f427de1f6f1e21a9c5a0cca4e5730167e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/3b4c2e6f427de1f6f1e21a9c5a0cca4e5730167e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java?ref=3b4c2e6f427de1f6f1e21a9c5a0cca4e5730167e","patch":"@@ -251,7 +251,7 @@ public boolean isCompatible(int type, String typeName, int size,\n             setSize(size);\n             if (typeName != null)\n                 setTypeIdentifier(DBIdentifier.newColumnDefinition(typeName));\n-            if (decimals >= 0)\n+            if (decimals != 0)\n                 setDecimalDigits(decimals);\n             return true;\n         }"},{"sha":"4d061f24bdb7fb483195c3f5a264210490223735","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3b4c2e6f427de1f6f1e21a9c5a0cca4e5730167e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/3b4c2e6f427de1f6f1e21a9c5a0cca4e5730167e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java?ref=3b4c2e6f427de1f6f1e21a9c5a0cca4e5730167e","patch":"@@ -99,7 +99,7 @@ public MySQLDictionary() {\n         supportsSelectStartIndex = true;\n         supportsSelectEndIndex = true;\n \n-\n+        datePrecision = MICRO;\n \n         concatenateFunction = \"CONCAT({0},{1})\";\n "},{"sha":"7677340e6cb3b0c38abef26f37853f4766ceafc9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/3b4c2e6f427de1f6f1e21a9c5a0cca4e5730167e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java","raw_url":"https://github.com/apache/openjpa/raw/3b4c2e6f427de1f6f1e21a9c5a0cca4e5730167e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java?ref=3b4c2e6f427de1f6f1e21a9c5a0cca4e5730167e","patch":"@@ -27,6 +27,7 @@\n  */\n package org.apache.openjpa.persistence.kernel;\n \n+import java.sql.Timestamp;\n import java.text.SimpleDateFormat;\n import java.util.Collection;\n import java.util.Date;\n@@ -71,6 +72,15 @@ public void setUp()\n         startTx(_pm);\n         AllFieldTypesTest test = new AllFieldTypesTest();\n         test.setTestDate(_date);\n+\n+        // prepare scale test fields\n+        Timestamp tst = new Timestamp(1000000000L);\n+        tst.setNanos(123456789);\n+        test.setTestDateMaxScale(tst);\n+        test.setTestDateScale0(tst);\n+        test.setTestDateScale3(tst);\n+        test.setTestDateScale6(tst);\n+\n         _pm.persist(test);\n \n         test = new AllFieldTypesTest();\n@@ -81,6 +91,8 @@ public void setUp()\n         test.setTestDate(_after);\n         _pm.persist(test);\n         endTx(_pm);\n+\n+        _pm.clear();\n     }\n \n     public void testEquals() {\n@@ -95,6 +107,21 @@ public void testNotEquals() {\n         assertEquals(2, vals.size());\n     }\n \n+    public void testDateScale() {\n+        Timestamp referenceTst = new Timestamp(1000000000L);\n+\n+        Collection vals = executeQuery(\"testDate = :date\");\n+        AllFieldTypesTest aft = (AllFieldTypesTest) vals.iterator().next();\n+        assertNotNull(aft);\n+\n+        long time = aft.getTestDateMaxScale().getTime();\n+        long nanos = aft.getTestDateMaxScale().getNanos();\n+\n+        // cut of the ms\n+        assertEquals(referenceTst, time - (time%1000));\n+\n+    }\n+\n     public void testBefore() {\n         Collection vals = executeQuery(\"testDate < :date\");\n         assertEquals(1, vals.size());"},{"sha":"eb99c3c1a78c4a9b287b0e6098908a883a26acc1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldTypesTest.java","status":"modified","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/3b4c2e6f427de1f6f1e21a9c5a0cca4e5730167e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldTypesTest.java","raw_url":"https://github.com/apache/openjpa/raw/3b4c2e6f427de1f6f1e21a9c5a0cca4e5730167e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldTypesTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldTypesTest.java?ref=3b4c2e6f427de1f6f1e21a9c5a0cca4e5730167e","patch":"@@ -20,10 +20,12 @@\n \n import java.math.BigDecimal;\n import java.math.BigInteger;\n+import java.sql.Timestamp;\n import java.util.Arrays;\n import java.util.Calendar;\n import java.util.Date;\n \n+import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n@@ -55,10 +57,28 @@\n     private char testchar;\n     private String testString;\n     private String testBigString;\n+\n     @Temporal(TemporalType.DATE)\n     private Date testDate;\n+\n     @Temporal(TemporalType.DATE)\n     private Calendar testCalendar;\n+\n+    @Temporal(TemporalType.TIMESTAMP)\n+    @Column(scale=-1)\n+    private Timestamp testDateScale0;\n+\n+    @Temporal(TemporalType.TIMESTAMP)\n+    @Column(scale=3)\n+    private Timestamp testDateScale3;\n+\n+    @Temporal(TemporalType.TIMESTAMP)\n+    @Column(scale=6)\n+    private Timestamp testDateScale6;\n+\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Timestamp testDateMaxScale;\n+\n     private Object testObject;\n     private BigInteger testBigInteger;\n     private BigDecimal testBigDecimal;\n@@ -188,6 +208,39 @@ public void setTestBigDecimal(BigDecimal testBigDecimal) {\n         this.testBigDecimal = testBigDecimal;\n     }\n \n+    public Timestamp getTestDateScale0() {\n+        return testDateScale0;\n+    }\n+\n+    public void setTestDateScale0(Timestamp testDateScale0) {\n+        this.testDateScale0 = testDateScale0;\n+    }\n+\n+    public Timestamp getTestDateScale3() {\n+        return testDateScale3;\n+    }\n+\n+    public void setTestDateScale3(Timestamp testDateScale3) {\n+        this.testDateScale3 = testDateScale3;\n+    }\n+\n+    public Timestamp getTestDateScale6() {\n+        return testDateScale6;\n+    }\n+\n+    public void setTestDateScale6(Timestamp testDateScale6) {\n+        this.testDateScale6 = testDateScale6;\n+    }\n+\n+    public Timestamp getTestDateMaxScale() {\n+        return testDateMaxScale;\n+    }\n+\n+    public void setTestDateMaxScale(Timestamp testDateMaxScale) {\n+        this.testDateMaxScale = testDateMaxScale;\n+    }\n+\n+\n     public void randomize(boolean objects, boolean blobs) {\n         testint = AbstractTestCase.randomInt().intValue();\n         testlong = AbstractTestCase.randomLong().longValue();"}]}

