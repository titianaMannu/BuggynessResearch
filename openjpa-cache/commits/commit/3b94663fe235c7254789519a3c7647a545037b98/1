{"sha":"3b94663fe235c7254789519a3c7647a545037b98","node_id":"MDY6Q29tbWl0MjA2MzY0OjNiOTQ2NjNmZTIzNWM3MjU0Nzg5NTE5YTNjNzY0N2E1NDUwMzdiOTg=","commit":{"author":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2013-10-08T17:35:57Z"},"committer":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2013-10-08T17:35:57Z"},"message":"OPENJPA-2425: SELECT fields with @ExternalValues defined returns datastore values instead of unmapped fields - applied Albert Lee's patch to trunk.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1530368 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a415926044421223b44b64d37b2e4bfa7c318495","url":"https://api.github.com/repos/apache/openjpa/git/trees/a415926044421223b44b64d37b2e4bfa7c318495"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3b94663fe235c7254789519a3c7647a545037b98","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3b94663fe235c7254789519a3c7647a545037b98","html_url":"https://github.com/apache/openjpa/commit/3b94663fe235c7254789519a3c7647a545037b98","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3b94663fe235c7254789519a3c7647a545037b98/comments","author":null,"committer":null,"parents":[{"sha":"a3fccb40e3f0e3708932f13e99fc52596eac592e","url":"https://api.github.com/repos/apache/openjpa/commits/a3fccb40e3f0e3708932f13e99fc52596eac592e","html_url":"https://github.com/apache/openjpa/commit/a3fccb40e3f0e3708932f13e99fc52596eac592e"}],"stats":{"total":45,"additions":38,"deletions":7},"files":[{"sha":"5a158fc1b30bba7c8362053a01ccf737457b7d6c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","status":"modified","additions":11,"deletions":7,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/3b94663fe235c7254789519a3c7647a545037b98/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","raw_url":"https://github.com/apache/openjpa/raw/3b94663fe235c7254789519a3c7647a545037b98/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java?ref=3b94663fe235c7254789519a3c7647a545037b98","patch":"@@ -918,14 +918,18 @@ Object load(ExpContext ctx, ExpState state, Result res, boolean pks)\n         }\n \n         Object ret;\n-        if (_key)\n+        if (_key) {\n             // Map key is a java primitive type\n-            //    example: Map<Integer, Employee> emps\n-            ret = res.getObject(pstate.cols[0],\n-                null, pstate.joins);\n-        else\n-            ret = pstate.field.loadProjection(ctx.store, ctx.fetch, res, \n-                pstate.joins);\n+            // example: Map<Integer, Employee> emps\n+            ret = res.getObject(pstate.cols[0], null, pstate.joins);\n+        } else {\n+            ret = pstate.field.loadProjection(ctx.store, ctx.fetch, res, pstate.joins);\n+        }\n+        \n+        if (pstate.field.isExternalized()) {\n+            ret = pstate.field.getFieldValue(ret, ctx.store.getContext());            \n+        }\n+        \n         if (_cast != null)\n             ret = Filters.convert(ret, _cast);\n         return ret;"},{"sha":"c8aef977df243f8e1bd6bba17ccbb0249b038a70","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/external/TestExternalValues.java","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/3b94663fe235c7254789519a3c7647a545037b98/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/external/TestExternalValues.java","raw_url":"https://github.com/apache/openjpa/raw/3b94663fe235c7254789519a3c7647a545037b98/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/external/TestExternalValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/external/TestExternalValues.java?ref=3b94663fe235c7254789519a3c7647a545037b98","patch":"@@ -18,6 +18,9 @@\n  */\n package org.apache.openjpa.persistence.external;\n \n+import java.util.Iterator;\n+import java.util.List;\n+\n import javax.persistence.EntityManager;\n import javax.persistence.Query;\n \n@@ -55,6 +58,30 @@ public void testExternalValues() {\n         Assert.assertEquals(\"MEDIUM\", aPrime.getS2());\n         Assert.assertEquals(true, aPrime.getUseStreaming());\n \n+        em.getTransaction().begin();\n+\n+        entity = new EntityA();\n+        entity.setS1(\"LARGE\");\n+        entity.setS2(\"LARGE\");\n+        entity.setUseStreaming(false);\n+        em.persist(entity);\n+\n+        em.getTransaction().commit();\n+\n+        q = em.createQuery(\"SELECT t0.id, t0.s1, t0._useStreaming, t0.s2 FROM EntityA t0 ORDER BY t0.s1 DESC\");\n+        List<Object[]> res = q.getResultList();\n+\n+        Iterator<Object[]> itr = res.iterator();\n+        Object[] values = itr.next();\n+        Assert.assertEquals(\"SMALL\", values[1]);\n+        Assert.assertEquals(Boolean.TRUE, values[2]);\n+        Assert.assertEquals(\"MEDIUM\", values[3]);\n+\n+        values = itr.next();\n+        Assert.assertEquals(\"LARGE\", values[1]);\n+        Assert.assertEquals(Boolean.FALSE, values[2]);\n+        Assert.assertEquals(\"LARGE\", values[3]);\n+        \n         em.close();\n     }\n "}]}

