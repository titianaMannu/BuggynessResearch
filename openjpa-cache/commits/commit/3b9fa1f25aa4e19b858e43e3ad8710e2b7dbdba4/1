{"sha":"3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4","node_id":"MDY6Q29tbWl0MjA2MzY0OjNiOWZhMWYyNWFhNGUxOWI4NThlNDNlM2FkODcxMGUyYjdkYmRiYTQ=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-11-07T21:20:57Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-11-07T21:20:57Z"},"message":"Bugfix for when abstract base class has no discriminator value.  Cleanup of\nquery compilation cache additions.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@472275 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"65c9c6138e1e07a228c0d94e0d95d07d301cabd7","url":"https://api.github.com/repos/apache/openjpa/git/trees/65c9c6138e1e07a228c0d94e0d95d07d301cabd7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4","html_url":"https://github.com/apache/openjpa/commit/3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4/comments","author":null,"committer":null,"parents":[{"sha":"0e02efdfbfd49cac5b26f607fd7f29de68186b38","url":"https://api.github.com/repos/apache/openjpa/commits/0e02efdfbfd49cac5b26f607fd7f29de68186b38","html_url":"https://github.com/apache/openjpa/commit/0e02efdfbfd49cac5b26f607fd7f29de68186b38"}],"stats":{"total":317,"additions":164,"deletions":153},"files":[{"sha":"3196076533114bf385ebd2d21013cc7052ee1881","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingRepositoryValue.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingRepositoryValue.java","raw_url":"https://github.com/apache/openjpa/raw/3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingRepositoryValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingRepositoryValue.java?ref=3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4","patch":"@@ -42,7 +42,6 @@ public Object newInstance(String clsName, Class type,\n         // we need to manually perform the instantiation\n         try {\n             Class cls = Strings.toClass(clsName, type.getClassLoader());\n-\n             return cls.getConstructor(new Class[]{ JDBCConfiguration.class }).\n                 newInstance(new Object[]{ conf });\n         } catch (RuntimeException e) {"},{"sha":"2786d3c800c371ae757957665ad74bd2c6dd81b5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java?ref=3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4","patch":"@@ -447,7 +447,8 @@ public Object getStrategy(ValueMapping vm, Class type, boolean adapt) {\n             return UntypedPCValueHandler.getInstance();\n         if (_ordinalEnum && !vm.isSerialized()\n             && JavaVersions.isEnumeration(type))\n-            return \"org.apache.openjpa.jdbc.meta.strats.EnumValueHandler(StoreOrdinal=true)\";\n+            return \"org.apache.openjpa.jdbc.meta.strats.EnumValueHandler\"\n+                + \"(StoreOrdinal=true)\";\n         return null;\n     }\n "},{"sha":"c7a587f001326b7629637c2a16d604ad8072aa32","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SuperclassDiscriminatorStrategy.java","status":"modified","additions":12,"deletions":4,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SuperclassDiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SuperclassDiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SuperclassDiscriminatorStrategy.java?ref=3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4","patch":"@@ -34,10 +34,18 @@\n     extends AbstractDiscriminatorStrategy {\n \n     public void map(boolean adapt) {\n-        // if the superclass maps the discriminator value, so should we\n-        if (disc.getClassMapping().getJoinablePCSuperclassMapping().\n-            getDiscriminator().getValue() != null)\n-            disc.setValue(disc.getMappingInfo().getValue(disc, adapt));\n+        // if a superclass maps the discriminator value, so should we.\n+        // otherwise assume it's calculated\n+        ClassMapping sup = disc.getClassMapping().\n+            getJoinablePCSuperclassMapping();\n+        for (; sup != null; sup = sup.getJoinablePCSuperclassMapping()) {\n+            if (sup.getDiscriminator().getValue() != null\n+                || sup.getDiscriminator().getStrategy() instanceof\n+                ValueMapDiscriminatorStrategy) {\n+                disc.setValue(disc.getMappingInfo().getValue(disc, adapt));\n+                break;\n+            }\n+        }\n     }\n \n     public void loadSubclasses(JDBCStore store)"},{"sha":"bac75e56f40ba02025b21a24ba3ce6564e931c89","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4","patch":"@@ -460,7 +460,10 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         compatibilityPlugin.setString(aliases[0]);\n         compatibilityPlugin.setInstantiatingGetter(\"getCompatibilityInstance\");\n         \n-        queryCompilationCachePlugin = new QueryCompilationCacheValue(this);\n+        queryCompilationCachePlugin = new QueryCompilationCacheValue(\n+            \"QueryCompilationCache\");\n+        queryCompilationCachePlugin.setInstantiatingGetter(\n+            \"getQueryCompilationCacheInstance\");\n         addValue(queryCompilationCachePlugin);\n \n         // initialize supported options that some runtimes may not support\n@@ -1388,14 +1391,13 @@ public String getQueryCompilationCache() {\n         return queryCompilationCachePlugin.getString();\n     }\n \n-    public void setQueryCompilationCache(String conf) {\n-        queryCompilationCachePlugin.setString(conf);\n+    public void setQueryCompilationCache(String queryCompilationCache) {\n+        queryCompilationCachePlugin.setString(queryCompilationCache);\n     }\n     \n     public Map getQueryCompilationCacheInstance() {\n         if (queryCompilationCachePlugin.get() == null)\n-            queryCompilationCachePlugin.instantiate(\n-                QueryCompilationCacheValue.class, this);\n+            queryCompilationCachePlugin.instantiate(Map.class, this);\n         return (Map) queryCompilationCachePlugin.get();\n     }\n "},{"sha":"373dbdf945494e0546fbad6a778e757fc06e1a40","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/QueryCompilationCacheValue.java","status":"modified","additions":11,"deletions":25,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4/openjpa-kernel/src/main/java/org/apache/openjpa/conf/QueryCompilationCacheValue.java","raw_url":"https://github.com/apache/openjpa/raw/3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4/openjpa-kernel/src/main/java/org/apache/openjpa/conf/QueryCompilationCacheValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/QueryCompilationCacheValue.java?ref=3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4","patch":"@@ -15,14 +15,18 @@\n  */\r\n package org.apache.openjpa.conf;\r\n \r\n-import java.util.*;\r\n+import java.util.Collections;\r\n+import java.util.Hashtable;\r\n+import java.util.Map;\r\n \r\n-import org.apache.openjpa.lib.conf.*;\r\n-import org.apache.openjpa.lib.util.concurrent.*;\r\n-import org.apache.openjpa.util.*;\r\n+import org.apache.openjpa.lib.conf.Configuration;\r\n+import org.apache.openjpa.lib.conf.PluginValue;\r\n+import org.apache.openjpa.lib.util.concurrent.ConcurrentMap;\r\n+import org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap;\r\n+import org.apache.openjpa.util.CacheMap;\r\n \r\n /**\r\n- * <p>A cache of compiled queries.</p>\r\n+ * A cache of compiled queries.\r\n  *\r\n  * @author Abe White\r\n  * @since 0.9.6 (also existed in prior versions of Kodo)\r\n@@ -31,35 +35,17 @@\n public class QueryCompilationCacheValue\r\n     extends PluginValue {\r\n \r\n-    /**\r\n-     * Query compilation cache configuration property key.\r\n-     */\r\n-    private static final String KEY = \"QueryCompilationCache\";\r\n-\r\n     public static final String[] ALIASES = {\r\n         \"true\", CacheMap.class.getName(),\r\n         \"all\", ConcurrentHashMap.class.getName(),\r\n         \"false\", null,\r\n     };\r\n \r\n-    private final OpenJPAConfiguration _conf;\r\n-\r\n-    public QueryCompilationCacheValue(OpenJPAConfiguration conf) {\r\n-        super(KEY, true);\r\n+    public QueryCompilationCacheValue(String prop) {\r\n+        super(prop, true);\r\n         setAliases(ALIASES);\r\n         setDefault(ALIASES[0]);\r\n         setClassName(ALIASES[1]);\r\n-        setInstantiatingGetter(\"this.instantiate\");\r\n-        setScope(getClass());\r\n-        _conf = conf;\r\n-    }\r\n-\r\n-    /**\r\n-     * Instantiate internal map.\r\n-     */\r\n-    public void instantiate() {\r\n-        if (get() == null)\r\n-            instantiate(Map.class, _conf, true);\r\n     }\r\n \r\n     public Object newInstance(String clsName, Class type,\r"},{"sha":"d8463b06d47e7c9fbce4f9c68351514c9fcda31c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":63,"deletions":58,"changes":121,"blob_url":"https://github.com/apache/openjpa/blob/3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4","patch":"@@ -527,6 +527,7 @@ public String getParameterDeclaration() {\n                 || _broker == null)\n                 return _params;\n \n+            // check again after compilation; maybe encoded in string\n             compileForCompilation();\n             return _params;\n         } finally {\n@@ -562,6 +563,15 @@ public void compile() {\n         }\n     }\n \n+    public Object getCompilation() {\n+        lock();\n+        try {\n+            return compileForCompilation().storeData;\n+        } finally {\n+            unlock();\n+        }\n+    }\n+\n     /**\n      * Compile query properties.\n      */\n@@ -589,7 +599,8 @@ private Compilation compileForCompilation() {\n     }\n \n     /**\n-     * Create and initialize a query compilation based on current data.\n+     * Find the cached compilation for the current query, creating one if it\n+     * does not exist.\n      */\n     protected Compilation compilationFromCache() {\n         Map compCache =\n@@ -622,6 +633,9 @@ protected Compilation compilationFromCache() {\n         }\n     }\n     \n+    /**\n+     * Create and populate a new compilation.\n+     */\n     private Compilation newCompilation() {\n         Compilation comp = new Compilation();\n         comp.storeData = _storeQuery.newCompilation();\n@@ -1510,15 +1524,6 @@ public void unlock() {\n             _lock.unlock();\n     }\n \n-    public Object getCompilation() {\n-        lock();\n-        try {\n-            return compileForCompilation().storeData;\n-        } finally {\n-            unlock();\n-        }\n-    }\n-\n     /////////\n     // Utils\n     /////////\n@@ -1672,6 +1677,54 @@ public String toString() {\n         public Object storeData = null;\n     }\n \n+    /**\n+     * Struct to hold the unparsed properties associated with a query.\n+     */\n+    private static class CompilationKey\n+        implements Serializable {\n+\n+        public Class queryType = null;\n+        public Class candidateType = null;\n+        public boolean subclasses = true;\n+        public String query = null;\n+        public String language = null;\n+        public Object storeKey = null;\n+\n+        public int hashCode() {\n+            int rs = 17;\n+            rs = 37 * rs + ((queryType == null) ? 0 : queryType.hashCode());\n+            rs = 37 * rs + ((query == null) ? 0 : query.hashCode());\n+            rs = 37 * rs + ((language == null) ? 0 : language.hashCode());\n+            rs = 37 * rs + ((storeKey == null) ? 0 : storeKey.hashCode());\n+            return rs;\n+        }\n+\n+        public boolean equals(Object other) {\n+            if (other == this)\n+                return true;\n+            if (other == null || other.getClass() != getClass())\n+                return false;\n+\n+            CompilationKey key = (CompilationKey) other;\n+            if (key.queryType != queryType\n+                || !StringUtils.equals(key.query, query)\n+                || !StringUtils.equals(key.language, language))\n+                return false;\n+\n+            if (!ObjectUtils.equals(key.storeKey, storeKey))\n+                return false;\n+\n+            // allow either candidate type to be null because it might be\n+            // encoded in the query string, but if both are set then they\n+            // must be equal\n+            if (candidateType != null && key.candidateType != null)\n+                return candidateType == key.candidateType\n+                    && subclasses == key.subclasses;\n+\n+            return true;\n+        }\n+    }\n+\n     /**\n      * A merged executor executes multiple Queries and returns\n      * a merged result list with the appropriate ordering (if more than\n@@ -2077,52 +2130,4 @@ public Object writeReplace ()\n \t\t\treturn _res;\n \t\t}\n \t}\n-\n-    /**\n-     * Struct to hold the unparsed properties associated with a query.\n-     */\n-    private static class CompilationKey\n-        implements Serializable {\n-\n-        public Class queryType = null;\n-        public Class candidateType = null;\n-        public boolean subclasses = true;\n-        public String query = null;\n-        public String language = null;\n-        public Object storeKey = null;\n-\n-        public int hashCode() {\n-            int rs = 17;\n-            rs = 37 * rs + ((queryType == null) ? 0 : queryType.hashCode());\n-            rs = 37 * rs + ((query == null) ? 0 : query.hashCode());\n-            rs = 37 * rs + ((language == null) ? 0 : language.hashCode());\n-            rs = 37 * rs + ((storeKey == null) ? 0 : storeKey.hashCode());\n-            return rs;\n-        }\n-\n-        public boolean equals(Object other) {\n-            if (other == this)\n-                return true;\n-            if (other == null || other.getClass() != getClass())\n-                return false;\n-\n-            CompilationKey key = (CompilationKey) other;\n-            if (key.queryType != queryType\n-                || !StringUtils.equals(key.query, query)\n-                || !StringUtils.equals(key.language, language))\n-                return false;\n-\n-            if (!ObjectUtils.equals(key.storeKey, storeKey))\n-                return false;\n-\n-            // allow either candidate type to be null because it might be\n-            // encoded in the query string, but if both are set then they\n-            // must be equal\n-            if (candidateType != null && key.candidateType != null)\n-                return candidateType == key.candidateType\n-                    && subclasses == key.subclasses;\n-\n-            return true;\n-        }\n-    }\n }"},{"sha":"265e464ec2beb687f11b9a6985148db01103de29","filename":"openjpa-project/src/doc/manual/ref_guide_caching.xml","status":"modified","additions":36,"deletions":35,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4/openjpa-project/src/doc/manual/ref_guide_caching.xml","raw_url":"https://github.com/apache/openjpa/raw/3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4/openjpa-project/src/doc/manual/ref_guide_caching.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_caching.xml?ref=3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4","patch":"@@ -789,25 +789,31 @@ Iterator cachedIterator = extentQuery.getResultList().iterator();\n         </section>\n     </section>\n \t<section id=\"ref_guide_cache_querycomp\">\n-\t\t<title>Query Compilation Cache</title>\n+\t\t<title>\n+            Query Compilation Cache\n+        </title>\n \t\t<indexterm zone=\"ref_guide_cache_querycomp\">\n-\t\t\t<primary>caching</primary>\n-\t\t\t<secondary>query compilation cache</secondary>\n+\t\t\t<primary>\n+                caching\n+            </primary>\n+\t\t\t<secondary>\n+                query compilation cache\n+            </secondary>\n \t\t</indexterm>\n \t\t<para>\n-\t\tThe query compilation cache is a <classname>Map</classname> used to\n-\t\tcache parsed query strings.  As a result, most queries are\n-\t\tonly parsed once in OpenJPA, and cached thereafter.  You can control the\n-\t\tcompilation cache through the \n-\t\t<link linkend=\"openjpa.QueryCompilationCache\"><literal>\n-\t\topenjpa.QueryCompilationCache</literal></link> configuration property.\n-\t\tThis property accepts a plugin string (see \n-\t\t<xref linkend=\"ref_guide_conf_plugins\"/>) describing the\n-\t\t<classname>Map</classname> used to associate query strings and their \n-\t\tparsed form.  This property accepts the following aliases:\n+The query compilation cache is a <classname>Map</classname> used to cache \n+parsed query strings.  As a result, most queries are only parsed once in \n+OpenJPA, and cached thereafter.  You can control the compilation cache through \n+the <link linkend=\"openjpa.QueryCompilationCache\"><literal>\n+openjpa.QueryCompilationCache</literal></link> configuration property.  This \n+property accepts a plugin string (see <xref linkend=\"ref_guide_conf_plugins\"/>)\n+describing the <classname>Map</classname> used to associate query strings and \n+their parsed form.  This property accepts the following aliases:\n \t\t</para>\n \t\t<table>\n-\t\t\t<title>Pre-defined aliases</title>\n+\t\t\t<title>\n+                Pre-defined aliases\n+            </title>\n \t\t\t<tgroup cols=\"2\" align=\"left\" colsep=\"1\" rowsep=\"1\">\n \t\t\t\t<colspec colname=\"alias\"/>\n \t\t\t\t<colspec colname=\"value\"/>\n@@ -822,44 +828,39 @@ Iterator cachedIterator = extentQuery.getResultList().iterator();\n \t\t\t\t<tbody>\n \t\t\t\t\t<row>\n \t\t\t\t\t\t<entry colname=\"alias\">\n-\t\t\t\t\t\t\t<literal>true</literal>\n+<literal>true</literal>\n \t\t\t\t\t\t</entry>\n \t\t\t\t\t\t<entry colname=\"value\">\n-\t\t\t\t\t\t\t<literal>org.apache.openjpa.util.CacheMap</literal>\n+<literal>org.apache.openjpa.util.CacheMap</literal>\n \t\t\t\t\t\t</entry>\n \t\t\t\t\t\t<entry colname=\"notes\">\n-\t\t\t\t\t\t\tThe default option.  Uses a \n-\t\t\t\t\t\t\t<ulink url=\"&javadoc-dir;/org/apache/openjpa/util/CacheMap.html\">\n-\t\t\t\t\t\t\t<literal>CacheMap</literal></ulink> to store \n-\t\t\t\t\t\t\tcompilation data.  <literal>CacheMap</literal> uses\n-\t\t\t\t\t\t\ta least-recently-used strategy for a fixed number \n-\t\t\t\t\t\t\tof cache entries, and an optional soft reference \n-\t\t\t\t\t\t\tmap for entries that are moved out of the LRU \n-\t\t\t\t\t\t\tspace. So, for applications that have a \n-\t\t\t\t\t\t\tmonotonically increasing number of distinct queries,\n-\t\t\t\t\t\t\tthis option can be used to ensure that a fixed \n-\t\t\t\t\t\t\tamount of memory is used by the cache.\n+The default option.  Uses a \n+<ulink url=\"../javadoc/org/apache/openjpa/util/CacheMap.html\"> \n+<literal>CacheMap</literal></ulink> to store compilation data.  \n+<literal>CacheMap</literal> maintains a fixed number of cache entries, and an \n+optional soft reference map for entries that are moved out of the LRU space. \n+So, for applications that have a monotonically increasing number of distinct \n+queries, this option can be used to ensure that a fixed amount of memory is \n+used by the cache.\n \t\t\t\t\t\t</entry>\n \t\t\t\t\t</row>\n \t\t\t\t\t<row>\n \t\t\t\t\t\t<entry colname=\"alias\"><literal>all</literal></entry>\n \t\t\t\t\t\t<entry colname=\"value\">\n-\t\t\t\t\t\t\t<literal>org.apache.openjpa.lib.util.ConcurrentHashMap</literal>\n+<literal>org.apache.openjpa.lib.util.ConcurrentHashMap</literal>\n \t\t\t\t\t\t</entry>\n \t\t\t\t\t\t<entry colname=\"notes\">\n-\t\t\t\t\t\t\tThis is the fastest option, but compilation data is\n-\t\t\t\t\t\t\tnever dropped from the cache, so if you use a large \n-\t\t\t\t\t\t\tnumber of dynamic queries, this option may result in\n-\t\t\t\t\t\t\tever-increasing memory usage. Note that if your \n-\t\t\t\t\t\t\tqueries only differ in the values of the parameters,\n-\t\t\t\t\t\t\tthis should not be an issue.\n+This is the fastest option, but compilation data is never dropped from the \n+cache, so if you use a large number of dynamic queries, this option may result \n+in ever-increasing memory usage. Note that if your queries only differ in the \n+values of the parameters, this should not be an issue.\n \t\t\t\t\t\t</entry>\n \t\t\t\t\t</row>\n \t\t\t\t\t<row>\n \t\t\t\t\t\t<entry colname=\"alias\"><literal>false</literal></entry>\n \t\t\t\t\t\t<entry colname=\"value\"><emphasis>none</emphasis></entry>\n \t\t\t\t\t\t<entry colname=\"notes\">\n-\t\t\t\t\t\t\tDisables the compilation cache.\n+Disables the compilation cache.\n \t\t\t\t\t\t</entry>\n \t\t\t\t\t</row>\n \t\t\t\t</tbody>"},{"sha":"6251e7d0855db5cf85db6d3c4a589c9b0f8be8a4","filename":"openjpa-project/src/doc/manual/ref_guide_conf.xml","status":"modified","additions":21,"deletions":14,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4/openjpa-project/src/doc/manual/ref_guide_conf.xml","raw_url":"https://github.com/apache/openjpa/raw/3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4/openjpa-project/src/doc/manual/ref_guide_conf.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_conf.xml?ref=3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4","patch":"@@ -2455,31 +2455,38 @@ implementation to use for caching of queries loaded from the data store. See\n             </para>\n         </section>\n \t\t<section id=\"openjpa.QueryCompilationCache\">\n-\t\t\t<title>openjpa.QueryCompilationCache</title>\n+\t\t\t<title>\n+                openjpa.QueryCompilationCache\n+            </title>\n \t\t\t<indexterm zone=\"openjpa.QueryCompilationCache\">\n-\t\t\t\t<primary>QueryCompilationCache</primary>\n+\t\t\t\t<primary>\n+                    QueryCompilationCache\n+                </primary>\n \t\t\t</indexterm>\n \t\t\t<indexterm zone=\"openjpa.QueryCompilationCache\">\n-\t\t\t\t<primary>caching</primary>\n-\t\t\t\t<secondary>QueryCompilationCache</secondary>\n+\t\t\t\t<primary>\n+                    caching\n+                </primary>\n+\t\t\t\t<secondary>\n+                    QueryCompilationCache\n+                </secondary>\n \t\t\t</indexterm>\n \t\t\t<para>\n-\t\t\t<emphasis role=\"bold\">Property name:</emphasis>\n-\t\t\t<literal>openjpa.QueryCompilationCache</literal>\n+<emphasis role=\"bold\">Property name:</emphasis>\n+<literal>openjpa.QueryCompilationCache</literal>\n \t\t\t</para>\n \t\t\t<para>\n-\t\t\t<emphasis role=\"bold\">Resource adaptor config-property:</emphasis> \n-\t\t\t<literal>QueryCompilationCache</literal>\n+<emphasis role=\"bold\">Resource adaptor config-property:</emphasis> \n+<literal>QueryCompilationCache</literal>\n \t\t\t</para>\n \t\t\t<para>\n-\t\t\t<emphasis role=\"bold\">Default:</emphasis> <literal>true</literal>.\n+<emphasis role=\"bold\">Default:</emphasis> <literal>true</literal>.\n \t\t\t</para>\n \t\t\t<para>\n-\t\t\t<emphasis role=\"bold\">Description:</emphasis> A plugin\n-\t\t\tstring (see <xref linkend=\"ref_guide_conf_plugins\"/>)\n-\t\t\tdescribing the <literal>java.util.Map</literal> to use for\n-\t\t\tcaching of data used during query compilation.\n-\t\t\tSee <xref linkend=\"ref_guide_cache_querycomp\"/> for details.\n+<emphasis role=\"bold\">Description:</emphasis> A plugin string (see \n+<xref linkend=\"ref_guide_conf_plugins\"/>) describing the \n+<classname>java.util.Map</classname> to use for caching of data used during \n+query compilation.  See <xref linkend=\"ref_guide_cache_querycomp\"/> for details.\n \t\t\t</para>\n \t\t</section>\n         <section id=\"openjpa.ReadLockLevel\">"},{"sha":"165bee998338eabfa1fa54c9740b73fb7fdf074f","filename":"openjpa-project/src/doc/manual/ref_guide_optimization.xml","status":"modified","additions":12,"deletions":10,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4/openjpa-project/src/doc/manual/ref_guide_optimization.xml","raw_url":"https://github.com/apache/openjpa/raw/3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4/openjpa-project/src/doc/manual/ref_guide_optimization.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_optimization.xml?ref=3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4","patch":"@@ -491,18 +491,20 @@ fields to be of type <classname>Set, SortedSet, HashSet,</classname> or\n                 </row>\n \t\t\t\t<row>\n \t\t\t\t\t<entry colname=\"name\">\n-\t\t\t\t\t<emphasis role=\"bold\">Use query parameters instead of\n-\t\t\t\t\tencoding search data in filter strings</emphasis>\n-\t\t\t\t\t<para><emphasis>performance</emphasis></para>\n+                        <emphasis role=\"bold\">\n+                            Use query parameters instead of encoding search \n+                            data in filter strings\n+                        </emphasis>\n+                        <para>\n+<emphasis>performance</emphasis>\n+                        </para>\n \t\t\t\t\t</entry>\n \t\t\t\t\t<entry colname=\"desc\">\n-\t\t\t\t\tIf your queries depend on parameter data only known at\n-\t\t\t\t\truntime, you should use query parameters rather than\n-\t\t\t\t\tdynamically building different query strings. OpenJPA\n-\t\t\t\t\tperforms aggressive caching of query compilation\n-\t\t\t\t\tdata, and the effectiveness of this cache is diminished if\n-\t\t\t\t\tmultiple query filters are used where a single one could\n-\t\t\t\t\thave sufficed.\n+If your queries depend on parameter data only known at runtime, you should use \n+query parameters rather than dynamically building different query strings. \n+OpenJPA performs aggressive caching of query compilation data, and the \n+effectiveness of this cache is diminished if multiple query filters are used \n+where a single one could have sufficed.\n \t\t\t\t\t</entry>\n \t\t\t\t</row>\n                 <row>"}]}

