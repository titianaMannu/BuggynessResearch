{"sha":"3cd8c4c6f0bbc7e37be3c8fc45b84aff44bee4b1","node_id":"MDY6Q29tbWl0MjA2MzY0OjNjZDhjNGM2ZjBiYmM3ZTM3YmUzYzhmYzQ1Yjg0YWZmNDRiZWU0YjE=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-02-17T23:00:50Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-02-17T23:00:50Z"},"message":"OPENJPA-1517: Reduce synchronization in LifecycleEventManager. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@911213 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"811cb648b7ec38491a71d0a9841bd9ef15f15b58","url":"https://api.github.com/repos/apache/openjpa/git/trees/811cb648b7ec38491a71d0a9841bd9ef15f15b58"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3cd8c4c6f0bbc7e37be3c8fc45b84aff44bee4b1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3cd8c4c6f0bbc7e37be3c8fc45b84aff44bee4b1","html_url":"https://github.com/apache/openjpa/commit/3cd8c4c6f0bbc7e37be3c8fc45b84aff44bee4b1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3cd8c4c6f0bbc7e37be3c8fc45b84aff44bee4b1/comments","author":null,"committer":null,"parents":[{"sha":"5d6a881a43965f778ed623c7755dd8737b538a88","url":"https://api.github.com/repos/apache/openjpa/commits/5d6a881a43965f778ed623c7755dd8737b538a88","html_url":"https://github.com/apache/openjpa/commit/5d6a881a43965f778ed623c7755dd8737b538a88"}],"stats":{"total":91,"additions":19,"deletions":72},"files":[{"sha":"a241da26217cd50b5a5bfdd4966b2c0344c7378f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3cd8c4c6f0bbc7e37be3c8fc45b84aff44bee4b1/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/3cd8c4c6f0bbc7e37be3c8fc45b84aff44bee4b1/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java?ref=3cd8c4c6f0bbc7e37be3c8fc45b84aff44bee4b1","patch":"@@ -233,7 +233,7 @@ private boolean hasCallbacks(Object source, ClassMetaData meta, int type) {\n      * Return true if any listeners are registered for the given source and\n      * event type.\n      */\n-    private synchronized boolean hasListeners(Object source,\n+    private boolean hasListeners(Object source,\n         ClassMetaData meta, int type) {\n         if (meta.getLifecycleMetaData().getIgnoreSystemListeners())\n             return false;"},{"sha":"caeccd3a46e88e49f27243d129ceb23da900b222","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestLifecycleEventManager.java","status":"modified","additions":18,"deletions":71,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/3cd8c4c6f0bbc7e37be3c8fc45b84aff44bee4b1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestLifecycleEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/3cd8c4c6f0bbc7e37be3c8fc45b84aff44bee4b1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestLifecycleEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestLifecycleEventManager.java?ref=3cd8c4c6f0bbc7e37be3c8fc45b84aff44bee4b1","patch":"@@ -19,38 +19,37 @@\n package org.apache.openjpa.persistence.event;\n \n \n-import java.lang.Thread.UncaughtExceptionHandler;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n+import org.apache.openjpa.persistence.event.common.apps.RuntimeTest1;\n+import org.apache.openjpa.persistence.event.common.apps.RuntimeTest2;\n+import org.apache.openjpa.persistence.event.common.apps.RuntimeTest4;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n import org.apache.openjpa.event.LifecycleEvent;\n import org.apache.openjpa.event.LifecycleEventManager;\n import org.apache.openjpa.event.LoadListener;\n import org.apache.openjpa.event.StoreListener;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n-import org.apache.openjpa.persistence.event.common.apps.RuntimeTest1;\n-import org.apache.openjpa.persistence.event.common.apps.RuntimeTest2;\n-import org.apache.openjpa.persistence.event.common.apps.RuntimeTest4;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n \n /**\n  * <p>Test the {@link LifecycleEventManager}.</p>\n  *\n  * @author Abe White\n  */\n public class TestLifecycleEventManager\n-    extends AbstractTestCase implements UncaughtExceptionHandler{\n+    extends AbstractTestCase {\n \n     public TestLifecycleEventManager(String s) {\n         super(s, \"eventcactusapp\");\n     }\n \n-    public void atestAllClassListener() {\n-        MetaDataRepository repos = getMDR();\n+    public void testAllClassListener() {\n+        MetaDataRepository repos =\n+            ((OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(\n+                OpenJPAPersistence.createEntityManagerFactory(\"TestConv2\", \"\")))\n+                .\n+                    getConfiguration().getMetaDataRepositoryInstance();\n         ClassMetaData meta = repos.getMetaData(RuntimeTest2.class, null, true);\n         LifecycleEventManager mgr = new LifecycleEventManager();\n         RuntimeTest2 pc = new RuntimeTest2();\n@@ -119,8 +118,12 @@ public void atestAllClassListener() {\n         assertEquals(2, listener.store);\n     }\n \n-    public void atestBaseClassListener() {\n-        MetaDataRepository repos = getMDR();\n+    public void testBaseClassListener() {\n+        MetaDataRepository repos =\n+            ((OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(\n+                OpenJPAPersistence.createEntityManagerFactory(\"TestConv2\", \"\")))\n+                .\n+                    getConfiguration().getMetaDataRepositoryInstance();\n         ClassMetaData meta = repos.getMetaData(RuntimeTest2.class, null, true);\n \n         LifecycleEventManager mgr = new LifecycleEventManager();\n@@ -191,62 +194,6 @@ public void atestBaseClassListener() {\n         assertEquals(3, listener.load);\n         assertEquals(1, listener.store);\n     }\n-    \n-    public void testMultiThreaded() throws Exception{\n-\n-        for(int z = 0; z < 1000; z++){\n-            \n-            final LifecycleEventManager mgr = new LifecycleEventManager();\n-            final List<Listener> listeners = new ArrayList<Listener>();\n-            final ClassMetaData meta = getMDR().getMetaData(RuntimeTest2.class, null, true);\n-            final RuntimeTest2 pc = new RuntimeTest2();\n-            \n-            for(int i = 0 ; i<10000;i++){\n-                Listener l = new Listener();\n-                mgr.addListener(l, null);\n-                listeners.add(l);\n-            }\n-            \n-            Thread removerThread = new Thread(){\n-                public void run() {\n-                    for(Listener l : listeners){\n-                        mgr.removeListener(l);\n-                    }\n-                }\n-            };\n-            Thread hasLoadListenersThread = new Thread(){\n-                @Override\n-                public void run() {\n-                    for(Listener l : listeners){\n-                        if(mgr.hasLoadListeners(pc, meta) == false){\n-                            System.out.println(\"false!\");       \n-                        }\n-                     \n-                    }\n-                }\n-            };\n-            removerThread.setUncaughtExceptionHandler(this);\n-            hasLoadListenersThread.setUncaughtExceptionHandler(this);\n-            \n-            hasLoadListenersThread.start();\n-            removerThread.start();\n-            \n-            removerThread.join();\n-            hasLoadListenersThread.join();\n-            \n-            Throwable t = exceptions.get(hasLoadListenersThread);\n-            assertNull(t);\n-        }\n-    }\n-    Map<Thread, Throwable> exceptions = new HashMap<Thread, Throwable>();\n-    public void uncaughtException(Thread thread, Throwable throwable) {\n-        exceptions.put(thread, throwable);\n-        \n-    }\n-\n-    private MetaDataRepository getMDR() {\n-        return ((OpenJPAEntityManagerFactorySPI)getEmf()).getConfiguration().getMetaDataRepositoryInstance();\n-    }\n \n     private static class Listener\n         implements LoadListener, StoreListener {"}]}

