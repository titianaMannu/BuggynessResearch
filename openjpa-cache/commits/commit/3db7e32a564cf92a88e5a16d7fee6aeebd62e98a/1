{"sha":"3db7e32a564cf92a88e5a16d7fee6aeebd62e98a","node_id":"MDY6Q29tbWl0MjA2MzY0OjNkYjdlMzJhNTY0Y2Y5MmE4OGU1YTE2ZDdmZWU2YWVlYmQ2MmU5OGE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2006-12-15T20:35:26Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2006-12-15T20:35:26Z"},"message":"A single class may not have more than one lifecycle callback method for the same lifecycle event (spec section 3.5).\nThe contraint applies irrespective of whether the class is a persistent bean or a listener or both. \n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@487652 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e593cb5fdf0fc671bd72cec86fc8be7775c767ad","url":"https://api.github.com/repos/apache/openjpa/git/trees/e593cb5fdf0fc671bd72cec86fc8be7775c767ad"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3db7e32a564cf92a88e5a16d7fee6aeebd62e98a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3db7e32a564cf92a88e5a16d7fee6aeebd62e98a","html_url":"https://github.com/apache/openjpa/commit/3db7e32a564cf92a88e5a16d7fee6aeebd62e98a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3db7e32a564cf92a88e5a16d7fee6aeebd62e98a/comments","author":null,"committer":null,"parents":[{"sha":"87b5ae1f4fdb4eec9040b0f1dee729c3507ea683","url":"https://api.github.com/repos/apache/openjpa/commits/87b5ae1f4fdb4eec9040b0f1dee729c3507ea683","html_url":"https://github.com/apache/openjpa/commit/87b5ae1f4fdb4eec9040b0f1dee729c3507ea683"}],"stats":{"total":14,"additions":10,"deletions":4},"files":[{"sha":"fa546e3ff4eb654557bdd2ca91f69360a72de758","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/3db7e32a564cf92a88e5a16d7fee6aeebd62e98a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/3db7e32a564cf92a88e5a16d7fee6aeebd62e98a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=3db7e32a564cf92a88e5a16d7fee6aeebd62e98a","patch":"@@ -815,9 +815,9 @@ else if (!StringUtils.isEmpty(detached.fieldName()))\n                     int e = events[i];\n                     if (callbacks[e] == null)\n                         callbacks[e] = new ArrayList(3);\n+                    MetaDataParsers.validateMethodsForSameCallback(cls, \n+                        callbacks[e], m, tag, def, repos.getLog());\n                     if (listener) {\n-                        MetaDataParsers.validateMethodsForSameCallback(cls, \n-                            callbacks[e], m, tag, def, repos.getLog());\n                         callbacks[e].add(new BeanLifecycleCallbacks(cls, m,\n                             false));\n                     } else {"},{"sha":"907f929a367fade0b9a8e31abb9e38af4b4ed2c8","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3db7e32a564cf92a88e5a16d7fee6aeebd62e98a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/3db7e32a564cf92a88e5a16d7fee6aeebd62e98a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java?ref=3db7e32a564cf92a88e5a16d7fee6aeebd62e98a","patch":"@@ -61,7 +61,7 @@\n public class PersistenceMetaDataDefaults\n     extends AbstractMetaDataDefaults {\n \n-    private boolean _allowsMultipleMethodsForSameCallback = true;\n+    private boolean _allowsMultipleMethodsForSameCallback = false;\n \n     private static Localizer _loc = Localizer.forPackage\n         (PersistenceMetaDataDefaults.class);"},{"sha":"209e15e220a461b84de547fdae45f3d2af0214b5","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/3db7e32a564cf92a88e5a16d7fee6aeebd62e98a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/3db7e32a564cf92a88e5a16d7fee6aeebd62e98a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=3db7e32a564cf92a88e5a16d7fee6aeebd62e98a","patch":"@@ -86,7 +86,8 @@\n     protected static final String ELEM_CASCADE_REF = \"cascade-refresh\";\n     protected static final String ELEM_PU_META = \"persistence-unit-metadata\";\n     protected static final String ELEM_PU_DEF = \"persistence-unit-defaults\";\n-    protected static final String ELEM_XML_MAP_META_COMPLETE = \"xml-mapping-metadata-complete\";\n+    protected static final String ELEM_XML_MAP_META_COMPLETE = \n+        \"xml-mapping-metadata-complete\";\n \n     private static final Map<String, Object> _elems =\n         new HashMap<String, Object>();\n@@ -1582,6 +1583,11 @@ private boolean startCallback(MetaDataTag callback, Attributes attrs)\n                 MetaDataParsers.validateMethodsForSameCallback(_listener, \n                     _callbacks[event], ((BeanLifecycleCallbacks) adapter).\n                     getCallbackMethod(), callback, def, getLog());\n+            } else {\n+                MetaDataParsers.validateMethodsForSameCallback(_cls, \n+                    _callbacks[event], ((MethodLifecycleCallbacks) adapter).\n+                    getCallbackMethod(), callback, def, getLog());\n+                \n             }\n             if (_callbacks[event] == null)\n                 _callbacks[event] = new ArrayList<LifecycleCallbacks>(3);"}]}

