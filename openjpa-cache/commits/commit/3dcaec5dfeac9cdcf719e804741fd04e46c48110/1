{"sha":"3dcaec5dfeac9cdcf719e804741fd04e46c48110","node_id":"MDY6Q29tbWl0MjA2MzY0OjNkY2FlYzVkZmVhYzljZGNmNzE5ZTgwNDc0MWZkMDRlNDZjNDgxMTA=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-09-18T15:31:37Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-09-18T15:31:37Z"},"message":"OPENJPA-715.  Migrating the change to the 1.0.x service stream.  This was requested from a user via a private e-mail exchange.  I verified the problem existed in 1.0.x, applied the changes, and verified that the problem was resolved.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@696676 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"928ab80a787d690f7c6a59beedd1def537ac88d3","url":"https://api.github.com/repos/apache/openjpa/git/trees/928ab80a787d690f7c6a59beedd1def537ac88d3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3dcaec5dfeac9cdcf719e804741fd04e46c48110","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3dcaec5dfeac9cdcf719e804741fd04e46c48110","html_url":"https://github.com/apache/openjpa/commit/3dcaec5dfeac9cdcf719e804741fd04e46c48110","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3dcaec5dfeac9cdcf719e804741fd04e46c48110/comments","author":null,"committer":null,"parents":[{"sha":"6d2fa3467a168dc0561bd600949335ee2da89a1b","url":"https://api.github.com/repos/apache/openjpa/commits/6d2fa3467a168dc0561bd600949335ee2da89a1b","html_url":"https://github.com/apache/openjpa/commit/6d2fa3467a168dc0561bd600949335ee2da89a1b"}],"stats":{"total":353,"additions":350,"deletions":3},"files":[{"sha":"e28c92b4477a5715b3454311166b1dfc7f534c4b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3dcaec5dfeac9cdcf719e804741fd04e46c48110/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/3dcaec5dfeac9cdcf719e804741fd04e46c48110/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java?ref=3dcaec5dfeac9cdcf719e804741fd04e46c48110","patch":"@@ -327,7 +327,7 @@ protected Column addPrimaryKeyColumn(Table table) {\n     }\n \n     /**\n-     * Return the primary key value for the given class.\n+     * Return the primary key value for the sequence table for the given class.\n      */\n     protected Object getPrimaryKey(ClassMapping mapping) {\n         return Numbers.valueOf(0);"},{"sha":"81f656391df70df010afa5fe2fe19b5d6f657433","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/3dcaec5dfeac9cdcf719e804741fd04e46c48110/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","raw_url":"https://github.com/apache/openjpa/raw/3dcaec5dfeac9cdcf719e804741fd04e46c48110/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java?ref=3dcaec5dfeac9cdcf719e804741fd04e46c48110","patch":"@@ -756,8 +756,12 @@ private void preFlushPC(ValueMetaData vmd, Object obj, boolean logical,\n                     setFailedObject(obj);\n         } else {\n             sm = _broker.getStateManager(obj);\n-            if (sm == null || !sm.isProvisional())\n+            if (sm == null || !sm.isProvisional()) { \n                 sm = _broker.persist(obj, null, true, call);\n+                // ensure generated IDs get assigned properly\n+                if (!logical)\n+                    ((StateManagerImpl)sm).assignObjectId(false, true);\n+            }\n         }\n \n         if (sm != null) {"},{"sha":"4fbbda488acf23ed881736383b7f51aa98db4f10","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3dcaec5dfeac9cdcf719e804741fd04e46c48110/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3dcaec5dfeac9cdcf719e804741fd04e46c48110/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=3dcaec5dfeac9cdcf719e804741fd04e46c48110","patch":"@@ -494,7 +494,7 @@ public boolean assignObjectId(boolean flush) {\n      * Ask store manager to assign our oid, optionally flushing and\n      * optionally recaching on the new oid.\n      */\n-    private boolean assignObjectId(boolean flush, boolean preFlushing) {\n+    boolean assignObjectId(boolean flush, boolean preFlushing) {\n         if (_oid != null || isEmbedded() || !isPersistent())\n             return true;\n "},{"sha":"17b318d58c2c5c1921c877bb219d6ef505d70c67","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityA.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/3dcaec5dfeac9cdcf719e804741fd04e46c48110/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityA.java","raw_url":"https://github.com/apache/openjpa/raw/3dcaec5dfeac9cdcf719e804741fd04e46c48110/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityA.java?ref=3dcaec5dfeac9cdcf719e804741fd04e46c48110","patch":"@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.Collection;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class ChainEntityA {\n+\n+\t@Id\n+\t@GeneratedValue\n+\tprivate long aId;\n+\n+\t@Version\n+\tprivate Integer optLock;\n+\n+\t@ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n+\tprotected Set<ChainEntityB> chainEntityBSet;\n+\n+\tpublic ChainEntityA () {\n+\t\tsuper ();\n+\t}\n+\n+\tpublic void addChildEntityB (ChainEntityB bean) {\n+\t\tif (null == chainEntityBSet)\n+\t\t\tchainEntityBSet = new LinkedHashSet<ChainEntityB> ();\n+\t\tchainEntityBSet.add (bean);\n+\t}\n+\n+\tpublic Collection<ChainEntityB> getChildren () {\n+\t\tif (null == chainEntityBSet)\n+\t\t\tchainEntityBSet = new LinkedHashSet<ChainEntityB> ();\n+\t\treturn chainEntityBSet;\n+\t}\n+\n+\tprivate String name;\n+\n+\tpublic String getName () {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName (String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic long getId () {\n+\t\treturn aId;\n+\t}\n+\n+\tpublic void setId (long id) {\n+\t\tthis.aId = id;\n+\t}\n+}"},{"sha":"5722823e6c30d045a298b7fcc5dd5e2d9efcad97","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityB.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/3dcaec5dfeac9cdcf719e804741fd04e46c48110/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityB.java","raw_url":"https://github.com/apache/openjpa/raw/3dcaec5dfeac9cdcf719e804741fd04e46c48110/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityB.java?ref=3dcaec5dfeac9cdcf719e804741fd04e46c48110","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.Collection;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class ChainEntityB {\n+\n+\t@Id\n+\t@GeneratedValue\n+\tprivate long bId;\n+\n+\t@Version\n+\tprivate Integer optLock;\n+\n+\t//cascade = CascadeType.ALL, \n+\t@OneToMany(cascade=CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = \"chainEntityB\")\n+\tprotected Set<ChainEntityC> chainEntityCSet = null;\n+\n+\tpublic void addChainEntityC (ChainEntityC bean) {\n+\t\tif (null == chainEntityCSet)\n+\t\t\tchainEntityCSet = new LinkedHashSet<ChainEntityC> ();\n+\t\tchainEntityCSet.add (bean);\n+\t\tbean.setChainEntityB (this);\n+\t}\n+\n+\tpublic Collection<ChainEntityC> getChainEntityCSet () {\n+\t\tif (null == chainEntityCSet)\n+\t\t\tchainEntityCSet = new LinkedHashSet<ChainEntityC> ();\n+\t\treturn chainEntityCSet;\n+\t}\n+\n+\tprivate String name;\n+\n+\tpublic String getName () {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName (String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic long getId () {\n+\t\treturn bId;\n+\t}\n+\n+\tpublic void setId (long id) {\n+\t\tthis.bId = id;\n+\t}\n+\n+}"},{"sha":"334ed5c76b9363219615f4d5e1b6ea4f9f02964e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityC.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/3dcaec5dfeac9cdcf719e804741fd04e46c48110/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityC.java","raw_url":"https://github.com/apache/openjpa/raw/3dcaec5dfeac9cdcf719e804741fd04e46c48110/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityC.java?ref=3dcaec5dfeac9cdcf719e804741fd04e46c48110","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class ChainEntityC {\n+\n+\t@Id\n+\t@GeneratedValue\n+\tprivate long cId;\n+\n+\t@Version\n+\tprivate Integer optLock;\n+\n+\t@ManyToOne(fetch = FetchType.EAGER, cascade=CascadeType.ALL)\n+\tprotected ChainEntityB chainEntityB;\n+\n+\t@Basic\n+\tprotected long chainEntityBId;\n+\n+\tpublic void setChainEntityB (ChainEntityB b) {\n+\t\tthis.chainEntityB = b;\n+//\t\tthis.chainEntityBId = null == b ? 0 : b.getId ();\n+\t}\n+\n+\tprivate String name;\n+\n+\tpublic String getName () {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName (String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic long getId () {\n+\t\treturn cId;\n+\t}\n+\n+\tpublic void setId (long id) {\n+\t\tthis.cId = id;\n+\t}\n+\n+}"},{"sha":"c0c457d4d410ce7668e3f7a078f54793af87a884","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestChainEntities.java","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/apache/openjpa/blob/3dcaec5dfeac9cdcf719e804741fd04e46c48110/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestChainEntities.java","raw_url":"https://github.com/apache/openjpa/raw/3dcaec5dfeac9cdcf719e804741fd04e46c48110/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestChainEntities.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestChainEntities.java?ref=3dcaec5dfeac9cdcf719e804741fd04e46c48110","patch":"@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestChainEntities extends SingleEMFTestCase {\n+\n+\t/*\n+\t * Set this magical number to 3 or less to avoid the error.\n+\t */\n+\tprivate static final int MAGICAL_NUMBER = 50;\n+\t\n+\tlong aid;\n+\n+\tpublic void setUp () {\n+\t\tsetUp (ChainEntityA.class, ChainEntityB.class, ChainEntityC.class);\n+\t\t// Create A\n+\t\tChainEntityA a = new ChainEntityA ();\n+\t\ta.setName (\"TEST_A\");\n+\t\t// Persist A\n+\t\tEntityManager em = emf.createEntityManager ();\n+\t\tem.getTransaction ().begin ();\n+\t\tem.persist (a);\n+\t\taid = a.getId ();\n+\t\tem.getTransaction ().commit ();\n+\t\tem.close ();\n+\t\tSystem.out.println (\"ChainEntityA id = \" + aid);\n+\t}\n+\n+\tpublic void testChainEntities () {\n+\t\tchainUpdate ();\n+\t}\n+\t\n+\tprotected void chainUpdate () {\n+\t\t// Get A\n+\t\tChainEntityA a = getA ();\n+\t\t// Create B\n+\t\tChainEntityB b = new ChainEntityB ();\n+\t\tb.setName (\"Test_B_\");\n+\t\tChainEntityC c;\n+\t\t/*\n+\t\t * Create and add C to B. Increasing the number of iterations (number of\n+\t\t * ChainEntityC) increases the probability to get the unique key\n+\t\t * constraint violation error.\n+\t\t */\n+\t\tfor (int i = 1; i <= MAGICAL_NUMBER; i++) {\n+\t\t\tc = new ChainEntityC ();\n+\t\t\tc.setName (\"Test_C_\" + i);\n+\t\t\tb.addChainEntityC (c);\n+\t\t}\n+\t\ta.addChildEntityB (b);\n+\t\t// dump (a);  // debug\n+\t\t// Merge A\n+\t\tEntityManager em = emf.createEntityManager ();\n+\t\tem.getTransaction ().begin ();\n+\t\ta = em.merge (a);\n+\t\t/*\n+\t\t * workaround: Uncommenting following line is a workaround. If we\n+\t\t * retrive Ids of ChainEntityC objects after merge but before commit we\n+\t\t * don't get the error.\n+\t\t */\n+\t\t//dump (a);\n+\t\tem.getTransaction ().commit ();\n+\t\tem.close ();\n+\t\t// dump (getA ());  // debug\n+\t}\n+\n+\t/**\n+\t * Get created ChainEntityA using aid field.\n+\t * \n+\t * @return\n+\t */\n+\tprotected ChainEntityA getA () {\n+\t\tEntityManager em = emf.createEntityManager ();\n+\t\tChainEntityA a = em.find (ChainEntityA.class, aid);\n+\t\tem.close ();\n+\t\treturn a;\n+\t}\n+\n+\t/**\n+\t * Print the object graph of given ChainEntityA to System.out\n+\t * \n+\t * @param testA\n+\t */\n+\tprotected void dump (ChainEntityA testA) {\n+\t\tSystem.out.println (\"-------\");\n+\t\tSystem.out.println (testA.getName () + \"[\" + testA.getId () + \"]\");\n+\t\tfor (ChainEntityB testB : testA.getChildren ()) {\n+\t\t\tSystem.out.println (testB.getName () + \"[\" + testB.getId () + \"]\");\n+\t\t\tfor (ChainEntityC testC : testB.getChainEntityCSet ()) {\n+\t\t\t\tSystem.out.println (testC.getName () + \"[\" + testC.getId ()\n+\t\t\t\t\t\t+ \"]\");\n+\t\t\t}\n+\t\t}\n+\t\tSystem.out.println (\"-------\");\n+\t}\n+\n+}"}]}

