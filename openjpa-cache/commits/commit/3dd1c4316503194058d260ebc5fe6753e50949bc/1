{"sha":"3dd1c4316503194058d260ebc5fe6753e50949bc","node_id":"MDY6Q29tbWl0MjA2MzY0OjNkZDFjNDMxNjUwMzE5NDA1OGQyNjBlYmM1ZmU2NzUzZTUwOTQ5YmM=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-01-12T17:25:25Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-01-12T17:25:25Z"},"message":"Allow use of reflection to access private id fields of pre-1.5 classes.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@495650 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"73867a0bda7f95cbe2960f753fbf965eedee7c1b","url":"https://api.github.com/repos/apache/openjpa/git/trees/73867a0bda7f95cbe2960f753fbf965eedee7c1b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3dd1c4316503194058d260ebc5fe6753e50949bc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3dd1c4316503194058d260ebc5fe6753e50949bc","html_url":"https://github.com/apache/openjpa/commit/3dd1c4316503194058d260ebc5fe6753e50949bc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3dd1c4316503194058d260ebc5fe6753e50949bc/comments","author":null,"committer":null,"parents":[{"sha":"6eae1a37ae235f06f0ec729519a19101d3e7cd95","url":"https://api.github.com/repos/apache/openjpa/commits/6eae1a37ae235f06f0ec729519a19101d3e7cd95","html_url":"https://github.com/apache/openjpa/commit/6eae1a37ae235f06f0ec729519a19101d3e7cd95"}],"stats":{"total":32,"additions":9,"deletions":23},"files":[{"sha":"2dfe2312c1394f5c4b8c4cccfc1a2f56b3cbbc90","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/3dd1c4316503194058d260ebc5fe6753e50949bc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/3dd1c4316503194058d260ebc5fe6753e50949bc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java?ref=3dd1c4316503194058d260ebc5fe6753e50949bc","patch":"@@ -39,7 +39,6 @@\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.MetaDataContext;\n import org.apache.openjpa.util.MetaDataException;\n-\n import serp.util.Strings;\n \n /**"},{"sha":"e3f5a463507ebe32e4594e8e5dad89a12702cc30","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":8,"deletions":20,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/3dd1c4316503194058d260ebc5fe6753e50949bc/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/3dd1c4316503194058d260ebc5fe6753e50949bc/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=3dd1c4316503194058d260ebc5fe6753e50949bc","patch":"@@ -1550,7 +1550,7 @@ private void addCopyKeyFieldsToObjectIdMethod(boolean fieldManager)\n                 if (reflect) {\n                     code.constant().setValue(oidType);\n                     code.constant().setValue(name);\n-                    setClassConstant(code, type);\n+                    setClassConstant(_pc, code, type);\n                     code.constant().setValue(true);\n                     code.invokestatic().setMethod(Reflection.class, \n                         \"findSetter\", Method.class, new Class[] { Class.class,\n@@ -1601,25 +1601,13 @@ private void addCopyKeyFieldsToObjectIdMethod(boolean fieldManager)\n     }\n \n     /**\n-     * Works around a bug in serp when primitive type constants. \n-     */\n-    private static void setClassConstant(Code code, Class type) {\n-        if (type == boolean.class) \n-            code.getstatic().setField(Boolean.class, \"TYPE\", Class.class);\n-        else if (type == byte.class) \n-            code.getstatic().setField(Byte.class, \"TYPE\", Class.class);\n-        else if (type == char.class) \n-            code.getstatic().setField(Character.class, \"TYPE\", Class.class);\n-        else if (type == double.class) \n-            code.getstatic().setField(Double.class, \"TYPE\", Class.class);\n-        else if (type == float.class) \n-            code.getstatic().setField(Float.class, \"TYPE\", Class.class);\n-        else if (type == int.class) \n-            code.getstatic().setField(Integer.class, \"TYPE\", Class.class);\n-        else if (type == long.class) \n-            code.getstatic().setField(Long.class, \"TYPE\", Class.class);\n-        else if (type == short.class) \n-            code.getstatic().setField(Short.class, \"TYPE\", Class.class);\n+     * Works around a bug in serp with primitive type constants, and chooses\n+     * Java 5 construct when available (serp will eventually do all this\n+     * automatically). \n+     */\n+    private static void setClassConstant(BCClass bc, Code code, Class type) {\n+        if (type.isPrimitive() || bc.getMajorVersion() < 49) // 49 = Java 5\n+            code.classconstant().setClass(type);\n         else\n             code.constant().setValue(type);\n     }"},{"sha":"e033f0467450bf7777e3251701d2df6a4937148a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3dd1c4316503194058d260ebc5fe6753e50949bc/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/3dd1c4316503194058d260ebc5fe6753e50949bc/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java?ref=3dd1c4316503194058d260ebc5fe6753e50949bc","patch":"@@ -643,8 +643,7 @@ private Set parsePersistentTypeNames(ClassLoader loader)\n                 } else {\n                     if (log.isTraceEnabled())\n                         log.trace(_loc.get(\"scanning-url\", url));\n-                    clss = cparser.parseTypeNames(new URLMetaDataIterator\n-                        (url));\n+                    clss = cparser.parseTypeNames(new URLMetaDataIterator(url));\n                     names.addAll(Arrays.asList(clss));\n                     mapPersistentTypeNames(url, clss);\n                 }"}]}

