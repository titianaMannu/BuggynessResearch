{"sha":"3de119f57a62ecdb6886cde2476232f7f12d4f86","node_id":"MDY6Q29tbWl0MjA2MzY0OjNkZTExOWY1N2E2MmVjZGI2ODg2Y2RlMjQ3NjIzMmY3ZjEyZDRmODY=","commit":{"author":{"name":"Jody Grassel","email":"jgrassel@apache.org","date":"2010-12-13T18:54:57Z"},"committer":{"name":"Jody Grassel","email":"jgrassel@apache.org","date":"2010-12-13T18:54:57Z"},"message":"OPENJPA-1905: Validate jar-file pu element after confirming OpenJPA is chosen provider\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1045296 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fbbc8180dcc593de026de38bbcaedad787a40ac8","url":"https://api.github.com/repos/apache/openjpa/git/trees/fbbc8180dcc593de026de38bbcaedad787a40ac8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3de119f57a62ecdb6886cde2476232f7f12d4f86","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3de119f57a62ecdb6886cde2476232f7f12d4f86","html_url":"https://github.com/apache/openjpa/commit/3de119f57a62ecdb6886cde2476232f7f12d4f86","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3de119f57a62ecdb6886cde2476232f7f12d4f86/comments","author":null,"committer":null,"parents":[{"sha":"dcaf2a41f11156e423dd0fe45f8caf3d64e5c47b","url":"https://api.github.com/repos/apache/openjpa/commits/dcaf2a41f11156e423dd0fe45f8caf3d64e5c47b","html_url":"https://github.com/apache/openjpa/commit/dcaf2a41f11156e423dd0fe45f8caf3d64e5c47b"}],"stats":{"total":190,"additions":190,"deletions":0},"files":[{"sha":"3bd4782e6ddf9dc131e8be7ec19544e21354265e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/puconf/TestPersistenceUnitConfig.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/3de119f57a62ecdb6886cde2476232f7f12d4f86/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/puconf/TestPersistenceUnitConfig.java","raw_url":"https://github.com/apache/openjpa/raw/3de119f57a62ecdb6886cde2476232f7f12d4f86/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/puconf/TestPersistenceUnitConfig.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/puconf/TestPersistenceUnitConfig.java?ref=3de119f57a62ecdb6886cde2476232f7f12d4f86","patch":"@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.puconf;\n+\n+import javax.persistence.EntityManagerFactory;\n+\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.test.PersistenceTestCase;\n+\n+public class TestPersistenceUnitConfig extends PersistenceTestCase {\n+    private String persistenceXmlResource;\n+\n+    public TestPersistenceUnitConfig() {\n+        persistenceXmlResource = getClass().getPackage().getName().replaceAll(\"\\\\.\", \"/\") + \n+        \"/META-INF/persistence.xml\";\n+    }\n+\n+    public EntityManagerFactory createEmf(String unitName) {\n+        return OpenJPAPersistence.createEntityManagerFactory(unitName, persistenceXmlResource);\n+    }\n+\n+    public void testCreateEMFWithGoodPU() {\n+        EntityManagerFactory emf = null;\n+        try {\n+            emf = createEmf(\"PUTest-Good\");         \n+            assertNotNull(\"Assert emf was successfully created.\", emf);\n+        } finally {\n+            if (emf != null) {\n+                try {\n+                    emf.close();\n+                } catch (Throwable t) {\n+                    // Swallow Exception\n+                }\n+            }\n+        }\n+    }\n+    \n+    public void testCreateEMFWithBadJarFileElement() {\n+        EntityManagerFactory emf = null;\n+        try {\n+            // Create EMF, expecting no problems.\n+            emf = createEmf(\"PUTest-Good\");\n+        } finally {\n+            if (emf != null) {\n+                try {\n+                    emf.close();\n+                } catch (Throwable t) {\n+                    // Swallow Exception\n+                }\n+            }\n+        }\n+    }\n+\n+    public void testCreateEMFWithNonOpenJPAProvider() {\n+        EntityManagerFactory emf = null;\n+        try {\n+            emf = createEmf(\"PUTest-NonOpenJPAProvider\");\n+\n+            // Did not catch the expected MissingResourceException Exception\n+            fail(\"The createEntityManager() operation did not throw any Exception.\");\n+        } catch (java.util.MissingResourceException mre) {\n+            // Caught the expected PersistenceException\n+        } finally {\n+            if (emf != null) {\n+                try {\n+                    emf.close();\n+                } catch (Throwable t) {\n+                    // Swallow Exception\n+                }\n+            }\n+        }\n+    }\n+\n+    public void testCreateEMFWithBadJarFileElementAndNonOpenJPAProvider() {\n+        EntityManagerFactory emf = null;\n+        try {\n+            emf = createEmf(\"PUTest-BadJarFile-NonOpenJPAProvider\");\n+\n+            // Did not catch the expected MissingResourceException Exception\n+            fail(\"The createEntityManager() operation did not throw any Exception.\");\n+        } catch (java.util.MissingResourceException mre) {\n+            // Caught the expected PersistenceException\n+        } finally {\n+            if (emf != null) {\n+                try {\n+                    emf.close();\n+                } catch (Throwable t) {\n+                    // Swallow Exception\n+                }\n+            }\n+        }\n+    }\n+    \n+}"},{"sha":"3d7c33463db01db5d783083d9f6d807204a28ff5","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/puconf/META-INF/persistence.xml","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/3de119f57a62ecdb6886cde2476232f7f12d4f86/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/puconf/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/3de119f57a62ecdb6886cde2476232f7f12d4f86/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/puconf/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/puconf/META-INF/persistence.xml?ref=3de119f57a62ecdb6886cde2476232f7f12d4f86","patch":"@@ -0,0 +1,51 @@\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" \n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n+             xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+                                 http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\n+    \n+    <persistence-unit name=\"PUTest-Good\" transaction-type=\"RESOURCE_LOCAL\">\n+        <class>org.apache.openjpa.persistence.common.apps.Address</class>\n+        <class>org.apache.openjpa.persistence.common.apps.CompUser</class>\n+    </persistence-unit>\n+    \n+    <persistence-unit name=\"PUTest-BadJarFile\" transaction-type=\"RESOURCE_LOCAL\">\n+        <provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+        <jar-file>IDoNotExist.jar</jar-file>\n+        \n+        <class>org.apache.openjpa.persistence.common.apps.Address</class>\n+        <class>org.apache.openjpa.persistence.common.apps.CompUser</class>\n+    </persistence-unit>\n+    \n+    <persistence-unit name=\"PUTest-NonOpenJPAProvider\" transaction-type=\"RESOURCE_LOCAL\">\n+        <provider>a.bogus.provider</provider>\n+        \n+        <class>org.apache.openjpa.persistence.common.apps.Address</class>\n+        <class>org.apache.openjpa.persistence.common.apps.CompUser</class>\n+    </persistence-unit>\n+    \n+    <persistence-unit name=\"PUTest-BadJarFile-NonOpenJPAProvider\" transaction-type=\"RESOURCE_LOCAL\">\n+        <provider>a.bogus.provider</provider>\n+        <jar-file>IDoNotExist.jar</jar-file>\n+        \n+        <class>org.apache.openjpa.persistence.common.apps.Address</class>\n+        <class>org.apache.openjpa.persistence.common.apps.CompUser</class>\n+    </persistence-unit>\n+</persistence>"},{"sha":"a625e4ee9628595c23b8f0fec53484016aacd506","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/3de119f57a62ecdb6886cde2476232f7f12d4f86/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/3de119f57a62ecdb6886cde2476232f7f12d4f86/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java?ref=3de119f57a62ecdb6886cde2476232f7f12d4f86","patch":"@@ -537,6 +537,10 @@ private Boolean load(ConfigurationProviderImpl cp, String rsrc,\n                 rsrc, name, pinfo.getPersistenceProviderClassName()).\n                 getMessage(), getClass().getName(), rsrc);\n         }\n+\n+        // Process jar-file references after confirming OpenJPA is the desired JPA provider.\n+        pinfo.processJarFileNames();\n+\n         cp.addProperties(pinfo.toOpenJPAProperties());\n         cp.setSource(pinfo.getPersistenceXmlFileUrl().toString());\n         return Boolean.TRUE;"},{"sha":"91f7ce05e9cf9e7f281210dae6b5bf10f9e5014b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/3de119f57a62ecdb6886cde2476232f7f12d4f86/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3de119f57a62ecdb6886cde2476232f7f12d4f86/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java?ref=3de119f57a62ecdb6886cde2476232f7f12d4f86","patch":"@@ -74,6 +74,7 @@\n     private List<String> _mappingFileNames;\n     private List<String> _entityClassNames;\n     private List<URL> _jarFiles;\n+    private List<String> _jarFileNames;\n     private String _jtaDataSourceName;\n     private DataSource _jtaDataSource;\n     private String _nonJtaDataSourceName;\n@@ -212,6 +213,30 @@ public void addJarFile(URL jar) {\n     }\n \n     public void addJarFileName(String name) {\n+        // Defer searching the classpath for jar files referenced by the jar-file element until after\n+        // the XML has been parsed and it has been confirmed that OpenJPA is the desired JPA provider.\n+\n+        if (_jarFileNames == null) {\n+            _jarFileNames = new ArrayList<String>();\n+        }\n+        _jarFileNames.add(name);\n+    }\n+\n+    /**\n+     * Process jar-file elements. An IllegalArgumentException may be thrown if the jar file does not exist in the\n+     * classpath.\n+     */\n+    public void processJarFileNames() {\n+        if (_jarFileNames != null) {\n+            for (String name : _jarFileNames) {\n+                validateJarFileName(name);\n+            }\n+\n+            _jarFileNames.clear();\n+        }\n+    }\n+    \n+    public void validateJarFileName(String name) {\n         MultiClassLoader loader = AccessController\n             .doPrivileged(J2DoPrivHelper.newMultiClassLoaderAction());\n         loader.addClassLoader(getClass().getClassLoader());"}]}

