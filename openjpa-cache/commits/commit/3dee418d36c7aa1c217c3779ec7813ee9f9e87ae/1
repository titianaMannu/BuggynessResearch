{"sha":"3dee418d36c7aa1c217c3779ec7813ee9f9e87ae","node_id":"MDY6Q29tbWl0MjA2MzY0OjNkZWU0MThkMzZjN2FhMWMyMTdjMzc3OWVjNzgxM2VlOWY5ZTg3YWU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-23T07:57:31Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-23T07:57:31Z"},"message":"OPENJPA-1444: Use special result list for distinct query. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@893420 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"eb4e3c04841594ea49a755be1437c2b803442cf3","url":"https://api.github.com/repos/apache/openjpa/git/trees/eb4e3c04841594ea49a755be1437c2b803442cf3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae","html_url":"https://github.com/apache/openjpa/commit/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae/comments","author":null,"committer":null,"parents":[{"sha":"91d46a845324e03aeeea27b819dda5386846e013","url":"https://api.github.com/repos/apache/openjpa/commits/91d46a845324e03aeeea27b819dda5386846e013","html_url":"https://github.com/apache/openjpa/commit/91d46a845324e03aeeea27b819dda5386846e013"}],"stats":{"total":426,"additions":418,"deletions":8},"files":[{"sha":"ed4467edb2037bab3cb15dbfceb5c4368ee5216f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingQuery.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingQuery.java","raw_url":"https://github.com/apache/openjpa/raw/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingQuery.java?ref=3dee418d36c7aa1c217c3779ec7813ee9f9e87ae","patch":"@@ -334,6 +334,23 @@ public void setUnique(boolean unique) {\n             throw translate(re);\n         }\n     }\n+    \n+    public boolean isDistinct() {\n+        try {\n+            return _query.isDistinct();\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public void setDistinct(boolean distinct) {\n+        try {\n+            _query.setDistinct(distinct);\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n \n     public Class getResultType() {\n         try {"},{"sha":"3187348356f57f1bfe2832961d11ea45c49b85f4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DistinctResultList.java","status":"added","additions":207,"deletions":0,"changes":207,"blob_url":"https://github.com/apache/openjpa/blob/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DistinctResultList.java","raw_url":"https://github.com/apache/openjpa/raw/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DistinctResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DistinctResultList.java?ref=3dee418d36c7aa1c217c3779ec7813ee9f9e87ae","patch":"@@ -0,0 +1,207 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.kernel;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+import org.apache.openjpa.lib.rop.ResultList;\n+import org.apache.openjpa.util.RuntimeExceptionTranslator;\n+\n+/**\n+ * An immutable list that imposes uniqueness on its member. This implementation\n+ * traverses the entire result list on construction. So it is not suitable or\n+ * efficient for large results. All mutation operations (except clear()) throw\n+ * {@link UnsupportedOperationException}.\n+ * \n+ * @author Pinaki Poddar\n+ * @since 2.0.0\n+ * \n+ * @param <E>\n+ *            element type\n+ */\n+public class DistinctResultList<E> implements List<E> {\n+    private final ArrayList<E> _del;\n+    private final RuntimeExceptionTranslator _trans;\n+\n+    public DistinctResultList(ResultList<E> list, RuntimeExceptionTranslator trans) {\n+        _del = new ArrayList<E>();\n+        _trans = trans;\n+        for (E e : list) {\n+            if (!_del.contains(e))\n+                _del.add(e);\n+        }\n+    }\n+\n+    public boolean add(E o) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public void add(int index, E element) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean addAll(Collection<? extends E> c) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean addAll(int index, Collection<? extends E> c) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public void clear() {\n+        try {\n+            _del.clear();\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public boolean contains(Object o) {\n+        try {\n+            return _del.contains(o);\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public boolean containsAll(Collection<?> c) {\n+        try {\n+            return _del.containsAll(c);\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public E get(int index) {\n+        try {\n+            return _del.get(index);\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public int indexOf(Object o) {\n+        try {\n+            return _del.indexOf(o);\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public boolean isEmpty() {\n+        try {\n+            return _del.isEmpty();\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public Iterator<E> iterator() {\n+        try {\n+            return _del.iterator();\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public int lastIndexOf(Object o) {\n+        try {\n+            return _del.indexOf(o);\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public ListIterator<E> listIterator() {\n+        try {\n+            return _del.listIterator();\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public ListIterator<E> listIterator(int index) {\n+        try {\n+            return _del.listIterator(index);\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public boolean remove(Object o) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public E remove(int index) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean removeAll(Collection<?> c) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean retainAll(Collection<?> c) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public E set(int index, E element) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public int size() {\n+        try {\n+            return _del.size();\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public List<E> subList(int fromIndex, int toIndex) {\n+        try {\n+            return _del.subList(fromIndex, toIndex);\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public Object[] toArray() {\n+        try {\n+            return _del.toArray();\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public <T> T[] toArray(T[] a) {\n+        try {\n+            return _del.toArray(a);\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    protected RuntimeException translate(RuntimeException re) {\n+        return (_trans == null) ? re : _trans.translate(re);\n+    }\n+\n+}"},{"sha":"050d0119917c54d4e9839ea60735911e60deca2f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java","raw_url":"https://github.com/apache/openjpa/raw/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java?ref=3dee418d36c7aa1c217c3779ec7813ee9f9e87ae","patch":"@@ -118,6 +118,21 @@\n      * @since 0.3.0\n      */\n     public void setUnique(boolean unique);\n+    \n+    /**\n+     * Affirms if this query results are distinct instance(s).\n+     * \n+     * @since 2.0.0\n+     */\n+    public boolean isDistinct();\n+\n+    /**\n+     * Specify that the query will return distinct instances.\n+     *\n+     * @since 2.0.0\n+     */\n+    public void setDistinct(boolean distinct);\n+\n \n     /**\n      * Scope of a mapping from the result data to its object representation."},{"sha":"d86612a8eb1ff27565007c552770e31296d94369","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=3dee418d36c7aa1c217c3779ec7813ee9f9e87ae","patch":"@@ -119,6 +119,7 @@\n     // these fields should only be used directly after we have a compilation,\n     // because their values may be encoded in the query string\n     private Boolean _unique = null;\n+    private boolean _distinct = false;\n     private Class<?> _resultClass = null;\n     private transient long _startIdx = 0;\n     private transient long _endIdx = Long.MAX_VALUE;\n@@ -470,6 +471,27 @@ public boolean isUnique() {\n         }\n     }\n     \n+    /**\n+     * Sets this query to return distinct result.\n+     */\n+    public void setDistinct(boolean flag) {\n+        lock();\n+        try {\n+            assertOpen();\n+            // allowed modification: no read-only check\n+            _distinct = flag;\n+        } finally {\n+            unlock();\n+        }\n+    }\n+    \n+    /**\n+     * Affirms if this query will return distinct elements.\n+     */\n+    public boolean isDistinct() {\n+        return _distinct;\n+    }\n+    \n     /**\n      * Affirms if this query has originated by parsing a string-based query.\n      */\n@@ -1360,6 +1382,8 @@ public static boolean isAccessPathDirty(Broker broker,\n         // compare dirty classes to the access path classes\n         Class accClass;\n         for (int i = 0; i < accessMetas.length; i++) {\n+            if (accessMetas[i] == null)\n+                continue;\n             // shortcut if actual class is dirty\n             accClass = accessMetas[i].getDescribedType();\n             if (persisted.contains(accClass) || updated.contains(accClass)"},{"sha":"8921d5d5da3f1af8fbeb3c4400e9739268d9abe4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/AbstractCriteriaTestCase.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/AbstractCriteriaTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/AbstractCriteriaTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/AbstractCriteriaTestCase.java?ref=3dee418d36c7aa1c217c3779ec7813ee9f9e87ae","patch":"@@ -182,7 +182,9 @@ void executeAndCompareSQL(String jpql, Query cQ, Query jQ, String expectedSQL) {\n             if (!jSQL.get(i).equalsIgnoreCase(cSQL.get(i))) {\n                 printSQL(\"Target SQL for JPQL\", jSQL);\n                 printSQL(\"Target SQL for CriteriaQuery\", cSQL);\n-                assertTrue(i + \"-th SQL for JPQL and CriteriaQuery for \" + jpql + \" is different\", \n+                assertTrue(i + \"-th SQL for JPQL and CriteriaQuery for \" + jpql + \" is different\\r\\n\" +\n+                        \"JPQL = [\" + jSQL.get(i) + \"]\\r\\n\" +\n+                        \"CSQL = [\" + cSQL.get(i) + \"]\\r\\n\",\n                         jSQL.get(i).equalsIgnoreCase(cSQL.get(i)));\n             }\n         }"},{"sha":"b9f991d1ea97f5e5a8a4647ea528ec66cd49c79e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestDistinctCriteria.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/apache/openjpa/blob/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestDistinctCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestDistinctCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestDistinctCriteria.java?ref=3dee418d36c7aa1c217c3779ec7813ee9f9e87ae","patch":"@@ -0,0 +1,91 @@\n+package org.apache.openjpa.persistence.criteria;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.persistence.TypedQuery;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.Fetch;\n+import javax.persistence.criteria.JoinType;\n+import javax.persistence.criteria.Root;\n+\n+public class TestDistinctCriteria extends CriteriaTest {\n+    @Override\n+    public void setUp()  {\n+        super.setUp();\n+        try {\n+            deleteDataForTestDistinct();\n+            createDataForTestDistinct();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    \n+    public void tearDown() throws Exception {\n+        try {\n+            deleteDataForTestDistinct();\n+        } catch (Exception e) {\n+            \n+        }\n+        super.tearDown();\n+    }\n+    \n+    void createDataForTestDistinct() {\n+        em.getTransaction().begin();\n+        \n+        Address a1 = new Address(); a1.setState(\"NY\");\n+        Address a2 = new Address(); a2.setState(\"RI\");\n+        \n+        Customer c1 = new Customer(); c1.setAddress(a1);\n+        Customer c2 = new Customer(); c2.setAddress(a2);\n+        \n+        Order o1 = new Order(); o1.setCustomer(c1); \n+        Order o2 = new Order(); o2.setCustomer(c1); \n+        Order o3 = new Order(); o3.setCustomer(c2); \n+        \n+        Set<Order> orders = new HashSet<Order>();\n+        orders.add(o1); orders.add(o2);\n+        c1.setOrders(orders);\n+        orders.clear();\n+        orders.add(o3);\n+        c2.setOrders(orders);\n+        \n+        em.persist(c1);\n+        em.persist(c2);\n+        em.persist(a1);\n+        em.persist(a2);\n+        em.persist(o1);\n+        em.persist(o2);\n+        em.persist(o3);\n+        \n+        em.getTransaction().commit();\n+    }\n+    \n+    void deleteDataForTestDistinct() {\n+        em.getTransaction().begin();\n+        em.createQuery(\"delete from Customer o\").executeUpdate();\n+        em.createQuery(\"delete from Address o\").executeUpdate();\n+        em.createQuery(\"delete from Order o\").executeUpdate();\n+        em.getTransaction().commit();\n+    }\n+        \n+\n+    public void testDistinct() {\n+        CriteriaQuery<Customer> cq = cb.createQuery(Customer.class);\n+        Root<Customer> customer = cq.from(Customer.class);\n+        Fetch<Customer, Order> o = customer.fetch(\"orders\", JoinType.LEFT);\n+        cq.where(customer.get(\"address\").get(\"state\").in(\"NY\", \"RI\"));\n+        cq.select(customer).distinct(true);\n+        TypedQuery<Customer> distinctQuery = em.createQuery(cq);\n+        distinctQuery.setMaxResults(20);\n+        List<Customer> distinctResult = distinctQuery.getResultList();  \n+        assertEquals(2, distinctResult.size());\n+        \n+        cq.distinct(false);\n+        TypedQuery<Customer> indistinctQuery = em.createQuery(cq);\n+        indistinctQuery.setMaxResults(20);\n+        List<Customer> indistinctResult = indistinctQuery.getResultList();  \n+        assertEquals(3, indistinctResult.size());\n+    }\n+}"},{"sha":"9387201d45bec944ea20163b6dd030adf8dc26d8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","status":"modified","additions":29,"deletions":1,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java?ref=3dee418d36c7aa1c217c3779ec7813ee9f9e87ae","patch":"@@ -21,15 +21,18 @@\n import java.math.BigDecimal;\n import java.sql.Time;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n \n-import javax.persistence.EntityManager;\n import javax.persistence.Parameter;\n import javax.persistence.Query;\n import javax.persistence.Tuple;\n import javax.persistence.TypedQuery;\n+import javax.persistence.criteria.CriteriaBuilder;\n import javax.persistence.criteria.CriteriaQuery;\n import javax.persistence.criteria.Expression;\n import javax.persistence.criteria.Fetch;\n@@ -1503,4 +1506,29 @@ public void testLiteralInProjection() {\n         cq.where(cb.equal(c.get(Customer_.id), 10));\n         assertEquivalence(cq, jpql);\n     }\n+    \n+    public void testBigDecimalConversion() {\n+        String jpql = \"select c.accountNum*10.32597 from Customer c where c.id=10\";\n+        \n+        long accountNumber = 1234516279;\n+        em.getTransaction().begin();\n+        Customer customer = new Customer();\n+        customer.setAccountNum(accountNumber);\n+        em.persist(customer);\n+        em.getTransaction().commit();\n+        \n+        long cid = customer.getId();\n+        \n+        CriteriaQuery<BigDecimal> cq = cb.createQuery(BigDecimal.class);\n+        Root<Customer> c = cq.from(Customer.class);\n+        cq.select(cb.toBigDecimal(cb.prod(c.get(Customer_.accountNum), new BigDecimal(10.32597))));\n+        cq.where(cb.equal(c.get(Customer_.id), cid));\n+        //assertEquivalence(cq, jpql);\n+        \n+        List<BigDecimal> result = em.createQuery(cq).getResultList();\n+        assertFalse(result.isEmpty());\n+        assertTrue(result.get(0) instanceof BigDecimal);\n+    }\n+    \n+   \n }"},{"sha":"b4e59b50ad09f031353ef16288e1d72474383dc2","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=3dee418d36c7aa1c217c3779ec7813ee9f9e87ae","patch":"@@ -1544,6 +1544,8 @@ public void detach(Object entity) {\n         ((OpenJPACriteriaQuery<T>)criteriaQuery).compile(); \n         \n         org.apache.openjpa.kernel.Query kernelQuery =_broker.newQuery(CriteriaBuilderImpl.LANG_CRITERIA, criteriaQuery);\n+        kernelQuery.setDistinct(((OpenJPACriteriaQuery<T>)criteriaQuery).isDistinct());\n+        \n         QueryImpl<T> facadeQuery = new QueryImpl<T>(this, _ret, kernelQuery);\n         Set<ParameterExpression<?>> params = criteriaQuery.getParameters();\n         "},{"sha":"840d9b7e950fa3f669e0e2167f8988ec133844b3","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":11,"deletions":4,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=3dee418d36c7aa1c217c3779ec7813ee9f9e87ae","patch":"@@ -56,6 +56,7 @@\n import org.apache.openjpa.kernel.QueryLanguages;\n import org.apache.openjpa.kernel.QueryOperations;\n import org.apache.openjpa.kernel.QueryStatistics;\n+import org.apache.openjpa.kernel.DistinctResultList;\n import org.apache.openjpa.kernel.exps.AggregateListener;\n import org.apache.openjpa.kernel.exps.FilterListener;\n import org.apache.openjpa.kernel.jpql.JPQLParser;\n@@ -68,6 +69,7 @@\n import org.apache.openjpa.util.RuntimeExceptionTranslator;\n import org.apache.openjpa.util.UserException;\n \n+\n /**\n  * Implementation of {@link Query} interface.\n  * \n@@ -300,11 +302,16 @@ public List getResultList() {\n \t\tObject ob = execute();\n \t\tif (ob instanceof List) {\n \t\t\tList ret = (List) ob;\n-\t\t\tif (ret instanceof ResultList)\n-                return new DelegatingResultList((ResultList) ret,\n-                        PersistenceExceptions.getRollbackTranslator(_em));\n-\t\t\telse\n+\t\t\tif (ret instanceof ResultList) {\n+\t\t\t    RuntimeExceptionTranslator trans = PersistenceExceptions.getRollbackTranslator(_em);\n+\t\t\t    if (_query.isDistinct()) {\n+\t\t\t        return new DistinctResultList((ResultList) ret, trans);\n+\t\t\t    } else {\n+\t\t\t        return new DelegatingResultList((ResultList) ret, trans);\n+\t\t\t    }\n+\t\t\t} else {\n \t\t\t\treturn ret;\n+\t\t\t}\n \t\t}\n \n \t\treturn Collections.singletonList(ob);"},{"sha":"47a1be14850e38ad02f70ce5840bcf2a462c540b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java?ref=3dee418d36c7aa1c217c3779ec7813ee9f9e87ae","patch":"@@ -168,8 +168,12 @@ protected void evalGrouping(QueryExpressions exps, ExpressionFactory factory, Cr\n     }\n \n     protected void evalDistinct(QueryExpressions exps, ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n-        exps.distinct = q.isDistinct() ? QueryExpressions.DISTINCT_TRUE | QueryExpressions.DISTINCT_AUTO\n+        if (q.hasFetchJoins()) {\n+            exps.distinct = QueryExpressions.DISTINCT_FALSE;\n+        } else {\n+            exps.distinct = q.isDistinct() ? QueryExpressions.DISTINCT_TRUE | QueryExpressions.DISTINCT_AUTO\n                 : QueryExpressions.DISTINCT_FALSE;\n+        }\n      }\n \n     protected void evalCrossJoinRoots(QueryExpressions exps, ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n@@ -263,14 +267,16 @@ private void getProjections(QueryExpressions exps, List<Selection<?>> selections\n             selections = new ArrayList<Selection<?>>(1);\n             selections.add(r);\n         }\n-        \n+        boolean usingFetchJoin = q.hasFetchJoins();\n         for (Selection<?> s : selections) {\n             if (s.isCompoundSelection()) {\n                 getProjections(exps, s.getCompoundSelectionItems(), projections, aliases, \n                     clauses, factory, q, featureSelection, exp2Vals);\n             } else {\n                 Value val = (exp2Vals != null && exp2Vals.containsKey(s) \n                         ? exp2Vals.get(s) : ((ExpressionImpl<?>)s).toValue(factory, q));\n+                if (q.isDistinct() && usingFetchJoin)\n+                    val = factory.distinct(val);\n                 String alias = s.getAlias();\n                 val.setAlias(alias);\n                 projections.add(val);"},{"sha":"421c8c8ee8b3729b68993b5cc71770cb21e35843","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3dee418d36c7aa1c217c3779ec7813ee9f9e87ae/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java?ref=3dee418d36c7aa1c217c3779ec7813ee9f9e87ae","patch":"@@ -648,6 +648,17 @@ private void collectParameters(CriteriaExpressionVisitor visitor) {\n             }\n         }\n     }\n+    \n+    boolean hasFetchJoins() {\n+        Set<Root<?>> roots = getRoots();\n+        if (roots == null || roots.isEmpty())\n+            return false;\n+        for (Root<?> root : roots) {\n+            if (!root.getFetches().isEmpty())\n+                return true;\n+        }\n+        return false;\n+    }\n \n     /**\n      * Gets the string representation of the query."}]}

