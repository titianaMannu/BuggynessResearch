{"sha":"3edddc612523ccb3e54a3fee8b9431d5cef45b3c","node_id":"MDY6Q29tbWl0MjA2MzY0OjNlZGRkYzYxMjUyM2NjYjNlNTRhM2ZlZThiOTQzMWQ1Y2VmNDViM2M=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-01-17T02:00:56Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-01-17T02:00:56Z"},"message":"improved trace messages\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@496914 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b1cb93fa300d0b79f46bf1159a596fe06fb2f193","url":"https://api.github.com/repos/apache/openjpa/git/trees/b1cb93fa300d0b79f46bf1159a596fe06fb2f193"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3edddc612523ccb3e54a3fee8b9431d5cef45b3c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3edddc612523ccb3e54a3fee8b9431d5cef45b3c","html_url":"https://github.com/apache/openjpa/commit/3edddc612523ccb3e54a3fee8b9431d5cef45b3c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3edddc612523ccb3e54a3fee8b9431d5cef45b3c/comments","author":null,"committer":null,"parents":[{"sha":"97b23ebb90401a82d1d010f1286bb162ab74d4ac","url":"https://api.github.com/repos/apache/openjpa/commits/97b23ebb90401a82d1d010f1286bb162ab74d4ac","html_url":"https://github.com/apache/openjpa/commit/97b23ebb90401a82d1d010f1286bb162ab74d4ac"}],"stats":{"total":34,"additions":25,"deletions":9},"files":[{"sha":"1a2dc9b1833154259fe28c9d92b9bf4b4cb62935","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","status":"modified","additions":23,"deletions":9,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/3edddc612523ccb3e54a3fee8b9431d5cef45b3c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/3edddc612523ccb3e54a3fee8b9431d5cef45b3c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java?ref=3edddc612523ccb3e54a3fee8b9431d5cef45b3c","patch":"@@ -578,7 +578,7 @@ public Set getPersistentTypeNames(boolean devpath, ClassLoader envLoader) {\n             Set names = parsePersistentTypeNames(loader);\n             if (names.isEmpty() && devpath)\n                 scan(new ClasspathMetaDataIterator(null, newMetaDataFilter()),\n-                    newClassArgParser(), names, false);\n+                    newClassArgParser(), names, false, null);\n             else // we don't cache a full dev cp scan\n                 _typeNames = names;\n \n@@ -607,17 +607,19 @@ private Set parsePersistentTypeNames(ClassLoader loader)\n                     if (log.isTraceEnabled())\n                         log.trace(_loc.get(\"scanning-directory\", file));\n                     scan(new FileMetaDataIterator(dir, newMetaDataFilter()),\n-                        cparser, names, true);\n+                        cparser, names, true, file);\n                 } else if (file.getName().endsWith(\".jar\")) {\n                     if (log.isTraceEnabled())\n                         log.trace(_loc.get(\"scanning-jar\", file));\n                     scan(new ZipFileMetaDataIterator(new ZipFile(file),\n-                        newMetaDataFilter()), cparser, names, true);\n+                        newMetaDataFilter()), cparser, names, true, file);\n                 } else {\n                     if (log.isTraceEnabled())\n                         log.trace(_loc.get(\"scanning-file\", file));\n                     clss = cparser.parseTypeNames(new FileMetaDataIterator\n                         (file));\n+                    if (log.isTraceEnabled())\n+                        log.trace(_loc.get(\"scan-found-names\", clss, file));\n                     names.addAll(Arrays.asList(clss));\n                     mapPersistentTypeNames(file.getAbsoluteFile().toURL(),\n                         clss);\n@@ -633,17 +635,19 @@ private Set parsePersistentTypeNames(ClassLoader loader)\n                     if (log.isTraceEnabled())\n                         log.trace(_loc.get(\"scanning-jar-url\", url));\n                     scan(new ZipFileMetaDataIterator(url,\n-                        newMetaDataFilter()), cparser, names, true);\n+                        newMetaDataFilter()), cparser, names, true, url);\n                 } else if (url.getPath().endsWith(\".jar\")) {\n                     if (log.isTraceEnabled())\n                         log.trace(_loc.get(\"scanning-jar-at-url\", url));\n                     scan(new ZipStreamMetaDataIterator(\n                         new ZipInputStream(url.openStream()),\n-                        newMetaDataFilter()), cparser, names, true);\n+                        newMetaDataFilter()), cparser, names, true, url);\n                 } else {\n                     if (log.isTraceEnabled())\n                         log.trace(_loc.get(\"scanning-url\", url));\n                     clss = cparser.parseTypeNames(new URLMetaDataIterator(url));\n+                    if (log.isTraceEnabled())\n+                        log.trace(_loc.get(\"scan-found-names\", clss, url));\n                     names.addAll(Arrays.asList(clss));\n                     mapPersistentTypeNames(url, clss);\n                 }\n@@ -661,7 +665,8 @@ private Set parsePersistentTypeNames(ClassLoader loader)\n                             log.trace(_loc.get(\"scanning-jar-stream-url\", url));\n                         scan(new ZipStreamMetaDataIterator\n                             (new ZipInputStream(url.openStream()),\n-                                newMetaDataFilter()), cparser, names, true);\n+                                newMetaDataFilter()), cparser, names, true, \n+                                url);\n                     }\n                 } else {\n                     if (log.isTraceEnabled())\n@@ -671,6 +676,8 @@ private Set parsePersistentTypeNames(ClassLoader loader)\n                         url = (URL) mitr.next();\n                         clss = cparser.parseTypeNames(new URLMetaDataIterator\n                             (url));\n+                        if (log.isTraceEnabled())\n+                            log.trace(_loc.get(\"scan-found-names\", clss, rsrc));\n                         names.addAll(Arrays.asList(clss));\n                         mapPersistentTypeNames(url, clss);\n                     }\n@@ -681,18 +688,22 @@ private Set parsePersistentTypeNames(ClassLoader loader)\n         if (cpath != null) {\n             String[] dirs = (String[]) cpath.toArray(new String[cpath.size()]);\n             scan(new ClasspathMetaDataIterator(dirs, newMetaDataFilter()),\n-                cparser, names, true);\n+                cparser, names, true, dirs);\n         }\n         if (types != null)\n             names.addAll(types);\n+        \n+        if (log.isTraceEnabled())\n+            log.trace(_loc.get(\"parse-found-names\", names));\n+        \n         return names;\n     }\n \n     /**\n      * Scan for persistent type names using the given metadata iterator.\n      */\n     private void scan(MetaDataIterator mitr, ClassArgParser cparser, Set names,\n-        boolean mapNames)\n+        boolean mapNames, Object debugContext)\n         throws IOException {\n         Map map;\n         try {\n@@ -707,7 +718,10 @@ private void scan(MetaDataIterator mitr, ClassArgParser cparser, Set names,\n             if (mapNames)\n                 mapPersistentTypeNames(entry.getKey(), (String[])\n                     entry.getValue());\n-            names.addAll(Arrays.asList((String[]) entry.getValue()));\n+            List newNames = Arrays.asList((String[]) entry.getValue());\n+            if (log.isTraceEnabled())\n+                log.trace(_loc.get(\"scan-found-names\", newNames, debugContext));\n+            names.addAll(newNames);\n         }\n     }\n "},{"sha":"a347c6ca528b0d0a431512e60fbc88c1e0d260fb","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3edddc612523ccb3e54a3fee8b9431d5cef45b3c/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/3edddc612523ccb3e54a3fee8b9431d5cef45b3c/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties?ref=3edddc612523ccb3e54a3fee8b9431d5cef45b3c","patch":"@@ -290,3 +290,5 @@ scanning-url: Scanning URL \"{0}\" for persistent types.\n scanning-zip-stream-url: Scanning jar in stream from URL \"{0}\" for persistent \\\n \ttypes.\n scanning-resource: Scanning resource \"{0}\" for persistent types.\n+scan-found-names: Scan of \"{1}\" found persistent types {0}.\n+parse-found-names: parsePersistentTypeNames() found {0}."}]}

