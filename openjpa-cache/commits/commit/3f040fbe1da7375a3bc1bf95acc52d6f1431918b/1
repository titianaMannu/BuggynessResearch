{"sha":"3f040fbe1da7375a3bc1bf95acc52d6f1431918b","node_id":"MDY6Q29tbWl0MjA2MzY0OjNmMDQwZmJlMWRhNzM3NWEzYmMxYmY5NWFjYzUyZDZmMTQzMTkxOGI=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2015-07-08T19:54:53Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2015-07-08T19:54:53Z"},"message":"OPENJPA-2600 add cast which is needed for Java8\n\nJava8 fails do properly coerc the method calls if we don't 'hint'\nit to the right ParameterizedType.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1689951 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"21f89253eb886e2f80cc9ed48e2d7e371491ec6f","url":"https://api.github.com/repos/apache/openjpa/git/trees/21f89253eb886e2f80cc9ed48e2d7e371491ec6f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3f040fbe1da7375a3bc1bf95acc52d6f1431918b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3f040fbe1da7375a3bc1bf95acc52d6f1431918b","html_url":"https://github.com/apache/openjpa/commit/3f040fbe1da7375a3bc1bf95acc52d6f1431918b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3f040fbe1da7375a3bc1bf95acc52d6f1431918b/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"82e145860457bc6d2870c03f974582737252636c","url":"https://api.github.com/repos/apache/openjpa/commits/82e145860457bc6d2870c03f974582737252636c","html_url":"https://github.com/apache/openjpa/commit/82e145860457bc6d2870c03f974582737252636c"}],"stats":{"total":11,"additions":6,"deletions":5},"files":[{"sha":"5c367e36987c6009bf3a23ca5f49492f0211abe0","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3f040fbe1da7375a3bc1bf95acc52d6f1431918b/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/3f040fbe1da7375a3bc1bf95acc52d6f1431918b/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java?ref=3f040fbe1da7375a3bc1bf95acc52d6f1431918b","patch":"@@ -1579,7 +1579,7 @@ protected void parseColumns(FieldMapping fm,\n                 && StringUtils.isEmpty(pcols[i].columnDefinition())\n                 && (AccessController.doPrivileged(J2DoPrivHelper\n                     .isAnnotationPresentAction(fm.getDeclaredType(),\n-                        xmlRootElementClass))).booleanValue()) {\n+                        (Class<? extends Annotation>) xmlRootElementClass))).booleanValue()) {\n                 DBDictionary dict = ((MappingRepository) getRepository())\n                     .getDBDictionary();\n                 if (dict.supportsXMLColumn)"},{"sha":"ae2cba2cf5429c7835cdd1b178dcb4cec7040f37","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/3f040fbe1da7375a3bc1bf95acc52d6f1431918b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/3f040fbe1da7375a3bc1bf95acc52d6f1431918b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java?ref=3f040fbe1da7375a3bc1bf95acc52d6f1431918b","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.persistence;\n \n+import java.lang.annotation.Annotation;\n import java.lang.reflect.AnnotatedElement;\n import java.lang.reflect.Field;\n import java.lang.reflect.Member;\n@@ -159,10 +160,10 @@ private XMLMetaData parseXMLClassAnnotations(Class<?> cls) {\n         // check immediately whether the class has JAXB XML annotations\n         if (cls == null || xmlTypeClass == null\n             || !((AccessController.doPrivileged(J2DoPrivHelper\n-                .isAnnotationPresentAction(cls, xmlTypeClass))).booleanValue()\n+                .isAnnotationPresentAction(cls, (Class<? extends Annotation>) xmlTypeClass))).booleanValue()\n                 && (AccessController\n                 .doPrivileged(J2DoPrivHelper.isAnnotationPresentAction(cls,\n-                    xmlRootElementClass))).booleanValue()))\n+                        (Class<? extends Annotation>) xmlRootElementClass))).booleanValue()))\n             return null;\n \n         // find / create metadata\n@@ -211,7 +212,7 @@ private void populateFromReflection(Class cls, XMLMetaData meta) {\n \n         // handle inheritance at sub-element level\n         if ((AccessController.doPrivileged(J2DoPrivHelper\n-            .isAnnotationPresentAction(superclass, xmlTypeClass)))\n+            .isAnnotationPresentAction(superclass, (Class<? extends Annotation>) xmlTypeClass)))\n             .booleanValue())\n             populateFromReflection(superclass, meta);\n \n@@ -234,7 +235,7 @@ private void populateFromReflection(Class cls, XMLMetaData meta) {\n                         xmlname = member.getName();\n                     if ((AccessController.doPrivileged(J2DoPrivHelper\n                         .isAnnotationPresentAction(((Field) member).getType(),\n-                            xmlTypeClass))).booleanValue()) {\n+                                (Class<? extends Annotation>) xmlTypeClass))).booleanValue()) {\n                         field = _repos.addXMLClassMetaData(((Field) member).getType());\n                         parseXmlRootElement(((Field) member).getType(), field);\n                         populateFromReflection(((Field) member).getType()"}]}

