{"sha":"3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1","node_id":"MDY6Q29tbWl0MjA2MzY0OjNmNDNlM2RkMGUyYzE3YjAwZTQ2N2RkMjg0MWI4YTljM2JiMGM4ZjE=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-09-18T18:38:00Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-09-18T18:38:00Z"},"message":"OPENJPA-1309 DB2 requires CAST for argument passed to datastore MOD function\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@816737 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0bf73645f4ec6f9666c3372296e6c712e1e5a80a","url":"https://api.github.com/repos/apache/openjpa/git/trees/0bf73645f4ec6f9666c3372296e6c712e1e5a80a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1","html_url":"https://github.com/apache/openjpa/commit/3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1/comments","author":null,"committer":null,"parents":[{"sha":"1c0b9849f185f3a5f14c4a42f4b55379af331219","url":"https://api.github.com/repos/apache/openjpa/commits/1c0b9849f185f3a5f14c4a42f4b55379af331219","html_url":"https://github.com/apache/openjpa/commit/1c0b9849f185f3a5f14c4a42f4b55379af331219"}],"stats":{"total":73,"additions":62,"deletions":11},"files":[{"sha":"9a0c6172b70d5a4ecbed3def88cf9b56744539d5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/DatastoreFunction.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/DatastoreFunction.java","raw_url":"https://github.com/apache/openjpa/raw/3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/DatastoreFunction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/DatastoreFunction.java?ref=3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.openjpa.jdbc.kernel.exps;\n \n+import org.apache.openjpa.jdbc.sql.SQLBuffer;\n+import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.exps.Arguments;\n \n /**\n@@ -41,4 +43,20 @@ protected String getOperator() {\n         return _functionName;\n     }\n \n+    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n+        SQLBuffer sql, int index) {\n+        Args args = (Args) getValue();\n+        if (!ctx.store.getDBDictionary().requiresCastForMathFunctions || args.getValues().length == 1)\n+            super.appendTo(sel, ctx, state, sql, index);\n+        else {\n+            sql.append(getOperator());\n+            sql.append(\"(\");            \n+            args.appendTo(sel, ctx, state, sql, 0);\n+            Val[] vals = args.getVals();\n+            for (int i = 1; i < vals.length; i++) {\n+                sql.addCastForParam(getOperator(), vals[i]);\n+            }\n+            sql.append(\")\");\n+        }            \n+    }\n }"},{"sha":"4f66cd355e30eb861da835e36711f4d1d51fc54f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EndsWithExpression.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EndsWithExpression.java","raw_url":"https://github.com/apache/openjpa/raw/3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EndsWithExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EndsWithExpression.java?ref=3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1","patch":"@@ -203,5 +203,9 @@ public PCPath getXPath() {\n         public XMLMetaData getXmlMapping() {\n             return null;\n         }\n+\n+        public boolean requiresCast() {\n+            return false;\n+        }\n     }\n }"},{"sha":"daf2c33acd2205f82b4cfac5ccbf1fef1814fcc7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValue.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValue.java","raw_url":"https://github.com/apache/openjpa/raw/3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValue.java?ref=3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1","patch":"@@ -116,4 +116,10 @@\n      * else return null;\n      */\n     public XMLMetaData getXmlMapping();\n+\n+    /**\n+     * return true if CAST is required for this filter value\n+     * else return false.\n+     */\n+    public boolean requiresCast();\n }"},{"sha":"6ca988d4dc0464f2fa952dcff45ad13e7c3624ff","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValueImpl.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValueImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValueImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValueImpl.java?ref=3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1","patch":"@@ -110,4 +110,8 @@ public PCPath getXPath() {\n     public XMLMetaData getXmlMapping() {\n         return (getXPath() == null) ? null : getXPath().getXmlMapping();\n     }\n+\n+    public boolean requiresCast() {\n+        return !(_val instanceof All || _val instanceof Any || _val instanceof PCPath);\n+    }\n }"},{"sha":"2b43ce58a33e154264feee0aa0ee0a76966ef7d8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java","raw_url":"https://github.com/apache/openjpa/raw/3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java?ref=3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1","patch":"@@ -194,6 +194,10 @@ public XMLMetaData getXmlMapping() {\n             return null;\n         }\n \n+        public boolean requiresCast() {\n+            return false;\n+        }\n+\n     }\n \n     /**\n@@ -278,5 +282,9 @@ public PCPath getXPath() {\n         public XMLMetaData getXmlMapping() {\n             return null;\n         }\n+\n+        public boolean requiresCast() {\n+            return false;\n+        }\n     }\n }"},{"sha":"7ff8d22d903f45d4a9146097f29a45932bbdf579","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1","patch":"@@ -2784,7 +2784,7 @@ public void mathFunction(SQLBuffer buf, String op, FilterValue lhs,\n         Class rc = Filters.wrap(rhs.getType());\n         int type = 0;\n         if (requiresCastForMathFunctions && (lc != rc\n-            || (lhs.isConstant() && rhs.isConstant()))) {\n+            || (lhs.isConstant() || rhs.isConstant()))) {\n             Class c = Filters.promote(lc, rc);\n             type = getJDBCType(JavaTypes.getTypeCode(c), false);\n             if (type != Types.VARBINARY && type != Types.BLOB) {\n@@ -2848,6 +2848,8 @@ public void comparison(SQLBuffer buf, String op, FilterValue lhs,\n             if (type != Types.VARBINARY && type != Types.BLOB) {\n                 castlhs = (lhs.isConstant() && rhs.isConstant()) || lc != c;\n                 castrhs = (lhs.isConstant() && rhs.isConstant()) || rc != c;\n+                castlhs = castlhs && lhs.requiresCast();\n+                castrhs = castrhs && rhs.requiresCast();\n             }\n         }\n "},{"sha":"9eb2a2b66a8025addc83b33eabc7a5c44585791c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","raw_url":"https://github.com/apache/openjpa/raw/3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java?ref=3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1","patch":"@@ -357,7 +357,8 @@ protected Object getObjectInternal(Object obj, int metaTypeCode,\n         if (metaTypeCode == -1 && obj instanceof Column)\n             metaTypeCode = ((Column) obj).getJavaType();\n \n-        boolean isClob = (obj instanceof Column) ? ((Column) obj).getType() == Types.CLOB : false;\n+        boolean isClob = (obj instanceof Column) ? ((Column) obj).getType() == Types.CLOB && !((Column) obj).isXML()\n+                : false;\n         obj = translate(obj, joins);\n         \n         Object val = null;"},{"sha":"4601886c24fa4899f5c3fba2b8d777c0e5d8f7d3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/AbstractCriteriaTestCase.java","status":"modified","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/AbstractCriteriaTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/AbstractCriteriaTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/AbstractCriteriaTestCase.java?ref=3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1","patch":"@@ -52,6 +52,10 @@\n     protected abstract EntityManager getEntityManager();\n     private DBDictionary dict = null;\n \n+    public DBDictionary getDictionary() {\n+        return dict;\n+    }\n+\n     /**\n      * Create an entity manager factory for persistence unit <code>pu</code>. Put {@link #CLEAR_TABLES} in this list to\n      * tell the test framework to delete all table contents before running the tests.\n@@ -86,8 +90,10 @@ protected OpenJPAEntityManagerFactorySPI createNamedEMF(Class<?>... types) {\n     void setDictionary() {\n         JDBCConfiguration conf = (JDBCConfiguration) getEntityManagerFactory().getConfiguration();\n         dict = conf.getDBDictionaryInstance();\n-        dict.requiresCastForComparisons = false;\n-        dict.requiresCastForMathFunctions = false;\n+        if (dict instanceof DerbyDictionary) {\n+            dict.requiresCastForComparisons = false;\n+            dict.requiresCastForMathFunctions = false;\n+        }\n     }\n \n     /**\n@@ -174,6 +180,9 @@ void executeAndCompareSQL(String jpql, Query cQ, Query jQ, String expectedSQL) {\n                 cSQL.size());\n         }\n \n+        if (!(dict instanceof DerbyDictionary))\n+            return;\n+\n         for (int i = 0; i < jSQL.size(); i++) {\n             if (!jSQL.get(i).equals(cSQL.get(i))) {\n                 printSQL(\"Target SQL for JPQL\", jSQL);\n@@ -183,9 +192,6 @@ void executeAndCompareSQL(String jpql, Query cQ, Query jQ, String expectedSQL) {\n             }\n         }\n \n-        if (!(dict instanceof DerbyDictionary))\n-            return;\n-\n         if (expectedSQL != null) {\n             assertEquals(\"SQL for JPQL and ExpectedSQL for \" + jpql + \" is different\", jSQL.get(0), \n                     expectedSQL);"},{"sha":"3db9a0ad115a30ade3ede7fd5f3d5e79dce0c591","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/CriteriaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/CriteriaTest.java","raw_url":"https://github.com/apache/openjpa/raw/3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/CriteriaTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/CriteriaTest.java?ref=3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1","patch":"@@ -54,8 +54,8 @@ public void setUp() {\n             auditor = new SQLAuditor();\n             setEntityManagerFactory(createNamedEMF(getDomainClasses()));\n             assertNotNull(getEntityManagerFactory());\n-            setDictionary();\n         }\n+        setDictionary();\n         em = getEntityManagerFactory().createEntityManager();\n         cb = getEntityManagerFactory().getQueryBuilder();\n     }"},{"sha":"61ae18efe9e6124a04dc730401e913f12acbbd6f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestQueryByExample.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestQueryByExample.java","raw_url":"https://github.com/apache/openjpa/raw/3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestQueryByExample.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestQueryByExample.java?ref=3f43e3dd0e2c17b00e467dd2841b8a9c3bb0c8f1","patch":"@@ -22,10 +22,10 @@\n import javax.persistence.metamodel.Attribute;\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DB2Dictionary;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.OracleDictionary;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n-import org.apache.openjpa.persistence.criteria.AbstractCriteriaTestCase.SQLAuditor;\n \n /**\n  * Tests different styles for query by example.\n@@ -34,15 +34,15 @@\n  *\n  */\n public class TestQueryByExample extends CriteriaTest {\n-    \n+    DBDictionary dict = null;\n     public void setUp() {\n         super.setUp();\n         \n         // If using an Oracle DB, use sql92 syntax in order to get a correct\n         // comparison of SQL.  This may not work on Oracle JDBC drivers\n         // prior to 10.x\n         OpenJPAEntityManagerSPI ojem = (OpenJPAEntityManagerSPI)em;\n-        DBDictionary dict = ((JDBCConfiguration) ojem.getConfiguration())\n+        dict = ((JDBCConfiguration) ojem.getConfiguration())\n             .getDBDictionaryInstance();\n         if (dict instanceof OracleDictionary) {\n             dict.setJoinSyntax(\"sql92\");\n@@ -184,6 +184,8 @@ void executeAndCompareSQL(CriteriaQuery<?> q, String expected) {\n         em.createQuery(q).getResultList();\n         assertEquals(1,auditor.getSQLs().size());\n         String actual = extract(\"WHERE\", auditor.getSQLs().get(0));\n+        if (dict instanceof DB2Dictionary)\n+            return;\n         assertEquals(expected, actual);\n     }\n     "}]}

