{"sha":"40f017a2e99211101f25fe3d6faafdef38d780a8","node_id":"MDY6Q29tbWl0MjA2MzY0OjQwZjAxN2EyZTk5MjExMTAxZjI1ZmUzZDZmYWFmZGVmMzhkNzgwYTg=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-12-16T04:17:43Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-12-16T04:17:43Z"},"message":"OPENJPA-714:\nCheck l1 cache when looking for managed instances when cascading.\nSubmitted By: Jody Grassel\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@891120 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3542e09f1a71ac04fb5d139b8da68df19531ae33","url":"https://api.github.com/repos/apache/openjpa/git/trees/3542e09f1a71ac04fb5d139b8da68df19531ae33"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/40f017a2e99211101f25fe3d6faafdef38d780a8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/40f017a2e99211101f25fe3d6faafdef38d780a8","html_url":"https://github.com/apache/openjpa/commit/40f017a2e99211101f25fe3d6faafdef38d780a8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/40f017a2e99211101f25fe3d6faafdef38d780a8/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"8dff01769495aa4fd94c83b58f144dfdebdfc581","url":"https://api.github.com/repos/apache/openjpa/commits/8dff01769495aa4fd94c83b58f144dfdebdfc581","html_url":"https://github.com/apache/openjpa/commit/8dff01769495aa4fd94c83b58f144dfdebdfc581"}],"stats":{"total":326,"additions":319,"deletions":7},"files":[{"sha":"b4b74e61e301ce3f6aefebd56d43e65e778cbfee","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","status":"modified","additions":13,"deletions":7,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/40f017a2e99211101f25fe3d6faafdef38d780a8/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/40f017a2e99211101f25fe3d6faafdef38d780a8/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java?ref=40f017a2e99211101f25fe3d6faafdef38d780a8","patch":"@@ -264,21 +264,27 @@ else if (tom == null)\n      * Return a managed, possibly hollow reference for the given detached\n      * object.\n      */\n-    protected Object getReference(AttachManager manager, Object toAttach,\n-        OpenJPAStateManager sm, ValueMetaData vmd) {\n+    protected Object getReference(AttachManager manager, Object toAttach, OpenJPAStateManager sm, ValueMetaData vmd) {\n         if (toAttach == null)\n             return null;\n \n-        if (manager.getBroker().isNew(toAttach)\n-            || manager.getBroker().isPersistent(toAttach)) {\n+        if (manager.getBroker().isNew(toAttach)) {\n+            // Check if toAttach is already mapped to a managed instance\n+            PersistenceCapable pc = manager.getAttachedCopy(toAttach);\n+            if (pc != null) {\n+                return pc;\n+            } else {\n+                return toAttach;\n+            }\n+        } else if (manager.getBroker().isPersistent(toAttach)) {\n             return toAttach;\n         } else if (manager.getBroker().isDetached(toAttach)) {\n             Object oid = manager.getDetachedObjectId(toAttach);\n-            if (oid != null)\n+            if (oid != null) {\n                 return manager.getBroker().find(oid, false, null);\n+            }\n         }\n-        throw new UserException(_loc.get(\"cant-cascade-attach\", vmd))\n-            .setFailedObject(toAttach);\n+        throw new UserException(_loc.get(\"cant-cascade-attach\", vmd)).setFailedObject(toAttach);\n     }\n \n     /**"},{"sha":"87cd9cd84a29069632ce557ea9e0aa6e92e4ddfe","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/TestCascadeOneToManyMerge.java","status":"added","additions":150,"deletions":0,"changes":150,"blob_url":"https://github.com/apache/openjpa/blob/40f017a2e99211101f25fe3d6faafdef38d780a8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/TestCascadeOneToManyMerge.java","raw_url":"https://github.com/apache/openjpa/raw/40f017a2e99211101f25fe3d6faafdef38d780a8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/TestCascadeOneToManyMerge.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/TestCascadeOneToManyMerge.java?ref=40f017a2e99211101f25fe3d6faafdef38d780a8","patch":"@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.merge;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.merge.featureSelection.Toy;\n+import org.apache.openjpa.persistence.merge.featureSelection.ToyBox;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestCascadeOneToManyMerge extends SingleEMFTestCase {\n+    public void setUp() {\n+        setUp(Toy.class, ToyBox.class, CLEAR_TABLES);\n+    }\n+\n+    /**\n+     * Create an instance of Toy and Toybox, establish the bidirectional relationship between the two, and call\n+     * em.merge() on the instance of Toybox. The merge should cascade across the inverse relationship, adding both\n+     * entities to the persistence context. The reference to Toy by the owning side of the relationship should be\n+     * updated to point to the managed instance (Toy' because of the merge op).\n+     * \n+     */\n+    public void testOneToManyCascadeMergeSingleEntity() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        try {\n+            // Create toy\n+            Toy toy = new Toy(1);\n+            toy.setToyName(\"Toy Train\");\n+\n+            // Create toybox\n+            ToyBox toybox = new ToyBox(1);\n+            toybox.setOwnerName(\"Evan\");\n+\n+            // Establish relationship\n+            toy.setToybox(toybox);\n+            toybox.getToyList().add(toy);\n+\n+            // Perform the merge\n+            em.getTransaction().begin();\n+            ToyBox mergedToyBox = em.merge(toybox);\n+            assertNotNull(\"Assert em.merge() didn't return null\", mergedToyBox);\n+\n+            // Verify the merge\n+            ToyBox toyboxFind = em.find(ToyBox.class, 1);\n+            Toy toyFind = em.find(Toy.class, 1);\n+            assertNotNull(\"Assert em.find() for ToyBox(id=1) did not return null.\", toyboxFind);\n+            assertNotNull(\"Assert em.find() for Toy(id=1) did not return null.\", toyFind);\n+            assertTrue(\"Assert em.find() returns the ToyBox returned by em.merge()\", mergedToyBox == toyboxFind);\n+            assertTrue(\"Assert tahat ToyBox(id=1).toyList is size 1\", toyboxFind.getToyList().size() == 1);\n+            assertTrue(\"Assert that ToyBox(id=1).toyList contains the managed Toy(id=1).\", toyboxFind.getToyList()\n+                .contains(toyFind));\n+            assertTrue(\"Assert that Toy(id=1) references the managed ToyBox(id=1).\", toyFind.getToybox() == toyboxFind);\n+\n+            em.getTransaction().commit();\n+\n+            // Verify successful save to the database\n+            em.clear();\n+            assertNotNull(\"Assert em.find(Toy.class, 1) doesn't return null.\", em.find(Toy.class, 1));\n+            assertNotNull(\"Assert em.find(ToyBox.class, 1) doesn't return null.\", em.find(ToyBox.class, 1));\n+        } finally {\n+            if (em != null) {\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Create an instance of Toys (2) and Toybox, establish the bidirectional relationship between the two, and call\n+     * em.merge() on the instance of Toybox. The merge should cascade across the inverse relationship, adding all\n+     * entities to the persistence context. The reference to the Toys by the owning side of the relationship should be\n+     * updated to point to the managed instance (Toy' because of the merge op).\n+     * \n+     */\n+    public void testOneToManyCascadeMergeDoubleEntity() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        try {\n+            // Create toys\n+            Toy toy1 = new Toy(1);\n+            toy1.setToyName(\"Toy Train\");\n+\n+            Toy toy2 = new Toy(2);\n+            toy2.setToyName(\"Toy Plane\");\n+\n+            // Create toybox\n+            ToyBox toybox = new ToyBox(1);\n+            toybox.setOwnerName(\"Evan\");\n+\n+            // Establish relationship\n+            toy1.setToybox(toybox);\n+            toy2.setToybox(toybox);\n+            toybox.getToyList().add(toy1);\n+            toybox.getToyList().add(toy2);\n+\n+            // Perform the merge\n+            em.getTransaction().begin();\n+            ToyBox mergedToyBox = em.merge(toybox);\n+            assertNotNull(\"Assert em.merge() didn't return null\", mergedToyBox);\n+            em.getTransaction().commit();\n+\n+            // Verify the merge\n+            ToyBox toyboxFind = em.find(ToyBox.class, 1);\n+            Toy toy1Find = em.find(Toy.class, 1);\n+            Toy toy2Find = em.find(Toy.class, 2);\n+            assertNotNull(\"Assert em.find() for ToyBox(id=1) did not return null.\", toyboxFind);\n+            assertNotNull(\"Assert em.find() for Toy(id=1) did not return null.\", toy1Find);\n+            assertNotNull(\"Assert em.find() for Toy(id=2) did not return null.\", toy2Find);\n+            assertTrue(\"Assert em.find() returns the ToyBox returned by em.merge()\", mergedToyBox == toyboxFind);\n+            assertTrue(\"Assert tahat ToyBox(id=1).toyList is size 2\", toyboxFind.getToyList().size() == 2);\n+            assertTrue(\"Assert that ToyBox(id=1).toyList contains the managed Toy(id=1).\", toyboxFind.getToyList()\n+                .contains(toy1Find));\n+            assertTrue(\"Assert that ToyBox(id=1).toyList contains the managed Toy(id=2).\", toyboxFind.getToyList()\n+                .contains(toy2Find));\n+            assertTrue(\"Assert that Toy(id=1) references the managed ToyBox(id=1).\",\n+                toy1Find.getToybox() == toyboxFind);\n+            assertTrue(\"Assert that Toy(id=2) references the managed ToyBox(id=1).\", \n+                toy2Find.getToybox() == toyboxFind);\n+\n+            em.clear();\n+            assertNotNull(\"Assert em.find(Toy.class, 1) doesn't return null.\", em.find(Toy.class, 1));\n+            assertNotNull(\"Assert em.find(Toy.class, 2) doesn't return null.\", em.find(Toy.class, 2));\n+            assertNotNull(\"Assert em.find(ToyBox.class, 1) doesn't return null.\", em.find(ToyBox.class, 1));\n+        } finally {\n+            if (em != null) {\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+    }\n+}"},{"sha":"dab4156ea4b84723f6ba19629b1e19ec21656e74","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/featureSelection/Toy.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/40f017a2e99211101f25fe3d6faafdef38d780a8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/featureSelection/Toy.java","raw_url":"https://github.com/apache/openjpa/raw/40f017a2e99211101f25fe3d6faafdef38d780a8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/featureSelection/Toy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/featureSelection/Toy.java?ref=40f017a2e99211101f25fe3d6faafdef38d780a8","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.merge.featureSelection;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class Toy {\n+    @Id\n+    private int id;\n+\n+    private String toyName;\n+\n+    @ManyToOne(optional = false, fetch = FetchType.LAZY)\n+    private ToyBox toybox;\n+\n+    @Version\n+    private long version;\n+\n+    public Toy() {\n+\n+    }\n+\n+    public Toy(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getToyName() {\n+        return toyName;\n+    }\n+\n+    public void setToyName(String toyName) {\n+        this.toyName = toyName;\n+    }\n+\n+    public ToyBox getToybox() {\n+        return toybox;\n+    }\n+\n+    public void setToybox(ToyBox toybox) {\n+        this.toybox = toybox;\n+    }\n+\n+    public long getVersion() {\n+        return version;\n+    }\n+}"},{"sha":"a42027aea05acc1d034b097f2229b80e1157bceb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/featureSelection/ToyBox.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/40f017a2e99211101f25fe3d6faafdef38d780a8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/featureSelection/ToyBox.java","raw_url":"https://github.com/apache/openjpa/raw/40f017a2e99211101f25fe3d6faafdef38d780a8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/featureSelection/ToyBox.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/featureSelection/ToyBox.java?ref=40f017a2e99211101f25fe3d6faafdef38d780a8","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.merge.featureSelection;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class ToyBox {\n+    @Id\n+    private int id;\n+\n+    @Basic\n+    private String ownerName;\n+\n+    @OneToMany(mappedBy = \"toybox\", cascade = CascadeType.ALL)\n+    private List<Toy> toyList;\n+\n+    @Version\n+    private long version;\n+\n+    public ToyBox() {\n+        toyList = new ArrayList<Toy>();\n+    }\n+\n+    public ToyBox(int id) {\n+        this.id = id;\n+        toyList = new ArrayList<Toy>();\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getOwnerName() {\n+        return ownerName;\n+    }\n+\n+    public void setOwnerName(String ownerName) {\n+        this.ownerName = ownerName;\n+    }\n+\n+    public List<Toy> getToyList() {\n+        return toyList;\n+    }\n+\n+    public void setToyList(List<Toy> toyList) {\n+        this.toyList = toyList;\n+    }\n+\n+    public long getVersion() {\n+        return version;\n+    }\n+}"}]}

