{"sha":"4150e7f566680cf07ab70a58faa6b12f26b6574a","node_id":"MDY6Q29tbWl0MjA2MzY0OjQxNTBlN2Y1NjY2ODBjZjA3YWI3MGE1OGZhYTZiMTJmMjZiNjU3NGE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-08-03T17:35:54Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-08-03T17:35:54Z"},"message":"OPENJPA-295\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@562530 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"60ea16f7ea14249f49b2b7ebf568703c3891eec4","url":"https://api.github.com/repos/apache/openjpa/git/trees/60ea16f7ea14249f49b2b7ebf568703c3891eec4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4150e7f566680cf07ab70a58faa6b12f26b6574a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4150e7f566680cf07ab70a58faa6b12f26b6574a","html_url":"https://github.com/apache/openjpa/commit/4150e7f566680cf07ab70a58faa6b12f26b6574a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4150e7f566680cf07ab70a58faa6b12f26b6574a/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"60d4f7cd70dd150c0ec96f84ed371d9e1c691547","url":"https://api.github.com/repos/apache/openjpa/commits/60d4f7cd70dd150c0ec96f84ed371d9e1c691547","html_url":"https://github.com/apache/openjpa/commit/60d4f7cd70dd150c0ec96f84ed371d9e1c691547"}],"stats":{"total":115,"additions":97,"deletions":18},"files":[{"sha":"16a8b37fce92b06419718ff39d431be7c74d8de6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/AbstractManagedRuntime.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/4150e7f566680cf07ab70a58faa6b12f26b6574a/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AbstractManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/4150e7f566680cf07ab70a58faa6b12f26b6574a/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AbstractManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AbstractManagedRuntime.java?ref=4150e7f566680cf07ab70a58faa6b12f26b6574a","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.openjpa.ee;\n+\n+import javax.transaction.SystemException;\n+\n+/*\n+ * AbstractManagedRuntime.java\n+ *\n+ * Created on August 2, 2007, 2:38 PM\n+ *\n+ */\n+public abstract class AbstractManagedRuntime implements ManagedRuntime {\n+    \n+    /**\n+     * Returns a transaction key that can be used to associate transactions\n+     * and Brokers.\n+     * The default implementation returns the Transaction associated \n+     * with the current thread's transaction.\n+     * @return the transaction key\n+     */\n+    public Object getTransactionKey() throws Exception, SystemException {\n+        return getTransactionManager().getTransaction();\n+    }\n+\n+}"},{"sha":"c9e210e503ff65680ef41ded0c80a3e945d4a207","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/4150e7f566680cf07ab70a58faa6b12f26b6574a/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/4150e7f566680cf07ab70a58faa6b12f26b6574a/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java?ref=4150e7f566680cf07ab70a58faa6b12f26b6574a","patch":"@@ -20,6 +20,8 @@\n \n import java.util.LinkedList;\n import java.util.List;\n+\n+import javax.transaction.SystemException;\n import javax.transaction.TransactionManager;\n \n import org.apache.openjpa.lib.conf.Configurable;\n@@ -47,7 +49,7 @@\n  *\n  * @author Marc Prud'hommeaux\n  */\n-public class AutomaticManagedRuntime\n+public class AutomaticManagedRuntime extends AbstractManagedRuntime\n     implements ManagedRuntime, Configurable {\n \n     private static final String [] JNDI_LOCS = new String []{\n@@ -244,4 +246,14 @@ public Throwable getRollbackCause()\n \n         return null;\n     }\n+    \n+    public Object getTransactionKey() throws Exception, SystemException {\n+        if(_runtime == null) \n+            getTransactionManager();\n+        \n+        if(_runtime != null )\n+            return _runtime.getTransactionKey();\n+        \n+        return null;\n+    }\n }"},{"sha":"9324439ef3bb54b3084446ce8afda67db5997209","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/InvocationManagedRuntime.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/4150e7f566680cf07ab70a58faa6b12f26b6574a/openjpa-kernel/src/main/java/org/apache/openjpa/ee/InvocationManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/4150e7f566680cf07ab70a58faa6b12f26b6574a/openjpa-kernel/src/main/java/org/apache/openjpa/ee/InvocationManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/InvocationManagedRuntime.java?ref=4150e7f566680cf07ab70a58faa6b12f26b6574a","patch":"@@ -34,7 +34,7 @@\n  *\n  * @author Marc Prud'hommeaux\n  */\n-public class InvocationManagedRuntime\n+public class InvocationManagedRuntime extends AbstractManagedRuntime\n     implements ManagedRuntime, Configurable {\n \n     private String _methodName = null;"},{"sha":"39159fbfd217b1c7ca52ba501c169c036872500d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/JNDIManagedRuntime.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/4150e7f566680cf07ab70a58faa6b12f26b6574a/openjpa-kernel/src/main/java/org/apache/openjpa/ee/JNDIManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/4150e7f566680cf07ab70a58faa6b12f26b6574a/openjpa-kernel/src/main/java/org/apache/openjpa/ee/JNDIManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/JNDIManagedRuntime.java?ref=4150e7f566680cf07ab70a58faa6b12f26b6574a","patch":"@@ -28,7 +28,7 @@\n  *\n  * @author Abe White\n  */\n-public class JNDIManagedRuntime\n+public class JNDIManagedRuntime extends AbstractManagedRuntime\n     implements ManagedRuntime {\n \n     private String _tmLoc = \"java:/TransactionManager\";"},{"sha":"f9cfb582c16ce48b02864b7e82e15c83ca023032","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/ManagedRuntime.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/4150e7f566680cf07ab70a58faa6b12f26b6574a/openjpa-kernel/src/main/java/org/apache/openjpa/ee/ManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/4150e7f566680cf07ab70a58faa6b12f26b6574a/openjpa-kernel/src/main/java/org/apache/openjpa/ee/ManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/ManagedRuntime.java?ref=4150e7f566680cf07ab70a58faa6b12f26b6574a","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.ee;\n \n+import javax.transaction.SystemException;\n import javax.transaction.TransactionManager;\n \n /**\n@@ -56,4 +57,13 @@ public void setRollbackOnly(Throwable cause)\n      */\n     public Throwable getRollbackCause()\n         throws Exception;\n+\n+    /**\n+     * Returns a transaction key that can be used to associate transactions\n+     * and Brokers.\n+     * @return the transaction key\n+     */\n+    public Object getTransactionKey()\n+        throws Exception, SystemException;\n+    \n }"},{"sha":"b5b47dd8b19ccd5d1356442700ece66b694fbc5c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/RegistryManagedRuntime.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/4150e7f566680cf07ab70a58faa6b12f26b6574a/openjpa-kernel/src/main/java/org/apache/openjpa/ee/RegistryManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/4150e7f566680cf07ab70a58faa6b12f26b6574a/openjpa-kernel/src/main/java/org/apache/openjpa/ee/RegistryManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/RegistryManagedRuntime.java?ref=4150e7f566680cf07ab70a58faa6b12f26b6574a","patch":"@@ -45,7 +45,7 @@\n \n     private String _registryName =\n         \"java:comp/TransactionSynchronizationRegistry\";\n-    private TransactionManager _tm = null;\n+    private TransactionManagerRegistryFacade _tm = null;\n \n     /**\n      * Return the cached TransactionManager instance.\n@@ -84,6 +84,10 @@ public String getRegistryName() {\n         return _registryName;\n     }\n \n+    public Object getTransactionKey() throws Exception, SystemException {\n+        return _tm.getTransactionKey();\n+    }\n+\n     /** \n      *  A {@link TransactionManager} and {@link Transaction} facade\n      *  that delegates the appropriate methods to the internally-held\n@@ -126,6 +130,10 @@ public int getStatus()\n             return _registry.getTransactionStatus();\n         }\n \n+        public Object getTransactionKey() {\n+            return _registry.getTransactionKey();\n+        }\n+\n         //////////////////////////////\n         // Unsupported methods follow\n         //////////////////////////////"},{"sha":"c4c3a4eca5480ace14ddb605739f531a803ac927","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/SunOneManagedRuntime.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/4150e7f566680cf07ab70a58faa6b12f26b6574a/openjpa-kernel/src/main/java/org/apache/openjpa/ee/SunOneManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/4150e7f566680cf07ab70a58faa6b12f26b6574a/openjpa-kernel/src/main/java/org/apache/openjpa/ee/SunOneManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/SunOneManagedRuntime.java?ref=4150e7f566680cf07ab70a58faa6b12f26b6574a","patch":"@@ -26,7 +26,7 @@\n  *\n  * @author Marc Prud'hommeaux\n  */\n-public class SunOneManagedRuntime\n+public class SunOneManagedRuntime extends AbstractManagedRuntime\n     implements ManagedRuntime {\n \n     private Method _switchMeth;"},{"sha":"81a63b3dafeb55eeac82972a5f38081a75474b50","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/4150e7f566680cf07ab70a58faa6b12f26b6574a/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/4150e7f566680cf07ab70a58faa6b12f26b6574a/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java?ref=4150e7f566680cf07ab70a58faa6b12f26b6574a","patch":"@@ -59,9 +59,10 @@\n  * WASManagedRuntime provides the wrapper classes needed to interact with the\n  * WAS proprietary interface and the OpenJPA kernel.\n  *\n- * @author Michael Dick, Kevin Sutter\n+ * @author Kevin Sutter\n  */\n-public class WASManagedRuntime implements ManagedRuntime, Configurable {\n+public class WASManagedRuntime extends AbstractManagedRuntime\n+        implements ManagedRuntime, Configurable {\n \n     private static final Localizer _loc =\n         Localizer.forPackage(WASManagedRuntime.class);"},{"sha":"e3faf06ad7b9f44908245a9410f71bddc0ba44c8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/WLSManagedRuntime.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/4150e7f566680cf07ab70a58faa6b12f26b6574a/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WLSManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/4150e7f566680cf07ab70a58faa6b12f26b6574a/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WLSManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WLSManagedRuntime.java?ref=4150e7f566680cf07ab70a58faa6b12f26b6574a","patch":"@@ -28,7 +28,7 @@\n  *\n  * @author Arunabh Hazarika, Patrick Linskey\n  */\n-public class WLSManagedRuntime\n+public class WLSManagedRuntime extends AbstractManagedRuntime\n     implements ManagedRuntime {\n \n     private final Method _txHelperMeth;"},{"sha":"af5e1732824a0e201c3fcfd5b7dd08fdca1a14e3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":15,"deletions":9,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/4150e7f566680cf07ab70a58faa6b12f26b6574a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/4150e7f566680cf07ab70a58faa6b12f26b6574a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=4150e7f566680cf07ab70a58faa6b12f26b6574a","patch":"@@ -38,6 +38,7 @@\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.conf.OpenJPAVersion;\n import org.apache.openjpa.datacache.DataCacheStoreManager;\n+import org.apache.openjpa.ee.ManagedRuntime;\n import org.apache.openjpa.enhance.PCRegistry;\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.event.RemoteCommitEventManager;\n@@ -526,9 +527,12 @@ protected void setup() {\n      */\n     protected BrokerImpl findTransactionalBroker(String user, String pass) {\n         Transaction trans;\n+        ManagedRuntime mr = _conf.getManagedRuntimeInstance();\n+        Object txKey;\n         try {\n-            trans = _conf.getManagedRuntimeInstance().getTransactionManager().\n+            trans = mr.getTransactionManager().\n                 getTransaction();\n+            txKey = mr.getTransactionKey();\n \n             if (trans == null\n                 || trans.getStatus() == Status.STATUS_NO_TRANSACTION\n@@ -540,7 +544,7 @@ protected BrokerImpl findTransactionalBroker(String user, String pass) {\n             throw new GeneralException(e);\n         }\n \n-        Collection brokers = (Collection) _transactional.get(trans);\n+        Collection brokers = (Collection) _transactional.get(txKey);\n         if (brokers != null) {\n             // we don't need to synchronize on brokers since one JTA transaction\n             // can never be active on multiple concurrent threads.\n@@ -703,8 +707,8 @@ private void assertNoActiveTransaction() {\n     boolean syncWithManagedTransaction(BrokerImpl broker, boolean begin) {\n         Transaction trans;\n         try {\n-            TransactionManager tm = broker.getManagedRuntime().\n-                getTransactionManager();\n+            ManagedRuntime mr = broker.getManagedRuntime();\n+            TransactionManager tm = mr.getTransactionManager();\n             trans = tm.getTransaction();\n             if (trans != null\n                 && (trans.getStatus() == Status.STATUS_NO_TRANSACTION\n@@ -723,11 +727,13 @@ boolean syncWithManagedTransaction(BrokerImpl broker, boolean begin) {\n             // we don't need to synchronize on brokers or guard against multiple\n             // threads using the same trans since one JTA transaction can never\n             // be active on multiple concurrent threads.\n-            Collection brokers = (Collection) _transactional.get(trans);\n+            Object txKey = mr.getTransactionKey();\n+            Collection brokers = (Collection) _transactional.get(txKey);\n+            \n             if (brokers == null) {\n                 brokers = new ArrayList(2);\n-                _transactional.put(trans, brokers);\n-                trans.registerSynchronization(new RemoveTransactionSync(trans));\n+                _transactional.put(txKey, brokers);\n+                trans.registerSynchronization(new RemoveTransactionSync(txKey));\n             }\n             brokers.add(broker);\n             \n@@ -754,9 +760,9 @@ public Collection getOpenBrokers() {\n     private class RemoveTransactionSync\n         implements Synchronization {\n \n-        private final Transaction _trans;\n+        private final Object _trans;\n \n-        public RemoveTransactionSync(Transaction trans) {\n+        public RemoveTransactionSync(Object trans) {\n             _trans = trans;\n         }\n "},{"sha":"ab422de8849817747a624bb20b7c57026b461268","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LocalManagedRuntime.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/4150e7f566680cf07ab70a58faa6b12f26b6574a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LocalManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/4150e7f566680cf07ab70a58faa6b12f26b6574a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LocalManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LocalManagedRuntime.java?ref=4150e7f566680cf07ab70a58faa6b12f26b6574a","patch":"@@ -26,6 +26,7 @@\n import javax.transaction.TransactionManager;\n import javax.transaction.xa.XAResource;\n \n+import org.apache.openjpa.ee.AbstractManagedRuntime;\n import org.apache.openjpa.ee.ManagedRuntime;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.InternalException;\n@@ -40,7 +41,7 @@\n  *\n  * @author Abe White\n  */\n-class LocalManagedRuntime\n+class LocalManagedRuntime extends AbstractManagedRuntime\n     implements ManagedRuntime, TransactionManager, Transaction {\n \n     private static final Localizer _loc = Localizer.forPackage"}]}

