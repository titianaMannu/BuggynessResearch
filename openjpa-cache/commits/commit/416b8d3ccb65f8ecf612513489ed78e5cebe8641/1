{"sha":"416b8d3ccb65f8ecf612513489ed78e5cebe8641","node_id":"MDY6Q29tbWl0MjA2MzY0OjQxNmI4ZDNjY2I2NWY4ZWNmNjEyNTEzNDg5ZWQ3OGU1Y2ViZTg2NDE=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-14T15:42:03Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-14T15:42:03Z"},"message":"OPENJPA-1227 SQL generation error when using data cache.  Patch and testcase contributed by David Minor.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@814706 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"79fbc6340a1587de5bba1bbea839c7aaa3a600ea","url":"https://api.github.com/repos/apache/openjpa/git/trees/79fbc6340a1587de5bba1bbea839c7aaa3a600ea"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/416b8d3ccb65f8ecf612513489ed78e5cebe8641","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/416b8d3ccb65f8ecf612513489ed78e5cebe8641","html_url":"https://github.com/apache/openjpa/commit/416b8d3ccb65f8ecf612513489ed78e5cebe8641","comments_url":"https://api.github.com/repos/apache/openjpa/commits/416b8d3ccb65f8ecf612513489ed78e5cebe8641/comments","author":null,"committer":null,"parents":[{"sha":"ee9210be92ff0279aeed80460ead1f2a279c6f6e","url":"https://api.github.com/repos/apache/openjpa/commits/ee9210be92ff0279aeed80460ead1f2a279c6f6e","html_url":"https://github.com/apache/openjpa/commit/ee9210be92ff0279aeed80460ead1f2a279c6f6e"}],"stats":{"total":119,"additions":119,"deletions":0},"files":[{"sha":"e6cafc951dec7ed0b180afe1849425563b026ee2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/416b8d3ccb65f8ecf612513489ed78e5cebe8641/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/416b8d3ccb65f8ecf612513489ed78e5cebe8641/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=416b8d3ccb65f8ecf612513489ed78e5cebe8641","patch":"@@ -1283,6 +1283,19 @@ private int selectBaseMappings(Select sel, ClassMapping mapping,\n             }\n         }\n \n+        // in certain circumstances force join to superclass table to avoid\n+        // SQL generation error.\n+        if ( eagerToMany != null && pseld < 0 && seld > 0 && !joined\n+                && parent != null ) {\n+            FieldMapping[] pfms = parent.getDefinedFieldMappings();\n+            for (int i = 0; i < pfms.length; i++) {\n+                if (pfms[i] == eagerToMany ) {\n+                    pseld = 0;\n+                    break;\n+                }\n+            }\n+        }\n+        \n         // join to parent table if the parent / any ancestors have selected\n         // anything\n         if (!joined && pseld >= 0 && parent.getTable() != mapping.getTable())\n@@ -1621,3 +1634,4 @@ protected ResultSet executeQuery(boolean wrap) throws SQLException {\n         }\n     }\n }\n+"},{"sha":"39c6c2d397f147d1c91285164184e083e3af0917","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/InheritanceHierarchyAbstract.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/416b8d3ccb65f8ecf612513489ed78e5cebe8641/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/InheritanceHierarchyAbstract.java","raw_url":"https://github.com/apache/openjpa/raw/416b8d3ccb65f8ecf612513489ed78e5cebe8641/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/InheritanceHierarchyAbstract.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/InheritanceHierarchyAbstract.java?ref=416b8d3ccb65f8ecf612513489ed78e5cebe8641","patch":"@@ -34,10 +34,20 @@\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n \n+import org.apache.openjpa.persistence.FetchAttribute;\n+import org.apache.openjpa.persistence.FetchGroup;\n+import org.apache.openjpa.persistence.FetchGroups;\n+\n \n @Entity\n @Inheritance(strategy = InheritanceType.JOINED)\n @DiscriminatorColumn(discriminatorType=DiscriminatorType.STRING)\n+@FetchGroups(\n+    {\n+        @FetchGroup(name=\"nothing\", attributes={}),\n+        @FetchGroup(name=\"children\", attributes={@FetchAttribute(name=\"children\")})\n+    }\n+)\n public abstract class InheritanceHierarchyAbstract implements Serializable {\n \n     @Id\n@@ -74,3 +84,4 @@ public void setParent(InheritanceHierarchyAbstract parent) {\n \t}\n \n }\n+"},{"sha":"a112b0007d12d3723d28ee42dbb7cdfa411310a4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/InheritanceHierarchyConcrete.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/416b8d3ccb65f8ecf612513489ed78e5cebe8641/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/InheritanceHierarchyConcrete.java","raw_url":"https://github.com/apache/openjpa/raw/416b8d3ccb65f8ecf612513489ed78e5cebe8641/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/InheritanceHierarchyConcrete.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/InheritanceHierarchyConcrete.java?ref=416b8d3ccb65f8ecf612513489ed78e5cebe8641","patch":"@@ -34,10 +34,14 @@\n import javax.persistence.MapKey;\n import javax.persistence.OneToMany;\n \n+import org.apache.openjpa.persistence.FetchAttribute;\n+import org.apache.openjpa.persistence.FetchGroup;\n+\n \n @Entity\n @Inheritance(strategy = InheritanceType.JOINED)\n @DiscriminatorValue(\"concrete\")\n+@FetchGroup(name=\"value\", attributes={@FetchAttribute(name=\"value\")})\n public class InheritanceHierarchyConcrete extends InheritanceHierarchyAbstract implements Serializable {\n \n \t@Basic\n@@ -52,3 +56,4 @@ public void setValue(int value) {\n \t}\n \n }\n+"},{"sha":"af4ca7d24b63341dddf4921a69687c4f9ddfad03","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestJoinedInheritanceHierarchyWithCache.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/416b8d3ccb65f8ecf612513489ed78e5cebe8641/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestJoinedInheritanceHierarchyWithCache.java","raw_url":"https://github.com/apache/openjpa/raw/416b8d3ccb65f8ecf612513489ed78e5cebe8641/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestJoinedInheritanceHierarchyWithCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestJoinedInheritanceHierarchyWithCache.java?ref=416b8d3ccb65f8ecf612513489ed78e5cebe8641","patch":"@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.Set;\n+\n+import org.apache.openjpa.meta.FetchGroup;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.PersistenceException;\n+import org.apache.openjpa.persistence.datacache.common.apps.FlushDataCacheObject;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestJoinedInheritanceHierarchyWithCache\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+    \tsuper.setUp(CLEAR_TABLES, InheritanceHierarchyConcrete.class, \n+    \t\t\tInheritanceHierarchyAbstract.class, FlushDataCacheObject.class,\n+    \t\t\t\"openjpa.DataCache\", \"true(CacheSize=1, SoftReferenceSize=0)\",\n+    \t\t\t\"openjpa.RemoteCommitProvider\", \"sjvm\");\n+    }\n+\n+    public void testCacheSqlGeneration() throws PersistenceException {\n+    \t\n+\t\tInheritanceHierarchyConcrete parent = new InheritanceHierarchyConcrete();\n+\t\tInheritanceHierarchyConcrete child = new InheritanceHierarchyConcrete();\n+\t\tparent.setValue(42);\n+\t\tchild.setValue(21);\n+\t\tSet<InheritanceHierarchyAbstract> children = new HashSet<InheritanceHierarchyAbstract>();\n+\t\tchildren.add(child);\n+\t\tparent.setChildren(children);\n+\t\tchild.setParent(parent);\n+\n+    \t\n+    \tOpenJPAEntityManager em = emf.createEntityManager();\n+    \tem.getTransaction().begin();\n+\t\tem.persist(parent);\n+    \tem.getTransaction().commit();\n+    \tem.close();\n+    \t\n+    \tlong id = parent.getId();\n+\n+    \tem = emf.createEntityManager();\n+    \tem.getFetchPlan().removeFetchGroup(FetchGroup.NAME_DEFAULT)\n+\t\t\t.addFetchGroup(\"children\").addFetchGroup(\"value\");\n+    \tem.createQuery(\n+    \t\t\t\"SELECT p FROM InheritanceHierarchyConcrete p WHERE p.id=\" + id\n+    \t\t\t).getResultList().get(0);\n+    \tem.close();\n+    \t\n+    \tem = emf.createEntityManager();\n+    \tem.getFetchPlan().removeFetchGroup(FetchGroup.NAME_DEFAULT)\n+    \t\t.addFetchGroup(\"nothing\").addFetchGroup(\"value\");\n+    \tem.createQuery(\n+    \t\t\t\"SELECT p FROM InheritanceHierarchyConcrete p WHERE p.id=\" + id\n+    \t\t\t).getResultList().get(0);\n+    \tem.close();\n+\n+    \tem = emf.createEntityManager();\n+    \tem.getFetchPlan().removeFetchGroup(FetchGroup.NAME_DEFAULT)\n+\t\t\t.addFetchGroup(\"children\").addFetchGroup(\"value\");\n+    \tem.createQuery(\n+    \t\t\t\"SELECT p FROM InheritanceHierarchyConcrete p WHERE p.id=\" + id\n+    \t\t\t).getResultList().get(0);\n+    \tem.close();\n+\n+    }\n+}\n+"}]}

