{"sha":"41827d794dc0635a71f846ecb8a213bceca4f961","node_id":"MDY6Q29tbWl0MjA2MzY0OjQxODI3ZDc5NGRjMDYzNWE3MWY4NDZlY2I4YTIxM2JjZWNhNGY5NjE=","commit":{"author":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2016-06-24T03:32:58Z"},"committer":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2016-06-24T03:32:58Z"},"message":"OPENJPA-2631: Fix for CriteriaBuilder issue with an @EmbeddedId that contains more than one field.  Ported 2.1.x commit to trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1750038 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a4da03463e96e1145cf94d4c256fec3e43363d25","url":"https://api.github.com/repos/apache/openjpa/git/trees/a4da03463e96e1145cf94d4c256fec3e43363d25"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/41827d794dc0635a71f846ecb8a213bceca4f961","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/41827d794dc0635a71f846ecb8a213bceca4f961","html_url":"https://github.com/apache/openjpa/commit/41827d794dc0635a71f846ecb8a213bceca4f961","comments_url":"https://api.github.com/repos/apache/openjpa/commits/41827d794dc0635a71f846ecb8a213bceca4f961/comments","author":null,"committer":null,"parents":[{"sha":"5c2bab9cb1da779fcf681a3c7ec8ce0f106db960","url":"https://api.github.com/repos/apache/openjpa/commits/5c2bab9cb1da779fcf681a3c7ec8ce0f106db960","html_url":"https://github.com/apache/openjpa/commit/5c2bab9cb1da779fcf681a3c7ec8ce0f106db960"}],"stats":{"total":1131,"additions":1125,"deletions":6},"files":[{"sha":"657f929b2a9d531ed0c779c46748048898e19de8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EqualExpression.java","status":"modified","additions":29,"deletions":2,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/41827d794dc0635a71f846ecb8a213bceca4f961/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EqualExpression.java","raw_url":"https://github.com/apache/openjpa/raw/41827d794dc0635a71f846ecb8a213bceca4f961/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EqualExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EqualExpression.java?ref=41827d794dc0635a71f846ecb8a213bceca4f961","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.openjpa.jdbc.kernel.exps;\n \n+import java.util.List;\n+\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n \n@@ -62,8 +66,31 @@ else if (val1Null || val2Null) {\n                     new FilterValueImpl(sel, ctx, bstate.state1, val1),\n                     new FilterValueImpl(sel, ctx, bstate.state2, val2));\n             } else {\n-                int len = java.lang.Math.min(val1.length(sel, ctx, \n-                    bstate.state1), val2.length(sel, ctx, bstate.state2));\n+                int lenVal1 = val1.length(sel, ctx, bstate.state1);\n+                int lenVal2 = val2.length(sel, ctx, bstate.state2);\n+                int len = java.lang.Math.min(lenVal1, lenVal2);\n+\n+                // OPENJPA-2631: Detect and handle slightly differently the\n+                // case where a composite PK is in use. When an equals comparison\n+                // is created by CriteriaBuilder, and the comparison is done against\n+                // an entity with a composite PK, 'val2' can be either a:\n+                // 1) Lit - in this case a Lit is hard coded to return a length of 1.\n+                // 2) Param - in this case the metadata is null so length will return 1.\n+                // Given this, first look to see if lenVal1 is greater than lenVal2.\n+                if (lenVal1 > lenVal2) {\n+                    // If here, lets get the metadata from val1 and see if its PK\n+                    // is an embeddable. If so, the length (val1Len) will be the\n+                    // size of the number of colunns in the PK. Use this length\n+                    // in order to create an equal expression with the right number\n+                    // of 'AND' statementes.\n+                    ClassMapping cm = (ClassMapping) val1.getMetaData();\n+                    FieldMapping[] fmsPK = cm.getPrimaryKeyFieldMappings();\n+\n+                    if (fmsPK[0].isEmbedded()) {\n+                        len = lenVal1;\n+                    }\n+                }\n+\n                 for (int i = 0; i < len; i++) {\n                     if (i > 0)\n                         buf.append(\" AND \");"},{"sha":"4444ad246f8856f51d45e36c7c43c0c5cd713b3d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/41827d794dc0635a71f846ecb8a213bceca4f961/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java","raw_url":"https://github.com/apache/openjpa/raw/41827d794dc0635a71f846ecb8a213bceca4f961/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java?ref=41827d794dc0635a71f846ecb8a213bceca4f961","patch":"@@ -116,10 +116,11 @@ public void calculateValue(Select sel, ExpContext ctx, ExpState state,\n     public void appendTo(Select sel, ExpContext ctx, ExpState state, \n         SQLBuffer sql, int index) {\n         LitExpState lstate = (LitExpState) state;\n-        if (lstate.otherLength > 1)\n-            sql.appendValue(((Object[]) lstate.sqlValue)[index], \n-                lstate.getColumn(index));\n-        else if (_isRaw) {\n+        if (lstate.otherLength > 1) {\n+            sql.appendValue(((Object[]) lstate.sqlValue)[index], lstate.getColumn(index));\n+            // OPENJPA-2631:  Return so as not to go into sql.appendValue a second time below.\n+            return;\n+        } else if (_isRaw) {\n             int parseType = getParseType();\n             if (parseType == Literal.TYPE_ENUM) { \n                 StringBuilder value = new StringBuilder();"},{"sha":"fcecda279affb744a0c8abec6608d1a12d7e8e29","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","status":"modified","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/41827d794dc0635a71f846ecb8a213bceca4f961/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","raw_url":"https://github.com/apache/openjpa/raw/41827d794dc0635a71f846ecb8a213bceca4f961/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java?ref=41827d794dc0635a71f846ecb8a213bceca4f961","patch":"@@ -253,6 +253,32 @@ public Object toDataStoreValue(Object obj, Column[] cols, JDBCStore store) {\n             sm = (OpenJPAStateManager) pc.pcGetStateManager();\n             if (sm == null) {\n             \tret = getValueFromUnmanagedInstance(obj, cols, true);\n+\n+                // OPENJPA-2631 start\n+                // Check to see if we are dealing with a Embeddable pk. If the PK is an Embeddable, AND IFF the\n+                // columns in the Embeddable are greater than 1, we are dealing with a composite primary\n+                // key, and as such 'ret' will be an instance of the embeddable, NOT the individual PK values.\n+                // Given this, we need to dig deeper and get the individual values of the embeddable key.\n+            \t// On the other hand, if the embeddable only contains one column, 'ret' will be the value of \n+            \t// that column and as such no further digging is necessary.\n+                FieldMapping[] fmsPK = this.getPrimaryKeyFieldMappings();\n+                List<FieldMapping> fms = getFieldMappings(cols, true);\n+\n+                // Note that if we are dealing with an embeddable that is an EmbeddableId, the fms.size will \n+                // always be 1 (since an EmbeddableId is slightly opaque, we don't have an fms for each field).\n+                // If on the other hand we are dealing with an embeddable that is an @IdClass, fms.size will be the \n+                // number columns in the @IdClass.  Furthermore, when dealing with @IdClass, 'ret' will already  \n+                // properly contain the column values, therefore no further processing is needed.\n+                if (fmsPK[0].isEmbedded() && cols.length > 1 && fms.size() == 1) {\n+                    // OK, we know this PK is an embeddable. So get the individual field values.\n+                    Object[] tmpRet = new Object[cols.length];\n+                    for (int i = 0; i < cols.length; i++) {\n+                        Joinable join = this.assertJoinable(cols[i]);\n+                        tmpRet[i] = join.getJoinValue(ret, cols[i], store);\n+                    }\n+                    ret = tmpRet;\n+                }\n+                // OPENJPA-2631 end\n             } else if (sm.isDetached()) {\n             \tobj = store.getContext().find(sm.getObjectId(), false, null);\n             \tsm = store.getContext().getStateManager(obj);"},{"sha":"1337deaff3b40a3ac3330ee6a698fa088077b31d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/Subject.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/41827d794dc0635a71f846ecb8a213bceca4f961/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/Subject.java","raw_url":"https://github.com/apache/openjpa/raw/41827d794dc0635a71f846ecb8a213bceca4f961/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/Subject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/Subject.java?ref=41827d794dc0635a71f846ecb8a213bceca4f961","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.embed.compositepk;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"SUBJECT\")\n+public class Subject implements Serializable {\n+\n+\tprivate static final long serialVersionUID = -2529380440548731281L;\n+\n+    @EmbeddedId\n+\tprivate SubjectKey key;\n+\n+\tpublic Subject() {\n+\t}\n+\n+\tpublic SubjectKey getKey() {\n+\t\treturn key;\n+\t}\n+\n+\tpublic void setKey(SubjectKey key) {\n+\t\tthis.key = key;\n+\t}\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + ((key == null) ? 0 : key.hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (getClass() != obj.getClass())\n+            return false;\n+        Subject other = (Subject) obj;\n+        if (key == null) {\n+            if (other.key != null)\n+                return false;\n+        } else if (!key.equals(other.key))\n+            return false;\n+        return true;\n+    }\n+}"},{"sha":"3c1dea0d90337374bc2951508e23779de99eccff","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/SubjectIdClass.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/41827d794dc0635a71f846ecb8a213bceca4f961/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/SubjectIdClass.java","raw_url":"https://github.com/apache/openjpa/raw/41827d794dc0635a71f846ecb8a213bceca4f961/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/SubjectIdClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/SubjectIdClass.java?ref=41827d794dc0635a71f846ecb8a213bceca4f961","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.embed.compositepk;\n+\n+import java.io.Serializable;\n+\n+public class SubjectIdClass implements Serializable {\n+    \n+    private Integer subjectNummer;\n+\n+    private String subjectTypeCode;\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + ((subjectNummer == null) ? 0 : subjectNummer.hashCode());\n+        result = prime * result + ((subjectTypeCode == null) ? 0 : subjectTypeCode.hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (getClass() != obj.getClass())\n+            return false;\n+        SubjectIdClass other = (SubjectIdClass) obj;\n+        if (subjectNummer == null) {\n+            if (other.subjectNummer != null)\n+                return false;\n+        } else if (!subjectNummer.equals(other.subjectNummer))\n+            return false;\n+        if (subjectTypeCode == null) {\n+            if (other.subjectTypeCode != null)\n+                return false;\n+        } else if (!subjectTypeCode.equals(other.subjectTypeCode))\n+            return false;\n+        return true;\n+    }    \n+}"},{"sha":"ebd78db86635a1a2b437289be79471a45da93c57","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/SubjectKey.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/apache/openjpa/blob/41827d794dc0635a71f846ecb8a213bceca4f961/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/SubjectKey.java","raw_url":"https://github.com/apache/openjpa/raw/41827d794dc0635a71f846ecb8a213bceca4f961/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/SubjectKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/SubjectKey.java?ref=41827d794dc0635a71f846ecb8a213bceca4f961","patch":"@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.embed.compositepk;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Embeddable;\n+\n+@Embeddable\n+public class SubjectKey implements Serializable {\n+\tprivate static final long serialVersionUID = 3714506425307136262L;\n+\n+\t@Column(name = \"SUBJECTNUMMER\")\n+\tprivate Integer subjectNummer;\n+\n+\t@Column(name = \"CODE_SUBJECTTYPE\")\n+\tprivate String subjectTypeCode;\n+\n+\tpublic SubjectKey() {\n+\t\tsuper();\n+\t}\n+\n+\tpublic SubjectKey(Integer subjectNummer, String subjectTypeCode) {\n+\t\tthis.subjectNummer = subjectNummer;\n+\t\tthis.subjectTypeCode = subjectTypeCode;\n+\t}\n+\n+\tpublic Integer getSubjectNummer() {\n+\t\treturn subjectNummer;\n+\t}\n+\n+\tpublic void setSubjectNummer(Integer subjectNummer) {\n+\t\tthis.subjectNummer = subjectNummer;\n+\t}\n+\n+\tpublic String getSubjectTypeCode() {\n+\t\treturn subjectTypeCode;\n+\t}\n+\n+\tpublic void setSubjectType(String subjectType) {\n+\t\tthis.subjectTypeCode = subjectType;\n+\t}\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + ((subjectNummer == null) ? 0 : subjectNummer.hashCode());\n+        result = prime * result + ((subjectTypeCode == null) ? 0 : subjectTypeCode.hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (getClass() != obj.getClass())\n+            return false;\n+        SubjectKey other = (SubjectKey) obj;\n+        if (subjectNummer == null) {\n+            if (other.subjectNummer != null)\n+                return false;\n+        } else if (!subjectNummer.equals(other.subjectNummer))\n+            return false;\n+        if (subjectTypeCode == null) {\n+            if (other.subjectTypeCode != null)\n+                return false;\n+        } else if (!subjectTypeCode.equals(other.subjectTypeCode))\n+            return false;\n+        return true;\n+    }\n+}"},{"sha":"ca3128c242027fe7fed5e4a14c75be9e23175e8f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/SubjectKey_.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/41827d794dc0635a71f846ecb8a213bceca4f961/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/SubjectKey_.java","raw_url":"https://github.com/apache/openjpa/raw/41827d794dc0635a71f846ecb8a213bceca4f961/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/SubjectKey_.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/SubjectKey_.java?ref=41827d794dc0635a71f846ecb8a213bceca4f961","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.embed.compositepk;\n+\n+import javax.persistence.metamodel.SingularAttribute;\n+\n+@javax.persistence.metamodel.StaticMetamodel\n+(value=org.apache.openjpa.persistence.embed.compositepk.SubjectKey.class)\n+@javax.annotation.Generated\n+(value=\"org.apache.openjpa.persistence.meta.AnnotationProcessor6\",date=\"Fri Feb 05 14:31:20 MST 2016\")\n+public class SubjectKey_ {\n+    public static volatile SingularAttribute<SubjectKey,Integer> subjectNummer;\n+    public static volatile SingularAttribute<SubjectKey,String> subjectTypeCode;\n+}"},{"sha":"6c52f6a0ab640f53225e3e0122bcc764a7d6f1a6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/SubjectWithIdClass.java","status":"added","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/apache/openjpa/blob/41827d794dc0635a71f846ecb8a213bceca4f961/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/SubjectWithIdClass.java","raw_url":"https://github.com/apache/openjpa/raw/41827d794dc0635a71f846ecb8a213bceca4f961/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/SubjectWithIdClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/SubjectWithIdClass.java?ref=41827d794dc0635a71f846ecb8a213bceca4f961","patch":"@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.embed.compositepk;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"SUBJECT2\")\n+@IdClass(SubjectIdClass.class)\n+public class SubjectWithIdClass implements Serializable {\n+\n+    private static final long serialVersionUID = 8038887700493762410L;\n+\n+    @Id\n+    @Column(name = \"SUBJECTNUMMER\")\n+    private Integer subjectNummer;\n+\n+    @Id\n+    @Column(name = \"CODE_SUBJECTTYPE\")\n+    private String subjectTypeCode;\n+    \n+\tpublic SubjectWithIdClass() {\n+\t}\n+\n+    public void setSubjectNummer(Integer subjectNummer) {\n+        this.subjectNummer = subjectNummer;\n+        \n+    }\n+\n+    public Integer getSubjectNummer() {\n+        return subjectNummer;\n+    }\n+\n+    public void setSubjectTypeCode(String subjectTypeCode) {\n+        this.subjectTypeCode = subjectTypeCode;\n+        \n+    }\n+\n+    public String getSubjectTypeCode() {\n+        return subjectTypeCode;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + ((subjectNummer == null) ? 0 : subjectNummer.hashCode());\n+        result = prime * result + ((subjectTypeCode == null) ? 0 : subjectTypeCode.hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (getClass() != obj.getClass())\n+            return false;\n+        SubjectWithIdClass other = (SubjectWithIdClass) obj;\n+        if (subjectNummer == null) {\n+            if (other.subjectNummer != null)\n+                return false;\n+        } else if (!subjectNummer.equals(other.subjectNummer))\n+            return false;\n+        if (subjectTypeCode == null) {\n+            if (other.subjectTypeCode != null)\n+                return false;\n+        } else if (!subjectTypeCode.equals(other.subjectTypeCode))\n+            return false;\n+        return true;\n+    }\n+}"},{"sha":"9b3ba4c02f5c9eef6747c863f1522b54d122277e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/SubjectWithIdClass_.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/41827d794dc0635a71f846ecb8a213bceca4f961/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/SubjectWithIdClass_.java","raw_url":"https://github.com/apache/openjpa/raw/41827d794dc0635a71f846ecb8a213bceca4f961/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/SubjectWithIdClass_.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/SubjectWithIdClass_.java?ref=41827d794dc0635a71f846ecb8a213bceca4f961","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.embed.compositepk;\n+\n+import javax.persistence.metamodel.SingularAttribute;\n+\n+@javax.persistence.metamodel.StaticMetamodel\n+(value=org.apache.openjpa.persistence.embed.compositepk.SubjectWithIdClass.class)\n+@javax.annotation.Generated\n+(value=\"org.apache.openjpa.persistence.meta.AnnotationProcessor6\",date=\"Fri Feb 05 14:31:20 MST 2016\")\n+public class SubjectWithIdClass_ {\n+    public static volatile SingularAttribute<SubjectWithIdClass,Integer> subjectNummer;\n+    public static volatile SingularAttribute<SubjectWithIdClass,String> subjectTypeCode;\n+}"},{"sha":"6fcf76b1e268e70598d815ee96931f207b15ae89","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/Subject_.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/41827d794dc0635a71f846ecb8a213bceca4f961/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/Subject_.java","raw_url":"https://github.com/apache/openjpa/raw/41827d794dc0635a71f846ecb8a213bceca4f961/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/Subject_.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/Subject_.java?ref=41827d794dc0635a71f846ecb8a213bceca4f961","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.embed.compositepk;\n+\n+import javax.persistence.metamodel.SingularAttribute;\n+\n+@javax.persistence.metamodel.StaticMetamodel\n+(value=org.apache.openjpa.persistence.embed.compositepk.Subject.class)\n+@javax.annotation.Generated\n+(value=\"org.apache.openjpa.persistence.meta.AnnotationProcessor6\",date=\"Fri Feb 05 14:31:20 MST 2016\")\n+public class Subject_ {\n+    public static volatile SingularAttribute<Subject,SubjectKey> key;\n+}"},{"sha":"d6e7e7bfe8bf8ad3abee2e4b9fa9922af4ef0b0a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/TestCompositePrimaryKeys.java","status":"added","additions":538,"deletions":0,"changes":538,"blob_url":"https://github.com/apache/openjpa/blob/41827d794dc0635a71f846ecb8a213bceca4f961/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/TestCompositePrimaryKeys.java","raw_url":"https://github.com/apache/openjpa/raw/41827d794dc0635a71f846ecb8a213bceca4f961/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/TestCompositePrimaryKeys.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/TestCompositePrimaryKeys.java?ref=41827d794dc0635a71f846ecb8a213bceca4f961","patch":"@@ -0,0 +1,538 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.embed.compositepk;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityTransaction;\n+import javax.persistence.TypedQuery;\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.ParameterExpression;\n+import javax.persistence.criteria.Predicate;\n+import javax.persistence.criteria.Root;\n+\n+import junit.framework.Assert;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestCompositePrimaryKeys extends SingleEMFTestCase {\n+\n+    // NOTE: There are 3 aspects to the fix to OPENJPA-2631, each being tested in some manner in the test\n+    // methods below. The 3 aspects of the fix are:\n+    //\n+    // 1) Fix in ClassMapping which resolves the reported ClassCastEx.\n+    // 2) After #1, things progressed further, but for some CriteriaBuilder tests incorrect SQL was created as follows:\n+    // 2.1) An equals expression was created for only one of the columns in the composite PK. To\n+    // resolve this a fix was made to class EqualExpression.\n+    // 2.2) An extra parameter marker (?) was added to the SQL. To resolve this a fix was made to class Lit.\n+\n+    protected EntityManager em;\n+    private EntityTransaction tx;\n+\n+    public void setUp() {\n+        super.setUp(DROP_TABLES, Subject.class, SubjectKey.class, SubjectWithIdClass.class, Topic.class);\n+        \n+            em = emf.createEntityManager();\n+            tx = em.getTransaction();\n+            tx.begin();\n+            createData();\n+    }\n+\n+    /*\n+     * OpenJPA handles this test just fine with or without the fixes of OPENJPA-2631.\n+     */\n+    public void testFindUsingFindOnSubjectKey() {\n+\n+        Subject s = createSubject();\n+\n+        Subject s2 = em.find(Subject.class, s.getKey());\n+\n+        verifySubject(s, s2);\n+    }\n+\n+    /*\n+     * OpenJPA handles this test just fine with or without the fixes of OPENJPA-2631.  This works, \n+     * compared to other tests, because a select is performed on the key class' fields.\n+     */\n+    public void testFindUsingEqualsOnObjectJPQL() {\n+        Subject s = createSubject();\n+        \n+        TypedQuery<Subject> query = em.createQuery(\"select distinct s from Subject s where \" +\n+        \t\t\"s.key.subjectNummer = :subjectNummer AND s.key.subjectTypeCode = \" +\n+        \t\t\":subjectTypeCode\", Subject.class);\n+        query.setParameter(\"subjectNummer\", s.getKey().getSubjectNummer());\n+        query.setParameter(\"subjectTypeCode\", s.getKey().getSubjectTypeCode());\n+        \n+        Subject s2 = query.getSingleResult();\n+        \n+        verifySubject(s, s2);\n+    }\n+\n+    /*\n+     * Just like the previous test, OpenJPA handles this test just fine with or without the \n+     * fixes of OPENJPA-2631.  This works, compared to other tests, because a select is \n+     * performed on the key class' fields.  This slight difference in this test compared to the\n+     * previous test is that it traverses from Topic to the SubjectKey fields. \n+     */\n+    public void testFindUsingJPQLEqualsOnSubjectKeyAttributes() {\n+\n+        Subject s = createSubject();\n+\n+        TypedQuery<Topic> query = em.createQuery(\"select distinct t from Topic t where t.subject.key.subjectNummer = \" +\n+                \":subjectNummer AND t.subject.key.subjectTypeCode = :subjectTypeCode\", Topic.class);\n+        query.setParameter(\"subjectNummer\", s.getKey().getSubjectNummer());\n+        query.setParameter(\"subjectTypeCode\", s.getKey().getSubjectTypeCode());\n+        Topic topic = query.getSingleResult();\n+\n+        verifyResults(topic, s);\n+    }\n+    \n+    /*\n+     * This test results in an EXPECTED exception:\n+     * \n+     * ArgumentException: An error occurred while parsing the query filter 'select distinct g from Topic g where\n+     * t.subject.key = :subjectKey'. Error message: JPQL query does not support conditional expression over embeddable\n+     * class. JPQL string: \"key\".\n+     * \n+     * The message in the exception tells it all. Per the spec, you can not do a compare on embeddables.\n+     */\n+    public void testFindUsingJPQLEqualsOnSubjectKey() {\n+        try {\n+            em.createQuery(\"select distinct t from Topic t where t.subject.key = :subjectKey\");\n+        } catch (Throwable t) {\n+            // An exception is EXPECTED!\n+            Assert.assertTrue(t.getMessage().contains(\"does not support conditional expression\"));\n+        }\n+    }\n+    \n+    /*\n+     * Prior to the fix #1 (see notes above), this fails on OJ with:\n+     * \n+     * java.lang.ClassCastException: org.apache.openjpa.persistence.embed.compositepk.SubjectKey cannot be cast to \n+     * [Ljava.lang.Object;]\n+     * at org.apache.openjpa.jdbc.kernel.exps.Param.appendTo(Param.java:149)\n+     * \n+     * With fix #1, this test works fine.\n+     */\n+    public void testFindSubjectUsingJPQLEqualsOnSubject() {\n+\n+        Subject s = createSubject();\n+\n+        TypedQuery<Subject> query = em.createQuery(\"select s from Subject s where s = :subject\", Subject.class);\n+        query.setParameter(\"subject\", s);\n+        Subject s2 = query.getSingleResult();\n+\n+        verifySubject(s, s2);\n+    }\n+\n+    /*\n+     * Prior to the fix #1 (see notes above), this fails on OJ with:\n+     * \n+     * java.lang.ClassCastException: org.apache.openjpa.persistence.embed.compositepk.SubjectKey cannot be cast to \n+     * [Ljava.lang.Object;]\n+     * at org.apache.openjpa.jdbc.kernel.exps.Param.appendTo(Param.java:149)\n+     * \n+     * With fix #1, this test works fine.\n+     */\n+    public void testFindUsingNamedQuery() {\n+\n+        Subject s = createSubject();\n+\n+        TypedQuery<Topic> q = em.createNamedQuery(\"bySubject\", Topic.class);\n+\n+        q.setParameter(\"subject\", s);\n+\n+        Topic topic = q.getSingleResult();\n+\n+        verifyResults(topic, s);\n+    }\n+\n+    /*\n+     * Prior to the fix #1 (see notes above), this fails on OJ with:\n+     * \n+     * java.lang.ClassCastException: org.apache.openjpa.persistence.embed.compositepk.SubjectKey cannot be cast to \n+     * [Ljava.lang.Object;]\n+     * at org.apache.openjpa.jdbc.kernel.exps.Param.appendTo(Param.java:149)\n+     * \n+     * With fix #1, this test works fine.\n+     */\n+    public void testFindUsingJPQLEqualsOnSubject() {\n+\n+        Subject s = createSubject();\n+\n+        TypedQuery<Topic> query =\n+            em.createQuery(\"select distinct t from Topic t where t.subject = :subject\", Topic.class);\n+        query.setParameter(\"subject\", s);\n+        Topic topic = query.getSingleResult();\n+\n+        verifyResults(topic, s);\n+    }\n+\n+    /*\n+     * Prior to the fix #1 (see notes above), this fails on OJ with:\n+     * \n+     * java.lang.ClassCastException: org.apache.openjpa.persistence.embed.compositepk.SubjectKey cannot be cast to \n+     * [Ljava.lang.Object;]\n+     * at org.apache.openjpa.jdbc.kernel.exps.Param.appendTo(Param.java:149)\n+     * \n+     * With fix #1, the CCEx is avoided/resolved. However, we then got an incorrectly generated SQL as follows:\n+     * \n+     * SELECT t0.SUBJECTNUMMER, t0.CODE_SUBJECTTYPE FROM SUBJECT t0 WHERE (t0.SUBJECTNUMMER = ?)\n+     *   optimize for 1 row [params=(int) 1]\n+     * \n+     * Notice that 't0.CODE_SUBJECTTYPE' is missing.  With fix #2.1 this issue is resolved.\n+     * \n+     * The thing to note (which is different than the test 'findSubjectUsingCriteriaBuilderEquals' below) is that\n+     * the Subject is treated as an OpenJPA 'Parameter' (see changes in EqualExpression). The test \n+     * 'findSubjectUsingCriteriaBuilderEquals' below causes the Subject to be treated as a Lit. There is \n+     * a bug in both cases, with an additional bug for the 'Lit' case.\n+     */\n+    public void testFindSubjectUsingCriteriaBuilderEqualsAndParameter() {\n+\n+        Subject s = createSubject();\n+\n+        CriteriaBuilder builder = em.getCriteriaBuilder();\n+        CriteriaQuery<Subject> cq = builder.createQuery(Subject.class);\n+\n+        Root<Subject> subjectRoot = cq.from(Subject.class);\n+        cq.select(subjectRoot);\n+\n+        ParameterExpression<Subject> param1 = builder.parameter(Subject.class, \"subject\");\n+        Predicate subjectPredicate = builder.equal(subjectRoot, param1);\n+\n+        cq.where(subjectPredicate);\n+\n+        TypedQuery<Subject> query = em.createQuery(cq);\n+        query.setParameter(\"subject\", s);\n+\n+        Subject s2 = query.getSingleResult();\n+\n+        verifySubject(s, s2);\n+    }\n+\n+    /*\n+     * Prior to the fix #1 (see notes above), this fails on OJ with:\n+     * \n+     * Caused by: java.lang.ClassCastException: org.apache.openjpa.persistence.embed.compositepk.SubjectKey \n+     * cannot be cast to [Ljava.lang.Object;\n+     *   at org.apache.openjpa.jdbc.kernel.exps.Lit.appendTo(Lit.java:120)\n+     * \n+     * Notice the exception this time is in 'Lit'.  Previous CCEx for the other tests have been in Param.\n+     * With fix #1, the CCEx is avoided/resolved. However, we then got an incorrectly generated SQL as follows:\n+     * \n+     * SELECT t0.SUBJECTNUMMER, t0.CODE_SUBJECTTYPE FROM SUBJECT t0 WHERE (t0.SUBJECTNUMMER = ??)  \n+     * optimize for 1 row [params=(int) 1, (String) Type]\n+     * \n+     * Notice that 't0.CODE_SUBJECTTYPE' is missing, and there are two parameter markers.  With fix #2.1 and\n+     * #2.2, this issue is resolved.\n+     * \n+     * The other thing to note (which is different than the test 'findSubjectUsingCriteriaBuilderEqualsAndParameter'\n+     * above) is that the Subject is treated as an OpenJPA 'Lit' (see changes in EqualExpression). The test\n+     * 'findSubjectUsingCriteriaBuilderEqualsAndParameter' above treats the Subject as a Parameter. There is a bug in\n+     * both cases, with an additional bug for the 'Lit' case.\n+     */\n+    public void testFindSubjectUsingCriteriaBuilderEquals() {\n+\n+        Subject s = createSubject();\n+\n+        CriteriaBuilder builder = em.getCriteriaBuilder();\n+        CriteriaQuery<Subject> cq = builder.createQuery(Subject.class);\n+\n+        Root<Subject> subjectRoot = cq.from(Subject.class);\n+        cq.select(subjectRoot);\n+\n+        Predicate subjectPredicate = builder.equal(subjectRoot, s);\n+\n+        // Before the fix of JIRA OPENJPA-2631, the following was a way to fix/work around the issue, in\n+        // other words, selecting the individual fields of the PK worked fine....I'll leave this here but\n+        // commented out for history sake:\n+        // Predicate subjectPredicate1 = builder.equal(subjectRoot.get(Subject_.key).get(SubjectKey_.subjectNummer),\n+        // subject.getKey().getSubjectNummer());\n+        // Predicate subjectPredicate2 = builder.equal(subjectRoot.get(Subject_.key).get(SubjectKey_.subjectTypeCode),\n+        // subject.getKey().getSubjectTypeCode());\n+        // Predicate subjectPredicate = builder.and(subjectPredicate1,subjectPredicate2);\n+\n+        cq.where(subjectPredicate);\n+\n+        TypedQuery<Subject> query = em.createQuery(cq);\n+\n+        Subject s2 = query.getSingleResult();\n+\n+        verifySubject(s, s2);\n+    }\n+\n+    /*\n+     * For comparison, this test does the same CriteriaBuilder code on Topic (an entity \n+     * with a single PK) as was done in the previous test to make sure it works.\n+     */\n+    public void testFindTopicUsingCriteriaBuilderEquals() {\n+\n+        Topic t = new Topic();\n+        t.setId(5);\n+\n+        CriteriaBuilder builder = em.getCriteriaBuilder();\n+        CriteriaQuery<Topic> cq = builder.createQuery(Topic.class);\n+\n+        Root<Topic> topicRoot = cq.from(Topic.class);\n+        cq.select(topicRoot);\n+\n+        Predicate topicPredicate = builder.equal(topicRoot, t);\n+        cq.where(topicPredicate);\n+\n+        TypedQuery<Topic> query = em.createQuery(cq);\n+\n+        Topic topic = query.getSingleResult();\n+\n+        verifyResults(topic, createSubject());\n+    }\n+\n+    /*\n+     * Prior to the fix #1 (see notes above), this fails on OJ with:\n+     * \n+     * Caused by: java.lang.ClassCastException: org.apache.openjpa.persistence.embed.compositepk.SubjectKey \n+     * cannot be cast to [Ljava.lang.Object;\n+     *   at org.apache.openjpa.jdbc.kernel.exps.Lit.appendTo(Lit.java:120)\n+     * \n+     * Notice the exception this time is in 'Lit'.  Previous CCEx for the other tests have been in Param.\n+     * With fix #1, the CCEx is avoided/resolved. However, we then got an incorrectly generated SQL as follows:\n+     * \n+     * SELECT t0.ID, t1.SUBJECTNUMMER, t1.CODE_SUBJECTTYPE FROM TOPIC t0 LEFT OUTER JOIN SUBJECT t1 ON \n+     * t0.SUBJECT_SUBJECTNUMMER = \n+     * t1.SUBJECTNUMMER AND t0.SUBJECT_CODE_SUBJECTTYPE = t1.CODE_SUBJECTTYPE WHERE (t0.SUBJECT_SUBJECTNUMMER = ??)  \n+     * optimize for 1 row [params=(int) 1, (String) Type]\n+     * \n+     * Notice that 't0.CODE_SUBJECTTYPE' is missing, and there are two parameter markers.  With fix #2.1 and\n+     * #2.2, this issue is resolved.\n+     */\n+    public void testFindUsingCriteriaBuilderEquals() {\n+\n+        Subject s = createSubject();\n+        CriteriaBuilder builder = em.getCriteriaBuilder();\n+        CriteriaQuery<Topic> cq = builder.createQuery(Topic.class);\n+\n+        Root<Topic> topic = cq.from(Topic.class);\n+        cq.select(topic).distinct(true);\n+\n+        Predicate topicPredicate = builder.equal(topic.get(\"subject\"), s);\n+        cq.where(topicPredicate);\n+\n+        TypedQuery<Topic> query = em.createQuery(cq);\n+        Topic t = query.getSingleResult();\n+\n+        verifyResults(t, s);\n+    }\n+\n+    /*\n+     * Prior to the fix #1 (see notes above), this fails on OJ with:\n+     * \n+     * Caused by: java.lang.ClassCastException: org.apache.openjpa.persistence.embed.compositepk.SubjectKey \n+     * cannot be cast to [Ljava.lang.Object;\n+     *   at org.apache.openjpa.jdbc.kernel.exps.InExpression.orContains(InExpression.java:178)\n+     *   \n+     * Notice this time the CCEx occurs in InExpression.  With fix #1 the issue is resolved.\n+     */\n+    public void testFindUsingJPQLInClauseOnSubject() {\n+        Subject s = createSubject();\n+        SubjectKey key = new SubjectKey(999, \"Bla\");\n+        Subject s2 = new Subject();\n+        s2.setKey(key);\n+\n+        List<Subject> subjectList = new ArrayList<Subject>();\n+        subjectList.add(s);\n+        subjectList.add(s2);\n+        \n+        TypedQuery<Topic> query = em.createQuery(\n+                \"select distinct t from Topic t where t.subject in :subjectList\", Topic.class);\n+        query.setParameter(\"subjectList\", subjectList);\n+        Topic t = query.getSingleResult();\n+        \n+        verifyResults(t, s);\n+    }\n+    \n+    /*\n+     * Prior to the fix #1 (see notes above), this fails on OJ with:\n+     * \n+     * Caused by: java.lang.ClassCastException: org.apache.openjpa.persistence.embed.compositepk.SubjectKey \n+     * cannot be cast to [Ljava.lang.Object;\n+     *   at org.apache.openjpa.jdbc.kernel.exps.Lit.appendTo(Lit.java:120)\n+     * \n+     * Notice the exception this time is in 'Lit'.  Previous CCEx for the other tests have been in Param.\n+     * \n+     * With fix #1, the CCEx is avoided/resolved. However, we then got an incorrectly generated SQL as follows:\n+     * \n+     * SELECT t0.ID, t1.SUBJECTNUMMER, t1.CODE_SUBJECTTYPE FROM TOPIC t0 LEFT OUTER JOIN SUBJECT t1 ON \n+     * t0.SUBJECT_SUBJECTNUMMER = \n+     * t1.SUBJECTNUMMER AND t0.SUBJECT_CODE_SUBJECTTYPE = t1.CODE_SUBJECTTYPE WHERE (t0.SUBJECT_SUBJECTNUMMER = ??)  \n+     * optimize for 1 row [params=(int) 1, (String) Type]\n+     * \n+     * Notice that 't0.CODE_SUBJECTTYPE' is missing, and there are two parameter markers.  With fix #2.1 and\n+     * #2.2, this issue is resolved.\n+     */\n+    public void testFindUsingCriteriaBuilderInClauseOnSubject() {\n+\n+        Subject s = createSubject();\n+        SubjectKey key = new SubjectKey(999, \"Bla\");\n+        Subject s2 = new Subject();\n+        s2.setKey(key);\n+\n+        List<Subject> subjectList = new ArrayList<Subject>();\n+        subjectList.add(s);\n+        subjectList.add(s2);\n+\n+        CriteriaBuilder builder = em.getCriteriaBuilder();\n+        CriteriaQuery<Topic> cq = builder.createQuery(Topic.class);\n+\n+        Root<Topic> topic = cq.from(Topic.class);\n+        cq.select(topic).distinct(true);\n+\n+        Predicate subjectInSubjectList = topic.get(Topic_.subject).in(subjectList);\n+        cq.where(subjectInSubjectList);\n+\n+        TypedQuery<Topic> query = em.createQuery(cq);\n+        Topic t = query.getSingleResult();\n+\n+        verifyResults(t, s);\n+    }\n+\n+    /*\n+     * This test works fine with or without the fixes.  This was added as a comparison to the case\n+     * where an @EmbeddedId is used.  In other words, this query selects a Subject which uses\n+     * a @IdClass (still considered an embeddable in OpenJPA).\n+     */\n+    public void testFindUsingJPQLEqualsOnSubjectWithIdClass() {\n+        SubjectWithIdClass s = new SubjectWithIdClass();\n+        s.setSubjectNummer(1);\n+        s.setSubjectTypeCode(\"Type\");\n+\n+            TypedQuery<SubjectWithIdClass> query =\n+                em.createQuery(\"select s from SubjectWithIdClass s where s = :subject\", SubjectWithIdClass.class);\n+            \n+            query.setParameter(\"subject\", s);\n+            SubjectWithIdClass s2 = query.getSingleResult();\n+       \n+\n+        Assert.assertNotNull(s2);\n+        Assert.assertEquals(s.getSubjectNummer(), s2.getSubjectNummer());\n+        Assert.assertEquals(s.getSubjectTypeCode(), s2.getSubjectTypeCode());\n+    }\n+\n+    /*\n+     * For this test, the CCEx is actually never hit with or without the fixes.  However, incorrect\n+     * SQL was generated as follows:\n+     * \n+     * SELECT t0.SUBJECTNUMMER, t0.CODE_SUBJECTTYPE FROM SUBJECT2 t0 WHERE \n+     * (t0.SUBJECTNUMMER = ??)  optimize for 1 row [params=(int) 1, (String) Type]}\n+     * \n+     * Notice that 't0.CODE_SUBJECTTYPE' is missing, and there is an extra parameter marker.  With \n+     * fix #2.1 and #2.2 this issue is resolved.\n+     */\n+    public void testFindUsingCriteriaBuilderOnSubjectWithIdClass() {\n+        SubjectWithIdClass s = new SubjectWithIdClass();\n+        s.setSubjectNummer(1);\n+        s.setSubjectTypeCode(\"Type\");\n+\n+        CriteriaBuilder builder = em.getCriteriaBuilder();\n+        CriteriaQuery<SubjectWithIdClass> cq = builder.createQuery(SubjectWithIdClass.class);\n+\n+        Root<SubjectWithIdClass> subjectRoot = cq.from(SubjectWithIdClass.class);\n+        cq.select(subjectRoot);\n+\n+        Predicate subjectPredicate = builder.equal(subjectRoot, s);\n+\n+        cq.where(subjectPredicate);\n+\n+        TypedQuery<SubjectWithIdClass> query = em.createQuery(cq);\n+\n+        SubjectWithIdClass s2 = query.getSingleResult();\n+\n+        Assert.assertNotNull(s2);\n+        Assert.assertEquals(s.getSubjectNummer(), s2.getSubjectNummer());\n+        Assert.assertEquals(s.getSubjectTypeCode(), s2.getSubjectTypeCode());\n+    }\n+    \n+\n+    private void createData(){\n+        Subject s = new Subject();\n+        SubjectKey sk = new SubjectKey();\n+        sk.setSubjectNummer(1);\n+        sk.setSubjectType(\"Type2\");\n+        s.setKey(sk);            \n+        em.persist(s);\n+        \n+        s = new Subject();\n+        sk = new SubjectKey();\n+        sk.setSubjectNummer(1);\n+        sk.setSubjectType(\"Type\");\n+        s.setKey(sk);            \n+        em.persist(s);\n+        \n+        Topic t = new Topic();\n+        t.setId(5);\n+        t.setSubject(s);\n+        em.persist(t);\n+\n+        SubjectWithIdClass swic = new SubjectWithIdClass();\n+        swic.setSubjectNummer(1);\n+        swic.setSubjectTypeCode(\"Type\");\n+        em.persist(swic);\n+        \n+        swic = new SubjectWithIdClass();\n+        swic.setSubjectNummer(1);\n+        swic.setSubjectTypeCode(\"Type2\");\n+        em.persist(swic);\n+        \n+        em.flush();\n+    }\n+\n+    private Subject createSubject() {\n+        SubjectKey key = new SubjectKey(1, \"Type\");\n+        Subject result = new Subject();\n+        result.setKey(key);\n+\n+        return result;\n+    }\n+\n+    public void verifyResults(Topic topic, Subject s) {\n+        Assert.assertNotNull(topic);\n+        Assert.assertEquals(new Integer(5), topic.getId());\n+        Subject s2 = topic.getSubject();\n+        verifySubject(s, s2);\n+    }\n+\n+    public void verifySubject(Subject expected, Subject actual) {\n+        Assert.assertNotNull(expected);\n+        Assert.assertEquals(expected.getKey().getSubjectNummer(), actual.getKey().getSubjectNummer());\n+        Assert.assertEquals(expected.getKey().getSubjectTypeCode(), actual.getKey().getSubjectTypeCode());\n+    }\n+    \n+    public void tearDown() {\n+        if (tx != null && tx.isActive()) {\n+            tx.rollback();\n+            tx = null;\n+        }\n+\n+        if (em != null && em.isOpen()) {\n+            em.close();\n+            em = null;\n+        }\n+    }    \n+}"},{"sha":"1d39a33970b24499ef3037b1dbe289ef96deeb59","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/Topic.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/41827d794dc0635a71f846ecb8a213bceca4f961/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/Topic.java","raw_url":"https://github.com/apache/openjpa/raw/41827d794dc0635a71f846ecb8a213bceca4f961/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/Topic.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/Topic.java?ref=41827d794dc0635a71f846ecb8a213bceca4f961","patch":"@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.embed.compositepk;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"TOPIC\")\n+@NamedQuery(name = \"bySubject\", query = \"SELECT t FROM Topic t WHERE t.subject = :subject\")\n+public class Topic {\n+    @Id\n+\t@Column(name = \"ID\")\n+\tprivate Integer id;\n+\n+\t@ManyToOne(fetch = FetchType.EAGER, cascade = CascadeType.MERGE)\n+//    @JoinColumns({ @JoinColumn(table = \"TOPIC\", name = \"SUBJECTNUMMER\", referencedColumnName = \"SUBJECTNUMMER\"),\n+  //          @JoinColumn(table = \"TOPIC\", name = \"CODE_SUBJECTTYPE\", referencedColumnName = \"CODE_SUBJECTTYPE\") })\n+\tprivate Subject subject;\n+\n+\tpublic Topic() {\n+\t}\n+\n+    public Integer getId() {\n+        return id;\n+    }\n+\n+    public void setId(Integer id) {\n+        this.id = id;\n+    }\n+\n+    public Subject getSubject() {\n+        return subject;\n+    }\n+\n+    public void setSubject(Subject subject) {\n+        this.subject = subject;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + ((id == null) ? 0 : id.hashCode());\n+        result = prime * result + ((subject == null) ? 0 : subject.hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (getClass() != obj.getClass())\n+            return false;\n+        Topic other = (Topic) obj;\n+        if (id == null) {\n+            if (other.id != null)\n+                return false;\n+        } else if (!id.equals(other.id))\n+            return false;\n+        if (subject == null) {\n+            if (other.subject != null)\n+                return false;\n+        } else if (!subject.equals(other.subject))\n+            return false;\n+        return true;\n+    }\n+}"},{"sha":"564bb039d6c906e4f01dd10b6a97d717db84bd0d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/Topic_.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/41827d794dc0635a71f846ecb8a213bceca4f961/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/Topic_.java","raw_url":"https://github.com/apache/openjpa/raw/41827d794dc0635a71f846ecb8a213bceca4f961/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/Topic_.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/Topic_.java?ref=41827d794dc0635a71f846ecb8a213bceca4f961","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.embed.compositepk;\n+\n+import javax.persistence.metamodel.SingularAttribute;\n+\n+@javax.persistence.metamodel.StaticMetamodel\n+(value=org.apache.openjpa.persistence.embed.compositepk.Topic.class)\n+@javax.annotation.Generated\n+(value=\"org.apache.openjpa.persistence.meta.AnnotationProcessor6\",date=\"Fri Feb 05 14:31:20 MST 2016\")\n+public class Topic_ {\n+    public static volatile SingularAttribute<Topic,Integer> id;\n+    public static volatile SingularAttribute<Topic,Subject> subject;\n+}"}]}

