{"sha":"41ce320cc0436552a0d90dd53ba8e875680e5225","node_id":"MDY6Q29tbWl0MjA2MzY0OjQxY2UzMjBjYzA0MzY1NTJhMGQ5MGRkNTNiYThlODc1NjgwZTUyMjU=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-03-16T23:41:36Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-03-16T23:41:36Z"},"message":"OPENJPA-1577: disable query cache when user-defined field strategy is used.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@924055 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b25927d1c512f8884ee142856c83fb7e7cdf3c3d","url":"https://api.github.com/repos/apache/openjpa/git/trees/b25927d1c512f8884ee142856c83fb7e7cdf3c3d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/41ce320cc0436552a0d90dd53ba8e875680e5225","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/41ce320cc0436552a0d90dd53ba8e875680e5225","html_url":"https://github.com/apache/openjpa/commit/41ce320cc0436552a0d90dd53ba8e875680e5225","comments_url":"https://api.github.com/repos/apache/openjpa/commits/41ce320cc0436552a0d90dd53ba8e875680e5225/comments","author":null,"committer":null,"parents":[{"sha":"3b15fe9e2d66895dbdb2d722ebcae175b98817c2","url":"https://api.github.com/repos/apache/openjpa/commits/3b15fe9e2d66895dbdb2d722ebcae175b98817c2","html_url":"https://github.com/apache/openjpa/commit/3b15fe9e2d66895dbdb2d722ebcae175b98817c2"}],"stats":{"total":44,"additions":43,"deletions":1},"files":[{"sha":"67fabc80a517e0fc95640baf7bcc1b9aa5877397","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","status":"modified","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/41ce320cc0436552a0d90dd53ba8e875680e5225/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/41ce320cc0436552a0d90dd53ba8e875680e5225/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java?ref=41ce320cc0436552a0d90dd53ba8e875680e5225","patch":"@@ -27,6 +27,7 @@\n import java.util.Map;\n \n import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.MappingRepository;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.sql.LogicalUnion;\n@@ -177,6 +178,10 @@ public Exclusion initialize(Object result) {\n         SQLBuffer buffer = selector.getSQL();\n         if (buffer == null)\n             return new PreparedQueryCacheImpl.StrongExclusion(_id, _loc.get(\"exclude-no-sql\", _id).getMessage());;\n+        boolean useFieldStrategy = isUsingFieldStrategy(); \n+        if (useFieldStrategy)\n+            return new PreparedQueryCacheImpl.StrongExclusion(_id, \n+                _loc.get(\"exclude-user-strategy\", _id).getMessage());;\n         setTargetQuery(buffer.getSQL());\n         setParameters(buffer.getParameters());\n         setUserParameterPositions(buffer.getUserParameters());\n@@ -253,7 +258,28 @@ private boolean isUsingExternalizedParameter(QueryExpressions exp) {\n         }\n         return false;\n     }\n+    \n+    private boolean isUsingFieldStrategy() {\n+        for (int i = 0; i < _exps.length; i++) {\n+            if (isUsingFieldStrategy(_exps[i])) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n \n+    private boolean isUsingFieldStrategy(QueryExpressions exp) {\n+        if (exp == null)\n+            return false;\n+        List<FieldMetaData> fmds = exp.getParameterizedFields();\n+        if (fmds == null || fmds.isEmpty())\n+            return false;\n+        for (FieldMetaData fmd : fmds) {\n+            if (((FieldMapping)fmd).getMappingInfo().getStrategy() != null)\n+                return true;\n+        }\n+        return false;\n+    }\n     \n     /**\n      * Merge the given user parameters with its own parameter. The given map"},{"sha":"e925ed7b923825362924d3b9f971c20b7f65162c","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/41ce320cc0436552a0d90dd53ba8e875680e5225/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/41ce320cc0436552a0d90dd53ba8e875680e5225/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties?ref=41ce320cc0436552a0d90dd53ba8e875680e5225","patch":"@@ -166,4 +166,6 @@ exclude-not-select-rop: Query \"{0}\" is not cached because its result \\\n exclude-not-executor: Query \"{0}\" is not cached because it was not executed on a \\\n     data store.    \n exclude-externalized-param: Query \"{0}\" is not cached because some parameterized \\\n-    field values are externalized.  \n\\ No newline at end of file\n+    field values are externalized.  \n+exclude-user-strategy: This query \"{0}\" is not cached because some parameterized \\\n+    field value depends on user-defined field strategy.        \n\\ No newline at end of file"},{"sha":"5f131af61cd32711ffe8aaec2c2ad3321312c4c9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/41ce320cc0436552a0d90dd53ba8e875680e5225/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java","raw_url":"https://github.com/apache/openjpa/raw/41ce320cc0436552a0d90dd53ba8e875680e5225/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java?ref=41ce320cc0436552a0d90dd53ba8e875680e5225","patch":"@@ -21,6 +21,8 @@\n import java.awt.*;\n import java.util.Map;\n \n+import javax.persistence.Query;\n+\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.Discriminator;\n@@ -327,5 +329,17 @@ public void testInsertAndRetrieveMappedSuperWithStrategy() {\n         assertEquals(\"name1\", pc.getName());\n         assertEquals(1.0, pc.getPoint().getX());\n         assertEquals(2.0, pc.getPoint().getY());\n+        \n+        for (int i = 0; i < 2; i++) {\n+            Query query = em.createQuery(\"select s from NonstandardMappingEntity4 s where s.point = :point\");\n+            query.setParameter(\"point\", new Point(1, 2));\n+            java.util.List<NonstandardMappingEntity4> list = query.getResultList();\n+            for (NonstandardMappingEntity4 pc1 : list) {\n+                assertEquals(1.0, pc1.getPoint().getX());\n+                assertEquals(2.0, pc1.getPoint().getY());\n+            }\n+            em.clear();\n+        }\n+        \n         em.close();\n     }}"}]}

