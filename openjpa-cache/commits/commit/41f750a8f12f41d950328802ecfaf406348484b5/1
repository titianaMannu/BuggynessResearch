{"sha":"41f750a8f12f41d950328802ecfaf406348484b5","node_id":"MDY6Q29tbWl0MjA2MzY0OjQxZjc1MGE4ZjEyZjQxZDk1MDMyODgwMmVjZmFmNDA2MzQ4NDg0YjU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-29T01:48:55Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-29T01:48:55Z"},"message":"OPENJPA-1337: Push/Pop fetch plan with find()/refresh() \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@830825 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"042b87be6d540f5e4b9cad2d027d914e44537690","url":"https://api.github.com/repos/apache/openjpa/git/trees/042b87be6d540f5e4b9cad2d027d914e44537690"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/41f750a8f12f41d950328802ecfaf406348484b5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/41f750a8f12f41d950328802ecfaf406348484b5","html_url":"https://github.com/apache/openjpa/commit/41f750a8f12f41d950328802ecfaf406348484b5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/41f750a8f12f41d950328802ecfaf406348484b5/comments","author":null,"committer":null,"parents":[{"sha":"dee384cb3cc143fd46f3a9db54832759a884d949","url":"https://api.github.com/repos/apache/openjpa/commits/dee384cb3cc143fd46f3a9db54832759a884d949","html_url":"https://github.com/apache/openjpa/commit/dee384cb3cc143fd46f3a9db54832759a884d949"}],"stats":{"total":18,"additions":5,"deletions":13},"files":[{"sha":"2667afa6065d8aa5d35fedbf01ad1a2046d9152d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAProperties.java","status":"modified","additions":5,"deletions":13,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/41f750a8f12f41d950328802ecfaf406348484b5/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAProperties.java","raw_url":"https://github.com/apache/openjpa/raw/41f750a8f12f41d950328802ecfaf406348484b5/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAProperties.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAProperties.java?ref=41f750a8f12f41d950328802ecfaf406348484b5","patch":"@@ -85,7 +85,6 @@ public static boolean isValidKey(String key) {\n     /**\n      * Gets a bean-style property name from the given key.\n      * \n-     * \n      * @param key must begin with JPA property prefix <code>javax.persistence</code>\n      * \n      * @return concatenates each part of the string leaving out <code>javax.persistence.</code> prefix. \n@@ -102,14 +101,6 @@ public static String getBeanProperty(String key) {\n         return buf.toString();\n     }\n     \n-    public static CacheRetrieveMode getCacheRetrieveMode(Map<String,Object> props) {\n-        return getEnumValue(CacheRetrieveMode.class, CacheRetrieveMode.values(), CACHE_RETRIEVE_MODE, props);\n-    }\n-    \n-    static CacheStoreMode getCacheStoreMode(Map<String,Object> props) {\n-        return getEnumValue(CacheStoreMode.class, CacheStoreMode.values(), CACHE_STORE_MODE, props);\n-    }\n-    \n     static <E extends Enum<E>> E get(Class<E> type, String key, Map<String,Object> prop) {\n         return getEnumValue(type, null, key, prop);\n     }\n@@ -119,17 +110,18 @@ static CacheStoreMode getCacheStoreMode(Map<String,Object> props) {\n      * \n      * @return the same value if the given key is not a valid JPA property key or the value is null.\n      */\n-    public static Object convertValue(String key, Object value) {\n+    public static <T> T  convertValue(Class<T> resultType, String key, Object value) {\n         if (value == null)\n             return null;\n         if (JPAProperties.isValidKey(key)) {\n+            // works because enum values are identical String\n             if (value instanceof CacheRetrieveMode) {\n-                return DataCacheRetrieveMode.valueOf(value.toString());\n+                return (T)DataCacheRetrieveMode.valueOf(value.toString());\n             } else if (value instanceof CacheStoreMode) {\n-                return DataCacheStoreMode.valueOf(value.toString());\n+                return (T)DataCacheStoreMode.valueOf(value.toString());\n             }\n         }\n-        return value;\n+        return (T)value;\n     }\n     \n     "}]}

