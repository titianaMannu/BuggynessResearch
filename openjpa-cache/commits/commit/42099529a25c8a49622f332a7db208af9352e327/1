{"sha":"42099529a25c8a49622f332a7db208af9352e327","node_id":"MDY6Q29tbWl0MjA2MzY0OjQyMDk5NTI5YTI1YzhhNDk2MjJmMzMyYTdkYjIwOGFmOTM1MmUzMjc=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2011-08-15T16:36:07Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2011-08-15T16:36:07Z"},"message":"OPENJPA-2039: Select FKs for fields that are in the DFG, but not in active fetchplan.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1157903 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6904cc0f591bf8b6ef5a0cf6da11ab218af6fe16","url":"https://api.github.com/repos/apache/openjpa/git/trees/6904cc0f591bf8b6ef5a0cf6da11ab218af6fe16"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/42099529a25c8a49622f332a7db208af9352e327","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/42099529a25c8a49622f332a7db208af9352e327","html_url":"https://github.com/apache/openjpa/commit/42099529a25c8a49622f332a7db208af9352e327","comments_url":"https://api.github.com/repos/apache/openjpa/commits/42099529a25c8a49622f332a7db208af9352e327/comments","author":null,"committer":null,"parents":[{"sha":"eb7fb7421fbfbd5e4e440c03472d113e7db3f6de","url":"https://api.github.com/repos/apache/openjpa/commits/eb7fb7421fbfbd5e4e440c03472d113e7db3f6de","html_url":"https://github.com/apache/openjpa/commit/eb7fb7421fbfbd5e4e440c03472d113e7db3f6de"}],"stats":{"total":244,"additions":229,"deletions":15},"files":[{"sha":"b24525f7a583eca6195fa81493484b0cc3e3ca7f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":16,"deletions":15,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/42099529a25c8a49622f332a7db208af9352e327/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/42099529a25c8a49622f332a7db208af9352e327/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=42099529a25c8a49622f332a7db208af9352e327","patch":"@@ -97,8 +97,7 @@\n  * @author Abe White\n  * @nojavadoc\n  */\n-public class JDBCStoreManager \n-    implements StoreManager, JDBCStore {\n+public class JDBCStoreManager implements StoreManager, JDBCStore {\n \n     private static final Localizer _loc = Localizer.forPackage\n         (JDBCStoreManager.class);\n@@ -112,7 +111,8 @@\n     private RefCountConnection _conn = null;\n     private boolean _active = false;\n     private Log _log = null;\n-\n+    boolean _ignoreDfgForFkSelect = false;\n+    \n     // track the pending statements so we can cancel them\n     private Set<Statement> _stmnts = Collections.synchronizedSet(new HashSet<Statement>());\n \n@@ -1404,17 +1404,16 @@ private int selectBaseMappings(Select sel, ClassMapping mapping,\n     }\n \n     /**\n-     * When selecting fieldes, a special case is made for mappings that use\n-     * 2-part selects that aren't explicitly *not* in the dfg so that they\n-     * can get their primary table data. This method tests for that special\n-     * case as an optimization.\n+     * When selecting fields, a special case is made for mappings that use 2-part selects that aren't explicitly *not*\n+     * in the dfg so that they can get their primary table data. This method tests for that special case as an\n+     * optimization.\n      */\n-    private boolean optSelect(FieldMapping fm, Select sel,\n-        OpenJPAStateManager sm, JDBCFetchConfiguration fetch) {\n-        return !fm.isInDefaultFetchGroup() \n-             && !fm.isDefaultFetchGroupExplicit()\n-            && (sm == null || sm.getPCState() == PCState.TRANSIENT \n-            || !sm.getLoaded().get(fm.getIndex()))\n+    private boolean optSelect(FieldMapping fm, Select sel, OpenJPAStateManager sm, JDBCFetchConfiguration fetch) {\n+        boolean dfg =\n+            _ignoreDfgForFkSelect || \n+                !fm.isInDefaultFetchGroup() && !fm.isDefaultFetchGroupExplicit();\n+\n+        return dfg && (sm == null || sm.getPCState() == PCState.TRANSIENT || !sm.getLoaded().get(fm.getIndex()))\n             && fm.supportsSelect(sel, Select.TYPE_TWO_PART, sm, this, fetch) > 0;\n     }\n \n@@ -1552,10 +1551,12 @@ FinderCache getFinderCache() {\n              ? getConfiguration().getFinderCacheInstance() : null;\n     }\n \n+    public void setIgnoreDfgForFkSelect(boolean b) {\n+        _ignoreDfgForFkSelect = b;\n+    }\n \n     /**\n-     * Connection returned to client code. Makes sure its wrapped connection\n-     * ref count is decremented on finalize.\n+     * Connection returned to client code. Makes sure its wrapped connection ref count is decremented on finalize.\n      */\n     public abstract static class ClientConnection extends\n             DelegatingConnection {"},{"sha":"b6d39a814b55777940f10763da74e302576dc418","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/OptSelectEntity.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/42099529a25c8a49622f332a7db208af9352e327/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/OptSelectEntity.java","raw_url":"https://github.com/apache/openjpa/raw/42099529a25c8a49622f332a7db208af9352e327/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/OptSelectEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/OptSelectEntity.java?ref=42099529a25c8a49622f332a7db208af9352e327","patch":"@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class OptSelectEntity {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    int id;\n+\n+    @Version\n+    int version;\n+\n+    @OneToOne\n+    OptSelectEntity eagerOneToOne;\n+\n+    @OneToOne(mappedBy = \"eagerOneToOne\")\n+    OptSelectEntity eagerOneToOneOwner;\n+\n+    @OneToOne(fetch = FetchType.LAZY)\n+    OptSelectEntity lazyOneToOne;\n+\n+    @OneToOne(mappedBy = \"lazyOneToOne\", fetch = FetchType.LAZY)\n+    OptSelectEntity lazyOneToOneOwner;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public OptSelectEntity getEagerOneToOne() {\n+        return eagerOneToOne;\n+    }\n+\n+    public void setEagerOneToOne(OptSelectEntity eagerOneToOne) {\n+        this.eagerOneToOne = eagerOneToOne;\n+    }\n+\n+    public OptSelectEntity getEagerOneToOneOwner() {\n+        return eagerOneToOneOwner;\n+    }\n+\n+    public void setEagerOneToOneOwner(OptSelectEntity eagerOneToOneOwner) {\n+        this.eagerOneToOneOwner = eagerOneToOneOwner;\n+    }\n+\n+    public OptSelectEntity getLazyOneToOne() {\n+        return lazyOneToOne;\n+    }\n+\n+    public void setLazyOneToOne(OptSelectEntity lazyOneToOne) {\n+        this.lazyOneToOne = lazyOneToOne;\n+    }\n+\n+    public OptSelectEntity getLazyOneToOneOwner() {\n+        return lazyOneToOneOwner;\n+    }\n+\n+    public void setLazyOneToOneOwner(OptSelectEntity lazyOneToOneOwner) {\n+        this.lazyOneToOneOwner = lazyOneToOneOwner;\n+    }\n+\n+}"},{"sha":"dabab8adb2bdfad4ae3a6fec017a5f782f2965f5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestJDBCStoreOptSelect.java","status":"added","additions":127,"deletions":0,"changes":127,"blob_url":"https://github.com/apache/openjpa/blob/42099529a25c8a49622f332a7db208af9352e327/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestJDBCStoreOptSelect.java","raw_url":"https://github.com/apache/openjpa/raw/42099529a25c8a49622f332a7db208af9352e327/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestJDBCStoreOptSelect.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestJDBCStoreOptSelect.java?ref=42099529a25c8a49622f332a7db208af9352e327","patch":"@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.kernel.StateManagerImpl;\n+import org.apache.openjpa.kernel.StoreManager;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.meta.MetaDataRepository;\n+import org.apache.openjpa.persistence.EntityManagerImpl;\n+import org.apache.openjpa.persistence.FetchPlan;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+public class TestJDBCStoreOptSelect extends SQLListenerTestCase {\n+    Object[] props = new Object[] { CLEAR_TABLES, OptSelectEntity.class };\n+    OptSelectEntity e1, e2;\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp(props);\n+        createData();\n+    }\n+\n+    public void test() {\n+        OpenJPAEntityManagerSPI em = emf.createEntityManager();\n+        StoreManager store = ((EntityManagerImpl) em).getBroker().getStoreManager().getDelegate();\n+\n+        FetchPlan fp = getFetchPlan(em);\n+        try {\n+            sql.clear();\n+\n+            if (store instanceof JDBCStoreManager == false) {\n+                fail(\"StoreManager is not an instanceof JDBCStoreManager\");\n+            }\n+            // Set this JDBCStoreManager property so that we will select FKs for fields that are in the DFG, but not\n+            // included in the current select.\n+            ((JDBCStoreManager) store).setIgnoreDfgForFkSelect(true);\n+\n+            // Remove all relationships\n+            fp.removeField(OptSelectEntity.class, \"eagerOneToOne\");\n+            fp.removeField(OptSelectEntity.class, \"eagerOneToOneOwner\");\n+            fp.removeField(OptSelectEntity.class, \"lazyOneToOne\");\n+            fp.removeField(OptSelectEntity.class, \"lazyOneToOneOwner\");\n+\n+            OptSelectEntity ee1 = em.find(OptSelectEntity.class, e1.getId());\n+\n+            // Make sure our sql has no joins\n+            assertEquals(1, sql.size());\n+            String s = sql.get(0);\n+            assertFalse(s.contains(\"JOIN\") && s.contains(\"join\"));\n+\n+            // Check to see how many fks(intermediate fields) we selected.\n+            StateManagerImpl smi = ((StateManagerImpl) ((PersistenceCapable) ee1).pcGetStateManager());\n+            ClassMetaData cmd =\n+                em.getConfiguration().getMetaDataRepositoryInstance().getMetaData(OptSelectEntity.class, null, true);\n+            int fks = 0;\n+            for (FieldMetaData fmd : cmd.getFields()) {\n+                if (smi.getIntermediate(fmd.getIndex()) != null) {\n+                    fks++;\n+                }\n+            }\n+            assertEquals(2, fks);\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+            if (em.isOpen()) {\n+                em.close();\n+            }\n+        }\n+    }\n+\n+    private FetchPlan getFetchPlan(OpenJPAEntityManagerSPI em) {\n+        MetaDataRepository mdr = em.getConfiguration().getMetaDataRepositoryInstance();\n+        FetchPlan fp = em.pushFetchPlan();\n+        fp.removeFetchGroups(fp.getFetchGroups());\n+        for (Class<?> cls : new Class<?>[] { OptSelectEntity.class }) {\n+            ClassMetaData cmd = mdr.getMetaData(cls, null, true);\n+            for (FieldMetaData fmd : cmd.getFields()) {\n+                fp.addField(cls, fmd.getName());\n+            }\n+        }\n+        return fp;\n+    }\n+\n+    void createData() {\n+        OpenJPAEntityManagerSPI em = emf.createEntityManager();\n+        try {\n+            em.getTransaction().begin();\n+            e1 = new OptSelectEntity();\n+            e2 = new OptSelectEntity();\n+\n+            e1.setEagerOneToOne(e2);\n+            e2.setEagerOneToOneOwner(e2);\n+\n+            e1.setLazyOneToOne(e2);\n+            e2.setLazyOneToOneOwner(e1);\n+\n+            em.persistAll(e1, e2);\n+\n+            em.getTransaction().commit();\n+        } finally {\n+            if (em.getTransaction().isActive())\n+                em.getTransaction().rollback();\n+            if (em.isOpen())\n+                em.close();\n+        }\n+    }\n+}"}]}

