{"sha":"426db6e2b63b7004d054df5408cbc24ba9800702","node_id":"MDY6Q29tbWl0MjA2MzY0OjQyNmRiNmUyYjYzYjcwMDRkMDU0ZGY1NDA4Y2JjMjRiYTk4MDA3MDI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-07-26T17:32:01Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-07-26T17:32:01Z"},"message":"OPENJPA-1719: Prepared SQL cache user parameter ordering problem with subqueries. Merged from Catalina's changes for trunk.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@979375 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"96e71b0bcfff57374d2f9ed349d01621b2399fe4","url":"https://api.github.com/repos/apache/openjpa/git/trees/96e71b0bcfff57374d2f9ed349d01621b2399fe4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/426db6e2b63b7004d054df5408cbc24ba9800702","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/426db6e2b63b7004d054df5408cbc24ba9800702","html_url":"https://github.com/apache/openjpa/commit/426db6e2b63b7004d054df5408cbc24ba9800702","comments_url":"https://api.github.com/repos/apache/openjpa/commits/426db6e2b63b7004d054df5408cbc24ba9800702/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"2b92c3586a87dca68f09ed16a52d4ba531473959","url":"https://api.github.com/repos/apache/openjpa/commits/2b92c3586a87dca68f09ed16a52d4ba531473959","html_url":"https://github.com/apache/openjpa/commit/2b92c3586a87dca68f09ed16a52d4ba531473959"}],"stats":{"total":41,"additions":33,"deletions":8},"files":[{"sha":"d98483e7287c54d29510c693e9c93bf1a6c0bab7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/426db6e2b63b7004d054df5408cbc24ba9800702/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","raw_url":"https://github.com/apache/openjpa/raw/426db6e2b63b7004d054df5408cbc24ba9800702/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java?ref=426db6e2b63b7004d054df5408cbc24ba9800702","patch":"@@ -166,13 +166,12 @@ else if (_cols != null)\n                         _userParams = new ArrayList();\n                     _userParams.addAll(paramIndex, buf._userParams);\n                 }\n-                 if (buf._userIndex != null) {\n+                if (buf._userIndex != null) {\n                      if (_userIndex == null) {\n                          _userIndex = new ArrayList();\n-                         _userIndex.addAll(buf._userIndex);\n-                     } else\n-                         _userIndex.addAll(paramIndex*2, buf._userIndex);\n-                 }\n+                     }\n+                     _userIndex.addAll(buf._userIndex);\n+                }\n                 if (buf._cols != null)\n                     _cols.addAll(paramIndex, buf._cols);\n                 else if (_cols != null)"},{"sha":"4239f51fef6914905dc73d7b6e2f2acc60fce795","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","status":"modified","additions":29,"deletions":3,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/426db6e2b63b7004d054df5408cbc24ba9800702/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/426db6e2b63b7004d054df5408cbc24ba9800702/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java?ref=426db6e2b63b7004d054df5408cbc24ba9800702","patch":"@@ -47,7 +47,6 @@\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.openjpa.persistence.OpenJPAQuery;\n import org.apache.openjpa.persistence.jdbc.sqlcache.Employee.Category;\n-import org.apache.openjpa.persistence.test.AllowFailure;\n \n /**\n  * Tests correctness and performance of queries with and without Prepared Query Cacheing.\n@@ -756,8 +755,7 @@ public void testQueryWithEagerRelationIsNotCached() {\n         assertFalse(book2.getAuthors().isEmpty());\n     }\n \n-    @AllowFailure(message=\"We have problems with reparametrization of subquery + constant literals\")\n-    public void xtestQueryWithUserDefinedAndInternalParamtersInSubquery() {\n+    public void testQueryWithUserDefinedAndInternalParamtersInSubquery() {\n         String jpql = \"Select a From Address a Where Not Exists (\"\n             + \"     Select s.id From Singer As s Where \"\n             + \"        s.address = a  And \"\n@@ -887,6 +885,34 @@ public void testNoParameterOnExternalizedFieldIsIncluded() {\n        assertFalse(q2.getResultList().isEmpty());\n     }\n     \n+    public void testSubqueryParameters() {\n+        EntityManager em = emf.createEntityManager();\n+        String query = \"select e from Employee e \"\n+            + \"inner join e.department d \"\n+            + \"inner join d.company c \"\n+            + \"where mod(c.startYear, 100) = 0 \"\n+            + \"and exists (select e2 from Employee e2 \"\n+                + \"inner join e2.department d2 \"\n+                + \"inner join d2.company c2 \"\n+                + \"where e2.address.city = e.address.city \"\n+                + \"and e2.isManager = false \"\n+                + \"and d2.name = d.name \"\n+                + \"and c2.name = :companyName) \"\n+            + \"and d.name = :departmentName\";\n+\n+        em.getTransaction().begin();\n+        TypedQuery<Employee> q1 = em.createQuery(query, Employee.class);\n+        q1.setParameter(\"companyName\", \"acme.org\");\n+        q1.setParameter(\"departmentName\", \"Engineering\");\n+        assertEquals(q1.getResultList().size(), 6);\n+\n+        TypedQuery<Employee> q2 = em.createQuery(query, Employee.class);\n+        q2.setParameter(\"companyName\", \"acme.org\");\n+        q2.setParameter(\"departmentName\", \"Engineering\");\n+        assertEquals(q2.getResultList().size(), 6);\n+        em.getTransaction().rollback();\n+    }\n+\n     public void testRepeatedParameterInSubqueryInDifferentOrder() {\n         OpenJPAEntityManager em = emf.createEntityManager();\n         String jpql =  \"select o from OrderJPA o \" "}]}

