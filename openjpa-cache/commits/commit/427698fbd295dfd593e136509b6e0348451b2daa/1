{"sha":"427698fbd295dfd593e136509b6e0348451b2daa","node_id":"MDY6Q29tbWl0MjA2MzY0OjQyNzY5OGZiZDI5NWRmZDU5M2UxMzY1MDliNmUwMzQ4NDUxYjJkYWE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-10-21T18:34:23Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-10-21T18:34:23Z"},"message":"OPENJPA-1308:\nRemove extraneous cast of VARCHAR to VARCHAR for DB2.\nSubmitted By: B.J. Reed\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@828134 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e4ecce75917859eb17a91406701dfc228e7fe17c","url":"https://api.github.com/repos/apache/openjpa/git/trees/e4ecce75917859eb17a91406701dfc228e7fe17c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/427698fbd295dfd593e136509b6e0348451b2daa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/427698fbd295dfd593e136509b6e0348451b2daa","html_url":"https://github.com/apache/openjpa/commit/427698fbd295dfd593e136509b6e0348451b2daa","comments_url":"https://api.github.com/repos/apache/openjpa/commits/427698fbd295dfd593e136509b6e0348451b2daa/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"04835f7c98c1337b990dab68b8ef51d33dcd7950","url":"https://api.github.com/repos/apache/openjpa/commits/04835f7c98c1337b990dab68b8ef51d33dcd7950","html_url":"https://github.com/apache/openjpa/commit/04835f7c98c1337b990dab68b8ef51d33dcd7950"}],"stats":{"total":343,"additions":338,"deletions":5},"files":[{"sha":"0f2bbb3e5ed1c1acf6638690bf314ba4fd695eb6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/427698fbd295dfd593e136509b6e0348451b2daa/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java","raw_url":"https://github.com/apache/openjpa/raw/427698fbd295dfd593e136509b6e0348451b2daa/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java?ref=427698fbd295dfd593e136509b6e0348451b2daa","patch":"@@ -43,7 +43,11 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         DBDictionary dict = ctx.store.getDBDictionary();\n         String func = dict.toLowerCaseFunction;\n         dict.assertSupport(func != null, \"ToLowerCaseFunction\");\n-        func = dict.getCastFunction(getValue(), func);\n+        if (getValue() instanceof PCPath) {\n+            func = dict.getCastFunction(getValue(), func, ((PCPath) getValue()).getFieldMapping(state).getColumns()[0]);\n+        } else {\n+            func = dict.getCastFunction(getValue(), func);\n+        }\n \n         int idx = func.indexOf(\"{0}\");\n         buf.append(func.substring(0, idx));"},{"sha":"3719627ff28305854eefcf5b12d405eb2d628935","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/427698fbd295dfd593e136509b6e0348451b2daa/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java","raw_url":"https://github.com/apache/openjpa/raw/427698fbd295dfd593e136509b6e0348451b2daa/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java?ref=427698fbd295dfd593e136509b6e0348451b2daa","patch":"@@ -43,7 +43,11 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         DBDictionary dict = ctx.store.getDBDictionary();\n         String func = dict.toUpperCaseFunction;\n         dict.assertSupport(func != null, \"ToUpperCaseFunction\");\n-        func = dict.getCastFunction(getValue(), func);\n+        if (getValue() instanceof PCPath) {\n+            func = dict.getCastFunction(getValue(), func, ((PCPath) getValue()).getFieldMapping(state).getColumns()[0]);\n+        } else {\n+            func = dict.getCastFunction(getValue(), func);\n+        }\n \n         int idx = func.indexOf(\"{0}\");\n         buf.append(func.substring(0, idx));"},{"sha":"042ec08ae977e481effe6921862ad01a0d9bbb00","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/427698fbd295dfd593e136509b6e0348451b2daa/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/427698fbd295dfd593e136509b6e0348451b2daa/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java?ref=427698fbd295dfd593e136509b6e0348451b2daa","patch":"@@ -36,8 +36,6 @@ public AbstractDB2Dictionary() {\n \n         // DB2-based databases have restrictions on having uncast parameters\n         // in string functions\n-        toUpperCaseFunction = \"UPPER(CAST({0} AS VARCHAR(1000)))\";\n-        toLowerCaseFunction = \"LOWER(CAST({0} AS VARCHAR(1000)))\";\n         stringLengthFunction = \"LENGTH({0})\";\n         concatenateFunction = \"(CAST({0} AS VARCHAR(1000)))||\"\n             + \"(CAST({1} AS VARCHAR(1000)))\";\n@@ -56,6 +54,7 @@ public AbstractDB2Dictionary() {\n         supportsLockingWithOuterJoin = false;\n         supportsLockingWithInnerJoin = false;\n         supportsLockingWithSelectRange = true;\n+        supportsCaseConversionForLob = true;\n \n         requiresAutoCommitForMetaData = true;\n         requiresAliasForSubselect = true;"},{"sha":"3a52c100287d6f351f077f32f283b8fd0167bc32","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/427698fbd295dfd593e136509b6e0348451b2daa/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/427698fbd295dfd593e136509b6e0348451b2daa/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=427698fbd295dfd593e136509b6e0348451b2daa","patch":"@@ -675,6 +675,31 @@ public String getCastFunction(Val val, String func) {\n         return func;\n     }\n \n+    /**\n+     * Return the correct CAST function syntax\n+     * \n+     * @param val operand of cast\n+     * @param func original string\n+     * @param col database column\n+     * @return a String with the correct CAST function syntax\n+     */\n+    public String getCastFunction(Val val, String func, Column col) {\n+        boolean doCast = false;\n+        if (val instanceof Lit || val instanceof Param) {\n+            doCast = true;\n+        }\n+        // cast anything not already a VARCHAR to VARCHAR\n+        if (col.getType() != Types.VARCHAR) {\n+            doCast = true;\n+        }\n+        if (doCast == true) {\n+            if (func.indexOf(\"VARCHAR\") == -1) {\n+                func = addCastAsString(func, \"{0}\", \" AS VARCHAR(1000)\");\n+            }\n+        }\n+        return func;\n+    }\n+\n     public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,\n             FilterValue start) {\n         if (find.getValue() != null) { // non constants"},{"sha":"447d7622c824d92a1d09204c97dccaa62b389318","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":15,"deletions":1,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/427698fbd295dfd593e136509b6e0348451b2daa/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/427698fbd295dfd593e136509b6e0348451b2daa/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=427698fbd295dfd593e136509b6e0348451b2daa","patch":"@@ -213,6 +213,7 @@\n     public boolean requiresCastForComparisons = false;\n     public boolean supportsModOperator = false;\n     public boolean supportsXMLColumn = false;\n+    public boolean supportsCaseConversionForLob = false;\n \n     /**\n      * Some Databases append whitespace after the schema name\n@@ -4025,7 +4026,20 @@ public String getVersionColumn(Column column, String tableAlias) {\n     public String getCastFunction(Val val, String func) {\n         return func;\n     }\n-    \n+\n+    /**\n+     * Return the correct CAST function syntax.  This should be overriden by subclasses\n+     * that need access to the Column information.\n+     * \n+     * @param val operand of cast\n+     * @param func original string\n+     * @param col database column\n+     * @return a String with the correct CAST function syntax\n+     */\n+    public String getCastFunction(Val val, String func, Column col) {\n+        return getCastFunction (val, func);\n+    }\n+\n     /**\n      * Create an index if necessary for some database tables\n      */"},{"sha":"bfc1418b8e3c4db3c3c127595faafc3ad83c4fc8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/427698fbd295dfd593e136509b6e0348451b2daa/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/427698fbd295dfd593e136509b6e0348451b2daa/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java?ref=427698fbd295dfd593e136509b6e0348451b2daa","patch":"@@ -40,6 +40,8 @@ public DerbyDictionary() {\n         validationSQL = \"VALUES(1)\";\n         stringLengthFunction = \"LENGTH({0})\";\n         substringFunctionName = \"SUBSTR\";\n+        toUpperCaseFunction = \"UPPER(CAST({0} AS VARCHAR(1000)))\";\n+        toLowerCaseFunction = \"LOWER(CAST({0} AS VARCHAR(1000)))\";\n \n         maxConstraintNameLength = 18;\n         maxIndexNameLength = 18;"},{"sha":"0f0561e29f72f26d59b04ada0437bf201260ef0b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/CompUser.java","status":"added","additions":112,"deletions":0,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/427698fbd295dfd593e136509b6e0348451b2daa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/CompUser.java","raw_url":"https://github.com/apache/openjpa/raw/427698fbd295dfd593e136509b6e0348451b2daa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/CompUser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/CompUser.java?ref=427698fbd295dfd593e136509b6e0348451b2daa","patch":"@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.common.apps;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.Lob;\n+\n+import org.apache.openjpa.persistence.PersistentCollection;\n+\n+@Entity\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n+public class CompUser {\n+    @Basic\n+    @Column(length = 50)\n+    private String name;\n+\n+    @Basic\n+    private int age;\n+\n+    @Basic\n+    @Column(name = \"compName\", length = 50)\n+    private String computerName;\n+\n+    @Basic\n+    @Lob\n+    private String nameAsLob;\n+\n+    @PersistentCollection\n+    private String[] nicknames = new String[0];\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    public int userid;\n+\n+    public CompUser() {\n+    }\n+\n+    public CompUser(String name, String cName, int age) {\n+        this.name = name;\n+        this.computerName = cName;\n+        this.age = age;\n+        this.nameAsLob = name;\n+    }\n+\n+    public String getComputerName() {\n+        return computerName;\n+    }\n+\n+    public void setComputerName(String computerName) {\n+        this.computerName = computerName;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public int getUserid() {\n+        return userid;\n+    }\n+\n+    public int getAge() {\n+        return age;\n+    }\n+\n+    public void setAge(int age) {\n+        this.age = age;\n+    }\n+\n+    public String getNameAsLob() {\n+        return nameAsLob;\n+    }\n+\n+    public void setNameAsLob(String nameAsLob) {\n+        this.nameAsLob = nameAsLob;\n+    }\n+\n+    public String[] getNicknames() {\n+        return nicknames;\n+    }\n+\n+    public void setNicknames(String[] nicknames) {\n+        this.nicknames = nicknames;\n+    }\n+\n+}"},{"sha":"e867b10e45f6895b2d64426d0087fde76c2f37a9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java","status":"added","additions":173,"deletions":0,"changes":173,"blob_url":"https://github.com/apache/openjpa/blob/427698fbd295dfd593e136509b6e0348451b2daa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java","raw_url":"https://github.com/apache/openjpa/raw/427698fbd295dfd593e136509b6e0348451b2daa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java?ref=427698fbd295dfd593e136509b6e0348451b2daa","patch":"@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jpql.functions;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.common.apps.CompUser;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestEJBQLFunction extends SingleEMFTestCase {\n+\n+    private int userid3, userid5;\n+\n+    public void setUp() {\n+        setUp(CompUser.class, CLEAR_TABLES);\n+\n+        CompUser user1 = createUser(\"Seetha\", \"MAC\", 36, true);\n+        CompUser user2 = createUser(\"Shannon \", \"PC\", 36, false);\n+        CompUser user3 = createUser(\"Ugo\", \"PC\", 19, true);\n+        CompUser user4 = createUser(\"_Jacob\", \"LINUX\", 10, true);\n+        CompUser user5 = createUser(\"Famzy\", \"UNIX\", 29, false);\n+        CompUser user6 = createUser(\"Shade\", \"UNIX\", 23, false);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(user1);\n+        em.persist(user2);\n+        em.persist(user3);\n+        userid3 = user3.getUserid();\n+        em.persist(user4);\n+        em.persist(user5);\n+        userid5 = user5.getUserid();\n+        em.persist(user6);\n+        em.getTransaction().commit();\n+        em.clear();\n+        em.close();\n+    }\n+\n+    public void testLowerFunc() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        CompUser user = em.find(CompUser.class, userid3);\n+        assertNotNull(user);\n+        assertEquals(\"Ugo\", user.getName());\n+\n+        String query = \"UPDATE CompUser e SET \" +\n+            \"e.name = LOWER(e.name) WHERE e.name='Ugo'\";\n+\n+        int result = em.createQuery(query).executeUpdate();\n+\n+        user = em.find(CompUser.class, userid3);\n+        em.refresh(user);\n+        assertNotNull(user);\n+        assertEquals(\"ugo\", user.getName());\n+\n+        em.getTransaction().commit();\n+        em.clear();\n+        em.close();\n+    }\n+\n+    public void testLowerClobFunc() {\n+        OpenJPAEntityManagerSPI em = emf.createEntityManager();\n+        // some databases do not support case conversion on LOBs,\n+        // just skip this test case\n+        DBDictionary dict = ((JDBCConfiguration) em.getConfiguration())\n+            .getDBDictionaryInstance();\n+        if (!dict.supportsCaseConversionForLob) {\n+            return;\n+        }\n+        em.getTransaction().begin();\n+\n+        CompUser user = em.find(CompUser.class, userid5);\n+        assertNotNull(user);\n+        assertEquals(\"Famzy\", user.getName());\n+\n+        String query = \"UPDATE CompUser e SET \" +\n+                \"e.name = LOWER(e.name) WHERE LOWER(e.nameAsLob)='famzy'\";\n+\n+        int result = em.createQuery(query).executeUpdate();\n+\n+        user = em.find(CompUser.class, userid5);\n+        em.refresh(user);\n+        assertNotNull(user);\n+        assertEquals(\"famzy\", user.getName());\n+\n+        em.getTransaction().commit();\n+        em.clear();\n+        em.close();\n+    }\n+\n+    public void testUpperFunc() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        CompUser user = em.find(CompUser.class, userid3);\n+        assertNotNull(user);\n+        assertEquals(\"Ugo\", user.getName());\n+\n+        String query = \"UPDATE CompUser e SET \" +\n+            \"e.name = UPPER(e.name) WHERE e.name='Ugo'\";\n+\n+        int result = em.createQuery(query).executeUpdate();\n+\n+        user = em.find(CompUser.class, userid3);\n+        em.refresh(user);\n+        assertNotNull(user);\n+        assertEquals(\"UGO\", user.getName());\n+\n+        em.getTransaction().commit();\n+        em.clear();\n+        em.close();\n+    }\n+\n+    public void testUpperClobFunc() {\n+        OpenJPAEntityManagerSPI em = emf.createEntityManager();\n+        // some databases do not support case conversion on LOBs,\n+        // just skip this test case\n+        DBDictionary dict = ((JDBCConfiguration) em.getConfiguration())\n+            .getDBDictionaryInstance();\n+        if (!dict.supportsCaseConversionForLob) {\n+            return;\n+        }\n+        em.getTransaction().begin();\n+\n+        CompUser user = em.find(CompUser.class, userid5);\n+        assertNotNull(user);\n+        assertEquals(\"Famzy\", user.getName());\n+\n+        String query = \"UPDATE CompUser e SET \" +\n+                \"e.name = UPPER(e.name) WHERE UPPER(e.nameAsLob)='FAMZY'\";\n+\n+        int result = em.createQuery(query).executeUpdate();\n+\n+        user = em.find(CompUser.class, userid5);\n+        em.refresh(user);\n+        assertNotNull(user);\n+        assertEquals(\"FAMZY\", user.getName());\n+\n+        em.getTransaction().commit();\n+        em.clear();\n+        em.close();\n+    }\n+\n+    public CompUser createUser(String name, String cName, int age,\n+        boolean isMale) {\n+        CompUser user = new CompUser();\n+        user.setName(name);\n+        user.setComputerName(cName);\n+        user.setAge(age);\n+        user.setNameAsLob(name);\n+        return user;\n+    }\n+}"}]}

