{"sha":"430d90f05f3bb1512cb07b632e629cd0fdab15b1","node_id":"MDY6Q29tbWl0MjA2MzY0OjQzMGQ5MGYwNWYzYmIxNTEyY2IwN2I2MzJlNjI5Y2QwZmRhYjE1YjE=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-01-12T18:50:53Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-01-12T18:50:53Z"},"message":"git-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@495684 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"381a2e0dc157563b8161c32a55dce5453713b8dd","url":"https://api.github.com/repos/apache/openjpa/git/trees/381a2e0dc157563b8161c32a55dce5453713b8dd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/430d90f05f3bb1512cb07b632e629cd0fdab15b1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/430d90f05f3bb1512cb07b632e629cd0fdab15b1","html_url":"https://github.com/apache/openjpa/commit/430d90f05f3bb1512cb07b632e629cd0fdab15b1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/430d90f05f3bb1512cb07b632e629cd0fdab15b1/comments","author":null,"committer":null,"parents":[{"sha":"3dd1c4316503194058d260ebc5fe6753e50949bc","url":"https://api.github.com/repos/apache/openjpa/commits/3dd1c4316503194058d260ebc5fe6753e50949bc","html_url":"https://github.com/apache/openjpa/commit/3dd1c4316503194058d260ebc5fe6753e50949bc"}],"stats":{"total":22,"additions":5,"deletions":17},"files":[{"sha":"d8938155c025568a85d7812de74b8c572378bede","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":5,"deletions":17,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/430d90f05f3bb1512cb07b632e629cd0fdab15b1/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/430d90f05f3bb1512cb07b632e629cd0fdab15b1/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=430d90f05f3bb1512cb07b632e629cd0fdab15b1","patch":"@@ -1536,7 +1536,7 @@ private void addCopyKeyFieldsToObjectIdMethod(boolean fieldManager)\n                 field = Reflection.findField(oidType, name, true);\n                 reflect = !Modifier.isPublic(field.getModifiers());\n                 if (reflect) {\n-                    code.constant().setValue(oidType);\n+                    code.classconstant().setClass(oidType);\n                     code.constant().setValue(name);\n                     code.constant().setValue(true);\n                     code.invokestatic().setMethod(Reflection.class, \n@@ -1548,9 +1548,9 @@ private void addCopyKeyFieldsToObjectIdMethod(boolean fieldManager)\n                 setter = Reflection.findSetter(oidType, name, type, true);\n                 reflect = !Modifier.isPublic(setter.getModifiers());\n                 if (reflect) {\n-                    code.constant().setValue(oidType);\n+                    code.classconstant().setClass(oidType);\n                     code.constant().setValue(name);\n-                    setClassConstant(_pc, code, type);\n+                    code.classconstant().setClass(type);\n                     code.constant().setValue(true);\n                     code.invokestatic().setMethod(Reflection.class, \n                         \"findSetter\", Method.class, new Class[] { Class.class,\n@@ -1600,18 +1600,6 @@ private void addCopyKeyFieldsToObjectIdMethod(boolean fieldManager)\n         code.calculateMaxLocals();\n     }\n \n-    /**\n-     * Works around a bug in serp with primitive type constants, and chooses\n-     * Java 5 construct when available (serp will eventually do all this\n-     * automatically). \n-     */\n-    private static void setClassConstant(BCClass bc, Code code, Class type) {\n-        if (type.isPrimitive() || bc.getMajorVersion() < 49) // 49 = Java 5\n-            code.classconstant().setClass(type);\n-        else\n-            code.constant().setValue(type);\n-    }\n-\n     /**\n      * Add code to extract the id of the given primary key relation field for\n      * setting into an objectid instance.\n@@ -1881,7 +1869,7 @@ private void addCopyKeyFieldsFromObjectIdMethod(boolean fieldManager)\n                         code.getfield().setField(field);\n                     else {\n                         // Reflection.getXXX(oid, Reflection.findField(...));\n-                        code.constant().setValue(oidType);\n+                        code.classconstant().setClass(oidType);\n                         code.constant().setValue(name);\n                         code.constant().setValue(true);\n                         code.invokestatic().setMethod(Reflection.class,\n@@ -1898,7 +1886,7 @@ private void addCopyKeyFieldsFromObjectIdMethod(boolean fieldManager)\n                         code.invokevirtual().setMethod(getter);\n                     else {\n                         // Reflection.getXXX(oid, Reflection.findGetter(...));\n-                        code.constant().setValue(oidType);\n+                        code.classconstant().setClass(oidType);\n                         code.constant().setValue(name);\n                         code.constant().setValue(true);\n                         code.invokestatic().setMethod(Reflection.class,"}]}

