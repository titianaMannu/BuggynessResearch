{"sha":"434319cfee6140b6eac8cc136f039de50de59b83","node_id":"MDY6Q29tbWl0MjA2MzY0OjQzNDMxOWNmZWU2MTQwYjZlYWM4Y2MxMzZmMDM5ZGU1MGRlNTliODM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-14T20:46:18Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-14T20:46:18Z"},"message":"OPENJPA-659: Dirty checking fails for runtime enhanced classes. The original case reported the failure in a Spring-Tomcat-Weaver with Embdded field. But as TestSimpleUnenhancedQuery can raise the same failure in a simpler settings. The fix is related to initializing a SaveFieldManager conditional to having loaded fields at invocation of saveFields(). The fix removes the condition and ensures that a SaveFieldManager is assocaited even when saveFields() is invoked without any field loaded.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@676727 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5f340621b99a816c4def33e7b53b16576f4fd913","url":"https://api.github.com/repos/apache/openjpa/git/trees/5f340621b99a816c4def33e7b53b16576f4fd913"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/434319cfee6140b6eac8cc136f039de50de59b83","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/434319cfee6140b6eac8cc136f039de50de59b83","html_url":"https://github.com/apache/openjpa/commit/434319cfee6140b6eac8cc136f039de50de59b83","comments_url":"https://api.github.com/repos/apache/openjpa/commits/434319cfee6140b6eac8cc136f039de50de59b83/comments","author":null,"committer":null,"parents":[{"sha":"94814adc3985f88f0c421af765f18abda50f2b69","url":"https://api.github.com/repos/apache/openjpa/commits/94814adc3985f88f0c421af765f18abda50f2b69","html_url":"https://github.com/apache/openjpa/commit/94814adc3985f88f0c421af765f18abda50f2b69"}],"stats":{"total":80,"additions":80,"deletions":0},"files":[{"sha":"89ffff7572f81f863a502f62d154f56a42c03317","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/434319cfee6140b6eac8cc136f039de50de59b83/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/434319cfee6140b6eac8cc136f039de50de59b83/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=434319cfee6140b6eac8cc136f039de50de59b83","patch":"@@ -2660,6 +2660,12 @@ void saveFields(boolean immediate) {\n             for (int i = 0, len = _loaded.length(); i < len; i++)\n                 saveField(i);\n             _flags &= ~FLAG_SAVE;\n+            // OPENJPA-659\n+            // record a saved field manager even if no field is currently loaded\n+            // as existence of a SaveFieldManager is critical for a dirty check\n+            if (_saved == null)\n+            \t_saved = new SaveFieldManager(this, getPersistenceCapable(), \n+            \t\t\t\t_dirty);\n         }\n     }\n "},{"sha":"c44a5646c45a4b581baa60b2a9bf563838d3b6d1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestSimpleUnenhancedQuery.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/434319cfee6140b6eac8cc136f039de50de59b83/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestSimpleUnenhancedQuery.java","raw_url":"https://github.com/apache/openjpa/raw/434319cfee6140b6eac8cc136f039de50de59b83/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestSimpleUnenhancedQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestSimpleUnenhancedQuery.java?ref=434319cfee6140b6eac8cc136f039de50de59b83","patch":"@@ -0,0 +1,49 @@\n+/**\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ *  See the License for the specific language governing permissions and\r\n+ *  limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * A simple query fails with unenhanced (or runtime enhanced classes)\r\n+ * as originally reported in \r\n+ * <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-659\">OPENJPA-659</A>.\r\n+ * The original issue reports the failure in a Spring-Tomcat-Weaver settings\r\n+ * with embedded instances but even the following test shows the same failure \r\n+ * in a simpler settings.\r\n+ *  \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+public class TestSimpleUnenhancedQuery extends SingleEMFTestCase {\r\n+\tpublic void setUp() throws Exception {\r\n+\t\tsetUp(CLEAR_TABLES, UnenhancedPObject.class);\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tem.persist(new UnenhancedPObject());\r\n+\t\tem.getTransaction().commit();\r\n+\t}\r\n+\t\r\n+\tpublic void testExtentQuery() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tassertFalse(em.createQuery(\"SELECT p FROM UnenhancedPObject p\")\r\n+\t\t\t\t.getResultList().isEmpty());\r\n+\t}\r\n+}\r"},{"sha":"4812fbf2ef96b5188f4ed5d6979d293562f1ceb5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedPObject.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/434319cfee6140b6eac8cc136f039de50de59b83/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedPObject.java","raw_url":"https://github.com/apache/openjpa/raw/434319cfee6140b6eac8cc136f039de50de59b83/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedPObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedPObject.java?ref=434319cfee6140b6eac8cc136f039de50de59b83","patch":"@@ -0,0 +1,25 @@\n+/**\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ *  See the License for the specific language governing permissions and\r\n+ *  limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class UnenhancedPObject {\r\n+\r\n+}\r"}]}

