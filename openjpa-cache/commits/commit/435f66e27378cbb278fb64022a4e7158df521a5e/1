{"sha":"435f66e27378cbb278fb64022a4e7158df521a5e","node_id":"MDY6Q29tbWl0MjA2MzY0OjQzNWY2NmUyNzM3OGNiYjI3OGZiNjQwMjJhNGU3MTU4ZGY1MjFhNWU=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-08T22:14:32Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-08T22:14:32Z"},"message":"exclude this test case for MySQL\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@812712 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e73fb432f8df805d670f329d2b50af8cf9430343","url":"https://api.github.com/repos/apache/openjpa/git/trees/e73fb432f8df805d670f329d2b50af8cf9430343"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/435f66e27378cbb278fb64022a4e7158df521a5e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/435f66e27378cbb278fb64022a4e7158df521a5e","html_url":"https://github.com/apache/openjpa/commit/435f66e27378cbb278fb64022a4e7158df521a5e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/435f66e27378cbb278fb64022a4e7158df521a5e/comments","author":null,"committer":null,"parents":[{"sha":"702a9c66162c1a3e48f90a5c225c56ac71c2f9e8","url":"https://api.github.com/repos/apache/openjpa/commits/702a9c66162c1a3e48f90a5c225c56ac71c2f9e8","html_url":"https://github.com/apache/openjpa/commit/702a9c66162c1a3e48f90a5c225c56ac71c2f9e8"}],"stats":{"total":41,"additions":41,"deletions":0},"files":[{"sha":"8d96f6e7f860a1d7e0721768f7027f9874387ad9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","status":"modified","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/435f66e27378cbb278fb64022a4e7158df521a5e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","raw_url":"https://github.com/apache/openjpa/raw/435f66e27378cbb278fb64022a4e7158df521a5e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java?ref=435f66e27378cbb278fb64022a4e7158df521a5e","patch":"@@ -19,8 +19,11 @@\n package org.apache.openjpa.persistence.generationtype;\n \n import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n \n import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n import javax.persistence.PersistenceException;\n import javax.persistence.Query;\n \n@@ -35,7 +38,17 @@\n \n public class TestMultipleSchemaNames extends SingleEMFTestCase {\n \n+    static Boolean isMySQL = null;\n+    \n     public void setUp() {\n+        \n+        // Exclude mysql\n+        if (isMySQL == null)\n+            isMySQL = isMySQL();\n+        if (isMySQL)\n+            return;\n+        \n+\n         // Create schemas when database requires this and we are about\n         // to execute the first test.\n         if (\"testGeneratedAUTO\".equals(getName())) {\n@@ -133,6 +146,9 @@ public void setUp() {\n     }\n \n     public void testGeneratedAUTO() {\n+        if (isMySQL)\n+            return;\n+\n         EntityManager em = emf.createEntityManager();\n         OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\n         em.getTransaction().begin();\n@@ -210,6 +226,9 @@ public void testGeneratedAUTO() {\n     }\n \n     public void testGeneratedTABLE() {\n+        if (isMySQL)\n+            return;\n+\n         EntityManager em = emf.createEntityManager();\n         OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\n         em.getTransaction().begin();\n@@ -355,6 +374,9 @@ public void testGeneratedTABLE() {\n     }\n     \n     public void testGeneratedIDENTITY() {\n+        if (isMySQL)\n+            return;\n+\n         EntityManager em = emf.createEntityManager();\n         OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\n \n@@ -396,6 +418,25 @@ public void testGeneratedIDENTITY() {\n \n         em.close();\n     }\n+\n+    private Boolean isMySQL() {\n+        EntityManagerFactory emf = (EntityManagerFactory)createEMF();\n+        \n+        Map<String, Object> props = emf.getProperties();\n+        Set<String> keys = props.keySet();\n+        for (String key : keys) {\n+            String platform = null;\n+            if (key.equals(\"Platform\")) {\n+                platform = (String) props.get(key);\n+                if (platform.equals(\"OpenJPA JDBC Edition: MySQL Database\"))\n+                    return Boolean.TRUE;\n+                return Boolean.FALSE;\n+            }\n+        }\n+               \n+        return Boolean.FALSE;\n+    }    \n+    \n     \n     /**\n      * Create necessary schemas if running on PostgreSQL as it does"}]}

