{"sha":"442c1cee4870edc0916191e1872ae8223496e84f","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ0MmMxY2VlNDg3MGVkYzA5MTYxOTFlMTg3MmFlODIyMzQ5NmU4NGY=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-03-26T17:59:03Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-03-26T17:59:03Z"},"message":"Patch for OPENJPA-168\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@522581 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9cc9ac57a72806898ee339f400a70b80af2a4bd8","url":"https://api.github.com/repos/apache/openjpa/git/trees/9cc9ac57a72806898ee339f400a70b80af2a4bd8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/442c1cee4870edc0916191e1872ae8223496e84f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/442c1cee4870edc0916191e1872ae8223496e84f","html_url":"https://github.com/apache/openjpa/commit/442c1cee4870edc0916191e1872ae8223496e84f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/442c1cee4870edc0916191e1872ae8223496e84f/comments","author":null,"committer":null,"parents":[{"sha":"91cc43267670049486cc609091cc07ddb339cef0","url":"https://api.github.com/repos/apache/openjpa/commits/91cc43267670049486cc609091cc07ddb339cef0","html_url":"https://github.com/apache/openjpa/commit/91cc43267670049486cc609091cc07ddb339cef0"}],"stats":{"total":270,"additions":218,"deletions":52},"files":[{"sha":"94c86c74dbee83f6f59c0b4bd98392c7d019c507","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/442c1cee4870edc0916191e1872ae8223496e84f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/442c1cee4870edc0916191e1872ae8223496e84f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=442c1cee4870edc0916191e1872ae8223496e84f","patch":"@@ -43,6 +43,7 @@\n import org.apache.openjpa.jdbc.sql.SQLFactory;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.jdbc.sql.SelectExecutor;\n+import org.apache.openjpa.jdbc.sql.SelectImpl;\n import org.apache.openjpa.jdbc.sql.Union;\n import org.apache.openjpa.kernel.FetchConfiguration;\n import org.apache.openjpa.kernel.LockManager;\n@@ -368,9 +369,12 @@ private Result getInitializeStateResult(OpenJPAStateManager sm,\n         if (!select(sel, mapping, subs, sm, null, fetch,\n             JDBCFetchConfiguration.EAGER_JOIN, true, false))\n             return null;\n-\n         sel.wherePrimaryKey(sm.getObjectId(), mapping, this);\n-        return sel.execute(this, fetch);\n+        //Set the expectedResultCount for the select as 1 as a single\n+        //object is being loaded. force = true is an indicator that it is \n+        //internally generated value\n+          sel.setExpectedResultCount(1,true);\n+       return sel.execute(this, fetch);\n     }\n \n     /**\n@@ -385,7 +389,7 @@ private Result getInitializeStateUnionResult(final OpenJPAStateManager sm,\n             JDBCFetchConfiguration.EAGER_JOIN);\n \n         Union union = _sql.newUnion(mappings.length);\n-        union.setSingleResult(true);\n+        union.setExpectedResultCount(1,true);\n         if (fetch.getSubclassFetchMode(mapping) != fetch.EAGER_JOIN)\n             union.abortUnion();\n         union.select(new Union.Selector() {"},{"sha":"e70e9ef5a4ec86de0b4d7c8bfa4241ec531ce80b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/442c1cee4870edc0916191e1872ae8223496e84f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/442c1cee4870edc0916191e1872ae8223496e84f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java?ref=442c1cee4870edc0916191e1872ae8223496e84f","patch":"@@ -312,6 +312,7 @@ private boolean createWhereSelects(List sels, ClassMapping[] mappings,\n         ClassMapping[] verts;\n         boolean unionable = true;\n         Select sel;\n+        Object optHint = null;\n         for (int i = 0; i < mappings.length; i++) {\n             // determine vertical mappings to select separately\n             verts = getVerticalMappings(mappings[i], subclasses, exps[i],\n@@ -322,6 +323,19 @@ private boolean createWhereSelects(List sels, ClassMapping[] mappings,\n             // create criteria select and clone for each vert mapping\n             sel = ((JDBCExpressionFactory) facts[i]).getSelectConstructor().\n                 evaluate(ctx, null, null, exps[i], states[i]);\n+            //it means it is coming from getSingleResult so set the \n+            //expectedResultCount to 1.force = true indicates that this is \n+            //internally generated value\n+            if(this.ctx.isUnique())\n+                 sel.setExpectedResultCount(1,true);\n+            //it means this is coming from getResultList so set the \n+            //expectedResultCount based on any optimize hint if provided\n+            else{\n+                   if((optHint = ctx.fetch.getHint\n+                        (this.optimizeHint))!= null)\n+                         sel.setExpectedResultCount\n+                          (((Integer)optHint).intValue(),false);\n+               }\n             for (int j = 0; j < verts.length; j++) {\n                 selMappings.add(verts[j]);\n                 if (j == verts.length - 1) {"},{"sha":"c3a2173dd3c2eb1e4e7842bbf7e5cc06cafcbfce","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSProxyMap.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/442c1cee4870edc0916191e1872ae8223496e84f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSProxyMap.java","raw_url":"https://github.com/apache/openjpa/raw/442c1cee4870edc0916191e1872ae8223496e84f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSProxyMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSProxyMap.java?ref=442c1cee4870edc0916191e1872ae8223496e84f","patch":"@@ -238,7 +238,7 @@ protected Object value(final Object obj) {\n         final Joins[] resJoins = new Joins[Math.max(1, clss.length)];\n         Union union = store.getSQLFactory().newUnion\n             (Math.max(1, clss.length));\n-        union.setSingleResult(true);\n+        union.setExpectedResultCount(1,true);\n         if (fetch.getSubclassFetchMode(_strat.getFieldMapping().\n             getElementMapping().getTypeMapping())\n             != JDBCFetchConfiguration.EAGER_JOIN)"},{"sha":"9352a17ecd8b411884c7fc534ff3d2eb5c137009","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/442c1cee4870edc0916191e1872ae8223496e84f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/442c1cee4870edc0916191e1872ae8223496e84f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=442c1cee4870edc0916191e1872ae8223496e84f","patch":"@@ -578,7 +578,7 @@ public void load(final OpenJPAStateManager sm, final JDBCStore store,\n         // back to our fk table if not an inverse mapping (in which case we\n         // can just make sure the inverse cols == our pk values)\n         Union union = store.getSQLFactory().newUnion(rels.length);\n-        union.setSingleResult(true);\n+        union.setExpectedResultCount(1,true);\n         if (fetch.getSubclassFetchMode(field.getTypeMapping())\n             != JDBCFetchConfiguration.EAGER_JOIN)\n             union.abortUnion();"},{"sha":"dffd7cf054fd8c1c862ce637c598c25500177f08","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":66,"deletions":1,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/442c1cee4870edc0916191e1872ae8223496e84f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/442c1cee4870edc0916191e1872ae8223496e84f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=442c1cee4870edc0916191e1872ae8223496e84f","patch":"@@ -20,14 +20,18 @@\n import java.sql.SQLException;\r\n import java.util.Arrays;\r\n \r\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\r\n import org.apache.openjpa.jdbc.schema.Sequence;\r\n \r\n /**\r\n  * Dictionary for IBM DB2 database.\r\n  */\r\n public class DB2Dictionary\r\n     extends AbstractDB2Dictionary {\r\n-\r\n+    \r\n+    //variables to support optimize clause\r\n+    public String optimizeClause = \"optimize for\";\r\n+    public String rowClause = \"row\";\r\n     public DB2Dictionary() {\r\n         platform = \"DB2\";\r\n         validationSQL = \"SELECT DISTINCT(CURRENT TIMESTAMP) FROM \"\r\n@@ -193,4 +197,65 @@ public void connectedConfiguration(Connection conn) throws SQLException {\n             }\r\n     \t}\r\n     }\r\n+    //based on the expectedResultCount of the select create the optimize\r\n+    //for clause\r\n+    public String getOptimizeClause(JDBCFetchConfiguration fetch, \r\n+                                   int expectedResultCount) {\r\n+        Integer rows = null;\r\n+        StringBuffer optimizeString = new StringBuffer();\r\n+        \r\n+        \tif(expectedResultCount != 0)\r\n+                optimizeString.append(\" \").append(optimizeClause).append(\" \")\r\n+                .append(expectedResultCount).append(\" \")\r\n+                .append(rowClause).append(\" \");\r\n+           return optimizeString.toString();    \r\n+    }\r\n+\r\n+    //override the DBDictionary toSelect to call getOptimizeClause and append \r\n+    //to the select string\r\n+    public SQLBuffer toSelect(SQLBuffer selects, JDBCFetchConfiguration fetch,\r\n+            SQLBuffer from, SQLBuffer where, SQLBuffer group,\r\n+            SQLBuffer having, SQLBuffer order,\r\n+            boolean distinct, boolean forUpdate, long start, long end,\r\n+            int expectedResultCount) {\r\n+        \t\r\n+        \tString optimizeString = null;\r\n+        \tSQLBuffer selString = toOperation(getSelectOperation(fetch), \r\n+                                              selects, from, where,\r\n+                                              group, having, order, distinct,\r\n+                                              forUpdate, start, end);\r\n+            //return toOperation(getSelectOperation(fetch), selects, from, where,\r\n+             //group, having, order, distinct, forUpdate, start, end);\r\n+        \t\r\n+        \tif(fetch != null)\r\n+        \t    optimizeString = getOptimizeClause(fetch, expectedResultCount);\r\n+        \tif(optimizeString != null && optimizeString.length() > 0)\r\n+        \t\tselString.append(optimizeString);\r\n+        \t\r\n+        \treturn selString;\r\n+        \t\r\n+        }\r\n+    //override the DBDictionary toSelect to pass expectedResultcount to the \r\n+    //other toSelect method\r\n+    public SQLBuffer toSelect(Select sel, boolean forUpdate,\r\n+            JDBCFetchConfiguration fetch) {\r\n+            sel.addJoinClassConditions();\r\n+            \r\n+            boolean update = forUpdate && sel.getFromSelect() == null;\r\n+            SQLBuffer select = getSelects(sel, false, update);\r\n+            SQLBuffer ordering = null;\r\n+            if (!sel.isAggregate() || sel.getGrouping() != null)\r\n+                ordering = sel.getOrdering();\r\n+            SQLBuffer from;\r\n+            if (sel.getFromSelect() != null)\r\n+                from = getFromSelect(sel, forUpdate);\r\n+            else\r\n+                from = getFrom(sel, update);\r\n+            SQLBuffer where = getWhere(sel, update);\r\n+            return toSelect(select, fetch, from, where, sel.getGrouping(),\r\n+                sel.getHaving(), ordering, sel.isDistinct(), forUpdate,\r\n+                sel.getStartIndex(), \r\n+                sel.getEndIndex(),sel.getExpectedResultCount());\r\n+        }\r\n+\r\n }\r"},{"sha":"359e42a146d62be163423f503937bf6de71cb29a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","status":"modified","additions":42,"deletions":13,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/442c1cee4870edc0916191e1872ae8223496e84f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","raw_url":"https://github.com/apache/openjpa/raw/442c1cee4870edc0916191e1872ae8223496e84f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java?ref=442c1cee4870edc0916191e1872ae8223496e84f","patch":"@@ -47,13 +47,18 @@\n \n     private static final Localizer _loc = Localizer.forPackage\n         (LogicalUnion.class);\n-\n+     //expected number of results for this select to be used in \n+    // optimize for clause\n+    protected int expectedResultCount = 0;\n+    //indicate if this is internally generated result count \n+    //or not\n+    protected boolean force = false;\n     protected final UnionSelect[] sels;\n     protected final DBDictionary dict;\n     protected final ClassMapping[] mappings;\n     protected final BitSet desc = new BitSet();\n     private boolean _distinct = true;\n-    private boolean _single = false;\n+   \n \n     /**\n      * Constructor.\n@@ -102,15 +107,7 @@ protected UnionSelect newUnionSelect(SelectImpl seed, int pos) {\n     public Select[] getSelects() {\n         return sels;\n     }\n-\n-    public boolean isSingleResult() {\n-        return _single;\n-    }\n-\n-    public void setSingleResult(boolean single) {\n-        _single = single;\n-    }\n-\n+   \n     public boolean isUnion() {\n         return false;\n     }\n@@ -215,9 +212,12 @@ public Result execute(JDBCStore store, JDBCFetchConfiguration fetch,\n             return res;\n         }\n \n-        if (_single) {\n+        if (this.getExpectedResultCount()== 1) {\n             AbstractResult res;\n             for (int i = 0; i < sels.length; i++) {\n+                //for each select set the expected result count to 1\n+                //and force true indicating that this internally generated value\n+                 sels[i].sel.setExpectedResultCount(1,true);\n                 res = (AbstractResult) sels[i].execute(store, fetch,\n                     lockLevel);\n                 res.setBaseMapping(mappings[i]);\n@@ -305,7 +305,12 @@ public String toString() {\n         protected final int pos;\n         protected int orders = 0;\n         protected List orderIdxs = null;\n-\n+        //  expected number of results for this select to be used in \n+        // optimize for clause\n+        protected int expectedResultCount = 0;\n+        //force indicates it is internally generated result count or not\n+        protected boolean force = false;\n+       \n         public UnionSelect(SelectImpl sel, int pos) {\n             this.sel = sel;\n             this.pos = pos;\n@@ -838,6 +843,18 @@ public Joins outer(Joins joins) {\n         public String toString() {\n             return sel.toString();\n         }\n+\n+\t\tpublic int getExpectedResultCount() {\n+\t\t\treturn expectedResultCount;\n+\t\t}\n+\n+\t\tpublic void setExpectedResultCount(int expectedResultCount, boolean force) {\n+\t\t\tthis.expectedResultCount = expectedResultCount;\n+            this.force = force;\n+\t\t}\n+         public boolean isExpRsltCntForced() {\n+                return force;\n+            }\n     }\n \n     /**\n@@ -918,4 +935,16 @@ public int compare(Object o1, Object o2) {\n             return a1.length - a2.length;\n         }\n     }\n+\n+    public int getExpectedResultCount() {\n+        return expectedResultCount;\n+    }\n+\n+    public void setExpectedResultCount(int expectedResultCount,boolean force) {\n+        this.expectedResultCount = expectedResultCount;\n+        this.force = force;\n+    }\n+    public boolean isExpRsltCntForced() {\n+        return force;\n+    }\n }"},{"sha":"3a7994c8ed35b688a2e26b5c410e47b54bbb3b7f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectExecutor.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/442c1cee4870edc0916191e1872ae8223496e84f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectExecutor.java","raw_url":"https://github.com/apache/openjpa/raw/442c1cee4870edc0916191e1872ae8223496e84f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectExecutor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectExecutor.java?ref=442c1cee4870edc0916191e1872ae8223496e84f","patch":"@@ -119,4 +119,23 @@ public Result execute(JDBCStore store, JDBCFetchConfiguration fetch)\n     public Result execute(JDBCStore store, JDBCFetchConfiguration fetch,\n         int lockLevel)\n         throws SQLException;\n+    \n+    /**\n+     * Return the expected result count for the query\n+     */\n+    public int getExpectedResultCount() ;\n+\n+    /**\n+     * Set the expected result count for the query\n+     * force indicates whether the count is internally generated\n+     * or given by the user as optimize hint\n+     */\n+    \n+    public void setExpectedResultCount(int expectedResultCount,boolean force) ;\n+    \n+    /**\n+     * Indicates whether the expectedResultCount is internally generated\n+     */\n+     \n+     public boolean isExpRsltCntForced();\n }"},{"sha":"df73b6365198153ed8ccdf08e54f81ed239003b8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":35,"deletions":1,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/442c1cee4870edc0916191e1872ae8223496e84f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/442c1cee4870edc0916191e1872ae8223496e84f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=442c1cee4870edc0916191e1872ae8223496e84f","patch":"@@ -153,7 +153,14 @@\n     // from select if this select selects from a tmp table created by another\n     private SelectImpl _from = null;\n     private SelectImpl _outer = null;\n-\n+    \n+    //expected number of results for this select to be used in \n+    // optimize for clause\n+    private int expectedResultCount = 0;\n+    //true if the expectedResultCount is internally set false if\n+    //it is set by the user\n+    private boolean force = false;\n+     \n     /**\n      * Helper method to return the proper table alias for the given alias index.\n      */\n@@ -304,6 +311,20 @@ protected Result execute(StoreContext ctx, JDBCStore store,\n         JDBCFetchConfiguration fetch, int lockLevel)\n         throws SQLException {\n         boolean forUpdate = false;\n+        \n+        //expectedResultCount = 1 and force means that it is internally generated value \n+        //for getSingleResult,single valued relationship.We need to check if \n+        //there are any eager joins in the select if there are then the \n+        //optimize for 1 row clause is not generated else we do. if \n+        //!force then it is set by the user through hint and we \n+        //do not check the eager joins\n+        if(this.expectedResultCount == 1 && force ){\n+            if(this.hasEagerJoin(true))\n+                this.setExpectedResultCount(0,false);\n+            else\n+               this.setExpectedResultCount(1,false); \n+           }\n+      \n         if (!isAggregate() && _grouping == null) {\n             JDBCLockManager lm = store.getLockManager();\n             if (lm != null)\n@@ -2799,6 +2820,19 @@ public void clear() {\n             _idents = null;\n         }\n     }\n+\n+\tpublic int getExpectedResultCount() {\n+\t\treturn expectedResultCount;\n+\t}\n+\n+\tpublic void setExpectedResultCount(int expectedResultCount, boolean force) {\n+\t\tthis.expectedResultCount = expectedResultCount;\n+        this.force = force;\n+\t}\n+\n+    public boolean isExpRsltCntForced() {\n+        return force;\n+    }\n }\n \n /**"},{"sha":"755082fdfed5b9e85366eaa0eac91d7a2e65d1b3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Union.java","status":"modified","additions":0,"deletions":14,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/442c1cee4870edc0916191e1872ae8223496e84f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Union.java","raw_url":"https://github.com/apache/openjpa/raw/442c1cee4870edc0916191e1872ae8223496e84f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Union.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Union.java?ref=442c1cee4870edc0916191e1872ae8223496e84f","patch":"@@ -33,20 +33,6 @@\n      */\n     public String getOrdering();\n \n-    /**\n-     * Whether this union will return at most a single result. Setting this\n-     * flag makes it more efficient to execute logical unions that are actually\n-     * made up from multiple selects executed in batch.\n-     */\n-    public boolean isSingleResult();\n-\n-    /**\n-     * Whether this union will return at most a single result. Setting this\n-     * flag makes it more efficient to execute logical unions that are actually\n-     * made up from multiple selects executed in batch.\n-     */\n-    public void setSingleResult(boolean single);\n-\n     /**\n      * Whether this is a true UNION, rather than a logical combination of\n      * independent selects."},{"sha":"4b3617d795cfd4acbaf0c17160978a604f497fa2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/442c1cee4870edc0916191e1872ae8223496e84f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/442c1cee4870edc0916191e1872ae8223496e84f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java?ref=442c1cee4870edc0916191e1872ae8223496e84f","patch":"@@ -33,6 +33,7 @@\n     implements StoreQuery {\n \n     protected QueryContext ctx = null;\n+    public static final String optimizeHint =\"openjpa.hint.OptimizeResultCount\";\n \n     public QueryContext getContext() {\n         return ctx;"},{"sha":"d2a94f8f813f09bc6ef47bcecc3ff4fa5f53c577","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/442c1cee4870edc0916191e1872ae8223496e84f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/442c1cee4870edc0916191e1872ae8223496e84f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=442c1cee4870edc0916191e1872ae8223496e84f","patch":"@@ -1289,7 +1289,11 @@ private Object singleResult(ResultObjectProvider rop,\n                 // Collections.singletonList is JDK 1.3, so...\n                 return Arrays.asList(new Object[]{ single });\n             }\n-\n+             \n+            if(single == null)\n+                throw new InvalidStateException(_loc.get(\"is-null\",\n+                        _class, _query));\n+            \n             // return single result\n             return single;\n         } finally {"},{"sha":"6e6fab82d35deab864aa050cf12c192589978b93","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/442c1cee4870edc0916191e1872ae8223496e84f/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/442c1cee4870edc0916191e1872ae8223496e84f/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties?ref=442c1cee4870edc0916191e1872ae8223496e84f","patch":"@@ -259,6 +259,9 @@ executing-query-with-params: Executing query: [{0}] with parameters: {1}\n not-unique: The query on candidate type \"{0}\" with filter \"{1}\" was \\\n \tconfigured to have a unique result, but more than one instance matched \\\n \tthe query.\n+is-null: The query on candidate type \"{0}\" with filter \"{1}\" was \\\n+\tconfigured to have a unique result, but no instance matched \\\n+\tthe query.\n serialized: Queries that have been serialized do not support this operation.\n read-only: Attempt to modify a read-only query object.\n no-class: A candidate Class must be specified before executing a query."},{"sha":"883c5be3794c8b39e98b9657aec1fd6f0f0007ed","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":24,"deletions":17,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/442c1cee4870edc0916191e1872ae8223496e84f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/442c1cee4870edc0916191e1872ae8223496e84f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=442c1cee4870edc0916191e1872ae8223496e84f","patch":"@@ -279,24 +279,15 @@ public List getResultList() {\n      */\n     public Object getSingleResult() {\n         _em.assertNotCloseInvoked();\n+        //Indicate that this query returns single result.Later copied into\n+        //select.expectedResultCount\n+        _query.setUnique(true);\n+        try{\n         Object ob = execute();\n-        if (!(ob instanceof List))\n-            return ob;\n+           return ob;\n \n-        List res = (List) ob;\n-        try {\n-            // don't use size() b/c can be inefficient under some LRS settings\n-            Iterator itr = res.iterator();\n-            if (!itr.hasNext())\n-                throw new NoResultException(_loc.get(\"no-results\",\n-                    _query.getQueryString()).getMessage(), null, null, false);\n-            Object ret = itr.next();\n-            if (itr.hasNext())\n-                throw new NonUniqueResultException(_loc.get(\"mult-results\",\n-                    _query.getQueryString()).getMessage(), null, null, false);\n-            return ret;\n         } finally {\n-            OpenJPAPersistence.close(res);\n+            _query.setUnique(false);\n         }\n     }\n \n@@ -375,13 +366,29 @@ else if (\"FilterListeners\".equals(k)) {\n             } else if (k.startsWith(\"FetchPlan.\")) {\n                 k = k.substring(\"FetchPlan.\".length());\n                 Filters.hintToSetter(getFetchPlan(), k, value);\n-            } else if (k.startsWith(\"hint.\"))\n+            } else if (k.startsWith(\"hint.\")){\n+            \tif(\"hint.OptimizeResultCount\".equals(k)){\n+            \t\tif((!(value instanceof String)&&!(value instanceof Integer))\n+                       ||  (value instanceof String &&(Integer.parseInt\n+                       ((String)value)< 0))||((value instanceof Integer)\n+                        && (((Integer)value).intValue()<0)) )\n+            \t\t\t    throw new ArgumentException(_loc.get\n+                                      (\"bad-hint-value\", key),\n+                                      null, null, false);\n+                    if(value instanceof String)\n+                        value = new Integer((String)value);\n+         \t}\n                 _query.getFetchConfiguration().setHint(key, value);\n+            }\n             else\n                 throw new ArgumentException(_loc.get(\"bad-query-hint\", key),\n                     null, null, false);\n             return this;\n-        } catch (Exception e) {\n+        }catch(NumberFormatException e1){\n+              throw new ArgumentException(_loc.get(\"bad-hint-value\", key),\n+                null, null, false); \n+        }\n+         catch (Exception e) {\n             throw PersistenceExceptions.toPersistenceException(e);\n         }\n     }"}]}

