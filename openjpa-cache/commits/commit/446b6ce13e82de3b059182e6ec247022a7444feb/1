{"sha":"446b6ce13e82de3b059182e6ec247022a7444feb","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ0NmI2Y2UxM2U4MmRlM2IwNTkxODJlNmVjMjQ3MDIyYTc0NDRmZWI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-12-18T15:22:42Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-12-18T15:22:42Z"},"message":"OPENJPA-777 merged to 1.2.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@727744 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ae2758c27686cf96ae7cdce140ea8442c18ed47f","url":"https://api.github.com/repos/apache/openjpa/git/trees/ae2758c27686cf96ae7cdce140ea8442c18ed47f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/446b6ce13e82de3b059182e6ec247022a7444feb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/446b6ce13e82de3b059182e6ec247022a7444feb","html_url":"https://github.com/apache/openjpa/commit/446b6ce13e82de3b059182e6ec247022a7444feb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/446b6ce13e82de3b059182e6ec247022a7444feb/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"b73837448858c4d4111edd7155fc1c28f0fde4b5","url":"https://api.github.com/repos/apache/openjpa/commits/b73837448858c4d4111edd7155fc1c28f0fde4b5","html_url":"https://github.com/apache/openjpa/commit/b73837448858c4d4111edd7155fc1c28f0fde4b5"}],"stats":{"total":402,"additions":400,"deletions":2},"files":[{"sha":"9535d9c2083d9045cc583e24410ce06f43eb0dba","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/446b6ce13e82de3b059182e6ec247022a7444feb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/446b6ce13e82de3b059182e6ec247022a7444feb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=446b6ce13e82de3b059182e6ec247022a7444feb","patch":"@@ -964,7 +964,13 @@ else if (relMapping.getIdentityType() == ClassMapping.ID_DATASTORE)\n \n         if (oid == null)\n             sm.storeObject(field.getIndex(), null);\n-        else\n-            sm.setIntermediate(field.getIndex(), oid);\n+        else {\n+            if (JavaTypes.maybePC(field.getValue()) &&\n+                !field.getValue().getDeclaredTypeMetaData().isEmbeddedOnly()) {\n+                Object obj = store.find(oid, field, fetch);\n+                sm.storeObject(field.getIndex(), obj);\n+            } else    \n+                sm.setIntermediate(field.getIndex(), oid);\n+        }\n     }\n }"},{"sha":"a6f4832876f032ea7fcbb8422ec3a2960119b59b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EmbedB.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/446b6ce13e82de3b059182e6ec247022a7444feb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EmbedB.java","raw_url":"https://github.com/apache/openjpa/raw/446b6ce13e82de3b059182e6ec247022a7444feb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EmbedB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EmbedB.java?ref=446b6ce13e82de3b059182e6ec247022a7444feb","patch":"@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.annotations;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Embeddable;\n+import javax.persistence.ManyToOne;\n+\n+@Embeddable\n+public class PColl_EmbedB {\n+    private String name;\n+    \n+    @ManyToOne(cascade = CascadeType.PERSIST)\n+    private PColl_EntityC m2oC;\n+\n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    \n+    public PColl_EntityC getM2oC() {\n+        return m2oC;\n+    }\n+\n+    public void setM2oC(PColl_EntityC m2oC) {\n+        this.m2oC = m2oC;\n+    }\n+}"},{"sha":"072536f8aa986c5ec9d139a70d79d1b06f5c264c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityA.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/446b6ce13e82de3b059182e6ec247022a7444feb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityA.java","raw_url":"https://github.com/apache/openjpa/raw/446b6ce13e82de3b059182e6ec247022a7444feb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityA.java?ref=446b6ce13e82de3b059182e6ec247022a7444feb","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.annotations;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.Version;\n+\n+import org.apache.openjpa.persistence.PersistentCollection;\n+\n+@Entity\n+@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n+public class PColl_EntityA {\n+\n+    @Id\n+    private int id;\n+\n+    @PersistentCollection(elementEmbedded = true)\n+    private Set<PColl_EmbedB> embedCollection = new HashSet<PColl_EmbedB>();\n+\n+    @Version\n+    private int version;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public Set<PColl_EmbedB> getEmbedCollection() {\n+        return embedCollection;\n+    }\n+\n+    public void setEmbedCollection(Set<PColl_EmbedB> embedCollection) {\n+        this.embedCollection = embedCollection;\n+    }\n+\n+    public void addEmbedElement(PColl_EmbedB element) {\n+        this.embedCollection.add(element);\n+    }\n+\n+    public String toString() {\n+        return \"PColl_EntityD<id=\" + id + \",ver=\" + version\n+            + \",embedBCollection#=\" + embedCollection.size() + \">\";\n+    }\n+}"},{"sha":"59e67da81614791e6380faa569e701ce06e9dd2f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityA1.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/446b6ce13e82de3b059182e6ec247022a7444feb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityA1.java","raw_url":"https://github.com/apache/openjpa/raw/446b6ce13e82de3b059182e6ec247022a7444feb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityA1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityA1.java?ref=446b6ce13e82de3b059182e6ec247022a7444feb","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.annotations;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.Version;\n+\n+import org.apache.openjpa.persistence.PersistentCollection;\n+\n+@Entity\n+@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n+public class PColl_EntityA1 {\n+\n+    @Id\n+    private int id;\n+\n+    @PersistentCollection(elementEmbedded = true)\n+    private Set<PColl_EntityB> embedCollection = new HashSet<PColl_EntityB>();\n+\n+    @Version\n+    private int version;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public Set<PColl_EntityB> getEmbedCollection() {\n+        return embedCollection;\n+    }\n+\n+    public void setEmbedCollection(Set<PColl_EntityB> embedCollection) {\n+        this.embedCollection = embedCollection;\n+    }\n+\n+    public void addEmbedElement(PColl_EntityB element) {\n+        this.embedCollection.add(element);\n+    }\n+\n+    public String toString() {\n+        return \"PColl_EntityD<id=\" + id + \",ver=\" + version\n+            + \",embedBCollection#=\" + embedCollection.size() + \">\";\n+    }\n+}"},{"sha":"fa4e20cf9975d6eab28de4144c66e3924286070c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityB.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/446b6ce13e82de3b059182e6ec247022a7444feb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityB.java","raw_url":"https://github.com/apache/openjpa/raw/446b6ce13e82de3b059182e6ec247022a7444feb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityB.java?ref=446b6ce13e82de3b059182e6ec247022a7444feb","patch":"@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.annotations;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.ManyToOne;\n+\n+@Entity\n+public class PColl_EntityB {\n+    private String name;\n+    \n+    @ManyToOne(cascade = CascadeType.PERSIST)\n+    private PColl_EntityC m2oC;\n+\n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    \n+    public PColl_EntityC getM2oC() {\n+        return m2oC;\n+    }\n+\n+    public void setM2oC(PColl_EntityC m2oC) {\n+        this.m2oC = m2oC;\n+    }\n+}"},{"sha":"81c220a18b987c23f40df008c2a74802d9aff7ac","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityC.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/446b6ce13e82de3b059182e6ec247022a7444feb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityC.java","raw_url":"https://github.com/apache/openjpa/raw/446b6ce13e82de3b059182e6ec247022a7444feb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/PColl_EntityC.java?ref=446b6ce13e82de3b059182e6ec247022a7444feb","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.annotations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.Version;\n+\n+@Entity\n+@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n+public class PColl_EntityC {\n+    @Id\n+    private int id;\n+\n+    @Version\n+    private int version;\n+\n+    public int getId() {\n+        return id;\n+\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String toString() {\n+        return \"PColl_EntityC<id=\" + id + \",ver=\" + version + \">\";\n+    }\n+}"},{"sha":"a61c645b5bdd7411a7d54d30b86ddb1dc9da1d60","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestPersistentCollection.java","status":"added","additions":116,"deletions":0,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/446b6ce13e82de3b059182e6ec247022a7444feb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestPersistentCollection.java","raw_url":"https://github.com/apache/openjpa/raw/446b6ce13e82de3b059182e6ec247022a7444feb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestPersistentCollection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestPersistentCollection.java?ref=446b6ce13e82de3b059182e6ec247022a7444feb","patch":"@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.annotations;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test for PersistentCollection Annotation\n+ * \n+ * @author Albert Lee\n+ */\n+public class TestPersistentCollection extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(PColl_EntityA.class, PColl_EmbedB.class, PColl_EntityC.class,\n+                PColl_EntityA1.class, PColl_EntityB.class, CLEAR_TABLES);\n+    }\n+\n+    public void testPersistentCollectionOfEmbeddables() {\n+        try {\n+            EntityManager em = emf.createEntityManager();\n+\n+            em.getTransaction().begin();\n+\n+            PColl_EntityC c = new PColl_EntityC();\n+            c.setId(101);\n+\n+            PColl_EmbedB b01 = new PColl_EmbedB();\n+            b01.setName(\"b01\");\n+            b01.setM2oC(c);\n+\n+            PColl_EntityA a = new PColl_EntityA();\n+            a.setId(1);\n+            a.getEmbedCollection().add(b01);\n+            em.persist(a);\n+            em.getTransaction().commit();\n+            em.close();\n+\n+            em = emf.createEntityManager();\n+            Query q = em.createQuery(\"SELECT o FROM PColl_EntityA o\"); \n+            List<PColl_EntityA> oList = q.getResultList();\n+            PColl_EntityA d1 = oList.get(0);\n+            \n+            Set<PColl_EmbedB> b1s = d1.getEmbedCollection();\n+\n+            PColl_EmbedB b1 = b1s.iterator().next();\n+            PColl_EntityC c1 = b1.getM2oC();\n+            assertEquals(\"b01\", b1.getName());\n+            assertEquals(101, c1.getId());\n+            assertEquals(1, d1.getId());\n+            em.close();\n+        } catch (Throwable t) {\n+            fail(t.getMessage());\n+        }\n+    }\n+\n+    public void testPersistentCollectionOfEntities() {\n+        try {\n+            EntityManager em = emf.createEntityManager();\n+\n+            em.getTransaction().begin();\n+\n+            PColl_EntityC c = new PColl_EntityC();\n+            c.setId(101);\n+\n+            PColl_EntityB b01 = new PColl_EntityB();\n+            b01.setName(\"b01\");\n+            b01.setM2oC(c);\n+\n+            PColl_EntityA1 a = new PColl_EntityA1();\n+            a.setId(1);\n+            a.getEmbedCollection().add(b01);\n+            em.persist(a);\n+            em.getTransaction().commit();\n+            em.close();\n+\n+            em = emf.createEntityManager();\n+            Query q = em.createQuery(\"SELECT o FROM PColl_EntityA1 o\"); \n+            List<PColl_EntityA1> oList = q.getResultList();\n+            PColl_EntityA1 a1 = oList.get(0);\n+            \n+            Set<PColl_EntityB> b1s = a1.getEmbedCollection();\n+\n+            PColl_EntityB b1 = b1s.iterator().next();\n+            PColl_EntityC c1 = b1.getM2oC();\n+            assertEquals(\"b01\", b1.getName());\n+            assertEquals(101, c1.getId());\n+            assertEquals(1, a1.getId());\n+            em.close();\n+        } catch (Throwable t) {\n+            fail(t.getMessage());\n+        }\n+    }    \n+}"}]}

