{"sha":"44a7674d6ef00a358a9d8d51c7a5fc219518c34c","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ0YTc2NzRkNmVmMDBhMzU4YTlkOGQ1MWM3YTVmYzIxOTUxOGMzNGM=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-07-23T20:15:06Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-07-23T20:15:06Z"},"message":"OPENJPA-1740: fix Type expression when entities use Joined table strategy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@967240 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7117ac7ff5c6aab710e4ceb80842ac16349f41b1","url":"https://api.github.com/repos/apache/openjpa/git/trees/7117ac7ff5c6aab710e4ceb80842ac16349f41b1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/44a7674d6ef00a358a9d8d51c7a5fc219518c34c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/44a7674d6ef00a358a9d8d51c7a5fc219518c34c","html_url":"https://github.com/apache/openjpa/commit/44a7674d6ef00a358a9d8d51c7a5fc219518c34c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/comments","author":null,"committer":null,"parents":[{"sha":"4c92537fb5856d029a524c4e7842e1c63751077c","url":"https://api.github.com/repos/apache/openjpa/commits/4c92537fb5856d029a524c4e7842e1c63751077c","html_url":"https://github.com/apache/openjpa/commit/4c92537fb5856d029a524c4e7842e1c63751077c"}],"stats":{"total":604,"additions":562,"deletions":42},"files":[{"sha":"9593529700b92e5dee5e3395fcc020e5d2446eeb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","status":"modified","additions":46,"deletions":9,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java?ref=44a7674d6ef00a358a9d8d51c7a5fc219518c34c","patch":"@@ -363,22 +363,59 @@ private boolean createWhereSelects(List sels, ClassMapping[] mappings,\n                sel.setExpectedResultCount(optHint.intValue(), true);\n             else if (this.ctx.isUnique())\n                 sel.setExpectedResultCount(1, false);\n-            for (int j = 0; j < verts.length; j++) {\n-                selMappings.add(verts[j]);\n-                if (j == verts.length - 1) {\n-                    nextBits.set(sels.size());\n-                    sels.add(sel);\n-                } else\n-                    sels.add(sel.fullClone(1));\n+            \n+            List selectFrom = getJoinedTableMeta(sel);\n+            int size = 0;\n+            if (selectFrom != null) {\n+                size = selectFrom.size();\n+                for (int j = 0; j < size; j++) {\n+                    ClassMapping vert = (ClassMapping)selectFrom.get(j); \n+                    selMappings.add(vert);\n+                    if (j == size - 1) {\n+                        nextBits.set(sels.size());\n+                        sel.select(vert.getPrimaryKeyColumns(), null);\n+                        sels.add(sel);\n+                    } else {\n+                        SelectImpl selClone = (SelectImpl)sel.fullClone(1);\n+                        selClone.select(vert.getPrimaryKeyColumns(), null);\n+                        sels.add(selClone);\n+                    }\n+                }\n+            } else {\n+                for (int j = 0; j < verts.length; j++) {\n+                    selMappings.add(verts[j]);\n+                    if (j == verts.length - 1) {\n+                        nextBits.set(sels.size());\n+                        sels.add(sel);\n+                    } else\n+                        sels.add(sel.fullClone(1));\n+                }\n             }\n-\n+            \n             // turn off unioning if a given independent mapping requires\n             // multiple selects, or if we're using FROM selects\n-            if (verts.length > 1 || sel.getFromSelect() != null)\n+            if (verts.length > 1 || size > 1 || sel.getFromSelect() != null)\n                 unionable = false;\n         }\n         return unionable;\n     }\n+    \n+    private List getJoinedTableMeta(Select sel) {\n+        List selectFrom = sel.getJoinedTableClassMeta();\n+        List exSelectFrom = sel.getExcludedJoinedTableClassMeta();\n+        if (exSelectFrom == null)\n+            return selectFrom;\n+        if (selectFrom == null)\n+            return null;\n+        int size = selectFrom.size();\n+        List retList = new ArrayList(size);\n+        for (int i = 0; i < size; i++) {\n+            Object obj = selectFrom.get(i);\n+            if (!exSelectFrom.contains(obj))\n+                retList.add(obj);\n+        }\n+        return retList;\n+    }\n \n     /**\n      * Return all the vertical mappings to select separately. Depends on"},{"sha":"afff6bb10f2fc24d0f730607bd1ae3d987ed48b6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EqualTypeExpression.java","status":"modified","additions":61,"deletions":10,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EqualTypeExpression.java","raw_url":"https://github.com/apache/openjpa/raw/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EqualTypeExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EqualTypeExpression.java?ref=44a7674d6ef00a358a9d8d51c7a5fc219518c34c","patch":"@@ -18,9 +18,14 @@\n  */\n package org.apache.openjpa.jdbc.kernel.exps;\n \n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.meta.ClassMetaData;\n \n /**\n  * Compares two entity types.\n@@ -37,6 +42,30 @@ public EqualTypeExpression(Val val1, Val val2) {\n         super(val1, val2);\n     }\n \n+    private ClassMapping getSubClassMapping(Val val1, Val val2, ExpContext ctx) {\n+        ClassMapping sub = null;\n+        Val val = val1 instanceof Type ? val2 : val1;\n+        if (val instanceof TypeLit)\n+            sub = (ClassMapping) val.getMetaData();\n+        else if (val instanceof Param)\n+            sub = ((Param) val).getValueMetaData(ctx);\n+        if (sub != null)\n+            ctx.isVerticalStrat = sub.isVerticalStrategy();\n+        return sub;\n+    }\n+\n+    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n+            SQLBuffer buf) {\n+        Val val1 = getValue1();\n+        Val val2 = getValue2();\n+        ClassMapping sub = getSubClassMapping(val1, val2, ctx);\n+        if (ctx.isVerticalStrat) {\n+            appendTo(sel, ctx, (BinaryOpExpState)state, buf, false, false);\n+            return;\n+        }\n+        super.appendTo(sel, ctx, state, buf);\n+    }\n+\n     public void appendTo(Select sel, ExpContext ctx, BinaryOpExpState bstate, \n         SQLBuffer buf, boolean val1Null, boolean val2Null) {\n         if (val1Null && val2Null)\n@@ -59,17 +88,16 @@ else if (val1Null || val2Null) {\n             Val val2 = getValue2();\n             if (val1.length(sel, ctx, bstate.state1) == 1 \n                 && val2.length(sel, ctx, bstate.state2) == 1) {\n-                String op = \"=\";\n-                if (sel.getTablePerClassMeta() != null) {\n-                    if (val1 instanceof Type) {\n-                        if ((ClassMapping) val2.getMetaData() != sel.getTablePerClassMeta())\n-                            op = \"<>\";\n-                    }\n-                    else {\n-                        if ((ClassMapping) val1.getMetaData() != sel.getTablePerClassMeta())\n-                            op = \"<>\";\n-                    }\n+                ClassMapping sub = getSubClassMapping(val1, val2, ctx);\n+                if (ctx.isVerticalStrat) {\n+                    processVerticalTypeAppend(sel, val1, val2, ctx, buf);\n+                    return;\n                 }\n+                    \n+                String op = \"=\";\n+                if (sel.getTablePerClassMeta() != null && sub != sel.getTablePerClassMeta()) \n+                    op = \"<>\";\n+\n                 ctx.store.getDBDictionary().comparison(buf, op,\n                     new FilterValueImpl(sel, ctx, bstate.state1, val1),\n                     new FilterValueImpl(sel, ctx, bstate.state2, val2));\n@@ -87,4 +115,27 @@ else if (val1Null || val2Null) {\n             }\n         }\n     }\n+    \n+    void processVerticalTypeAppend(Select sel, Val val1, Val val2, ExpContext ctx,  \n+        SQLBuffer buf) {\n+        ClassMapping sub = getSubClassMapping(val1, val2, ctx);\n+        List selectFrom = sel.getJoinedTableClassMeta();\n+        if (selectFrom == null) {\n+            selectFrom = new ArrayList();\n+            sel.setJoinedTableClassMeta(selectFrom);\n+        }\n+        ClassMapping cm1 = (ClassMapping)((val1 instanceof Type) ? val1.getMetaData() :\n+            val1.getMetaData());\n+        if (sub.isVerticalStrategy()) {\n+            ClassMetaData[] subs = cm1.getPCSubclassMetaDatas();\n+            for (int i = 0; i < subs.length; i++) {\n+                if (!Modifier.isAbstract(subs[i].getDescribedType().getModifiers()) && subs[i] == sub \n+                    && !selectFrom.contains(subs[i]))\n+                    selectFrom.add(subs[i]);\n+            }\n+            buf.append(\"1=1\");\n+            return;\n+        }\n+    }\n+\n }"},{"sha":"a0fa3c18aec37e1f696b49e681bad1da2b414ced","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ExpContext.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ExpContext.java","raw_url":"https://github.com/apache/openjpa/raw/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ExpContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ExpContext.java?ref=44a7674d6ef00a358a9d8d51c7a5fc219518c34c","patch":"@@ -46,6 +46,8 @@\n     public JDBCFetchConfiguration fetch; \n \n     public ClassMapping tpcMeta = null;\n+    \n+    public boolean isVerticalStrat = false;\n \n     public ExpContext() {\n     }"},{"sha":"a222e7a2a278fb8e37ce5ac166a87aa4cbcee880","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","raw_url":"https://github.com/apache/openjpa/raw/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java?ref=44a7674d6ef00a358a9d8d51c7a5fc219518c34c","patch":"@@ -24,8 +24,8 @@\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.Discriminator;\n import org.apache.openjpa.jdbc.meta.strats.NoneDiscriminatorStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.VerticalClassStrategy;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n-import org.apache.openjpa.jdbc.sql.PostgresDictionary;\n import org.apache.openjpa.jdbc.sql.Raw;\n import org.apache.openjpa.kernel.exps.AggregateListener;\n import org.apache.openjpa.kernel.exps.Arguments;\n@@ -574,4 +574,14 @@ public Value nullIfExpression(Value val1, Value val2) {\n     public Value newFunction(String functionName, Class<?> resultType, Value... args) {\n         return new DatastoreFunction(functionName, resultType, newArgumentList(args));\n     }\n+    \n+    public boolean isVerticalType(Value val) {\n+        if (!(val instanceof Type))\n+            return false;\n+        ClassMapping cm = (ClassMapping)((Type)val).getMetaData();\n+        String strat = cm.getMappingInfo().getHierarchyStrategy(); \n+        if (strat != null && strat.equals(VerticalClassStrategy.ALIAS)) \n+            return true;\n+        return false;\n+    }\n }"},{"sha":"802a88a8eb1a6a60571849a979b4d4b42a4853e6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotEqualTypeExpression.java","status":"modified","additions":71,"deletions":7,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotEqualTypeExpression.java","raw_url":"https://github.com/apache/openjpa/raw/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotEqualTypeExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotEqualTypeExpression.java?ref=44a7674d6ef00a358a9d8d51c7a5fc219518c34c","patch":"@@ -18,9 +18,14 @@\n  */\n package org.apache.openjpa.jdbc.kernel.exps;\n \n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.meta.ClassMetaData;\n \n /**\n  * Compares two entity types.\n@@ -37,6 +42,31 @@ public NotEqualTypeExpression(Val val1, Val val2) {\n         super(val1, val2);\n     }\n \n+    private ClassMapping getSubClassMapping(Val val1, Val val2, ExpContext ctx) {\n+        ClassMapping sub = null;\n+        Val val = val1 instanceof Type ? val2 : val1;\n+        if (val instanceof TypeLit)\n+            sub = (ClassMapping) val.getMetaData();\n+        else if (val instanceof Param)\n+            sub = ((Param) val).getValueMetaData(ctx);\n+        if (sub != null)\n+            ctx.isVerticalStrat = sub.isVerticalStrategy();\n+        return sub;\n+    }\n+\n+    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n+            SQLBuffer buf) {\n+        Val val1 = getValue1();\n+        Val val2 = getValue2();\n+        ClassMapping sub = getSubClassMapping(val1, val2, ctx);\n+        if (ctx.isVerticalStrat) {\n+            appendTo(sel, ctx, (BinaryOpExpState)state, buf, false, false);\n+            return;\n+        }\n+        \n+        super.appendTo(sel, ctx, state, buf);\n+    }\n+    \n     public void appendTo(Select sel, ExpContext ctx, BinaryOpExpState bstate, \n         SQLBuffer buf, boolean val1Null, boolean val2Null) {\n         if (val1Null && val2Null)\n@@ -59,14 +89,19 @@ else if (val1Null || val2Null) {\n             Val val2 = getValue2();\n             if (val1.length(sel, ctx, bstate.state1) == 1 \n                 && val2.length(sel, ctx, bstate.state2) == 1) {\n-                String op = \"<>\";\n-                if (val1 instanceof Type)\n-                    if ((ClassMapping) val2.getMetaData() != sel.getTablePerClassMeta())\n-                        op = \"=\";\n+                ClassMapping sub = getSubClassMapping(val1, val2, ctx);\n+                if (ctx.isVerticalStrat) {\n+                    processVerticalTypeAppend(sel, val1, val2, ctx, buf);\n+                    return;\n+                }\n+                    \n+                String op;\n+                if (sub != sel.getTablePerClassMeta())\n+                    op = \"=\";\n                 else\n-                    if ((ClassMapping) val1.getMetaData() != sel.getTablePerClassMeta())\n-                        op = \"=\";\n-                ctx.store.getDBDictionary().comparison(buf, op,\n+                    op = \"<>\";\n+                \n+               ctx.store.getDBDictionary().comparison(buf, op,\n                     new FilterValueImpl(sel, ctx, bstate.state1, val1),\n                     new FilterValueImpl(sel, ctx, bstate.state2, val2));\n             } else {\n@@ -84,4 +119,33 @@ else if (val1Null || val2Null) {\n             }\n         }\n     }\n+    \n+    void processVerticalTypeAppend(Select sel, Val val1, Val val2, ExpContext ctx,  \n+            SQLBuffer buf) {\n+        ClassMapping sub = getSubClassMapping(val1, val2, ctx);\n+        ClassMapping cm1 = (ClassMapping)((val1 instanceof Type) ? val1.getMetaData() :\n+            val1.getMetaData());\n+        if (sub != null && sub.isVerticalStrategy()) {\n+            ClassMetaData[] subs = cm1.getPCSubclassMetaDatas();\n+            List exSelectFrom = sel.getExcludedJoinedTableClassMeta();\n+            if (exSelectFrom == null) {\n+                exSelectFrom = new ArrayList();\n+                sel.setExcludedJoinedTableClassMeta(exSelectFrom);\n+            }\n+            List selectFrom = sel.getJoinedTableClassMeta();\n+            exSelectFrom.add(sub);\n+            if (selectFrom == null) {\n+                selectFrom = new ArrayList();\n+                sel.setJoinedTableClassMeta(selectFrom);\n+            }\n+            \n+            for (int i = 0; i < subs.length; i++) {\n+                if (!Modifier.isAbstract(subs[i].getDescribedType().getModifiers()) && \n+                    !selectFrom.contains(subs[i]))\n+                    selectFrom.add(subs[i]);\n+            }\n+            buf.append(\"1=1\");\n+            return;\n+        }\n+    }    \n }"},{"sha":"3a2f651e356b8b379800af96e905e151f80383a9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","raw_url":"https://github.com/apache/openjpa/raw/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java?ref=44a7674d6ef00a358a9d8d51c7a5fc219518c34c","patch":"@@ -75,6 +75,14 @@ public void setIndex(int idx) {\n         _idx = idx;\n     }\n \n+    public ClassMapping getValueMetaData(ExpContext ctx) {\n+        Object[] params = ctx.params;\n+        if (params[_idx] != null && params[_idx] instanceof Class)\n+            return (ClassMapping) ctx.store.getConfiguration().getMetaDataRepositoryInstance().\n+                getMetaData((Class) params[_idx], getClass().getClassLoader(), true);\n+        return null;\n+    }\n+\n     public Object getValue(Object[] params) {\n         return Filters.convert(params[_idx], getType());\n     }"},{"sha":"f565fab8f55c7b9ad91f6ef6b931f4b5ddc7741c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","raw_url":"https://github.com/apache/openjpa/raw/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java?ref=44a7674d6ef00a358a9d8d51c7a5fc219518c34c","patch":"@@ -34,6 +34,7 @@\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.strats.NoneClassStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.VerticalClassStrategy;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n@@ -1101,4 +1102,11 @@ private Object getValueFromUnmanagedInstance(Object obj, Column[] cols,\n     \t}\n     \treturn result;\n     }\n+\n+    public boolean isVerticalStrategy() {\n+        String strat = getMappingInfo().getHierarchyStrategy();\n+        if (strat != null && strat.equals(VerticalClassStrategy.ALIAS))\n+            return true;\n+        return false;\n+    }\n }"},{"sha":"f7541fc93bac6cbe5b7c2a415e7f29a15480fba9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","raw_url":"https://github.com/apache/openjpa/raw/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java?ref=44a7674d6ef00a358a9d8d51c7a5fc219518c34c","patch":"@@ -911,6 +911,22 @@ public void setTablePerClassMeta(ClassMapping meta) {\n         public ClassMapping getTablePerClassMeta() {\n             return sel.getTablePerClassMeta();\n         }\n+        \n+        public void setJoinedTableClassMeta(List meta) {\n+            sel.setJoinedTableClassMeta(meta);\n+        }\n+\n+        public List getJoinedTableClassMeta() {\n+            return sel.getJoinedTableClassMeta();\n+        }\n+        \n+        public void setExcludedJoinedTableClassMeta(List meta) {\n+            sel.setExcludedJoinedTableClassMeta(meta);\n+        }\n+\n+        public List getExcludedJoinedTableClassMeta() {\n+            return sel.getExcludedJoinedTableClassMeta();\n+        }\n     }\n \n     /**"},{"sha":"df3c6716102b466ede9ff6b969885e9c52eb9f6e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","raw_url":"https://github.com/apache/openjpa/raw/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java?ref=44a7674d6ef00a358a9d8d51c7a5fc219518c34c","patch":"@@ -747,4 +747,24 @@ public SelectExecutor eagerClone(FieldMapping key, int eagerType,\n      * get table-per-class metadata for polymorphic queries\n      */\n     public ClassMapping getTablePerClassMeta();\n+\n+    /**\n+     * Set joined table metadatas for polymorphic queries\n+     */\n+    public void setJoinedTableClassMeta(List meta);\n+\n+    /**\n+     * get joined table metadatas for polymorphic queries\n+     */\n+    public List getJoinedTableClassMeta();\n+\n+    /**\n+     * Set joined table metadatas excluded for polymorphic queries\n+     */\n+    public void setExcludedJoinedTableClassMeta(List meta);\n+\n+    /**\n+     * get joined table metadatas excluded for polymorphic queries\n+     */\n+    public List getExcludedJoinedTableClassMeta();\n }"},{"sha":"2109920e36479b8f1ed28e1a9601c25c44f44035","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=44a7674d6ef00a358a9d8d51c7a5fc219518c34c","patch":"@@ -170,12 +170,32 @@\n     // A path navigation is begin with this schema alias\n     private String _schemaAlias = null;\n     private ClassMapping _tpcMeta = null;\n+    private List _joinedTables = null;\n+    private List _exJoinedTables = null;\n+    \n     public ClassMapping getTablePerClassMeta() {\n         return _tpcMeta;\n     }\n     public void setTablePerClassMeta(ClassMapping meta) {\n         _tpcMeta = meta;\n     }\n+    \n+    public void setJoinedTableClassMeta(List meta) {\n+        _joinedTables = meta;\n+    }\n+\n+    public List getJoinedTableClassMeta() {\n+        return _joinedTables;\n+    }\n+    \n+    public void setExcludedJoinedTableClassMeta(List meta) {\n+        _exJoinedTables = meta;\n+    }\n+\n+    public List getExcludedJoinedTableClassMeta() {\n+        return _exJoinedTables;\n+    }\n+    \n      \n     /**\n      * Helper method to return the proper table alias for the given alias index."},{"sha":"5098a1870a41be5fba20a17a99fe0e9c36eadc57","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionFactory.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionFactory.java","raw_url":"https://github.com/apache/openjpa/raw/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionFactory.java?ref=44a7674d6ef00a358a9d8d51c7a5fc219518c34c","patch":"@@ -496,4 +496,9 @@ public Value simpleCaseExpression(Value caseOperand,\n      * Return a value representing the given datastore function with the given arguments.\n      */\n     public Value newFunction(String functionName, Class<?> resultType, Value... args);\n+    \n+    /**\n+     * Return true if the Value is a Type expression and the Type uses joined table strategy.\n+     */\n+    public boolean isVerticalType(Value val);\n }"},{"sha":"c35b30a3ccfcaeba6ecff715a999137d46bfd4de","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/InMemoryExpressionFactory.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/InMemoryExpressionFactory.java","raw_url":"https://github.com/apache/openjpa/raw/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/InMemoryExpressionFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/InMemoryExpressionFactory.java?ref=44a7674d6ef00a358a9d8d51c7a5fc219518c34c","patch":"@@ -796,4 +796,8 @@ public Value nullIfExpression(Value val1, Value val2) {\n     public Value newFunction(String functionName, Class<?> resultType, Value... args) {\n         throw new AbstractMethodError();\n     }\n+    \n+    public boolean isVerticalType(Value val) {\n+        return false;\n+    }\n }"},{"sha":"1f7f75687eaa15a8d38ab9587a9478f79b024ebb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":30,"deletions":8,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=44a7674d6ef00a358a9d8d51c7a5fc219518c34c","patch":"@@ -35,7 +35,6 @@\n import java.util.Stack;\n import java.util.TreeSet;\n \n-import org.apache.commons.collections.map.LinkedMap;\n import org.apache.openjpa.conf.Compatibility;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.kernel.BrokerFactory;\n@@ -1137,23 +1136,33 @@ private Object eval(JPQLNode node) {\n \n                     // special case for <value> IN (<subquery>) or\n                     // <value> IN (<single value>)\n-                    if (!(val2 instanceof Literal) && node.getChildCount() == 2)\n+                    if (useContains(not, val1, val2, node))    \n                         return evalNot(not, factory.contains(val2, val1)); \n \n                     // this is currently a sequence of OR expressions, since we\n                     // do not have support for IN expressions\n                     setImplicitTypes(val1, val2, null);\n-                    if (inExp == null)\n-                        inExp = factory.equal(val1, val2);\n-                    else\n-                        inExp = factory.or(inExp, factory.equal(val1, val2));\n+                    if (isVerticalTypeInExpr(val1, node) && not) {\n+                        if (inExp == null)\n+                            inExp = factory.notEqual(val1, val2);\n+                        else\n+                            inExp = factory.and(inExp, factory.notEqual(val1, val2));\n+                    } else {\n+                        if (inExp == null)\n+                            inExp = factory.equal(val1, val2);\n+                        else\n+                            inExp = factory.or(inExp, factory.equal(val1, val2));\n+                    }\n                 }\n \n                 // we additionally need to add in a \"NOT NULL\" clause, since\n                 // the IN behavior that is expected by the CTS also expects\n                 // to filter our NULLs\n-                return and(evalNot(not, inExp),\n-                    factory.notEqual(val1, factory.getNull()));\n+                if (isVerticalTypeInExpr(val1, node)) \n+                    return inExp;\n+                else    \n+                    return and(evalNot(not, inExp),\n+                            factory.notEqual(val1, factory.getNull()));\n \n             case JJTISNULL: // x.field IS [NOT] NULL\n                 val1 = getValue(onlyChild(node));\n@@ -1414,6 +1423,19 @@ else if (node.getChildCount() == 2\n         }\n     }\n     \n+    private boolean useContains(boolean not, Value val1, Value val2, JPQLNode node) {\n+        if (isVerticalTypeInExpr(val1, node) && not)\n+            return false;\n+        else\n+            return (!(val2 instanceof Literal) && node.getChildCount() == 2);\n+    }\n+    \n+    private boolean isVerticalTypeInExpr(Value val, JPQLNode node) {\n+        if (node.id != JJTIN)\n+            return false;\n+        return factory.isVerticalType(val);\n+    }\n+    \n     private Value getIntegerValue(JPQLNode node) {\n         BigDecimal bigdec = new BigDecimal\n         (node.text.endsWith(\"l\") || node.text.endsWith(\"L\")"},{"sha":"d61338c02ca5e84cd7637af3da1cf99370b16058","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/FulltimeEmployee.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/FulltimeEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/FulltimeEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/FulltimeEmployee.java?ref=44a7674d6ef00a358a9d8d51c7a5fc219518c34c","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance.jointable;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.jdbc.Index;\n+\n+@Inheritance(strategy=InheritanceType.JOINED)\n+@Entity\n+@Table(name=\"WFulltimeEmployee\")\n+public class FulltimeEmployee extends Employee {\n+    @Column(name=\"FTEmpProp1\",length=10)\n+    @Basic\n+    private String ftEmpProp1;\n+\n+\n+    @ManyToOne(optional=true,cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH},fetch=FetchType.LAZY)\n+    @JoinColumn(name=\"Dept_No\",referencedColumnName=\"OID\")\n+    @Index\n+    private Department dept;\n+\n+    public FulltimeEmployee() {\n+    }\n+\n+    public FulltimeEmployee(String desc) {\n+        setDescription(desc);\n+    }\n+\n+    public String getFTEmpProp1() {\n+        return ftEmpProp1;\n+    }\n+\n+    public void setFTEmpProp1(String ftEmpProp1) {\n+        this.ftEmpProp1 = ftEmpProp1;\n+    }\n+\n+    public Department getDept() {\n+        return dept;\n+    }\n+\n+    public void setDept(Department dept) {\n+        this.dept = dept;\n+    }\n+\n+    public boolean equals(Object other) {\n+        if (other instanceof FulltimeEmployee) {\n+            FulltimeEmployee c = (FulltimeEmployee) other;\n+            if (c.getOID() == this.getOID() &&\n+                c.getDept() == this.getDept())\n+                return true;\n+        }\n+        return false;\n+    }\n+}\n+"},{"sha":"17e798b0dbae0e91d4f9058e6624cdfbd0d511cd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/ParttimeEmployee.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/ParttimeEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/ParttimeEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/ParttimeEmployee.java?ref=44a7674d6ef00a358a9d8d51c7a5fc219518c34c","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance.jointable;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.jdbc.Index;\n+\n+@Inheritance(strategy=InheritanceType.JOINED)\n+@Entity\n+@Table(name=\"WParttimeEmployee\")\n+public class ParttimeEmployee extends Employee {\n+    @Column(name=\"PTEmpProp1\",length=10)\n+    @Basic\n+    private String ptEmpProp1;\n+\n+\n+    @ManyToOne(optional=true,cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH},fetch=FetchType.LAZY)\n+    @JoinColumn(name=\"Dept_No\",referencedColumnName=\"OID\")\n+    @Index\n+    private Department dept;\n+\n+    public ParttimeEmployee() {\n+    }\n+\n+    public ParttimeEmployee(String desc) {\n+        setDescription(desc);\n+    }\n+\n+    public String getPTEmpProp1() {\n+        return ptEmpProp1;\n+    }\n+\n+    public void setPTEmpProp1(String ptEmpProp1) {\n+        this.ptEmpProp1 = ptEmpProp1;\n+    }\n+\n+    public Department getDept() {\n+        return dept;\n+    }\n+\n+    public void setDept(Department dept) {\n+        this.dept = dept;\n+    }\n+\n+    public boolean equals(Object other) {\n+        if (other instanceof ParttimeEmployee) {\n+            ParttimeEmployee c = (ParttimeEmployee) other;\n+            if (c.getOID() == this.getOID() &&\n+                c.getDept() == this.getDept())\n+                return true;\n+        }\n+        return false;\n+    }\n+}\n+"},{"sha":"99c67b4764e0d59afaba1da28e01f5338375cb08","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/TestInheritanceTypeJoinedQuery.java","status":"modified","additions":98,"deletions":7,"changes":105,"blob_url":"https://github.com/apache/openjpa/blob/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/TestInheritanceTypeJoinedQuery.java","raw_url":"https://github.com/apache/openjpa/raw/44a7674d6ef00a358a9d8d51c7a5fc219518c34c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/TestInheritanceTypeJoinedQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/TestInheritanceTypeJoinedQuery.java?ref=44a7674d6ef00a358a9d8d51c7a5fc219518c34c","patch":"@@ -30,9 +30,13 @@\n \n \n public class TestInheritanceTypeJoinedQuery  extends SQLListenerTestCase {\n+    private int numPTEmployees = 1;\n+    private int numFTEmployees = 2;\n+    private int numContractors = 3;\n \n     public void setUp() {\n         setUp(Contractor.class, Employee.class, Department.class, Person.class,\n+            FulltimeEmployee.class, ParttimeEmployee.class,     \n             CLEAR_TABLES);\n         populate();\n     }\n@@ -41,13 +45,25 @@ public void populate() {\n         EntityManager em = emf.createEntityManager();\n         \n         Department d = new Department(\"IT\");\n-        for (int i = 0; i < 3; i++) {\n+        for (int i = 0; i < numContractors; i++) {\n             Contractor c = new Contractor(\"ctr\" + i);\n             c.setDept(d);\n             em.persist(c);\n         }\n         em.persist(d);\n-      \n+\n+        for (int i = 0; i < numFTEmployees; i++) {\n+            FulltimeEmployee f = new FulltimeEmployee(\"ftemp\" + i);\n+            f.setDept(d);\n+            em.persist(f);\n+        }\n+\n+        for (int i = 0; i < numPTEmployees; i++) {\n+            ParttimeEmployee p = new ParttimeEmployee(\"ptemp\" + i);\n+            p.setDept(d);\n+            em.persist(p);\n+        }\n+        \n         em.getTransaction().begin();\n         em.getTransaction().commit();\n         em.close();\n@@ -57,16 +73,28 @@ public void testInheritanceJoinedTypeOperator() {\n         EntityManager em = emf.createEntityManager();\n         Query q = null;\n         String qS = null;\n+        List rs = null;\n+        \n+        qS = \"SELECT p FROM Person p where TYPE(p) <> Contractor\";\n+        q = em.createQuery(qS);\n+        rs = q.getResultList();\n+        assertEquals(numPTEmployees + numFTEmployees, rs.size());\n+        for (int i = 0; i < rs.size(); i++){\n+            Object obj = rs.get(i);\n+            assertTrue((obj instanceof ParttimeEmployee) || (obj instanceof FulltimeEmployee));\n+        }\n+        \n         qS = \"SELECT p FROM Person p where TYPE(p) = Contractor\";\n         q = em.createQuery(qS); \n-        List rs = q.getResultList();\n-        assertEquals(3, rs.size());\n+        rs = q.getResultList();\n+        assertEquals(numContractors, rs.size());\n         for (int i = 0; i < rs.size(); i++)\n             assertTrue(rs.get(i) instanceof Contractor);\n+        \n         qS = \"select p from Person p where TYPE(p) in (?1) order by p.name\";\n         q = em.createQuery(qS).setParameter(1, Contractor.class);\n         rs = q.getResultList();\n-        assertEquals(3, rs.size());\n+        assertEquals(numContractors, rs.size());\n         for (int i = 0; i < rs.size(); i++)\n             assertTrue(rs.get(i) instanceof Contractor);\n \n@@ -82,6 +110,67 @@ public void testInheritanceJoinedTypeOperator() {\n             //System.out.println(e.getMessage());\n         }\n         \n+        qS = \"SELECT p FROM Person p where TYPE(p) = Contractor AND p.name = 'Name ctr0'\";\n+        q = em.createQuery(qS);\n+        rs = q.getResultList();\n+        assertEquals(1, rs.size());\n+        for (int i = 0; i < rs.size(); i++)\n+            assertTrue(rs.get(i) instanceof Contractor);\n+\n+        qS = \"select p from Person p where TYPE(p) in (?1, ?2) and p.name = ?3 order by p.name\";\n+        q = em.createQuery(qS);\n+        q.setParameter(1, Contractor.class);\n+        q.setParameter(2, FulltimeEmployee.class);\n+        q.setParameter(3, \"Name ctr0\");\n+       \n+        rs = q.getResultList();\n+        assertEquals(1, rs.size());\n+        for (int i = 0; i < rs.size(); i++) {\n+            Object obj = rs.get(i);\n+            assertTrue(obj instanceof Contractor || obj instanceof FulltimeEmployee);\n+        }\n+\n+        qS = \"select p from Person p where TYPE(p) in (?1, ?2) order by p.name\";\n+        q = em.createQuery(qS);\n+        q.setParameter(1, Contractor.class);\n+        q.setParameter(2, FulltimeEmployee.class);\n+        \n+        rs = q.getResultList();\n+        assertEquals(numContractors + numFTEmployees, rs.size());\n+        for (int i = 0; i < rs.size(); i++) {\n+            Object obj = rs.get(i);\n+            assertTrue(obj instanceof Contractor || obj instanceof FulltimeEmployee);\n+        }\n+        \n+        qS = \"select p from Person p where TYPE(p) not in (Contractor) order by p.name\";\n+        q = em.createQuery(qS);\n+        rs = q.getResultList();\n+        assertEquals(numPTEmployees + numFTEmployees, rs.size());\n+        for (int i = 0; i < rs.size(); i++){\n+            Object obj = rs.get(i);\n+            assertTrue((obj instanceof ParttimeEmployee) || (obj instanceof FulltimeEmployee));\n+        }\n+        \n+        qS = \"select p from Person p where TYPE(p) not in (?1) order by p.name\";\n+        q = em.createQuery(qS);\n+        q.setParameter(1, Contractor.class);\n+        rs = q.getResultList();\n+        assertEquals(numPTEmployees + numFTEmployees, rs.size());\n+        for (int i = 0; i < rs.size(); i++){\n+            Object obj = rs.get(i);\n+            assertTrue((obj instanceof ParttimeEmployee) || (obj instanceof FulltimeEmployee));\n+        }\n+\n+        qS = \"select p from Person p where TYPE(p) not in (?1, ?2) order by p.name\";\n+        q = em.createQuery(qS);\n+        q.setParameter(1, Contractor.class);\n+        q.setParameter(2, FulltimeEmployee.class);\n+        rs = q.getResultList();\n+        assertEquals(numPTEmployees, rs.size());\n+        for (int i = 0; i < rs.size(); i++){\n+            Object obj = rs.get(i);\n+            assertTrue((obj instanceof ParttimeEmployee) || (obj instanceof FulltimeEmployee));\n+        }\n     }\n \n     public void testInheritanceTypeJoinedQuery() {\n@@ -183,8 +272,10 @@ public void testInheritanceTypeJoinedQuery() {\n \n         qS = \"SELECT p FROM Person p \";\n         q = em.createQuery(qS);\n-        for (Object aResult: (List<Object>) q.getResultList()) {\n-            assertTrue(aResult instanceof Contractor);\n+        List rs = (List<Object>) q.getResultList();\n+        assertEquals(numPTEmployees + numFTEmployees + numContractors, rs.size());        \n+        for (Object aResult: rs) {\n+            assertTrue(aResult instanceof Person);\n         }\n \n         em.close();"}]}

