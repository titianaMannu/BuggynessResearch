{"sha":"44e06d03a31c2a2a4f08fbccc6b3021b230ad427","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ0ZTA2ZDAzYTMxYzJhMmE0ZjA4ZmJjY2M2YjMwMjFiMjMwYWQ0Mjc=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-22T15:46:58Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-22T15:46:58Z"},"message":"OPENJPA-536. Committing on behalf of Amy Yang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@650559 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fb3767b3c5957ca249efbf9eae89f5a9646dd5df","url":"https://api.github.com/repos/apache/openjpa/git/trees/fb3767b3c5957ca249efbf9eae89f5a9646dd5df"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/44e06d03a31c2a2a4f08fbccc6b3021b230ad427","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/44e06d03a31c2a2a4f08fbccc6b3021b230ad427","html_url":"https://github.com/apache/openjpa/commit/44e06d03a31c2a2a4f08fbccc6b3021b230ad427","comments_url":"https://api.github.com/repos/apache/openjpa/commits/44e06d03a31c2a2a4f08fbccc6b3021b230ad427/comments","author":null,"committer":null,"parents":[{"sha":"a657dda4654163d2dbf0d0a8f30fa4a2cd466c7d","url":"https://api.github.com/repos/apache/openjpa/commits/a657dda4654163d2dbf0d0a8f30fa4a2cd466c7d","html_url":"https://github.com/apache/openjpa/commit/a657dda4654163d2dbf0d0a8f30fa4a2cd466c7d"}],"stats":{"total":132,"additions":82,"deletions":50},"files":[{"sha":"12e18562756ee1c4cd65fa952818cd2d13927a83","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/44e06d03a31c2a2a4f08fbccc6b3021b230ad427/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java","raw_url":"https://github.com/apache/openjpa/raw/44e06d03a31c2a2a4f08fbccc6b3021b230ad427/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java?ref=44e06d03a31c2a2a4f08fbccc6b3021b230ad427","patch":"@@ -30,7 +30,7 @@\n public class InheritanceComparator\n     implements Comparator, Serializable {\n \n-    private Class _base = null;\n+    private Class _base = Object.class;\n \n     /**\n      * Set the least-derived type possible; defaults to <code>null</code>.\n@@ -92,8 +92,6 @@ else if (i1 > i2)\n     private int levels(Class to) {\n         if (to.isInterface())\n             return to.getInterfaces().length;\n-        if (_base == null)\n-            return 0;\n         for (int i = 0; to != null; i++, to = to.getSuperclass())\n             if (to == _base)\n                 return i;"},{"sha":"9ea4c9f5a526e4462ed98224df65fe62aac35251","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceOrderedMetaDataList.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/44e06d03a31c2a2a4f08fbccc6b3021b230ad427/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceOrderedMetaDataList.java","raw_url":"https://github.com/apache/openjpa/raw/44e06d03a31c2a2a4f08fbccc6b3021b230ad427/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceOrderedMetaDataList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceOrderedMetaDataList.java?ref=44e06d03a31c2a2a4f08fbccc6b3021b230ad427","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.meta;\n+\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.ListIterator;\n+import java.io.Serializable;\n+\n+public class InheritanceOrderedMetaDataList\n+    implements Serializable {\n+\n+    private MetaDataInheritanceComparator _comp\n+        = new MetaDataInheritanceComparator();\n+    private LinkedList<ClassMetaData> buffer = new LinkedList<ClassMetaData>();\n+\n+    public boolean add(ClassMetaData meta) {\n+        for (ListIterator<ClassMetaData> itr = buffer.listIterator();\n+            itr.hasNext();) {\n+            int ord = _comp.compare(meta, itr.next());\n+            if (ord > 0)\n+                continue;\n+            if (ord == 0)\n+                return false;\n+            itr.previous();\n+            itr.add(meta);\n+            return true;\n+        }\n+        buffer.add(meta);\n+        return true;\n+    }\n+\n+    public boolean remove(ClassMetaData meta) {\n+        return buffer.remove(meta);\n+    }\n+\n+    public ClassMetaData peek() {\n+        return buffer.peek();\n+    }\n+    \n+    public int size() {\n+        return buffer.size();\n+    }\n+    \n+    public Iterator<ClassMetaData> iterator() {\n+        return buffer.iterator();\n+    }\n+    \n+    public boolean isEmpty() {\n+        return buffer.isEmpty();\n+    }\n+    \n+    public void clear() {\n+        buffer.clear();\n+    }\n+}"},{"sha":"1b5845769d80a1ba85922d93ec1d8be73f420fcf","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":7,"deletions":34,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/44e06d03a31c2a2a4f08fbccc6b3021b230ad427/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/44e06d03a31c2a2a4f08fbccc6b3021b230ad427/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=44e06d03a31c2a2a4f08fbccc6b3021b230ad427","patch":"@@ -31,7 +31,6 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import java.util.SortedSet;\n import java.util.TreeSet;\n \n import org.apache.commons.lang.StringUtils;\n@@ -137,10 +136,10 @@\n     private final Collection _registered = new HashSet();\n \n     // set of metadatas we're in the process of resolving\n-    private final SortedSet _resolving = new TreeSet\n-        (new MetaDataInheritanceComparator());\n-    private final SortedSet _mapping = new TreeSet\n-        (new MetaDataInheritanceComparator());\n+    private final InheritanceOrderedMetaDataList _resolving =\n+        new InheritanceOrderedMetaDataList();\n+    private final InheritanceOrderedMetaDataList _mapping =\n+        new InheritanceOrderedMetaDataList();\n     private final List _errs = new LinkedList();\n \n     // system listeners\n@@ -574,12 +573,6 @@ private void resolve(ClassMetaData meta) {\n      * if we're still in the process of resolving other metadatas.\n      */\n     private List resolveMeta(ClassMetaData meta) {\n-\n-        // pcl: 10 April 2008: disabling temporarily as this is causing\n-        // integration problems. A more complete fix will be forthcoming.\n-        // See OPENJPA-536. Also disabled code in TestGetMetaData.\n-        // setBaseIfNecessary(meta);\n-\n         if (meta.getPCSuperclass() == null) {\n             // set superclass\n             Class sup = meta.getDescribedType().getSuperclass();\n@@ -623,27 +616,6 @@ private List resolveMeta(ClassMetaData meta) {\n         return processBuffer(meta, _resolving, MODE_META);\n     }\n     \n-    private void setBaseIfNecessary(ClassMetaData meta) {\n-        if (_resolving == null)\n-            return;\n-\n-        InheritanceComparator comp =\n-            (InheritanceComparator) _resolving.comparator();\n-        if (meta.getPCSuperclass() == null) {\n-            Class sup = meta.getDescribedType().getSuperclass();\n-            Class pBase = null;\n-            while (sup != null && sup != Object.class) {\n-                pBase = sup;\n-                sup = sup.getSuperclass();\n-            }\n-            if (pBase != null && !pBase.equals(comp.getBase())) {\n-                // setBase() can be called because getMetaData() is\n-                // syncronized\n-                comp.setBase(pBase);\n-            }\n-        }\n-    }\n-\n     /**\n      * Load mapping information for the given metadata.\n      */\n@@ -724,7 +696,8 @@ private boolean resolveMapping(ClassMetaData meta) {\n     /**\n      * Process the given metadata and the associated buffer.\n      */\n-    private List processBuffer(ClassMetaData meta, SortedSet buffer, int mode) {\n+    private List processBuffer(ClassMetaData meta,\n+        InheritanceOrderedMetaDataList buffer, int mode) {\n         // if we're already processing a metadata, just buffer this one; when\n         // the initial metadata finishes processing, we traverse the buffer\n         // and process all the others that were introduced during reentrant\n@@ -739,7 +712,7 @@ private List processBuffer(ClassMetaData meta, SortedSet buffer, int mode) {\n         ClassMetaData buffered;\n         List processed = new ArrayList(5);\n         while (!buffer.isEmpty()) {\n-            buffered = (ClassMetaData) buffer.first();\n+            buffered = buffer.peek();\n             try {\n                 buffered.resolve(mode);\n                 processed.add(buffered);"},{"sha":"9439385848fd78f23e6da4ee2cc04083fd8d983c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestGetMetaData.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/44e06d03a31c2a2a4f08fbccc6b3021b230ad427/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestGetMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/44e06d03a31c2a2a4f08fbccc6b3021b230ad427/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestGetMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestGetMetaData.java?ref=44e06d03a31c2a2a4f08fbccc6b3021b230ad427","patch":"@@ -29,10 +29,7 @@ public void setUp() {\n     }\r\n \r\n     public void testGetMetaData() {\r\n-        // pcl: 10 April 2008: disabling temporarily as this is causing\r\n-        // integration problems. A more complete fix will be forthcoming.\r\n-        // See OPENJPA-536. Also disabled code in MetaDataRepository.\r\n-        // assertNotNull(JPAFacadeHelper.getMetaData(emf, Item.class));\r\n-        // assertNotNull(JPAFacadeHelper.getMetaData(emf, Person.class));\r\n+        assertNotNull(JPAFacadeHelper.getMetaData(emf, Item.class));\r\n+        assertNotNull(JPAFacadeHelper.getMetaData(emf, Person.class));\r\n     }\r\n }\r"},{"sha":"c93377fc49a13d7b2ebe26dd4e372bd07586841a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/44e06d03a31c2a2a4f08fbccc6b3021b230ad427/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java","raw_url":"https://github.com/apache/openjpa/raw/44e06d03a31c2a2a4f08fbccc6b3021b230ad427/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java?ref=44e06d03a31c2a2a4f08fbccc6b3021b230ad427","patch":"@@ -25,10 +25,6 @@\n \r\n public class TestMetaDataInheritanceComparator extends PersistenceTestCase {\r\n \r\n-    public void testInheritanceComparatorWithoutBase() {\r\n-        inheritanceComparatorHelper(false);\r\n-    }\r\n-\r\n     public void testInheritanceComparatorWithBase() {\r\n         inheritanceComparatorHelper(true);\r\n     }\r\n@@ -47,10 +43,6 @@ private void inheritanceComparatorHelper(boolean base) {\n         assertTrue(comp.compare(AbstractThing.class, C.class) < 0);\r\n     }\r\n \r\n-    public void testMetaDataInheritanceComparatorWithoutBase() {\r\n-        metaDataInheritanceComparatorHelper(false);\r\n-    }\r\n-\r\n     public void testMetaDataInheritanceComparatorWithBase() {\r\n         metaDataInheritanceComparatorHelper(true);\r\n     }\r"}]}

