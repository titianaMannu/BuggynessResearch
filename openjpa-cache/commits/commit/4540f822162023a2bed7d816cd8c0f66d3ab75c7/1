{"sha":"4540f822162023a2bed7d816cd8c0f66d3ab75c7","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ1NDBmODIyMTYyMDIzYTJiZWQ3ZDgxNmNkOGMwZjY2ZDNhYjc1Yzc=","commit":{"author":{"name":"Jody Grassel","email":"jgrassel@apache.org","date":"2014-11-03T18:40:59Z"},"committer":{"name":"Jody Grassel","email":"jgrassel@apache.org","date":"2014-11-03T18:40:59Z"},"message":"OPENJPA-1988: openjpa does not process persistence unit default <cascade-persist>\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1636415 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ee864865af66d694462e82b35fa5d97cf06a9e05","url":"https://api.github.com/repos/apache/openjpa/git/trees/ee864865af66d694462e82b35fa5d97cf06a9e05"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4540f822162023a2bed7d816cd8c0f66d3ab75c7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4540f822162023a2bed7d816cd8c0f66d3ab75c7","html_url":"https://github.com/apache/openjpa/commit/4540f822162023a2bed7d816cd8c0f66d3ab75c7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4540f822162023a2bed7d816cd8c0f66d3ab75c7/comments","author":null,"committer":null,"parents":[{"sha":"08d94d75d68742fce002f65583844e5bb253b12e","url":"https://api.github.com/repos/apache/openjpa/commits/08d94d75d68742fce002f65583844e5bb253b12e","html_url":"https://github.com/apache/openjpa/commit/08d94d75d68742fce002f65583844e5bb253b12e"}],"stats":{"total":1459,"additions":1454,"deletions":5},"files":[{"sha":"27326437e9a5bc8c703281c3c1a761d62b1c16a7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","raw_url":"https://github.com/apache/openjpa/raw/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java?ref=4540f822162023a2bed7d816cd8c0f66d3ab75c7","patch":"@@ -63,6 +63,8 @@\n public class FieldMapping\n     extends FieldMetaData\n     implements ValueMapping, FieldStrategy {\n+    \n+    private static final long serialVersionUID = 142185362294762433L;\n \n     private static final Localizer _loc = Localizer.forPackage\n         (FieldMapping.class);"},{"sha":"ae265db73fb6203dfe42bf0c5d80f2b41a8b61a7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingImpl.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueMappingImpl.java?ref=4540f822162023a2bed7d816cd8c0f66d3ab75c7","patch":"@@ -50,6 +50,8 @@\n public class ValueMappingImpl\n     extends ValueMetaDataImpl\n     implements ValueMapping {\n+    \n+    private static final long serialVersionUID = 6440545965133775709L;\n \n     private static final Localizer _loc = Localizer.forPackage\n         (ValueMappingImpl.class);"},{"sha":"437596dbdc2ffaf086b9225dd8212f84b96e0cff","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java?ref=4540f822162023a2bed7d816cd8c0f66d3ab75c7","patch":"@@ -78,6 +78,8 @@\n     extends Extensions\n     implements ValueMetaData, MetaDataContext, MetaDataModes, Commentable {\n     \n+    private static final long serialVersionUID = -566180883009883198L;\n+    \n     /**\n      * Constant specifying that no null-value was given.\n      */\n@@ -2190,6 +2192,10 @@ public int getCascadePersist() {\n     public void setCascadePersist(int persist) {\n         _val.setCascadePersist(persist);\n     }\n+    \n+    public void setCascadePersist(int cascade, boolean checkPUDefault) {\n+        _val.setCascadePersist(cascade, checkPUDefault);\n+    }\n \n     public int getCascadeAttach() {\n         return _val.getCascadeAttach();"},{"sha":"ef87240c8b5ed64e398e9b0a7d340d12953df21b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java?ref=4540f822162023a2bed7d816cd8c0f66d3ab75c7","patch":"@@ -127,6 +127,13 @@ public Member getMemberByProperty(ClassMetaData meta, String attribute,\n      */\n     public boolean isNonDefaultMappingAllowed(OpenJPAConfiguration conf);\n     \n+    /**\n+     * Whether cascade-persist was declared in the persistence unit defaults.\n+     * @return\n+     */\n+    public Boolean isDefaultCascadePersistEnabled();\n+    \n+    public void setDefaultCascadePersistEnabled(Boolean bool);\n \n     /**\n      * Returns the default schema."},{"sha":"93d4b93d05120b275f1a87c888e172d856967659","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java?ref=4540f822162023a2bed7d816cd8c0f66d3ab75c7","patch":"@@ -169,6 +169,14 @@ public boolean isAbstractMappingUniDirectional(OpenJPAConfiguration conf) {\n     public boolean isNonDefaultMappingAllowed(OpenJPAConfiguration conf) {\n         return false;\n     }\n+    \n+    public Boolean isDefaultCascadePersistEnabled() {\n+        return false;\n+    }\n+    \n+    public void setDefaultCascadePersistEnabled(Boolean bool) {\n+        \n+    }\n \n     public String getDefaultSchema(){return null;}\n     "},{"sha":"d071023b1ef1322a32288364ed201c37c86ad71e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueMetaData.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueMetaData.java?ref=4540f822162023a2bed7d816cd8c0f66d3ab75c7","patch":"@@ -203,6 +203,13 @@\n      */\n     public void setCascadePersist(int cascade);\n \n+    /**\n+     * Cascade behavior for persist operation.\n+     *\n+     * @see #getCascadePersist\n+     */\n+    public void setCascadePersist(int cascade, boolean checkPUDefault);\n+\n     /**\n      * Cascade behavior for attach operation. Only applies to\n      * persistence-capable values. Options are:<br />"},{"sha":"6a0980dccb0c1a3cc0ccc1735fd379b6228f457d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueMetaDataImpl.java","status":"modified","additions":42,"deletions":2,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueMetaDataImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueMetaDataImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueMetaDataImpl.java?ref=4540f822162023a2bed7d816cd8c0f66d3ab75c7","patch":"@@ -30,6 +30,8 @@\n  */\n public class ValueMetaDataImpl\n     implements ValueMetaData {\n+    \n+    private static final long serialVersionUID = 6766697443293395831L;\n \n     private static final Localizer _loc = Localizer.forPackage\n         (ValueMetaDataImpl.class);\n@@ -58,6 +60,7 @@\n     private int _resMode = MODE_NONE;\n     private String _mappedBy = null;\n     private FieldMetaData _mappedByMeta = null;\n+    private boolean _checkPUDefaultCascadePersist = true;\n \n     protected ValueMetaDataImpl(FieldMetaData owner) {\n         _owner = owner;\n@@ -236,15 +239,52 @@ public int getCascadePersist() {\n         if (_owner.getManagement() != FieldMetaData.MANAGE_PERSISTENT)\n             return CASCADE_NONE;\n         if (isDeclaredTypePC())\n-            return _persist;\n+            return checkPUDefaultCascadePersist();\n         if (!isTypePC())\n             return CASCADE_NONE;\n         // if only externalized type is pc, can't cascade immediate\n-        return (_persist == CASCADE_IMMEDIATE) ? CASCADE_AUTO : _persist;\n+        return (_persist == CASCADE_IMMEDIATE) ? CASCADE_AUTO : checkPUDefaultCascadePersist();\n+    }\n+\n+    /**\n+     * Check if the persistence unit default <cascade-persist> has been enabled.  If so, then change\n+     * CASCADE_NONE to CASCADE_IMMEDIATE.\n+     * @return\n+     */\n+    private int checkPUDefaultCascadePersist() {\n+        if (_checkPUDefaultCascadePersist) {\n+            // Apply default <cascade-persist> only to entity relationships\n+            boolean applyDefaultCascadePersist = false;\n+            \n+            switch (_owner.getAssociationType()) {\n+            case FieldMetaData.ONE_TO_ONE:\n+            case FieldMetaData.ONE_TO_MANY:\n+            case FieldMetaData.MANY_TO_MANY:\n+            case FieldMetaData.MANY_TO_ONE:\n+                applyDefaultCascadePersist = true;\n+            default:\n+            }\n+            \n+            if (applyDefaultCascadePersist) {\n+                Boolean dcpe = getRepository().getMetaDataFactory().getDefaults().isDefaultCascadePersistEnabled();\n+                if (dcpe != null && dcpe.equals(Boolean.TRUE) && _persist == CASCADE_NONE) {\n+                    _persist = CASCADE_IMMEDIATE;\n+                }\n+            }        \n+            \n+            _checkPUDefaultCascadePersist = false;\n+        }\n+        \n+        return _persist;\n     }\n \n     public void setCascadePersist(int persist) {\n+        setCascadePersist(persist, true);\n+    }\n+    \n+    public void setCascadePersist(int persist, boolean checkPUDefault) {\n         _persist = persist;\n+        _checkPUDefaultCascadePersist = checkPUDefault;\n     }\n \n     public int getCascadeAttach() {"},{"sha":"4e21512063819c789a8d8ec1ef6de12ff6d7346d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/AnEmbeddable.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/AnEmbeddable.java","raw_url":"https://github.com/apache/openjpa/raw/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/AnEmbeddable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/AnEmbeddable.java?ref=4540f822162023a2bed7d816cd8c0f66d3ab75c7","patch":"@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cascade.pudefault;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Embeddable;\n+\n+@Embeddable\n+public class AnEmbeddable {\n+    @Basic\n+    private String eStrData;\n+    \n+    public AnEmbeddable() {\n+        \n+    }\n+\n+    public String geteStrData() {\n+        return eStrData;\n+    }\n+\n+    public void seteStrData(String eStrData) {\n+        this.eStrData = eStrData;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"AnEmbeddable [eStrData=\" + eStrData + \"]\";\n+    }\n+    \n+    \n+}"},{"sha":"cf8b742ef9f73efa4fbf4c4864cd62d6f4cc8edc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/EmbeddableWithRelationships.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/EmbeddableWithRelationships.java","raw_url":"https://github.com/apache/openjpa/raw/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/EmbeddableWithRelationships.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/EmbeddableWithRelationships.java?ref=4540f822162023a2bed7d816cd8c0f66d3ab75c7","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cascade.pudefault;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import javax.persistence.Embeddable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+\n+@Embeddable\n+public class EmbeddableWithRelationships {\n+    @ManyToMany\n+    private Collection<PUDEntityB> colM2M;\n+    \n+    @OneToMany\n+    private Collection<PUDEntityB> colO2M;\n+    \n+    @ManyToOne\n+    private PUDEntityB m2o;\n+    \n+    @OneToOne\n+    private PUDEntityB o2o;\n+    \n+    public EmbeddableWithRelationships() {\n+        colM2M = new ArrayList<PUDEntityB>();\n+        colO2M = new ArrayList<PUDEntityB>();\n+    }\n+    \n+    public Collection<PUDEntityB> getColM2M() {\n+        return colM2M;\n+    }\n+\n+    public void setColM2M(Collection<PUDEntityB> colM2M) {\n+        this.colM2M = colM2M;\n+    }\n+\n+    public Collection<PUDEntityB> getColO2M() {\n+        return colO2M;\n+    }\n+\n+    public void setColO2M(Collection<PUDEntityB> colO2M) {\n+        this.colO2M = colO2M;\n+    }\n+\n+    public PUDEntityB getM2o() {\n+        return m2o;\n+    }\n+\n+    public void setM2o(PUDEntityB m2o) {\n+        this.m2o = m2o;\n+    }\n+\n+    public PUDEntityB getO2o() {\n+        return o2o;\n+    }\n+\n+    public void setO2o(PUDEntityB o2o) {\n+        this.o2o = o2o;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"EmbeddableWithRelationships [colM2M=\" + colM2M + \", colO2M=\"\n+            + colO2M + \", m2o=\" + m2o + \", o2o=\" + o2o + \"]\";\n+    }\n+    \n+    \n+}"},{"sha":"d37c768a47b9ecfd6101266d2eb5ed5790b6d54f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/PUDEntityA01.java","status":"added","additions":116,"deletions":0,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/PUDEntityA01.java","raw_url":"https://github.com/apache/openjpa/raw/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/PUDEntityA01.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/PUDEntityA01.java?ref=4540f822162023a2bed7d816cd8c0f66d3ab75c7","patch":"@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cascade.pudefault;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+\n+@Entity\n+public class PUDEntityA01 {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    private int id;\n+    \n+    @Basic\n+    private String strData;\n+    \n+    @ManyToMany\n+    private Collection<PUDEntityB> colM2M;\n+    \n+    @OneToMany\n+    private Collection<PUDEntityB> colO2M;\n+    \n+    @ManyToOne\n+    private PUDEntityB m2o;\n+    \n+    @OneToOne\n+    private PUDEntityB o2o;\n+    \n+    public PUDEntityA01() {\n+        colM2M = new ArrayList<PUDEntityB>();\n+        colO2M = new ArrayList<PUDEntityB>();\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getStrData() {\n+        return strData;\n+    }\n+\n+    public void setStrData(String strData) {\n+        this.strData = strData;\n+    }\n+\n+    public Collection<PUDEntityB> getColM2M() {\n+        return colM2M;\n+    }\n+\n+    public void setColM2M(Collection<PUDEntityB> colM2M) {\n+        this.colM2M = colM2M;\n+    }\n+\n+    public Collection<PUDEntityB> getColO2M() {\n+        return colO2M;\n+    }\n+\n+    public void setColO2M(Collection<PUDEntityB> colO2M) {\n+        this.colO2M = colO2M;\n+    }\n+\n+    public PUDEntityB getM2o() {\n+        return m2o;\n+    }\n+\n+    public void setM2o(PUDEntityB m2o) {\n+        this.m2o = m2o;\n+    }\n+\n+    public PUDEntityB getO2o() {\n+        return o2o;\n+    }\n+\n+    public void setO2o(PUDEntityB o2o) {\n+        this.o2o = o2o;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"PUDEntityA01 [id=\" + id + \", strData=\" + strData + \", colM2M=\"\n+            + colM2M + \", colO2M=\" + colO2M + \", m2o=\" + m2o + \", o2o=\" + o2o\n+            + \"]\";\n+    }\n+    \n+    \n+}"},{"sha":"b0f070b2d3f64af5eb7b3b890e88f2055e633c50","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/PUDEntityA02.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/PUDEntityA02.java","raw_url":"https://github.com/apache/openjpa/raw/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/PUDEntityA02.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/PUDEntityA02.java?ref=4540f822162023a2bed7d816cd8c0f66d3ab75c7","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cascade.pudefault;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Embedded;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class PUDEntityA02 {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    private int id;\n+    \n+    @Basic\n+    private String strData;\n+    \n+    @Embedded\n+    private EmbeddableWithRelationships emb;\n+    \n+    public PUDEntityA02() {\n+        emb = new EmbeddableWithRelationships();\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getStrData() {\n+        return strData;\n+    }\n+\n+    public void setStrData(String strData) {\n+        this.strData = strData;\n+    }\n+\n+    public EmbeddableWithRelationships getEmb() {\n+        return emb;\n+    }\n+\n+    public void setEmb(EmbeddableWithRelationships emb) {\n+        this.emb = emb;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"PUDEntityA02 [id=\" + id + \", strData=\" + strData + \", emb=\"\n+            + emb + \"]\";\n+    }\n+    \n+    \n+}"},{"sha":"01ea1346735f035969f71caa96ffe8f132793d35","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/PUDEntityAE01.java","status":"added","additions":128,"deletions":0,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/PUDEntityAE01.java","raw_url":"https://github.com/apache/openjpa/raw/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/PUDEntityAE01.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/PUDEntityAE01.java?ref=4540f822162023a2bed7d816cd8c0f66d3ab75c7","patch":"@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cascade.pudefault;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Embedded;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+\n+@Entity\n+public class PUDEntityAE01 {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    private int id;\n+    \n+    @Basic\n+    private String strData;\n+    \n+    @ManyToMany\n+    private Collection<PUDEntityB> colM2M;\n+    \n+    @OneToMany\n+    private Collection<PUDEntityB> colO2M;\n+    \n+    @ManyToOne\n+    private PUDEntityB m2o;\n+    \n+    @OneToOne\n+    private PUDEntityB o2o;\n+    \n+    @Embedded\n+    private AnEmbeddable ane;\n+    \n+    public PUDEntityAE01() {\n+        colM2M = new ArrayList<PUDEntityB>();\n+        colO2M = new ArrayList<PUDEntityB>();\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getStrData() {\n+        return strData;\n+    }\n+\n+    public void setStrData(String strData) {\n+        this.strData = strData;\n+    }\n+\n+    public Collection<PUDEntityB> getColM2M() {\n+        return colM2M;\n+    }\n+\n+    public void setColM2M(Collection<PUDEntityB> colM2M) {\n+        this.colM2M = colM2M;\n+    }\n+\n+    public Collection<PUDEntityB> getColO2M() {\n+        return colO2M;\n+    }\n+\n+    public void setColO2M(Collection<PUDEntityB> colO2M) {\n+        this.colO2M = colO2M;\n+    }\n+\n+    public PUDEntityB getM2o() {\n+        return m2o;\n+    }\n+\n+    public void setM2o(PUDEntityB m2o) {\n+        this.m2o = m2o;\n+    }\n+\n+    public PUDEntityB getO2o() {\n+        return o2o;\n+    }\n+\n+    public void setO2o(PUDEntityB o2o) {\n+        this.o2o = o2o;\n+    }\n+\n+    public AnEmbeddable getAne() {\n+        return ane;\n+    }\n+\n+    public void setAne(AnEmbeddable ane) {\n+        this.ane = ane;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"PUDEntityAE01 [id=\" + id + \", strData=\" + strData + \", colM2M=\"\n+            + colM2M + \", colO2M=\" + colO2M + \", m2o=\" + m2o + \", o2o=\" + o2o\n+            + \", ane=\" + ane + \"]\";\n+    }\n+    \n+    \n+}"},{"sha":"ffec718ac4f3cb2f5c8e6854aceeb72b2874c780","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/PUDEntityB.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/PUDEntityB.java","raw_url":"https://github.com/apache/openjpa/raw/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/PUDEntityB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/PUDEntityB.java?ref=4540f822162023a2bed7d816cd8c0f66d3ab75c7","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cascade.pudefault;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class PUDEntityB {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    private int id;\n+    \n+    @Basic\n+    private String strData;\n+    \n+    public PUDEntityB() {\n+        \n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getStrData() {\n+        return strData;\n+    }\n+\n+    public void setStrData(String strData) {\n+        this.strData = strData;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"PUDEntityB [id=\" + id + \", strData=\" + strData + \"]\";\n+    }\n+    \n+    \n+}"},{"sha":"b4b1306309cf901af33faee1257cfcddf8e7a6db","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/TestNoPUDefaultCascadePersist.java","status":"added","additions":271,"deletions":0,"changes":271,"blob_url":"https://github.com/apache/openjpa/blob/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/TestNoPUDefaultCascadePersist.java","raw_url":"https://github.com/apache/openjpa/raw/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/TestNoPUDefaultCascadePersist.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/TestNoPUDefaultCascadePersist.java?ref=4540f822162023a2bed7d816cd8c0f66d3ab75c7","patch":"@@ -0,0 +1,271 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cascade.pudefault;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestNoPUDefaultCascadePersist extends SingleEMFTestCase {\n+    public void setUp() throws Exception {\n+        super.setUp(PUDEntityA01.class, PUDEntityAE01.class, PUDEntityB.class, AnEmbeddable.class,\n+            CLEAR_TABLES);\n+    }\n+    \n+    \n+    public void testPUDefaultCascadePersistOverM2M() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        PUDEntityA01 entity = null;\n+        try {\n+            em.getTransaction().begin();\n+            \n+            entity = new PUDEntityA01();\n+            entity.setStrData(\"PUDEntityA01\");\n+             \n+            for (int i = 0; i < 10; i++) {\n+                PUDEntityB b = new PUDEntityB();\n+                b.setStrData(\"B\");\n+                entity.getColM2M().add(b);\n+            }\n+            \n+            em.persist(entity);\n+            try {\n+                em.getTransaction().commit();\n+                fail(\"No Exception thrown.\");\n+            } catch (Exception e) {\n+                // Expected\n+            }\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+            em.close();\n+        }      \n+    }\n+    \n+    public void testPUDefaultCascadePersistOverO2M() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        PUDEntityA01 entity = null;\n+        try {\n+            em.getTransaction().begin();\n+            \n+            entity = new PUDEntityA01();\n+            entity.setStrData(\"PUDEntityA01\");\n+             \n+            for (int i = 0; i < 10; i++) {\n+                PUDEntityB b = new PUDEntityB();\n+                b.setStrData(\"B\");\n+                entity.getColO2M().add(b);\n+            }\n+            \n+            em.persist(entity);\n+            try {\n+                em.getTransaction().commit();\n+                fail(\"No Exception thrown.\");\n+            } catch (Exception e) {\n+                // Expected\n+            }\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+            em.close();\n+        }      \n+    }\n+    \n+    public void testPUDefaultCascadePersistOverO2O() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        PUDEntityA01 entity = null;\n+        try {\n+            em.getTransaction().begin();\n+            \n+            entity = new PUDEntityA01();\n+            entity.setStrData(\"PUDEntityA01\");\n+            \n+            PUDEntityB b = new PUDEntityB();\n+            b.setStrData(\"B\");\n+            entity.setO2o(b);\n+            \n+            em.persist(entity);\n+            try {\n+                em.getTransaction().commit();\n+                fail(\"No Exception thrown.\");\n+            } catch (Exception e) {\n+                // Expected\n+            }\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+            em.close();\n+        }      \n+    }\n+    \n+    public void testPUDefaultCascadePersistOverM2O() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        PUDEntityA01 entity = null;\n+        try {\n+            em.getTransaction().begin();\n+            \n+            entity = new PUDEntityA01();\n+            entity.setStrData(\"PUDEntityA01\");\n+            \n+            PUDEntityB b = new PUDEntityB();\n+            b.setStrData(\"B\");\n+            entity.setM2o(b);\n+            \n+            em.persist(entity);\n+            try {\n+                em.getTransaction().commit();\n+                fail(\"No Exception thrown.\");\n+            } catch (Exception e) {\n+                // Expected\n+            }\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+            em.close();\n+        }      \n+    }\n+    \n+    public void testPUDefaultCascadePersistOverM2MWithEmbed() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        PUDEntityAE01 entity = null;\n+        try {\n+            em.getTransaction().begin();\n+            \n+            entity = new PUDEntityAE01();\n+            entity.setStrData(\"PUDEntityAE01\");\n+             \n+            for (int i = 0; i < 10; i++) {\n+                PUDEntityB b = new PUDEntityB();\n+                b.setStrData(\"B\");\n+                entity.getColM2M().add(b);\n+            }\n+            \n+            em.persist(entity);\n+            try {\n+                em.getTransaction().commit();\n+                fail(\"No Exception thrown.\");\n+            } catch (Exception e) {\n+                // Expected\n+            }\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+            em.close();\n+        }      \n+    }\n+    \n+    public void testPUDefaultCascadePersistOverO2MWithEmbed() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        PUDEntityAE01 entity = null;\n+        try {\n+            em.getTransaction().begin();\n+            \n+            entity = new PUDEntityAE01();\n+            entity.setStrData(\"PUDEntityAE01\");\n+             \n+            for (int i = 0; i < 10; i++) {\n+                PUDEntityB b = new PUDEntityB();\n+                b.setStrData(\"B\");\n+                entity.getColO2M().add(b);\n+            }\n+            \n+            em.persist(entity);\n+            try {\n+                em.getTransaction().commit();\n+                fail(\"No Exception thrown.\");\n+            } catch (Exception e) {\n+                // Expected\n+            }\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+            em.close();\n+        }      \n+    }\n+    \n+    public void testPUDefaultCascadePersistOverO2OWithEmbed() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        PUDEntityAE01 entity = null;\n+        try {\n+            em.getTransaction().begin();\n+            \n+            entity = new PUDEntityAE01();\n+            entity.setStrData(\"PUDEntityAE01\");\n+            \n+            PUDEntityB b = new PUDEntityB();\n+            b.setStrData(\"B\");\n+            entity.setO2o(b);\n+            \n+            em.persist(entity);\n+            try {\n+                em.getTransaction().commit();\n+                fail(\"No Exception thrown.\");\n+            } catch (Exception e) {\n+                // Expected\n+            }\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+            em.close();\n+        }      \n+    }\n+    \n+    public void testPUDefaultCascadePersistOverM2OWithEmbed() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        PUDEntityAE01 entity = null;\n+        try {\n+            em.getTransaction().begin();\n+            \n+            entity = new PUDEntityAE01();\n+            entity.setStrData(\"PUDEntityAE01\");\n+            \n+            PUDEntityB b = new PUDEntityB();\n+            b.setStrData(\"B\");\n+            entity.setM2o(b);\n+            \n+            em.persist(entity);\n+            try {\n+                em.getTransaction().commit();\n+                fail(\"No Exception thrown.\");\n+            } catch (Exception e) {\n+                // Expected\n+            }\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+            em.close();\n+        }      \n+    }\n+}"},{"sha":"f099283fa7837326215ed470448b8ee886f1bd94","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/TestPUDefaultCascadePersist.java","status":"added","additions":504,"deletions":0,"changes":504,"blob_url":"https://github.com/apache/openjpa/blob/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/TestPUDefaultCascadePersist.java","raw_url":"https://github.com/apache/openjpa/raw/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/TestPUDefaultCascadePersist.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cascade/pudefault/TestPUDefaultCascadePersist.java?ref=4540f822162023a2bed7d816cd8c0f66d3ab75c7","patch":"@@ -0,0 +1,504 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cascade.pudefault;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestPUDefaultCascadePersist extends SingleEMFTestCase {\n+    private EntityManagerFactory emf = null;\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        emf = OpenJPAPersistence.\n+                createEntityManagerFactory(\"TestPUDefaultCascadePersist\", \n+                    \"org/apache/openjpa/persistence/cascade/pudefault/META-INF/persistence.xml\");\n+//        super.setUp(PUDEntityA01.class, PUDEntityB.class,\n+//            \"org/apache/openjpa/persistence/cascade/pudefault/META-INF/cascadepersistorm.xml\",\n+//            CLEAR_TABLES);\n+    }\n+    \n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+        emf.close();\n+    }\n+    \n+    public void testPUDefaultCascadePersistOverM2M() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        PUDEntityA01 entity = null;\n+        try {\n+            em.getTransaction().begin();\n+            \n+            entity = new PUDEntityA01();\n+            entity.setStrData(\"PUDEntityA01\");\n+             \n+            for (int i = 0; i < 10; i++) {\n+                PUDEntityB b = new PUDEntityB();\n+                b.setStrData(\"B\");\n+                entity.getColM2M().add(b);\n+            }\n+            \n+            em.persist(entity);\n+            em.getTransaction().commit();\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+        }\n+               \n+        em.close();\n+        em = emf.createEntityManager();\n+        \n+        try {\n+            PUDEntityA01 f_entity = em.find(PUDEntityA01.class, entity.getId());\n+            assertNotNull(f_entity);\n+            assertNotSame(entity, f_entity);\n+            assertEquals(10, f_entity.getColM2M().size());\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+        }       \n+    }\n+    \n+    public void testPUDefaultCascadePersistOverO2M() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        PUDEntityA01 entity = null;\n+        try {\n+            em.getTransaction().begin();\n+            \n+            entity = new PUDEntityA01();\n+            entity.setStrData(\"PUDEntityA01\");\n+             \n+            for (int i = 0; i < 10; i++) {\n+                PUDEntityB b = new PUDEntityB();\n+                b.setStrData(\"B\");\n+                entity.getColO2M().add(b);\n+            }\n+            \n+            em.persist(entity);\n+            em.getTransaction().commit();\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+        }\n+               \n+        em.close();\n+        em = emf.createEntityManager();\n+        \n+        try {\n+            PUDEntityA01 f_entity = em.find(PUDEntityA01.class, entity.getId());\n+            assertNotNull(f_entity);\n+            assertNotSame(entity, f_entity);\n+            assertEquals(10, f_entity.getColO2M().size());\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+        }       \n+    }\n+    \n+    public void testPUDefaultCascadePersistOverO2O() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        PUDEntityA01 entity = null;\n+        try {\n+            em.getTransaction().begin();\n+            \n+            entity = new PUDEntityA01();\n+            entity.setStrData(\"PUDEntityA01\");\n+            \n+            PUDEntityB b = new PUDEntityB();\n+            b.setStrData(\"B\");\n+            entity.setO2o(b);\n+            \n+            em.persist(entity);\n+            em.getTransaction().commit();\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+        }\n+               \n+        em.close();\n+        em = emf.createEntityManager();\n+        \n+        try {\n+            PUDEntityA01 f_entity = em.find(PUDEntityA01.class, entity.getId());\n+            assertNotNull(f_entity);\n+            assertNotSame(entity, f_entity);\n+            assertNotNull(entity.getO2o());\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+        }       \n+    }\n+    \n+    public void testPUDefaultCascadePersistOverM2O() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        PUDEntityA01 entity = null;\n+        try {\n+            em.getTransaction().begin();\n+            \n+            entity = new PUDEntityA01();\n+            entity.setStrData(\"PUDEntityA01\");\n+            \n+            PUDEntityB b = new PUDEntityB();\n+            b.setStrData(\"B\");\n+            entity.setM2o(b);\n+            \n+            em.persist(entity);\n+            em.getTransaction().commit();\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+        }\n+               \n+        em.close();\n+        em = emf.createEntityManager();\n+        \n+        try {\n+            PUDEntityA01 f_entity = em.find(PUDEntityA01.class, entity.getId());\n+            assertNotNull(f_entity);\n+            assertNotSame(entity, f_entity);\n+            assertNotNull(entity.getM2o());\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+        }       \n+    }\n+    \n+    \n+    \n+    public void testPUDefaultCascadePersistOverM2MWithEmbed() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        PUDEntityAE01 entity = null;\n+        try {\n+            em.getTransaction().begin();\n+            \n+            entity = new PUDEntityAE01();\n+            entity.setStrData(\"PUDEntityAE01\");\n+             \n+            for (int i = 0; i < 10; i++) {\n+                PUDEntityB b = new PUDEntityB();\n+                b.setStrData(\"B\");\n+                entity.getColM2M().add(b);\n+            }\n+            \n+            em.persist(entity);\n+            em.getTransaction().commit();\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+        }\n+               \n+        em.close();\n+        em = emf.createEntityManager();\n+        \n+        try {\n+            PUDEntityAE01 f_entity = em.find(PUDEntityAE01.class, entity.getId());\n+            assertNotNull(f_entity);\n+            assertNotSame(entity, f_entity);\n+            assertEquals(10, f_entity.getColM2M().size());\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+        }       \n+    }\n+    \n+    public void testPUDefaultCascadePersistOverO2MWithEmbed() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        PUDEntityAE01 entity = null;\n+        try {\n+            em.getTransaction().begin();\n+            \n+            entity = new PUDEntityAE01();\n+            entity.setStrData(\"PUDEntityAE01\");\n+             \n+            for (int i = 0; i < 10; i++) {\n+                PUDEntityB b = new PUDEntityB();\n+                b.setStrData(\"B\");\n+                entity.getColO2M().add(b);\n+            }\n+            \n+            em.persist(entity);\n+            em.getTransaction().commit();\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+        }\n+               \n+        em.close();\n+        em = emf.createEntityManager();\n+        \n+        try {\n+            PUDEntityAE01 f_entity = em.find(PUDEntityAE01.class, entity.getId());\n+            assertNotNull(f_entity);\n+            assertNotSame(entity, f_entity);\n+            assertEquals(10, f_entity.getColO2M().size());\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+        }       \n+    }\n+    \n+    public void testPUDefaultCascadePersistOverO2OWithEmbed() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        PUDEntityAE01 entity = null;\n+        try {\n+            em.getTransaction().begin();\n+            \n+            entity = new PUDEntityAE01();\n+            entity.setStrData(\"PUDEntityAE01\");\n+            \n+            PUDEntityB b = new PUDEntityB();\n+            b.setStrData(\"B\");\n+            entity.setO2o(b);\n+            \n+            em.persist(entity);\n+            em.getTransaction().commit();\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+        }\n+               \n+        em.close();\n+        em = emf.createEntityManager();\n+        \n+        try {\n+            PUDEntityAE01 f_entity = em.find(PUDEntityAE01.class, entity.getId());\n+            assertNotNull(f_entity);\n+            assertNotSame(entity, f_entity);\n+            assertNotNull(entity.getO2o());\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+        }       \n+    }\n+    \n+    public void testPUDefaultCascadePersistOverM2OWithEmbed() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        PUDEntityAE01 entity = null;\n+        try {\n+            em.getTransaction().begin();\n+            \n+            entity = new PUDEntityAE01();\n+            entity.setStrData(\"PUDEntityAE01\");\n+            \n+            PUDEntityB b = new PUDEntityB();\n+            b.setStrData(\"B\");\n+            entity.setM2o(b);\n+            \n+            em.persist(entity);\n+            em.getTransaction().commit();\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+        }\n+               \n+        em.close();\n+        em = emf.createEntityManager();\n+        \n+        try {\n+            PUDEntityAE01 f_entity = em.find(PUDEntityAE01.class, entity.getId());\n+            assertNotNull(f_entity);\n+            assertNotSame(entity, f_entity);\n+            assertNotNull(entity.getM2o());\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+        }       \n+    }\n+    \n+    \n+    public void testPUDefaultCascadePersistOverM2MEmbbedRel() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        PUDEntityA02 entity = null;\n+        try {\n+            em.getTransaction().begin();\n+            \n+            entity = new PUDEntityA02();\n+            entity.setStrData(\"PUDEntityA02\");\n+             \n+            for (int i = 0; i < 10; i++) {\n+                PUDEntityB b = new PUDEntityB();\n+                b.setStrData(\"B\");\n+                entity.getEmb().getColM2M().add(b);\n+            }\n+            \n+            em.persist(entity);\n+            em.getTransaction().commit();\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+        }\n+               \n+        em.close();\n+        em = emf.createEntityManager();\n+        \n+        try {\n+            PUDEntityA02 f_entity = em.find(PUDEntityA02.class, entity.getId());\n+            assertNotNull(f_entity);\n+            assertNotSame(entity, f_entity);\n+            assertEquals(10, f_entity.getEmb().getColM2M().size());\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+        }       \n+    }\n+    \n+    public void testPUDefaultCascadePersistOverO2MEmbbedRel() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        PUDEntityA02 entity = null;\n+        try {\n+            em.getTransaction().begin();\n+            \n+            entity = new PUDEntityA02();\n+            entity.setStrData(\"PUDEntityA02\");\n+             \n+            for (int i = 0; i < 10; i++) {\n+                PUDEntityB b = new PUDEntityB();\n+                b.setStrData(\"B\");\n+                entity.getEmb().getColO2M().add(b);\n+            }\n+            \n+            em.persist(entity);\n+            em.getTransaction().commit();\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+        }\n+               \n+        em.close();\n+        em = emf.createEntityManager();\n+        \n+        try {\n+            PUDEntityA02 f_entity = em.find(PUDEntityA02.class, entity.getId());\n+            assertNotNull(f_entity);\n+            assertNotSame(entity, f_entity);\n+            assertEquals(10, f_entity.getEmb().getColO2M().size());\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+        }       \n+    }\n+    \n+    public void testPUDefaultCascadePersistOverO2OEmbbedRel() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        PUDEntityA02 entity = null;\n+        try {\n+            em.getTransaction().begin();\n+            \n+            entity = new PUDEntityA02();\n+            entity.setStrData(\"PUDEntityA02\");\n+            \n+            PUDEntityB b = new PUDEntityB();\n+            b.setStrData(\"B\");\n+            entity.getEmb().setO2o(b);\n+            \n+            em.persist(entity);\n+            em.getTransaction().commit();\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+        }\n+               \n+        em.close();\n+        em = emf.createEntityManager();\n+        \n+        try {\n+            PUDEntityA02 f_entity = em.find(PUDEntityA02.class, entity.getId());\n+            assertNotNull(f_entity);\n+            assertNotSame(entity, f_entity);\n+            assertNotNull(entity.getEmb().getO2o());\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+        }       \n+    }\n+    \n+    public void testPUDefaultCascadePersistOverM2OEmbbedRel() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        PUDEntityA02 entity = null;\n+        try {\n+            em.getTransaction().begin();\n+            \n+            entity = new PUDEntityA02();\n+            entity.setStrData(\"PUDEntityA02\");\n+            \n+            PUDEntityB b = new PUDEntityB();\n+            b.setStrData(\"B\");\n+            entity.getEmb().setM2o(b);\n+            \n+            em.persist(entity);\n+            em.getTransaction().commit();\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+        }\n+               \n+        em.close();\n+        em = emf.createEntityManager();\n+        \n+        try {\n+            PUDEntityA02 f_entity = em.find(PUDEntityA02.class, entity.getId());\n+            assertNotNull(f_entity);\n+            assertNotSame(entity, f_entity);\n+            assertNotNull(entity.getEmb().getM2o());\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+        }       \n+    }\n+    \n+\n+}"},{"sha":"b93780b49bc579a60f6f402bd1550fb4f6cf14ab","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/cascade/pudefault/META-INF/cascadepersistorm.xml","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/cascade/pudefault/META-INF/cascadepersistorm.xml","raw_url":"https://github.com/apache/openjpa/raw/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/cascade/pudefault/META-INF/cascadepersistorm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/cascade/pudefault/META-INF/cascadepersistorm.xml?ref=4540f822162023a2bed7d816cd8c0f66d3ab75c7","patch":"@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.\n+-->\n+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm orm_1_0.xsd\"\n+    version=\"1.0\">\n+    <persistence-unit-metadata>\n+        <persistence-unit-defaults>\n+            <cascade-persist/>\n+        </persistence-unit-defaults>\n+    </persistence-unit-metadata>\n+</entity-mappings>\n\\ No newline at end of file"},{"sha":"ae1b9fc249b96a88fbab527477a71ce3362bc5bb","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/cascade/pudefault/META-INF/persistence.xml","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/cascade/pudefault/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/cascade/pudefault/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/cascade/pudefault/META-INF/persistence.xml?ref=4540f822162023a2bed7d816cd8c0f66d3ab75c7","patch":"@@ -0,0 +1,38 @@\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" \n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n+    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" \n+    version=\"1.0\">\n+    <persistence-unit name=\"TestPUDefaultCascadePersist\" transaction-type=\"RESOURCE_LOCAL\">\n+        <!--  <provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider> -->\n+        <mapping-file>org/apache/openjpa/persistence/cascade/pudefault/META-INF/cascadepersistorm.xml</mapping-file>\n+        <class>org.apache.openjpa.persistence.cascade.pudefault.PUDEntityA01</class>\n+        <class>org.apache.openjpa.persistence.cascade.pudefault.PUDEntityAE01</class>\n+        <class>org.apache.openjpa.persistence.cascade.pudefault.PUDEntityA02</class>\n+        <class>org.apache.openjpa.persistence.cascade.pudefault.PUDEntityB</class>\n+        <class>org.apache.openjpa.persistence.cascade.pudefault.AnEmbeddable</class>\n+        <class>org.apache.openjpa.persistence.cascade.pudefault.EmbeddableWithRelationships</class>\n+        <properties>\n+            <property name=\"openjpa.ConnectionFactoryProperties\" value=\"MaxActive=110, MaxIdle=10, ValidationTimeout=50000, \n+                                                                     MaxCachedStatements=10, ValidationSQL='', MaxWait=10000, TestOnBorrow=true\" />\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema(ForeignKeys=true)\" />\n+        </properties>\n+    </persistence-unit>\n+</persistence>"},{"sha":"0b0ed3046c71235b57772ce4cdf705c74d6cb434","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=4540f822162023a2bed7d816cd8c0f66d3ab75c7","patch":"@@ -1770,7 +1770,7 @@ private void setCascades(ValueMetaData vmd, CascadeType[] cascades) {\n             if (cascade == CascadeType.ALL || cascade == CascadeType.REMOVE)\n                 vmd.setCascadeDelete(ValueMetaData.CASCADE_IMMEDIATE);\n             if (cascade == CascadeType.ALL || cascade == CascadeType.PERSIST)\n-                vmd.setCascadePersist(ValueMetaData.CASCADE_IMMEDIATE);\n+                vmd.setCascadePersist(ValueMetaData.CASCADE_IMMEDIATE, false);\n             if (cascade == CascadeType.ALL || cascade == CascadeType.MERGE)\n                 vmd.setCascadeAttach(ValueMetaData.CASCADE_IMMEDIATE);\n             if (cascade == CascadeType.ALL || cascade == CascadeType.DETACH)"},{"sha":"537a4c94ce096bddb36fdfd7cd97785bcd7e396d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java?ref=4540f822162023a2bed7d816cd8c0f66d3ab75c7","patch":"@@ -134,6 +134,7 @@\n     private Boolean _isAbstractMappingUniDirectional = null;\n     private Boolean _isNonDefaultMappingAllowed = null;\n     private String _defaultSchema;\n+    private Boolean _isCascadePersistPersistenceUnitDefaultEnabled = null;\n     \n     public PersistenceMetaDataDefaults() {\n         setCallbackMode(CALLBACK_RETHROW | CALLBACK_ROLLBACK |\n@@ -950,6 +951,14 @@ public void setNonDefaultMappingAllowed(OpenJPAConfiguration conf) {\n         _isNonDefaultMappingAllowed = conf.getCompatibilityInstance().\n             isNonDefaultMappingAllowed();\n     }\n+    \n+    public Boolean isDefaultCascadePersistEnabled() {\n+        return _isCascadePersistPersistenceUnitDefaultEnabled;\n+    }\n+    \n+    public void setDefaultCascadePersistEnabled(Boolean bool) {\n+        _isCascadePersistPersistenceUnitDefaultEnabled = bool;\n+    }\n \n     @Override\n     public String getDefaultSchema() {"},{"sha":"bb94503a2fdf7f90404183c200ba5e7af1df27dd","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":12,"deletions":2,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/4540f822162023a2bed7d816cd8c0f66d3ab75c7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=4540f822162023a2bed7d816cd8c0f66d3ab75c7","patch":"@@ -63,6 +63,7 @@\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.LifecycleMetaData;\n import org.apache.openjpa.meta.MetaDataContext;\n+import org.apache.openjpa.meta.MetaDataDefaults;\n import org.apache.openjpa.meta.MetaDataFactory;\n import org.apache.openjpa.meta.UpdateStrategies;\n \n@@ -1329,6 +1330,8 @@ protected boolean startCascade(Object tag, Attributes attrs)\n         throws SAXException {\n         if (!isMetaDataMode())\n             return false;\n+        \n+        boolean puDefault = false;\n \n         Set<CascadeType> cascades = null;\n         if (currentElement() instanceof FieldMetaData) {\n@@ -1339,10 +1342,17 @@ protected boolean startCascade(Object tag, Attributes attrs)\n             if (_pkgCascades == null)\n                 _pkgCascades = EnumSet.noneOf(CascadeType.class);\n             cascades = _pkgCascades;\n+            puDefault = true;\n         }\n         boolean all = ELEM_CASCADE_ALL == tag;\n-        if (all || ELEM_CASCADE_PER == tag)\n+        if (all || ELEM_CASCADE_PER == tag) {\n             cascades.add(PERSIST);\n+            if (puDefault) {\n+                MetaDataDefaults mdd = _repos.getMetaDataFactory().getDefaults();\n+                mdd.setDefaultCascadePersistEnabled(true);\n+            }\n+        }\n+            \n         if (all || ELEM_CASCADE_REM == tag)\n             cascades.add(REMOVE);\n         if (all || ELEM_CASCADE_MER == tag)\n@@ -1371,7 +1381,7 @@ protected void setCascades(FieldMetaData fmd) {\n         for (CascadeType cascade : cascades) {\n             switch (cascade) {\n                 case PERSIST:\n-                    vmd.setCascadePersist(ValueMetaData.CASCADE_IMMEDIATE);\n+                    vmd.setCascadePersist(ValueMetaData.CASCADE_IMMEDIATE, false);\n                     break;\n                 case MERGE:\n                     vmd.setCascadeAttach(ValueMetaData.CASCADE_IMMEDIATE);"}]}

