{"sha":"4560ddf64fd5150b1fcb0ac7f9b53deaae3e09f1","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ1NjBkZGY2NGZkNTE1MGIxZmNiMGFjN2Y5YjUzZGVhYWUzZTA5ZjE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-08-14T19:39:01Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-08-14T19:39:01Z"},"message":"get lock clause from DBDictionary\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@985574 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"057213ac1697d2382f00c20163efc3fe038dcf8f","url":"https://api.github.com/repos/apache/openjpa/git/trees/057213ac1697d2382f00c20163efc3fe038dcf8f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4560ddf64fd5150b1fcb0ac7f9b53deaae3e09f1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4560ddf64fd5150b1fcb0ac7f9b53deaae3e09f1","html_url":"https://github.com/apache/openjpa/commit/4560ddf64fd5150b1fcb0ac7f9b53deaae3e09f1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4560ddf64fd5150b1fcb0ac7f9b53deaae3e09f1/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"212bfb1a4a9eac4a9cbf1412a3e26d1121ef89a7","url":"https://api.github.com/repos/apache/openjpa/commits/212bfb1a4a9eac4a9cbf1412a3e26d1121ef89a7","html_url":"https://github.com/apache/openjpa/commit/212bfb1a4a9eac4a9cbf1412a3e26d1121ef89a7"}],"stats":{"total":69,"additions":47,"deletions":22},"files":[{"sha":"5b141f0487007cfd1862921da433a01b59565176","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/4560ddf64fd5150b1fcb0ac7f9b53deaae3e09f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/4560ddf64fd5150b1fcb0ac7f9b53deaae3e09f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java?ref=4560ddf64fd5150b1fcb0ac7f9b53deaae3e09f1","patch":"@@ -201,5 +201,16 @@ protected void setSupportedDatabases(Class<?> ... dbs) {\n     protected Log getLog() {\n         return emf.getConfiguration().getLog(\"Tests\");\n     }\n+    \n+    protected String getForUpdateClause() {\n+        DBDictionary dict = ((JDBCConfiguration) emf.getConfiguration()).getDBDictionaryInstance();\n+        if (dict.forUpdateClause != null) {\n+            return dict.forUpdateClause;\n+        }\n+        if (dict.tableForUpdateClause != null) {\n+            return dict.tableForUpdateClause;\n+        }\n+        return \"\";\n+    }\n }\n "},{"sha":"daee91e131ace28349f6ad1dea17b5c0fae74f7a","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestEmLockMode.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/4560ddf64fd5150b1fcb0ac7f9b53deaae3e09f1/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestEmLockMode.java","raw_url":"https://github.com/apache/openjpa/raw/4560ddf64fd5150b1fcb0ac7f9b53deaae3e09f1/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestEmLockMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestEmLockMode.java?ref=4560ddf64fd5150b1fcb0ac7f9b53deaae3e09f1","patch":"@@ -36,8 +36,7 @@\n public class TestEmLockMode extends SequencedActionsTest {\n     private static String NON_SUPPORTED_OPTIMISTIC_SQL = \n         \"SELECT .* FROM LockEmployee .*\";\n-    private static String NON_SUPPORTED_FOR_UPDATE_SQL = \n-        \"SELECT .* FROM LockEmployee .* FOR UPDATE.*\";\n+    private static String NON_SUPPORTED_FOR_UPDATE_SQL = \"\" ; // append lock clause from dict\n     private static String VERSION_UPDATE_SQL = \n         \"UPDATE LockEmployee SET version .* WHERE .*\";\n     private static String DB2_OPTIMISTIC_SQL = \n@@ -50,6 +49,15 @@\n     public void setUp() {\n         setUp(LockEmployee.class, \"openjpa.LockManager\", \"mixed\");\n         commonSetUp();\n+        NON_SUPPORTED_FOR_UPDATE_SQL = NON_SUPPORTED_OPTIMISTIC_SQL + \" \" + escapeRegex(getForUpdateClause()) + \".*\";\n+    }\n+    \n+    private String escapeRegex(String clause) {\n+        // escape an update clause for use in a regex. \n+        // only handling ( ) for now\n+        String rval = clause.replace(\"(\", \"\\\\(\");\n+        rval = rval.replace(\")\", \"\\\\)\");\n+        return rval;\n     }\n \n     /*"},{"sha":"e67fd6cf0c663342b9349421d0f97784f082f096","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestNamedQueryLockMode.java","status":"modified","additions":12,"deletions":9,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/4560ddf64fd5150b1fcb0ac7f9b53deaae3e09f1/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestNamedQueryLockMode.java","raw_url":"https://github.com/apache/openjpa/raw/4560ddf64fd5150b1fcb0ac7f9b53deaae3e09f1/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestNamedQueryLockMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestNamedQueryLockMode.java?ref=4560ddf64fd5150b1fcb0ac7f9b53deaae3e09f1","patch":"@@ -37,23 +37,26 @@\n  * \n  */\n public class TestNamedQueryLockMode extends SQLListenerTestCase {\n+    String lockClause = \"FOR UPDATE\";\n+    \n     public void setUp() {\n         super.setUp(CLEAR_TABLES, LockEmployee.class, \n             \"openjpa.LockManager\", \"pessimistic\", \n             \"openjpa.Optimistic\", \"false\"\n             );\n+        lockClause = getForUpdateClause();\n     }\n \n     public void testForUpdateClausePresentInNamedQueryWithLockMode() {\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n-        assertClausePresentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeByIdWithLock\").setParameter(\"id\", 0));\n+        assertClausePresentInSQL(lockClause, em.createNamedQuery(\"findEmployeeByIdWithLock\").setParameter(\"id\", 0));\n         em.getTransaction().rollback();\n         em.getTransaction().begin();\n-        assertClausePresentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeByIdWithLock\").setParameter(\"id\", 0));\n+        assertClausePresentInSQL(lockClause, em.createNamedQuery(\"findEmployeeByIdWithLock\").setParameter(\"id\", 0));\n         em.getTransaction().rollback();\n         em.getTransaction().begin();\n-        assertClausePresentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeByIdWithLock\").setParameter(\"id\", 0));\n+        assertClausePresentInSQL(lockClause, em.createNamedQuery(\"findEmployeeByIdWithLock\").setParameter(\"id\", 0));\n         em.getTransaction().rollback();\n     }\n \n@@ -72,8 +75,8 @@ public void testNamedQueryWithLockModeMustExecuteInTransaction() {\n     public void testForUpdateClausePresentInQueryWithDefault() {\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n-        assertClausePresentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeById\").setParameter(\"id\", 0));\n-        assertClausePresentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeById\").setParameter(\"id\", 0));        \n+        assertClausePresentInSQL(lockClause, em.createNamedQuery(\"findEmployeeById\").setParameter(\"id\", 0));\n+        assertClausePresentInSQL(lockClause, em.createNamedQuery(\"findEmployeeById\").setParameter(\"id\", 0));        \n         em.getTransaction().commit();\n     }\n     \n@@ -84,12 +87,12 @@ public void testForUpdateClauseAbsentInQueryWithFetchPlanNoneLockMode() {\n         OpenJPAQuery<?> q = em.createNamedQuery(\"findEmployeeById\").setParameter(\"id\", 0); \n         FetchPlan fp = q.getFetchPlan();\n         fp.setReadLockMode(LockModeType.NONE);\n-        assertClauseAbsentInSQL(\"FOR UPDATE\", q);\n+        assertClauseAbsentInSQL(lockClause, q);\n         \n         q = em.createNamedQuery(\"findEmployeeByIdWithNoLock\").setParameter(\"id\", 0); \n         fp = q.getFetchPlan();\n         fp.setReadLockMode(LockModeType.NONE);\n-        assertClauseAbsentInSQL(\"FOR UPDATE\", q);\n+        assertClauseAbsentInSQL(lockClause, q);\n         \n         em.getTransaction().commit();\n     }\n@@ -98,8 +101,8 @@ public void testForUpdateClauseAbsentInQueryWithFetchPlanNoneLockMode() {\n     public void testForUpdateClauseAbsentInQueryWithExplictNoLock() {\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n-        assertClauseAbsentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeByIdWithNoLock\").setParameter(\"id\", 0));\n-        assertClauseAbsentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeByIdWithNoLock\").setParameter(\"id\", 0));\n+        assertClauseAbsentInSQL(lockClause, em.createNamedQuery(\"findEmployeeByIdWithNoLock\").setParameter(\"id\", 0));\n+        assertClauseAbsentInSQL(lockClause, em.createNamedQuery(\"findEmployeeByIdWithNoLock\").setParameter(\"id\", 0));\n         em.getTransaction().commit();\n     }\n "},{"sha":"2850dd998bf49b4f8cb663915defc2f479beacfc","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestOptimisticNamedQueryLockMode.java","status":"modified","additions":14,"deletions":11,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/4560ddf64fd5150b1fcb0ac7f9b53deaae3e09f1/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestOptimisticNamedQueryLockMode.java","raw_url":"https://github.com/apache/openjpa/raw/4560ddf64fd5150b1fcb0ac7f9b53deaae3e09f1/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestOptimisticNamedQueryLockMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestOptimisticNamedQueryLockMode.java?ref=4560ddf64fd5150b1fcb0ac7f9b53deaae3e09f1","patch":"@@ -22,23 +22,26 @@\n import javax.persistence.LockModeType;\n import javax.persistence.Query;\n \n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.persistence.FetchPlan;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n import org.apache.openjpa.persistence.OpenJPAQuery;\n-import org.apache.openjpa.persistence.TransactionRequiredException;\n-import org.apache.openjpa.persistence.test.AllowFailure;\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n \n /**\n  * Tests whether the lock mode on named query emits a FOR UPDATE clause in target SQL\n  * query when Optimistic=true (default), with pessimistic lock manager.\n  */\n public class TestOptimisticNamedQueryLockMode extends SQLListenerTestCase {\n+    String lockClause = \"FOR UPDATE\"; \n+    \n     public void setUp() {\n         super.setUp(CLEAR_TABLES, LockEmployee.class, \n             \"openjpa.LockManager\", \"pessimistic\"\n             );\n+         lockClause = getForUpdateClause();\n     }\n \n     /*\n@@ -47,13 +50,13 @@ public void setUp() {\n     public void testForUpdateClausePresentInNamedQueryWithLockMode() {\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n-        assertClausePresentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeByIdWithLock\").setParameter(\"id\", 0));\n+        assertClausePresentInSQL(lockClause, em.createNamedQuery(\"findEmployeeByIdWithLock\").setParameter(\"id\", 0));\n         em.getTransaction().rollback();\n         em.getTransaction().begin();\n-        assertClausePresentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeByIdWithLock\").setParameter(\"id\", 0));\n+        assertClausePresentInSQL(lockClause, em.createNamedQuery(\"findEmployeeByIdWithLock\").setParameter(\"id\", 0));\n         em.getTransaction().rollback();\n         em.getTransaction().begin();\n-        assertClausePresentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeByIdWithLock\").setParameter(\"id\", 0));\n+        assertClausePresentInSQL(lockClause, em.createNamedQuery(\"findEmployeeByIdWithLock\").setParameter(\"id\", 0));\n         em.getTransaction().rollback();\n         em.close();\n     }\n@@ -64,8 +67,8 @@ public void testForUpdateClausePresentInNamedQueryWithLockMode() {\n     public void testForUpdateClausePresentInQueryWithDefault() {\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n-        assertClauseAbsentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeById\").setParameter(\"id\", 0));\n-        assertClauseAbsentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeById\").setParameter(\"id\", 0));\n+        assertClauseAbsentInSQL(lockClause, em.createNamedQuery(\"findEmployeeById\").setParameter(\"id\", 0));\n+        assertClauseAbsentInSQL(lockClause, em.createNamedQuery(\"findEmployeeById\").setParameter(\"id\", 0));\n         \n         OpenJPAEntityManager oem = (OpenJPAEntityManager)em;\n         OpenJPAQuery<?> q = oem.createNamedQuery(\"findEmployeeById\").setParameter(\"id\", 0); \n@@ -86,12 +89,12 @@ public void testForUpdateClauseAbsentInQueryWithFetchPlanNoneLockMode() {\n         OpenJPAQuery<?> q = em.createNamedQuery(\"findEmployeeById\").setParameter(\"id\", 0); \n         FetchPlan fp = q.getFetchPlan();\n         fp.setReadLockMode(LockModeType.NONE);\n-        assertClauseAbsentInSQL(\"FOR UPDATE\", q);\n+        assertClauseAbsentInSQL(lockClause, q);\n         \n         q = em.createNamedQuery(\"findEmployeeByIdWithNoLock\").setParameter(\"id\", 0); \n         fp = q.getFetchPlan();\n         fp.setReadLockMode(LockModeType.NONE);\n-        assertClauseAbsentInSQL(\"FOR UPDATE\", q);\n+        assertClauseAbsentInSQL(lockClause, q);\n         \n         em.getTransaction().commit();\n         em.close();\n@@ -103,8 +106,8 @@ public void testForUpdateClauseAbsentInQueryWithFetchPlanNoneLockMode() {\n     public void testForUpdateClauseAbsentInQueryWithExplictNoLock() {\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n-        assertClauseAbsentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeByIdWithNoLock\").setParameter(\"id\", 0));\n-        assertClauseAbsentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeByIdWithNoLock\").setParameter(\"id\", 0));\n+        assertClauseAbsentInSQL(lockClause, em.createNamedQuery(\"findEmployeeByIdWithNoLock\").setParameter(\"id\", 0));\n+        assertClauseAbsentInSQL(lockClause, em.createNamedQuery(\"findEmployeeByIdWithNoLock\").setParameter(\"id\", 0));\n         em.getTransaction().commit();\n         em.close();\n     }"}]}

