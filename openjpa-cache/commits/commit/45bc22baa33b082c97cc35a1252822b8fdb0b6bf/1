{"sha":"45bc22baa33b082c97cc35a1252822b8fdb0b6bf","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ1YmMyMmJhYTMzYjA4MmM5N2NjMzVhMTI1MjgyMmI4ZmRiMGI2YmY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-12-08T17:54:12Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-12-08T17:54:12Z"},"message":"OPENJPA-1348 Embeddable data not persisted when using WriteBehind cache flush operation.  Patch from Fay Wang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@888497 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fc35862265172917d84bbfe4d2df213409e545fb","url":"https://api.github.com/repos/apache/openjpa/git/trees/fc35862265172917d84bbfe4d2df213409e545fb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/45bc22baa33b082c97cc35a1252822b8fdb0b6bf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/45bc22baa33b082c97cc35a1252822b8fdb0b6bf","html_url":"https://github.com/apache/openjpa/commit/45bc22baa33b082c97cc35a1252822b8fdb0b6bf","comments_url":"https://api.github.com/repos/apache/openjpa/commits/45bc22baa33b082c97cc35a1252822b8fdb0b6bf/comments","author":null,"committer":null,"parents":[{"sha":"c1e0b6bd1c8b3b095f04e737731ccf780db0ac3c","url":"https://api.github.com/repos/apache/openjpa/commits/c1e0b6bd1c8b3b095f04e737731ccf780db0ac3c","html_url":"https://github.com/apache/openjpa/commit/c1e0b6bd1c8b3b095f04e737731ccf780db0ac3c"}],"stats":{"total":34,"additions":29,"deletions":5},"files":[{"sha":"c22182aa6a11506bd80c71062d49cdf67e9b18e6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":14,"deletions":3,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/45bc22baa33b082c97cc35a1252822b8fdb0b6bf/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/45bc22baa33b082c97cc35a1252822b8fdb0b6bf/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=45bc22baa33b082c97cc35a1252822b8fdb0b6bf","patch":"@@ -191,6 +191,11 @@ public Broker newBroker(String user, String pass, boolean managed, int connRetai\n     }\n \n     public Broker newBroker(String user, String pass, boolean managed, int connRetainMode, boolean findExisting) {\n+        return newBroker(user, pass, managed, connRetainMode, findExisting, false);\n+    }\n+    \n+    public Broker newBroker(String user, String pass, boolean managed, int connRetainMode, boolean findExisting,\n+        boolean writeBehindCallback) {\n         try {\n             assertOpen();\n             makeReadOnly();\n@@ -200,7 +205,7 @@ public Broker newBroker(String user, String pass, boolean managed, int connRetai\n                 broker = findBroker(user, pass, managed);\n             if (broker == null) {\n                 broker = newBrokerImpl(user, pass);\n-                initializeBroker(managed, connRetainMode, broker, false);\n+                initializeBroker(managed, connRetainMode, broker, false, writeBehindCallback);\n             }\n             return broker;\n         } catch (OpenJPAException ke) {\n@@ -211,12 +216,18 @@ public Broker newBroker(String user, String pass, boolean managed, int connRetai\n     }\n \n     void initializeBroker(boolean managed, int connRetainMode, Broker broker, boolean fromDeserialization) {\n+        initializeBroker(managed, connRetainMode, broker, fromDeserialization, false);\n+    }    \n+    \n+    void initializeBroker(boolean managed, int connRetainMode, Broker broker, boolean fromDeserialization,\n+        boolean fromWriteBehindCallback) {\n         assertOpen();\n         makeReadOnly();\n         \n         DelegatingStoreManager dsm = createDelegatingStoreManager();\n \n-        ((BrokerImpl) broker).initialize(this, dsm, managed, connRetainMode, fromDeserialization);\n+        ((BrokerImpl) broker).initialize(this, dsm, managed, connRetainMode, fromDeserialization,\n+            fromWriteBehindCallback);\n         if (!fromDeserialization)\n             addListeners(broker);\n \n@@ -873,7 +884,7 @@ protected void initWriteBehindCallback() {\n                           _conf.getConnectionPassword(), \n                           false, // WriteBehind broker is always unmanaged.\n                           _conf.getConnectionRetainModeConstant(),\n-                          false);\n+                          false, true);\n \n             // The Broker used by the WriteBehind cache should not be tracked\n             // by the factory - we'll manually clean up when the factory is"},{"sha":"f9d59a05fbad0fad12d86218f1a40d7616f80e18","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":15,"deletions":2,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/45bc22baa33b082c97cc35a1252822b8fdb0b6bf/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/45bc22baa33b082c97cc35a1252822b8fdb0b6bf/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=45bc22baa33b082c97cc35a1252822b8fdb0b6bf","patch":"@@ -248,6 +248,7 @@\n     private int _lifeCallbackMode = 0;\n \n     private transient boolean _initializeWasInvoked = false;\n+    private transient boolean _fromWriteBehindCallback = false;\n     private LinkedList _fcs;\n     \n     // Set of supported property keys. The keys in this set correspond to bean-style setter methods\n@@ -304,6 +305,13 @@ public void setAuthentication(String user, String pass) {\n     public void initialize(AbstractBrokerFactory factory,\n         DelegatingStoreManager sm, boolean managed, int connMode,\n         boolean fromDeserialization) {\n+        initialize(factory, sm, managed, connMode, fromDeserialization, false);\n+    }\n+    \n+    public void initialize(AbstractBrokerFactory factory,\n+        DelegatingStoreManager sm, boolean managed, int connMode,\n+        boolean fromDeserialization, boolean fromWriteBehindCallback) {\n+        _fromWriteBehindCallback = fromWriteBehindCallback;\n         _initializeWasInvoked = true;\n         _loader = AccessController.doPrivileged(\n             J2DoPrivHelper.getContextClassLoaderAction());\n@@ -4449,9 +4457,10 @@ protected StateManagerImpl getStateManagerImpl(Object obj,\n         boolean assertThisContext) {\n         if (ImplHelper.isManageable(obj)) {\n             PersistenceCapable pc = ImplHelper.toPersistenceCapable(obj, _conf);\n-            if (pc.pcGetGenericContext() == this)\n+            BrokerImpl pcBroker = (BrokerImpl)pc.pcGetGenericContext();\n+            if (pcBroker == this || isFromWriteBehindCallback())\n                 return (StateManagerImpl) pc.pcGetStateManager();\n-            if (assertThisContext && pc.pcGetGenericContext() != null)\n+            if (assertThisContext && pcBroker != null)\n                 throw new UserException(_loc.get(\"not-managed\",\n                     Exceptions.toString(obj))).setFailedObject(obj);\n         }\n@@ -4938,4 +4947,8 @@ public void setCacheFinderQuery(boolean flag) {\n             unlock();\n         }\n     }\n+    \n+    public boolean isFromWriteBehindCallback() {\n+        return _fromWriteBehindCallback;\n+    }\n }"}]}

