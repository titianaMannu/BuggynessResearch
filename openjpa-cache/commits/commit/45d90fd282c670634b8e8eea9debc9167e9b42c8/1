{"sha":"45d90fd282c670634b8e8eea9debc9167e9b42c8","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ1ZDkwZmQyODJjNjcwNjM0YjhlOGVlYTlkZWJjOTE2N2U5YjQyYzg=","commit":{"author":{"name":"Srinivasa Segu","email":"ssegu@apache.org","date":"2007-01-22T23:33:08Z"},"committer":{"name":"Srinivasa Segu","email":"ssegu@apache.org","date":"2007-01-22T23:33:08Z"},"message":"Fixes to parse and use SqlResultSetMapping, SqlResultSetMappings annotations.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@498850 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7803917e3b8d9746b2833ec6cd55460b4a566531","url":"https://api.github.com/repos/apache/openjpa/git/trees/7803917e3b8d9746b2833ec6cd55460b4a566531"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/45d90fd282c670634b8e8eea9debc9167e9b42c8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/45d90fd282c670634b8e8eea9debc9167e9b42c8","html_url":"https://github.com/apache/openjpa/commit/45d90fd282c670634b8e8eea9debc9167e9b42c8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/45d90fd282c670634b8e8eea9debc9167e9b42c8/comments","author":null,"committer":null,"parents":[{"sha":"d88af9faaf114aba1df5d6478164d749f80a8a2d","url":"https://api.github.com/repos/apache/openjpa/commits/d88af9faaf114aba1df5d6478164d749f80a8a2d","html_url":"https://github.com/apache/openjpa/commit/d88af9faaf114aba1df5d6478164d749f80a8a2d"}],"stats":{"total":252,"additions":246,"deletions":6},"files":[{"sha":"ad95f4cdb04dd77174e82ead35fd5a65135a4f57","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/45d90fd282c670634b8e8eea9debc9167e9b42c8/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","raw_url":"https://github.com/apache/openjpa/raw/45d90fd282c670634b8e8eea9debc9167e9b42c8/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java?ref=45d90fd282c670634b8e8eea9debc9167e9b42c8","patch":"@@ -199,8 +199,11 @@ private QueryResultMapping getQueryResultMappingInternal(Class cls,\n         if ((getSourceMode() & MODE_QUERY) == 0)\n             return null;\n \n+        if (cls == null)\n+            cls = getMetaDataFactory()\n+                    .getResultSetMappingScope(name, envLoader);\n         // not in cache; load\n-        getMetaDataFactory().load(cls, MODE_QUERY, envLoader);\n+        getMetaDataFactory().load(cls, MODE_META | MODE_MAPPING, envLoader);\n         return (QueryResultMapping) _results.get(key);\n     }\n "},{"sha":"03dac7eed6ae80bd29f1689efbc0aa00d2160b71","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/QueryResultMapping.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/45d90fd282c670634b8e8eea9debc9167e9b42c8/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/QueryResultMapping.java","raw_url":"https://github.com/apache/openjpa/raw/45d90fd282c670634b8e8eea9debc9167e9b42c8/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/QueryResultMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/QueryResultMapping.java?ref=45d90fd282c670634b8e8eea9debc9167e9b42c8","patch":"@@ -409,9 +409,12 @@ private void resolveMapping(String path, Object id) {\n                 if (last == null)\n                     throw new MetaDataException(_loc.get(\"untraversable-path\",\n                         QueryResultMapping.this, _candidate, path));\n-                assertSingleColumn(last.getColumns(), path);\n-                Column col = last.getColumns()[0];\n-\n+                Column[] cols = last.getColumns();\n+                if (last.isVersion())\n+                    cols = candidate.getVersion().getColumns();\n+                assertSingleColumn(cols, path);\n+                Column col = cols[0];\n+                \n                 // special-case oid fields, since path lists supplied for\n                 // them at runtime don't include the embedded fields\n                 if (fm != null && fm.getDeclaredTypeCode() == JavaTypes.OID) {"},{"sha":"7492afbe1476ca2d6f9c01ad1b6611d51e8a9c10","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataFactory.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/45d90fd282c670634b8e8eea9debc9167e9b42c8/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/45d90fd282c670634b8e8eea9debc9167e9b42c8/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataFactory.java?ref=45d90fd282c670634b8e8eea9debc9167e9b42c8","patch":"@@ -97,6 +97,11 @@ public Class getQueryScope(String queryName, ClassLoader loader) {\n         return null;\n     }\n \n+    public Class getResultSetMappingScope(String resultSetMappingName,\n+        ClassLoader loader) {\n+        return null;\n+    }\n+\n     public ClassArgParser newClassArgParser() {\n         return new ClassArgParser();\n     }"},{"sha":"316509dac4a4dfcb8998f5e9f55cf42b940ec09e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/DelegatingMetaDataFactory.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/45d90fd282c670634b8e8eea9debc9167e9b42c8/openjpa-kernel/src/main/java/org/apache/openjpa/meta/DelegatingMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/45d90fd282c670634b8e8eea9debc9167e9b42c8/openjpa-kernel/src/main/java/org/apache/openjpa/meta/DelegatingMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/DelegatingMetaDataFactory.java?ref=45d90fd282c670634b8e8eea9debc9167e9b42c8","patch":"@@ -103,6 +103,11 @@ public Class getQueryScope(String queryName, ClassLoader loader) {\n         return _delegate.getQueryScope(queryName, loader);\n     }\n \n+    public Class getResultSetMappingScope(String resultSetMappingName,\n+        ClassLoader loader) {\n+        return _delegate.getResultSetMappingScope(resultSetMappingName, loader);\n+    }\n+\n     public void clear() {\n         _delegate.clear();\n     }\n@@ -113,5 +118,5 @@ public void addClassExtensionKeys(Collection exts) {\n \n     public void addFieldExtensionKeys(Collection exts) {\n         _delegate.addFieldExtensionKeys(exts);\n-\t}\n+    }\n }"},{"sha":"99de88ee2f983c00c06809fac30b8ec6d2df6bcd","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataFactory.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/45d90fd282c670634b8e8eea9debc9167e9b42c8/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/45d90fd282c670634b8e8eea9debc9167e9b42c8/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataFactory.java?ref=45d90fd282c670634b8e8eea9debc9167e9b42c8","patch":"@@ -115,6 +115,12 @@ public boolean store(ClassMetaData[] metas, QueryMetaData[] queries,\n      */\n     public Class getQueryScope(String queryName, ClassLoader loader);\n \n+    /**\n+     * Return the type defining the given result set mapping name, if any.\n+     */\n+    public Class getResultSetMappingScope(String resultSetMappingName,\n+        ClassLoader loader);\n+    \n     /**\n      * Return a properly-configured class arg parser for our expected\n      * metadata format."},{"sha":"cfbb4995a9a426de468faa817814ea541a6709a9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/45d90fd282c670634b8e8eea9debc9167e9b42c8/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/45d90fd282c670634b8e8eea9debc9167e9b42c8/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java?ref=45d90fd282c670634b8e8eea9debc9167e9b42c8","patch":"@@ -76,6 +76,11 @@ public Class getQueryScope(String queryName, ClassLoader loader) {\n         return null;\n     }\n \n+    public Class getResultSetMappingScope(String resultSetMappingName,\n+        ClassLoader loader) {\n+        return null;\n+    }\n+\n     public ClassArgParser newClassArgParser() {\n         return new ClassArgParser();\n     }"},{"sha":"99019d4905dd341c5e1c4bbcee07ddedcd7167b6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/QueryMetaData.java","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/45d90fd282c670634b8e8eea9debc9167e9b42c8/openjpa-kernel/src/main/java/org/apache/openjpa/meta/QueryMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/45d90fd282c670634b8e8eea9debc9167e9b42c8/openjpa-kernel/src/main/java/org/apache/openjpa/meta/QueryMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/QueryMetaData.java?ref=45d90fd282c670634b8e8eea9debc9167e9b42c8","patch":"@@ -52,7 +52,7 @@\n     private String[] _comments;\n     private List _hintKeys;\n     private List _hintVals;\n-\n+    private String _resultSetMappingName;\n     /**\n      * Construct with the given name.\n      */\n@@ -178,6 +178,14 @@ public void addHint(String key, Object value) {\n         _hintVals.add(value);\n     }\n \n+    public String getResultSetMappingName() {\n+        return _resultSetMappingName;\n+    }\n+\n+    public void setResultSetMappingName(String setMappingName) {\n+        _resultSetMappingName = setMappingName;\n+    }\n+    \n     /**\n      * Set query template information into the given concrete\n      * query instance. However, the language, query string, and\n@@ -193,6 +201,8 @@ public void setInto(Query query) {\n             query.setResultType(_res);\n         if (_readOnly != null)\n             query.setReadOnly(_readOnly.booleanValue());\n+        if (_resultSetMappingName != null)\n+            query.setResultMapping(null, _resultSetMappingName);\n     }\n \n     /**"},{"sha":"6d1077df6f4402ff670d229132d4001c8e1ab93d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/45d90fd282c670634b8e8eea9debc9167e9b42c8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity.java","raw_url":"https://github.com/apache/openjpa/raw/45d90fd282c670634b8e8eea9debc9167e9b42c8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity.java?ref=45d90fd282c670634b8e8eea9debc9167e9b42c8","patch":"@@ -0,0 +1,90 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.EntityResult;\r\n+import javax.persistence.FieldResult;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.NamedNativeQueries;\r\n+import javax.persistence.NamedNativeQuery;\r\n+import javax.persistence.SqlResultSetMapping;\r\n+import javax.persistence.Table;\r\n+\r\n+@NamedNativeQueries( { \r\n+    @NamedNativeQuery(name = \"findSimpleEntitites\",\r\n+        query = \"SELECT ID, NAME, VALUE FROM SIMPLE_ENTITY\", \r\n+        resultSetMapping = \"simpleEntitiesResult\") })\r\n+\r\n+@SqlResultSetMapping(name = \"simpleEntitiesResult\",\r\n+    entities = @EntityResult(\r\n+    entityClass = org.apache.openjpa.persistence.query.SimpleEntity.class, \r\n+    fields = {@FieldResult(name = \"id\", column = \"ID\"),\r\n+        @FieldResult(name = \"name\", column = \"NAME\"),\r\n+        @FieldResult(name = \"value\", column = \"VALUE\") }))\r\n+@Entity(name = \"simple\")\r\n+@Table(name = \"SIMPLE_ENTITY\")\r\n+public class SimpleEntity {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    @Column(name = \"ID\")\r\n+    private long id;\r\n+\r\n+    @Basic\r\n+    @Column(name = \"NAME\")\r\n+    private String name;\r\n+\r\n+    @Basic\r\n+    @Column(name = \"VALUE\")\r\n+    private String value;\r\n+\r\n+    public SimpleEntity() {\r\n+    }\r\n+\r\n+    public SimpleEntity(String name, String value) {\r\n+        this();\r\n+        this.name = name;\r\n+        this.value = value;\r\n+    }\r\n+\r\n+    public long getId() {\r\n+        return this.id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public String getValue() {\r\n+        return value;\r\n+    }\r\n+\r\n+    public void setValue(String value) {\r\n+        this.value = value;\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"3b8cd9810f302839cf21a0c54553565762bf819f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestResultSetMapping.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/45d90fd282c670634b8e8eea9debc9167e9b42c8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestResultSetMapping.java","raw_url":"https://github.com/apache/openjpa/raw/45d90fd282c670634b8e8eea9debc9167e9b42c8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestResultSetMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestResultSetMapping.java?ref=45d90fd282c670634b8e8eea9debc9167e9b42c8","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n+import javax.persistence.Query;\n+\n+import junit.framework.TestCase;\n+import junit.textui.TestRunner;\n+\n+public class TestResultSetMapping extends TestCase {\n+\n+    private EntityManagerFactory emf;\n+\n+    public void setUp() {\n+        Map props = new HashMap();\n+        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" + \n+            org.apache.openjpa.persistence.query.SimpleEntity.class.getName() + \")\");\n+        emf = Persistence.createEntityManagerFactory(\"test\", props);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(new SimpleEntity(\"tName\", \"tValue\"));\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void tearDown() {\n+        if (emf == null)\n+            return;\n+        try {\n+            EntityManager em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            em.createQuery(\"delete from simple\").executeUpdate();\n+            em.getTransaction().commit();\n+            em.close();\n+            emf.close();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void testSimpleQuery() {\n+        EntityManager em = emf.createEntityManager();\n+        Query q = em.createNamedQuery(\"findSimpleEntitites\");\n+        List res = q.getResultList();\n+        assertNotNull(res);\n+        for (Iterator resultIter = res.iterator(); resultIter.hasNext();) {\n+            assertSame(resultIter.next().getClass(), SimpleEntity.class);\n+        }\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestResultSetMapping.class);\n+    }\n+}\n\\ No newline at end of file"},{"sha":"cc5a93a9e3618284d25a1d4d788478b06ddc0758","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/45d90fd282c670634b8e8eea9debc9167e9b42c8/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/45d90fd282c670634b8e8eea9debc9167e9b42c8/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=45d90fd282c670634b8e8eea9debc9167e9b42c8","patch":"@@ -1555,6 +1555,9 @@ private void parseNamedNativeQueries(AnnotatedElement el,\n             else if (!void.class.equals(res))\n                 meta.setResultType(res);\n \n+            if (!StringUtils.isEmpty(query.resultSetMapping()))\n+                meta.setResultSetMappingName(query.resultSetMapping());\n+\n             meta.setSource(getSourceFile(), (el instanceof Class) ? el : null,\n                 meta.SRC_ANNOTATIONS);\n             if (isMetaDataMode())"},{"sha":"3fdf2bedb0111be84b6ab2580cfbd09194bf49fb","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","status":"modified","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/45d90fd282c670634b8e8eea9debc9167e9b42c8/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/45d90fd282c670634b8e8eea9debc9167e9b42c8/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java?ref=45d90fd282c670634b8e8eea9debc9167e9b42c8","patch":"@@ -32,6 +32,8 @@\n import javax.persistence.NamedQuery;\n import javax.persistence.NamedNativeQueries;\n import javax.persistence.NamedNativeQuery;\n+import javax.persistence.SqlResultSetMapping;\n+import javax.persistence.SqlResultSetMappings;\n \n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configuration;\n@@ -294,6 +296,28 @@ public Class getQueryScope(String queryName, ClassLoader loader) {\n         return null;\n     }\n \n+    @Override\n+    public Class getResultSetMappingScope(String rsMappingName,\n+        ClassLoader loader) {\n+        if (rsMappingName == null)\n+            return null;\n+        \n+        Collection classes = repos.loadPersistentTypes(false, loader);\n+        for (Class cls : (Collection<Class>) classes) {\n+            \n+            if (cls.isAnnotationPresent(SqlResultSetMapping.class) && \n+                hasRSMapping(rsMappingName, (SqlResultSetMapping) cls.\n+                getAnnotation(SqlResultSetMapping.class)))\n+                return cls;\n+            \n+            if (cls.isAnnotationPresent(SqlResultSetMappings.class) && \n+                hasRSMapping(rsMappingName, ((SqlResultSetMappings) cls.\n+                getAnnotation(SqlResultSetMappings.class)).value()))\n+                return cls;\n+        }\n+        return null;\n+    }\n+\n     private boolean hasNamedQuery(String query, NamedQuery... queries) {\n         for (NamedQuery q : queries) {\n             if (query.equals(q.name()))\n@@ -302,6 +326,15 @@ private boolean hasNamedQuery(String query, NamedQuery... queries) {\n         return false;\n     }\n \n+    private boolean hasRSMapping(String rsMapping,\n+        SqlResultSetMapping... mappings) {\n+        for (SqlResultSetMapping m : mappings) {\n+            if (rsMapping.equals(m.name()))\n+                return true;\n+        }\n+        return false;\n+    }\n+\n     private boolean hasNamedNativeQuery(String query,\n         NamedNativeQuery... queries) {\n         for (NamedNativeQuery q : queries) {"}]}

