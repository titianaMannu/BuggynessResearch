{"sha":"4611bf9e43f0782f13216ea14f763e4e5c39a86e","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ2MTFiZjllNDNmMDc4MmYxMzIxNmVhMTRmNzYzZTRlNWMzOWE4NmU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-12-30T01:20:55Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-12-30T01:20:55Z"},"message":"Code changes for OPENJPA-93: sequence maintainance in JTA env without non-JTA datasource. This has been nominally tested in WebLogic Server.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@491147 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d8add1290b486455b8fa3a0e28262614ead617b5","url":"https://api.github.com/repos/apache/openjpa/git/trees/d8add1290b486455b8fa3a0e28262614ead617b5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4611bf9e43f0782f13216ea14f763e4e5c39a86e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4611bf9e43f0782f13216ea14f763e4e5c39a86e","html_url":"https://github.com/apache/openjpa/commit/4611bf9e43f0782f13216ea14f763e4e5c39a86e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4611bf9e43f0782f13216ea14f763e4e5c39a86e/comments","author":null,"committer":null,"parents":[{"sha":"6cb121e192041b65410fa2af968921c908b14d14","url":"https://api.github.com/repos/apache/openjpa/commits/6cb121e192041b65410fa2af968921c908b14d14","html_url":"https://github.com/apache/openjpa/commit/6cb121e192041b65410fa2af968921c908b14d14"}],"stats":{"total":84,"additions":68,"deletions":16},"files":[{"sha":"f98c0d1c69277443991b8b516a26ec977be6feeb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java","status":"modified","additions":60,"deletions":13,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/4611bf9e43f0782f13216ea14f763e4e5c39a86e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/4611bf9e43f0782f13216ea14f763e4e5c39a86e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractJDBCSeq.java?ref=4611bf9e43f0782f13216ea14f763e4e5c39a86e","patch":"@@ -18,6 +18,8 @@\n import java.sql.Connection;\n import java.sql.SQLException;\n import javax.sql.DataSource;\n+import javax.transaction.Transaction;\n+import javax.transaction.TransactionManager;\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n@@ -40,6 +42,7 @@\n \n     protected int type = TYPE_DEFAULT;\n     protected Object current = null;\n+    private transient Transaction _outerTransaction;\n \n     /**\n      * Records the sequence type.\n@@ -106,6 +109,11 @@ public void close() {\n     protected abstract Object nextInternal(JDBCStore store,\n         ClassMapping mapping)\n         throws Exception;\n+    \n+    /**\n+     * Return the {@link JDBCConfiguration} for this sequence.\n+     */\n+    public abstract JDBCConfiguration getConfiguration();\n \n     /**\n      * Return the current sequence object. By default returns the last\n@@ -140,13 +148,24 @@ protected Connection getConnection(JDBCStore store)\n         throws SQLException {\n         if (type == TYPE_TRANSACTIONAL || type == TYPE_CONTIGUOUS)\n             return store.getConnection();\n-\n-        JDBCConfiguration conf = store.getConfiguration();\n-        DataSource ds = conf.getDataSource2(store.getContext());\n-        Connection conn = ds.getConnection();\n-        if (conn.getAutoCommit())\n-            conn.setAutoCommit(false);\n-        return conn;\n+        else if (suspendInJTA()) {\n+            try {\n+                TransactionManager tm = getConfiguration()\n+                    .getManagedRuntimeInstance().getTransactionManager();\n+                _outerTransaction = tm.suspend();\n+                tm.begin();\n+                return store.getConnection();\n+            } catch (Exception e) {\n+                throw new StoreException(e);\n+            }\n+        } else {\n+            JDBCConfiguration conf = store.getConfiguration();\n+            DataSource ds = conf.getDataSource2(store.getContext());\n+            Connection conn = ds.getConnection();\n+            if (conn.getAutoCommit())\n+                conn.setAutoCommit(false);\n+            return conn;\n+        }\n     }\n \n     /**\n@@ -156,13 +175,41 @@ protected void closeConnection(Connection conn) {\n         if (conn == null)\n             return;\n \n-        try {\n-            if (type != TYPE_TRANSACTIONAL && type != TYPE_CONTIGUOUS)\n+        if (type == TYPE_TRANSACTIONAL || type == TYPE_CONTIGUOUS) {\n+            // do nothing; this seq is part of the business transaction\n+            return;\n+        } else if (suspendInJTA()) {\n+            try {\n+                TransactionManager tm = getConfiguration()\n+                    .getManagedRuntimeInstance().getTransactionManager();\n+                tm.commit();\n+                try { conn.close(); } catch (SQLException se) {}\n+\n+                if (_outerTransaction != null)\n+                    tm.resume(_outerTransaction);\n+\n+            } catch (Exception e) {\n+                throw new StoreException(e);\n+            } finally {\n+                _outerTransaction = null;\n+            }\n+        } else {\n+            try {\n                 conn.commit();\n-        } catch (SQLException se) {\n-            throw SQLExceptions.getStore(se);\n-        } finally {\n-            try { conn.close(); } catch (SQLException se) {}\n+            } catch (SQLException se) {\n+                throw SQLExceptions.getStore(se);\n+            } finally {\n+                try { conn.close(); } catch (SQLException se) {}\n+            }\n         }\n     }\n+    \n+    /**\n+     * Detect whether or not OpenJPA should suspend the transaction in \n+     * a managed environment.\n+     */\n+    protected boolean suspendInJTA() {\n+        return getConfiguration().isConnectionFactoryModeManaged() && \n+            getConfiguration().getConnectionFactory2() == null;\n+    }\n }"},{"sha":"9fabb6d15483b970fc57ed65759f97cfe623f8d1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/4611bf9e43f0782f13216ea14f763e4e5c39a86e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/4611bf9e43f0782f13216ea14f763e4e5c39a86e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java?ref=4611bf9e43f0782f13216ea14f763e4e5c39a86e","patch":"@@ -172,6 +172,10 @@ public void addSchema(ClassMapping mapping, SchemaGroup group) {\n         schema.importSequence(_seq);\n     }\n \n+    public JDBCConfiguration getConfiguration() {\n+        return _conf;\n+    }\n+    \n     public void setConfiguration(Configuration conf) {\n         _conf = (JDBCConfiguration) conf;\n     }"},{"sha":"3bc45dd5fff303a75c5aacc608b072c1abae6f00","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/4611bf9e43f0782f13216ea14f763e4e5c39a86e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/4611bf9e43f0782f13216ea14f763e4e5c39a86e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java?ref=4611bf9e43f0782f13216ea14f763e4e5c39a86e","patch":"@@ -330,7 +330,8 @@ private void allocateSequence(JDBCStore store, ClassMapping mapping,\n         try {\n             // possible that we might get errors when inserting if\n             // another thread/process is inserting same pk at same time\n-            SQLException err = null;\n+            SQLException err = null; \n+            // ### why does this not call getConnection() / closeConnection()?\n             conn = _conf.getDataSource2(store.getContext()).getConnection();\n             try {\n                 insertSequence(mapping, conn);\n@@ -377,7 +378,7 @@ private void insertSequence(ClassMapping mapping, Connection conn)\n             appendValue(Numbers.valueOf(1), _seqColumn).append(\")\");\n \n         boolean wasAuto = conn.getAutoCommit();\n-        if (!wasAuto)\n+        if (!wasAuto && !suspendInJTA())\n             conn.setAutoCommit(true);\n \n         PreparedStatement stmnt = null;\n@@ -387,7 +388,7 @@ private void insertSequence(ClassMapping mapping, Connection conn)\n         } finally {\n             if (stmnt != null)\n                 try { stmnt.close(); } catch (SQLException se) {}\n-            if (!wasAuto)\n+            if (!wasAuto && !suspendInJTA())\n                 conn.setAutoCommit(false);\n         }\n     }"}]}

