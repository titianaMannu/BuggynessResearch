{"sha":"4628962d2adc6a2c87f1c5cf674be766d2b80c69","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ2Mjg5NjJkMmFkYzZhMmM4N2YxYzVjZjY3NGJlNzY2ZDJiODBjNjk=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-09-07T22:47:13Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-09-07T22:47:13Z"},"message":"OPENJPA-1372: Add testcases - no mainline code changes. \nSubmitted By: Pinaki Poddar and Milosz Tylenda\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@993552 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c0ef28250494d6e2f22d600556ef304c8813f5cb","url":"https://api.github.com/repos/apache/openjpa/git/trees/c0ef28250494d6e2f22d600556ef304c8813f5cb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4628962d2adc6a2c87f1c5cf674be766d2b80c69","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4628962d2adc6a2c87f1c5cf674be766d2b80c69","html_url":"https://github.com/apache/openjpa/commit/4628962d2adc6a2c87f1c5cf674be766d2b80c69","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4628962d2adc6a2c87f1c5cf674be766d2b80c69/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"238beccbfdc739b27ff484c7023fc564b7d50cfb","url":"https://api.github.com/repos/apache/openjpa/commits/238beccbfdc739b27ff484c7023fc564b7d50cfb","html_url":"https://github.com/apache/openjpa/commit/238beccbfdc739b27ff484c7023fc564b7d50cfb"}],"stats":{"total":119,"additions":119,"deletions":0},"files":[{"sha":"88cc3467e011c57d029e1b6b786fcb8df7d86764","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/GeneratedIdObject.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/4628962d2adc6a2c87f1c5cf674be766d2b80c69/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/GeneratedIdObject.java","raw_url":"https://github.com/apache/openjpa/raw/4628962d2adc6a2c87f1c5cf674be766d2b80c69/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/GeneratedIdObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/GeneratedIdObject.java?ref=4628962d2adc6a2c87f1c5cf674be766d2b80c69","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.sequence;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+/**\n+ * An entity that uses generated value for its primary key.\n+ * Used to demonstrate OPENJPA_SEQUENCE_TABLE failure under multi-threaded environment.\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+public class GeneratedIdObject {\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+    \n+    public long getId() {\n+        return id;\n+    }\n+}"},{"sha":"44f1e00626c632e98eac8109c6828fec756f4168","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/TestSequenceGenerationOnMT.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/4628962d2adc6a2c87f1c5cf674be766d2b80c69/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/TestSequenceGenerationOnMT.java","raw_url":"https://github.com/apache/openjpa/raw/4628962d2adc6a2c87f1c5cf674be766d2b80c69/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/TestSequenceGenerationOnMT.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/TestSequenceGenerationOnMT.java?ref=4628962d2adc6a2c87f1c5cf674be766d2b80c69","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.sequence;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+\n+public class TestSequenceGenerationOnMT extends SingleEMFTestCase {\n+    public void setUp() {\n+        super.setUp(CLEAR_TABLES, GeneratedIdObject.class, \n+          \"openjpa.Multithreaded\", \"true\");\n+    }\n+    \n+    public void testIdGenerationInMultithreadedEnvironment() {\n+        int nThreads = 5;\n+        ExecutorService threads = Executors.newFixedThreadPool(nThreads);\n+        List<Callable<Boolean>> tasks = new ArrayList<Callable<Boolean>>();\n+        for (int i = 0; i < nThreads; i++) {\n+            Loader loader = new Loader(emf.createEntityManager());\n+            tasks.add(loader);\n+        }\n+        List<Future<Boolean>> results;\n+        try {\n+            results = threads.invokeAll(tasks);\n+            for (Future<Boolean> result : results) {\n+                assertTrue(result.get());\n+            }\n+        } catch (ExecutionException ee) {\n+            ee.getCause().printStackTrace();\n+            fail(\"Failed \" + ee.getCause());\n+        } catch (InterruptedException e) {\n+            e.printStackTrace();\n+            fail(\"Failed \" + e);\n+        }\n+        \n+    }\n+    \n+    \n+    public static class Loader implements Callable<Boolean> {\n+        EntityManager em;\n+        Loader(EntityManager em) {\n+            this.em = em;\n+        }\n+        public Boolean call() throws Exception {\n+            GeneratedIdObject pc = new GeneratedIdObject();\n+            em.getTransaction().begin();\n+            em.persist(pc);\n+            em.getTransaction().commit();\n+            return true;\n+        }\n+    }\n+}"}]}

