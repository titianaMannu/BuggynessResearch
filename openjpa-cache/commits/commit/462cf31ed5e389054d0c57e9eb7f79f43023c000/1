{"sha":"462cf31ed5e389054d0c57e9eb7f79f43023c000","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ2MmNmMzFlZDVlMzg5MDU0ZDBjNTdlOWViN2Y3OWY0MzAyM2MwMDA=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-19T01:32:03Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-19T01:32:03Z"},"message":"OPENJPA-240 XMLMapping Query testcase - fix identation\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@557444 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bb3b582e8c27b15f533931e097725eaccb708096","url":"https://api.github.com/repos/apache/openjpa/git/trees/bb3b582e8c27b15f533931e097725eaccb708096"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/462cf31ed5e389054d0c57e9eb7f79f43023c000","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/462cf31ed5e389054d0c57e9eb7f79f43023c000","html_url":"https://github.com/apache/openjpa/commit/462cf31ed5e389054d0c57e9eb7f79f43023c000","comments_url":"https://api.github.com/repos/apache/openjpa/commits/462cf31ed5e389054d0c57e9eb7f79f43023c000/comments","author":null,"committer":null,"parents":[{"sha":"b761732fdf60ee4207aaca6002e63f9dbf1bea84","url":"https://api.github.com/repos/apache/openjpa/commits/b761732fdf60ee4207aaca6002e63f9dbf1bea84","html_url":"https://github.com/apache/openjpa/commit/b761732fdf60ee4207aaca6002e63f9dbf1bea84"}],"stats":{"total":147,"additions":75,"deletions":72},"files":[{"sha":"d73062ad22ddf26b62420ddc41525f7d8356f2fa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java","status":"modified","additions":75,"deletions":72,"changes":147,"blob_url":"https://github.com/apache/openjpa/blob/462cf31ed5e389054d0c57e9eb7f79f43023c000/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java","raw_url":"https://github.com/apache/openjpa/raw/462cf31ed5e389054d0c57e9eb7f79f43023c000/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java?ref=462cf31ed5e389054d0c57e9eb7f79f43023c000","patch":"@@ -50,7 +50,8 @@\n \r\n     public void setUp() {\r\n         setUp(org.apache.openjpa.persistence.xmlmapping.entities.Customer.class\r\n-            , org.apache.openjpa.persistence.xmlmapping.entities.Customer.CustomerKey.class\r\n+            , org.apache.openjpa.persistence.xmlmapping.entities.Customer\r\n+                .CustomerKey.class\r\n             , org.apache.openjpa.persistence.xmlmapping.entities.Order.class\r\n             , org.apache.openjpa.persistence.xmlmapping.entities.EAddress.class\r\n             ,  \"openjpa.MetaDataRepository\"\r\n@@ -89,32 +90,34 @@ else if (dict instanceof SQLServerDictionary)\n         // For platform specific expected sqls are under resources.\r\n         // The generated sql of the test is captured and written to file:\r\n         //     ./TestXMLCustomerOrder.log\r\n-        // This output file contents should match with the platform specfic sqls.        \r\n+        // This output file contents should match with the platform specfic \r\n+        // sqls.        \r\n         System.out.println(\"Expected pushdown SQL log file is in: \" + sqllog);\r\n         \r\n         sql.clear();\r\n \r\n         try {\r\n-\t\t\tem.getTransaction().begin();\r\n-\t\t\tdeleteAllData(em );\r\n-\t\t\tem.getTransaction().commit();\r\n-\t\t\t\r\n             em.getTransaction().begin();\r\n-\t\t\tloadData(em);\r\n-\t\t\tem.getTransaction().commit();\r\n-\t\t\t\r\n-\t\t\tem.close();\r\n-\t\t\t\r\n-\t\t\t// By closing and recreating the EntityManager, \r\n-\t\t\t// this guarantees that data will be retrieved from \r\n-\t\t\t// the database rather than just reused from the \r\n-\t\t\t// persistence context created by the load methods above.\r\n-\t\t\t\r\n-\t\t\tem = emf.createEntityManager();\r\n-\t\t\t\r\n-\t\t\tSystem.err.println(\"Main started.\");\r\n+            deleteAllData(em );\r\n+            em.getTransaction().commit();\r\n+\r\n+            em.getTransaction().begin();\r\n+            loadData(em);\r\n+            em.getTransaction().commit();\r\n+\r\n+            em.close();\r\n+\r\n+            // By closing and recreating the EntityManager, \r\n+            // this guarantees that data will be retrieved from \r\n+            // the database rather than just reused from the \r\n+            // persistence context created by the load methods above.\r\n+\r\n+            em = emf.createEntityManager();\r\n+\r\n+            System.err.println(\"Main started.\");\r\n             int test=1;\r\n-            List<Address> addrs = em.createQuery(\"select o.shipAddress from Order o\")\r\n+            List<Address> addrs = em.createQuery(\r\n+                \"select o.shipAddress from Order o\")\r\n                 .getResultList();\r\n             for (Address addr : addrs) {\r\n                 System.out.println(\"addr= \" + addr.toString());\r\n@@ -133,26 +136,26 @@ else if (dict instanceof SQLServerDictionary)\n                 List orders = em.createQuery(qstring).getResultList();\r\n                 printOrders(orders, test++);\r\n             }\r\n-            \r\n+\r\n             // query passing parameters\r\n             qstring = \"select o from Order o where o.shipAddress.city = ?1\";\r\n             Query q5 = em.createQuery(qstring);\r\n             q5.setParameter(1, \"San Jose\");\r\n             List orders =q5.getResultList();\r\n             printOrders(orders, test++);\r\n-            \r\n+\r\n             qstring = \"select o from Order o where ?1 = o.shipAddress.city\";\r\n             Query q6 = em.createQuery(qstring);\r\n             q6.setParameter(1, \"San Jose\");\r\n             orders = q6.getResultList();\r\n             printOrders(orders, test++);\r\n-            \r\n+\r\n             em.close();\r\n \r\n             // test updates\r\n             em = emf.createEntityManager();\r\n             testUpdateShipaddress(em, test++);\r\n-            \r\n+\r\n             em.close();\r\n             em = emf.createEntityManager();\r\n \r\n@@ -189,7 +192,7 @@ else if (dict instanceof SQLServerDictionary)\n             e.printStackTrace();\r\n         }       \r\n     }\r\n-    \r\n+\r\n     private void dumpSql() {\r\n         String out = \"./TestXMLCustomerOrder.log\";\r\n         try {\r\n@@ -212,56 +215,56 @@ private void printOrders(List orders, int test) {\n     }\r\n \r\n     private void loadData(EntityManager em) {\r\n-\t\t\r\n-\t\tObjectFactory addressFactory = new ObjectFactory();\r\n-\t\t\r\n+\r\n+        ObjectFactory addressFactory = new ObjectFactory();\r\n+\r\n         Customer c2 = new Customer();\r\n         c2.setCid( new Customer.CustomerKey(\"USA\", 2) );\r\n         c2.setName(\"A&J Auto\");\r\n         c2.setRating( CreditRating.GOOD );\r\n         c2.setAddress(new EAddress(\"2480 Campbell Ave\", \"Campbell\", \"CA\"\r\n-            , \"95123\"));\r\n+                , \"95123\"));\r\n         em.persist(c2);\r\n-        \r\n-\t\tCustomer c1 = new Customer();\r\n-\t\tc1.setCid( new Customer.CustomerKey(\"USA\", 1) );\r\n-\t\tc1.setName(\"Harry's Auto\");\r\n-\t\tc1.setRating( CreditRating.GOOD );\r\n-\t\tc1.setAddress( new EAddress(\"12500 Monterey\", \"San Jose\", \"CA\"\r\n-            , \"95141\"));\r\n-\t\tem.persist(c1);\r\n-\t\t\r\n-\t\tOrder o1 = new Order(10, 850, false, c1);\r\n-\t\tUSAAddress addr1 = addressFactory.createUSAAddress();\r\n-\t\taddr1.setCity(\"San Jose\");\r\n-\t\taddr1.setState(\"CA\");\r\n-\t\taddr1.setZIP(new Integer(\"95141\"));\r\n-\t\taddr1.getStreet().add(\"12500 Monterey\");\r\n-\t\taddr1.setName( c1.getName());\r\n-\t\to1.setShipAddress(addr1);\r\n-\t\tem.persist(o1);\r\n-\t\t\r\n-\t\tOrder o2 = new Order(20, 1000, false, c1);\r\n-\t\tCANAddress addr2 = addressFactory.createCANAddress();\r\n-\t\taddr2.setName(c2.getName());\r\n-\t\taddr2.getStreet().add(\"123 Warden Road\");\r\n-\t\taddr2.setCity(\"Markham\");\r\n-\t\taddr2.setPostalCode(\"L6G 1C7\");\r\n-\t\taddr2.setProvince(\"ON\");\r\n-\t\to2.setShipAddress(addr2);\r\n-\t\tem.persist(o2);\r\n-\t}\r\n-\t\r\n+\r\n+        Customer c1 = new Customer();\r\n+        c1.setCid( new Customer.CustomerKey(\"USA\", 1) );\r\n+        c1.setName(\"Harry's Auto\");\r\n+        c1.setRating( CreditRating.GOOD );\r\n+        c1.setAddress( new EAddress(\"12500 Monterey\", \"San Jose\", \"CA\"\r\n+                , \"95141\"));\r\n+        em.persist(c1);\r\n+\r\n+        Order o1 = new Order(10, 850, false, c1);\r\n+        USAAddress addr1 = addressFactory.createUSAAddress();\r\n+        addr1.setCity(\"San Jose\");\r\n+        addr1.setState(\"CA\");\r\n+        addr1.setZIP(new Integer(\"95141\"));\r\n+        addr1.getStreet().add(\"12500 Monterey\");\r\n+        addr1.setName( c1.getName());\r\n+        o1.setShipAddress(addr1);\r\n+        em.persist(o1);\r\n+\r\n+        Order o2 = new Order(20, 1000, false, c1);\r\n+        CANAddress addr2 = addressFactory.createCANAddress();\r\n+        addr2.setName(c2.getName());\r\n+        addr2.getStreet().add(\"123 Warden Road\");\r\n+        addr2.setCity(\"Markham\");\r\n+        addr2.setPostalCode(\"L6G 1C7\");\r\n+        addr2.setProvince(\"ON\");\r\n+        o2.setShipAddress(addr2);\r\n+        em.persist(o2);\r\n+    }\r\n+\r\n     private void testUpdateShipaddress(EntityManager em, int test)\r\n         throws Exception {\r\n         em.getTransaction().begin();\r\n         String query = \"select o from Order o where o.shipAddress.city \" +\r\n-            \"= 'San Jose'\";\r\n+        \"= 'San Jose'\";\r\n         List orders = em.createQuery(query).getResultList(); \r\n         System.out.println(\"Before Update: \");\r\n         printOrders(orders, test);\r\n         em.getTransaction().commit();\r\n-        \r\n+\r\n         // update in separate transaction                    \r\n         Order o = (Order) orders.get(0);\r\n         EntityTransaction et = em.getTransaction();\r\n@@ -270,21 +273,21 @@ private void testUpdateShipaddress(EntityManager em, int test)\n         addr.setCity(\"Cupertino\");\r\n         if (addr instanceof USAAddress)\r\n             ((USAAddress) addr).setZIP(95014);\r\n-        \r\n+\r\n         // update shipAddress\r\n         o.setShipAddress(addr);\r\n         et.commit();\r\n     }\r\n-\t\r\n-\tprivate void deleteAllData(EntityManager em) {\r\n-\t\tem.createQuery(\"delete from Order o\").executeUpdate();\r\n-\t\tem.createQuery(\"delete from Customer c\").executeUpdate();\r\n-\t}\r\n \r\n-\tprivate void printOrder(Order o){\r\n+    private void deleteAllData(EntityManager em) {\r\n+        em.createQuery(\"delete from Order o\").executeUpdate();\r\n+        em.createQuery(\"delete from Customer c\").executeUpdate();\r\n+    }\r\n+\r\n+    private void printOrder(Order o){\r\n         System.out.println(\" Customer ID:\"+o.getCustomer().getCid());\r\n-\t\tSystem.out.println(\" Order Number:\"+o.getOid());\r\n-\t\tSystem.out.println(\"Ship to: \"+o.getShipAddress().toString());\r\n-\t\tSystem.out.println();\t\t\r\n-\t}\r\n+        System.out.println(\" Order Number:\"+o.getOid());\r\n+        System.out.println(\"Ship to: \"+o.getShipAddress().toString());\r\n+        System.out.println();\t\t\r\n+    }\r\n }\r"}]}

