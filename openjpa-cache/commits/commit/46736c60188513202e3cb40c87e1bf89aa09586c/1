{"sha":"46736c60188513202e3cb40c87e1bf89aa09586c","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ2NzM2YzYwMTg4NTEzMjAyZTNjYjQwYzg3ZTFiZjg5YWEwOTU4NmM=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-09-26T20:11:33Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-09-26T20:11:33Z"},"message":"Fix configuration warnings for misspelled property names.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@450173 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"82160a352442d727ae871ac2b74643cff11cb959","url":"https://api.github.com/repos/apache/openjpa/git/trees/82160a352442d727ae871ac2b74643cff11cb959"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/46736c60188513202e3cb40c87e1bf89aa09586c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/46736c60188513202e3cb40c87e1bf89aa09586c","html_url":"https://github.com/apache/openjpa/commit/46736c60188513202e3cb40c87e1bf89aa09586c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/46736c60188513202e3cb40c87e1bf89aa09586c/comments","author":null,"committer":null,"parents":[{"sha":"5b9c773c814b1e29c1d58e59e299ff5403ee46a1","url":"https://api.github.com/repos/apache/openjpa/commits/5b9c773c814b1e29c1d58e59e299ff5403ee46a1","html_url":"https://github.com/apache/openjpa/commit/5b9c773c814b1e29c1d58e59e299ff5403ee46a1"}],"stats":{"total":89,"additions":47,"deletions":42},"files":[{"sha":"68caa0181bc1c37c0eb80657d7d610ae59c6f5a3","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","status":"modified","additions":28,"deletions":28,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/46736c60188513202e3cb40c87e1bf89aa09586c/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/46736c60188513202e3cb40c87e1bf89aa09586c/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties?ref=46736c60188513202e3cb40c87e1bf89aa09586c","patch":"@@ -3,7 +3,7 @@ ClassResolver-desc: The org.apache.openjpa.util.ClassResolver implementation \\\n     that should be used for class resolution.  Defaults to a spec-compliant \\\n     resolver.\n ClassResolver-type: General\n-ClassResolver-cat: JDO.Classes\n+ClassResolver-cat: Persistence.Classes\n ClassResolver-displayorder: 50\n ClassResolver-expert: true\n ClassResolver-interface: org.apache.openjpa.util.ClassResolver\n@@ -12,15 +12,15 @@ BrokerFactory-name: BrokerFactory implementation\n BrokerFactory-desc: The name of the org.apache.openjpa.kernel.BrokerFactory \\\n     class that Bootstrap.getBrokerFactory should create.  Typically \\\n \torg.apache.openjpa.jdbc.kernel.JDBCBrokerFactory\n-BrokerFactory-type: JDO\n-BrokerFactory-cat: JDO.Advanced\n+BrokerFactory-type: Persistence\n+BrokerFactory-cat: Persistence.Advanced\n BrokerFactory-displayorder: 50\n \n BrokerImpl-name: Broker implementation\n BrokerImpl-desc: Broker plugin and properties.  If you use a custom class, it \\\n \tmust extend org.apache.openjpa.kernel.BrokerImpl.\n BrokerImpl-type: General\n-BrokerImpl-cat: JDO.Advanced\n+BrokerImpl-cat: Persistence.Advanced\n BrokerImpl-displayorder: 50\n BrokerImpl-expert: true\n BrokerImpl-interface: org.apache.openjpa.kernel.BrokerImpl\n@@ -83,14 +83,14 @@ RemoteCommitProvider-interface: org.apache.openjpa.event.RemoteCommitProvider\n TransactionMode-name: Transaction mode\n TransactionMode-desc: Either \"local\" or \"managed\".\n TransactionMode-type: Connecting\n-TransactionMode-cat: JDO.Transactions\n+TransactionMode-cat: Persistence.Transactions\n TransactionMode-displayorder: 50\n \n ManagedRuntime-name: Managed runtime\n ManagedRuntime-desc: Plugin used to integrate with an external transaction \\\n \tmanager.  Must implement org.apache.openjpa.kernel.ManagedRuntime.\n ManagedRuntime-type: General\n-ManagedRuntime-cat: JDO.Advanced\n+ManagedRuntime-cat: Persistence.Advanced\n ManagedRuntime-displayorder: 50\n ManagedRuntime-expert: true\n ManagedRuntime-interface: org.apache.openjpa.ee.ManagedRuntime\n@@ -166,7 +166,7 @@ AutoClear-desc: If \"datastore\", an object''s field values clears when it \\\n \tenters a datastore transaction.  If \"all\", object field values also \\\n \tclear when entering optimistic transactions.\n AutoClear-type: General\n-AutoClear-cat: JDO.Transactions.Advanced\n+AutoClear-cat: Persistence.Transactions.Advanced\n AutoClear-displayorder: 50\n \n ConnectionRetainMode-name: Connection retain mode\n@@ -205,15 +205,15 @@ RetryClassRegistration-desc: Whether to log a warning and defer registration \\\n \tthrowing an exception.  Should only be set to true under complex \\\n \tclassloader topologies that are causing registration errors.\n RetryClassRegistration-type: General\n-RetryClassRegistration-cat: JDO.Classes\n+RetryClassRegistration-cat: Persistence.Classes\n RetryClassRegistration-displayorder: 60\n RetryClassRegistration-expert: true\n \n ProxyManager-name: Proxy manager\n ProxyManager-desc: Plugin used to proxy second class object fields of managed \\\n \tinstances.  Must implement org.apache.openjpa.util.ProxyManager.\n ProxyManager-type: General\n-ProxyManager-cat: JDO.Advanced\n+ProxyManager-cat: Persistence.Advanced\n ProxyManager-displayorder: 50\n ProxyManager-expert: true\n \n@@ -300,8 +300,8 @@ ConnectionFactory2Properties-expert: true\n Optimistic-name: Optimistic transactions\n Optimistic-desc: Selects between optimistic and pessimistic (data store) \\\n \ttransactional modes.\n-Optimistic-type: JDO\n-Optimistic-cat: JDO.Transactions\n+Optimistic-type: Persistence\n+Optimistic-cat: Persistence.Transactions\n Optimistic-displayorder: 50\n \n RetainState-name: Retain values\n@@ -310,8 +310,8 @@ RetainState-desc: If true, then fields in a persistence-capable object that \\\n \ttransaction commits. Otherwise, persistence-capable objects must \\\n \ttransition to the hollow state upon commit, meaning that subsequent reads \\\n \twill result in a database round-trip.\n-RetainState-type: JDO\n-RetainState-cat: JDO.Transactions.Advanced\n+RetainState-type: Persistence\n+RetainState-cat: Persistence.Transactions.Advanced\n RetainState-displayorder: 50\n \n RestoreState-name: Restore state\n@@ -320,8 +320,8 @@ RestoreState-desc: If true, then immutable fields in a persistence-capable \\\n \ttheir original values upon a rollback. If set to \"all\", mutable fields \\\n \twill also be restored.  If false, the values will not be changed upon \\\n \trollback.\n-RestoreState-type: JDO\n-RestoreState-cat: JDO.Transactions.Advanced\n+RestoreState-type: Persistence\n+RestoreState-cat: Persistence.Transactions.Advanced\n RestoreState-displayorder: 50\n \n AutoDetach-name: Auto detach\n@@ -347,33 +347,33 @@ IgnoreChanges-desc: If false, then OpenJPA must consider modifications, \\\n \tdeletions, and additions in the current trasnaction when executing a \\\n \tquery.  Else, OpenJPA is free to ignore changes and execute the query \\\n \tdirectly against the data store.\n-IgnoreChanges-type: JDO\n+IgnoreChanges-type: Persistence\n IgnoreChanges-cat: Queries\n IgnoreChanges-displayorder: 50\n \n NontransactionalRead-name: Non-transactional read\n NontransactionalRead-desc: If true, then it is possible to read \\\n \tpersistent data outside the context of a transaction. Otherwise, a \\\n \ttransaction must be in progress in order read data.\n-NontransactionalRead-type: JDO\n-NontransactionalRead-cat: JDO.Transactions\n+NontransactionalRead-type: Persistence\n+NontransactionalRead-cat: Persistence.Transactions\n NontransactionalRead-displayorder: 50\n \n NontransactionalWrite-name: Non-transactional write\n NontransactionalWrite-desc: If true, then it is possible to write to \\\n \tfields of a persistent-nontransactional object when a transaction is not \\\n \tin progress. If false, such a write will result in an exception.\n-NontransactionalWrite-type: JDO\n-NontransactionalWrite-cat: JDO.Transactions\n+NontransactionalWrite-type: Persistence\n+NontransactionalWrite-cat: Persistence.Transactions\n NontransactionalWrite-displayorder: 50\n \n Multithreaded-name: Multithreaded\n Multithreaded-desc: If true, then the application plans to have multiple \\\n \tthreads simultaneously accessing a single context or object, so measures \\\n \tmust be taken to ensure that the implementation is thread-safe. Otherwise, \\\n \tthe implementation need not address thread safety.\n-Multithreaded-type: JDO\n-Multithreaded-cat: JDO.Optimization\n+Multithreaded-type: Persistence\n+Multithreaded-cat: Persistence.Optimization\n Multithreaded-displayorder: 50\n \n ConnectionUserName-name: Connection username\n@@ -435,7 +435,7 @@ ConnectionFactory2-displayorder: 50\n PersistenceServer-name: Remote persistence support\n PersistenceServer-desc: Define the remote persistence server.\n PersistenceServer-type: General\n-PersistenceServer-cat: JDO.Remote\n+PersistenceServer-cat: Persistence.Remote\n PersistenceServer-displayorder: 50\n PersistenceServer-expert: true\n PersistenceServer-interface: org.apache.openjpa.lib.remote.Transport\n@@ -462,7 +462,7 @@ InverseManager-desc: Plugin used to manage inverse relations during flush. \\\n \tSet to true to use the default inverse manager.  Custom inverse managers \\\n \tmust extend org.apache.openjpa.kernel.InverseManager.\n InverseManager-type: General\n-InverseManager-cat: JDO.Advanced\n+InverseManager-cat: Persistence.Advanced\n InverseManager-displayorder: 50\n InverseManager-expert: true\n InverseManager-interface: org.apache.openjpa.kernel.InverseManager\n@@ -472,7 +472,7 @@ SavepointManager-desc: Plugin used to create and manage savepoints for \\\n \tpartial rollback/commit support.  Defaults to \"in-mem\". Custom savepoint \\\n \tmanagers must implement org.apache.openjpa.kernel.SavepointManager.\n SavepointManager-type: General\n-SavepointManager-cat: JDO.Advanced\n+SavepointManager-cat: Persistence.Advanced\n SavepointManager-displayorder: 50\n SavepointManager-expert: true\n SavepointManager-interface: org.apache.openjpa.kernel.SavepointManager\n@@ -482,7 +482,7 @@ OrphanedKeyAction-desc: Action to take when OpenJPA discovers an orphaned key \\\n     in the database.  May be a custom action implementing \\\n \torg.apache.openjpa.event.OrphanedKeyAction.\n OrphanedKeyAction-type: General\n-OrphanedKeyAction-cat: JDO.Advanced\n+OrphanedKeyAction-cat: Persistence.Advanced\n OrphanedKeyAction-displayorder: 50\n OrphanedKeyAction-expert: true\n OrphanedKeyAction-interface: org.apache.openjpa.event.OrphanedKeyAction\n@@ -519,15 +519,15 @@ MetaDataRepository-interface: org.apache.openjpa.meta.MetaDataRepository\n \n Mapping-name: Datastore mapping\n Mapping-desc: The name of the datastore mapping to use.\n-Mapping-type: JDO\n+Mapping-type: Persistence\n Mapping-cat: Mappings\n Mapping-displayorder: 50\n \n Compatibility-name: Compatibility Information\n Compatibility-desc: Details about various compatibiity options for the current \\\n \tenvironment.\n Compatibility-type: General\n-Compatibility-cat: JDO.Advanced\n+Compatibility-cat: Persistence.Advanced\n Compatibility-displayorder: 50\n Compatibility-expert: true\n Compatibility-interface: org.apache.openjpa.conf.Compatibility"},{"sha":"72edf7fc7407e4006d4281e9e164a04f7f561b21","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/46736c60188513202e3cb40c87e1bf89aa09586c/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/46736c60188513202e3cb40c87e1bf89aa09586c/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=46736c60188513202e3cb40c87e1bf89aa09586c","patch":"@@ -398,10 +398,12 @@ public Image getIcon(int kind) {\n             try {\n                 _pds[i] = getPropertyDescriptor(val);\n             } catch (MissingResourceException mre) {\n+mre.printStackTrace();\n                 if (failures == null)\n                     failures = new ArrayList();\n                 failures.add(val.getProperty());\n             } catch (IntrospectionException ie) {\n+ie.printStackTrace();\n                 if (failures == null)\n                     failures = new ArrayList();\n                 failures.add(val.getProperty());\n@@ -425,8 +427,8 @@ private PropertyDescriptor getPropertyDescriptor(Value val)\n         // set up property descriptor\n         PropertyDescriptor pd;\n         try {\n-            pd = new PropertyDescriptor\n-                (Introspector.decapitalize(prop), getClass());\n+            pd = new PropertyDescriptor(Introspector.decapitalize(prop), \n+                getClass());\n         } catch (IntrospectionException ie) {\n             // if there aren't any methods for this value(i.e., if it's a\n             // dynamically-added value), then an IntrospectionException will\n@@ -707,8 +709,10 @@ protected boolean isInvalidProperty(String propName) {\n         String[] prefixes = ProductDerivations.getConfigurationPrefixes();\n         for (int i = 0; i < prefixes.length; i++) {\n             if (propName.toLowerCase().startsWith(prefixes[i])\n-                && propName.length() > prefixes[i].length()\n-                && propName.indexOf('.', prefixes[i].length()) == -1)\n+                && propName.length() > prefixes[i].length() + 1\n+                && propName.indexOf('.', prefixes[i].length()) \n+                == prefixes[i].length()\n+                && propName.indexOf('.', prefixes[i].length() + 1) == -1)\n                 return true;\n         }\n         return false;"},{"sha":"0212f27be359f9a0e00ad6c87480851af7d986b1","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryValue.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/46736c60188513202e3cb40c87e1bf89aa09586c/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryValue.java","raw_url":"https://github.com/apache/openjpa/raw/46736c60188513202e3cb40c87e1bf89aa09586c/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryValue.java?ref=46736c60188513202e3cb40c87e1bf89aa09586c","patch":"@@ -56,5 +56,6 @@ public EntityManagerFactoryValue() {\n         setAliases(ALIASES);\n         setDefault(ALIASES[0]);\n         setClassName(ALIASES[1]);\n+        setScope(getClass());\n     }\n }"},{"sha":"c62b774982ed38de2a02164b50387a24b84b6d26","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/46736c60188513202e3cb40c87e1bf89aa09586c/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/46736c60188513202e3cb40c87e1bf89aa09586c/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties?ref=46736c60188513202e3cb40c87e1bf89aa09586c","patch":"@@ -40,15 +40,6 @@ unnamed-fg: \"{0}\" declares an unnamed fetch group.  All fetch groups \\\n bad-fg-field: Fetch group \"{0}\" in type \"{1}\" includes field \"{2}\", but \\\n \tthis field is not declared in \"{1}\", or is not persistent.  Currently, \\\n \tOpenJPA only supports declared fields in fetch groups.\n-mult-fgs: Field \"{0}\" is included in fetch group \"{1}\", but is already in \\\n-\tfetch group \"{2}\".  OpenJPA currently limits fields to one fetch group.\n-mult-fgs-default: Field \"{0}\" is included in fetch group \"{1}\", but is also in \\\n-\tthe default fetch group. OpenJPA currently limits fields to one fetch group. \\\n-\tSet the field''s \"fetch\" attribute to \"FetchType.LAZY\" to exclude it \\\n-\tfrom the default fetch group.\n-nonzero-fetch-depth: Fetch group \"{0}\" in type \"{1}\" sets a non-zero \\\n-\tfetch-depth for field \"{2}\".  OpenJPA currently only supports a fetch depth \\\n-\tof zero.  Resetting depth to 0.\n not-update-delete-query: Cannot perform an update or delete operation \\\n \ton select query: \"{0}\".\n not-select-query: Cannot perform a select on update or delete query: \"{0}\".\n@@ -73,7 +64,7 @@ illegal-index: The parameter index {0} is invalid. Parameters must be \\\n \tintegers starting at 1.\n conf-load: Setting the following properties from \"{0}\" into configuration: {1}\n no-named-field: Type \"{0}\" does not have a managed field named \"{1}\".\n-unsupported-tag: OpenJPA does not currently support XML element \"{0}\".  Ignoring.\n+unsupported-tag: OpenJPA does not currently support XML element \"{0}\". Ignoring.\n no-class: No class attribute was specified.\n invalid-id-class: Could not load id class \"{1}\" for type \"{0}\".\n invalid-attr: Could not find property/field with the name \"{0}\" in type \"{1}\".\n@@ -100,3 +91,12 @@ multiple-methods-on-callback-error: Class \"{0}\" declares method \"{1}\" as well \\\n missing-no-arg-constructor: Entity listener class \"{0}\" must declare a no-arg \\\n \tconstructor. \"AllowsNoArgConstructorCallback\" property of MetaDataDefaults \\\n \tcan be set to true to ignore this exception.\t  \n+\n+EntityManagerFactory-name: EntityManagerFactory implementation\n+EntityManagerFactory-desc: Allows extension of standard \\\n+    org.apache.openjpa.persistence.EntityManagerFactoryImpl for custom behavior.\n+EntityManagerFactory-type: General\n+EntityManagerFactory-cat: Persistence.Advanced\n+EntityManagerFactory-displayorder: 50\n+EntityManagerFactory-expert: true\n+EntityManagerFactory-interface: org.apache.openjpa.persistence.EntityManagerFactoryImpl"}]}

