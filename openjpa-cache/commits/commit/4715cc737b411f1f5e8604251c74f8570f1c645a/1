{"sha":"4715cc737b411f1f5e8604251c74f8570f1c645a","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ3MTVjYzczN2I0MTFmMWY1ZTg2MDQyNTFjNzRmODU3MGYxYzY0NWE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-11T20:32:16Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-11T20:32:16Z"},"message":"OPENJPA-1050: Use generic types whenever possible. Replace ordered map with native implementation wrapper.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@889800 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"52be2ed65a9ff12f11fe10b5c0ae9b750c18c450","url":"https://api.github.com/repos/apache/openjpa/git/trees/52be2ed65a9ff12f11fe10b5c0ae9b750c18c450"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4715cc737b411f1f5e8604251c74f8570f1c645a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4715cc737b411f1f5e8604251c74f8570f1c645a","html_url":"https://github.com/apache/openjpa/commit/4715cc737b411f1f5e8604251c74f8570f1c645a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4715cc737b411f1f5e8604251c74f8570f1c645a/comments","author":null,"committer":null,"parents":[{"sha":"43c55d05391c97160cb6e963742b19c62ba1a3b3","url":"https://api.github.com/repos/apache/openjpa/commits/43c55d05391c97160cb6e963742b19c62ba1a3b3","html_url":"https://github.com/apache/openjpa/commit/43c55d05391c97160cb6e963742b19c62ba1a3b3"}],"stats":{"total":228,"additions":179,"deletions":49},"files":[{"sha":"b19442451d20ea7479d08ea99a1374d628b05ed2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/4715cc737b411f1f5e8604251c74f8570f1c645a/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/4715cc737b411f1f5e8604251c74f8570f1c645a/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java?ref=4715cc737b411f1f5e8604251c74f8570f1c645a","patch":"@@ -45,6 +45,7 @@\n import org.apache.openjpa.kernel.exps.QueryExpressions;\n import org.apache.openjpa.lib.rop.ListResultObjectProvider;\n import org.apache.openjpa.lib.rop.ResultObjectProvider;\n+import org.apache.openjpa.lib.util.OrderedMap;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.MetaDataRepository;\n@@ -467,7 +468,7 @@ public boolean hasGrouping(StoreQuery q) {\n             return _ex.hasGrouping(unwrap(q));\n         }\n \n-        public LinkedMap getParameterTypes(StoreQuery q) {\n+        public OrderedMap<Object, Class<?>> getParameterTypes(StoreQuery q) {\n             return _ex.getParameterTypes(unwrap(q));\n         }\n         "},{"sha":"61ccd70ededb5c7a7c73954552ff858271d3f547","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/4715cc737b411f1f5e8604251c74f8570f1c645a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/4715cc737b411f1f5e8604251c74f8570f1c645a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java?ref=4715cc737b411f1f5e8604251c74f8570f1c645a","patch":"@@ -24,6 +24,7 @@\n import org.apache.openjpa.kernel.exps.AggregateListener;\n import org.apache.openjpa.kernel.exps.FilterListener;\n import org.apache.openjpa.kernel.exps.QueryExpressions;\n+import org.apache.openjpa.lib.util.OrderedMap;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.UnsupportedException;\n@@ -185,7 +186,7 @@ public boolean hasGrouping(StoreQuery q) {\n             return false;\n         }\n \n-        public LinkedMap getParameterTypes(StoreQuery q) {\n+        public OrderedMap<Object,Class<?>> getParameterTypes(StoreQuery q) {\n             return EMPTY_PARAMS;\n         }\n "},{"sha":"a4cdc9c35cb1c499d04e5948fd46bfdb8a2c88c4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingQuery.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/4715cc737b411f1f5e8604251c74f8570f1c645a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingQuery.java","raw_url":"https://github.com/apache/openjpa/raw/4715cc737b411f1f5e8604251c74f8570f1c645a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingQuery.java?ref=4715cc737b411f1f5e8604251c74f8570f1c645a","patch":"@@ -21,9 +21,9 @@\n import java.util.Collection;\n import java.util.Map;\n \n-import org.apache.commons.collections.map.LinkedMap;\n import org.apache.openjpa.kernel.exps.AggregateListener;\n import org.apache.openjpa.kernel.exps.FilterListener;\n+import org.apache.openjpa.lib.util.OrderedMap;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.util.RuntimeExceptionTranslator;\n \n@@ -382,7 +382,7 @@ public String getParameterDeclaration() {\n         }\n     }\n \n-    public LinkedMap getParameterTypes() {\n+    public OrderedMap<Object,Class<?>> getParameterTypes() {\n         try {\n             return _query.getParameterTypes();\n         } catch (RuntimeException re) {"},{"sha":"7ddbbb5d4842f7b7eb3675535be11e51bf5dcc63","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/4715cc737b411f1f5e8604251c74f8570f1c645a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/4715cc737b411f1f5e8604251c74f8570f1c645a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java?ref=4715cc737b411f1f5e8604251c74f8570f1c645a","patch":"@@ -47,6 +47,7 @@\n import org.apache.openjpa.lib.rop.RangeResultObjectProvider;\n import org.apache.openjpa.lib.rop.ResultObjectProvider;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.OrderedMap;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n@@ -305,7 +306,7 @@ protected void assertNotContainer(Value val, StoreQuery q) {\n             if (val.isVariable())\n                 return;\n \n-            Class type;\n+            Class<?> type;\n             if (val instanceof Path) {\n                 FieldMetaData fmd = ((Path) val).last();\n                 type = (fmd == null) ? val.getType() : fmd.getDeclaredType();\n@@ -350,7 +351,7 @@ public void getRange(StoreQuery q, Object[] params, Range range) {\n                 q.getContext().getQueryString()));\n         }\n \n-        public final Class getResultClass(StoreQuery q) {\n+        public final Class<?> getResultClass(StoreQuery q) {\n             return assertQueryExpression().resultClass;\n         }\n         \n@@ -370,7 +371,7 @@ public final String getAlias(StoreQuery q) {\n             return assertQueryExpression().projectionAliases;\n         }\n         \n-        public Class[] getProjectionTypes(StoreQuery q) {\n+        public Class<?>[] getProjectionTypes(StoreQuery q) {\n             return null;\n         }\n \n@@ -386,18 +387,18 @@ public final boolean hasGrouping(StoreQuery q) {\n             return assertQueryExpression().grouping.length > 0;\n         }\n \n-        public final LinkedMap getParameterTypes(StoreQuery q) {\n+        public final OrderedMap<Object,Class<?>> getParameterTypes(StoreQuery q) {\n             return assertQueryExpression().parameterTypes;\n         }\n \n         /**\n          * Creates a Object[] from the values of the given user parameters.\n          */\n-        public Object[] toParameterArray(StoreQuery q, Map userParams) {\n+        public Object[] toParameterArray(StoreQuery q, Map<?,?> userParams) {\n             if (userParams == null || userParams.isEmpty())\n                 return StoreQuery.EMPTY_OBJECTS;\n \n-            LinkedMap paramTypes = getParameterTypes(q);\n+            OrderedMap<?,Class<?>> paramTypes = getParameterTypes(q);\n             Object[] arr = new Object[userParams.size()];\n             int base = positionalParameterBase(userParams.keySet());\n             for (Object key : paramTypes.keySet()) {\n@@ -463,7 +464,7 @@ public final Map getUpdates(StoreQuery q) {\n             if (exps.length == 1)\n                 return exps[0].accessPath;\n \n-            List metas = null;\n+            List<ClassMetaData> metas = null;\n             for (int i = 0; i < exps.length; i++)\n                 metas = Filters.addAccessPathMetaDatas(metas,\n                     exps[i].accessPath);"},{"sha":"980fd9fe95702bc29eb2f2ecd8f3d8379f8f0c24","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/4715cc737b411f1f5e8604251c74f8570f1c645a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/4715cc737b411f1f5e8604251c74f8570f1c645a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java?ref=4715cc737b411f1f5e8604251c74f8570f1c645a","patch":"@@ -35,6 +35,7 @@\n import org.apache.openjpa.lib.rop.RangeResultObjectProvider;\n import org.apache.openjpa.lib.rop.ResultObjectProvider;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.OrderedMap;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.util.Exceptions;\n import org.apache.openjpa.util.ImplHelper;\n@@ -65,7 +66,7 @@\n     private static final Localizer _loc = Localizer.forPackage\n         (MethodStoreQuery.class);\n \n-    private LinkedMap _params = null;\n+    private OrderedMap<Object, Class<?>> _params = null;\n \n     public void invalidateCompilation() {\n         if (_params != null)\n@@ -95,7 +96,7 @@ public boolean requiresCandidateType() {\n     /**\n      * Parse the parameter declarations.\n      */\n-    private LinkedMap bindParameterTypes() {\n+    private OrderedMap<Object, Class<?>> bindParameterTypes() {\n         ctx.lock();\n         try {\n             if (_params != null)\n@@ -106,7 +107,7 @@ private LinkedMap bindParameterTypes() {\n \n             List decs = Filters.parseDeclaration(params, ',', \"parameters\");\n             if (_params == null)\n-                _params = new LinkedMap((int) (decs.size() / 2 * 1.33 + 1));\n+                _params = new OrderedMap<Object, Class<?>>();\n             String name;\n             Class cls;\n             for (int i = 0; i < decs.size(); i += 2) {\n@@ -259,15 +260,15 @@ public void validate(StoreQuery q) {\n             _meth = meth;\n         }\n \n-        public LinkedMap getParameterTypes(StoreQuery q) {\n+        public OrderedMap<Object, Class<?>> getParameterTypes(StoreQuery q) {\n             return ((MethodStoreQuery) q).bindParameterTypes();\n \t\t}\n         \n         public Object[] toParameterArray(StoreQuery q, Map userParams) {\n             if (userParams == null || userParams.isEmpty())\n                 return StoreQuery.EMPTY_OBJECTS;\n \n-            LinkedMap paramTypes = getParameterTypes(q);\n+            OrderedMap<Object, Class<?>> paramTypes = getParameterTypes(q);\n             Object[] arr = new Object[userParams.size()];\n             int base = positionalParameterBase(userParams.keySet());\n             for (Object key : paramTypes.keySet()) {"},{"sha":"3ed615d995e9e3c7ad1af3de8f8ef09b71e0b230","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Query.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/4715cc737b411f1f5e8604251c74f8570f1c645a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Query.java","raw_url":"https://github.com/apache/openjpa/raw/4715cc737b411f1f5e8604251c74f8570f1c645a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Query.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Query.java?ref=4715cc737b411f1f5e8604251c74f8570f1c645a","patch":"@@ -84,7 +84,7 @@\n     /**\n      * Set a collection of candidates.\n      */\n-    public void setCandidateCollection(Collection coll);\n+    public void setCandidateCollection(Collection<?> coll);\n \n     /**\n      * Compile the query.\n@@ -99,7 +99,7 @@\n     /**\n      * Execute with parameter map.\n      */\n-    public Object execute(Map params);\n+    public Object execute(Map<?,?> params);\n \n     /**\n      * Execute with parameter array.\n@@ -116,7 +116,7 @@\n     /**\n      * Deletes all of the instances that are satisfied by the query.\n      *\n-     * @param parameters the poitional parameters for the query\n+     * @param parameters the positional parameters for the query\n      * @return the number of instances that were deleted\n      */\n     public long deleteAll(Object[] parameters);\n@@ -127,7 +127,7 @@\n      * @param parameterMap the named parameter map\n      * @return the number of instances that were deleted\n      */\n-    public long deleteAll(Map parameterMap);\n+    public long deleteAll(Map<?,?> parameterMap);\n \n     /**\n      * Performs an update of the instances that are satisfied by the query.\n@@ -150,7 +150,7 @@\n      * @param parameterMap the named parameter map\n      * @return the number of instances that were update\n      */\n-    public long updateAll(Map parameterMap);\n+    public long updateAll(Map<?,?> parameterMap);\n \n     /**\n      * Close all open query results.\n@@ -172,7 +172,7 @@\n      * @param params the named parameter map for the query invocation\n      * @since 0.3.2\n      */\n-    public String[] getDataStoreActions(Map params);\n+    public String[] getDataStoreActions(Map<?,?> params);\n \n     /**\n      * Assert that the query's broker is still open."},{"sha":"9fc1f73734c1331ad1582304eaf41f4522738c13","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java","status":"modified","additions":15,"deletions":14,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/4715cc737b411f1f5e8604251c74f8570f1c645a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java","raw_url":"https://github.com/apache/openjpa/raw/4715cc737b411f1f5e8604251c74f8570f1c645a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java?ref=4715cc737b411f1f5e8604251c74f8570f1c645a","patch":"@@ -21,10 +21,11 @@\n import java.util.Collection;\n import java.util.Map;\n \n-import org.apache.commons.collections.map.LinkedMap;\n import org.apache.openjpa.kernel.exps.AggregateListener;\n import org.apache.openjpa.kernel.exps.Constant;\n import org.apache.openjpa.kernel.exps.FilterListener;\n+import org.apache.openjpa.kernel.exps.Value;\n+import org.apache.openjpa.lib.util.OrderedMap;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n \n@@ -75,13 +76,13 @@\n      * Return the candidate collection, or <code>null</code> if an\n      * extent was specified instead of a collection.\n      */\n-    public Collection getCandidateCollection();\n+    public Collection<?> getCandidateCollection();\n \n     /**\n      * Return the class of the objects that this query will return,\n      * or <code>null</code> if this information is not available / not relevant.\n      */\n-    public Class getCandidateType();\n+    public Class<?> getCandidateType();\n \n     /**\n      * Whether query results will include subclasses of the candidate class.\n@@ -91,7 +92,7 @@\n     /**\n      * Set the candidate type.\n      */\n-    public void setCandidateType(Class cls, boolean subs);\n+    public void setCandidateType(Class<?> cls, boolean subs);\n \n     /**\n      * Whether the query has been marked read-only.\n@@ -120,7 +121,7 @@\n     /**\n      * Scope of a mapping from the result data to its object representation.\n      */\n-    public Class getResultMappingScope();\n+    public Class<?> getResultMappingScope();\n \n     /**\n      * Name of a mapping from the result data to its object representation.\n@@ -131,20 +132,20 @@\n      * Name and scope of a mapping from the result data to its object\n      * representation.\n      */\n-    public void setResultMapping(Class scope, String name);\n+    public void setResultMapping(Class<?> scope, String name);\n \n     /**\n      * Returns the result class that has been set through\n      * {@link #setResultType}, or null if none.\n      */\n-    public Class getResultType();\n+    public Class<?> getResultType();\n \n     /**\n      * Specify the type of object in which the result of evaluating this query.\n      *\n      * @since 0.3.0\n      */\n-    public void setResultType(Class cls);\n+    public void setResultType(Class<?> cls);\n \n     /**\n      * Return the 0-based start index for the returned results.\n@@ -182,13 +183,13 @@\n      * map will iterate in the order that the parameters were declared or,\n      * if they're implicit, used.\n      */\n-    public LinkedMap getParameterTypes();\n+    public OrderedMap<Object,Class<?>> getParameterTypes();\n \n     /**\n      * If this query is a bulk update, return a map of the\n      * {@link FieldMetaData}s to {@link Constant}s.\n      */\n-    public Map getUpdates();\n+    public Map<FieldMetaData, Value> getUpdates();\n \n     /**\n      * Whether to ignore changes in the current transaction.\n@@ -214,7 +215,7 @@\n     /**\n      * If this query is a projection, return the projection types.\n      */\n-    public Class[] getProjectionTypes();\n+    public Class<?>[] getProjectionTypes();\n \n     /**\n      * Return true if the query is an aggregate.\n@@ -244,12 +245,12 @@\n     /**\n      * The set of filter listeners.\n      */\n-    public Collection getFilterListeners();\n+    public Collection<FilterListener> getFilterListeners();\n \n     /**\n      * The set of aggregate listeners.\n      */\n-    public Collection getAggregateListeners();\n+    public Collection<AggregateListener> getAggregateListeners();\n \n     /**\n      * Helper method to delete the objects found by executing a query on\n@@ -270,7 +271,7 @@ public Number updateInMemory(StoreQuery q, StoreQuery.Executor ex,\n      * into account the query's candidate package, automatic imports, and\n      * the given imports (if any). Returns null if the type cannot be found.\n      */\n-    public Class classForName(String name, String[] imports);\n+    public Class<?> classForName(String name, String[] imports);\n \n     /**\n      * Synchronize on the query's internal lock."},{"sha":"5c0c6260c5373bb57d619122b46dade8c28ef831","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/4715cc737b411f1f5e8604251c74f8570f1c645a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","raw_url":"https://github.com/apache/openjpa/raw/4715cc737b411f1f5e8604251c74f8570f1c645a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java?ref=4715cc737b411f1f5e8604251c74f8570f1c645a","patch":"@@ -29,6 +29,7 @@\n import org.apache.openjpa.kernel.ResultShape;\n import org.apache.openjpa.kernel.StoreQuery;\n import org.apache.openjpa.kernel.exps.Context;\n+import org.apache.openjpa.lib.util.OrderedMap;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n \n@@ -39,6 +40,7 @@\n  * @since 0.3.2\n  * @nojavadoc\n  */\n+@SuppressWarnings(\"serial\")\n public class QueryExpressions\n     implements Serializable {\n \n@@ -50,13 +52,13 @@\n     /**\n      * Map of {@link FieldMetaData},{@link Value} for update statements.\n      */\n-    public Map<Path, Value> updates = Collections.EMPTY_MAP;\n+    public Map<Path, Value> updates = Collections.emptyMap();\n     public int distinct = DISTINCT_AUTO;\n     public String alias = null;\n     public Value[] projections = EMPTY_VALUES;\n     public String[] projectionClauses = StoreQuery.EMPTY_STRINGS;\n     public String[] projectionAliases = StoreQuery.EMPTY_STRINGS;\n-    public Class resultClass = null;\n+    public Class<?> resultClass = null;\n     public Expression filter = null;\n     public Value[] grouping = EMPTY_VALUES;\n     public String[] groupingClauses = StoreQuery.EMPTY_STRINGS;\n@@ -65,7 +67,7 @@\n     public boolean[] ascending = StoreQuery.EMPTY_BOOLEANS;\n     public String[] orderingClauses = StoreQuery.EMPTY_STRINGS;\n     public String[] orderingAliases = StoreQuery.EMPTY_STRINGS;\n-    public LinkedMap parameterTypes = StoreQuery.EMPTY_PARAMS;\n+    public OrderedMap<Object,Class<?>> parameterTypes = StoreQuery.EMPTY_PARAMS;\n     public int operation = QueryOperations.OP_SELECT;\n     public ClassMetaData[] accessPath = StoreQuery.EMPTY_METAS;\n     public String[] fetchPaths = StoreQuery.EMPTY_STRINGS;"},{"sha":"8a84e4ae7c55efcfa341901e7c6bd0ae1e4e8998","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/4715cc737b411f1f5e8604251c74f8570f1c645a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/4715cc737b411f1f5e8604251c74f8570f1c645a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=4715cc737b411f1f5e8604251c74f8570f1c645a","patch":"@@ -58,6 +58,7 @@\n import org.apache.openjpa.kernel.exps.Value;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.OrderedMap;\n import org.apache.openjpa.lib.util.Localizer.Message;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n@@ -89,7 +90,7 @@\n         (JPQLExpressionBuilder.class);\n \n     private final Stack<Context> contexts = new Stack<Context>();\n-    private LinkedMap parameterTypes;\n+    private OrderedMap<Object, Class<?>> parameterTypes;\n     private int aliasCount = 0;\n     private boolean inAssignSubselectProjection = false;\n \n@@ -1496,7 +1497,7 @@ public void setImplicitTypes(Value val1, Value val2,\n     \n     \n     public static void setImplicitTypes(Value val1, Value val2, \n-        Class<?> expected, Resolver resolver, LinkedMap parameterTypes,\n+        Class<?> expected, Resolver resolver, OrderedMap<Object,Class<?>> parameterTypes,\n         String currentQuery) {\n         AbstractExpressionBuilder.setImplicitTypes(val1, val2, expected, \n             resolver);\n@@ -1592,7 +1593,7 @@ private Value getSubquery(JPQLNode node) {\n     private Parameter getParameter(String id, boolean positional, \n         boolean isCollectionValued) {\n         if (parameterTypes == null)\n-            parameterTypes = new LinkedMap(6);\n+            parameterTypes = new OrderedMap<Object, Class<?>>();\n         Object paramKey = positional ? Integer.parseInt(id) : id;\n         if (!parameterTypes.containsKey(paramKey))\n             parameterTypes.put(paramKey, TYPE_OBJECT);\n@@ -1613,8 +1614,8 @@ private Parameter getParameter(String id, boolean positional,\n                 throw parseException(EX_USER, \"bad-positional-parameter\",\n                     new Object[]{ id }, null);\n         } else {\n-            // otherwise the index is just the current size of the params\n-            index = parameterTypes.indexOf(id);\n+            // otherwise the index is just the current size of the parameters\n+            index = parameterTypes.size()-1;\n         }\n         Parameter param = isCollectionValued \n             ? factory.newCollectionValuedParameter(paramKey, TYPE_OBJECT) "},{"sha":"97775988fe00c3d2c1c668a1b69f134f77c17781","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/OrderedMap.java","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/4715cc737b411f1f5e8604251c74f8570f1c645a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/OrderedMap.java","raw_url":"https://github.com/apache/openjpa/raw/4715cc737b411f1f5e8604251c74f8570f1c645a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/OrderedMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/OrderedMap.java?ref=4715cc737b411f1f5e8604251c74f8570f1c645a","patch":"@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+import java.io.Serializable;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * A Map with predictable iteration order.\n+ * \n+ * @author Pinaki Poddar\n+ * @since 2.0.0\n+ */\n+@SuppressWarnings(\"serial\")\n+public class OrderedMap<K, V> implements Map<K, V>, Serializable {\n+    private final LinkedHashMap<K, V> _del;\n+    \n+    /**\n+     * Construct with predictable insertion order.\n+     */\n+    public OrderedMap() {\n+        _del = new LinkedHashMap<K, V>(6,0.1f,false);\n+    }\n+    \n+    /**\n+     * Construct with predictable iteration order.\n+     * @param lru if true the iterator order is based on last access, false for order of insertion.\n+     */\n+    public OrderedMap(boolean lru) {\n+        _del = new LinkedHashMap<K, V>(6,0.1f,lru);\n+    }\n+    \n+    public int indexOf(Object key) {\n+        int i = 0;\n+        for (K k : _del.keySet()) {\n+            if (key == k)\n+                return i;\n+            i++;\n+        }\n+        return -1;\n+    }\n+    \n+    public void clear() {\n+    }\n+\n+    \n+    public boolean containsKey(Object key) {\n+        return _del.containsKey(key);\n+    }\n+\n+    \n+    public boolean containsValue(Object value) {\n+        return _del.containsValue(value);\n+    }\n+\n+    \n+    public Set<java.util.Map.Entry<K, V>> entrySet() {\n+        return _del.entrySet();\n+    }\n+\n+    \n+    public V get(Object key) {\n+        return _del.get(key);\n+    }\n+\n+    \n+    public boolean isEmpty() {\n+        return _del.isEmpty();\n+    }\n+\n+    \n+    public Set<K> keySet() {\n+        return _del.keySet();\n+    }\n+\n+    \n+    public V put(K key, V value) {\n+        return _del.put(key, value);\n+    }\n+\n+    \n+    public void putAll(Map<? extends K, ? extends V> m) {\n+        _del.putAll(m);\n+    }\n+\n+    \n+    public V remove(Object key) {\n+        return _del.remove(key);\n+    }\n+\n+    \n+    public int size() {\n+        return _del.size();\n+    }\n+\n+    \n+    public Collection<V> values() {\n+        return _del.values();\n+    }\n+\n+}"},{"sha":"f2cd8e9f1ab15707b4e2d59035f3c60e31ea4ac6","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/4715cc737b411f1f5e8604251c74f8570f1c645a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4715cc737b411f1f5e8604251c74f8570f1c645a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=4715cc737b411f1f5e8604251c74f8570f1c645a","patch":"@@ -62,6 +62,7 @@\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.rop.ResultList;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.OrderedMap;\n import org.apache.openjpa.persistence.criteria.CriteriaBuilderImpl;\n import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.RuntimeExceptionTranslator;\n@@ -968,10 +969,10 @@ public Object getParameterValue(int pos) {\n     public Map<Object, Parameter<?>> getDeclaredParameters() {\n         if (_declaredParams == null) {\n             _declaredParams = new HashMap<Object, Parameter<?>>();\n-            LinkedMap paramTypes = _query.getParameterTypes();\n+            OrderedMap<Object,Class<?>> paramTypes = _query.getParameterTypes();\n             for (Object key : paramTypes.keySet()) {\n                 Parameter<?> param = null;\n-                Class<?> expectedValueType = (Class<?>)paramTypes.get(key);\n+                Class<?> expectedValueType = paramTypes.get(key);\n                 if (key instanceof Integer) {\n                     param = new ParameterImpl((Integer)key, expectedValueType);\n                 } else if (key instanceof String) {"},{"sha":"a31d20e5f372f4d1d8042085bdded7b1d5e9523a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/4715cc737b411f1f5e8604251c74f8570f1c645a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4715cc737b411f1f5e8604251c74f8570f1c645a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java?ref=4715cc737b411f1f5e8604251c74f8570f1c645a","patch":"@@ -50,6 +50,7 @@\n import org.apache.openjpa.kernel.exps.QueryExpressions;\n import org.apache.openjpa.kernel.exps.Value;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.OrderedMap;\n import org.apache.openjpa.persistence.meta.MetamodelImpl;\n import org.apache.openjpa.persistence.meta.Types;\n \n@@ -73,7 +74,7 @@\n     private Set<Root<?>>        _roots;\n     private PredicateImpl       _where;\n     private List<Order>         _orders;\n-    private LinkedMap           _params; /*<ParameterExpression<?>, Class<?>>*/ \n+    private OrderedMap<Object, Class<?>> _params; /*<ParameterExpression<?>, Class<?>>*/ \n     private Selection<? extends T> _selection;\n     private List<Selection<?>>  _selections;\n     private List<Expression<?>> _groups;\n@@ -216,7 +217,7 @@ public MetamodelImpl getMetamodel() {\n      */\n     void registerParameter(ParameterExpressionImpl<?> p) {\n         if (_params == null)\n-            _params = new LinkedMap/*<ParameterExpression<?>, Class<?>*/();\n+            _params = new OrderedMap/*<ParameterExpression<?>, Class<?>*/();\n         if (!_params.containsKey(p)) {\n             p.setIndex(_params.size());\n             _params.put(p, p.getJavaType());\n@@ -401,7 +402,7 @@ public boolean isDistinct() {\n      * Return map where key is the parameter expression itself and value is the expected type.\n      * Empty map if no parameter has been declared. \n      */\n-    public LinkedMap getParameterTypes() {\n+    public OrderedMap<Object, Class<?>> getParameterTypes() {\n         collectParameters(new CriteriaExpressionVisitor.ParameterVisitor(this));\n         return _params == null ? StoreQuery.EMPTY_PARAMS : _params;\n     }"}]}

