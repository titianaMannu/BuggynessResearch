{"sha":"474c1b60c9363028ab9e23edbdd546115732de1b","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ3NGMxYjYwYzkzNjMwMjhhYjllMjNlZGJkZDU0NjExNTczMmRlMWI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-09-23T02:20:07Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-09-23T02:20:07Z"},"message":"OPENJPA-1790: Added ProxyConcurrentMaps class (minor formatting changes from Jody's patch) \nSubmitted By: Jody Grassel\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1000292 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"083ba329371a423423daa50d6e15698b6a21b756","url":"https://api.github.com/repos/apache/openjpa/git/trees/083ba329371a423423daa50d6e15698b6a21b756"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/474c1b60c9363028ab9e23edbdd546115732de1b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/474c1b60c9363028ab9e23edbdd546115732de1b","html_url":"https://github.com/apache/openjpa/commit/474c1b60c9363028ab9e23edbdd546115732de1b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/474c1b60c9363028ab9e23edbdd546115732de1b/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"cccd4c799d683d9beb78e9ed87c4974ca2b8306c","url":"https://api.github.com/repos/apache/openjpa/commits/cccd4c799d683d9beb78e9ed87c4974ca2b8306c","html_url":"https://github.com/apache/openjpa/commit/cccd4c799d683d9beb78e9ed87c4974ca2b8306c"}],"stats":{"total":236,"additions":235,"deletions":1},"files":[{"sha":"76f500f652429e5fea88c264644d6180095f10ca","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyConcurrentMaps.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/474c1b60c9363028ab9e23edbdd546115732de1b/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyConcurrentMaps.java","raw_url":"https://github.com/apache/openjpa/raw/474c1b60c9363028ab9e23edbdd546115732de1b/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyConcurrentMaps.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyConcurrentMaps.java?ref=474c1b60c9363028ab9e23edbdd546115732de1b","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.util;\n+\n+import java.util.Map;\n+\n+/**\n+ * Utility methods used by concurrent map proxies.\n+ *\n+ */\n+public class ProxyConcurrentMaps extends ProxyMaps {\n+\t/**\n+     * Call before invoking {@link Map#remove} on super.\n+     */\n+    public static boolean beforeRemove(ProxyMap map, Object key, Object value) {\n+        dirty(map, false);\n+        return map.containsKey(key);\n+    }\n+    \n+    /**\n+     * Call after invoking {@link Map#remove} on super.\n+     *\n+     * @param ret the return value from the super's method\n+     * @param before the return value from {@link #beforeRemove}\n+     * @return the value to return from {@link Map#remove}\n+     */\n+    public static boolean afterRemove(ProxyMap map, Object key, Object value, boolean ret, \n+        boolean before) {\n+        if (before) {\n+            if (map.getChangeTracker() != null) {\n+                ((MapChangeTracker) map.getChangeTracker()).removed(key, ret);\n+            }\n+            removed(map, key, true);\n+            removed(map, ret, false);\n+        } \n+        return ret;\n+    }\n+}"},{"sha":"af441740c4bda5d4a3abd29a7aa5703d1392805c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/474c1b60c9363028ab9e23edbdd546115732de1b/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/474c1b60c9363028ab9e23edbdd546115732de1b/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java?ref=474c1b60c9363028ab9e23edbdd546115732de1b","patch":"@@ -59,6 +59,8 @@\n import org.apache.openjpa.lib.util.concurrent.NullSafeConcurrentHashMap;\n \n import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n import serp.bytecode.BCClass;\n import serp.bytecode.BCField;\n import serp.bytecode.BCMethod;\n@@ -560,7 +562,9 @@ protected BCClass generateProxyMapBytecode(Class type, boolean runtime) {\n         delegateConstructors(bc, type);\n         addProxyMethods(bc, false);\n         addProxyMapMethods(bc, type);\n-        proxyRecognizedMethods(bc, type, ProxyMaps.class, ProxyMap.class);\n+        Class<? extends ProxyMaps> mapProxyClassType =\n+            ConcurrentMap.class.isAssignableFrom(type) ? ProxyConcurrentMaps.class : ProxyMaps.class;\n+        proxyRecognizedMethods(bc, type, mapProxyClassType, ProxyMap.class);\n         proxySetters(bc, type);\n         addWriteReplaceMethod(bc, runtime);\n         return bc;"},{"sha":"879e4d02efee079746a09dd964ba1c9ad45de148","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ConcurrentEntityLeft.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/474c1b60c9363028ab9e23edbdd546115732de1b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ConcurrentEntityLeft.java","raw_url":"https://github.com/apache/openjpa/raw/474c1b60c9363028ab9e23edbdd546115732de1b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ConcurrentEntityLeft.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ConcurrentEntityLeft.java?ref=474c1b60c9363028ab9e23edbdd546115732de1b","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+\n+@Entity\n+public class ConcurrentEntityLeft {\n+\t@Id\n+\tprivate int id;\n+\t\n+\tprivate String strData;\n+\t\n+\t@ManyToOne\n+\t@JoinColumn(name=\"right_id\", referencedColumnName=\"id\")\n+\tprivate ConcurrentEntityRight rightEntity;\n+\t\n+\tpublic ConcurrentEntityLeft() {\n+\t\t\n+\t}\n+\n+\tpublic int getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(int id) {\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic String getStrData() {\n+\t\treturn strData;\n+\t}\n+\n+\tpublic void setStrData(String strData) {\n+\t\tthis.strData = strData;\n+\t}\n+\n+\tpublic ConcurrentEntityRight getRightEntity() {\n+\t\treturn rightEntity;\n+\t}\n+\n+\tpublic void setRightEntity(ConcurrentEntityRight rightEntity) {\n+\t\tthis.rightEntity = rightEntity;\n+\t}\n+}"},{"sha":"09bceae814576167781223f1318ad9a931636d2e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ConcurrentEntityRight.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/474c1b60c9363028ab9e23edbdd546115732de1b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ConcurrentEntityRight.java","raw_url":"https://github.com/apache/openjpa/raw/474c1b60c9363028ab9e23edbdd546115732de1b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ConcurrentEntityRight.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ConcurrentEntityRight.java?ref=474c1b60c9363028ab9e23edbdd546115732de1b","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.MapKey;\n+import javax.persistence.OneToMany;\n+\n+@Entity\n+public class ConcurrentEntityRight {\n+\t@Id\n+\tprivate int id;\n+\t\n+\tprivate String strData;\n+\t\n+\t@OneToMany(mappedBy=\"rightEntity\", targetEntity=ConcurrentEntityLeft.class, \n+\t\t\tcascade={javax.persistence.CascadeType.ALL})\n+\t@MapKey(name=\"strData\")\n+\tprivate Map<String, ConcurrentEntityLeft> leftEntityMap;\n+\t\n+\tpublic ConcurrentEntityRight() {\n+\t\tleftEntityMap = new ConcurrentHashMap<String, ConcurrentEntityLeft>();\t\n+\t}\n+\n+\tpublic int getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(int id) {\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic String getStrData() {\n+\t\treturn strData;\n+\t}\n+\n+\tpublic void setStrData(String strData) {\n+\t\tthis.strData = strData;\n+\t}\n+\n+\tpublic Map<String, ConcurrentEntityLeft> getLeftEntityMap() {\n+\t\treturn leftEntityMap;\n+\t}\n+}"},{"sha":"1435d27eafecfc09cefdf796a90def5458782791","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestConcurrentMap.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/474c1b60c9363028ab9e23edbdd546115732de1b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestConcurrentMap.java","raw_url":"https://github.com/apache/openjpa/raw/474c1b60c9363028ab9e23edbdd546115732de1b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestConcurrentMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestConcurrentMap.java?ref=474c1b60c9363028ab9e23edbdd546115732de1b","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n+\n+public class TestConcurrentMap extends SingleEMTestCase {\n+\tpublic void setUp() {\n+        setUp(ConcurrentEntityLeft.class, ConcurrentEntityRight.class,\n+              CLEAR_TABLES);\n+    }\n+\n+    public void testConcurrentMap001() {\n+        em.getTransaction().begin();\n+        \n+        ConcurrentEntityLeft left = new ConcurrentEntityLeft();\n+        left.setId(1);\n+        left.setStrData(\"Lefty\");\n+        \n+        ConcurrentEntityRight right = new ConcurrentEntityRight();\n+        right.setId(1);\n+        right.setStrData(\"Poncho\");\n+        \n+        em.persist(left);\n+        em.persist(right);\n+        \n+        left.setRightEntity(right);\n+        right.getLeftEntityMap().put(left.getStrData(), left);\n+        \n+        em.getTransaction().commit();\n+    }\n+}"}]}

