{"sha":"481bb3d6eb14697e425a673b643e6037424c173e","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ4MWJiM2Q2ZWIxNDY5N2U0MjVhNjczYjY0M2U2MDM3NDI0YzE3M2U=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-17T20:35:20Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-17T20:35:20Z"},"message":"OPENJPA-1390: From.join(String attr) checks any attribute not only singular attributes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@881495 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"855398a19991b0a1337a6a1b19169280ff760737","url":"https://api.github.com/repos/apache/openjpa/git/trees/855398a19991b0a1337a6a1b19169280ff760737"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/481bb3d6eb14697e425a673b643e6037424c173e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/481bb3d6eb14697e425a673b643e6037424c173e","html_url":"https://github.com/apache/openjpa/commit/481bb3d6eb14697e425a673b643e6037424c173e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/481bb3d6eb14697e425a673b643e6037424c173e/comments","author":null,"committer":null,"parents":[{"sha":"c44c17bd77cc9ab79726783f5a5da1419f1b844b","url":"https://api.github.com/repos/apache/openjpa/commits/c44c17bd77cc9ab79726783f5a5da1419f1b844b","html_url":"https://github.com/apache/openjpa/commit/c44c17bd77cc9ab79726783f5a5da1419f1b844b"}],"stats":{"total":41,"additions":28,"deletions":13},"files":[{"sha":"957f96becc2f1732cdd90c3035932fc833a5d189","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FromImpl.java","status":"modified","additions":28,"deletions":13,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/481bb3d6eb14697e425a673b643e6037424c173e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FromImpl.java","raw_url":"https://github.com/apache/openjpa/raw/481bb3d6eb14697e425a673b643e6037424c173e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FromImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FromImpl.java?ref=481bb3d6eb14697e425a673b643e6037424c173e","patch":"@@ -175,53 +175,68 @@ protected FromImpl(PathImpl<?,Z> parent, Members.Member<? super Z, ?> m, Class<X\n         return join(attr, JoinType.INNER);\n     }\n \n-    public <W,Y> Join<W,Y> join(String attr, JoinType jt) {\n-        assertJoinable();\n-        return (Join<W,Y>)join(((ManagedType<X>)type).getSingularAttribute(attr), jt);\n+    public <W,Y> Join<W,Y> join(String name, JoinType jt) {\n+        assertJoinable(type);\n+        ManagedType<X> mType = (ManagedType<X>)type;\n+        Attribute<?, ?> attr = mType.getAttribute(name);\n+        assertJoinable(attr.getDeclaringType());\n+        if (attr instanceof SingularAttribute) {\n+            return join((SingularAttribute)attr, jt);\n+        } else if (attr instanceof ListAttribute) {\n+            return join((ListAttribute)attr, jt);\n+        } else if (attr instanceof SetAttribute) {\n+            return join((SetAttribute)attr, jt);\n+        } else if (attr instanceof CollectionAttribute) {\n+            return join((CollectionAttribute)attr, jt);\n+        } else if (attr instanceof MapAttribute) {\n+            return join((MapAttribute)attr, jt);\n+        } else {\n+            throw new IllegalArgumentException(name);\n+        }\n     }\n \n \n     public <W,Y> CollectionJoin<W, Y> joinCollection(String attr) {\n-        assertJoinable();\n+        assertJoinable(type);\n         return (CollectionJoin<W,Y>)join(((ManagedType<X>)type).getCollection(attr), JoinType.INNER);\n     }\n \n     public <W,Y> CollectionJoin<W, Y> joinCollection(String attr, JoinType jt) {\n-        assertJoinable();\n+        assertJoinable(type);\n         return (CollectionJoin<W,Y>)join(((ManagedType<X>)type).getCollection(attr), jt);\n     }\n \n     public <W,Y> ListJoin<W, Y> joinList(String attr) {\n-        assertJoinable();\n+        assertJoinable(type);\n         return (ListJoin<W,Y>)join(((ManagedType<X>)type).getList(attr), JoinType.INNER);\n     }\n \n     public <W,Y> ListJoin<W,Y> joinList(String attr, JoinType jt) {\n-        assertJoinable();\n+        assertJoinable(type);\n         return (ListJoin<W,Y>)join(((ManagedType<X>)type).getList(attr), jt);\n     }\n \n     public <W,K,V> MapJoin<W,K,V> joinMap(String attr) {\n-        assertJoinable();\n+        assertJoinable(type);\n         return (MapJoin<W,K,V>)join(((ManagedType<X>)type).getMap(attr));\n     }\n \n     public <W,K,V> MapJoin<W,K,V>  joinMap(String attr, JoinType jt) {\n-        assertJoinable();\n+        assertJoinable(type);\n         return (MapJoin<W,K,V>)join(((ManagedType<X>)type).getMap(attr));\n     }\n \n     public <W,Y> SetJoin<W, Y>  joinSet(String attr) {\n-        assertJoinable();\n+        assertJoinable(type);\n         return (SetJoin<W, Y>)join(((ManagedType<X>)type).getSet(attr));\n     }\n \n     public <W,Y> SetJoin<W, Y>  joinSet(String attr, JoinType jt) {\n-        assertJoinable();\n+        assertJoinable(type);\n         return (SetJoin<W, Y>)join(((ManagedType<X>)type).getSet(attr), jt);\n     }\n     \n-    void assertJoinable() {\n+    void assertJoinable(Type<?> type) {\n         if (type.getPersistenceType() == PersistenceType.BASIC) {\n             throw new IllegalArgumentException(this + \" is a basic path and can not be navigated to \");\n         }\n@@ -258,7 +273,7 @@ private void addJoin(Join<X,?> join) {\n     }\n \n     public <X,Y> Fetch<X, Y> fetch(String name, JoinType jt) {\n-        assertJoinable();\n+        assertJoinable(type);\n         Attribute<? super X,?> attr = ((ManagedType<X>)type).getAttribute(name);\n         if (attr.isCollection()) {\n             return fetch((PluralAttribute)attr, jt);"}]}

