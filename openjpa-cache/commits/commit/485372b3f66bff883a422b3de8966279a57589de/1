{"sha":"485372b3f66bff883a422b3de8966279a57589de","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ4NTM3MmIzZjY2YmZmODgzYTQyMmIzZGU4OTY2Mjc5YTU3NTg5ZGU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-12-12T16:32:28Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-12-12T16:32:28Z"},"message":"Change Services.getImplementorClasses(Class) and Services.getImplementorClasses(Class,ClassLoader) to filter out implementations that are not assignable to the Class argument. This allows the Services call to be more fault-tolerant in environments with odd classloader configurations.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@603666 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cc71a4270bbcd5c99bbce2016488747c90ddc87a","url":"https://api.github.com/repos/apache/openjpa/git/trees/cc71a4270bbcd5c99bbce2016488747c90ddc87a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/485372b3f66bff883a422b3de8966279a57589de","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/485372b3f66bff883a422b3de8966279a57589de","html_url":"https://github.com/apache/openjpa/commit/485372b3f66bff883a422b3de8966279a57589de","comments_url":"https://api.github.com/repos/apache/openjpa/commits/485372b3f66bff883a422b3de8966279a57589de/comments","author":null,"committer":null,"parents":[{"sha":"45eb530812221b3e2b0a4d095a703ea4b95a6f2a","url":"https://api.github.com/repos/apache/openjpa/commits/45eb530812221b3e2b0a4d095a703ea4b95a6f2a","html_url":"https://github.com/apache/openjpa/commit/45eb530812221b3e2b0a4d095a703ea4b95a6f2a"}],"stats":{"total":18,"additions":17,"deletions":1},"files":[{"sha":"e50280fd5300cc6c969f325a337938f379a324f6","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java","status":"modified","additions":17,"deletions":1,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/485372b3f66bff883a422b3de8966279a57589de/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java","raw_url":"https://github.com/apache/openjpa/raw/485372b3f66bff883a422b3de8966279a57589de/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java?ref=485372b3f66bff883a422b3de8966279a57589de","patch":"@@ -25,7 +25,9 @@\n import java.net.URL;\n import java.security.AccessController;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Enumeration;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import java.util.StringTokenizer;\n@@ -145,7 +147,21 @@ private static void addResources(URL url, Set set) throws IOException {\n \n     public static Class[] getImplementorClasses(Class serviceClass,\n         ClassLoader loader) {\n-        return getImplementorClasses(serviceClass.getName(), loader);\n+        Set invalid = new HashSet();\n+        Class[] classes = getImplementorClasses(serviceClass.getName(), loader);\n+\n+        // filter out any classes that have any classloader issues wrt.\n+        // the specified service class.\n+        for (int i = 0; i < classes.length; i++)\n+            if (!serviceClass.isAssignableFrom(classes[i]))\n+                invalid.add(classes[i]);\n+        if (invalid.size() != 0) {\n+            List list = new ArrayList(Arrays.asList(classes));\n+            list.removeAll(invalid);\n+            return (Class[]) list.toArray(new Class[list.size()]);\n+        } else {\n+            return classes;\n+        }\n     }\n \n     /**"}]}

