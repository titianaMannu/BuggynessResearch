{"sha":"485cfd37ca2e810c0cdc6bc897fe73109bfd5e3c","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ4NWNmZDM3Y2EyZTgxMGMwY2RjNmJjODk3ZmU3MzEwOWJmZDVlM2M=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-02-07T02:01:54Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-02-07T02:01:54Z"},"message":"test cases for agreed-upon callback behavior\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@504411 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c69b19b19f7276119f5ff62691fdd72a60cc6725","url":"https://api.github.com/repos/apache/openjpa/git/trees/c69b19b19f7276119f5ff62691fdd72a60cc6725"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/485cfd37ca2e810c0cdc6bc897fe73109bfd5e3c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/485cfd37ca2e810c0cdc6bc897fe73109bfd5e3c","html_url":"https://github.com/apache/openjpa/commit/485cfd37ca2e810c0cdc6bc897fe73109bfd5e3c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/485cfd37ca2e810c0cdc6bc897fe73109bfd5e3c/comments","author":null,"committer":null,"parents":[{"sha":"c13e2baab7aa0c71ad6fafbc9c6527e1393a2894","url":"https://api.github.com/repos/apache/openjpa/commits/c13e2baab7aa0c71ad6fafbc9c6527e1393a2894","html_url":"https://github.com/apache/openjpa/commit/c13e2baab7aa0c71ad6fafbc9c6527e1393a2894"}],"stats":{"total":198,"additions":198,"deletions":0},"files":[{"sha":"68cd9cc284e6f8edcd3898b30ef7bf91d6fcf168","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ExceptionsFromCallbacksEntity.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/485cfd37ca2e810c0cdc6bc897fe73109bfd5e3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ExceptionsFromCallbacksEntity.java","raw_url":"https://github.com/apache/openjpa/raw/485cfd37ca2e810c0cdc6bc897fe73109bfd5e3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ExceptionsFromCallbacksEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ExceptionsFromCallbacksEntity.java?ref=485cfd37ca2e810c0cdc6bc897fe73109bfd5e3c","patch":"@@ -0,0 +1,57 @@\n+package org.apache.openjpa.persistence.callbacks;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.PostLoad;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n+import javax.persistence.Version;\n+\n+\n+@Entity\n+public class ExceptionsFromCallbacksEntity {\n+    @Id private long id;\n+    @Version private int version;\n+    private boolean throwOnPrePersist;\n+    private boolean throwOnPreUpdate;\n+    private boolean throwOnPostLoad;\n+    private String stringField;\n+    \n+    public void setThrowOnPrePersist(boolean b) {\n+        throwOnPrePersist = b;\n+    }\n+\n+    public void setThrowOnPostLoad(boolean b) {\n+        throwOnPostLoad = b;\n+    }\n+\n+    public void setThrowOnPreUpdate(boolean b) {\n+        throwOnPreUpdate = b;\n+    }\n+\n+    public void setStringField(String s) {\n+        stringField = s;\n+    }\n+\n+    @PrePersist\n+    public void prePersist() {\n+        if (throwOnPrePersist)\n+            throw new CallbackTestException();\n+    }\n+\n+    @PreUpdate\n+    public void preUpdate() {\n+        if (throwOnPreUpdate)\n+            throw new CallbackTestException();\n+    }\n+\n+    @PostLoad\n+    public void postLoad() {\n+        if (throwOnPostLoad)\n+            throw new CallbackTestException();\n+    }\n+    \n+    public class CallbackTestException\n+        extends RuntimeException {\n+    }\n+}"},{"sha":"e891695439fb2548adb36abbcd55d73aff9e3fb9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestExceptionsFromCallbacks.java","status":"added","additions":141,"deletions":0,"changes":141,"blob_url":"https://github.com/apache/openjpa/blob/485cfd37ca2e810c0cdc6bc897fe73109bfd5e3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestExceptionsFromCallbacks.java","raw_url":"https://github.com/apache/openjpa/raw/485cfd37ca2e810c0cdc6bc897fe73109bfd5e3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestExceptionsFromCallbacks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestExceptionsFromCallbacks.java?ref=485cfd37ca2e810c0cdc6bc897fe73109bfd5e3c","patch":"@@ -0,0 +1,141 @@\n+package org.apache.openjpa.persistence.callbacks;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Persistence;\n+import javax.persistence.RollbackException;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.callbacks.ExceptionsFromCallbacksEntity.CallbackTestException;\n+\n+import junit.framework.TestCase;\n+\n+\n+/**\n+ * Tests against JPA section 3.5's description of callback exception handling.\n+ */\n+public class TestExceptionsFromCallbacks\n+    extends TestCase {\n+\n+    private OpenJPAEntityManagerFactory emf;\n+\n+    public void setUp() {\n+        String types = ExceptionsFromCallbacksEntity.class.getName();\n+        Map props = new HashMap(System.getProperties());\n+        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" + types + \")\");\n+        emf = (OpenJPAEntityManagerFactory) Persistence.\n+            createEntityManagerFactory(\"test\", props);\n+        deleteAll();\n+    }\n+\n+    public void tearDown() {\n+        if (emf == null)\n+            return;\n+        try {\n+            deleteAll();\n+            emf.close();\n+        } catch (Exception e) {\n+        }\n+    }\n+    \n+    private void deleteAll() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.createQuery(\"delete from ExceptionsFromCallbacksEntity\").\n+            executeUpdate();\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testPrePersistException() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o = new ExceptionsFromCallbacksEntity();\n+        o.setThrowOnPrePersist(true);\n+        try {\n+            em.persist(o);\n+            fail(\"persist should have failed\");\n+        } catch (CallbackTestException cte) {\n+            // transaction should be still active, but marked for rollback\n+            assertTrue(em.getTransaction().isActive());\n+            assertTrue(em.getTransaction().getRollbackOnly());\n+        } finally {\n+            if (em.getTransaction().isActive())\n+                em.getTransaction().rollback();\n+            em.close();\n+        }\n+    }\n+\n+    public void testPreUpdateExceptionDuringFlush() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o = new ExceptionsFromCallbacksEntity();\n+        o.setThrowOnPreUpdate(true);\n+        em.persist(o);\n+        o.setStringField(\"foo\");\n+        try {\n+            em.flush();\n+            fail(\"flush should have failed\");\n+        } catch (CallbackTestException cte) {\n+            // transaction should be still active, but marked for rollback\n+            assertTrue(em.getTransaction().isActive());\n+            assertTrue(em.getTransaction().getRollbackOnly());\n+        } finally {\n+            if (em.getTransaction().isActive())\n+                em.getTransaction().rollback();\n+            em.close();\n+        }\n+    }\n+\n+    public void testPreUpdateExceptionDuringCommit() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o = new ExceptionsFromCallbacksEntity();\n+        o.setThrowOnPreUpdate(true);\n+        em.persist(o);\n+        o.setStringField(\"foo\");\n+        try {\n+            em.getTransaction().commit();\n+            fail(\"commit should have failed\");\n+        } catch (RollbackException re) {\n+            assertEquals(CallbackTestException.class,\n+                re.getCause().getClass());\n+            \n+            // transaction should be rolled back at this point\n+            assertFalse(em.getTransaction().isActive());\n+        } finally {\n+            if (em.getTransaction().isActive())\n+                em.getTransaction().rollback();\n+            em.close();\n+        }\n+    }\n+    \n+    public void testPostLoadException() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ExceptionsFromCallbacksEntity o = new ExceptionsFromCallbacksEntity();\n+        o.setThrowOnPostLoad(true);\n+        em.persist(o);\n+        em.getTransaction().commit();\n+        Object oid = OpenJPAPersistence.cast(em).getObjectId(o);\n+        em.close();\n+        \n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        try {\n+            o = em.find(ExceptionsFromCallbacksEntity.class, oid);\n+            fail(\"find should have failed\");\n+        } catch (CallbackTestException cte) {\n+            // transaction should be active but marked for rollback\n+            assertTrue(em.getTransaction().isActive());\n+            assertTrue(em.getTransaction().getRollbackOnly());\n+        } finally {\n+            if (em.getTransaction().isActive())\n+                em.getTransaction().rollback();\n+            em.close();\n+        }\n+    }\n+}"}]}

