{"sha":"48a8b22b7b3b06fde0f385dd8817ba22c7257695","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ4YThiMjJiN2IzYjA2ZmRlMGYzODVkZDg4MTdiYTIyYzcyNTc2OTU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-03T07:13:58Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-03T07:13:58Z"},"message":"OPENJPA-1369: Change Order.count to column CNT\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@832318 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fdf13d3241c001f5f07f18053ae7cc27286a8e60","url":"https://api.github.com/repos/apache/openjpa/git/trees/fdf13d3241c001f5f07f18053ae7cc27286a8e60"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/48a8b22b7b3b06fde0f385dd8817ba22c7257695","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/48a8b22b7b3b06fde0f385dd8817ba22c7257695","html_url":"https://github.com/apache/openjpa/commit/48a8b22b7b3b06fde0f385dd8817ba22c7257695","comments_url":"https://api.github.com/repos/apache/openjpa/commits/48a8b22b7b3b06fde0f385dd8817ba22c7257695/comments","author":null,"committer":null,"parents":[{"sha":"b1b1e0fc4092308a30d99dab61b4cda2a38496f9","url":"https://api.github.com/repos/apache/openjpa/commits/b1b1e0fc4092308a30d99dab61b4cda2a38496f9","html_url":"https://github.com/apache/openjpa/commit/b1b1e0fc4092308a30d99dab61b4cda2a38496f9"}],"stats":{"total":32,"additions":16,"deletions":16},"files":[{"sha":"57a47a5ce814090fa3c75e96cdba52e1b6bc0d33","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/48a8b22b7b3b06fde0f385dd8817ba22c7257695/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java","raw_url":"https://github.com/apache/openjpa/raw/48a8b22b7b3b06fde0f385dd8817ba22c7257695/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java?ref=48a8b22b7b3b06fde0f385dd8817ba22c7257695","patch":"@@ -325,7 +325,7 @@ public void testSubqueries5() {\n     public void testSubqueries5a() {\n         String jpql = \"SELECT o FROM Order o WHERE o.name = SOME (\"\n             + \"SELECT a.name FROM o.customer c JOIN c.accounts a)\";\n-        String expectedSQL = \"SELECT t3.id, t3.count, t4.id, t4.accountNum, t5.id, t5.city, t5.country, t5.county, \"\n+        String expectedSQL = \"SELECT t3.id, t3.cnt, t4.id, t4.accountNum, t5.id, t5.city, t5.country, t5.county, \"\n             + \"t5.state, t5.street, t6.userid, t6.DTYPE, t6.age, t6.compName, t6.creditRating, t6.name, t5.zipCode, \"\n             + \"t4.balanceOwed, t4.creditRating, t4.filledOrderCount, t4.firstName, t4.lastName, t4.name, t4.status, \"\n             + \"t3.delivered, t3.name, t3.orderTs, t3.quantity, t3.totalCost \"\n@@ -383,7 +383,7 @@ public void testSubqueries6() {\n     public void testSubqueries6a() {\n         String jpql = \"SELECT o FROM Order o JOIN o.customer c WHERE o.name = \"\n             + \"SOME (SELECT a.name FROM c.accounts a)\";\n-        String expectedSQL = \"SELECT t0.id, t0.count, t4.id, t4.accountNum, t5.id, t5.city, t5.country, t5.county, \"\n+        String expectedSQL = \"SELECT t0.id, t0.cnt, t4.id, t4.accountNum, t5.id, t5.city, t5.country, t5.county, \"\n             + \"t5.state, t5.street, t6.userid, t6.DTYPE, t6.age, t6.compName, t6.creditRating, t6.name, t5.zipCode, \"\n             + \"t4.balanceOwed, t4.creditRating, t4.filledOrderCount, t4.firstName, t4.lastName, t4.name, t4.status, \"\n             + \"t0.delivered, t0.name, t0.orderTs, t0.quantity, t0.totalCost \"\n@@ -412,7 +412,7 @@ public void testSubqueries6a() {\n     public void testSubqueries6b() {\n         String jpql = \"SELECT o FROM Order o JOIN o.customer c WHERE o.name = \"\n             + \"SOME (SELECT a.county FROM c.address a)\";\n-        String expectedSQL = \"SELECT t0.id, t0.count, t3.id, t3.accountNum, t4.id, t4.city, t4.country, t4.county, \"\n+        String expectedSQL = \"SELECT t0.id, t0.cnt, t3.id, t3.accountNum, t4.id, t4.city, t4.country, t4.county, \"\n             + \"t4.state, t4.street, t5.userid, t5.DTYPE, t5.age, t5.compName, t5.creditRating, t5.name, t4.zipCode, \"\n             + \"t3.balanceOwed, t3.creditRating, t3.filledOrderCount, t3.firstName, t3.lastName, t3.name, t3.status, \"\n             + \"t0.delivered, t0.name, t0.orderTs, t0.quantity, t0.totalCost \"\n@@ -441,7 +441,7 @@ public void testSubqueries6c() {\n         String jpql = \"SELECT o FROM Order o JOIN o.customer c WHERE 10000 < \"\n             + \"ALL (SELECT u.age FROM c.address a JOIN a.user u)\";\n \n-        String expectedSQL = \"SELECT t0.id, t0.count, t4.id, t4.accountNum, t5.id, t5.city, t5.country, t5.county, \"\n+        String expectedSQL = \"SELECT t0.id, t0.cnt, t4.id, t4.accountNum, t5.id, t5.city, t5.country, t5.county, \"\n             + \"t5.state, t5.street, t6.userid, t6.DTYPE, t6.age, t6.compName, t6.creditRating, t6.name, t5.zipCode, \"\n             + \"t4.balanceOwed, t4.creditRating, t4.filledOrderCount, t4.firstName, t4.lastName, t4.name, t4.status, \"\n             + \"t0.delivered, t0.name, t0.orderTs, t0.quantity, t0.totalCost \"\n@@ -471,7 +471,7 @@ public void testSubqueries6c() {\n     public void testSubqueries6d() {\n         String jpql = \"SELECT o FROM Order o JOIN o.customer c JOIN c.address a WHERE 10000 < \"\n             + \"ALL (SELECT u.age FROM c.address a1 JOIN a1.user u WHERE a.city = a1.city)\";\n-        String expectedSQL = \"SELECT t2.id, t2.count, t5.id, t5.accountNum, t6.id, t6.city, t6.country, t6.county, \"\n+        String expectedSQL = \"SELECT t2.id, t2.cnt, t5.id, t5.accountNum, t6.id, t6.city, t6.country, t6.county, \"\n             + \"t6.state, t6.street, t7.userid, t7.DTYPE, t7.age, t7.compName, t7.creditRating, t7.name, t6.zipCode, \"\n             + \"t5.balanceOwed, t5.creditRating, t5.filledOrderCount, t5.firstName, t5.lastName, t5.name, t5.status, \"\n             + \"t2.delivered, t2.name, t2.orderTs, t2.quantity, t2.totalCost \"\n@@ -505,7 +505,7 @@ public void testSubqueries6e() {\n         String jpql = \"SELECT o FROM Order o JOIN o.customer c JOIN c.address a WHERE 10000 < \"\n             + \"ALL (SELECT u.age FROM a.user u)\";\n \n-        String expectedSQL = \"SELECT t0.id, t0.count, t5.id, t5.accountNum, t6.id, t6.city, t6.country, t6.county, \"\n+        String expectedSQL = \"SELECT t0.id, t0.cnt, t5.id, t5.accountNum, t6.id, t6.city, t6.country, t6.county, \"\n             + \"t6.state, t6.street, t7.userid, t7.DTYPE, t7.age, t7.compName, t7.creditRating, t7.name, t6.zipCode, \"\n             + \"t5.balanceOwed, t5.creditRating, t5.filledOrderCount, t5.firstName, t5.lastName, t5.name, t5.status, \"\n             + \"t0.delivered, t0.name, t0.orderTs, t0.quantity, t0.totalCost \"\n@@ -537,7 +537,7 @@ public void testSubqueries6f() {\n         String jpql = \"SELECT o FROM Order o JOIN o.customer c WHERE 10000 < \"\n             + \"ALL (SELECT u.age FROM c.address.user u)\";\n \n-        String expectedSQL = \"SELECT t0.id, t0.count, t5.id, t5.accountNum, t6.id, t6.city, t6.country, t6.county, \"\n+        String expectedSQL = \"SELECT t0.id, t0.cnt, t5.id, t5.accountNum, t6.id, t6.city, t6.country, t6.county, \"\n             + \"t6.state, t6.street, t7.userid, t7.DTYPE, t7.age, t7.compName, t7.creditRating, t7.name, t6.zipCode, \"\n             + \"t5.balanceOwed, t5.creditRating, t5.filledOrderCount, t5.firstName, t5.lastName, t5.name, t5.status, \"\n             + \"t0.delivered, t0.name, t0.orderTs, t0.quantity, t0.totalCost \"\n@@ -556,7 +556,7 @@ public void testSubqueries6g() {\n         String jpql = \"SELECT o FROM Order o JOIN o.customer c WHERE 10000 < \"\n             + \"ALL (SELECT u.age FROM c.address a JOIN a.user u)\";\n \n-        String expectedSQL = \"SELECT t0.id, t0.count, t4.id, t4.accountNum, t5.id, t5.city, t5.country, t5.county, \"\n+        String expectedSQL = \"SELECT t0.id, t0.cnt, t4.id, t4.accountNum, t5.id, t5.city, t5.country, t5.county, \"\n             + \"t5.state, t5.street, t6.userid, t6.DTYPE, t6.age, t6.compName, t6.creditRating, t6.name, t5.zipCode, \"\n             + \"t4.balanceOwed, t4.creditRating, t4.filledOrderCount, t4.firstName, t4.lastName, t4.name, t4.status, \"\n             + \"t0.delivered, t0.name, t0.orderTs, t0.quantity, t0.totalCost \"\n@@ -589,7 +589,7 @@ public void testSubqueries6g() {\n     public void testSubqueries6h() {\n         String jpql = \"SELECT o FROM Order o JOIN o.customer.address a WHERE 10000 < \"\n             + \"ALL (SELECT u.age FROM a.user u)\";\n-        String expectedSQL = \"SELECT t0.id, t0.count, t1.id, t1.accountNum, t6.id, t6.city, t6.country, t6.county, \"\n+        String expectedSQL = \"SELECT t0.id, t0.cnt, t1.id, t1.accountNum, t6.id, t6.city, t6.country, t6.county, \"\n             + \"t6.state, t6.street, t7.userid, t7.DTYPE, t7.age, t7.compName, t7.creditRating, t7.name, t6.zipCode, \"\n             + \"t1.balanceOwed, t1.creditRating, t1.filledOrderCount, t1.firstName, t1.lastName, t1.name, t1.status, \"\n             + \"t0.delivered, t0.name, t0.orderTs, t0.quantity, t0.totalCost \"\n@@ -771,7 +771,7 @@ public void testSubquery01() {\n         String expectedSQL = \"SELECT t0.id FROM CR_ODR t0 WHERE (t0.id IN (\"\n             + \"SELECT DISTINCT t2.id \"\n             + \"FROM CR_ODR t1 JOIN CR_ODR t2 ON (1 = 1), CR_LI t3 WHERE (\" \n-            + \"t3.quantity > ? AND t2.cnt> ? AND t3.id = t2.id)))\";\n+            + \"t3.quantity > ? AND t2.cnt > ? AND t3.id = t2.id)))\";\n \n         executeAndCompareSQL(jpql, expectedSQL);\n \n@@ -1418,15 +1418,15 @@ public void testSubquery23() {\n     public void testSubquery24() {\n         String jpql = \"select o from Order o where o.count > (select count(o) from Order o)\";\n \n-        String expectedSQL = \"SELECT t0.id, t0.count, t2.id, t2.accountNum, t3.id, t3.city, t3.country, \" + \n+        String expectedSQL = \"SELECT t0.id, t0.cnt, t2.id, t2.accountNum, t3.id, t3.city, t3.country, \" + \n         \"t3.county, t3.state, t3.street, t4.userid, t4.DTYPE, t4.age, t4.compName, t4.creditRating, \" + \n         \"t4.name, t3.zipCode, t2.balanceOwed, t2.creditRating, t2.filledOrderCount, t2.firstName, \" + \n         \"t2.lastName, t2.name, t2.status, t0.delivered, t0.name, t0.orderTs, t0.quantity, \" + \n         \"t0.totalCost \" + \n         \"FROM CR_ODR t0 \" + \n         \"LEFT OUTER JOIN CR_CUST t2 ON t0.CUSTOMER_ID = t2.id \" + \n         \"LEFT OUTER JOIN CR_ADDR t3 ON t2.ADDRESS_ID = t3.id \" + \n-        \"LEFT OUTER JOIN CompUser t4 ON t3.id = t4.ADD_ID WHERE (t0.cnt> (\" + \n+        \"LEFT OUTER JOIN CompUser t4 ON t3.id = t4.ADD_ID WHERE (t0.cnt > (\" + \n         \"SELECT COUNT(t1.id) FROM CR_ODR t1))\";\n         executeAndCompareSQL(jpql, expectedSQL);\n \n@@ -1445,15 +1445,15 @@ public void testSubquery24() {\n     public void testSubquery25() {\n         String jpql = \"select o from Order o where o.count > (select count(o2) from Order o2)\";\n \n-        String expectedSQL = \"SELECT t0.id, t0.count, t2.id, t2.accountNum, t3.id, t3.city, t3.country, \" + \n+        String expectedSQL = \"SELECT t0.id, t0.cnt, t2.id, t2.accountNum, t3.id, t3.city, t3.country, \" + \n         \"t3.county, t3.state, t3.street, t4.userid, t4.DTYPE, t4.age, t4.compName, t4.creditRating, \" + \n         \"t4.name, t3.zipCode, t2.balanceOwed, t2.creditRating, t2.filledOrderCount, t2.firstName, \" + \n         \"t2.lastName, t2.name, t2.status, t0.delivered, t0.name, t0.orderTs, t0.quantity, \" + \n         \"t0.totalCost \" + \n         \"FROM CR_ODR t0 \" + \n         \"LEFT OUTER JOIN CR_CUST t2 ON t0.CUSTOMER_ID = t2.id \" + \n         \"LEFT OUTER JOIN CR_ADDR t3 ON t2.ADDRESS_ID = t3.id \" + \n-        \"LEFT OUTER JOIN CompUser t4 ON t3.id = t4.ADD_ID WHERE (t0.cnt> (\" + \n+        \"LEFT OUTER JOIN CompUser t4 ON t3.id = t4.ADD_ID WHERE (t0.cnt > (\" + \n         \"SELECT COUNT(t1.id) FROM CR_ODR t1))\";\n         executeAndCompareSQL(jpql, expectedSQL);\n \n@@ -1518,7 +1518,7 @@ public void testCorrelatedNestedSubquery1() {\n             + \"FROM CR_CUST t1 LEFT OUTER JOIN CR_ADDR t3 ON t1.ADDRESS_ID = t3.id \"\n             + \"LEFT OUTER JOIN CompUser t4 ON t3.id = t4.ADD_ID WHERE (NOT (EXISTS (\"\n             + \"SELECT t0.id FROM CR_ACCT t0 WHERE (t0.CUSTOMER_ID = t1.id AND EXISTS (\"\n-            + \"SELECT t2.id FROM CR_ODR t2 WHERE (t2.CUSTOMER_ID = t1.id AND t2.cnt= ?))))))\";\n+            + \"SELECT t2.id FROM CR_ODR t2 WHERE (t2.CUSTOMER_ID = t1.id AND t2.cnt = ?))))))\";\n         \n         executeAndCompareSQL(jpql, expectedSQL);\n \n@@ -1639,7 +1639,7 @@ public void testPluralCorrelatedJoin2() {\n     public void testPluralCorrelatedJoin3() {\n         String jpql = \"SELECT o FROM Order o JOIN o.customer c JOIN c.accounts a WHERE 10000 < \"\n             + \"ANY (SELECT a1.balance FROM Account a1 WHERE a.owner = a1.owner)\";\n-        String expectedSQL = \"SELECT t0.id, t0.count, t6.id, t6.accountNum, t7.id, t7.city, \"\n+        String expectedSQL = \"SELECT t0.id, t0.cnt, t6.id, t6.accountNum, t7.id, t7.city, \"\n             + \"t7.country, t7.county, t7.state, t7.street, t8.userid, t8.DTYPE, t8.age, \"\n             + \"t8.compName, t8.creditRating, t8.name, t7.zipCode, t6.balanceOwed, \"\n             + \"t6.creditRating, t6.filledOrderCount, t6.firstName, t6.lastName, t6.name, \""}]}

