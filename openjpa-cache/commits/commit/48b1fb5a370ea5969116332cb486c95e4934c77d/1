{"sha":"48b1fb5a370ea5969116332cb486c95e4934c77d","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ4YjFmYjVhMzcwZWE1OTY5MTE2MzMyY2I0ODZjOTVlNDkzNGM3N2Q=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-29T20:38:21Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-29T20:38:21Z"},"message":"OPENJPA-617 Add support for calculating update value in QueryImpl.updateInMemory\nHelp comitting patch provided by Fay Wang\nAdd support for in-memory math - sqrt, abs functions\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@661472 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5bce16a1cb7fd76ce6d32a09aedf2a7293a0a7c2","url":"https://api.github.com/repos/apache/openjpa/git/trees/5bce16a1cb7fd76ce6d32a09aedf2a7293a0a7c2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/48b1fb5a370ea5969116332cb486c95e4934c77d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/48b1fb5a370ea5969116332cb486c95e4934c77d","html_url":"https://github.com/apache/openjpa/commit/48b1fb5a370ea5969116332cb486c95e4934c77d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/48b1fb5a370ea5969116332cb486c95e4934c77d/comments","author":null,"committer":null,"parents":[{"sha":"d1aa6a2c48ad00711befb7d237a435ddd1c3973a","url":"https://api.github.com/repos/apache/openjpa/commits/d1aa6a2c48ad00711befb7d237a435ddd1c3973a","html_url":"https://github.com/apache/openjpa/commit/d1aa6a2c48ad00711befb7d237a435ddd1c3973a"}],"stats":{"total":62,"additions":58,"deletions":4},"files":[{"sha":"5a5c25dea4341dae64ed1c3944608bdc19f640cd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","status":"modified","additions":41,"deletions":1,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/48b1fb5a370ea5969116332cb486c95e4934c77d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/48b1fb5a370ea5969116332cb486c95e4934c77d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java?ref=48b1fb5a370ea5969116332cb486c95e4934c77d","patch":"@@ -707,6 +707,10 @@ public Object evaluate(Object value, Object ob, Object[] params,\n             return handleTrimVal(value, ob, params, sm);\n         case Val.INDEXOF_VAL:\n             return handleIndexOfVal(value, ob, params, sm);\n+        case Val.ABS_VAL:\n+            return handleAbsVal(value, ob, params, sm);\n+        case Val.SQRT_VAL:\n+            return handleSqrtVal(value, ob, params, sm);\n         default:    \n             throw new UnsupportedException();\n         }\n@@ -853,11 +857,47 @@ private Object handleIndexOfVal(Object value, Object ob, Object[] params,\n             (org.apache.openjpa.jdbc.kernel.exps.IndexOf) value;\n         String val1 = (String) getValue(locateVal.getVal1(), ob, params, sm);\n         Val[] val2 = (Val[]) getValue(locateVal.getVal2(), ob, params, sm);\n-        String strVal = (String)getValue(val2[0], ob, params, sm);\n+        String strVal = (String) getValue(val2[0], ob, params, sm);\n         int idx = ((Long) getValue(val2[1], ob, params, sm)).intValue();\n         return strVal.indexOf(val1, idx);\n     }\n \n+    private Object handleAbsVal(Object value, Object ob, Object[] params, \n+        OpenJPAStateManager sm) {\n+        org.apache.openjpa.jdbc.kernel.exps.Abs absVal = \n+            (org.apache.openjpa.jdbc.kernel.exps.Abs) value;\n+        Object val = getValue(absVal.getValue(), ob, params, sm);\n+        Class c = val.getClass();\n+        if (c == Integer.class)\n+            return new Integer(java.lang.Math.abs(((Integer) val).intValue()));\n+        else if (c == Float.class)\n+            return new Float(java.lang.Math.abs(((Float) val).floatValue()));\n+        else if (c == Double.class)\n+            return new Double(java.lang.Math.abs(((Double) val).doubleValue()));\n+        else if (c == Long.class)\n+            return new Long(java.lang.Math.abs(((Long) val).longValue()));\n+        throw new UnsupportedException();\n+    }\n+\n+    private Object handleSqrtVal(Object value, Object ob, Object[] params, \n+        OpenJPAStateManager sm) {\n+        org.apache.openjpa.jdbc.kernel.exps.Sqrt sqrtVal = \n+            (org.apache.openjpa.jdbc.kernel.exps.Sqrt) value;\n+        Object val = getValue(sqrtVal.getValue(), ob, params, sm);\n+        Class c = val.getClass();\n+        if (c == Integer.class)\n+            return new Double(java.lang.Math.sqrt(((Integer) val).\n+                doubleValue()));\n+        else if (c == Float.class)\n+            return new Double(java.lang.Math.sqrt(((Float) val).floatValue()));\n+        else if (c == Double.class)\n+            return new Double(java.lang.Math.sqrt(((Double) val).\n+                doubleValue()));\n+        else if (c == Long.class)\n+            return new Double(java.lang.Math.sqrt(((Long) val).doubleValue()));\n+        throw new UnsupportedException();\n+    }    \n+\n     private Object getValue(Object value, Object ob, Object[] params,\n         OpenJPAStateManager sm) {\n         if (value instanceof PCPath) {"},{"sha":"9e7f8039b6203fc526e2549d95e174e22c5c8097","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Abs.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/48b1fb5a370ea5969116332cb486c95e4934c77d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Abs.java","raw_url":"https://github.com/apache/openjpa/raw/48b1fb5a370ea5969116332cb486c95e4934c77d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Abs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Abs.java?ref=48b1fb5a370ea5969116332cb486c95e4934c77d","patch":"@@ -26,7 +26,7 @@\n /**\n  * Absolute value.\n  */\n-class Abs\n+public class Abs\n     extends UnaryOp {\n \n     /**\n@@ -51,5 +51,9 @@ protected Class getType(Class c) {\n     protected String getOperator() {\n         return \"ABS\";\n     }\n+\n+    public int getId() {\n+        return Val.ABS_VAL;\n+    }\n }\n "},{"sha":"f08db8f6da7cf232333842a0047e88d1ae079fc5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Math.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/48b1fb5a370ea5969116332cb486c95e4934c77d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Math.java","raw_url":"https://github.com/apache/openjpa/raw/48b1fb5a370ea5969116332cb486c95e4934c77d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Math.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Math.java?ref=48b1fb5a370ea5969116332cb486c95e4934c77d","patch":"@@ -154,5 +154,9 @@ public void acceptVisit(ExpressionVisitor visitor) {\n         _val2.acceptVisit(visitor);\n         visitor.exit(this);\n     }\n+\n+    public int getId() {\n+        return Val.MATH_VAL;\n+    }\n }\n "},{"sha":"1fe57961c3bfbc4a13618e29feaf2dcf55d0a603","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Sqrt.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/48b1fb5a370ea5969116332cb486c95e4934c77d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Sqrt.java","raw_url":"https://github.com/apache/openjpa/raw/48b1fb5a370ea5969116332cb486c95e4934c77d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Sqrt.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Sqrt.java?ref=48b1fb5a370ea5969116332cb486c95e4934c77d","patch":"@@ -23,7 +23,7 @@\n  *\n  * @author Abe White\n  */\n-class Sqrt\n+public class Sqrt\n     extends UnaryOp {\n \n     /**\n@@ -40,5 +40,9 @@ protected Class getType(Class c) {\n     protected String getOperator() {\n         return \"SQRT\";\n     }\n+\n+    public int getId() {\n+        return Val.SQRT_VAL;\n+    }\n }\n "},{"sha":"64e94eaf7d86f43338c4082f836446eeec48954a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/48b1fb5a370ea5969116332cb486c95e4934c77d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","raw_url":"https://github.com/apache/openjpa/raw/48b1fb5a370ea5969116332cb486c95e4934c77d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java?ref=48b1fb5a370ea5969116332cb486c95e4934c77d","patch":"@@ -53,7 +53,7 @@ public UnaryOp(Val val, boolean noParen) {\n         _noParen = noParen;\n     }\n \n-    protected Val getValue() {\n+    public Val getValue() {\n         return _val;\n     }\n "},{"sha":"d217622facb3a91841021cbff6e8500313c03ba8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/48b1fb5a370ea5969116332cb486c95e4934c77d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java","raw_url":"https://github.com/apache/openjpa/raw/48b1fb5a370ea5969116332cb486c95e4934c77d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java?ref=48b1fb5a370ea5969116332cb486c95e4934c77d","patch":"@@ -62,6 +62,8 @@\n     public final int LOCATE_VAL = 8;\n     public final int ARGS_VAL = 9;\n     public final int INDEXOF_VAL = 10;\n+    public final int ABS_VAL = 11;\n+    public final int SQRT_VAL = 12;\n \n     /**\n      * Initialize the value. This method should recursively initialize any"}]}

