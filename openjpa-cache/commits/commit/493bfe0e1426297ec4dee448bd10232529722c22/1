{"sha":"493bfe0e1426297ec4dee448bd10232529722c22","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ5M2JmZTBlMTQyNjI5N2VjNGRlZTQ0OGJkMTAyMzI1Mjk3MjJjMjI=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-06-12T14:05:43Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-06-12T14:05:43Z"},"message":"OPENJPA-1696: Type discriminator for polymorphic queries limited to Single Table inheritance\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@954007 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"94234f655848d939da3c047586db075093949f52","url":"https://api.github.com/repos/apache/openjpa/git/trees/94234f655848d939da3c047586db075093949f52"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/493bfe0e1426297ec4dee448bd10232529722c22","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/493bfe0e1426297ec4dee448bd10232529722c22","html_url":"https://github.com/apache/openjpa/commit/493bfe0e1426297ec4dee448bd10232529722c22","comments_url":"https://api.github.com/repos/apache/openjpa/commits/493bfe0e1426297ec4dee448bd10232529722c22/comments","author":null,"committer":null,"parents":[{"sha":"3905b52a90c1eebe7d95105a0043c684dfb0698b","url":"https://api.github.com/repos/apache/openjpa/commits/3905b52a90c1eebe7d95105a0043c684dfb0698b","html_url":"https://github.com/apache/openjpa/commit/3905b52a90c1eebe7d95105a0043c684dfb0698b"}],"stats":{"total":588,"additions":532,"deletions":56},"files":[{"sha":"d8ba3e2fee332a52f1daba17ea6e52c19dd3d4d0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java?ref=493bfe0e1426297ec4dee448bd10232529722c22","patch":"@@ -42,7 +42,9 @@\n import org.apache.openjpa.jdbc.kernel.exps.SQLValue;\n import org.apache.openjpa.jdbc.kernel.exps.Val;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.Discriminator;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.jdbc.meta.strats.NoneDiscriminatorStrategy;\n import org.apache.openjpa.jdbc.meta.strats.VerticalClassStrategy;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.Table;\n@@ -345,6 +347,11 @@ private boolean createWhereSelects(List sels, ClassMapping[] mappings,\n             if (verts.length == 1 && subclasses)\n                 subclassBits.set(sels.size());\n \n+            Discriminator disc = mappings[i].getDiscriminator();\n+            if (mappings.length > 1 && disc != null && disc.getColumns().length == 0 &&\n+                disc.getStrategy() instanceof NoneDiscriminatorStrategy)\n+                ctx.tpcMeta = mappings[i];\n+\n             // create criteria select and clone for each vert mapping\n             sel = ((JDBCExpressionFactory) facts[i]).getSelectConstructor().\n                 evaluate(ctx, null, null, exps[i], states[i]);"},{"sha":"8c781f4ddbe881aff37a9f1b051f9668c77b76b6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EqualTypeExpression.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EqualTypeExpression.java","raw_url":"https://github.com/apache/openjpa/raw/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EqualTypeExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EqualTypeExpression.java?ref=493bfe0e1426297ec4dee448bd10232529722c22","patch":"@@ -0,0 +1,90 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.jdbc.kernel.exps;\r\n+\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.sql.SQLBuffer;\r\n+import org.apache.openjpa.jdbc.sql.Select;\r\n+\r\n+/**\r\n+ * Compares two entity types.\r\n+ *\r\n+ * @author Catalina Wei\r\n+ */\r\n+class EqualTypeExpression\r\n+    extends CompareEqualExpression {\r\n+\r\n+    /**\r\n+     * Constructor. Supply values to compare.\r\n+     */\r\n+    public EqualTypeExpression(Val val1, Val val2) {\r\n+        super(val1, val2);\r\n+    }\r\n+\r\n+    public void appendTo(Select sel, ExpContext ctx, BinaryOpExpState bstate, \r\n+        SQLBuffer buf, boolean val1Null, boolean val2Null) {\r\n+        if (val1Null && val2Null)\r\n+            buf.append(\"1 = 1\");\r\n+        else if (val1Null || val2Null) {\r\n+            Val val = (val1Null) ? getValue2() : getValue1();\r\n+            ExpState state = (val1Null) ? bstate.state2 : bstate.state1;\r\n+            if (!isDirectComparison()) {\r\n+                int len = val.length(sel, ctx, state);\r\n+                for (int i = 0; i < len; i++) {\r\n+                    if (i > 0)\r\n+                        buf.append(\" AND \");\r\n+                    val.appendTo(sel, ctx, state, buf, i);\r\n+                    buf.append(\" IS \").appendValue(null);\r\n+                }\r\n+            } else\r\n+                val.appendIsNull(sel, ctx, state, buf);\r\n+        } else {\r\n+            Val val1 = getValue1();\r\n+            Val val2 = getValue2();\r\n+            if (val1.length(sel, ctx, bstate.state1) == 1 \r\n+                && val2.length(sel, ctx, bstate.state2) == 1) {\r\n+                String op = \"=\";\r\n+                if (sel.getTablePerClassMeta() != null) {\r\n+                    if (val1 instanceof Type) {\r\n+                        if ((ClassMapping) val2.getMetaData() != sel.getTablePerClassMeta())\r\n+                            op = \"<>\";\r\n+                    }\r\n+                    else {\r\n+                        if ((ClassMapping) val1.getMetaData() != sel.getTablePerClassMeta())\r\n+                            op = \"<>\";\r\n+                    }\r\n+                }\r\n+                ctx.store.getDBDictionary().comparison(buf, op,\r\n+                    new FilterValueImpl(sel, ctx, bstate.state1, val1),\r\n+                    new FilterValueImpl(sel, ctx, bstate.state2, val2));\r\n+            } else {\r\n+                int len = java.lang.Math.min(val1.length(sel, ctx, \r\n+                    bstate.state1), val2.length(sel, ctx, bstate.state2));\r\n+                for (int i = 0; i < len; i++) {\r\n+                    if (i > 0)\r\n+                        buf.append(\" AND \");\r\n+\r\n+                    val1.appendTo(sel, ctx, bstate.state1, buf, i);\r\n+                    buf.append(\" = \");\r\n+                    val2.appendTo(sel, ctx, bstate.state2, buf, i);\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"6ee0612a5cbc04213fb8db48cccf679761b7089a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ExpContext.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ExpContext.java","raw_url":"https://github.com/apache/openjpa/raw/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ExpContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ExpContext.java?ref=493bfe0e1426297ec4dee448bd10232529722c22","patch":"@@ -20,6 +20,7 @@\n \n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n \n /**\n  * Expression tree context.\n@@ -44,6 +45,8 @@\n      */\n     public JDBCFetchConfiguration fetch; \n \n+    public ClassMapping tpcMeta = null;\n+\n     public ExpContext() {\n     }\n "},{"sha":"6ee7d339a2bbb995a6fe8324ca68482ed7bdaddf","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","status":"modified","additions":53,"deletions":2,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","raw_url":"https://github.com/apache/openjpa/raw/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java?ref=493bfe0e1426297ec4dee448bd10232529722c22","patch":"@@ -22,7 +22,8 @@\n import java.util.Date;\n \n import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n+import org.apache.openjpa.jdbc.meta.Discriminator;\n+import org.apache.openjpa.jdbc.meta.strats.NoneDiscriminatorStrategy;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.Raw;\n import org.apache.openjpa.kernel.exps.AggregateListener;\n@@ -87,10 +88,52 @@ public Expression equal(Value v1, Value v2) {\n             return contains(v1, v2);\n         if (v2 instanceof PCPath && ((PCPath) v2).isUnaccessedVariable())\n             return contains(v2, v1);\n+        if (v1 instanceof Type || v2 instanceof Type) {\n+            Value val = v1 instanceof Type ? v1 : v2;\n+            verifyTypeOperation(val, null, false);\n+            return new EqualTypeExpression((Val) v1, (Val) v2);\n+        }\n         return new EqualExpression((Val) v1, (Val) v2);\n     }\n \n+    private void verifyTypeOperation(Value val, Value param, boolean isNotEqual) {\n+        if (val.getPath() == null)\n+            return;\n+        PCPath path = (PCPath) val.getPath();\n+        Discriminator disc = ((Type) val).getDiscriminator();\n+        if (disc == null || !(val.getMetaData().getPCSuperclass() != null ||\n+            val.getMetaData().getPCSubclasses().length > 0))\n+            throw new UserException(_loc.\n+                get(\"invalid-type-argument\", path.last() != null ? path.getPCPathString() : path.getSchemaAlias()));\n+        \n+        if (disc.getColumns().length == 0) {\n+            if (disc.getStrategy() instanceof NoneDiscriminatorStrategy) {\n+                // limited support for table per class inheritance hierarchy\n+                if (path.last() != null)\n+                    throw new UserException(_loc.\n+                        get(\"type-argument-unsupported\", path.last().getName())); \n+                if (isNotEqual) {\n+                    if (param != null && param instanceof Null)\n+                        throw new UserException(_loc.\n+                            get(\"type-in-expression-unsupported\", path.getSchemaAlias()));\n+                    else\n+                        throw new UserException(_loc.\n+                            get(\"type-not-equal-unsupported\", path.getSchemaAlias()));\n+                }\n+            }\n+            if (param != null && param instanceof CollectionParam)\n+                throw new UserException(_loc.\n+                    get(\"collection-param-unsupported\")); \n+        }\n+    }\n+\n     public Expression notEqual(Value v1, Value v2) {\n+        if (v1 instanceof Type || v2 instanceof Type) {\n+            Value val = v1 instanceof Type ? v1 : v2;\n+            Value param = val == v1 ? (v2 instanceof Null ? v2 : null) : (v1 instanceof Null ? v1 : null);\n+            verifyTypeOperation(val, param, true);\n+            return new NotEqualTypeExpression((Val) v1, (Val) v2);\n+        }\n         return new NotEqualExpression((Val) v1, (Val) v2);\n     }\n \n@@ -123,8 +166,16 @@ public Expression isNotEmpty(Value val) {\n     }\n \n     public Expression contains(Value map, Value arg) {\n-        if (map instanceof Const)\n+        if (map instanceof Const) {\n+            if (arg instanceof Type) {\n+                // limited support for table per class inheritance\n+                verifyTypeOperation(arg, map, false);\n+                if (((ClassMapping) arg.getMetaData()).getDiscriminator().getColumns().length == 0)\n+                    return new EqualTypeExpression((Val) arg, (Val) map);\n+            }\n+\n             return new InExpression((Val) arg, (Const) map);\n+        }\n         if (map instanceof SubQ)\n             return new InSubQExpression((Val) arg, (SubQ) map);\n         return new ContainsExpression((Val) map, (Val) arg);"},{"sha":"60b3c1f9a66c12289eb7a8b8cd680a21fd7f426c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotEqualTypeExpression.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotEqualTypeExpression.java","raw_url":"https://github.com/apache/openjpa/raw/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotEqualTypeExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotEqualTypeExpression.java?ref=493bfe0e1426297ec4dee448bd10232529722c22","patch":"@@ -0,0 +1,87 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.jdbc.kernel.exps;\r\n+\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.sql.SQLBuffer;\r\n+import org.apache.openjpa.jdbc.sql.Select;\r\n+\r\n+/**\r\n+ * Compares two entity types.\r\n+ *\r\n+ * @author Catalina Wei\r\n+ */\r\n+class NotEqualTypeExpression\r\n+    extends CompareEqualExpression {\r\n+\r\n+    /**\r\n+     * Constructor. Supply values to compare.\r\n+     */\r\n+    public NotEqualTypeExpression(Val val1, Val val2) {\r\n+        super(val1, val2);\r\n+    }\r\n+\r\n+    public void appendTo(Select sel, ExpContext ctx, BinaryOpExpState bstate, \r\n+        SQLBuffer buf, boolean val1Null, boolean val2Null) {\r\n+        if (val1Null && val2Null)\r\n+            buf.append(\"1 <> 1\");\r\n+        else if (val1Null || val2Null) {\r\n+            Val val = (val1Null) ? getValue2() : getValue1();\r\n+            ExpState state = (val1Null) ? bstate.state2 : bstate.state1;\r\n+            if (!isDirectComparison()) {\r\n+                int len = val.length(sel, ctx, state);\r\n+                for (int i = 0; i < len; i++) {\r\n+                    if (i > 0)\r\n+                        buf.append(\" AND \");\r\n+                    val.appendTo(sel, ctx, state, buf, i);\r\n+                    buf.append(\" IS NOT \").appendValue(null);\r\n+                }\r\n+            } else\r\n+                val.appendIsNotNull(sel, ctx, state, buf);\r\n+        } else {\r\n+            Val val1 = getValue1();\r\n+            Val val2 = getValue2();\r\n+            if (val1.length(sel, ctx, bstate.state1) == 1 \r\n+                && val2.length(sel, ctx, bstate.state2) == 1) {\r\n+                String op = \"<>\";\r\n+                if (val1 instanceof Type)\r\n+                    if ((ClassMapping) val2.getMetaData() != sel.getTablePerClassMeta())\r\n+                        op = \"=\";\r\n+                else\r\n+                    if ((ClassMapping) val1.getMetaData() != sel.getTablePerClassMeta())\r\n+                        op = \"=\";\r\n+                ctx.store.getDBDictionary().comparison(buf, op,\r\n+                    new FilterValueImpl(sel, ctx, bstate.state1, val1),\r\n+                    new FilterValueImpl(sel, ctx, bstate.state2, val2));\r\n+            } else {\r\n+                int len = java.lang.Math.max(val1.length(sel, ctx, \r\n+                    bstate.state1), val2.length(sel, ctx, bstate.state2));\r\n+                buf.append(\"(\");\r\n+                for (int i = 0; i < len; i++) {\r\n+                    if (i > 0)\r\n+                        buf.append(\" OR \");\r\n+                    val1.appendTo(sel, ctx, bstate.state1, buf, i);\r\n+                    buf.append(\" <> \");\r\n+                    val2.appendTo(sel, ctx, bstate.state2, buf, i);\r\n+                }\r\n+                buf.append(\")\");\r\n+            }\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"6f61e016e51ab6b259d8650837bbd2eb5928bba3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","raw_url":"https://github.com/apache/openjpa/raw/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java?ref=493bfe0e1426297ec4dee448bd10232529722c22","patch":"@@ -1049,7 +1049,7 @@ public void appendType(Select sel, ExpContext ctx, ExpState state,\n         else\n             cols = getColumns(state);\n \n-        if (cols == null) {\n+        if (cols == null || cols.length == 0) {\n             sql.append(\"1\");\n             return;\n         }"},{"sha":"599d8fcb06f8273f809453ad2318c08a4ba81575","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","raw_url":"https://github.com/apache/openjpa/raw/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java?ref=493bfe0e1426297ec4dee448bd10232529722c22","patch":"@@ -119,8 +119,7 @@ public void calculateValue(Select sel, ExpContext ctx, ExpState state,\n                     getMappingRepositoryInstance().getMapping((Class) val,\n                         ctx.store.getContext().getClassLoader(), true);\n                 pstate.disc = pstate.mapping.getDiscriminator();\n-                pstate.discValue = pstate.disc != null ? pstate.disc.getValue()\n-                    : null;\n+                pstate.discValue = pstate.disc.getValue() != null ? pstate.disc.getValue() : \"1\";\n             }\n         } else if (ImplHelper.isManageable(val)) {\n             ClassMapping mapping = ctx.store.getConfiguration()."},{"sha":"7103586114e1712c4baf7ab50aed828a262f1207","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","raw_url":"https://github.com/apache/openjpa/raw/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java?ref=493bfe0e1426297ec4dee448bd10232529722c22","patch":"@@ -85,6 +85,7 @@ public Select evaluate(ExpContext ctx, Select parent, String alias,\n         // create a new select and initialize it with the joins needed for\n         // the criteria of this query\n         sel = newSelect(ctx, parent, alias, exps, state);\n+        sel.setTablePerClassMeta(ctx.tpcMeta);\n \n         // create where clause; if there are no where conditions and\n         // no ordering or projections, we return null to signify that this"},{"sha":"fb7021e10e8e8066acb2ec23d8456156bb823bfe","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Type.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Type.java","raw_url":"https://github.com/apache/openjpa/raw/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Type.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Type.java?ref=493bfe0e1426297ec4dee448bd10232529722c22","patch":"@@ -25,6 +25,7 @@\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.exps.Path;\n import org.apache.openjpa.util.InternalException;\n \n /**\n@@ -94,4 +95,12 @@ protected String getOperator() {\n         // since we override appendTo(), this method should never be called\n         throw new InternalException();\n     }\n+\n+    public Path getPath() {\n+        return getValue() instanceof Path ? (Path) getValue() : null;\n+    }\n+\n+    public Discriminator getDiscriminator() {\n+        return _disc;\n+    }\n }"},{"sha":"b7257932974817668cda3d4872ccc4910f9cc005","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","raw_url":"https://github.com/apache/openjpa/raw/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java?ref=493bfe0e1426297ec4dee448bd10232529722c22","patch":"@@ -905,6 +905,12 @@ public void setSchemaAlias(String schemaAlias) {\n         public void logEagerRelations() {\n             sel.logEagerRelations();            \n         }\n+        public void setTablePerClassMeta(ClassMapping meta) {            \n+        }\n+\n+        public ClassMapping getTablePerClassMeta() {\n+            return sel.getTablePerClassMeta();\n+        }\n     }\n \n     /**"},{"sha":"ee039b9646c141296a2c52e2dd49291286e151ab","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","raw_url":"https://github.com/apache/openjpa/raw/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java?ref=493bfe0e1426297ec4dee448bd10232529722c22","patch":"@@ -737,4 +737,14 @@ public SelectExecutor eagerClone(FieldMapping key, int eagerType,\n      * Extended trace that logs eager relations\n      */\n     public void logEagerRelations();\n+\n+    /**\n+     * Set table-per-class metadata for polymorphic queries\n+     */\n+    public void setTablePerClassMeta(ClassMapping meta);\n+\n+    /**\n+     * get table-per-class metadata for polymorphic queries\n+     */\n+    public ClassMapping getTablePerClassMeta();\n }"},{"sha":"8e3bc566af14b87418c6b6f8d79fd100598e61e8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=493bfe0e1426297ec4dee448bd10232529722c22","patch":"@@ -169,6 +169,13 @@\n \n     // A path navigation is begin with this schema alias\n     private String _schemaAlias = null;\n+    private ClassMapping _tpcMeta = null;\n+    public ClassMapping getTablePerClassMeta() {\n+        return _tpcMeta;\n+    }\n+    public void setTablePerClassMeta(ClassMapping meta) {\n+        _tpcMeta = meta;\n+    }\n      \n     /**\n      * Helper method to return the proper table alias for the given alias index."},{"sha":"75b0b6c68dca5d00702a0afafa1aaf27f2f2055c","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/exps/localizer.properties","status":"modified","additions":16,"deletions":1,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/exps/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/exps/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/exps/localizer.properties?ref=493bfe0e1426297ec4dee448bd10232529722c22","patch":"@@ -34,4 +34,19 @@ empty-collection-parm: Input parameter \"{0}\" is empty.\n count-distinct-multi-col-only: Count distinct compound primary key is not \\\n     supported when there are other projection items.\n count-distinct-multi-col-subselect-unsupported: Count distinct multiple columns \\\n-\tin the subselect is not supported.\n\\ No newline at end of file\n+\tin the subselect is not supported.\n+invalid-type-argument: The argument \"{0}\" in type discriminator is not involved in any \\\n+    inheritance class hierarchy. Nonpolymorphic type comparison is not supported.\n+type-argument-unsupported: A single valued object path \"{0}\" for the TYPE argument in \\\n+    a table per class inheritance hierarchy is not supported.\n+type-not-equal-unsupported: The argument \"{0}\" in type discriminator is in a table per class \\\n+    or mapped super class inheritance hierarchy. The not equal type comparison for such entity \\\n+    is not supported. Rewrite the query in type equal comparison  \\\n+    and or operators for polymorphic query results.\n+type-in-expression-unsupported: The argument \"{0}\" in type discriminator is in a table per class \\\n+    inheritance hierarchy. The type discriminator in IN expression for such entity \\\n+    is not supported. Rewrite the query in type equal comparison  \\\n+    and or operators for polymorphic query results.\n+collection-param-unsupported: The collection parameter used in IN expression is not supported \\\n+    for table per class inheritance hierarchy or inheritance type joined strategy. \\\n+    Use type equal comparison and or operators for polymorphic query results."},{"sha":"a344238f27226db741968c83f702eda352c5ec81","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestDefaultInheritanceStrategy.java","status":"modified","additions":28,"deletions":2,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestDefaultInheritanceStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestDefaultInheritanceStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestDefaultInheritanceStrategy.java?ref=493bfe0e1426297ec4dee448bd10232529722c22","patch":"@@ -120,6 +120,15 @@ public void testSimpleDefaultInheritance() {\n         em.persist(b);\n         em.getTransaction().commit();\n \n+        // test entity type discriminator queries for polymorphic results\n+        em.clear();\n+        String query = \"select a from BaseClass a where TYPE(a) = BaseClass\";\n+        List rs = em.createQuery(query).getResultList();\n+        assertTrue(rs.get(0) instanceof BaseClass);\n+        query = \"select a from BaseClass a where TYPE(a) = SubclassA\";\n+        rs = em.createQuery(query).getResultList();\n+        assertTrue(rs.get(0) instanceof SubclassA);\n+\n         em.clear();\n         \n         verifyDtypeColumnEntriesAndMapping(em, \"BaseClass\", 4, BaseClass.class);\n@@ -132,7 +141,7 @@ public void testSimpleDefaultInheritance() {\n \n         verifyInheritanceQueryResult(em, \"BaseClass\", \n             classArray(BaseClass.class), 0, 1, 2, 3);\n-        \n+\n         em.close();\n     }\n \n@@ -207,7 +216,24 @@ public void testTwoLevelInheritance() {\n         em.persist(mc);\n         em.persist(b2);\n         em.getTransaction().commit();\n-        \n+\n+        // test entity type discriminator queries for polymorphic results\n+        em.clear();\n+        String query = \"select a from BaseClass2 a where TYPE(a) = MidClass\";\n+        List rs = em.createQuery(query).getResultList();\n+        for (int i = 0; i < rs.size(); i++)\n+        assertTrue(rs.get(i) instanceof MidClass);\n+\n+        query = \"select a from BaseClass2 a where TYPE(a) = SubclassE\";\n+        rs = em.createQuery(query).getResultList();\n+        for (int i = 0; i < rs.size(); i++)\n+            assertTrue(rs.get(i) instanceof SubclassE);   \n+\n+        query = \"select a from BaseClass2 a where TYPE(a) = BaseClass2\";\n+        rs = em.createQuery(query).getResultList();\n+        for (int i = 0; i < rs.size(); i++)\n+            assertTrue(rs.get(i) instanceof BaseClass2);\n+\n         em.clear();\n \n         // Verify that baseclass2 contains a discriminator column"},{"sha":"5a5cf11f85a868d1a9887a51c534231ddb9314b1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestFindAbstractClass.java","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestFindAbstractClass.java","raw_url":"https://github.com/apache/openjpa/raw/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestFindAbstractClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestFindAbstractClass.java?ref=493bfe0e1426297ec4dee448bd10232529722c22","patch":"@@ -18,7 +18,10 @@\n  */\n package org.apache.openjpa.persistence.inheritance;\n \n+import java.util.List;\n+\n import javax.persistence.EntityManager;\n+import javax.persistence.InheritanceType;\n \n import junit.textui.TestRunner;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n@@ -33,7 +36,7 @@\n     extends SingleEMFTestCase {\n \n     public void setUp() {\n-        setUp(AbstractBase.class, ConcreteSubclass.class);\n+        setUp(AbstractBase.class, ConcreteSubclass.class, CLEAR_TABLES);\n \n         ConcreteSubclass e = new ConcreteSubclass();\n         e.setId(\"id\");\n@@ -46,6 +49,16 @@ public void setUp() {\n         em.close();\n     }\n \n+    public void testEntityTypeInheritanceTypeJoined() {\n+        EntityManager em = emf.createEntityManager();\n+        String query = \"select c from AbstractBase c where TYPE(c) = ConcreteSubclass\";\n+        List rs = em.createQuery(query).getResultList();\n+        assertTrue(rs.get(0) instanceof ConcreteSubclass);\n+        query = \"select c from AbstractBase c\";\n+        rs = em.createQuery(query).getResultList();\n+        assertTrue(rs.get(0) instanceof ConcreteSubclass);\n+    }\n+\n     public void testFind() {\n         EntityManager em = emf.createEntityManager();\n         AbstractBase e = em.find(AbstractBase.class, \"id\");"},{"sha":"d1751544680aaf9ae79cd2fea10572d45941809f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/TestAbstractJoinedAppId.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/TestAbstractJoinedAppId.java","raw_url":"https://github.com/apache/openjpa/raw/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/TestAbstractJoinedAppId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/TestAbstractJoinedAppId.java?ref=493bfe0e1426297ec4dee448bd10232529722c22","patch":"@@ -20,6 +20,8 @@\n \n import java.util.Arrays;\n import java.util.Collection;\n+import java.util.List;\n+\n import javax.persistence.EntityManager;\n \n import junit.textui.TestRunner;\n@@ -52,6 +54,20 @@ public void setUp() {\n         em.close();\n     }\n \n+    public void testEntityTypeForAbstractJoined() {\n+        EntityManager em = emf.createEntityManager();\n+        String query = \"select s from RelationOwner r join r.supers s where TYPE(s) = Subclass\";\n+        List rs = em.createQuery(query).getResultList();\n+        assertTrue(rs.size() > 0);\n+        for (int i = 0; i < rs.size(); i++)\n+            assertTrue(rs.get(i) instanceof Subclass);\n+        query = \"select s from Superclass s where TYPE(s) = Subclass\";\n+        rs = em.createQuery(query).getResultList();\n+        assertTrue(rs.size() > 0);\n+        for (int i = 0; i < rs.size(); i++)\n+            assertTrue(rs.get(i) instanceof Subclass);\n+    }\n+\n     public void testTraverseRelation() {\n         EntityManager em = emf.createEntityManager();\n         RelationOwner ro = em.find(RelationOwner.class, 1);"},{"sha":"111d65eb24877dbe3af7002b4397b5bf2bf6d148","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/TestInheritanceTypeJoinedQuery.java","status":"modified","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/TestInheritanceTypeJoinedQuery.java","raw_url":"https://github.com/apache/openjpa/raw/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/TestInheritanceTypeJoinedQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/TestInheritanceTypeJoinedQuery.java?ref=493bfe0e1426297ec4dee448bd10232529722c22","patch":"@@ -18,11 +18,14 @@\n  */\n package org.apache.openjpa.persistence.inheritance.jointable;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.List;\n \n import javax.persistence.EntityManager;\n import javax.persistence.Query;\n \n+import org.apache.openjpa.persistence.ArgumentException;\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n \n \n@@ -50,6 +53,37 @@ public void populate() {\n         em.close();\n     }\n \n+    public void testInheritanceJoinedTypeOperator() {\n+        EntityManager em = emf.createEntityManager();\n+        Query q = null;\n+        String qS = null;\n+        qS = \"SELECT p FROM Person p where TYPE(p) = Contractor\";\n+        q = em.createQuery(qS); \n+        List rs = q.getResultList();\n+        assertEquals(3, rs.size());\n+        for (int i = 0; i < rs.size(); i++)\n+            assertTrue(rs.get(i) instanceof Contractor);\n+        qS = \"select p from Person p where TYPE(p) in (?1) order by p.name\";\n+        q = em.createQuery(qS).setParameter(1, Contractor.class);\n+        rs = q.getResultList();\n+        assertEquals(3, rs.size());\n+        for (int i = 0; i < rs.size(); i++)\n+            assertTrue(rs.get(i) instanceof Contractor);\n+\n+        qS = \"select p from Person p where TYPE(p) in ?1 order by p.name\";\n+        Collection<Class<?>> params = new ArrayList<Class<?>>(2);\n+        params.add(Contractor.class);\n+        params.add(Employee.class);\n+        try {\n+            q = em.createQuery(qS).setParameter(1, params);\n+            rs = q.getResultList();\n+        } catch (ArgumentException e) {\n+            // as expected\n+            //System.out.println(e.getMessage());\n+        }\n+        \n+    }\n+\n     public void testInheritanceTypeJoinedQuery() {\n         EntityManager em = emf.createEntityManager();\n         Query q = null;"},{"sha":"3524bf68b9b6f6ce33162dfa9af24d2821df4b42","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/TestMappedSuperClass.java","status":"modified","additions":30,"deletions":5,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/TestMappedSuperClass.java","raw_url":"https://github.com/apache/openjpa/raw/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/TestMappedSuperClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/TestMappedSuperClass.java?ref=493bfe0e1426297ec4dee448bd10232529722c22","patch":"@@ -18,8 +18,11 @@\n  */\n package org.apache.openjpa.persistence.inheritance.mappedsuperclass;\n \n+import java.util.List;\n+\n import javax.persistence.EntityManager;\n \n+import org.apache.openjpa.persistence.ArgumentException;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n /**\n@@ -34,16 +37,38 @@\n \n     public void setUp() {\n         setUp(CashBaseEntity.class, \n-              SituationDA.class, ValuableItemDA.class);\n+              SituationDA.class, ValuableItemDA.class, CLEAR_TABLES);\n     }\n \n     public void testMappedSuperClass() {\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n-        SituationDA s = new SituationDA();\n-        s.setCashBoxPeriodSerial(\"test\");\n-        s.setType((short)1);\n-        em.persist(s);\n+        for (int i = 0; i < 3; i++) {\n+            SituationDA s = new SituationDA();\n+            s.setCashBoxPeriodSerial(\"test\");\n+            s.setType((short) (i+1));\n+            em.persist(s);\n+        }\n+        for (int i = 0; i < 3; i++) {\n+            ValuableItemDA v = new ValuableItemDA();\n+            v.setCode((short)(10+i));\n+            em.persist(v);\n+        }\n         em.getTransaction().commit();\n+        \n+        em.clear();\n+\n+        // test polymorphic queries\n+        String query = \"select s from CashBaseEntity s where TYPE(s) = SituationDA\";\n+        List rs = em.createQuery(query).getResultList();\n+        for (int i = 0; i < rs.size(); i++)\n+            assertTrue(rs.get(i) instanceof SituationDA);\n+        \n+        query = \"select s from CashBaseEntity s where TYPE(s) <> ValuableItemDA\";\n+        try {\n+            rs = em.createQuery(query).getResultList();\n+        } catch (ArgumentException e) {\n+            // as expected\n+        }\n     }\n }"},{"sha":"f6f14aa775f2647b837e7a6cca97a961f5a353da","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java","status":"modified","additions":106,"deletions":42,"changes":148,"blob_url":"https://github.com/apache/openjpa/blob/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java","raw_url":"https://github.com/apache/openjpa/raw/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java?ref=493bfe0e1426297ec4dee448bd10232529722c22","patch":"@@ -18,8 +18,11 @@\n  */\n package org.apache.openjpa.persistence.inheritance.polymorphic;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.List;\n \n+import org.apache.openjpa.persistence.ArgumentException;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n@@ -60,51 +63,56 @@ public void setUp() {\n         \t\tEnglishParagraph.class, FrenchParagraph.class, \n         \t\tGermanParagraph.class, Translatable.class);\n     }\n-    \n+\n+    public void populate() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        /**\n+         * Aggregate query operations can not be performed on unjoined \n+         * subclasses. Hence all concrete subclasses of abstract base\n+         * class is counted separately to count all Translatable instances.\n+         */\n+        \n+        EnglishParagraph english = new EnglishParagraph();\n+        FrenchParagraph french   = new FrenchParagraph();\n+        GermanParagraph german   = new GermanParagraph();\n+        \n+        Translation translation1 = new Translation(); \n+        Translation translation2 = new Translation(); \n+        Translation translation3 = new Translation(); \n+        Translation translation4 = new Translation(); \n+        \n+        english.setContent(\"Hello\");\n+        french.setContent(\"Bon jour\");\n+        german.setContent(\"Guten Tag\");\n+\n+        \n+        translation1.setTranslatable(english);\n+        translation2.setTranslatable(english);\n+        translation3.setTranslatable(french);\n+        translation4.setTranslatable(german);\n+        \n+        english.addTranslation(translation1);\n+        english.addTranslation(translation2);\n+        french.addTranslation(translation3);\n+        german.addTranslation(translation4);\n+        \n+        em.persist(translation1);\n+        em.persist(translation2);\n+        em.persist(translation3);\n+        em.persist(translation4);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n \t@SuppressWarnings(\"unchecked\")\n     public void testConsistency() {\n-\t\tOpenJPAEntityManager em = emf.createEntityManager();\n-\t\tem.getTransaction().begin();\n-\t\t/**\n-\t\t * Aggregate query operations can not be performed on unjoined \n-\t\t * subclasses. Hence all concrete subclasses of abstract base\n-         * class is counted separately to count all Translatable instances.\n-\t\t */\n-\t\tint nTranslatableBefore = count(UNJOINED_SUBCLASSES);\n-\t\tint nTranslationBefore = count(Translation.class);\n-\t\t\n-\t\tEnglishParagraph english = new EnglishParagraph();\n-\t\tFrenchParagraph french   = new FrenchParagraph();\n-\t\tGermanParagraph german   = new GermanParagraph();\n-\t\t\n-\t\tTranslation translation1 = new Translation(); \n-\t\tTranslation translation2 = new Translation(); \n-\t\tTranslation translation3 = new Translation(); \n-\t\tTranslation translation4 = new Translation(); \n-\t\t\n-\t\tenglish.setContent(\"Hello\");\n-\t\tfrench.setContent(\"Bon jour\");\n-\t\tgerman.setContent(\"Guten Tag\");\n+        OpenJPAEntityManager em = emf.createEntityManager();\n \n-\t\t\n-\t\ttranslation1.setTranslatable(english);\n-\t\ttranslation2.setTranslatable(english);\n-\t\ttranslation3.setTranslatable(french);\n-\t\ttranslation4.setTranslatable(german);\n-\t\t\n-\t\tenglish.addTranslation(translation1);\n-\t\tenglish.addTranslation(translation2);\n-\t\tfrench.addTranslation(translation3);\n-\t\tgerman.addTranslation(translation4);\n-\t\t\n-\t\tem.persist(translation1);\n-\t\tem.persist(translation2);\n-\t\tem.persist(translation3);\n-\t\tem.persist(translation4);\n-\t\tem.getTransaction().commit();\n-\t\t\n-\t\tem.clear();\n+        int nTranslatableBefore = count(UNJOINED_SUBCLASSES);\n+        int nTranslationBefore = count(Translation.class);\n \n+        populate();\n \t\tint nTranslatableAfter = count(UNJOINED_SUBCLASSES);\n \t\tint nTranslationAfter  = count(Translation.class);\n \t\t\n@@ -152,5 +160,61 @@ public int count(Class<?>... classes) {\n \t\t}\n \t\treturn total;\n \t}\n-\t\n+\n+    public void testEntityTypeForTablePerClassInheritance() {\n+        populate();\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String query = \"select tr from Translatable tr join tr.translations t where \" +\n+                \"TYPE(tr) = EnglishParagraph\";\n+        List rs = em.createQuery(query).getResultList();\n+        assertEquals(2, rs.size());\n+        for (int i=0; i < rs.size(); i++)\n+            assertTrue(rs.get(i) instanceof EnglishParagraph);\n+        \n+        query = \"select distinct tr from Translatable tr join tr.translations t where \" +\n+            \"TYPE(tr) = EnglishParagraph or TYPE(tr) = FrenchParagraph\";\n+        rs = em.createQuery(query).getResultList();\n+        assertEquals(2, rs.size());\n+        for (int i=0; i < rs.size(); i++)\n+            assertTrue(!(rs.get(i) instanceof GermanParagraph));\n+        \n+        query = \"select distinct tr from Translatable tr join tr.translations t where \" +\n+            \"TYPE(tr) in (?1, ?2)\";\n+        try {\n+            rs = em.createQuery(query).setParameter(1, EnglishParagraph.class).\n+            setParameter(2, FrenchParagraph.class).getResultList();\n+        } catch(ArgumentException e) {\n+            // as expected\n+            //System.out.println(e.getMessage());\n+        }\n+        \n+        query = \"select tr from Translatable tr join tr.translations t where \" +\n+            \"TYPE(tr) <> EnglishParagraph\";\n+        try {\n+            rs = em.createQuery(query).getResultList();\n+        } catch(ArgumentException e) {\n+            // as expected\n+            //System.out.println(e.getMessage());\n+        }\n+\n+        String query1 = \"select t from Translation t where TYPE(t.translatable) = EnglishParagraph\";\n+        try {\n+            rs = em.createQuery(query1).getResultList();\n+        } catch(ArgumentException e) {\n+            // as expected\n+            //System.out.println(e.getMessage());\n+        }\n+\n+        query1 = \"select tr from Translatable tr join tr.translations t where \" +\n+                \"TYPE(tr) in ?1\";\n+        Collection<Class <?>> params = new ArrayList(2);\n+        params.add(EnglishParagraph.class);\n+        params.add(FrenchParagraph.class);\n+        try {\n+            rs = em.createQuery(query).setParameter(1, params).getResultList();\n+        } catch(ArgumentException e) {\n+            // as expected\n+            //System.out.println(\"e.getMessages()\");\n+        }\n+    }\n }"},{"sha":"2218d1623d42572457b46fc215d29e71585d71d6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEntityTypeExpression.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEntityTypeExpression.java","raw_url":"https://github.com/apache/openjpa/raw/493bfe0e1426297ec4dee448bd10232529722c22/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEntityTypeExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEntityTypeExpression.java?ref=493bfe0e1426297ec4dee448bd10232529722c22","patch":"@@ -71,6 +71,19 @@ public void setUp() {\n         endEm(em);\n     }\n \n+    public void testTypeOnNonPolymorphicEntity() {\n+        EntityManager em = currentEntityManager();\n+        String query = \"select a from Address a where type(a) = ?1\";\n+        List rs = null;\n+        try {\n+            rs =  em.createQuery(query).setParameter(1, Address.class).getResultList();\n+            System.out.println(\"rs size=\"+rs.size());\n+        } catch(Exception e) {\n+            // as expected\n+            //System.out.println(e.getMessage());\n+        }\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n     public void testTypeExpression() {\n         EntityManager em = currentEntityManager();"}]}

