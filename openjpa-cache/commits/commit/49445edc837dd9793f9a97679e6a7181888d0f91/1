{"sha":"49445edc837dd9793f9a97679e6a7181888d0f91","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ5NDQ1ZWRjODM3ZGQ5NzkzZjlhOTc2NzllNmE3MTgxODg4ZDBmOTE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-27T13:23:36Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-06-27T13:23:36Z"},"message":"OPENJPA-267. Test case for some basic MethodQL behavior.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@551159 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"762b09355f87619f803f55e8aab2e2d3036bad90","url":"https://api.github.com/repos/apache/openjpa/git/trees/762b09355f87619f803f55e8aab2e2d3036bad90"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/49445edc837dd9793f9a97679e6a7181888d0f91","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/49445edc837dd9793f9a97679e6a7181888d0f91","html_url":"https://github.com/apache/openjpa/commit/49445edc837dd9793f9a97679e6a7181888d0f91","comments_url":"https://api.github.com/repos/apache/openjpa/commits/49445edc837dd9793f9a97679e6a7181888d0f91/comments","author":null,"committer":null,"parents":[{"sha":"c1c32b4d8cb3bfc8200833c41e42141c4d045c22","url":"https://api.github.com/repos/apache/openjpa/commits/c1c32b4d8cb3bfc8200833c41e42141c4d045c22","html_url":"https://github.com/apache/openjpa/commit/c1c32b4d8cb3bfc8200833c41e42141c4d045c22"}],"stats":{"total":92,"additions":92,"deletions":0},"files":[{"sha":"f47412b34618e44cd407b7fbbb9c289472f7b283","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMethodQLQuery.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/49445edc837dd9793f9a97679e6a7181888d0f91/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMethodQLQuery.java","raw_url":"https://github.com/apache/openjpa/raw/49445edc837dd9793f9a97679e6a7181888d0f91/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMethodQLQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMethodQLQuery.java?ref=49445edc837dd9793f9a97679e6a7181888d0f91","patch":"@@ -0,0 +1,92 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.Map;\r\n+import java.util.ArrayList;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+import org.apache.openjpa.persistence.QueryImpl;\r\n+import org.apache.openjpa.persistence.ArgumentException;\r\n+import org.apache.openjpa.kernel.QueryLanguages;\r\n+import org.apache.openjpa.kernel.StoreContext;\r\n+import org.apache.openjpa.kernel.FetchConfiguration;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.lib.rop.ResultObjectProvider;\r\n+import org.apache.openjpa.lib.rop.ListResultObjectProvider;\r\n+\r\n+public class TestMethodQLQuery\r\n+    extends SingleEMTestCase {\r\n+\r\n+    @Override\r\n+    public void setUp() {\r\n+        setUp(SimpleEntity.class);\r\n+    }\r\n+\r\n+    public void testMethodQLWithoutParametersDeclared() {\r\n+        OpenJPAQuery q = em.createQuery(QueryLanguages.LANG_METHODQL,\r\n+            getClass().getName() + \".echo\");\r\n+        ((QueryImpl) q).getDelegate().setCandidateType(\r\n+            SimpleEntity.class, true);\r\n+        q.setParameter(\"param\", 5);\r\n+        ((QueryImpl) q).getDelegate().declareParameters(\"Integer param\");\r\n+        assertEquals(5, q.getResultList().get(0));\r\n+    }\r\n+\r\n+    public void testInvalidMethodReturnType() {\r\n+        OpenJPAQuery q = em.createQuery(QueryLanguages.LANG_METHODQL,\r\n+            getClass().getName() + \".invalidReturnMeth\");\r\n+        ((QueryImpl) q).getDelegate().setCandidateType(\r\n+            SimpleEntity.class, true);\r\n+        try {\r\n+            q.getResultList().get(0);\r\n+            fail(\"should have gotten an exception since method is invalid\");\r\n+        } catch (ArgumentException ae) {\r\n+            // expected\r\n+        }\r\n+    }\r\n+\r\n+    public void testVoidMethodReturnType() {\r\n+        OpenJPAQuery q = em.createQuery(QueryLanguages.LANG_METHODQL,\r\n+            getClass().getName() + \".voidMeth\");\r\n+        ((QueryImpl) q).getDelegate().setCandidateType(\r\n+            SimpleEntity.class, true);\r\n+        try {\r\n+            q.getResultList().get(0);\r\n+            fail(\"should have gotten an exception since method is invalid\");\r\n+        } catch (ArgumentException ae) {\r\n+            // expected\r\n+        }\r\n+    }\r\n+\r\n+    public static ResultObjectProvider echo(StoreContext ctx,\r\n+        ClassMetaData meta, boolean subs, Map params, FetchConfiguration conf) {\r\n+        return new ListResultObjectProvider(new ArrayList(params.values()));\r\n+    }\r\n+\r\n+    public static void voidMeth(StoreContext ctx,\r\n+        ClassMetaData meta, boolean subs, Map params, FetchConfiguration conf) {\r\n+    }\r\n+\r\n+    public static Object invalidReturnMeth(StoreContext ctx,\r\n+        ClassMetaData meta, boolean subs, Map params, FetchConfiguration conf) {\r\n+        return null;\r\n+    }\r\n+}\r"}]}

