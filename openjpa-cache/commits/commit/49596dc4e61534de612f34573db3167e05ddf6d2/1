{"sha":"49596dc4e61534de612f34573db3167e05ddf6d2","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ5NTk2ZGM0ZTYxNTM0ZGU2MTJmMzQ1NzNkYjMxNjdlMDVkZGY2ZDI=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-05-29T17:24:54Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-05-29T17:24:54Z"},"message":"OPENJPA-1074 Fix for bidirectional ordered relationships. Modified order column tests to be included in compile time enhancement.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@780038 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2bfa37fa473008c3b217c1e6557e77d0018256d8","url":"https://api.github.com/repos/apache/openjpa/git/trees/2bfa37fa473008c3b217c1e6557e77d0018256d8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/49596dc4e61534de612f34573db3167e05ddf6d2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/49596dc4e61534de612f34573db3167e05ddf6d2","html_url":"https://github.com/apache/openjpa/commit/49596dc4e61534de612f34573db3167e05ddf6d2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/49596dc4e61534de612f34573db3167e05ddf6d2/comments","author":null,"committer":null,"parents":[{"sha":"dbc271305fe826866cc6a850e336f13929b2abf9","url":"https://api.github.com/repos/apache/openjpa/commits/dbc271305fe826866cc6a850e336f13929b2abf9","html_url":"https://github.com/apache/openjpa/commit/dbc271305fe826866cc6a850e336f13929b2abf9"}],"stats":{"total":1404,"additions":1084,"deletions":320},"files":[{"sha":"3c007e00f288b974c18a1f626200273e5b1b167c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java?ref=49596dc4e61534de612f34573db3167e05ddf6d2","patch":"@@ -207,9 +207,13 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n             if (Proxies.isOwner(proxy, sm, field.getIndex()))\n                 ct = proxy.getChangeTracker();\n         }\n+        Column order = field.getOrderColumn();\n \n         // if no fine-grained change tracking then just delete and reinsert\n-        if (ct == null || !ct.isTracking()) {\n+        // if no fine-grained change tracking or if an item was removed\n+        // from an ordered collection, delete and reinsert\n+        if (ct == null || !ct.isTracking() ||\n+            (order != null && !ct.getRemoved().isEmpty())) {\n             delete(sm, store, rm);\n             insert(sm, rm, obj);\n             return;\n@@ -229,7 +233,7 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         int seq = ct.getNextSequence();\n         for (Iterator itr = add.iterator(); itr.hasNext(); seq++)\n             updateInverse(ctx, itr.next(), rel, rm, sm, seq);\n-        if (field.getOrderColumn() != null)\n+        if (order != null)\n             ct.setNextSequence(seq);\n     }\n "},{"sha":"cf30bebc4e3db2555dd3d9da42ad5395ac31da49","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BaseTestElement1.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BaseTestElement1.java","raw_url":"https://github.com/apache/openjpa/raw/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BaseTestElement1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BaseTestElement1.java?ref=49596dc4e61534de612f34573db3167e05ddf6d2","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.order;\n+\n+public class BaseTestElement1 {\n+\n+  private int id;\n+  \n+  private String name;\n+  \n+\n+  public BaseTestElement1() {        \n+  }\n+  \n+  public BaseTestElement1(String name) {\n+      this.name = name;\n+  }\n+  \n+  public void setName(String name) {\n+      this.name = name;\n+  }\n+\n+  public String getName() {\n+      return name;\n+  }\n+\n+  public void setId(int id) {\n+      this.id = id;\n+  }\n+\n+  public int getId() {\n+      return id;\n+  }\n+  \n+  public boolean equals(Object obj) {\n+      if (obj instanceof BaseTestElement1) {\n+          BaseTestElement1 bte = (BaseTestElement1)obj;\n+          return getId() == bte.getId() &&\n+             bte.getName().equalsIgnoreCase(bte.getName());                \n+      }\n+      return false;\n+  }\n+}"},{"sha":"aeb7eabb668dc52fe4516f66cf7f9185fc406a3f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BaseTestElement2.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BaseTestElement2.java","raw_url":"https://github.com/apache/openjpa/raw/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BaseTestElement2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BaseTestElement2.java?ref=49596dc4e61534de612f34573db3167e05ddf6d2","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.order;\n+\n+public class BaseTestElement2 {\n+\n+  private int id;\n+  \n+  private String name;\n+  \n+\n+  public BaseTestElement2() {        \n+  }\n+  \n+  public BaseTestElement2(String name) {\n+      this.name = name;\n+  }\n+  \n+  public void setName(String name) {\n+      this.name = name;\n+  }\n+\n+  public String getName() {\n+      return name;\n+  }\n+\n+  public void setId(int id) {\n+      this.id = id;\n+  }\n+\n+  public int getId() {\n+      return id;\n+  }\n+  \n+  public boolean equals(Object obj) {\n+      if (obj instanceof BaseTestElement2) {\n+          BaseTestElement2 bte = (BaseTestElement2)obj;\n+          return getId() == bte.getId() &&\n+             bte.getName().equalsIgnoreCase(bte.getName());                \n+      }\n+      return false;\n+  }\n+}"},{"sha":"a1a4f87223fefe7885e6f8e78b4e8e5aea231aea","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BaseTestElement3.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BaseTestElement3.java","raw_url":"https://github.com/apache/openjpa/raw/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BaseTestElement3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BaseTestElement3.java?ref=49596dc4e61534de612f34573db3167e05ddf6d2","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.order;\n+\n+public class BaseTestElement3 {\n+\n+  private int id;\n+  \n+  private String name;\n+  \n+\n+  public BaseTestElement3() {        \n+  }\n+  \n+  public BaseTestElement3(String name) {\n+      this.name = name;\n+  }\n+  \n+  public void setName(String name) {\n+      this.name = name;\n+  }\n+\n+  public String getName() {\n+      return name;\n+  }\n+\n+  public void setId(int id) {\n+      this.id = id;\n+  }\n+\n+  public int getId() {\n+      return id;\n+  }\n+  \n+  public boolean equals(Object obj) {\n+      if (obj instanceof BaseTestElement3) {\n+          BaseTestElement3 bte = (BaseTestElement3)obj;\n+          return getId() == bte.getId() &&\n+             bte.getName().equalsIgnoreCase(bte.getName());                \n+      }\n+      return false;\n+  }\n+}"},{"sha":"cf181890fce5b88cb704ab3e046172e3eab5aa3c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BaseTestEntity1.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BaseTestEntity1.java","raw_url":"https://github.com/apache/openjpa/raw/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BaseTestEntity1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BaseTestEntity1.java?ref=49596dc4e61534de612f34573db3167e05ddf6d2","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.order;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+/*\n+ * Entity used for testing custom column definitions base values.  \n+ */\n+public class BaseTestEntity1 {\n+\n+    private int id;\n+    \n+    private List<BaseTestElement1> one2Melems;\n+        \n+    private List<BaseTestElement1> m2melems;\n+\n+    private Set<BaseTestElement1> collelems;\n+\n+    public void setOne2Melems(List<BaseTestElement1> one2Melems) {\n+        this.one2Melems = one2Melems;\n+    }\n+\n+    public List<BaseTestElement1> getOne2Melems() {\n+        return one2Melems;\n+    }\n+\n+    public void setCollelems(Set<BaseTestElement1> collelems) {\n+        this.collelems = collelems;\n+    }\n+\n+    public Set<BaseTestElement1> getCollelems() {\n+        return collelems;\n+    }\n+\n+    public void setM2melems(List<BaseTestElement1> m2melems) {\n+        this.m2melems = m2melems;\n+    }\n+\n+    public List<BaseTestElement1> getM2melems() {\n+        return m2melems;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }    \n+}"},{"sha":"4c609ae82189dde844d55a5bd1b5769db1aefc66","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BaseTestEntity2.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BaseTestEntity2.java","raw_url":"https://github.com/apache/openjpa/raw/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BaseTestEntity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BaseTestEntity2.java?ref=49596dc4e61534de612f34573db3167e05ddf6d2","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.order;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+/*\n+ * Entity used for testing custom column defintions base values.  \n+ */\n+public class BaseTestEntity2 {\n+\n+    private int id;\n+    \n+    private List<BaseTestElement2> one2Melems;\n+        \n+    private List<BaseTestElement2> m2melems;\n+\n+    private Set<BaseTestElement2> collelems;\n+\n+    public void setOne2Melems(List<BaseTestElement2> one2Melems) {\n+        this.one2Melems = one2Melems;\n+    }\n+\n+    public List<BaseTestElement2> getOne2Melems() {\n+        return one2Melems;\n+    }\n+\n+    public void setCollelems(Set<BaseTestElement2> collelems) {\n+        this.collelems = collelems;\n+    }\n+\n+    public Set<BaseTestElement2> getCollelems() {\n+        return collelems;\n+    }\n+\n+    public void setM2melems(List<BaseTestElement2> m2melems) {\n+        this.m2melems = m2melems;\n+    }\n+\n+    public List<BaseTestElement2> getM2melems() {\n+        return m2melems;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }    \n+}"},{"sha":"fae4476e52becd336f4671bbe87017ae68b0d7ea","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BaseTestEntity3.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BaseTestEntity3.java","raw_url":"https://github.com/apache/openjpa/raw/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BaseTestEntity3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BaseTestEntity3.java?ref=49596dc4e61534de612f34573db3167e05ddf6d2","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.order;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+/*\n+ * Entity used for testing custom column defintions base values.  \n+ */\n+public class BaseTestEntity3 {\n+\n+    private int id;\n+    \n+    private List<BaseTestElement3> one2Melems;\n+        \n+    private List<BaseTestElement3> m2melems;\n+\n+    private Set<BaseTestElement3> collelems;\n+\n+    public void setOne2Melems(List<BaseTestElement3> one2Melems) {\n+        this.one2Melems = one2Melems;\n+    }\n+\n+    public List<BaseTestElement3> getOne2Melems() {\n+        return one2Melems;\n+    }\n+\n+    public void setCollelems(Set<BaseTestElement3> collelems) {\n+        this.collelems = collelems;\n+    }\n+\n+    public Set<BaseTestElement3> getCollelems() {\n+        return collelems;\n+    }\n+\n+    public void setM2melems(List<BaseTestElement3> m2melems) {\n+        this.m2melems = m2melems;\n+    }\n+\n+    public List<BaseTestElement3> getM2melems() {\n+        return m2melems;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }    \n+}"},{"sha":"4e0522fff0fed2b73599198c5259001108ba564f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BiOrderEntity.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BiOrderEntity.java","raw_url":"https://github.com/apache/openjpa/raw/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BiOrderEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BiOrderEntity.java?ref=49596dc4e61534de612f34573db3167e05ddf6d2","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.order;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+\n+@Entity\n+public  class BiOrderEntity implements java.io.Serializable {\n+\n+    private static final long serialVersionUID = -1059986449941927485L;\n+\n+    @Id\n+    private int id;\n+\n+    private String name;\n+\n+    @ManyToOne\n+    private BiOrderMappedByEntity bo2mbEntity;\n+        \n+    public BiOrderEntity() {\n+    }\n+\n+    public BiOrderEntity(String name) {\n+        this.id = name.charAt(0) - 'A' + 1;\n+        this.name = name;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public BiOrderMappedByEntity getEntity() {\n+        return bo2mbEntity;\n+    }\n+\n+    public void setEntity(BiOrderMappedByEntity ent) {\n+        this.bo2mbEntity = ent;\n+    }\n+    \n+    public boolean equals(Object obj) {\n+        if (obj instanceof BiOrderEntity) {\n+            BiOrderEntity boe = (BiOrderEntity)obj;\n+            return boe.getId() == getId() &&\n+                boe.getName().equals(getName());\n+        }\n+        return false;\n+    }\n+}\n+"},{"sha":"e77c08f09ca5646b79b915b211e502cfe23b5609","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BiOrderMappedByEntity.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BiOrderMappedByEntity.java","raw_url":"https://github.com/apache/openjpa/raw/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BiOrderMappedByEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/BiOrderMappedByEntity.java?ref=49596dc4e61534de612f34573db3167e05ddf6d2","patch":"@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.order;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OrderColumn;\n+\n+@Entity\n+public class BiOrderMappedByEntity  {\n+\n+    @Id\n+    private int id;\n+\n+    @OneToMany(mappedBy=\"bo2mbEntity\")\n+    @OrderColumn(name=\"bo2mEntities_ORDER\")\n+    private List<BiOrderEntity> bo2mEntities;\n+    \n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+\n+    public List<BiOrderEntity> getBo2mEntities() {\n+        return bo2mEntities;\n+    }\n+\n+    public void setBo2mEntity(List<BiOrderEntity> names) {\n+        this.bo2mEntities = names;\n+    }\n+\n+    public void addBo2mEntity(BiOrderEntity name) {\n+        if( bo2mEntities == null) {\n+            bo2mEntities = new ArrayList<BiOrderEntity>();\n+        }\n+        bo2mEntities.add(name);\n+    }\n+    \n+    public BiOrderEntity removeBo2mEntity(int location) {\n+        BiOrderEntity rtnVal = null;\n+        if( bo2mEntities != null) {\n+            rtnVal = bo2mEntities.remove(location);\n+        }\n+        return rtnVal;\n+    }\n+    \n+    public void insertBo2mEntity(int location, BiOrderEntity name) {\n+        if( bo2mEntities == null) {\n+            bo2mEntities = new ArrayList<BiOrderEntity>();\n+        }\n+        bo2mEntities.add(location, name);\n+    }\n+    \n+    public boolean equals(Object obj) {\n+        if (obj instanceof BiOrderMappedByEntity) {\n+            BiOrderMappedByEntity boe = (BiOrderMappedByEntity)obj;\n+            return boe.getId() == getId();\n+        }\n+        return false;\n+    }\n+}"},{"sha":"95cc8d3a0ddf5ac417dd6790a356b0dd455f629b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/TestOrderColumn.java","status":"modified","additions":108,"deletions":287,"changes":395,"blob_url":"https://github.com/apache/openjpa/blob/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/TestOrderColumn.java","raw_url":"https://github.com/apache/openjpa/raw/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/TestOrderColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/TestOrderColumn.java?ref=49596dc4e61534de612f34573db3167e05ddf6d2","patch":"@@ -18,42 +18,25 @@\n  */\n package org.apache.openjpa.persistence.jdbc.order;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.InputStreamReader;\n-import java.io.OutputStreamWriter;\n import java.sql.Connection;\n import java.sql.DatabaseMetaData;\n-import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.Calendar;\n import java.util.Collection;\n import java.util.HashSet;\n-import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Random;\n-import java.util.Set;\n import java.util.TreeMap;\n \n import javax.persistence.Query;\n \n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n-import org.apache.openjpa.jdbc.schema.Sequence;\n-import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n-import org.apache.openjpa.lib.meta.MetaDataSerializer;\n-import org.apache.openjpa.meta.ClassMetaData;\n-import org.apache.openjpa.meta.MetaDataRepository;\n-import org.apache.openjpa.persistence.ArgumentException;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\n-import org.apache.openjpa.persistence.jdbc.XMLPersistenceMappingParser;\n-import org.apache.openjpa.persistence.jdbc.XMLPersistenceMappingSerializer;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n public class TestOrderColumn extends SingleEMFTestCase {   \n@@ -66,7 +49,7 @@ public void setUp() {\n                 Trainer.class, Game.class, Inning.class,\n                 Course.class, Student.class,\n                 Owner.class, Bicycle.class, Car.class, Home.class,\n-                Widget.class);\n+                Widget.class,BiOrderMappedByEntity.class, BiOrderEntity.class );\n         try {\n             createQueryData();\n         } catch (Exception e) {\n@@ -138,6 +121,74 @@ public void testOneToManyElementRemoval() {\n         em.close();        \n     }\n \n+    /*\n+     * Verifies that a collection remains contiguous and element\n+     * indexes are reordered if an element is removed for a\n+     * OneToMany relationship \n+     */\n+    public void testOneToManyBiDirElementRemoval() {\n+        OpenJPAEntityManagerSPI em = emf.createEntityManager();\n+\n+        // Verify field name is the default via fm\n+        validateOrderColumnName(BiOrderMappedByEntity.class, \"bo2mEntities\", \n+            \"bo2mEntities_ORDER\");\n+\n+        // Create some data\n+        BiOrderMappedByEntity bome = new BiOrderMappedByEntity();\n+        bome.setId(1);\n+        List<BiOrderEntity> boea = new ArrayList<BiOrderEntity>();\n+        for (int i = 0; i < 5; i++) {\n+            BiOrderEntity boe = new BiOrderEntity();\n+            boe.setId(i+1);\n+            boe.setName(\"Entity\" + i);\n+            boe.setEntity(bome);\n+            boea.add(boe);\n+            bome.addBo2mEntity(boe);\n+        }\n+\n+        // Persist\n+        em.getTransaction().begin();\n+        em.persist(bome);\n+        for (BiOrderEntity boe : boea) {\n+            em.persist(boe);\n+        }\n+        em.getTransaction().commit();        \n+        em.refresh(bome);\n+        em.clear();\n+        \n+        // Verify order is correct.\n+        BiOrderMappedByEntity newBome = em.find(BiOrderMappedByEntity.class, \n+            bome.getId());\n+        assertNotNull(newBome);\n+        for (int i = 0; i < 5 ; i++) {\n+            assertEquals(newBome.getBo2mEntities().get(i), boea.get(i));\n+        }\n+        \n+        // Remove an item\n+        em.getTransaction().begin();\n+        newBome.getBo2mEntities().get(2).setEntity(null);\n+        newBome.removeBo2mEntity(2);\n+        boea.remove(2);\n+        em.getTransaction().commit();\n+        em.clear();\n+\n+        // Simple assertion via find\n+        newBome = em.find(BiOrderMappedByEntity.class, bome.getId());\n+        assertNotNull(newBome);\n+        assertNotNull(newBome.getBo2mEntities());\n+        assertEquals(boea.size(), newBome.getBo2mEntities().size());\n+        for (int i = 0; i < boea.size() ; i++) {\n+              assertEquals(newBome.getBo2mEntities().get(i), (boea.get(i)));\n+        }\n+\n+        // Stronger assertion via INDEX value\n+        validateIndexAndValues(em, \"BiOrderMappedByEntity\", \"bo2mEntities\", 0, \n+            boea.toArray(), \"id\", \n+            bome.getId());\n+        \n+        em.close();\n+    }\n+\n     /*\n      * Verifies that a collection remains contiguous and element\n      * indexes are reordered if an element is removed for an\n@@ -181,23 +232,28 @@ public void testElementCollectionElementRemoval() {\n         \n         // Remove some dates\n         em.getTransaction().begin();\n-        game.getRainDates().remove(4);\n+        newGame.getRainDates().remove(4);\n         rainDates.remove(4);\n-        game.getRainDates().remove(2);\n+        newGame.getRainDates().remove(2);\n         rainDates.remove(2);\n         em.getTransaction().commit();\n         em.clear();\n \n         newGame = em.find(Game.class, game.getId());\n         assertNotNull(newGame);\n-        assertNotNull(game.getRainDates());\n-        assertEquals(8, game.getRainDates().size());\n+        assertNotNull(newGame.getRainDates());\n+        assertEquals(8, newGame.getRainDates().size());\n         // Verify the order\n-        for (int i = 0; i < game.getRainDates().size(); i++) {\n-            assertEquals(game.getRainDates().get(i),\n-                rainDates.get(i));\n+        for (int i = 0; i < newGame.getRainDates().size(); i++) {\n+            assertEquals(newGame.getRainDates().get(i).toString(),\n+                rainDates.get(i).toString());\n         }\n         \n+        // Stronger assertion via INDEX value\n+        validateCollIndexAndValues(em, \"Game\", \"rainDates\", 0, \n+            newGame.getRainDates().toArray(), \"id\", \n+            newGame.getId());\n+        \n         em.close();\n     }\n     /*\n@@ -643,34 +699,6 @@ public void testElementCollectionEmbeddables() {\n         em.close();        \n     }\n \n-    /*\n-     * Validates the use of the nullable attribute on OrderColumn through\n-     * an entity defined in orm.xml\n-     */\n-    public void testOrderColumnNullableFalse() {\n-        \n-        OpenJPAEntityManagerFactorySPI emf1 = \n-            (OpenJPAEntityManagerFactorySPI)OpenJPAPersistence.\n-            createEntityManagerFactory(\"BaseNoNullTest\",\n-            \"org/apache/openjpa/persistence/jdbc/order/\" +\n-            \"order-persistence-4.xml\");\n-\n-        validateOrderColumnNullable(emf1, BaseTestEntity.class, \n-            \"one2Melems\", false);\n-\n-        validateOrderColumnNullable(emf1, BaseTestEntity.class, \n-                \"collelems\", false);\n-\n-        validateOrderColumnNullable(emf1, BaseTestEntity.class, \n-                \"m2melems\", false);\n-\n-        try {\n-            if (emf1 != null)\n-                cleanupEMF(emf1);\n-        } catch (Exception e) {\n-            fail(e.getMessage());\n-        }        \n-    }\n \n     /*\n      * Validates the use of the updatable on OrderColumn.  insertable=false \n@@ -711,76 +739,6 @@ public void testOrderColumnUpdateable() {\n         em.close();\n     }\n \n-    /*\n-     * Validates the use of the columnDefinition attribute on OrderColumn. This\n-     * test will be skipped unless the database in use is Derby since the \n-     * annotation column definition attribute value is hard coded and all \n-     * databases may not support the supplied column definition. \n-     */\n-    public void testOrderColumnColumnDefinition() {\n-        if (!isTargetPlatform(\"derby\")) {\n-            return;\n-        }\n-\n-        OpenJPAEntityManagerFactorySPI emf1 = \n-            (OpenJPAEntityManagerFactorySPI)OpenJPAPersistence.\n-            createEntityManagerFactory(\"ColDefTest\",\n-            \"org/apache/openjpa/persistence/jdbc/order/\" +\n-            \"order-persistence-2.xml\");\n-\n-        // Create the EM.  This will spark the mapping tool.\n-        OpenJPAEntityManagerSPI em = emf1.createEntityManager();        \n-        // \n-        // Create a collection using a custom column definition\n-        validateOrderColumnDef(emf1, ColDefTestEntity.class, \n-            \"one2Mcoldef\", \"BIGINT\");\n-\n-        validateOrderColumnDef(emf1, ColDefTestEntity.class, \n-            \"collcoldef\", \"BIGINT\");\n-\n-        validateOrderColumnDef(emf1, ColDefTestEntity.class, \n-            \"m2mcoldef\", \"BIGINT\");\n-\n-        // Add and query some values\n-        ColDefTestEntity cdent = new ColDefTestEntity();\n-        \n-        ColDefTestElement cdel1 = new ColDefTestElement(\"Element1\");\n-        ColDefTestElement cdel2 = new ColDefTestElement(\"Element2\");\n-        ColDefTestElement cdel3 = new ColDefTestElement(\"Element3\");\n-        \n-        List<ColDefTestElement> one2Mcoldef = \n-            new ArrayList<ColDefTestElement>();\n-        one2Mcoldef.add(cdel3);\n-        one2Mcoldef.add(cdel2);\n-        one2Mcoldef.add(cdel1);\n-        cdent.setOne2Mcoldef(one2Mcoldef);\n-\n-        Set<ColDefTestElement> collcoldef = \n-            new LinkedHashSet<ColDefTestElement>();\n-        collcoldef.add(cdel1);\n-        collcoldef.add(cdel2);\n-        collcoldef.add(cdel3);\n-        cdent.setCollcoldef(collcoldef);\n-        \n-        List<ColDefTestElement> m2mcoldef = new ArrayList<ColDefTestElement>();\n-        m2mcoldef.add(cdel2);\n-        m2mcoldef.add(cdel1);\n-        m2mcoldef.add(cdel3);\n-        cdent.setM2mcoldef(m2mcoldef);\n-        \n-        em.getTransaction().begin();\n-        em.persist(cdent);\n-        em.getTransaction().commit();\n-        \n-        em.close();\n-        try {\n-            if (emf1 != null)\n-                cleanupEMF(emf1);\n-        } catch (Exception e) {\n-            fail(e.getMessage());\n-        }\n-    }\n-\n     /*\n      * Validates the use of the table attribute on OrderColumn with\n      * o2o, o2m, m2m, and collection table - with and without join\n@@ -861,37 +819,6 @@ public void testOrderColumnTable() {\n         em.close();\n     }    \n \n-    /**\n-     * Validates the use of the table attribute defined in XML\n-     */\n-    public void testOrderColumnTableXML() {   \n-        \n-        OpenJPAEntityManagerFactorySPI emf1 = \n-            (OpenJPAEntityManagerFactorySPI)OpenJPAPersistence.\n-            createEntityManagerFactory(\"TableTest\", \n-            \"org/apache/openjpa/persistence/jdbc/order/\" +\n-            \"order-persistence-5.xml\");\n-        \n-        OpenJPAEntityManagerSPI em = emf1.createEntityManager();\n-        \n-        validateOrderColumnTable(emf1, BaseTestEntity.class, \"one2Melems\", \n-            \"xml_o2m_table\", \"one2MOrder\"); \n-                    \n-        validateOrderColumnTable(emf1, BaseTestEntity.class, \"m2melems\", \n-             \"xml_m2m_table\", \"m2morder\"); \n-\n-        validateOrderColumnTable(emf1, BaseTestEntity.class, \"collelems\", \n-             \"xml_coll_table\", \"collelems_ORDER\"); \n-        \n-        em.close();\n-        try {\n-            if (emf1 != null)\n-                cleanupEMF(emf1);\n-        } catch (Exception e) {\n-            fail(e.getMessage());\n-        }        \n-    }\n-\n     /*\n      * Validates the use of order column (via INDEX) in the predicate of a\n      * JPQL query.\n@@ -959,104 +886,6 @@ public void testOrderColumnProjectionQuery() {\n         em.close();\n     }\n     \n-    /*\n-     * Validates OrderBy and OrderColumn should not be specified together per \n-     * the JPA 2.0 spec.\n-     */\n-    public void testOrderColumnOrderBy() {\n-        \n-        OpenJPAEntityManagerFactorySPI emf1 = null;\n-        OpenJPAEntityManagerSPI em = null;\n-        try {\n-            emf1 = (OpenJPAEntityManagerFactorySPI)OpenJPAPersistence.\n-                createEntityManagerFactory(\"ObOcTest\", \n-                    \"org/apache/openjpa/persistence/jdbc/order/\" +\n-                    \"order-persistence-3.xml\");\n-        \n-            em = emf1.createEntityManager();\n-            \n-            ObOcEntity ent = new ObOcEntity();\n-            List<Integer> intList = new ArrayList<Integer>();\n-            intList.add(new Integer(10));\n-            intList.add(new Integer(20));\n-            ent.setIntList(intList);\n-            \n-            em.getTransaction().begin();\n-            em.persist(intList);\n-            em.getTransaction().commit();\n-\n-            em.close();\n-            em = null;\n-            fail(\"An exception should have been thrown.\");\n-        } catch (Exception e) {\n-            assertException(e, ArgumentException.class);\n-        } finally {\n-            if (em != null)\n-                em.close();\n-        }\n-        try {\n-            if (emf1 != null)\n-                cleanupEMF(emf1);\n-        } catch (Exception e) {\n-            fail(e.getMessage());\n-        }        \n-    }\n-    \n-    public void testOrderColumnMetaDataSerialization() \n-        throws Exception {\n-\n-        OpenJPAEntityManagerFactorySPI emf1 = \n-            (OpenJPAEntityManagerFactorySPI)OpenJPAPersistence.\n-            createEntityManagerFactory(\"BaseTest\", \n-            \"org/apache/openjpa/persistence/jdbc/order/\" +\n-            \"order-persistence.xml\");\n-\n-        OpenJPAConfiguration conf = emf1.getConfiguration();\n-        MetaDataRepository repos = conf.newMetaDataRepositoryInstance();\n-\n-        // Force entity resolution\n-        repos.getMetaData(BaseTestEntity.class, null, true);\n-\n-        XMLPersistenceMappingSerializer ser =\n-            new XMLPersistenceMappingSerializer((JDBCConfiguration)conf);\n-        ser.addAll(repos);\n-        ByteArrayOutputStream out = new ByteArrayOutputStream();\n-        ser.serialize(new OutputStreamWriter(out), MetaDataSerializer.PRETTY);\n-        byte[] bytes = out.toByteArray();\n-        \n-        XMLPersistenceMappingParser parser =\n-            new XMLPersistenceMappingParser((JDBCConfiguration)conf);\n-        parser.parse(new InputStreamReader\n-            (new ByteArrayInputStream(bytes)), \"bytes\");\n-        MetaDataRepository mdr2 = parser.getRepository();\n-\n-        ClassMetaData _entityMeta2 = \n-            mdr2.getMetaData(BaseTestEntity.class, null, true);\n-\n-        // Assert metadata is populated correctly\n-        FieldMapping fm = (FieldMapping)_entityMeta2.getField(\"one2Melems\");\n-        Column oc = fm.getOrderColumn();\n-        assertNotNull(oc);\n-        assertEquals(oc.getName(),\"one2MOrder\");\n-\n-        fm = (FieldMapping)_entityMeta2.getField(\"m2melems\");\n-        oc = fm.getOrderColumn();\n-        assertNotNull(oc);\n-        assertEquals(oc.getName(),\"m2morder\");\n-\n-        fm = (FieldMapping)_entityMeta2.getField(\"collelems\");\n-        oc = fm.getOrderColumn();\n-        assertNotNull(oc);\n-        assertEquals(oc.getName(),\"collelems_ORDER\");\n-\n-        try {\n-            if (emf1 != null)\n-                cleanupEMF(emf1);\n-        } catch (Exception e) {\n-            fail(e.getMessage());\n-        }        \n-    }\n-    \n     /*\n      * Create the data used by the query tests\n      */\n@@ -1126,7 +955,34 @@ private void validateIndexAndValues(OpenJPAEntityManagerSPI em,\n             assertEquals(val, objs[i]);\n         }\n     }\n+\n+    private void validateCollIndexAndValues(OpenJPAEntityManagerSPI em, \n+        String entity, String indexedCol, int base, Object[] objs, String\n+        idField, Object idValue) {\n+    String queryString =\n+        \"SELECT INDEX(b), b FROM \" + entity + \" a, IN(a.\" + indexedCol\n+            + \") b WHERE a.\" + idField + \" = :idVal\";\n+    em.clear();\n+    Query qry = em.createQuery(queryString);\n+    qry.setParameter(\"idVal\", idValue);\n+    List rlist = qry.getResultList();  \n     \n+    assertNotNull(rlist);\n+    assertEquals(objs.length, rlist.size()); \n+    TreeMap<Long, Object> objMap = new TreeMap<Long, Object>();\n+    for (int i = 0; i < objs.length; i++)\n+    {\n+        Object[] rvals = (Object[])rlist.get(i);\n+        Long idx = (Long)rvals[0];\n+        Object objVal = rvals[1];\n+        objMap.put(idx, objVal);\n+    }\n+    for (int i = 0; i < objs.length; i++) {\n+        Object val = objMap.get((new Long(base + i)));\n+        assertEquals(val, objs[i]);\n+    }\n+}\n+\n     private void validateOrderColumnName(Class clazz, String fieldName, \n             String columnName) {\n         validateOrderColumnName(emf, clazz, fieldName, columnName);\n@@ -1161,20 +1017,6 @@ private void validateOrderColumnTable(\n                 columnName));\n     }\n \n-    private void validateOrderColumnDef(\n-            OpenJPAEntityManagerFactorySPI emf1, Class clazz, String fieldName, \n-            String type) {        \n-            Column oc = getOrderColumn(emf1, clazz, fieldName);\n-            assertEquals(type, oc.getTypeName());\n-    }\n-\n-    private void validateOrderColumnNullable(\n-            OpenJPAEntityManagerFactorySPI emf1, Class clazz, String fieldName, \n-            boolean nullable) {\n-            Column oc = getOrderColumn(emf1, clazz, fieldName);\n-            assertEquals(nullable, !oc.isNotNull());\n-    }\n-\n     private void validateOrderColumnUpdatable(\n             OpenJPAEntityManagerFactorySPI emf1, Class clazz, String fieldName, \n             boolean updatable) {\n@@ -1227,25 +1069,4 @@ private boolean tableAndColumnExists(OpenJPAEntityManagerFactorySPI emf1,\n         }\n         return false;\n     }\n-    /**\n-     * Closes a specific entity manager factory and cleans up \n-     * associated tables.\n-     */\n-    private void cleanupEMF(OpenJPAEntityManagerFactorySPI emf1) \n-      throws Exception {\n-\n-        if (emf1 == null)\n-            return;\n-\n-        try {\n-            clear(emf1);\n-        } catch (Exception e) {\n-            // if a test failed, swallow any exceptions that happen\n-            // during tear-down, as these just mask the original problem.\n-            if (testResult.wasSuccessful())\n-                throw e;\n-        } finally {\n-            closeEMF(emf1);\n-        }\n-    }    \n  }"},{"sha":"697b1268d57041dafb69265538bc2ae8995bae57","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/TestOrderColumnXML.java","status":"added","additions":387,"deletions":0,"changes":387,"blob_url":"https://github.com/apache/openjpa/blob/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/TestOrderColumnXML.java","raw_url":"https://github.com/apache/openjpa/raw/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/TestOrderColumnXML.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/TestOrderColumnXML.java?ref=49596dc4e61534de612f34573db3167e05ddf6d2","patch":"@@ -0,0 +1,387 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.order;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.lib.meta.MetaDataSerializer;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.MetaDataRepository;\n+import org.apache.openjpa.persistence.ArgumentException;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.jdbc.XMLPersistenceMappingParser;\n+import org.apache.openjpa.persistence.jdbc.XMLPersistenceMappingSerializer;\n+import org.apache.openjpa.persistence.test.PersistenceTestCase;\n+\n+public class TestOrderColumnXML extends PersistenceTestCase {       \n+\n+    /*\n+     * Validates the use of the nullable attribute on OrderColumn through\n+     * an entity defined in orm.xml\n+     */\n+    public void testOrderColumnNullableFalse() {\n+        \n+        OpenJPAEntityManagerFactorySPI emf1 = \n+            (OpenJPAEntityManagerFactorySPI)OpenJPAPersistence.\n+            createEntityManagerFactory(\"BaseNoNullTest\",\n+            \"org/apache/openjpa/persistence/jdbc/order/\" +\n+            \"order-persistence-4.xml\");\n+\n+        OpenJPAConfiguration conf = emf1.getConfiguration();\n+        MetaDataRepository repos = conf.getMetaDataRepositoryInstance();\n+\n+        // Force entity resolution\n+        repos.getMetaData(BaseTestEntity2.class, null, true);\n+        \n+        OpenJPAEntityManagerSPI em = emf1.createEntityManager();\n+\n+        validateOrderColumnNullable(emf1, BaseTestEntity2.class, \n+            \"one2Melems\", false);\n+\n+        validateOrderColumnNullable(emf1, BaseTestEntity2.class, \n+                \"collelems\", false);\n+\n+        validateOrderColumnNullable(emf1, BaseTestEntity2.class, \n+                \"m2melems\", false);\n+\n+        em.close();\n+        try {\n+            if (emf1 != null)\n+                cleanupEMF(emf1);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            fail(e.getMessage());\n+        }        \n+    }\n+    \n+    /*\n+     * Validates the use of the columnDefinition attribute on OrderColumn. This\n+     * test will be skipped unless the database in use is Derby since the \n+     * annotation column definition attribute value is hard coded and all \n+     * databases may not support the supplied column definition. \n+     */\n+    public void testOrderColumnColumnDefinition() {\n+        if (!isTargetPlatform(\"derby\")) {\n+            return;\n+        }\n+\n+        OpenJPAEntityManagerFactorySPI emf1 = \n+            (OpenJPAEntityManagerFactorySPI)OpenJPAPersistence.\n+            createEntityManagerFactory(\"ColDefTest\",\n+            \"org/apache/openjpa/persistence/jdbc/order/\" +\n+            \"order-persistence-2.xml\");\n+\n+        // Create the EM.  This will spark the mapping tool.\n+        OpenJPAEntityManagerSPI em = emf1.createEntityManager();        \n+        // \n+        // Create a collection using a custom column definition\n+        validateOrderColumnDef(emf1, ColDefTestEntity.class, \n+            \"one2Mcoldef\", \"BIGINT\");\n+\n+        validateOrderColumnDef(emf1, ColDefTestEntity.class, \n+            \"collcoldef\", \"BIGINT\");\n+\n+        validateOrderColumnDef(emf1, ColDefTestEntity.class, \n+            \"m2mcoldef\", \"BIGINT\");\n+\n+        // Add and query some values\n+        ColDefTestEntity cdent = new ColDefTestEntity();\n+        \n+        ColDefTestElement cdel1 = new ColDefTestElement(\"Element1\");\n+        ColDefTestElement cdel2 = new ColDefTestElement(\"Element2\");\n+        ColDefTestElement cdel3 = new ColDefTestElement(\"Element3\");\n+        \n+        List<ColDefTestElement> one2Mcoldef = \n+            new ArrayList<ColDefTestElement>();\n+        one2Mcoldef.add(cdel3);\n+        one2Mcoldef.add(cdel2);\n+        one2Mcoldef.add(cdel1);\n+        cdent.setOne2Mcoldef(one2Mcoldef);\n+\n+        Set<ColDefTestElement> collcoldef = \n+            new LinkedHashSet<ColDefTestElement>();\n+        collcoldef.add(cdel1);\n+        collcoldef.add(cdel2);\n+        collcoldef.add(cdel3);\n+        cdent.setCollcoldef(collcoldef);\n+        \n+        List<ColDefTestElement> m2mcoldef = new ArrayList<ColDefTestElement>();\n+        m2mcoldef.add(cdel2);\n+        m2mcoldef.add(cdel1);\n+        m2mcoldef.add(cdel3);\n+        cdent.setM2mcoldef(m2mcoldef);\n+        \n+        em.getTransaction().begin();\n+        em.persist(cdent);\n+        em.getTransaction().commit();\n+        \n+        em.close();\n+        try {\n+            if (emf1 != null)\n+                cleanupEMF(emf1);\n+        } catch (Exception e) {\n+            fail(e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Validates the use of the table attribute defined in XML\n+     */\n+    public void testOrderColumnTableXML() {   \n+        \n+        OpenJPAEntityManagerFactorySPI emf1 = \n+            (OpenJPAEntityManagerFactorySPI)OpenJPAPersistence.\n+            createEntityManagerFactory(\"TableTest\", \n+            \"org/apache/openjpa/persistence/jdbc/order/\" +\n+            \"order-persistence-5.xml\");\n+        \n+        OpenJPAEntityManagerSPI em = emf1.createEntityManager();\n+        \n+        validateOrderColumnTable(emf1, BaseTestEntity3.class, \"one2Melems\", \n+            \"xml_o2m_table\", \"one2MOrder\"); \n+                    \n+        validateOrderColumnTable(emf1, BaseTestEntity3.class, \"m2melems\", \n+             \"xml_m2m_table\", \"m2morder\"); \n+\n+        validateOrderColumnTable(emf1, BaseTestEntity3.class, \"collelems\", \n+             \"xml_coll_table\", \"collelems_ORDER\"); \n+        \n+        em.close();\n+        try {\n+            if (emf1 != null)\n+                cleanupEMF(emf1);\n+        } catch (Exception e) {\n+            fail(e.getMessage());\n+        }        \n+    }\n+\n+    \n+    /*\n+     * Validates OrderBy and OrderColumn should not be specified together per \n+     * the JPA 2.0 spec.\n+     */\n+    public void testOrderColumnOrderBy() {\n+        \n+        OpenJPAEntityManagerFactorySPI emf1 = null;\n+        OpenJPAEntityManagerSPI em = null;\n+        try {\n+            emf1 = (OpenJPAEntityManagerFactorySPI)OpenJPAPersistence.\n+                createEntityManagerFactory(\"ObOcTest\", \n+                    \"org/apache/openjpa/persistence/jdbc/order/\" +\n+                    \"order-persistence-3.xml\");\n+        \n+            em = emf1.createEntityManager();\n+            \n+            ObOcEntity ent = new ObOcEntity();\n+            List<Integer> intList = new ArrayList<Integer>();\n+            intList.add(new Integer(10));\n+            intList.add(new Integer(20));\n+            ent.setIntList(intList);\n+            \n+            em.getTransaction().begin();\n+            em.persist(intList);\n+            em.getTransaction().commit();\n+\n+            em.close();\n+            em = null;\n+            fail(\"An exception should have been thrown.\");\n+        } catch (Exception e) {\n+            assertException(e, ArgumentException.class);\n+        } finally {\n+            if (em != null)\n+                em.close();\n+        }\n+        try {\n+            if (emf1 != null)\n+                cleanupEMF(emf1);\n+        } catch (Exception e) {\n+            fail(e.getMessage());\n+        }        \n+    }\n+    \n+    public void testOrderColumnMetaDataSerialization() \n+        throws Exception {\n+\n+        OpenJPAEntityManagerFactorySPI emf1 = \n+            (OpenJPAEntityManagerFactorySPI)OpenJPAPersistence.\n+            createEntityManagerFactory(\"BaseTest\", \n+            \"org/apache/openjpa/persistence/jdbc/order/\" +\n+            \"order-persistence.xml\");\n+\n+        OpenJPAConfiguration conf = emf1.getConfiguration();\n+        MetaDataRepository repos = conf.newMetaDataRepositoryInstance();\n+\n+        // Force entity resolution\n+        repos.getMetaData(BaseTestEntity1.class, null, true);\n+\n+        XMLPersistenceMappingSerializer ser =\n+            new XMLPersistenceMappingSerializer((JDBCConfiguration)conf);\n+        ser.addAll(repos);\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        ser.serialize(new OutputStreamWriter(out), MetaDataSerializer.PRETTY);\n+        byte[] bytes = out.toByteArray();\n+        \n+        XMLPersistenceMappingParser parser =\n+            new XMLPersistenceMappingParser((JDBCConfiguration)conf);\n+        parser.parse(new InputStreamReader\n+            (new ByteArrayInputStream(bytes)), \"bytes\");\n+        MetaDataRepository mdr2 = parser.getRepository();\n+\n+        ClassMetaData _entityMeta2 = \n+            mdr2.getMetaData(BaseTestEntity1.class, null, true);\n+\n+        // Assert metadata is populated correctly\n+        FieldMapping fm = (FieldMapping)_entityMeta2.getField(\"one2Melems\");\n+        Column oc = fm.getOrderColumn();\n+        assertNotNull(oc);\n+        assertEquals(oc.getName(),\"one2MOrder\");\n+\n+        fm = (FieldMapping)_entityMeta2.getField(\"m2melems\");\n+        oc = fm.getOrderColumn();\n+        assertNotNull(oc);\n+        assertEquals(oc.getName(),\"m2morder\");\n+\n+        fm = (FieldMapping)_entityMeta2.getField(\"collelems\");\n+        oc = fm.getOrderColumn();\n+        assertNotNull(oc);\n+        assertEquals(oc.getName(),\"collelems_ORDER\");\n+\n+        try {\n+            if (emf1 != null)\n+                cleanupEMF(emf1);\n+        } catch (Exception e) {\n+            fail(e.getMessage());\n+        }        \n+    }\n+               \n+    private Column getOrderColumn(OpenJPAEntityManagerFactorySPI emf1, \n+        Class clazz, String fieldName) {\n+        JDBCConfiguration conf = (JDBCConfiguration) emf1.getConfiguration();\n+        ClassMapping cls = conf.getMappingRepositoryInstance().\n+            getMapping(clazz, null, true);\n+        FieldMapping fm = cls.getFieldMapping(fieldName);\n+        Column oc = fm.getOrderColumn();\n+        assertNotNull(oc);\n+        return oc;\n+    }\n+\n+    private void validateOrderColumnTable(\n+            OpenJPAEntityManagerFactorySPI emf1, \n+            Class clazz, String fieldName, String tableName, \n+            String columnName) {        \n+            Column oc = getOrderColumn(emf1, clazz, fieldName);\n+            // Verify the oc has the correct table name\n+            assertTrue(oc.getTableName().equalsIgnoreCase(tableName));\n+            // Verify the table exists in the db\n+            assertTrue(tableAndColumnExists(emf1, null, tableName, null, \n+                columnName));\n+    }\n+\n+    private void validateOrderColumnDef(\n+            OpenJPAEntityManagerFactorySPI emf1, Class clazz, String fieldName, \n+            String type) {        \n+            Column oc = getOrderColumn(emf1, clazz, fieldName);\n+            assertEquals(type, oc.getTypeName());\n+    }\n+\n+    private void validateOrderColumnNullable(\n+            OpenJPAEntityManagerFactorySPI emf1, Class clazz, String fieldName, \n+            boolean nullable) {\n+            Column oc = getOrderColumn(emf1, clazz, fieldName);\n+            assertEquals(nullable, !oc.isNotNull());\n+    }\n+\n+\n+    /**\n+     * Method to verify a table was created for the given name and schema\n+     */\n+    private boolean tableAndColumnExists(OpenJPAEntityManagerFactorySPI emf1, \n+            OpenJPAEntityManagerSPI em, String tableName, String schemaName,\n+            String columnName) {\n+        JDBCConfiguration conf = (JDBCConfiguration) emf1.getConfiguration();\n+        DBDictionary dict = conf.getDBDictionaryInstance();\n+        OpenJPAEntityManagerSPI em1 = em;\n+                \n+        // If no em supplied, create one\n+        if (em1 == null) {\n+            em1 = emf1.createEntityManager();\n+        }\n+        Connection conn = (Connection)em1.getConnection();\n+        try {\n+            DatabaseMetaData dbmd = conn.getMetaData();\n+            // (meta, catalog, schemaName, tableName, conn)\n+            Column[] cols = dict.getColumns(dbmd, null, null, \n+                    tableName, columnName, conn);\n+            if (cols != null && cols.length == 1) {\n+                Column col = cols[0];\n+                String colName = col.getName();\n+                if (col.getTableName().equalsIgnoreCase(tableName) &&\n+                    (schemaName == null || \n+                    col.getSchemaName().equalsIgnoreCase(schemaName)) &&\n+                    colName.equalsIgnoreCase(columnName))\n+                    return true;\n+            }\n+        } catch (Throwable e) {\n+            fail(\"Unable to get column information.\");\n+        } finally {\n+            if (em == null) {\n+                em1.close();\n+            }\n+        }\n+        return false;\n+    }\n+    /**\n+     * Closes a specific entity manager factory and cleans up \n+     * associated tables.\n+     */\n+    private void cleanupEMF(OpenJPAEntityManagerFactorySPI emf1) \n+      throws Exception {\n+\n+        if (emf1 == null)\n+            return;\n+\n+        try {\n+            clear(emf1);\n+        } catch (Exception e) {\n+            // if a test failed, swallow any exceptions that happen\n+            // during tear-down, as these just mask the original problem.\n+            if (testResult.wasSuccessful())\n+                throw e;\n+        } finally {\n+            closeEMF(emf1);\n+        }\n+    }    \n+ }"},{"sha":"b3488c6460316dece94eb71aa4da1893b357be58","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java?ref=49596dc4e61534de612f34573db3167e05ddf6d2","patch":"@@ -526,6 +526,25 @@ protected boolean isRunsOnCurrentPlatform() {\n         return false;\n     }\n     \n+    /**\n+     * Determines whether specified platform is the target database platform\n+     * in use by the test framework.\n+     * @param target platform name (derby, db2, oracle, etc.)\n+     * @return true if the specified platform matches the platform in use\n+     */\n+    public boolean isTargetPlatform(String target) {\n+        String url = getPlatform();\n+        return url != null && url.indexOf(target) != -1;\n+    }\n+\n+    /**\n+     * Returns the platform in use by the test framework\n+     * @return the database platform\n+     */\n+    public String getPlatform() {\n+        return System.getProperty(\"platform\", \"derby\");\n+    }\n+    \n     private static class FixedMap extends LinkedHashMap<EMFKey,\n             OpenJPAEntityManagerFactorySPI> {\n         public boolean removeEldestEntry(Map.Entry<EMFKey,"},{"sha":"278346c25ad69e1487af6feebbbb27dd4fdcb423","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","status":"modified","additions":0,"deletions":19,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java?ref=49596dc4e61534de612f34573db3167e05ddf6d2","patch":"@@ -147,25 +147,6 @@ public int count(Class<?> c) {\n     \treturn (List<T>)em.createQuery(\"SELECT p FROM \" + getAlias(t) + \" p\")\n \t\t\t\t   .getResultList();\n     }\n-\n-    /**\n-     * Determines whether specified platform is the target database platform\n-     * in use by the test framework.\n-     * @param target platform name (derby, db2, oracle, etc.)\n-     * @return true if the specified platform matches the platform in use\n-     */\n-    public boolean isTargetPlatform(String target) {\n-        String url = getPlatform();\n-        return url != null && url.indexOf(target) != -1;\n-    }\n-\n-    /**\n-     * Returns the platform in use by the test framework\n-     * @return the database platform\n-     */\n-    public String getPlatform() {\n-        return System.getProperty(\"platform\", \"derby\");\n-    }\n     \n     public String getAlias(Class<?> t) {\n         return emf.getConfiguration().getMetaDataRepositoryInstance()"},{"sha":"32dca13418f411995cb57e3bad95c0f68a386d67","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=49596dc4e61534de612f34573db3167e05ddf6d2","patch":"@@ -45,6 +45,9 @@\n         <mapping-file>org/apache/openjpa/persistence/access/access-def-prop-orm.xml</mapping-file>\n         <mapping-file>org/apache/openjpa/persistence/access/access-pudef-field-orm.xml</mapping-file>\n         <mapping-file>org/apache/openjpa/persistence/access/access-pudef-prop-orm.xml</mapping-file>\n+        <mapping-file>org/apache/openjpa/persistence/jdbc/order/order-orm.xml</mapping-file>\n+        <mapping-file>org/apache/openjpa/persistence/jdbc/order/order-orm-2.xml</mapping-file>\n+        <mapping-file>org/apache/openjpa/persistence/jdbc/order/order-orm-3.xml</mapping-file>        \n         <properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\"\n                 value=\"buildSchema(ForeignKeys=true)\"/>"},{"sha":"e1297af48a82408b3522ffed5ceb1406636bca26","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/order/order-orm-2.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/order/order-orm-2.xml","raw_url":"https://github.com/apache/openjpa/raw/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/order/order-orm-2.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/order/order-orm-2.xml?ref=49596dc4e61534de612f34573db3167e05ddf6d2","patch":"@@ -24,7 +24,7 @@\n     <package>\n         org.apache.openjpa.persistence.jdbc.order\n     </package>\n-    <entity name=\"BaseTestNoNullElement\" class=\"BaseTestElement\" \n+    <entity name=\"BaseTestNoNullElement\" class=\"BaseTestElement2\" \n         access=\"PROPERTY\">\n         <table name=\"BTNNEL\"/>        \n         <attributes>\n@@ -34,7 +34,7 @@\n             <basic name=\"name\"/>\n         </attributes>\n     </entity>\n-    <entity name=\"BaseTestNoNullEntity\" class=\"BaseTestEntity\" access=\"FIELD\">\n+    <entity name=\"BaseTestNoNullEntity\" class=\"BaseTestEntity2\" access=\"FIELD\">\n         <table name=\"BTNNEN\"/>\n         <attributes>\n             <id name=\"id\">"},{"sha":"973442a5a367ccae8916eea9260a29f80ac4fe62","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/order/order-orm-3.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/order/order-orm-3.xml","raw_url":"https://github.com/apache/openjpa/raw/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/order/order-orm-3.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/order/order-orm-3.xml?ref=49596dc4e61534de612f34573db3167e05ddf6d2","patch":"@@ -24,7 +24,7 @@\n     <package>\n         org.apache.openjpa.persistence.jdbc.order\n     </package>\n-    <entity name=\"BaseTestTableElement\" class=\"BaseTestElement\" \n+    <entity name=\"BaseTestTableElement\" class=\"BaseTestElement3\" \n         access=\"PROPERTY\">\n         <table name=\"BTTEL\"/>        \n         <attributes>\n@@ -34,7 +34,7 @@\n             <basic name=\"name\"/>\n         </attributes>\n     </entity>\n-    <entity name=\"BaseTestTableEntity\" class=\"BaseTestEntity\" access=\"FIELD\">\n+    <entity name=\"BaseTestTableEntity\" class=\"BaseTestEntity3\" access=\"FIELD\">\n         <table name=\"BTNNEN\"/>\n         <attributes>\n             <id name=\"id\">"},{"sha":"6759bcd9c60afa201b485b139bbe636b3ae78c35","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/order/order-orm.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/order/order-orm.xml","raw_url":"https://github.com/apache/openjpa/raw/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/order/order-orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/order/order-orm.xml?ref=49596dc4e61534de612f34573db3167e05ddf6d2","patch":"@@ -24,15 +24,15 @@\n     <package>\n         org.apache.openjpa.persistence.jdbc.order\n     </package>\n-    <entity name=\"BaseTestElement\" class=\"BaseTestElement\" access=\"PROPERTY\">\n+    <entity name=\"BaseTestElement\" class=\"BaseTestElement1\" access=\"PROPERTY\">\n         <attributes>\n             <id name=\"id\">\n                 <generated-value/>\n             </id>\n             <basic name=\"name\"/>\n         </attributes>\n     </entity>\n-    <entity name=\"BaseTestEntity\" class=\"BaseTestEntity\" access=\"FIELD\">\n+    <entity name=\"BaseTestEntity\" class=\"BaseTestEntity1\" access=\"FIELD\">\n         <attributes>\n             <id name=\"id\">\n                 <generated-value/>"},{"sha":"6ea60d2555c1b1e275575cb82527b62570cea007","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/order/order-persistence-4.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/order/order-persistence-4.xml","raw_url":"https://github.com/apache/openjpa/raw/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/order/order-persistence-4.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/order/order-persistence-4.xml?ref=49596dc4e61534de612f34573db3167e05ddf6d2","patch":"@@ -27,8 +27,8 @@\n         <description>PU for order column testing</description>\n         <provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n         <mapping-file>org/apache/openjpa/persistence/jdbc/order/order-orm-2.xml</mapping-file>\n-        <class>org.apache.openjpa.persistence.jdbc.order.BaseTestEntity</class>\n-        <class>org.apache.openjpa.persistence.jdbc.order.BaseTestElement</class>\n+        <class>org.apache.openjpa.persistence.jdbc.order.BaseTestEntity2</class>\n+        <class>org.apache.openjpa.persistence.jdbc.order.BaseTestElement2</class>\n         <properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema\"/>    \n         </properties>"},{"sha":"07b69d80c7f546588eab4e1e2b01e93fd094b021","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/order/order-persistence-5.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/order/order-persistence-5.xml","raw_url":"https://github.com/apache/openjpa/raw/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/order/order-persistence-5.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/order/order-persistence-5.xml?ref=49596dc4e61534de612f34573db3167e05ddf6d2","patch":"@@ -27,8 +27,8 @@\n         <description>PU for order column testing</description>\n         <provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n         <mapping-file>org/apache/openjpa/persistence/jdbc/order/order-orm-3.xml</mapping-file>\n-        <class>org.apache.openjpa.persistence.jdbc.order.BaseTestEntity</class>\n-        <class>org.apache.openjpa.persistence.jdbc.order.BaseTestElement</class>\n+        <class>org.apache.openjpa.persistence.jdbc.order.BaseTestEntity3</class>\n+        <class>org.apache.openjpa.persistence.jdbc.order.BaseTestElement3</class>\n         <properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema\"/>    \n         </properties>"},{"sha":"5144ebc125cc7bb657663372a4da82244d2f5a35","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/order/order-persistence.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/order/order-persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/49596dc4e61534de612f34573db3167e05ddf6d2/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/order/order-persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/order/order-persistence.xml?ref=49596dc4e61534de612f34573db3167e05ddf6d2","patch":"@@ -27,8 +27,8 @@\n         <description>PU for order column testing</description>\n         <provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n         <mapping-file>org/apache/openjpa/persistence/jdbc/order/order-orm.xml</mapping-file>\n-        <class>org.apache.openjpa.persistence.jdbc.order.BaseTestEntity</class>\n-        <class>org.apache.openjpa.persistence.jdbc.order.BaseTestElement</class>\n+        <class>org.apache.openjpa.persistence.jdbc.order.BaseTestEntity1</class>\n+        <class>org.apache.openjpa.persistence.jdbc.order.BaseTestElement1</class>\n         <properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema\"/>    \n         </properties>"}]}

