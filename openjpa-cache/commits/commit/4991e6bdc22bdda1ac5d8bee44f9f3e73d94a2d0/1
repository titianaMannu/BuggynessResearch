{"sha":"4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ5OTFlNmJkYzIyYmRkYTFhYzVkOGJlZTQ0ZjlmM2U3M2Q5NGEyZDA=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-11-12T02:04:12Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-11-12T02:04:12Z"},"message":"OPENJPA-1142 - Propagate lock level into LockException so that the proper optimistic/pessimistic exception is translated.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@835190 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7ae78e233549e78a155afe9530a630e1f1c20fbe","url":"https://api.github.com/repos/apache/openjpa/git/trees/7ae78e233549e78a155afe9530a630e1f1c20fbe"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0","html_url":"https://github.com/apache/openjpa/commit/4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0/comments","author":null,"committer":null,"parents":[{"sha":"983b34b68e9b5cf2fb5b78744f6bb2fcb654389c","url":"https://api.github.com/repos/apache/openjpa/commits/983b34b68e9b5cf2fb5b78744f6bb2fcb654389c","html_url":"https://github.com/apache/openjpa/commit/983b34b68e9b5cf2fb5b78744f6bb2fcb654389c"}],"stats":{"total":310,"additions":263,"deletions":47},"files":[{"sha":"46294b9e8c22f31c24c7f6a7341e4d7e9658d1d9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/GenericResultObjectProvider.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/GenericResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/GenericResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/GenericResultObjectProvider.java?ref=4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0","patch":"@@ -49,7 +49,7 @@\n      * @param fetch the fetch configuration, or null for default\n      * @param res the result containing the data\n      */\n-    public GenericResultObjectProvider(Class pcClass,\n+    public GenericResultObjectProvider(Class<?> pcClass,\n         JDBCStore store, JDBCFetchConfiguration fetch, Result res) {\n         this(store.getConfiguration().getMappingRepositoryInstance().getMapping\n             (pcClass, store.getContext().getClassLoader(), true),\n@@ -122,8 +122,7 @@ public void close() {\n \n     public void handleCheckedException(Exception e) {\n         if (e instanceof SQLException)\n-            throw SQLExceptions.getStore((SQLException) e,\n-                _store.getDBDictionary());\n+            throw SQLExceptions.getStore((SQLException) e, _store.getDBDictionary(), _fetch.getReadLockLevel());\n         throw new StoreException(e);\n     }\n }"},{"sha":"5efd1d0f8e2869b6215c4e8e7ec50c8effdee66d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":13,"deletions":14,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0","patch":"@@ -106,7 +106,7 @@\n     private boolean _active = false;\n \n     // track the pending statements so we can cancel them\n-    private Set _stmnts = Collections.synchronizedSet(new HashSet());\n+    private Set<Statement> _stmnts = Collections.synchronizedSet(new HashSet<Statement>());\n \n     private static final Constructor<ClientConnection> clientConnectionImpl;\n     private static final Constructor<RefCountConnection> refCountConnectionImpl;\n@@ -293,8 +293,7 @@ public boolean initialize(OpenJPAStateManager sm, PCState state,\n         } catch (ClassNotFoundException cnfe) {\n             throw new UserException(cnfe);\n         } catch (SQLException se) {\n-            throw SQLExceptions.getStoreSQLException(sm, se, _dict,\n-                fetch.getReadLockLevel());\n+            throw SQLExceptions.getStore(se, _dict, fetch.getReadLockLevel());\n         }\n     }\n \n@@ -346,7 +345,7 @@ protected boolean initializeState(OpenJPAStateManager sm, PCState state,\n \n             // figure out what type of object this is; the state manager\n             // only guarantees to provide a base class\n-            Class type;\n+            Class<?> type;\n             if ((type = getType(res, mapping)) == null) {\n                 if (res.getBaseMapping() != null)\n                     mapping = res.getBaseMapping();\n@@ -413,15 +412,15 @@ private void setInverseRelation(OpenJPAStateManager owner,\n                 Object coll =  owner.fetchObject(fms[i].getIndex());\n                 if (coll instanceof Map)\n                     coll = ((Map)coll).values();\n-                if (coll instanceof Collection && \n-                    ((Collection) coll).size() > 0) {\n+                if (coll instanceof Collection<?> && \n+                    ((Collection<?>) coll).size() > 0) {\n                     // Found eagerly loaded collection.\n                     // Publisher (1) <==>  (M) Magazine\n                     //    publisher has a EAGER OneToMany relation\n                     //    magazine has a EAGER or LAZY ManyToOne publisher\n                     // For each member (Magazine) in the collection, \n                     // set its inverse relation (Publisher).\n-                    for (Iterator itr = ((Collection) coll).iterator();\n+                    for (Iterator<?> itr = ((Collection<?>) coll).iterator();\n                         itr.hasNext();) {\n                         PersistenceCapable pc = (PersistenceCapable) itr.next();\n \n@@ -485,7 +484,7 @@ protected boolean isEmptyResult(Result res) throws SQLException {\n      * This method is to provide override for non-JDBC or JDBC-like \n      * implementation of getting type from the result set.\n      */\n-    protected Class getType(Result res, ClassMapping mapping){\n+    protected Class<?> getType(Result res, ClassMapping mapping){\n         if (res == null)\n             return mapping.getDescribedType();\n         return null;\n@@ -646,7 +645,7 @@ public boolean load(OpenJPAStateManager sm, BitSet fields,\n         } catch (ClassNotFoundException cnfe) {\n             throw new StoreException(cnfe);\n         } catch (SQLException se) {\n-            throw SQLExceptions.getStore(se, _dict);\n+            throw SQLExceptions.getStore(se, _dict, lockLevel);\n         }\n     }\n \n@@ -682,15 +681,15 @@ public boolean cancelAll() {\n         // we want to allow a different thread to be able to cancel the\n         // outstanding statement on a different context\n \n-        Collection stmnts;\n+        Collection<Statement> stmnts;\n         synchronized (_stmnts) {\n             if (_stmnts.isEmpty())\n                 return false;\n-            stmnts = new ArrayList(_stmnts);\n+            stmnts = new ArrayList<Statement>(_stmnts);\n         }\n \n         try {\n-            for (Iterator itr = stmnts.iterator(); itr.hasNext();)\n+            for (Iterator<Statement> itr = stmnts.iterator(); itr.hasNext();)\n                 ((Statement) itr.next()).cancel();\n             return true;\n         } catch (SQLException se) {\n@@ -724,13 +723,13 @@ public boolean assignField(OpenJPAStateManager sm, int field,\n         return true;\n     }\n \n-    public Class getManagedType(Object oid) {\n+    public Class<?> getManagedType(Object oid) {\n         if (oid instanceof Id)\n             return ((Id) oid).getType();\n         return null;\n     }\n \n-    public Class getDataStoreIdType(ClassMetaData meta) {\n+    public Class<?> getDataStoreIdType(ClassMetaData meta) {\n         return Id.class;\n     }\n "},{"sha":"1bcac2b2163aa6a86b3c09400fddb8d65732d435","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java?ref=4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0","patch":"@@ -137,8 +137,7 @@ private void lockRow(OpenJPAStateManager sm, int timeout, int level) {\n                 checkLock(rs, sm, timeout);\n             }\n         } catch (SQLException se) {\n-            throw SQLExceptions.getStoreSQLException(sm, se, dict,\n-                level);\n+            throw SQLExceptions.getStore(se, dict, level);\n         } finally {\n             if (stmnt != null)\n                 try { stmnt.close(); } catch (SQLException se) {}"},{"sha":"7dc01a36a6983bb47c6be731136b5cdf34bfd990","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SelectResultObjectProvider.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SelectResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SelectResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SelectResultObjectProvider.java?ref=4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0","patch":"@@ -152,8 +152,7 @@ public void close() {\n \n     public void handleCheckedException(Exception e) {\n         if (e instanceof SQLException)\n-            throw SQLExceptions.getStore((SQLException) e,\n-                _store.getDBDictionary());\n+            throw SQLExceptions.getStore((SQLException) e, _store.getDBDictionary(), _fetch.getReadLockLevel());\n         throw new StoreException(e);\n     }\n }"},{"sha":"d06501afc269bcf6ec380ceeeaf019efcdd3002f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java","status":"modified","additions":52,"deletions":26,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java","raw_url":"https://github.com/apache/openjpa/raw/4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java?ref=4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0","patch":"@@ -62,47 +62,90 @@ public static OpenJPAException getStore(SQLException se,\n         return getStore(se.getMessage(), se, dict);\n     }\n \n+    /**\n+     * Convert the specified exception into a {@link StoreException}.\n+     */\n+    public static OpenJPAException getStore(SQLException se,\n+        DBDictionary dict, int level) {\n+        return getStore(se.getMessage(), se, dict, level);\n+    }\n+\n     /**\n      * Convert the specified exception into a {@link StoreException}.\n      */\n     public static OpenJPAException getStore(SQLException se, Object failed,\n         DBDictionary dict) {\n-        return getStore(se.getMessage(), se, failed, dict);\n+        return getStore(se.getMessage(), se, failed, dict, -1);\n+    }\n+\n+    /**\n+     * Convert the specified exception into a {@link StoreException}.\n+     */\n+    public static OpenJPAException getStore(SQLException se, Object failed,\n+        DBDictionary dict, int level) {\n+        return getStore(se.getMessage(), se, failed, dict, level);\n     }\n \n     /**\n      * Convert the specified exception into a {@link StoreException}.\n      */\n     public static OpenJPAException getStore(Message msg, SQLException se,\n         DBDictionary dict) {\n-        return getStore(msg.getMessage(), se, null, dict);\n+        return getStore(msg.getMessage(), se, null, dict, -1);\n+    }\n+\n+    /**\n+     * Convert the specified exception into a {@link StoreException}.\n+     */\n+    public static OpenJPAException getStore(Message msg, SQLException se,\n+        DBDictionary dict, int level) {\n+        return getStore(msg.getMessage(), se, null, dict, level);\n     }\n \n     /**\n      * Convert the specified exception into a {@link StoreException}.\n      */\n     public static OpenJPAException getStore(String msg, SQLException se,\n         DBDictionary dict) {\n-        return getStore(msg, se, null, dict);\n+        return getStore(msg, se, null, dict, -1);\n+    }\n+\n+    /**\n+     * Convert the specified exception into a {@link StoreException}.\n+     */\n+    public static OpenJPAException getStore(String msg, SQLException se,\n+        DBDictionary dict, int level) {\n+        return getStore(msg, se, null, dict, level);\n     }\n \n     /**\n      * Convert the specified exception into a {@link StoreException}.\n      */\n     public static OpenJPAException getStore(String msg, SQLException se,\n         Object failed, DBDictionary dict) {\n+        return getStore(msg, se, failed, dict, -1);\n+    }\n+\n+    /**\n+     * Convert the specified exception into a {@link StoreException}.\n+     */\n+    public static OpenJPAException getStore(String msg, SQLException se,\n+        Object failed, DBDictionary dict, int level) {\n         if (msg == null)\n             msg = se.getClass().getName();\n         SQLException[] ses = getSQLExceptions(se);\n-        if (dict == null)\n-            return new StoreException(msg).setFailedObject(failed).\n-                setNestedThrowables(ses);\n-        return dict.newStoreException(msg, ses, failed);\n+        OpenJPAException storeEx = (dict == null) ? new StoreException(msg).setFailedObject(failed)\n+                .setNestedThrowables(ses) : dict.newStoreException(msg, ses, failed);\n+        if (level != -1 && storeEx.getSubtype() == StoreException.LOCK) {\n+            LockException lockEx = (LockException) storeEx;\n+            lockEx.setLockLevel(level);\n+        }\n+        return storeEx;\n     }\n     \n     /**\n-     * Returns an array of {@link SQLException} instances for the\n-     * specified exception.\n+     * Returns an array of {@link SQLException} instances for the specified\n+     * exception.\n      */\n     private static SQLException[] getSQLExceptions(SQLException se) {\n         if (se == null)\n@@ -115,21 +158,4 @@ public static OpenJPAException getStore(String msg, SQLException se,\n         }\n         return (SQLException[]) errs.toArray(new SQLException[errs.size()]);\n     }\n-    \n-    public static OpenJPAException getStoreSQLException(OpenJPAStateManager sm,\n-        SQLException se, DBDictionary dict, int level) {\n-        return getStoreSQLException(sm.getContext().getConfiguration(), se,\n-            dict, level);\n-    }\n-    \n-    public static OpenJPAException getStoreSQLException(\n-        OpenJPAConfiguration config, SQLException se, DBDictionary dict,\n-        int level) {\n-        OpenJPAException storeEx = SQLExceptions.getStore(se, dict);\n-        if (storeEx.getSubtype() == StoreException.LOCK) {\n-            LockException lockEx = (LockException) storeEx;\n-            lockEx.setLockLevel(level);\n-        }\n-        return storeEx;\n-    }\n }"},{"sha":"b816dc6f7dca2c379d4e4522b33ea827851996ee","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/LockEmployee.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/LockEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/LockEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/LockEmployee.java?ref=4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0","patch":"@@ -25,8 +25,14 @@\n \n import javax.persistence.Entity;\n import javax.persistence.Id;\n+import javax.persistence.NamedQuery;\n import javax.persistence.Version;\n \n+@NamedQuery(\n+        name=\"findEmployeeById\"\n+        , query=\"SELECT c FROM LockEmployee c WHERE c.id = :id\"\n+        )\n+\n @Entity\n public class LockEmployee implements Externalizable {\n "},{"sha":"bad7ae62c575d84716b45bbbc022982cf6205781","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/SequencedActionsTest.java","status":"modified","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/SequencedActionsTest.java","raw_url":"https://github.com/apache/openjpa/raw/4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/SequencedActionsTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/SequencedActionsTest.java?ref=4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0","patch":"@@ -33,7 +33,10 @@\n \n import javax.persistence.EntityManager;\n import javax.persistence.LockModeType;\n+import javax.persistence.Query;\n \n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n@@ -193,6 +196,8 @@ private void notifyParent() {\n         FindWithLock,      // (int id, LockModeType lockType,\n                            //      [String properties, Object value]*)\n         FindObject,        // (Object obj, LockModeType lockType)\n+        NamedQueryWithLock,// (String namedQuery, int id, LockModeType lockType,\n+                           //      [String properties, Object value]*)\n         Refresh,           // ([int id])\n         RefreshWithLock,   // (int id, LockModeType lockType,\n                            //      [String properties, Object value]*)\n@@ -384,6 +389,39 @@ private void launchCommonSequence(TestThread thisThread ) {\n                         (LockModeType) args[3]);\n                     // log.trace(\"Employee=\" + employee);\n                     break;\n+                case NamedQueryWithLock:\n+                    String namedQuery = \"????\";\n+                    if (args.length > 1) {\n+                        namedQuery = (String)args[1];\n+                    }\n+                    id = 1;\n+                    if (args.length > 2) {\n+                        id = (Integer)args[2];\n+                    }\n+                    lockMode = null;\n+                    if (args.length > 3) {\n+                        lockMode = (LockModeType)args[3];\n+                    }\n+                    Map<String, Object> queryProps = buildPropsMap(args, 4);\n+                    //TypedQuery<LockEmployee> q = em.createNamedQuery(namedQuery, LockEmployee.class);\n+                    Query q = em.createNamedQuery(namedQuery);\n+                    if( lockMode != null) {\n+                        q.setLockMode(lockMode);\n+                    }\n+                    if( queryProps != null) {\n+                        for( String name : queryProps.keySet()) {\n+                            q.setHint(name, queryProps.get(name));\n+                        }\n+                    }\n+                    q.setParameter(\"id\", id);\n+                    employee = (LockEmployee)q.getSingleResult();\n+                    log.trace(\"Employee=\" + employee);\n+                    if( employee != null ) {\n+                        employees.put(id, employee);\n+                    } else {\n+                        employees.remove(id);\n+                    }\n+                    break;\n                 case Persist:\n                     id = 1;\n                     if (args[1] != null) {\n@@ -931,4 +969,21 @@ public synchronized void run() {\n             }\n         }\n     }\n+\n+    protected enum DBType {\n+        access, db2, derby, empress, foxpro, h2, hsql, informix, ingres, jdatastore, mysql, oracle, pointbase, postgres,\n+        sqlserver, sybase\n+    };\n+\n+    protected DBType getDBType(EntityManager em) {\n+        JDBCConfigurationImpl conf = (JDBCConfigurationImpl) getConfiguration(em);\n+        String dictClassName = getConfiguration(em).getDBDictionaryInstance().getClass().getName();\n+        String db = conf.dbdictionaryPlugin.alias(dictClassName);\n+        return DBType.valueOf(db);\n+    }\n+\n+    @SuppressWarnings( { \"unused\", \"deprecation\" })\n+    protected JDBCConfiguration getConfiguration(EntityManager em) {\n+        return ((JDBCConfiguration) ((OpenJPAEntityManager) em).getConfiguration());\n+    }\n }"},{"sha":"d0d931fc1015e988bb53163a58beaa5e9dfacc26","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerDeadlock.java","status":"added","additions":133,"deletions":0,"changes":133,"blob_url":"https://github.com/apache/openjpa/blob/4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerDeadlock.java","raw_url":"https://github.com/apache/openjpa/raw/4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerDeadlock.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerDeadlock.java?ref=4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0","patch":"@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.lockmgr;\n+\n+import java.util.Arrays;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.LockModeType;\n+\n+/**\n+ * Test EntityManager find/namedQuery deadlock exceptions.\n+ */\n+public class TestMixedLockManagerDeadlock extends SequencedActionsTest {\n+    private DBType dbType;\n+    \n+    public void setUp() {\n+        setSupportedDatabases(\n+                org.apache.openjpa.jdbc.sql.DerbyDictionary.class,\n+                org.apache.openjpa.jdbc.sql.OracleDictionary.class,\n+                org.apache.openjpa.jdbc.sql.DB2Dictionary.class);\n+        if (isTestsDisabled()) {\n+            return;\n+        }\n+\n+        setUp(LockEmployee.class\n+            , \"openjpa.LockManager\", \"mixed\"\n+        );\n+        commonSetUp();\n+        EntityManager em = emf.createEntityManager();\n+        dbType = getDBType(em);\n+    }\n+\n+    /* ======== Find dead lock exception test ============*/\n+    public void testFindDeadLockException() {\n+        commonFindTest(\"testFindDeadLockException\", LockModeType.WRITE, dbType == DBType.oracle ? null\n+                : ExpectingOptimisticLockExClass);\n+        commonFindTest(\"testFindDeadLockException\", LockModeType.PESSIMISTIC_WRITE, ExpectingAnyLockExClass);\n+    }\n+\n+    private void commonFindTest( String testName, \n+        LockModeType t1Lock, Class<?>[] t1Exceptions ) {\n+        String[] parameters = new String[] { \"Thread 1: lock= \" + t1Lock + \", expectedEx= \"\n+                + Arrays.toString(t1Exceptions) };\n+            \n+        Object[][] threadMain = {\n+            {Act.CreateEm},\n+            {Act.StartTx},\n+            \n+            {Act.FindWithLock, 1, t1Lock},\n+            {Act.Flush},            \n+            \n+            {Act.NewThread, 1 },\n+            {Act.StartThread, 1 },\n+\n+            {Act.Wait, 0},\n+            {Act.FindWithLock, 2, t1Lock},                        \n+            \n+            {Act.WaitAllChildren},\n+            {Act.TestException, 1, t1Exceptions},\n+        };\n+        Object[][] thread1 = {\n+            {Act.CreateEm},\n+            {Act.StartTx},\n+            {Act.FindWithLock, 2, t1Lock},            \n+            {Act.Flush},            \n+\n+            {Act.Notify, 0},\n+            {Act.FindWithLock, 1, t1Lock},            \n+\n+            {Act.RollbackTx},\n+        };\n+        launchActionSequence(testName, parameters, threadMain, thread1);\n+    }\n+    \n+    /* ======== named query dead lock exception test ============*/\n+    public void testNamedQueryDeadLockException() {\n+        commonNamedQueryTest(\"testNamedQueryDeadLockException\", LockModeType.WRITE, dbType == DBType.oracle ? null\n+                : ExpectingOptimisticLockExClass);\n+        commonNamedQueryTest(\"testNamedQueryDeadLockException\", LockModeType.PESSIMISTIC_FORCE_INCREMENT,\n+                ExpectingAnyLockExClass);\n+    }\n+\n+    private void commonNamedQueryTest( String testName, \n+        LockModeType t1Lock, Class<?>[] t1Exceptions ) {\n+        String[] parameters = new String[] { \"Thread 1: lock= \" + t1Lock + \", expectedEx= \"\n+                + Arrays.toString(t1Exceptions) };\n+            \n+        Object[][] threadMain = {\n+            {Act.CreateEm},\n+            {Act.StartTx},\n+            \n+            {Act.NamedQueryWithLock, \"findEmployeeById\", 1, t1Lock, \"openjpa.hint.IgnorePreparedQuery\", true},\n+            {Act.Flush},            \n+            \n+            {Act.NewThread, 1 },\n+            {Act.StartThread, 1 },\n+\n+            {Act.Wait, 0},\n+            {Act.NamedQueryWithLock, \"findEmployeeById\", 2, t1Lock, \"openjpa.hint.IgnorePreparedQuery\", true},                        \n+            \n+            {Act.WaitAllChildren},\n+            {Act.TestException, 1, t1Exceptions},\n+        };\n+        Object[][] thread1 = {\n+            {Act.CreateEm},\n+            {Act.StartTx},\n+            {Act.NamedQueryWithLock, \"findEmployeeById\", 2, t1Lock, \"openjpa.hint.IgnorePreparedQuery\", true},            \n+            {Act.Flush},            \n+\n+            {Act.Notify, 0},\n+            {Act.NamedQueryWithLock, \"findEmployeeById\", 1, t1Lock, \"openjpa.hint.IgnorePreparedQuery\", true},            \n+\n+            {Act.RollbackTx},\n+        };\n+        launchActionSequence(testName, parameters, threadMain, thread1);\n+    }\n+}"}]}

