{"sha":"49e554ac6c0d7903af79d516a0accb8fa8ba7b59","node_id":"MDY6Q29tbWl0MjA2MzY0OjQ5ZTU1NGFjNmMwZDc5MDNhZjc5ZDUxNmEwYWNjYjhmYThiYTdiNTk=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-15T23:25:35Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-15T23:25:35Z"},"message":"OPENJPA-1237:\nThrow configuration exception for missing options when using WriteBehind. \nSubmitted by : Tim McConnell\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@804539 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2cc888cae90db086c75bad11216053f49c53a004","url":"https://api.github.com/repos/apache/openjpa/git/trees/2cc888cae90db086c75bad11216053f49c53a004"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/49e554ac6c0d7903af79d516a0accb8fa8ba7b59","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/49e554ac6c0d7903af79d516a0accb8fa8ba7b59","html_url":"https://github.com/apache/openjpa/commit/49e554ac6c0d7903af79d516a0accb8fa8ba7b59","comments_url":"https://api.github.com/repos/apache/openjpa/commits/49e554ac6c0d7903af79d516a0accb8fa8ba7b59/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"dc316323ba0417aa55fbf63204c1bef53b85df7b","url":"https://api.github.com/repos/apache/openjpa/commits/dc316323ba0417aa55fbf63204c1bef53b85df7b","html_url":"https://github.com/apache/openjpa/commit/dc316323ba0417aa55fbf63204c1bef53b85df7b"}],"stats":{"total":245,"additions":245,"deletions":0},"files":[{"sha":"dd80d8fc47b7d1ae0570f18f8e22deeefe14e531","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/49e554ac6c0d7903af79d516a0accb8fa8ba7b59/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/49e554ac6c0d7903af79d516a0accb8fa8ba7b59/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=49e554ac6c0d7903af79d516a0accb8fa8ba7b59","patch":"@@ -923,6 +923,19 @@ protected DelegatingStoreManager createDelegatingStoreManager() {\n     protected void initWriteBehindCallback() { \n         WriteBehindCache cache = _conf.getWriteBehindCacheManagerInstance().getSystemWriteBehindCache();\n         if (cache != null) {\n+    \n+            if (_conf.getDataCacheManagerInstance().getSystemDataCache() == null ||\n+                _conf.getWriteBehindCallbackInstance() == null ) {\n+                //\n+                // Missing one or more of the following required WriteBehind configuration \n+                // parameters:\n+                //\n+                //   - openjpa.DataCache\n+                //   - openjpa.WriteBehindCallback\n+                //\n+                throw new WriteBehindConfigurationException();\n+            }\n+    \n             Broker broker =\n                 newBroker(_conf.getConnectionUserName(), \n                           _conf.getConnectionPassword(), "},{"sha":"67ee854c26464defbce4d07ecee29706e3e05cff","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/TestWriteBehindConfigurations.java","status":"added","additions":232,"deletions":0,"changes":232,"blob_url":"https://github.com/apache/openjpa/blob/49e554ac6c0d7903af79d516a0accb8fa8ba7b59/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/TestWriteBehindConfigurations.java","raw_url":"https://github.com/apache/openjpa/raw/49e554ac6c0d7903af79d516a0accb8fa8ba7b59/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/TestWriteBehindConfigurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/TestWriteBehindConfigurations.java?ref=49e554ac6c0d7903af79d516a0accb8fa8ba7b59","patch":"@@ -0,0 +1,232 @@\n+/* \n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.jdbc.writebehind;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.openjpa.persistence.ArgumentException;\n+\n+\n+/** \n+ * <b>TestWriteBehindConfigurations</b> is used to create various configurations for the new JPA 2.0\n+ * WriteBehind capability to ensure that the appropriate exception is thrown for the invalid\n+ * configurations and an EntityManagerFactory is instantiated for the valid configurations\n+ */\n+public class TestWriteBehindConfigurations extends TestCase {\n+\n+\n+    /**\n+     * Invalid configuration since there is no DataCache specified\n+     */\n+    public void testInvalidConfiguration01() {\n+        EntityManagerFactory emf01 = null;\n+        Map map = new HashMap();\n+        map.put( \"openjpa.WriteBehindCache\", \"true\");\n+        map.put( \"openjpa.WriteBehindCallback\", \"true\" );\n+        map.put( \"openjpa.RuntimeUnenhancedClasses\", \"supported\" );\n+        try {\n+            emf01 = Persistence.createEntityManagerFactory(\"empty-pu\", map);\n+            fail(\"testInvalidConfiguration01: Exception expected but not thrown\");\n+        }\n+        catch (ArgumentException ae) {\n+        }\n+        catch (Exception e) {\n+            fail(\"testInvalidConfiguration01: Caught unexpected exception: \" + e);\n+            e.printStackTrace();\n+        }\n+        finally {\n+            assertNull(emf01);\n+            if (emf01 != null) {\n+                emf01.close();\n+            }\n+        }\n+    }  \n+\n+\n+    /**\n+     * Invalid configuration since there is no DataCache remote commit provider specified\n+     */\n+    public void testInvalidConfiguration02() {\n+        EntityManagerFactory emf02 = null;\n+        Map map = new HashMap();\n+        map.put( \"openjpa.DataCache\", \"true\" );\n+        map.put( \"openjpa.WriteBehindCache\", \"true\");\n+        map.put( \"openjpa.WriteBehindCallback\", \"true(sleepTime=1000)\" );\n+        map.put( \"openjpa.RuntimeUnenhancedClasses\", \"unsupported\" );\n+        try {\n+            emf02 = Persistence.createEntityManagerFactory(\"empty-pu\", map);\n+            fail(\"testInvalidConfiguration02: Exception expected but not thrown\");\n+        }\n+        catch (ArgumentException ae) {\n+        }\n+        catch (Exception e) {\n+            fail(\"testInvalidConfiguration02: Caught unexpected exception: \" + e);\n+            e.printStackTrace();\n+        }\n+        finally {\n+            assertNull(emf02);\n+            if (emf02 != null) {\n+                emf02.close();\n+            }\n+        }\n+    }  \n+\n+\n+    /**\n+     * Invalid configuration since there is no WriteBehindCallback specified\n+     */\n+    public void testInvalidConfiguration03() {\n+        EntityManagerFactory emf03 = null;\n+        Map map = new HashMap();\n+        map.put( \"openjpa.DataCache\", \"true\" );\n+        map.put( \"openjpa.RemoteCommitProvider\", \"sjvm\");\n+        map.put( \"openjpa.WriteBehindCache\", \"true\");\n+        map.put( \"openjpa.RuntimeUnenhancedClasses\", \"warn\" );\n+        try {\n+            emf03 = Persistence.createEntityManagerFactory(\"empty-pu\", map);\n+            fail(\"testInvalidConfiguration03: Exception not thrown\");\n+        }\n+        catch (ArgumentException ae) {\n+        }\n+        catch (Exception e) {\n+            fail(\"testInvalidConfiguration03: Caught unexpected exception: \" + e);\n+            e.printStackTrace();\n+        }\n+        finally {\n+            assertNull(emf03);\n+            if (emf03 != null) {\n+                emf03.close();\n+            }\n+        }\n+    }  \n+\n+\n+    /**\n+     * Invalid configuration since there is no DataCache remote commit provider nor a \n+     * WriteBehindCallback specified\n+     */\n+    public void testInvalidConfiguration04() {\n+        EntityManagerFactory emf04 = null;\n+        Map map = new HashMap();\n+        map.put( \"openjpa.DataCache\", \"true\" );\n+        map.put( \"openjpa.WriteBehindCache\", \"true\");\n+        try {\n+            emf04 = Persistence.createEntityManagerFactory(\"empty-pu\", map);\n+            fail(\"testInvalidConfiguration04: Exception not thrown\");\n+        }\n+        catch (ArgumentException ae) {\n+        }\n+        catch (Exception e) {\n+            fail(\"testInvalidConfiguration04: Caught unexpected exception: \" + e);\n+            e.printStackTrace();\n+        }\n+        finally {\n+            assertNull(emf04);\n+            if (emf04 != null) {\n+                emf04.close();\n+            }\n+        }\n+    }  \n+\n+\n+    /**\n+     * Valid configuration \n+     */\n+    public void testValidConfiguration01() {\n+        EntityManagerFactory emf05 = null;\n+        Map map = new HashMap();\n+        map.put( \"openjpa.DataCache\", \"true\" );\n+        map.put( \"openjpa.RemoteCommitProvider\", \"sjvm\");\n+        map.put( \"openjpa.WriteBehindCache\", \"true\");\n+        map.put( \"openjpa.WriteBehindCallback\", \"true\" );\n+        map.put( \"openjpa.RuntimeUnenhancedClasses\", \"unsupported\" );\n+        try {\n+            emf05 = Persistence.createEntityManagerFactory(\"empty-pu\", map);\n+        }\n+        catch (Exception e) {\n+            fail(\"testValidConfiguration01: Caught unexpected exception: \" + e);\n+            e.printStackTrace();\n+        }\n+        finally {\n+            assertNotNull(emf05);\n+            if (emf05 != null) {\n+                emf05.close();\n+            }\n+        }\n+    }  \n+\n+\n+    /**\n+     * Valid configuration \n+     */\n+    public void testValidConfiguration02() {\n+        EntityManagerFactory emf06 = null;\n+        Map map = new HashMap();\n+        map.put( \"openjpa.DataCache\", \"true\" );\n+        map.put( \"openjpa.RemoteCommitProvider\", \"sjvm\");\n+        map.put( \"openjpa.WriteBehindCache\", \"true\");\n+        map.put( \"openjpa.WriteBehindCallback\", \"true(sleepTime=1000)\" );\n+        map.put( \"openjpa.RuntimeUnenhancedClasses\", \"supported\" );\n+        try {\n+            emf06 = Persistence.createEntityManagerFactory(\"empty-pu\", map);\n+        }\n+        catch (Exception e) {\n+            fail(\"testValidConfiguration02: Caught unexpected exception: \" + e);\n+            e.printStackTrace();\n+        }\n+        finally {\n+            assertNotNull(emf06);\n+            if (emf06 != null) {\n+                emf06.close();\n+            }\n+        }\n+    }  \n+\n+\n+    /**\n+     * Valid configuration \n+     */\n+    public void testValidConfiguration03() {\n+        EntityManagerFactory emf07 = null;\n+        Map map = new HashMap();\n+        map.put( \"openjpa.DataCache\", \"true\" );\n+        map.put( \"openjpa.RemoteCommitProvider\", \"sjvm\");\n+        map.put( \"openjpa.WriteBehindCache\", \"true\");\n+        map.put( \"openjpa.WriteBehindCallback\", \"true(sleepTime=1000)\" );\n+        map.put( \"openjpa.RuntimeUnenhancedClasses\", \"warn\" );\n+        try {\n+            emf07 = Persistence.createEntityManagerFactory(\"empty-pu\", map);\n+        }\n+        catch (Exception e) {\n+            fail(\"testValidConfiguration03: Caught unexpected exception: \" + e);\n+            e.printStackTrace();\n+        }                                   \n+        finally {\n+            assertNotNull(emf07);\n+            if (emf07 != null) {\n+                emf07.close();\n+            }\n+        }\n+    }  \n+}"}]}

