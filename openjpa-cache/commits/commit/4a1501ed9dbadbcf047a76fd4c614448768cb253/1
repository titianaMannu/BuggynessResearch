{"sha":"4a1501ed9dbadbcf047a76fd4c614448768cb253","node_id":"MDY6Q29tbWl0MjA2MzY0OjRhMTUwMWVkOWRiYWRiY2YwNDdhNzZmZDRjNjE0NDQ4NzY4Y2IyNTM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-07-28T20:32:42Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-07-28T20:32:42Z"},"message":"OPENJPA-1749: Throw exception when incompatible configuration options are set\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@980199 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fa0b14a864cedab52102ab95957996a2847feab0","url":"https://api.github.com/repos/apache/openjpa/git/trees/fa0b14a864cedab52102ab95957996a2847feab0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4a1501ed9dbadbcf047a76fd4c614448768cb253","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4a1501ed9dbadbcf047a76fd4c614448768cb253","html_url":"https://github.com/apache/openjpa/commit/4a1501ed9dbadbcf047a76fd4c614448768cb253","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4a1501ed9dbadbcf047a76fd4c614448768cb253/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"dba341a7d91133122f08c869d1b80bbcd65f4305","url":"https://api.github.com/repos/apache/openjpa/commits/dba341a7d91133122f08c869d1b80bbcd65f4305","html_url":"https://github.com/apache/openjpa/commit/dba341a7d91133122f08c869d1b80bbcd65f4305"}],"stats":{"total":123,"additions":120,"deletions":3},"files":[{"sha":"f2c553b1e02e8045ab6d74456c9c3957b6c77503","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestOverrideNonJtaDataSource.java","status":"modified","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/4a1501ed9dbadbcf047a76fd4c614448768cb253/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestOverrideNonJtaDataSource.java","raw_url":"https://github.com/apache/openjpa/raw/4a1501ed9dbadbcf047a76fd4c614448768cb253/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestOverrideNonJtaDataSource.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestOverrideNonJtaDataSource.java?ref=4a1501ed9dbadbcf047a76fd4c614448768cb253","patch":"@@ -165,5 +165,47 @@ public void testInvalidCfName() throws Exception {\n             assertTrue(e.getMessage().contains(\"EntityManager\")); // ensure where the JNDI name came from is in message\n         }\n     }\n+    \n+    public void testDataCache() { \n+        EntityManagerFactory emf = null;\n+    \n+        emf = getEmf(\"openjpa.DataCache\", \"true\");\n+        try {\n+            getEm(emf, \"openjpa.ConnectionFactoryName\", \"jdbc/NotReal\");\n+            fail(\"Expected an excepton when creating an EM with a bogus JNDI name\");\n+        } catch (ArgumentException e) {\n+            assertTrue(e.isFatal());\n+            assertTrue(e.getMessage().contains(\"jdbc/NotReal\")); \n+            assertTrue(e.getMessage().contains(\"L2 Cache\")); \n+        }\n+    }\n+    \n+    public void testQueryCache() { \n+        EntityManagerFactory emf = null;\n+    \n+        emf = getEmf(\"openjpa.QueryCache\", \"true\");\n+        try {\n+            getEm(emf, \"openjpa.ConnectionFactoryName\", \"jdbc/NotReal\");\n+            fail(\"Expected an excepton when creating an EM with a bogus JNDI name\");\n+        } catch (ArgumentException e) {\n+            assertTrue(e.isFatal());\n+            assertTrue(e.getMessage().contains(\"jdbc/NotReal\")); \n+            assertTrue(e.getMessage().contains(\"openjpa.QueryCache\")); \n+        }\n+    }\n+    \n+    public void testSyncMappings() { \n+        EntityManagerFactory emf = null;\n+    \n+        emf = getEmf(\"openjpa.jdbc.SynchronizeMappings\", \"buildSchema\");\n+        try {\n+            getEm(emf, \"openjpa.ConnectionFactoryName\", \"jdbc/NotReal\");\n+            fail(\"Expected an excepton when creating an EM with a bogus JNDI name\");\n+        } catch (ArgumentException e) {\n+            assertTrue(e.isFatal());\n+            assertTrue(e.getMessage().contains(\"jdbc/NotReal\")); \n+            assertTrue(e.getMessage().contains(\"openjpa.jdbc.SynchronizeMappings\")); \n+        }\n+    }\n }\n "},{"sha":"ede39d324169cddce48584c4769d4cf66190a39c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestSwitchConnection.java","status":"modified","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/4a1501ed9dbadbcf047a76fd4c614448768cb253/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestSwitchConnection.java","raw_url":"https://github.com/apache/openjpa/raw/4a1501ed9dbadbcf047a76fd4c614448768cb253/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestSwitchConnection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestSwitchConnection.java?ref=4a1501ed9dbadbcf047a76fd4c614448768cb253","patch":"@@ -28,6 +28,7 @@\n \n import org.apache.openjpa.persistence.ArgumentException;\n import org.apache.openjpa.persistence.test.AbstractPersistenceTestCase;\n+import org.apache.openjpa.util.UserException;\n \n public class TestSwitchConnection extends AbstractPersistenceTestCase {\n     private String defaultJndiName = \"jdbc/mocked\";\n@@ -159,4 +160,46 @@ public void testInvalidCfName() throws Exception {\n             assertTrue(e.getMessage().contains(\"EntityManager\")); // ensure where the JNDI name came from is in message\n         }\n     }\n+    \n+    public void testDataCache() { \n+        EntityManagerFactory emf = null;\n+    \n+        emf = getEmf(\"openjpa.DataCache\", \"true\");\n+        try {\n+            getEm(emf, \"openjpa.ConnectionFactoryName\", \"jdbc/NotReal\");\n+            fail(\"Expected an excepton when creating an EM with a bogus JNDI name\");\n+        } catch (ArgumentException e) {\n+            assertTrue(e.isFatal());\n+            assertTrue(e.getMessage().contains(\"jdbc/NotReal\")); \n+            assertTrue(e.getMessage().contains(\"L2 Cache\")); \n+        }\n+    }\n+    \n+    public void testQueryCache() { \n+        EntityManagerFactory emf = null;\n+    \n+        emf = getEmf(\"openjpa.QueryCache\", \"true\");\n+        try {\n+            getEm(emf, \"openjpa.ConnectionFactoryName\", \"jdbc/NotReal\");\n+            fail(\"Expected an excepton when creating an EM with a bogus JNDI name\");\n+        } catch (ArgumentException e) {\n+            assertTrue(e.isFatal());\n+            assertTrue(e.getMessage().contains(\"jdbc/NotReal\")); \n+            assertTrue(e.getMessage().contains(\"openjpa.QueryCache\")); \n+        }\n+    }\n+    \n+    public void testSyncMappings() { \n+        EntityManagerFactory emf = null;\n+    \n+        emf = getEmf(\"openjpa.jdbc.SynchronizeMappings\", \"buildSchema\");\n+        try {\n+            getEm(emf, \"openjpa.ConnectionFactoryName\", \"jdbc/NotReal\");\n+            fail(\"Expected an excepton when creating an EM with a bogus JNDI name\");\n+        } catch (ArgumentException e) {\n+            assertTrue(e.isFatal());\n+            assertTrue(e.getMessage().contains(\"jdbc/NotReal\")); \n+            assertTrue(e.getMessage().contains(\"openjpa.jdbc.SynchronizeMappings\")); \n+        }\n+    }\n }"},{"sha":"da16ea344c41c6e55de6f2b1ef0bef386858b920","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TestTimestampVersion.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/4a1501ed9dbadbcf047a76fd4c614448768cb253/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TestTimestampVersion.java","raw_url":"https://github.com/apache/openjpa/raw/4a1501ed9dbadbcf047a76fd4c614448768cb253/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TestTimestampVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TestTimestampVersion.java?ref=4a1501ed9dbadbcf047a76fd4c614448768cb253","patch":"@@ -89,6 +89,4 @@ public void testBulkUpdateOnNumericVersion() {\n         int newVersion = pc.getVersion();\n         assertEquals(newVersion, oldVersion+1);\n     }\n-\n-\t\n }"},{"sha":"4c61022a01bf98aac9df2d16eb38f0483d880c8e","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","status":"modified","additions":33,"deletions":1,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/4a1501ed9dbadbcf047a76fd4c614448768cb253/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4a1501ed9dbadbcf047a76fd4c614448768cb253/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java?ref=4a1501ed9dbadbcf047a76fd4c614448768cb253","patch":"@@ -48,6 +48,7 @@\n import org.apache.openjpa.persistence.meta.MetamodelImpl;\n import org.apache.openjpa.persistence.query.OpenJPAQueryBuilder;\n import org.apache.openjpa.persistence.query.QueryBuilderImpl;\n+import org.apache.openjpa.util.UserException;\n \n /**\n  * Implementation of {@link EntityManagerFactory} that acts as a\n@@ -214,8 +215,14 @@ else if (!props.isEmpty())\n         }\n         \n         if (log != null && log.isTraceEnabled()) {\n-            log.trace(\"Found ConnectionFactoryName from props: \" + cfName);\n+            if(StringUtils.isNotEmpty(cfName)) {\n+                log.trace(\"Found ConnectionFactoryName from props: \" + cfName);\n+            }\n+            if(StringUtils.isNotEmpty(cf2Name)) { \n+                log.trace(\"Found ConnectionFactory2Name from props: \" + cf2Name);\n+            }\n         }\n+        validateCfNameProps(conf, cfName, cf2Name);\n \n         Broker broker = _factory.newBroker(user, pass, managed, retainMode, false, cfName, cf2Name);\n             \n@@ -357,4 +364,29 @@ public boolean isLoaded(Object entity, String attribute) {\n         return (OpenJPAPersistenceUtil.isManagedBy(this, entity) &&\n                 (OpenJPAPersistenceUtil.isLoaded(entity, attribute) == LoadState.LOADED));\n     }\n+    \n+    private void validateCfNameProps(OpenJPAConfiguration conf, String cfName, String cf2Name) {\n+        if (StringUtils.isNotEmpty(cfName) || StringUtils.isNotEmpty(cf2Name)) {\n+            if (conf.getDataCache() != \"false\" && conf.getDataCache() != null) {\n+                throw new ArgumentException(_loc.get(\"invalid-cfname-prop\", new Object[] {\n+                    \"openjpa.DataCache (L2 Cache)\",\n+                    cfName,\n+                    cf2Name }), null, null, true);\n+\n+            }\n+            if (conf.getQueryCache() != \"false\" && conf.getQueryCache() != null) {\n+                throw new ArgumentException(_loc.get(\"invalid-cfname-prop\", new Object[] {\n+                    \"openjpa.QueryCache\",\n+                    cfName,\n+                    cf2Name }), null, null, true);\n+            }\n+            Object syncMap = conf.toProperties(false).get(\"openjpa.jdbc.SynchronizeMappings\");\n+            if(syncMap != null) { \n+                throw new ArgumentException(_loc.get(\"invalid-cfname-prop\", new Object[] {\n+                    \"openjpa.jdbc.SynchronizeMappings\",\n+                    cfName,\n+                    cf2Name }), null, null, true);\n+            }\n+        }\n+    }\n }"},{"sha":"fc6b1201bb7506308d085dcb2e344e0cb2371cd2","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/4a1501ed9dbadbcf047a76fd4c614448768cb253/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/4a1501ed9dbadbcf047a76fd4c614448768cb253/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties?ref=4a1501ed9dbadbcf047a76fd4c614448768cb253","patch":"@@ -232,3 +232,5 @@ cache-retrieve-override: The setting of CacheRetrieveMode.USE is ignored and set\n null-detach: Can not detach null entity\n override-named-query-lock-mode: Encountered a read lock level less than LockModeType.READ when processing the \\\n NamedQuery {0} \"{1}\" in class \"{2}\". Setting query lock level to LockModeType.READ.\n+invalid-cfname-prop: The \"{0}\" configuration option is not valid when the DataSource JNDI name(s) are provided \\\n+\twhen you create an EntityManager. Found jtaDataSource: \"{1}\", nonJtaDataSource: \"{2}\". "}]}

