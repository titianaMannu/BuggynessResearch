{"sha":"4a987190d99d77dd18878423280489367bd17397","node_id":"MDY6Q29tbWl0MjA2MzY0OjRhOTg3MTkwZDk5ZDc3ZGQxODg3ODQyMzI4MDQ4OTM2N2JkMTczOTc=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-02-10T18:23:59Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-02-10T18:23:59Z"},"message":"OPENJPA-1460: resolve visibility scope of orm.xml\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@908621 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0dbe7012c9f26fbdfe0f1899be703156542be451","url":"https://api.github.com/repos/apache/openjpa/git/trees/0dbe7012c9f26fbdfe0f1899be703156542be451"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4a987190d99d77dd18878423280489367bd17397","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4a987190d99d77dd18878423280489367bd17397","html_url":"https://github.com/apache/openjpa/commit/4a987190d99d77dd18878423280489367bd17397","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4a987190d99d77dd18878423280489367bd17397/comments","author":null,"committer":null,"parents":[{"sha":"2641d43ed44233b666048977a260aa4a85cde518","url":"https://api.github.com/repos/apache/openjpa/commits/2641d43ed44233b666048977a260aa4a85cde518","html_url":"https://github.com/apache/openjpa/commit/2641d43ed44233b666048977a260aa4a85cde518"}],"stats":{"total":83,"additions":80,"deletions":3},"files":[{"sha":"6761d05eba0c1b6af7b03768f1e72b520ff0cf3b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/4a987190d99d77dd18878423280489367bd17397/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4a987190d99d77dd18878423280489367bd17397/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=4a987190d99d77dd18878423280489367bd17397","patch":"@@ -179,7 +179,7 @@\n     private Collection<String> supportedOptions = new HashSet<String>(33);\n     private final StoreFacadeTypeRegistry _storeFacadeRegistry = new StoreFacadeTypeRegistry();\n     private BrokerFactoryEventManager _brokerFactoryEventManager = new BrokerFactoryEventManager(this);\n-        \n+    private Map<String, Object> _peMap; //contains persistence environment-specific info    \n \n     /**\n      * Default constructor. Attempts to load global properties.\n@@ -1727,5 +1727,13 @@ public void setCacheDistributionPolicy(String policyPlugin) {\n     public void setCacheDistributionPolicyInstance(CacheDistributionPolicy policy) {\n         cacheDistributionPolicyPlugin.set(policy);\n     }\n+\n+    public void setPersistenceEnvironment(Map<String, Object> peMap) {\n+        this._peMap = peMap;\n+    }\n+\n+    public Map<String, Object> getPersistenceEnvironment() {\n+        return _peMap;\n+    }\n }\n "},{"sha":"963410acd13598869b5f7ef4661d6a04b54cebc8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","status":"modified","additions":49,"deletions":1,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/4a987190d99d77dd18878423280489367bd17397/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/4a987190d99d77dd18878423280489367bd17397/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java?ref=4a987190d99d77dd18878423280489367bd17397","patch":"@@ -39,6 +39,8 @@\n import java.util.zip.ZipInputStream;\n \n import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n import org.apache.openjpa.lib.meta.ClassArgParser;\n import org.apache.openjpa.lib.meta.ClasspathMetaDataIterator;\n import org.apache.openjpa.lib.meta.FileMetaDataIterator;\n@@ -76,6 +78,9 @@\n     protected Collection<String> cpath = null;\n \n     private Set<String> _typeNames = null;\n+    public static final String PERSISTENCE_UNIT_ROOT_URL = \"PersistenceUnitRootUrl\";\n+    public static final String MAPPING_FILE_NAMES = \"MappingFileNames\";\n+    public static final String JAR_FILE_URLS = \"JarFiles\";\n \n     /**\n      * Set of {@link File}s of metadata files or directories supplied by user.\n@@ -752,8 +757,52 @@ protected ClassMetaData getDefiningMetaData(QueryMetaData query,\n                     if (log.isTraceEnabled())\n                         log.trace(_loc.get(\"scanning-resource\", rsrc));\n                     mitr = new ResourceMetaDataIterator(rsrc, loader);\n+                    OpenJPAConfiguration conf = repos.getConfiguration();\n+                    Map peMap = null;\n+                    if (conf instanceof OpenJPAConfigurationImpl)\n+                        peMap = ((OpenJPAConfigurationImpl)conf).getPersistenceEnvironment();\n+                    URL puUrl = peMap == null ? null : (URL) peMap.get(PERSISTENCE_UNIT_ROOT_URL);\n+                    List<String> mappingFileNames = \n+                        peMap == null ? null : (List<String>) peMap.get(MAPPING_FILE_NAMES);\n+                    List<URL> jars = peMap == null ? null : (List<URL>)peMap.get(JAR_FILE_URLS);\n+                    String puUrlString = puUrl == null ? null : puUrl.toString();\n+                    if (log.isTraceEnabled())\n+                        log.trace(_loc.get(\"pu-root-url\", puUrlString));\n+\n+                    List<URL> urls = new ArrayList<URL>(3);\n                     while (mitr.hasNext()) {\n                         url = (URL) mitr.next();\n+                        String urlString = url.toString();\n+                        if (log.isTraceEnabled())\n+                            log.trace(_loc.get(\"resource-url\", urlString));\n+                        if (peMap != null) {\n+                            if (puUrlString != null && urlString.indexOf(puUrlString) != -1) \n+                                urls.add(url);\n+                            if (mappingFileNames != null && mappingFileNames.size() != 0) {\n+                                for (String mappingFileName : mappingFileNames) {\n+                                    if (log.isTraceEnabled())\n+                                        log.trace(_loc.get(\"mapping-file-name\", mappingFileName));\n+                                    if (urlString.indexOf(mappingFileName) != -1)\n+                                        urls.add(url);\n+                                }\n+                            }\n+\n+                            if (jars != null && jars.size() != 0) {\n+                                for (URL jarUrl : jars) {\n+                                    if (log.isTraceEnabled())\n+                                        log.trace(_loc.get(\"jar-file-url\", jarUrl));\n+                                    if (urlString.indexOf(jarUrl.toString()) != -1)\n+                                        urls.add(url);\n+                                }\n+                            }\n+                        } else {\n+                            urls.add(url);\n+                        }\n+                    }\n+                    mitr.close();\n+\n+                    for (Object obj : urls) {\n+                        url = (URL) obj;\n                         clss = cparser.parseTypeNames(new URLMetaDataIterator\n                             (url));\n                         List<String> newNames = Arrays.asList(clss);\n@@ -763,7 +812,6 @@ protected ClassMetaData getDefiningMetaData(QueryMetaData query,\n                         names.addAll(newNames);\n                         mapPersistentTypeNames(url, clss);\n                     }\n-                    mitr.close();\n                 }\n             }\n         }"},{"sha":"0819deec3b395c3bddb2e549a601d67111d4fe4b","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/4a987190d99d77dd18878423280489367bd17397/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/4a987190d99d77dd18878423280489367bd17397/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties?ref=4a987190d99d77dd18878423280489367bd17397","patch":"@@ -357,4 +357,6 @@ repos-initializeEager-found: The following classes are being preloaded \"{0}\".\n repos-initializeEager-error: Unexpected error during early loading of entity metadata during initialization. \\\n     See nested stacktrace for details.\t  \n pu-root-url: The persistent unit root url is \"{0}\"\n-resource-url: The resource url is \"{0}\"   \n\\ No newline at end of file\n+resource-url: The resource url is \"{0}\"   \n+mapping-file-name: Mapping file name is \"{0}\"\n+jar-file-url: Jar file url is \"{0}\"\n\\ No newline at end of file"},{"sha":"9941cf6f78934e474d7e32b8fdb7d0c6337e9741","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/4a987190d99d77dd18878423280489367bd17397/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4a987190d99d77dd18878423280489367bd17397/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java?ref=4a987190d99d77dd18878423280489367bd17397","patch":"@@ -22,6 +22,7 @@\n import java.lang.instrument.IllegalClassFormatException;\n import java.security.AccessController;\n import java.security.ProtectionDomain;\n+import java.util.HashMap;\n import java.util.Map;\n \n import javax.persistence.EntityManager;\n@@ -46,6 +47,7 @@\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n+import org.apache.openjpa.meta.AbstractCFMetaDataFactory;\n import org.apache.openjpa.meta.MetaDataModes;\n import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.persistence.validation.ValidationUtils;\n@@ -186,6 +188,9 @@ public OpenJPAEntityManagerFactory createContainerEntityManagerFactory(Persisten\n                     log.warn(_loc.get(\"transformer-registration-error\", pui));\n                 }\n             }\n+            OpenJPAConfiguration conf = factory.getConfiguration();\n+            setPersistenceEnvironmentInfo(conf, pui);\n+            _log = conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n \n             // Create appropriate LifecycleEventManager\n             loadValidator(factory);\n@@ -203,6 +208,20 @@ public OpenJPAEntityManagerFactory createContainerEntityManagerFactory(Persisten\n         }\n     }\n \n+    public void setPersistenceEnvironmentInfo(OpenJPAConfiguration conf, PersistenceUnitInfo pui) {\n+        // OPENJPA-1460 Fix scope visibility of orm.xml when it is packaged in both ear file and war file\n+        if (conf instanceof OpenJPAConfigurationImpl) {\n+            Map<String, Object> peMap =((OpenJPAConfigurationImpl)conf).getPersistenceEnvironment();\n+            if (peMap == null) {\n+                peMap = new HashMap<String, Object>();\n+                ((OpenJPAConfigurationImpl)conf).setPersistenceEnvironment(peMap);\n+            }\n+            peMap.put(AbstractCFMetaDataFactory.PERSISTENCE_UNIT_ROOT_URL, pui.getPersistenceUnitRootUrl());\n+            peMap.put(AbstractCFMetaDataFactory.MAPPING_FILE_NAMES, pui.getMappingFileNames());\n+            peMap.put(AbstractCFMetaDataFactory.JAR_FILE_URLS, pui.getJarFileUrls());\n+        }\n+    }\n+    \n     /*\n      * Returns a ProviderUtil for use with entities managed by this\n      * persistence provider."}]}

