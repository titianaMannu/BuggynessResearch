{"sha":"4afdb070427b8b3f2ac3f18c9629d9509727de20","node_id":"MDY6Q29tbWl0MjA2MzY0OjRhZmRiMDcwNDI3YjhiM2YyYWMzZjE4Yzk2MjlkOTUwOTcyN2RlMjA=","commit":{"author":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2016-08-11T20:43:27Z"},"committer":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2016-08-11T20:43:27Z"},"message":"OPENJPA-2651: Fix for issue where @SqlResultSetMapping is used with inheritance and a ManyToOne relationship.  Merged 2.2.x commit to trunk.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1756047 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f240bfe8e6999886368e91234c61d5df9c2f12d6","url":"https://api.github.com/repos/apache/openjpa/git/trees/f240bfe8e6999886368e91234c61d5df9c2f12d6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4afdb070427b8b3f2ac3f18c9629d9509727de20","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4afdb070427b8b3f2ac3f18c9629d9509727de20","html_url":"https://github.com/apache/openjpa/commit/4afdb070427b8b3f2ac3f18c9629d9509727de20","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4afdb070427b8b3f2ac3f18c9629d9509727de20/comments","author":null,"committer":null,"parents":[{"sha":"41827d794dc0635a71f846ecb8a213bceca4f961","url":"https://api.github.com/repos/apache/openjpa/commits/41827d794dc0635a71f846ecb8a213bceca4f961","html_url":"https://github.com/apache/openjpa/commit/41827d794dc0635a71f846ecb8a213bceca4f961"}],"stats":{"total":306,"additions":306,"deletions":0},"files":[{"sha":"562e7f554b37a4614a624f0720db73c80b8672c7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MappedQueryResultObjectProvider.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/4afdb070427b8b3f2ac3f18c9629d9509727de20/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MappedQueryResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/4afdb070427b8b3f2ac3f18c9629d9509727de20/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MappedQueryResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MappedQueryResultObjectProvider.java?ref=4afdb070427b8b3f2ac3f18c9629d9509727de20","patch":"@@ -404,6 +404,20 @@ protected long getLongInternal(Object obj, Joins joins)\n                 return _res.getLong((Column) obj, joins);\n             return _res.getLong(obj);\n         }\n+        \n+        /*\n+         * OPENJPA-2651: Added to allow the column to be translated (from the\n+         * actual column name to the name provided in an @SqlResultSetMapping/@FieldResult.\n+         * \n+         * (non-Javadoc) \n+         * @see org.apache.openjpa.jdbc.sql.AbstractResult#getObject(org.apache.\n+         * openjpa.jdbc.schema.Column, java.lang.Object, org.apache.openjpa.jdbc.sql.Joins)\n+         */\n+        public Object getObject(Column col, Object arg, Joins joins)\n+            throws SQLException {\n+            return getObjectInternal(translate(col, joins), col.getJavaType(),\n+                arg, joins);\n+        }\n \n         protected Object getObjectInternal(Object obj, int metaTypeCode,\n             Object arg, Joins joins)"},{"sha":"65d5507b25fe0b8d61fcb836e8c451000ac44979","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/sqlresultmapping/CrtOperacaoEntity.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/4afdb070427b8b3f2ac3f18c9629d9509727de20/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/sqlresultmapping/CrtOperacaoEntity.java","raw_url":"https://github.com/apache/openjpa/raw/4afdb070427b8b3f2ac3f18c9629d9509727de20/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/sqlresultmapping/CrtOperacaoEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/sqlresultmapping/CrtOperacaoEntity.java?ref=4afdb070427b8b3f2ac3f18c9629d9509727de20","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query.sqlresultmapping;\n+\n+import java.io.Serializable;\n+import java.sql.Timestamp;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+@javax.persistence.Table(name = \"CRT_OPERACAO\")\n+@Entity\n+public class CrtOperacaoEntity implements Serializable {\n+\n+    private static final long serialVersionUID = -3914425448077243671L;\n+    \n+    @Column(name = \"ID\")\n+    @Id\n+    private long id;\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+\n+    public void setId(final long id) {\n+        this.id = id;\n+    }\n+\n+    @Column(name = \"DATA_HORA\")\n+    private Timestamp dataHora;\n+\n+    public Timestamp getDataHora() {\n+        return this.dataHora;\n+    }\n+\n+    public void setDataHora(final Timestamp dataHora) {\n+        this.dataHora = dataHora;\n+    }\n+}"},{"sha":"4b624d6faea46e71d47bc3c8d08768e3e476cdec","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/sqlresultmapping/CrtRequisicaoChequePersEntity.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/4afdb070427b8b3f2ac3f18c9629d9509727de20/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/sqlresultmapping/CrtRequisicaoChequePersEntity.java","raw_url":"https://github.com/apache/openjpa/raw/4afdb070427b8b3f2ac3f18c9629d9509727de20/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/sqlresultmapping/CrtRequisicaoChequePersEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/sqlresultmapping/CrtRequisicaoChequePersEntity.java?ref=4afdb070427b8b3f2ac3f18c9629d9509727de20","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query.sqlresultmapping;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.EntityResult;\n+import javax.persistence.FieldResult;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToOne;\n+import javax.persistence.SqlResultSetMapping;\n+\n+@javax.persistence.Table(name = \"CRT_REQUISICAO_CHEQUE_PERS\")\n+@Entity\n+@SqlResultSetMapping(name = \"MyResultMapping\", entities = {\n+    @EntityResult(entityClass = CrtRequisicaoChequePersEntity.class, fields = {\n+        @FieldResult(name = \"crtOperacaoByOperacaoRecepcaoServCent.id\", \n+                column = \"opRecepcaoServCentraisId\"),\n+        @FieldResult(name = \"crtOperacaoByOperacaoRecepcaoServCent.dataHora\", \n+                column = \"opRecepcaoServCentraisDataHora\") }) })\n+public class CrtRequisicaoChequePersEntity extends CrtRequisicaoEntity {\n+\n+    @ManyToOne\n+    @javax.persistence.JoinColumn(name = \"OPERACAO_RECEPCAO_SERV_CENT\", referencedColumnName = \"ID\")\n+    private CrtOperacaoEntity crtOperacaoByOperacaoRecepcaoServCent;\n+\n+    public CrtOperacaoEntity getCrtOperacaoByOperacaoRecepcaoServCent() {\n+        return this.crtOperacaoByOperacaoRecepcaoServCent;\n+    }\n+\n+    public void setCrtOperacaoByOperacaoRecepcaoServCent(\n+        final CrtOperacaoEntity crtOperacaoByOperacaoRecepcaoServCent) {\n+        this.crtOperacaoByOperacaoRecepcaoServCent =\n+            crtOperacaoByOperacaoRecepcaoServCent;\n+    }\n+\n+    @ManyToOne\n+    @javax.persistence.JoinColumn(name = \"OPERACAO_REQUISICAO\", referencedColumnName = \"ID\", nullable = false)\n+    private CrtOperacaoEntity crtOperacaoByOperacaoRequisicao;\n+\n+    public CrtOperacaoEntity getCrtOperacaoByOperacaoRequisicao() {\n+        return this.crtOperacaoByOperacaoRequisicao;\n+    }\n+\n+    public void setCrtOperacaoByOperacaoRequisicao(\n+        final CrtOperacaoEntity crtOperacaoByOperacaoRequisicao) {\n+        this.crtOperacaoByOperacaoRequisicao = crtOperacaoByOperacaoRequisicao;\n+    }\n+}"},{"sha":"040d3df9c2ba331228ac10f526cce50b02c789fc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/sqlresultmapping/CrtRequisicaoEntity.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/4afdb070427b8b3f2ac3f18c9629d9509727de20/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/sqlresultmapping/CrtRequisicaoEntity.java","raw_url":"https://github.com/apache/openjpa/raw/4afdb070427b8b3f2ac3f18c9629d9509727de20/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/sqlresultmapping/CrtRequisicaoEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/sqlresultmapping/CrtRequisicaoEntity.java?ref=4afdb070427b8b3f2ac3f18c9629d9509727de20","patch":"@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query.sqlresultmapping;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.OneToOne;\n+\n+@javax.persistence.Table(name = \"CRT_REQUISICAO\")\n+@Entity\n+@Inheritance(strategy = InheritanceType.JOINED)\n+public class CrtRequisicaoEntity {\n+    @Column(name = \"ID\")\n+    @Id\n+    private long id;\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+\n+    public void setId(final long id) {\n+        this.id = id;\n+    }\n+}"},{"sha":"896c1d3540cf2606509fcb9fbcc322952b18fc5f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/sqlresultmapping/TestSQLResultSetMapping.java","status":"added","additions":128,"deletions":0,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/4afdb070427b8b3f2ac3f18c9629d9509727de20/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/sqlresultmapping/TestSQLResultSetMapping.java","raw_url":"https://github.com/apache/openjpa/raw/4afdb070427b8b3f2ac3f18c9629d9509727de20/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/sqlresultmapping/TestSQLResultSetMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/sqlresultmapping/TestSQLResultSetMapping.java?ref=4afdb070427b8b3f2ac3f18c9629d9509727de20","patch":"@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query.sqlresultmapping;\n+\n+import java.sql.Timestamp;\n+import java.util.List;\n+import java.util.Properties;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.querycache.QCEntity;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/*\n+ * Test for OPENJPA-2651.\n+ */\n+public class TestSQLResultSetMapping extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        super.setUp(DROP_TABLES, CrtOperacaoEntity.class,\n+            CrtRequisicaoEntity.class, CrtRequisicaoChequePersEntity.class);\n+\n+        // Set up necessary test data:\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        CrtOperacaoEntity op = new CrtOperacaoEntity();\n+        op.setId(25384);\n+        op.setDataHora(Timestamp.valueOf(\"2014-12-16 15:24:54.0\"));\n+        em.persist(op);\n+\n+        CrtOperacaoEntity op2 = new CrtOperacaoEntity();\n+        op2.setId(23409);\n+        op2.setDataHora(Timestamp.valueOf(\"2014-10-27 16:12:53.0\"));\n+        em.persist(op2);\n+\n+        CrtRequisicaoChequePersEntity reqCheq =\n+            new CrtRequisicaoChequePersEntity();\n+        reqCheq.setId(500006164);\n+        reqCheq.setCrtOperacaoByOperacaoRecepcaoServCent(op);\n+        reqCheq.setCrtOperacaoByOperacaoRequisicao(op2);\n+        em.persist(reqCheq);\n+\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    /*\n+     * Prior to OPENJPA-2651, this test would result in the following exception:\n+     * \n+     * PersistenceException: Column '0' not found.\n+     *   FailedObject: \n+     *   org.apache.openjpa.persistence.query.sqlresultmapping.CrtOperacaoEntity-500006164 [java.lang.String]\n+     *        at org.apache.openjpa.jdbc.sql.DBDictionary.narrow(DBDictionary.java:4998)\n+     *   .....\n+     *   Caused by: java.sql.SQLException: Column '0' not found.         \n+     */\n+    public void testMappingNoException() {\n+\n+        String sql = \"SELECT t0.ID, t2.DATA_HORA as opRecepcaoServCentraisDataHora, t2.ID as opRecepcaoServCentraisId\"\n+                + \" FROM CRT_REQUISICAO_CHEQUE_PERS t0, CRT_OPERACAO t2 WHERE t0.ID = 500006164 and t2.ID = 25384\";\n+\n+        EntityManager em = emf.createEntityManager();\n+\n+        Query query = em.createNativeQuery(sql, \"MyResultMapping\");\n+        List<CrtRequisicaoChequePersEntity> res = query.getResultList();\n+\n+        assertEquals(res.size(), 1);\n+        assertEquals(500006164, res.get(0).getId());\n+        assertEquals(25384, res.get(0).getCrtOperacaoByOperacaoRecepcaoServCent().getId());        \n+        assertEquals(Timestamp.valueOf(\"2014-12-16 15:24:54.0\"), \n+            res.get(0).getCrtOperacaoByOperacaoRecepcaoServCent().getDataHora());\n+\n+        em.close();\n+    }\n+\n+    /*\n+     * Prior to OPENJPA-2651, this test would result in the wrong id provided in the \n+     * CrtOperacaoEntity.  Specifically, the ID in CrtOperacaoEntity would contain\n+     * '500006164', which is the ID for the CrtRequisicaoEntity.\n+     */\n+    public void testMappingCorrectID() {\n+\n+        String sql =\n+            \"SELECT t0.ID, t1.ID as opRecepcaoServCentraisId, t1.DATA_HORA as opRecepcaoServCentraisDataHora, \"\n+                + \"t2.ID, t2.DATA_HORA, t3.ID, t4.ID, t4.OPERACAO_RECEPCAO_SERV_CENT, \"\n+                + \"t4.OPERACAO_REQUISICAO FROM CRT_REQUISICAO_CHEQUE_PERS t0 LEFT OUTER JOIN \"\n+                + \"CRT_OPERACAO t1 ON t0.OPERACAO_RECEPCAO_SERV_CENT = t1.ID LEFT OUTER JOIN \"\n+                + \"CRT_OPERACAO t2 ON t0.OPERACAO_REQUISICAO = t2.ID \"\n+                + \"LEFT OUTER JOIN CRT_REQUISICAO t3 \"\n+                + \"ON t0.ID = t3.ID INNER JOIN CRT_REQUISICAO t5 \"\n+                + \"ON t0.ID = t5.ID LEFT OUTER JOIN \"\n+                + \"CRT_REQUISICAO_CHEQUE_PERS t4 \"\n+                + \"ON t3.ID = t4.ID WHERE t0.ID = 500006164\";\n+\n+        EntityManager em = emf.createEntityManager();\n+\n+        Query query = em.createNativeQuery(sql, \"MyResultMapping\");\n+        List<CrtRequisicaoChequePersEntity> res = query.getResultList();\n+        \n+        assertEquals(res.size(), 1);\n+        assertEquals(500006164, res.get(0).getId());\n+        assertEquals(25384, res.get(0).getCrtOperacaoByOperacaoRecepcaoServCent().getId());\n+        assertEquals(Timestamp.valueOf(\"2014-12-16 15:24:54.0\"), \n+            res.get(0).getCrtOperacaoByOperacaoRecepcaoServCent().getDataHora());\n+\n+        em.close();\n+    }\n+}"}]}

