{"sha":"4b04ef53cfa5769f9a32cd90808f17a5bb06a1f0","node_id":"MDY6Q29tbWl0MjA2MzY0OjRiMDRlZjUzY2ZhNTc2OWY5YTMyY2Q5MDgwOGYxN2E1YmIwNmExZjA=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2012-07-17T21:59:10Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2012-07-17T21:59:10Z"},"message":"OPENJPA-2228: Fix SQLBuffer when using an Entity with an EmbeddedId that has multiple pks and QuerySQLCache is enabled. Patch contributed by Helen Xu.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1362679 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8b15c2bfa8b7f891eb2387171cbc4fd3f52ca3ca","url":"https://api.github.com/repos/apache/openjpa/git/trees/8b15c2bfa8b7f891eb2387171cbc4fd3f52ca3ca"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4b04ef53cfa5769f9a32cd90808f17a5bb06a1f0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4b04ef53cfa5769f9a32cd90808f17a5bb06a1f0","html_url":"https://github.com/apache/openjpa/commit/4b04ef53cfa5769f9a32cd90808f17a5bb06a1f0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4b04ef53cfa5769f9a32cd90808f17a5bb06a1f0/comments","author":null,"committer":null,"parents":[{"sha":"a42c9c280a2834dae7e70b4c3f06e4d7ccd644d0","url":"https://api.github.com/repos/apache/openjpa/commits/a42c9c280a2834dae7e70b4c3f06e4d7ccd644d0","html_url":"https://github.com/apache/openjpa/commit/a42c9c280a2834dae7e70b4c3f06e4d7ccd644d0"}],"stats":{"total":282,"additions":280,"deletions":2},"files":[{"sha":"418214f47545e9d589a9fc69034480ac61dff948","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","status":"modified","additions":21,"deletions":2,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/4b04ef53cfa5769f9a32cd90808f17a5bb06a1f0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","raw_url":"https://github.com/apache/openjpa/raw/4b04ef53cfa5769f9a32cd90808f17a5bb06a1f0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java?ref=4b04ef53cfa5769f9a32cd90808f17a5bb06a1f0","patch":"@@ -189,9 +189,28 @@ else if (_cols != null)\n         }\n \n         if (_userIndex != null) {\n-            // fix up user parameter index\n+            // fix up user parameter index(s)\n             for (int i = 0; i < _userIndex.size(); i+=2) {\n-                _userIndex.set(i, _userParams.indexOf(_userIndex.get(i+1)));\n+            \tObject param = _userIndex.get(i+1);\n+                \n+            \tObject previousParam = (i > 0) ? _userIndex.get(i-1) : null;            \t\n+            \tif ( param != previousParam) {\n+            \t\t_userIndex.set(i, _userParams.indexOf(param));\n+            \t}else{\n+            \t\t//if there are multiple parameters for the in clause or the combined PK field, \n+            \t\t//we got duplicate param objects in _userParams list. \n+            \t\t//In order to find the right index, we have to skip params that's checked already.\n+            \t\tint previousUserIndex = (Integer)_userIndex.get(i-2);\n+            \t\tint userParamindex = 0;\n+\n+                \tfor(Object next : _userParams){\n+                        if (next == param && userParamindex > previousUserIndex) {\n+                            _userIndex.set(i, userParamindex);\n+                            break;\n+                      }\n+                      userParamindex++;\n+                \t}\n+            \t}            \t\n             }\n         }\n     }"},{"sha":"757625c2eb260bf78c7b4e055582db21abce5987","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/CombinedPKEmbeddedEntity.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/apache/openjpa/blob/4b04ef53cfa5769f9a32cd90808f17a5bb06a1f0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/CombinedPKEmbeddedEntity.java","raw_url":"https://github.com/apache/openjpa/raw/4b04ef53cfa5769f9a32cd90808f17a5bb06a1f0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/CombinedPKEmbeddedEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/CombinedPKEmbeddedEntity.java?ref=4b04ef53cfa5769f9a32cd90808f17a5bb06a1f0","patch":"@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.openjpa.persistence.jdbc.sqlcache;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Embeddable;\n+\n+@Embeddable\n+public class CombinedPKEmbeddedEntity implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Column(name = \"keyA\", nullable = false)\n+    private int keyA;\n+    @Column(name = \"keyB\", nullable = false)\n+    private int keyB;\n+    @Column(name = \"keyC\", nullable = false)\n+    private int keyC;\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + keyA;\n+        result = prime * result + keyB;\n+        result = prime * result + keyC;\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (getClass() != obj.getClass())\n+            return false;\n+        CombinedPKEmbeddedEntity other = (CombinedPKEmbeddedEntity) obj;\n+        if (keyA != other.keyA)\n+            return false;\n+        if (keyB != other.keyB)\n+            return false;\n+        if (keyC != other.keyC)\n+            return false;\n+        return true;\n+    }\n+\n+    public int getKeyA() {\n+        return keyA;\n+    }\n+\n+    public void setKeyA(int keyA) {\n+        this.keyA = keyA;\n+    }\n+\n+    public int getKeyB() {\n+        return keyB;\n+    }\n+\n+    public void setKeyB(int keyB) {\n+        this.keyB = keyB;\n+    }\n+\n+    public int getKeyC() {\n+        return keyC;\n+    }\n+\n+    public void setKeyC(int keyC) {\n+        this.keyC = keyC;\n+    }\n+\n+}"},{"sha":"def133e2e7b27fcecbf7bed8314aac2b10c726b5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/CombinedPKListEntity.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/4b04ef53cfa5769f9a32cd90808f17a5bb06a1f0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/CombinedPKListEntity.java","raw_url":"https://github.com/apache/openjpa/raw/4b04ef53cfa5769f9a32cd90808f17a5bb06a1f0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/CombinedPKListEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/CombinedPKListEntity.java?ref=4b04ef53cfa5769f9a32cd90808f17a5bb06a1f0","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.openjpa.persistence.jdbc.sqlcache;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinColumns;\n+import javax.persistence.ManyToOne;\n+\n+@Entity\n+public class CombinedPKListEntity {\n+\n+    @Id\n+    private int id;\n+\n+    @ManyToOne\n+    @JoinColumns({ @JoinColumn(name = \"keyA\", referencedColumnName = \"keyA\"),\n+        @JoinColumn(name = \"keyB\", referencedColumnName = \"keyB\"),\n+        @JoinColumn(name = \"keyC\", referencedColumnName = \"keyC\") })\n+    private CombinedPKTestEntity te;\n+\n+    @Column(insertable = false, updatable = false)\n+    private int keyA;\n+    @Column(insertable = false, updatable = false)\n+    private int keyB;\n+    @Column(insertable = false, updatable = false)\n+    private int keyC;\n+\n+    public int getKeyA() {\n+        return keyA;\n+    }\n+\n+    public void setKeyA(int keyA) {\n+        this.keyA = keyA;\n+    }\n+\n+    public int getKeyB() {\n+        return keyB;\n+    }\n+\n+    public void setKeyB(int keyB) {\n+        this.keyB = keyB;\n+    }\n+\n+    public int getKeyC() {\n+        return keyC;\n+    }\n+\n+    public void setKeyC(int keyC) {\n+        this.keyC = keyC;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public CombinedPKTestEntity getTe() {\n+        return te;\n+    }\n+\n+    public void setTe(CombinedPKTestEntity te) {\n+        this.te = te;\n+    }\n+\n+}"},{"sha":"430f9991d15a19716b3147cd67bc92289a2428bd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/CombinedPKTestEntity.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/4b04ef53cfa5769f9a32cd90808f17a5bb06a1f0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/CombinedPKTestEntity.java","raw_url":"https://github.com/apache/openjpa/raw/4b04ef53cfa5769f9a32cd90808f17a5bb06a1f0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/CombinedPKTestEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/CombinedPKTestEntity.java?ref=4b04ef53cfa5769f9a32cd90808f17a5bb06a1f0","patch":"@@ -0,0 +1,80 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+package org.apache.openjpa.persistence.jdbc.sqlcache;\r\n+\r\n+import javax.persistence.EmbeddedId;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class CombinedPKTestEntity {\r\n+\r\n+    @EmbeddedId\r\n+    CombinedPKEmbeddedEntity pk = new CombinedPKEmbeddedEntity();\r\n+\r\n+    private String data1;\r\n+    private String data2;\r\n+\r\n+    @Override\r\n+    public int hashCode() {\r\n+        return pk.hashCode();\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean equals(Object obj) {\r\n+        if (this == obj)\r\n+            return true;\r\n+        if (obj == null)\r\n+            return false;\r\n+        if (getClass() != obj.getClass())\r\n+            return false;\r\n+        CombinedPKTestEntity other = (CombinedPKTestEntity) obj;\r\n+        if (pk == null) {\r\n+            if (other.pk != null)\r\n+                return false;\r\n+        } else if (!pk.equals(other.pk))\r\n+            return false;\r\n+        return true;\r\n+    }\r\n+\r\n+    public CombinedPKEmbeddedEntity getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public void setPk(CombinedPKEmbeddedEntity pk) {\r\n+        this.pk = pk;\r\n+    }\r\n+\r\n+    public String getData1() {\r\n+        return data1;\r\n+    }\r\n+\r\n+    public void setData1(String data1) {\r\n+        this.data1 = data1;\r\n+    }\r\n+\r\n+    public String getData2() {\r\n+        return data2;\r\n+    }\r\n+\r\n+    public void setData2(String data2) {\r\n+        this.data2 = data2;\r\n+    }\r\n+\r\n+}\r"}]}

