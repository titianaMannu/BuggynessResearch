{"sha":"4b19d0fa4ad20b385125b5502f886f64016d5665","node_id":"MDY6Q29tbWl0MjA2MzY0OjRiMTlkMGZhNGFkMjBiMzg1MTI1YjU1MDJmODg2ZjY0MDE2ZDU2NjU=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-11-06T17:24:17Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-11-06T17:24:17Z"},"message":"OPENJPA-1762: lock join table when extended pessimistic scope is used\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1032116 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"04ab92887cff9da3bbc542a48d3b6d54aff40253","url":"https://api.github.com/repos/apache/openjpa/git/trees/04ab92887cff9da3bbc542a48d3b6d54aff40253"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4b19d0fa4ad20b385125b5502f886f64016d5665","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4b19d0fa4ad20b385125b5502f886f64016d5665","html_url":"https://github.com/apache/openjpa/commit/4b19d0fa4ad20b385125b5502f886f64016d5665","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4b19d0fa4ad20b385125b5502f886f64016d5665/comments","author":null,"committer":null,"parents":[{"sha":"6d423c5b6b04f683b545d2890f0d74b785f44be5","url":"https://api.github.com/repos/apache/openjpa/commits/6d423c5b6b04f683b545d2890f0d74b785f44be5","html_url":"https://github.com/apache/openjpa/commit/6d423c5b6b04f683b545d2890f0d74b785f44be5"}],"stats":{"total":304,"additions":301,"deletions":3},"files":[{"sha":"1d6b30a69db725602ed0d5eee814cad29d6e56d9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/4b19d0fa4ad20b385125b5502f886f64016d5665/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/4b19d0fa4ad20b385125b5502f886f64016d5665/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java?ref=4b19d0fa4ad20b385125b5502f886f64016d5665","patch":"@@ -26,6 +26,10 @@\n import java.util.List;\n \n import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.jdbc.meta.Strategy;\n+import org.apache.openjpa.jdbc.meta.strats.ContainerFieldStrategy;\n+import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.SQLFactory;\n@@ -124,6 +128,7 @@ private void lockRow(OpenJPAStateManager sm, int timeout, int level) {\n         ClassMapping mapping = (ClassMapping) sm.getMetaData();\n \n         List<SQLBuffer> sqls = getLockRows(dict, id, mapping, fetch, _store.getSQLFactory()); \n+        lockJoinTables(sqls, dict, id, mapping, fetch, _store.getSQLFactory());\n \n         ensureStoreManagerTransaction();\n         Connection conn = _store.getConnection();\n@@ -163,6 +168,21 @@ private void lockRow(OpenJPAStateManager sm, int timeout, int level) {\n         sqls.add(select.toSelect(true, fetch));\n         return sqls;\n     }\n+    \n+    protected void lockJoinTables(List<SQLBuffer> sqls, DBDictionary dict, Object id, ClassMapping mapping,\n+            JDBCFetchConfiguration fetch, SQLFactory factory) {\n+        FieldMapping[] fms = mapping.getFieldMappings();\n+        for (int i = 0; i < fms.length; i++) {\n+            Strategy strat = fms[i].getStrategy();\n+            if (strat instanceof ContainerFieldStrategy) {\n+                ForeignKey fk = ((ContainerFieldStrategy)strat).getJoinForeignKey();\n+                Select select = factory.newSelect();\n+                select.select(fk.getColumns());\n+                select.whereForeignKey(fk, id, fms[i].getDefiningMapping(), _store);\n+                sqls.add(select.toSelect(true, fetch));\n+            }\n+        }\n+    }\n \n     /**\n      * Enforce that we have an actual transaction in progress so that we can"},{"sha":"d2fe2d6774f17a9c5aab914db7ea4a38a32a06cb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ContainerFieldStrategy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/4b19d0fa4ad20b385125b5502f886f64016d5665/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ContainerFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/4b19d0fa4ad20b385125b5502f886f64016d5665/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ContainerFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ContainerFieldStrategy.java?ref=4b19d0fa4ad20b385125b5502f886f64016d5665","patch":"@@ -77,7 +77,7 @@ private void testEmpty(SQLBuffer sql, Select sel, Joins joins,\n         appendSize(sql, sel, joins);\n     }\n \n-    protected abstract ForeignKey getJoinForeignKey();\n+    public abstract ForeignKey getJoinForeignKey();\n \n     public void appendSize(SQLBuffer sql, Select sel, Joins joins) {\n         DBDictionary dict = field.getMappingRepository().getDBDictionary();"},{"sha":"a9af073ae74782fb7847044ea17b1697c0b43f24","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MapTableFieldStrategy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/4b19d0fa4ad20b385125b5502f886f64016d5665/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MapTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/4b19d0fa4ad20b385125b5502f886f64016d5665/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MapTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MapTableFieldStrategy.java?ref=4b19d0fa4ad20b385125b5502f886f64016d5665","patch":"@@ -182,7 +182,7 @@ public Joins joinKey(Joins joins, boolean forceOuter) {\n         return field.join(joins, forceOuter, true);\n     }\n \n-    protected ForeignKey getJoinForeignKey() {\n+    public ForeignKey getJoinForeignKey() {\n         return field.getJoinForeignKey();\n     }\n "},{"sha":"a6a3f604a78b91040b488894683fc78698cb2297","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/4b19d0fa4ad20b385125b5502f886f64016d5665/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/4b19d0fa4ad20b385125b5502f886f64016d5665/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java?ref=4b19d0fa4ad20b385125b5502f886f64016d5665","patch":"@@ -597,7 +597,7 @@ public Object loadProjection(JDBCStore store, JDBCFetchConfiguration fetch,\n         return loadElement(null, store, fetch, res, joins);\n     }\n \n-    protected ForeignKey getJoinForeignKey() {\n+    public ForeignKey getJoinForeignKey() {\n         return getJoinForeignKey(getDefaultElementMapping(false));\n     }\n     "},{"sha":"7058ee4cd73a730bd9c4bc1d8c494a8d9232d155","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/Person.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/4b19d0fa4ad20b385125b5502f886f64016d5665/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/Person.java","raw_url":"https://github.com/apache/openjpa/raw/4b19d0fa4ad20b385125b5502f886f64016d5665/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/Person.java?ref=4b19d0fa4ad20b385125b5502f886f64016d5665","patch":"@@ -0,0 +1,98 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.lockmgr;\r\n+\r\n+import java.io.Externalizable;\r\n+import java.io.IOException;\r\n+import java.io.ObjectInput;\r\n+import java.io.ObjectOutput;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.JoinColumn;\r\n+import javax.persistence.ManyToMany;\r\n+import javax.persistence.ManyToOne;\r\n+\r\n+\r\n+@Entity\r\n+public class Person implements Externalizable {\r\n+\r\n+    private int id;\r\n+\r\n+    private String firstName;\r\n+    private String lastName;\r\n+    private List<PhoneNumber> phoneNumbers;\r\n+    \r\n+    @Id\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getFirstName() {\r\n+        return firstName;\r\n+    }\r\n+\r\n+    public void setFirstName(String firstName) {\r\n+        this.firstName = firstName;\r\n+    }\r\n+\r\n+    public String getLastName() {\r\n+        return lastName;\r\n+    }\r\n+\r\n+    public void setLastName(String lastName) {\r\n+        this.lastName = lastName;\r\n+    }\r\n+    \r\n+    @ManyToMany(mappedBy = \"owners\")\r\n+    public List<PhoneNumber> getPhoneNumbers(){\r\n+        return phoneNumbers;\r\n+    }\r\n+    \r\n+    public void setPhoneNumbers(List<PhoneNumber> numbers){\r\n+        phoneNumbers = numbers;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return this.getClass().getName() + '@'\r\n+            + Integer.toHexString(System.identityHashCode(this)) + \"[id=\"\r\n+            + getId() + \"] first=\" + getFirstName()\r\n+            + \", last=\" + getLastName() + \" phone numbers=\"+phoneNumbers.toString();\r\n+    }\r\n+\r\n+    public void readExternal(ObjectInput in) throws IOException,\r\n+        ClassNotFoundException {\r\n+        id = in.readInt();\r\n+        firstName = (String) in.readObject();\r\n+        lastName = (String) in.readObject();\r\n+        phoneNumbers = (List<PhoneNumber>) in.readObject();\r\n+    }\r\n+\r\n+    public void writeExternal(ObjectOutput out) throws IOException {\r\n+        out.writeInt(id);\r\n+        out.writeObject(firstName);\r\n+        out.writeObject(lastName);\r\n+        out.writeObject(phoneNumbers);\r\n+    }\r\n+}\r"},{"sha":"36c3366efb4ce753b937422fc35d54eeb0d04500","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/PhoneNumber.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/4b19d0fa4ad20b385125b5502f886f64016d5665/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/PhoneNumber.java","raw_url":"https://github.com/apache/openjpa/raw/4b19d0fa4ad20b385125b5502f886f64016d5665/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/PhoneNumber.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/PhoneNumber.java?ref=4b19d0fa4ad20b385125b5502f886f64016d5665","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.lockmgr;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToMany;\n+\n+@Entity\n+public class PhoneNumber implements Serializable {\n+    private static final long serialVersionUID = 6918497432632022604L;\n+\n+    PhoneNumber() {\n+    }\n+\n+    public PhoneNumber(String p) {\n+        number = p;\n+    }\n+\n+    @Id\n+    String number;\n+\n+    @ManyToMany\n+    List<Person> owners;\n+\n+    public void setOwners(List<Person> o) {\n+        owners = o;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return number;\n+    }\n+}"},{"sha":"47812e9c1ffe2a6909c13aa9c8cdb59737928c9a","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestLocking.java","status":"added","additions":127,"deletions":0,"changes":127,"blob_url":"https://github.com/apache/openjpa/blob/4b19d0fa4ad20b385125b5502f886f64016d5665/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestLocking.java","raw_url":"https://github.com/apache/openjpa/raw/4b19d0fa4ad20b385125b5502f886f64016d5665/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestLocking.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestLocking.java?ref=4b19d0fa4ad20b385125b5502f886f64016d5665","patch":"@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.lockmgr;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.persistence.LockModeType;\n+import javax.persistence.PessimisticLockScope;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+public class TestLocking extends SQLListenerTestCase {\n+    String _phone = \"5075555555\";\n+\n+    public void setUp() {\n+        super.setUp(CLEAR_TABLES, Person.class, PhoneNumber.class\n+        // ,\"openjpa.Log\", \"SQL=trace\"\n+            );\n+        populate();\n+    }\n+\n+    public void testExtendedLockScope() throws Exception {\n+        Map<String, Object> props = new HashMap<String, Object>();\n+        props.put(\"javax.persistence.lock.scope\", PessimisticLockScope.EXTENDED);\n+\n+        OpenJPAEntityManagerSPI em1 = emf.createEntityManager();\n+        OpenJPAEntityManagerSPI em2 = emf.createEntityManager();\n+        CommitterThread committer = new CommitterThread(em2);\n+\n+        em1.getTransaction().begin();\n+        Person e1 = em1.find(Person.class, 1);\n+        assertEquals(1, e1.getPhoneNumbers().size());\n+\n+        // This SHOULD lock Employee with id=1 AND the join table.\n+        // \n+        // pg 86\n+        // Element collections and relationships owned by the entity that are contained in join tables will be\n+        // locked if the javax.persistence.lock.scope property is specified with a value of\n+        // PessimisticLockScope.EXTENDED. The state of entities referenced by such relationships will\n+        // not be locked (unless those entities are explicitly locked). This property may be passed as an argument\n+        // to the methods of the EntityManager, Query, and TypedQuery interfaces that allow lock modes\n+        // to be specified or used with the NamedQuery annotation.\n+\n+        em1.refresh(e1, LockModeType.PESSIMISTIC_FORCE_INCREMENT, props);\n+\n+        // Kick off the committer thread\n+        committer.start();\n+\n+        // Make sure to sleep at least for 5 seconds AFTER the committer calls commit\n+        while (System.currentTimeMillis() - committer.sleepStartTime < 5000) {\n+            Thread.sleep(5000);\n+        }\n+        // The committer should still be waiting because the em1.refresh(...) call should have locked the join table and\n+        // the remove can't complete\n+        assertFalse(committer.commitComplete);\n+        em1.getTransaction().commit();\n+        em1.close();\n+        // wait for child thread to finish\n+        committer.join();\n+    }\n+\n+    private class CommitterThread extends Thread {\n+        OpenJPAEntityManagerSPI _em2;\n+        boolean inCommit = false;\n+        boolean commitComplete = false;\n+        long sleepStartTime = Long.MAX_VALUE;\n+\n+        public CommitterThread(OpenJPAEntityManagerSPI e) {\n+            _em2 = e;\n+        }\n+\n+        @Override\n+        public void run() {\n+            _em2.getTransaction().begin();\n+            PhoneNumber phoneNumber = _em2.find(PhoneNumber.class, _phone);\n+            _em2.remove(phoneNumber);\n+            inCommit = true;\n+            sleepStartTime = System.currentTimeMillis();\n+            _em2.getTransaction().commit();\n+            commitComplete = true;\n+            _em2.close();\n+        }\n+    }\n+\n+    private void populate() {\n+        OpenJPAEntityManagerSPI em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        PhoneNumber p = new PhoneNumber(_phone);\n+        List<PhoneNumber> numbers = Arrays.asList(new PhoneNumber[] { p });\n+\n+        Person e1 = new Person();\n+        e1.setId(1);\n+        e1.setPhoneNumbers(numbers);\n+        Person e2 = new Person();\n+        e2.setId(2);\n+        e2.setPhoneNumbers(numbers);\n+\n+        p.setOwners(Arrays.asList(new Person[] { e1, e2 }));\n+        em.persist(e1);\n+        em.persist(e2);\n+        em.persist(p);\n+\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+}"}]}

