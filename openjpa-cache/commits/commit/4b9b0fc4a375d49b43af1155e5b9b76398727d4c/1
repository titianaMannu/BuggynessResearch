{"sha":"4b9b0fc4a375d49b43af1155e5b9b76398727d4c","node_id":"MDY6Q29tbWl0MjA2MzY0OjRiOWIwZmM0YTM3NWQ0OWI0M2FmMTE1NWU1YjliNzYzOTg3MjdkNGM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-22T18:21:03Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-22T18:21:03Z"},"message":"OPENJPA-293. Allow user configuration of error vs. warning if managed classes are not enhanced.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.0@568721 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e17fb0593ea4d5a968643e8f0770087f3b15c0f9","url":"https://api.github.com/repos/apache/openjpa/git/trees/e17fb0593ea4d5a968643e8f0770087f3b15c0f9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4b9b0fc4a375d49b43af1155e5b9b76398727d4c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4b9b0fc4a375d49b43af1155e5b9b76398727d4c","html_url":"https://github.com/apache/openjpa/commit/4b9b0fc4a375d49b43af1155e5b9b76398727d4c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4b9b0fc4a375d49b43af1155e5b9b76398727d4c/comments","author":null,"committer":null,"parents":[{"sha":"3ae441064b7df23ff0d6a90e1ada74b1886c02e3","url":"https://api.github.com/repos/apache/openjpa/commits/3ae441064b7df23ff0d6a90e1ada74b1886c02e3","html_url":"https://github.com/apache/openjpa/commit/3ae441064b7df23ff0d6a90e1ada74b1886c02e3"}],"stats":{"total":177,"additions":136,"deletions":41},"files":[{"sha":"6d6305e91d88ed180544c0ff888deed5d7923aa1","filename":"openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","status":"modified","additions":14,"deletions":5,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/4b9b0fc4a375d49b43af1155e5b9b76398727d4c/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","raw_url":"https://github.com/apache/openjpa/raw/4b9b0fc4a375d49b43af1155e5b9b76398727d4c/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java?ref=4b9b0fc4a375d49b43af1155e5b9b76398727d4c","patch":"@@ -34,6 +34,7 @@\n import org.apache.openjpa.lib.util.BytecodeWriter;\r\n import org.apache.openjpa.lib.util.JavaVersions;\r\n import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.lib.util.Localizer.Message;\r\n import org.apache.openjpa.meta.ClassMetaData;\r\n import org.apache.openjpa.meta.FieldMetaData;\r\n import org.apache.openjpa.meta.JavaTypes;\r\n@@ -81,18 +82,26 @@\n             return null;\r\n         if (classes.size() == 0)\r\n             return Collections.EMPTY_LIST;\r\n-        if (!conf.getRuntimeClassOptimization()) {\r\n+\r\n+        Log log = conf.getLog(OpenJPAConfiguration.LOG_ENHANCE);\r\n+        if (conf.getRuntimeUnenhancedClassesConstant()\r\n+            != RuntimeUnenhancedClasssesModes.SUPPORTED) {\r\n             Collection unenhanced = new ArrayList();\r\n             for (Class cls : classes)\r\n                 if (!PersistenceCapable.class.isAssignableFrom(cls))\r\n                     unenhanced.add(cls);\r\n-            if (unenhanced.size() > 0)\r\n-                throw new UserException(_loc.get(\r\n-                    \"runtime-optimization-disabled\", unenhanced));\r\n+            if (unenhanced.size() > 0) {\r\n+                Message msg = _loc.get(\"runtime-optimization-disabled\",\r\n+                    unenhanced);\r\n+                if (conf.getRuntimeUnenhancedClassesConstant()\r\n+                    == RuntimeUnenhancedClasssesModes.WARN)\r\n+                    log.warn(msg);\r\n+                else\r\n+                    throw new UserException(msg);\r\n+            }\r\n             return null;\r\n         }\r\n \r\n-        Log log = conf.getLog(OpenJPAConfiguration.LOG_ENHANCE);\r\n         boolean redefine = ClassRedefiner.canRedefineClasses();\r\n         if (redefine)\r\n             log.info(_loc.get(\"enhance-and-subclass-no-redef-start\",\r"},{"sha":"52b6418d4c46bffed5e93d739dc11e607ecf71d0","filename":"openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","status":"modified","additions":14,"deletions":10,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/4b9b0fc4a375d49b43af1155e5b9b76398727d4c/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","raw_url":"https://github.com/apache/openjpa/raw/4b9b0fc4a375d49b43af1155e5b9b76398727d4c/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java?ref=4b9b0fc4a375d49b43af1155e5b9b76398727d4c","patch":"@@ -26,7 +26,6 @@\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Options;\n-import org.apache.openjpa.lib.util.TemporaryClassLoader;\n import org.apache.openjpa.util.ClassResolver;\n \n /**\n@@ -45,13 +44,13 @@\n  * <p>By default, if specified, the agent runs the OpenJPA enhancer on\n  * all classes listed in the first persistence unit as they are loaded,\n  * and redefines all other persistent classes when they are encountered.\n- * To disable enhancement and rely solely on the redefinition logic, set\n- * the RuntimeEnhancement flag to false. To disable redefinition and rely\n- * solely on pre-deployment or runtime enhancement, set the\n- * RuntimeRedefinition flag to false.\n+ * To disable enhancement at class-load time and rely solely on the\n+ * redefinition logic, set the ClassLoadEnhancement flag to false. To\n+ * disable redefinition and rely solely on pre-deployment or class-load\n+ * enhancement, set the RuntimeRedefinition flag to false.\n  * </p>\n  *\n- * <p><code>java -javaagent:openjpa.jar=RuntimeEnhancement=false</code></p>\n+ * <p><code>java -javaagent:openjpa.jar=ClassLoadEnhancement=false</code></p>\n  *\n  * @author Abe White\n  * @author Patrick Linskey\n@@ -61,19 +60,24 @@\n     public static void premain(String args, Instrumentation inst) {\n         Options opts = Configurations.parseProperties(args);\n \n+        if (opts.getBooleanProperty(\n+            \"ClassLoadEnhancement\", \"classLoadEnhancement\", true))\n+            registerClassLoadEnhancer(inst, opts);\n+\n+        // Deprecated property setting\n         if (opts.getBooleanProperty(\n             \"RuntimeEnhancement\", \"runtimeEnhancement\", true))\n-            registerRuntimeEnhancer(inst, opts);\n+            registerClassLoadEnhancer(inst, opts);\n \n-        if (opts.getBooleanProperty(\"RuntimeRedefinition\",\n-            \"runtimeRedefinition\", true)) {\n+        if (opts.getBooleanProperty(\n+            \"RuntimeRedefinition\", \"runtimeRedefinition\", true)) {\n             InstrumentationFactory.setInstrumentation(inst);\n         } else {\n             InstrumentationFactory.setDynamicallyInstallAgent(false);\n         }\n     }\n \n-    private static void registerRuntimeEnhancer(Instrumentation inst,\n+    private static void registerClassLoadEnhancer(Instrumentation inst,\n         Options opts) {\n         OpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\n         Configurations.populateConfiguration(conf, opts);"},{"sha":"751773f6950bfba8b823db49dfe9416819f0b66f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","status":"modified","additions":40,"deletions":8,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/4b9b0fc4a375d49b43af1155e5b9b76398727d4c/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/4b9b0fc4a375d49b43af1155e5b9b76398727d4c/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java?ref=4b9b0fc4a375d49b43af1155e5b9b76398727d4c","patch":"@@ -1389,31 +1389,63 @@\n     public StoreFacadeTypeRegistry getStoreFacadeTypeRegistry();\n \n     /**\n-     * Return the {@link org.apache.openjpa.event.BrokerFactoryEventManager} associated with this\n-     * configuration.\n+     * Return the {@link org.apache.openjpa.event.BrokerFactoryEventManager}\n+     * associated with this configuration.\n      *\n      * @since 1.0.0\n      */\n     public BrokerFactoryEventManager getBrokerFactoryEventManager();\n \n     /**\n-     * Whether or not runtime class optimization is enabled.\n+     * Specifies how OpenJPA handles unenhanced types. Possible values are:\n+     * <ul>\n+     * <li><code>enabled</code>: Runtime optimization of persistent types\n+     * is available. This is the default</li>\n+     * <li><code>disabled</code>: Runtime optimization of persistent types\n+     * is not available. An exception will be thrown if the system loads with\n+     * persistent types that are not enhanced.</li>\n+     * <li><code>warn</code>: Runtime optimization of persistent types is\n+     * not available, but no exception will be thrown initially. A warning will\n+     * be logged instead. It is likely that the system will fail at a later\n+     * point. This might be suitable for environments with complex classloader\n+     * configurations.</li>\n+     * </ul>\n      *\n      * @since 1.0.0\n      */\n-    public boolean getRuntimeClassOptimization();\n+    public String getRuntimeUnenhancedClasses();\n \n     /**\n-     * Whether or not runtime class optimization is enabled.\n+     * Specifies how OpenJPA handles unenhanced types.\n      *\n+     * @see {@link #getRuntimeUnenhancedClasses()}\n      * @since 1.0.0\n      */\n-    public void setRuntimeClassOptimization(Boolean enabled);\n+    public void setRuntimeUnenhancedClasses(String mode);\n \n     /**\n-     * Wrapper for JCA usage of {@link #setRetryClassRegistration(boolean)}.\n+     * Return the runtime class optimization setting as one of the\n+     * following symbolic constants:\n+     * <ul>\n+     * <li>{@link RuntimeClassOptimizationModes#RUNTIME_OPT_ENABLED}</li>\n+     * <li>{@link RuntimeClassOptimizationModes#RUNTIME_OPT_DISABLED}</li>\n+     * <li>{@link RuntimeClassOptimizationModes#RUNTIME_OPT_WARN}</li>\n+     * </ul>\n+     *\n+     * @since 1.0.0\n+     */\n+    public int getRuntimeUnenhancedClassesConstant();\n+\n+    /**\n+     * Set the runtime class optimization setting as one of the\n+     * following symbolic constants:\n+     * <ul>\n+     * <li>{@link RuntimeClassOptimizationModes#RUNTIME_OPT_ENABLED}</li>\n+     * <li>{@link RuntimeClassOptimizationModes#RUNTIME_OPT_DISABLED}</li>\n+     * <li>{@link RuntimeClassOptimizationModes#RUNTIME_OPT_WARN}</li>\n+     * </ul>\n      *\n      * @since 1.0.0\n      */\n-    public void setRuntimeClassOptimization(boolean enabled);\n+    public void setRuntimeUnenhancedClasses(int mode);\n }"},{"sha":"9d88de3f5ed3b1b5ce95f34b71d9a159c07be676","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":25,"deletions":10,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/4b9b0fc4a375d49b43af1155e5b9b76398727d4c/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4b9b0fc4a375d49b43af1155e5b9b76398727d4c/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=4b9b0fc4a375d49b43af1155e5b9b76398727d4c","patch":"@@ -53,6 +53,7 @@\n import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.ProxyManager;\n import org.apache.openjpa.util.StoreFacadeTypeRegistry;\n+import org.apache.openjpa.enhance.RuntimeUnenhancedClasssesModes;\n \n /**\n  * Implementation of the {@link OpenJPAConfiguration} interface.\n@@ -131,7 +132,7 @@\n     public ObjectValue orphanedKeyPlugin;\n     public ObjectValue compatibilityPlugin;\n     public QueryCompilationCacheValue queryCompilationCachePlugin;\n-    public BooleanValue runtimeClassOptimization;\n+    public IntValue runtimeUnenhancedClasses;\n \n     // custom values\n     public BrokerFactoryValue brokerFactoryPlugin;\n@@ -480,9 +481,18 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n             \"getQueryCompilationCacheInstance\");\n         addValue(queryCompilationCachePlugin);\n         \n-        runtimeClassOptimization = addBoolean(\"RuntimeClassOptimization\");\n-        runtimeClassOptimization.setDefault(\"true\");\n-        runtimeClassOptimization.set(true);\n+        runtimeUnenhancedClasses = addInt(\"RuntimeUnenhancedClasses\");\n+        runtimeUnenhancedClasses.setAliases(new String[] {\n+            \"supported\", String.valueOf(\n+                RuntimeUnenhancedClasssesModes.SUPPORTED),\n+            \"unsupported\", String.valueOf(\n+                RuntimeUnenhancedClasssesModes.UNSUPPORTED),\n+            \"warn\", String.valueOf(\n+                RuntimeUnenhancedClasssesModes.WARN),\n+        });\n+        runtimeUnenhancedClasses.setDefault(\"supported\");\n+        runtimeUnenhancedClasses.setString(\"supported\");\n+        runtimeUnenhancedClasses.setAliasListComprehensive(true);\n \n         // initialize supported options that some runtimes may not support\n         supportedOptions.add(OPTION_NONTRANS_READ);\n@@ -1427,17 +1437,22 @@ public BrokerFactoryEventManager getBrokerFactoryEventManager() {\n         return _brokerFactoryEventManager;\n     }\n \n-    public boolean getRuntimeClassOptimization() {\n-        return runtimeClassOptimization.get();\n+    public String getRuntimeUnenhancedClasses() {\n+        return runtimeUnenhancedClasses.getString();\n     }\n \n-    public void setRuntimeClassOptimization(Boolean enabled) {\n-        setRuntimeClassOptimization(enabled.booleanValue());\n+    public int getRuntimeUnenhancedClassesConstant() {\n+        return runtimeUnenhancedClasses.get();\n     }\n \n-    public void setRuntimeClassOptimization(boolean enabled) {\n+    public void setRuntimeUnenhancedClasses(int mode) {\n         assertNotReadOnly();\n-        runtimeClassOptimization.set(enabled);\n+        runtimeUnenhancedClasses.set(mode);\n+    }\n+\n+    public void setRuntimeUnenhancedClasses(String mode) {\n+        assertNotReadOnly();\n+        runtimeUnenhancedClasses.setString(mode);\n     }\n \n     public void instantiateAll() {"},{"sha":"8066b3791db6a0b7ed68f73e22039c47e49b6dca","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RuntimeUnenhancedClasssesModes.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/4b9b0fc4a375d49b43af1155e5b9b76398727d4c/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RuntimeUnenhancedClasssesModes.java","raw_url":"https://github.com/apache/openjpa/raw/4b9b0fc4a375d49b43af1155e5b9b76398727d4c/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RuntimeUnenhancedClasssesModes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/RuntimeUnenhancedClasssesModes.java?ref=4b9b0fc4a375d49b43af1155e5b9b76398727d4c","patch":"@@ -0,0 +1,31 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+/**\r\n+ * Possible values for the <code>openjpa.RuntimeUnenhancedClasses</code>\r\n+ * configuration setting.\r\n+ *\r\n+ * @since 1.0.0\r\n+ */\r\n+public interface RuntimeUnenhancedClasssesModes {\r\n+    public final static int SUPPORTED = 0;\r\n+    public final static int UNSUPPORTED = 1;\r\n+    public final static int WARN = 2;\r\n+}\r"},{"sha":"3a416da3df129bab4ae7991af0a8c8f4620ec690","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/4b9b0fc4a375d49b43af1155e5b9b76398727d4c/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","raw_url":"https://github.com/apache/openjpa/raw/4b9b0fc4a375d49b43af1155e5b9b76398727d4c/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java?ref=4b9b0fc4a375d49b43af1155e5b9b76398727d4c","patch":"@@ -30,6 +30,7 @@\n import org.apache.openjpa.enhance.StateManager;\n import org.apache.openjpa.enhance.ManagedInstanceProvider;\n import org.apache.openjpa.enhance.ReflectingPersistenceCapable;\n+import org.apache.openjpa.enhance.RuntimeUnenhancedClasssesModes;\n import org.apache.openjpa.kernel.FetchConfiguration;\n import org.apache.openjpa.kernel.LockManager;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n@@ -216,7 +217,8 @@ public static void close(Object o) {\n     public static boolean isManagedType(OpenJPAConfiguration conf, Class type) {\n         return (PersistenceCapable.class.isAssignableFrom(type)\n             || (type != null\n-                && (conf == null || conf.getRuntimeClassOptimization())\n+                && (conf == null || conf.getRuntimeUnenhancedClassesConstant()\n+                    == RuntimeUnenhancedClasssesModes.SUPPORTED)\n                 && PCRegistry.isRegistered(type)));\n     }\n "},{"sha":"b3602d747550389adfc986d0db35e5202ceff45f","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/4b9b0fc4a375d49b43af1155e5b9b76398727d4c/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/4b9b0fc4a375d49b43af1155e5b9b76398727d4c/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/conf/localizer.properties?ref=4b9b0fc4a375d49b43af1155e5b9b76398727d4c","patch":"@@ -541,11 +541,12 @@ Compatibility-displayorder: 50\n Compatibility-expert: true\n Compatibility-interface: org.apache.openjpa.conf.Compatibility\n \n-RuntimeClassOptimization-name: Runtime class optimization\n-RuntimeClassOptimization-desc: Either \"true\" or \"false\".\n-RuntimeClassOptimization-type: General\n-RuntimeClassOptimization-cat: Optimization\n-RuntimeClassOptimization-displayorder: 50\n+RuntimeUnenhancedClasses-name: Runtime unenhanced classes\n+RuntimeUnenhancedClasses-desc: Either \"supported\", \"unsupported\", or \"warn\". \\\n+    Defaults to \"supported\".\n+RuntimeUnenhancedClasses-type: General\n+RuntimeUnenhancedClasses-cat: Optimization\n+RuntimeUnenhancedClasses-displayorder: 50\n \n no-named-cf: use a DataSource bound to JNDI\n diff-specs: Attempt to configure for multiple specifications.  Was configured \\"},{"sha":"0737163188fb73b15372d2c497ba3a136fbb3f81","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestEnhancementConfiguration.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/4b9b0fc4a375d49b43af1155e5b9b76398727d4c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestEnhancementConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/4b9b0fc4a375d49b43af1155e5b9b76398727d4c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestEnhancementConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestEnhancementConfiguration.java?ref=4b9b0fc4a375d49b43af1155e5b9b76398727d4c","patch":"@@ -29,7 +29,7 @@\n     public void testEnhancementConfiguration() {\r\n         try {\r\n             emf = createEMF(\r\n-                \"openjpa.RuntimeClassOptimization\", \"false\",\r\n+                \"openjpa.RuntimeUnenhancedClasses\", \"unsupported\",\r\n                 UnenhancedFieldAccess.class, CLEAR_TABLES);\r\n             assertFalse(ImplHelper.isManagedType(emf.getConfiguration(),\r\n                 UnenhancedFieldAccess.class));\r\n@@ -38,7 +38,8 @@ public void testEnhancementConfiguration() {\n                 \"that depends on unenhanced types but disables runtime\" +\r\n                 \"redefinition.\");\r\n         } catch (Exception e) {\r\n-            // expected\r\n+            assertTrue(e.getMessage().contains(\r\n+                \"This configuration disallows runtime optimization\"));\r\n         }\r\n     }\r\n }\n\\ No newline at end of file"}]}

