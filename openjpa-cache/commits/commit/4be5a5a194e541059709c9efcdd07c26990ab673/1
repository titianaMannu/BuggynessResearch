{"sha":"4be5a5a194e541059709c9efcdd07c26990ab673","node_id":"MDY6Q29tbWl0MjA2MzY0OjRiZTVhNWExOTRlNTQxMDU5NzA5YzllZmNkZDA3YzI2OTkwYWI2NzM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-12T15:08:16Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-12T15:08:16Z"},"message":"OPENJPA-1565: Raise correct time out exception\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@922288 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fae1ab27c00bf99b19a08103855e6bc3a347ec83","url":"https://api.github.com/repos/apache/openjpa/git/trees/fae1ab27c00bf99b19a08103855e6bc3a347ec83"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4be5a5a194e541059709c9efcdd07c26990ab673","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4be5a5a194e541059709c9efcdd07c26990ab673","html_url":"https://github.com/apache/openjpa/commit/4be5a5a194e541059709c9efcdd07c26990ab673","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4be5a5a194e541059709c9efcdd07c26990ab673/comments","author":null,"committer":null,"parents":[{"sha":"572d5934274a7f8961e12e3372f5f10f8cdff9d5","url":"https://api.github.com/repos/apache/openjpa/commits/572d5934274a7f8961e12e3372f5f10f8cdff9d5","html_url":"https://github.com/apache/openjpa/commit/572d5934274a7f8961e12e3372f5f10f8cdff9d5"}],"stats":{"total":483,"additions":324,"deletions":159},"files":[{"sha":"222d791839cb0f0d9bdf7ccba7baea6b169d3eba","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java?ref=4be5a5a194e541059709c9efcdd07c26990ab673","patch":"@@ -35,6 +35,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n import org.apache.openjpa.kernel.VersionLockManager;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.Exceptions;\n import org.apache.openjpa.util.LockException;\n \n /**\n@@ -117,8 +118,7 @@ private void lockRow(OpenJPAStateManager sm, int timeout, int level) {\n         JDBCFetchConfiguration fetch = _store.getFetchConfiguration();\n         if (dict.simulateLocking)\n             return;\n-        dict.assertSupport(dict.supportsSelectForUpdate,\n-            \"SupportsSelectForUpdate\");\n+        dict.assertSupport(dict.supportsSelectForUpdate, \"SupportsSelectForUpdate\");\n \n         Object id = sm.getObjectId();\n         ClassMapping mapping = (ClassMapping) sm.getMetaData();\n@@ -137,7 +137,7 @@ private void lockRow(OpenJPAStateManager sm, int timeout, int level) {\n                 checkLock(rs, sm, timeout);\n             }\n         } catch (SQLException se) {\n-            throw SQLExceptions.getStore(se, dict, level);\n+            throw SQLExceptions.getStore(se, Exceptions.toString(sm.getPersistenceCapable()), dict, level);\n         } finally {\n             if (stmnt != null)\n                 try { stmnt.close(); } catch (SQLException se) {}"},{"sha":"f705d391359990c01027319fcd058d0a63ab3e2d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":10,"deletions":14,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=4be5a5a194e541059709c9efcdd07c26990ab673","patch":"@@ -923,22 +923,18 @@ String nullSafe(String s) {\n     }\n \n     @Override\n-    protected Boolean matchErrorState(int subtype, Set<String> errorStates,\n-        SQLException ex) {\n-        Boolean recoverable = null;\n+    protected boolean isFatalException(int subtype, SQLException ex) {\n         String errorState = ex.getSQLState();\n-        if (errorStates.contains(errorState)) {\n-            recoverable = Boolean.FALSE;\n-            if (subtype == StoreException.LOCK && errorState.equals(\"57033\")\n-                && ex.getMessage().indexOf(\"80\") != -1) {\n-                recoverable = Boolean.TRUE;\n-            } else if ((subtype == StoreException.QUERY &&\n-                errorState.equals(\"57014\")) &&\n-                (ex.getErrorCode() == -952 || ex.getErrorCode() == -905)) {\n-                recoverable = Boolean.TRUE;\n-            }\n+        int errorCode = ex.getErrorCode();\n+        if (subtype == StoreException.LOCK && \"57033\".equals(errorState)\n+            && ex.getMessage().indexOf(\"80\") != -1) {\n+            return false;\n+        } \n+        if ((subtype == StoreException.QUERY && \"57014\".equals(errorState) &&\n+            (errorCode == -952 || errorCode == -905))) {\n+            return false;\n         }\n-        return recoverable;\n+        return super.isFatalException(subtype, ex);\n     }\n     \n     @Override"},{"sha":"33837b535c74ba19a5c2efa47d945d58d8270218","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":49,"deletions":32,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=4be5a5a194e541059709c9efcdd07c26990ab673","patch":"@@ -110,6 +110,7 @@\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.ValueStrategies;\n+import org.apache.openjpa.util.ExceptionInfo;\n import org.apache.openjpa.util.GeneralException;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.InvalidStateException;\n@@ -4777,10 +4778,9 @@ public void handleWarning(SQLWarning warning)\n      * be determined by the implementation. This may take into account\n      * DB-specific exception information in <code>causes</code>.\n      */\n-    public OpenJPAException newStoreException(String msg, SQLException[] causes,\n-        Object failed) {\n+    public OpenJPAException newStoreException(String msg, SQLException[] causes, Object failed) {\n         if (causes != null && causes.length > 0) {\n-            OpenJPAException ret = narrow(msg, causes[0]);\n+            OpenJPAException ret = narrow(msg, causes[0], failed);\n             ret.setFailedObject(failed).setNestedThrowables(causes);\n             return ret;\n         }\n@@ -4789,36 +4789,29 @@ public OpenJPAException newStoreException(String msg, SQLException[] causes,\n     }\n     \n     /**\n-     * Gets the subtype of StoreException by matching the given SQLException's\n+     * Gets the category of StoreException by matching the given SQLException's\n      * error state code to the list of error codes supplied by the dictionary.\n-     * Returns -1 if no matching code can be found.\n-     */\n-    OpenJPAException narrow(String msg, SQLException ex) {\n-        Boolean recoverable = null;\n-        int errorType = StoreException.GENERAL;\n-        for (Integer type : sqlStateCodes.keySet()) {\n-            Set<String> errorStates = sqlStateCodes.get(type);\n-            if (errorStates != null) {\n-                recoverable = matchErrorState(type, errorStates, ex);\n-                if (recoverable != null) {\n-                    errorType = type;\n-                    break;\n-                }\n-            }\n-        }\n+     * \n+     * @return a StoreException of {@link ExceptionInfo#GENERAL general} category\n+     * if the given SQL Exception can not be further categorized.\n+     * \n+     * @see #matchErrorState(Map, SQLException)\n+     */\n+    OpenJPAException narrow(String msg, SQLException ex, Object failed) {\n+        int errorType = matchErrorState(sqlStateCodes, ex);\n         StoreException storeEx;\n         switch (errorType) {\n         case StoreException.LOCK:\n-            storeEx = new LockException(msg);\n+            storeEx = new LockException(failed);\n             break;\n         case StoreException.OBJECT_EXISTS:\n             storeEx = new ObjectExistsException(msg);\n             break;\n         case StoreException.OBJECT_NOT_FOUND:\n-            storeEx = new ObjectNotFoundException(msg);\n+            storeEx = new ObjectNotFoundException(failed);\n             break;\n         case StoreException.OPTIMISTIC:\n-            storeEx = new OptimisticException(msg);\n+            storeEx = new OptimisticException(failed);\n             break;\n         case StoreException.REFERENTIAL_INTEGRITY:\n             storeEx = new ReferentialIntegrityException(msg);\n@@ -4829,24 +4822,48 @@ OpenJPAException narrow(String msg, SQLException ex) {\n         default:\n             storeEx = new StoreException(msg);\n         }\n-        if (recoverable != null) {\n-            storeEx.setFatal(!recoverable);\n-        }\n+        storeEx.setFatal(isFatalException(errorType, ex));\n         return storeEx;\n     }\n \n     /**\n-     * Determine if the SQLException argument matches any element in the\n-     * errorStates. Dictionary subclass can override this method and extract\n+     * Determine the more appropriate type of store exception by matching the SQL Error State of the\n+     * the given SQLException to the given Error States categorized by error types.\n+     * Dictionary subclass can override this method and extract\n      * SQLException data to figure out if the exception is recoverable.\n      * \n-     * @return null if no match is found or a Boolean value indicates the\n-     * exception is recoverable.\n+     * @param errorStates classification of SQL error states by their specific nature. The keys of the\n+     * map represent one of the constants defined in {@link StoreException}. The value corresponding to\n+     * a key represent the set of SQL Error States representing specific category of database error. \n+     * This supplied map is sourced from <code>sql-error-state-codes.xml</xml> and filtered the\n+     * error states for the current database.\n+     * \n+     * @param ex original SQL Exception as raised by the database driver.\n+     * \n+     * @return A constant indicating the category of error as defined in {@link StoreException}.\n      */\n-    protected Boolean matchErrorState(int subtype, Set<String> errorStates,\n-        SQLException ex) {\n+    protected int matchErrorState(Map<Integer,Set<String>> errorStates, SQLException ex) {\n         String errorState = ex.getSQLState();\n-        return errorStates.contains(errorState) ? Boolean.FALSE : null;\n+        for (Map.Entry<Integer,Set<String>> states : errorStates.entrySet()) {\n+            if (states.getValue().contains(errorState))\n+                return states.getKey();\n+        }\n+        return StoreException.GENERAL;\n+    }\n+    \n+    /**\n+     * Determine if the given SQL Exception is fatal or recoverable (such as a timeout).\n+     * This implementation always returns true (i.e. all exceptions are fatal).\n+     * The current dictionary implementation can overwrite this method to mark certain\n+     * exception conditions as recoverable error.\n+\n+     * @param subtype A constant indicating the category of error as defined in {@link StoreException}. \n+     * @param ex original SQL Exception as raised by the database driver.\n+     * \n+     * @return false if the error is fatal. \n+     */\n+    protected boolean isFatalException(int subtype, SQLException ex) {\n+        return true;\n     }\n     \n     /**"},{"sha":"92eaa3867b69076da950c5b30a14f32e9a1a55e9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","status":"modified","additions":10,"deletions":16,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java?ref=4be5a5a194e541059709c9efcdd07c26990ab673","patch":"@@ -377,23 +377,17 @@ public String getSchemaCase(){\n     }\n         \n     @Override\n-    protected Boolean matchErrorState(int subtype, Set<String> errorStates,\n-        SQLException ex) {\n-        Boolean recoverable = null;\n-        String errorState = ex.getSQLState();\n-        if (errorStates.contains(errorState)) {\n-            // SQL State of IX000 is a general purpose Informix error code\n-            // category, so only return Boolean.TRUE if we match SQL Codes\n-            // recoverable = Boolean.FALSE;\n-            if (subtype == StoreException.LOCK &&\n-                ex.getErrorCode() == -154) {\n-                recoverable = Boolean.TRUE;\n-            } else if (subtype == StoreException.QUERY &&\n-                ex.getErrorCode() == -213) {\n-                recoverable = Boolean.TRUE;\n-            }\n+    protected boolean isFatalException(int subtype, SQLException ex) {\n+        \n+        // SQL State of IX000 is a general purpose Informix error code\n+        // category, so only return Boolean.TRUE if we match SQL Codes\n+        // recoverable = Boolean.FALSE;\n+        if ((subtype == StoreException.LOCK && ex.getErrorCode() == -154) \n+          ||(subtype == StoreException.QUERY && ex.getErrorCode() == -213)) {\n+            return false;\n         }\n-        return recoverable;\n+        \n+        return super.isFatalException(subtype, ex);\n     }\n }\n "},{"sha":"4327fda1538721ec8bc26a5f3315585813adce98","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","status":"modified","additions":12,"deletions":16,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java?ref=4be5a5a194e541059709c9efcdd07c26990ab673","patch":"@@ -1259,25 +1259,21 @@ public int getBatchUpdateCount(PreparedStatement ps) throws SQLException {\n     }\n     \n     @Override\n-    protected Boolean matchErrorState(int subtype, Set<String> errorStates,\n-        SQLException ex) {\n-        Boolean recoverable = null;\n+    protected boolean isFatalException(int subtype, SQLException ex) {\n         String errorState = ex.getSQLState();\n         int errorCode = ex.getErrorCode();\n-        if (errorStates.contains(errorState)) {\n-            recoverable = Boolean.FALSE;\n-            if ((subtype == StoreException.LOCK)\n-                && ((errorState.equals(\"61000\") && (errorCode == 54 ||\n-                     errorCode == 60 || errorCode == 4020 ||\n-                     errorCode == 4021 || errorCode == 4022))\n-                    || (errorState.equals(\"42000\") && errorCode == 2049))) {\n-                recoverable = Boolean.TRUE;\n-            } else if (subtype == StoreException.QUERY &&\n-                errorState.equals(\"72000\") && errorCode == 1013) {\n-                recoverable = Boolean.TRUE;\n-            }\n+        if ((subtype == StoreException.LOCK)\n+            && ((\"61000\".equals(errorState) && (errorCode == 54 ||\n+                 errorCode == 60 || errorCode == 4020 ||\n+                 errorCode == 4021 || errorCode == 4022))\n+                || (\"42000\".equals(errorState) && errorCode == 2049))) {\n+            return false;\n+        } \n+        if (subtype == StoreException.QUERY &&\n+            \"72000\".equals(errorState) && errorCode == 1013) {\n+            return false;\n         }\n-        return recoverable;\n+        return super.isFatalException(subtype, ex);\n     }\n     \n     @Override"},{"sha":"72da6d2e83dba16b4622cc1326b8fbbaa1471a71","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","raw_url":"https://github.com/apache/openjpa/raw/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-error-state-codes.xml?ref=4be5a5a194e541059709c9efcdd07c26990ab673","patch":"@@ -29,7 +29,7 @@\n <sql-state-codes>\n \n \t<dictionary class=\"org.apache.openjpa.jdbc.sql.DB2Dictionary\">\n-\t\t<lock>40001,57033,57011</lock>\n+\t\t<lock>40001,57033,57011,57014</lock>\n \t\t<referential-integrity>23502,42912,23001,23504,23511,23512,23513,23515,23520</referential-integrity>\n \t\t<object-exists>23505</object-exists>\n \t\t<object-not-found></object-not-found>\n@@ -155,12 +155,12 @@\n \t</dictionary>\n \t\n \t<dictionary class=\"org.apache.openjpa.jdbc.sql.MySQLDictionary\">\n-\t\t<lock>1205,1213</lock>\n+\t\t<lock>41000</lock>\n \t\t<referential-integrity>630,839,840,893,1062,1169,1215,1216,1217,1451,1452,1557</referential-integrity>\n \t\t<object-exists>23000</object-exists>\n \t\t<object-not-found></object-not-found>\n-\t\t<optimistic>41000</optimistic>\n-\t\t<query></query>\n+\t\t<optimistic></optimistic>\n+\t\t<query>70100</query>\n \t</dictionary>\n \t\n \t<dictionary class=\"org.apache.openjpa.jdbc.sql.OracleDictionary\">"},{"sha":"e00aa4b2de9515081cf3d7aac7d7975906ea61cb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","status":"modified","additions":40,"deletions":7,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","raw_url":"https://github.com/apache/openjpa/raw/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java?ref=4be5a5a194e541059709c9efcdd07c26990ab673","patch":"@@ -245,11 +245,30 @@ public static boolean canConvert(Class<?> c1, Class<?> c2, boolean strict) {\n             return true;\n         return false;\n     }\n+    \n+    /**\n+     * Convert the given value to match the given (presumably a setter) method argument type.\n+     *  \n+     * @param o given value\n+     * @param method a presumably setter method \n+     * \n+     * @return the same value if the method does not have one and only one input argument.\n+     */\n+    public static Object convertToMatchMethodArgument(Object o, Method method) {\n+        if (method == null || method.getParameterTypes().length != 1) {\n+            return o;\n+        }\n+        return convert(o, method.getParameterTypes()[0], true);\n+    }\n \n+    public static Object convert(Object o, Class<?> type) {\n+        return convert(o, type, false);\n+    }\n+    \n     /**\n      * Convert the given value to the given type.\n      */\n-    public static Object convert(Object o, Class<?> type) {\n+    public static Object convert(Object o, Class<?> type, boolean strictNumericConversion) {\n         if (o == null)\n             return null;\n         if (o.getClass() == type)\n@@ -315,13 +334,13 @@ else if (o instanceof String && ((String) o).length() == 1)\n             throw new ClassCastException(_loc.get(\"cant-convert\", o,\n                 o.getClass(), type).getMessage());\n \n-        if (type == Integer.class) {\n+        if (type == Integer.class && allowNumericConversion(o.getClass(), type, strictNumericConversion)) {\n             return ((Number) o).intValue();\n-        } else if (type == Float.class) {\n+        } else if (type == Float.class && allowNumericConversion(o.getClass(), type, strictNumericConversion)) {\n             return new Float(((Number) o).floatValue());\n         } else if (type == Double.class) {\n             return new Double(((Number) o).doubleValue());\n-        } else if (type == Long.class) {\n+        } else if (type == Long.class && allowNumericConversion(o.getClass(), type, strictNumericConversion)) {\n             return ((Number) o).longValue();\n         } else if (type == BigDecimal.class) {\n             // the BigDecimal constructor doesn't handle the\n@@ -339,14 +358,28 @@ else if (o instanceof String && ((String) o).length() == 1)\n             return new BigDecimal(o.toString());\n         } else if (type == BigInteger.class) {\n             return new BigInteger(o.toString());\n-        } else if (type == Short.class) {\n+        } else if (type == Short.class && allowNumericConversion(o.getClass(), type, strictNumericConversion)) {\n             return new Short(((Number) o).shortValue());\n-        } else if (type == Byte.class) {\n+        } else if (type == Byte.class && allowNumericConversion(o.getClass(), type, strictNumericConversion)) {\n             return new Byte(((Number) o).byteValue());\n-        } else {\n+        } else if (!strictNumericConversion) {\n             return ((Number) o).intValue();\n+        } else {\n+            throw new ClassCastException(_loc.get(\"cant-convert\", o, o.getClass(), type).getMessage());\n         }\n     }\n+    \n+    private static boolean allowNumericConversion(Class<?> actual, Class<?> target, boolean strict) {\n+        if (!strict || actual == target)\n+            return true;\n+        if (actual == Byte.class)    return false;\n+        if (actual == Double.class)  return target == Float.class;\n+        if (actual == Float.class)   return target == Double.class;\n+        if (actual == Integer.class) return target == Long.class || target == Short.class;\n+        if (actual == Long.class)    return target == Integer.class || target == Short.class;\n+        if (actual == Short.class)   return target == Long.class || target == Integer.class;\n+        return false;\n+    }\n \n     /**\n      * Add the given values."},{"sha":"31d29d8bda704b8600a0ebcf7db48fa184e8d12f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/LockException.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-kernel/src/main/java/org/apache/openjpa/util/LockException.java","raw_url":"https://github.com/apache/openjpa/raw/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-kernel/src/main/java/org/apache/openjpa/util/LockException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/LockException.java?ref=4be5a5a194e541059709c9efcdd07c26990ab673","patch":"@@ -30,13 +30,13 @@\n  * @author Marc Prud'hommeaux\n  * @since 0.3.1\n  */\n+@SuppressWarnings(\"serial\")\n public class LockException\n     extends StoreException {\n \n-    private static final transient Localizer _loc = Localizer.forPackage\n-        (LockException.class);\n+    private static final transient Localizer _loc = Localizer.forPackage(LockException.class);\n \n-    private int timeout = -1;\n+    private int timeout   = -1;\n     private int lockLevel = -1;\n     \n     public LockException(Object failed) {\n@@ -49,8 +49,7 @@ public LockException(Object failed, int timeout) {\n     }\n     \n     public LockException(Object failed, int timeout, int lockLevel) {\n-        super(_loc.get(\"lock-timeout\", Exceptions.toString(failed),\n-            String.valueOf(timeout)));\n+        super(_loc.get(\"lock-timeout\", Exceptions.toString(failed), String.valueOf(timeout)));\n         setFailedObject(failed);\n         setTimeout(timeout);\n     }\n@@ -86,8 +85,7 @@ public String toString() {\n         String str = super.toString();\n         if (timeout < 0)\n             return str;\n-        return str + Exceptions.SEP + \"Timeout: \" + timeout + \", LockLevel\"\n-            + lockLevel;\n+        return str + Exceptions.SEP + \"Timeout: \" + timeout + \", LockLevel\" + lockLevel;\n     }\n \n     private void writeObject(ObjectOutputStream out)"},{"sha":"8cec3afebb0c177c6bd46cb64f485a3f14c091b4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAException.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAException.java","raw_url":"https://github.com/apache/openjpa/raw/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAException.java?ref=4be5a5a194e541059709c9efcdd07c26990ab673","patch":"@@ -35,6 +35,7 @@\n  * @author Abe White\n  * @since 0.4.0\n  */\n+@SuppressWarnings(\"serial\")\n public abstract class OpenJPAException\n     extends RuntimeException\n     implements Serializable, ExceptionInfo {"},{"sha":"8830df583b3f0276302f89e73a9d126cd22fccdc","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreException.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreException.java","raw_url":"https://github.com/apache/openjpa/raw/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreException.java?ref=4be5a5a194e541059709c9efcdd07c26990ab673","patch":"@@ -26,6 +26,7 @@\n  * @author Marc Prud'hommeaux\n  * @since 0.2.5\n  */\n+@SuppressWarnings(\"serial\")\n public class StoreException\n     extends OpenJPAException {\n "},{"sha":"84b9a0e310419ee804e2752b62dc573cad36a714","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestTimeoutException.java","status":"added","additions":146,"deletions":0,"changes":146,"blob_url":"https://github.com/apache/openjpa/blob/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestTimeoutException.java","raw_url":"https://github.com/apache/openjpa/raw/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestTimeoutException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestTimeoutException.java?ref=4be5a5a194e541059709c9efcdd07c26990ab673","patch":"@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law\n+ * or agreed to in writing, software distributed under the License is\n+ * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the specific language\n+ * governing permissions and limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.LockModeType;\n+import javax.persistence.LockTimeoutException;\n+import javax.persistence.Query;\n+import javax.persistence.QueryTimeoutException;\n+\n+import junit.framework.AssertionFailedError;\n+\n+import org.apache.openjpa.persistence.exception.PObject;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Tests that correct timeout exceptions are being thrown depending on whether it is a query or a lock operation.\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class TestTimeoutException extends SingleEMFTestCase {\n+    private final Class<?> entityClass = PObject.class;\n+    private final ExecutorService scheduler = Executors.newCachedThreadPool();\n+    public void setUp() {\n+        super.setUp(entityClass);\n+    }\n+    \n+    public void testQueryTimeOutExceptionWhileQueryingWithLocksOnAlreadyLockedEntities() {\n+        EntityManager em1 = emf.createEntityManager();\n+        EntityManager em2 = emf.createEntityManager();\n+        assertNotSame(em1, em2);\n+        Object oid = createEntity(em1);\n+        \n+        em1.getTransaction().begin();\n+        Object entity = em1.find(entityClass, oid);\n+        assertNotNull(entity);\n+        em1.lock(entity, LockModeType.PESSIMISTIC_WRITE);\n+        \n+        em2.getTransaction().begin();\n+        final Query query = em2.createQuery(\"select p from PObject p\");\n+        query.setLockMode(LockModeType.PESSIMISTIC_WRITE);\n+        long timeout = 1000;\n+        query.setHint(\"javax.persistence.query.timeout\", timeout);\n+        assertError(new Callable<Throwable>() {\n+            public Throwable call() throws Exception {\n+                try {\n+                    query.getResultList();\n+                } catch (Throwable t) {\n+                    return t;\n+                }\n+                return null;\n+            }\n+        }, QueryTimeoutException.class, timeout);\n+        \n+        assertTrue(em2.getTransaction().isActive());\n+        em2.getTransaction().rollback();\n+        em1.getTransaction().rollback();\n+    }\n+    \n+    public void testLockTimeOutExceptionWhileLockingAlreadyLockedEntities() {\n+        EntityManager em1 = emf.createEntityManager();\n+        final EntityManager em2 = emf.createEntityManager();\n+        assertNotSame(em1, em2);\n+        final Object oid = createEntity(em1);\n+        \n+        em1.getTransaction().begin();\n+        final Object entity1 = em1.find(entityClass, oid);\n+        assertNotNull(entity1);\n+        em1.lock(entity1, LockModeType.PESSIMISTIC_WRITE);\n+        \n+        em2.getTransaction().begin();\n+        final Object entity2 = em2.find(entityClass, oid);\n+        final long timeout = 1000;\n+        assertError(new Callable<Throwable>() {\n+            public Throwable call() throws Exception {\n+                try {\n+                    Map<String,Object> hint = new HashMap<String, Object>();\n+                    hint.put(\"javax.persistence.lock.timeout\", timeout);\n+                    em2.lock(entity2, LockModeType.PESSIMISTIC_WRITE, hint);\n+                } catch (Throwable t) {\n+                    return t;\n+                }\n+                return null;\n+            }\n+        }, LockTimeoutException.class, timeout);\n+        assertTrue(em2.getTransaction().isActive());\n+        em2.getTransaction().rollback();\n+        \n+        em1.getTransaction().rollback();\n+    }\n+\n+    \n+    public Object createEntity(EntityManager em) {\n+        long id = System.nanoTime();\n+        em.getTransaction().begin();\n+        PObject pc = new PObject();\n+        pc.setId(id);\n+        em.persist(pc);\n+        em.getTransaction().commit();\n+        return id;\n+    }\n+    \n+    \n+    /**\n+     * Assert that an exception of proper type has been thrown by the given task within the given timeout.\n+     * @param t\n+     * @param expeceted\n+     */\n+    void assertError(Callable<Throwable> task, Class<? extends Throwable> expected, long timeout) {\n+        try {\n+            Future<Throwable> future = scheduler.submit(task);\n+            Throwable error = future.get();\n+            if (error == null) {\n+                throw new AssertionFailedError(\"No exception was raised but expected \" + expected.getName());\n+            } else if (!expected.isAssignableFrom(error.getClass())) {\n+                error.printStackTrace();\n+                throw new AssertionFailedError(error.getClass().getName() + \" was raised but expected \" + \n+                        expected.getName());\n+            }\n+        } catch (Throwable t) {\n+            t.printStackTrace();\n+            throw new AssertionFailedError(t.getClass().getName() + \" was raised but expected \" + \n+                    expected.getName());\n+        }\n+    }   \n+    \n+}"},{"sha":"571094bf5ee1a4e8305d713425abe594a3a066a7","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java","raw_url":"https://github.com/apache/openjpa/raw/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java?ref=4be5a5a194e541059709c9efcdd07c26990ab673","patch":"@@ -30,6 +30,7 @@\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.persistence.LockTimeoutException;\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n \n /**\n@@ -40,6 +41,7 @@\n     private DBDictionary dict = null;\n \n     public void setUp() {\n+        setUp(Employee.class, Department.class, \"openjpa.LockManager\", \"mixed\");\n         setSupportedDatabases(\n                 org.apache.openjpa.jdbc.sql.DerbyDictionary.class,\n //                org.apache.openjpa.jdbc.sql.OracleDictionary.class,\n@@ -48,7 +50,6 @@ public void setUp() {\n             return;\n         }\n \n-        setUp(Employee.class, Department.class, \"openjpa.LockManager\", \"mixed\");\n         String empTable = getMapping(Employee.class).getTable().getFullName();\n         String deptTable = getMapping(Department.class).getTable().getFullName();\n \n@@ -125,10 +126,11 @@ public void testFindAfterQueryWithPessimisticLocks() {\n             // find Employee(2) with a lock, should block and expected a PessimisticLockException\n             em2.find(Employee.class, 2, LockModeType.PESSIMISTIC_READ, map);\n             fail(\"Unexcpected find succeeded. Should throw a PessimisticLockException.\");\n-        } catch (QueryTimeoutException e) {            \n+        } catch (LockTimeoutException e) {            \n             // TODO: DB2: This is the current unexpected exception due to OPENJPA-991.\n             // Remove this when the problem is fixed\n-//            System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n+            System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage() + \" Failed \" \n+                    + e.getFailedObject());\n         } catch (PessimisticLockException e) {\n             // TODO: This is the expected exception but will be fixed under OPENJPA-991\n //            System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n@@ -208,10 +210,11 @@ public void testFindAfterQueryOrderByWithPessimisticLocks() {\n             // find Employee(2) with a lock, should block and expected a PessimisticLockException\n             em2.find(Employee.class, 2, LockModeType.PESSIMISTIC_READ, map);\n             fail(\"Unexcpected find succeeded. Should throw a PessimisticLockException.\");\n-        } catch (QueryTimeoutException e) {            \n+        } catch (LockTimeoutException e) {            \n             // TODO: DB2: This is the current unexpected exception due to OPENJPA-991.\n             // Remove this when the problem is fixed\n-//            System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());\n+            System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage() + \" Failed \" + \n+                    e.getFailedObject());\n         } catch (PessimisticLockException e) {\n             // TODO: This is the expected exception but will be fixed under OPENJPA-991\n //            System.out.println(\"Caught \" + e.getClass().getName() + \":\" + e.getMessage());"},{"sha":"c9c08c804182ca23fe5adce7e3dd2e1116e9ff30","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LockTimeoutException.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LockTimeoutException.java","raw_url":"https://github.com/apache/openjpa/raw/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LockTimeoutException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LockTimeoutException.java?ref=4be5a5a194e541059709c9efcdd07c26990ab673","patch":"@@ -35,6 +35,7 @@\n  * @since 2.0.0\n  * @nojavadoc\n  */\n+@SuppressWarnings(\"serial\")\n public class LockTimeoutException\n     extends javax.persistence.LockTimeoutException\n     implements Serializable, ExceptionInfo {\n@@ -43,12 +44,10 @@\n     private transient Object _failed = null;\n     private transient Throwable[] _nested = null;\n \n-    public LockTimeoutException(String msg, Throwable[] nested,\n-        Object failed, boolean fatal) {\n+    public LockTimeoutException(String msg, Throwable[] nested,  Object failed) {\n         super(msg);\n         _nested = nested;\n         _failed = failed;\n-        _fatal = fatal;\n     }\n \n     public int getType() {"},{"sha":"4393c6a3c64c7a22b5ff8a7309b7e8f50f8510b7","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","status":"modified","additions":22,"deletions":45,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","raw_url":"https://github.com/apache/openjpa/raw/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java?ref=4be5a5a194e541059709c9efcdd07c26990ab673","patch":"@@ -151,63 +151,40 @@ private static Throwable translateException(Throwable t, boolean checked) {\n      */\n     private static Throwable translateStoreException(OpenJPAException ke) {\n         Exception e;\n+        int subtype = ke.getSubtype();\n+        String msg  = ke.getMessage();\n+        Throwable[] nested = getNestedThrowables(ke);\n+        Object failed = getFailedObject(ke);\n+        boolean fatal = ke.isFatal();\n         Throwable cause = (ke.getNestedThrowables() != null\n                         && ke.getNestedThrowables().length == 1)\n                          ? ke.getNestedThrowables()[0] : null;\n-        if (ke.getSubtype() == StoreException.OBJECT_NOT_FOUND\n-         || cause instanceof ObjectNotFoundException) {\n-                e = new org.apache.openjpa.persistence.EntityNotFoundException\n-                    (ke.getMessage(), getNestedThrowables(ke),\n-                        getFailedObject(ke), ke.isFatal());\n-        } else if (ke.getSubtype() == StoreException.OPTIMISTIC\n-        \t\t|| cause instanceof OptimisticException) {\n-            \te = new org.apache.openjpa.persistence.OptimisticLockException\n-                    (ke.getMessage(), getNestedThrowables(ke),\n-                        getFailedObject(ke), ke.isFatal());\n-        } else if (ke.getSubtype() == StoreException.LOCK\n-                || cause instanceof LockException) {\n-            LockException lockEx = (LockException)\n-                (ke instanceof LockException ? ke : cause);\n-            if (lockEx != null && lockEx.getLockLevel() >=\n-                MixedLockLevels.LOCK_PESSIMISTIC_READ) {\n+        if (subtype == StoreException.OBJECT_NOT_FOUND || cause instanceof ObjectNotFoundException) {\n+                e = new org.apache.openjpa.persistence.EntityNotFoundException(msg, nested, failed, fatal);\n+        } else if (subtype == StoreException.OPTIMISTIC\t|| cause instanceof OptimisticException) {\n+            \te = new org.apache.openjpa.persistence.OptimisticLockException(msg, nested, failed, fatal);\n+        } else if (subtype == StoreException.LOCK || cause instanceof LockException) {\n+            LockException lockEx = (LockException) (ke instanceof LockException ? ke : cause);\n+            if (lockEx != null && lockEx.getLockLevel() >= MixedLockLevels.LOCK_PESSIMISTIC_READ) {\n                 if (!lockEx.isFatal()) {\n-                    e = new org.apache.openjpa.persistence\n-                        .LockTimeoutException(\n-                        ke.getMessage(), getNestedThrowables(ke),\n-                        getFailedObject(ke), ke.isFatal());\n+                    e = new org.apache.openjpa.persistence.LockTimeoutException(msg, nested, failed);\n                 } else {\n-                    e = new org.apache.openjpa.persistence\n-                        .PessimisticLockException(\n-                        ke.getMessage(), getNestedThrowables(ke),\n-                        getFailedObject(ke), ke.isFatal());\n+                    e = new org.apache.openjpa.persistence.PessimisticLockException(msg, nested, failed);\n                 }\n             } else {\n-                e = new org.apache.openjpa.persistence.OptimisticLockException(\n-                    ke.getMessage(), getNestedThrowables(ke),\n-                    getFailedObject(ke), ke.isFatal());\n+                e = new org.apache.openjpa.persistence.OptimisticLockException(msg, nested, failed, fatal);\n             }\n-        } else if (ke.getSubtype() == StoreException.OBJECT_EXISTS\n-        \t\t|| cause instanceof ObjectExistsException) {\n-                e = new org.apache.openjpa.persistence.EntityExistsException\n-                    (ke.getMessage(), getNestedThrowables(ke),\n-                        getFailedObject(ke), ke.isFatal());\n-        } else if (ke.getSubtype() == StoreException.QUERY\n-                || cause instanceof QueryException) {\n-            QueryException queryEx = (QueryException)\n-                (ke instanceof QueryException ? ke : cause);\n+        } else if (subtype == StoreException.OBJECT_EXISTS || cause instanceof ObjectExistsException) {\n+                e = new org.apache.openjpa.persistence.EntityExistsException(msg, nested, failed, fatal);\n+        } else if (subtype == StoreException.QUERY || cause instanceof QueryException) {\n+            QueryException queryEx = (QueryException) (ke instanceof QueryException ? ke : cause);\n             if (!queryEx.isFatal()) {\n-                e = new org.apache.openjpa.persistence.QueryTimeoutException(\n-                    ke.getMessage(), getNestedThrowables(ke),\n-                    getFailedObject(ke), ke.isFatal());\n+                e = new org.apache.openjpa.persistence.QueryTimeoutException(msg, nested, failed, false);\n             } else {\n-                e = new org.apache.openjpa.persistence.PersistenceException(\n-                    ke.getMessage(), getNestedThrowables(ke),\n-                    getFailedObject(ke), ke.isFatal());\n+                e = new org.apache.openjpa.persistence.PersistenceException(msg, nested, failed, true);\n             }\n         } else {\n-                e = new org.apache.openjpa.persistence.PersistenceException\n-                    (ke.getMessage(), getNestedThrowables(ke),\n-                        getFailedObject(ke), ke.isFatal());\n+            e = new org.apache.openjpa.persistence.PersistenceException(msg, nested, failed, fatal);\n         }\n         e.setStackTrace(ke.getStackTrace());\n         return e;"},{"sha":"278e466cf31959293de6e342e719e5d2447069d5","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PessimisticLockException.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PessimisticLockException.java","raw_url":"https://github.com/apache/openjpa/raw/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PessimisticLockException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PessimisticLockException.java?ref=4be5a5a194e541059709c9efcdd07c26990ab673","patch":"@@ -31,24 +31,24 @@\n \n /**\n  * Pessimistic concurrency violation.\n+ * This exception is always fatal in contrast to {@linkplain LockTimeoutException}.\n  *\n  * @since 2.0.0\n  * @nojavadoc\n  */\n+@SuppressWarnings(\"serial\")\n public class PessimisticLockException\n     extends javax.persistence.PessimisticLockException\n     implements Serializable, ExceptionInfo {\n \n-    private transient boolean _fatal = false;\n+    private transient boolean _fatal = true;\n     private transient Object _failed = null;\n     private transient Throwable[] _nested = null;\n \n-    public PessimisticLockException(String msg, Throwable[] nested,\n-        Object failed, boolean fatal) {\n+    public PessimisticLockException(String msg, Throwable[] nested, Object failed) {\n         super(msg);\n         _nested = nested;\n         _failed = failed;\n-        _fatal = fatal;\n     }\n \n     public int getType() {"},{"sha":"a52fac074913a4b42bc4e1dad76612b4eeee5118","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=4be5a5a194e541059709c9efcdd07c26990ab673","patch":"@@ -293,7 +293,7 @@ private Object execute() {\n             }\n             return result;\n \t\t} catch (LockTimeoutException e) {\n-\t\t    throw new QueryTimeoutException(e.getMessage(), new Throwable[]{e}, getQueryString(), e.isFatal());\n+\t\t    throw new QueryTimeoutException(e.getMessage(), new Throwable[]{e}, this);\n \t\t} finally {\n \t\t    unlock();\n \t\t}"},{"sha":"5e55615a10121b6952139d887107a1eefae6ab51","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryTimeoutException.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryTimeoutException.java","raw_url":"https://github.com/apache/openjpa/raw/4be5a5a194e541059709c9efcdd07c26990ab673/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryTimeoutException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryTimeoutException.java?ref=4be5a5a194e541059709c9efcdd07c26990ab673","patch":"@@ -35,6 +35,7 @@\n  * @since 2.0.0\n  * @nojavadoc\n  */\n+@SuppressWarnings(\"serial\")\n public class QueryTimeoutException\n     extends javax.persistence.QueryTimeoutException\n     implements Serializable, ExceptionInfo {\n@@ -43,8 +44,11 @@\n     private transient Object _failed = null;\n     private transient Throwable[] _nested = null;\n \n-    public QueryTimeoutException(String msg, Throwable[] nested,\n-        Object failed, boolean fatal) {\n+    public QueryTimeoutException(String msg, Throwable[] nested, Object failed) {\n+        this(msg, nested, failed, false);\n+    }\n+    \n+    public QueryTimeoutException(String msg, Throwable[] nested, Object failed, boolean fatal) {\n         super(msg);\n         _nested = nested;\n         _failed = failed;"}]}

