{"sha":"4bff5d71e8219ea5f94437d146294130d86fa270","node_id":"MDY6Q29tbWl0MjA2MzY0OjRiZmY1ZDcxZTgyMTllYTVmOTQ0MzdkMTQ2Mjk0MTMwZDg2ZmEyNzA=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-16T21:50:15Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-03-16T21:50:15Z"},"message":"OPENJPA-1097 Merge in test updates from 1.2.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@924005 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6dc1784b1c3c41a77481c4e8fe5bb757e7bb0bf2","url":"https://api.github.com/repos/apache/openjpa/git/trees/6dc1784b1c3c41a77481c4e8fe5bb757e7bb0bf2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4bff5d71e8219ea5f94437d146294130d86fa270","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4bff5d71e8219ea5f94437d146294130d86fa270","html_url":"https://github.com/apache/openjpa/commit/4bff5d71e8219ea5f94437d146294130d86fa270","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4bff5d71e8219ea5f94437d146294130d86fa270/comments","author":null,"committer":null,"parents":[{"sha":"6bc5ff8d3ca092a8e590915f56d47d84576020d1","url":"https://api.github.com/repos/apache/openjpa/commits/6bc5ff8d3ca092a8e590915f56d47d84576020d1","html_url":"https://github.com/apache/openjpa/commit/6bc5ff8d3ca092a8e590915f56d47d84576020d1"}],"stats":{"total":41,"additions":27,"deletions":14},"files":[{"sha":"b2faf88d8d90561bec7d2fc612f5795ac3b3e17b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java","status":"modified","additions":27,"deletions":14,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/4bff5d71e8219ea5f94437d146294130d86fa270/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java","raw_url":"https://github.com/apache/openjpa/raw/4bff5d71e8219ea5f94437d146294130d86fa270/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detach/TestDetachNoProxy.java?ref=4bff5d71e8219ea5f94437d146294130d86fa270","patch":"@@ -86,7 +86,7 @@ public void testDetach() {\n             log.trace(\"** after find\");\n         assertTrue(em.contains(e20));\n         assertFalse(em.isDetached(e20));\n-        verifySerializable(e20, true);\n+        verifySerializable(e20, true, false);\n         \n         // new openjpa-2.0.0 behavior, where detach() doesn't return updated entity, but does it in-place\n         em.detach(e20);\n@@ -95,7 +95,7 @@ public void testDetach() {\n         // in-place updated entity should not have any proxy classes and should be detached\n         assertFalse(em.contains(e20));\n         assertTrue(em.isDetached(e20));\n-        verifySerializable(e20, false);\n+        verifySerializable(e20, false, false);\n                \n         em.close();\n     }\n@@ -115,7 +115,7 @@ public void testDetachCopy() {\n             log.trace(\"** after find\");\n         assertTrue(em.contains(e20));\n         assertFalse(em.isDetached(e20));\n-        verifySerializable(e20, true);\n+        verifySerializable(e20, true, false);\n         \n         // Test new detachCopy() method added in 2.0.0\n         Entity20 e20copy = em.detachCopy(e20);\n@@ -124,11 +124,11 @@ public void testDetachCopy() {\n         // verify e20 is same as above\n         assertTrue(em.contains(e20));\n         assertFalse(em.isDetached(e20));\n-        verifySerializable(e20, true);\n+        verifySerializable(e20, true, false);\n         // verify copy does not have any proxy classes (in-place updated) is detached\n         assertFalse(em.contains(e20copy));\n         assertTrue(em.isDetached(e20copy));\n-        verifySerializable(e20copy, false);\n+        verifySerializable(e20copy, false, false);\n         \n         em.close();\n     }\n@@ -150,7 +150,7 @@ public void testDetachAll() {\n                 log.trace(\"** after find Entity20(\" + i + \")\");\n             assertTrue(em.contains(e20));\n             assertFalse(em.isDetached(e20));\n-            verifySerializable(e20, true);            \n+            verifySerializable(e20, true, false);            \n         }\n \n         // new openjpa-2.0.0 behavior, where detachAll() updates entities in-place\n@@ -164,7 +164,7 @@ public void testDetachAll() {\n             // entity should not have any proxy classes (in-place updated) and is detached\n             assertFalse(em.contains(e20));\n             assertTrue(em.isDetached(e20));\n-            verifySerializable(e20, false);\n+            verifySerializable(e20, false, false);\n         }\n \n         em.close();\n@@ -187,7 +187,7 @@ public void testClear() {\n                 log.trace(\"** after find Entity20(\" + i + \")\");\n             assertTrue(em.contains(e20));\n             assertFalse(em.isDetached(e20));\n-            verifySerializable(e20, true);            \n+            verifySerializable(e20, true, false);            \n         }\n \n         em.clear();\n@@ -199,22 +199,35 @@ public void testClear() {\n             assertFalse(em.contains(e20));\n             assertTrue(em.isDetached(e20));\n             // entity should still have proxy classes and is detached,\n-            // but once serialized the $proxy classes will be removed\n-            verifySerializable(e20, true);\n+            // Old 1.2.x Behavior -\n+            //   the $proxy classes are not removed during serialization\n+            // verifySerializable(e20, true, true);\n+            // OPENJPA-1097 New behavior - $proxy classes are removed\n+            verifySerializable(e20, true, false);\n         }\n \n         em.close();\n     }\n \n-    \n-    private void verifySerializable(Entity20 e20, boolean usesProxy) {\n+    /**\n+     * Test that the entity is/is not using our $proxy classes before\n+     * and after serialization.\n+     *\n+     * @param e20 Entity to test.\n+     * @param usesProxyBefore verify that the entity uses the $proxy classes\n+     *        before serialization if true and does not if false.\n+     * @param usesProxyAfter verify that the entity uses the $proxy classes\n+     *        after serialization if true and does not if false.\n+     */\n+    private void verifySerializable(Entity20 e20, boolean usesProxyBefore,\n+            boolean usesProxyAfter) {\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ObjectOutputStream oos = null;\n         byte[] e20bytes = null;\n         \n         if (log.isTraceEnabled())\n             log.trace(\"verifySerializable() - before serialize\");\n-        verifyEntities(e20, usesProxy);\n+        verifyEntities(e20, usesProxyBefore);\n \n         // first serialize\n         try {\n@@ -240,7 +253,7 @@ private void verifySerializable(Entity20 e20, boolean usesProxy) {\n             e20new = (Entity20) ois.readObject();\n             if (log.isTraceEnabled())\n                 log.trace(\"verifySerializable() - after deserialize\");\n-            verifyEntities(e20new, false);\n+            verifyEntities(e20new, usesProxyAfter);\n         } catch (IOException e) {\n             fail(e.toString());\n         } catch (ClassNotFoundException e) {"}]}

