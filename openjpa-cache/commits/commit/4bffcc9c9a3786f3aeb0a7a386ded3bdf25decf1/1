{"sha":"4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1","node_id":"MDY6Q29tbWl0MjA2MzY0OjRiZmZjYzljOWEzNzg2ZjNhZWIwYTdhMzg2ZGVkM2JkZjI1ZGVjZjE=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2011-12-08T13:27:31Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2011-12-08T13:27:31Z"},"message":"OPENJPA-1873 fix PostLoad entity listener behaviour\n\nThis fix introduces a new flag POST_LOAD_ON_MERGE wich is disabled\nby default, retaining the old behaviour.\nEnabling it will guarantee that the Entity posted to PostLoad entity \nlisteners are always the one from the database. This fixes the old\nhabit that PostLoad will also get triggered (with false/mixed values)\nfor lazy loading, merging, etc.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1211873 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dd6659dbc68133e3cc4d791df611ee612aea3f2a","url":"https://api.github.com/repos/apache/openjpa/git/trees/dd6659dbc68133e3cc4d791df611ee612aea3f2a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1","html_url":"https://github.com/apache/openjpa/commit/4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"20772bc962c21fc6c4db50463c4da29f86e85259","url":"https://api.github.com/repos/apache/openjpa/commits/20772bc962c21fc6c4db50463c4da29f86e85259","html_url":"https://github.com/apache/openjpa/commit/20772bc962c21fc6c4db50463c4da29f86e85259"}],"stats":{"total":445,"additions":387,"deletions":58},"files":[{"sha":"670715bc25529e375ca7d2462d8569ab88fdccfe","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","status":"modified","additions":26,"deletions":3,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java?ref=4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1","patch":"@@ -21,7 +21,6 @@\n import java.util.Collection;\n import java.util.Map;\n \n-import org.apache.openjpa.kernel.AuditManager;\n import org.apache.openjpa.audit.Auditor;\n import org.apache.openjpa.datacache.CacheDistributionPolicy;\n import org.apache.openjpa.datacache.DataCache;\n@@ -214,6 +213,12 @@\n     public static final String OPTION_JDBC_CONNECTION =\n         \"openjpa.option.JDBCConnection\";\n \n+    /**\n+     * Option for enable fire &#064;PostLoad events on merge operations\n+     */\n+    public static final String OPTION_POSTLOAD_ON_MERGE =\n+        \"openjpa.option.PostLoadOnMerge\";\n+\n     /**\n      * Return the set of option strings supported by this runtime. This set\n      * is mutable.\n@@ -242,7 +247,7 @@\n      * This change will trigger all registered Product Derivations to mutate \n      * other configuration properties.\n      *\n-     * @param fullname of the specification that possibly encodes major and\n+     * @param spec fullname of the specification that possibly encodes major and\n      * minor version information. For encoding format\n      * @see Specification\n      * \n@@ -258,7 +263,7 @@\n      * This change will trigger all registered Product Derivations to mutate \n      * other configuration properties.\n      *\n-     * @param fullname of the specification that possibly encodes major and\n+     * @param spec fullname of the specification that possibly encodes major and\n      * minor version information. For encoding format\n      * @see Specification\n      * \n@@ -1894,6 +1899,24 @@\n      * @since 2.2.0\n      */\n     public void setAuditor(String s);\n+\n+     /**\n+      * Whether to send &#064;PostLoad events on a merge operation.\n+      * @since 2.2.0\n+      */\n+     public boolean getPostLoadOnMerge();\n+\n+     /**\n+      * Whether to send &#064;PostLoad events on a merge operation.\n+      * @since 2.2.0\n+      */\n+     public void setPostLoadOnMerge(boolean postLoadOnMerge);\n+\n+     /**\n+      * Whether to send &#064;PostLoad events on a merge operation.\n+      * @since 2.2.0\n+      */\n+     public void setPostLoadOnMerge(Boolean postLoadOnMerge);\n     \n }\n "},{"sha":"784e90b2c1ba036857563f2d45af146b50e9e89a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":21,"deletions":1,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1","patch":"@@ -176,6 +176,7 @@\n     public BooleanValue dynamicEnhancementAgent;\n     public ObjectValue instrumentationManager;\n     public PluginListValue instrumentationProviders;\n+    public BooleanValue postLoadOnMerge;\n     \n     // custom values\n     public BrokerFactoryValue brokerFactoryPlugin;\n@@ -397,6 +398,10 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         optimistic.setDefault(\"true\");\n         optimistic.set(true);\n \n+        postLoadOnMerge = addBoolean(\"PostLoadOnMerge\");\n+        postLoadOnMerge.setDefault(\"false\");\n+        postLoadOnMerge.set(false);\n+\n         autoClear = addInt(\"AutoClear\");\n         aliases =\n             new String[] { \"datastore\",\n@@ -612,7 +617,8 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         supportedOptions.add(OPTION_VALUE_AUTOASSIGN);\n         supportedOptions.add(OPTION_VALUE_INCREMENT);\n         supportedOptions.add(OPTION_DATASTORE_CONNECTION);\n-        \n+        supportedOptions.add(OPTION_POSTLOAD_ON_MERGE);\n+\n         if (derivations)\n             ProductDerivations.beforeConfigurationLoad(this);\n         if (loadGlobals)\n@@ -1836,5 +1842,19 @@ public String getAuditor() {\n     public void setAuditor(String auditor) {\n     \tauditorPlugin.setString(auditor);\n     }\n+\n+    public boolean getPostLoadOnMerge() {\n+        return postLoadOnMerge.get();\n+    }\n+\n+    public void setPostLoadOnMerge(boolean postLoadOnMerge) {\n+        this.postLoadOnMerge.set(postLoadOnMerge);\n+    }\n+\n+    public void setPostLoadOnMerge(Boolean postLoadOnMerge) {\n+        if (postLoadOnMerge != null)\n+            setPostLoadOnMerge(postLoadOnMerge.booleanValue());\n+    }\n+\n }\n "},{"sha":"3035908c2fcbcf2c81ac221cc6cd6e16471f990b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1","patch":"@@ -594,6 +594,7 @@ protected void configureBroker(BrokerImpl broker) {\n         broker.setMultithreaded(_conf.getMultithreaded());\n         broker.setAutoDetach(_conf.getAutoDetachConstant());\n         broker.setDetachState(_conf.getDetachStateInstance().getDetachState());\n+        broker.setPostLoadOnMerge(_conf.getPostLoadOnMerge());\n     }\n \n     /**"},{"sha":"3b129e5cbf54a14834632a134b5da4687fb4c9b4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":29,"deletions":22,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1","patch":"@@ -241,6 +241,7 @@\n     private boolean _cacheFinderQuery = true;\n     private boolean _suppressBatchOLELogging = false;\n     private boolean _allowReferenceToSiblingContext = false;\n+    private boolean _postLoadOnMerge = false;\n     \n     // status\n     private int _flags = 0;\n@@ -5199,27 +5200,33 @@ protected boolean isFlushing() {\n         return ((_flags & FLAG_FLUSHING) != 0);\n     }\n     \n+     public boolean getPostLoadOnMerge() {\n+         return _postLoadOnMerge;\n+     }\n+\n+     public void setPostLoadOnMerge(boolean allow) {\n+         _postLoadOnMerge = allow;\n+     }\n     \n-    \n-        /**\n-         * Asserts consistencey of given automatic detachment option value.\n-         */\n-        private void assertAutoDetachValue(int value) {\n-           if (((value & AutoDetach.DETACH_NONE) != 0) && (value != AutoDetach.DETACH_NONE)) {\n-                   throw new UserException(_loc.get(\"detach-none-exclusive\", toAutoDetachString(value)));\n-           }\n-        }\n-    \n-        /**\n-         * Generates a user-readable String from the given integral value of AutoDetach options.\n-         */\n-        private String toAutoDetachString(int value) {\n-           List<String> result = new ArrayList<String>();\n-           for (int i = 0; i < AutoDetach.values.length; i++) {\n-                   if ((value & AutoDetach.values[i]) != 0) {\n-                           result.add(AutoDetach.names[i]);\n-                   }\n-           }\n-           return Arrays.toString(result.toArray(new String[result.size()]));\n-        }\n+    /**\n+     * Asserts consistencey of given automatic detachment option value.\n+     */\n+    private void assertAutoDetachValue(int value) {\n+       if (((value & AutoDetach.DETACH_NONE) != 0) && (value != AutoDetach.DETACH_NONE)) {\n+               throw new UserException(_loc.get(\"detach-none-exclusive\", toAutoDetachString(value)));\n+       }\n+    }\n+\n+    /**\n+     * Generates a user-readable String from the given integral value of AutoDetach options.\n+     */\n+    private String toAutoDetachString(int value) {\n+       List<String> result = new ArrayList<String>();\n+       for (int i = 0; i < AutoDetach.values.length; i++) {\n+               if ((value & AutoDetach.values[i]) != 0) {\n+                       result.add(AutoDetach.names[i]);\n+               }\n+       }\n+       return Arrays.toString(result.toArray(new String[result.size()]));\n+    }\n }"},{"sha":"b244544d47f40f5d1d52e9c20ef02b7dda8614ea","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","raw_url":"https://github.com/apache/openjpa/raw/4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java?ref=4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1","patch":"@@ -1485,4 +1485,13 @@ public void setAllowReferenceToSiblingContext(boolean allow) {\n         _broker.setAllowReferenceToSiblingContext(allow);\n     }\n \n+    public boolean getPostLoadOnMerge() {\n+        return _broker.getPostLoadOnMerge();\n+    }\n+\n+    public void setPostLoadOnMerge(boolean allow) {\n+        _broker.setPostLoadOnMerge(allow);\n+    }\n+\n+\n }"},{"sha":"d9ec532b49a89debf3d2ab9da1b70949011763ae","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","status":"modified","additions":50,"deletions":30,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java?ref=4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1","patch":"@@ -28,9 +28,11 @@\n import org.apache.openjpa.conf.Compatibility;\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.enhance.StateManager;\n+import org.apache.openjpa.event.LifecycleEventManager;\n import org.apache.openjpa.lib.util.Localizer;\n import java.util.concurrent.locks.ReentrantLock;\n import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.FetchGroup;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.ValueMetaData;\n@@ -128,45 +130,62 @@ public Object attach(AttachManager manager, Object toAttach,\n \n         // pre-load for efficiency: current field values for restore, dependent\n         // for delete\n-        FieldMetaData[] fields = sm.getMetaData().getFields(); \n+        FieldMetaData[] fields = sm.getMetaData().getFields();\n         int restore = broker.getRestoreState();\n-        if (_dirty.length() > 0) {\n+\n+        boolean postLoadOnMerge = broker.getPostLoadOnMerge();\n+        if (_dirty.length() > 0 || postLoadOnMerge) {\n             BitSet load = new BitSet(fields.length);\n-            for (int i = 0; i < fields.length; i++) {\n-                if (!_dirty.get(i))\n-                    continue;\n-\n-                switch (fields[i].getDeclaredTypeCode()) {\n-                    case JavaTypes.ARRAY:\n-                    case JavaTypes.COLLECTION:\n-                        if (restore == RestoreState.RESTORE_ALL\n-                            || fields[i].getElement().getCascadeDelete()\n-                            == ValueMetaData.CASCADE_AUTO)\n-                            load.set(i);\n-                        break;\n-                    case JavaTypes.MAP:\n-                        if (restore == RestoreState.RESTORE_ALL\n-                            || fields[i].getElement().getCascadeDelete()\n-                            == ValueMetaData.CASCADE_AUTO\n-                            || fields[i].getKey().getCascadeDelete()\n-                            == ValueMetaData.CASCADE_AUTO)\n-                            load.set(i);\n-                        break;\n-                    default:\n-                        if (restore != RestoreState.RESTORE_NONE\n-                            || fields[i].getCascadeDelete()\n-                            == ValueMetaData.CASCADE_AUTO)\n-                            load.set(i);\n+            if (postLoadOnMerge && broker.getLifecycleEventManager().hasLoadListeners(pc, meta)) {\n+                // load all fields\n+                // this will automatically lead to invoking the PostLoad lifecycle event\n+                // when the last field got set\n+                // @see StateManagerImpl#postLoad(String, FetchConfiguration)\n+                load.set(0, fields.length);\n+            }\n+            else {\n+                for (int i = 0; i < fields.length; i++) {\n+                    if (!_dirty.get(i))\n+                        continue;\n+\n+                    switch (fields[i].getDeclaredTypeCode()) {\n+                        case JavaTypes.ARRAY:\n+                        case JavaTypes.COLLECTION:\n+                            if (restore == RestoreState.RESTORE_ALL\n+                                || fields[i].getElement().getCascadeDelete()\n+                                == ValueMetaData.CASCADE_AUTO)\n+                                load.set(i);\n+                            break;\n+                        case JavaTypes.MAP:\n+                            if (restore == RestoreState.RESTORE_ALL\n+                                || fields[i].getElement().getCascadeDelete()\n+                                == ValueMetaData.CASCADE_AUTO\n+                                || fields[i].getKey().getCascadeDelete()\n+                                == ValueMetaData.CASCADE_AUTO)\n+                                load.set(i);\n+                            break;\n+                        default:\n+                            if (restore != RestoreState.RESTORE_NONE\n+                                || fields[i].getCascadeDelete()\n+                                == ValueMetaData.CASCADE_AUTO)\n+                                load.set(i);\n+                    }\n                 }\n             }\n+\n+            if (!postLoadOnMerge) {\n+                // prevent PostLoad callbacks even for the load operation\n+                sm.setPostLoadCallback(false);\n+            }\n             FetchConfiguration fc = broker.getFetchConfiguration();\n             sm.loadFields(load, fc, fc.getWriteLockLevel(), null);\n-        }        \n+        }\n         Object origVersion = sm.getVersion();\n         sm.setVersion(_version);\n \n         BitSet loaded = sm.getLoaded();\n         int set = StateManager.SET_ATTACH;\n+        sm.setPostLoadCallback(false);\n         for (int i = 0; i < fields.length; i++) {\n             if (!_loaded.get(i))\n                 continue;\n@@ -214,8 +233,8 @@ public Object attach(AttachManager manager, Object toAttach,\n                     break;\n                 case JavaTypes.SHORT:\n                     if (_dirty.get(i))\n-                        sm.settingShortField(pc, i, (!loaded.get(i)) ? (short) 0\n-                            : sm.fetchShortField(i), (short) longval, set);\n+                        sm.settingShortField(pc, i, \n+                            (!loaded.get(i)) ? (short) 0 : sm.fetchShortField(i), (short) longval, set);\n                     else\n                         sm.storeShortField(i, (short) longval);\n                     break;\n@@ -299,6 +318,7 @@ public Object attach(AttachManager manager, Object toAttach,\n                     objval = null;\n             }\n         }\n+        sm.setPostLoadCallback(true);\n         pc.pcReplaceStateManager(sm);\n \n         // if we were clean at least make sure a version check is done to"},{"sha":"51902cef24dc76cc4d9fcf2e050eed976aa4a75e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":17,"deletions":2,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1","patch":"@@ -157,6 +157,13 @@\n     \n     private transient ReentrantLock _instanceLock = null;\n \n+    /**\n+     * <p>set to <code>false</code> to prevent the postLoad method from\n+     * sending lifecycle callback events.</p>\n+     * <p>Callbacks are enabled by default</>\n+     */\n+    private boolean postLoadCallback = true;\n+\n     /**\n      * Constructor; supply id, type metadata, and owning persistence manager.\n      */\n@@ -3192,6 +3199,14 @@ private void setLoaded(int field, boolean isLoaded) {\n             _loaded.clear(field);\n     }\n \n+    /**\n+     * Set to <code>false</code> to prevent the postLoad method from\n+     * sending lifecycle callback events.\n+     */\n+    public void setPostLoadCallback(boolean enabled) {\n+        this.postLoadCallback = enabled;\n+    }\n+\n     /**\n      * Perform post-load steps, including the post load callback.\n      * We have to check the dfg after all field loads because it might be\n@@ -3254,8 +3269,8 @@ private boolean postLoad(String fgName, FetchConfiguration fetch) {\n                 return false;\n \n         _flags |= FLAG_LOADED;\n-        _broker.fireLifecycleEvent(getManagedInstance(), fetch, _meta, \n-        \tLifecycleEvent.AFTER_LOAD);\n+        if (postLoadCallback)\n+            _broker.fireLifecycleEvent(getManagedInstance(), fetch, _meta, LifecycleEvent.AFTER_LOAD);\n         return true;\n     }\n "},{"sha":"276f3420e8dac66dfc0eb8ad83e18e5b00eaed16","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","raw_url":"https://github.com/apache/openjpa/raw/4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java?ref=4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1","patch":"@@ -531,4 +531,22 @@ public OpenJPAStateManager embed(Object obj, Object id,\n      * @since 2.1\n      */\n     public boolean getAllowReferenceToSiblingContext();\n+\n+\n+    /**\n+     * Set to <code>true</code> if the merge operation should trigger\n+     * a &#064;PostLoad lifecycle event.\n+     * @param allow PostLoad lifecycle events to be triggered on a merge operation\n+     */\n+    public void setPostLoadOnMerge(boolean allow);\n+\n+    /**\n+     * Force sending a &#064;PostLoad lifecycle event while merging.\n+     *\n+     * @return <code>false</code> by default\n+     *\n+     * @since 2.2\n+     */\n+    public boolean getPostLoadOnMerge();\n+\n }"},{"sha":"5cc2fea8b18b990a48f856d8c769cda5fc27f62d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/EntityListenerPostLoadTest.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/EntityListenerPostLoadTest.java","raw_url":"https://github.com/apache/openjpa/raw/4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/EntityListenerPostLoadTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/EntityListenerPostLoadTest.java?ref=4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1","patch":"@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.callbacks;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class EntityListenerPostLoadTest extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(CLEAR_TABLES);\n+    }\n+\n+    @Override\n+    protected String getPersistenceUnitName() {\n+        return \"listener-pu\";\n+    }\n+\n+    /**\n+     * If an entity gets merged it is first read from the database prior to the update. In this read step, the\n+     * &#064;PostLoad get's executed. After I save my entity to the database, the &#064;PostLoad following merge should\n+     * return exactly the value stored to the database. Even if the value got changed locally in the meantime.\n+     */\n+    public void testPostLoadValues() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        try {\n+            em.getTransaction().begin();\n+\n+            PostLoadListenerEntity entity = null;\n+\n+            entity = new PostLoadListenerEntity();\n+            entity.setValue(\"val1\");\n+\n+            em.persist(entity);\n+            em.getTransaction().commit();\n+\n+            // close the EntityManager so our entity is now detached\n+            em.close();\n+\n+            // reopen a new EntityManager\n+            em = emf.createEntityManager();\n+            assertTrue(em.isDetached(entity));\n+\n+            em.getTransaction().begin();\n+            // entity = em.find(PostLoadListenerEntity.class, entity.getId());\n+            entity = em.find(PostLoadListenerEntity.class, entity.getId());\n+            assertNotNull(entity);\n+\n+            // the merge invoked a PostLoad, so this should now be 'val1'\n+            assertEquals(\"val1\", PostLoadListenerImpl.postLoadValue);\n+\n+            em.getTransaction().commit();\n+\n+            // close the EntityManager so our entity is now detached again\n+            em.close();\n+\n+            // reopen a new EntityManager\n+            em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            \n+            assertTrue(em.isDetached(entity));\n+            \n+            entity.setValue(\"val2\");\n+            //X entity.setValue2(\"val2\");\n+\n+            entity = em.merge(entity);\n+\n+            // the merge invoked a PostLoad, and this should now STILL be 'val1'\n+            assertEquals(\"val1\", PostLoadListenerImpl.postLoadValue);\n+            em.getTransaction().commit();\n+\n+            // close the EntityManager so our entity is now detached again\n+            em.close();\n+\n+            // reopen a new EntityManager\n+            em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            entity.setValue(\"val3\");\n+\n+            entity = em.merge(entity);\n+\n+            // the merge invoked a PostLoad, and this should now STILL be 'val1'\n+            assertEquals(\"val2\", PostLoadListenerImpl.postLoadValue);\n+            em.getTransaction().commit();\n+\n+        } finally {\n+            if (em != null && em.getTransaction().isActive())\n+                em.getTransaction().rollback();\n+            if (em != null && em.isOpen())\n+                em.close();\n+        }\n+\n+    }\n+}"},{"sha":"29cb5027f37eded286a9c663a48cb6da2f3e4861","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/PostLoadListenerEntity.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/PostLoadListenerEntity.java","raw_url":"https://github.com/apache/openjpa/raw/4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/PostLoadListenerEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/PostLoadListenerEntity.java?ref=4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.callbacks;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.EntityListeners;\n+\n+\n+@Entity\n+@EntityListeners({PostLoadListenerImpl.class})\n+public class PostLoadListenerEntity {\n+\n+    @Id @GeneratedValue\n+    private long id;\n+\n+    private String value;\n+    \n+    // those fields are important for the test since\n+    // OpenJPA will load the full Table at once if you remove them  \n+    private String value2;\n+\n+        \n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(String value) {\n+        this.value = value;\n+    }\n+\n+    public String getValue2() {\n+        return value2;\n+    }\n+\n+    public void setValue2(String value2) {\n+        this.value2 = value2;\n+    }\n+}"},{"sha":"f57753dbcb037d62b8ce60da579bbac115c30908","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/PostLoadListenerImpl.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/PostLoadListenerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/PostLoadListenerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/PostLoadListenerImpl.java?ref=4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.callbacks;\n+\n+import javax.persistence.PostLoad;\n+\n+/**\n+ * JPA Listener which maintains changelog information of the {@link PostLoadListenerEntity}.\n+ * The &#064;PostLoad gets called once the entity is being loaded from the database.\n+ * This happens either if the entity get's loaded freshly into the EntityManager, or \n+ * while performing a call to EntityManager#merge(entity)\n+ */\n+public class PostLoadListenerImpl {\n+\n+    static String postLoadValue;\n+    \n+    @PostLoad\n+    public void postLoad(Object o) {\n+        PostLoadListenerEntity ple = (PostLoadListenerEntity) o;\n+        \n+        postLoadValue = ple.getValue();\n+    }\n+}"},{"sha":"5496e76be3351ee3844f507f3845b0c35b7919e9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestOpenJPAConfiguration.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestOpenJPAConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestOpenJPAConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestOpenJPAConfiguration.java?ref=4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1","patch":"@@ -70,6 +70,7 @@ public void testSetObjects() {\n         assertEquals(cfactory, conf.getConnectionFactory());\n         assertEquals(cfactory2, conf.getConnectionFactory2());\n         assertEquals(false, conf.getOptimistic());\n+        assertEquals(false, conf.getPostLoadOnMerge());\n         assertEquals(503, conf.getLockTimeout());\n         assertEquals(1500, conf.getQueryTimeout());\n "},{"sha":"e0e86d9f0c4f01c46df9a9af8d762f399121dab7","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=4bffcc9c9a3786f3aeb0a7a386ded3bdf25decf1","patch":"@@ -101,8 +101,10 @@\n         <class>org.apache.openjpa.persistence.callbacks.EntityListenerEntity</class>\n         <class>org.apache.openjpa.persistence.callbacks.GlobalListenerEntity</class>\n         <class>org.apache.openjpa.persistence.callbacks.DuplicateListenerEntity</class>\n+        <class>org.apache.openjpa.persistence.callbacks.PostLoadListenerEntity</class>\n         <class>org.apache.openjpa.persistence.callbacks.Message</class>\n         <properties>\n+            <property name=\"openjpa.PostLoadOnMerge\" value=\"true\"/>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\"\n                   value=\"buildSchema(ForeignKeys=true)\"/>\n         </properties>"}]}

