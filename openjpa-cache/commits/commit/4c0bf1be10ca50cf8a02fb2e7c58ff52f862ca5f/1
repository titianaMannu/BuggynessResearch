{"sha":"4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f","node_id":"MDY6Q29tbWl0MjA2MzY0OjRjMGJmMWJlMTBjYTUwY2Y4YTAyZmIyZTdjNThmZjUyZjg2MmNhNWY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-21T17:55:17Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-21T17:55:17Z"},"message":"OPENJPA-207: Support multi-level derived identity. Enhancer has been modified.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@678518 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7869a8c7527b34cb255d9ca8bf3ffbb2213ae072","url":"https://api.github.com/repos/apache/openjpa/git/trees/7869a8c7527b34cb255d9ca8bf3ffbb2213ae072"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f","html_url":"https://github.com/apache/openjpa/commit/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f/comments","author":null,"committer":null,"parents":[{"sha":"ae2653996247585d74f41dc7e20e5d181a4c7835","url":"https://api.github.com/repos/apache/openjpa/commits/ae2653996247585d74f41dc7e20e5d181a4c7835","html_url":"https://github.com/apache/openjpa/commit/ae2653996247585d74f41dc7e20e5d181a4c7835"}],"stats":{"total":696,"additions":692,"deletions":4},"files":[{"sha":"c229f4c74620a158c2e5d15c32ec12cb9149585a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f","patch":"@@ -872,7 +872,7 @@ public Object getJoinValue(Object fieldVal, Column col, JDBCStore store) {\n             fieldVal = store.getContext().getObjectId(fieldVal);\n         if (fieldVal instanceof OpenJPAId)\n             fieldVal = ((OpenJPAId) fieldVal).getIdObject();\n-        else if (relmapping.getObjectIdType() != null\n+        if (relmapping.getObjectIdType() != null\n             && relmapping.getObjectIdType().isInstance(fieldVal)) {\n             Object[] pks = ApplicationIds.toPKValues(fieldVal, relmapping);\n             fieldVal = pks[relmapping.getField(j.getFieldIndex())."},{"sha":"a194aa3c65c7b1326483cd63c70db8135e8c4bd5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f","patch":"@@ -1963,6 +1963,11 @@ private void addCopyKeyFieldsToObjectIdMethod(boolean fieldManager)\n                 code.iadd();\n                 code.invokeinterface().setMethod\n                     (getFieldSupplierMethod(type));\n+                if (fmds[i].getObjectIdFieldTypeCode() == JavaTypes.OBJECT) {\n+                \tcode.checkcast().setType(ObjectId.class);\n+                \tcode.invokevirtual().setMethod(ObjectId.class, \"getId\", \n+            \t\t\tObject.class, null);                \t\n+                }\n \n                 // if the type of this field meta data is\n                 // non-primitive and non-string, be sure to cast\n@@ -2157,6 +2162,11 @@ private void addExtractObjectIdFieldValueCode(Code code, FieldMetaData pk) {\n             }\n         } else if (pkmeta.getObjectIdType() != null) {\n             code.aload().setLocal(oid);\n+            if (pkcode == JavaTypes.OBJECT) {\n+                code.checkcast().setType(ObjectId.class);\n+                code.invokevirtual().setMethod(ObjectId.class, \"getId\", \n+            \t\t\tObject.class, null);\n+            } \n             code.checkcast().setType(pktype);\n         } else\n             code.aload().setLocal(oid);"},{"sha":"46eb28340b42973fdc6eef761c5005ac85f48ae6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f","patch":"@@ -1450,6 +1450,7 @@ public Object getPCPrimaryKey(Object oid, int field) {\n             return null;\n \n         ClassMetaData relmeta = fmd.getDeclaredTypeMetaData();\n+        pk = ApplicationIds.wrap(relmeta, pk);\n         if (relmeta.getIdentityType() == ClassMetaData.ID_DATASTORE\n             && fmd.getObjectIdFieldTypeCode() == JavaTypes.LONG)\n             pk = _broker.getStoreManager().newDataStoreId(pk, relmeta);"},{"sha":"af829ef7cfe0d4075cea450e753878ddbaa8cc6f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","status":"modified","additions":22,"deletions":3,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","raw_url":"https://github.com/apache/openjpa/raw/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java?ref=4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f","patch":"@@ -58,7 +58,7 @@\n     /**\n      * Return the primary key values for the given object id. The values\n      * will be returned in the same order as the metadata primary key fields.\n-     * Values for PC primary key fields will be the primarky key value or\n+     * Values for PC primary key fields will be the primary key value or\n      * oid value of the related instance (depending on \n      * {@link FieldMetaData#isObjectIdFieldIdOfPC}).\n      */\n@@ -89,6 +89,7 @@\n             // copy fields from the oid\n             PrimaryKeyFieldManager consumer = new PrimaryKeyFieldManager();\n             consumer.setStore(pks);\n+            oid = wrap(meta, oid);\n             PCRegistry.copyKeyFieldsFromObjectId(meta.getDescribedType(),\n                 consumer, oid);\n             return consumer.getStore();\n@@ -108,10 +109,28 @@\n         }\n         return pks;\n     }\n+    \n+    /**\n+     * Wraps the given object for the given type into a OpenJPA specific \n+     * application identity object wrapper instance (i.e. ObjectId) if all of \n+     * the following is true:\n+     * the given type is not using built-in OpenJPA identity types\n+     * the given type is using a shared OpenJPA identity type\n+     * the given object is not already a wrapper identity type\n+     */\n+    public static Object wrap(ClassMetaData meta, Object oid) {\n+        if (!meta.isOpenJPAIdentity() \n+         && meta.isObjectIdTypeShared() \n+         && !(oid instanceof ObjectId)) {\n+        \treturn new ObjectId(meta.getDescribedType(), oid);\n+        } \n+        return oid;\n+    }\n+    \n \n     /**\n      * Return a new object id constructed from the given primary key values.\n-     * Values for PC primary key fields should be the primarky key value or\n+     * Values for PC primary key fields should be the primary key value or\n      * oid value of the related instance (depending on \n      * {@link FieldMetaData#isObjectIdFieldIdOfPC}).\n      */\n@@ -194,7 +213,7 @@ public static Object fromPKValues(Object[] pks, ClassMetaData meta) {\n                 producer.setMetaData(meta);\n             PCRegistry.copyKeyFieldsToObjectId(meta.getDescribedType(),\n                 producer, oid);\n-            return oid;\n+            return ApplicationIds.wrap(meta, oid);\n         }\n \n         // default to reflection"},{"sha":"de798d17fddc70c7b89b6202c1f5476bc535f918","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Book.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Book.java","raw_url":"https://github.com/apache/openjpa/raw/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Book.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Book.java?ref=4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f","patch":"@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.identity;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Set;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+\n+import org.apache.openjpa.persistence.jdbc.VersionColumn;\n+\n+/**\n+ * Entity used to test compound primary keys using entity as relationship to \n+ * more than one level.\n+ * \n+ * Test case and domain classes were originally part of the reported issue\n+ * <A href=\"https://issues.apache.org/jira/browse/OPENJPA-207\">OPENJPA-207</A>\n+ *  \n+ * @author Jeffrey Blattman\n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+@IdClass(BookId.class)\n+@VersionColumn\n+public class Book implements Serializable {\n+    @Id\n+    @Column(name=\"BOOK_NAME\", nullable = false)\n+    private String name;\n+    \n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"book\")\n+    private Set<Page> pages = new HashSet<Page>();\n+    \n+    @Id\n+    @Column(nullable = false)\n+    @ManyToOne (cascade = CascadeType.ALL)\n+    private Library library;\n+    \n+    private String author;\n+    \n+\tpublic String getName() {\n+        return name;\n+    }\n+    \n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    \n+    public Library getLibrary() {\n+        return library;\n+    }\n+\n+    public void setLibrary(Library library) {\n+        this.library = library;\n+    }\n+\n+    public Page getPage(int n) {\n+        for (Page p: pages) {\n+            if (p.getNumber() == n) {\n+                return p;\n+            }\n+        }\n+        return null;\n+    }\n+    \n+    public void addPage(Page p) {\n+        p.setBook(this);\n+        pages.add(p);\n+    }\n+    \n+\tpublic String getAuthor() {\n+\t\treturn author;\n+\t}\n+\n+\tpublic void setAuthor(String author) {\n+\t\tthis.author = author;\n+\t}\n+\n+    public boolean equals(Object o) {\n+        if (!(o instanceof Book)) {\n+            return false;\n+        }\n+        \n+        Book other = (Book)o;\n+        \n+        if (!getName().equals(other.getName())) {\n+            return false;\n+        }\n+        \n+        return true;\n+    }\n+\n+    public int hashCode() {\n+        return getName().hashCode();\n+    }\n+}"},{"sha":"56e3717b9dbad5c0ac94241799158fd0bad2802f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/BookId.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/BookId.java","raw_url":"https://github.com/apache/openjpa/raw/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/BookId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/BookId.java?ref=4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f","patch":"@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.identity;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Entity identity used to test compound primary keys using entity as \n+ * relationship to more than one level.\n+ * \n+ * Test case and domain classes were originally part of the reported issue\n+ * <A href=\"https://issues.apache.org/jira/browse/OPENJPA-207\">OPENJPA-207</A>\n+ *  \n+ * @author Jeffrey Blattman\n+ * @author Pinaki Poddar\n+ *\n+ */\n+public final class BookId implements Serializable {\n+    private String name;\n+    private String library;\n+\n+    \n+    public boolean equals(Object o) {\n+        if (!(o instanceof BookId)) {\n+            return false;\n+        }\n+        \n+        BookId other = (BookId)o;\n+        \n+        if (!(getName().equals(other.getName()))) {\n+            return false;\n+        }\n+        \n+        if (!getLibrary().equals(other.getLibrary())) {\n+            return false;\n+        }\n+        \n+        return true;\n+    }\n+    \n+    public int hashCode() {\n+        return safeHash(getName()) * safeHash(getLibrary());\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getLibrary() {\n+        return library;\n+    }\n+\n+    public void setLibrary(String library) {\n+        this.library = library;\n+    }\n+    \n+    private int safeHash(Object o) {\n+    \treturn (o == null) ? 31 : o.hashCode();\n+    }\n+}"},{"sha":"772ddeab1888573094983b9482d9401c9ea1ca2d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Library.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/apache/openjpa/blob/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Library.java","raw_url":"https://github.com/apache/openjpa/raw/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Library.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Library.java?ref=4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f","patch":"@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.identity;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Set;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+\n+import org.apache.openjpa.persistence.jdbc.VersionColumn;\n+\n+/**\n+ * Entity used to test compound primary keys using entity as relationship to \n+ * more than one level.\n+ * \n+ * Test case and domain classes were originally part of the reported issue\n+ * <A href=\"https://issues.apache.org/jira/browse/OPENJPA-207\">OPENJPA-207</A>\n+ *  \n+ * @author Jeffrey Blattman\n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+@VersionColumn\n+public class Library implements Serializable {\n+    @Id\n+    @Column(name=\"LIBRARY_NAME\", nullable = false)\n+    private String name;\n+    \n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"library\")\n+    private Set<Book> books = new HashSet<Book>();\n+    \n+    private String location;\n+    \n+\tpublic String getName() {\n+        return name;\n+    }\n+    \n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    \n+    public Set<Book> getBooks() {\n+\t\treturn books;\n+\t}\n+\n+    public Book getBook(String name) {\n+        for (Book b: books) {\n+            if (b.getName().equals(name)) {\n+                return b;\n+            }\n+        }\n+        \n+        return null;\n+    }\n+\n+    public void addBook(Book book) {\n+        book.setLibrary(this);\n+        books.add(book);\n+    }\n+    \n+\tpublic String getLocation() {\n+\t\treturn location;\n+\t}\n+\n+\tpublic void setLocation(String location) {\n+\t\tthis.location = location;\n+\t}\n+\n+    public boolean equals(Object o) {\n+        if (!(o instanceof Library)) {\n+            return false;\n+        }\n+        \n+        Library other = (Library)o;\n+        \n+        if (!getName().equals(other.getName())) {\n+            return false;\n+        }\n+        \n+        return true;\n+    }\n+\n+    public int hashCode() {\n+        return getName().hashCode();\n+    }\n+}"},{"sha":"2f5f910d6fbbf9f6b0ce2e6ac18bca55f55830a7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Page.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Page.java","raw_url":"https://github.com/apache/openjpa/raw/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Page.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Page.java?ref=4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.identity;\n+\n+import java.io.Serializable;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinColumns;\n+import javax.persistence.ManyToOne;\n+\n+import org.apache.openjpa.persistence.jdbc.VersionColumn;\n+\n+/**\n+ * Entity used to test compound primary keys using entity as relationship to \n+ * more than one level.\n+ * \n+ * Test case and domain classes were originally part of the reported issue\n+ * <A href=\"https://issues.apache.org/jira/browse/OPENJPA-207\">OPENJPA-207</A>\n+ *  \n+ * @author Jeffrey Blattman\n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+@IdClass(PageId.class)\n+@VersionColumn\n+public class Page implements Serializable {\n+    @Id\n+    @Column(name=\"PAGE_NUMBER\",nullable = false)\n+    private int number;\n+\n+    @Id\n+    @Column(nullable = false)\n+    @ManyToOne (cascade = CascadeType.ALL)\n+    @JoinColumns({\n+        @JoinColumn(name=\"BOOK_LIBRARY_LIBRARY_NAME\", referencedColumnName=\"LIBRARY_LIBRARY_NAME\"),\n+        @JoinColumn(name=\"BOOK_BOOK_NAME\", referencedColumnName=\"BOOK_NAME\")    \n+    })\n+    private Book book;\n+    \n+    public int getNumber() {\n+        return number;\n+    }\n+\n+    public void setNumber(int number) {\n+        this.number = number;\n+    }\n+\n+    public Book getBook() {\n+        return book;\n+    }\n+\n+    public void setBook(Book book) {\n+        this.book = book;\n+    }    \n+}"},{"sha":"45a727dd9f94adc0458e858aef1638bb87516c3e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/PageId.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/PageId.java","raw_url":"https://github.com/apache/openjpa/raw/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/PageId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/PageId.java?ref=4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.identity;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Entity identity used to test compound primary keys using entity as \n+ * relationship to more than one level.\n+ * \n+ * Test case and domain classes were originally part of the reported issue\n+ * <A href=\"https://issues.apache.org/jira/browse/OPENJPA-207\">OPENJPA-207</A>\n+ *  \n+ * @author Jeffrey Blattman\n+ * @author Pinaki Poddar\n+ *\n+ */\n+public final class PageId implements Serializable {\n+    private int number;\n+    private BookId book;\n+\n+    public int getNumber() {\n+        return number;\n+    }\n+\n+    public void setNumber(int number) {\n+        this.number = number;\n+    }\n+    \n+    public boolean equals(Object o) {\n+        if (!(o instanceof PageId)) {\n+            return false;\n+        }\n+        \n+        PageId other = (PageId)o;\n+        \n+        if (!(getNumber() == other.getNumber())) {\n+            return false;\n+        }\n+      \n+        if (!getBook().equals(other.getBook())) {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+    \n+    public int hashCode() {\n+        return number * (book != null ? getBook().hashCode() : 31);\n+    }\n+\n+    \n+    public BookId getBook() {\n+        return book;\n+    }\n+\n+    public void setBook(BookId book) {\n+        this.book = book;\n+    }\n+}"},{"sha":"213536c0641f7fa65f07abfa664a6f07e5c3c7c8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMultipleLevelDerivedIdentity.java","status":"added","additions":184,"deletions":0,"changes":184,"blob_url":"https://github.com/apache/openjpa/blob/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMultipleLevelDerivedIdentity.java","raw_url":"https://github.com/apache/openjpa/raw/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMultipleLevelDerivedIdentity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMultipleLevelDerivedIdentity.java?ref=4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f","patch":"@@ -0,0 +1,184 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.enhance.identity;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Tests entities that use compound keys that includes entity relationship at\n+ * more than one level.\n+ * \n+ * Page has a compound identity to Book which itself uses a compound identity to\n+ * Library.\n+ * \n+ * Test case and domain classes were originally part of the reported issue <A\n+ * href=\"https://issues.apache.org/jira/browse/OPENJPA-207\">OPENJPA-207</A>\n+ * \n+ * @author Jeffrey Blattman\n+ * @author Pinaki Poddar\n+ * \n+ */\n+public class TestMultipleLevelDerivedIdentity extends SingleEMFTestCase {\n+\tprivate static String LIBRARY_NAME = \"LIB\";\n+\tprivate static String BOOK_NAME    = \"foo\";\n+\tprivate static int    NUM_PAGES    = 3;\n+\t\n+\tpublic void setUp() throws Exception {\n+\t\tsuper.setUp(CLEAR_TABLES, Library.class, Book.class, Page.class,\n+\t\t\t\t\"openjpa.RuntimeUnenhancedClasses\", \"unsupported\");\n+\t\tcreate();\n+\t}\n+\t\n+//\tpublic void tearDown() throws Exception {\n+//\t\t\n+//\t}\n+\t\n+\tpublic void testPersist() {\n+\t\tcreate();\n+\t}\n+\n+\tpublic void testQueryRootLevel() {\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\tList<Library> list = em.createQuery(\"SELECT p FROM Library p\")\n+\t\t\t\t\t\t\t   .getResultList();\n+\t\tassertFalse(list.isEmpty());\n+\t\tLibrary lib = (Library) list.get(0);\n+\t\tassertNotNull(lib.getBook(BOOK_NAME));\n+\t\tassertNotNull(lib.getBook(BOOK_NAME).getPage(1));\n+\t}\n+\t\n+\tpublic void testQueryIntermediateLevel() {\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\tList<Book> list = em.createQuery(\"SELECT p FROM Book p\")\n+\t\t\t\t\t\t\t   .getResultList();\n+\t\tassertFalse(list.isEmpty());\n+\t\tBook book = list.get(0);\n+\t\tLibrary lib = book.getLibrary();\n+\t\tfor (int i=1; i<=NUM_PAGES; i++) {\n+\t\t\tPage page = book.getPage(i);\n+\t\t\tassertNotNull(page);\n+\t\t\tassertEquals(book, page.getBook());\n+\t\t\tassertEquals(lib, page.getBook().getLibrary());\n+\t\t\tassertEquals(page, page.getBook().getPage(page.getNumber()));\n+\t\t}\n+\t}\n+\n+\t\n+\tpublic void testQueryLeafLevel() {\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\tList<Page> list = em.createQuery(\"SELECT p FROM Page p\")\n+\t\t\t\t\t\t\t   .getResultList();\n+\t\tassertFalse(list.isEmpty());\n+\t\tBook book = list.get(0).getBook();\n+\t\tLibrary lib = book.getLibrary();\n+\t\tfor (Page page : list) {\n+\t\t\tassertEquals(book, page.getBook());\n+\t\t\tassertEquals(lib, page.getBook().getLibrary());\n+\t\t\tassertEquals(page, page.getBook().getPage(page.getNumber()));\n+\t\t}\n+\t}\n+\n+\tpublic void testFindRootNode() {\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\tLibrary lib = em.find(Library.class, LIBRARY_NAME);\n+\t\tassertNotNull(lib);\n+\t\tassertNotNull(lib.getBook(BOOK_NAME));\n+\t\tassertNotNull(lib.getBook(BOOK_NAME).getPage(1));\n+\t}\n+\t\n+\tpublic void testFindIntermediateNode() {\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\t\n+\t\tBookId bookId = new BookId();\n+\t\tbookId.setLibrary(LIBRARY_NAME);\n+\t\tbookId.setName(BOOK_NAME);\n+\t\tBook book = em.find(Book.class, bookId);\n+\t\tassertNotNull(book);\n+\t}\n+\t\n+\tpublic void testFindLeafNode() {\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\t\n+\t\tBookId bookId = new BookId();\n+\t\tbookId.setLibrary(LIBRARY_NAME);\n+\t\tbookId.setName(BOOK_NAME);\n+\t\tPageId pageId = new PageId();\n+\t\tpageId.setBook(bookId);\n+\t\tpageId.setNumber(2);\n+\t\tPage page = em.find(Page.class, pageId);\n+\t\tassertNotNull(page);\n+\t}\n+\t\n+\tpublic void testUpdate() {\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\tem.getTransaction().begin();\n+\t\tBookId bookId = new BookId();\n+\t\tbookId.setLibrary(LIBRARY_NAME);\n+\t\tbookId.setName(BOOK_NAME);\n+\t\tBook book = em.find(Book.class, bookId);\n+\t\tassertNotNull(book);\n+\t\tbook.setAuthor(\"modifiy Author\");\n+\t\tem.getTransaction().commit();\n+\t}\n+\t\n+\tpublic void testDelete() {\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\tem.getTransaction().begin();\n+\t\tLibrary lib = em.find(Library.class, LIBRARY_NAME);\n+\t\tem.remove(lib);\n+\t\tem.getTransaction().commit();\n+\t\t\n+\t    assertEquals(0, count(Library.class));\n+\t    assertEquals(0, count(Book.class));\n+\t    assertEquals(0, count(Page.class));\n+\t}\n+\n+\t\n+\t/**\n+\t * Create a Library with a Book and three Pages.\n+\t */\n+\tpublic void create() {\n+\t\tif (count(Library.class) > 0)\n+\t\t\treturn;\n+\t\t\n+\t\tEntityManager em = null;\n+\t\tem = emf.createEntityManager();\n+\t\tem.getTransaction().begin();\n+\t\t\n+\t\tLibrary lib = new Library();\n+\t\tlib.setName(LIBRARY_NAME);\n+\n+\t\tBook book = new Book();\n+\t\tbook.setName(BOOK_NAME);\n+\t\tlib.addBook(book);\n+\t\tfor (int i = 1; i <= NUM_PAGES; i++) {\n+\t\t\tPage page = new Page();\n+\t\t\tpage.setNumber(i);\n+\t\t\tbook.addPage(page);\n+\t\t}\n+\t\tem.persist(lib);\n+\t\tem.getTransaction().commit();\n+\n+\t\tem.clear();\n+\t}\n+}"},{"sha":"8901028828178fd1758902663f4c6ea734a92efa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java?ref=4c0bf1be10ca50cf8a02fb2e7c58ff52f862ca5f","patch":"@@ -106,4 +106,21 @@ protected ClassMapping getMapping(Class<?> entityClass) {\n                 .getMetaDataRepositoryInstance().getMetaData(entityClass,\n                         getClass().getClassLoader(), true);\n     }\n+    \n+    /**\n+     * Get number of instances by an aggregate query with the given alias.\n+     */\n+    public int count(String alias) {\n+    \treturn ((Number)emf.createEntityManager()\n+    \t\t\t\t\t   .createQuery(\"SELECT COUNT(p) FROM \" + alias + \" p\")\n+    \t\t\t\t\t   .getSingleResult()).intValue();\n+    }\n+    \n+    /**\n+     * Count number of instances of the given class assuming that the alias\n+     * for the class is its simple name.\n+     */\n+    public int count(Class c) {\n+    \treturn count(c.getSimpleName());\n+    }\n }"}]}

