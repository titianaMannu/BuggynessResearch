{"sha":"4c40adc4aabacf839c12615e9bb4ff99512bac3c","node_id":"MDY6Q29tbWl0MjA2MzY0OjRjNDBhZGM0YWFiYWNmODM5YzEyNjE1ZTliYjRmZjk5NTEyYmFjM2M=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-16T02:30:37Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-16T02:30:37Z"},"message":"Merge 686325, 686349, 686419\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@686438 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"aaee35c270bdc528fbe30f9db110f5fc2fc93ef3","url":"https://api.github.com/repos/apache/openjpa/git/trees/aaee35c270bdc528fbe30f9db110f5fc2fc93ef3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4c40adc4aabacf839c12615e9bb4ff99512bac3c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4c40adc4aabacf839c12615e9bb4ff99512bac3c","html_url":"https://github.com/apache/openjpa/commit/4c40adc4aabacf839c12615e9bb4ff99512bac3c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4c40adc4aabacf839c12615e9bb4ff99512bac3c/comments","author":null,"committer":null,"parents":[{"sha":"e6f060175f6121a81c6bf028bdfab752070324e8","url":"https://api.github.com/repos/apache/openjpa/commits/e6f060175f6121a81c6bf028bdfab752070324e8","html_url":"https://github.com/apache/openjpa/commit/e6f060175f6121a81c6bf028bdfab752070324e8"}],"stats":{"total":902,"additions":772,"deletions":130},"files":[{"sha":"5356a01a8d400d6fabf0aa2d54c3ffd95d32e650","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","status":"modified","additions":19,"deletions":1,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java?ref=4c40adc4aabacf839c12615e9bb4ff99512bac3c","patch":"@@ -28,8 +28,10 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Set;\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n@@ -118,13 +120,17 @@ private static String substituteParams(String sql, List params)\n             }\n         }\n \n+        int distinctParams = countDistinct(paramOrder);\n+        if (params.size() < distinctParams)\n+        \tthrow new UserException(_loc.get(\"sqlquery-fewer-params\", \n+        \t\tnew Object[] {sql, distinctParams, params.size(), params}));\n         // now go through the paramOrder list and re-order the params array\n         List translated = new ArrayList();\n         for (Iterator i = paramOrder.iterator(); i.hasNext();) {\n             int index = ((Number) i.next()).intValue() - 1;\n             if (index >= params.size())\n                 throw new UserException(_loc.get(\"sqlquery-missing-params\",\n-                    sql, String.valueOf(index), params));\n+                    sql, String.valueOf(index+1), params));\n             translated.add(params.get(index));\n         }\n \n@@ -133,6 +139,18 @@ private static String substituteParams(String sql, List params)\n         params.addAll(translated);\n         return buf.toString();\n     }\n+    \n+    static int countDistinct(List list) {\n+    \tif (list == null || list.isEmpty())\n+    \t\treturn 0;\n+    \tint distinct = 0;\n+    \tSet set = new HashSet();\n+    \tfor (Object o : list) {\n+    \t\tif (set.add(o))\n+    \t\t\tdistinct++;\n+    \t}\n+    \treturn distinct;\n+    }\n \n     public boolean supportsParameterDeclarations() {\n         return false;"},{"sha":"a35789a984a4263f5ae2cbfe5a73ca26168563b9","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties?ref=4c40adc4aabacf839c12615e9bb4ff99512bac3c","patch":"@@ -22,6 +22,8 @@ mult-mapping-aggregate: Cannot perform an aggregate query on a hierarchy with \\\n \tunjoined subclasses: {0}\n sqlquery-missing-params: SQL query \"{0}\" declares a parameter index \"{1}\" for \\\n \twhich no value was given.  The given parameters were: {2}\n+sqlquery-fewer-params: SQL query \"{0}\" declares {1} distinct parameter(s), \\\n+\tbut only {2} parameters are given. Given parameter values are \"{3}\".  \n no-sql: You have not specified a SQL filter to execute in your SQL query.\n del-ins-cycle: An unresolvable constraint cycle was detected.  This typically \\\n \tmeans that you are persisting a new object with the same primary key value \\"},{"sha":"3464d1fe41966a74319354a9193d96ff6458ddc6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=4c40adc4aabacf839c12615e9bb4ff99512bac3c","patch":"@@ -908,7 +908,11 @@ public long updateAll(Map params) {\n             else if (key instanceof Number) {\r\n                 if (base == -1)\r\n                     base = positionalParameterBase(params.keySet());\r\n-                arr[((Number) key).intValue() - base] = entry.getValue();\r\n+                int arrayIndex = ((Number) key).intValue() - base;\r\n+                if (arrayIndex >= arr.length)\r\n+                \tthrow new UserException(_loc.get(\"gap-query-param\", \r\n+                \t\tnew Object[]{_query, key, params.size(), params}));\r\n+                arr[arrayIndex] = entry.getValue();\r\n             } else\r\n                 throw new UserException(_loc.get(\"bad-param-name\", key));\r\n         }\r"},{"sha":"b2d0bfd3d970839863b9231c93fc4b04826fd226","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":19,"deletions":2,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=4c40adc4aabacf839c12615e9bb4ff99512bac3c","patch":"@@ -1618,10 +1618,15 @@ private QueryMetaData getQueryMetaDataInternal(Class cls, String name,\n         ClassLoader envLoader) {\n         if (name == null)\n             return null;\n-\n+        QueryMetaData qm = null;\n+        if (cls == null) {\n+        \tqm = searchQueryMetaDataByName(name);\n+        \tif (qm != null)\n+        \t\treturn qm;\n+        }\n         // check cache\n         Object key = getQueryKey(cls, name);\n-        QueryMetaData qm = (QueryMetaData) _queries.get(key);\n+        qm = (QueryMetaData) _queries.get(key);\n         if (qm != null)\n             return qm;\n \n@@ -1694,6 +1699,18 @@ public synchronized boolean removeQueryMetaData(Class cls, String name) {\n             return false;\n         return _queries.remove(getQueryKey(cls, name)) != null;\n     }\n+    \n+    /**\n+     * Searches all cached query metadata by name. \n+     */\n+    public QueryMetaData searchQueryMetaDataByName(String name) {\n+    \tfor (Object key : _queries.keySet()) {\n+    \t\tif (key instanceof QueryKey)\n+    \t\t\tif (StringUtils.equals(((QueryKey)key).name, name))\n+    \t\t\t\treturn (QueryMetaData)_queries.get(key);\n+    \t}\n+    \treturn null;\n+    }\n \n     /**\n      * Return a unique key for a given QueryMetaData."},{"sha":"cab6654afda9718f3049c14f5de2381d3e9331bf","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties?ref=4c40adc4aabacf839c12615e9bb4ff99512bac3c","patch":"@@ -400,3 +400,6 @@ cant-serialize-connected-broker: Serialization not allowed for brokers with \\\n     an active connection to the database.\n no-interface-metadata: No metadata was found for managed interface {0}.\n fetch-configuration-stack-empty: Fetch configuration stack is empty.\n+gap-query-param: Parameter {1} for query \"{0}\" exceeds the number of {2} \\\n+\tbound parameters with following values \"{3}\". This can happen if you have \\\n+\tdecalred but missed to bind values for one or more parameters."},{"sha":"b47cdf4b57e299f54970d91745c6d3e6bd18eeb6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java","status":"modified","additions":28,"deletions":1,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java","raw_url":"https://github.com/apache/openjpa/raw/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java?ref=4c40adc4aabacf839c12615e9bb4ff99512bac3c","patch":"@@ -26,6 +26,7 @@\n import javax.persistence.EntityManager;\r\n import javax.persistence.EntityNotFoundException;\r\n import javax.persistence.OptimisticLockException;\r\n+import javax.persistence.Query;\r\n import javax.persistence.TransactionRequiredException;\r\n \r\n import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n@@ -157,13 +158,39 @@ public void testErrorCodeConfigurationHasAllKnownDictionaries() {\n \t\t}\r\n \t}\r\n \t\r\n+\t/**\r\n+\t * Invalid query throws IllegalArgumentException on construction \r\n+\t * as per JPA spec.\r\n+\t */\r\n+\tpublic void testIllegalArgumennExceptionOnInvalidQuery() {\r\n+\t    EntityManager em = emf.createEntityManager();\r\n+\t    try {\r\n+\t      em.createQuery(\"This is not a valid JPQL query\");\r\n+          fail(\"Did not throw IllegalArgumentException for invalid query.\");\r\n+\t    } catch (Throwable t) {\r\n+\t\t   assertException(t, IllegalArgumentException.class);\r\n+\t    }\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Invalid named query fails as per spec on factory based construction. \r\n+\t */\r\n+     public void testIllegalArgumennExceptionOnInvalidNamedQuery() {\r\n+         EntityManager em = emf.createEntityManager();\r\n+         try {\r\n+             Query query = em.createNamedQuery(\"This is invalid Named query\");\r\n+         } catch (Throwable t) {\r\n+             assertException(t, IllegalArgumentException.class);\r\n+         }\r\n+      }\r\n+\t\r\n \t/**\r\n \t * Asserts that the given expected type of the exception is equal to or a\r\n \t * subclass of the given throwable or any of its nested exception.\r\n \t * Otherwise fails assertion and prints the given throwable and its nested\r\n \t * exception on the console. \r\n \t */\r\n-\tvoid assertException(Throwable t, Class expectedType) {\r\n+\tpublic void assertException(Throwable t, Class expectedType) {\r\n \t\tif (!isExpectedException(t, expectedType)) {\r\n \t\t\tt.printStackTrace();\r\n \t\t\tprint(t, 0);\r"},{"sha":"1f2dd72adf823f7f8748fd633fb60c6b075336ef","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestQueryParameterBinding.java","status":"added","additions":292,"deletions":0,"changes":292,"blob_url":"https://github.com/apache/openjpa/blob/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestQueryParameterBinding.java","raw_url":"https://github.com/apache/openjpa/raw/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestQueryParameterBinding.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestQueryParameterBinding.java?ref=4c40adc4aabacf839c12615e9bb4ff99512bac3c","patch":"@@ -0,0 +1,292 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.persistence.ArgumentException;\r\n+import org.apache.openjpa.persistence.jdbc.query.domain.Binder;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Tests validation of positional and named parameter binding for JPQL queries.\r\n+ *  \r\n+ *  \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+public class TestQueryParameterBinding extends SingleEMFTestCase {\r\n+\tprivate static String JPQL = \"SELECT p FROM Binder p \";\r\n+\t\r\n+\tprivate static int INT_VALUE    = 1;\r\n+\tprivate static String STR_VALUE = \"2\";\r\n+\tprivate static double DBL_VALUE = 3.0;\r\n+\t\r\n+\tprivate EntityManager em;\r\n+\t@Override\r\n+\tpublic void setUp() throws Exception {\r\n+\t\tsuper.setUp(CLEAR_TABLES, Binder.class);\r\n+\t\t\r\n+\t\tem = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tem.persist(new Binder(INT_VALUE, STR_VALUE, DBL_VALUE));\r\n+\t\tem.getTransaction().commit();\r\n+\t}\r\n+\t\r\n+\tpublic void testPositionalParameterWithPositionalBindingSucceeds() {\r\n+\t\tString JPQL_POSITIONAL  = JPQL + \"WHERE p.p1=?1 AND p.p2=?2 AND p.p3=?3\";\r\n+\t\tQuery q = em.createQuery(JPQL_POSITIONAL);\r\n+\t\tq.setParameter(1, INT_VALUE);\r\n+\t\tq.setParameter(2, STR_VALUE);\r\n+\t\tq.setParameter(3, DBL_VALUE);\r\n+\t\t\r\n+\t\tassertEquals(1, q.getResultList().size());\r\n+\t}\r\n+\t\r\n+\tpublic void testPositionalParameterWithNamedBindingFails() {\r\n+\t\tString JPQL_POSITIONAL  = JPQL + \"WHERE p.p1=?1 AND p.p2=?2 AND p.p3=?3\";\r\n+\t\tQuery q = em.createQuery(JPQL_POSITIONAL);\r\n+\t\tq.setParameter(\"p1\", INT_VALUE);\r\n+\t\tq.setParameter(\"p2\", STR_VALUE);\r\n+\t\tq.setParameter(\"p3\", DBL_VALUE);\r\n+\t\t\r\n+\t\tfail(q);\r\n+\t}\r\n+\t\r\n+\tpublic void testPositionalParameterWithInsufficientValuesFails() {\r\n+\t\tString JPQL_POSITIONAL  = JPQL + \"WHERE p.p1=?1 AND p.p2=?2 AND p.p3=?3\";\r\n+\t\tQuery q = em.createQuery(JPQL_POSITIONAL);\r\n+\t\tq.setParameter(1, INT_VALUE);\r\n+\t\tq.setParameter(2, STR_VALUE);\r\n+\t\t\r\n+\t\tfail(q);\r\n+\t}\r\n+\t\r\n+\tpublic void testPositionalParameterWithExtraValuesFails() {\r\n+\t\tString JPQL_POSITIONAL  = JPQL + \"WHERE p.p1=?1 AND p.p2=?2 AND p.p3=?3\";\r\n+\t\tQuery q = em.createQuery(JPQL_POSITIONAL);\r\n+\t\tq.setParameter(1, INT_VALUE);\r\n+\t\tq.setParameter(2, STR_VALUE);\r\n+\t\tq.setParameter(3, DBL_VALUE);\r\n+\t\tq.setParameter(4, 4);\r\n+\t\t\r\n+\t\tfail(q);\r\n+\t}\r\n+\r\n+\tpublic void testPositionalParameterWithRepeatedValuesSucceeds() {\r\n+\t\tString jPQL_POSITIONAL_REPEATED_PARAM  = \r\n+\t\t\tJPQL + \"WHERE p.p1=?1 OR p.p1=?1 AND p.p3=?2\";\r\n+\t\tQuery q = em.createQuery(jPQL_POSITIONAL_REPEATED_PARAM);\r\n+\t\tq.setParameter(1,  INT_VALUE);\r\n+\t\tq.setParameter(2,  DBL_VALUE);\r\n+\t\t\r\n+\t\tassertEquals(1,q.getResultList().size());\r\n+\t}\r\n+\t\r\n+\tpublic void testPositionalParameterWithGapSucceeds() {\r\n+\t\tString JPQL_POSITIONAL_GAP_IN_PARAM  = \r\n+\t\t\tJPQL + \"WHERE p.p1=?1 AND p.p2=?3\";\r\n+\t\tQuery q = em.createQuery(JPQL_POSITIONAL_GAP_IN_PARAM);\r\n+\t\tq.setParameter(1,  INT_VALUE);\r\n+\t\tq.setParameter(3,  STR_VALUE);\r\n+\t\t\r\n+\t\tassertEquals(1,q.getResultList().size());\r\n+\t}\r\n+\t\r\n+\tpublic void testPositionalParameterWithGapFails() {\r\n+\t\tString JPQL_POSITIONAL_GAP_IN_PARAM  = \r\n+\t\t\tJPQL + \"WHERE p.p1=?1 AND p.p3=?3\";\r\n+\t\tQuery q = em.createQuery(JPQL_POSITIONAL_GAP_IN_PARAM);\r\n+\t\tq.setParameter(1,  INT_VALUE);\r\n+\t\tq.setParameter(2,  STR_VALUE);\r\n+\t\tq.setParameter(3,  DBL_VALUE);\r\n+\t\t\r\n+\t\tfail(q);\r\n+\t}\r\n+\t\r\n+\tpublic void testNamedParameterWithNamedBindingSucceeds() {\r\n+\t\tString JPQL_NAMED  = JPQL + \"WHERE p.p1=:p1 AND p.p2=:p2 AND p.p3=:p3\";\r\n+\t\tQuery q = em.createQuery(JPQL_NAMED);\r\n+\t\tq.setParameter(\"p1\", INT_VALUE);\r\n+\t\tq.setParameter(\"p2\", STR_VALUE);\r\n+\t\tq.setParameter(\"p3\", DBL_VALUE);\r\n+\t\t\r\n+\t\tassertEquals(1, q.getResultList().size());\r\n+\t}\r\n+\t\r\n+\tpublic void testNamedParameterWithPositionalBindingFails() {\r\n+\t\tString JPQL_NAMED  = JPQL + \"WHERE p.p1=:p1 AND p.p2=:p2 AND p.p3=:p3\";\r\n+\t\tQuery q = em.createQuery(JPQL_NAMED);\r\n+\t\tq.setParameter(1, INT_VALUE);\r\n+\t\tq.setParameter(2, STR_VALUE);\r\n+\t\tq.setParameter(3, DBL_VALUE);\r\n+\t\t\r\n+\t\tfail(q);\r\n+\t}\r\n+\t\r\n+\tpublic void testNamedParameterWithInsufficientValuesFails() {\r\n+\t\tString JPQL_NAMED  = JPQL + \"WHERE p.p1=:p1 AND p.p2=:p2 AND p.p3=:p3\";\r\n+\t\tQuery q = em.createQuery(JPQL_NAMED);\r\n+\t\tq.setParameter(\"p1\", INT_VALUE);\r\n+\t\tq.setParameter(\"p2\", STR_VALUE);\r\n+\t\t\r\n+\t\tfail(q);\r\n+\t}\r\n+\t\r\n+\tpublic void testNamedParameterWithExtraValuesFails() {\r\n+\t\tString JPQL_NAMED  = JPQL + \"WHERE p.p1=:p1 AND p.p2=:p2 AND p.p3=:p3\";\r\n+\t\tQuery q = em.createQuery(JPQL_NAMED);\r\n+\t\tq.setParameter(\"p1\", INT_VALUE);\r\n+\t\tq.setParameter(\"p2\", STR_VALUE);\r\n+\t\tq.setParameter(\"p3\", DBL_VALUE);\r\n+\t\tq.setParameter(\"p4\", 4);\r\n+\t\t\r\n+\t\tfail(q);\r\n+\t}\r\n+\r\n+\tpublic void testNamedParameterWithRepeatedValuesSucceeds() {\r\n+\t\tString jPQL_NAMED_REPEATED_PARAM  = \r\n+\t\t\tJPQL + \"WHERE p.p1=:p1 OR p.p1=:p1 AND p.p3=:p2\";\r\n+\t\tQuery q = em.createQuery(jPQL_NAMED_REPEATED_PARAM);\r\n+\t\tq.setParameter(\"p1\",  INT_VALUE);\r\n+\t\tq.setParameter(\"p2\",  DBL_VALUE);\r\n+\t\t\r\n+\t\tassertEquals(1,q.getResultList().size());\r\n+\t}\r\n+\t\r\n+\tpublic void testNamedParameterWithGapSucceeds() {\r\n+\t\tString JPQL_NAMED_GAP_IN_PARAM  = \r\n+\t\t\tJPQL + \"WHERE p.p1=:p1 AND p.p2=:p3\";\r\n+\t\tQuery q = em.createQuery(JPQL_NAMED_GAP_IN_PARAM);\r\n+\t\tq.setParameter(\"p1\",  INT_VALUE);\r\n+\t\tq.setParameter(\"p3\",  STR_VALUE);\r\n+\t\t\r\n+\t\tassertEquals(1,q.getResultList().size());\r\n+\t}\r\n+\t\r\n+\tpublic void testNamedParameterWithGapFails() {\r\n+\t\tString JPQL_NAMED_GAP_IN_PARAM  = \r\n+\t\t\tJPQL + \"WHERE p.p1=:p1 AND p.p3=:p3\";\r\n+\t\tQuery q = em.createQuery(JPQL_NAMED_GAP_IN_PARAM);\r\n+\t\tq.setParameter(\"p1\",  INT_VALUE);\r\n+\t\tq.setParameter(\"p2\",  STR_VALUE);\r\n+\t\tq.setParameter(\"p3\",  DBL_VALUE);\r\n+\t\t\r\n+\t\tfail(q);\r\n+\t}\r\n+\t\r\n+\tpublic void testNamedParameterWithWrongType() {\r\n+\t\tString JPQL_NAMED  = JPQL + \"WHERE p.p1=:p1 AND p.p2=:p2 AND p.p3=:p3\";\r\n+\t\tQuery q = em.createQuery(JPQL_NAMED);\r\n+\t\tq.setParameter(\"p1\",  INT_VALUE);\r\n+\t\tq.setParameter(\"p2\",  DBL_VALUE);\r\n+\t\tq.setParameter(\"p3\",  STR_VALUE);\r\n+\t\t\r\n+\t\tfail(q);\r\n+\t}\r\n+\t\r\n+\tpublic void testPositionalParameterWithWrongType() {\r\n+\t\tString JPQL_POSITIONAL  = JPQL + \"WHERE p.p1=?1 AND p.p2=?2 AND p.p3=?3\";\r\n+\t\tQuery q = em.createQuery(JPQL_POSITIONAL);\r\n+\t\tq.setParameter(1,  INT_VALUE);\r\n+\t\tq.setParameter(2,  DBL_VALUE);\r\n+\t\tq.setParameter(3,  STR_VALUE);\r\n+\t\t\r\n+\t\tfail(q);\r\n+\t}\r\n+\t\r\n+\tpublic void testNamedParameterWithNullValue() {\r\n+\t\tString JPQL_POSITIONAL  = JPQL + \"WHERE p.p1=:p1 AND p.p2=:p2 AND p.p3=:p3\";\r\n+\t\tQuery q = em.createQuery(JPQL_POSITIONAL);\r\n+\t\tq.setParameter(\"p1\",  INT_VALUE);\r\n+\t\tq.setParameter(\"p2\",  null);\r\n+\t\tq.setParameter(\"p3\",  null);\r\n+\t\t\r\n+\t\tfail(q);\r\n+\t}\r\n+\t\r\n+\tpublic void testPositionalParameterWithNullValue() {\r\n+\t\tString JPQL_POSITIONAL  = JPQL + \"WHERE p.p1=?1 AND p.p2=?2 AND p.p3=?3\";\r\n+\t\tQuery q = em.createQuery(JPQL_POSITIONAL);\r\n+\t\tq.setParameter(1,  INT_VALUE);\r\n+\t\tq.setParameter(2,  null);\r\n+\t\tq.setParameter(3,  null);\r\n+\t\t\r\n+\t\tfail(q);\r\n+\t}\r\n+\t\r\n+\tpublic void testPositionalParameterWithSingleResult() {\r\n+\t\tQuery q = em.createNamedQuery(\"JPQL_POSITIONAL\");\r\n+\t\t// \"SELECT p FROM Binder p WHERE p.p1=?1 AND p.p2=?2 AND p.p3=?3\"\r\n+\t\tq.setParameter(1,  INT_VALUE);\r\n+\t\tq.setParameter(2,  null);\r\n+\t\tq.setParameter(3,  null);\r\n+\t\t\r\n+\t\tfail(q, true);\r\n+\t}\r\n+\t\r\n+\tpublic void testPositionalParameterWithNativeQuery() {\r\n+\t\tQuery q = em.createNamedQuery(\"SQL_POSITIONAL\");\r\n+\t\t// \"SELECT p.id FROM Binder WHERE p.p1=?1 AND p.p2=?2 AND p.p3=?3\"\r\n+\t\tq.setParameter(1,  INT_VALUE);\r\n+\t\tq.setParameter(2,  STR_VALUE);\r\n+\t\tq.setParameter(3,  DBL_VALUE);\r\n+\t\t\r\n+\t\tassertEquals(1,q.getResultList().size());\r\n+\t}\r\n+\t\r\n+\tpublic void testPositionalParameterWithNativeQueryFails() {\r\n+\t\tQuery q = em.createNamedQuery(\"SQL_POSITIONAL\");\r\n+\t\t// \"SELECT p.id FROM Binder WHERE p.p1=?1 AND p.p2=?2 AND p.p3=?3\"\r\n+\t\tq.setParameter(1,  INT_VALUE);\r\n+\t\tq.setParameter(2,  STR_VALUE);\r\n+\t\t\r\n+\t\tfail(q);\r\n+\t}\r\n+\t\r\n+\tpublic void testPositionalParameterWithNativeQueryFailsWithGap() {\r\n+\t\tQuery q = em.createNamedQuery(\"SQL_POSITIONAL\");\r\n+\t\t// \"SELECT p.id FROM Binder WHERE p.p1=?1 AND p.p2=?2 AND p.p3=?3\"\r\n+\t\tq.setParameter(1,  INT_VALUE);\r\n+\t\tq.setParameter(3,  DBL_VALUE);\r\n+\t\t\r\n+\t\tfail(q);\r\n+\t}\r\n+\t\r\n+\t\r\n+\tvoid fail(Query q) {\r\n+\t\tfail(q, false);\r\n+\t}\r\n+\t\r\n+\tvoid fail(Query q, boolean single) {\r\n+\t\ttry {\r\n+\t\t\tif (single) \r\n+\t\t\t\tq.getSingleResult();\r\n+\t\t\telse \r\n+\t\t\t\tq.getResultList();\r\n+\t\t\tfail(\"Expeceted \" + ArgumentException.class.getName());\r\n+\t\t} catch (IllegalArgumentException ex) {\r\n+\t\t// good\r\n+\t\t\tSystem.err.println(\"*** ERROR \" + getName());\r\n+\t\t\tSystem.err.println(\"*** ERROR \" + ex.getMessage());\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+}\r"},{"sha":"a8408f4047d863266bb3b48e05fcf25795e4e9e3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java","raw_url":"https://github.com/apache/openjpa/raw/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java?ref=4c40adc4aabacf839c12615e9bb4ff99512bac3c","patch":"@@ -80,7 +80,6 @@ public void testSelectQueryWithNoParameter() {\n \t\tEntityManager em = emf.createEntityManager();\r\n \r\n \t\tQuery query = em.createQuery(\"SELECT d from Department d\");\r\n-\t\tquery.setParameter(1, DEPT_NAME);\r\n \t\tDepartment dept = (Department) query.getSingleResult();\r\n \r\n \t\tassertEquals(FULLTIME_EMPLOYEE_COUNT, dept.getFullTimeEmployees()\r"},{"sha":"37fdb656d80f57cfe971b4a283f0ea3bb63c08cc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Binder.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Binder.java","raw_url":"https://github.com/apache/openjpa/raw/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Binder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Binder.java?ref=4c40adc4aabacf839c12615e9bb4ff99512bac3c","patch":"@@ -0,0 +1,51 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query.domain;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.NamedNativeQuery;\r\n+import javax.persistence.NamedQuery;\r\n+\r\n+@Entity\r\n+@NamedQuery(name=\"JPQL_POSITIONAL\", \r\n+\t\tquery=\"SELECT p FROM Binder p WHERE p.p1=?1 AND p.p2=?2 AND p.p3=?3\")\r\n+@NamedNativeQuery(name=\"SQL_POSITIONAL\",\r\n+\t\tquery=\"SELECT id, p1 FROM Binder WHERE p1=?1 AND p2=?2 AND p3=?3\")\r\n+public class Binder {\r\n+\t@Id\r\n+\t@GeneratedValue\r\n+\tprivate long id;\r\n+\t\r\n+\tprivate int p1;\r\n+\tprivate String p2;\r\n+\tprivate double p3;\r\n+\t\r\n+\tprotected Binder() {\r\n+\t\tthis(-1, \"-1\" , -1.0);\r\n+\t}\r\n+\t\r\n+\tpublic Binder(int i1, String i2, double i3) {\r\n+\t\tp1 = i1;\r\n+\t\tp2 = i2;\r\n+\t\tp3 = i3;\r\n+\t}\r\n+\t\r\n+}\r"},{"sha":"61b987d68f31a58d4e9b5aa4eeb9dce06275abd7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity.java","raw_url":"https://github.com/apache/openjpa/raw/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity.java?ref=4c40adc4aabacf839c12615e9bb4ff99512bac3c","patch":"@@ -33,11 +33,11 @@\n import javax.persistence.SqlResultSetMapping;\r\n import javax.persistence.Table;\r\n \r\n-@NamedQuery(name=\"FindXTwo\", query=\"select s from simple s where s.name = :fname\")\r\n+@NamedQuery(name=\"FindXTwo\", query=\"select s from simple s where s.name = ?1\")\r\n \r\n @NamedQueries( {\r\n-    @NamedQuery(name=\"FindOne\", query=\"select s from simple s where s.name = :fname\"),\r\n-    @NamedQuery(name=\"FindOne\", query=\"select s from simple s where s.name = :fname\"),\r\n+    @NamedQuery(name=\"FindOne\", query=\"select s from simple s where s.name = ?1\"),\r\n+    @NamedQuery(name=\"FindOne\", query=\"select s from simple s where s.name = ?1\"),\r\n     @NamedQuery(name=\"FindAll\", query=\"select s from simple s\")\r\n })\r\n \r"},{"sha":"30f6594108f877cf47369fdedbcc195293f0f59e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity2.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity2.java","raw_url":"https://github.com/apache/openjpa/raw/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity2.java?ref=4c40adc4aabacf839c12615e9bb4ff99512bac3c","patch":"@@ -27,11 +27,11 @@\n import javax.persistence.NamedQuery;\r\n import javax.persistence.Table;\r\n \r\n-@NamedQuery(name=\"FindXTwo\", query=\"select s from simple2 s where s.name = :fname\")\r\n+@NamedQuery(name=\"FindXTwo\", query=\"select s from simple2 s where s.name = ?1\")\r\n \r\n @NamedQueries( {\r\n-    @NamedQuery(name=\"FindOne\", query=\"select s from simple2 s where s.name = :fname\"),\r\n-    @NamedQuery(name=\"Find2One\", query=\"select s from simple2 s where s.name = :fname\"),\r\n+    @NamedQuery(name=\"FindOne\", query=\"select s from simple2 s where s.name = ?1\"),\r\n+    @NamedQuery(name=\"Find2One\", query=\"select s from simple2 s where s.name = ?1\"),\r\n     @NamedQuery(name=\"Find2All\", query=\"select s from simple2 s\")\r\n })\r\n \r"},{"sha":"707925e274cc204fdec14f6d57d2f359be09f834","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDupNamedQuery.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDupNamedQuery.java","raw_url":"https://github.com/apache/openjpa/raw/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDupNamedQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDupNamedQuery.java?ref=4c40adc4aabacf839c12615e9bb4ff99512bac3c","patch":"@@ -60,8 +60,8 @@ private void simpleQuery(boolean simple2, String findOneQName,\n         assertNotNull(list);\n         assertEquals(list.size(), 1);\n         Object o = list.get(0);\n-        assertSame(o.getClass(), simple2 ? SimpleEntity2.class\n-            : SimpleEntity.class);\n+        assertTrue(simple2 ? o instanceof SimpleEntity2 \n+        \t\t: o instanceof SimpleEntity);\n         assertEquals(simple2 ? ((SimpleEntity2) o).getValue()\n             : ((SimpleEntity) o).getValue(), ValueOne);\n \n@@ -71,8 +71,8 @@ private void simpleQuery(boolean simple2, String findOneQName,\n             assertEquals(list.size(), 2);\n             for (Iterator resultIter = list.iterator(); resultIter.hasNext();) {\n                 o = resultIter.next();\n-                assertSame(o.getClass(), simple2 ? SimpleEntity2.class\n-                    : SimpleEntity.class);\n+                assertTrue(simple2 ? o instanceof SimpleEntity2 \n+                \t\t: o instanceof SimpleEntity);\n                 String n = null;\n                 String v = null;\n                 if (simple2) {"},{"sha":"a7039109c5203ce01c8b0e89b110c5d598b5d96b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","status":"modified","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/apache/openjpa/blob/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java?ref=4c40adc4aabacf839c12615e9bb4ff99512bac3c","patch":"@@ -18,7 +18,13 @@\n  */\n package org.apache.openjpa.persistence.test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.lang.reflect.Modifier;\n+import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n@@ -296,4 +302,99 @@ else if (o1 == null || o2 == null)\n         else if (o1.equals(o2))\n             fail(\"expected args to be different; compared equal.\");\n     }\n+\n+    /**\n+     * Round-trip a serializable object to bytes.\n+     */\n+    public static Object roundtrip(Object o) \n+        throws ClassNotFoundException, IOException {\n+        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream(bytes);\n+        out.writeObject(o);\n+        out.flush();\n+        ObjectInputStream in = new ObjectInputStream(\n+            new ByteArrayInputStream(bytes.toByteArray()));\n+        return in.readObject();\n+    }\n+    \n+    // ================================================ \n+    // Utility methods for exception handling\n+    // ================================================\n+    /**\n+\t * Asserts that the given targetType is assignable from given actual \n+\t * Throwable.\n+\t */\n+    protected void assertException(final Throwable actual, Class targetType) {\n+\t\tassertException(actual, targetType, null);\n+\t}\n+\t\n+\t/**\n+\t * Asserts that the given targetType is assignable from given actual \n+\t * Throwable. Asserts that the nestedType is nested (possibly recursively) \n+\t * within the given actual Throwable.\n+\t * \n+\t * @param actual is the actual throwable to be tested\n+\t * @param targetType is expected type or super type of actual. If null, then\n+\t * the check is omitted.\n+\t * @param nestedTargetType is expected type of exception nested within\n+\t * actual. If null this search is omitted. \n+\t * \n+\t */\n+    protected void assertException(final Throwable actual, Class targetType,\n+\t\t\tClass nestedTargetType) {\n+\t\tassertNotNull(actual);\n+\t\tClass actualType = actual.getClass();\n+\t\tif (targetType != null && !targetType.isAssignableFrom(actualType)) {\n+\t\t\tactual.printStackTrace();\n+\t\t\tfail(targetType.getName() + \" is not assignable from \"\n+\t\t\t\t\t+ actualType.getName());\n+\t\t}\n+\n+\t\tif (nestedTargetType != null) {\n+\t\t\tThrowable nested = actual.getCause();\n+\t\t\tClass nestedActualType = (nested == null) ? null : nested.getClass();\n+\t\t\twhile (nestedActualType != null) {\n+\t\t\t\tif (nestedTargetType.isAssignableFrom(nestedActualType)) {\n+\t\t\t\t\treturn;\n+\t\t\t\t} else {\n+\t\t\t\t\tThrowable next = nested.getCause();\n+\t\t\t\t\tif (next == null || next == nested)\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tnestedActualType = next.getClass();\n+\t\t\t\t\tnested     = next;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tactual.printStackTrace();\n+\t\t\tfail(\"No nested type \" + nestedTargetType + \" in \" + actual);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Assert that each of given keys are present in the message of the given\n+\t * Throwable.\n+\t */\n+    protected void assertMessage(Throwable actual, String... keys) {\n+\t\tif (actual == null || keys == null)\n+\t\t\treturn;\n+\t\tString message = actual.getMessage();\n+\t\tfor (String key : keys) {\n+\t\t\tassertTrue(key + \" is not in \" + message, message.contains(key));\n+\t\t}\n+\t}\n+    \n+    public void printException(Throwable t) {\n+    \tprintException(t, 2);\n+    }\n+    \n+    public void printException(Throwable t, int tab) {\n+\t\tif (t == null) return;\n+\t\tfor (int i=0; i<tab*4;i++) System.out.print(\" \");\n+\t\tString sqlState = (t instanceof SQLException) ? \n+\t\t\t\"(SQLState=\" + ((SQLException)t).getSQLState() + \":\" \n+\t\t\t\t+ t.getMessage() + \")\" : \"\";\n+\t\tSystem.out.println(t.getClass().getName() + sqlState);\n+\t\tif (t.getCause() == t) \n+\t\t\treturn;\n+\t\tprintException(t.getCause(), tab+2);\n+\t}\n }"},{"sha":"607a818ff2dabe43a964a8f570ea1111891ff04a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":13,"deletions":8,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=4c40adc4aabacf839c12615e9bb4ff99512bac3c","patch":"@@ -1582,14 +1582,17 @@ private void parseNamedQueries(AnnotatedElement el, NamedQuery... queries) {\n             if (_log.isTraceEnabled())\n                 _log.trace(_loc.get(\"parse-query\", query.name()));\n \n-            meta = getRepository().getCachedQueryMetaData(null, query.name());\n+            meta = getRepository().searchQueryMetaDataByName(query.name());\n             if (meta != null) {\n-                if (_log.isWarnEnabled())\n-                    _log.warn(_loc.get(\"dup-query\", query.name(), el));\n+            \tClass definingType = meta.getDefiningType();\n+                if ((definingType == null || definingType != _cls) \n+                  && _log.isWarnEnabled()) {\n+                    _log.warn(_loc.get(\"dup-query\", query.name(), el, \n+                    \t\tdefiningType));\n+                }\n                 continue;\n             }\n-\n-            meta = getRepository().addQueryMetaData(null, query.name());\n+            meta = getRepository().addQueryMetaData(_cls, query.name());\n             meta.setQueryString(query.query());\n             meta.setLanguage(JPQLParser.LANG_JPQL);\n             for (QueryHint hint : query.hints())\n@@ -1623,10 +1626,12 @@ private void parseNamedNativeQueries(AnnotatedElement el,\n             if (_log.isTraceEnabled())\n                 _log.trace(_loc.get(\"parse-native-query\", query.name()));\n \n-            meta = getRepository().getCachedQueryMetaData(null, query.name());\n+            meta = getRepository().searchQueryMetaDataByName(query.name());\n             if (meta != null) {\n-                if (_log.isWarnEnabled())\n-                    _log.warn(_loc.get(\"dup-query\", query.name(), el));\n+            \tClass defType = meta.getDefiningType();\n+                if ((defType != _cls) && _log.isWarnEnabled()) {\n+                    _log.warn(_loc.get(\"dup-query\", query.name(), el, defType));\n+                }\n                 continue;\n             }\n "},{"sha":"3e87c6e16dd38ce0433855db72f90f4b060fbcb3","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":19,"deletions":10,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=4c40adc4aabacf839c12615e9bb4ff99512bac3c","patch":"@@ -87,7 +87,7 @@\n     private Map<FetchConfiguration,FetchPlan> _plans =\r\n         new IdentityHashMap<FetchConfiguration,FetchPlan>(1);\r\n \r\n-    private RuntimeExceptionTranslator ret =\r\n+    private RuntimeExceptionTranslator _ret =\r\n         PersistenceExceptions.getRollbackTranslator(this);\r\n \r\n     public EntityManagerImpl() {\r\n@@ -104,8 +104,8 @@ public EntityManagerImpl(EntityManagerFactoryImpl factory,\n \r\n     private void initialize(EntityManagerFactoryImpl factory, Broker broker) {\r\n         _emf = factory;\r\n-        _broker = new DelegatingBroker(broker, ret);\r\n-        _broker.setImplicitBehavior(this, ret);\r\n+        _broker = new DelegatingBroker(broker, _ret);\r\n+        _broker.setImplicitBehavior(this, _ret);\r\n     }\r\n \r\n     /**\r\n@@ -867,15 +867,24 @@ public OpenJPAQuery createQuery(String query) {\n \r\n     public OpenJPAQuery createQuery(String language, String query) {\r\n         assertNotCloseInvoked();\r\n-        return new QueryImpl(this, ret, _broker.newQuery(language, query));\r\n+        try {\r\n+            org.apache.openjpa.kernel.Query q = _broker.newQuery(language, \r\n+                query);\r\n+            // have to validate JPQL according to spec\r\n+            if (JPQLParser.LANG_JPQL.equals(language))\r\n+                q.compile(); \r\n+            return new QueryImpl(this, _ret, q);\r\n+        } catch (RuntimeException re) {\r\n+            throw PersistenceExceptions.toPersistenceException(re);\r\n+        }\r\n     }\r\n \r\n     public OpenJPAQuery createQuery(Query query) {\r\n         if (query == null)\r\n             return createQuery((String) null);\r\n         assertNotCloseInvoked();\r\n         org.apache.openjpa.kernel.Query q = ((QueryImpl) query).getDelegate();\r\n-        return new QueryImpl(this, ret, _broker.newQuery(q.getLanguage(),\r\n+        return new QueryImpl(this, _ret, _broker.newQuery(q.getLanguage(),\r\n             q));\r\n     }\r\n \r\n@@ -891,7 +900,7 @@ public OpenJPAQuery createNamedQuery(String name) {\n             meta.setInto(del);\r\n             del.compile();\r\n \r\n-            OpenJPAQuery q = new QueryImpl(this, ret, del);\r\n+            OpenJPAQuery q = new QueryImpl(this, _ret, del);\r\n             String[] hints = meta.getHintKeys();\r\n             Object[] values = meta.getHintValues();\r\n             for (int i = 0; i < hints.length; i++)\r\n@@ -917,7 +926,7 @@ public OpenJPAQuery createNativeQuery(String query, String mappingName) {\n         org.apache.openjpa.kernel.Query kernelQuery = _broker.newQuery(\r\n             QueryLanguages.LANG_SQL, query);\r\n         kernelQuery.setResultMapping(null, mappingName);\r\n-        return new QueryImpl(this, ret, kernelQuery);\r\n+        return new QueryImpl(this, _ret, kernelQuery);\r\n     }\r\n \r\n     /**\r\n@@ -1235,7 +1244,7 @@ public boolean equals(Object other) {\n     public void readExternal(ObjectInput in)\r\n         throws IOException, ClassNotFoundException {\r\n         try {\r\n-            ret = PersistenceExceptions.getRollbackTranslator(this);\r\n+            _ret = PersistenceExceptions.getRollbackTranslator(this);\r\n \r\n             // this assumes that serialized Brokers are from something\r\n             // that extends AbstractBrokerFactory.\r\n@@ -1254,7 +1263,7 @@ public void readExternal(ObjectInput in)\n             initialize(emf, broker);\r\n         } catch (RuntimeException re) {\r\n             try {\r\n-                re = ret.translate(re);\r\n+                re = _ret.translate(re);\r\n             } catch (Exception e) {\r\n                 // ignore\r\n             }\r\n@@ -1276,7 +1285,7 @@ public void writeExternal(ObjectOutput out) throws IOException {\n             out.writeObject(baos.toByteArray());\r\n         } catch (RuntimeException re) {\r\n             try {\r\n-                re = ret.translate(re);\r\n+                re = _ret.translate(re);\r\n             } catch (Exception e) {\r\n                 // ignore\r\n             }\r"},{"sha":"86de8fb24825b3c2ed673e86c6ccb7abf4b030da","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":185,"deletions":91,"changes":276,"blob_url":"https://github.com/apache/openjpa/blob/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=4c40adc4aabacf839c12615e9bb4ff99512bac3c","patch":"@@ -21,6 +21,7 @@\n import java.io.Serializable;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Calendar;\n import java.util.Collection;\n import java.util.Collections;\n@@ -30,6 +31,8 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.TreeMap;\n+\n import javax.persistence.FlushModeType;\n import javax.persistence.Query;\n import javax.persistence.TemporalType;\n@@ -67,18 +70,17 @@\n     private transient EntityManagerImpl _em;\n     private transient FetchPlan _fetch;\n \n-    private Map _named;\n-    private List _positional;\n+\tprivate Map<String, Object> _named;\n+\tprivate Map<Integer, Object> _positional;\n+\n+\tprivate static Object GAP_FILLER = new Object();\n \n     /**\n      * Constructor; supply factory exception translator and delegate.\n      * \n-     * @param em\n-     *            The EntityManager which created this query\n-     * @param ret\n-     *            Exception translater for this query\n-     * @param query\n-     *            The underlying \"kernel\" query.\n+     * @param em  The EntityManager which created this query\n+     * @param ret Exception translater for this query\n+     * @param query The underlying \"kernel\" query.\n      */\n     public QueryImpl(EntityManagerImpl em, RuntimeExceptionTranslator ret,\n         org.apache.openjpa.kernel.Query query) {\n@@ -246,47 +248,133 @@ private Object execute() {\n \n         validateParameters();\n \n-        // handle which types of parameters we are using, if any\n-        if (_positional != null)\n-            return _query.execute(_positional.toArray());\n-        if (_named != null)\n-            return _query.execute(_named);\n-        return _query.execute();\n-    }\n-\n-    /**\n-     * Validate that the types of the parameters are correct.\n-     */\n-    private void validateParameters() {\n-        if (_positional != null) {\n-            LinkedMap types = _query.getParameterTypes();\n-            for (int i = 0,\n-                size = Math.min(_positional.size(), types.size());\n-                i < size; i++)\n-                validateParameter(String.valueOf(i),\n-                    (Class) types.getValue(i), _positional.get(i));\n-        } else if (_named != null) {\n-            Map types = _query.getParameterTypes();\n-            for (Iterator i = _named.entrySet().iterator(); i.hasNext();) {\n-                Map.Entry entry = (Map.Entry) i.next();\n-                String name = (String) entry.getKey();\n-                validateParameter(name, (Class) types.get(name),\n-                    entry.getValue());\n-            }\n-        }\n-    }\n-\n-    private void validateParameter(String paramDesc, Class type, Object param) {\n-        // null parameters are allowed, so are not validated\n-        if (param == null || type == null)\n-            return;\n+\t\t// handle which types of parameters we are using, if any\n+\t\tif (_positional != null)\n+\t\t\treturn _query.execute(_positional);\n+\t\tif (_named != null)\n+\t\t\treturn _query.execute(_named);\n+\t\treturn _query.execute();\n+\t}\n+\t\n+\t/**\n+\t * Validate that the types of the parameters are correct.\n+\t * The idea is to catch as many validation error as possible at the facade\n+\t * layer itself.\n+\t * For native SQL queries, however, parameter validation is bypassed as\n+\t * we do not parse SQL.\n+\t * \n+\t * The expected parameters are parsed from the query and in a LinkedMap \n+\t *\tkey   : name of the parameter as declared in query\n+\t *  value : expected Class of allowed value\n+\t *  \n+\t * The bound parameters depends on positional or named parameter style\n+\t * \n+\t * TreeMap<Integer, Object> for positional parameters:\n+\t *   key   : 1-based Integer index\n+\t *   value : bound value. GAP_FILLER if the position is not set. This\n+\t *   simplifies validation at the kernel layer\n+\t *   \n+\t * Map<String, Object> for named parameters:\n+\t *   key   : parameter name\n+\t *   value : the bound value\n+\t *   \n+\t *  Validation accounts for \n+\t *    a) gaps in positional parameters\n+\t *       SELECT p FROM PObject p WHERE p.a1=?1 AND p.a3=?3\n+\t *    \n+\t *    b) repeated parameters\n+\t *       SELECT p FROM PObject p WHERE p.a1=?1 AND p.a2=?1 AND p.a3=?2\n+\t *       \n+\t *    c) parameter is bound but not declared\n+\t *    \n+\t *    d) parameter is declared but not bound\n+\t *    \n+\t *    e) parameter does not match the value type\n+\t *    \n+\t *    f) parameter is primitive type but bound to null value\n+\t */\n+\tprivate void validateParameters() {\n+\t\tif (isNative()) {\n+\t\t\tremoveGaps(_positional);\n+\t\t\treturn;\n+\t\t}\n+\t\tString query = getQueryString();\n+\t\tif (_positional != null) {\n+\t\t\tLinkedMap expected = _query.getParameterTypes();\n+\t\t\tMap<Integer, Object> actual = _positional;\n+\t\t\tfor (Object o : expected.keySet()) {\n+\t\t\t\tString position = (String) o;\n+\t\t\t\tClass expectedParamType = (Class) expected.get(position);\n+\t\t\t\ttry {\n+\t\t\t\t\tInteger.parseInt(position);\n+\t\t\t\t} catch (NumberFormatException ex) {\n+\t\t\t\t\tnewValidationException(\"param-style-mismatch\", query,\n+\t\t\t\t\t\t\texpected.asList(),\n+\t\t\t\t\t\t\tArrays.toString(actual.keySet().toArray()));\n+\t\t\t\t}\n+\t\t\t\tObject actualValue = actual.get(Integer.parseInt(position));\n+\t\t\t\tboolean valueUnspecified = (actualValue == GAP_FILLER)\n+\t\t\t\t\t\t|| (actualValue == null && (actual.size() < expected\n+\t\t\t\t\t\t\t\t.size()));\n+\t\t\t\tif (valueUnspecified) \n+\t\t\t\t\tnewValidationException(\"param-missing\", position, query,\n+\t\t\t\t\t\t\tArrays.toString(actual.keySet().toArray()));\n+\t\t\t\t\n+\t\t\t\tif (expectedParamType.isPrimitive() && actualValue == null)\n+\t\t\t\t\tnewValidationException(\"param-type-null\", \n+\t\t\t\t\t\t\tposition, query, expectedParamType.getName());\n+\t\t\t\tif (actualValue != null &&\n+\t\t\t\t   !Filters.wrap(expectedParamType).isInstance(actualValue)) \n+\t\t\t\t\tnewValidationException(\"param-type-mismatch\",\n+\t\t\t\t\t\t\tposition, query, actualValue,\n+\t\t\t\t\t\t\tactualValue.getClass().getName(),\n+\t\t\t\t\t\t\texpectedParamType.getName());\n+\t\t\t\t\n+\t\t\t}\n+\t\t\tfor (Integer position : actual.keySet()) {\n+\t\t\t\tObject actualValue = actual.get(position);\n+\t\t\t\tClass expectedParamType = (Class) expected.get(\"\" + position);\n+\t\t\t\tboolean paramExpected = expected.containsKey(\"\" + position);\n+\t\t\t\tif (actualValue == GAP_FILLER) {\n+\t\t\t\t\tif (paramExpected) {\n+\t\t\t\t\t\tnewValidationException(\"param-missing\", position, query,\n+\t\t\t\t\t\t\t\tArrays.toString(actual.keySet().toArray()));\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tif (!paramExpected)\n+\t\t\t\t\t\tnewValidationException(\"param-extra\", position, query,\n+\t\t\t\t\t\t\t\texpected.asList());\n+\t\t\t\t\tif (expectedParamType.isPrimitive() && actualValue == null)\n+\t\t\t\t\t\tnewValidationException(\"param-type-null\", \n+\t\t\t\t\t\t\t\tposition, query, expectedParamType.getName());\n+\t\t\t\t\tif (actualValue != null \n+\t\t\t\t\t && !Filters.wrap(expectedParamType).isInstance(actualValue)) \n+\t\t\t\t\t\tnewValidationException(\"param-type-mismatch\",\n+\t\t\t\t\t\t\t\tposition, query, actualValue,\n+\t\t\t\t\t\t\t\tactualValue.getClass().getName(),\n+\t\t\t\t\t\t\t\texpectedParamType.getName());\n+\t\t\t\t\t\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\tMap<Integer, Object> removeGaps(Map<Integer, Object> map) {\n+\t\tif (map == null || !map.containsValue(GAP_FILLER))\n+\t\t\treturn map;\n+\t\tList<Integer> gaps = new ArrayList<Integer>();\n+\t\tfor (Integer key : map.keySet())\n+\t\t\tif (map.get(key) == GAP_FILLER)\n+\t\t\t\tgaps.add(key);\n+\t\tfor (Integer gap : gaps) {\n+\t\t\tmap.remove(gap);\n+\t\t}\n+\t\treturn map;\n+\t}\n \n-        // check the parameter against the wrapped type\n-        if (!Filters.wrap(type).isInstance(param))\n-            throw new ArgumentException(_loc.get(\"bad-param-type\",\n-                paramDesc, param.getClass().getName(), type.getName()),\n-                null, null, false);\n-    }\n+\tvoid newValidationException(String msgKey, Object...args) {\n+\t\tthrow new ArgumentException(_loc.get(msgKey, args), null, null, false);\n+\t}\n \n     public List getResultList() {\n         _em.assertNotCloseInvoked();\n@@ -324,15 +412,15 @@ public int executeUpdate() {\n         if (_query.getOperation() == QueryOperations.OP_DELETE) {\n             // handle which types of parameters we are using, if any\n             if (_positional != null)\n-                return asInt(_query.deleteAll(_positional.toArray()));\n+                return asInt(_query.deleteAll(_positional));\n             if (_named != null)\n                 return asInt(_query.deleteAll(_named));\n             return asInt(_query.deleteAll());\n         }\n         if (_query.getOperation() == QueryOperations.OP_UPDATE) {\n             // handle which types of parameters we are using, if any\n             if (_positional != null)\n-                return asInt(_query.updateAll(_positional.toArray()));\n+                return asInt(_query.updateAll(_positional));\n             if (_named != null)\n                 return asInt(_query.updateAll(_named));\n             return asInt(_query.updateAll());\n@@ -441,40 +529,39 @@ public OpenJPAQuery setParameter(int position, Date value,\n         return setParameter(position, value);\n     }\n \n-    public OpenJPAQuery setParameter(int position, Object value) {\n-        _query.assertOpen();\n-        _em.assertNotCloseInvoked();\n-        _query.lock();\n-        try {\n-        \tif (isNative() && position < 1) {\n-        \t\tthrow new IllegalArgumentException(_loc.get(\"bad-pos-params\", \n-        \t\t      position, _query.getQueryString()).toString());\n-        \t}\n-            // not allowed to mix positional and named parameters (EDR2 3.6.4)\n-            if (_named != null)\n-                throw new InvalidStateException(_loc.get\n-                    (\"no-pos-named-params-mix\", _query.getQueryString()),\n-                    null, null, false);\n-\n-            if (position < 1)\n-                throw new InvalidStateException(_loc.get\n-                    (\"illegal-index\", position), null, null, false);\n-\n-            if (_positional == null)\n-                _positional = new ArrayList();\n-\n-            // make sure it is at least the requested size\n-            while (_positional.size() < position)\n-                _positional.add(null);\n+\tpublic OpenJPAQuery setParameter(int position, Object value) {\n+\t\t_query.assertOpen();\n+\t\t_em.assertNotCloseInvoked();\n+\t\t_query.lock();\n+\t\ttry {\n+\t\t\tif (isNative() && position < 1) {\n+\t\t\t\tthrow new IllegalArgumentException(_loc.get(\"bad-pos-params\",\n+\t\t\t\t\t\tposition, _query.getQueryString()).toString());\n+\t\t\t}\n+\t\t\t// not allowed to mix positional and named parameters (EDR2 3.6.4)\n+\t\t\tif (_named != null)\n+\t\t\t\tthrow new InvalidStateException(_loc.get(\n+\t\t\t\t\t\t\"no-pos-named-params-mix\", _query.getQueryString()),\n+\t\t\t\t\t\tnull, null, false);\n+\n+\t\t\tif (position < 1)\n+\t\t\t\tthrow new InvalidStateException(_loc.get(\"illegal-index\",\n+\t\t\t\t\t\tposition), null, null, false);\n+\n+\t\t\tif (_positional == null)\n+\t\t\t\t_positional = new TreeMap<Integer, Object>();\n+\n+\t\t\t_positional.put(position, value);\n+\t\t\tfor (int i = 1; i < position; i++)\n+\t\t\t\tif (!_positional.containsKey(i))\n+\t\t\t\t\t_positional.put(i, GAP_FILLER);\n+\n+\t\t\treturn this;\n+\t\t} finally {\n+\t\t\t_query.unlock();\n+\t\t}\n+\t}\n \n-            // note that we add it to position - 1, since setPosition\n-            // starts at 1, while List starts at 0\n-            _positional.set(position - 1, value);\n-            return this;\n-        } finally {\n-            _query.unlock();\n-        }\n-    }\n \n     public OpenJPAQuery setParameter(String name, Calendar value,\n         TemporalType t) {\n@@ -518,14 +605,21 @@ public boolean hasPositionalParameters() {\n         return _positional != null;\n     }\n \n-    public Object[] getPositionalParameters() {\n-        _query.lock();\n-        try {\n-            return (_positional == null) ? EMPTY_ARRAY : _positional.toArray();\n-        } finally {\n-            _query.unlock();\n-        }\n-    }\n+\t/**\n+\t * Gets the array of positional parameter values. A value of\n+\t * <code>GAP_FILLER</code> indicates that user has not set the\n+\t * corresponding positional parameter. A value of null implies that user has\n+\t * set the value as null.\n+\t */\n+\tpublic Object[] getPositionalParameters() {\n+\t\t_query.lock();\n+\t\ttry {\n+\t\t\treturn (_positional == null) ? EMPTY_ARRAY : _positional.values()\n+\t\t\t\t\t.toArray();\n+\t\t} finally {\n+\t\t\t_query.unlock();\n+\t\t}\n+\t}\n \n     public OpenJPAQuery setParameters(Object... params) {\n         _query.assertOpen();"},{"sha":"a4db41dbc94f982fb183b3cec539fd72f9e6f14d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=4c40adc4aabacf839c12615e9bb4ff99512bac3c","patch":"@@ -1391,9 +1391,15 @@ protected boolean startNamedQuery(Attributes attrs)\n         if (log.isTraceEnabled())\n             log.trace(_loc.get(\"parse-query\", name));\n \n-        QueryMetaData meta = getRepository().getCachedQueryMetaData(null, name);\n-        if (meta != null && log.isWarnEnabled())\n-            log.warn(_loc.get(\"override-query\", name, currentLocation()));\n+        QueryMetaData meta = getRepository().searchQueryMetaDataByName(name);\n+        if (meta != null) {\n+        \tClass defType = meta.getDefiningType();\n+            if ((defType != _cls) && log.isWarnEnabled()) {\n+            \tlog.warn(_loc.get(\"dup-query\", name, currentLocation(), defType));\n+            }\n+            pushElement(meta);\n+            return true;\n+        }\n \n         meta = getRepository().addQueryMetaData(null, name);\n         meta.setDefiningType(_cls);"},{"sha":"abe3e7538cdfd27c2250b9b853c9fe649c7769b5","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","status":"modified","additions":12,"deletions":2,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties?ref=4c40adc4aabacf839c12615e9bb4ff99512bac3c","patch":"@@ -34,7 +34,8 @@ dup-metadata: Found duplicate metadata or mapping for \"{0}\".  Ignoring.\n dup-sequence: Found duplicate generator \"{0}\" in \"{1}\".  Ignoring.\n override-sequence: Found duplicate generator \"{0}\" in \"{1}\".  Overriding \\\n \tprevious definition.\n-dup-query: Found duplicate query \"{0}\" in \"{1}\".  Ignoring.\n+dup-query: Ignoring duplicate query \"{0}\" in \"{1}\". A query with the same name \\\n+\tbeen already declared in \"{2}\".\n override-query: Found duplicate query \"{0}\" in \"{1}\".  Overriding previous \\\n \tdefinition.\n no-seq-name: The sequence generator in \"{0}\" must declare a name.\n@@ -148,4 +149,13 @@ EntityManagerFactory-cat: Persistence.Advanced\n EntityManagerFactory-displayorder: 50\n EntityManagerFactory-expert: true\n EntityManagerFactory-interface: org.apache.openjpa.persistence.EntityManagerFactoryImpl\n-\n+param-style-mismatch: Query \"{0}\" is declared with named parameters \"{1}\" but \\\n+\tactual parameters \"{2}\" are bound by position.\n+param-missing: Parameter \"{0}\" declared in \"{1}\" but is missing from the bound \\\n+\tparameters \"{2}\".\n+param-extra: Parameter \"{0}\" is bound to \"{1}\" but is missing from the \\\n+\tdeclared parameters \"{2}\".\n+param-type-mismatch: Parameter \"{0}\" declared in \"{1}\" is set to value of \\\n+\t\"{2}\" of type \"{3}\", but this parameter is bound to a field of type \"{4}\".\n+param-type-null: Parameter \"{0}\" declared in \"{1}\" is set to null, \\\n+\tbut this parameter is bound to a field of primitive type \"{2}\"."},{"sha":"6c2b3b62537c1906b6fd8af60ed2c06f18b82c29","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java","raw_url":"https://github.com/apache/openjpa/raw/4c40adc4aabacf839c12615e9bb4ff99512bac3c/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java?ref=4c40adc4aabacf839c12615e9bb4ff99512bac3c","patch":"@@ -111,6 +111,10 @@ public void testSetMaxResult() {\n         em.getTransaction().rollback();\r\n     }\r\n     \r\n+    /**\r\n+     * Retired temporarily. Most likely side-effect of eager compilation of\r\n+     * query introduced recently.\r\n+     */\r\n     public void testHint() {\r\n         List<String> targets = new ArrayList<String>();\r\n         targets.add(\"Even\");\r"}]}

