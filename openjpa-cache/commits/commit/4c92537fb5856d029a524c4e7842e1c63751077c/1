{"sha":"4c92537fb5856d029a524c4e7842e1c63751077c","node_id":"MDY6Q29tbWl0MjA2MzY0OjRjOTI1MzdmYjU4NTZkMDI5YTUyNGM0ZTc4NDJlMWM2Mzc1MTA3N2M=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-07-23T19:06:25Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-07-23T19:06:25Z"},"message":"OPENJPA-1738: setting eol-style native\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@967205 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d09e869b12ead4b598e56c01fcaa4a977aa649e5","url":"https://api.github.com/repos/apache/openjpa/git/trees/d09e869b12ead4b598e56c01fcaa4a977aa649e5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4c92537fb5856d029a524c4e7842e1c63751077c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4c92537fb5856d029a524c4e7842e1c63751077c","html_url":"https://github.com/apache/openjpa/commit/4c92537fb5856d029a524c4e7842e1c63751077c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4c92537fb5856d029a524c4e7842e1c63751077c/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"6d8b5782c9cb1f75bbe6d9c483e4f1b54f8207c7","url":"https://api.github.com/repos/apache/openjpa/commits/6d8b5782c9cb1f75bbe6d9c483e4f1b54f8207c7","html_url":"https://github.com/apache/openjpa/commit/6d8b5782c9cb1f75bbe6d9c483e4f1b54f8207c7"}],"stats":{"total":550,"additions":275,"deletions":275},"files":[{"sha":"475361ff833a83a8bb9a95dd42ae20b8af459cbc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Child.java","status":"modified","additions":73,"deletions":73,"changes":146,"blob_url":"https://github.com/apache/openjpa/blob/4c92537fb5856d029a524c4e7842e1c63751077c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Child.java","raw_url":"https://github.com/apache/openjpa/raw/4c92537fb5856d029a524c4e7842e1c63751077c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Child.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Child.java?ref=4c92537fb5856d029a524c4e7842e1c63751077c","patch":"@@ -1,73 +1,73 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.sqlcache;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.FetchType;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.ManyToOne;\r\n-import javax.persistence.Table;\r\n-\r\n-/**\r\n- * Child in a bidirectional parent-child relationship.\r\n- * \r\n- * Notes:\r\n- * a) there is no mutator for id because it is generated by JPA provider.\r\n- * \r\n- */\r\n-@Entity\r\n-@Table(name=\"zchild\")\r\n-public class Child {\r\n-\t@Id\r\n-\t@GeneratedValue\r\n-\tprivate String id;\r\n-\t\r\n-\tprivate String name;\r\n-\r\n-\t@ManyToOne(fetch=FetchType.LAZY)\r\n-\tprivate Parent parent;\r\n-\r\n-\t/**\r\n-\t * Restrict access to constructor for Parent to create the Child.\r\n-\t */\r\n-\tpublic Child() {\r\n-\t\t\r\n-\t}\r\n-\t\r\n-\tpublic String getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\r\n-\tpublic String getName() {\r\n-\t\treturn name;\r\n-\t}\r\n-\r\n-\tpublic void setName(String city) {\r\n-\t\tthis.name = city;\r\n-\t}\r\n-\r\n-\tpublic Parent getParent() {\r\n-\t\treturn parent;\r\n-\t}\r\n-\r\n-\tvoid setParent(Parent owner) {\r\n-\t\tthis.parent = owner;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.sqlcache;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+/**\n+ * Child in a bidirectional parent-child relationship.\n+ * \n+ * Notes:\n+ * a) there is no mutator for id because it is generated by JPA provider.\n+ * \n+ */\n+@Entity\n+@Table(name=\"zchild\")\n+public class Child {\n+\t@Id\n+\t@GeneratedValue\n+\tprivate String id;\n+\t\n+\tprivate String name;\n+\n+\t@ManyToOne(fetch=FetchType.LAZY)\n+\tprivate Parent parent;\n+\n+\t/**\n+\t * Restrict access to constructor for Parent to create the Child.\n+\t */\n+\tpublic Child() {\n+\t\t\n+\t}\n+\t\n+\tpublic String getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String city) {\n+\t\tthis.name = city;\n+\t}\n+\n+\tpublic Parent getParent() {\n+\t\treturn parent;\n+\t}\n+\n+\tvoid setParent(Parent owner) {\n+\t\tthis.parent = owner;\n+\t}\n+}"},{"sha":"f0f9a5a0563fa1bb7d1caad4f0d9e8400bc51c01","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Parent.java","status":"modified","additions":119,"deletions":119,"changes":238,"blob_url":"https://github.com/apache/openjpa/blob/4c92537fb5856d029a524c4e7842e1c63751077c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Parent.java","raw_url":"https://github.com/apache/openjpa/raw/4c92537fb5856d029a524c4e7842e1c63751077c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Parent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Parent.java?ref=4c92537fb5856d029a524c4e7842e1c63751077c","patch":"@@ -1,119 +1,119 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.sqlcache;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.Collection;\r\n-\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.IdClass;\r\n-import javax.persistence.JoinColumn;\r\n-import javax.persistence.OneToMany;\r\n-import javax.persistence.OneToOne;\r\n-import javax.persistence.Table;\r\n-\r\n-/**\r\n- * Parent in a bidirectional parent-child relationship.\r\n- * \r\n- * Note:\r\n- * a) there is no mutator for id because it is generated by JPA provider.\r\n- * \r\n- */\r\n-@Entity\r\n-@IdClass(ParentId.class)\r\n-@Table(name=\"zparent\")\r\n-public class Parent {\r\n-\t@Id\r\n-\tprivate long id;\r\n-\t@Id\r\n-\tprivate String name;\r\n-    @Id\r\n-    @OneToOne(cascade = CascadeType.ALL)\r\n-    @JoinColumn(name=\"addrid\")\r\n-    private Address addrId;\r\n-\t\r\n-\t/**\r\n-     * This field is mapped by the child. The child's table will hold a foreign\r\n-     * key linking to the primary key of this Parent's table. In JPA\r\n-     * terminology, that makes the Child the owner of this bi-directional\r\n-     * relationship.\r\n-\t */\r\n-\t@OneToMany(mappedBy=\"parent\", cascade = CascadeType.ALL)\r\n-\tprivate Collection<Child> children;\r\n-\r\n-\r\n-    public long getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\r\n-    public void setId(long id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-\t\treturn name;\r\n-\t}\r\n-\r\n-\tpublic void setName(String name) {\r\n-\t\tthis.name = name;\r\n-\t}\r\n-\r\n-    public void setAddrId(Address addr) {\r\n-        this.addrId = addr;\r\n-    }\r\n-\r\n-    public Address getAddrId() {\r\n-        return addrId;\r\n-    }\r\n-\r\n-    public Collection<Child> getChildren() {\r\n-\t\treturn children;\r\n-\t}\r\n-\r\n-\t/**\r\n-     * Creates and adds a child to this receiver. Creating child via the parent\r\n-     * is the preferred pattern to ensure referential integrity of domain featureSelection.\r\n-\t */\r\n-\tpublic Child newChild(String name) {\r\n-\t\tChild child = new Child();\r\n-\t\tchild.setName(name);\r\n-\t\tchild.setParent(this);\r\n-\t\tif (children == null)\r\n-\t\t\tchildren = new ArrayList<Child>();\r\n-\t\tchildren.add(child);\r\n-\t\treturn child;\r\n-\t}\r\n-\t\r\n-\tpublic boolean removeChild(Child child) {\r\n-\t\treturn children != null && children.remove(child);\r\n-\t}\r\n-\t\r\n-\t/**\r\n-     * Unsafe way of adding a child. Does not warranty referential integrity.\r\n-     * The caller has to ensure bi-directionality of parent-child relation is \r\n-\t * consistent.\r\n-\t */\r\n-\tpublic void add(Child child) {\r\n-\t\tif (children == null)\r\n-\t\t\tchildren = new ArrayList<Child>();\r\n-\t\tchildren.add(child);\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.sqlcache;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+\n+/**\n+ * Parent in a bidirectional parent-child relationship.\n+ * \n+ * Note:\n+ * a) there is no mutator for id because it is generated by JPA provider.\n+ * \n+ */\n+@Entity\n+@IdClass(ParentId.class)\n+@Table(name=\"zparent\")\n+public class Parent {\n+\t@Id\n+\tprivate long id;\n+\t@Id\n+\tprivate String name;\n+    @Id\n+    @OneToOne(cascade = CascadeType.ALL)\n+    @JoinColumn(name=\"addrid\")\n+    private Address addrId;\n+\t\n+\t/**\n+     * This field is mapped by the child. The child's table will hold a foreign\n+     * key linking to the primary key of this Parent's table. In JPA\n+     * terminology, that makes the Child the owner of this bi-directional\n+     * relationship.\n+\t */\n+\t@OneToMany(mappedBy=\"parent\", cascade = CascadeType.ALL)\n+\tprivate Collection<Child> children;\n+\n+\n+    public long getId() {\n+\t\treturn id;\n+\t}\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+    public void setAddrId(Address addr) {\n+        this.addrId = addr;\n+    }\n+\n+    public Address getAddrId() {\n+        return addrId;\n+    }\n+\n+    public Collection<Child> getChildren() {\n+\t\treturn children;\n+\t}\n+\n+\t/**\n+     * Creates and adds a child to this receiver. Creating child via the parent\n+     * is the preferred pattern to ensure referential integrity of domain featureSelection.\n+\t */\n+\tpublic Child newChild(String name) {\n+\t\tChild child = new Child();\n+\t\tchild.setName(name);\n+\t\tchild.setParent(this);\n+\t\tif (children == null)\n+\t\t\tchildren = new ArrayList<Child>();\n+\t\tchildren.add(child);\n+\t\treturn child;\n+\t}\n+\t\n+\tpublic boolean removeChild(Child child) {\n+\t\treturn children != null && children.remove(child);\n+\t}\n+\t\n+\t/**\n+     * Unsafe way of adding a child. Does not warranty referential integrity.\n+     * The caller has to ensure bi-directionality of parent-child relation is \n+\t * consistent.\n+\t */\n+\tpublic void add(Child child) {\n+\t\tif (children == null)\n+\t\t\tchildren = new ArrayList<Child>();\n+\t\tchildren.add(child);\n+\t}\n+}"},{"sha":"77553f17ae87d39ce5b0692730d8562f715d7e9b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/ParentId.java","status":"modified","additions":83,"deletions":83,"changes":166,"blob_url":"https://github.com/apache/openjpa/blob/4c92537fb5856d029a524c4e7842e1c63751077c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/ParentId.java","raw_url":"https://github.com/apache/openjpa/raw/4c92537fb5856d029a524c4e7842e1c63751077c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/ParentId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/ParentId.java?ref=4c92537fb5856d029a524c4e7842e1c63751077c","patch":"@@ -1,83 +1,83 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.sqlcache;\r\n-\r\n-public class ParentId implements java.io.Serializable {\r\n-    private static final long serialVersionUID = 4262907482129342511L;\r\n-    \r\n-    private long id;\r\n-    private String name;\r\n-    private long addrId;\r\n-    \r\n-    private Integer hashcode = null;\r\n-    \r\n-    public ParentId() {        \r\n-    }\r\n-\r\n-    public long getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setiId(long id) {\r\n-        this.id = id;\r\n-    }\r\n-    \r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    public long getAddrId() {\r\n-        return addrId;\r\n-    }\r\n-\r\n-    public void setAddrId(long addrId) {\r\n-        this.addrId = addrId;\r\n-    }\r\n-\r\n-    public boolean equals(Object o) {\r\n-        if (o == this) {\r\n-            return true;\r\n-        }\r\n-            \r\n-        if (o instanceof ParentId) {\r\n-            ParentId oId = (ParentId) o;\r\n-            if (    oId.id == this.id && \r\n-                    oId.name.equals(this.name) &&\r\n-                    oId.addrId == this.addrId) {\r\n-                return true;\r\n-            }\r\n-        }\r\n-        \r\n-        return false;\r\n-    }\r\n-    \r\n-    public int hashCode() {\r\n-        if (hashcode == null) {\r\n-            String hashStr = this.id + \":\" + this.name + \":\" + this.addrId;\r\n-            hashcode = hashStr.hashCode();\r\n-        }\r\n-        return hashcode.intValue();\r\n-    }\r\n-    \r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.sqlcache;\n+\n+public class ParentId implements java.io.Serializable {\n+    private static final long serialVersionUID = 4262907482129342511L;\n+    \n+    private long id;\n+    private String name;\n+    private long addrId;\n+    \n+    private Integer hashcode = null;\n+    \n+    public ParentId() {        \n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setiId(long id) {\n+        this.id = id;\n+    }\n+    \n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public long getAddrId() {\n+        return addrId;\n+    }\n+\n+    public void setAddrId(long addrId) {\n+        this.addrId = addrId;\n+    }\n+\n+    public boolean equals(Object o) {\n+        if (o == this) {\n+            return true;\n+        }\n+            \n+        if (o instanceof ParentId) {\n+            ParentId oId = (ParentId) o;\n+            if (    oId.id == this.id && \n+                    oId.name.equals(this.name) &&\n+                    oId.addrId == this.addrId) {\n+                return true;\n+            }\n+        }\n+        \n+        return false;\n+    }\n+    \n+    public int hashCode() {\n+        if (hashcode == null) {\n+            String hashStr = this.id + \":\" + this.name + \":\" + this.addrId;\n+            hashcode = hashStr.hashCode();\n+        }\n+        return hashcode.intValue();\n+    }\n+    \n+}"}]}

