{"sha":"4d1b86e86040a38395e3bcb09fcf059ef161f05f","node_id":"MDY6Q29tbWl0MjA2MzY0OjRkMWI4NmU4NjA0MGEzODM5NWUzYmNiMDlmY2YwNTllZjE2MWYwNWY=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2009-04-18T12:26:26Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2009-04-18T12:26:26Z"},"message":"OPENJPA-933: Database version detection in MySQLDictionary is not reliable\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@766310 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a00093d1a92c71862d689f5d7536cd38699fee91","url":"https://api.github.com/repos/apache/openjpa/git/trees/a00093d1a92c71862d689f5d7536cd38699fee91"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4d1b86e86040a38395e3bcb09fcf059ef161f05f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4d1b86e86040a38395e3bcb09fcf059ef161f05f","html_url":"https://github.com/apache/openjpa/commit/4d1b86e86040a38395e3bcb09fcf059ef161f05f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4d1b86e86040a38395e3bcb09fcf059ef161f05f/comments","author":null,"committer":null,"parents":[{"sha":"8bbf14978179d8b57542b5c22a4e7100f9388941","url":"https://api.github.com/repos/apache/openjpa/commits/8bbf14978179d8b57542b5c22a4e7100f9388941","html_url":"https://github.com/apache/openjpa/commit/8bbf14978179d8b57542b5c22a4e7100f9388941"}],"stats":{"total":54,"additions":27,"deletions":27},"files":[{"sha":"5ff0aa6d9225cffaed40584ab5fe044a5b01e1d9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","status":"modified","additions":27,"deletions":27,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/4d1b86e86040a38395e3bcb09fcf059ef161f05f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/4d1b86e86040a38395e3bcb09fcf059ef161f05f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java?ref=4d1b86e86040a38395e3bcb09fcf059ef161f05f","patch":"@@ -119,31 +119,34 @@ public void connectedConfiguration(Connection conn) throws SQLException {\n         super.connectedConfiguration(conn);\n \n         DatabaseMetaData metaData = conn.getMetaData();\n-        // The product version looks like 4.1.3-nt\n-        String productVersion = metaData.getDatabaseProductVersion();\n-        // The driver version looks like mysql-connector-java-3.1.11 (...)\n-        String driverVersion = metaData.getDriverVersion();\n-\n-        try {\n-            int[] versions = getMajorMinorVersions(productVersion);\n-            int maj = versions[0];\n-            int min = versions[1];\n-            if (maj < 4 || (maj == 4 && min < 1)) {\n-                supportsSubselect = false;\n-                allowsAliasInBulkClause = false;\n+        int maj = 0;\n+        int min = 0;\n+        if (isJDBC3) {\n+            maj = metaData.getDatabaseMajorVersion();\n+            min = metaData.getDatabaseMinorVersion();\n+        } else {\n+            try {\n+                // The product version looks like 4.1.3-nt or 5.1.30\n+                String productVersion = metaData.getDatabaseProductVersion();\n+                int[] versions = getMajorMinorVersions(productVersion);\n+                maj = versions[0];\n+                min = versions[1];\n+            } catch (IllegalArgumentException e) {\n+                // we don't understand the version format.\n+                // That is ok. We just take the default values.\n+                if (log.isWarnEnabled())\n+                    log.warn(e.toString(), e);\n             }\n-            if (maj > 5 || (maj == 5 && min >= 1))\n-                supportsXMLColumn = true;\n-\n-            versions = getMajorMinorVersions(driverVersion);\n-            maj = versions[0];\n-            if (maj < 5) {\n-                driverDeserializesBlobs = true;\n-            }\n-        } catch (IllegalArgumentException e) {\n-            // we don't understand the version format.\n-            // That is ok. We just take the default values.\n         }\n+        if (maj < 4 || (maj == 4 && min < 1)) {\n+            supportsSubselect = false;\n+            allowsAliasInBulkClause = false;\n+        }\n+        if (maj > 5 || (maj == 5 && min >= 1))\n+            supportsXMLColumn = true;\n+\n+        if (metaData.getDriverMajorVersion() < 5)\n+            driverDeserializesBlobs = true;\n     }\n \n     public Connection decorate(Connection conn)  throws SQLException {\n@@ -157,7 +160,6 @@ public Connection decorate(Connection conn)  throws SQLException {\n     private static int[] getMajorMinorVersions(String versionStr)\n         throws IllegalArgumentException {\n         int beginIndex = 0;\n-        int endIndex = 0;\n \n         versionStr = versionStr.trim();\n         char[] charArr = versionStr.toCharArray();\n@@ -168,16 +170,14 @@ public Connection decorate(Connection conn)  throws SQLException {\n             }\n         }\n \n+        int endIndex = charArr.length;\n         for (int i = beginIndex+1; i < charArr.length; i++) {\n             if (charArr[i] != '.' && !Character.isDigit(charArr[i])) {\n                 endIndex = i;\n                 break;\n             }\n         }\n \n-        if (endIndex < beginIndex)\n-            throw new IllegalArgumentException();\n-\n         String[] arr = versionStr.substring(beginIndex, endIndex).split(\"\\\\.\");\n         if (arr.length < 2)\n             throw new IllegalArgumentException();"}]}

