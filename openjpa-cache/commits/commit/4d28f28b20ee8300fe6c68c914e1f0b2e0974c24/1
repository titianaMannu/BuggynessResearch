{"sha":"4d28f28b20ee8300fe6c68c914e1f0b2e0974c24","node_id":"MDY6Q29tbWl0MjA2MzY0OjRkMjhmMjhiMjBlZTgzMDBmZTZjNjhjOTE0ZTFmMGIyZTA5NzRjMjQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-02-26T21:17:13Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-02-26T21:17:13Z"},"message":"OPENJPA-825: ExecutorService is not configurable anymore with new threading strategy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@748308 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"76d3f4966ff12df26f920ffe77a4e44f378fb414","url":"https://api.github.com/repos/apache/openjpa/git/trees/76d3f4966ff12df26f920ffe77a4e44f378fb414"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4d28f28b20ee8300fe6c68c914e1f0b2e0974c24","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4d28f28b20ee8300fe6c68c914e1f0b2e0974c24","html_url":"https://github.com/apache/openjpa/commit/4d28f28b20ee8300fe6c68c914e1f0b2e0974c24","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4d28f28b20ee8300fe6c68c914e1f0b2e0974c24/comments","author":null,"committer":null,"parents":[{"sha":"d22fc6ab7c1a6827f1074d5af43a2e9faec9b2d9","url":"https://api.github.com/repos/apache/openjpa/commits/d22fc6ab7c1a6827f1074d5af43a2e9faec9b2d9","html_url":"https://github.com/apache/openjpa/commit/d22fc6ab7c1a6827f1074d5af43a2e9faec9b2d9"}],"stats":{"total":108,"additions":0,"deletions":108},"files":[{"sha":"a32a9cffe6ec8c769e380e0e4fa4966bbee7ea79","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/ExecutorServiceValue.java","status":"removed","additions":0,"deletions":102,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/d22fc6ab7c1a6827f1074d5af43a2e9faec9b2d9/openjpa-slice/src/main/java/org/apache/openjpa/slice/ExecutorServiceValue.java","raw_url":"https://github.com/apache/openjpa/raw/d22fc6ab7c1a6827f1074d5af43a2e9faec9b2d9/openjpa-slice/src/main/java/org/apache/openjpa/slice/ExecutorServiceValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/ExecutorServiceValue.java?ref=d22fc6ab7c1a6827f1074d5af43a2e9faec9b2d9","patch":"@@ -1,102 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.slice;\r\n-\r\n-import java.util.Arrays;\r\n-import java.util.List;\r\n-import java.util.concurrent.ExecutorService;\r\n-import java.util.concurrent.Executors;\r\n-import java.util.concurrent.PriorityBlockingQueue;\r\n-import java.util.concurrent.SynchronousQueue;\r\n-import java.util.concurrent.ThreadFactory;\r\n-import java.util.concurrent.ThreadPoolExecutor;\r\n-import java.util.concurrent.TimeUnit;\r\n-\r\n-import org.apache.openjpa.lib.conf.Configuration;\r\n-import org.apache.openjpa.lib.conf.Configurations;\r\n-import org.apache.openjpa.lib.conf.PluginValue;\r\n-import org.apache.openjpa.lib.util.Localizer;\r\n-import org.apache.openjpa.lib.util.Options;\r\n-import org.apache.openjpa.util.UserException;\r\n-\r\n-/**\r\n- * Value type used to represent a {@link ExecutorService}.\r\n- * This value controls the thread pool parameters. The thread pool is used\r\n- * to execute the queries.\r\n- * \r\n- * @author Pinaki Poddar\r\n- * @nojavadoc\r\n- */\r\n-\r\n-public class ExecutorServiceValue extends PluginValue {\r\n-    private static List<String> known =\r\n-            Arrays.asList(new String[] { \"cached\", \"fixed\" });\r\n-\r\n-    private static Localizer _loc =\r\n-            Localizer.forPackage(ExecutorServiceValue.class);\r\n-\r\n-    public ExecutorServiceValue() {\r\n-        super(\"ThreadingPolicy\", true);\r\n-        setDefault(\"cached\");\r\n-    }\r\n-\r\n-    public void setProperties(String props) {\r\n-        super.setProperties(props);\r\n-    }\r\n-\r\n-    /**\r\n-     * Configures a cached or fixed thread pool.\r\n-     * The factory always produces SliceThread which uses special locking.\r\n-     * \r\n-     */\r\n-    @Override\r\n-    public Object instantiate(Class type, Configuration conf, boolean fatal) {\r\n-        Object obj = null;\r\n-        int defaultSize = 10;\r\n-        String cls = getClassName();\r\n-        if (!known.contains(cls))\r\n-            cls = \"cached\";\r\n-\r\n-        Options opts = Configurations.parseProperties(getProperties());\r\n-\r\n-        ThreadFactory factory = new SliceThreadFactory();\r\n-        if (\"cached\".equals(cls)) {\r\n-            obj = Executors.newCachedThreadPool(factory);\r\n-        } else if (\"fixed\".equals(cls)) {\r\n-            long keepAliveTime = 60L;\r\n-            if (opts.containsKey(\"KeepAliveTime\")) {\r\n-                keepAliveTime = opts.getLongProperty(\"KeepAliveTime\");\r\n-                opts.removeLongProperty(\"KeepAliveTime\");\r\n-            }\r\n-            obj = new ThreadPoolExecutor(defaultSize, defaultSize,\r\n-                            keepAliveTime, TimeUnit.SECONDS,\r\n-                            new SynchronousQueue<Runnable>(), factory);\r\n-\r\n-            Configurations.configureInstance(obj, conf, opts, getProperty());\r\n-        }\r\n-        set(obj, true);\r\n-        return obj;\r\n-    }\r\n-    \r\n-    private static class SliceThreadFactory implements ThreadFactory {\r\n-        public Thread newThread(Runnable r) {\r\n-            return new SliceThread(Thread.currentThread(), r);\r\n-        }\r\n-    }\r\n-}\r"},{"sha":"957d8114674378d6f6647b32987cf9899cd445ee","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/4d28f28b20ee8300fe6c68c914e1f0b2e0974c24/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4d28f28b20ee8300fe6c68c914e1f0b2e0974c24/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java?ref=4d28f28b20ee8300fe6c68c914e1f0b2e0974c24","patch":"@@ -25,7 +25,6 @@\n import java.util.List;\r\n import java.util.Map;\r\n import java.util.Properties;\r\n-import java.util.concurrent.ExecutorService;\r\n \r\n import javax.sql.DataSource;\r\n import javax.sql.XADataSource;\r\n@@ -47,7 +46,6 @@\n import org.apache.openjpa.lib.util.Localizer;\r\n import org.apache.openjpa.slice.DistributedBrokerImpl;\r\n import org.apache.openjpa.slice.DistributionPolicy;\r\n-import org.apache.openjpa.slice.ExecutorServiceValue;\r\n import org.apache.openjpa.slice.ProductDerivation;\r\n import org.apache.openjpa.slice.ReplicationPolicy;\r\n import org.apache.openjpa.slice.Slice;\r\n@@ -73,7 +71,6 @@\n     protected BooleanValue lenientPlugin;\r\n     protected StringValue masterPlugin;\r\n     protected StringListValue namesPlugin;\r\n-    protected ExecutorServiceValue executorServicePlugin;\r\n     public PluginValue distributionPolicyPlugin;\r\n     public PluginValue replicationPolicyPlugin;\r\n \r\n@@ -116,9 +113,6 @@ public DistributedJDBCConfigurationImpl(ConfigurationProvider cp) {\n         \r\n         namesPlugin = addStringList(\"Names\");\r\n         \r\n-        executorServicePlugin = new ExecutorServiceValue();\r\n-        addValue(executorServicePlugin);\r\n-        \r\n         setSlices(p);\r\n     }\r\n     \r"}]}

