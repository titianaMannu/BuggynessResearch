{"sha":"4d336b2a2cf354fecce2f8931ca1f6702efbe1d5","node_id":"MDY6Q29tbWl0MjA2MzY0OjRkMzM2YjJhMmNmMzU0ZmVjY2UyZjg5MzFjYTFmNjcwMmVmYmUxZDU=","commit":{"author":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-02-01T17:53:48Z"},"committer":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-02-01T17:53:48Z"},"message":"Rolledback change to AbstractBrokerFactory pending resolution of issues arising from r616972.  Modified TestSerializedFactory to expect failure: it expects created EntityManagerFactory objects to be instances of Serialization, but to not be useful after serialization.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@617577 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"620001ea52be5782e6bd1c8026facc443eab2a8e","url":"https://api.github.com/repos/apache/openjpa/git/trees/620001ea52be5782e6bd1c8026facc443eab2a8e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4d336b2a2cf354fecce2f8931ca1f6702efbe1d5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4d336b2a2cf354fecce2f8931ca1f6702efbe1d5","html_url":"https://github.com/apache/openjpa/commit/4d336b2a2cf354fecce2f8931ca1f6702efbe1d5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4d336b2a2cf354fecce2f8931ca1f6702efbe1d5/comments","author":null,"committer":null,"parents":[{"sha":"a747db9443a0408c58221d36ce9c6103e8010be2","url":"https://api.github.com/repos/apache/openjpa/commits/a747db9443a0408c58221d36ce9c6103e8010be2","html_url":"https://github.com/apache/openjpa/commit/a747db9443a0408c58221d36ce9c6103e8010be2"}],"stats":{"total":73,"additions":43,"deletions":30},"files":[{"sha":"31472930d67f3fa2cd976062ed7eb20ac428a4d6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":4,"deletions":14,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/4d336b2a2cf354fecce2f8931ca1f6702efbe1d5/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/4d336b2a2cf354fecce2f8931ca1f6702efbe1d5/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=4d336b2a2cf354fecce2f8931ca1f6702efbe1d5","patch":"@@ -147,7 +147,8 @@ public static AbstractBrokerFactory getPooledFactoryForKey(Object key) {\n      */\n     protected AbstractBrokerFactory(OpenJPAConfiguration config) {\n         _conf = config;\n-        getPcClassLoaders();\n+        _pcClassLoaders = new ConcurrentReferenceHashSet(\n+            ConcurrentReferenceHashSet.WEAK);\n     }\n \n     /**\n@@ -286,13 +287,13 @@ private void loadPersistentTypes(ClassLoader envLoader) {\n                     if (needsSub(cls))\n                         toRedefine.add(cls);\n                 }\n-                getPcClassLoaders().add(loader);\n+                _pcClassLoaders.add(loader);\n                 _pcClassNames = c;\n             }\n             _persistentTypesLoaded = true;\n         } else {\n             // reload with this loader\n-            if (getPcClassLoaders().add(loader)) {\n+            if (_pcClassLoaders.add(loader)) {\n                 for (Iterator itr = _pcClassNames.iterator(); itr.hasNext();) {\n                     try {\n                         Class cls =\n@@ -817,15 +818,4 @@ public void afterCompletion(int status) {\n             _transactional.remove (_trans);\n \t\t}\n \t}\n-   \n-   /**\n-    * Method insures that deserialized EMF has this reference re-instantiated\n-    */\n-   private Collection getPcClassLoaders() {\n-      if (_pcClassLoaders == null)\n-        _pcClassLoaders = new ConcurrentReferenceHashSet(\n-            ConcurrentReferenceHashSet.WEAK);\n-         \n-      return _pcClassLoaders;\n-   }\n }"},{"sha":"9b3cb26a04e2ebd100dab22625314ec5b83c3bb3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestSerializedFactory.java","status":"modified","additions":39,"deletions":16,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/4d336b2a2cf354fecce2f8931ca1f6702efbe1d5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestSerializedFactory.java","raw_url":"https://github.com/apache/openjpa/raw/4d336b2a2cf354fecce2f8931ca1f6702efbe1d5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestSerializedFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestSerializedFactory.java?ref=4d336b2a2cf354fecce2f8931ca1f6702efbe1d5","patch":"@@ -40,31 +40,54 @@ public void setUp() {\n         setUp(AllFieldTypes.class);\n     }\n \n+    /**\n+     * This test case assumes that OpenJPA creates EMF objects that are \n+     * instances of the Serializable interface.  If this changes, the test\n+     * logic has to change.\n+     * <p>\n+     * Currently, although the EMF objects implement Serializable, they\n+     * do not successfully pass through serialization.  Once they do \n+     * (assuming they should), the catch block in the test and the\n+     * fail method invocation can be removed.\n+     */\n     public void testSerializedEntityManagerFactory() throws Exception {\n+        // correct the logic if and when EMFs do not implement \n+        // the serializable interface\n+        assertTrue(\"EntityManagerFactory object is not serializable\", \n+                emf instanceof Serializable);\n+\n         // serialize and deserialize the entity manager factory\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ObjectOutputStream oos = new ObjectOutputStream(baos);\n         oos.writeObject(emf);\n         EntityManagerFactory emf2 = \n             (EntityManagerFactory) new ObjectInputStream(\n             new ByteArrayInputStream(baos.toByteArray())).readObject();\n-            \n-        // use the deserialized entity manager factory\n-        assertTrue(\"The deserialized entity manager factory is not open\",\n-            emf2.isOpen());\n-        EntityManager em = emf2.createEntityManager();\n-        assertTrue(\"The newly created entity manager is not open\", em.isOpen());\n \n-        // exercise the entity manager produced from the deserialized EMF\n-        em.getTransaction().begin();\n-        em.persist(new AllFieldTypes());\n-        em.getTransaction().commit();\n-        \n-        // close the extra resources\n-        em.close();\n-        assertFalse(\"The entity manager is not closed\", em.isOpen());\n-        emf2.close();\n-        assertFalse(\"The entity manager factory is not closed\", emf2.isOpen());\n+        try {\n+            // use the deserialized entity manager factory\n+            assertTrue(\"The deserialized entity manager factory is not open\",\n+                emf2.isOpen());\n+            EntityManager em = emf2.createEntityManager();\n+            assertTrue(\"The newly created entity manager is not open\", em.isOpen());\n+    \n+            // exercise the entity manager produced from the deserialized EMF\n+            em.getTransaction().begin();\n+            em.persist(new AllFieldTypes());\n+            em.getTransaction().commit();\n+            \n+            // close the extra resources\n+            em.close();\n+            assertFalse(\"The entity manager is not closed\", em.isOpen());\n+            emf2.close();\n+            assertFalse(\"The entity manager factory is not closed\", emf2.isOpen());\n+            \n+            // Correct the logic when EMF's are supposed to serialize\n+            fail(\"This test is expected to fail until the issue of serializing an EMF is settled\");\n+         }\n+         catch (Exception e) {\n+            // failure is currently expected\n+         }\n     }\n     \n     public static void main(String[] args) {"}]}

