{"sha":"4dae2231cc3253d8d98590476d839500268584f8","node_id":"MDY6Q29tbWl0MjA2MzY0OjRkYWUyMjMxY2MzMjUzZDhkOTg1OTA0NzZkODM5NTAwMjY4NTg0Zjg=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-31T16:53:43Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-31T16:53:43Z"},"message":"OPENJPA-339.  Committing Albert's Java 2 Security changes.  Hopefully, this is the last batch of changes...  :-)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@571522 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a1ad5088332457307f798a68fc598974542bc546","url":"https://api.github.com/repos/apache/openjpa/git/trees/a1ad5088332457307f798a68fc598974542bc546"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4dae2231cc3253d8d98590476d839500268584f8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4dae2231cc3253d8d98590476d839500268584f8","html_url":"https://github.com/apache/openjpa/commit/4dae2231cc3253d8d98590476d839500268584f8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4dae2231cc3253d8d98590476d839500268584f8/comments","author":null,"committer":null,"parents":[{"sha":"5affd1274fc1e236e34612d9164a4a916c71f131","url":"https://api.github.com/repos/apache/openjpa/commits/5affd1274fc1e236e34612d9164a4a916c71f131","html_url":"https://github.com/apache/openjpa/commit/5affd1274fc1e236e34612d9164a4a916c71f131"}],"stats":{"total":47,"additions":41,"deletions":6},"files":[{"sha":"316c085f451d4af0c2e5ab597ba214a9a0af35fa","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/4dae2231cc3253d8d98590476d839500268584f8/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java","raw_url":"https://github.com/apache/openjpa/raw/4dae2231cc3253d8d98590476d839500268584f8/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java?ref=4dae2231cc3253d8d98590476d839500268584f8","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.datacache;\n \n+import java.security.AccessController;\n import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n import java.util.Calendar;\n@@ -28,6 +29,7 @@\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap;\n import org.apache.openjpa.util.InvalidStateException;\n@@ -97,7 +99,9 @@ public synchronized void scheduleEviction(DataCache cache, String times) {\n         _caches.put(cache, schedule);\n         _stop = false;\n         if (_thread == null) {\n-            _thread = new Thread(this, _loc.get(\"scheduler-name\").getMessage());\n+            _thread = (Thread) AccessController\n+                .doPrivileged(J2DoPrivHelper.newThreadAction(this, _loc.get(\n+                    \"scheduler-name\").getMessage()));\n             _thread.setDaemon(true);\n             _thread.start();\n             if (_log.isTraceEnabled())"},{"sha":"f8325dfef02cc3e389dcfdb411045f895807601b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","status":"modified","additions":18,"deletions":5,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/4dae2231cc3253d8d98590476d839500268584f8/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4dae2231cc3253d8d98590476d839500268584f8/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java?ref=4dae2231cc3253d8d98590476d839500268584f8","patch":"@@ -26,6 +26,7 @@\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.security.PrivilegedActionException;\n import java.sql.Timestamp;\n import java.util.ArrayList;\n@@ -438,7 +439,7 @@ private ProxyCalendar getFactoryProxyCalendar(Class type) {\n      * Return the cached factory proxy for the given bean type.\n      */\n     private ProxyBean getFactoryProxyBean(Object orig) {\n-        Class type = orig.getClass();\n+        final Class type = orig.getClass();\n         if (isUnproxyable(type))\n             return null;\n \n@@ -449,7 +450,12 @@ private ProxyBean getFactoryProxyBean(Object orig) {\n                 ProxyBean.class);\n             Class pcls = loadBuildTimeProxy(type, l);\n             if (pcls == null) {\n-                BCClass bc = generateProxyBeanBytecode(type, true);\n+                BCClass bc = (BCClass) AccessController\n+                    .doPrivileged(new PrivilegedAction() {\n+                        public Object run() {\n+                            return generateProxyBeanBytecode(type, true);\n+                        }\n+                    });\n                 if (bc != null)\n                     pcls = GeneratedClasses.loadBCClass(bc, l);\n             }\n@@ -1601,7 +1607,7 @@ public static void main(String[] args)\n             })); \n         }\n \n-        ProxyManagerImpl mgr = new ProxyManagerImpl();\n+        final ProxyManagerImpl mgr = new ProxyManagerImpl();\n         Class cls;\n         BCClass bc;\n         for (int i = 0; i < types.size(); i++) {\n@@ -1623,8 +1629,15 @@ else if (Date.class.isAssignableFrom(cls))\n                 bc = mgr.generateProxyDateBytecode(cls, false);\n             else if (Calendar.class.isAssignableFrom(cls))\n                 bc = mgr.generateProxyCalendarBytecode(cls, false);\n-            else\n-                bc = mgr.generateProxyBeanBytecode(cls, false);\n+            else {\n+                final Class fCls = cls;\n+                bc = (BCClass) AccessController\n+                    .doPrivileged(new PrivilegedAction() {\n+                        public Object run() {\n+                            return mgr.generateProxyBeanBytecode(fCls, false);\n+                        }\n+                    });\n+            }\n \n             System.out.println(bc.getName());\n             bc.write(new File(dir, bc.getClassName() + \".class\"));"},{"sha":"f3269e11cc64cedad038fe01c549e182f37800e9","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/4dae2231cc3253d8d98590476d839500268584f8/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","raw_url":"https://github.com/apache/openjpa/raw/4dae2231cc3253d8d98590476d839500268584f8/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java?ref=4dae2231cc3253d8d98590476d839500268584f8","patch":"@@ -81,6 +81,7 @@\n  * <li>Socket.accept\n  * <li>System.getProperty\n  * <li>Thread.getContextClassLoader\n+ * <li>Thread new\n  * <li>TemporaryClassLoader new\n  * <li>URL.openStream\n  * <li>URLConnection.getContent\n@@ -788,6 +789,23 @@ public Object run() {\n         };\n     }\n \n+    /**\n+     * Return a PrivilegedAction object for new Thread().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"modifyThreadGroup\";'\n+     * \n+     * @return Thread\n+     */\n+    public static final PrivilegedAction newThreadAction(\n+        final Runnable target, final String name) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return new Thread(target, name);\n+            }\n+        };\n+    }\n+\n     /**\n      * Return a PrivilegedExceptionAction object for url.openStream().\n      * "}]}

