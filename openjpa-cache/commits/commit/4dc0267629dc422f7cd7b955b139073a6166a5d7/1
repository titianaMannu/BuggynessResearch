{"sha":"4dc0267629dc422f7cd7b955b139073a6166a5d7","node_id":"MDY6Q29tbWl0MjA2MzY0OjRkYzAyNjc2MjlkYzQyMmY3Y2Q3Yjk1NWIxMzkwNzNhNjE2NmE1ZDc=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-03-05T19:35:53Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-03-05T19:35:53Z"},"message":"OPENJPA-1551: \nStoring connectionFactoryName in BrokerImpl - this factory will be used at JDBCStore creation time to override the value from the configuration\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@919557 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6df79339aef41c712d04ff6a2b9e8f2f66409852","url":"https://api.github.com/repos/apache/openjpa/git/trees/6df79339aef41c712d04ff6a2b9e8f2f66409852"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4dc0267629dc422f7cd7b955b139073a6166a5d7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4dc0267629dc422f7cd7b955b139073a6166a5d7","html_url":"https://github.com/apache/openjpa/commit/4dc0267629dc422f7cd7b955b139073a6166a5d7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4dc0267629dc422f7cd7b955b139073a6166a5d7/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"a7d613f3bfcbc8ac81ecebbb2eb4ef826fb50045","url":"https://api.github.com/repos/apache/openjpa/commits/a7d613f3bfcbc8ac81ecebbb2eb4ef826fb50045","html_url":"https://github.com/apache/openjpa/commit/a7d613f3bfcbc8ac81ecebbb2eb4ef826fb50045"}],"stats":{"total":396,"additions":390,"deletions":6},"files":[{"sha":"248c3d720316c264553dbd62ec6428dd9135afd7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":39,"deletions":4,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/4dc0267629dc422f7cd7b955b139073a6166a5d7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/4dc0267629dc422f7cd7b955b139073a6166a5d7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=4dc0267629dc422f7cd7b955b139073a6166a5d7","patch":"@@ -35,6 +35,7 @@\n \n import javax.sql.DataSource;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.event.OrphanedKeyAction;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n@@ -43,6 +44,7 @@\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n import org.apache.openjpa.jdbc.meta.strats.SuperclassDiscriminatorStrategy;\n+import org.apache.openjpa.jdbc.schema.DataSourceFactory;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.JoinSyntaxes;\n import org.apache.openjpa.jdbc.sql.Joins;\n@@ -146,14 +148,47 @@ public void setContext(StoreContext ctx, JDBCConfiguration conf) {\n         if (lm instanceof JDBCLockManager)\n             _lm = (JDBCLockManager) lm;\n \n-        if (!ctx.isManaged() && _conf.isConnectionFactoryModeManaged())\n-            _ds = _conf.getDataSource2(ctx);\n-        else\n-            _ds = _conf.getDataSource(ctx);\n+        _ds = getDataSource(ctx);\n \n         if (_conf.getUpdateManagerInstance().orderDirty())\n             ctx.setOrderDirtyObjects(true);\n     }\n+        \n+    private final boolean useConnectionFactory2(StoreContext ctx) { \n+        return (!ctx.isManaged() && _conf.isConnectionFactoryModeManaged());  \n+    }\n+        \n+    private final DataSource getDataSource(StoreContext ctx) {\n+        DataSource ds;\n+\n+        if (useConnectionFactory2(ctx)) {\n+            ds = (DataSource) ctx.getConnectionFactory2();\n+            if (ds != null) {\n+                ds = DataSourceFactory.decorateDataSource(ds, _conf, false);\n+            }\n+            else {\n+                ds = _conf.getDataSource2(ctx);\n+            }\n+        } else {\n+            ds = (DataSource) ctx.getConnectionFactory();\n+            if (ds != null) {\n+                ds = DataSourceFactory.decorateDataSource(ds, _conf, false);   \n+            }\n+            else {\n+                ds = _conf.getDataSource(ctx);\n+            }\n+        }\n+        return ds;\n+    }\n+    \n+    private boolean useContextToGetDataSource(StoreContext ctx) { \n+        // configuration check to enable goes here. \n+        if (StringUtils.isBlank(ctx.getConnectionFactoryName()) \n+                && StringUtils.isBlank(ctx.getConnectionFactory2Name())) {\n+            return false;\n+        }\n+        return true;\n+    }\n \n     public JDBCConfiguration getConfiguration() {\n         return _conf;"},{"sha":"bfc2ddf864357c6d38f83727baf92ab4e36c65c8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/4dc0267629dc422f7cd7b955b139073a6166a5d7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/4dc0267629dc422f7cd7b955b139073a6166a5d7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=4dc0267629dc422f7cd7b955b139073a6166a5d7","patch":"@@ -183,6 +183,11 @@ public Broker newBroker(String user, String pass, boolean managed, int connRetai\n     }\n     \n     public Broker newBroker(String user, String pass, boolean managed, int connRetainMode, boolean findExisting) {\n+        return newBroker(user, pass, managed, connRetainMode, findExisting, \"\", \"\");\n+    }\n+\n+    public Broker newBroker(String user, String pass, boolean managed, int connRetainMode, boolean findExisting,\n+        String cf1Name, String cf2Name) {\n         try {\n             assertOpen();\n             makeReadOnly();\n@@ -192,6 +197,8 @@ public Broker newBroker(String user, String pass, boolean managed, int connRetai\n                 broker = findBroker(user, pass, managed);\n             if (broker == null) {\n                 broker = newBrokerImpl(user, pass);\n+                broker.setConnectionFactoryName(cf1Name);\n+                broker.setConnectionFactory2Name(cf2Name);\n                 initializeBroker(managed, connRetainMode, broker, false);\n             }\n             return broker;"},{"sha":"34a87005a8f69ca7755cec0562c2e51464c8a0b7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerFactory.java","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/4dc0267629dc422f7cd7b955b139073a6166a5d7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/4dc0267629dc422f7cd7b955b139073a6166a5d7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerFactory.java?ref=4dc0267629dc422f7cd7b955b139073a6166a5d7","patch":"@@ -74,6 +74,29 @@\n      */\n     public Broker newBroker(String user, String pass, boolean managed,\n         int connRetainMode, boolean findExisting);\n+    \n+    /**\n+     * Return a new broker using the supplied\n+     * <ul>\n+     * <li>credentials</li>\n+     * <li>transaction management mode</li>\n+     * <li>connectionRetainMode</li>\n+     * <li>connectionFactories</li>\n+     * </ul>\n+     * \n+     * @param user  Username to use when obtaining a connection. Will be ignored if a connection factory is \n+     *     obtained from JNDI.\n+     * @param pass  Password to use when obtaining a connection. Will be ignored if a connection factory is \n+     *     obtained from JNDI.\n+     * @param managed Whether managed transactions will be used by this Broker\n+     * @param connRetainMode {@link ConnectionRetainMode}\n+     * @param findExisting Whether the internal pool of brokers should be used. \n+     * @param cfName  JTA ConnectionFactory to use\n+     * @param cf2Name  Non-JTA ConnectionFactory to use. \n+     * @return A Broker which matches the provided criteria.\n+     */\n+    public Broker newBroker(String user, String pass, boolean managed,\n+        int connRetainMode, boolean findExisting, String cfName, String cf2Name);\n \n     /**\n      * Register a listener for lifecycle-related events on the specified"},{"sha":"65c83f306bb257bcd26d327edb8021a6eef986ff","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/4dc0267629dc422f7cd7b955b139073a6166a5d7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4dc0267629dc422f7cd7b955b139073a6166a5d7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=4dc0267629dc422f7cd7b955b139073a6166a5d7","patch":"@@ -47,6 +47,7 @@\n import org.apache.commons.collections.map.IdentityMap;\n import org.apache.commons.collections.map.LinkedMap;\n import org.apache.commons.collections.set.MapBackedSet;\n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.Compatibility;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.datacache.DataCache;\n@@ -60,6 +61,7 @@\n import org.apache.openjpa.event.TransactionEvent;\n import org.apache.openjpa.event.TransactionEventManager;\n import org.apache.openjpa.kernel.exps.ExpressionParser;\n+import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n@@ -144,6 +146,9 @@\n     private static final int FLAG_TRANS_ENDING = 2 << 11;\n \n     private static final Object[] EMPTY_OBJECTS = new Object[0];\n+    \n+    private String _connectionFactoryName = \"\";\n+    private String _connectionFactory2Name = \"\";\n \n     private static final Localizer _loc =\n         Localizer.forPackage(BrokerImpl.class);\n@@ -4970,4 +4975,60 @@ public void setCacheFinderQuery(boolean flag) {\n     public boolean isFromWriteBehindCallback() {\n         return _fromWriteBehindCallback;\n     }\n+\n+    /**\n+     * Return the 'JTA' connectionFactoryName\n+     */\n+    public String getConnectionFactoryName() {\n+        return _connectionFactoryName;\n+    }\n+\n+    /**\n+     * Set the 'JTA' ConnectionFactoryName. Input will be trimmed to null before being stored. \n+     */\n+    public void setConnectionFactoryName(String connectionFactoryName) {\n+        this._connectionFactoryName = StringUtils.trimToNull(connectionFactoryName);\n+    }\n+\n+    /**\n+     * Return the 'NonJTA' ConnectionFactoryName.\n+     */\n+    public String getConnectionFactory2Name() {\n+        return _connectionFactory2Name;\n+    }\n+\n+    /**\n+     * Set the 'NonJTA' ConnectionFactoryName. Input will be trimmed to null before being stored. \n+     */\n+    public void setConnectionFactory2Name(String connectionFactory2Name) {\n+        this._connectionFactory2Name = StringUtils.trimToNull(connectionFactory2Name);\n+    }\n+    \n+    /**\n+     * Return the 'JTA' ConnectionFactory, looking it up from JNDI if needed.\n+     * \n+     * @return the JTA connection factory or null if connectionFactoryName is blank.\n+     */\n+    public Object getConnectionFactory() {\n+        if(StringUtils.isNotBlank(_connectionFactoryName)) { \n+            return Configurations.lookup(_connectionFactoryName, \"openjpa.ConnectionFactory\", _log );\n+        }\n+        else {\n+            return null;\n+        }\n+    }\n+    \n+    /**\n+     * Return the 'NonJTA' ConnectionFactory, looking it up from JNDI if needed.\n+     * \n+     * @return the NonJTA connection factory or null if connectionFactoryName is blank.\n+     */\n+    public Object getConnectionFactory2() { \n+        if(StringUtils.isNotBlank(_connectionFactory2Name)) { \n+            return  Configurations.lookup(_connectionFactory2Name, \"openjpa.ConnectionFactory2\", _log);\n+        }\n+        else {\n+            return null;\n+        }\n+    }\n }"},{"sha":"d237e53ec9637099029dc42aba060fb7a302ec81","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/4dc0267629dc422f7cd7b955b139073a6166a5d7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","raw_url":"https://github.com/apache/openjpa/raw/4dc0267629dc422f7cd7b955b139073a6166a5d7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java?ref=4dc0267629dc422f7cd7b955b139073a6166a5d7","patch":"@@ -1418,4 +1418,28 @@ public boolean getCachePreparedQuery() {\n     public void setCachePreparedQuery(boolean flag) {\n         _broker.setCachePreparedQuery(flag);\n     }\n+    \n+    public String getConnectionFactoryName() {\n+        return _broker.getConnectionFactoryName();\n+    }\n+\n+    public void setConnectionFactoryName(String connectionFactoryName) {\n+        _broker.setConnectionFactoryName(connectionFactoryName);\n+    }\n+\n+    public String getConnectionFactory2Name() {\n+        return _broker.getConnectionFactory2Name();\n+    }\n+\n+    public void setConnectionFactory2Name(String connectionFactory2Name) {\n+        _broker.setConnectionFactory2Name(connectionFactory2Name);\n+    }\n+    \n+    public Object getConnectionFactory() {\n+        return _broker.getConnectionFactory();\n+    }\n+\n+    public Object getConnectionFactory2() {\n+        return _broker.getConnectionFactory2();\n+    }\n }"},{"sha":"533e1f8bd8c51c32b3492d978a46edc3a3879d03","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBrokerFactory.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/4dc0267629dc422f7cd7b955b139073a6166a5d7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/4dc0267629dc422f7cd7b955b139073a6166a5d7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBrokerFactory.java?ref=4dc0267629dc422f7cd7b955b139073a6166a5d7","patch":"@@ -148,9 +148,13 @@ public Broker newBroker() {\n \n     public Broker newBroker(String user, String pass, boolean managed,\n         int connRetainMode, boolean findExisting) {\n+        return newBroker(user, pass, managed, connRetainMode, findExisting, \"\", \"\");\n+    }\n+    public Broker newBroker(String user, String pass, boolean managed,\n+        int connRetainMode, boolean findExisting, String cfName, String cf2Name) {\n         try {\n             return _factory.newBroker(user, pass, managed, connRetainMode,\n-                findExisting);\n+                findExisting, cfName, cf2Name);\n         } catch (RuntimeException re) {\n             throw translate(re);\n         }"},{"sha":"0fd5167102d88a9c44434197e39746dd1d23ab1b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","status":"modified","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/4dc0267629dc422f7cd7b955b139073a6166a5d7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","raw_url":"https://github.com/apache/openjpa/raw/4dc0267629dc422f7cd7b955b139073a6166a5d7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java?ref=4dc0267629dc422f7cd7b955b139073a6166a5d7","patch":"@@ -456,4 +456,38 @@ public OpenJPAStateManager embed(Object obj, Object id,\n \t * Releases the internal lock.\n \t */\n \tpublic void unlock ();\n+\n+    /**\n+     * Return the 'JTA' connectionFactoryName\n+     */\n+    public String getConnectionFactoryName();\n+\n+    /**\n+     * Set the 'JTA' ConnectionFactoryName.\n+     */\n+    public void setConnectionFactoryName(String connectionFactoryName);\n+\n+    /**\n+     * Return the 'NonJTA' ConnectionFactoryName.\n+     */\n+    public String getConnectionFactory2Name();\n+\n+    /**\n+     * Set the 'NonJTA' ConnectionFactoryName. \n+     */\n+    public void setConnectionFactory2Name(String connectionFactory2Name);\n+\n+    /**\n+     * Return the 'JTA' ConnectionFactory, looking it up from JNDI if needed.\n+     * \n+     * @return the JTA connection factory or null if connectionFactoryName is blank.\n+     */\n+    public Object getConnectionFactory();\n+\n+    /**\n+     * Return the 'NonJTA' ConnectionFactory, looking it up from JNDI if needed.\n+     * \n+     * @return the NonJTA connection factory or null if connectionFactoryName is blank.\n+     */\n+    public Object getConnectionFactory2();\n }"},{"sha":"349330a9bff04609c1d76ec12ae954599cd01255","filename":"openjpa-persistence-jdbc/pom.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/4dc0267629dc422f7cd7b955b139073a6166a5d7/openjpa-persistence-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/4dc0267629dc422f7cd7b955b139073a6166a5d7/openjpa-persistence-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/pom.xml?ref=4dc0267629dc422f7cd7b955b139073a6166a5d7","patch":"@@ -712,6 +712,12 @@\n             <artifactId>jaxb-impl</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>simple-jndi</groupId>\n+            <artifactId>simple-jndi</artifactId>\n+            <version>0.11.4</version>\n+            <scope>test</scope>\n+        </dependency>\n     </dependencies>\n     <build>\n         <plugins>"},{"sha":"ab16c2f81e64781e2249862b0181a38b286568a6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/Person.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/4dc0267629dc422f7cd7b955b139073a6166a5d7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/Person.java","raw_url":"https://github.com/apache/openjpa/raw/4dc0267629dc422f7cd7b955b139073a6166a5d7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/Person.java?ref=4dc0267629dc422f7cd7b955b139073a6166a5d7","patch":"@@ -0,0 +1,55 @@\n+package org.apache.openjpa.persistence.conf;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import javax.persistence.Version;\n+\n+// override defaults to attempt to prevent collisions.\n+@Entity(name=\"confPerson\")\n+@Table(name=\"CONF_PERSON\")\n+public class Person {\n+    \n+    @Id\n+    private int id;\n+\n+    @Version\n+    private int version;\n+    \n+    @Column(length=16)\n+    private String name;\n+    \n+    public Person() { \n+        super();\n+    }\n+   \n+    public Person(int id) { \n+        super();\n+        setId(id);\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"c2d5ef286e3df0729f33e565e35906c2d2eec38b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestSwitchConnection.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/apache/openjpa/blob/4dc0267629dc422f7cd7b955b139073a6166a5d7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestSwitchConnection.java","raw_url":"https://github.com/apache/openjpa/raw/4dc0267629dc422f7cd7b955b139073a6166a5d7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestSwitchConnection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestSwitchConnection.java?ref=4dc0267629dc422f7cd7b955b139073a6166a5d7","patch":"@@ -0,0 +1,107 @@\n+package org.apache.openjpa.persistence.conf;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.persistence.EntityExistsException;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.RollbackException;\n+\n+import org.apache.openjpa.persistence.test.AbstractPersistenceTestCase;\n+\n+public class TestSwitchConnection extends AbstractPersistenceTestCase {\n+    private String defaultJndiName = \"jdbc/mocked\";\n+    private String[] jndiNames = { \"jdbc/mocked1\" };\n+    \n+    protected void initEMF(String cfName) { \n+        EntityManagerFactory emf = getEmf(\"openjpa.ConnectionFactoryName\", cfName);\n+        \n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.createQuery(\"Delete from confPerson\").executeUpdate();\n+        em.getTransaction().commit();\n+        em.close();\n+        \n+        emf.close();\n+    }\n+    \n+    protected EntityManagerFactory getEmf(String cfPropertyName, String cfPropertyValue) { \n+        // null out the driver to prevent system properties from taking effect.\n+        // do not set connectionFactoryModeManaged - or connectionFactory2 will be used. \n+        return createEMF(\n+            \"openjpa.ConnectionDriverName\", \"\", \n+            cfPropertyName, cfPropertyValue,\n+            Person.class); \n+    }\n+    \n+    protected EntityManager getEm(EntityManagerFactory emf, String name, String value) {\n+        Map<String, Object> props = new HashMap<String, Object>();\n+        props.put(name, value);\n+        return emf.createEntityManager(props);\n+    }\n+    \n+    protected void createTables() { \n+        // create an EMF for each database;\n+        initEMF(defaultJndiName);\n+        initEMF(jndiNames[0]);\n+    }\n+    \n+    public void testConnectionFactoryName() { \n+        // split out so that we can try javax.persistence.jtaDataSource in the future. \n+        overridePropertyOnEM(\"openjpa.ConnectionFactoryName\", jndiNames[0]);\n+    }\n+\n+    public void overridePropertyOnEM(String name, String value) {\n+        // TODO Disable for non derby. \n+        createTables();\n+        \n+        // use the default JndiName for the base EntityManagerFactory\n+        EntityManagerFactory emf = getEmf(name, defaultJndiName);\n+        assertNotNull(emf);\n+\n+        EntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+\n+        EntityManager em1 = getEm(emf, name, value); \n+        assertNotNull(em1);\n+\n+        // 'prove' that we're using a different database by inserting the same row\n+        em.getTransaction().begin();\n+        em.persist(new Person(1));\n+        em.getTransaction().commit();\n+\n+        em1.getTransaction().begin();\n+        em1.persist(new Person(1));\n+        em1.getTransaction().commit();\n+\n+        em.clear();\n+        em1.clear();\n+\n+        // sanity test, make sure inserting the same row again fails.\n+        \n+        em.getTransaction().begin();\n+        em.persist(new Person(1));\n+        try {\n+            em.getTransaction().commit();\n+            fail(\"Should not be able to commit the same row a second time\");\n+        } catch (RollbackException rbe) {\n+            assertTrue(rbe.getCause() instanceof EntityExistsException);\n+            // expected\n+        }\n+\n+        em1.getTransaction().begin();\n+        em1.persist(new Person(1));\n+        try {\n+            em1.getTransaction().commit();\n+            fail(\"Should not be able to commit the same row a second time\");\n+        } catch (RollbackException rbe) {\n+            assertTrue(rbe.getCause() instanceof EntityExistsException);\n+            // expected\n+        }\n+        \n+        em.close();\n+        em1.close();\n+        emf.close();\n+    }\n+}"},{"sha":"72b75310d214a81fc0661724461b4f96920504f4","filename":"openjpa-persistence-jdbc/src/test/resources/jndi.properties","status":"added","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/4dc0267629dc422f7cd7b955b139073a6166a5d7/openjpa-persistence-jdbc/src/test/resources/jndi.properties","raw_url":"https://github.com/apache/openjpa/raw/4dc0267629dc422f7cd7b955b139073a6166a5d7/openjpa-persistence-jdbc/src/test/resources/jndi.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/jndi.properties?ref=4dc0267629dc422f7cd7b955b139073a6166a5d7","patch":"@@ -0,0 +1,4 @@\n+  java.naming.factory.initial=org.osjava.sj.SimpleContextFactory\n+  org.osjava.sj.root=src/test/resources/simple-jndi\n+  org.osjava.sj.colon.replace=--\n+  org.osjava.sj.delimiter=/"},{"sha":"5800ae0d2a2467a2b55d362dcf5ea6b3ba3a3662","filename":"openjpa-persistence-jdbc/src/test/resources/simple-jndi/jdbc/default.properties","status":"added","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/4dc0267629dc422f7cd7b955b139073a6166a5d7/openjpa-persistence-jdbc/src/test/resources/simple-jndi/jdbc/default.properties","raw_url":"https://github.com/apache/openjpa/raw/4dc0267629dc422f7cd7b955b139073a6166a5d7/openjpa-persistence-jdbc/src/test/resources/simple-jndi/jdbc/default.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/simple-jndi/jdbc/default.properties?ref=4dc0267629dc422f7cd7b955b139073a6166a5d7","patch":"@@ -0,0 +1,11 @@\n+mocked/type=javax.sql.DataSource\n+mocked/driver=org.apache.derby.jdbc.EmbeddedDriver\n+mocked/url=jdbc:derby:target/database/jpa-jndi-database;create=true\n+mocked/user=app\n+mocked/password=app\n+\n+mocked1/type=javax.sql.DataSource\n+mocked1/driver=org.apache.derby.jdbc.EmbeddedDriver\n+mocked1/url=jdbc:derby:target/database/jpa-jndi-database1;create=true\n+mocked1/user=app\n+mocked1/password=app"},{"sha":"ffefcfe6850273ed4c0e58118d480523a23bf9d4","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/4dc0267629dc422f7cd7b955b139073a6166a5d7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4dc0267629dc422f7cd7b955b139073a6166a5d7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java?ref=4dc0267629dc422f7cd7b955b139073a6166a5d7","patch":"@@ -197,7 +197,20 @@ else if (!props.isEmpty())\n             }\n         }\n \n-        Broker broker = _factory.newBroker(user, pass, managed, retainMode, false);\n+        // javax.persistence.jtaDataSource and openjpa.ConnectionFactory name are equivalent.\n+        // prefer javax.persistence for now. \n+        String cfName = (String) Configurations.removeProperty(\"jtaDataSource\", props);  \n+        if(cfName == null) {\n+            cfName = (String) Configurations.removeProperty(\"ConnectionFactoryName\", props);\n+        }\n+        \n+        String cf2Name = (String) Configurations.removeProperty(\"nonJtaDataSource\", props); \n+        \n+        if(cf2Name == null) { \n+            cf2Name = (String) Configurations.removeProperty(\"ConnectionFactory2Name\", props);\n+        }\n+        \n+        Broker broker = _factory.newBroker(user, pass, managed, retainMode, false, cfName, cf2Name);\n             \n         // add autodetach for close and rollback conditions to the configuration\n         broker.setAutoDetach(AutoDetach.DETACH_CLOSE, true);"}]}

