{"sha":"4dcca875006e4e2c0a91a6d9e961617f34a69898","node_id":"MDY6Q29tbWl0MjA2MzY0OjRkY2NhODc1MDA2ZTRlMmMwYTkxYTZkOWU5NjE2MTdmMzRhNjk4OTg=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-07-30T21:02:04Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-07-30T21:02:04Z"},"message":"OPENJPA-1727: Fix QueryCache eviction when returning an empty result and using the TIMESTAMP eviction policy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@980963 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"56fdd47173bb1ecdd5772660799fc9e4320c35bc","url":"https://api.github.com/repos/apache/openjpa/git/trees/56fdd47173bb1ecdd5772660799fc9e4320c35bc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4dcca875006e4e2c0a91a6d9e961617f34a69898","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4dcca875006e4e2c0a91a6d9e961617f34a69898","html_url":"https://github.com/apache/openjpa/commit/4dcca875006e4e2c0a91a6d9e961617f34a69898","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4dcca875006e4e2c0a91a6d9e961617f34a69898/comments","author":null,"committer":null,"parents":[{"sha":"07709672f7d1d24b5e38a660be2575f06079b65f","url":"https://api.github.com/repos/apache/openjpa/commits/07709672f7d1d24b5e38a660be2575f06079b65f","html_url":"https://github.com/apache/openjpa/commit/07709672f7d1d24b5e38a660be2575f06079b65f"}],"stats":{"total":72,"additions":64,"deletions":8},"files":[{"sha":"07b22943f12bb3729670f6d129aedf5ddfc5bf53","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/4dcca875006e4e2c0a91a6d9e961617f34a69898/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/4dcca875006e4e2c0a91a6d9e961617f34a69898/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java?ref=4dcca875006e4e2c0a91a6d9e961617f34a69898","patch":"@@ -124,11 +124,11 @@ public StoreQuery getDelegate() {\n         // get the cached data\n         QueryResult res = _cache.get(qk);\n \n-        if (res == null)\n-            return null;        \n-        if (res.isEmpty())\n-            return Collections.emptyList();\n-\n+        \n+        if (res == null) {\n+            return null;\n+        }\n+               \n         // this if block is invoked if the evictOnTimestamp is set to true\n         if (_cache instanceof AbstractQueryCache) {\n             AbstractQueryCache qcache = (AbstractQueryCache) _cache;\n@@ -152,6 +152,10 @@ public StoreQuery getDelegate() {\n                 }\n             }\n         }\n+      \n+        if (res.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n \n         int projs = getContext().getProjectionAliases().length;\n         if (projs == 0) {"},{"sha":"ff67a625e51416983fe426dfd7cd64ebc36b1e2b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestQueryTimestampEviction.java","status":"modified","additions":55,"deletions":3,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/4dcca875006e4e2c0a91a6d9e961617f34a69898/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestQueryTimestampEviction.java","raw_url":"https://github.com/apache/openjpa/raw/4dcca875006e4e2c0a91a6d9e961617f34a69898/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestQueryTimestampEviction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestQueryTimestampEviction.java?ref=4dcca875006e4e2c0a91a6d9e961617f34a69898","patch":"@@ -18,22 +18,64 @@\n  */\n package org.apache.openjpa.persistence.jdbc.query.cache;\n \n-import java.util.Collections;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.Query;\n \n import org.apache.openjpa.datacache.ConcurrentQueryCache;\n import org.apache.openjpa.datacache.QueryCache;\n-import org.apache.openjpa.datacache.TypesChangedEvent;\n import org.apache.openjpa.datacache.AbstractQueryCache.EvictPolicy;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.lib.jdbc.AbstractJDBCListener;\n+import org.apache.openjpa.lib.jdbc.JDBCEvent;\n+import org.apache.openjpa.lib.jdbc.JDBCListener;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.embed.attrOverrides.TestAssocOverridesXML.SQLListener;\n \n public class TestQueryTimestampEviction extends AbstractQueryCacheTest {\n+    private List<String> _sql = new ArrayList<String>();\n+    \n     public void setUp() throws Exception {\n         super.setUp(\n                 \"openjpa.DataCache\", \"true\",\n                 \"openjpa.QueryCache\", \"true(CacheSize=1000, EvictPolicy='timestamp')\",\n-                \"openjpa.RemoteCommitProvider\", \"sjvm\");\n+                \"openjpa.RemoteCommitProvider\", \"sjvm\",\n+                \"openjpa.jdbc.JDBCListeners\",new JDBCListener[] { new SQLListener() });\n     }\n \n+    public void testEmptyResultTimeout() {\n+        // Not all databases support GenerationType.IDENTITY column(s)\n+        if (!((JDBCConfiguration) emf.getConfiguration()).getDBDictionaryInstance().supportsAutoAssign) {\n+            return;\n+        }\n+        OpenJPAEntityManagerSPI em = emf.createEntityManager();\n+        String query = \"select p from PartBase p where p.cost > ?1\";\n+        // execute a query that needs to return zero results\n+        Query q = em.createQuery(query);\n+        q.setParameter(1, 100000);\n+        List l = q.getResultList();\n+        assertEquals(0, l.size());     \n+\n+        // Create a new Entity that has the PartBase accesspath. Has a newer timestamp than our query\n+        em.getTransaction().begin();\n+        em.persist(new PartBase());\n+        em.getTransaction().commit();\n+\n+        // Make sure that our sql listener is working\n+        assertTrue(_sql.size() > 0);\n+        _sql.clear();\n+        \n+        q = em.createQuery(query);\n+        q.setParameter(1, 100000);\n+        q.getResultList();\n+        \n+        // Make sure that we execute sql. This means that the query was properly kicked out of the cache.\n+        assertEquals(1, _sql.size());\n+        em.close();\n+\n+    }\n+    \n     /**\n      * Verify that the persistent unit property configuration is enabling\n      * the TIMESTAMP Eviction Policy.\n@@ -87,5 +129,15 @@ public void run() {\n             fail(\"The thread is still waiting on a writeLock()!\");\n         }\n     }\n+\n+    public class SQLListener extends AbstractJDBCListener {\n+\n+        @Override\n+        public void beforeExecuteStatement(JDBCEvent event) {\n+            if (event.getSQL() != null && _sql != null) {\n+                _sql.add(event.getSQL());\n+            }\n+        }\n+    }\n }\n "}]}

