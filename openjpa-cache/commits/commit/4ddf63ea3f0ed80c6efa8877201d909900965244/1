{"sha":"4ddf63ea3f0ed80c6efa8877201d909900965244","node_id":"MDY6Q29tbWl0MjA2MzY0OjRkZGY2M2VhM2YwZWQ4MGM2ZWZhODg3NzIwMWQ5MDk5MDA5NjUyNDQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-07-13T22:45:48Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-07-13T22:45:48Z"},"message":"removed some dead code and cleaned up some javadoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@421722 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cca74ec879bc3d64521be7836591ba5d94bb6850","url":"https://api.github.com/repos/apache/openjpa/git/trees/cca74ec879bc3d64521be7836591ba5d94bb6850"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4ddf63ea3f0ed80c6efa8877201d909900965244","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4ddf63ea3f0ed80c6efa8877201d909900965244","html_url":"https://github.com/apache/openjpa/commit/4ddf63ea3f0ed80c6efa8877201d909900965244","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4ddf63ea3f0ed80c6efa8877201d909900965244/comments","author":null,"committer":null,"parents":[{"sha":"4bc5b3bd0f9b0df5259b93666555f1a45b6f0f57","url":"https://api.github.com/repos/apache/openjpa/commits/4bc5b3bd0f9b0df5259b93666555f1a45b6f0f57","html_url":"https://github.com/apache/openjpa/commit/4bc5b3bd0f9b0df5259b93666555f1a45b6f0f57"}],"stats":{"total":273,"additions":54,"deletions":219},"files":[{"sha":"ae08eea81b4e3054c087e73662760d39882ea195","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -31,7 +31,7 @@\n /**\n  * <p>{@link BrokerFactory} implementation for use with the\n  * {@link AbstractStoreManager}. This provides integration into the\n- * {@link Bootstrap#getBrokerFactory} bootstrapping mechanism, to facilitate\n+ * {@link Bootstrap#getBrokerFactory()} bootstrapping mechanism, to facilitate\n  * the process of creating a subclass of {@link AbstractStoreManager}. New\n  * store manager implementations need not extend this class. Instead, set the\n  * <code>org.apache.openjpa.BrokerFactory</code> configuration property to\n@@ -64,7 +64,7 @@\n \n     /**\n      * Factory method for obtaining a possibly-pooled {@link BrokerFactory}\n-     * from properties. Invoked from {@link Bootstrap#getBrokerFactory}.\n+     * from properties. Invoked from {@link Bootstrap#getBrokerFactory()}.\n      */\n     public static AbstractStoreBrokerFactory getInstance\n         (ConfigurationProvider cp) {\n@@ -80,7 +80,7 @@\n \n     /**\n      * Factory method for constructing a {@link BrokerFactory}\n-     * from properties. Invoked from {@link Bootstrap#newBrokerFactory}.\n+     * from properties. Invoked from {@link Bootstrap#newBrokerFactory()}.\n      */\n     public static AbstractStoreBrokerFactory newInstance\n         (ConfigurationProvider cp) {"},{"sha":"2b3aae194f0c8f4e74203a95cff6d49824e83a86","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerFactoryValue.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerFactoryValue.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerFactoryValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerFactoryValue.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -21,7 +21,8 @@\n /**\n  * <p>Value type used to represent the {@link BrokerFactory}.  This type is\n  * defined separately so that it can be used both in the global configuration\n- * and in {@link OpenJPAHelper} with the same encapsulated configuration.</p>\n+ * and in {@link org.apache.openjpa.kernel.Bootstrap} with the same \n+ * encapsulated configuration.</p>\n  *\n  * @author Abe White\n  * @nojavadoc"},{"sha":"a5503177a8a6c87506d58c683da7d79c9da130ec","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractQueryCache.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractQueryCache.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -186,7 +186,7 @@ public boolean removeTypesChangedListener(TypesChangedListener listen) {\n      * your cache subclass relies on OpenJPA for clustering support, make it\n      * implement <code>RemoteCommitListener</code>.  This method will take\n      * care of invalidating entries from remote commits, by delegating to\n-     * {@link #typesChanged}.\n+     * {@link #onTypesChanged}.\n      */\n     public void afterCommit(RemoteCommitEvent event) {\n         if (_closed)"},{"sha":"7a41283d51453f05fd4bc9e1cb4a0fa9ad53c3ee","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -426,7 +426,6 @@ public Collection loadAll(Collection sms, PCState state, int load,\n         DataCache cache;\n         DataCachePCData data;\n         BitSet fields;\n-        FetchConfiguration fc;\n \n         for (Iterator itr = sms.iterator(); itr.hasNext();) {\n             sm = (OpenJPAStateManager) itr.next();\n@@ -449,12 +448,6 @@ public Collection loadAll(Collection sms, PCState state, int load,\n                 || sm.getPCState() == PCState.HOLLOW) {\n                 data = cache.get(sm.getObjectId());\n                 if (data != null) {\n-                    // ### fc isn't ever accessed; we should check that\n-                    // ### getFetchConfiguration() doesn't have any side-effects\n-                    // ### and remove this code.\n-                    fc = (load == FORCE_LOAD_ALL) ? null\n-                        : fetchState.getFetchConfiguration();\n-\n                     // load unloaded fields\n                     fields = sm.getUnloaded(fetchState);\n                     data.load(sm, fields, fetchState, edata);"},{"sha":"5c94277e7f3bc43a07c1b7489f8628ab62ea9a16","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCache.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCache.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -65,8 +65,9 @@\n      * <p/>\n      * <p>This method is typically not invoked directly from outside\n      * the <code>QueryCache</code> class. Instead, the cache should\n-     * be updated by invoking {@link #typesChanged}, which will\n-     * result in all queries that may be invalid being dropped.</p>\n+     * be updated by implementing {@link \n+     * org.apache.openjpa.event.RemoteCommitListener},\n+     * which will result in all queries that may be invalid being dropped.</p>\n      *\n      * @return The previously cached value, or <code>null</code> if\n      * the key was not previously cached. See {@link Map#remove}\n@@ -86,7 +87,7 @@\n      * causes this data to be ignored when determining whether or not\n      * the cache is full, effectively increasing the total amount of\n      * data stored in the cache. This method does not affect the\n-     * behavior of {@link #remove} or {@link #typesChanged}.\n+     * behavior of {@link #remove} or {@link #onTypesChanged}.\n      *\n      * @return <code>true</code> if <code>key</code>'s value was\n      *         pinned into the cache; <code>false</code> if the"},{"sha":"3d475a78bb63deb34f6f3be5253b06550455626b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/CodeGenerator.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/CodeGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/CodeGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/CodeGenerator.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -43,7 +43,6 @@\n  */\n public class CodeGenerator {\n \n-    private OpenJPAConfiguration _conf = null;\n     private File _dir = null;\n     private CodeFormat _format = null;\n     private ClassMetaData _meta = null;\n@@ -54,15 +53,13 @@\n      * Constructor.  Supply configuration and class to generate code for.\n      */\n     public CodeGenerator(OpenJPAConfiguration conf, Class type) {\n-        this(conf, new MetaDataRepository(conf).\n-            getMetaData(type, null, true));\n+        this(new MetaDataRepository(conf).getMetaData(type, null, true));\n     }\n \n     /**\n      * Constructor.  Supply configuration and metadata to generate code for.\n      */\n-    public CodeGenerator(OpenJPAConfiguration conf, ClassMetaData meta) {\n-        _conf = conf;\n+    public CodeGenerator(ClassMetaData meta) {\n         _meta = meta;\n         _type = meta.getDescribedType();\n     }\n@@ -302,7 +299,7 @@ private String getConstructor() {\n     private void appendFieldCode(FieldMetaData fmd, CodeFormat decs,\n         CodeFormat code) {\n         String fieldName = fmd.getName();\n-        String capFieldName = StringUtils.capitalise(fieldName);\n+        String capFieldName = StringUtils.capitalize(fieldName);\n         String propertyName = fieldName;\n         if (propertyName.startsWith(\"_\"))\n             propertyName = propertyName.substring(1);"},{"sha":"51c25daa37f0a46297b55f8db6275469e1f26aee","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -251,8 +251,6 @@ private synchronized boolean hasListeners(Object source,\n         MetaDataDefaults def = meta.getRepository().getMetaDataFactory().\n             getDefaults();\n \n-        int mode = meta.getRepository().getMetaDataFactory().\n-            getDefaults().getCallbackMode();\n         boolean callbacks = def.getCallbacksBeforeListeners(type);\n         boolean failFast = (def.getCallbackMode() & CALLBACK_FAIL_FAST) != 0;\n "},{"sha":"fe9ff6873043bb53cf40a4b3f996c3c08d39c695","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/TCPRemoteCommitProvider.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/event/TCPRemoteCommitProvider.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/event/TCPRemoteCommitProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/TCPRemoteCommitProvider.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -170,7 +170,6 @@ public void setNumBroadcastThreads(int numBroadcastThreads) {\n             if (cur > numBroadcastThreads) {\n                 // Notify the extra worker threads so they stop themselves\n                 // Threads will not end until they send another pk.\n-                Iterator iter = _broadcastThreads.iterator();\n                 for (int i = numBroadcastThreads; i < cur; i++) {\n                     BroadcastWorkerThread worker = (BroadcastWorkerThread)\n                         _broadcastThreads.removeFirst();\n@@ -434,7 +433,7 @@ public synchronized void addPacket(byte[] bytes) {\n     }\n \n     /**\n-     * Threads to broadcast packets placed in the {@link BroadcastQueueu}.\n+     * Threads to broadcast packets placed in the {@link BroadcastQueue}.\n      */\n     private class BroadcastWorkerThread\n         extends Thread {"},{"sha":"d1507109f0ce31b58a647554b796914af6ab2da4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -135,7 +135,6 @@\n     private static final int FLAG_FLUSH_REQUIRED = 2 << 8;\n     private static final int FLAG_REMOTE_LISTENER = 2 << 9;\n     private static final int FLAG_RETAINED_CONN = 2 << 10;\n-    private static final int FLAG_SET_OPERATION = 2 << 11;\n \n     private static final Localizer _loc =\n         Localizer.forPackage(BrokerImpl.class);"},{"sha":"744584d2b861e5d5f70b005d197a23cf2e92e8d6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -430,7 +430,6 @@ private Object detachInternal(Object toDetach) {\n \n         // detach fields and set detached variables\n         DetachedStateManager detSM = null;\n-        ClassMetaData meta = sm.getMetaData();\n         if (_opts.getDetachedStateManager()\n             && useDetachedStateManager(sm, _opts))\n             detSM = new DetachedStateManager(detachedPC, sm, fields,"},{"sha":"e60aec0856d909b97140f97bb8f6168f8ebc0d3b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -67,8 +67,6 @@\n     private Set _rootInstances;\n     private Map _hints = null;\n \n-    private static final String[] EMPTY_STRINGS = new String[0];\n-\n     public StoreContext getContext() {\n         return _ctx;\n     }"},{"sha":"5ad63dc346f45e56320a89227310f3cd1f3a8d52","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchStateImpl.java","status":"modified","additions":0,"deletions":39,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchStateImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchStateImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchStateImpl.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -177,7 +177,6 @@ boolean canTraverse(FieldMetaData fm) {\n \n     void traverse(FieldMetaData fm) {\n         int sourceDepth = getDepth(fm.getDeclaringMetaData());\n-        int targetDepth = getDepth(fm.getDeclaredTypeMetaData());\n         int traversalCount = getTraversalCount(fm);\n         boolean isRecursive = fm.getDeclaringMetaData() ==\n             fm.getDeclaredTypeMetaData();\n@@ -204,42 +203,4 @@ int getDepth(ClassMetaData cm) {\n             return ((Integer) _depths.get(cm)).intValue();\n         return 0;\n     }\n-\n-    /**\n-     * Combination of an instance and its field used as key.\n-     */\n-    private static class InstanceFieldKey {\n-\n-        final OpenJPAStateManager _sm;\n-        final FieldMetaData _fm;\n-\n-        /**\n-         * Supply configuration.\n-         *\n-         * @param sm can be null\n-         * @param fm must not be null\n-         */\n-        public InstanceFieldKey(OpenJPAStateManager sm, FieldMetaData fm) {\n-            _sm = sm;\n-            _fm = fm;\n-        }\n-\n-        public boolean equals(Object other) {\n-            if (other instanceof InstanceFieldKey) {\n-                InstanceFieldKey that = (InstanceFieldKey) other;\n-                return (_sm == that._sm) && (_fm == that._fm);\n-            }\n-            return false;\n-        }\n-\n-        public int hashCode() {\n-            int smHash = (_sm != null) ? _sm.hashCode() : 0;\n-            int fmHash = (_fm != null) ? _fm.hashCode() : 0;\n-            return smHash + fmHash;\n-        }\n-\n-        public String toString() {\n-            return _sm + \".\" + _fm;\n-        }\n-\t}\n }"},{"sha":"206a53a53595b709df49a5893eb3c1ac8b3f53d9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -833,7 +833,7 @@ public static Object hintToGetter(Object target, String hintKey) {\n             if (e instanceof InvocationTargetException)\n                 t = ((InvocationTargetException) e).getTargetException();\n             throw new UserException(_loc.get(\"bad-getter-hint\",\n-                target.getClass(), hintKey)).setCause(e);\n+                target.getClass(), hintKey)).setCause(t);\n         }\n     }\n "},{"sha":"677cfdea7943988f0a9023cb7a8d84922c9ed8de","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPAStateManager.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPAStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPAStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPAStateManager.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -185,8 +185,7 @@\n      * Return the identifier for this state manager.  This may return a\n      * temporary identifier for new unflushed instances that have not been\n      * assigned an object id, or for non-persistent or embedded instances.\n-     * For all other instances this method is the same as\n-     * {@link StateManager#getObjectId}.\n+     * For all other instances this method is the same as {@link #getObjectId}.\n      */\n     public Object getId();\n "},{"sha":"8acde6c548f03d6fae04508dd3634b36206d5785","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -139,8 +139,7 @@\n     public Class getResultType();\n \n     /**\n-     * Specify the type of object in which the\n-     * result of invoking {@link #execute} or one of its siblings.\n+     * Specify the type of object in which the result of evaluating this query.\n      *\n      * @since 3.0\n      */\n@@ -278,12 +277,12 @@\n \n     /**\n      *\tSynchronize on the query's internal lock.\n-\t */\n-\tpublic void lock (); \n+     */\n+    public void lock (); \n \n \n-\t/**\n-\t *\tUnlock the query's internal lock.\n-\t */\n-\tpublic void unlock (); \n+    /**\n+     *\tUnlock the query's internal lock.\n+     */\n+    public void unlock();\n }"},{"sha":"8f0f807daf360d4e393daffd32301a4fae12f3d8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -1732,7 +1732,6 @@ private void assertParameters(StoreQuery.Executor ex, Map params) {\n         LinkedMap paramTypes = ex.getParameterTypes(_storeQuery);\n         if (paramTypes != null && !paramTypes.isEmpty()) {\n             Map.Entry entry;\n-            Object param;\n             for (Iterator itr = paramTypes.entrySet().iterator();\n                 itr.hasNext();) {\n                 entry = (Map.Entry) itr.next();"},{"sha":"b5bd66b9872435ee6a5141328dde752e1fdae13f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryOperations.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryOperations.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryOperations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryOperations.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -26,23 +26,23 @@\n      * Symbolic constant that indicates that this query will be\n      * performing a select operation.\n      *\n-     * @see Query#getOperation\n+     * @see QueryContext#getOperation\n      */\n     public static final int OP_SELECT = 1;\n \n     /**\n      * Symbolic constant that indicates that this query will be\n      * performing a delete operation.\n      *\n-     * @see Query#getOperation\n+     * @see QueryContext#getOperation\n      */\n     public static final int OP_DELETE = 2;\n \n     /**\n      *  Symbolic constant that indicates that this query will be\n      *  performing a update operation.\n      *\n-     *  @see Query#getOperation\n+     *  @see QueryContext#getOperation\n      */\n     public static final int OP_UPDATE = 3;\n }"},{"sha":"7ddc41dbeb1f22fa7e5579bbcd02d803a327c525","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -116,7 +116,8 @@\n      * Initialization involves first calling the\n      * {@link OpenJPAStateManager#initialize} method with\n      * a new instance of the correct type constructed with the\n-     * {@link PCRegistry#newInstance(Class,StateManager,Object)} method\n+     * {@link org.apache.openjpa.enhance.PCRegistry#newInstance(Class, \n+     * org.apache.openjpa.enhance.StateManager, boolean)} method\n      * (this will reset the state manager's metadata if the actual type was a\n      * subclass).  After instance initialization, load any the fields for the\n      * given fetch configuration that can be efficiently retrieved. If any of\n@@ -169,7 +170,7 @@ public boolean load(OpenJPAStateManager sm, BitSet fields,\n     /**\n      * Initialize, load, or validate the existance of all of the given\n      * objects.  This method is called from various broker methods that act\n-     * on multiple objects, such as {@link Broker#findAll}.  It gives\n+     * on multiple objects, such as {@link StoreContext#retrieveAll}.  It gives\n      * the store manager an opportunity to efficiently batch-load data for\n      * several objects.  Each of the given state managers will be in one of\n      * three states, each requiring a different action:\n@@ -240,7 +241,7 @@ public void beforeStateChange(OpenJPAStateManager sm, PCState fromState,\n      * The current version will roll over to this next version upon successful\n      * commit.\n      *\n-     * @see    org.apache.openjpa.util.ApplicationIds#assign\n+     * @see    org.apache.openjpa.util.ApplicationIds#assign()\n      */\n     public Collection flush(Collection sms);\n \n@@ -260,7 +261,7 @@ public void beforeStateChange(OpenJPAStateManager sm, PCState fromState,\n      * {@link #flush}\n      * @see    org.apache.openjpa.util.ImplHelper#generateFieldValue\n      * @see    org.apache.openjpa.util.ImplHelper#generateIdentityValue\n-     * @see    org.apache.openjpa.util.ApplicationIds#assign\n+     * @see    org.apache.openjpa.util.ApplicationIds#assign()\n      * @since 3.3\n      */\n     public boolean assignObjectId(OpenJPAStateManager sm, boolean preFlush);"},{"sha":"1d84c4b5e3420c47b1f2b764db8213c5c835de65","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Concat.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Concat.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Concat.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Concat.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -58,7 +58,6 @@ protected Object eval(Object candidate, Object orig,\n         StringBuffer cat = new StringBuffer(str.toString());\n \n         Object arg = _args.eval(candidate, orig, ctx, params);\n-        int idx;\n         if (arg instanceof Object[]) {\n             for (int i = 0; i < ((Object[]) arg).length; i++)\n                 cat.append((((Object[]) arg)[i]).toString());"},{"sha":"9376c6e8416d5148b2bba1b6d67a6525c281744c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Distinct.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Distinct.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Distinct.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Distinct.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -20,7 +20,6 @@\n import java.util.HashSet;\n \n import org.apache.openjpa.kernel.StoreContext;\n-import org.apache.openjpa.lib.util.Localizer;\n \n /**\n  * <p>A distinct set of the specified values.</p>\n@@ -30,9 +29,6 @@\n class Distinct\n     extends Val {\n \n-    private static final Localizer _loc = Localizer.forPackage\n-        (AggregateVal.class);\n-\n     private final Val _val;\n \n     /**\n@@ -61,7 +57,8 @@ protected Object eval(Object candidate, Object orig,\n         StoreContext ctx, Object[] params) {\n         if (candidate == null)\n             candidate = Collections.EMPTY_LIST;\n-\n+        \n+        // ### should arg be used in eval below?\n         Collection arg = candidate instanceof Collection\n             ? (Collection) candidate : Collections.singleton(candidate);\n "},{"sha":"1ee318fd91c91be6c1d20948fd444d32bca6d053","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/MatchesExpression.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/MatchesExpression.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/MatchesExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/MatchesExpression.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -28,7 +28,7 @@\n \n     private final String _single;\n     private final String _multi;\n-    private final String _escape;\n+    private final String _escape; // ### in-memory queries are not using escapes\n     private final boolean _affirmation;\n \n     /**"},{"sha":"f47561c468c2722ba2c4dd7f9f015d7e053134e3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/UnboundVariable.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/UnboundVariable.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/UnboundVariable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/UnboundVariable.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -16,7 +16,6 @@\n package org.apache.openjpa.kernel.exps;\n \n import org.apache.openjpa.kernel.StoreContext;\n-import org.apache.openjpa.lib.util.Localizer;\n \n /**\n  * <p>Represents an unbound variable.  When the query is evaluated,\n@@ -28,9 +27,6 @@\n class UnboundVariable\n     extends Val {\n \n-    private static final Localizer _loc = Localizer.forPackage\n-        (UnboundVariable.class);\n-\n     private Class _type = null;\n     private Object _val = null;\n "},{"sha":"c048b2e29e88e95ee402c0ae7d6137c516929878","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":0,"deletions":14,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -34,10 +34,8 @@\n import org.apache.openjpa.kernel.QueryContext;\n import org.apache.openjpa.kernel.QueryOperations;\n import org.apache.openjpa.kernel.exps.AbstractExpressionBuilder;\n-import org.apache.openjpa.kernel.exps.AggregateListener;\n import org.apache.openjpa.kernel.exps.Expression;\n import org.apache.openjpa.kernel.exps.ExpressionFactory;\n-import org.apache.openjpa.kernel.exps.FilterListener;\n import org.apache.openjpa.kernel.exps.Literal;\n import org.apache.openjpa.kernel.exps.Parameter;\n import org.apache.openjpa.kernel.exps.Path;\n@@ -66,14 +64,12 @@\n     extends AbstractExpressionBuilder\n     implements JPQLTreeConstants {\n \n-    private static final int VAR_OK = 0;\n     private static final int VAR_PATH = 1;\n     private static final int VAR_ERROR = 2;\n \n     private static Localizer _loc = Localizer.forPackage\n         (JPQLExpressionBuilder.class);\n \n-    private final ExpressionStoreQuery query;\n     private final Stack contexts = new Stack();\n     private LinkedMap parameterTypes;\n     private int aliasCount = 0;\n@@ -90,7 +86,6 @@ public JPQLExpressionBuilder(ExpressionFactory factory,\n         ExpressionStoreQuery query, Object parsedQuery) {\n         super(factory, query.getResolver());\n \n-        this.query = query;\n         contexts.push(new Context(parsedQuery instanceof ParsedJPQL\n             ? (ParsedJPQL) parsedQuery\n             : parsedQuery instanceof String\n@@ -261,10 +256,6 @@ private Expression and(Expression e1, Expression e2) {\n         return e1 == null ? e2 : e2 == null ? e1 : factory.and(e1, e2);\n     }\n \n-    private Expression or(Expression e1, Expression e2) {\n-        return e1 == null ? e2 : e2 == null ? e1 : factory.or(e1, e2);\n-    }\n-\n     private static String assemble(JPQLNode node) {\n         return assemble(node, \".\", 0);\n     }\n@@ -453,7 +444,6 @@ protected Expression evalFetchJoins(QueryExpressions exps) {\n \n     protected void evalSetClause(QueryExpressions exps) {\n         // handle SET field = value\n-        Set joins = null;\n         JPQLNode[] nodes = root().findChildrenByID(JJTUPDATEITEM);\n \n         Map updates = null;\n@@ -687,10 +677,6 @@ private String assertSchemaName(JPQLNode node) {\n      * Recursive helper method to evaluate the given node.\n      */\n     private Object eval(JPQLNode node) {\n-        Expression exp1, exp2;\n-        FilterListener listener;\n-        AggregateListener agg;\n-        Path path;\n         Value val1 = null;\n         Value val2 = null;\n         Value val3 = null;"},{"sha":"2cc6ff99bf60f4b94bcfa80f8840274cf141ccd3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -29,7 +29,6 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import java.util.SortedSet;\n import java.util.TreeMap;\n \n import org.apache.commons.lang.StringUtils;\n@@ -147,7 +146,6 @@\n     private String _seqName = DEFAULT_STRING;\n     private SequenceMetaData _seqMeta = null;\n     private Map _fgs = new HashMap();\n-    private SortedSet _lgSet = null;\n     private String _cacheName = DEFAULT_STRING;\n     private int _cacheTimeout = Integer.MIN_VALUE;\n     private Boolean _detachable = null;"},{"sha":"8a3c1db23ea0c088d23ce95054cd24a5d7c8a3c5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -29,7 +29,7 @@\n \n     /**\n      * Return the default access type for base persistent class with\n-     * {@link ClassMetaData.ACCESS_UNKNOWN} access type.\n+     * {@link ClassMetaData#ACCESS_UNKNOWN} access type.\n      */\n     public int getDefaultAccessType();\n "},{"sha":"be238a4fb7af217d0ff5e02c514074d388b1388d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractChangeTracker.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractChangeTracker.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractChangeTracker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractChangeTracker.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -22,7 +22,6 @@\n \n import org.apache.commons.collections.map.IdentityMap;\n import org.apache.commons.collections.set.MapBackedSet;\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n \n /**\n  * <p>Base class that provides utilities to change trackers.</p>\n@@ -48,10 +47,6 @@\n      */\n     protected Collection change = null;\n \n-    // we need the configuration for context when figuring out if a type\n-    // is managed\n-    private final OpenJPAConfiguration _conf;\n-\n     private boolean _autoOff = true;\n     private boolean _track = false;\n     private Boolean _identity = null;\n@@ -60,8 +55,7 @@\n     /**\n      * Constructor; supply configuration.\n      */\n-    public AbstractChangeTracker(OpenJPAConfiguration conf) {\n-        _conf = conf;\n+    public AbstractChangeTracker() {\n     }\n \n     /**"},{"sha":"d41088c0bf82d0cc9e7d79d39186d8277aa0b43e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/CollectionChangeTrackerImpl.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/util/CollectionChangeTrackerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/util/CollectionChangeTrackerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/CollectionChangeTrackerImpl.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -44,7 +44,6 @@\n      */\n     public CollectionChangeTrackerImpl(Collection coll, boolean dups,\n         boolean order, OpenJPAConfiguration conf) {\n-        super(conf);\n         _coll = coll;\n         _dups = dups;\n         _order = order;"},{"sha":"94e0ee4dcc37efc655bd469a164fa04ba7f77ad4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -24,7 +24,6 @@\n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.enhance.PersistenceCapable;\n-import org.apache.openjpa.kernel.FetchConfiguration;\n import org.apache.openjpa.kernel.FetchState;\n import org.apache.openjpa.kernel.LockManager;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n@@ -100,7 +99,6 @@ public static Collection loadAll(Collection sms, StoreManager store,\n         PCState state, int load, FetchState fetchState, Object context) {\n         Collection failed = null;\n         OpenJPAStateManager sm;\n-        FetchConfiguration fc;\n         LockManager lm;\n         for (Iterator itr = sms.iterator(); itr.hasNext();) {\n             sm = (OpenJPAStateManager) itr.next();\n@@ -109,8 +107,6 @@ public static Collection loadAll(Collection sms, StoreManager store,\n                     failed = addFailedId(sm, failed);\n             } else if (load != StoreManager.FORCE_LOAD_NONE\n                 || sm.getPCState() == PCState.HOLLOW) {\n-                fc = (load == StoreManager.FORCE_LOAD_ALL) ? null\n-                    : fetchState.getFetchConfiguration();\n \n                 lm = sm.getContext().getLockManager();\n                 if (!store.load(sm, sm.getUnloaded(fetchState),"},{"sha":"32b41f5030ff9d6db745d0c632d0954cbdc73cc9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/MapChangeTracker.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/util/MapChangeTracker.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/util/MapChangeTracker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/MapChangeTracker.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -18,9 +18,9 @@\n /**\n  * <p>Change tracker that can be used for maps.  If the user calls\n  * any mutating methods on the map that do not have an equivalent in\n- * this change tracker, then you must call {@link #stopTracking} after\n- * applying the operation to the map.  The collections returned from\n- * {@link ChangeTracker#getAdd} and {@link ChangeTracker#getRemove} will\n+ * this change tracker, then you must call {@link ChangeTracker#stopTracking} \n+ * after applying the operation to the map.  The collections returned from\n+ * {@link ChangeTracker#getAdded} and {@link ChangeTracker#getRemoved} will\n  * be collections of keys to add/remove.</p>\n  *\n  * @author Abe White"},{"sha":"7c8081c023d5094fd21cd90af54f85f4de400194","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/MapChangeTrackerImpl.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/util/MapChangeTrackerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/util/MapChangeTrackerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/MapChangeTrackerImpl.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -36,7 +36,6 @@\n      * Constructor; supply delegate map.\n      */\n     public MapChangeTrackerImpl(Map map, OpenJPAConfiguration conf) {\n-        super(conf);\n         _map = map;\n     }\n "},{"sha":"1a6812e8d5e08b1ad672e70b31a427d4f564713f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectId.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectId.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectId.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -15,8 +15,6 @@\n  */\n package org.apache.openjpa.util;\n \n-import org.apache.openjpa.lib.util.Localizer;\n-\n /**\n  * <p>Identity type appropriate for object primary key fields and shared\n  * id classes.</p>\n@@ -26,8 +24,6 @@\n public final class ObjectId\n     extends OpenJPAId {\n \n-    private static final Localizer _loc = Localizer.forPackage(ObjectId.class);\n-\n     private Object _key;\n \n     public ObjectId(Class cls, Object key) {"},{"sha":"34879e36ec143830950b25dbd7fbca8cc8d95a3c","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginListValue.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginListValue.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginListValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginListValue.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -16,8 +16,6 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.openjpa.lib.util.Localizer;\n-\n /**\n  * A list of plugins. Defaults and aliases on plugin lists apply only\n  * to individual class names.\n@@ -29,9 +27,6 @@\n \n     private static final String[] EMPTY = new String[0];\n \n-    private static final Localizer _loc = Localizer.forPackage\n-        (PluginListValue.class);\n-\n     private String[] _names = EMPTY;\n     private String[] _props = EMPTY;\n "},{"sha":"7394cbd1fd16ed87bc920ab744ec0d852e1f5290","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","status":"modified","additions":2,"deletions":13,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -95,7 +95,7 @@ public void setPrettyPrint(boolean prettyPrint) {\n     }\n \n     /**\n-     * @see {@link #setPrettyPrint}\n+     * @see #setPrettyPrint\n      */\n     public boolean getPrettyPrint() {\n         return _prettyPrint;\n@@ -114,7 +114,7 @@ public void setPrettyPrintLineLength(int length) {\n     }\n \n     /**\n-     * @see {@link #setPrettyPrintLineLength}\n+     * @see #setPrettyPrintLineLength\n      */\n     public int getPrettyPrintLineLength() {\n         return _prettyPrintLineLength;\n@@ -190,17 +190,6 @@ private SQLException wrap(SQLException sqle, String sql) {\n         return new ReportingSQLException(sqle, sql);\n     }\n \n-    private static String getExceptionMessage(SQLException sqle,\n-        Statement stmnt) {\n-        try {\n-            return sqle.getMessage() + \" {\" + stmnt + \"} \"\n-                + \"[code=\" + sqle.getErrorCode() + \", state=\"\n-                + sqle.getSQLState() + \"]\";\n-        } catch (Throwable t) {\n-            return sqle.getMessage();\n-        }\n-    }\n-\n     /**\n      * Interface that allows customization of what to do when\n      * {@link SQLWarning}s occur."},{"sha":"77800902320721ed8b640c37fbe3009a2f683ca2","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataSerializer.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataSerializer.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -19,7 +19,6 @@\n \n import org.apache.commons.collections.map.LinkedMap;\n import org.xml.sax.SAXException;\n-import org.apache.openjpa.lib.util.Localizer;\n \n /**\n  * Helps serialize metadata objects to package and class elements.\n@@ -30,9 +29,6 @@\n  */\n public abstract class CFMetaDataSerializer extends XMLMetaDataSerializer {\n \n-    private static final Localizer _loc = Localizer.forPackage\n-        (CFMetaDataSerializer.class);\n-\n     private String _package = null;\n \n     /**"},{"sha":"6d6a4fd0547d7e79e5ecabce2a678eb368d51040","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassMetaDataIterator.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassMetaDataIterator.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -41,7 +41,6 @@\n     private int _loc = -1;\n     private final List _urls = new ArrayList(3);\n     private int _url = -1;\n-    private URL _last = null;\n \n     /**\n      * Constructor; supply the class whose metadata to find, the suffix"},{"sha":"1fa56109969400a08eed2f183aefd6a755474714","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataSerializer.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataSerializer.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -36,7 +36,7 @@\n      * not be included in the output.\n      *\n      * @param flags bit flags specifying the output flags; e.g.\n-     * {@link PRETTY #PRETTY}\n+     * {@link #PRETTY}\n      */\n     public void serialize(int flags) throws IOException;\n \n@@ -49,23 +49,23 @@\n      * keys that are the {@link File} instances, and\n      * values that are the {@link String} contents of the metadata\n      * @param flags bit flags specifying the output flags; e.g.\n-     * {@link PRETTY #PRETTY}\n+     * {@link #PRETTY}\n      */\n     public void serialize(Map output, int flags) throws IOException;\n \n     /**\n      * Serialize the current set of objects to the given file.\n      *\n      * @param flags bit flags specifying the output flags; e.g.\n-     * {@link PRETTY #PRETTY} | {@link APPEND #APPEND}\n+     * {@link #PRETTY} | {@link #APPEND}\n      */\n     public void serialize(File file, int flags) throws IOException;\n \n     /**\n      * Serialize the current set of objects to the given stream.\n      *\n      * @param flags bit flags specifying the output flags; e.g.\n-     * {@link PRETTY #PRETTY}\n+     * {@link #PRETTY}\n      */\n     public void serialize(Writer out, int flags) throws IOException;\n }"},{"sha":"8c4aa9449a111705a4bb38696260e7234b4d751a","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -399,18 +399,6 @@ protected boolean parsed(String src) {\n         return !added;\n     }\n \n-    /**\n-     * Whether we previously parsed the given file.\n-     */\n-    private boolean parsed(File file, String cur) throws IOException {\n-        if (file == null)\n-            return false;\n-        String src = file.getCanonicalFile().toURL().toString();\n-        if (src.equals(cur))\n-            return false;\n-        return parsed(src);\n-    }\n-\n     public void clear() {\n         if (_log != null && _log.isTraceEnabled())\n             _log.trace(_loc.get(\"clear-parser\", this));"},{"sha":"e92c3d9ee3d6f294451b267fd15cc2272c230bbb","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -425,7 +425,6 @@ public void save(OutputStream out, String header) {\n \n     public void store(OutputStream out, String header) throws IOException {\n         boolean endWithNewline = source != null && source.endsInNewline;\n-        boolean firstLine = true;\n \n         // Must be ISO-8859-1 ecoding according to Properties.load javadoc\n         PrintWriter writer = new PrintWriter"},{"sha":"08b44ffb04dd73d31387fed8dba955123e1f1991","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -294,7 +294,7 @@ private static boolean matchOptionToMember(String key, Object[] match)\n         // setter with more than 1 arg is ignored; calc setter and getter\n         // name to look for\n         String[] find = Strings.split(key, \".\", 2);\n-        String base = StringUtils.capitalise(find[0]);\n+        String base = StringUtils.capitalize(find[0]);\n         String set = \"set\" + base;\n         String get = \"get\" + base;\n \n@@ -331,7 +331,7 @@ else if (params.length == setMeth.getParameterTypes().length\n         Member getter = getMeth;\n         if (setter == null) {\n             Field[] fields = type.getFields();\n-            String uncapBase = StringUtils.uncapitalise(find[0]);\n+            String uncapBase = StringUtils.uncapitalize(find[0]);\n             for (int i = 0; i < fields.length; i++) {\n                 if (fields[i].getName().equals(base)\n                     || fields[i].getName().equals(uncapBase)) {"},{"sha":"f1eda0e4452b2562bfb6a9829fd4cad097d454bb","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ZipResourceBundleProvider.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ZipResourceBundleProvider.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ZipResourceBundleProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ZipResourceBundleProvider.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -40,7 +40,6 @@ public ResourceBundle findResource(String name, Locale locale,\n             return null;\n \n         ZipInputStream zip = new ZipInputStream(in);\n-        ResourceBundle bundle = null;\n         try {\n             ZipEntry ze;\n             while (true) {"},{"sha":"a5e232c2012c58746a36b4f45d9b577a72a363cb","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashMap.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashMap.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashMap.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -920,7 +920,9 @@ private void readObject(ObjectInputStream s)\n \n         // Read in size(number of Mappings)\n         int size = s.readInt();\n-        int maxSize = s.readInt();\n+        \n+        // read the max size\n+        maxSize = s.readInt();\n \n         // Read the keys and values, and put the mappings in the\n         // ConcurrentHashMap"},{"sha":"44ebb0efac95f11d186667778cd7fdabd805f272","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CopyOnWriteArrayList.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CopyOnWriteArrayList.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CopyOnWriteArrayList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/CopyOnWriteArrayList.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -227,7 +227,6 @@ public boolean addAll(int index, Collection c) {\n             Object[] newarr = new Object[length + ca.length];\n             int moved = length - index;\n             System.arraycopy(oldarr, 0, newarr, 0, index);\n-            int pos = length;\n             System.arraycopy(ca, 0, newarr, index, ca.length);\n             if (moved > 0) {\n                 System"},{"sha":"51a3e7bed240bf05bc12b7f64234b805a36e468e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/FIFOWaitQueue.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/FIFOWaitQueue.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/FIFOWaitQueue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/FIFOWaitQueue.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -73,7 +73,6 @@ public int getLength() {\n \n     public Collection getWaitingThreads() {\n         List list = new ArrayList();\n-        int count = 0;\n         WaitNode node = head_;\n         while (node != null) {\n             if (node.waiting) list.add(node.owner);"},{"sha":"c288f4c6e3315382f5f610518191d77434209a7c","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -26,8 +26,7 @@\n import org.apache.openjpa.lib.test.AbstractTestCase;\n \n /**\n- * Tests the {@link ConfigurationImpl} type, and in so doing tests\n- * the {@link AbstractConfiguration} as well. This needs to be placed\n+ * Tests the {@link ConfigurationImpl} type. This needs to be placed\n  * in a sub-package so that it can have its own localizer.properties\n  * properties, which are required for the bean descriptors used by the\n  * configuration framework {@link Value}."},{"sha":"9007068e135d6512b74260f340fb2e1115c8c68d","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java","status":"modified","additions":2,"deletions":9,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -480,7 +480,7 @@ public void mttest(int serialCount, int threads, int iterations)\n     /**\r\n      * Execute a test method in multiple threads.\r\n      *\r\n-     * @param thread the number of Threads to run in\r\n+     * @param threads the number of Threads to run in\r\n      * @param iterations the number of times the method should\r\n      * be execute in a single Thread\r\n      * @param method the name of the method to execute\r\n@@ -782,7 +782,7 @@ public boolean timeout(long millis) throws Throwable {\n     }\r\n \r\n     /**\r\n-     * @see timeout(long)\r\n+     * @see #timeout(long)\r\n      */\r\n     public boolean timeout(long millis, String methodName) throws Throwable {\r\n         // we are in the timing out-thread: do nothing so the\r\n@@ -1382,13 +1382,6 @@ public static void assertNotMatches(String regex, Collection input) {\n         }\r\n     }\r\n \r\n-    private static String trim(String str, int max) {\r\n-        if (str.length() < max)\r\n-            return str;\r\n-\r\n-        return str.substring(0, max) + \"...\";\r\n-    }\r\n-\r\n     /**\r\n      * To be called by the child. E.g.:\r\n      * <code> public static void main(String [] args) { main(TestBug375.class);\r"},{"sha":"80e0c82ff517476a15fe764e6eb9df1593958e6a","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestReferenceSet.java","status":"modified","additions":0,"deletions":14,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestReferenceSet.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestReferenceSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestReferenceSet.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -112,18 +112,4 @@ public void testChangeValue() {\n         _coll.add(\"foo\");\n         assertTrue(_coll.contains(held));\n     }\n-\n-    /**\n-     * Used to test inherited functionality.\n-     */\n-    private static final class Node {\n-\n-        public int hashCode() {\n-            return 1;\n-        }\n-\n-        public boolean equals(Object other) {\n-            return true;\n-        }\n-    }\n }"},{"sha":"52599f99a79b361b6c29313969495b7534212efd","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -870,7 +870,6 @@ private void recordCallbacks(ClassMetaData cls,\n      * Create fetch groups.\n      */\n     private void parseFetchGroups(ClassMetaData meta, FetchGroup... groups) {\n-        MetaDataRepository repos = getRepository();\n         for (FetchGroup group : groups) {\n             if (StringUtils.isEmpty(group.name()))\n                 throw new MetaDataException(_loc.get(\"unnamed-fg\", meta));\n@@ -1483,7 +1482,6 @@ private void parseSequenceGenerator(AnnotatedElement el,\n      */\n     private void parseNamedQueries(AnnotatedElement el, NamedQuery... queries) {\n         QueryMetaData meta;\n-        QueryHint[] hints;\n         for (NamedQuery query : queries) {\n             if (StringUtils.isEmpty(query.name()))\n                 throw new MetaDataException(_loc.get(\"no-query-name\", el));"},{"sha":"57b5ffb37567e922a519fade6f5a99198f634104","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -437,7 +437,7 @@\n      * Validate the changes made in this transaction, reporting any optimistic\n      * violations, constraint violations, etc.  In a datastore transaction or\n      * a flushed optimistic transaction, this method will act just like\n-     * {@link #flush}.  In an optimistic transaction that has not yet begun a\n+     * {@link #flush()}.  In an optimistic transaction that has not yet begun a\n      * datastore-level transaction, however, it will only report exceptions\n      * that would occur on flush, without retaining any datastore resources.\n      */"},{"sha":"6fa9c6b182c2230b81808fc8eb87fc5d0114b485","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataSerializer.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataSerializer.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -1142,13 +1142,6 @@ protected void addStrategyMappingAttributes(FieldMetaData fmd)\n             addAttribute(\"mapped-by\", fmd.getMappedBy());\n     }\n \n-    /**\n-     * Serialize the content of the given value.  Does nothing by default.\n-     */\n-    private void serializeStrategyMappingContent(FieldMetaData vmd)\n-        throws SAXException {\n-    }\n-\n     /**\n      * Represents ordered set of {@link SequenceMetaData}s with a\n      * common class scope."},{"sha":"76f5006d23f1757c9efc15aac01f4570d8493586","filename":"openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/4ddf63ea3f0ed80c6efa8877201d909900965244/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java?ref=4ddf63ea3f0ed80c6efa8877201d909900965244","patch":"@@ -31,7 +31,6 @@\n import org.apache.openjpa.kernel.FetchState;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.PCState;\n-import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.rop.ListResultObjectProvider;\n import org.apache.openjpa.lib.rop.ResultObjectProvider;\n import org.apache.openjpa.meta.ClassMetaData;\n@@ -52,7 +51,6 @@\n \n     private XMLConfiguration _conf;\n     private XMLStore _store;\n-    private Log _log;\n \n     // changed data within the current transaction\n     private Collection _updates;\n@@ -81,7 +79,6 @@ protected void open() {\n         // cache operational state\n         _conf = (XMLConfiguration) ctx.getConfiguration();\n         _store = _conf.getStore();\n-        _log = _conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n     }\n \n     public boolean exists(OpenJPAStateManager sm, Object context) {"}]}

