{"sha":"4e6a98f6344ea3e1819415709468cc1294910adc","node_id":"MDY6Q29tbWl0MjA2MzY0OjRlNmE5OGY2MzQ0ZWEzZTE4MTk0MTU3MDk0NjhjYzEyOTQ5MTBhZGM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-18T20:27:30Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-18T20:27:30Z"},"message":"OPENJPA-849,OPENJPA-1251: Property management, hidden values\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@805567 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1de8e4fe7a622c5dc0a02907d98e3d1192118551","url":"https://api.github.com/repos/apache/openjpa/git/trees/1de8e4fe7a622c5dc0a02907d98e3d1192118551"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4e6a98f6344ea3e1819415709468cc1294910adc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4e6a98f6344ea3e1819415709468cc1294910adc","html_url":"https://github.com/apache/openjpa/commit/4e6a98f6344ea3e1819415709468cc1294910adc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4e6a98f6344ea3e1819415709468cc1294910adc/comments","author":null,"committer":null,"parents":[{"sha":"814341420defa42f85c224b5c9f3da01048333e4","url":"https://api.github.com/repos/apache/openjpa/commits/814341420defa42f85c224b5c9f3da01048333e4","html_url":"https://github.com/apache/openjpa/commit/814341420defa42f85c224b5c9f3da01048333e4"}],"stats":{"total":732,"additions":368,"deletions":364},"files":[{"sha":"2f7fa17e4ab9ee1e537fa9338b465d69e01e053b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/4e6a98f6344ea3e1819415709468cc1294910adc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/4e6a98f6344ea3e1819415709468cc1294910adc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCBrokerFactory.java?ref=4e6a98f6344ea3e1819415709468cc1294910adc","patch":"@@ -87,17 +87,16 @@ public JDBCBrokerFactory(JDBCConfiguration conf) {\n         super(conf);\n     }\n \n-    public Properties getProperties() {\n+    public Map<String,Object> getProperties() {\n         // add platform property\n-        Properties props = super.getProperties();\n+        Map<String,Object> props = super.getProperties();\n         String db = \"Unknown\";\n         try {\n             JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\n             db = conf.getDBDictionaryInstance().platform;\n         } catch (RuntimeException re) {\n         }\n-        props.setProperty(\"Platform\",\n-            \"OpenJPA JDBC Edition: \" + db + \" Database\");\n+        props.put(\"Platform\", \"OpenJPA JDBC Edition: \" + db + \" Database\");\n \n         return props;\n     }"},{"sha":"9e815c80c55f016f98863168cd28e45c607c701c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/4e6a98f6344ea3e1819415709468cc1294910adc/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/4e6a98f6344ea3e1819415709468cc1294910adc/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java?ref=4e6a98f6344ea3e1819415709468cc1294910adc","patch":"@@ -121,9 +121,9 @@ protected AbstractStoreBrokerFactory(OpenJPAConfiguration conf,\n         _platform = platform;\n     }\n \n-    public Properties getProperties() {\n-        Properties props = super.getProperties();\n-        props.setProperty(\"Platform\", _platform);\n+    public Map<String,Object> getProperties() {\n+        Map<String,Object> props = super.getProperties();\n+        props.put(\"Platform\", _platform);\n         return props;\n     }\n "},{"sha":"d654bf20d8c20d914cce2c22c91064aa86045640","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":13,"deletions":60,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/4e6a98f6344ea3e1819415709468cc1294910adc/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/4e6a98f6344ea3e1819415709468cc1294910adc/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=4e6a98f6344ea3e1819415709468cc1294910adc","patch":"@@ -24,11 +24,9 @@\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Iterator;\n-import java.util.LinkedHashSet;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n-import java.util.Properties;\n import java.util.Set;\n import java.util.TreeSet;\n import java.util.concurrent.ConcurrentHashMap;\n@@ -66,7 +64,6 @@\n import org.apache.openjpa.writebehind.WriteBehindCache;\n import org.apache.openjpa.writebehind.WriteBehindCallback;\n import org.apache.openjpa.writebehind.WriteBehindConfigurationException;\n-import org.apache.openjpa.writebehind.WriteBehindException;\n import org.apache.openjpa.writebehind.WriteBehindStoreManager;\n \n /**\n@@ -117,10 +114,7 @@\n \n     // key under which this instance can be stored in the broker pool\n     // and later identified\n-    private Object _poolKey;\n-    \n-    // Set of properties supported for the EntityManagerFactory\n-    private Set<String> _supportedPropertyNames = new TreeSet<String>();\n+    private Object _poolKey;   \n     \n     private WriteBehindCallback _writeBehindCallback; \n \n@@ -180,27 +174,22 @@ public OpenJPAConfiguration getConfiguration() {\n     }\n \n     public Broker newBroker() {\n-        return newBroker(_conf.getConnectionUserName(),\n-            _conf.getConnectionPassword());\n+        return newBroker(_conf.getConnectionUserName(), _conf.getConnectionPassword());\n     }\n \n     public Broker newBroker(String user, String pass) {\n-        return newBroker(user, pass, _conf.isTransactionModeManaged(),\n-            _conf.getConnectionRetainModeConstant());\n+        return newBroker(user, pass, _conf.isTransactionModeManaged(), _conf.getConnectionRetainModeConstant());\n     }\n \n     public Broker newBroker(boolean managed, int connRetainMode) {\n-        return newBroker(_conf.getConnectionUserName(),\n-            _conf.getConnectionPassword(), managed, connRetainMode);\n+        return newBroker(_conf.getConnectionUserName(), _conf.getConnectionPassword(), managed, connRetainMode);\n     }\n \n-    public Broker newBroker(String user, String pass, boolean managed,\n-        int connRetainMode) {\n+    public Broker newBroker(String user, String pass, boolean managed, int connRetainMode) {\n         return newBroker(user, pass, managed, connRetainMode, true);\n     }\n \n-    public Broker newBroker(String user, String pass, boolean managed,\n-        int connRetainMode, boolean findExisting) {\n+    public Broker newBroker(String user, String pass, boolean managed, int connRetainMode, boolean findExisting) {\n         try {\n             assertOpen();\n             makeReadOnly();\n@@ -430,52 +419,17 @@ public void close() {\n      * property listing the runtime platform, such as:\n      * <code>OpenJPA JDBC Edition: Oracle Database</code>\n      */\n-    public Properties getProperties() {\n+    public Map<String,Object> getProperties() {\n         // required props are VendorName and VersionNumber\n-        Properties props = new Properties();\n-        props.setProperty(\"VendorName\", OpenJPAVersion.VENDOR_NAME);\n-        props.setProperty(\"VersionNumber\", OpenJPAVersion.VERSION_NUMBER);\n-        props.setProperty(\"VersionId\", OpenJPAVersion.VERSION_ID);\n+        Map<String,Object> props = _conf.toProperties(true);\n+        props.put(\"VendorName\", OpenJPAVersion.VENDOR_NAME);\n+        props.put(\"VersionNumber\", OpenJPAVersion.VERSION_NUMBER);\n+        props.put(\"VersionId\", OpenJPAVersion.VERSION_ID);\n         return props;\n     }\n \n-    public Map<String, String> getAllProperties() {\n-        Map<String, String> propertiesMap = _conf.getAllProperties();\n-        Properties properties = getProperties();\n-        Set<Object> propKeys = properties.keySet();\n-        for (Object key : propKeys) {\n-            String keyString = (String) key;\n-            propertiesMap.put(keyString, (String) properties\n-                .getProperty(keyString));\n-        }\n-\n-        return propertiesMap;\n-    }\n-    \n     public Set<String> getSupportedProperties() {\n-        if (_supportedPropertyNames.isEmpty()) {\n-            synchronized (_supportedPropertyNames) {\n-                if (_supportedPropertyNames.isEmpty()) {\n-                    _supportedPropertyNames.add(\"AutoClear\");\n-                    _supportedPropertyNames.add(\"AutoDetach\");\n-                    _supportedPropertyNames.add(\"DetachState\");\n-                    _supportedPropertyNames.add(\"IgnoreChanges\");\n-                    _supportedPropertyNames.add(\"LockTimeout\");\n-                    _supportedPropertyNames.add(\"Multithreaded\");\n-                    _supportedPropertyNames.add(\"NontransactionalRead\");\n-                    _supportedPropertyNames.add(\"NontransactionalWrite\");\n-                    _supportedPropertyNames.add(\"Optimistic\");\n-                    _supportedPropertyNames.add(\"RestoreState\");\n-                    _supportedPropertyNames.add(\"RetainState\");\n-                }\n-            }\n-        }\n-        Set<String> supportedProperties = new LinkedHashSet<String>();\n-        for (String propertyName : _supportedPropertyNames) {\n-            supportedProperties.addAll(_conf.getPropertyKeys(propertyName));\n-        }\n-        \n-        return supportedProperties;\n+        return _conf.getPropertyKeys();\n     }\n \n     public Object getUserObject(Object key) {\n@@ -651,8 +605,7 @@ protected void configureBroker(BrokerImpl broker) {\n         broker.setIgnoreChanges(_conf.getIgnoreChanges());\n         broker.setMultithreaded(_conf.getMultithreaded());\n         broker.setAutoDetach(_conf.getAutoDetachConstant());\n-        broker.setDetachState(_conf.getDetachStateInstance().\n-            getDetachState());\n+        broker.setDetachState(_conf.getDetachStateInstance().getDetachState());\n     }\n \n     /**"},{"sha":"021214d2b9d34a0afc29c298c5064373cf7fcbad","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/4e6a98f6344ea3e1819415709468cc1294910adc/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","raw_url":"https://github.com/apache/openjpa/raw/4e6a98f6344ea3e1819415709468cc1294910adc/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java?ref=4e6a98f6344ea3e1819415709468cc1294910adc","patch":"@@ -200,7 +200,7 @@ public void setImplicitBehavior(OpCallbacks call,\n      * \n      * @since 2.0.0\n      */\n-    public Map<String, String> getProperties();\n+    public Map<String, Object> getProperties();\n     \n     /**\n      * Return the supported properties for this broker as property keys. If a"},{"sha":"08672d4c1cb763343a8fcfd55a941613cf2c1142","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBrokerFactory.java","status":"modified","additions":1,"deletions":9,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/4e6a98f6344ea3e1819415709468cc1294910adc/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/4e6a98f6344ea3e1819415709468cc1294910adc/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBrokerFactory.java?ref=4e6a98f6344ea3e1819415709468cc1294910adc","patch":"@@ -106,7 +106,7 @@ public OpenJPAConfiguration getConfiguration() {\n         }\n     }\n \n-    public Properties getProperties() {\n+    public Map<String,Object> getProperties() {\n         try {\n             return _factory.getProperties();\n         } catch (RuntimeException re) {\n@@ -121,14 +121,6 @@ public Properties getProperties() {\n             throw translate(re);\n         }\n     }\n-    \n-    public Map<String, String> getAllProperties() {\n-        try {\n-            return _factory.getAllProperties();\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n \n     public Object putUserObject(Object key, Object val) {\n         try {"},{"sha":"c9a0ca56352d6eebafcb5de039951d6c6ba7a027","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/4e6a98f6344ea3e1819415709468cc1294910adc/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","raw_url":"https://github.com/apache/openjpa/raw/4e6a98f6344ea3e1819415709468cc1294910adc/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java?ref=4e6a98f6344ea3e1819415709468cc1294910adc","patch":"@@ -21,6 +21,7 @@\n import java.beans.BeanInfo;\n import java.beans.PropertyChangeListener;\n import java.io.Serializable;\n+import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n import java.util.Set;\n@@ -164,14 +165,6 @@\n      */\n     public boolean removeValue(Value val);\n     \n-    /**\n-     * Retrieve all properties in this Configuration, including\n-     * those that are null or have the default value.\n-     * Note that changes made to this properties object will\n-     * not be automatically reflected in this Configuration object.\n-     **/\n-    public Map<String, String> getAllProperties();\n-\n     /**\n      * A properties representation of this Configuration.\n      * Note that changes made to this properties object will\n@@ -180,7 +173,7 @@\n      * @param storeDefaults if true, then properties will be written\n      * out even if they match the default value for a property\n      */\n-    public Map<String, String> toProperties(boolean storeDefaults);\n+    public Map toProperties(boolean storeDefaults);\n     \n     /**\n      * Get the set of all known property keys, including any equivalent keys,\n@@ -191,7 +184,15 @@\n      * \n      * @since 2.0.0\n      */\n-    public Set<String> getPropertyKeys(String propertyName);\n+    public List<String> getPropertyKeys(String propertyName);\n+    \n+    /**\n+     * Get the set of all known property keys, including any equivalent keys,\n+     * appropriately prefixed.\n+     * \n+     * @since 2.0.0\n+     */\n+    public Set<String> getPropertyKeys();\n \n     /**\n      * Set this Configuration via the given map. Any keys missing from"},{"sha":"9ea2b787b5bfdf37f2267d9436aae6e15057da4f","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":70,"deletions":62,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/4e6a98f6344ea3e1819415709468cc1294910adc/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4e6a98f6344ea3e1819415709468cc1294910adc/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=4e6a98f6344ea3e1819415709468cc1294910adc","patch":"@@ -118,15 +118,14 @@\n     private boolean _globals = false;\n     private String _auto = null;\n     private final List<Value> _vals = new ArrayList<Value>();\n-\n+    private Set<String> _supportedKeys;\n+    \n     // property listener helper\n     private PropertyChangeSupport _changeSupport = null;\n \n     // cache descriptors\n     private PropertyDescriptor[] _pds = null;\n     private MethodDescriptor[] _mds = null;\n-    \n-    private boolean getVisibleOnly = false;\n \n     /**\n      * Default constructor. Attempts to load default properties through\n@@ -246,15 +245,22 @@ public Log getConfigurationLog() {\n         return (Value[]) _vals.toArray(new Value[_vals.size()]);\n     }\n \n+    /**\n+     * Gets the registered Value for the given propertyName.\n+     * \n+     * @param propertyName can be either fully-qualified name or the simple name\n+     * with which the value has been registered. A value may have multiple\n+     * equivalent names and this method searches with all equivalent names.\n+     */\n     public Value getValue(String property) {\n         if (property == null)\n             return null;\n \n         // search backwards so that custom values added after construction\n         // are found quickly, since this will be the std way of accessing them\n-        for (Value val : _vals) { \n-            if (val.matches(property))\n-                return val;\n+        for (int i = _vals.size()-1; i >= 0; i--) { \n+            if (_vals.get(i).matches(property))\n+                return _vals.get(i);\n         }\n         return null;\n     }\n@@ -324,8 +330,7 @@ public void valueChanged(Value val) {\n \n         String newString = val.getString();\n         if (_changeSupport != null)\n-            _changeSupport.firePropertyChange(val.getProperty(), null,\n-                newString);\n+            _changeSupport.firePropertyChange(val.getProperty(), null, newString);\n \n         // keep cached props up to date\n         if (_props != null) {\n@@ -334,7 +339,7 @@ public void valueChanged(Value val) {\n             else if (Configurations.containsProperty(val, _props)\n                 || val.getDefault() == null\n                 || !val.getDefault().equals(newString))\n-                setValue(_props, val, newString);\n+                setValue(_props, val);\n         }\n     }\n \n@@ -584,8 +589,7 @@ private String findLocalized(String key, boolean fatal, Class<?> scope) {\n      *            whether or not to get all of the properties\n      * @return\n      */\n-    private Map<String, String> toProperties(boolean storeDefaults,\n-        boolean getAll) {\n+    public Map toProperties(boolean storeDefaults) {\n         // clone properties before making any modifications; we need to keep\n         // the internal properties instance consistent to maintain equals and\n         // hashcode contracts\n@@ -601,37 +605,20 @@ else if (_props instanceof Properties)\n         // with default values, add values to properties\n         if (_props == null || storeDefaults) {\n             String str;\n-            for(Value val : _vals) { \n-                // if key in existing properties, we already know value is up\n-                // to date\n-                if (_props != null && Configurations.containsProperty\n-                    (val, _props))\n-                    continue;\n-\n+            for (Value val : _vals) { \n+                // if key in existing properties, we already know value is up to date\n+//                if (_props != null && Configurations.containsProperty(val, _props) && val.isVisible())\n+//                    continue;\n                 str = val.getString();\n-                if (getAll\n-                    || (str != null && (storeDefaults || !str.equals(val\n-                        .getDefault()))))\n-                    setValue(clone, val, str);\n+                if ((str != null && (storeDefaults || !str.equals(val.getDefault()))))\n+                    setValue(clone, val);\n             }\n             if (_props == null)\n                 _props = new TreeMap(clone);\n         }\n         return clone;\n     }\n     \n-    public Map<String, String> getAllProperties() {\n-        boolean saveGetVisibleOnly = getVisibleOnly;\n-        getVisibleOnly = true;\n-        Map<String, String> properties = toProperties(true, true);\n-        getVisibleOnly = saveGetVisibleOnly;\n-        return properties;\n-    }\n-\n-    public Map<String, String> toProperties(boolean storeDefaults) {\n-        return toProperties(storeDefaults, false);\n-    }\n-\n     public void fromProperties(Map map) {\n         if (map == null || map.isEmpty())\n             return;\n@@ -694,47 +681,68 @@ else if (map instanceof Properties)\n             _props = map;\n     }\n     \n-    public Set<String> getPropertyKeys(String propertyName) {\n-        Set<String> keys = new TreeSet<String>();\n-        Map<String,String> properties = getAllProperties();\n+    public List<String> getPropertyKeys(String propertyName) {\n         Value value = getValue(propertyName);\n-        keys.add(ProductDerivations.getConfigurationKey(value.getProperty(),\n-            properties));\n-        keys.addAll(value.getEquivalentKeys());\n-        return keys;\n+        return value == null ? Collections.EMPTY_LIST : value.getPropertyKeys();\n+    }\n+    \n+    /**\n+     * Gets all known property keys.\n+     */\n+    public Set<String> getPropertyKeys() {\n+        if (_supportedKeys != null) \n+            return _supportedKeys;\n+        \n+        _supportedKeys = new TreeSet<String>();\n+        for (Value val : _vals) {\n+            List<String> keys = val.getPropertyKeys();\n+            for (String key : keys) {\n+                _supportedKeys.add(fixPrefix(key));\n+            }\n+        }\n+        return _supportedKeys;\n+    }\n+    \n+    /**\n+     * Adds a prefix <code>\"openjpa.\"</code> to the given key, if necessary. A key is \n+     * considered without prefix if it starts neither of <code>\"openjpa.\"</code>, \n+     * <code>\"java.\"</code> and <code>\"javax.\"</code>. \n+     */\n+    String fixPrefix(String key) {\n+        return (key == null || hasKnownPrefix(key)) ? key : \"openjpa.\"+key;\n+    }\n+    \n+    boolean hasKnownPrefix(String key) {\n+        String[] prefixes = ProductDerivations.getConfigurationPrefixes();\n+        for (String prefix : prefixes) {\n+            if (key.startsWith(prefix))\n+                return true;\n+        }\n+        return false;\n     }\n \n     /**\n      * Adds <code>o</code> to <code>map</code> under key for <code>val</code>.\n      * Use this method instead of attempting to add the value directly because \n      * this will account for the property prefix.\n      */\n-    private void setValue(Map map, Value val, Object o) {\n+    private void setValue(Map map, Value val) {\n         Object key = val.getLoadKey();\n-        // TODO: This change can be removed later when Value.setLoadKey() no\n-        // longer throws an exception. Then, we can use setLoadKey() at \n-        // creation time for the spec keys.\n         if (key == null) {\n-            Set<String> equivalentKeys = val.getEquivalentKeys();\n-            if (equivalentKeys.isEmpty()) {\n-                key = \"openjpa.\" + val.getProperty();\n-            }\n-            else {\n-                for (String equivalentKey : equivalentKeys) {\n-                    if (equivalentKey.startsWith(\"javax.persistence.\")) {\n-                        key = equivalentKey;\n-                        break;\n-                    }\n-                }\n-                if (key == null) {\n-                    key = \"openjpa.\" + val.getProperty();\n+            List<String> keys = val.getPropertyKeys();\n+            for (String k : keys) {\n+                if (hasKnownPrefix(k)) {\n+                    key = k;\n+                    break;\n                 }\n             }\n+            if (key == null) {\n+                key = \"openjpa.\" + val.getProperty();\n+            }\n         }\n-        if (getVisibleOnly && !val.isVisible()) {\n-            return;\n-        }\n-        map.put(key, o);\n+        Object external = val.isVisible() ? val instanceof ObjectValue \n+                ? val.getString() : val.get() : Value.INVISIBLE;\n+        map.put(key, external);\n     }\n \n     /**"},{"sha":"b3d6ea24f8344555e5cb980c3d70ed0c068a41ca","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/4e6a98f6344ea3e1819415709468cc1294910adc/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","raw_url":"https://github.com/apache/openjpa/raw/4e6a98f6344ea3e1819415709468cc1294910adc/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java?ref=4e6a98f6344ea3e1819415709468cc1294910adc","patch":"@@ -677,11 +677,8 @@ public static Object getProperty(String partialKey, Map m) {\n     public static Object removeProperty(String partialKey, Map props) {\n         if (partialKey == null || props == null || props.isEmpty())\n             return null;\n-        if (containsProperty(partialKey, props))\n-            return props.remove(ProductDerivations.getConfigurationKey(\n-                partialKey, props));\n-        else\n-            return null;\n+        String fullKey = ProductDerivations.getConfigurationKey(partialKey, props);\n+        return props.remove(fullKey);\n     }\n \n     /**"},{"sha":"d4c09cca0a9e66a6e2fdb5e86bed7f369ea24035","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/IntValue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/4e6a98f6344ea3e1819415709468cc1294910adc/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/IntValue.java","raw_url":"https://github.com/apache/openjpa/raw/4e6a98f6344ea3e1819415709468cc1294910adc/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/IntValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/IntValue.java?ref=4e6a98f6344ea3e1819415709468cc1294910adc","patch":"@@ -51,7 +51,7 @@ public void set(int value) {\n     /**\n      * The internal value.\n      */\n-    public int get() {\n+    public Integer get() {\n         return this.value;\n     }\n "},{"sha":"76e1ca5eebae1e7174c2129b3c38f5201601cc6f","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","status":"modified","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/4e6a98f6344ea3e1819415709468cc1294910adc/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","raw_url":"https://github.com/apache/openjpa/raw/4e6a98f6344ea3e1819415709468cc1294910adc/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java?ref=4e6a98f6344ea3e1819415709468cc1294910adc","patch":"@@ -104,16 +104,13 @@\n             derivations.toArray(new ProductDerivation[derivations.size()]);\n \n         List<String> prefixes = new ArrayList<String>(2);\n+        prefixes.add(\"openjpa\");\n         for (int i = 0; i < _derivations.length; i++) {\n-            if (_derivations[i].getConfigurationPrefix() != null\n-                && !\"openjpa\".equals(_derivations[i].getConfigurationPrefix()))\n-                prefixes.add(_derivations[i].getConfigurationPrefix());\n+            String prefix = _derivations[i].getConfigurationPrefix();\n+            if (prefix != null && !\"openjpa\".equals(prefix))\n+                prefixes.add(prefix);\n         }\n-        String[] prefixArray = new String[1 + prefixes.size()];\n-        prefixArray[0] = \"openjpa\";\n-        for (int i = 0; i < prefixes.size(); i++)\n-            prefixArray[i + 1] = (String) prefixes.get(i);\n-        setConfigurationPrefixes(prefixArray);\n+        _prefixes = prefixes.toArray(new String[prefixes.size()]);\n     }\n \n     /**"},{"sha":"bcbaf7ea1cd30f355501a3538307bb9017237e0b","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestValue.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/4e6a98f6344ea3e1819415709468cc1294910adc/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestValue.java","raw_url":"https://github.com/apache/openjpa/raw/4e6a98f6344ea3e1819415709468cc1294910adc/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestValue.java?ref=4e6a98f6344ea3e1819415709468cc1294910adc","patch":"@@ -39,6 +39,10 @@ protected void setInternalObject(Object obj) {\n         protected void setInternalString(String str) {\n         }\n         \n+        public Object get() {\n+            return null;\n+        }\n+        \n     }\n     \n     public void testSetAliasesByValue() {\n@@ -96,5 +100,4 @@ public void testEquivalentValuesAreUnmodifable() {\n             fail();\n         }\n     }\n-    \n }"},{"sha":"21f12bf7b5bba739ec59ada658323d3cff84e308","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPropertiesMethods.java","status":"modified","additions":221,"deletions":96,"changes":317,"blob_url":"https://github.com/apache/openjpa/blob/4e6a98f6344ea3e1819415709468cc1294910adc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPropertiesMethods.java","raw_url":"https://github.com/apache/openjpa/raw/4e6a98f6344ea3e1819415709468cc1294910adc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPropertiesMethods.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPropertiesMethods.java?ref=4e6a98f6344ea3e1819415709468cc1294910adc","patch":"@@ -18,126 +18,114 @@\n  */\n package org.apache.openjpa.persistence.simple;\n \n+import java.util.Arrays;\n+import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n \n-import org.apache.openjpa.kernel.AutoClear;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.openjpa.lib.conf.ProductDerivations;\n import org.apache.openjpa.lib.conf.Value;\n import org.apache.openjpa.persistence.AutoClearType;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n \n /**\n  * This test case tests the getProperties() and getSupportedProperties() methods\n  * for the EntityManager and EntityManagerFactory.\n  * \n  * @author Dianne Richards\n+ * @author Pinaki Poddar\n  * \n  */\n-public class TestPropertiesMethods extends SingleEMFTestCase {\n-    OpenJPAEntityManager em;\n-\n+public class TestPropertiesMethods extends TestCase {\n+    private static final String UNIT_NAME = \"test\";\n+    private static EntityManagerFactory emf;\n+    private OpenJPAEntityManager em;\n+    \n+    @SuppressWarnings(\"unchecked\")\n     public void setUp() throws Exception {\n-        setUp(\"openjpa.DataCacheTimeout\", \"3\",\n-            \"openjpa.ConnectionURL\",\n-            \"jdbc:derby:target/database/jpa-test-database;create=true\");\n-        assertNotNull(emf);\n-        em = emf.createEntityManager();\n-        assertNotNull(em);\n+        if (emf == null) {\n+            Map config = new HashMap();\n+            config.putAll(System.getProperties());\n+            \n+/* numeric   */ config.put(\"openjpa.DataCacheTimeout\", 300);\n+/* num enum  */ config.put(\"openjpa.AutoClear\", 0);\n+/* hidden    */ config.put(\"openjpa.Connection2Password\", \"xyz\");\n+/* plug-in   */ config.put(\"openjpa.ProxyManager\", \"default(TrackChanges=false)\");\n+/* no funky  */ config.put(\"openjpa.DynamicEnhancementAgent\", \"false\");\n+\n+// following properties are not used becuase that makes the test dependent on database specifics\n+/* equiv key */ //config.put(\"javax.persistence.jdbc.url\", \"jdbc:derby:target/database/test;create=true\"); \n+/* prime use */ //config.put(\"openjpa.ConnectionUserName\", \"root\");\n+            \n+            emf = Persistence.createEntityManagerFactory(UNIT_NAME, config);\n+            assertNotNull(emf);\n+        }\n+        em = OpenJPAPersistence.cast(emf.createEntityManager());\n     }\n     \n-    /**\n-     * Test the EntityManager getProperties() method.\n-     */\n-    public void testEMGetProperties() {\n-        Map<String, Object> emProperties = em.getProperties();\n+//    public void testProperties() {\n+//        print(\"EMF Properties\", emf.getProperties());\n+//        print(\"EMF Supported Properties\", emf.getSupportedProperties());\n+//        print(\"EM Properties\", em.getProperties());\n+//        print(\"EM Supported Properties\", emf.getSupportedProperties());\n+//    }\n+    \n+    public void testConfigurationPrefixes() {\n+        String[] prefixes = ProductDerivations.getConfigurationPrefixes();\n+        assertEquals(\"openjpa\", prefixes[0]);\n+        assertTrue(Arrays.asList(prefixes).contains(\"javax.persistence\"));\n+    }\n+    \n+    public void testEMNumericPropertyValueForEnumTypeIsReturnedAsString() {\n+        Map<String, Object> props = em.getProperties();\n \n-        // First, check a default property\n-        String autoClear = (String) emProperties.get(\"openjpa.AutoClear\");\n-        assertEquals(String.valueOf(AutoClear.CLEAR_DATASTORE), autoClear);\n-        \n-        // Next, check that the correct property key is returned for\n-        // some properties that can have 2 keys. The success of this test\n-        // case is dependent on the connection system values that are set\n-        // in the pom.xml file for the test harness. It assumes that the\n-        // system value keys are javax.persistence.jdbc.driver and \n-        // openjpa.ConnectionProperties. If either one of these are changed,\n-        // this test case may fail.\n-        String javaxConnectionDriver =\n-            (String) emProperties.get(\"openjpa.ConnectionDriverName\");\n-        assertNotNull(javaxConnectionDriver);\n-        String openjpaConnectionURL =\n-            (String) emProperties.get(\"openjpa.ConnectionURL\");\n-        assertNotNull(openjpaConnectionURL);\n-        \n-        // Next, check that the javax.persistent property is returned instead\n-        // of the corresponding openjpa one when no value has been set.\n-        boolean javaxUserNameExists =\n-            emProperties.containsKey(\"javax.persistence.jdbc.user\");\n-        assertTrue(javaxUserNameExists);\n-        boolean openjpaUserNameExists =\n-            emProperties.containsKey(\"openjpaConnectionUserName\");\n-        assertFalse(openjpaUserNameExists);\n-        \n-        // Next, change a property and check for the changed value\n-        em.setAutoClear(AutoClearType.ALL);\n-        emProperties = em.getProperties();\n-        autoClear = (String) emProperties.get(\"openjpa.AutoClear\");\n-        assertEquals(String.valueOf(AutoClear.CLEAR_ALL), autoClear);\n-        \n-        // Make sure the password property is not returned.\n-        boolean javaxPasswordExists =\n-            emProperties.containsKey(\"javax.persistence.jdbc.password\");\n-        assertFalse(javaxPasswordExists);\n-        boolean openjpaPasswordExists =\n-            emProperties.containsKey(\"openjpa.ConnectionPassword\");\n-        assertFalse(openjpaPasswordExists);\n-        assertFalse(emProperties.containsKey(\"openjpa.Connection2Password\"));\n-        \n-        // Add a dummy javax.persistence... equivalent key to one of the\n-        // values that can be changed to force the code down a specific path.\n-        Value autoClearValue = emf.getConfiguration().getValue(\"AutoClear\");\n-        assertNotNull(autoClearValue);\n-        autoClearValue.addEquivalentKey(\"javax.persistence.AutoClear\");\n-        emProperties = em.getProperties();\n-        assertFalse(emProperties.containsKey(\"openjpa.AutoClear\"));\n-        assertTrue(emProperties.containsKey(\"javax.persistence.AutoClear\"));\n+        assertProperty(\"openjpa.AutoClear\", props, AutoClearType.DATASTORE);\n+        assertProperty(\"openjpa.IgnoreChanges\", props, Boolean.FALSE);\n     }\n \n+    public void testEMPluginPropertyParameterIsPreserved() {\n+        Map<String,Object> props = emf.getProperties();\n+        Object val = props.get(\"openjpa.ProxyManager\");\n+        assertNotNull(val);\n+        assertTrue(val instanceof String);\n+        String proxyManager = (String)val;\n+        assertEquals(\"default(TrackChanges=false)\", proxyManager);\n+    }\n+    \n     /**\n      * Test the EntityManagerFactory getProperties() method.\n      */\n-    public void testEMFGetProperties() {\n-        Map<String, Object> emfProperties = emf.getProperties();\n-\n-        // First, check a default property\n-        String dataCacheManager =\n-            (String) emfProperties.get(\"openjpa.DataCacheManager\");\n-        assertEquals(\"default\", dataCacheManager);\n+    public void testFactoryPropertiesContainDefaultValue() {\n+        Map<String, Object> props = emf.getProperties();\n \n-        // Next, check a property that was set during emf creation\n-        String dataCacheTimeout =\n-            (String) emfProperties.get(\"openjpa.DataCacheTimeout\");\n-        assertEquals(3, Integer.valueOf(dataCacheTimeout).intValue());\n-\n-        // Next get the Platform value set by the JDBCBrokerFactory\n-        // or possibly a subclass\n-        String platform = (String) emfProperties.get(\"Platform\");\n-        assertNotNull(platform);\n+        assertEquals(\"default\", props.get(\"openjpa.DataCacheManager\"));\n+        assertEquals(300, props.get(\"openjpa.DataCacheTimeout\"));\n+    }\n+    \n+    public void testFactoryPropertiesContainUserSpecifiedValue() {\n+        Map<String, Object> props = emf.getProperties();\n+        assertEquals(new Integer(300), props.get(\"openjpa.DataCacheTimeout\"));\n+    }\n \n-        // Next get one of the values set by the AbstractBrokerFactory\n-        // or possibly a subclass\n-        String vendorName = (String) emfProperties.get(\"VendorName\");\n-        assertNotNull(vendorName);\n+    public void testFactoryPropertiesAddPlatformOrVendor() {\n+        Map<String, Object> props = emf.getProperties();\n+        assertTrue(props.containsKey(\"Platform\"));\n+        assertNotNull(props.containsKey(\"VendorName\"));\n     }\n \n     /**\n      * Test the EntityManagerFactory getSupportedProperties() method.\n      */\n-    public void testEMFGetSupportedProperties() {\n-        Set<String> emfSupportedProperties = emf.getSupportedProperties();\n-        assertNotNull(emfSupportedProperties);\n-        assertTrue(emfSupportedProperties.contains(\"openjpa.IgnoreChanges\"));\n+    public void testFactorySupportedProperties() {\n+        Set<String> props = emf.getSupportedProperties();\n+        assertTrue(props.contains(\"openjpa.IgnoreChanges\"));\n     }\n \n     /**\n@@ -149,16 +137,153 @@ public void testEMGetSupportedProperties() {\n         assertTrue(emSupportedProperties.contains(\"openjpa.AutoDetach\"));\n         \n         // Make sure the all possible keys are returned\n-        assertTrue(emSupportedProperties.contains(\n-            \"javax.persistence.lock.timeout\"));\n+        assertTrue(emSupportedProperties.contains(\"javax.persistence.lock.timeout\"));\n         assertTrue(emSupportedProperties.contains(\"openjpa.LockTimeout\"));\n         \n         // Make sure the spec property for query timeout, that only has one\n         // key, is returned.\n-        assertTrue(emSupportedProperties.contains(\n-            \"javax.persistence.query.timeout\"));\n-        assertFalse(emSupportedProperties.contains(\n-            \"openjpa.javax.persistence.query.timeout\"));\n+        assertTrue(emSupportedProperties.contains(\"javax.persistence.query.timeout\"));\n+        assertFalse(emSupportedProperties.contains(\"openjpa.javax.persistence.query.timeout\"));\n+    }\n+    \n+    /**\n+     * Property values preserve the type in which they were specified in the facade.\n+     * Enumerated property such as AutoClear has different representation in kernel\n+     * (as int) and in facade (as enum). The test verifies that {@link EntityManager#getProperties()} \n+     * return enum type rather than an integer.\n+     */\n+    public void testEMFPropertyValueTypeIsPreserved() {\n+        Map<String, Object> props = emf.getProperties();\n+        \n+        Object autoClear = props.get(\"openjpa.AutoClear\");\n+        print(\"EMF Properties \", props);\n+        assertTrue(\"AutoClear \" + autoClear + \" is of \" + autoClear.getClass(), autoClear instanceof AutoClearType);\n+        assertEquals(AutoClearType.DATASTORE, autoClear);\n+        \n+        Object ignoreChanges = props.get(\"openjpa.IgnoreChanges\");\n+        assertTrue(ignoreChanges instanceof Boolean);\n+    }\n+\n+    public void testEMFPluginPropertyParameterIsPreserved() {\n+        Map<String,Object> props = emf.getProperties();\n+        Object val = props.get(\"openjpa.ProxyManager\");\n+        assertNotNull(val);\n+        assertTrue(val instanceof String);\n+        String proxyManager = (String)val;\n+        assertEquals(\"default(TrackChanges=false)\", proxyManager);\n+    }\n+    \n+    /**\n+     * Certain logical property such as ConnectionUserName can appear under different\n+     * keys such as openjpa.ConnectionUserName or javax.persistence.jdbc.user.\n+     * The key under which the property value appears depends on the key under which\n+     * property value was loaded into the configuration.  \n+     * \n+     */\n+    // Not run because that makes these tests database specific\n+    public void xtestLoadKeyWithEquivalentPropertyKey() {\n+        Map<String, Object> props = emf.getProperties();\n+\n+        // This property was loaded with equivalent javax. key\n+        assertFalse(props.containsKey(\"openjpa.ConnectionURL\"));\n+        assertTrue(props.containsKey(\"javax.persistence.jdbc.url\"));\n     }\n+    \n+    // Not run because that makes these tests database specific\n+    public void xtestLoadKeyWithPrimaryPropertyKey() {\n+        Map<String, Object> props = emf.getProperties();\n+\n+        // This property was loaded with primary openjpa. key\n+        assertTrue(props.containsKey(\"openjpa.ConnectionUserName\"));\n+        assertFalse(props.containsKey(\"javax.persistence.jdbc.user\"));\n+    }\n+    \n+    /**\n+     * Property values preserve the type in which they were specified in the facade.\n+     * Enumerated property such as AutoClear has different representation in kernel\n+     * (as int) and in facade (as enum). The test verifies that {@link EntityManager#getProperties()} \n+     * return enum type rather than an integer.\n+     */\n+    public void testPropertyValueTypeIsPreserved() {\n+        Map<String, Object> props = em.getProperties();\n+        assertProperty(\"openjpa.AutoClear\", props, AutoClearType.DATASTORE);\n+        assertProperty(\"openjpa.IgnoreChanges\", props, Boolean.FALSE);\n+    }\n+\n+    public void testPluginPropertyParameterIsPreserved() {\n+        Map<String,Object> props = emf.getProperties();\n+        assertProperty(\"openjpa.ProxyManager\", props, \"default(TrackChanges=false)\");\n+    }\n+    \n+    /**\n+     * Test that property value changes are reflected when mutated directly.\n+     */\n+    public void testChangePropertyValue() {\n+        Map<String, Object> props = em.getProperties();\n+        Boolean original = (Boolean)props.get(\"openjpa.IgnoreChanges\");\n+        assertNotNull(original);\n+        \n+        Boolean invert = !original.booleanValue();\n+        em.setIgnoreChanges(invert);\n+        \n+        assertProperty(\"openjpa.IgnoreChanges\", em.getProperties(), invert);\n+    }\n+    \n+    /**\n+     * Test that property value changes are reflected when instantiated with configuration.\n+     */\n+    public void testConfiguredPropertyValue() {\n+        Map<String, Object> props = em.getProperties();\n+        Boolean original = (Boolean)props.get(\"openjpa.IgnoreChanges\");\n+        assertNotNull(original);\n+        \n+        Map<String,Boolean> config = new HashMap<String, Boolean>();\n+        Boolean invert = !original.booleanValue();\n+        config.put(\"openjpa.IgnoreChanges\", invert);\n+        \n+        EntityManager em2 = emf.createEntityManager(config);\n+        assertProperty(\"openjpa.IgnoreChanges\", em2.getProperties(), invert);\n+    }\n+\n+    \n+    public void testEquivalentKeysArePresentInSupportedProperties() {\n+        Set<String> keys = em.getSupportedProperties();\n+        assertTrue(keys.contains(\"openjpa.ConnectionURL\"));\n+        assertTrue(keys.contains(\"javax.persistence.jdbc.url\"));\n+    }\n+    \n+    public void testPasswordValuesAreInvisible() {\n+        Map<String, Object> props = em.getProperties();\n+        assertProperty(\"openjpa.Connection2Password\", props, Value.INVISIBLE);\n+    }\n+    \n+    void assertProperty(String prop, Map props) {\n+        assertProperty(prop, props, null);\n+    }\n+    \n+    void assertProperty(String prop, Map props, Object expected) {\n+        assertTrue(prop + \" not present\", props.containsKey(prop));\n+        Object actual = props.get(prop);\n+        if (expected != null) {\n+            assertTrue(prop + \": Actual \" + actual.getClass() + \" does not match expected \" + expected.getClass(),\n+                expected.getClass().isAssignableFrom(actual.getClass()));\n+            assertEquals(prop + \" value does not match\", expected, actual);\n+        }\n+    }\n+    \n+    void print(String message, Map<String, Object> props) {\n+        System.err.println(message);\n+        for (Map.Entry<String, Object> e : props.entrySet()) {\n+            System.err.println(e.getKey() + \":\" + e.getValue() + \" [\" + (e.getValue() == null ?\n+                    \"\" : e.getValue().getClass().getSimpleName()) + \"]\");\n+        }\n+    }\n+    void print(String message, Set<String> props) {\n+        System.err.println(message);\n+        for (String p : props) {\n+            System.err.println(p);\n+        }\n+    }\n+    \n \n }"},{"sha":"da466aea1c8f73b84c940c0802b9ec8175dd3831","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","status":"modified","additions":27,"deletions":101,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/4e6a98f6344ea3e1819415709468cc1294910adc/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4e6a98f6344ea3e1819415709468cc1294910adc/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java?ref=4e6a98f6344ea3e1819415709468cc1294910adc","patch":"@@ -20,46 +20,31 @@\n \n import java.lang.reflect.Constructor;\n import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.util.BitSet;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n-import java.util.LinkedList;\n-import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n import javax.persistence.Cache;\n import javax.persistence.EntityManagerFactory;\n import javax.persistence.PersistenceUnitUtil;\n-import javax.persistence.criteria.QueryBuilder;\n import javax.persistence.spi.LoadState;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n-import org.apache.openjpa.enhance.PersistenceCapable;\n-import org.apache.openjpa.enhance.Reflection;\n-import org.apache.openjpa.enhance.StateManager;\n-import org.apache.openjpa.kernel.AbstractBrokerFactory;\n import org.apache.openjpa.kernel.AutoDetach;\n import org.apache.openjpa.kernel.Broker;\n import org.apache.openjpa.kernel.BrokerFactory;\n import org.apache.openjpa.kernel.DelegatingBrokerFactory;\n import org.apache.openjpa.kernel.DelegatingFetchConfiguration;\n import org.apache.openjpa.kernel.FetchConfiguration;\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.lib.conf.Configurations;\n-import org.apache.openjpa.lib.conf.ProductDerivations;\n import org.apache.openjpa.lib.conf.Value;\n-import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Closeable;\n-import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.persistence.criteria.CriteriaBuilder;\n import org.apache.openjpa.persistence.meta.MetamodelImpl;\n import org.apache.openjpa.persistence.query.OpenJPAQueryBuilder;\n import org.apache.openjpa.persistence.query.QueryBuilderImpl;\n-import org.apache.openjpa.util.OpenJPAException;\n-import serp.util.Strings;\n \n /**\n  * Implementation of {@link EntityManagerFactory} that acts as a\n@@ -68,6 +53,7 @@\n  * @author Marc Prud'hommeaux\n  * @nojavadoc\n  */\n+@SuppressWarnings(\"serial\")\n public class EntityManagerFactoryImpl\n     implements OpenJPAEntityManagerFactory, OpenJPAEntityManagerFactorySPI,\n     Closeable, PersistenceUnitUtil {\n@@ -113,19 +99,11 @@ public OpenJPAConfiguration getConfiguration() {\n         return _factory.getConfiguration();\n     }\n     \n-    /* \n-     * @see javax.persistence.EntityManagerFactory#getProperties()\n-     * \n-     * This does not return the password property.\n-     */\n-    public Map getProperties() {\n-        Map properties = _factory.getAllProperties();\n-        \n-        // Remove the password property\n-        properties.remove(\"javax.persistence.jdbc.password\");\n-        properties.remove(\"openjpa.ConnectionPassword\");\n-        \n-        return properties;\n+    public Map<String,Object> getProperties() {\n+        Map<String,Object> props = _factory.getProperties();\n+        // convert to user readable values\n+        props.putAll(createEntityManager().getProperties());\n+        return props;\n     }\n \n     public Object putUserObject(Object key, Object val) {\n@@ -172,24 +150,28 @@ public OpenJPAEntityManagerSPI createEntityManager() {\n         return createEntityManager(null);\n     }\n \n+    /**\n+     * Creates and configures a entity manager with the given properties.\n+     *  \n+     * The property keys in the given map can be either qualified or not.\n+     * \n+     * @return list of exceptions raised or empty list.\n+     */\n     public OpenJPAEntityManagerSPI createEntityManager(Map props) {\n         if (props == null)\n             props = Collections.EMPTY_MAP;\n         else if (!props.isEmpty())\n             props = new HashMap(props);\n \n         OpenJPAConfiguration conf = getConfiguration();\n-        String user = (String) Configurations.removeProperty\n-            (\"ConnectionUserName\", props);\n+        String user = (String) Configurations.removeProperty(\"ConnectionUserName\", props);\n         if (user == null)\n             user = conf.getConnectionUserName();\n-        String pass = (String) Configurations.removeProperty\n-            (\"ConnectionPassword\", props);\n+        String pass = (String) Configurations.removeProperty(\"ConnectionPassword\", props);\n         if (pass == null)\n             pass = conf.getConnectionPassword();\n \n-        String str = (String) Configurations.removeProperty\n-            (\"TransactionMode\", props);\n+        String str = (String) Configurations.removeProperty(\"TransactionMode\", props);\n         boolean managed;\n         if (str == null)\n             managed = conf.isTransactionModeManaged();\n@@ -198,94 +180,38 @@ else if (!props.isEmpty())\n             managed = Boolean.parseBoolean(val.unalias(str));\n         }\n \n-        Object obj = Configurations.removeProperty(\"ConnectionRetainMode\", \n-            props);\n+        Object obj = Configurations.removeProperty(\"ConnectionRetainMode\", props);\n         int retainMode;\n-        if (obj instanceof Number)\n+        if (obj instanceof Number) {\n             retainMode = ((Number) obj).intValue();\n-        else if (obj == null)\n+        } else if (obj == null) {\n             retainMode = conf.getConnectionRetainModeConstant();\n-        else {\n+        } else {\n             Value val = conf.getValue(\"ConnectionRetainMode\");\n             try {\n                 retainMode = Integer.parseInt(val.unalias((String) obj));\n             } catch (Exception e) {\n-                throw new ArgumentException(_loc.get(\"bad-em-prop\",\n-                    \"openjpa.ConnectionRetainMode\", obj),\n+                throw new ArgumentException(_loc.get(\"bad-em-prop\", \"openjpa.ConnectionRetainMode\", obj),\n                     new Throwable[]{ e }, obj, true);\n             }\n         }\n \n-        Broker broker = _factory.newBroker(user, pass, managed, retainMode,\n-            false);\n+        Broker broker = _factory.newBroker(user, pass, managed, retainMode, false);\n             \n         // add autodetach for close and rollback conditions to the configuration\n         broker.setAutoDetach(AutoDetach.DETACH_CLOSE, true);\n         broker.setAutoDetach(AutoDetach.DETACH_ROLLBACK, true);\n-        \n         broker.setDetachedNew(false);\n+        \n         OpenJPAEntityManagerSPI em = newEntityManagerImpl(broker);\n \n         // allow setting of other bean properties of EM\n-        String[] prefixes = ProductDerivations.getConfigurationPrefixes();\n-        List<RuntimeException> errs = null;\n-        Method setter;\n-        String prop, prefix;\n-        Object val;\n-        for (Map.Entry entry : (Set<Map.Entry>) props.entrySet()) {\n-            prop = (String) entry.getKey();\n-            prefix = null;\n-            for (int i = 0; i < prefixes.length; i++) {\n-                prefix = prefixes[i] + \".\";\n-                if (prop.startsWith(prefix))\n-                    break;\n-                prefix = null; \n-            } \n-            if (prefix == null)\n-                continue; \n-            prop = prop.substring(prefix.length());\n-            try {\n-                setter = Reflection.findSetter(em.getClass(), prop, true);\n-            } catch (OpenJPAException ke) {\n-                if (errs == null)\n-                    errs = new LinkedList<RuntimeException>();\n-                errs.add(PersistenceExceptions.toPersistenceException(ke));\n-                continue;\n-            }\n-\n-            val = entry.getValue();\n-            try {\n-                if (val instanceof String) {\n-                    if (\"null\".equals(val))\n-                        val = null;\n-                    else\n-                        val = Strings.parse((String) val,\n-                            setter.getParameterTypes()[0]);\n-                }\n-                Reflection.set(em, setter, val);\n-            } catch (Throwable t) {\n-                while (t.getCause() != null)\n-                    t = t.getCause();\n-                ArgumentException err = new ArgumentException(_loc.get\n-                    (\"bad-em-prop\", prop, entry.getValue()),\n-                    new Throwable[]{ t }, null, true);\n-                if (errs == null)\n-                    errs = new LinkedList<RuntimeException>();\n-                errs.add(err);\n-            }\n-        }\n-\n-        if (errs != null) {\n-            em.close();\n-            if (errs.size() == 1)\n-                throw errs.get(0);\n-            throw new ArgumentException(_loc.get(\"bad-em-props\"),\n-                errs.toArray(new Throwable[errs.size()]),\n-                null, true);\n+        for (Object key : props.keySet()) {\n+            em.setProperty(key.toString(), props.get(key));\n         }\n         return em;\n     }\n-\n+    \n     /**\n      * Create a new entity manager around the given broker.\n      */"},{"sha":"59cfbae55dbc1cafc44afb26afd1b816194baa2d","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/4e6a98f6344ea3e1819415709468cc1294910adc/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4e6a98f6344ea3e1819415709468cc1294910adc/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java?ref=4e6a98f6344ea3e1819415709468cc1294910adc","patch":"@@ -485,17 +485,20 @@ Map createSliceProperties(Map original, String slice) {\n         String prefix = PREFIX_SLICE + slice + DOT;\n         for (Object o : original.keySet()) {\n             String key = o.toString();\n+            Object value = original.get(key);\n+            if (value == null)\n+                continue;\n             if (key.startsWith(prefix)) {\n                 String newKey = PREFIX_OPENJPA + key.substring(prefix.length());\n-                result.put(newKey, original.get(o));\n+                result.put(newKey, value);\n             } else if (key.startsWith(PREFIX_SLICE)) {\n                 // ignore keys that are in 'slice.' namespace but not this slice\n             } else if (key.startsWith(PREFIX_OPENJPA)) {\n                 String newKey = prefix + key.substring(PREFIX_OPENJPA.length());\n                 if (!original.containsKey(newKey))\n-                    result.put(key, original.get(o));\n+                    result.put(key, value);\n             } else { // keys that are neither \"openjpa\" nor \"slice\" namespace\n-                result.put(key, original.get(o));\n+                result.put(key, value);\n             }\n         }\n         return result;"}]}

