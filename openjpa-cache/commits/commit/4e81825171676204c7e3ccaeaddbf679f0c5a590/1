{"sha":"4e81825171676204c7e3ccaeaddbf679f0c5a590","node_id":"MDY6Q29tbWl0MjA2MzY0OjRlODE4MjUxNzE2NzYyMDRjN2UzY2NhZWFkZGJmNjc5ZjBjNWE1OTA=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-14T20:17:39Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-14T20:17:39Z"},"message":"OPENJPA-313.  Looks like this patch wasn't quite ready for prime time.  I attempted to re-build and re-test right after applying this change and I got several testcase errors in openjpa-persistence-jdbc.  I revert back ClassMapping.java and the problems go away.  Needs some more work...\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@565896 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"31ba5fda798b03481b077c19c7e55a6950e52d91","url":"https://api.github.com/repos/apache/openjpa/git/trees/31ba5fda798b03481b077c19c7e55a6950e52d91"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4e81825171676204c7e3ccaeaddbf679f0c5a590","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4e81825171676204c7e3ccaeaddbf679f0c5a590","html_url":"https://github.com/apache/openjpa/commit/4e81825171676204c7e3ccaeaddbf679f0c5a590","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4e81825171676204c7e3ccaeaddbf679f0c5a590/comments","author":null,"committer":null,"parents":[{"sha":"26b0e498455ffc4062ff4d06feec1d18ea560572","url":"https://api.github.com/repos/apache/openjpa/commits/26b0e498455ffc4062ff4d06feec1d18ea560572","html_url":"https://github.com/apache/openjpa/commit/26b0e498455ffc4062ff4d06feec1d18ea560572"}],"stats":{"total":30,"additions":2,"deletions":28},"files":[{"sha":"cc6ddc8888bfcb5e08d7bba7284f65a0771fdd24","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","status":"modified","additions":2,"deletions":28,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/4e81825171676204c7e3ccaeaddbf679f0c5a590/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","raw_url":"https://github.com/apache/openjpa/raw/4e81825171676204c7e3ccaeaddbf679f0c5a590/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java?ref=4e81825171676204c7e3ccaeaddbf679f0c5a590","patch":"@@ -30,7 +30,6 @@\n import java.util.Map;\n import java.util.Set;\n \n-import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.strats.NoneClassStrategy;\n@@ -190,33 +189,8 @@ private Object getObjectId(ClassMapping cls, JDBCStore store, Result res,\n             }\n         }\n         Object oid = ApplicationIds.fromPKValues(vals, cls);\n-        if (oid instanceof OpenJPAId) {\n-            Class type = cls.getDescribedType();\n-            if (!subs)\n-                // non-polymorphic relations\n-                ((OpenJPAId) oid).setManagedInstanceType(type);\n-            else if (cls.getDiscriminator() != null\n-                && !StringUtils.equals(\"none\",\n-                    cls.getDiscriminator().getStrategy().getAlias())) {\n-                // for polymorphic relations,\n-                // the type field in the oid is initially set to base type.\n-                // If the discriminator value is preset in the current result,\n-                // then the type field needs reset based on discriminator value.\n-                // If the discriminator value is not present or invalid,\n-                // ignore any exceptions being thrown.\n-                // The discriminator value can potentially be null in the \n-                // database because the mapping tool does not enforce the \n-                // discriminator column 'not null'.\n-                // We can not prevent other non-jpa applications from inserting\n-                // a null or invalid discriminator value.\n-                res.startDataRequest(cls.getDiscriminator());\n-                try {\n-                    type = cls.getDiscriminator().getClass(store, cls, res);\n-                    ((OpenJPAId) oid).setManagedInstanceType(type);\n-                } catch (Exception e) {}\n-                res.endDataRequest();  \n-            } \n-        }\n+        if (!subs && oid instanceof OpenJPAId)\n+            ((OpenJPAId) oid).setManagedInstanceType(cls.getDescribedType());\n         return oid;\n     }\n "}]}

