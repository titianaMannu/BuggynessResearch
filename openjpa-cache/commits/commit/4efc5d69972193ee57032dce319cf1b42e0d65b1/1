{"sha":"4efc5d69972193ee57032dce319cf1b42e0d65b1","node_id":"MDY6Q29tbWl0MjA2MzY0OjRlZmM1ZDY5OTcyMTkzZWU1NzAzMmRjZTMxOWNmMWI0MmUwZDY1YjE=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-02-16T15:23:09Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-02-16T15:23:09Z"},"message":"Revert \"full properties caching\" changes made to ConfigurationImpl -- they're \ncausing problems on some appservers.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@508445 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"81adf6e818a6f0ac4162daf76d2e696da4788f4a","url":"https://api.github.com/repos/apache/openjpa/git/trees/81adf6e818a6f0ac4162daf76d2e696da4788f4a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4efc5d69972193ee57032dce319cf1b42e0d65b1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4efc5d69972193ee57032dce319cf1b42e0d65b1","html_url":"https://github.com/apache/openjpa/commit/4efc5d69972193ee57032dce319cf1b42e0d65b1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4efc5d69972193ee57032dce319cf1b42e0d65b1/comments","author":null,"committer":null,"parents":[{"sha":"dfc102beba2406c0a6065e665b710431245673cc","url":"https://api.github.com/repos/apache/openjpa/commits/dfc102beba2406c0a6065e665b710431245673cc","html_url":"https://github.com/apache/openjpa/commit/dfc102beba2406c0a6065e665b710431245673cc"}],"stats":{"total":98,"additions":45,"deletions":53},"files":[{"sha":"67516add1edfd1df57a6d3618bda9213e5bcd04e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":44,"deletions":52,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/4efc5d69972193ee57032dce319cf1b42e0d65b1/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4efc5d69972193ee57032dce319cf1b42e0d65b1/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=4efc5d69972193ee57032dce319cf1b42e0d65b1","patch":"@@ -107,7 +107,6 @@\n     private String _product = null;\n     private boolean _readOnly = false;\n     private Map _props = null;\n-    private Map _fullProps = null;\n     private boolean _globals = false;\n     private String _auto = null;\n     private final List _vals = new ArrayList();\n@@ -311,7 +310,7 @@ public void removePropertyChangeListener(PropertyChangeListener listener) {\n     }\n \n     public void valueChanged(Value val) {\n-        if (_changeSupport == null && _props == null && _fullProps == null)\n+        if (_changeSupport == null && _props == null)\n             return;\n \n         String newString = val.getString();\n@@ -320,15 +319,12 @@ public void valueChanged(Value val) {\n                 newString);\n \n         // keep cached props up to date\n-        if (newString == null) {\n-            Configurations.removeProperty(val.getProperty(), _props);\n-            Configurations.removeProperty(val.getProperty(), _fullProps);\n-        } else { \n-            put(_fullProps, val, newString); \n-            if (_props != null && _props != _fullProps \n-                && (val.getDefault() == null \n+        if (_props != null) {\n+            if (newString == null)\n+                Configurations.removeProperty(val.getProperty(), _props);\n+            else if (Configurations.containsProperty(val.getProperty(), _props)\n+                || val.getDefault() == null\n                 || !val.getDefault().equals(newString))\n-                || Configurations.containsProperty(val.getProperty(), _props))\n                 put(_props, val, newString);\n         }\n     }\n@@ -570,30 +566,33 @@ public Map toProperties(boolean storeDefaults) {\n         // clone properties before making any modifications; we need to keep\n         // the internal properties instance consistent to maintain equals and\n         // hashcode contracts\n-        Map map = (storeDefaults) ? _fullProps : _props;\n         Map clone;\n-        if (map == null)\n+        if (_props == null)\n             clone = new HashMap();\n-        else if (map instanceof Properties)\n-            clone = (Map) ((Properties) map).clone();\n+        else if (_props instanceof Properties)\n+            clone = (Map) ((Properties) _props).clone();\n         else\n-            clone = new HashMap(map);\n+            clone = new HashMap(_props);\n \n-        if (map == null) {\n+        // if no existing properties or the properties should contain entries\n+        // with default values, add values to properties\n+        if (_props == null || storeDefaults) {\n             Value val;\n             String str;\n             for (int i = 0; i < _vals.size(); i++) {\n+                // if key in existing properties, we already know value is up\n+                // to date\n                 val = (Value) _vals.get(i);\n+                if (_props != null && Configurations.containsProperty\n+                    (val.getProperty(), _props))\n+                    continue;\n+\n                 str = val.getString();\n                 if (str != null && (storeDefaults\n                     || !str.equals(val.getDefault())))\n                     put(clone, val, str);\n             }\n-            if (storeDefaults) {\n-                _fullProps = new HashMap(clone);\n-                if (_props == null)\n-                    _props = _fullProps;\n-            } else\n+            if (_props == null)\n                 _props = new HashMap(clone);\n         }\n         return clone;\n@@ -606,13 +605,15 @@ public void fromProperties(Map map) {\n \n         // if the only previous call was to load defaults, forget them.\n         // this way we preserve the original formatting of the user's props\n-        // instead of the defaults.\n+        // instead of the defaults.  this is important for caching on\n+        // configuration objects\n         if (_globals) {\n             _props = null;\n             _globals = false;\n         }\n \n         Map remaining = new HashMap(map);\n+        boolean ser = true;\n         Value val;\n         Object o;\n         for (int i = 0; i < _vals.size(); i++) {\n@@ -624,8 +625,10 @@ public void fromProperties(Map map) {\n             if (o instanceof String) {\n                 if (!StringUtils.equals((String) o, val.getString()))\n                     val.setString((String) o);\n-            } else\n+            } else {\n+                ser &= o instanceof Serializable;\n                 val.setObject(o);\n+            }\n             Configurations.removeProperty(val.getProperty(), remaining);\n         }\n         \n@@ -636,15 +639,16 @@ public void fromProperties(Map map) {\n         \n         // now warn if there are any remaining properties that there\n         // is an unhandled prop\n-        String key;\n-        for (Iterator itr = remaining.keySet().iterator(); itr.hasNext();) {\n-            key = (String) itr.next();\n-            if (key != null)\n-                warnInvalidProperty(key);\n+        Map.Entry entry;\n+        for (Iterator itr = remaining.entrySet().iterator(); itr.hasNext();) {\n+            entry = (Map.Entry) itr.next();\n+            if (entry.getKey() != null)\n+                warnInvalidProperty((String) entry.getKey());\n+            ser &= entry.getValue() instanceof Serializable;\n         }\n \n-        // cache user-formatted properties\n-        if (_props == null || _props == _fullProps)\n+        // cache properties\n+        if (_props == null && ser)\n             _props = map;\n     }\n \n@@ -654,8 +658,6 @@ public void fromProperties(Map map) {\n      * this will account for the property prefix.\n      */\n     private void put(Map map, Value val, Object o) {\n-        if (map == null)\n-            return;\n         Object key = val.getLoadKey();\n         if (key == null)\n             key = \"openjpa.\" + val.getProperty();\n@@ -666,8 +668,6 @@ private void put(Map map, Value val, Object o) {\n      * Look up the given value, testing all available prefixes.\n      */\n     private Object get(Map map, Value val, boolean setLoadKey) {\n-        if (map == null)\n-            return null;\n         String key = ProductDerivations.getConfigurationKey(\n             val.getProperty(), map);\n         if (map.containsKey(key) && setLoadKey)\n@@ -791,9 +791,8 @@ public boolean equals(Object other) {\n \n         // compare properties\n         ConfigurationImpl conf = (ConfigurationImpl) other;\n-        Map p1 = (_fullProps == null) ? toProperties(true) : _fullProps;\n-        Map p2 = (conf._fullProps == null) ? conf.toProperties(true) \n-            : conf._fullProps;\n+        Map p1 = (_props == null) ? toProperties(false) : _props;\n+        Map p2 = (conf._props == null) ? conf.toProperties(false) : conf._props;\n         return p1.equals(p2);\n     }\n \n@@ -802,9 +801,9 @@ public boolean equals(Object other) {\n      * {@link #toProperties}.\n      */\n     public int hashCode() {\n-        if (_fullProps != null)\n-            return _fullProps.hashCode();\n-        return toProperties(true).hashCode();\n+        if (_props != null)\n+            return _props.hashCode();\n+        return toProperties(false).hashCode();\n     }\n \n     /**\n@@ -850,11 +849,7 @@ public static String toXMLName(String propName) {\n      */\n     public void readExternal(ObjectInput in)\n         throws IOException, ClassNotFoundException {\n-        Map fullProps = (Map) in.readObject();\n-        Map props = (Map) in.readObject();\n-        fromProperties(fullProps);\n-        _fullProps = fullProps;\n-        _props = props;\n+        fromProperties((Map) in.readObject());\n         _globals = in.readBoolean();\n     }\n \n@@ -863,11 +858,10 @@ public void readExternal(ObjectInput in)\n      * the properties returned by {@link #toProperties}.\n      */\n     public void writeExternal(ObjectOutput out) throws IOException {\n-        if (_fullProps != null)\n-            out.writeObject(_fullProps);\n+        if (_props != null)\n+            out.writeObject(_props);\n         else\n-            out.writeObject(toProperties(true));\n-        out.writeObject(_props);\n+            out.writeObject(toProperties(false));\n         out.writeBoolean(_globals);\n     }\n \n@@ -882,9 +876,7 @@ public Object clone() {\n             ConfigurationImpl clone = (ConfigurationImpl) cons.newInstance\n                 (new Object[]{ Boolean.FALSE });\n             clone._globals = _globals;\n-            Map map = new HashMap(toProperties(true));\n-            clone.fromProperties(map);\n-            clone._fullProps = map;\n+            clone.fromProperties(toProperties(true));\n             return clone;\n         } catch (RuntimeException re) {\n             throw re;"},{"sha":"601872bf8b9683257792e42570ec806fb3fa86e5","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlan.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/4efc5d69972193ee57032dce319cf1b42e0d65b1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlan.java","raw_url":"https://github.com/apache/openjpa/raw/4efc5d69972193ee57032dce319cf1b42e0d65b1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlan.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlan.java?ref=4efc5d69972193ee57032dce319cf1b42e0d65b1","patch":"@@ -100,7 +100,7 @@\n     /**\n      * Returns the names of the fetch groups that this component will use\n      * when loading objects. Defaults to the\n-     * <code>org.apache.openjpa.FetchGroups</code> setting.\n+     * <code>openjpa.FetchGroups</code> setting.\n      */\n     public Collection<String> getFetchGroups();\n "}]}

