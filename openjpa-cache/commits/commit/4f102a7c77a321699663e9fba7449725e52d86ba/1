{"sha":"4f102a7c77a321699663e9fba7449725e52d86ba","node_id":"MDY6Q29tbWl0MjA2MzY0OjRmMTAyYTdjNzdhMzIxNjk5NjYzZTlmYmE3NDQ5NzI1ZTUyZDg2YmE=","commit":{"author":{"name":"Srinivasa Segu","email":"ssegu@apache.org","date":"2007-02-20T08:59:10Z"},"committer":{"name":"Srinivasa Segu","email":"ssegu@apache.org","date":"2007-02-20T08:59:10Z"},"message":"Capturing reference to the Column[] at the creation time in the RowImpl instead of the Table, to work with DynamicSchemaFactory where the Table's columns can get modified after the creation of the RowImpl before the flush.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@509473 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b36eafb8773af90070e21421565211f55f670f5d","url":"https://api.github.com/repos/apache/openjpa/git/trees/b36eafb8773af90070e21421565211f55f670f5d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4f102a7c77a321699663e9fba7449725e52d86ba","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4f102a7c77a321699663e9fba7449725e52d86ba","html_url":"https://github.com/apache/openjpa/commit/4f102a7c77a321699663e9fba7449725e52d86ba","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4f102a7c77a321699663e9fba7449725e52d86ba/comments","author":null,"committer":null,"parents":[{"sha":"09e7aab7778db72e6412625f39a9557d6a2646be","url":"https://api.github.com/repos/apache/openjpa/commits/09e7aab7778db72e6412625f39a9557d6a2646be","html_url":"https://github.com/apache/openjpa/commit/09e7aab7778db72e6412625f39a9557d6a2646be"}],"stats":{"total":89,"additions":52,"deletions":37},"files":[{"sha":"e168ecc66523f03474f113834f9ca1f8ef5f7092","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StateComparisonVersionStrategy.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/4f102a7c77a321699663e9fba7449725e52d86ba/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StateComparisonVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/4f102a7c77a321699663e9fba7449725e52d86ba/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StateComparisonVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StateComparisonVersionStrategy.java?ref=4f102a7c77a321699663e9fba7449725e52d86ba","patch":"@@ -223,7 +223,11 @@ public int compareVersion(Object v1, Object v2) {\n         implements RowManager {\n \n         private CustomUpdate(Table table) {\n-            super(table, Row.ACTION_UPDATE);\n+            this(table.getColumns());\n+        }\n+\n+        private CustomUpdate(Column[] cols) {\n+            super(cols, Row.ACTION_UPDATE);\n         }\n \n         /**\n@@ -252,8 +256,8 @@ public String getSQL() {\n             return buf.toString();\n         }\n \n-        protected RowImpl newInstance(Table table, int action) {\n-            return new CustomUpdate(table);\n+        protected RowImpl newInstance(Column[] cols, int action) {\n+            return new CustomUpdate(cols);\n         }\n \n         /////////////////////////////"},{"sha":"71a9c619bb2d7faee4e5d87fb15d54a9ac0b28e6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/4f102a7c77a321699663e9fba7449725e52d86ba/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java","raw_url":"https://github.com/apache/openjpa/raw/4f102a7c77a321699663e9fba7449725e52d86ba/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PrimaryRow.java?ref=4f102a7c77a321699663e9fba7449725e52d86ba","patch":"@@ -59,7 +59,11 @@\n      * Constructor; supply table and action.\n      */\n     public PrimaryRow(Table table, int action, OpenJPAStateManager owner) {\n-        super(table, action);\n+        this(table.getColumns(), action, owner);\n+    }\n+\n+    protected PrimaryRow(Column[] cols, int action, OpenJPAStateManager owner) {\n+        super(cols, action);\n         _pk = owner;\n     }\n \n@@ -385,8 +389,8 @@ protected String generateSQL(DBDictionary dict) {\n         return super.generateSQL(dict);\n     }\n \n-    protected RowImpl newInstance(Table table, int action) {\n-        return new PrimaryRow(table, action, _pk);\n+    protected RowImpl newInstance(Column[] cols, int action) {\n+        return new PrimaryRow(cols, action, _pk);\n     }\n \n     public void copyInto(RowImpl row, boolean whereOnly) {"},{"sha":"ac080845806951e1eafae3bafe77bfb1906d457c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","status":"modified","additions":31,"deletions":28,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/4f102a7c77a321699663e9fba7449725e52d86ba/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","raw_url":"https://github.com/apache/openjpa/raw/4f102a7c77a321699663e9fba7449725e52d86ba/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java?ref=4f102a7c77a321699663e9fba7449725e52d86ba","patch":"@@ -59,7 +59,7 @@\n     private static final int RAW = Integer.MIN_VALUE;\n \n     protected byte flags = 0;\n-    private final Table _table;\n+    private final Column[] _cols;\n     private final int _action;\n     private final Object[] _vals;\n     private final int[] _types;\n@@ -73,20 +73,28 @@\n      * @param action the action on the row\n      */\n     public RowImpl(Table table, int action) {\n-        _table = table;\n+        this(table.getColumns(), action);\n+    }\n+\n+    protected RowImpl(Column[] cols, int action) {\n+        _cols = cols;\n         _action = action;\n \n         // we need room for values and types for all columns; if an update or\n         // delete, then we need to double that for where column conditions\n-        int len = table.getColumns().length;\n+        int len = _cols.length;\n         if (action != ACTION_INSERT)\n             len *= 2;\n         _vals = new Object[len];\n         _types = new int[len];\n     }\n \n     public Table getTable() {\n-        return _table;\n+        return _cols[0].getTable();\n+    }\n+\n+    public Column[] getColumns() {\n+        return _cols;\n     }\n \n     public int getAction() {\n@@ -168,7 +176,7 @@ private void flushPrimaryKey(OpenJPAStateManager sm, ColumnIO io,\n         boolean set)\n         throws SQLException {\n         ClassMapping mapping = (ClassMapping) sm.getMetaData();\n-        while (mapping.getTable() != _table)\n+        while (mapping.getTable() != getTable())\n             mapping = mapping.getPCSuperclassMapping();\n         Column[] cols = mapping.getPrimaryKeyColumns();\n         flushJoinValues(sm, cols, cols, io, set);\n@@ -730,15 +738,14 @@ private String getUpdateSQL(DBDictionary dict) {\n         buf.append(\"UPDATE \").append(dict.getFullName(getTable(), false)).\n             append(\" SET \");\n \n-        Column[] cols = getTable().getColumns();\n         boolean hasVal = false;\n-        for (int i = 0; i < cols.length; i++) {\n+        for (int i = 0; i < _cols.length; i++) {\n             if (_vals[i] == null)\n                 continue;\n \n             if (hasVal)\n                 buf.append(\", \");\n-            buf.append(cols[i]);\n+            buf.append(_cols[i]);\n             if (_types[i] == RAW)\n                 buf.append(\" = \").append(_vals[i]);\n             else\n@@ -759,17 +766,16 @@ private String getInsertSQL(DBDictionary dict) {\n         buf.append(\"INSERT INTO \").\n             append(dict.getFullName(getTable(), false)).append(\" (\");\n \n-        Column[] cols = getTable().getColumns();\n         boolean hasVal = false;\n-        for (int i = 0; i < cols.length; i++) {\n+        for (int i = 0; i < _cols.length; i++) {\n             if (_vals[i] == null)\n                 continue;\n \n             if (hasVal) {\n                 buf.append(\", \");\n                 vals.append(\", \");\n             }\n-            buf.append(cols[i]);\n+            buf.append(_cols[i]);\n             if (_types[i] == RAW)\n                 vals.append(_vals[i]);\n             else\n@@ -796,10 +802,9 @@ private String getDeleteSQL(DBDictionary dict) {\n      * Appends the where clause onto the given sql buffer.\n      */\n     private void appendWhere(StringBuffer buf) {\n-        Column[] cols = getTable().getColumns();\n         boolean hasWhere = false;\n-        for (int i = 0; i < cols.length; i++) {\n-            if (_vals[getWhereIndex(cols[i])] == null)\n+        for (int i = 0; i < _cols.length; i++) {\n+            if (_vals[getWhereIndex(_cols[i])] == null)\n                 continue;\n \n             if (!hasWhere)\n@@ -809,12 +814,12 @@ private void appendWhere(StringBuffer buf) {\n \n             // sqlserver seems to have problems using null parameters in the\n             // where clause\n-            if (_vals[getWhereIndex(cols[i])] == NULL)\n-                buf.append(cols[i]).append(\" IS NULL\");\n+            if (_vals[getWhereIndex(_cols[i])] == NULL)\n+                buf.append(_cols[i]).append(\" IS NULL\");\n             else if (_types[i] == RAW)\n-                buf.append(cols[i]).append(\" = \").append(_vals[i]);\n+                buf.append(_cols[i]).append(\" = \").append(_vals[i]);\n             else\n-                buf.append(cols[i]).append(\" = ?\");\n+                buf.append(_cols[i]).append(\" = ?\");\n             hasWhere = true;\n         }\n     }\n@@ -841,14 +846,13 @@ public void flush(PreparedStatement stmnt, DBDictionary dict,\n     public void flush(PreparedStatement stmnt, int idx, DBDictionary dict,\n         JDBCStore store)\n         throws SQLException {\n-        Column[] cols = getTable().getColumns();\n \n         // this simple method works because the SQL is always prepared\n         // based on the indexing of the columns in the table object -- the\n         // same ordering we use when storing values and meta types. skip\n         // updates when setting params for DELETEs; the updates are just there\n         // to let us eval fk constraints\n-        int i = (getAction() == ACTION_DELETE) ? cols.length : 0;\n+        int i = (getAction() == ACTION_DELETE) ? _cols.length: 0;\n         Column col;\n         Object val;\n         int half = _vals.length / 2;\n@@ -863,10 +867,10 @@ public void flush(PreparedStatement stmnt, int idx, DBDictionary dict,\n \n             // if this is an update the vals array will be 2 x the cols\n             // array length; it repeats for where values\n-            if (i < cols.length)\n-                col = cols[i];\n+            if (i < _cols.length)\n+                col = _cols[i];\n             else\n-                col = cols[i - cols.length];\n+                col = _cols[i - _cols.length];\n \n             val = _vals[i];\n             if (val == NULL)\n@@ -890,23 +894,23 @@ private int getSetIndex(Column col) {\n      * The array value array index for the given column's value.\n      */\n     private int getWhereIndex(Column col) {\n-        return col.getIndex() + getTable().getColumns().length;\n+        return col.getIndex() + _cols.length;\n     }\n \n     /**\n      * Performs a proper deep clone.\n      */\n     public Object clone() {\n-        RowImpl clone = newInstance(getTable(), getAction());\n+        RowImpl clone = newInstance(getColumns(), getAction());\n         copyInto(clone, false);\n         return clone;\n     }\n \n     /**\n      * Return a new row.\n      */\n-    protected RowImpl newInstance(Table table, int action) {\n-        return new RowImpl(table, action);\n+    protected RowImpl newInstance(Column[] cols, int action) {\n+        return new RowImpl(cols, action);\n     }\n \n     /**\n@@ -939,4 +943,3 @@ public void copyInto(RowImpl row, boolean whereOnly) {\n             row.setValid(true);\n     }\n }\n-"},{"sha":"87dfbcf0556d61d8291a17843be5142b58b11c52","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SecondaryRow.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/4f102a7c77a321699663e9fba7449725e52d86ba/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SecondaryRow.java","raw_url":"https://github.com/apache/openjpa/raw/4f102a7c77a321699663e9fba7449725e52d86ba/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SecondaryRow.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SecondaryRow.java?ref=4f102a7c77a321699663e9fba7449725e52d86ba","patch":"@@ -43,7 +43,11 @@\n      * Constructor; supply table and action.\n      */\n     public SecondaryRow(Table table, int action) {\n-        super(table, action);\n+        this(table.getColumns(), action);\n+    }\n+\n+    protected SecondaryRow(Column[] cols, int action) {\n+        super(cols, action);\n     }\n \n     public void setForeignKey(ForeignKey fk, OpenJPAStateManager sm)\n@@ -161,8 +165,8 @@ protected String generateSQL(DBDictionary dict) {\n         return super.generateSQL(dict);\n     }\n \n-    protected RowImpl newInstance(Table table, int action) {\n-        return new SecondaryRow(table, action);\n+    protected RowImpl newInstance(Column[] cols, int action) {\n+        return new SecondaryRow(cols, action);\n     }\n \n     public void copyInto(RowImpl row, boolean whereOnly) {"}]}

