{"sha":"4fb812a4c3aa90b3c80c0e9a286238c184a21f96","node_id":"MDY6Q29tbWl0MjA2MzY0OjRmYjgxMmE0YzNhYTkwYjNjODBjMGU5YTI4NjIzOGMxODRhMjFmOTY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-07T16:17:24Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-07T16:17:24Z"},"message":"OPENJPA-511\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@619479 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ba3986d18eaf7697049fa5517f9caece164560c6","url":"https://api.github.com/repos/apache/openjpa/git/trees/ba3986d18eaf7697049fa5517f9caece164560c6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/4fb812a4c3aa90b3c80c0e9a286238c184a21f96","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/4fb812a4c3aa90b3c80c0e9a286238c184a21f96","html_url":"https://github.com/apache/openjpa/commit/4fb812a4c3aa90b3c80c0e9a286238c184a21f96","comments_url":"https://api.github.com/repos/apache/openjpa/commits/4fb812a4c3aa90b3c80c0e9a286238c184a21f96/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"befd295ea53b72ff8d925e7c502e67fa6b2c5a1e","url":"https://api.github.com/repos/apache/openjpa/commits/befd295ea53b72ff8d925e7c502e67fa6b2c5a1e","html_url":"https://github.com/apache/openjpa/commit/befd295ea53b72ff8d925e7c502e67fa6b2c5a1e"}],"stats":{"total":34,"additions":32,"deletions":2},"files":[{"sha":"f77c9df3b1866e6dac569afd100506ea5c189c41","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/4fb812a4c3aa90b3c80c0e9a286238c184a21f96/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/4fb812a4c3aa90b3c80c0e9a286238c184a21f96/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java?ref=4fb812a4c3aa90b3c80c0e9a286238c184a21f96","patch":"@@ -183,8 +183,7 @@ public SQLExecutor(SQLStoreQuery q, ClassMetaData candidate) {\n             String sql = StringUtils.trimToNull(ctx.getQueryString());\n             if (sql == null)\n                 throw new UserException(_loc.get(\"no-sql\"));\n-            _select = sql.length() > 6\n-                && sql.substring(0, 6).equalsIgnoreCase(\"select\");\n+            _select = q.getStore().getDBDictionary().isSelect(sql);\n             _call = sql.length() > 4\n                 && sql.substring(0, 4).equalsIgnoreCase(\"call\");\n         }"},{"sha":"732f4d06806686050124a0122b9322ec8aa3e052","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/4fb812a4c3aa90b3c80c0e9a286238c184a21f96/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/4fb812a4c3aa90b3c80c0e9a286238c184a21f96/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=4fb812a4c3aa90b3c80c0e9a286238c184a21f96","patch":"@@ -144,6 +144,8 @@ public DB2Dictionary() {\n             \"TYPE\", \"UNDO\", \"UNTIL\", \"VALIDPROC\", \"VARIABLE\", \"VARIANT\", \"VCAT\",\r\n             \"VOLUMES\", \"WHILE\", \"WLM\", \"YEARS\",\r\n         }));\r\n+        \r\n+        selectWordSet.add(\"WITH\");\r\n     }\r\n \r\n     public boolean supportsRandomAccessResultSet(Select sel,\r"},{"sha":"75cce66534153b70ac66888fb2e5b4e2d8b31d7d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/4fb812a4c3aa90b3c80c0e9a286238c184a21f96/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/4fb812a4c3aa90b3c80c0e9a286238c184a21f96/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=4fb812a4c3aa90b3c80c0e9a286238c184a21f96","patch":"@@ -307,6 +307,12 @@\n     protected final Set systemTableSet = new HashSet();\n     protected final Set fixedSizeTypeNameSet = new HashSet();\n \n+    /**\n+     * If a native query begins with any of the values found here then it will\n+     * be treated as a select statement.  \n+     */\n+    protected final Set selectWordSet = new HashSet();\n+\n     // when we store values that lose precion, track the types so that the\n     // first time it happens we can warn the user\n     private Set _precisionWarnedTypes = null;\n@@ -323,6 +329,8 @@ public DBDictionary() {\n             \"OTHER\", \"REAL\", \"REF\", \"SMALLINT\", \"STRUCT\", \"TIME\", \"TIMESTAMP\",\n             \"TINYINT\",\n         }));\n+        \n+        selectWordSet.add(\"SELECT\");\n     }\n \n     /**\n@@ -3989,4 +3997,25 @@ public String getCastFunction(Val val, String func) {\n     public void createIndexIfNecessary(Schema schema, String table,\n             Column pkColumn) {\n     }\n+\n+    /**\n+     * Determine whether the provided <code>sql</code> may be treated as a \n+     * select statement on this database.\n+     *  \n+     * @param sql   A sql statement. \n+     * \n+     * @return true if <code>sql</code> represents a select statement.\n+     */\n+    public boolean isSelect(String sql) {\n+        Iterator i = selectWordSet.iterator();\n+        String cur;\n+        while (i.hasNext()) {\n+            cur = (String) i.next();\n+            if (sql.length() >= cur.length()\n+                    && sql.substring(0, cur.length()).equalsIgnoreCase(cur)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n }"}]}

