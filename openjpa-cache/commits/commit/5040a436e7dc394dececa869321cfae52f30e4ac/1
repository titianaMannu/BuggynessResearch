{"sha":"5040a436e7dc394dececa869321cfae52f30e4ac","node_id":"MDY6Q29tbWl0MjA2MzY0OjUwNDBhNDM2ZTdkYzM5NGRlY2VjYTg2OTMyMWNmYWU1MmYzMGU0YWM=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2010-11-10T14:13:10Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2010-11-10T14:13:10Z"},"message":"OPENJPA-1881.  Creating a new \"completion\" trace message for the enhancement processing.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1033480 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"da36fb8e25c60c6edec691b251be6a31c19558fc","url":"https://api.github.com/repos/apache/openjpa/git/trees/da36fb8e25c60c6edec691b251be6a31c19558fc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5040a436e7dc394dececa869321cfae52f30e4ac","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5040a436e7dc394dececa869321cfae52f30e4ac","html_url":"https://github.com/apache/openjpa/commit/5040a436e7dc394dececa869321cfae52f30e4ac","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5040a436e7dc394dececa869321cfae52f30e4ac/comments","author":null,"committer":null,"parents":[{"sha":"324ca8e894293f83d34de671be46feebb7e2dfab","url":"https://api.github.com/repos/apache/openjpa/commits/324ca8e894293f83d34de671be46feebb7e2dfab","html_url":"https://github.com/apache/openjpa/commit/324ca8e894293f83d34de671be46feebb7e2dfab"}],"stats":{"total":14,"additions":10,"deletions":4},"files":[{"sha":"b0f052e196acd6e41c47b1a57bb7e1b4f7d4936e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/5040a436e7dc394dececa869321cfae52f30e4ac/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","raw_url":"https://github.com/apache/openjpa/raw/5040a436e7dc394dececa869321cfae52f30e4ac/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java?ref=5040a436e7dc394dececa869321cfae52f30e4ac","patch":"@@ -113,14 +113,14 @@ public PCClassFileTransformer(MetaDataRepository repos,\n         if (className == null) {\n             return null;\n         }\n-        // prevent re-entrant calls, which can occur if the enhanceing\n+        // prevent re-entrant calls, which can occur if the enhancing\n         // loader is used to also load OpenJPA libraries; this is to prevent \n         // recursive enhancement attempts for internal openjpa libraries\n         if (_transforming)\n             return null;\n \n         _transforming = true;\n-\n+        \n         return transform0(className, redef, bytes);\n     }\n \n@@ -131,7 +131,8 @@ public PCClassFileTransformer(MetaDataRepository repos,\n      */\n     private byte[] transform0(String className, Class redef, byte[] bytes)\n         throws IllegalClassFormatException {\n-\n+        \n+        byte[] returnBytes = null;\n         try {\n             Boolean enhance = needsEnhance(className, redef, bytes);\n             if (enhance != null && _log.isTraceEnabled())\n@@ -149,7 +150,8 @@ public PCClassFileTransformer(MetaDataRepository repos,\n \n             if (enhancer.run() == PCEnhancer.ENHANCE_NONE)\n                 return null;\n-            return enhancer.getPCBytecode().toByteArray();\n+            returnBytes = enhancer.getPCBytecode().toByteArray();\n+            return returnBytes;\n         } catch (Throwable t) {\n             _log.warn(_loc.get(\"cft-exception-thrown\", className), t);\n             if (t instanceof RuntimeException)\n@@ -159,6 +161,9 @@ public PCClassFileTransformer(MetaDataRepository repos,\n             throw new GeneralException(t);\n         } finally {\n             _transforming = false;\n+            if (returnBytes != null && _log.isTraceEnabled())\n+                _log.trace(_loc.get(\"runtime-enhance-complete\", className,\n+                    bytes.length, returnBytes.length));\n         }\n     }\n "},{"sha":"866c1b5ab3411fc0145a52be641244a9351ff3ed","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/5040a436e7dc394dececa869321cfae52f30e4ac/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/5040a436e7dc394dececa869321cfae52f30e4ac/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties?ref=5040a436e7dc394dececa869321cfae52f30e4ac","patch":"@@ -25,6 +25,7 @@ bad-field: Missing field for property \"{1}\" in type \"{0}\".\n reflect-security: Unable to access \"{0}\" via reflection.  Make sure OpenJPA \\\n     has the \"suppressAccessChecks\" permission.\n needs-runtime-enhance: \"{0}\" requires runtime enhancement: {1}\n+runtime-enhance-complete: Enhancement for \"{0}\" completed. Class size: [{1}/{2}]\n runtime-enhance-pcclasses: You have enabled runtime enhancement, but have not \\\n \tspecified the set of persistent classes.  OpenJPA must look for metadata \\\n     for every loaded class, which might increase class load times significantly."}]}

