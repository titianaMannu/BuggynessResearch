{"sha":"50b81e6d7706d8f28aab8110086b1d7f114c1b45","node_id":"MDY6Q29tbWl0MjA2MzY0OjUwYjgxZTZkNzcwNmQ4ZjI4YWFiODExMDA4NmIxZDdmMTE0YzFiNDU=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-04-09T18:09:42Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-04-09T18:09:42Z"},"message":"OPENJPA-547 INNER JOIN FETCH query incorrectly generates LEFT join SQL\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@646455 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"271dcdea68233c12d8606861701cdfb738d53958","url":"https://api.github.com/repos/apache/openjpa/git/trees/271dcdea68233c12d8606861701cdfb738d53958"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/50b81e6d7706d8f28aab8110086b1d7f114c1b45","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/50b81e6d7706d8f28aab8110086b1d7f114c1b45","html_url":"https://github.com/apache/openjpa/commit/50b81e6d7706d8f28aab8110086b1d7f114c1b45","comments_url":"https://api.github.com/repos/apache/openjpa/commits/50b81e6d7706d8f28aab8110086b1d7f114c1b45/comments","author":null,"committer":null,"parents":[{"sha":"5196ae0bc27d4d50ef468aa9b5334155c89a8dcb","url":"https://api.github.com/repos/apache/openjpa/commits/5196ae0bc27d4d50ef468aa9b5334155c89a8dcb","html_url":"https://github.com/apache/openjpa/commit/5196ae0bc27d4d50ef468aa9b5334155c89a8dcb"}],"stats":{"total":135,"additions":127,"deletions":8},"files":[{"sha":"317671ef7aab471d6fd2c8a474fd04c5b84564b1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java","status":"modified","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/50b81e6d7706d8f28aab8110086b1d7f114c1b45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/50b81e6d7706d8f28aab8110086b1d7f114c1b45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java?ref=50b81e6d7706d8f28aab8110086b1d7f114c1b45","patch":"@@ -260,4 +260,38 @@ public JDBCFetchConfiguration traverseJDBC(FieldMetaData fm) {\n             throw translate(re);\n         }\n     }\n+\n+    public Set getFetchInnerJoins() {\n+        try {\n+            return getJDBCDelegate().getFetchInnerJoins();\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public boolean hasFetchInnerJoin(String field) {\n+        try {\n+            return getJDBCDelegate().hasFetchInnerJoin(field);\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public JDBCFetchConfiguration addFetchInnerJoin(String field) {\n+        try {\n+            getJDBCDelegate().addFetchInnerJoin(field);\n+            return this;\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public JDBCFetchConfiguration addFetchInnerJoins(Collection fields) {\n+        try {\n+            getJDBCDelegate().addFetchInnerJoins(fields);\n+            return this;\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n }"},{"sha":"077e61ba5396fc75cf6fa48339668088224e3060","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java","status":"modified","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/50b81e6d7706d8f28aab8110086b1d7f114c1b45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/50b81e6d7706d8f28aab8110086b1d7f114c1b45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java?ref=50b81e6d7706d8f28aab8110086b1d7f114c1b45","patch":"@@ -207,4 +207,38 @@\n      * Convenience method to cast traversal to store-specific type.\n      */\n     public JDBCFetchConfiguration traverseJDBC(FieldMetaData fm);\n+\n+    /**\n+     * Returns the names of the inner fetch joins that this component will use\n+     * when loading objects. Defaults to the empty set.  This set is not\n+     * thread safe.\n+     *\n+     * @since 1.0.3\n+     */\n+    public Set getFetchInnerJoins();\n+\n+    /**\n+     * Return true if the given fully-qualified inner fetch join has been added.\n+     *\n+     * @since 1.0.3\n+     */\n+    public boolean hasFetchInnerJoin(String field);\n+\n+    /**\n+     * Adds <code>field</code> to the set of fully-qualified field names to\n+     * eagerly join when loading objects. Each class can have at most\n+     * one to-many eagerly joined fields.\n+     *\n+     * @since 1.0.3\n+     */\n+    public JDBCFetchConfiguration addFetchInnerJoin(String field);\n+\n+    /**\n+     * Adds <code>fields</code> to the set of fully-qualified field names to\n+     * eagerly join when loading objects. Each class can have at most\n+     * one to-many eagerly joined fields.\n+     *\n+     * @since 1.0.3\n+     */\n+    public JDBCFetchConfiguration addFetchInnerJoins(Collection fields);\n }"},{"sha":"a00b5a31ed51486c07e6365c6c50ee879c3ab155","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","status":"modified","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/50b81e6d7706d8f28aab8110086b1d7f114c1b45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/50b81e6d7706d8f28aab8110086b1d7f114c1b45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java?ref=50b81e6d7706d8f28aab8110086b1d7f114c1b45","patch":"@@ -69,6 +69,7 @@\n         public int size = 0;\n         public int syntax = 0;\n         public Set joins = null;\n+        public Set fetchInnerJoins = null;\n         public int isolationLevel = -1;\n     }\n \n@@ -345,4 +346,37 @@ private JDBCConfiguration getJDBCConfiguration() {\n             return null;\n         return (JDBCConfiguration) conf;\n     }\n+\n+    public Set getFetchInnerJoins() {\n+        return (_state.fetchInnerJoins == null) ? Collections.EMPTY_SET\n+            : _state.fetchInnerJoins;\n+    }\n+\n+    public boolean hasFetchInnerJoin(String field) {\n+        return _state.fetchInnerJoins != null &&\n+            _state.fetchInnerJoins.contains(field);\n+    }\n+\n+    public JDBCFetchConfiguration addFetchInnerJoin(String join) {\n+        if (StringUtils.isEmpty(join))\n+            throw new UserException(_loc.get(\"null-join\"));\n+        \n+        lock();\n+        try {\n+            if (_state.fetchInnerJoins == null)\n+                _state.fetchInnerJoins = new HashSet();\n+            _state.fetchInnerJoins.add(join);\n+        } finally {\n+            unlock();\n+        }\n+        return this;\n+    }\n+\n+    public JDBCFetchConfiguration addFetchInnerJoins(Collection joins) {\n+        if (joins == null || joins.isEmpty())\n+            return this;\n+        for (Iterator itr = joins.iterator(); itr.hasNext();)\n+            addFetchInnerJoin((String) itr.next());\n+        return this;\n+    }\n }"},{"sha":"8e1f589678156437bf53c4567d6e0f917f71263c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/50b81e6d7706d8f28aab8110086b1d7f114c1b45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/50b81e6d7706d8f28aab8110086b1d7f114c1b45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java?ref=50b81e6d7706d8f28aab8110086b1d7f114c1b45","patch":"@@ -148,6 +148,8 @@ protected ResultObjectProvider executeQuery(Executor ex,\n             fetch.addFields(Arrays.asList(exps[0].fetchPaths));\n             fetch.addJoins(Arrays.asList(exps[0].fetchPaths));\n         }\n+        if (exps[0].fetchInnerPaths != null)\n+            fetch.addFetchInnerJoins(Arrays.asList(exps[0].fetchInnerPaths));\n \n         int eager = calculateEagerMode(exps[0], range.start, range.end);\n         int subclassMode = fetch.getSubclassFetchMode((ClassMapping) base);\n@@ -599,6 +601,8 @@ protected Number executeUpdate(ClassMetaData base, ClassMetaData[] metas,\n             fetch.addFields(Arrays.asList(exps[0].fetchPaths));\n             fetch.addJoins(Arrays.asList(exps[0].fetchPaths));\n         }\n+        if (exps[0].fetchInnerPaths != null)\n+            fetch.addFetchInnerJoins(Arrays.asList(exps[0].fetchInnerPaths));\n \n         int eager = calculateEagerMode(exps[0], range.start, range.end);\n         eager = Math.min(eager, JDBCFetchConfiguration.EAGER_JOIN);"},{"sha":"1436431282a037f7cda92e95aa1a0ccb9efd3af5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/50b81e6d7706d8f28aab8110086b1d7f114c1b45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/50b81e6d7706d8f28aab8110086b1d7f114c1b45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=50b81e6d7706d8f28aab8110086b1d7f114c1b45","patch":"@@ -409,9 +409,11 @@ public void selectEagerJoin(Select sel, OpenJPAStateManager sm,\n         // clone it for a to-many eager select can result in a clone that\n         // produces invalid SQL\n         ClassMapping cls = field.getIndependentTypeMappings()[0];\n+        boolean forceInner = fetch.hasFetchInnerJoin(field.getFullName(false)) ?\n+                true : false;\n         sel.select(cls, field.getSelectSubclasses(), store, fetch,\n             JDBCFetchConfiguration.EAGER_JOIN,\n-            eagerJoin(sel.newJoins(), cls, false));\n+            eagerJoin(sel.newJoins(), cls, forceInner));\n     }\n \n     /**"},{"sha":"b2f385de123c2d2f6c4b4a95d6758e6ab8b67425","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/50b81e6d7706d8f28aab8110086b1d7f114c1b45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/50b81e6d7706d8f28aab8110086b1d7f114c1b45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java?ref=50b81e6d7706d8f28aab8110086b1d7f114c1b45","patch":"@@ -24,7 +24,6 @@\n import java.util.HashMap;\n import java.util.Map;\n \n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n@@ -168,10 +167,13 @@ public void selectEagerJoin(Select sel, OpenJPAStateManager sm,\n         // we limit further eager fetches to joins, because after this point\n         // the select has been modified such that parallel clones may produce\n         // invalid sql\n+        boolean outer = field.getNullValue() != FieldMapping.NULL_EXCEPTION;\n+        // force inner join for inner join fetch \n+        if (fetch.hasFetchInnerJoin(field.getFullName(false)))\n+            outer = false;\n         selectEager(sel, getDefaultElementMapping(true), sm, store, fetch, \n             JDBCFetchConfiguration.EAGER_JOIN, false,\n-            field.getNullValue()\n-                != FieldMapping.NULL_EXCEPTION);\n+            outer);\n     }\n \n     public boolean isEagerSelectToMany() {"},{"sha":"ac357b5eb74cc058bad6a4349b2522a397ba78ed","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/50b81e6d7706d8f28aab8110086b1d7f114c1b45/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","raw_url":"https://github.com/apache/openjpa/raw/50b81e6d7706d8f28aab8110086b1d7f114c1b45/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java?ref=50b81e6d7706d8f28aab8110086b1d7f114c1b45","patch":"@@ -65,6 +65,7 @@\n     public int operation = QueryOperations.OP_SELECT;\n     public ClassMetaData[] accessPath = StoreQuery.EMPTY_METAS;\n     public String[] fetchPaths = StoreQuery.EMPTY_STRINGS;\n+    public String[] fetchInnerPaths = StoreQuery.EMPTY_STRINGS;\n     public Value[] range = EMPTY_VALUES;\n     private Boolean _aggregate = null;\n "},{"sha":"38b366145767d373ac7c448b6962ea6315a73440","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":12,"deletions":4,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/50b81e6d7706d8f28aab8110086b1d7f114c1b45/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/50b81e6d7706d8f28aab8110086b1d7f114c1b45/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=50b81e6d7706d8f28aab8110086b1d7f114c1b45","patch":"@@ -452,20 +452,28 @@ protected Expression evalFetchJoins(QueryExpressions exps) {\n \n         // handle JOIN FETCH\n         Set joins = null;\n+        Set innerJoins = null;\n \n         JPQLNode[] outers = root().findChildrenByID(JJTOUTERFETCHJOIN);\n         for (int i = 0; outers != null && i < outers.length; i++)\n             (joins == null ? joins = new TreeSet() : joins).\n                 add(getPath(onlyChild(outers[i])).last().getFullName(false));\n \n         JPQLNode[] inners = root().findChildrenByID(JJTINNERFETCHJOIN);\n-        for (int i = 0; inners != null && i < inners.length; i++)\n-            (joins == null ? joins = new TreeSet() : joins).\n-                add(getPath(onlyChild(inners[i])).last().getFullName(false));\n+        for (int i = 0; inners != null && i < inners.length; i++) {\n+            String path = getPath(onlyChild(inners[i])).last()\n+                .getFullName(false);\n+            (joins == null ? joins = new TreeSet() : joins).add(path);\n+            (innerJoins == null ? innerJoins = new TreeSet() : innerJoins).\n+                add(path);\n+        }\n \n         if (joins != null)\n             exps.fetchPaths = (String[]) joins.\n                 toArray(new String[joins.size()]);\n+        if (innerJoins != null)\n+            exps.fetchInnerPaths = (String[]) innerJoins.\n+                toArray(new String[innerJoins.size()]);\n \n         return filter;\n     }\n@@ -506,7 +514,7 @@ else if (node.id == JJTOUTERJOIN)\n             else if (node.id == JJTINNERJOIN)\n                 exp = addJoin(node, true, exp);\n             else if (node.id == JJTINNERFETCHJOIN)\n-                exp = addJoin(node, true, exp);\n+                ; // we handle inner fetch joins in the evalFetchJoins() method\n             else if (node.id == JJTOUTERFETCHJOIN)\n                 ; // we handle outer fetch joins in the evalFetchJoins() method\n             else"}]}

