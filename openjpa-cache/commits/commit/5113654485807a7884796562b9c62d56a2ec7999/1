{"sha":"5113654485807a7884796562b9c62d56a2ec7999","node_id":"MDY6Q29tbWl0MjA2MzY0OjUxMTM2NTQ0ODU4MDdhNzg4NDc5NjU2MmI5YzYyZDU2YTJlYzc5OTk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-10T16:40:37Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-10T16:40:37Z"},"message":"add common setTestsDisabled()/isTestsDisabled() in AbstractPersistenceTestCase which is used by runTest() to automatically skip all tests.  added new setSupportedDatabases()/setUnsupportedDatabases() methods in SingleEMFTestCase to set the testsDisabled flag in AbstractPTC, along with moving a getLog() method from some testcases into the base SingleEMFTC class for everyone to use.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813506 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"04df7d266b0a138790655b37e82c18d74205d215","url":"https://api.github.com/repos/apache/openjpa/git/trees/04df7d266b0a138790655b37e82c18d74205d215"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5113654485807a7884796562b9c62d56a2ec7999","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5113654485807a7884796562b9c62d56a2ec7999","html_url":"https://github.com/apache/openjpa/commit/5113654485807a7884796562b9c62d56a2ec7999","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5113654485807a7884796562b9c62d56a2ec7999/comments","author":null,"committer":null,"parents":[{"sha":"a543403d2a283b4c6d30f4b0271308cd810ac0f2","url":"https://api.github.com/repos/apache/openjpa/commits/a543403d2a283b4c6d30f4b0271308cd810ac0f2","html_url":"https://github.com/apache/openjpa/commit/a543403d2a283b4c6d30f4b0271308cd810ac0f2"}],"stats":{"total":229,"additions":95,"deletions":134},"files":[{"sha":"110a60aad993d60ab7639025c952a329cdc36144","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestValidatingLEM.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/5113654485807a7884796562b9c62d56a2ec7999/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestValidatingLEM.java","raw_url":"https://github.com/apache/openjpa/raw/5113654485807a7884796562b9c62d56a2ec7999/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestValidatingLEM.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestValidatingLEM.java?ref=5113654485807a7884796562b9c62d56a2ec7999","patch":"@@ -244,12 +244,4 @@ private void cleanup(OpenJPAEntityManagerFactorySPI emf) {\n         closeEMF(emf);\n     }    \n \n-    /**\n-     * Internal convenience method for getting the OpenJPA logger\n-     * \n-     * @return\n-     */\n-    private Log getLog() {\n-        return emf.getConfiguration().getLog(\"Tests\");\n-    }\n }"},{"sha":"953e88084f9caa44d579dfc1418f154151b1d51c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestQueryProperties.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/5113654485807a7884796562b9c62d56a2ec7999/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestQueryProperties.java","raw_url":"https://github.com/apache/openjpa/raw/5113654485807a7884796562b9c62d56a2ec7999/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestQueryProperties.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestQueryProperties.java?ref=5113654485807a7884796562b9c62d56a2ec7999","patch":"@@ -311,12 +311,4 @@ public void testWithProperties() {\n         }\n     }\n     \n-    /**\n-     * Internal convenience method for getting the OpenJPA logger\n-     * \n-     * @return\n-     */\n-    private Log getLog() {\n-        return emf.getConfiguration().getLog(\"Tests\");\n-    }\n }"},{"sha":"2404dc7f3898c5be620e1b475ee8b6106fa480f4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/5113654485807a7884796562b9c62d56a2ec7999/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","raw_url":"https://github.com/apache/openjpa/raw/5113654485807a7884796562b9c62d56a2ec7999/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java?ref=5113654485807a7884796562b9c62d56a2ec7999","patch":"@@ -2807,12 +2807,4 @@ public void queryEntityA_Embed_Complex(EntityManager em) {\n         }\n     }\n     \n-    /**\n-     * Internal convenience method for getting the OpenJPA logger\n-     * \n-     * @return\n-     */\n-    private Log getLog() {\n-        return emf.getConfiguration().getLog(\"Tests\");\n-    }\n }"},{"sha":"0fc403b7671df04aa12f620a06da2440c3e37539","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","status":"modified","additions":4,"deletions":16,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/5113654485807a7884796562b9c62d56a2ec7999/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","raw_url":"https://github.com/apache/openjpa/raw/5113654485807a7884796562b9c62d56a2ec7999/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java?ref=5113654485807a7884796562b9c62d56a2ec7999","patch":"@@ -39,12 +39,11 @@\n public class TestMultipleSchemaNames extends SingleEMFTestCase {\n \n     static private DBDictionary dict = null;\n-    static private Boolean skipTests = null;\n     \n     public void setUp() {\n         // Need to skip tests on MySQL, Oracle and MS SQL Server\n         // See createSchemas() comment at the bottom\n-        if ((dict == null) || (skipTests == null)) {\n+        if (dict == null) {\n             OpenJPAEntityManagerFactorySPI emf = createEMF();\n             OpenJPAEntityManagerSPI em = emf.createEntityManager();\n             JDBCConfiguration conf = (JDBCConfiguration) em.getConfiguration();\n@@ -53,17 +52,15 @@ public void setUp() {\n             if ((dict instanceof MySQLDictionary) ||\n                     (dict instanceof OracleDictionary) ||\n                     (dict instanceof SQLServerDictionary)) {\n-                skipTests = Boolean.TRUE;\n+                setTestsDisabled(true);\n                 // do some logging\n                 emf.getConfiguration().getLog(\"Tests\").trace(\n                     \"TestMultipleSchemaNames() - Skipping all tests - Not supported on this DB\");\n-            } else {\n-                skipTests = Boolean.FALSE;\n-            }            \n+            }\n             closeEMF(emf);\n         }\n         \n-        if (skipTests) {\n+        if (isTestsDisabled()) {\n             return;\n         }\n \n@@ -163,9 +160,6 @@ public void setUp() {\n     }\n \n     public void testGeneratedAUTO() {\n-        if (skipTests)\n-            return;\n-\n         EntityManager em = emf.createEntityManager();\n         OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\n         em.getTransaction().begin();\n@@ -243,9 +237,6 @@ public void testGeneratedAUTO() {\n     }\n \n     public void testGeneratedTABLE() {\n-        if (skipTests)\n-            return;\n-\n         EntityManager em = emf.createEntityManager();\n         OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\n         em.getTransaction().begin();\n@@ -391,9 +382,6 @@ public void testGeneratedTABLE() {\n     }\n     \n     public void testGeneratedIDENTITY() {\n-        if (skipTests)\n-            return;\n-\n         EntityManager em = emf.createEntityManager();\n         OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\n "},{"sha":"9ecf476c6a2c7b3d7b72316bc3c6dded9866e698","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryTimeout.java","status":"modified","additions":2,"deletions":9,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/5113654485807a7884796562b9c62d56a2ec7999/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryTimeout.java","raw_url":"https://github.com/apache/openjpa/raw/5113654485807a7884796562b9c62d56a2ec7999/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryTimeout.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryTimeout.java?ref=5113654485807a7884796562b9c62d56a2ec7999","patch":"@@ -133,13 +133,15 @@ public void setUp() {\n             } else {\n                 // unknown db, so skip all timeout tests\n                 skipTests = skipExceptionTests = noSelectTimeouts = true;\n+                setTestsDisabled(true);\n                 getLog().info(\"TestQueryTimeout tests are being skipped, due \" +\n                     \"to \" + dict.platform + \" not supporting Query Timeouts.\");\n             }\n         } else {\n             getLog().info(\"TestQueryTimeout tests are being skipped, \" +\n                 \"due to \" + dict.platform + \" not supporting Query Timeouts.\");\n             skipTests = skipExceptionTests = true;\n+            setTestsDisabled(true);\n         }\n     }\n \n@@ -1042,15 +1044,6 @@ private void exec(boolean ignoreExceptions, int timeoutSecs, String sql)\n         }\n     }\n \n-    /**\n-     * Internal convenience method for getting the OpenJPA logger\n-     * \n-     * @return\n-     */\n-    private Log getLog() {\n-        return emf.getConfiguration().getLog(\"Tests\");\n-    }\n-\n     /**\n      * Internal convenience method for checking that the given Exception matches\n      * the expected type for a given DB platform."},{"sha":"64887ae6c1ca80c3d2a3981138611abbc2c32803","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractPersistenceTestCase.java","status":"modified","additions":30,"deletions":2,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/5113654485807a7884796562b9c62d56a2ec7999/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractPersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/5113654485807a7884796562b9c62d56a2ec7999/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractPersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractPersistenceTestCase.java?ref=5113654485807a7884796562b9c62d56a2ec7999","patch":"@@ -54,6 +54,7 @@\n     public static final String RETAIN_DATA = \"Retain data after test run\";\n     private boolean retainDataOnTearDown;\n     protected boolean _fresh = false;\n+    private Boolean testsDisabled = Boolean.FALSE;\n \n     public static final String ALLOW_FAILURE_LOG = \"log\";\n     public static final String ALLOW_FAILURE_IGNORE = \"ignore\";\n@@ -463,8 +464,10 @@ public void printException(Throwable t, int tab) {\n     }\n \n     /**\n-     * Overrides to allow tests annotated with @AllowFailure to fail. If the test is in error then the normal pathway is\n-     * executed.\n+     * Overrides to allow tests annotated with @AllowFailure to fail.\n+     * If @DatabasePlatform value matches the current JDBC driver or\n+     * tests have been disabled, then the test will not be run.\n+     * If the test is in error then the normal pathway is executed.\n      */\n     @Override\n     public void runBare() throws Throwable {\n@@ -499,6 +502,18 @@ protected void runBare(AllowFailure allowFailureAnnotation) throws Throwable {\n         }\n     }\n \n+    /**\n+     * Override to run the test and assert its state.\n+     * @exception Throwable if any exception is thrown\n+     */\n+    @Override\n+    protected void runTest() throws Throwable {\n+        if (isTestsDisabled()) {\n+            return;\n+        }\n+        super.runTest();\n+    }\n+    \n     /**\n      * Affirms if the test case or the test method is annotated with\n      * \n@@ -587,4 +602,17 @@ protected void assertCached(Cache cache, Class<?> clss, Object id, boolean expec\n             assertFalse(String.format(\"Expected %s:%s not to exist in cache\", clss, id), cache.contains(clss, id));\n         }\n     }\n+    \n+    protected void setTestsDisabled(boolean disable) {\n+        synchronized (testsDisabled) {\n+            testsDisabled = new Boolean(disable);\n+        }\n+    }\n+    \n+    protected boolean isTestsDisabled() {\n+        synchronized (testsDisabled) {\n+            return testsDisabled.booleanValue();\n+        }\n+    }\n+\n }"},{"sha":"7c1c269f58df0d4cf310027d749234e171a0c285","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","status":"modified","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/5113654485807a7884796562b9c62d56a2ec7999/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/5113654485807a7884796562b9c62d56a2ec7999/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java?ref=5113654485807a7884796562b9c62d56a2ec7999","patch":"@@ -22,8 +22,12 @@\n \n import javax.persistence.EntityManager;\n \n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n \n /**\n  * Base class for OpenJPA-specific Test Case.\n@@ -156,4 +160,52 @@ public String getAlias(Class<?> t) {\n     protected ClassMapping [] getMappings() {\n         return (ClassMapping [] ) emf.getConfiguration().getMetaDataRepositoryInstance().getMetaDatas();   \n     }\n+    \n+    protected void setUnsupportedDatabases(Class<?> ... dbs) {\n+        OpenJPAEntityManagerFactorySPI tempEMF = emf;\n+        if (tempEMF == null) {\n+            tempEMF = createEMF();\n+        }\n+        OpenJPAEntityManagerSPI em = tempEMF.createEntityManager();\n+        JDBCConfiguration conf = (JDBCConfiguration) em.getConfiguration();\n+        DBDictionary dict = conf.getDBDictionaryInstance();\n+        for (Class<?> db : dbs) {\n+            if (dict.getClass().getCanonicalName().equalsIgnoreCase(db.getCanonicalName())) {\n+                setTestsDisabled(true);\n+                break;\n+            }\n+        }\n+        if (emf == null) {\n+            closeEMF(tempEMF);\n+        } else {\n+            em.close();\n+        }\n+    }\n+    \n+    protected void setSupportedDatabases(Class<?> ... dbs) {\n+        OpenJPAEntityManagerFactorySPI tempEMF = emf;\n+        if (tempEMF == null) {\n+            tempEMF = createEMF();\n+        }\n+        OpenJPAEntityManagerSPI em = tempEMF.createEntityManager();\n+        JDBCConfiguration conf = (JDBCConfiguration) em.getConfiguration();\n+        DBDictionary dict = conf.getDBDictionaryInstance();\n+        boolean supportedDB = false;\n+        for (Class<?> db : dbs) {\n+            if (dict.getClass().getCanonicalName().equalsIgnoreCase(db.getCanonicalName())) {\n+                supportedDB = true;\n+                break;\n+            }\n+        }\n+        setTestsDisabled(!supportedDB);\n+        if (emf == null) {\n+            closeEMF(tempEMF);\n+        } else {\n+            em.close();\n+        }\n+    }\n+    \n+    protected Log getLog() {\n+        return emf.getConfiguration().getLog(\"Tests\");\n+    }\n }"},{"sha":"422b49062b041136ebce6d1af36f294f0b4e6b6c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/validation/TestValidationFactory.java","status":"modified","additions":0,"deletions":9,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/5113654485807a7884796562b9c62d56a2ec7999/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/validation/TestValidationFactory.java","raw_url":"https://github.com/apache/openjpa/raw/5113654485807a7884796562b9c62d56a2ec7999/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/validation/TestValidationFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/validation/TestValidationFactory.java?ref=5113654485807a7884796562b9c62d56a2ec7999","patch":"@@ -161,13 +161,4 @@ public void testValidationFactory4() {\n         }\n     }\n \n-\n-    /**\n-     * Internal convenience method for getting the OpenJPA logger\n-     * \n-     * @return\n-     */\n-    private Log getLog() {\n-        return emf.getConfiguration().getLog(\"Tests\");\n-    }\n }"},{"sha":"227a07a7786e68c347b8bd094e76495dd855ca67","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/validation/TestValidationMode.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/5113654485807a7884796562b9c62d56a2ec7999/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/validation/TestValidationMode.java","raw_url":"https://github.com/apache/openjpa/raw/5113654485807a7884796562b9c62d56a2ec7999/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/validation/TestValidationMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/validation/TestValidationMode.java?ref=5113654485807a7884796562b9c62d56a2ec7999","patch":"@@ -256,12 +256,4 @@ private void cleanup(OpenJPAEntityManagerFactorySPI emf) {\n         closeEMF(emf);\n     }    \n \n-    /**\n-     * Internal convenience method for getting the OpenJPA logger\n-     * \n-     * @return\n-     */\n-    private Log getLog() {\n-        return emf.getConfiguration().getLog(\"Tests\");\n-    }\n }"},{"sha":"fea11c4b7208748347d683945322ddc853981a1b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java","status":"modified","additions":7,"deletions":66,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/5113654485807a7884796562b9c62d56a2ec7999/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java","raw_url":"https://github.com/apache/openjpa/raw/5113654485807a7884796562b9c62d56a2ec7999/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java?ref=5113654485807a7884796562b9c62d56a2ec7999","patch":"@@ -28,6 +28,7 @@\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n@@ -51,8 +52,6 @@\n  */\n public class TestXMLCustomerOrder\n     extends SingleEMFTestCase {\n-\n-    private static Boolean skipTests = null;\n     \n     private static final int ORDER_1_OID = 10;\n     private static final double ORDER_1_AMOUNT = 850;\n@@ -63,26 +62,16 @@\n     private static final boolean ORDER_2_DELIVERED = false;\n \n     public void setUp() {\n-        // skip test if dictionary has no support for XML column type\n-        if (skipTests == null) {\n-            if (!dictionarySupportsXMLColumn()) {\n-                skipTests = Boolean.TRUE;\n-                // do some logging\n-                OpenJPAEntityManagerFactorySPI emf = createEMF();\n-                emf.getConfiguration().getLog(\"Tests\").trace(\n-                    \"TestXMLCustomerOrder() - Skipping all tests - No XML Column support\");\n-                closeEMF(emf);\n-            } else {\n-                skipTests = Boolean.FALSE;\n-            }\n-        }\n+        setUp(Customer.class, Customer.CustomerKey.class, Order.class,\n+            EAddress.class, CLEAR_TABLES);\n \n-        if (skipTests) {\n+        // skip test if dictionary has no support for XML column type\n+        setTestsDisabled(!dictionarySupportsXMLColumn());\n+        if (isTestsDisabled()) {\n+            getLog().trace(\"TestXMLCustomerOrder() - Skipping all tests - No XML Column support\");\n             return;\n         }\n         \n-        setUp(Customer.class, Customer.CustomerKey.class, Order.class,\n-            EAddress.class, CLEAR_TABLES);\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n         persistEntities(em);\n@@ -92,10 +81,6 @@ public void setUp() {\n \n     @SuppressWarnings(\"unchecked\")\n     public void testXMLFieldProjection() {\n-        if (skipTests) {\n-            return;\n-        }\n-        \n         EntityManager em = emf.createEntityManager();\n         List<Address> addrs = em.createQuery(\n             \"select o.shipAddress from Order o order by o.oid\")\n@@ -116,10 +101,6 @@ public void testXMLFieldProjection() {\n     \n     @SuppressWarnings(\"unchecked\")\n     public void testXMLFieldInEntity() {\n-        if (skipTests) {\n-            return;\n-        }\n-        \n         EntityManager em = emf.createEntityManager();\n         List<Order> orders = em.createQuery(\n             \"select o from Order o order by o.oid\")\n@@ -142,10 +123,6 @@ public void testXMLFieldInEntity() {\n \n     @SuppressWarnings(\"unchecked\")\n     public void testXMLStringToXMLStringComparison() {\n-        if (skipTests) {\n-            return;\n-        }\n-        \n         EntityManager em = emf.createEntityManager();\n         List<Object[]> orders = em.createQuery(\n             \"select o, o2 from Order o, Order o2 where o.shipAddress.city \" +\n@@ -171,10 +148,6 @@ public void testXMLStringToXMLStringComparison() {\n \n     @SuppressWarnings(\"unchecked\")\n     public void testXMLStringToEmbeddedStringComparison() {\n-        if (skipTests) {\n-            return;\n-        }\n-        \n         EntityManager em = emf.createEntityManager();\n         List<Order> orders = em.createQuery(\n             \"select o from Order o, Customer c where o.shipAddress.city \" +\n@@ -190,10 +163,6 @@ public void testXMLStringToEmbeddedStringComparison() {\n \n     @SuppressWarnings(\"unchecked\")\n     public void testXMLStringToConstantStringComparison() {\n-        if (skipTests) {\n-            return;\n-        }\n-        \n         EntityManager em = emf.createEntityManager();\n         List<Order> orders = em.createQuery(\n             \"select o from Order o where o.shipAddress.city = 'San Jose'\")\n@@ -208,10 +177,6 @@ public void testXMLStringToConstantStringComparison() {\n \n     @SuppressWarnings(\"unchecked\")\n     public void testXMLStringToParameterStringComparison() {\n-        if (skipTests) {\n-            return;\n-        }\n-        \n         EntityManager em = emf.createEntityManager();\n         Query query = em.createQuery(\n             \"select o from Order o where o.shipAddress.city = :city\");\n@@ -227,10 +192,6 @@ public void testXMLStringToParameterStringComparison() {\n \n     @SuppressWarnings(\"unchecked\")\n     public void testParameterStringToXMLStringComparison() {\n-        if (skipTests) {\n-            return;\n-        }\n-        \n         EntityManager em = emf.createEntityManager();\n         Query query = em.createQuery(\n             \"select o from Order o where :city = o.shipAddress.city\");\n@@ -245,10 +206,6 @@ public void testParameterStringToXMLStringComparison() {\n     }\n \n     public void testUpdate() {\n-        if (skipTests) {\n-            return;\n-        }\n-        \n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n \n@@ -273,10 +230,6 @@ public void testUpdate() {\n     }\n \n     public void testNullify() {\n-        if (skipTests) {\n-            return;\n-        }\n-        \n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n \n@@ -298,10 +251,6 @@ public void testNullify() {\n     }\n \n     public void testXMLStringToConstantIntComparison() {\n-        if (skipTests) {\n-            return;\n-        }\n-        \n         EntityManager em = emf.createEntityManager();\n         try {\n             em.createQuery(\n@@ -316,10 +265,6 @@ public void testXMLStringToConstantIntComparison() {\n     }\n \n     public void testXMLListToConstantStringComparison() {\n-        if (skipTests) {\n-            return;\n-        }\n-        \n         EntityManager em = emf.createEntityManager();\n         try {\n             em.createQuery(\n@@ -334,10 +279,6 @@ public void testXMLListToConstantStringComparison() {\n     }\n \n     public void testSubclassPropertyInXMLFieldComparison() {\n-        if (skipTests) {\n-            return;\n-        }\n-        \n         EntityManager em = emf.createEntityManager();\n         try {\n             em.createQuery("}]}

