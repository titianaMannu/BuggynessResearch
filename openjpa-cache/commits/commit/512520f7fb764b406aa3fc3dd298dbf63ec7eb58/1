{"sha":"512520f7fb764b406aa3fc3dd298dbf63ec7eb58","node_id":"MDY6Q29tbWl0MjA2MzY0OjUxMjUyMGY3ZmI3NjRiNDA2YWEzZmMzZGQyOThkYmY2M2VjN2ViNTg=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2012-09-05T19:53:52Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2012-09-05T19:53:52Z"},"message":"OPENJPA-2257 Properly synchronized _supportedKeys in ConigurationImpl. Test case contributed by Stephan Hagedorn. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1381326 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"da1ab18b10e46edd19afd4d624ef7a35b959bf44","url":"https://api.github.com/repos/apache/openjpa/git/trees/da1ab18b10e46edd19afd4d624ef7a35b959bf44"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/512520f7fb764b406aa3fc3dd298dbf63ec7eb58","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/512520f7fb764b406aa3fc3dd298dbf63ec7eb58","html_url":"https://github.com/apache/openjpa/commit/512520f7fb764b406aa3fc3dd298dbf63ec7eb58","comments_url":"https://api.github.com/repos/apache/openjpa/commits/512520f7fb764b406aa3fc3dd298dbf63ec7eb58/comments","author":null,"committer":null,"parents":[{"sha":"bc29ef104d0494a08c348a58141760a51f18f534","url":"https://api.github.com/repos/apache/openjpa/commits/bc29ef104d0494a08c348a58141760a51f18f534","html_url":"https://github.com/apache/openjpa/commit/bc29ef104d0494a08c348a58141760a51f18f534"}],"stats":{"total":97,"additions":86,"deletions":11},"files":[{"sha":"09b3a967ff8cb6a7f9f911f03231c07954c6b332","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/512520f7fb764b406aa3fc3dd298dbf63ec7eb58/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/512520f7fb764b406aa3fc3dd298dbf63ec7eb58/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=512520f7fb764b406aa3fc3dd298dbf63ec7eb58","patch":"@@ -118,7 +118,7 @@\n     private boolean _globals = false;\n     private String _auto = null;\n     private final List<Value> _vals = new ArrayList<Value>();\n-    private Set<String> _supportedKeys;\n+    private Set<String> _supportedKeys = new TreeSet<String>();\n     \n     // property listener helper\n     private PropertyChangeSupport _changeSupport = null;\n@@ -697,16 +697,16 @@ else if (map instanceof Properties)\n      * The Values that are {@linkplain Value#makePrivate() marked private} are filtered out. \n      */\n     public Set<String> getPropertyKeys() {\n-        if (_supportedKeys != null) \n-            return _supportedKeys;\n-        \n-        _supportedKeys = new TreeSet<String>();\n-        for (Value val : _vals) {\n-            if (val.isPrivate())\n-                continue;\n-            List<String> keys = val.getPropertyKeys();\n-            for (String key : keys) {\n-                _supportedKeys.add(fixPrefix(key));\n+        synchronized (_supportedKeys) {\n+            if (_supportedKeys.size() == 0) {\n+                for (Value val : _vals) {\n+                    if (val.isPrivate())\n+                        continue;\n+                    List<String> keys = val.getPropertyKeys();\n+                    for (String key : keys) {\n+                        _supportedKeys.add(fixPrefix(key));\n+                    }\n+                }\n             }\n         }\n         return _supportedKeys;"},{"sha":"e0c698727ac6a88774276a24ed78a598b0f3a569","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestGetProperty.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/512520f7fb764b406aa3fc3dd298dbf63ec7eb58/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestGetProperty.java","raw_url":"https://github.com/apache/openjpa/raw/512520f7fb764b406aa3fc3dd298dbf63ec7eb58/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestGetProperty.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestGetProperty.java?ref=512520f7fb764b406aa3fc3dd298dbf63ec7eb58","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.conf;\n+\n+import java.util.*;\n+\n+import javax.persistence.*;\n+\n+import junit.framework.*;\n+\n+import org.apache.openjpa.persistence.*;\n+\n+public class TestGetProperty extends TestCase {\n+    private EntityManagerFactory emf;\n+\n+    public void setUp() throws Exception {\n+        emf = (OpenJPAEntityManagerFactory) Persistence\n+                .createEntityManagerFactory(\"test\");\n+    }\n+\n+    public void tearDown() throws Exception {\n+        emf.close();\n+        emf = null;\n+    }\n+\n+    public void testGetProperty() {\n+        try {\n+            Collection<Thread> tests = new ArrayList<Thread>();\n+            for (int i = 0; i < 10; i++) {\n+                Test test = new Test();\n+                test.start();\n+                tests.add(test);\n+            }\n+\n+            for (Thread test : tests)\n+                test.join();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            fail(e.getMessage());\n+        }\n+    }\n+\n+    class Test extends Thread {\n+        EntityManager em;\n+\n+        public Test() {\n+            this.em = emf.createEntityManager();\n+        }\n+\n+        @Override\n+        public void run() {\n+            for (int i = 0; i < 10; i++) {\n+                em.getProperties();\n+            }\n+            if (em != null && em.isOpen())\n+                em.close();\n+        }\n+    }\n+}"}]}

