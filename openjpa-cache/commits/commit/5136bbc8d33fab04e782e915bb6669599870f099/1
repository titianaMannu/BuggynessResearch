{"sha":"5136bbc8d33fab04e782e915bb6669599870f099","node_id":"MDY6Q29tbWl0MjA2MzY0OjUxMzZiYmM4ZDMzZmFiMDRlNzgyZTkxNWJiNjY2OTU5OTg3MGYwOTk=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-07-22T23:09:02Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-07-22T23:09:02Z"},"message":"OPENJPA-922: \nAllow DB2 to use setByteArrayInputStream instead of setBytes when needed.\nSubmitted by : B. J. Reed\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@796907 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fc609d9f2d2e8a7dcd4091cdd0900040071bd8c5","url":"https://api.github.com/repos/apache/openjpa/git/trees/fc609d9f2d2e8a7dcd4091cdd0900040071bd8c5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5136bbc8d33fab04e782e915bb6669599870f099","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5136bbc8d33fab04e782e915bb6669599870f099","html_url":"https://github.com/apache/openjpa/commit/5136bbc8d33fab04e782e915bb6669599870f099","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5136bbc8d33fab04e782e915bb6669599870f099/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"fc5d50bf1854d3b23cf3ad4c3c33e285525db789","url":"https://api.github.com/repos/apache/openjpa/commits/fc5d50bf1854d3b23cf3ad4c3c33e285525db789","html_url":"https://github.com/apache/openjpa/commit/fc5d50bf1854d3b23cf3ad4c3c33e285525db789"}],"stats":{"total":208,"additions":208,"deletions":0},"files":[{"sha":"2956dc063e48b75bf25f19cedcbed8e61386ca16","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/5136bbc8d33fab04e782e915bb6669599870f099/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/5136bbc8d33fab04e782e915bb6669599870f099/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=5136bbc8d33fab04e782e915bb6669599870f099","patch":"@@ -18,10 +18,13 @@\n  */\n package org.apache.openjpa.jdbc.sql;\n \n+import java.io.ByteArrayInputStream;\n import java.lang.reflect.Method;\n+import java.sql.Blob;\n import java.sql.Connection;\n import java.sql.DatabaseMetaData;\n import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Types;\n import java.util.Arrays;\n@@ -913,4 +916,60 @@ public void setQueryTimeout(PreparedStatement stmnt, int timeout)\n             super.setQueryTimeout(stmnt, timeout);\n         }\n     }\n+\n+    /**\n+     * Set the given value as a parameter to the statement.\n+     */\n+    public void setBytes(PreparedStatement stmnt, int idx, byte[] val,\n+        Column col)\n+        throws SQLException {\n+        // for DB2, if the column was defined as CHAR for BIT DATA, then\n+        // we want to use the setBytes in stead of the setBinaryStream\n+        if (useSetBytesForBlobs \n+                || (col.getTypeName() != null && col.getTypeName().contains(\"BIT DATA\"))) {\n+            stmnt.setBytes(idx, val);\n+        } else {\n+            setBinaryStream(stmnt, idx, new ByteArrayInputStream(val), val.length, col);\n+        }\n+    }\n+\n+    /**\n+     * Convert the specified column of the SQL ResultSet to the proper\n+     * java type.\n+     */\n+    public byte[] getBytes(ResultSet rs, int column)\n+        throws SQLException {\n+        if (useGetBytesForBlobs) {\n+            return rs.getBytes(column);\n+        }\n+        if (useGetObjectForBlobs) {\n+            return (byte[]) rs.getObject(column);\n+        }\n+\n+        // At this point we don't have any idea if the DB2 column was defined as\n+        //     a blob or if it was defined as CHAR for BIT DATA.\n+        // First try as a blob, if that doesn't work, then try as CHAR for BIT DATA\n+        // If that doesn't work, then go ahead and throw the first exception\n+        try {\n+            Blob blob = getBlob(rs, column);\n+            if (blob == null) {\n+                return null;\n+            }\n+            \n+            int length = (int) blob.length();\n+            if (length == 0) {\n+                return null;\n+            }\n+            \n+            return blob.getBytes(1, length);\n+        }\n+        catch (SQLException e) {\n+            try {\n+                return rs.getBytes(column);\n+            }\n+            catch (SQLException e2) {\n+                throw e;                \n+            }\n+        }\n+    }\n }"},{"sha":"070df428c113a24bcadcd1af744e02ea940b2a82","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/ByteArrayHolder.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/5136bbc8d33fab04e782e915bb6669599870f099/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/ByteArrayHolder.java","raw_url":"https://github.com/apache/openjpa/raw/5136bbc8d33fab04e782e915bb6669599870f099/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/ByteArrayHolder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/ByteArrayHolder.java?ref=5136bbc8d33fab04e782e915bb6669599870f099","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.fields;\n+\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.GeneratedValue;\n+\n+import static javax.persistence.GenerationType.IDENTITY;\n+\n+@Entity\n+public class ByteArrayHolder implements Serializable {\n+    @Id\n+    @Column(name=\"TASK_ID\")\n+    @GeneratedValue(strategy=IDENTITY)\n+    private int taskId;\n+\n+    @Column(columnDefinition=\"CHAR(16) FOR BIT DATA NOT NULL\")  // type 1004 size -1 should be size 0\n+    //@Lob //type 1004 size -1 should be 1003\n+    private byte[] tkiid;\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public ByteArrayHolder() {\n+        super();\n+    }\n+\n+    public int getTaskId() {\n+        return this.taskId;\n+    }\n+\n+    public void setTaskId(int taskId) {\n+        this.taskId = taskId;\n+    }\n+\n+    public byte[] getTkiid() {\n+        return this.tkiid;\n+    }\n+\n+    public void setTkiid(byte[] tkiid) {\n+        this.tkiid = tkiid;\n+    }\n+}"},{"sha":"7bda2ca781c330c75581d558e27b5ad6ef238ec9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestByteArray.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/5136bbc8d33fab04e782e915bb6669599870f099/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestByteArray.java","raw_url":"https://github.com/apache/openjpa/raw/5136bbc8d33fab04e782e915bb6669599870f099/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestByteArray.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestByteArray.java?ref=5136bbc8d33fab04e782e915bb6669599870f099","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.fields;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DB2Dictionary;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n+\n+/*\n+ * This tests a particular kind of byte [] that is not a BLOB for DB2.  Don't need to\n+ * do anything except return if we are using a different DB.\n+ */\n+public class TestByteArray extends SingleEMTestCase {\n+    boolean runTest=false;\n+    \n+    public void setUp()  {\n+        super.setUp();\n+        OpenJPAEntityManagerFactorySPI ojpaEmf = (OpenJPAEntityManagerFactorySPI) emf;\n+        JDBCConfiguration conf = (JDBCConfiguration) ojpaEmf.getConfiguration();\n+        if (conf.getDBDictionaryInstance() instanceof DB2Dictionary) {\n+            runTest = true;\n+            super.setUp(ByteArrayHolder.class, CLEAR_TABLES);\n+        }\n+    }\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    public void testByteArray() {\n+        if (! runTest) { \n+            // skip if not DB2 (from setup)\n+            System.out.println(\"MDD skipping\");\n+            return;\n+        }\n+\n+        EntityManager em = emf.createEntityManager();\n+        EntityManager em2 = emf.createEntityManager();\n+\n+        byte[] ba =\n+            new byte[] { (byte) 0xa0, (byte) 0x1b, (byte) 0x01, (byte) 0x1f,\n+                (byte) 0x38, (byte) 0xcf, (byte) 0x67, (byte) 0x35,\n+                (byte) 0x55, (byte) 0x43, (byte) 0xd9, (byte) 0xf6,\n+                (byte) 0x71, (byte) 0x5e, (byte) 0x00, (byte) 0x00 };\n+        ByteArrayHolder holder = new ByteArrayHolder();\n+        holder.setTkiid(ba);\n+        try {\n+            em.getTransaction().begin();\n+            em.persist(holder);\n+            em.getTransaction().commit();\n+        } catch(Throwable t) {\n+            t.printStackTrace();\n+            fail(\"Error: Task insert failed\");\n+        }\n+\n+        // verify that the get works\n+        Query q = em2.createQuery(\"select e from ByteArrayHolder e\");\n+        List<ByteArrayHolder> elist = q.getResultList();\n+        for (ByteArrayHolder e : elist) {\n+            String baFromH = new String(e.getTkiid());\n+            assertEquals(new String (ba), baFromH);\n+        }\n+        \n+        // verify that it's still in the original EntityManager \n+        holder = em.find(ByteArrayHolder.class, holder.getTaskId());\n+        String baFromH = new String(holder.getTkiid());\n+        assertEquals(new String (ba), baFromH);\n+    }\n+}"}]}

