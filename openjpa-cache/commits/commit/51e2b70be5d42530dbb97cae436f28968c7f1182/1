{"sha":"51e2b70be5d42530dbb97cae436f28968c7f1182","node_id":"MDY6Q29tbWl0MjA2MzY0OjUxZTJiNzBiZTVkNDI1MzBkYmI5N2NhZTQzNmYyODk2OGM3ZjExODI=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2014-03-11T21:12:12Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2014-03-11T21:12:12Z"},"message":"OPENJPA-2482: Cache column alias on colum+pathjoins rather than just column.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1576505 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"237c3ec98f777659c19b43dcfa824348d5db8bfb","url":"https://api.github.com/repos/apache/openjpa/git/trees/237c3ec98f777659c19b43dcfa824348d5db8bfb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/51e2b70be5d42530dbb97cae436f28968c7f1182","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/51e2b70be5d42530dbb97cae436f28968c7f1182","html_url":"https://github.com/apache/openjpa/commit/51e2b70be5d42530dbb97cae436f28968c7f1182","comments_url":"https://api.github.com/repos/apache/openjpa/commits/51e2b70be5d42530dbb97cae436f28968c7f1182/comments","author":null,"committer":null,"parents":[{"sha":"6d8a46e82540d035d4ba53a7760cc7edca2391af","url":"https://api.github.com/repos/apache/openjpa/commits/6d8a46e82540d035d4ba53a7760cc7edca2391af","html_url":"https://github.com/apache/openjpa/commit/6d8a46e82540d035d4ba53a7760cc7edca2391af"}],"stats":{"total":65,"additions":55,"deletions":10},"files":[{"sha":"929d7be1bbcbadf1fbecb885e3180e9f88fe4196","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":55,"deletions":10,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/51e2b70be5d42530dbb97cae436f28968c7f1182/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/51e2b70be5d42530dbb97cae436f28968c7f1182/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=51e2b70be5d42530dbb97cae436f28968c7f1182","patch":"@@ -55,8 +55,8 @@\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.kernel.StoreContext;\n-import org.apache.openjpa.kernel.exps.Value;\n import org.apache.openjpa.kernel.exps.Context;\n+import org.apache.openjpa.kernel.exps.Value;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.ApplicationIds;\n@@ -2321,7 +2321,7 @@ Object getKey() {\n         implements PathJoins {\n \n         private SelectImpl _sel = null;\n-        private Map<Column, Object> cachedColumnAlias_ = null;\n+        private Map<CachedColumnAliasKey, Object> cachedColumnAlias_ = null;\n \n         // position in selected columns list where we expect the next load\n         private int _pos = 0;\n@@ -2405,9 +2405,10 @@ protected boolean containsInternal(Object obj, Joins joins) {\n             if (pj != null && pj.path() != null) {\n                 Object columnAlias = getColumnAlias((Column) obj, pj);\n                 if (joins == null) {\n-                    if (cachedColumnAlias_ == null)\n-                        cachedColumnAlias_ = new HashMap<Column, Object>();\n-                    cachedColumnAlias_.put((Column) obj, columnAlias);\n+                    if (cachedColumnAlias_ == null) {\n+                        cachedColumnAlias_ = new HashMap<CachedColumnAliasKey, Object>();\n+                    }\n+                    cachedColumnAlias_.put(new CachedColumnAliasKey((Column) obj, pj), columnAlias);\n                 }\n                 return columnAlias != null && _sel._selects.contains(columnAlias);\n             }\n@@ -2449,6 +2450,7 @@ protected boolean nextInternal()\n \n         protected int findObject(Object obj, Joins joins)\n             throws SQLException {\n+            Object orig = obj;\n             if (_pos == _sel._selects.size())\n                 _pos = 0;\n \n@@ -2460,9 +2462,10 @@ protected int findObject(Object obj, Joins joins)\n                 Column col = (Column) obj;\n                 pk = (col.isPrimaryKey()) ? Boolean.TRUE : Boolean.FALSE;\n                 if (joins == null && cachedColumnAlias_ != null) {\n-                    obj = cachedColumnAlias_.get(col);\n-                    if (obj == null)\n+                    obj = cachedColumnAlias_.get(new CachedColumnAliasKey((Column) obj, pj));\n+                    if (obj == null) {\n                         obj = getColumnAlias(col, pj);\n+                    }\n                 } else {\n                     obj = getColumnAlias(col, pj);\n                 }\n@@ -2641,6 +2644,48 @@ public String getCorrelatedVariable() {\n \n         public void moveJoinsToParent() {\n         }\n+        \n+        private static final class CachedColumnAliasKey {\n+            private final Column col;\n+            private final PathJoins pjs;\n+\n+            public CachedColumnAliasKey(Column c, PathJoins p) {\n+                col = c;\n+                pjs = p;\n+            }\n+\n+            @Override\n+            public int hashCode() {\n+                final int prime = 31;\n+                int result = 1;\n+                result = prime * result + ((col == null) ? 0 : col.hashCode());\n+                result = prime * result + ((pjs == null) ? 0 : pjs.hashCode());\n+                return result;\n+            }\n+\n+            @Override\n+            public boolean equals(Object obj) {\n+                if (this == obj)\n+                    return true;\n+                if (obj == null)\n+                    return false;\n+                if (getClass() != obj.getClass())\n+                    return false;\n+                CachedColumnAliasKey other = (CachedColumnAliasKey) obj;\n+                if (col == null) {\n+                    if (other.col != null)\n+                        return false;\n+                } else if (!col.equals(other.col))\n+                    return false;\n+                if (pjs == null) {\n+                    if (other.pjs != null)\n+                        return false;\n+                } else if (!pjs.equals(other.pjs))\n+                    return false;\n+                return true;\n+            }\n+\n+        }\n     }\n \n     /**\n@@ -2775,11 +2820,11 @@ public String toString() {\n                 + String.valueOf(path);\n         }\n \n-        public void moveJoinsToParent() {\n-        }\n+    public void moveJoinsToParent() {\n     }\n+}\n \n-    /**\n+/**\n      * Joins implementation.\n      */\n     private static class SelectJoins"}]}

