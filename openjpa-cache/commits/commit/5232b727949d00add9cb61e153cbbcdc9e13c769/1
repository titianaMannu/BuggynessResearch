{"sha":"5232b727949d00add9cb61e153cbbcdc9e13c769","node_id":"MDY6Q29tbWl0MjA2MzY0OjUyMzJiNzI3OTQ5ZDAwYWRkOWNiNjFlMTUzY2JiY2RjOWUxM2M3Njk=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-03T21:04:50Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-03T21:04:50Z"},"message":"OPENJPA-1163:\nAdd configuration option that allows the elements in a persistent map to be treated as the owners of the relationship (ie updates to the hashmap can add elements without removing old ones). \nSubmitted By : Ravi Palacherla\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@800563 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"91e39fc409f31fdfdd4cafba0b03bd126853447f","url":"https://api.github.com/repos/apache/openjpa/git/trees/91e39fc409f31fdfdd4cafba0b03bd126853447f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5232b727949d00add9cb61e153cbbcdc9e13c769","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5232b727949d00add9cb61e153cbbcdc9e13c769","html_url":"https://github.com/apache/openjpa/commit/5232b727949d00add9cb61e153cbbcdc9e13c769","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5232b727949d00add9cb61e153cbbcdc9e13c769/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"b5e893b5a732468e147c7c5060e1141b9c6d3474","url":"https://api.github.com/repos/apache/openjpa/commits/b5e893b5a732468e147c7c5060e1141b9c6d3474","html_url":"https://github.com/apache/openjpa/commit/b5e893b5a732468e147c7c5060e1141b9c6d3474"}],"stats":{"total":145,"additions":87,"deletions":58},"files":[{"sha":"a3ba6d2c83401a4c7e21e2b7df90c4fb482b3111","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/5232b727949d00add9cb61e153cbbcdc9e13c769/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","raw_url":"https://github.com/apache/openjpa/raw/5232b727949d00add9cb61e153cbbcdc9e13c769/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java?ref=5232b727949d00add9cb61e153cbbcdc9e13c769","patch":"@@ -60,6 +60,7 @@\n     private boolean _useJPA2DefaultOrderColumnName = true;\n     private boolean _copyOnDetach = false;\n     private boolean _privatePersistentProperties = false;\n+    private boolean _autoOff = true;\n     \n     /**\n      * Whether to require exact identity value types when creating object\n@@ -76,6 +77,22 @@ public boolean getStrictIdentityValues() {\n     public void setStrictIdentityValues(boolean strictVals) {\n         _strictIdValues = strictVals;\n     }\n+    \n+    /**\n+     * Whether to turn collection/map tracing off in case of more number of modifications.\n+     * Defaults to true.\n+     */\n+    public boolean getAutoOff() {\n+        return _autoOff;\n+    }\n+\n+    /**\n+     * Whether to turn collection/map tracing off in case of more number of modifications.\n+     * Defaults to true.\n+     */\n+    public void setAutoOff(boolean autoOff) {\n+        _autoOff = autoOff;\n+    }\n \n     /**\n      * Whether to interpret quoted numbers in query strings as numbers."},{"sha":"99a6c5ed7e390666d4657d722f27a78d2abe5d5a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/5232b727949d00add9cb61e153cbbcdc9e13c769/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","raw_url":"https://github.com/apache/openjpa/raw/5232b727949d00add9cb61e153cbbcdc9e13c769/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java?ref=5232b727949d00add9cb61e153cbbcdc9e13c769","patch":"@@ -743,7 +743,9 @@ private Object detachField(Object curVal, int field) {\n                         newVal = _proxy.newCollectionProxy(fmd.getProxyType(),\n                             fmd.getElement().getDeclaredType(),\n                             fmd.getInitializer() instanceof Comparator ?\n-                            (Comparator) fmd.getInitializer() : null);\n+                            (Comparator) fmd.getInitializer() : null,\n+                            sm.getBroker().getConfiguration().\n+                            getCompatibilityInstance().getAutoOff());\n                         ((Collection) newVal).addAll((Collection) curVal);\n                     } else\n                         newVal = _proxy.copyCollection((Collection) curVal);\n@@ -761,7 +763,9 @@ private Object detachField(Object curVal, int field) {\n                             fmd.getKey().getDeclaredType(),\n                             fmd.getElement().getDeclaredType(),\n                             fmd.getInitializer() instanceof Comparator ?\n-                                (Comparator) fmd.getInitializer() : null);\n+                                (Comparator) fmd.getInitializer() : null,\n+                                sm.getBroker().getConfiguration().\n+                                getCompatibilityInstance().getAutoOff());\n                         ((Map) newVal).putAll((Map) curVal);\n                     } else\n                         newVal = _proxy.copyMap((Map) curVal);"},{"sha":"ad49dcfdef7d188bb30d1268bb38170ba4700005","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/5232b727949d00add9cb61e153cbbcdc9e13c769/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","raw_url":"https://github.com/apache/openjpa/raw/5232b727949d00add9cb61e153cbbcdc9e13c769/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java?ref=5232b727949d00add9cb61e153cbbcdc9e13c769","patch":"@@ -125,7 +125,9 @@ public boolean proxy(boolean reset, boolean replaceNull) {\n                     return false;\n                 proxy = checkProxy();\n                 if (proxy == null) {\n-                    proxy = getProxyManager().newCustomProxy(objval);\n+                    proxy = getProxyManager().newCustomProxy(objval,\n+                        _sm.getBroker().getConfiguration().\n+                        getCompatibilityInstance().getAutoOff());\n                     ret = proxy != null;\n                 }\n                 break;"},{"sha":"c3941bde41ffd8f83cc94d45589c520071937e75","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/5232b727949d00add9cb61e153cbbcdc9e13c769/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/5232b727949d00add9cb61e153cbbcdc9e13c769/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=5232b727949d00add9cb61e153cbbcdc9e13c769","patch":"@@ -1813,12 +1813,14 @@ public Object newFieldProxy(int field) {\n             case JavaTypes.COLLECTION:\n                 return mgr.newCollectionProxy(fmd.getProxyType(),\n                     fmd.getElement().getDeclaredType(),\n-                    init instanceof Comparator ? (Comparator) init : null);\n+                    init instanceof Comparator ? (Comparator) init : null,\n+                        _broker.getConfiguration().getCompatibilityInstance().getAutoOff());\n             case JavaTypes.MAP:\n                 return mgr.newMapProxy(fmd.getProxyType(),\n                     fmd.getKey().getDeclaredType(),\n                     fmd.getElement().getDeclaredType(),\n-                    init instanceof Comparator ? (Comparator) init : null);\n+                    init instanceof Comparator ? (Comparator) init : null,\n+                        _broker.getConfiguration().getCompatibilityInstance().getAutoOff());\n         }\n         return null;\n     }"},{"sha":"f8eb1057b3d366856605075aae3e80c4a5d1e4d2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractLRSProxyCollection.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/5232b727949d00add9cb61e153cbbcdc9e13c769/openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractLRSProxyCollection.java","raw_url":"https://github.com/apache/openjpa/raw/5232b727949d00add9cb61e153cbbcdc9e13c769/openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractLRSProxyCollection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractLRSProxyCollection.java?ref=5232b727949d00add9cb61e153cbbcdc9e13c769","patch":"@@ -69,7 +69,7 @@\n      */\n     public AbstractLRSProxyCollection(Class elementType, boolean ordered) {\n         _elementType = elementType;\n-        _ct = new CollectionChangeTrackerImpl(this, false, ordered);\n+        _ct = new CollectionChangeTrackerImpl(this, false, ordered,false);\n         _ct.setAutoOff(false);\n     }\n "},{"sha":"b87388b796142b05befccf0c953a815f2e0ba37d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractLRSProxyMap.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/5232b727949d00add9cb61e153cbbcdc9e13c769/openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractLRSProxyMap.java","raw_url":"https://github.com/apache/openjpa/raw/5232b727949d00add9cb61e153cbbcdc9e13c769/openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractLRSProxyMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/AbstractLRSProxyMap.java?ref=5232b727949d00add9cb61e153cbbcdc9e13c769","patch":"@@ -73,7 +73,7 @@\n     public AbstractLRSProxyMap(Class<K> keyType, Class<V> valueType) {\n         _keyType = keyType;\n         _valueType = valueType;\n-        _ct = new MapChangeTrackerImpl(this);\n+        _ct = new MapChangeTrackerImpl(this,false);\n         _ct.setAutoOff(false);\n     }\n "},{"sha":"6967836763de4231cf0aea7797b9e1125d3276f8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/CollectionChangeTrackerImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/5232b727949d00add9cb61e153cbbcdc9e13c769/openjpa-kernel/src/main/java/org/apache/openjpa/util/CollectionChangeTrackerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/5232b727949d00add9cb61e153cbbcdc9e13c769/openjpa-kernel/src/main/java/org/apache/openjpa/util/CollectionChangeTrackerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/CollectionChangeTrackerImpl.java?ref=5232b727949d00add9cb61e153cbbcdc9e13c769","patch":"@@ -43,10 +43,11 @@\n      * @param order true if the collection is ordered, false otherwise\n      */\n     public CollectionChangeTrackerImpl(Collection coll, boolean dups,\n-        boolean order) {\n+        boolean order,boolean autoOff) {\n         _coll = coll;\n         _dups = dups;\n         _order = order;\n+        this.setAutoOff(autoOff);\n     }\n \n     /**"},{"sha":"3f33b0637caeab28913f03abecfc85e66ee81db3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/MapChangeTrackerImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/5232b727949d00add9cb61e153cbbcdc9e13c769/openjpa-kernel/src/main/java/org/apache/openjpa/util/MapChangeTrackerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/5232b727949d00add9cb61e153cbbcdc9e13c769/openjpa-kernel/src/main/java/org/apache/openjpa/util/MapChangeTrackerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/MapChangeTrackerImpl.java?ref=5232b727949d00add9cb61e153cbbcdc9e13c769","patch":"@@ -36,8 +36,9 @@\n     /**\n      * Constructor; supply delegate map.\n      */\n-    public MapChangeTrackerImpl(Map map) {\n+    public MapChangeTrackerImpl(Map map, boolean autoOff) {\n         _map = map;\n+        this.setAutoOff(autoOff);\n     }\n \n     public boolean getTrackKeys() {"},{"sha":"44e39d7cbe824a4048e273e6f29ad91ac3930d82","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollection.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/5232b727949d00add9cb61e153cbbcdc9e13c769/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollection.java","raw_url":"https://github.com/apache/openjpa/raw/5232b727949d00add9cb61e153cbbcdc9e13c769/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollection.java?ref=5232b727949d00add9cb61e153cbbcdc9e13c769","patch":"@@ -38,5 +38,5 @@\n      * Create a new instance of this proxy type.\n      */\n     public ProxyCollection newInstance(Class elementType, Comparator comp,\n-        boolean trackChanges);\n+        boolean trackChanges, boolean autoOff);\n }"},{"sha":"2c88c152752ca0f56581ce1077149bef39d6b1be","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/5232b727949d00add9cb61e153cbbcdc9e13c769/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManager.java","raw_url":"https://github.com/apache/openjpa/raw/5232b727949d00add9cb61e153cbbcdc9e13c769/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManager.java?ref=5232b727949d00add9cb61e153cbbcdc9e13c769","patch":"@@ -82,7 +82,7 @@\n      * element type and will use the given comparator, if it is not null.\n      */\n     public Proxy newCollectionProxy(Class type, Class elementType,\n-        Comparator compare);\n+        Comparator compare, boolean autoOff);\n \n     /**\n      * Return a new map of the same type as the given one\n@@ -96,7 +96,7 @@ public Proxy newCollectionProxy(Class type, Class elementType,\n      * keyType/valueType, and will use the given comparator, if it is not null.\n      */\n     public Proxy newMapProxy(Class type, Class keyType, Class valueType,\n-        Comparator compare);\n+        Comparator compare, boolean autoOff);\n \n     /**\n      * Return a copy of the given object with the same information, or null if\n@@ -112,5 +112,5 @@ public Proxy newMapProxy(Class type, Class keyType, Class valueType,\n      *\n      * @since 0.2.5\n      */\n-    public Proxy newCustomProxy (Object obj);\n+    public Proxy newCustomProxy (Object obj, boolean autoOff);\n }"},{"sha":"4ce438aeee7ffda63114015d91a0a046b674a8d9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","status":"modified","additions":13,"deletions":11,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/5232b727949d00add9cb61e153cbbcdc9e13c769/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/5232b727949d00add9cb61e153cbbcdc9e13c769/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java?ref=5232b727949d00add9cb61e153cbbcdc9e13c769","patch":"@@ -184,11 +184,11 @@ public Collection copyCollection(Collection orig) {\n     }\n \n     public Proxy newCollectionProxy(Class type, Class elementType,\n-        Comparator compare) {\n+        Comparator compare, boolean autoOff) {\n         type = toProxyableCollectionType(type);\n         ProxyCollection proxy = getFactoryProxyCollection(type);\n         return proxy.newInstance((_assertType) ? elementType : null, compare,\n-            _trackChanges);\n+            _trackChanges, autoOff);\n     }\n \n     public Map copyMap(Map orig) {\n@@ -202,11 +202,11 @@ public Map copyMap(Map orig) {\n     }\n \n     public Proxy newMapProxy(Class type, Class keyType, \n-        Class elementType, Comparator compare) {\n+        Class elementType, Comparator compare,boolean autoOff) {\n         type = toProxyableMapType(type);\n         ProxyMap proxy = getFactoryProxyMap(type);\n         return proxy.newInstance((_assertType) ? keyType : null, \n-            (_assertType) ? elementType : null, compare, _trackChanges);\n+            (_assertType) ? elementType : null, compare, _trackChanges, autoOff);\n     }\n \n     public Date copyDate(Date orig) {\n@@ -263,7 +263,7 @@ public Object copyCustom(Object orig) {\n         return (proxy == null) ? null : proxy.copy(orig); \n     }\n \n-    public Proxy newCustomProxy(Object orig) {\n+    public Proxy newCustomProxy(Object orig, boolean autoOff) {\n         if (orig == null)\n             return null;\n         if (orig instanceof Proxy)\n@@ -274,14 +274,14 @@ public Proxy newCustomProxy(Object orig) {\n             Comparator comp = (orig instanceof SortedSet) \n                 ? ((SortedSet) orig).comparator() : null;\n             Collection c = (Collection) newCollectionProxy(orig.getClass(), \n-                null, comp); \n+                null, comp, autoOff); \n             c.addAll((Collection) orig);\n             return (Proxy) c;\n         }\n         if (orig instanceof Map) {\n             Comparator comp = (orig instanceof SortedMap) \n                 ? ((SortedMap) orig).comparator() : null;\n-            Map m = (Map) newMapProxy(orig.getClass(), null, null, comp);\n+            Map m = (Map) newMapProxy(orig.getClass(), null, null, comp, autoOff);\n             m.putAll((Map) orig);\n             return (Proxy) m;\n         }\n@@ -814,7 +814,7 @@ private void addProxyCollectionMethods(BCClass bc, Class type) {\n \n         // new instance factory\n         m = bc.declareMethod(\"newInstance\", ProxyCollection.class, \n-            new Class[] { Class.class, Comparator.class, boolean.class });\n+            new Class[] { Class.class, Comparator.class, boolean.class, boolean.class });\n         m.makePublic();\n         code = m.getCode(true);\n \n@@ -842,9 +842,10 @@ private void addProxyCollectionMethods(BCClass bc, Class type) {\n         code.aload().setLocal(ret);\n         code.constant().setValue(allowsDuplicates(type));\n         code.constant().setValue(isOrdered(type));\n+        code.aload().setParam(3);\n         code.invokespecial().setMethod(CollectionChangeTrackerImpl.class, \n             \"<init>\", void.class, new Class[] { Collection.class, \n-            boolean.class, boolean.class });\n+            boolean.class, boolean.class, boolean.class });\n         code.putfield().setField(changeTracker);\n \n         ifins.setTarget(code.aload().setLocal(ret));\n@@ -948,7 +949,7 @@ private void addProxyMapMethods(BCClass bc, Class type) {\n         // new instance factory\n         m = bc.declareMethod(\"newInstance\", ProxyMap.class, \n             new Class[] { Class.class, Class.class, Comparator.class, \n-            boolean.class });\n+            boolean.class,boolean.class });\n         m.makePublic();\n         code = m.getCode(true);\n \n@@ -977,8 +978,9 @@ private void addProxyMapMethods(BCClass bc, Class type) {\n         code.anew().setType(MapChangeTrackerImpl.class);\n         code.dup();\n         code.aload().setLocal(ret);\n+        code.aload().setParam(4);\n         code.invokespecial().setMethod(MapChangeTrackerImpl.class, \n-            \"<init>\", void.class, new Class[] { Map.class });\n+            \"<init>\", void.class, new Class[] { Map.class, boolean.class });\n         code.putfield().setField(changeTracker);\n \n         ifins.setTarget(code.aload().setLocal(ret));"},{"sha":"5c4c030d9f213eb84b724852b53c915dcde84efd","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyMap.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/5232b727949d00add9cb61e153cbbcdc9e13c769/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyMap.java","raw_url":"https://github.com/apache/openjpa/raw/5232b727949d00add9cb61e153cbbcdc9e13c769/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyMap.java?ref=5232b727949d00add9cb61e153cbbcdc9e13c769","patch":"@@ -43,5 +43,5 @@\n      * Create a new instance of this proxy type.\n      */\n     public ProxyMap newInstance(Class keyType, Class valueType,\n-        Comparator compare, boolean trackChanges);\n+        Comparator compare, boolean trackChanges, boolean autoOff);\n }"},{"sha":"21037d9e8fa0effbfca4af5230416e98dad88395","filename":"openjpa-kernel/src/test/java/org/apache/openjpa/util/TestProxyManager.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/5232b727949d00add9cb61e153cbbcdc9e13c769/openjpa-kernel/src/test/java/org/apache/openjpa/util/TestProxyManager.java","raw_url":"https://github.com/apache/openjpa/raw/5232b727949d00add9cb61e153cbbcdc9e13c769/openjpa-kernel/src/test/java/org/apache/openjpa/util/TestProxyManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/test/java/org/apache/openjpa/util/TestProxyManager.java?ref=5232b727949d00add9cb61e153cbbcdc9e13c769","patch":"@@ -173,12 +173,12 @@ public void testCopyNullCollection() {\n     }\n \n     public void testCopyProxyCollection() {\n-        List orig = (List) _mgr.newCollectionProxy(ArrayList.class, null, null);\n+        List orig = (List) _mgr.newCollectionProxy(ArrayList.class, null, null,true);\n         populate(orig);\n         assertListsEqual(new ArrayList(orig), (List) _mgr.copyCollection(orig));\n \n         TreeSet torig = (TreeSet) _mgr.newCollectionProxy(TreeSet.class, null, \n-            new CustomComparator());\n+            new CustomComparator(),true);\n         assertTrue(torig.comparator() instanceof CustomComparator);\n         populate(torig);\n         assertSortedSetsEqual(new TreeSet(torig), (SortedSet) \n@@ -189,19 +189,19 @@ public void testCloneProxyCollection() {\n         // List doesn't support clone()\n         \n         TreeSet torig = (TreeSet) _mgr.newCollectionProxy(TreeSet.class, null, \n-            new CustomComparator());\n+            new CustomComparator(),true);\n         assertTrue(torig.comparator() instanceof CustomComparator);\n         populate(torig);\n         assertSortedSetsEquals(new TreeSet(torig), (SortedSet) torig.clone());\n     }\n \n     public void testListMethodsProxied() \n         throws Exception {\n-        Class proxy = _mgr.newCollectionProxy(ArrayList.class, null, null).\n+        Class proxy = _mgr.newCollectionProxy(ArrayList.class, null, null,true).\n             getClass();\n         assertListMethodsProxied(proxy);\n \n-        proxy = _mgr.newCollectionProxy(CustomList.class, null, null).\n+        proxy = _mgr.newCollectionProxy(CustomList.class, null, null,true).\n             getClass();\n         assertListMethodsProxied(proxy);\n     }\n@@ -255,19 +255,19 @@ private void assertListMethodsProxied(Class cls)\n \n     public void testSetMethodsProxied() \n         throws Exception {\n-        Class proxy = _mgr.newCollectionProxy(HashSet.class, null, null).\n+        Class proxy = _mgr.newCollectionProxy(HashSet.class, null, null,true).\n             getClass();\n         assertCollectionMethodsProxied(proxy);\n \n-        proxy = _mgr.newCollectionProxy(CustomSet.class, null, null).getClass();\n+        proxy = _mgr.newCollectionProxy(CustomSet.class, null, null,true).getClass();\n         assertCollectionMethodsProxied(proxy);\n \n-        proxy = _mgr.newCollectionProxy(CustomSortedSet.class, null, null).\n+        proxy = _mgr.newCollectionProxy(CustomSortedSet.class, null, null,true).\n             getClass();\n         assertCollectionMethodsProxied(proxy);\n \n         proxy = _mgr.newCollectionProxy(CustomComparatorSortedSet.class, null, \n-            new CustomComparator()).getClass();\n+            new CustomComparator(),true).getClass();\n         assertCollectionMethodsProxied(proxy);\n     }\n \n@@ -277,7 +277,7 @@ public void testQueueMethodsProxied()\n         if (queue == null)\n             return;\n \n-        Class proxy = _mgr.newCollectionProxy(LinkedList.class, null, null).\n+        Class proxy = _mgr.newCollectionProxy(LinkedList.class, null, null,true).\n             getClass();\n         assertTrue(queue.isAssignableFrom(proxy));        \n         assertCollectionMethodsProxied(proxy);\n@@ -295,7 +295,7 @@ public void testQueueMethodsProxied()\n \n     public void testLinkedListMethodsProxied() \n         throws Exception {\n-        Class proxy = _mgr.newCollectionProxy(LinkedList.class, null, null).\n+        Class proxy = _mgr.newCollectionProxy(LinkedList.class, null, null,true).\n             getClass();\n         assertListMethodsProxied(proxy);\n         assertNotNull(proxy.getDeclaredMethod(\"addFirst\", \n@@ -308,7 +308,7 @@ public void testLinkedListMethodsProxied()\n \n     public void testVectorMethodsProxied() \n         throws Exception {\n-         Class proxy = _mgr.newCollectionProxy(Vector.class, null, null).\n+         Class proxy = _mgr.newCollectionProxy(Vector.class, null, null,true).\n             getClass();\n         assertListMethodsProxied(proxy);\n         assertNotNull(proxy.getDeclaredMethod(\"addElement\", \n@@ -326,7 +326,7 @@ public void testVectorMethodsProxied()\n     }\n \n     public void testListChangeTracker() {\n-        Proxy coll = _mgr.newCollectionProxy(ArrayList.class, null, null);\n+        Proxy coll = _mgr.newCollectionProxy(ArrayList.class, null, null,true);\n         assertNotNull(coll);\n         assertNotNull(coll.getChangeTracker());\n         assertTrue(coll.getChangeTracker() \n@@ -338,7 +338,7 @@ public void testListChangeTracker() {\n     }\n     \n     public void testSetChangeTracker() {\n-        Proxy coll = _mgr.newCollectionProxy(HashSet.class, null, null);\n+        Proxy coll = _mgr.newCollectionProxy(HashSet.class, null, null,true);\n         assertNotNull(coll);\n         assertNotNull(coll.getChangeTracker());\n         assertTrue(coll.getChangeTracker() \n@@ -350,25 +350,25 @@ public void testSetChangeTracker() {\n     }\n  \n     public void testCollectionInterfaceProxy() {\n-        Proxy coll = _mgr.newCollectionProxy(Collection.class, null, null);\n+        Proxy coll = _mgr.newCollectionProxy(Collection.class, null, null,true);\n         assertNotNull(coll);\n     }\n \n     public void testListInterfaceProxy() {\n-        Proxy coll = _mgr.newCollectionProxy(List.class, null, null);\n+        Proxy coll = _mgr.newCollectionProxy(List.class, null, null,true);\n         assertNotNull(coll);\n         assertTrue(coll instanceof List);\n     }\n \n     public void testSetInterfaceProxy() {\n-        Proxy coll = _mgr.newCollectionProxy(Set.class, null, null);\n+        Proxy coll = _mgr.newCollectionProxy(Set.class, null, null,true);\n         assertNotNull(coll);\n         assertTrue(coll instanceof Set);\n         assertFalse(coll instanceof SortedSet);\n     }\n \n     public void testSortedSetInterfaceProxy() {\n-        Proxy coll = _mgr.newCollectionProxy(SortedSet.class, null, null);\n+        Proxy coll = _mgr.newCollectionProxy(SortedSet.class, null, null,true);\n         assertNotNull(coll);\n         assertTrue(coll instanceof SortedSet);\n     }\n@@ -378,7 +378,7 @@ public void testQueueInterfaceProxy() {\n         if (queue == null)\n             return;\n \n-        Proxy coll = _mgr.newCollectionProxy(queue, null, null);\n+        Proxy coll = _mgr.newCollectionProxy(queue, null, null,true);\n         assertNotNull(coll);\n         assertTrue(queue.isInstance(coll));\n     }\n@@ -479,12 +479,12 @@ public void testCopyNullMap() {\n     }\n \n     public void testCopyProxyMap() {\n-        Map orig = (Map) _mgr.newMapProxy(HashMap.class, null, null, null);\n+        Map orig = (Map) _mgr.newMapProxy(HashMap.class, null, null, null,true);\n         populate(orig);\n         assertMapsEqual(new HashMap(orig), (Map) _mgr.copyMap(orig));\n \n         TreeMap torig = (TreeMap) _mgr.newMapProxy(TreeMap.class, null, null, \n-            new CustomComparator());\n+            new CustomComparator(),true);\n         assertTrue(torig.comparator() instanceof CustomComparator);\n         populate(torig);\n         assertSortedMapsEqual(new TreeMap(torig), (SortedMap) \n@@ -495,34 +495,34 @@ public void testCloneProxyMap() {\n         // Map does not support clone()\n         \n         TreeMap torig = (TreeMap) _mgr.newMapProxy(TreeMap.class, null, null, \n-            new CustomComparator());\n+            new CustomComparator(),true);\n         assertTrue(torig.comparator() instanceof CustomComparator);\n         populate(torig);\n         assertSortedMapsEquals(new TreeMap(torig), (SortedMap) torig.clone());\n     }\n \n     public void testMapMethodsProxied() \n         throws Exception {\n-        Class proxy = _mgr.newMapProxy(HashMap.class, null, null, null).\n+        Class proxy = _mgr.newMapProxy(HashMap.class, null, null, null,true).\n             getClass();\n         assertMapMethodsProxied(proxy);\n \n-        proxy = _mgr.newMapProxy(TreeMap.class, null, null, null).getClass();\n+        proxy = _mgr.newMapProxy(TreeMap.class, null, null, null,true).getClass();\n         assertMapMethodsProxied(proxy);\n \n         proxy = _mgr.newMapProxy(TreeMap.class, null, null, \n-            new CustomComparator()).getClass();\n+            new CustomComparator(),true).getClass();\n         assertMapMethodsProxied(proxy);\n \n-        proxy = _mgr.newMapProxy(CustomMap.class, null, null, null).getClass();\n+        proxy = _mgr.newMapProxy(CustomMap.class, null, null, null,true).getClass();\n         assertMapMethodsProxied(proxy);\n \n-        proxy = _mgr.newMapProxy(CustomSortedMap.class, null, null, null).\n+        proxy = _mgr.newMapProxy(CustomSortedMap.class, null, null, null,true).\n             getClass();\n         assertMapMethodsProxied(proxy);\n \n         proxy = _mgr.newMapProxy(CustomComparatorSortedMap.class, null, null, \n-            new CustomComparator()).getClass();\n+            new CustomComparator(),true).getClass();\n         assertMapMethodsProxied(proxy);\n     }\n \n@@ -554,7 +554,7 @@ private void assertMapMethodsProxied(Class cls)\n \n     public void testPropertiesMethodsProxied() \n         throws Exception {\n-        Class proxy = _mgr.newMapProxy(Properties.class, null, null, null).\n+        Class proxy = _mgr.newMapProxy(Properties.class, null, null, null,true).\n             getClass();\n         assertMapMethodsProxied(proxy);\n         assertNotNull(proxy.getDeclaredMethod(\"setProperty\", \n@@ -797,7 +797,7 @@ public void testNonproxyableBean() {\n         NonproxyableBean orig = new NonproxyableBean(1);\n         populate(orig);\n         assertNull(_mgr.copyCustom(orig));\n-        assertNull(_mgr.newCustomProxy(orig));\n+        assertNull(_mgr.newCustomProxy(orig,true));\n     }\n \n \n@@ -815,7 +815,7 @@ public void testCopyNullBean() {\n     }\n \n     public void testCopyProxyBean() {\n-        CustomBean orig = (CustomBean) _mgr.newCustomProxy(new CustomBean());\n+        CustomBean orig = (CustomBean) _mgr.newCustomProxy(new CustomBean(),true);\n         populate(orig);\n         CustomBean comp = new CustomBean();\n         populate(comp);\n@@ -824,11 +824,11 @@ public void testCopyProxyBean() {\n \n     public void testBeanMethodsProxied()\n         throws Exception {\n-        Class proxy = _mgr.newCustomProxy(new CustomBean()).getClass();\n+        Class proxy = _mgr.newCustomProxy(new CustomBean(),true).getClass();\n         assertBeanMethodsProxied(proxy);\n \n         proxy = _mgr.newCustomProxy(new CustomCopyConstructorBean\n-            (new CustomBean())).getClass();\n+            (new CustomBean()),true).getClass();\n         assertBeanMethodsProxied(proxy);\n     }\n "}]}

