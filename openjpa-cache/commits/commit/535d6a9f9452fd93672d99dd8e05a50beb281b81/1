{"sha":"535d6a9f9452fd93672d99dd8e05a50beb281b81","node_id":"MDY6Q29tbWl0MjA2MzY0OjUzNWQ2YTlmOTQ1MmZkOTM2NzJkOTlkZDhlMDVhNTBiZWIyODFiODE=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2006-11-07T23:33:50Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2006-11-07T23:33:50Z"},"message":"Simplify the usage of the WAS ExtendedJTATransaction API.  We only need to check the globalId (and not the localId) for presence of a global (user) transaction.  Also corrected some of the exception processing and tracing of exceptions for rollback processing.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@472327 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cbfee541fee3b8820d78c38b0d0e63b8f90e1f91","url":"https://api.github.com/repos/apache/openjpa/git/trees/cbfee541fee3b8820d78c38b0d0e63b8f90e1f91"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/535d6a9f9452fd93672d99dd8e05a50beb281b81","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/535d6a9f9452fd93672d99dd8e05a50beb281b81","html_url":"https://github.com/apache/openjpa/commit/535d6a9f9452fd93672d99dd8e05a50beb281b81","comments_url":"https://api.github.com/repos/apache/openjpa/commits/535d6a9f9452fd93672d99dd8e05a50beb281b81/comments","author":null,"committer":null,"parents":[{"sha":"8efffbdd4b07489628d6a33730b99b2a8ebcbf8e","url":"https://api.github.com/repos/apache/openjpa/commits/8efffbdd4b07489628d6a33730b99b2a8ebcbf8e","html_url":"https://github.com/apache/openjpa/commit/8efffbdd4b07489628d6a33730b99b2a8ebcbf8e"}],"stats":{"total":805,"additions":376,"deletions":429},"files":[{"sha":"3b25aecddd9e1543f48743295be776a2d3d48400","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java","status":"modified","additions":373,"deletions":414,"changes":787,"blob_url":"https://github.com/apache/openjpa/blob/535d6a9f9452fd93672d99dd8e05a50beb281b81/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/535d6a9f9452fd93672d99dd8e05a50beb281b81/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java?ref=535d6a9f9452fd93672d99dd8e05a50beb281b81","patch":"@@ -1,414 +1,373 @@\n-/*\n- * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.openjpa.ee;\n-\n-import java.io.IOException;\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.ee;\r\n+\r\n+import java.io.IOException;\r\n import java.io.InputStream;\n-import java.lang.reflect.Method;\n-\n-import javax.naming.Context;\n-import javax.naming.InitialContext;\n-import javax.transaction.HeuristicMixedException;\n-import javax.transaction.HeuristicRollbackException;\n-import javax.transaction.InvalidTransactionException;\n-import javax.transaction.NotSupportedException;\n-import javax.transaction.RollbackException;\n-import javax.transaction.Status;\n-import javax.transaction.Synchronization;\n-import javax.transaction.SystemException;\n-import javax.transaction.Transaction;\n-import javax.transaction.xa.XAResource;\n-\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n-import org.apache.openjpa.lib.conf.Configurable;\n-import org.apache.openjpa.lib.conf.Configuration;\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.util.InvalidStateException;\n-import org.apache.openjpa.util.NoTransactionException;\n-\n-import serp.bytecode.BCClass;\n-import serp.bytecode.Project;\n-\n-/**\n- * {@link ManagedRuntime} implementation that allows synchronization with a\n- * WebSphere managed transaction.\n- *\n- * <P>\n- * WebSphere Application Server does not expose the TransactionManager to an\n- * application. Instead it provides a proprietary interface to register for\n- * synchronization and obtain transaction ids.\n- *\n- * <P>\n- * WASManagedRuntime provides the wrapper classes needed to interact with the\n- * WAS proprietary interface and the OpenJPA kernel.\n- *\n- * @author Michael Dick, Kevin Sutter\n- */\n-public class WASManagedRuntime implements ManagedRuntime, Configurable {\n-\n-    private static Localizer _loc =\n-        Localizer.forPackage(WASManagedRuntime.class);\n-\n-    private Object _extendedTransaction = null;\n-    private Method _getGlobalId = null;\n-    private Method _getLocalId = null;\n-    private Method _registerSync = null;\n-    private OpenJPAConfiguration _conf = null;\n-\n-    /**\n-     * Gets an extendedJTATransaction from JNDI and creates a transaction\n-     * wrapper\n-     */\n-    public javax.transaction.TransactionManager getTransactionManager()\n-        throws Exception {\n-        return new WASTransaction();\n-    }\n-\n-    /**\n-     * Transaction wrapper for WebSphere. WebSphere exposes a subset of the\n-     * Transaction and TransactionManager interfaces to the customer. Any\n-     * methods which are not exposed by WebSphere will throw an\n-     * IllegalStateException to the caller.\n-     *\n-     * <P>\n-     * Methods supporded by WAS are\n-     * <UL>\n-     * <LI>RegisterSynchronization </LI>\n-     * <LI>GetStatus</LI>\n-     * </UL>\n-     */\n-    class WASTransaction implements javax.transaction.TransactionManager,\n-        javax.transaction.Transaction {\n-\n-        public int getStatus() throws SystemException {\n-            int rval = Status.STATUS_UNKNOWN;\n-            try {\n-                if (getId() != null) {\n-                    rval = Status.STATUS_ACTIVE;\n-                } else {\n-                    throw new NoTransactionException(_loc\n-                        .get(\"was-no-transaction\"));\n-                }\n-            } catch (Exception e) {\n-                throw new NoTransactionException(_loc.get(\"was-no-transaction\"))\n-                    .setCause(e);\n-            }\n-            return rval;\n-        }\n-\n-        /**\n-         * Provides a Transaction wrapper. The transaction wrapper mayb only be\n-         * used to determine the status of the current transaction. WebSphere\n-         * does not allow direct control of container transactions.\n-         *\n-         * @return A WebSphere transaction wrapper.\n-         */\n-        public Transaction getTransaction() throws SystemException {\n-            return this;\n-        }\n-\n-        /**\n-         * Register for synchronization with a WebSphere managed transaction via\n-         * the extendedJTATransaction interface.\n-         */\n-        public void registerSynchronization(Synchronization arg0)\n-            throws IllegalStateException, RollbackException, SystemException {\n-            if (_extendedTransaction != null) {\n-                try {\n-                    _registerSync.invoke(_extendedTransaction,\n-                        new Object[] { new WASSynchronization(arg0) });\n-                } catch (Exception e) {\n-                    throw new InvalidStateException(_loc\n-                        .get(\"was-reflection-exception\")).setCause(e);\n-                }\n-            } else {\n-                throw new InvalidStateException(_loc.get(\"was-lookup-error\"));\n-            }\n-        }\n-\n-        /**\n-         * Determines the ID of the current WebSphere managed transaction using\n-         * the extendedJTATransaction interface\n-         *\n-         * @return If a GlobalTransaction is active a byte[] ID will be\n-         *         returned. If a LocalTransaction is active an int ID will be\n-         *         returned.\n-         *\n-         * @throws Exception\n-         */\n-        private Object getId() throws Exception {\n-            Object rval;\n-            rval = getGlobalId();\n-            if (rval == null) {\n-                rval = getLocalId();\n-            }\n-\n-            if (rval instanceof Integer && ((Integer) rval).intValue() == 0) {\n-                /*\n-                 * If there's no globalId or localId we're running outside of a\n-                 * transaction and need to throw an error.\n-                 */\n-                throw new NoTransactionException(_loc\n-                    .get(\"was-no-transaction\"));\n-            }\n-            return rval;\n-        }\n-\n-        /**\n-         * Gets the GlobalTransaction ID of the WebSphere managed transaction.\n-         * If no Global Transaction is active null will be returned.\n-         *\n-         * @return Null if a global transaction is not active or if an error\n-         *         occurs. byte[] id if a global transaction is active.\n-         */\n-        private byte[] getGlobalId() {\n-            byte[] rval = null;\n-            try {\n-                rval = (byte[]) _getGlobalId.invoke(_extendedTransaction, null);\n-            } catch (Exception e) {\n-                throw new InvalidStateException(_loc\n-                    .get(\"was-reflection-exception\")).setCause(e);\n-            }\n-            return rval;\n-        }\n-\n-        /**\n-         * Gets the LocalTransaction ID of the WebSphere managed transaction. If\n-         * a LocalTransaction is not active 0 will be returned.\n-         *\n-         * @return LocalTransaction ID. 0 if a LocalTransaction is not active or\n-         *         if an error occurs.\n-         */\n-        private Integer getLocalId() {\n-            Integer rval;\n-            try {\n-                rval = (Integer) _getLocalId.invoke(_extendedTransaction, null);\n-            } catch (Exception e) {\n-                throw new InvalidStateException(_loc\n-                    .get(\"was-reflection-exception\")).setCause(e);\n-            }\n-            return rval;\n-        }\n-\n-        /**\n-         * Unimplemented, WAS does not provide this level of control. Throws an\n-         * IllegalStateException\n-         */\n-        public void begin() throws NotSupportedException, SystemException {\n-            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\n-                \"begin\"));\n-        }\n-\n-        /**\n-         * Unimplemented, WAS does not provide this level of control. Throws an\n-         * IllegalStateException\n-         */\n-        public void commit() throws HeuristicMixedException,\n-            HeuristicRollbackException, IllegalStateException,\n-            RollbackException, SecurityException, SystemException {\n-            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\n-                \"commit\"));\n-        }\n-\n-        /**\n-         * Unimplemented, WAS does not provide this level of control. Throws an\n-         * IllegalStateException\n-         */\n-        public void resume(Transaction arg0) throws IllegalStateException,\n-            InvalidTransactionException, SystemException {\n-            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\n-                \"resume\"));\n-        }\n-\n-        /**\n-         * Unimplemented, WAS does not provide this level of control. Throws an\n-         * IllegalStateException\n-         */\n-        public void rollback() throws IllegalStateException, SecurityException,\n-            SystemException {\n-            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\n-                \"rollback\"));\n-        }\n-\n-        /**\n-         * Unimplemented, WAS does not provide this level of control. Throws an\n-         * IllegalStateException\n-         */\n-        public void setRollbackOnly() throws IllegalStateException,\n-            SystemException {\n-            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\n-                \"setRollbackOnly\"));\n-        }\n-\n-        /**\n-         * Unimplemented, WAS does not provide this level of control. Throws an\n-         * IllegalStateException\n-         */\n-        public void setTransactionTimeout(int arg0) throws SystemException {\n-            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\n-                \"setTransactionTimeout\"));\n-        }\n-\n-        /**\n-         * Unimplemented, WAS does not provide this level of control. Throws an\n-         * IllegalStateException\n-         */\n-        public Transaction suspend() throws SystemException {\n-            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\n-                \"suspend\"));\n-        }\n-\n-        /**\n-         * Unimplemented, WAS does not provide this level of control. Throws an\n-         * IllegalStateException\n-         */\n-        public boolean delistResource(XAResource arg0, int arg1)\n-            throws IllegalStateException, SystemException {\n-            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\n-                \"delistResource\"));\n-        }\n-\n-        /**\n-         * Unimplemented, WAS does not provide this level of control. Throws an\n-         * IllegalStateException\n-         */\n-        public boolean enlistResource(XAResource arg0)\n-            throws IllegalStateException, RollbackException, SystemException {\n-            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\n-                \"enlistResource\"));\n-        }\n-    }\n-\n-    /**\n-     * WASSynchronization wrapper. This class translates the WAS proprietary\n-     * synchronization callback methods to javax.transaction.Synchronization\n-     * methods.\n-     *\n-     * <P>\n-     * This class implements the\n-     * com.ibm.websphere.jtaextensions.SynchronizationCallback interface. Since\n-     * SynchronizationCallback is not available at compile time we use Serp to\n-     * add the interface to the class after all classes have been compiled.\n-     *\n-     * <P>\n-     * SynchronizationCallback is expected to be available whenever this class\n-     * is instantiated, therefore this class should only be used when running in\n-     * WebSphere.\n-     *\n-     * @see org.apache.openjpa.util.WASTransformer\n-     */\n-    static class WASSynchronization {\n-\n-        Synchronization _sync = null;\n-\n-        WASSynchronization(Synchronization sync) {\n-            _sync = sync;\n-        }\n-\n-        /**\n-         * AfterCompletion wrapper. Translates the WAS proprietary call to a\n-         * javax.transaction.Synchronization call.\n-         */\n-        public void afterCompletion(int localTransactionId,\n-            byte[] globalTransactionId, boolean committed) {\n-            if (_sync != null) {\n-                if (committed) {\n-                    _sync.afterCompletion(Status.STATUS_COMMITTED);\n-                } else {\n-                    _sync.afterCompletion(Status.STATUS_UNKNOWN);\n-                }\n-            }\n-        }\n-\n-        /**\n-         * BeforeCompletion wrapper. Translates WAS proprietary call to a\n-         * javax.transaction.Synchronization call.\n-         */\n-        public void beforeCompletion(int arg0, byte[] arg1) {\n-            if (_sync != null) {\n-                _sync.beforeCompletion();\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Caches a copy of the configuration. The configuration is used to obtain\n-     * the logger and classloader.\n-     */\n-    public void setConfiguration(Configuration conf) {\n-        _conf = (OpenJPAConfiguration) conf;\n-    }\n-\n-    /**\n-     * EndConfiguration stub.\n-     */\n-    public void endConfiguration() {\n-        try {\n-            Context ctx = new InitialContext();\n-            try {\n-                _extendedTransaction =\n-                    ctx.lookup(\"java:comp/websphere/ExtendedJTATransaction\");\n-            } finally {\n-                ctx.close();\n-            }\n-\n-            ClassLoader loader = _conf.getClassResolverInstance()\n-                .getClassLoader(getClass(), null);\n-\n-            Class extendedJTATransaction = Class.forName(\n-                \"com.ibm.websphere.jtaextensions.ExtendedJTATransaction\", true,\n-                loader);\n-\n-            _registerSync = extendedJTATransaction.getMethod(\n-                \"registerSynchronizationCallbackForCurrentTran\",\n-                new Class[] { Class.forName(\n-                    \"com.ibm.websphere.jtaextensions.SynchronizationCallback\",\n-                    true, loader) });\n-            _getGlobalId = extendedJTATransaction.\n-                getMethod(\"getGlobalId\", null);\n-            _getLocalId = extendedJTATransaction.\n-                getMethod(\"getLocalId\", null);\n-        } catch (Exception e) {\n-            throw new InvalidStateException(_loc\n-                .get(\"was-reflection-exception\"), e).setFatal(true);\n-        }\n-    }\n-\n-    /**\n-     * StartConfiguration stub.\n-     */\n-    public void startConfiguration() {\n-        // Nothing to do\n-    }\n-\n-    /**\n-     * Class that will be modified\n-     */\n-    static final String CLASS =\n-        \"org.apache.openjpa.ee.WASManagedRuntime$WASSynchronization\";\n-    \n-    /**\n-     * Interface which will be added\n-     */\n-    static final String INTERFACE =\n-        \"com.ibm.websphere.jtaextensions.SynchronizationCallback\";\n-\n-    public static void main(String[] args) \n-        throws IOException {\n-        Project project = new Project();\n+import java.lang.reflect.Method;\r\n+\r\n+import javax.naming.Context;\r\n+import javax.naming.InitialContext;\r\n+import javax.transaction.HeuristicMixedException;\r\n+import javax.transaction.HeuristicRollbackException;\r\n+import javax.transaction.InvalidTransactionException;\r\n+import javax.transaction.NotSupportedException;\r\n+import javax.transaction.RollbackException;\r\n+import javax.transaction.Status;\r\n+import javax.transaction.Synchronization;\r\n+import javax.transaction.SystemException;\r\n+import javax.transaction.Transaction;\r\n+import javax.transaction.xa.XAResource;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.lib.conf.Configurable;\r\n+import org.apache.openjpa.lib.conf.Configuration;\r\n+import org.apache.openjpa.lib.log.Log;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.util.InvalidStateException;\r\n+import org.apache.openjpa.util.NoTransactionException;\r\n+\r\n+import serp.bytecode.BCClass;\r\n+import serp.bytecode.Project;\r\n+\r\n+/**\r\n+ * {@link ManagedRuntime} implementation that allows synchronization with a\r\n+ * WebSphere managed transaction.\r\n+ *\r\n+ * <P>\r\n+ * WebSphere Application Server does not expose the TransactionManager to an\r\n+ * application. Instead it provides a proprietary interface to register for\r\n+ * synchronization and obtain transaction ids.\r\n+ *\r\n+ * <P>\r\n+ * WASManagedRuntime provides the wrapper classes needed to interact with the\r\n+ * WAS proprietary interface and the OpenJPA kernel.\r\n+ *\r\n+ * @author Michael Dick, Kevin Sutter\r\n+ */\r\n+public class WASManagedRuntime implements ManagedRuntime, Configurable {\r\n+\r\n+    private static Localizer _loc =\r\n+        Localizer.forPackage(WASManagedRuntime.class);\r\n+\r\n+    private Object _extendedTransaction = null;\r\n+    private Method _getGlobalId = null;\r\n+    private Method _registerSync = null;\r\n+    private OpenJPAConfiguration _conf = null;\r\n+    private Log _log = null;\r\n+\r\n+    /**\r\n+     * Gets an extendedJTATransaction from JNDI and creates a transaction\r\n+     * wrapper\r\n+     */\r\n+    public javax.transaction.TransactionManager getTransactionManager()\r\n+        throws Exception {\r\n+        return new WASTransaction();\r\n+    }\r\n+\r\n+    /**\r\n+     * Transaction wrapper for WebSphere. WebSphere exposes a subset of the\r\n+     * Transaction and TransactionManager interfaces to the customer. Any\r\n+     * methods which are not exposed by WebSphere will throw an\r\n+     * IllegalStateException to the caller.\r\n+     *\r\n+     * <P>\r\n+     * Methods supported by WAS are\r\n+     * <UL>\r\n+     * <LI>RegisterSynchronization </LI>\r\n+     * <LI>GetStatus</LI>\r\n+     * </UL>\r\n+     */\r\n+    class WASTransaction implements javax.transaction.TransactionManager,\r\n+        javax.transaction.Transaction {\r\n+\r\n+        public int getStatus() throws SystemException {\r\n+            int rval = Status.STATUS_UNKNOWN;\r\n+            try {\r\n+                if (getGlobalId() != null) {\r\n+                    rval = Status.STATUS_ACTIVE;\r\n+                } else {\r\n+                    rval = Status.STATUS_NO_TRANSACTION;\r\n+                }\r\n+            } catch (Exception e) {\r\n+                throw new NoTransactionException(_loc\r\n+                        .get(\"was-transaction-id-exception\")).setCause(e);\r\n+            }\r\n+            return rval;\r\n+        }\r\n+\r\n+        /**\r\n+         * Provides a Transaction wrapper. The transaction wrapper mayb only be\r\n+         * used to determine the status of the current transaction. WebSphere\r\n+         * does not allow direct control of container transactions.\r\n+         *\r\n+         * @return A WebSphere transaction wrapper.\r\n+         */\r\n+        public Transaction getTransaction() throws SystemException {\r\n+            return this;\r\n+        }\r\n+\r\n+        /**\r\n+         * Register for synchronization with a WebSphere managed transaction via\r\n+         * the extendedJTATransaction interface.\r\n+         */\r\n+        public void registerSynchronization(Synchronization arg0)\r\n+            throws IllegalStateException, RollbackException, SystemException {\r\n+            if (_extendedTransaction != null) {\r\n+                try {\r\n+                    _registerSync.invoke(_extendedTransaction,\r\n+                        new Object[] { new WASSynchronization(arg0) });\r\n+                } catch (Exception e) {\r\n+                    throw new InvalidStateException(_loc\r\n+                        .get(\"was-reflection-exception\")).setCause(e);\r\n+                }\r\n+            } else {\r\n+                throw new InvalidStateException(_loc.get(\"was-lookup-error\"));\r\n+            }\r\n+        }\r\n+\r\n+        /**\r\n+         * Gets the GlobalTransaction ID of the WebSphere managed transaction.\r\n+         * If no Global Transaction is active null will be returned.\r\n+         *\r\n+         * @return Null if a global transaction is not active or if an error\r\n+         *         occurs. byte[] id if a global transaction is active.\r\n+         */\r\n+        private byte[] getGlobalId() {\r\n+            byte[] rval = null;\r\n+            try {\r\n+                rval = (byte[]) _getGlobalId.invoke(_extendedTransaction, null);\r\n+            } catch (Exception e) {\r\n+                throw new InvalidStateException(_loc\r\n+                    .get(\"was-reflection-exception\")).setCause(e);\r\n+            }\r\n+            return rval;\r\n+        }\r\n+\r\n+        /**\r\n+         * Unimplemented, WAS does not provide this level of control. Throws an\r\n+         * IllegalStateException\r\n+         */\r\n+        public void begin() throws NotSupportedException, SystemException {\r\n+            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\r\n+                \"begin\"));\r\n+        }\r\n+\r\n+        /**\r\n+         * Unimplemented, WAS does not provide this level of control. Throws an\r\n+         * IllegalStateException\r\n+         */\r\n+        public void commit() throws HeuristicMixedException,\r\n+            HeuristicRollbackException, IllegalStateException,\r\n+            RollbackException, SecurityException, SystemException {\r\n+            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\r\n+                \"commit\"));\r\n+        }\r\n+\r\n+        /**\r\n+         * Unimplemented, WAS does not provide this level of control. Throws an\r\n+         * IllegalStateException\r\n+         */\r\n+        public void resume(Transaction arg0) throws IllegalStateException,\r\n+            InvalidTransactionException, SystemException {\r\n+            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\r\n+                \"resume\"));\r\n+        }\r\n+\r\n+        /**\r\n+         * Unimplemented, WAS does not provide this level of control. Log a\r\n+         * trace instead of throwing an exception. Rollback may be used in\r\n+         * some error paths, throwing another exception may result in the\r\n+         * original exception being lost.\r\n+         */\r\n+        public void rollback() throws IllegalStateException, SecurityException,\r\n+            SystemException {\r\n+            if (_log.isTraceEnabled()) {\r\n+                _log.trace(_loc.get(\"was-unsupported-op\", \"rollback\"));\r\n+            }\r\n+        }\r\n+\r\n+        /**\r\n+         * Unimplemented, WAS does not provide this level of control. Log a\r\n+         * trace instead of throwing an exception. SetRollbackOnly may be used\r\n+         * in some error paths, throwing another exception may result in the\r\n+         * original exception being lost.\r\n+         */\r\n+        public void setRollbackOnly() throws IllegalStateException,\r\n+            SystemException {\r\n+            if (_log.isTraceEnabled()) {\r\n+                _log.trace(_loc.get(\"was-unsupported-op\", \"setRollbackOnly\"));\r\n+            }\r\n+        }\r\n+\r\n+        /**\r\n+         * Unimplemented, WAS does not provide this level of control. Throws an\r\n+         * IllegalStateException\r\n+         */\r\n+        public void setTransactionTimeout(int arg0) throws SystemException {\r\n+            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\r\n+                \"setTransactionTimeout\"));\r\n+        }\r\n+\r\n+        /**\r\n+         * Unimplemented, WAS does not provide this level of control. Throws an\r\n+         * IllegalStateException\r\n+         */\r\n+        public Transaction suspend() throws SystemException {\r\n+            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\r\n+                \"suspend\"));\r\n+        }\r\n+\r\n+        /**\r\n+         * Unimplemented, WAS does not provide this level of control. Throws an\r\n+         * IllegalStateException\r\n+         */\r\n+        public boolean delistResource(XAResource arg0, int arg1)\r\n+            throws IllegalStateException, SystemException {\r\n+            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\r\n+                \"delistResource\"));\r\n+        }\r\n+\r\n+        /**\r\n+         * Unimplemented, WAS does not provide this level of control. Throws an\r\n+         * IllegalStateException\r\n+         */\r\n+        public boolean enlistResource(XAResource arg0)\r\n+            throws IllegalStateException, RollbackException, SystemException {\r\n+            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\r\n+                \"enlistResource\"));\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * WASSynchronization wrapper. This class translates the WAS proprietary\r\n+     * synchronization callback methods to javax.transaction.Synchronization\r\n+     * methods.\r\n+     *\r\n+     * <P>\r\n+     * This class implements the\r\n+     * com.ibm.websphere.jtaextensions.SynchronizationCallback interface. Since\r\n+     * SynchronizationCallback is not available at compile time we use Serp to\r\n+     * add the interface to the class after all classes have been compiled.\r\n+     *\r\n+     * <P>\r\n+     * SynchronizationCallback is expected to be available whenever this class\r\n+     * is instantiated, therefore this class should only be used when running in\r\n+     * WebSphere.\r\n+     *\r\n+     * @see org.apache.openjpa.util.WASTransformer\r\n+     */\r\n+    static class WASSynchronization {\r\n+\r\n+        Synchronization _sync = null;\r\n+\r\n+        WASSynchronization(Synchronization sync) {\r\n+            _sync = sync;\r\n+        }\r\n+\r\n+        /**\r\n+         * AfterCompletion wrapper. Translates the WAS proprietary call to a\r\n+         * javax.transaction.Synchronization call.\r\n+         */\r\n+        public void afterCompletion(int localTransactionId,\r\n+            byte[] globalTransactionId, boolean committed) {\r\n+            if (_sync != null) {\r\n+                if (committed) {\r\n+                    _sync.afterCompletion(Status.STATUS_COMMITTED);\r\n+                } else {\r\n+                    _sync.afterCompletion(Status.STATUS_UNKNOWN);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        /**\r\n+         * BeforeCompletion wrapper. Translates WAS proprietary call to a\r\n+         * javax.transaction.Synchronization call.\r\n+         */\r\n+        public void beforeCompletion(int arg0, byte[] arg1) {\r\n+            if (_sync != null) {\r\n+                _sync.beforeCompletion();\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Caches a copy of the configuration. The configuration is used to obtain\r\n+     * the logger and classloader.\r\n+     */\r\n+    public void setConfiguration(Configuration conf) {\r\n+        _conf = (OpenJPAConfiguration) conf;\r\n+        _log = _conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\r\n+    }\r\n+\r\n+    /**\r\n+     * EndConfiguration stub.\r\n+     */\r\n+    public void endConfiguration() {\r\n+        try {\r\n+            Context ctx = new InitialContext();\r\n+            try {\r\n+                _extendedTransaction =\r\n+                    ctx.lookup(\"java:comp/websphere/ExtendedJTATransaction\");\r\n+            } finally {\r\n+                ctx.close();\r\n+            }\r\n+\r\n+            ClassLoader loader = _conf.getClassResolverInstance()\r\n+                .getClassLoader(getClass(), null);\r\n+\r\n+            Class extendedJTATransaction = Class.forName(\r\n+                \"com.ibm.websphere.jtaextensions.ExtendedJTATransaction\", true,\r\n+                loader);\r\n+\r\n+            _registerSync = extendedJTATransaction.getMethod(\r\n+                \"registerSynchronizationCallbackForCurrentTran\",\r\n+                new Class[] { Class.forName(\r\n+                    \"com.ibm.websphere.jtaextensions.SynchronizationCallback\",\r\n+                    true, loader) });\r\n+            _getGlobalId = extendedJTATransaction.\r\n+                getMethod(\"getGlobalId\", null);\r\n+        } catch (Exception e) {\r\n+            throw new InvalidStateException(_loc\r\n+                .get(\"was-reflection-exception\"), e).setFatal(true);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * StartConfiguration stub.\r\n+     */\r\n+    public void startConfiguration() {\r\n+        // Nothing to do\r\n+    }\r\n+\r\n+    /**\r\n+     * Class that will be modified\r\n+     */\r\n+    static final String CLASS =\r\n+        \"org.apache.openjpa.ee.WASManagedRuntime$WASSynchronization\";\r\n+\r\n+    /**\r\n+     * Interface which will be added\r\n+     */\r\n+    static final String INTERFACE =\r\n+        \"com.ibm.websphere.jtaextensions.SynchronizationCallback\";\r\n+\r\n+    public static void main(String[] args)\r\n+        throws IOException {\r\n+        Project project = new Project();\r\n         \n         InputStream in = WASManagedRuntime.class.getClassLoader()\n             .getResourceAsStream(CLASS.replace('.', '/') + \".class\");\n@@ -423,7 +382,7 @@ public static void main(String[] args)\n         \t\t}\n         \t}\n         }\n-        bcClass.declareInterface(INTERFACE);\n-        bcClass.write();\n-    }\n-}\n+        bcClass.declareInterface(INTERFACE);\r\n+        bcClass.write();\r\n+    }\r\n+}\r"},{"sha":"1b21c086b1a99b7e1206d5db95b766ca89934ecc","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties","status":"modified","additions":3,"deletions":15,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/535d6a9f9452fd93672d99dd8e05a50beb281b81/openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/535d6a9f9452fd93672d99dd8e05a50beb281b81/openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/ee/localizer.properties?ref=535d6a9f9452fd93672d99dd8e05a50beb281b81","patch":"@@ -8,21 +8,9 @@ expected-reference: Expected object to be of type Reference, but instead was \\\n not-supported: This operation is not supported.\r\n was-unsupported-op: Unable to execute {0} on a WebSphere managed transaction. \\\r\n \tWebSphere does not support direct manipulation of managed transactions.\r\n-was-no-transaction: Unable to detect a WebSphere transaction context. \\ Please ensure \\\r\n-\tthat you are running the application from within WebSphere Application Server \\\r\n-\t(version 5.0.2 or newer) and the application has not spun a thread. \\\r\n-\tIf the application does manage its own threads the behavior is undefined.\r\n-was-reflection-exception: An error occured reflecting WebSphere proprietary \\\r\n-\tinterfaces. Please ensure that you are running the application from within \\\r\n-\tWebSphere Application Server (version 5.0.2 or newer).\r\n-was-lookup-error: An error occurred looking up the WebSphere extended JTA \\\r\n-\tservice. Please ensure that you are running the application from within WebSphere \\\r\n-\tApplication Server (version 5.0.2 or newer).was-unsupported-op: Unable to execute {0} on a WebSphere managed transaction. \\\r\n-\tWebSphere does not support direct manipulation of managed transactions.\r\n-was-no-transaction: Unable to detect a WebSphere transaction context. \\ Please ensure \\\r\n-\tthat you are running the application from within WebSphere Application Server \\\r\n-\t(version 5.0.2 or newer) and the application has not spun a thread. \\\r\n-\tIf the application does manage its own threads the behavior is undefined.\r\n+was-transaction-id-exception: Unable to determine identity of the current WebSphere \\\r\n+\tmanaged transaction. Please ensure that your are running the application from \\\r\n+\twithin WebSphere Application Server (version 5.0.2 or newer).\r\n was-reflection-exception: An error occured reflecting WebSphere proprietary \\\r\n \tinterfaces. Please ensure that you are running the application from within \\\r\n \tWebSphere Application Server (version 5.0.2 or newer).\r"}]}

