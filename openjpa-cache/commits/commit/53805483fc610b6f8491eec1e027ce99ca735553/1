{"sha":"53805483fc610b6f8491eec1e027ce99ca735553","node_id":"MDY6Q29tbWl0MjA2MzY0OjUzODA1NDgzZmM2MTBiNmY4NDkxZWVjMWUwMjdjZTk5Y2E3MzU1NTM=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-07-29T23:53:46Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-07-29T23:53:46Z"},"message":"OPENJPA-1185 JPA2 fix thread-safe problems of subquery restructured code.\nCommitting patch provided by Fay Wang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@799134 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2e4c354b0db7a41c2c635884b3ecbc8accde5091","url":"https://api.github.com/repos/apache/openjpa/git/trees/2e4c354b0db7a41c2c635884b3ecbc8accde5091"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/53805483fc610b6f8491eec1e027ce99ca735553","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/53805483fc610b6f8491eec1e027ce99ca735553","html_url":"https://github.com/apache/openjpa/commit/53805483fc610b6f8491eec1e027ce99ca735553","comments_url":"https://api.github.com/repos/apache/openjpa/commits/53805483fc610b6f8491eec1e027ce99ca735553/comments","author":null,"committer":null,"parents":[{"sha":"16344b5b33639767eecffa16c769b956633d14e2","url":"https://api.github.com/repos/apache/openjpa/commits/16344b5b33639767eecffa16c769b956633d14e2","html_url":"https://github.com/apache/openjpa/commit/16344b5b33639767eecffa16c769b956633d14e2"}],"stats":{"total":236,"additions":162,"deletions":74},"files":[{"sha":"b7be50d7216bd5e955fe907658cc414f942071ef","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","status":"modified","additions":103,"deletions":23,"changes":126,"blob_url":"https://github.com/apache/openjpa/blob/53805483fc610b6f8491eec1e027ce99ca735553/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/53805483fc610b6f8491eec1e027ce99ca735553/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java?ref=53805483fc610b6f8491eec1e027ce99ca735553","patch":"@@ -102,6 +102,7 @@\n     }\n \n     private final transient JDBCStore _store;\n+    private static ThreadLocalContext localContext = new ThreadLocalContext();\n \n     /**\n      * Constructor. Supply store manager.\n@@ -143,27 +144,14 @@ protected ExpressionFactory getExpressionFactory(ClassMetaData meta) {\n         return new JDBCExpressionFactory((ClassMapping) meta);\n     }\n     \n-    private void resetSelect(Context ctx) {\n-        List<Context> subselCtxs = ctx.getSubselContexts();\n-        if (subselCtxs != null) {\n-            for (Context subselCtx : subselCtxs) {\n-                SelectImpl sel = (SelectImpl)subselCtx.getSelect();\n-                sel.reset();\n-                resetSelect(subselCtx);\n-            }\n-        }\n-    }\n-\n     protected ResultObjectProvider executeQuery(Executor ex,\n         ClassMetaData base, ClassMetaData[] metas, boolean subclasses,\n         ExpressionFactory[] facts, QueryExpressions[] exps, Object[] params,\n         Range range) {\n-        Context expCtx = exps[0].ctx(); \n-        if (expCtx != null) {\n-            expCtx.resetAliasCount();\n-            expCtx.setSelect(null);\n-            resetSelect(expCtx);\n-        }\n+        Context[] ctxs = new Context[exps.length];\n+        for (int i = 0; i < exps.length; i++)\n+            ctxs[i] = exps[i].ctx();\n+        localContext.set(clone(ctxs, null));\n         if (metas.length > 1 && exps[0].isAggregate())\n             throw new UserException(Localizer.forPackage(JDBCStoreQuery.class).\n                 get(\"mult-mapping-aggregate\", Arrays.asList(metas)));\n@@ -254,6 +242,8 @@ protected ResultObjectProvider executeQuery(Executor ex,\n         if ((rops != null && range.end != Long.MAX_VALUE) \n             || start != range.start || end != range.end)\n             rop = new RangeResultObjectProvider(rop, range.start, range.end);\n+\n+        localContext.remove();\n         return rop;\n     }\n \n@@ -465,12 +455,10 @@ protected Number executeUpdate(Executor ex, ClassMetaData base,\n     private Number executeBulkOperation(ClassMetaData[] metas,\n         boolean subclasses, ExpressionFactory[] facts, QueryExpressions[] exps,\n         Object[] params, Map updates) {\n-        Context expCtx = exps[0].ctx(); \n-        if (ctx != null) {\n-            expCtx.resetAliasCount();\n-            expCtx.setSelect(null);\n-            resetSelect(expCtx);\n-        }\n+        Context[] ctxs = new Context[exps.length];\n+        for (int i = 0; i < exps.length; i++)\n+            ctxs[i] = exps[i].ctx();\n+        localContext.set(clone(ctxs, null));\n         \n         // we cannot execute a bulk delete statement when have mappings in\n         // multiple tables, so indicate we want to use in-memory with null\n@@ -551,6 +539,8 @@ private Number executeBulkOperation(ClassMetaData[] metas,\n         } finally {\n             try { conn.close(); } catch (SQLException se) {}\n         }\n+\n+        localContext.remove();\n         return Numbers.valueOf(count);\n     }\n \n@@ -634,6 +624,10 @@ protected Number executeUpdate(ClassMetaData base, ClassMetaData[] metas,\n     protected String[] getDataStoreActions(ClassMetaData base,\n         ClassMetaData[] metas, boolean subclasses, ExpressionFactory[] facts,\n         QueryExpressions[] exps, Object[] params, Range range) {\n+        Context[] ctxs = new Context[exps.length];\n+        for (int i = 0; i < exps.length; i++)\n+            ctxs[i] = exps[i].ctx();\n+        localContext.set(clone(ctxs, null));\n         ClassMapping[] mappings = (ClassMapping[]) metas;\n         JDBCFetchConfiguration fetch = (JDBCFetchConfiguration) ctx.\n             getFetchConfiguration();\n@@ -691,6 +685,8 @@ protected Number executeUpdate(ClassMetaData base, ClassMetaData[] metas,\n         String[] sql = new String[sels.size()];\n         for (int i = 0; i < sels.size(); i++)\n             sql[i] = ((Select) sels.get(i)).toSelect(false, fetch).getSQL(true);\n+\n+        localContext.remove();\n         return sql;\n     }\n     \n@@ -986,4 +982,88 @@ private Object getValue(Object ob, FieldMapping fmd,\n             throw new UnsupportedException();\n         }\n     }\n+\n+    private static class ThreadLocalContext extends ThreadLocal<Context[]> {\n+        public Context[] initialValue() {\n+          return null;\n+        }\n+    }\n+\n+    public static Context[] getThreadLocalContext() {\n+        return localContext.get();\n+    }\n+\n+    public static Context getThreadLocalContext(Context orig) {\n+        Context[] root = localContext.get();\n+        for (int i = 0; i < root.length; i++) {\n+            Context lctx = getThreadLocalContext(root[i], orig);\n+            if (lctx != null)\n+                return lctx;\n+        }\n+        return null;\n+    }\n+\n+    public static Select getThreadLocalSelect(Select select) {\n+        if (select == null)\n+            return null;\n+        Context[] lctx = JDBCStoreQuery.getThreadLocalContext();\n+        Context cloneFrom = select.ctx();\n+        for (int i = 0; i < lctx.length; i++) {\n+            Context cloneTo = getThreadLocalContext(lctx[i], cloneFrom);\n+            if (cloneTo != null)\n+                return (Select)cloneTo.getSelect();\n+        }\n+        return select;\n+    }\n+\n+    public static Context getThreadLocalContext(Context lctx, Context cloneFrom) {\n+        if (lctx.cloneFrom == cloneFrom)\n+            return lctx;\n+        java.util.List<Context> subselCtxs = lctx.getSubselContexts();\n+        if (subselCtxs != null) {\n+            for (Context subselCtx : subselCtxs) {\n+                Context ctx = getThreadLocalContext(subselCtx, cloneFrom);\n+                if (ctx != null)\n+                    return ctx;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static Context[] clone(Context[] orig, Context parent) {\n+        Context[] newCtx = new Context[orig.length];\n+        for (int i = 0; i < orig.length; i++) {\n+            newCtx[i] = clone(orig[i], parent);\n+        }\n+        return newCtx;\n+    }\n+\n+    private static Context clone(Context orig, Context parent) {\n+        Context myParent = null;\n+        if (parent == null) {\n+            Context origParent = orig.getParent();\n+            if (origParent != null)\n+                myParent = clone(orig.getParent(), null);\n+        } else\n+            myParent = parent;\n+\n+        Context newCtx = new Context(orig.parsed, null, myParent);\n+        newCtx.from = orig.from;\n+        newCtx.meta = orig.meta;\n+        newCtx.schemaAlias = orig.schemaAlias;\n+        newCtx.setSchemas(orig.getSchemas());\n+        newCtx.setVariables(orig.getVariables());\n+        newCtx.cloneFrom = orig;\n+        Object select = orig.getSelect();\n+        if (select != null)\n+            newCtx.setSelect(((SelectImpl)select).clone(newCtx));\n+        newCtx.subquery = orig.subquery;\n+        List<Context> subsels = orig.getSubselContexts();\n+        if (subsels != null) {\n+            for (Context subsel : subsels) \n+                newCtx.addSubselContext(clone(subsel, newCtx));\n+        }\n+\n+        return newCtx;        \n+    }\n }"},{"sha":"a2f4116bf24e7f01ba7d10ad94702a69a8171645","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/53805483fc610b6f8491eec1e027ce99ca735553/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","raw_url":"https://github.com/apache/openjpa/raw/53805483fc610b6f8491eec1e027ce99ca735553/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java?ref=53805483fc610b6f8491eec1e027ce99ca735553","patch":"@@ -26,6 +26,7 @@\n \n import org.apache.commons.lang.ObjectUtils;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n+import org.apache.openjpa.jdbc.kernel.JDBCStoreQuery;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.Discriminator;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -596,8 +597,10 @@ else if (action.op == Action.UNBOUND_VAR) {\n                     break;\n             }\n             prevaction = action;\n-            if (prevaction != null && prevaction.context != null) \n-                pstate.joins = pstate.joins.setJoinContext(prevaction.context);\n+            if (prevaction != null && prevaction.context != null) {\n+                Context jCtx = JDBCStoreQuery.getThreadLocalContext(prevaction.context);\n+                pstate.joins = pstate.joins.setJoinContext(jCtx);\n+            }\n         }\n         if (_varName != null)\n             pstate.joins = pstate.joins.setVariable(_varName);\n@@ -627,7 +630,7 @@ else if (action.op == Action.UNBOUND_VAR) {\n         return pstate;\n     }\n     \n-    public String findSubqAlias(Select sel) {\n+    private String findSubqAlias(Select sel) {\n         Select pSel = sel.getParent();\n         if (pSel == null)\n             return null;"},{"sha":"9dcf8d71f13df6a9a6180c525b9c246ce5cae8c5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","status":"modified","additions":15,"deletions":4,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/53805483fc610b6f8491eec1e027ce99ca735553/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","raw_url":"https://github.com/apache/openjpa/raw/53805483fc610b6f8491eec1e027ce99ca735553/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java?ref=53805483fc610b6f8491eec1e027ce99ca735553","patch":"@@ -23,6 +23,7 @@\n import java.util.List;\n import java.util.Map;\n \n+import org.apache.openjpa.jdbc.kernel.JDBCStoreQuery;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.Joins;\n@@ -122,18 +123,28 @@ public Select evaluate(ExpContext ctx, Select parent, String alias,\n      */\n     private Select newSelect(ExpContext ctx, Select parent,\n         String alias, QueryExpressions exps, QueryExpressionsState state) {\n-        Select sel = parent != null ? _subselect\n+        Select subselect = JDBCStoreQuery.getThreadLocalSelect(_subselect);\n+        Select sel = parent != null ? subselect\n             : ctx.store.getSQLFactory().newSelect();\n         sel.setAutoDistinct((exps.distinct & exps.DISTINCT_AUTO) != 0);\n         sel.setJoinSyntax(ctx.fetch.getJoinSyntax());\n         sel.setParent(parent, alias);\n \n+        Context[] qryCtx = JDBCStoreQuery.getThreadLocalContext();\n+        Context lctx = null;\n+        for (int i = 0; i < qryCtx.length; i++) {\n+            if (qryCtx[i].cloneFrom == exps.ctx()) {\n+                lctx = qryCtx[i];\n+                break;\n+            }\n+        }\n+\n         if (sel.ctx() == null)\n-            sel.setContext(exps.ctx());\n+            sel.setContext(lctx);\n \n-        if (parent == null && exps.ctx().getSubselContexts() != null) {\n+        if (parent == null && lctx.getSubselContexts() != null) {\n             // this is the case subselect was created before parent got created\n-            List<Context> subselCtxs = exps.ctx().getSubselContexts();\n+            List<Context> subselCtxs = lctx.getSubselContexts();\n             for (Context subselCtx : subselCtxs) {\n                 Select subsel = (Select) subselCtx.getSelect();\n                 Subquery subquery = subselCtx.getSubquery();"},{"sha":"900e916e155aa063bba612d2d0c4db2d0ffd021f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SubQ.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/53805483fc610b6f8491eec1e027ce99ca735553/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SubQ.java","raw_url":"https://github.com/apache/openjpa/raw/53805483fc610b6f8491eec1e027ce99ca735553/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SubQ.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SubQ.java?ref=53805483fc610b6f8491eec1e027ce99ca735553","patch":"@@ -22,6 +22,7 @@\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n+import org.apache.openjpa.jdbc.kernel.JDBCStoreQuery;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n import org.apache.openjpa.jdbc.sql.Result;\n@@ -119,9 +120,10 @@ public void setQueryExpressions(QueryExpressions query) {\n     }\n \n     public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n-        _select.setParent(sel, null);\n+        Select select = JDBCStoreQuery.getThreadLocalSelect(_select);\n+        select.setParent(sel, null);\n         if (_exps.projections.length == 1) {\n-            return ((Val) _exps.projections[0]).initialize(_select, ctx, flags);\n+            return ((Val) _exps.projections[0]).initialize(select, ctx, flags);\n         }\n         return ExpState.NULL;\n     }"},{"sha":"3d0c7e5ad3d2101b4e6db6c1a6bbae9efed12c87","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":8,"deletions":29,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/53805483fc610b6f8491eec1e027ce99ca735553/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/53805483fc610b6f8491eec1e027ce99ca735553/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=53805483fc610b6f8491eec1e027ce99ca735553","patch":"@@ -2214,36 +2214,15 @@ public Joins setSubselect(String alias) {\n     private static class Placeholder {\n     }\n     \n-    public void reset() {\n-        _aliases = null;\n-        _eager = null;\n-        _eagerKeys = null;\n-        _expectedResultCount = 0;\n-        _flags = 0;\n-        _from = null;\n-        _grouped = null;\n-        _grouping = null;\n-        _having = null;\n-        _joins = null;\n-        _joinSyntax = 0;\n-        _nullIds = 0;\n-        _ordered = null;\n-        _ordering = null;\n-        _orders = 0;\n-        _outer = null;\n-        _parent = null;\n-        _placeholders = 0;\n-        _preJoins = null;\n-        _schemaAlias = null;\n-        _selects._aliases = null;\n-        _selects._ids = null;\n-        _subPath = null;\n-        _subsels = null;\n-        _tables = null;\n-        _where = null;\n-        \n+    public SelectImpl clone(Context ctx) {\n+        SelectImpl sel = (SelectImpl) _conf.getSQLFactoryInstance().newSelect();\n+        sel._ctx = ctx;\n+        if (_parent != null && _parent.ctx() != null)\n+            sel._parent = (SelectImpl)_parent.ctx().getSelect();\n+        sel._schemaAlias = _schemaAlias;\n+        sel._flags = _flags;\n+        return sel;\n     }\n-    \n \n     /**\n      * Key type used for aliases."},{"sha":"99c579f6f14472b72d67c848df48814c64dbb29d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Context.java","status":"modified","additions":26,"deletions":11,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/53805483fc610b6f8491eec1e027ce99ca735553/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Context.java","raw_url":"https://github.com/apache/openjpa/raw/53805483fc610b6f8491eec1e027ce99ca735553/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Context.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Context.java?ref=53805483fc610b6f8491eec1e027ce99ca735553","patch":"@@ -39,10 +39,11 @@\n     public String schemaAlias;\n     public Subquery subquery;\n     public Expression from = null;\n-    private Context parent = null;\n+    public Context cloneFrom = null;\n+    private final Context parent;\n     private List<Context> subsels = null;\n     private Object select = null;\n-    private int aliasCount = -1; \n+    protected int aliasCount = -1; \n     private Map<String,Value> variables = new HashMap<String,Value>();\n     private Map<String,ClassMetaData> schemas =\n         new HashMap<String,ClassMetaData>();\n@@ -120,7 +121,9 @@ public Object getSelect() {\n      * Register the subquery context in this context.\n      * @param sub\n      */\n-    private void addSubselContext(Context sub) {\n+    public void addSubselContext(Context sub) {\n+        if (sub == null)\n+            return;\n         if (subsels == null)\n             subsels = new ArrayList<Context>();\n         subsels.add(sub);\n@@ -146,14 +149,18 @@ public Context getParent() {\n         return parent;\n     }\n \n-    public void setParent(Context parent) {\n-        this.parent = parent;\n-    }\n-\n     public void addVariable(String id, Value var) {\n         variables.put(id.toLowerCase(), var);\n     }\n \n+    public Map<String,Value> getVariables() {\n+        return variables;\n+    }\n+\n+    public void setVariables(Map<String,Value> variables) {\n+        this.variables = variables;\n+    }\n+\n     public void addSchema(String id, ClassMetaData meta) {\n         schemas.put(id.toLowerCase(), meta);\n     }\n@@ -164,14 +171,22 @@ public ClassMetaData getSchema(String id) {\n         return null;\n     }\n \n+    public Map<String,ClassMetaData> getSchemas() {\n+        return schemas;\n+    }\n+\n+    public void setSchemas(Map<String,ClassMetaData> schemas) {\n+        this.schemas = schemas;\n+    }\n+\n     /**\n      * Given an alias and return its associated variable.\n-     * @param var\n+     * @param alias\n      * @return\n      */\n-    public Value getVariable(String var) {\n-        Value variable = var == null ? null \n-            : variables.get(var.toLowerCase());\n+    public Value getVariable(String alias) {\n+        Value variable = alias == null ? null \n+            : variables.get(alias.toLowerCase());\n         return variable;\n     }\n "},{"sha":"c6a534e53dbaf0066f141e91a796bda2ff6ec60c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/53805483fc610b6f8491eec1e027ce99ca735553/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/53805483fc610b6f8491eec1e027ce99ca735553/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=53805483fc610b6f8491eec1e027ce99ca735553","patch":"@@ -1418,10 +1418,8 @@ private Value getSubquery(JPQLNode node) {\n \n         // parse the subquery\n         ParsedJPQL parsed = new ParsedJPQL(node.parser.jpql, node);\n-        Context parent = ctx();\n         Context subContext = new Context(parsed, null, ctx());\n         contexts.push(subContext);\n-        subContext.setParent(parent);\n \n         ClassMetaData candidate = getCandidateMetaData(node);\n         Subquery subq = subContext.getSubquery();"}]}

