{"sha":"53cc83eb7ee995aa3d645f7b4bdc6492f0e609d1","node_id":"MDY6Q29tbWl0MjA2MzY0OjUzY2M4M2ViN2VlOTk1YWEzZDY0NWY3YjRiZGM2NDkyZjBlNjA5ZDE=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2021-04-02T15:59:37Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2021-04-02T16:00:03Z"},"message":"OPENJPA-1303 \"KEY\" is also a reserved word for columns","tree":{"sha":"869b2ed4ddd0e617ec8864efe304cdf9922bc3f8","url":"https://api.github.com/repos/apache/openjpa/git/trees/869b2ed4ddd0e617ec8864efe304cdf9922bc3f8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/53cc83eb7ee995aa3d645f7b4bdc6492f0e609d1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/53cc83eb7ee995aa3d645f7b4bdc6492f0e609d1","html_url":"https://github.com/apache/openjpa/commit/53cc83eb7ee995aa3d645f7b4bdc6492f0e609d1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/53cc83eb7ee995aa3d645f7b4bdc6492f0e609d1/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"f848e99a7b249298643ae98f04ed70e8ac74b81b","url":"https://api.github.com/repos/apache/openjpa/commits/f848e99a7b249298643ae98f04ed70e8ac74b81b","html_url":"https://github.com/apache/openjpa/commit/f848e99a7b249298643ae98f04ed70e8ac74b81b"}],"stats":{"total":35,"additions":4,"deletions":31},"files":[{"sha":"ea727532eeac65c62cc6ef0c537908f96b4ec8c7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DBIdentifier.java","status":"modified","additions":0,"deletions":14,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/53cc83eb7ee995aa3d645f7b4bdc6492f0e609d1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DBIdentifier.java","raw_url":"https://github.com/apache/openjpa/raw/53cc83eb7ee995aa3d645f7b4bdc6492f0e609d1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DBIdentifier.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/DBIdentifier.java?ref=53cc83eb7ee995aa3d645f7b4bdc6492f0e609d1","patch":"@@ -158,7 +158,6 @@ public void setName(String name, boolean delimit) {\n \n     /**\n      * Set the type of the identifier\n-     * @param type\n      */\n     protected void setType(DBIdentifierType type) {\n         _type = type;\n@@ -177,9 +176,6 @@ public DBIdentifierType getType() {\n      * Splits a string delimited by the specified delimiter of a given name type\n      * into an array of DBIdentifier objects.\n      * Example:  COL1|\"COL 2\"|COL3  delim=| --> DBIdentifier[]{ COL1, \"COL 2\", COL3 }\n-     * @param name\n-     * @param id\n-     * @param delim\n      */\n     public static DBIdentifier[] split(String name, DBIdentifierType id, String delim) {\n \n@@ -201,8 +197,6 @@ public DBIdentifierType getType() {\n     /**\n      * Joins the list of identifiers using the appropriate delimiters and\n      * returns a string based identifier.\n-     * @param resultId\n-     * @param names\n      */\n     public static String join(DBIdentifier...names) {\n         if (names == null || names.length == 0) {\n@@ -810,16 +804,13 @@ public static DBIdentifier removeHungarianNotation(DBIdentifier name) {\n \n     /**\n      * Equality operator which ignores case.\n-     * @param name\n      */\n    public boolean equalsIgnoreCase(DBIdentifier name) {\n        return equals(name, true);\n    }\n \n    /**\n     * Static equality operator which ignores case.\n-    * @param name\n-    * @return\n     */\n     public static boolean equalsIgnoreCase(DBIdentifier name1, DBIdentifier name2) {\n         boolean name1Null = DBIdentifier.isNull(name1);\n@@ -849,7 +840,6 @@ private boolean equals(DBIdentifier sName, boolean ignoreCase) {\n     /**\n      * Returns a new identifier with a combined prefix and name using the standard name\n      * concatenation character ('_').\n-     * @param prefix\n      */\n     public static DBIdentifier preCombine(DBIdentifier name, String prefix) {\n         if (DBIdentifier.isNull(name)) {\n@@ -864,7 +854,6 @@ public static DBIdentifier preCombine(DBIdentifier name, String prefix) {\n \n     /**\n      * Returns a new identifier with delimiters removed.\n-     * @param name\n      */\n     public static DBIdentifier removeDelimiters(DBIdentifier name) {\n         if (DBIdentifier.isNull(name) || !name.isDelimited()) {\n@@ -883,8 +872,6 @@ public static DBIdentifier removeDelimiters(DBIdentifier name) {\n      * Combine {@link #removeDelimiters(org.apache.openjpa.jdbc.identifier.DBIdentifier) }\n      * with {@link #toUpper(org.apache.openjpa.jdbc.identifier.DBIdentifier, boolean) }\n      * in order to save allocations and CPU cycles.\n-     * @param name\n-     * @return\n      */\n     public static DBIdentifier removeDelimitersAndMakeUpper(DBIdentifier name) {\n         if (DBIdentifier.isNull(name) || name.getNameInternal() == null) {\n@@ -901,7 +888,6 @@ public static DBIdentifier removeDelimitersAndMakeUpper(DBIdentifier name) {\n \n     /**\n      * Returns a new delimiter with leading and trailing spaces removed.\n-     * @param name\n      */\n     public static DBIdentifier trim(DBIdentifier name) {\n         if (DBIdentifier.isNull(name)) {"},{"sha":"fd218c843a87566770e952b52a66fd3ef8d79a6a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/53cc83eb7ee995aa3d645f7b4bdc6492f0e609d1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/53cc83eb7ee995aa3d645f7b4bdc6492f0e609d1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java?ref=53cc83eb7ee995aa3d645f7b4bdc6492f0e609d1","patch":"@@ -127,7 +127,7 @@ public H2Dictionary() {\n         // reservedWordSet subset that CANNOT be used as valid column names\n         // (i.e., without surrounding them with double-quotes)\n         invalidColumnWordSet.addAll(Arrays.asList(new String[]{\n-            \"ORDER\",\n+            \"ORDER\", \"KEY\",\n         }));\n \n     }"},{"sha":"3d93682833b9f7ae5af420525cb73ff23872f843","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/53cc83eb7ee995aa3d645f7b4bdc6492f0e609d1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/53cc83eb7ee995aa3d645f7b4bdc6492f0e609d1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java?ref=53cc83eb7ee995aa3d645f7b4bdc6492f0e609d1","patch":"@@ -199,7 +199,7 @@ public PostgresDictionary() {\n             \"CURRENT_TIMESTAMP\", \"CURRENT_USER\", \"DEFAULT\", \"DEFERRABLE\",\n             \"DESC\", \"DISTINCT\", \"DO\", \"ELSE\", \"END\", \"END\", \"EXCEPT\", \"FALSE\",\n             \"FOR\", \"FOREIGN\", \"FROM\", \"FULL\", \"GRANT\", \"GROUP\", \"HAVING\", \"IN\",\n-            \"INITIALLY\", \"INNER\", \"INTERSECT\", \"INTO\", \"IS\", \"ISNULL\", \"JOIN\",\n+            \"INITIALLY\", \"INNER\", \"INTERSECT\", \"INTO\", \"IS\", \"ISNULL\", \"JOIN\", \"KEY\",\n             \"LEADING\", \"LEFT\", \"LIKE\", \"NATURAL\", \"NOT\", \"NOTNULL\", \"NULL\",\n             \"ON\", \"ONLY\", \"OR\", \"ORDER\", \"OUTER\", \"OVERLAPS\", \"PRIMARY\",\n             \"REFERENCES\", \"RIGHT\", \"SELECT\", \"SESSION_USER\", \"SOME\", \"TABLE\","},{"sha":"64bb85376ef28b9add20b595adb8fbe896b6e00e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","status":"modified","additions":2,"deletions":15,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/53cc83eb7ee995aa3d645f7b4bdc6492f0e609d1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","raw_url":"https://github.com/apache/openjpa/raw/53cc83eb7ee995aa3d645f7b4bdc6492f0e609d1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java?ref=53cc83eb7ee995aa3d645f7b4bdc6492f0e609d1","patch":"@@ -51,8 +51,7 @@ public void testJPA1CompatibilityOptions() {\n         OpenJPAEntityManagerFactorySPI emf =\n         (OpenJPAEntityManagerFactorySPI)OpenJPAPersistence.\n             createEntityManagerFactory(\"persistence_1_0\",\n-                \"org/apache/openjpa/persistence/compat/\" +\n-                \"persistence_1_0.xml\");\n+                \"org/apache/openjpa/persistence/compat/persistence_1_0.xml\");\n \n         try {\n             Compatibility compat = emf.getConfiguration().getCompatibilityInstance();\n@@ -193,9 +192,6 @@ public void testOneToManyRelation() {\n             crudUni1MJT(em);\n             crudBi1MFK(em);\n             crudBi1MJT(em);\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            fail(\"OneToMany mapping failed with exception message: \" + e.getMessage());\n         } finally {\n             em.close();\n             closeEMF(emf);\n@@ -422,9 +418,6 @@ public void testOneToManyMapRelation() {\n             crudBi1MMapJT(em);\n             crudUni1MMapRelKeyFK(em);\n             crudBi1MMapRelKeyJT(em);\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            fail(\"OneToMany mapping failed with exception message: \" + e.getMessage());\n         } finally {\n             em.close();\n             emf.close();\n@@ -433,6 +426,7 @@ public void testOneToManyMapRelation() {\n \n     public void crudUni1MMapFK(EntityManager em) {\n         //create\n+        em.getTransaction().begin();\n         Uni_1ToM_Map_FK u = new Uni_1ToM_Map_FK();\n         u.setName(\"u\");\n         Map<String, EntityC_U1M_Map_FK> cs = new HashMap<>();\n@@ -447,7 +441,6 @@ public void crudUni1MMapFK(EntityManager em) {\n         em.persist(u);\n         em.persist(c1);\n         em.persist(c2);\n-        em.getTransaction().begin();\n         em.getTransaction().commit();\n \n         //update by adding a new C\n@@ -676,9 +669,6 @@ public void testUniManyToOneUsingJoinTable() {\n             em.getTransaction().commit();\n             assertSQLFragnments(sql, \"CREATE TABLE UniM1JT_C\", \"U_ID\", \"C_ID\");\n             crudUniM1JT(em);\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            fail(\"ManyToOne mapping failed with exception message: \" + e.getMessage());\n         } finally {\n             em.close();\n             emf.close();\n@@ -752,9 +742,6 @@ public void testOneToOneUsingJoinTable() {\n             assertSQLFragnments(sql, \"CREATE TABLE Uni11JT_C\", \"U_ID\", \"C_ID\");\n             crudBi11JT(em);\n             crudUni11JT(em);\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            fail(\"OneToOne mapping failed with exception message: \" + e.getMessage());\n         } finally {\n             em.close();\n             emf.close();"}]}

