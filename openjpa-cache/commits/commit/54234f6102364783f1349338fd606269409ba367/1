{"sha":"54234f6102364783f1349338fd606269409ba367","node_id":"MDY6Q29tbWl0MjA2MzY0OjU0MjM0ZjYxMDIzNjQ3ODNmMTM0OTMzOGZkNjA2MjY5NDA5YmEzNjc=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-10-28T17:18:09Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-10-28T17:18:09Z"},"message":"OPENJPA-1845: Detect query using IN expression with parameters and exclude from query cache\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1028393 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"14f467782a191becc440157be7fcee35f26a8cf7","url":"https://api.github.com/repos/apache/openjpa/git/trees/14f467782a191becc440157be7fcee35f26a8cf7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/54234f6102364783f1349338fd606269409ba367","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/54234f6102364783f1349338fd606269409ba367","html_url":"https://github.com/apache/openjpa/commit/54234f6102364783f1349338fd606269409ba367","comments_url":"https://api.github.com/repos/apache/openjpa/commits/54234f6102364783f1349338fd606269409ba367/comments","author":null,"committer":null,"parents":[{"sha":"06a1b71cbfbf1560e27b1a654b06b856a331b8ce","url":"https://api.github.com/repos/apache/openjpa/commits/06a1b71cbfbf1560e27b1a654b06b856a331b8ce","html_url":"https://github.com/apache/openjpa/commit/06a1b71cbfbf1560e27b1a654b06b856a331b8ce"}],"stats":{"total":37,"additions":26,"deletions":11},"files":[{"sha":"b2cbbe52e66fbf0e65bc57c7fa5711e1180b81a6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/54234f6102364783f1349338fd606269409ba367/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java","raw_url":"https://github.com/apache/openjpa/raw/54234f6102364783f1349338fd606269409ba367/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java?ref=54234f6102364783f1349338fd606269409ba367","patch":"@@ -188,8 +188,8 @@ public PreparedQuery markUncachable(String id, Exclusion exclusion) {\n \t\tlock(false);\n \t\ttry {\n \t\t\tif (_uncachables.put(id, exclusion) == null) {\n-\t\t\t    if (_log != null && _log.isTraceEnabled()) \n-\t\t\t        _log.trace(_loc.get(\"prepared-query-uncache\", id, exclusion));\n+\t\t\t    if (_log != null && _log.isWarnEnabled()) \n+\t\t\t        _log.warn(_loc.get(\"prepared-query-uncache\", id, exclusion));\n \t\t\t}\n \t\t\tPreparedQuery pq = _delegate.remove(id);\n             if (_statsEnabled && pq != null) {"},{"sha":"70394a2026e58afab8e85466ea170c8fce699d14","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/54234f6102364783f1349338fd606269409ba367/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/54234f6102364783f1349338fd606269409ba367/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java?ref=54234f6102364783f1349338fd606269409ba367","patch":"@@ -215,7 +215,10 @@ public Exclusion initialize(Object result) {\n             return new Object[]{null, _loc.get(\"exclude-not-executor\", _id)};\n         _exps = ((StoreQuery.Executor)executor).getQueryExpressions();\n         for (int i = 0; i < _exps.length; i++) {\n-            if (isUsingExternalizedParameter(_exps[i])) {\n+            QueryExpressions exp = _exps[i];\n+            if (exp.hasInExpression)\n+                return new Object[]{null, _loc.get(\"exclude-in-expression\", _id)};\n+            if (isUsingExternalizedParameter(exp)) {\n                 return new Object[]{null, _loc.get(\"exclude-externalized-param\", _id)};\n             }\n         }"},{"sha":"bb4676629a129759de7a0785db8ebacd9e80cbe0","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/54234f6102364783f1349338fd606269409ba367/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/54234f6102364783f1349338fd606269409ba367/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties?ref=54234f6102364783f1349338fd606269409ba367","patch":"@@ -167,7 +167,9 @@ exclude-not-executor: Query \"{0}\" is not cached because it was not executed on a\n     data store.    \n exclude-externalized-param: Query \"{0}\" is not cached because some parameterized \\\n     field values are externalized.  \n-exclude-user-strategy: This query \"{0}\" is not cached because some parameterized \\\n+exclude-in-expression: Query \"{0}\" is not cached because it uses IN expression with \\\n+\tvariable-length parameter.\n+exclude-user-strategy: Query \"{0}\" is not cached because some parameterized \\\n     field value depends on user-defined field strategy.        \n-exclude-pagination: This query \"{0}\" involves pagination and is not cached.\n+exclude-pagination: Query \"{0}\" is not cached because it uses pagination.\n       \n\\ No newline at end of file"},{"sha":"cc46528e73e88beaf2371e019f56511bee4c2100","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/54234f6102364783f1349338fd606269409ba367/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","raw_url":"https://github.com/apache/openjpa/raw/54234f6102364783f1349338fd606269409ba367/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java?ref=54234f6102364783f1349338fd606269409ba367","patch":"@@ -78,6 +78,7 @@\n     private Stack<Context> _contexts = null;\n     public Object state;\n     public ResultShape<?> shape;\n+    public boolean hasInExpression;\n     \n     /**\n      * Set reference to the JPQL query contexts."},{"sha":"70392e4d66eeb2baa6675a079c7a2900fc04ebf3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/54234f6102364783f1349338fd606269409ba367/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/54234f6102364783f1349338fd606269409ba367/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=54234f6102364783f1349338fd606269409ba367","patch":"@@ -45,6 +45,7 @@\n import org.apache.openjpa.kernel.ResultShape;\n import org.apache.openjpa.kernel.StoreContext;\n import org.apache.openjpa.kernel.exps.AbstractExpressionBuilder;\n+import org.apache.openjpa.kernel.exps.Constant;\n import org.apache.openjpa.kernel.exps.Context;\n import org.apache.openjpa.kernel.exps.Expression;\n import org.apache.openjpa.kernel.exps.ExpressionFactory;\n@@ -91,6 +92,7 @@\n     private OrderedMap<Object, Class<?>> parameterTypes;\n     private int aliasCount = 0;\n     private boolean inAssignSubselectProjection = false;\n+    private boolean hasParameterizedInExpression = false;\n \n     /**\n      * Constructor.\n@@ -308,7 +310,8 @@ QueryExpressions getQueryExpressions() {\n             exps.parameterTypes = parameterTypes;\n \n         exps.accessPath = getAccessPath();\n-\n+        exps.hasInExpression = this.hasParameterizedInExpression;\n+        \n         return exps;\n     }\n \n@@ -1130,14 +1133,15 @@ private Object eval(JPQLNode node) {\n                 // the first child is the path\n                 JPQLNode first = inIterator.next();\n                 val1 = getValue(first);\n-\n                 while (inIterator.hasNext()) {\n                     JPQLNode next = inIterator.next();\n                     if (first.id == JJTTYPE && next.id == JJTTYPELITERAL)\n                         val2 = getTypeLiteral(next);\n                     else\n                         val2 = getValue(next);\n-\n+                    if (val2 instanceof Parameter) {\n+                        hasParameterizedInExpression = true;\n+                    }\n                     // special case for <value> IN (<subquery>) or\n                     // <value> IN (<single value>)\n                     if (useContains(not, val1, val2, node))    \n@@ -1158,6 +1162,7 @@ private Object eval(JPQLNode node) {\n                             inExp = factory.or(inExp, factory.equal(val1, val2));\n                     }\n                 }\n+                \n \n                 // we additionally need to add in a \"NOT NULL\" clause, since\n                 // the IN behavior that is expected by the CTS also expects"},{"sha":"98884798ff2560f94ad2fda1980a34127dd4a73a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/54234f6102364783f1349338fd606269409ba367/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/54234f6102364783f1349338fd606269409ba367/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java?ref=54234f6102364783f1349338fd606269409ba367","patch":"@@ -50,7 +50,7 @@\n import org.apache.openjpa.persistence.test.AbstractPersistenceTestCase;\n \n /**\n- * Tests correctness and performance of queries with and without Prepared Query Cacheing.\n+ * Tests correctness and performance of queries with and without Prepared Query Cache.\n  *  \n  * This test uses a single EntityManagerFactory initialized with fixed set of entity classes \n  * and appropriate configuration parameters for Prepared Query Cache. \n@@ -322,10 +322,13 @@ public void testCollectionValuedParameterOfEntities() {\n \n         em.clear();\n         String jpql4 = \"select p from Parent p where p.id < 3\";\n-        String jpql5 = \"select p from Parent p where p.id > 6\";\n+        String jpql5 = \"select p from Parent p where p.id > 4\";\n         List<Parent> parm1 = em.createQuery(jpql4).getResultList();\n         List<Parent> parm2 = em.createQuery(jpql5).getResultList();\n         \n+        assertTrue(\"Size of two result list \" + parm1.size() + \" and \" + parm2.size() + \n+            \" must not be same\", parm1.size() != parm2.size());\n+        \n         em.clear();\n         String jpql6 = \"select c from Child c where c.parent in ?1\";\n         Query qry = em.createQuery(jpql6);\n@@ -342,11 +345,12 @@ public void testCollectionValuedParameterOfEntities() {\n         List<Child> c2 = qry.getResultList();\n         for (int i = 0; i < c2.size(); i++) {\n             Child child = (Child) c2.get(i);\n-            assertTrue(child.getParent().getId() > 6);\n+            assertTrue(child.getParent().getId() > 4);\n         }\n         \n     }\n     \n+    \n     public void testRepeatedParameterInSubqueryInDifferentOrderSubQLast() {\n         OpenJPAEntityManager em = emf.createEntityManager();\n        "}]}

