{"sha":"548a483a04713cfd5aba3e5a1d44a263ca7a7461","node_id":"MDY6Q29tbWl0MjA2MzY0OjU0OGE0ODNhMDQ3MTNjZmQ1YWJhM2U1YTFkNDRhMjYzY2E3YTc0NjE=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-18T01:37:58Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-18T01:37:58Z"},"message":"OPENJPA-399.  Committing Teresa's most recent patch for this Issue.  Should be ready for resolution now.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@585774 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0d1e40e41e9bfe8caefac6d62753585d311a7d6c","url":"https://api.github.com/repos/apache/openjpa/git/trees/0d1e40e41e9bfe8caefac6d62753585d311a7d6c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/548a483a04713cfd5aba3e5a1d44a263ca7a7461","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/548a483a04713cfd5aba3e5a1d44a263ca7a7461","html_url":"https://github.com/apache/openjpa/commit/548a483a04713cfd5aba3e5a1d44a263ca7a7461","comments_url":"https://api.github.com/repos/apache/openjpa/commits/548a483a04713cfd5aba3e5a1d44a263ca7a7461/comments","author":null,"committer":null,"parents":[{"sha":"261cb3b549be59628f122c2d95b4b3cebb8cc47b","url":"https://api.github.com/repos/apache/openjpa/commits/261cb3b549be59628f122c2d95b4b3cebb8cc47b","html_url":"https://github.com/apache/openjpa/commit/261cb3b549be59628f122c2d95b4b3cebb8cc47b"}],"stats":{"total":28,"additions":23,"deletions":5},"files":[{"sha":"1e4b188be7bf8468d823c0d37e8d7ab0d64bfbf4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/548a483a04713cfd5aba3e5a1d44a263ca7a7461/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/548a483a04713cfd5aba3e5a1d44a263ca7a7461/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java?ref=548a483a04713cfd5aba3e5a1d44a263ca7a7461","patch":"@@ -819,8 +819,10 @@ public void generateSequences(String schemaName, String sequenceName,\n         if (_log.isTraceEnabled())\n             _log.trace(_loc.get(\"gen-seqs\", schemaName, sequenceName));\n \n+        // since all the sequences are generated under the default schema\n+        // therefore, we can use the null schemaname to search\n         Sequence[] seqs = _dict.getSequences(meta, conn.getCatalog(),\n-            schemaName, sequenceName, conn);\n+            null, sequenceName, conn);\n \n         SchemaGroup group = getSchemaGroup();\n         Schema schema;"},{"sha":"d487f7b67b6d96a9372a29ccf64fdcccaadb4997","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/548a483a04713cfd5aba3e5a1d44a263ca7a7461/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/548a483a04713cfd5aba3e5a1d44a263ca7a7461/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=548a483a04713cfd5aba3e5a1d44a263ca7a7461","patch":"@@ -94,7 +94,7 @@ public DB2Dictionary() {\n             \"LONG VARCHAR FOR BIT DATA\", \"LONG VARCHAR\", \"LONG VARGRAPHIC\",\r\n         }));\r\n         systemSchemas = new String(\r\n-                \"SYSCAT, SYSIBM, SYSSTAT, SYSIBMADM, SYSTOOLS\");\r\n+                \"SYSCAT,SYSIBM,SYSSTAT,SYSIBMADM,SYSTOOLS\");\r\n         maxConstraintNameLength = 18;\r\n         maxIndexNameLength = 18;\r\n         maxColumnNameLength = 30;\r"},{"sha":"adf5fc0e68f660f02f17208d3bb3b21379f3e5f8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":11,"deletions":3,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/548a483a04713cfd5aba3e5a1d44a263ca7a7461/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/548a483a04713cfd5aba3e5a1d44a263ca7a7461/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=548a483a04713cfd5aba3e5a1d44a263ca7a7461","patch":"@@ -3341,7 +3341,7 @@ protected Table newTable(ResultSet tableMeta)\n         try {\n             int idx = 1;\n             if (schemaName != null)\n-                stmnt.setString(idx++, schemaName);\n+                stmnt.setString(idx++, schemaName.toUpperCase());\n             if (sequenceName != null)\n                 stmnt.setString(idx++, sequenceName);\n \n@@ -3685,13 +3685,21 @@ protected String convertSchemaCase(String objectName) {\n         if (objectName == null)\n             return null;\n \n-        if (SCHEMA_CASE_LOWER.equals(schemaCase))\n+        String scase = getSchemaCase();\n+        if (SCHEMA_CASE_LOWER.equals(scase))\n             return objectName.toLowerCase();\n-        if (SCHEMA_CASE_PRESERVE.equals(schemaCase))\n+        if (SCHEMA_CASE_PRESERVE.equals(scase))\n             return objectName;\n         return objectName.toUpperCase();\n     }\n \n+    /**\n+     * Return DB specific schemaCase \n+     */\n+    public String getSchemaCase(){\n+        return schemaCase;\n+    }\n+    \n     /**\n      * Prepared the connection for metadata operations.\n      */"},{"sha":"18ac7cc65cb0d2ec3b27c5400d7857bed8446d1f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/548a483a04713cfd5aba3e5a1d44a263ca7a7461/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/548a483a04713cfd5aba3e5a1d44a263ca7a7461/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java?ref=548a483a04713cfd5aba3e5a1d44a263ca7a7461","patch":"@@ -42,6 +42,7 @@\n     private static final Localizer _loc = Localizer.forPackage\n         (SQLServerDictionary.class);\n \n+    private String schemaCase = SCHEMA_CASE_PRESERVE;\n     /**\n      * Flag whether to treat UNIQUEIDENTIFIER as VARBINARY or VARCHAR\n      */\n@@ -230,4 +231,11 @@ private void appendXmlValue(SQLBuffer buf, FilterValue val) {\n         appendLength(buf, type);\n         buf.append(\"')\");\n     }\n+    \n+    /**\n+     * Return DB specific schemaCase\n+     */\n+    public String getSchemaCase() {\n+        return schemaCase;\n+    }\n }"}]}

