{"sha":"54d1a24320ffae8bada3281bf28d28490de284c3","node_id":"MDY6Q29tbWl0MjA2MzY0OjU0ZDFhMjQzMjBmZmFlOGJhZGEzMjgxYmYyOGQyODQ5MGRlMjg0YzM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-01T00:02:11Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-01T00:02:11Z"},"message":"OPENJPA-340: Unique names are unique.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@672960 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"981307a3e2facbff6f2d1227d8c7ef7e3f253667","url":"https://api.github.com/repos/apache/openjpa/git/trees/981307a3e2facbff6f2d1227d8c7ef7e3f253667"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/54d1a24320ffae8bada3281bf28d28490de284c3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/54d1a24320ffae8bada3281bf28d28490de284c3","html_url":"https://github.com/apache/openjpa/commit/54d1a24320ffae8bada3281bf28d28490de284c3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/54d1a24320ffae8bada3281bf28d28490de284c3/comments","author":null,"committer":null,"parents":[{"sha":"d52998d0744c99c87110ae2657740eb20055b352","url":"https://api.github.com/repos/apache/openjpa/commits/d52998d0744c99c87110ae2657740eb20055b352","html_url":"https://github.com/apache/openjpa/commit/d52998d0744c99c87110ae2657740eb20055b352"}],"stats":{"total":61,"additions":31,"deletions":30},"files":[{"sha":"3c87191435cf79c021b5631ddab5578b2e16e48f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java","status":"modified","additions":31,"deletions":30,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/54d1a24320ffae8bada3281bf28d28490de284c3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java","raw_url":"https://github.com/apache/openjpa/raw/54d1a24320ffae8bada3281bf28d28490de284c3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java?ref=54d1a24320ffae8bada3281bf28d28490de284c3","patch":"@@ -32,16 +32,16 @@\n     \n \t/**\n      * Default constructor without a name.\n-     * Assumes that this constraint will set its own name automatically from\n-     * the names of the columns added to it.\n+     * Implies that this constraint will auto-generate its name from the names \n+     * of its columns, unless later the name is set explicitly.\n      */\n     public Unique() {\n     \t_autoNaming = true;\n     }\n \n     /**\n      * Construct with given name.\n-     * Assumes that this constraint will not set its own name.\n+     * Implies that this constraint will not auto-generate its name.\n      * \n      * @param name the name of the constraint, if any\n      * @param table the table of the constraint\n@@ -60,36 +60,10 @@ public boolean isLogical() {\n      * The added column is set to non-nullable because a unique constraint\n      * on the database requires that its constituent columns are NOT NULL. \n      * @see Column#setNotNull(boolean)\n-     * If this instance is constructing its own name, then this method also\n-     * has the side effect of changing its own name by appending the newly \n-     * added column name to its own name. \n      */\n     public void addColumn(Column col) {\n     \tsuper.addColumn(col);\n     \tcol.setNotNull(true);\n-    \tif (_autoNaming && getTable() == null) {\n-    \t\tString prefix = createPrefix();\n-    \t\tsetName(prefix + \"_\" + chop(col.getName(), 4));\n-    \t\t_autoNaming = true;\n-    \t}\n-    }\n-    \n-    private String createPrefix() {\n-    \tString currentName = getName();\n-    \tif (StringUtils.isEmpty(currentName)) {\n-    \t\tString tname = getTableName();\n-    \t\tif (StringUtils.isEmpty(tname))\n-    \t\t\treturn \"UNQ\";\n-    \t\telse\n-    \t\t\treturn \"UNQ_\" + chop(tname, 3);\n-    \t}\n-    \treturn currentName;\n-    }\n-    \n-    private String chop(String name, int head) {\n-    \tif (StringUtils.isEmpty(name))\n-    \t\treturn name;\n-    \treturn name.substring(0, Math.min(Math.max(1,head), name.length()));\n     }\n     \n     /**\n@@ -102,7 +76,19 @@ public void setName(String name) {\n         super.setName(name);\n         _autoNaming = false;\n     }\n-\n+    \n+    /**\n+     * Gets the name of the constraint. If no name has been set by the user\n+     * then this method has the side-effect of auto-generating a name from\n+     * the name of its columns.\n+     */\n+    public String getName() {\n+    \tif (getTable() == null && _autoNaming) {\n+    \t\tsetName(createAutoName());\n+    \t\t_autoNaming = true;\n+    \t}\n+    \treturn super.getName();\n+    }\n \n     /**\n      * Return true if the structure of this primary key matches that of\n@@ -120,4 +106,19 @@ public boolean equalsUnique(Unique unq) {\n \tpublic boolean isAutoNaming() {\n \t\treturn _autoNaming;\n \t}\n+\t\n+\tprivate String createAutoName() {\n+\t\tColumn[] columns = getColumns();\n+\t\tint l = 32/Math.max(columns.length,1);\n+\t\tStringBuffer autoName = new StringBuffer(\"UNQ_\");\n+\t\tfor (Column column : columns)\n+\t\t\tautoName.append(chop(column.getName(),l));\n+\t\treturn autoName.toString();\n+\t}\n+\t\n+    private String chop(String name, int head) {\n+    \tif (StringUtils.isEmpty(name))\n+    \t\treturn name;\n+    \treturn name.substring(0, Math.min(Math.max(1,head), name.length()));\n+    }\n }"}]}

