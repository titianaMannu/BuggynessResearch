{"sha":"554f55f46efb1c4d897dcf585e501a7042ee9c70","node_id":"MDY6Q29tbWl0MjA2MzY0OjU1NGY1NWY0NmVmYjFjNGQ4OTdkY2Y1ODVlNTAxYTcwNDJlZTljNzA=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-09-08T18:44:11Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-09-08T18:44:11Z"},"message":"Update docs on fetch groups.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@441611 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"97daee49ece128825e0a2278972be5e7f3904e97","url":"https://api.github.com/repos/apache/openjpa/git/trees/97daee49ece128825e0a2278972be5e7f3904e97"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/554f55f46efb1c4d897dcf585e501a7042ee9c70","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/554f55f46efb1c4d897dcf585e501a7042ee9c70","html_url":"https://github.com/apache/openjpa/commit/554f55f46efb1c4d897dcf585e501a7042ee9c70","comments_url":"https://api.github.com/repos/apache/openjpa/commits/554f55f46efb1c4d897dcf585e501a7042ee9c70/comments","author":null,"committer":null,"parents":[{"sha":"bbe10e18ba3b478342ee5e84d246b9420103ac9f","url":"https://api.github.com/repos/apache/openjpa/commits/bbe10e18ba3b478342ee5e84d246b9420103ac9f","html_url":"https://github.com/apache/openjpa/commit/bbe10e18ba3b478342ee5e84d246b9420103ac9f"}],"stats":{"total":242,"additions":134,"deletions":108},"files":[{"sha":"82d4a4749b3a88e782f2dbabd2affc32b1a300b3","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlan.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/554f55f46efb1c4d897dcf585e501a7042ee9c70/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlan.java","raw_url":"https://github.com/apache/openjpa/raw/554f55f46efb1c4d897dcf585e501a7042ee9c70/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlan.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlan.java?ref=554f55f46efb1c4d897dcf585e501a7042ee9c70","patch":"@@ -52,7 +52,6 @@\n      */\n     public static final int DEFAULT = FetchConfiguration.DEFAULT;\n \n-\n     /**\n      * Delegate.\n      */"},{"sha":"0a0a5aa327b509654b77091254bc9a4d8a71813d","filename":"openjpa-project/src/doc/manual/ref_guide_conf.xml","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/554f55f46efb1c4d897dcf585e501a7042ee9c70/openjpa-project/src/doc/manual/ref_guide_conf.xml","raw_url":"https://github.com/apache/openjpa/raw/554f55f46efb1c4d897dcf585e501a7042ee9c70/openjpa-project/src/doc/manual/ref_guide_conf.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_conf.xml?ref=554f55f46efb1c4d897dcf585e501a7042ee9c70","patch":"@@ -2124,7 +2124,8 @@ MaxFetchDepth</literal>\n             </para>\n             <para>\n <emphasis role=\"bold\">Description:</emphasis> The maximum depth of relations to\n-traverse when eager fetching. Use -1 for no limit. Defaults to 1.\n+traverse when eager fetching. Use -1 for no limit. Defaults to 1.  See\n+<xref linkend=\"ref_guide_perfpack_eager\"/> for details on eager fetching.\n             </para>\n         </section>\n         <section id=\"openjpa.MetaDataFactory\">"},{"sha":"f959fd4254b073859479dd16375544af8cf0fd56","filename":"openjpa-project/src/doc/manual/ref_guide_meta.xml","status":"modified","additions":34,"deletions":35,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/554f55f46efb1c4d897dcf585e501a7042ee9c70/openjpa-project/src/doc/manual/ref_guide_meta.xml","raw_url":"https://github.com/apache/openjpa/raw/554f55f46efb1c4d897dcf585e501a7042ee9c70/openjpa-project/src/doc/manual/ref_guide_meta.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_meta.xml?ref=554f55f46efb1c4d897dcf585e501a7042ee9c70","patch":"@@ -412,7 +412,7 @@ OpenJPA recognizes the following class extensions:\n                 <title>\n                     Fetch Groups\n                 </title>\n-                <indexterm zone=\"data-cache\">\n+                <indexterm zone=\"fetch-groups\">\n                     <primary>\n                         metadata\n                     </primary>\n@@ -493,31 +493,6 @@ remains valid. Use -1 for no timeout. Defaults to the\n                         </para>\n                     </listitem>\n                 </itemizedlist>\n-                <para>\n-The <literal>data-cache</literal> key accepts the following values:\n-                </para>\n-                <itemizedlist>\n-                    <listitem>\n-                        <para>\n-<literal>true</literal>: Use the default cache, as configured by the\n-<link linkend=\"openjpa.DataCache\"><literal>openjpa.DataCache</literal></link>\n-configuration property. This is the default when no extension is given, unless a\n-superclass names a different cache.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n-<literal>false</literal>: Data for instances of this class should not be\n-cached.\n-                        </para>\n-                    </listitem>\n-                    <listitem>\n-                        <para>\n-<literal>&lt;cache-name&gt;</literal>: Place data for instances of this class\n-into the cache with name <literal>&lt;cache-name&gt;</literal>.\n-                        </para>\n-                    </listitem>\n-                </itemizedlist>\n             </section>\n             <section id=\"detached-state-field\">\n                 <title>\n@@ -593,14 +568,6 @@ annotation accepts an array of lock group names.</phrase> For details on lock\n groups, see <xref linkend=\"ref_guide_lock_groups_and_subclasses\"/>.\n                 </para>\n             </section>\n-            <section id=\"auditable\">\n-                <title>\n-                    Auditable\n-                </title>\n-                <para>\n-Reserved for future use.\n-                </para>\n-            </section>\n         </section>\n         <section id=\"ref_guide_meta_field\">\n             <title>\n@@ -613,7 +580,7 @@ OpenJPA recognizes the following field extensions:\n                 <title>\n                     Dependent\n                 </title>\n-                <indexterm zone=\"data-cache\">\n+                <indexterm zone=\"dependent\">\n                     <primary>\n                         metadata\n                     </primary>\n@@ -664,6 +631,38 @@ Marks the key entities in a map field as dependent.\n                     </listitem>\n                 </itemizedlist>\n             </section>\n+            <section id=\"load-fetch-group\">\n+                <title>\n+                    Load Fetch Group\n+                </title>\n+                <indexterm zone=\"load-fetch-group\">\n+                    <primary>\n+                        metadata\n+                    </primary>\n+                    <secondary>\n+                        extensions\n+                    </secondary>\n+                    <tertiary>\n+                        load fetch group\n+                    </tertiary>\n+                </indexterm>\n+                <indexterm zone=\"load-fetch-group\">\n+                    <primary>\n+                        fetch groups\n+                    </primary>\n+                    <secondary>\n+                        load fetch group\n+                    </secondary>\n+                </indexterm>\n+                <para>\n+The <ulink url=\"../apidocs/org/apache/openjpa/persistence/LoadFetchGroup.html\">\n+<classname>org.apache.openjpa.persistence.LoadFetchGroup</classname></ulink> \n+annotation specifies a field's load fetch group. \n+<xref linkend=\"ref_guide_fetch\"/> discusses OpenJPA's support for fetch groups \n+in general; see <xref linkend=\"ref_guide_fetch_custom\"/> for how to use this\n+annotation in particular.\n+                </para>\n+            </section>\n             <section id=\"lrs\">\n                 <title>\n                     LRS"},{"sha":"36975bfd56ed47fe49c44566e46f10aa5efbbb0c","filename":"openjpa-project/src/doc/manual/ref_guide_pc.xml","status":"modified","additions":98,"deletions":71,"changes":169,"blob_url":"https://github.com/apache/openjpa/blob/554f55f46efb1c4d897dcf585e501a7042ee9c70/openjpa-project/src/doc/manual/ref_guide_pc.xml","raw_url":"https://github.com/apache/openjpa/raw/554f55f46efb1c4d897dcf585e501a7042ee9c70/openjpa-project/src/doc/manual/ref_guide_pc.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_pc.xml?ref=554f55f46efb1c4d897dcf585e501a7042ee9c70","patch":"@@ -1649,30 +1649,11 @@ runtime to vary the sets of fields that are eagerly loaded.\n             </title>\n             <para>\n OpenJPA places any field that is eagerly loaded according to the JPA metadata\n-rules into the built-in <emphasis>default</emphasis> fetch group. The default\n-fetch group is always active; you cannot remove it at runtime. Thus fields in\n-this group are always loaded immediately when an object is fetched from the\n-datastore.\n-            </para>\n-            <para>\n-A field can be a member of zero or one fetch groups, including the default fetch\n-group. That is, fields in the default fetch group cannot be in an additional\n-fetch group, and a field cannot declare itself a member of more than one fetch\n-group. So to place a field in a custom fetch group, you must first exclude it\n-from eager fetching in your JPA metadata, if it does not already default to lazy\n-loading.\n-            </para>\n-            <para>\n-When lazy-loading a field, OpenJPA checks to see if that field declares itself\n-to be a member of a fetch group. If so, OpenJPA will load all fields in that\n-fetch group.\n-            </para>\n-            <para>\n-Additionally, it is possible to configure a OpenJPA <classname> EntityManager\n-</classname> or <classname>Query</classname> to use a particular fetch group or\n-set of fetch groups when loading new objects, as described later in this\n-chapter. When this is the case, OpenJPA loads the default fetch group plus any\n-fields in the specified set of additional fetch groups.\n+rules into the built-in <emphasis>default</emphasis> fetch group. As its name\n+implies, the default fetch group is active by default.  You may also\n+define your own named fetch groups and activate or deactivate them at runtime,\n+as described later in this chapter. OpenJPA will eagerly-load the fields in all\n+active fetch groups when loading objects from the datastore.\n             </para>\n             <para>\n You create fetch groups with the\n@@ -1734,36 +1715,35 @@ include in the fetch group.\n                 </listitem>\n                 <listitem>\n                     <para>\n-<literal>depth</literal>: If the attribute represents a relation, the depth to\n-which to recurse. The current fetch group will be applied to the related object\n-when fetching it, and so on until the depth is exhausted or the related object\n-has no relations in the current fetch group. Under the default depth of 1, the\n-related object will be fetched, but none of its relations will be traversed,\n-even if they are in the current fetch group. With a depth of 2, the related\n-object will be fetched, and if it has any relations in the current fetch group,\n-those will be fetched with a depth of 1. A depth of 0 indicates that the\n-recursion continues until the graph is exhausted or a related object has no\n-relations in the current fetch group.\n+<literal>recursionDepth</literal>: If the attribute represents a relation, the \n+maximum number of same-typed relations to eager-fetch from this field.  Defaults\n+to 1.  For example, consider an <classname>Employee</classname> class with a \n+<literal>manager</literal> field, also of type <classname>Employee</classname>.\n+When we load an <classname>Employee</classname> and the <literal>\n+manager</literal> field is in an active fetch group, the recursion depth (along\n+with the max fetch depth setting, described below) determines whether we only \n+retrieve the target <classname>Employee</classname> and his manager (depth 1), \n+or whether we also retrieve the manager's manager (depth 2), or the manager's \n+manager's manager (depth 3), etc.  Use -1 for unlimited depth.\n                     </para>\n                 </listitem>\n             </itemizedlist>\n-            <para>\n-Thus, to create a <emphasis>detail</emphasis> fetch group consisting of the\n-<literal>publisher</literal> and <literal>articles</literal> relations, with the\n-fetch group applied recursively to the related objects, use:\n-            </para>\n             <example id=\"ref_guide_fetch_customgroups\">\n                 <title>\n                     Custom Fetch Group Metadata\n                 </title>\n+                <para>\n+Creates a <emphasis>detail</emphasis> fetch group consisting of the\n+<literal>publisher</literal> and <literal>articles</literal> relations, use:\n+                </para>\n <programlisting>\n import org.apache.openjpa.persistence.*;\n \n @Entity\n @FetchGroups({\n     @FetchGroup(name=\"detail\", attributes={\n-        @FetchAttribute(name=\"publisher\" depth=0),\n-        @FetchAttribute(name=\"articles\" depth=0)\n+        @FetchAttribute(name=\"publisher\"),\n+        @FetchAttribute(name=\"articles\")\n     }),\n     ...\n })\n@@ -1773,13 +1753,51 @@ public class Magazine\n }\n </programlisting>\n             </example>\n-            <note>\n-                <para>\n-OpenJPA currently only supports a depth of 0 for fetch attributes. This\n-restriction will be lifted in a future release, along with the restriction\n-limiting each attribute to a single fetch group.\n-                </para>\n-            </note>\n+            <para>\n+A field can be a member of any number of fetch groups.  A field can also\n+declare a <emphasis>load fetch group</emphasis>.  \n+When you access a lazy-loaded field for the first time, OpenJPA makes a\n+datastore trip to fetch that field's data.  Sometimes, however, you know\n+that whenever you access a lazy field A, you're likely to access lazy fields B\n+and C as well.  Therefore, it would be more efficient to fetch the data for A,\n+B, and C in the same datastore trip.  By setting A's load fetch group to the \n+name of a <link linkend=\"ref_guide_fetch\">fetch group</link> containing B and \n+C, you can tell OpenJPA to load all of these fields together when A is first \n+accessed.\n+            </para>\n+            <para>\n+Use OpenJPA's\n+<ulink url=\"../apidocs/org/apache/openjpa/persistence/LoadFetchGroup.html\">\n+<classname>org.apache.openjpa.persistence.LoadFetchGroup</classname></ulink>\n+annotation to specify the load fetch group of any persistent field. The value of\n+the annotation is the name of a declared fetch group whose members should be\n+loaded along with the annotated field.\n+            </para>\n+            <example id=\"ref_guide_fetch_loadgroup\">\n+                <title>\n+                    Load Fetch Group Metadata\n+                </title>\n+<programlisting>\n+import org.apache.openjpa.persistence.*;\n+\n+@Entity\n+@FetchGroups({\n+    @FetchGroup(name=\"detail\", attributes={\n+        @FetchAttribute(name=\"publisher\"),\n+        @FetchAttribute(name=\"articles\")\n+    }),\n+    ...\n+})\n+public class Magazine\n+{\n+   @ManyToOne(fetch=FetchType.LAZY)\n+   @LoadFetchGroup(\"detail\")\n+   private Publisher publisher;\n+\n+   ...\n+}\n+</programlisting>\n+            </example>\n         </section>\n         <section id=\"ref_guide_fetch_conf\">\n             <title>\n@@ -1808,16 +1826,31 @@ You can control the default set of fetch groups with the\n fetch group names.\n             </para>\n             <para>\n-In JPA, OpenJPA's <classname>OpenJPAEntityManager</classname> and <classname>\n+You can also set the system's default maximum fetch depth with the\n+<link linkend=\"openjpa.MaxFetchDepth\"><literal>openjpa.MaxFetchDepth</literal>\n+</link> configuration property.  The maximum fetch depth determines how \"deep\" \n+into the object graph to traverse when loading an instance.  The default maximum\n+depth is 1, meaning that OpenJPA will load at most the target instance and its \n+immediate relations.  By increasing the depth, you can allow OpenJPA to also \n+load relations of relations, to arbitrary depth.  A value of -1 symbolizes an\n+infinite maximum, telling OpenJPA to fetch configured relations until it reaches\n+the edges of the object graph.  Of course, which relation fields are loaded \n+depends on whether the fields are eager or lazy, and on the active fetch groups.\n+A fetch group member's recursion depth may also limit the fetch depth to \n+something less than the configured maximum.\n+            </para>\n+            <para>\n+OpenJPA's <classname>OpenJPAEntityManager</classname> and <classname>\n OpenJPAQuery</classname> extensions to the standard <classname>EntityManager\n </classname> and <classname>Query</classname> interfaces provide access to a\n <ulink url=\"../../api/openjpa/persistence/FetchPlan.html\"><classname>\n org.apache.openjpa.persistence.FetchPlan</classname></ulink> object. The\n-<classname>FetchPlan</classname> maintains the set of active fetch groups. It\n-begins with the groups defined in the <literal>openjpa.FetchGroups</literal>\n-property, but allows you to add and remove groups for an individual <classname>\n-EntityManager</classname> or <classname>Query</classname> through the methods\n-below.\n+<classname>FetchPlan</classname> maintains the set of active fetch groups and\n+the maximum fetch depth. It begins with the groups and depth defined in the \n+<literal>openjpa.FetchGroups</literal> and <literal>openjpa.MaxFetchDepth\n+</literal> properties, but allows you to add or remove groups and change the\n+maximum fetch depth for an individual <classname>EntityManager</classname> or \n+<classname>Query</classname> through the methods below.\n             </para>\n <programlisting>\n public FetchPlan addFetchGroup (String group);\n@@ -1829,6 +1862,8 @@ public FetchPlan removeFetchGroups (Collection groups);\n public FetchPlan resetFetchGroups ();\n public Collection&lt;String&gt; getFetchGroups (); \n public void clearFetchGroups ();\n+public FetchPlan setMaxFetchDepth(int depth);\n+public int getMaxFetchDepth();\n </programlisting>\n             <para>\n <xref linkend=\"ref_guide_runtime\"/> details the <classname>\n@@ -1845,7 +1880,7 @@ import org.apache.openjpa.persistence.*;\n ...\n \n OpenJPAQuery kq = OpenJPAPersistence.cast (em.createQuery (...));\n-kq.getFetchPlan ().addFetchGroup (\"detail\");\n+kq.getFetchPlan ().setMaxFetchDepth(3).addFetchGroup (\"detail\");\n List results = kq.getResultList ();\n </programlisting>\n             </example>\n@@ -1865,8 +1900,8 @@ List results = kq.getResultList ();\n             <para>\n In addition to controlling fetch configuration on a per-fetch-group basis, you\n can configure OpenJPA to include particular fields in the current fetch\n-configuration. This allows you to add individual fields that are not in the\n-default fetch group or in any other currently-active fetch groups to the set of\n+plan. This allows you to add individual fields that are not in the\n+default fetch group or in any other active fetch groups to the set of\n fields that will be eagerly loaded from the database.\n             </para>\n             <para>\n@@ -1994,15 +2029,16 @@ table. If you perform a query that returns 100 <classname>Person</classname>\n objects, and then you have to retrieve the <classname>Address</classname> for\n each person, OpenJPA may make as many as 101 queries (the initial query, plus\n one for the address of each person returned). Or if some of the <classname>\n-Person</classname> instances turn out to be <classname>Employee</classname> s,\n+Person</classname> instances turn out to be <classname>Employee</classname>s,\n where <classname>Employee</classname> has additional data in its own joined\n table, OpenJPA once again might need to make extra database trips to access the\n additional employee data. With eager fetching, OpenJPA can reduce these cases to\n a single query.\n         </para>\n         <para>\n-Eager fetching only affects relations in the fetch groups being loaded (see\n-<xref linkend=\"ref_guide_fetch\"/> ). In other words, relations that would\n+Eager fetching only affects relations in the active fetch groups, and is limited\n+by the declared maximum fetch depth and field recursion depth (see\n+<xref linkend=\"ref_guide_fetch\"/>). In other words, relations that would\n not normally be loaded immediately when retrieving an object or accessing a\n field are not affected by eager fetching. In our example above, the address of\n each person would only be eagerly fetched if the query were configured to\n@@ -2072,8 +2108,7 @@ from relation fetching, and can be disabled for specific classes.\n Some databases may not support UNIONs or outer joins. Also, OpenJPA can not use\n outer joins if you have set the <link linkend=\"openjpa.jdbc.DBDictionary\">\n <literal> DBDictionary</literal></link>'s <literal>JoinSyntax</literal> to\n-<literal>traditional</literal>. See <xref linkend=\"ref_guide_dbsetup_sql92\"/>\n-.\n+<literal>traditional</literal>. See <xref linkend=\"ref_guide_dbsetup_sql92\"/>.\n                     </para>\n                 </note>\n             </listitem>\n@@ -2291,13 +2326,6 @@ more data into memory than anticipated.\n                 </listitem>\n                 <listitem>\n                     <para>\n-Eager fetching can sometimes be <emphasis>less</emphasis> efficient than\n-standard fetching when circular relations are included in the configured fetch\n-groups.\n-                    </para>\n-                </listitem>\n-                <listitem>\n-                    <para>\n Once OpenJPA eager-joins into a class, it cannot issue any further eager to-many\n joins or parallel selects from that class in the same query. To-one joins,\n however, can recurse to any level.\n@@ -2316,8 +2344,7 @@ turn off eager to-many joining.\n                     <para>\n OpenJPA cannot eagerly join to polymorphic relations to non-leaf classes in a\n table-per-class inheritance hierarchy. You can work around this restriction\n-using the mapping extensions described in <xref linkend=\"nonpolymorphic\"/>\n-.\n+using the mapping extensions described in <xref linkend=\"nonpolymorphic\"/>.\n                     </para>\n                 </listitem>\n             </itemizedlist>"}]}

