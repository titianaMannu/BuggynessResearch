{"sha":"556d796ed38799a7c99d550ba4d79d26a5933abc","node_id":"MDY6Q29tbWl0MjA2MzY0OjU1NmQ3OTZlZDM4Nzk5YTdjOTlkNTUwYmE0ZDc5ZDI2YTU5MzNhYmM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2012-09-12T01:23:32Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2012-09-12T01:23:32Z"},"message":"OPENJPA-2253: Clear temporary storage for audit to prevent memory leak\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1383727 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"069a32f1ecc0cd64a5f86a920133876e5d28eb32","url":"https://api.github.com/repos/apache/openjpa/git/trees/069a32f1ecc0cd64a5f86a920133876e5d28eb32"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/556d796ed38799a7c99d550ba4d79d26a5933abc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/556d796ed38799a7c99d550ba4d79d26a5933abc","html_url":"https://github.com/apache/openjpa/commit/556d796ed38799a7c99d550ba4d79d26a5933abc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/556d796ed38799a7c99d550ba4d79d26a5933abc/comments","author":null,"committer":null,"parents":[{"sha":"e9a6d6681d59750c438ddf384e23b8f28d971085","url":"https://api.github.com/repos/apache/openjpa/commits/e9a6d6681d59750c438ddf384e23b8f28d971085","html_url":"https://github.com/apache/openjpa/commit/e9a6d6681d59750c438ddf384e23b8f28d971085"}],"stats":{"total":56,"additions":50,"deletions":6},"files":[{"sha":"9ab8bf479a7f3b9c3140312072cf50217b05706e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AuditManager.java","status":"modified","additions":17,"deletions":5,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/556d796ed38799a7c99d550ba4d79d26a5933abc/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AuditManager.java","raw_url":"https://github.com/apache/openjpa/raw/556d796ed38799a7c99d550ba4d79d26a5933abc/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AuditManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AuditManager.java?ref=556d796ed38799a7c99d550ba4d79d26a5933abc","patch":"@@ -43,7 +43,7 @@\n /**\n  * Controller for audit facility.\n  * This controller performs the following basic duties:\n- * <LI> Records auditable types at class laoding time\n+ * <LI> Records auditable types at class loading time\n  * <LI> Listens to instance life cycle changes and transaction.\n  * <LI> Collects auditable instances on instance life cycle changes.\n  * <LI> Delegates real auditing to the {@link Auditor} at transaction boundary.\n@@ -143,24 +143,32 @@ public void beforeCommit(TransactionEvent event) {\n \t\t}\n \t}\n \t\n+\tprivate void forget(Broker broker) {\n+\t\tAuditCallback cb = _saved.remove(broker);\n+\t\tif (cb != null) {\n+\t\t\tbroker.removeLifecycleListener(cb);\n+\t\t\tcb.clear();\n+\t\t}\n+\t}\n+\t\n \t@Override\n \tpublic void afterCommit(TransactionEvent event) {\n-\t\t_saved.remove(event.getSource());\n+\t\tforget((Broker)event.getSource());\n \t}\n \n \t@Override\n \tpublic void afterRollback(TransactionEvent event) {\n-\t\t_saved.remove(event.getSource());\n+\t\tforget((Broker)event.getSource());\n \t}\n \n \t@Override\n \tpublic void afterCommitComplete(TransactionEvent event) {\n-\t\t_saved.remove(event.getSource());\n+\t\tforget((Broker)event.getSource());\n \t}\n \n \t@Override\n \tpublic void afterRollbackComplete(TransactionEvent event) {\n-\t\t_saved.remove(event.getSource());\n+\t\tforget((Broker)event.getSource());\n \t}\n \t\n \t@Override\n@@ -294,6 +302,10 @@ protected void save(AuditableOperation op, LifecycleEvent event) {\n \t\t\t}\n \t\t}\n \t\t\n+\t\tvoid clear() {\n+\t\t\t_audits.clear();\n+\t\t}\n+\t\t\n \t\t/**\n \t\t * Life-cycle callbacks \n \t\t */"},{"sha":"a2c5c6974d9bdf2202afc80a86831672801df437","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Audited.java","status":"modified","additions":33,"deletions":1,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/556d796ed38799a7c99d550ba4d79d26a5933abc/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Audited.java","raw_url":"https://github.com/apache/openjpa/raw/556d796ed38799a7c99d550ba4d79d26a5933abc/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Audited.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Audited.java?ref=556d796ed38799a7c99d550ba4d79d26a5933abc","patch":"@@ -22,6 +22,8 @@\n \n import org.apache.openjpa.audit.AuditableOperation;\n import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.enhance.Reflection;\n+import org.apache.openjpa.meta.FieldMetaData;\n \n /**\n  * Carries immutable information about an audited persistent instance.\n@@ -73,11 +75,41 @@ public Object getOriginalObject() {\n \t\tString[] names = new String[dirty.cardinality()];\n \t\tint j = 0;\n \t\tfor (int pos = dirty.nextSetBit(0); pos != -1; pos = dirty.nextSetBit(pos+1)) {\n-\t\t\tnames[j++] = _sm.getMetaData().getField(pos).getName();\n+\t\t\tnames[j++] = _sm.getMetaData().getField(pos).getName();\t\t\n \t\t}\n \t\treturn names;\n \t}\n \t\n+\t/**\n+\t * Gets the value of the given field of the managed object.\n+\t * \n+\t * @param field name of a persistent property\n+\t * @return value of the given field in the managed instance\n+\t * @exception IllegalArgumentException if the named field is not a persistent property \n+\t */\n+\tpublic Object getManangedFieldValue(String field) {\n+\t\tFieldMetaData fmd = _sm.getMetaData().getField(field);\n+\t\tif (fmd == null) {\n+\t\t\tthrow new IllegalArgumentException(field + \" does not exist in \" + _original);\n+\t\t}\n+\t\treturn _sm.fetch(fmd.getIndex());\n+\t}\n+\t\n+\t/**\n+\t * Gets the value of the given field of the original state of the object.\n+\t * \n+\t * @param field name of a persistent property\n+\t * @return value of the given field in the original instance\n+\t * @exception IllegalArgumentException if the named field is not a persistent property \n+\t */\n+\tpublic Object getOriginalFieldValue(String field) {\n+\t\ttry {\n+\t\t\treturn Reflection.getValue(_original, field, true);\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new IllegalArgumentException(field + \" does not exist in \" + _original);\n+\t\t}\n+\t}\n+\t\n \t/**\n \t * Gets the type of this audit.\n \t */"}]}

