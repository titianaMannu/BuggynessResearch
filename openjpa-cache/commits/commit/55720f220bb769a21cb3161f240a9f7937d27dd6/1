{"sha":"55720f220bb769a21cb3161f240a9f7937d27dd6","node_id":"MDY6Q29tbWl0MjA2MzY0OjU1NzIwZjIyMGJiNzY5YTIxY2IzMTYxZjI0MGE5Zjc5MzdkMjdkZDY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-11-28T23:13:50Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-11-28T23:13:50Z"},"message":"OPENJPA-455\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@599192 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8b81fc6631779281afd5e4575fb6caa86f35c4e7","url":"https://api.github.com/repos/apache/openjpa/git/trees/8b81fc6631779281afd5e4575fb6caa86f35c4e7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/55720f220bb769a21cb3161f240a9f7937d27dd6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/55720f220bb769a21cb3161f240a9f7937d27dd6","html_url":"https://github.com/apache/openjpa/commit/55720f220bb769a21cb3161f240a9f7937d27dd6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/55720f220bb769a21cb3161f240a9f7937d27dd6/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"5472692b411e87032a95e60ea0833b35b94695a0","url":"https://api.github.com/repos/apache/openjpa/commits/5472692b411e87032a95e60ea0833b35b94695a0","html_url":"https://github.com/apache/openjpa/commit/5472692b411e87032a95e60ea0833b35b94695a0"}],"stats":{"total":74,"additions":62,"deletions":12},"files":[{"sha":"d7501e95c148f1703bc94e3aec15d6a25bb9e61a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":59,"deletions":12,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/55720f220bb769a21cb3161f240a9f7937d27dd6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/55720f220bb769a21cb3161f240a9f7937d27dd6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=55720f220bb769a21cb3161f240a9f7937d27dd6","patch":"@@ -313,6 +313,7 @@\n     protected final Set systemSchemaSet = new HashSet();\n     protected final Set systemTableSet = new HashSet();\n     protected final Set fixedSizeTypeNameSet = new HashSet();\n+    protected final Set typeModifierSet = new HashSet();\n \n     // when we store values that lose precion, track the types so that the\n     // first time it happens we can warn the user\n@@ -1596,6 +1597,14 @@ public String getTypeName(int type) {\n      * override this method to return the unaltered type name for columns of\n      * those types (or add the type names to the\n      * <code>fixedSizeTypeNameSet</code>).\n+     * \n+     * <P>Some databases support \"type modifiers\" for example the unsigned\n+     * \"modifier\" in MySQL. In these cases the size should go between the type \n+     * and the \"modifier\", instead of after the modifier. For example \n+     * CREATE table FOO ( myint INT (10) UNSIGNED . . .) instead of \n+     * CREATE table FOO ( myint INT UNSIGNED (10) . . .).\n+     * Type modifiers should be added to <code>typeModifierSet</code> in \n+     * subclasses. \n      */\n     protected String appendSize(Column col, String typeName) {\n         if (fixedSizeTypeNameSet.contains(typeName.toUpperCase()))\n@@ -1613,19 +1622,57 @@ protected String appendSize(Column col, String typeName) {\n             size = buf.toString();\n         }\n \n-        int idx = typeName.indexOf(\"{0}\");\n-        if (idx == -1 && size != null)\n-            return typeName + size;\n-        if (idx == -1)\n-            return typeName;\n+        return insertSize(typeName, size);\n+    }\n \n-        // replace '{0}' with size\n-        String ret = typeName.substring(0, idx);\n-        if (size != null)\n-            ret = ret + size;\n-        if (typeName.length() > idx + 3)\n-            ret = ret + typeName.substring(idx + 3);\n-        return ret;\n+    /**\n+     * Helper method that inserts a size clause for a given SQL type. \n+     * \n+     * @see appendSize\n+     * \n+     * @param typeName  The SQL type ie INT\n+     * @param size      The size clause ie (10)\n+     * @return          The typeName + size clause. Usually the size clause will \n+     *                  be appended to typeName. If the typeName contains a \n+     *                  marker : {0} or if typeName contains a modifier the \n+     *                  size clause will be inserted appropriately.   \n+     */\n+    protected String insertSize(String typeName, String size) {\n+    \tif(StringUtils.isEmpty(size)) { \n+\t    \treturn typeName;\n+    \t}\n+    \t\n+        int idx = typeName.indexOf(\"{0}\");\n+        if (idx != -1) {\n+            // replace '{0}' with size\n+            String ret = typeName.substring(0, idx);\n+            if (size != null)\n+                ret = ret + size;\n+            if (typeName.length() > idx + 3)\n+                ret = ret + typeName.substring(idx + 3);\n+            return ret;\n+        }\n+        if (! typeModifierSet.isEmpty()) {\n+            String s;\n+            idx = typeName.length();\n+            int curIdx = -1;\n+            for (Iterator i = typeModifierSet.iterator(); i.hasNext();) {\n+                s = (String) i.next();\n+                if (typeName.toUpperCase().contains(s)) {\n+                    curIdx = typeName.toUpperCase().indexOf(s);\n+                    if (curIdx != -1 && curIdx < idx) {\n+                        idx = curIdx;\n+                    }\n+                }\n+            }\n+            if(idx != typeName.length()) {\n+                String ret = typeName.substring(0, idx);\n+                ret = ret + size;\n+                ret = ret + ' ' + typeName.substring(idx);\n+                return ret;\n+            }\n+        }\n+        return typeName + size;\n     }\n \n     ///////////"},{"sha":"358bda12977ed57adaac2b5f27a3f8532a60c34c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/55720f220bb769a21cb3161f240a9f7937d27dd6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/55720f220bb769a21cb3161f240a9f7937d27dd6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java?ref=55720f220bb769a21cb3161f240a9f7937d27dd6","patch":"@@ -107,6 +107,9 @@ public MySQLDictionary() {\n \n         // MySQL requires double-escape for strings\n         searchStringEscape = \"\\\\\\\\\";\n+\n+        typeModifierSet.addAll(Arrays.asList(new String[] { \"UNSIGNED\",\n+            \"ZEROFILL\" }));\n     }\n \n     public String[] getCreateTableSQL(Table table) {"}]}

