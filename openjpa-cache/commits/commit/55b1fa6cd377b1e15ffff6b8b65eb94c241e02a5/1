{"sha":"55b1fa6cd377b1e15ffff6b8b65eb94c241e02a5","node_id":"MDY6Q29tbWl0MjA2MzY0OjU1YjFmYTZjZDM3N2IxZTE1ZmZmZjZiOGI2NWViOTRjMjQxZTAyYTU=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2008-12-04T23:03:42Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2008-12-04T23:03:42Z"},"message":"OPENJPA-815: retrieval fails for an entity that contains an\nembeddable, which contains a toMany relation.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@723480 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ae2c8585f3bea31dfbe65d95c18bfc64b623bf05","url":"https://api.github.com/repos/apache/openjpa/git/trees/ae2c8585f3bea31dfbe65d95c18bfc64b623bf05"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/55b1fa6cd377b1e15ffff6b8b65eb94c241e02a5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/55b1fa6cd377b1e15ffff6b8b65eb94c241e02a5","html_url":"https://github.com/apache/openjpa/commit/55b1fa6cd377b1e15ffff6b8b65eb94c241e02a5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/55b1fa6cd377b1e15ffff6b8b65eb94c241e02a5/comments","author":null,"committer":null,"parents":[{"sha":"c60a95f77a9eb0f6156010cf9f33b9a987bf60c8","url":"https://api.github.com/repos/apache/openjpa/commits/c60a95f77a9eb0f6156010cf9f33b9a987bf60c8","html_url":"https://github.com/apache/openjpa/commit/c60a95f77a9eb0f6156010cf9f33b9a987bf60c8"}],"stats":{"total":440,"additions":437,"deletions":3},"files":[{"sha":"fbd8cd76e27fa7073d6ee3ec3546b5fecca6198f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","status":"modified","additions":21,"deletions":3,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/55b1fa6cd377b1e15ffff6b8b65eb94c241e02a5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/55b1fa6cd377b1e15ffff6b8b65eb94c241e02a5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java?ref=55b1fa6cd377b1e15ffff6b8b65eb94c241e02a5","patch":"@@ -594,13 +594,21 @@ public void load(final OpenJPAStateManager sm, final JDBCStore store,\n             \n             ClassMapping mapping = field.getDefiningMapping();\n             Object oid = sm.getObjectId();\n-            Column[] cols = mapping.getPrimaryKeyColumns();\n+            \n             if (sel == null)\n                 sel = ((LogicalUnion.UnionSelect)union.getSelects()[0]).\n                 getDelegate();\n+           \n+            ValueMapping embed = mapping.getEmbeddingMapping();\n+            if (embed != null) \n+                mapping = getOwner(embed);\n+\n+            if (mapping != null) {\n+                Column[] cols = mapping.getPrimaryKeyColumns();\n+                sel.wherePrimaryKey(mapping, cols, cols, oid, store, \n+                    null, null, parmList);\n+            }\n \n-            sel.wherePrimaryKey(mapping, cols, cols, oid, store, \n-                \tnull, null, parmList);\n             List nonFKParams = sel.getSQL().getNonFKParameters();\n             if (nonFKParams != null && nonFKParams.size() > 0) \n                 parmList.addAll(nonFKParams);\n@@ -641,6 +649,16 @@ public void load(final OpenJPAStateManager sm, final JDBCStore store,\n         else\n             sm.storeObject(field.getIndex(), coll);\n     }\n+    \n+    private ClassMapping getOwner(ValueMapping embed) {\n+        if (embed == null)\n+            return null;\n+        ClassMapping owner = embed.getFieldMapping().getDefiningMapping();\n+        if (owner.getPrimaryKeyFields().length > 0)\n+            return owner;\n+        ValueMapping embed1 = (ValueMapping) owner.getEmbeddingMetaData();\n+        return getOwner(embed1);\n+    }\n \n     protected Union newUnion(final OpenJPAStateManager sm, final JDBCStore store,\n         final JDBCFetchConfiguration fetch, final ClassMapping[] elems,"},{"sha":"be14b79562da11a7ad624705ab3ee04e26f74b83","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_Embed_ToMany.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/55b1fa6cd377b1e15ffff6b8b65eb94c241e02a5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_Embed_ToMany.java","raw_url":"https://github.com/apache/openjpa/raw/55b1fa6cd377b1e15ffff6b8b65eb94c241e02a5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_Embed_ToMany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_Embed_ToMany.java?ref=55b1fa6cd377b1e15ffff6b8b65eb94c241e02a5","patch":"@@ -0,0 +1,64 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.embed;\r\n+\r\n+import javax.persistence.Embeddable;\r\n+import javax.persistence.Embedded;\r\n+\r\n+@Embeddable \r\n+public class Embed_Embed_ToMany {\r\n+    protected int intVal1;\r\n+    protected int intVal2;\r\n+    protected int intVal3;\r\n+    @Embedded\r\n+    protected Embed_ToMany embed;\r\n+    \r\n+    public int getIntVal1() {\r\n+        return intVal1;\r\n+    }\r\n+    \r\n+    public void setIntVal1(int intVal1) {\r\n+        this.intVal1 = intVal1;\r\n+    }\r\n+    \r\n+    public int getIntVal2() {\r\n+        return intVal2;\r\n+    }\r\n+    \r\n+    public void setIntVal2(int intVal2) {\r\n+        this.intVal2 = intVal2;\r\n+    }\r\n+    \r\n+    public int getIntVal3() {\r\n+        return intVal3;\r\n+    }\r\n+    \r\n+    public void setIntVal3(int intVal3) {\r\n+        this.intVal3 = intVal3;\r\n+    }\r\n+    \r\n+    public Embed_ToMany getEmbed() {\r\n+        return embed;\r\n+    }\r\n+ \r\n+    public void setEmbed(Embed_ToMany embed) {\r\n+        this.embed = embed;\r\n+    }\r\n+    \r\n+}\r"},{"sha":"e7428deff67ecc0c49ae5464430ede95f88e57fe","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_ToMany.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/55b1fa6cd377b1e15ffff6b8b65eb94c241e02a5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_ToMany.java","raw_url":"https://github.com/apache/openjpa/raw/55b1fa6cd377b1e15ffff6b8b65eb94c241e02a5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_ToMany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_ToMany.java?ref=55b1fa6cd377b1e15ffff6b8b65eb94c241e02a5","patch":"@@ -0,0 +1,68 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.embed;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.Embeddable;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.OneToMany;\r\n+\r\n+@Embeddable \r\n+public class Embed_ToMany {\r\n+    protected String name1;\r\n+    protected String name2;\r\n+    protected String name3;\r\n+    \r\n+    @OneToMany(fetch=FetchType.EAGER)\r\n+    public List<EntityB1> bs = new ArrayList<EntityB1>();\r\n+    \r\n+    public String getName1() {\r\n+        return name1;\r\n+    }\r\n+    \r\n+    public void setName1(String name1) {\r\n+        this.name1 = name1;\r\n+    }\r\n+    \r\n+    public String getName2() {\r\n+        return name2;\r\n+    }\r\n+    \r\n+    public void setName2(String name2) {\r\n+        this.name2 = name2;\r\n+    }\r\n+    \r\n+    public String getName3() {\r\n+        return name3;\r\n+    }\r\n+    \r\n+    public void setName3(String name3) {\r\n+        this.name3 = name3;\r\n+    }\r\n+    \r\n+    public List<EntityB1> getEntityBs() {\r\n+        return bs;\r\n+    }\r\n+ \r\n+    public void addEntityB(EntityB1 b) {\r\n+        bs.add(b);\r\n+    }\r\n+}\r"},{"sha":"bd3fb07b735f63e1cce10b00e5c7f2ad9d60157d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Embed_ToMany.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/55b1fa6cd377b1e15ffff6b8b65eb94c241e02a5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Embed_ToMany.java","raw_url":"https://github.com/apache/openjpa/raw/55b1fa6cd377b1e15ffff6b8b65eb94c241e02a5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Embed_ToMany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Embed_ToMany.java?ref=55b1fa6cd377b1e15ffff6b8b65eb94c241e02a5","patch":"@@ -0,0 +1,75 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.embed;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Embedded;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.Id;\r\n+\r\n+@Entity\r\n+public class EntityA_Embed_Embed_ToMany implements Serializable {\r\n+    @Id\r\n+    Integer id;\r\n+\r\n+    @Column(length = 30)\r\n+    String name;\r\n+\r\n+    @Basic(fetch = FetchType.LAZY)\r\n+    int age;\r\n+\r\n+    @Embedded\r\n+    protected Embed_Embed_ToMany embed;\r\n+\r\n+    public int getAge() {\r\n+        return age;\r\n+    }\r\n+\r\n+    public void setAge(int age) {\r\n+        this.age = age;\r\n+    }\r\n+\r\n+    public Integer getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(Integer id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public Embed_Embed_ToMany getEmbed() {\r\n+        return embed;\r\n+    }\r\n+\r\n+    public void setEmbed(Embed_Embed_ToMany embed) {\r\n+        this.embed = embed;\r\n+    }\r\n+}\r"},{"sha":"273d25b75813b1659ff6c3a3482fdb98d97c4bfe","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityB1.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/55b1fa6cd377b1e15ffff6b8b65eb94c241e02a5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityB1.java","raw_url":"https://github.com/apache/openjpa/raw/55b1fa6cd377b1e15ffff6b8b65eb94c241e02a5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityB1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityB1.java?ref=55b1fa6cd377b1e15ffff6b8b65eb94c241e02a5","patch":"@@ -0,0 +1,51 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.embed;\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+\r\n+@Entity\r\n+public class EntityB1 implements Serializable {\r\n+\r\n+    @Id\r\n+    int id;\r\n+\r\n+    @Column(length=30)\r\n+    String name;\r\n+\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+}\r\n+\r"},{"sha":"d2f2c4591f3769ef5e3c75422d85c88eac99e0d1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","status":"added","additions":158,"deletions":0,"changes":158,"blob_url":"https://github.com/apache/openjpa/blob/55b1fa6cd377b1e15ffff6b8b65eb94c241e02a5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","raw_url":"https://github.com/apache/openjpa/raw/55b1fa6cd377b1e15ffff6b8b65eb94c241e02a5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java?ref=55b1fa6cd377b1e15ffff6b8b65eb94c241e02a5","patch":"@@ -0,0 +1,158 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.embed;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityTransaction;\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+public class TestEmbeddable extends SingleEMFTestCase {\r\n+    public int ID = 1;\r\n+\r\n+    public void setUp() {\r\n+        setUp(Embed_Embed_ToMany.class, Embed_ToMany.class, \r\n+            EntityA_Embed_Embed_ToMany.class, EntityB1.class, \r\n+            CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testEntityA_Embed_Embed_ToMany() {\r\n+        createEntityA_Embed_Embed_ToMany();\r\n+        queryEntityA_Embed_Embed_ToMany();\r\n+        findEntityA_Embed_Embed_ToMany();\r\n+    }\r\n+\r\n+    public Embed_ToMany createEmbed_ToMany(EntityManager em, int id) {\r\n+        Embed_ToMany embed = new Embed_ToMany();\r\n+        embed.setName1(\"name1\");\r\n+        embed.setName2(\"name2\");\r\n+        embed.setName3(\"name3\");\r\n+        for (int i = 0; i < 1; i++) {\r\n+            EntityB1 b = new EntityB1();\r\n+            b.setId(id + i);\r\n+            b.setName(\"b\" + id + i);\r\n+            embed.addEntityB(b);\r\n+            em.persist(b);\r\n+        }\r\n+        return embed;\r\n+    }\r\n+\r\n+   /*\r\n+     * Create EntityA_Embed_Embed_ToMany\r\n+     */\r\n+    public void createEntityA_Embed_Embed_ToMany() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        EntityTransaction tran = em.getTransaction();\r\n+        createEntityA_Embed_Embed_ToMany(em, ID);\r\n+        tran.begin();\r\n+        em.flush();\r\n+        tran.commit();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void createEntityA_Embed_Embed_ToMany(EntityManager em, int id) {\r\n+        EntityA_Embed_Embed_ToMany a = new EntityA_Embed_Embed_ToMany();\r\n+        a.setId(id);\r\n+        a.setName(\"a\" + id);\r\n+        a.setAge(id);\r\n+        Embed_Embed_ToMany embed = createEmbed_Embed_ToMany(em, id);\r\n+        a.setEmbed(embed);\r\n+        em.persist(a);\r\n+    }\r\n+\r\n+    public Embed_Embed_ToMany createEmbed_Embed_ToMany(EntityManager em, int id) {\r\n+        Embed_Embed_ToMany embed = new Embed_Embed_ToMany();\r\n+        embed.setIntVal1(1);\r\n+        embed.setIntVal2(2);\r\n+        embed.setIntVal3(3);\r\n+        Embed_ToMany embed_ToMany = createEmbed_ToMany(em, id);\r\n+        embed.setEmbed(embed_ToMany);\r\n+        return embed;\r\n+    }\r\n+    \r\n+    /*\r\n+     * Find EntityA_Embed_Embed_ToMany\r\n+     */\r\n+    public void findEntityA_Embed_Embed_ToMany() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        EntityA_Embed_Embed_ToMany a = em.find(EntityA_Embed_Embed_ToMany.class, ID);\r\n+        checkEntityA_Embed_Embed_ToMany(a);\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void checkEmbed_ToMany(Embed_ToMany embed) {\r\n+        String name1 = embed.getName1();\r\n+        String name2 = embed.getName2();\r\n+        String name3 = embed.getName3();\r\n+        assertEquals(\"name1\", name1);\r\n+        assertEquals(\"name2\", name2);\r\n+        assertEquals(\"name3\", name3);\r\n+        List<EntityB1> bs = embed.getEntityBs();\r\n+        for (EntityB1 b : bs) {\r\n+            assertEquals(1, b.getId());\r\n+            assertEquals(\"b\" + b.getId() + \"0\", b.getName());\r\n+        }\r\n+    }\r\n+\r\n+    /*\r\n+     * check EntityA_Embed_Embed_ToMany\r\n+     */\r\n+    public void checkEntityA_Embed_Embed_ToMany(EntityA_Embed_Embed_ToMany a) {\r\n+        int id = a.getId();\r\n+        String name = a.getName();\r\n+        int age = a.getAge();\r\n+        assertEquals(1, id);\r\n+        assertEquals(\"a\" + id ,name);\r\n+        assertEquals(1, age);\r\n+        Embed_Embed_ToMany embed = a.getEmbed();\r\n+        checkEmbed_Embed_ToMany(embed);\r\n+    }\r\n+    \r\n+    public void checkEmbed_Embed_ToMany(Embed_Embed_ToMany embed) {\r\n+        int intVal1 = embed.getIntVal1();\r\n+        int intVal2 = embed.getIntVal2();\r\n+        int intVal3 = embed.getIntVal3();\r\n+        assertEquals(1, intVal1);\r\n+        assertEquals(2, intVal2);\r\n+        assertEquals(3, intVal3);\r\n+        Embed_ToMany embed1 = embed.getEmbed();\r\n+        checkEmbed_ToMany(embed1);\r\n+    }\r\n+    \r\n+    /*\r\n+     * Query EntityA_Embed_Embed_ToMany\r\n+     */\r\n+    public void queryEntityA_Embed_Embed_ToMany() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        EntityTransaction tran = em.getTransaction();\r\n+        tran.begin();\r\n+        Query q = em.createQuery(\"select a from EntityA_Embed_Embed_ToMany a\");\r\n+        List<EntityA_Embed_Embed_ToMany> as = q.getResultList();\r\n+        for (EntityA_Embed_Embed_ToMany a : as) {\r\n+            checkEntityA_Embed_Embed_ToMany(a);\r\n+        }\r\n+        tran.commit();\r\n+        em.close();\r\n+    }\r\n+\r\n+\r\n+}\r"}]}

