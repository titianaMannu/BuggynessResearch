{"sha":"55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","node_id":"MDY6Q29tbWl0MjA2MzY0OjU1YmY4NmE0YzhkNGU3YmVmOWFhN2I2MTFhOTEzMDAxMWZhMjdjMzQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-12T03:31:11Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-12T03:31:11Z"},"message":"OPENJPA-1456 Replace StringBuffer usage with StringBuilder for minor performance/scalability improvement\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@898168 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a8c344194e952a68e3ddd0119b84c3a6c62402ff","url":"https://api.github.com/repos/apache/openjpa/git/trees/a8c344194e952a68e3ddd0119b84c3a6c62402ff"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","html_url":"https://github.com/apache/openjpa/commit/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","comments_url":"https://api.github.com/repos/apache/openjpa/commits/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/comments","author":null,"committer":null,"parents":[{"sha":"e53378bd2697a023a2be5d4c9191fa80c3411800","url":"https://api.github.com/repos/apache/openjpa/commits/e53378bd2697a023a2be5d4c9191fa80c3411800","html_url":"https://github.com/apache/openjpa/commit/e53378bd2697a023a2be5d4c9191fa80c3411800"}],"stats":{"total":306,"additions":154,"deletions":152},"files":[{"sha":"716961df71f471aa5176e1c95ef56ae34e4470b1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -782,7 +782,7 @@ private Object handleConcatVal(Object value, Object ob, Object[] params,\n \n         Val value2 = concatVal.getVal2();\n         Object val2 = getValue(value2, ob, params, sm);\n-        return new StringBuffer(100).append(val1).append(val2).toString();\n+        return new StringBuilder(100).append(val1).append(val2).toString();\n     }\n \n     private Object handleSubstringVal(Object value, Object ob, Object[] params,"},{"sha":"896944d5642966937bff7262a15a2b40de774c3f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -373,7 +373,7 @@ public static String substituteParams(String sql, List<Integer> paramOrder)\n             tok.wordChars('0', '9');\n             tok.wordChars('?', '?');\n \n-            StringBuffer buf = new StringBuffer(sql.length());\n+            StringBuilder buf = new StringBuilder(sql.length());\n             for (int ttype; (ttype = tok.nextToken()) !=\n                     StreamTokenizer.TT_EOF;) {\n                 switch (ttype) {"},{"sha":"adb7a3019b30c7a238861e654a57a76538041760","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -446,7 +446,7 @@ public Value getMapValue(Value map, Value arg) {\n     private Value getLiteralRawString(Value val) {\n         if (val instanceof Lit) {\n             Lit lit = (Lit) val;\n-            StringBuffer value = new StringBuffer();\n+            StringBuilder value = new StringBuilder();\n             int pType = lit.getParseType(); \n             if (pType == Literal.TYPE_SQ_STRING ||\n                 pType == Literal.TYPE_STRING)"},{"sha":"d2184668c0666ef6c9e07f5bc2265f2959330af1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MatchesExpression.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MatchesExpression.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MatchesExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MatchesExpression.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -128,7 +128,7 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n     private static String replaceEscape(String str, String from, String to,\n         String escape) {\n         String[] parts = Strings.split(str, from, Integer.MAX_VALUE);\n-        StringBuffer repbuf = new StringBuffer();\n+        StringBuilder repbuf = new StringBuilder();\n         for (int i = 0; i < parts.length; i++) {\n             if (i > 0) {\n                 // if the previous part ended with an escape character, then"},{"sha":"578b3df43d022e5e7eb4714029755c7f98cba625","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -216,7 +216,7 @@ public boolean isXPath() {\n     }\n     \n     public String getXPath() {\n-        StringBuffer xpath = new StringBuffer();\n+        StringBuilder xpath = new StringBuilder();\n         Action action;\n         Iterator itr = _actions.iterator();\n         \n@@ -248,7 +248,7 @@ public String getPCPathString() {\n         if (_actions == null)\n             return (_varName == null) ? \"\" : _varName + \".\";\n \n-        StringBuffer path = new StringBuffer();\n+        StringBuilder path = new StringBuilder();\n         Action action;\n         for (Iterator itr = _actions.iterator(); itr.hasNext();) {\n             action = (Action) itr.next();"},{"sha":"4e47ed3db28df437467e2645c0ca5757d43f17ff","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/TypeLit.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/TypeLit.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/TypeLit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/TypeLit.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -114,7 +114,7 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n     }\n \n     private String getDiscriminator(LitExpState lstate) {\n-        StringBuffer disc = new StringBuffer(lstate.discValue.toString());\n+        StringBuilder disc = new StringBuilder(lstate.discValue.toString());\n         switch(lstate.disc.getJavaType()) {\n         case JavaTypes.INT:\n             return disc.toString();"},{"sha":"50212102d5b00e9099d832c8a66431ea1df1236f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -1474,7 +1474,7 @@ public FieldMapping newFieldMapping(String name, Class type, Column col,\n      * name, using the default package.\n      */\n     private String getClassName(Table table) {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         if (getPackageName() != null)\n             buf.append(getPackageName()).append(\".\");\n \n@@ -1514,7 +1514,7 @@ public String getFieldName(String name, ClassMapping dec) {\n         else\n             name = Character.toLowerCase(name.charAt(0)) + name.substring(1);\n \n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         String[] subs = Strings.split(name, \"_\", 0);\n         for (int i = 0; i < subs.length; i++) {\n             if (i > 0)\n@@ -1571,7 +1571,7 @@ static String replaceInvalidCharacters(String str) {\n         if (StringUtils.isEmpty(str))\n             return str;\n \n-        StringBuffer buf = new StringBuffer(str);\n+        StringBuilder buf = new StringBuilder(str);\n         char c;\n         for (int i = 0; i < buf.length(); i++) {\n             c = buf.charAt(i);"},{"sha":"409bc0866acbb685ff43b92cba14105ed034cc4b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/SequenceMapping.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/SequenceMapping.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/SequenceMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/SequenceMapping.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -161,7 +161,7 @@ protected PluginValue newPluginValue(String property) {\n     }\n \n     @Override\n-    protected void addStandardProperties(StringBuffer props) {\n+    protected void addStandardProperties(StringBuilder props) {\n         super.addStandardProperties(props);\n         // Quotes are conditionally added to the following because the props\n         // are eventually passed to the Configurations.parseProperties()"},{"sha":"1d1321ff22437cb15322e8c4786957607b5c602c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StateComparisonVersionStrategy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StateComparisonVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StateComparisonVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StateComparisonVersionStrategy.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -240,7 +240,7 @@ private CustomUpdate(Column[] cols) {\n          */\n         public String getSQL() {\n             Column[] cols = getTable().getColumns();\n-            StringBuffer buf = new StringBuffer();\n+            StringBuilder buf = new StringBuilder();\n             boolean hasWhere = false;\n             Object val;\n             for (int i = 0; i < cols.length; i++) {"},{"sha":"bde5b898d12c437f194c5faaea37c2327f620c29","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -499,7 +499,7 @@ public void load(final OpenJPAStateManager sm, final JDBCStore store,\n                 // we know we don't need a union\n                 Select sel = store.getSQLFactory().newSelect();\n                 sel.setAggregate(true);\n-                StringBuffer sql = new StringBuffer();\n+                StringBuilder sql = new StringBuilder();\n                 sql.append(\"MAX(\").\n                     append(sel.getColumnAlias(field.getOrderColumn())).\n                     append(\")\");"},{"sha":"11fee31edb13ab2ead582da2973a3c6998632fa1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -668,7 +668,7 @@ public String toString() {\n      * Useful for debugging.\n      */\n     public String getDescription() {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"Full Name: \").append(getFullName()).append(\"\\n\");\n         buf.append(\"Type: \").append(Schemas.getJDBCName(getType())).\n             append(\"\\n\");"},{"sha":"b168cfaede41c738483443f51f92e682a3e642e8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -231,7 +231,7 @@ protected void appendSelect(SQLBuffer selectSQL, Object alias, Select sel,\n     }\n \n     protected String getSequencesSQL(String schemaName, String sequenceName) {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(sequenceSQL);\n         if (schemaName != null || sequenceName != null)\n             buf.append(\" WHERE \");\n@@ -381,7 +381,7 @@ protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n         int isolationLevel;\n         // For db2UDBV81OrEarlier and db2ISeriesV5R3OrEarlier:\n         // \"optimize for\" clause appears before \"for update\" clause.\n-        StringBuffer forUpdateString = new StringBuffer(getOptimizeClause(sel));\n+        StringBuilder forUpdateString = new StringBuilder(getOptimizeClause(sel));\n         // Determine the isolationLevel; the fetch\n         // configuration data overrides the persistence.xml value\n         if (fetch != null && fetch.getIsolation() != -1)\n@@ -534,7 +534,7 @@ private void getProductVersionMajorMinor() {\n \n     protected String getOptimizeClause(Select sel) {\n         if (sel != null && sel.getExpectedResultCount() > 0) {\n-            StringBuffer buf = new StringBuffer();\n+            StringBuilder buf = new StringBuilder();\n             buf.append(\" \").append(optimizeClause).append(\" \")\n                 .append(String.valueOf(sel.getExpectedResultCount()))\n                 .append(\" \").append(rowClause);\n@@ -569,7 +569,7 @@ private String appendExtendedExceptionMsg(String msg, SQLException sqle){\n             getMethod(\"getSqlWarn\", null);\n             Method  getSqlErrdMethd = sqlca.getClass().\n             getMethod(\"getSqlErrd\", null);\n-            StringBuffer errdStr = new StringBuffer();\n+            StringBuilder errdStr = new StringBuilder();\n \n             int[] errds = (int[]) getSqlErrdMethd.invoke(sqlca, new Object[]{});\n             for (int i = 0; i < errds.length; i++)"},{"sha":"bc4523a5cb33d9da56cfd206079788779652c997","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":15,"deletions":13,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -1747,7 +1747,7 @@ protected String appendSize(Column col, String typeName) {\n \n         String size = null;\n         if (col.getSize() > 0) {\n-            StringBuffer buf = new StringBuffer(10);\n+            StringBuilder buf = new StringBuilder(10);\n             buf.append(\"(\").append(col.getSize());\n             if (col.getDecimalDigits() > 0)\n                 buf.append(\", \").append(col.getDecimalDigits());\n@@ -3176,7 +3176,7 @@ protected static String shorten(String name, int targetLength) {\n         if (name == null || name.length() <= targetLength)\n             return name;\n \n-        StringBuffer nm = new StringBuffer(name);\n+        StringBuilder nm = new StringBuilder(name);\n         while (nm.length() > targetLength) {\n             if (!stripVowel(nm)) {\n                 // cut out the middle char\n@@ -3191,7 +3191,8 @@ protected static String shorten(String name, int targetLength) {\n      *\n      * @return true if any vowels have been removed\n      */\n-    private static boolean stripVowel(StringBuffer name) {\n+    //private static boolean stripVowel(StringBuffer name) {\n+    private static boolean stripVowel(StringBuilder name) {\n         if (name == null || name.length() == 0)\n             return false;\n \n@@ -3336,7 +3337,7 @@ private String addCharsToEnd(String name,\n      * with columns. Indexes and constraints will be created separately.\n      */\n     public String[] getCreateTableSQL(Table table) {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         String tableName = checkNameLength(getFullName(table, false), \n                 maxTableNameLength, \"long-table-name\");\n         buf.append(\"CREATE TABLE \").append(tableName);\n@@ -3350,7 +3351,7 @@ private String addCharsToEnd(String name,\n \n         // do this before getting the columns so we know how to handle\n         // the last comma\n-        StringBuffer endBuf = new StringBuffer();\n+        StringBuilder endBuf = new StringBuilder();\n         PrimaryKey pk = table.getPrimaryKey();\n         String pkStr;\n         if (pk != null) {\n@@ -3390,7 +3391,8 @@ public int getBatchFetchSize(int batchFetchSize) {\n         return batchFetchSize;\n     }\n \n-    protected StringBuffer comment(StringBuffer buf, String comment) {\n+    //protected StringBuffer comment(StringBuffer buf, String comment) {\n+    protected StringBuilder comment(StringBuilder buf, String comment) {\n         return buf.append(\"-- \").append(comment);\n     }\n \n@@ -3414,7 +3416,7 @@ protected StringBuffer comment(StringBuffer buf, String comment) {\n         if (nextSequenceQuery == null)\n             return null;\n \n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"CREATE SEQUENCE \");\n         String seqName = checkNameLength(getFullName(seq), maxTableNameLength, \n                 \"long-seq-name\");\n@@ -3440,7 +3442,7 @@ protected StringBuffer comment(StringBuffer buf, String comment) {\n      * (&lt;col list&gt;)</code> by default.\n      */\n     public String[] getCreateIndexSQL(Index index) {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"CREATE \");\n         if (index.isUnique())\n             buf.append(\"UNIQUE \");\n@@ -3562,7 +3564,7 @@ protected StringBuffer comment(StringBuffer buf, String comment) {\n      * {@link #getAddColumnSQL}.\n      */\n     protected String getDeclareColumnSQL(Column col, boolean alter) {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         String columnName = checkNameLength(col.getName(), maxColumnNameLength, \n                 \"long-column-name\");\n         buf.append(columnName).append(\" \");\n@@ -3601,7 +3603,7 @@ protected String getPrimaryKeyConstraintSQL(PrimaryKey pk) {\n         if (name != null && reservedWordSet.contains(name.toUpperCase()))\n             name = null;\n \n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         if (name != null && CONS_NAME_BEFORE.equals(constraintNameMode))\n             buf.append(\"CONSTRAINT \").append(name).append(\" \");\n         buf.append(\"PRIMARY KEY \");\n@@ -3649,7 +3651,7 @@ protected String getForeignKeyConstraintSQL(ForeignKey fk) {\n         String delAction = getActionName(delActionId);\n         String upAction = getActionName(fk.getUpdateAction());\n \n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         if (fk.getName() != null\n             && CONS_NAME_BEFORE.equals(constraintNameMode))\n             buf.append(\"CONSTRAINT \").append(fk.getName()).append(\" \");\n@@ -3754,7 +3756,7 @@ protected String getUniqueConstraintSQL(Unique unq) {\n         if (!supportsUniqueConstraints\n             || (unq.isDeferred() && !supportsDeferredUniqueConstraints()))\n             return null;\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         if (unq.getName() != null\n             && CONS_NAME_BEFORE.equals(constraintNameMode))\n             buf.append(\"CONSTRAINT \").append(checkNameLength(unq.getName(), \n@@ -4378,7 +4380,7 @@ protected String getGeneratedKeySequenceName(Column col) {\n             // this assumes that tname is longer than extraChars\n             tname = tname.substring(0, tname.length() - extraChars);\n         }\n-        StringBuffer buf = new StringBuffer(max);\n+        StringBuilder buf = new StringBuilder(max);\n         buf.append(tname).append(\"_\").append(cname).append(\"_SEQ\");\n         return buf.toString();\n     }"},{"sha":"a5e0f8fc96b9b13bf8e2de6079554c507270aadd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -296,7 +296,7 @@ private static String dictionaryClassForString(String prod\n     public static String toString(DatabaseMetaData meta)\n         throws SQLException {\n         String lineSep = J2DoPrivHelper.getLineSeparator();\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder(4096);\n         try {\n             buf.append(\"catalogSeparator: \")\n                 .append(meta.getCatalogSeparator())"},{"sha":"df73667749c564ede5c0e44fe4dcaa2f5f040365","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -118,7 +118,7 @@ public int getPreferredType(int type) {\n     }\n \n     public String[] getCreateTableSQL(Table table) {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"CREATE TABLE \").append(getFullName(table, false))\n             .append(\" (\");\n \n@@ -161,7 +161,7 @@ public boolean isSystemIndex(String name, Table table) {\n     }\n \n     protected String getSequencesSQL(String schemaName, String sequenceName) {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"SELECT SEQUENCE_SCHEMA, SEQUENCE_NAME FROM \")\n             .append(\"INFORMATION_SCHEMA.SEQUENCES\");\n         if (schemaName != null || sequenceName != null)"},{"sha":"85fdf00cf671259e6e45e31cba5046c978f6b0bb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -134,7 +134,7 @@ public int getPreferredType(int type) {\n     }\n \n     public String[] getCreateTableSQL(Table table) {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"CREATE \");\n         if (cacheTables)\n             buf.append(\"CACHED \");\n@@ -179,7 +179,7 @@ public boolean isSystemIndex(String name, Table table) {\n     }\n \n     protected String getSequencesSQL(String schemaName, String sequenceName) {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"SELECT SEQUENCE_SCHEMA, SEQUENCE_NAME FROM \").\n             append(\"INFORMATION_SCHEMA.SYSTEM_SEQUENCES\");\n         if (schemaName != null || sequenceName != null)"},{"sha":"6d9530d597f8948b0a2a8d3897e109de489fc5b1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/IngresDictionary.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/IngresDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/IngresDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/IngresDictionary.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -210,7 +210,7 @@ protected void appendSelectRange(SQLBuffer buf, long start, long end,\n      */\n     @Override\n     protected String getSequencesSQL(String schemaName, String sequenceName) {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(sequenceSQL);\n         if (schemaName != null || sequenceName != null)\n             buf.append(\" WHERE \");"},{"sha":"e603fcba3672b16f17c2e7a6bc8e04328d6a9776","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/JoinSet.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/JoinSet.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/JoinSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/JoinSet.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -345,7 +345,7 @@ public int hashCode() {\n     }\n \n     public String toString() {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"[\");\n         for (Iterator itr = iterator(); itr.hasNext();) {\n             buf.append(\"<\").append(itr.next()).append(\">\");"},{"sha":"5d67bf7457f4ed48943c6b588e7f93ee1c17dbcb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -288,7 +288,7 @@ public Connection decorate(Connection conn)  throws SQLException {\n         if (!optimizeMultiTableDeletes)\n             return super.getDeleteTableContentsSQL(tables,conn);\n         else {\n-            StringBuffer buf = new StringBuffer(tables.length * 8);\n+            StringBuilder buf = new StringBuilder(tables.length * 8);\n             buf.append(\"DELETE FROM \");\n             for (int i = 0; i < tables.length; i++) {\n                 buf.append(tables[i].getFullName());"},{"sha":"c5c6ee80457c7c1b90a36b3d1cbaaf3d6b1f5482","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -668,7 +668,7 @@ else if (\"NCHAR\".equalsIgnoreCase(cols[i].getTypeName()))\n     public PrimaryKey[] getPrimaryKeys(DatabaseMetaData meta,\n         String catalog, String schemaName, String tableName, Connection conn)\n         throws SQLException {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"SELECT t0.OWNER AS TABLE_SCHEM, \").\n             append(\"t0.TABLE_NAME AS TABLE_NAME, \").\n             append(\"t0.COLUMN_NAME AS COLUMN_NAME, \").\n@@ -714,7 +714,7 @@ else if (\"NCHAR\".equalsIgnoreCase(cols[i].getTypeName()))\n         String schemaName, String tableName, boolean unique, boolean approx,\n         Connection conn)\n         throws SQLException {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"SELECT t0.INDEX_OWNER AS TABLE_SCHEM, \").\n             append(\"t0.TABLE_NAME AS TABLE_NAME, \").\n             append(\"DECODE(t1.UNIQUENESS, 'UNIQUE', 0, 'NONUNIQUE', 1) \").\n@@ -760,15 +760,15 @@ else if (\"NCHAR\".equalsIgnoreCase(cols[i].getTypeName()))\n     public ForeignKey[] getImportedKeys(DatabaseMetaData meta, String catalog,\n         String schemaName, String tableName, Connection conn, boolean partialKeys)\n         throws SQLException {\n-        StringBuffer delAction = new StringBuffer(\"DECODE(t1.DELETE_RULE\").\n+        StringBuilder delAction = new StringBuilder(\"DECODE(t1.DELETE_RULE\").\n             append(\", 'NO ACTION', \").append(meta.importedKeyNoAction).\n             append(\", 'RESTRICT', \").append(meta.importedKeyRestrict).\n             append(\", 'CASCADE', \").append(meta.importedKeyCascade).\n             append(\", 'SET NULL', \").append(meta.importedKeySetNull).\n             append(\", 'SET DEFAULT', \").append(meta.importedKeySetDefault).\n             append(\")\");\n \n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"SELECT t2.OWNER AS PKTABLE_SCHEM, \").\n             append(\"t2.TABLE_NAME AS PKTABLE_NAME, \").\n             append(\"t2.COLUMN_NAME AS PKCOLUMN_NAME, \").\n@@ -902,7 +902,7 @@ public int getJDBCType(int metaTypeCode, boolean lob, int precis,\n \n \n     protected String getSequencesSQL(String schemaName, String sequenceName) {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"SELECT SEQUENCE_OWNER AS SEQUENCE_SCHEMA, \").\n             append(\"SEQUENCE_NAME FROM ALL_SEQUENCES\");\n         if (schemaName != null || sequenceName != null)"},{"sha":"21a29d507b9e2d3247ac300776b462fa747b0e8f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -747,7 +747,7 @@ protected String generateSQL(DBDictionary dict) {\n      * Return the SQL for a prepared statement update on this row.\n      */\n     private String getUpdateSQL(DBDictionary dict) {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"UPDATE \").append(dict.getFullName(getTable(), false)).\n             append(\" SET \");\n \n@@ -774,8 +774,8 @@ private String getUpdateSQL(DBDictionary dict) {\n      * Return the SQL for a prepared statement insert on this row.\n      */\n     private String getInsertSQL(DBDictionary dict) {\n-        StringBuffer buf = new StringBuffer();\n-        StringBuffer vals = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n+        StringBuilder vals = new StringBuilder();\n         buf.append(\"INSERT INTO \").\n             append(dict.getFullName(getTable(), false)).append(\" (\");\n \n@@ -804,7 +804,7 @@ private String getInsertSQL(DBDictionary dict) {\n      * Return the SQL for a prepared statement delete on this row.\n      */\n     private String getDeleteSQL(DBDictionary dict) {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"DELETE FROM \").\n             append(dict.getFullName(getTable(), false));\n         appendWhere(buf, dict);\n@@ -814,7 +814,7 @@ private String getDeleteSQL(DBDictionary dict) {\n     /**\n      * Appends the where clause onto the given sql buffer.\n      */\n-    private void appendWhere(StringBuffer buf, DBDictionary dict) {\n+    private void appendWhere(StringBuilder buf, DBDictionary dict) {\n         boolean hasWhere = false;\n         for (int i = 0; i < _cols.length; i++) {\n             if (_vals[getWhereIndex(_cols[i])] == null)"},{"sha":"28045b2c56e8d7ee75d949e37d9f3e4911b40798","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -715,7 +715,7 @@ public String getColumnAlias(Column col, Object path) {\n                 else if (join.getTable2() == table)\n                     tableAlias = join.getAlias2();\n                 if (tableAlias != null)\n-                    return new StringBuffer(tableAlias).append(\".\").\n+                    return new StringBuilder(tableAlias).append(\".\").\n                         append(columnName).toString();\n             }\n         }\n@@ -2147,7 +2147,7 @@ public boolean isDirty() {\n         return false;\n     }\n \n-    public StringBuffer path() {\n+    public StringBuilder path() {\n         return null;\n     }\n \n@@ -2339,7 +2339,7 @@ public Joins newJoins() {\n                 return this;\n \n             PathJoinsImpl pj = new PathJoinsImpl();\n-            pj.path = new StringBuffer(pre.path().toString());\n+            pj.path = new StringBuilder(pre.path().toString());\n             return pj;\n         }\n \n@@ -2500,7 +2500,7 @@ public boolean isDirty() {\n             return false;\n         }\n \n-        public StringBuffer path() {\n+        public StringBuilder path() {\n             return null;\n         }\n \n@@ -2577,7 +2577,7 @@ public void moveJoinsToParent() {\n     private static class PathJoinsImpl\n         implements PathJoins {\n \n-        protected StringBuffer path = null;\n+        protected StringBuilder path = null;\n         protected String var = null;\n         protected String correlatedVar = null;\n         protected Context context = null;\n@@ -2599,7 +2599,7 @@ public boolean isDirty() {\n             return var != null || path != null;\n         }\n \n-        public StringBuffer path() {\n+        public StringBuilder path() {\n             return path;\n         }\n \n@@ -2683,7 +2683,7 @@ public Joins outerJoinRelation(String name, ForeignKey fk,\n         protected void append(String str) {\n             if (str != null) {\n                 if (path == null)\n-                    path = new StringBuffer(str);\n+                    path = new StringBuilder(str);\n                 else\n                     path.append('.').append(str);\n             }\n@@ -2971,7 +2971,7 @@ public SelectJoins clone(SelectImpl sel) {\n             SelectJoins sj = new SelectJoins(sel);\n             sj.var = var;\n             if (path != null)\n-                sj.path = new StringBuffer(path.toString());\n+                sj.path = new StringBuilder(path.toString());\n             if (_joins != null && !_joins.isEmpty())\n                 sj._joins = new JoinSet(_joins);\n             sj._outer = _outer;\n@@ -3221,7 +3221,7 @@ public void moveJoinsToParent() {\n     /**\n      * Return the relation path traversed by these joins, or null if none.\n      */\n-    public StringBuffer path();\n+    public StringBuilder path();\n \n     /**\n      * Return the set of {@link Join} elements, or null if none."},{"sha":"2a1e79136700848c5374122059f54bde2adb36b3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SybaseDictionary.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -194,7 +194,7 @@ public void setBigInteger(PreparedStatement stmnt, int idx, BigInteger val,\n         if (!createIdentityColumn)\n             return super.getCreateTableSQL(table);\n \n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"CREATE TABLE \").append(getFullName(table, false)).\n             append(\" (\");\n \n@@ -231,7 +231,7 @@ public void setBigInteger(PreparedStatement stmnt, int idx, BigInteger val,\n     }\n \n     protected String getDeclareColumnSQL(Column col, boolean alter) {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(col).append(\" \");\n         buf.append(getTypeName(col));\n "},{"sha":"4f83bb7d7560724fd60c1ce3334bfb46d554030f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -99,7 +99,7 @@ public static void main(String [] args) {\n     }\n \n     public String toString() {\n-        StringBuffer buf = new StringBuffer(80 * 30);\n+        StringBuilder buf = new StringBuilder(80 * 40);\n         appendOpenJPABanner(buf);\n         buf.append(\"\\n\");\n \n@@ -124,7 +124,7 @@ public String toString() {\n         return buf.toString();\n     }\n \n-    public void appendOpenJPABanner(StringBuffer buf) {\n+    public void appendOpenJPABanner(StringBuilder buf) {\n         buf.append(VENDOR_NAME).append(\" \");\n         buf.append(VERSION_NUMBER);\n         buf.append(\"\\n\");\n@@ -134,7 +134,7 @@ public void appendOpenJPABanner(StringBuffer buf) {\n         buf.append(\"\\n\");\n     }\n \n-    private StringBuffer appendProperty(String prop, StringBuffer buf) {\n+    private StringBuilder appendProperty(String prop, StringBuilder buf) {\n         return buf.append(prop).append(\": \").append(\n             AccessController.doPrivileged(J2DoPrivHelper\n                 .getPropertyAction(prop)));"},{"sha":"c0eac1e0cba3874b78ae5403eabbaa5558b83e3c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -429,7 +429,7 @@ public int hashCode() {\n     }\n \n     public String toString() {\n-        StringBuffer buf = new StringBuffer(255);\n+        StringBuilder buf = new StringBuilder(1024);\n         buf.append(super.toString()).\n             append(\"[query:[\").append(_query).append(\"]\").\n             append(\",access path:\").append(_accessPathClassNames)."},{"sha":"f798f6e187c04c2e53526e6fc36b9379cf651384","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -1100,7 +1100,7 @@ private String getToStringByteArrayCode() {\n             append(\"b == null\").closeParen().endl();\n         code.tab(3).append(\"return \\\"null\\\";\").endl(2);\n \n-        code.tab(2).append(\"StringBuffer r = new StringBuffer\").\n+        code.tab(2).append(\"StringBuilder r = new StringBuilder\").\n             openParen(true).append(\"b.length * 2\").closeParen().\n             append(\";\").endl();\n         code.tab(2).append(\"for\").openParen(true)."},{"sha":"60969e6a5744df63ad1b0f104e3ac9aea9ed4d51","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -888,7 +888,7 @@ private void processViolations() {\n             return;\n \n         String sep = J2DoPrivHelper.getLineSeparator();\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         for (Iterator itr = _violations.iterator(); itr.hasNext();) {\n             buf.append(itr.next());\n             if (itr.hasNext())"},{"sha":"a099eae6e8fab327b80cb1cd8c8ae6ec6b6b1533","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -623,7 +623,7 @@ public void makeReadOnly() {\n             if (log.isTraceEnabled()) {\n                 Map<String,Object> props = _conf.toProperties(true);\n                 String lineSep = J2DoPrivHelper.getLineSeparator();\n-                StringBuffer buf = new StringBuffer();\n+                StringBuilder buf = new StringBuilder();\n                 Map.Entry<?,?> entry;\n                 for (Iterator<Map.Entry<String,Object>> itr = props.entrySet().iterator(); itr.hasNext();) {\n                     entry = itr.next();"},{"sha":"f092766fd78331b9c72a3a3d2e27e72a0496defd","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -917,7 +917,7 @@ private String getPathString() {\n         List<FetchConfigurationImpl> path = getPath();\n         if (path.isEmpty())\n             return \"\";\n-        StringBuffer buf = new StringBuffer().append (\": \");\n+        StringBuilder buf = new StringBuilder().append (\": \");\n         for (Iterator<FetchConfigurationImpl> itr = path.iterator(); itr.hasNext();) {\n             buf.append(itr.next().getTraversedFromField());\n             if (itr.hasNext())"},{"sha":"e3861161ac70c0de0b956a8e2dad00722c432b32","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -1772,7 +1772,7 @@ protected void assertParameters(StoreQuery q, StoreQuery.Executor ex, Map params\n \n \n     public String toString() {\n-        StringBuffer buf = new StringBuffer(64);\n+        StringBuilder buf = new StringBuilder(255);\n         buf.append(\"Query: \").append(super.toString());\n         buf.append(\"; candidate class: \").append(_class);\n         buf.append(\"; query: \").append(_query);"},{"sha":"3979035d956e9f4ee4443b207372e8678a951a89","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Concat.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Concat.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Concat.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Concat.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -50,7 +50,7 @@ public void setImplicitType(Class type) {\n     protected Object eval(Object candidate, Object orig,\n         StoreContext ctx, Object[] params) {\n         Object str = _val.eval(candidate, orig, ctx, params);\n-        StringBuffer cat = new StringBuffer(str.toString());\n+        StringBuilder cat = new StringBuilder(str.toString());\n \n         Object arg = _args.eval(candidate, orig, ctx, params);\n         if (arg instanceof Object[]) {"},{"sha":"ba396d660475429afdb26fab150119208aa1fd70","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -327,7 +327,7 @@ private static String assemble(JPQLNode node) {\n      * child, separated by the delimiter.\n      */\n     private static String assemble(JPQLNode node, String delimiter, int last) {\n-        StringBuffer result = new StringBuffer();\n+        StringBuilder result = new StringBuilder();\n         JPQLNode[] parts = node.children;\n         for (int i = 0; parts != null && i < parts.length - last; i++)\n             result.append(result.length() > 0 ? delimiter : \"\")."},{"sha":"95cc81a8ad248ba1000c92ae38c9162a733f7be6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -1207,7 +1207,7 @@ public void setOrders(Order[] orders) {\n      */\n     public String getOrderDeclaration() {\n         if (_orderDec == null && _orders != null) {\n-            StringBuffer buf = new StringBuffer();\n+            StringBuilder buf = new StringBuilder();\n             for (int i = 0; i < _orders.length; i++) {\n                 if (i > 0)\n                     buf.append(\", \");"},{"sha":"f2956c0b7eeb6ca1d72774649250c1834eb7ea35","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -573,7 +573,7 @@ else if ((_sourceMode & MODE_MAPPING) == 0)\n      * Return a string representation of the given mode flags.\n      */\n     private static String toModeString(int mode) {\n-        StringBuffer buf = new StringBuffer(31);\n+        StringBuilder buf = new StringBuilder(31);\n         if ((mode & MODE_META) != 0)\n             buf.append(\"[META]\");\n         if ((mode & MODE_QUERY) != 0)"},{"sha":"a8a26f56d78cc8f81eb4d55535174a5a12f7fd2e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -279,7 +279,7 @@ protected Seq instantiate(ClassLoader envLoader) {\n             Class cls = Class.forName(clsName, true,\n                 AccessController.doPrivileged(\n                     J2DoPrivHelper.getClassLoaderAction(Seq.class)));\n-            StringBuffer props = new StringBuffer();\n+            StringBuilder props = new StringBuilder();\n             if (plugin.getProperties() != null)\n                 props.append(plugin.getProperties());\n             addStandardProperties(props);\n@@ -343,7 +343,7 @@ protected PluginValue newPluginValue(String property) {\n     /**\n      * Add standard properties to the given properties buffer.\n      */\n-    protected void addStandardProperties(StringBuffer props) {\n+    protected void addStandardProperties(StringBuilder props) {\n         appendProperty(props, PROP_SEQUENCE, wrapValue(_sequence));\n         appendProperty(props, PROP_INITIAL_VALUE, _initial);\n         appendProperty(props, PROP_ALLOCATE, _allocate);\n@@ -367,7 +367,7 @@ protected String wrapValue(String value) {\n      * Add a string property to the buffer. Nothing will be added if value\n      * is null or empty string.\n      */\n-    protected void appendProperty(StringBuffer props, String name, String val) {\n+    protected void appendProperty(StringBuilder props, String name, String val) {\n         if (StringUtils.isEmpty(val))\n             return;\n         if (props.length() > 0)\n@@ -378,7 +378,7 @@ protected void appendProperty(StringBuffer props, String name, String val) {\n     /**\n      * Add an int property to the buffer. Nothing will be added if value is -1.\n      */\n-    protected void appendProperty(StringBuffer props, String name, int val) {\n+    protected void appendProperty(StringBuilder props, String name, int val) {\n         if (val == -1)\n             return;\n         if (props.length() > 0)"},{"sha":"384df3099dd514a5233eccaafa0803054fd632b0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Exceptions.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -121,7 +121,7 @@ public static String toString(Object ob) {\n      * Safely stringify the given objects.\n      */\n     public static String toString(Collection failed) {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"[\");\n         for (Iterator itr = failed.iterator(); itr.hasNext();) {\n             buf.append(Exceptions.toString(itr.next()));\n@@ -137,7 +137,7 @@ public static String toString(Collection failed) {\n      */\n     public static String toString(ExceptionInfo e) {\n         int type = e.getType();\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"<\").\n             append(OpenJPAVersion.VERSION_ID).\n             append(' ')."},{"sha":"e67fe41659919597d59b1d49fcfc2bd2762048d3","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -916,7 +916,7 @@ public int hashCode() {\n     public static String toXMLName(String propName) {\n         if (propName == null)\n             return null;\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         char c;\n         for (int i = 0; i < propName.length(); i++) {\n             c = propName.charAt(i);"},{"sha":"fb4d9cd03bf908db1cdbeb7f7116633611bb6db1","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -527,7 +527,7 @@ public static String serializeProperties(Map map) {\n         if (map == null || map.isEmpty())\n             return null;\n \n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         Map.Entry entry;\n         String val;\n         for (Iterator itr = map.entrySet().iterator(); itr.hasNext();) {\n@@ -584,7 +584,7 @@ public static Options parseProperties(String properties) {\n                     val = val.substring(1, val.length() - 1);\n                 else if (val.startsWith(\"\\\"\") || val.startsWith(\"'\")) {\n                     quote = val.charAt(0);\n-                    StringBuffer buf = new StringBuffer(val.substring(1));\n+                    StringBuilder buf = new StringBuilder(val.substring(1));\n                     int quotIdx;\n                     while (++i < props.length) {\n                         buf.append(\",\");"},{"sha":"60df32452819f49e1c7eb49ec4f18325f8a63860","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginListValue.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginListValue.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginListValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginListValue.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -106,7 +106,7 @@ public String getString() {\n         if (_names.length == 0)\n             return null;\n \n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         for (int i = 0; i < _names.length; i++) {\n             if (i > 0)\n                 buf.append(\", \");\n@@ -136,7 +136,7 @@ public void setString(String str) {\n         // split up the string; each element might be a class name, or a\n         // class name with properties settings\n         List<String> plugins = new ArrayList<String>();\n-        StringBuffer plugin = new StringBuffer();\n+        StringBuilder plugin = new StringBuilder();\n         boolean inParen = false;\n         char c;\n         for (int i = 0; i < str.length(); i++) {\n@@ -155,7 +155,7 @@ public void setString(String str) {\n                         plugin.append(c);\n                     else {\n                         plugins.add(plugin.toString());\n-                        plugin = new StringBuffer();\n+                        plugin = new StringBuilder();\n                     }\n                     break;\n                 default:"},{"sha":"61e353b8e83519b190550b08e1ed118d75942cb3","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -266,7 +266,7 @@ public static ConfigurationProvider load(String resource, String anchor,\n             loader = AccessController.doPrivileged(\n                 J2DoPrivHelper.getContextClassLoaderAction());\n         ConfigurationProvider provider = null;\n-        StringBuffer errs = null;\n+        StringBuilder errs = null;\n         // most specific to least\n         Throwable err = null;\n         for (int i = _derivations.length - 1; i >= 0; i--) {\n@@ -276,7 +276,7 @@ public static ConfigurationProvider load(String resource, String anchor,\n                     return provider;\n             } catch (Throwable t) {\n                 err = t;\n-                errs = (errs == null) ? new StringBuffer() : errs.append(\"\\n\");\n+                errs = (errs == null) ? new StringBuilder() : errs.append(\"\\n\");\n                 errs.append(_derivations[i].getClass().getName() + \":\" + t);\n             }\n         }\n@@ -301,7 +301,7 @@ public static ConfigurationProvider load(File file, String anchor,\n             loader = AccessController.doPrivileged(\n                 J2DoPrivHelper.getContextClassLoaderAction());\n         ConfigurationProvider provider = null;\n-        StringBuffer errs = null;\n+        StringBuilder errs = null;\n         Throwable err = null;\n         // most specific to least\n         for (int i = _derivations.length - 1; i >= 0; i--) {\n@@ -311,7 +311,7 @@ public static ConfigurationProvider load(File file, String anchor,\n                     return provider;\n             } catch (Throwable t) {\n                 err = t;\n-                errs = (errs == null) ? new StringBuffer() : errs.append(\"\\n\");\n+                errs = (errs == null) ? new StringBuilder() : errs.append(\"\\n\");\n                 errs.append(_derivations[i].getClass().getName() + \":\" + t);\n             }\n         }\n@@ -348,7 +348,7 @@ private static ConfigurationProvider load(ClassLoader loader,\n                 J2DoPrivHelper.getContextClassLoaderAction());\n         \n         ConfigurationProvider provider = null;\n-        StringBuffer errs = null;\n+        StringBuilder errs = null;\n         String type = (globals) ? \"globals\" : \"defaults\";\n         Throwable err = null;\n         // most specific to least\n@@ -360,7 +360,7 @@ private static ConfigurationProvider load(ClassLoader loader,\n                    return provider;\n             } catch (Throwable t) {\n                 err = t;\n-                errs = (errs == null) ? new StringBuffer() : errs.append(\"\\n\");\n+                errs = (errs == null) ? new StringBuilder() : errs.append(\"\\n\");\n                 errs.append(_derivations[i].getClass().getName() + \":\" + t);\n             }\n         }\n@@ -371,7 +371,7 @@ private static ConfigurationProvider load(ClassLoader loader,\n     /**\n      * Thrown proper exception for given errors.\n      */\n-    private static void reportErrors(StringBuffer errs, String resource,\n+    private static void reportErrors(StringBuilder errs, String resource,\n         Throwable nested) {\n         if (errs == null)\n             return;\n@@ -392,7 +392,7 @@ private static void reportErrors(StringBuffer errs, String resource,\n     public static List<String> getFullyQualifiedAnchorsInPropertiesLocation(\n         final String propertiesLocation) {\n         List<String> fqAnchors = new ArrayList<String>();\n-        StringBuffer errs = null;\n+        StringBuilder errs = null;\n         Throwable err = null;\n         for (int i = _derivations.length - 1; i >= 0; i--) {\n             try {\n@@ -423,7 +423,7 @@ private static void reportErrors(StringBuffer errs, String resource,\n                 }\n             } catch (Throwable t) {\n                 err = t;\n-                errs = (errs == null) ? new StringBuffer() : errs.append(\"\\n\");\n+                errs = (errs == null) ? new StringBuilder() : errs.append(\"\\n\");\n                 errs.append(_derivations[i].getClass().getName() + \":\" + t);\n             }\n         }\n@@ -484,7 +484,7 @@ public static void main(String[] args) {\n      * Return a message about the status of each product derivation.\n      */\n     private static String derivationErrorsToString() {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"ProductDerivations: \").append(_derivationNames.length);\n         for (int i = 0; i < _derivationNames.length; i++) {\n             buf.append(\"\\n\").append(i + 1).append(\". \")."},{"sha":"bdc7b9219a2497fe7b11ba9fa331be4b16ff9277","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringListValue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringListValue.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringListValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringListValue.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -88,7 +88,7 @@ public String unalias(String str) {\n         // canonical values.  Also, catch any bad aliases.\n         boolean found;\n         String iString;\n-        StringBuffer retv = new StringBuffer();\n+        StringBuilder retv = new StringBuilder();\n         String[] vals = str.split(\",\", 0);\n         \n         for (int i = 0; i < vals.length; i++) {"},{"sha":"1757da7690603199e4812a4ff72fb4344a7294c0","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DataSourceLogs.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DataSourceLogs.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DataSourceLogs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DataSourceLogs.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -132,7 +132,7 @@ private static void log(String msg, Connection conn,\n         if (startTime != -1)\n             totalTime = System.currentTimeMillis() - startTime;\n \n-        StringBuffer buf = new StringBuffer(25 + msg.length());\n+        StringBuilder buf = new StringBuilder(25 + msg.length());\n         buf.append(\"<t \").append(Thread.currentThread().hashCode());\n         if (conn != null)\n             buf.append(\", \").append(conn);"},{"sha":"9a11a6f1fe35c6cf82408cd751aab129e49dfa8c","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingDatabaseMetaData.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -85,7 +85,7 @@ public boolean equals(Object other) {\n     }\n \n     public String toString() {\n-        StringBuffer buf = new StringBuffer(\"metadata \").append(hashCode());\n+        StringBuilder buf = new StringBuilder(\"metadata \").append(hashCode());\n         buf.append(\"[\").append(_metaData.toString()).append(\"]\");\n         return buf.toString();\n     }"},{"sha":"29308f2c5099c8d909f5c9f21e8e4f422194d936","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -1345,9 +1345,9 @@ protected void appendInfo(StringBuffer buf) {\n                     buf.append(_sql);\n                 }\n \n-                StringBuffer paramBuf = null;\n+                StringBuilder paramBuf = null;\n                 if (_params != null && !_params.isEmpty()) {\n-                    paramBuf = new StringBuffer();\n+                    paramBuf = new StringBuilder();\n                     for (Iterator<String> itr = _params.iterator(); itr\n                         .hasNext();) {\n                         paramBuf.append(itr.next());\n@@ -1928,9 +1928,9 @@ protected void appendInfo(StringBuffer buf) {\n                     buf.append(_sql);\n                 }\n \n-                StringBuffer paramBuf = null;\n+                StringBuilder paramBuf = null;\n                 if (_params != null && !_params.isEmpty()) {\n-                    paramBuf = new StringBuffer();\n+                    paramBuf = new StringBuilder();\n                     for (Iterator<String> itr = _params.iterator(); itr\n                         .hasNext();) {\n                         paramBuf.append(itr.next());"},{"sha":"51d6a598f87d0c76b5bdeac88597b71736facb95","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/SQLFormatter.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/SQLFormatter.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/SQLFormatter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/SQLFormatter.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -136,8 +136,8 @@ public Object prettyPrint(Object sqlObject) {\n         if (!multiLine) {\n             return prettyPrintLine(sqlObject);\n         } else {\n-            StringBuffer sql = new StringBuffer(sqlObject.toString());\n-            StringBuffer buf = new StringBuffer(sql.length());\n+            StringBuilder sql = new StringBuilder(sqlObject.toString());\n+            StringBuilder buf = new StringBuilder(sql.length());\n \n             while (sql.length() > 0) {\n                 String line = null;\n@@ -183,9 +183,9 @@ else if (lowerCaseSql.startsWith(\"create index\"))\n \n         int start = 0;\n         int end = -1;\n-        StringBuffer clause;\n-        List<StringBuffer> clauses = new ArrayList<StringBuffer>();\n-        clauses.add(new StringBuffer());\n+        StringBuilder clause;\n+        List<StringBuilder> clauses = new ArrayList<StringBuilder>();\n+        clauses.add(new StringBuilder());\n         for (int i = 0; i < separators.length; i++) {\n             end = lowerCaseSql.indexOf(\" \" + separators[i].toLowerCase(),\n                 start);\n@@ -195,7 +195,7 @@ else if (lowerCaseSql.startsWith(\"create index\"))\n             clause = clauses.get(clauses.size() - 1);\n             clause.append(sql.substring(start, end));\n \n-            clause = new StringBuffer();\n+            clause = new StringBuilder();\n             clauses.add(clause);\n             clause.append(clauseIndent);\n             clause.append(separators[i]);\n@@ -206,8 +206,8 @@ else if (lowerCaseSql.startsWith(\"create index\"))\n         clause = clauses.get(clauses.size() - 1);\n         clause.append(sql.substring(start));\n \n-        StringBuffer pp = new StringBuffer(sql.length());\n-        for (Iterator<StringBuffer> iter = clauses.iterator(); iter.hasNext();){\n+        StringBuilder pp = new StringBuilder(sql.length());\n+        for (Iterator<StringBuilder> iter = clauses.iterator(); iter.hasNext();){\n             pp.append(wrapLine(iter.next().toString()));\n             if (iter.hasNext())\n                 pp.append(newline);\n@@ -217,7 +217,7 @@ else if (lowerCaseSql.startsWith(\"create index\"))\n     }\n \n     private String wrapLine(String line) {\n-        StringBuffer lines = new StringBuffer(line.length());\n+        StringBuilder lines = new StringBuilder(line.length());\n \n         // ensure that any leading whitespace is preserved.\n         for (int i = 0; i < line.length() &&"},{"sha":"25769170d1132762a1130475fdd515f919c50564","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -316,12 +316,12 @@ protected void log(short level, String message, Throwable t) {\n          */\n         protected String formatMessage(short level, String message,\n             Throwable t) {\n-            // we write to a StringBuffer and then flush it all at\n+            // we write to a StringBuilder and then flush it all at\n             // once as a single line, since some environments(e.g., JBoss)\n             // override the System output stream to flush any calls\n             // to write without regard to line breaks, making the\n             // output incomprehensibe.\n-            StringBuffer buf = new StringBuffer();\n+            StringBuilder buf = new StringBuilder();\n \n             buf.append(getOffset());\n             buf.append(\"  \");"},{"sha":"642fd1a2593cb052bc4cb66a6919b1ccc207b8cc","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -338,14 +338,14 @@ private String getFromJavaFile(File file) throws IOException {\n             // find the line with the package declaration\n             in = new BufferedReader(new FileReader(file));\n             String line;\n-            StringBuffer pack = null;\n+            StringBuilder pack = null;\n             while ((line = in.readLine()) != null) {\n                 line = line.trim();\n                 if (line.startsWith(\"package \")) {\n                     line = line.substring(8).trim();\n \n                     // strip off anything beyond the package declaration\n-                    pack = new StringBuffer();\n+                    pack = new StringBuilder();\n                     for (int i = 0; i < line.length(); i++) {\n                         if (Character.isJavaIdentifierPart(line.charAt(i))\n                             || line.charAt(i) == '.')\n@@ -579,7 +579,7 @@ private String readAttribute(Reader in, char[] name) throws IOException {\n      * Read the current text value until the next element.\n      */\n     private String readElementText(Reader in) throws IOException {\n-        StringBuffer buf = null;\n+        StringBuilder buf = null;\n         int ch;\n         while (true) {\n             ch = in.read();\n@@ -590,7 +590,7 @@ private String readElementText(Reader in) throws IOException {\n             if (Character.isWhitespace((char) ch))\n                 continue;\n             if (buf == null)\n-                buf = new StringBuffer();\n+                buf = new StringBuilder();\n             buf.append((char) ch);\n         }\n         return (buf == null) ? \"\" : buf.toString();\n@@ -612,7 +612,7 @@ private int readThroughWhitespace(Reader in) throws IOException {\n      * Return the current attribute value.\n      */\n     private String readAttributeValue(Reader in) throws IOException {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         int ch;\n         while (true) {\n             ch = in.read();"},{"sha":"90584d0ae29301a53f25be5db3891333c58d18f8","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -43,7 +43,7 @@\n      * be provided.\n      */\n     public static String getSourceLocationMessage(SourceTracker[] trackers) {\n-        StringBuffer buf = new StringBuffer(20 * (trackers.length + 1));\n+        StringBuilder buf = new StringBuilder(20 * (trackers.length + 1));\n         buf.append(_loc.get(\"source-trackers-location-header\")).append(SEP);\n         String sourceFilePath;\n         for (int i = 0; i < trackers.length; i++) {"},{"sha":"2644c784d439eb5aa7bd5335b94e53d348235d8e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Base16Encoder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Base16Encoder.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Base16Encoder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Base16Encoder.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -34,7 +34,7 @@\n      * Convert bytes to a base16 string.\n      */\n     public static String encode(byte[] byteArray) {\n-        StringBuffer hexBuffer = new StringBuffer(byteArray.length * 2);\n+        StringBuilder hexBuffer = new StringBuilder(byteArray.length * 2);\n         for (int i = 0; i < byteArray.length; i++)\n             for (int j = 1; j >= 0; j--)\n                 hexBuffer.append(HEX[(byteArray[i] >> (j * 4)) & 0xF]);"},{"sha":"7f9f74813b9228005bfb4dbc25de2b6611e54ee5","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/CodeFormat.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/CodeFormat.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/CodeFormat.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/CodeFormat.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -54,7 +54,7 @@ public void setTabSpaces(int tab) {\n         if (tab == 0)\n             _tab = \"\\t\";\n         else {\n-            StringBuffer tabs = new StringBuffer(tab);\n+            StringBuilder tabs = new StringBuilder(tab);\n             for (int i = 0; i < tab; i++)\n                 tabs.append(\" \");\n             _tab = tabs.toString();\n@@ -167,7 +167,7 @@ public String getEndl(int num) {\n         if (num == 1)\n             return _sep;\n \n-        StringBuffer buf = new StringBuffer(_sep.length() * num);\n+        StringBuilder buf = new StringBuilder(_sep.length() * num);\n         for (int i = 0; i < num; i++)\n             buf.append(_sep);\n         return buf.toString();\n@@ -302,7 +302,7 @@ public String getTab(int tabLevel) {\n         if (tabLevel == 1)\n             return _tab;\n \n-        StringBuffer tabs = new StringBuffer(_tab.length() * tabLevel);\n+        StringBuilder tabs = new StringBuilder(_tab.length() * tabLevel);\n         for (int i = 0; i < tabLevel; i++)\n             tabs.append(_tab);\n         return tabs.toString();\n@@ -313,7 +313,7 @@ public String getTab(int tabLevel) {\n      * Returns parametrized type string for given type(s).\n      */\n     public String getParametrizedType(String[] typenames) {\n-        StringBuffer buf = new StringBuffer ();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"<\");\n         for (int i = 0; i < typenames.length; i++) {\n             if (i > 0)"},{"sha":"c87bd6d380fffdab171986cbb783269096f31d91","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -311,7 +311,7 @@ private void loadProperties(InputStream in) throws IOException {\n                 || line.charAt(pos) == '#' || line.charAt(pos) == '!')\n                 continue;\n \n-            StringBuffer key = new StringBuffer();\n+            StringBuilder key = new StringBuilder();\n             while (pos < line.length() && !isSpace(c = line.charAt(pos++))\n                 && c != '=' && c != ':') {\n                 if (c == '\\\\') {\n@@ -341,7 +341,7 @@ private void loadProperties(InputStream in) throws IOException {\n                     pos++;\n             }\n \n-            StringBuffer element = new StringBuffer(line.length() - pos);\n+            StringBuilder element = new StringBuilder(line.length() - pos);\n \n             while (pos < line.length()) {\n                 c = line.charAt(pos++);\n@@ -385,7 +385,7 @@ private void loadProperties(InputStream in) throws IOException {\n      * @param value the value we are appending to\n      * @return the position after the reading is done\n      */\n-    private static int readEscape(String source, int pos, StringBuffer value) {\n+    private static int readEscape(String source, int pos, StringBuilder value) {\n         char c = source.charAt(pos++);\n         switch (c) {\n             case 'n':\n@@ -485,7 +485,7 @@ public void store(OutputStream out, String header) throws IOException {\n \n     private boolean writeProperty(String key, PrintWriter writer,\n         boolean needsNewline) {\n-        StringBuffer s = new StringBuffer();\n+        StringBuilder s = new StringBuilder();\n \n         if (key == null)\n             return false;\n@@ -517,7 +517,7 @@ private boolean writeProperty(String key, PrintWriter writer,\n      * @param isKey if true, then the string is a Property key, otherwise\n      * it is a value\n      */\n-    private static void formatValue(String str, StringBuffer buf,\n+    private static void formatValue(String str, StringBuilder buf,\n         boolean isKey) {\n         if (isKey) {\n             buf.setLength(0);\n@@ -569,7 +569,7 @@ public DuplicateKeyException(String key, Object firstVal,\n      */\n     private class PropertyLine implements Serializable {\n \n-        private final StringBuffer line = new StringBuffer();\n+        private final StringBuilder line = new StringBuilder();\n         private String propertyKey;\n         private String propertyValue;\n "},{"sha":"9006369bba502c37e50b5855709d5beae59958b5","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParameterTemplate.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParameterTemplate.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParameterTemplate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParameterTemplate.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -199,14 +199,14 @@ public String toString() {\n         if (_buf.length() == 0 || _params.isEmpty())\n             return _buf.toString();\n \n-        StringBuffer copy = new StringBuffer();\n-        StringBuffer param = null;\n+        StringBuilder copy = new StringBuilder();\n+        StringBuilder param = null;\n         char ch, last = 0;\n         for (int i = 0; i < _buf.length(); i++) {\n             ch = _buf.charAt(i);\n             if (last == '$' && ch == '{') {\n                 copy.deleteCharAt(copy.length() - 1);\n-                param = new StringBuffer();\n+                param = new StringBuilder();\n             } else if (ch == '}' && param != null) {\n                 if (_params.containsKey(param.toString()))\n                     copy.append(_params.get(param.toString()));"},{"sha":"e39bdd6d2a03ea2ee8c678d14e6e911dd3bb3b6f","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -434,11 +434,11 @@ protected MetaDataFilter newMetaDataFilter() {\n      * Ensure all fields have declared a strategy.\n      */\n     private void validateStrategies(ClassMetaData meta) {\n-        StringBuffer buf = null;\n+        StringBuilder buf = null;\n         for (FieldMetaData fmd : meta.getDeclaredFields()) {\n             if (!fmd.isExplicit()) {\n                 if (buf == null)\n-                    buf = new StringBuffer();\n+                    buf = new StringBuilder();\n                 else\n                     buf.append(\", \");\n                 buf.append(fmd);"},{"sha":"586308df1977afd482a8f160fb437cba5c7a9846","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -398,7 +398,7 @@ public static Map toOpenJPAProperties(PersistenceUnitInfo info) {\n         Properties metaFactoryProps = new Properties();\n         if (info.getManagedClassNames() != null \n             && !info.getManagedClassNames().isEmpty()) {\n-            StringBuffer types = new StringBuffer();\n+            StringBuilder types = new StringBuilder();\n             for (String type : info.getManagedClassNames()) {\n                 if (types.length() > 0)\n                     types.append(';');\n@@ -409,7 +409,7 @@ public static Map toOpenJPAProperties(PersistenceUnitInfo info) {\n         if (info.getJarFileUrls() != null && !info.getJarFileUrls().isEmpty()\n             || (!info.excludeUnlistedClasses()\n             && info.getPersistenceUnitRootUrl() != null)) {\n-            StringBuffer jars = new StringBuffer();\n+            StringBuilder jars = new StringBuilder();\n             String file = null;\n             if (!info.excludeUnlistedClasses()\n                 && info.getPersistenceUnitRootUrl() != null) {\n@@ -431,7 +431,7 @@ public static Map toOpenJPAProperties(PersistenceUnitInfo info) {\n         }\n         if (info.getMappingFileNames() != null\n             && !info.getMappingFileNames().isEmpty()) {\n-            StringBuffer rsrcs = new StringBuffer();\n+            StringBuilder rsrcs = new StringBuilder();\n             for (String rsrc : info.getMappingFileNames()) {\n                 if (rsrcs.length() > 0)\n                     rsrcs.append(';');"},{"sha":"12868d1e41afe4b21b563217241416d2c4c8cf81","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/MetamodelImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/MetamodelImpl.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/MetamodelImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/MetamodelImpl.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -363,7 +363,7 @@ String toTypeName(java.lang.reflect.Type type) {\n         }\n         ParameterizedType pType = (ParameterizedType)type;\n         java.lang.reflect.Type[] args = pType.getActualTypeArguments();\n-        StringBuffer tmp = new StringBuffer(pType.getRawType().toString());\n+        StringBuilder tmp = new StringBuilder(pType.getRawType().toString());\n         for (int i = 0; i < args.length; i++) {\n             tmp.append((i == 0) ? \"<\" : \",\");\n             tmp.append(toTypeName(args[i]));"},{"sha":"7504296fa335fc1a31423dbcb5b8473338edbbb6","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/SourceAnnotationHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/SourceAnnotationHandler.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/SourceAnnotationHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/SourceAnnotationHandler.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -450,7 +450,7 @@ public static String toString(Collection<? extends Element> elements) {\n     \n     String toDetails(Element e) {\n         TypeMirror mirror = e.asType();\n-        return new StringBuffer(e.getKind().toString()).append(\" \")\n+        return new StringBuilder(e.getKind().toString()).append(\" \")\n                            .append(e.toString())\n                            .append(\"Mirror \")\n                            .append(mirror.getKind().toString())"},{"sha":"c30b2c39da1ed6b580cf99578e54dc2868f13ea9","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ArrayExpression.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ArrayExpression.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ArrayExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ArrayExpression.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -36,7 +36,7 @@ public ArrayExpression(Object[] values) {\n \n \t@Override\n \tpublic String asExpression(AliasContext ctx) {\n-\t\tStringBuffer tmp = new StringBuffer(OPEN_BRACE);\n+\t\tStringBuilder tmp = new StringBuilder(OPEN_BRACE);\n \t\tfor (int i = 0; i < _values.length; i++) {\n \t\t\tObject v = _values[i];\n \t\t\ttmp.append((v instanceof Visitable ? "},{"sha":"71e962f458b12f855d4a2923d0d9c0fc9df4f3d1","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/JoinPath.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/JoinPath.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/JoinPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/JoinPath.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -49,7 +49,7 @@ public AbstractDomainObject getParent() {\n \t\t\n \t@Override\n \tpublic String asJoinable(AliasContext ctx) {\n-\t\treturn new StringBuffer(getOperator().toString())\n+\t\treturn new StringBuilder(getOperator().toString())\n \t\t   .append(getParent().asProjection(ctx))\n \t\t   .append(NAVIGATION)\n \t\t   .append(getLastSegment())"},{"sha":"ad7c5bd8ab15efaebbc26edf12172dd580f68184","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LocateExpression.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LocateExpression.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LocateExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LocateExpression.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -55,7 +55,7 @@ public LocateExpression(Expression key, Expression str, Expression start) {\n \tpublic String asExpression(AliasContext ctx) {\n         String start = _start == null ? EMPTY : COMMA +\n                 ((Visitable)_start).asExpression(ctx);\n-\t\treturn new StringBuffer(_op.toString())\n+\t\treturn new StringBuilder(_op.toString())\n \t\t    .append(OPEN_BRACE)\n \t\t    .append(((Visitable)_e1).asExpression(ctx))\n \t\t    .append(COMMA) "},{"sha":"994e7853fe1bc4e075a3ceda9ec25804f2bbe18c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/NewInstance.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/NewInstance.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/NewInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/NewInstance.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -48,7 +48,7 @@ public OrderByItem desc() {\n \t\n \t\n \tpublic String asProjection(AliasContext ctx) {\n-        StringBuffer tmp = new StringBuffer(\"NEW \").append(_cls.getName())\n+            StringBuilder tmp = new StringBuilder(\"NEW \").append(_cls.getName())\n \t\t    .append(\"(\");\n \t\tif (_args == null || _args.isEmpty())\n \t\t\treturn tmp.append(\")\").toString();"},{"sha":"68484e104ec9eecbef28a0a198a70029ec998060","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/QueryDefinitionImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/QueryDefinitionImpl.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/QueryDefinitionImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/QueryDefinitionImpl.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -354,7 +354,7 @@ public QueryDefinition where(Predicate predicate) {\n \t@Override\n \tpublic String asExpression(AliasContext ctx) {\n \t\tctx.push(this);\n-\t\tStringBuffer buffer = new StringBuffer();\n+\t\tStringBuilder buffer = new StringBuilder();\n \t\tregisterDomains(ctx);\n \t\tString select = _distinct ? \"SELECT DISTINCT \" : \"SELECT \";\n         fillBuffer(select, buffer, ctx, getProjections(), Visit.PROJECTION);\n@@ -371,7 +371,7 @@ public String asProjection(AliasContext ctx) {\n \t\treturn asExpression(ctx);\n \t}\n \t\n-    public void fillBuffer(String header, StringBuffer buffer, AliasContext ctx,\n+    public void fillBuffer(String header, StringBuilder buffer, AliasContext ctx,\n \t\tList list, Visit visit) {\n \t\tif (list == null || list.isEmpty())\n \t\t\treturn;\n@@ -392,7 +392,7 @@ public void fillBuffer(String header, StringBuffer buffer, AliasContext ctx,\n \t\t}\n \t}\n \t\n-    public void fillBuffer(String header, StringBuffer buffer, AliasContext ctx,\n+    public void fillBuffer(String header, StringBuilder buffer, AliasContext ctx,\n \t\t\tPredicate p) {\n \t\tif (p == null)\n \t\t\treturn;"},{"sha":"2439a77fb1f2f206463fafbaec1fb12d082d4808","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/VarArgsExpression.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/VarArgsExpression.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/VarArgsExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/VarArgsExpression.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -35,7 +35,7 @@ public VarArgsExpression(Expression[] values) {\n \n \t@Override\n \tpublic String asExpression(AliasContext ctx) {\n-\t\tStringBuffer tmp = new StringBuffer();\n+\t\tStringBuilder tmp = new StringBuilder();\n \t\tfor (int i = 0; i < _values.length; i++) {\n \t\t\tVisitable v = (Visitable)_values[i];\n \t\t\ttmp.append(v.asExpression(ctx))"},{"sha":"b8d6f5247926c1729f4d8c859c6e69611dbc3782","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/WhenClause.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/WhenClause.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/WhenClause.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/WhenClause.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -47,7 +47,7 @@ boolean hasThen() {\n \t}\n \t\n \tpublic String toJPQL(AliasContext ctx) {\n-\t\tStringBuffer tmp = new StringBuffer();\n+\t\tStringBuilder tmp = new StringBuilder();\n \t\ttmp.append(\" WHEN \").append(JPQLHelper.toJPQL(ctx, when))\n \t\t   .append(\" THEN \").append(JPQLHelper.toJPQL(ctx, then));\n \t\treturn tmp.toString();"},{"sha":"2f47a9b748198f9b0c04320831552ba72174e451","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/util/SourceCode.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/util/SourceCode.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/util/SourceCode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/util/SourceCode.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -190,7 +190,7 @@ static void tab(PrintWriter out, int tab) {\n     public static String[] wrap(String longLine, int width) {\n         String[] words = longLine.split(\"\\\\ \");\n         List<String> lines = new ArrayList<String>();\n-        StringBuffer line = new StringBuffer();\n+        StringBuilder line = new StringBuilder();\n         for (int i = 0; i < words.length; i++) {\n             String w = words[i];\n             if (line.length() + w.length() < width) {\n@@ -680,7 +680,7 @@ public Annotation addArgument(String key, String v) {\n         }\n         \n         public Annotation addArgument(String key, String[] vs) {\n-            StringBuffer tmp = new StringBuffer(BLOCK_DELIMITER.start);\n+            StringBuilder tmp = new StringBuilder(BLOCK_DELIMITER.start);\n             for (int i=0; i < vs.length; i++) {\n                 tmp.append(quote(vs[i]));\n                 tmp.append(i != vs.length-1 ? COMMA : BLANK);"},{"sha":"396bd22a147c63694574fe66e0fe57304310d2ed","filename":"openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/ObjectData.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/ObjectData.java","raw_url":"https://github.com/apache/openjpa/raw/55bf86a4c8d4e7bef9aa7b611a9130011fa27c34/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/ObjectData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/ObjectData.java?ref=55bf86a4c8d4e7bef9aa7b611a9130011fa27c34","patch":"@@ -373,7 +373,7 @@ public Object clone() {\n     }\n \n     public String toString() {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append(\"Class: (\" + _meta.getDescribedType().getName() + \")\\n\");\n         buf.append(\"Object Id: (\" + _oid + \")\\n\");\n         buf.append(\"Version: (\" + _version + \")\\n\");"}]}

