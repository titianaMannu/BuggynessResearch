{"sha":"560f89510239d75b1a0db97dffcb9cbc21ab9e32","node_id":"MDY6Q29tbWl0MjA2MzY0OjU2MGY4OTUxMDIzOWQ3NWIxYTBkYjk3ZGZmY2I5Y2JjMjFhYjllMzI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-02-28T19:20:51Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-02-28T19:20:51Z"},"message":"OPENJPA-160\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@512906 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"14051c4bdd6282bf186a44dd872b47fa5b5cf46c","url":"https://api.github.com/repos/apache/openjpa/git/trees/14051c4bdd6282bf186a44dd872b47fa5b5cf46c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/560f89510239d75b1a0db97dffcb9cbc21ab9e32","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/560f89510239d75b1a0db97dffcb9cbc21ab9e32","html_url":"https://github.com/apache/openjpa/commit/560f89510239d75b1a0db97dffcb9cbc21ab9e32","comments_url":"https://api.github.com/repos/apache/openjpa/commits/560f89510239d75b1a0db97dffcb9cbc21ab9e32/comments","author":null,"committer":null,"parents":[{"sha":"31010aa2ac0c335615d6479f3d7d8e5a728c23b4","url":"https://api.github.com/repos/apache/openjpa/commits/31010aa2ac0c335615d6479f3d7d8e5a728c23b4","html_url":"https://github.com/apache/openjpa/commit/31010aa2ac0c335615d6479f3d7d8e5a728c23b4"}],"stats":{"total":190,"additions":157,"deletions":33},"files":[{"sha":"2cd4dbbe7472f1a84f993a0251c404f00f4a3cda","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerValue.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/560f89510239d75b1a0db97dffcb9cbc21ab9e32/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerValue.java","raw_url":"https://github.com/apache/openjpa/raw/560f89510239d75b1a0db97dffcb9cbc21ab9e32/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerValue.java?ref=560f89510239d75b1a0db97dffcb9cbc21ab9e32","patch":"@@ -0,0 +1,49 @@\n+package org.apache.openjpa.conf;\n+\n+import org.apache.openjpa.lib.conf.PluginValue;\n+import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.kernel.BrokerImpl;\n+import org.apache.openjpa.kernel.FinalizingBrokerImpl;\n+import org.apache.openjpa.util.InternalException;\n+\n+/**\n+ * Custom {@link PluginValue} that can efficiently create {@link BrokerImpl}\n+ * instances.\n+ *\n+ * @since 0.9.7\n+ */\n+public class BrokerValue \n+    extends PluginValue {\n+\n+    private BrokerImpl _templateBroker;\n+\n+    public BrokerValue(String prop) {\n+        super(prop, false);\n+        String[] aliases = new String[] {\n+            \"default\", FinalizingBrokerImpl.class.getName(),\n+            \"non-finalizing\", BrokerImpl.class.getName(), \n+        };\n+        setAliases(aliases);\n+        setDefault(aliases[0]);\n+        setString(aliases[0]);        \n+    }\n+\n+    public Object newInstance(String clsName, Class type, Configuration conf,\n+        boolean fatal) {\n+        if (BrokerImpl.class.getName().equals(clsName)) {\n+            // This is not synchronized. If there are concurrent invocations\n+            // while _templateBroker is null, we'll just end up with extra\n+            // template brokers, which will get safely garbage collected.\n+            if (_templateBroker == null)\n+                _templateBroker = (BrokerImpl) super.newInstance(\n+                    clsName, type, conf, fatal);\n+            try {\n+                return _templateBroker.clone();\n+            } catch (CloneNotSupportedException e) {\n+                throw new InternalException(e);\n+            }\n+        } else {\n+            return super.newInstance(clsName, type, conf, fatal);\n+        }\n+    }\n+}"},{"sha":"d981a67a1d58edca93f161ac1e6d9c22e95d01d0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/560f89510239d75b1a0db97dffcb9cbc21ab9e32/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/560f89510239d75b1a0db97dffcb9cbc21ab9e32/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=560f89510239d75b1a0db97dffcb9cbc21ab9e32","patch":"@@ -71,7 +71,7 @@\n \n     // openjpa properties\n     public ObjectValue classResolverPlugin;\n-    public ObjectValue brokerPlugin;\n+    public BrokerValue brokerPlugin;\n     public ObjectValue dataCachePlugin;\n     public ObjectValue dataCacheManagerPlugin;\n     public IntValue dataCacheTimeout;\n@@ -178,11 +178,8 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         brokerFactoryPlugin = new BrokerFactoryValue();\n         addValue(brokerFactoryPlugin);\n \n-        brokerPlugin = addPlugin(\"BrokerImpl\", false);\n-        aliases = new String[] { \"default\", BrokerImpl.class.getName() };\n-        brokerPlugin.setAliases(aliases);\n-        brokerPlugin.setDefault(aliases[0]);\n-        brokerPlugin.setString(aliases[0]);\n+        brokerPlugin = new BrokerValue(\"BrokerImpl\");\n+        addValue(brokerPlugin);\n \n         dataCacheManagerPlugin = addPlugin(\"DataCacheManager\", true);\n         aliases ="},{"sha":"ed73a1749c3b935129b487afdd2cf24d12201797","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":15,"deletions":12,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/560f89510239d75b1a0db97dffcb9cbc21ab9e32/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/560f89510239d75b1a0db97dffcb9cbc21ab9e32/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=560f89510239d75b1a0db97dffcb9cbc21ab9e32","patch":"@@ -96,7 +96,7 @@\n  * @author Abe White\n  */\n public class BrokerImpl\n-    implements Broker, FindCallbacks {\n+    implements Broker, FindCallbacks, Cloneable {\n \n     /**\n      * Incremental flush.\n@@ -155,14 +155,13 @@\n     private ManagedRuntime _runtime = null;\n     private LockManager _lm = null;\n     private InverseManager _im = null;\n-    private final JCAHelper _jca = new JCAHelper();\n+    private JCAHelper _jca = null;\n     private ReentrantLock _lock = null;\n     private OpCallbacks _call = null;\n     private RuntimeExceptionTranslator _extrans = null;\n \n     // cache class loader associated with the broker\n-    private ClassLoader _loader = Thread.currentThread().\n-        getContextClassLoader();\n+    private ClassLoader _loader = null;\n \n     // user state\n     private Synchronization _sync = null;\n@@ -225,6 +224,8 @@\n     private LifecycleEventManager _lifeEventManager = null;\n     private int _lifeCallbackMode = 0;\n \n+    private boolean _initializeWasInvoked = false;\n+    \n     /**\n      * Set the persistence manager's authentication. This is the first\n      * method called after construction.\n@@ -251,6 +252,9 @@ public void setAuthentication(String user, String pass) {\n      */\n     public void initialize(AbstractBrokerFactory factory,\n         DelegatingStoreManager sm, boolean managed, int connMode) {\n+        _initializeWasInvoked = true;\n+        _loader = Thread.currentThread().getContextClassLoader();\n+        _jca = new JCAHelper();\n         _conf = factory.getConfiguration();\n         _compat = _conf.getCompatibilityInstance();\n         _factory = factory;\n@@ -295,14 +299,13 @@ public void initialize(AbstractBrokerFactory factory,\n             beginInternal();\n     }\n \n-    /**\n-     * Close on finalize.\n-     */\n-    protected void finalize()\n-        throws Throwable {\n-        super.finalize();\n-        if (!isClosed())\n-            free();\n+    public Object clone()\n+        throws CloneNotSupportedException {\n+        if (_initializeWasInvoked)\n+            throw new CloneNotSupportedException();\n+        else {\n+            return super.clone();\n+        }\n     }\n \n     /**"},{"sha":"af27ba70110ad1e9bdff10ac87b4671f3f7d4a17","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FinalizingBrokerImpl.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/560f89510239d75b1a0db97dffcb9cbc21ab9e32/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FinalizingBrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/560f89510239d75b1a0db97dffcb9cbc21ab9e32/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FinalizingBrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FinalizingBrokerImpl.java?ref=560f89510239d75b1a0db97dffcb9cbc21ab9e32","patch":"@@ -0,0 +1,23 @@\n+package org.apache.openjpa.kernel;\n+\n+/**\n+ * Subtype of {@link BrokerImpl} that automatically closes itself during\n+ * finalization. This implementation guards against potential resource leaks,\n+ * but also incurs a scalability bottleneck as instances are enlisted in the\n+ * finalization queue and subsequently cleaned up.\n+ *\n+ * @since 0.9.7\n+ */\n+public class FinalizingBrokerImpl\n+    extends BrokerImpl {\n+\n+    /**\n+     * Close on finalize.\n+     */\n+    protected void finalize()\n+        throws Throwable {\n+        super.finalize();\n+        if (!isClosed())\n+            free();\n+    }\n+}"},{"sha":"d0bf25168c5b6755b5ac27d24c79b7e05011a773","filename":"openjpa-project/src/doc/manual/ref_guide_conf.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/560f89510239d75b1a0db97dffcb9cbc21ab9e32/openjpa-project/src/doc/manual/ref_guide_conf.xml","raw_url":"https://github.com/apache/openjpa/raw/560f89510239d75b1a0db97dffcb9cbc21ab9e32/openjpa-project/src/doc/manual/ref_guide_conf.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_conf.xml?ref=560f89510239d75b1a0db97dffcb9cbc21ab9e32","patch":"@@ -585,7 +585,7 @@ BrokerImpl</literal>\n <xref linkend=\"ref_guide_conf_plugins\"/>) describing the\n <ulink url=\"../javadoc/org/apache/openjpa/kernel/Broker.html\"><classname>\n org.apache.openjpa.kernel.Broker</classname></ulink> type to use at runtime. See\n-<xref linkend=\"ref_guide_runtime_pmextension\"/> on for details.\n+<xref linkend=\"ref_guide_runtime_broker_extension\"/> on for details.\n             </para>\n         </section>\n         <section id=\"openjpa.ClassResolver\">"},{"sha":"745ef0b7e43fa882ba787b369e27471db635280d","filename":"openjpa-project/src/doc/manual/ref_guide_optimization.xml","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/560f89510239d75b1a0db97dffcb9cbc21ab9e32/openjpa-project/src/doc/manual/ref_guide_optimization.xml","raw_url":"https://github.com/apache/openjpa/raw/560f89510239d75b1a0db97dffcb9cbc21ab9e32/openjpa-project/src/doc/manual/ref_guide_optimization.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_optimization.xml?ref=560f89510239d75b1a0db97dffcb9cbc21ab9e32","patch":"@@ -564,6 +564,25 @@ loading subclass data or traversing relations for each instance in a large\n collection of results can speed up data loading by orders of magnitude.\n                     </entry>\n                 </row>\n+                <row>\n+                    <entry colname=\"name\">\n+                        <emphasis role=\"bold\">\n+                            Disable BrokerImpl finalization\n+                        </emphasis>\n+                        <para>\n+<emphasis>performance, scalability</emphasis>\n+                        </para>\n+                    </entry>\n+                    <entry colname=\"desc\">\n+By default, OpenJPA's EntityManagers use finalizers to ensure that resources\n+get cleaned up. If you are properly managing your resources, this finalization\n+is not necessary, and will introduce unneeded synchronization, leading to\n+scalability problems. You can disable this protective behavior by setting the\n+<literal>openjpa.BrokerImpl</literal> property to\n+<literal>non-finalizing</literal>. See <link\n+linkend=\"ref_guide_runtime_broker_finalization\"/> for details.\n+                    </entry>\n+                </row>\n             </tbody>\n         </tgroup>\n     </table>"},{"sha":"872131d623eaa72b767f724b391f0c039a7766f0","filename":"openjpa-project/src/doc/manual/ref_guide_runtime.xml","status":"modified","additions":47,"deletions":14,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/560f89510239d75b1a0db97dffcb9cbc21ab9e32/openjpa-project/src/doc/manual/ref_guide_runtime.xml","raw_url":"https://github.com/apache/openjpa/raw/560f89510239d75b1a0db97dffcb9cbc21ab9e32/openjpa-project/src/doc/manual/ref_guide_runtime.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_runtime.xml?ref=560f89510239d75b1a0db97dffcb9cbc21ab9e32","patch":"@@ -103,30 +103,47 @@ allows you to convert between <classname>EntityManagerFactories</classname> and\n <classname>BrokerFactories</classname>, <classname>EntityManager</classname>s\n and <classname>Broker</classname>s.\n         </para>\n-        <section id=\"ref_guide_runtime_pmextension\">\n+        <section id=\"ref_guide_runtime_broker_finalization\">\n             <title>\n-                Broker Customization\n+                Broker Finalization\n             </title>\n-            <indexterm zone=\"ref_guide_runtime_pmextension\">\n+            <indexterm zone=\"ref_guide_runtime_broker_finalization\">\n                 <primary>\n-                    OpenJPAEntityManager\n+                    EntityManager\n                 </primary>\n                 <secondary>\n-                    extending\n+                    finalizing\n+                </secondary>\n+                <secondary>\n+                    clean-up\n                 </secondary>\n             </indexterm>\n             <para>\n-Some advanced users may want to add capabilities to OpenJPA's internal\n-<ulink url=\"../javadoc/org/apache/openjpa/kernel/BrokerImpl.html\"><classname>\n-org.apache.openjpa.kernel.BrokerImpl</classname></ulink>. You can configure\n-OpenJPA to use a custom subclass of <classname>BrokerImpl</classname> through\n-the <link linkend=\"openjpa.BrokerImpl\"><literal>openjpa.BrokerImpl</literal>\n-</link> configuration property. Set this property to the full class name of your\n-custom subclass.\n+The default OpenJPAEntityManager implementation automatically closes itself \n+during instance finalization. This guards against accidental resource leaks\n+that may occur if a developer fails to explicitly close EntityManagers when\n+finished with them, but it also incurs a scalability bottleneck, since the \n+JVM must perform synchronization during instance creation, and since the \n+finalizer thread will have more instances to monitor. To avoid this overhead,\n+set the <link linkend=\"openjpa.BrokerImpl\"><literal>openjpa.BrokerImpl</literal>\n+</link> configuration property to <literal>non-finalizing</literal>.\n             </para>\n+        </section>\n+        <section id=\"ref_guide_runtime_broker_extension\">\n+            <title>\n+                Broker Customization and Finalization\n+            </title>\n+            <indexterm zone=\"ref_guide_runtime_broker_extension\">\n+                <primary>\n+                    OpenJPAEntityManager\n+                </primary>\n+                <secondary>\n+                    extending\n+                </secondary>\n+            </indexterm>\n             <para>\n-As a <link linkend=\"ref_guide_conf_plugins\">plugin string</link>, you can also\n-use this property to configure the <classname> BrokerImpl</classname> with the\n+As a <link linkend=\"ref_guide_conf_plugins\">plugin string</link>, this property\n+can be used to configure the <classname> BrokerImpl</classname> with the\n following properties:\n             </para>\n             <itemizedlist>\n@@ -147,6 +164,22 @@ Defaults to <literal>false</literal>.\n &lt;property name=\"openjpa.BrokerImpl\" value=\"EvictFromDataCache=true\"/&gt;\n </programlisting>\n             </example>\n+            <para>\n+Additionally, some advanced users may want to add capabilities to OpenJPA's\n+internal <ulink url=\"../javadoc/org/apache/openjpa/kernel/BrokerImpl.html\">\n+<classname>org.apache.openjpa.kernel.BrokerImpl</classname></ulink>. You can \n+configure OpenJPA to use a custom subclass of <classname>BrokerImpl</classname> \n+with the <link linkend=\"openjpa.BrokerImpl\"><literal>openjpa.BrokerImpl\n+</literal></link> configuration property. Set this property to the full class \n+name of your custom subclass. When implementing your subclass, consider the\n+finalization issues mentioned in \n+<link linkend=\"ref_guide_runtime_broker_finalization\"/>. It may be appropriate\n+to create a subtype of both \n+<ulink url=\"../javadoc/org/apache/openjpa/kernel/BrokerImpl.html\">\n+<classname>org.apache.openjpa.kernel.BrokerImpl</classname></ulink> and\n+<ulink url=\"../javadoc/org/apache/openjpa/kernel/FinalizingBrokerImpl.html\">\n+<classname>org.apache.openjpa.kernel.FinalizingBrokerImpl</classname></ulink>.\n+            </para>\n         </section>\n     </section>\n     <section id=\"ref_guide_runtime_jpa\">"}]}

