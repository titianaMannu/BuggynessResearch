{"sha":"562b4942df21464b85b1a040019dde5936c06f0e","node_id":"MDY6Q29tbWl0MjA2MzY0OjU2MmI0OTQyZGYyMTQ2NGI4NWIxYTA0MDAxOWRkZTU5MzZjMDZmMGU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-09-28T14:36:49Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-09-28T14:36:49Z"},"message":"OPENJPA-1115:\nSetting svn:eol-style native on new files\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@819560 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6466e8b0ef6e8f2c55c2d1f652177a2ec342ee76","url":"https://api.github.com/repos/apache/openjpa/git/trees/6466e8b0ef6e8f2c55c2d1f652177a2ec342ee76"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/562b4942df21464b85b1a040019dde5936c06f0e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/562b4942df21464b85b1a040019dde5936c06f0e","html_url":"https://github.com/apache/openjpa/commit/562b4942df21464b85b1a040019dde5936c06f0e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/562b4942df21464b85b1a040019dde5936c06f0e/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"174f2af0ded2b32e949724b0027263a99d484960","url":"https://api.github.com/repos/apache/openjpa/commits/174f2af0ded2b32e949724b0027263a99d484960","html_url":"https://github.com/apache/openjpa/commit/174f2af0ded2b32e949724b0027263a99d484960"}],"stats":{"total":2514,"additions":1257,"deletions":1257},"files":[{"sha":"ffb68015a4232a1a89d755bda92e0f0b00be6a3b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityC.java","status":"modified","additions":181,"deletions":181,"changes":362,"blob_url":"https://github.com/apache/openjpa/blob/562b4942df21464b85b1a040019dde5936c06f0e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityC.java","raw_url":"https://github.com/apache/openjpa/raw/562b4942df21464b85b1a040019dde5936c06f0e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityC.java?ref=562b4942df21464b85b1a040019dde5936c06f0e","patch":"@@ -1,181 +1,181 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.delimited.identifiers.noschema;\r\n-\r\n-import java.util.Collection;\r\n-import java.util.HashMap;\r\n-import java.util.HashSet;\r\n-import java.util.Map;\r\n-\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.JoinColumn;\r\n-import javax.persistence.JoinTable;\r\n-import javax.persistence.ManyToMany;\r\n-import javax.persistence.MapKeyJoinColumn;\r\n-import javax.persistence.OneToOne;\r\n-import javax.persistence.PrimaryKeyJoinColumn;\r\n-import javax.persistence.SecondaryTable;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"\\\"entity c\\\"\")\r\n-@SecondaryTable(name=\"\\\"sec join table\\\"\",\r\n-    pkJoinColumns=@PrimaryKeyJoinColumn(name=\"\\\"entity c\\\"\",\r\n-        referencedColumnName=\"\\\"c id\\\"\"))\r\n-public class EntityC {\r\n-    @Id\r\n-    @Column(name=\"\\\"c id\\\"\")\r\n-    private int id;\r\n-    private String name;\r\n-    \r\n-    @Column(table=\"\\\"sec join table\\\"\")\r\n-    private String secName;\r\n-    \r\n-    @ManyToMany\r\n-    @JoinTable(name=\"\\\"c d\\\"\")\r\n-    private Collection<EntityD> entityDs = new HashSet<EntityD>();\r\n-    \r\n-    @OneToOne\r\n-    @JoinColumn(name=\"\\\"entd2 id\\\"\", referencedColumnName=\"\\\"entityD2 id\\\"\")\r\n-    private EntityD2 entityD2;\r\n-    \r\n-    @ManyToMany\r\n-    @JoinTable(name=\"\\\"map join table\\\"\")\r\n-    @MapKeyJoinColumn(name=\"map_ed3\", referencedColumnName=\"\\\"entityD3 id\\\"\")\r\n-    Map<EntityD3,EntityD4> map = new HashMap<EntityD3,EntityD4>();\r\n-    \r\n-    @ManyToMany\r\n-    @JoinTable(name=\"\\\"map2 join table\\\"\")\r\n-    @MapKeyJoinColumn(name=\"\\\"map ed4\\\"\", \r\n-        referencedColumnName=\"\\\"entityD4 id\\\"\")\r\n-    Map<EntityD4,EntityD3> map2 = new HashMap<EntityD4,EntityD3>();\r\n-    \r\n-    public EntityC() {}\r\n-    \r\n-    public EntityC(int id) {\r\n-        this.id = id;\r\n-    }\r\n-    \r\n-    /**\r\n-     * @return the id\r\n-     */\r\n-    public int getId() {\r\n-        return id;\r\n-    }\r\n-    /**\r\n-     * @param id the id to set\r\n-     */\r\n-    public void setId(int id) {\r\n-        this.id = id;\r\n-    }\r\n-    /**\r\n-     * @return the name\r\n-     */\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-    /**\r\n-     * @param name the name to set\r\n-     */\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-    /**\r\n-     * @return the entityDs\r\n-     */\r\n-    public Collection<EntityD> getEntityDs() {\r\n-        return entityDs;\r\n-    }\r\n-    /**\r\n-     * @param entityDs the entityDs to set\r\n-     */\r\n-    public void setEntityDs(Collection<EntityD> entityDs) {\r\n-        this.entityDs = entityDs;\r\n-    }\r\n-    \r\n-    public void addEntityD(EntityD entityD) {\r\n-        entityDs.add(entityD);\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the entityD2\r\n-     */\r\n-    public EntityD2 getEntityD2() {\r\n-        return entityD2;\r\n-    }\r\n-\r\n-    /**\r\n-     * @param entityD2 the entityD2 to set\r\n-     */\r\n-    public void setEntityD2(EntityD2 entityD2) {\r\n-        this.entityD2 = entityD2;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the map\r\n-     */\r\n-    public Map<EntityD3, EntityD4> getMap() {\r\n-        return map;\r\n-    }\r\n-\r\n-    /**\r\n-     * @param map the map to set\r\n-     */\r\n-    public void setMap(Map<EntityD3, EntityD4> map) {\r\n-        this.map = map;\r\n-    }\r\n-    \r\n-    public void addMapValues(EntityD3 key, EntityD4 value) {\r\n-        map.put(key, value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the map2\r\n-     */\r\n-    public Map<EntityD4, EntityD3> getMap2() {\r\n-        return map2;\r\n-    }\r\n-\r\n-    /**\r\n-     * @param map2 the map2 to set\r\n-     */\r\n-    public void setMap2(Map<EntityD4, EntityD3> map2) {\r\n-        this.map2 = map2;\r\n-    }\r\n-    \r\n-    public void addMap2Values(EntityD4 key, EntityD3 value) {\r\n-        map2.put(key, value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the secName\r\n-     */\r\n-    public String getSecName() {\r\n-        return secName;\r\n-    }\r\n-\r\n-    /**\r\n-     * @param secName the secName to set\r\n-     */\r\n-    public void setSecName(String secName) {\r\n-        this.secName = secName;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.delimited.identifiers.noschema;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.MapKeyJoinColumn;\n+import javax.persistence.OneToOne;\n+import javax.persistence.PrimaryKeyJoinColumn;\n+import javax.persistence.SecondaryTable;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"\\\"entity c\\\"\")\n+@SecondaryTable(name=\"\\\"sec join table\\\"\",\n+    pkJoinColumns=@PrimaryKeyJoinColumn(name=\"\\\"entity c\\\"\",\n+        referencedColumnName=\"\\\"c id\\\"\"))\n+public class EntityC {\n+    @Id\n+    @Column(name=\"\\\"c id\\\"\")\n+    private int id;\n+    private String name;\n+    \n+    @Column(table=\"\\\"sec join table\\\"\")\n+    private String secName;\n+    \n+    @ManyToMany\n+    @JoinTable(name=\"\\\"c d\\\"\")\n+    private Collection<EntityD> entityDs = new HashSet<EntityD>();\n+    \n+    @OneToOne\n+    @JoinColumn(name=\"\\\"entd2 id\\\"\", referencedColumnName=\"\\\"entityD2 id\\\"\")\n+    private EntityD2 entityD2;\n+    \n+    @ManyToMany\n+    @JoinTable(name=\"\\\"map join table\\\"\")\n+    @MapKeyJoinColumn(name=\"map_ed3\", referencedColumnName=\"\\\"entityD3 id\\\"\")\n+    Map<EntityD3,EntityD4> map = new HashMap<EntityD3,EntityD4>();\n+    \n+    @ManyToMany\n+    @JoinTable(name=\"\\\"map2 join table\\\"\")\n+    @MapKeyJoinColumn(name=\"\\\"map ed4\\\"\", \n+        referencedColumnName=\"\\\"entityD4 id\\\"\")\n+    Map<EntityD4,EntityD3> map2 = new HashMap<EntityD4,EntityD3>();\n+    \n+    public EntityC() {}\n+    \n+    public EntityC(int id) {\n+        this.id = id;\n+    }\n+    \n+    /**\n+     * @return the id\n+     */\n+    public int getId() {\n+        return id;\n+    }\n+    /**\n+     * @param id the id to set\n+     */\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+    /**\n+     * @return the name\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+    /**\n+     * @param name the name to set\n+     */\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    /**\n+     * @return the entityDs\n+     */\n+    public Collection<EntityD> getEntityDs() {\n+        return entityDs;\n+    }\n+    /**\n+     * @param entityDs the entityDs to set\n+     */\n+    public void setEntityDs(Collection<EntityD> entityDs) {\n+        this.entityDs = entityDs;\n+    }\n+    \n+    public void addEntityD(EntityD entityD) {\n+        entityDs.add(entityD);\n+    }\n+\n+    /**\n+     * @return the entityD2\n+     */\n+    public EntityD2 getEntityD2() {\n+        return entityD2;\n+    }\n+\n+    /**\n+     * @param entityD2 the entityD2 to set\n+     */\n+    public void setEntityD2(EntityD2 entityD2) {\n+        this.entityD2 = entityD2;\n+    }\n+\n+    /**\n+     * @return the map\n+     */\n+    public Map<EntityD3, EntityD4> getMap() {\n+        return map;\n+    }\n+\n+    /**\n+     * @param map the map to set\n+     */\n+    public void setMap(Map<EntityD3, EntityD4> map) {\n+        this.map = map;\n+    }\n+    \n+    public void addMapValues(EntityD3 key, EntityD4 value) {\n+        map.put(key, value);\n+    }\n+\n+    /**\n+     * @return the map2\n+     */\n+    public Map<EntityD4, EntityD3> getMap2() {\n+        return map2;\n+    }\n+\n+    /**\n+     * @param map2 the map2 to set\n+     */\n+    public void setMap2(Map<EntityD4, EntityD3> map2) {\n+        this.map2 = map2;\n+    }\n+    \n+    public void addMap2Values(EntityD4 key, EntityD3 value) {\n+        map2.put(key, value);\n+    }\n+\n+    /**\n+     * @return the secName\n+     */\n+    public String getSecName() {\n+        return secName;\n+    }\n+\n+    /**\n+     * @param secName the secName to set\n+     */\n+    public void setSecName(String secName) {\n+        this.secName = secName;\n+    }\n+}"},{"sha":"cba91fe17eba13bd6b64c31f550e498db1771bb9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD.java","status":"modified","additions":89,"deletions":89,"changes":178,"blob_url":"https://github.com/apache/openjpa/blob/562b4942df21464b85b1a040019dde5936c06f0e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD.java","raw_url":"https://github.com/apache/openjpa/raw/562b4942df21464b85b1a040019dde5936c06f0e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD.java?ref=562b4942df21464b85b1a040019dde5936c06f0e","patch":"@@ -1,89 +1,89 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.delimited.identifiers.noschema;\r\n-\r\n-import java.util.Collection;\r\n-import java.util.HashSet;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.ManyToMany;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"\\\"entity d\\\"\")\r\n-public class EntityD {\r\n-    @Id\r\n-    private int id;\r\n-    private String name;\r\n-    @ManyToMany(mappedBy=\"entityDs\")\r\n-    private Collection<EntityC> entityCs = new HashSet<EntityC>();\r\n-    \r\n-    public EntityD() {}\r\n-    \r\n-    public EntityD(int id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the id\r\n-     */\r\n-    public int getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    /**\r\n-     * @param id the id to set\r\n-     */\r\n-    public void setId(int id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the name\r\n-     */\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    /**\r\n-     * @param name the name to set\r\n-     */\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the entityCs\r\n-     */\r\n-    public Collection<EntityC> getEntityCs() {\r\n-        return entityCs;\r\n-    }\r\n-\r\n-    /**\r\n-     * @param entityCs the entityCs to set\r\n-     */\r\n-    public void setEntityCs(Collection<EntityC> entityCs) {\r\n-        this.entityCs = entityCs;\r\n-    }\r\n-    \r\n-    public void addEntityC(EntityC entityC) {\r\n-        entityCs.add(entityC);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.delimited.identifiers.noschema;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"\\\"entity d\\\"\")\n+public class EntityD {\n+    @Id\n+    private int id;\n+    private String name;\n+    @ManyToMany(mappedBy=\"entityDs\")\n+    private Collection<EntityC> entityCs = new HashSet<EntityC>();\n+    \n+    public EntityD() {}\n+    \n+    public EntityD(int id) {\n+        this.id = id;\n+    }\n+\n+    /**\n+     * @return the id\n+     */\n+    public int getId() {\n+        return id;\n+    }\n+\n+    /**\n+     * @param id the id to set\n+     */\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    /**\n+     * @return the name\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * @param name the name to set\n+     */\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    /**\n+     * @return the entityCs\n+     */\n+    public Collection<EntityC> getEntityCs() {\n+        return entityCs;\n+    }\n+\n+    /**\n+     * @param entityCs the entityCs to set\n+     */\n+    public void setEntityCs(Collection<EntityC> entityCs) {\n+        this.entityCs = entityCs;\n+    }\n+    \n+    public void addEntityC(EntityC entityC) {\n+        entityCs.add(entityC);\n+    }\n+}"},{"sha":"4e1485f55974e8d0395183b74a82c15f5e2f8871","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD2.java","status":"modified","additions":87,"deletions":87,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/562b4942df21464b85b1a040019dde5936c06f0e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD2.java","raw_url":"https://github.com/apache/openjpa/raw/562b4942df21464b85b1a040019dde5936c06f0e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD2.java?ref=562b4942df21464b85b1a040019dde5936c06f0e","patch":"@@ -1,87 +1,87 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.delimited.identifiers.noschema;\r\n-\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.OneToOne;\r\n-import javax.persistence.PrimaryKeyJoinColumn;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"\\\"entity d2\\\"\")\r\n-public class EntityD2 {\r\n-    @Id\r\n-    @Column(name=\"\\\"entityD2 id\\\"\")\r\n-    private int id;\r\n-    private String name;\r\n-    \r\n-    @OneToOne\r\n-    @PrimaryKeyJoinColumn\r\n-    private EntityD3 entityD3;\r\n-    \r\n-    public EntityD2() {}\r\n-    \r\n-    public EntityD2(int id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the id\r\n-     */\r\n-    public int getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    /**\r\n-     * @param id the id to set\r\n-     */\r\n-    public void setId(int id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the name\r\n-     */\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    /**\r\n-     * @param name the name to set\r\n-     */\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the entityD3\r\n-     */\r\n-    public EntityD3 getEntityD3() {\r\n-        return entityD3;\r\n-    }\r\n-\r\n-    /**\r\n-     * @param entityD3 the entityD3 to set\r\n-     */\r\n-    public void setEntityD3(EntityD3 entityD3) {\r\n-        this.entityD3 = entityD3;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.delimited.identifiers.noschema;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.PrimaryKeyJoinColumn;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"\\\"entity d2\\\"\")\n+public class EntityD2 {\n+    @Id\n+    @Column(name=\"\\\"entityD2 id\\\"\")\n+    private int id;\n+    private String name;\n+    \n+    @OneToOne\n+    @PrimaryKeyJoinColumn\n+    private EntityD3 entityD3;\n+    \n+    public EntityD2() {}\n+    \n+    public EntityD2(int id) {\n+        this.id = id;\n+    }\n+\n+    /**\n+     * @return the id\n+     */\n+    public int getId() {\n+        return id;\n+    }\n+\n+    /**\n+     * @param id the id to set\n+     */\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    /**\n+     * @return the name\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * @param name the name to set\n+     */\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    /**\n+     * @return the entityD3\n+     */\n+    public EntityD3 getEntityD3() {\n+        return entityD3;\n+    }\n+\n+    /**\n+     * @param entityD3 the entityD3 to set\n+     */\n+    public void setEntityD3(EntityD3 entityD3) {\n+        this.entityD3 = entityD3;\n+    }\n+}"},{"sha":"62e58c8afce616832aaeabc793e5954b807fe293","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD3.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/562b4942df21464b85b1a040019dde5936c06f0e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD3.java","raw_url":"https://github.com/apache/openjpa/raw/562b4942df21464b85b1a040019dde5936c06f0e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD3.java?ref=562b4942df21464b85b1a040019dde5936c06f0e","patch":"@@ -1,65 +1,65 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.delimited.identifiers.noschema;\r\n-\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"\\\"entity d3\\\"\")\r\n-public class EntityD3 {\r\n-    @Id\r\n-    @Column(name=\"\\\"entityD3 id\\\"\")\r\n-    int id;\r\n-    String name;\r\n-    \r\n-    public EntityD3() {}\r\n-    \r\n-    public EntityD3(int id) {\r\n-        this.id = id;\r\n-    }\r\n-    \r\n-    /**\r\n-     * @return the id\r\n-     */\r\n-    public int getId() {\r\n-        return id;\r\n-    }\r\n-    /**\r\n-     * @param id the id to set\r\n-     */\r\n-    public void setId(int id) {\r\n-        this.id = id;\r\n-    }\r\n-    /**\r\n-     * @return the name\r\n-     */\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-    /**\r\n-     * @param name the name to set\r\n-     */\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.delimited.identifiers.noschema;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"\\\"entity d3\\\"\")\n+public class EntityD3 {\n+    @Id\n+    @Column(name=\"\\\"entityD3 id\\\"\")\n+    int id;\n+    String name;\n+    \n+    public EntityD3() {}\n+    \n+    public EntityD3(int id) {\n+        this.id = id;\n+    }\n+    \n+    /**\n+     * @return the id\n+     */\n+    public int getId() {\n+        return id;\n+    }\n+    /**\n+     * @param id the id to set\n+     */\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+    /**\n+     * @return the name\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+    /**\n+     * @param name the name to set\n+     */\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+}"},{"sha":"f9d8564a05cfa5cb08f8d11f6ff580e3ec498c00","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD4.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/562b4942df21464b85b1a040019dde5936c06f0e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD4.java","raw_url":"https://github.com/apache/openjpa/raw/562b4942df21464b85b1a040019dde5936c06f0e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityD4.java?ref=562b4942df21464b85b1a040019dde5936c06f0e","patch":"@@ -1,65 +1,65 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.delimited.identifiers.noschema;\r\n-\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"\\\"entity d4\\\"\")\r\n-public class EntityD4 {\r\n-    @Id\r\n-    @Column(name=\"\\\"entityD4 id\\\"\")\r\n-    int id;\r\n-    String name;\r\n-    \r\n-    public EntityD4() {}\r\n-    \r\n-    public EntityD4(int id) {\r\n-        this.id = id;\r\n-    }\r\n-    \r\n-    /**\r\n-     * @return the id\r\n-     */\r\n-    public int getId() {\r\n-        return id;\r\n-    }\r\n-    /**\r\n-     * @param id the id to set\r\n-     */\r\n-    public void setId(int id) {\r\n-        this.id = id;\r\n-    }\r\n-    /**\r\n-     * @return the name\r\n-     */\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-    /**\r\n-     * @param name the name to set\r\n-     */\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.delimited.identifiers.noschema;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"\\\"entity d4\\\"\")\n+public class EntityD4 {\n+    @Id\n+    @Column(name=\"\\\"entityD4 id\\\"\")\n+    int id;\n+    String name;\n+    \n+    public EntityD4() {}\n+    \n+    public EntityD4(int id) {\n+        this.id = id;\n+    }\n+    \n+    /**\n+     * @return the id\n+     */\n+    public int getId() {\n+        return id;\n+    }\n+    /**\n+     * @param id the id to set\n+     */\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+    /**\n+     * @return the name\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+    /**\n+     * @param name the name to set\n+     */\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+}"},{"sha":"440be9f8dca5a9a1ee2f90bbe87b145b4368e31d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityE.java","status":"modified","additions":69,"deletions":69,"changes":138,"blob_url":"https://github.com/apache/openjpa/blob/562b4942df21464b85b1a040019dde5936c06f0e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityE.java","raw_url":"https://github.com/apache/openjpa/raw/562b4942df21464b85b1a040019dde5936c06f0e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityE.java?ref=562b4942df21464b85b1a040019dde5936c06f0e","patch":"@@ -1,69 +1,69 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.delimited.identifiers.noschema;\r\n-\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.GenerationType;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.SequenceGenerator;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"\\\"primary entityE\\\"\")\r\n-public class EntityE {\r\n-    @Id\r\n-    @SequenceGenerator(name=\"entityE_seq_gen_name\", \r\n-        sequenceName=\"\\\"entityE_seq_gen\\\"\")\r\n-    @GeneratedValue(strategy=GenerationType.SEQUENCE, \r\n-        generator=\"entityE_seq_gen_name\")\r\n-    private int id;\r\n-    @Column(name=\"e_name\")\r\n-    private String name;\r\n-    \r\n-    public EntityE(String name) {\r\n-        this.name = name;\r\n-    }\r\n-    \r\n-    /**\r\n-     * @return the id\r\n-     */\r\n-    public int getId() {\r\n-        return id;\r\n-    }\r\n-    /**\r\n-     * @param id the id to set\r\n-     */\r\n-    public void setId(int id) {\r\n-        this.id = id;\r\n-    }\r\n-    /**\r\n-     * @return the name\r\n-     */\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-    /**\r\n-     * @param name the name to set\r\n-     */\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.delimited.identifiers.noschema;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.SequenceGenerator;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"\\\"primary entityE\\\"\")\n+public class EntityE {\n+    @Id\n+    @SequenceGenerator(name=\"entityE_seq_gen_name\", \n+        sequenceName=\"\\\"entityE_seq_gen\\\"\")\n+    @GeneratedValue(strategy=GenerationType.SEQUENCE, \n+        generator=\"entityE_seq_gen_name\")\n+    private int id;\n+    @Column(name=\"e_name\")\n+    private String name;\n+    \n+    public EntityE(String name) {\n+        this.name = name;\n+    }\n+    \n+    /**\n+     * @return the id\n+     */\n+    public int getId() {\n+        return id;\n+    }\n+    /**\n+     * @param id the id to set\n+     */\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+    /**\n+     * @return the name\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+    /**\n+     * @param name the name to set\n+     */\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"5022f39c670764f74f8add2908ac7226e88b364c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityF.java","status":"modified","additions":212,"deletions":212,"changes":424,"blob_url":"https://github.com/apache/openjpa/blob/562b4942df21464b85b1a040019dde5936c06f0e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityF.java","raw_url":"https://github.com/apache/openjpa/raw/562b4942df21464b85b1a040019dde5936c06f0e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityF.java?ref=562b4942df21464b85b1a040019dde5936c06f0e","patch":"@@ -1,212 +1,212 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.delimited.identifiers.noschema;\r\n-\r\n-import java.util.HashMap;\r\n-import java.util.HashSet;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-\r\n-import javax.persistence.CollectionTable;\r\n-import javax.persistence.Column;\r\n-import javax.persistence.ElementCollection;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.GenerationType;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.MapKeyColumn;\r\n-import javax.persistence.SecondaryTable;\r\n-import javax.persistence.Table;\r\n-import javax.persistence.TableGenerator;\r\n-import javax.persistence.UniqueConstraint;\r\n-\r\n-@Entity\r\n-@Table(name=\"\\\"primary entityF\\\"\",\r\n-    uniqueConstraints=\r\n-        @UniqueConstraint(columnNames={\"\\\"f name\\\"\", \"f_nonDelimName\"}))\r\n-@SecondaryTable(name=\"\\\"secondary entityF\\\"\",\r\n-    uniqueConstraints=\r\n-        @UniqueConstraint(name=\"\\\"sec_unq\\\"\", \r\n-            columnNames={\"\\\"secondary name\\\"\"}))         \r\n-public class EntityF {\r\n-    @TableGenerator(name = \"f_id_gen\", table = \"\\\"f_id_gen\\\"\", \r\n-        pkColumnName = \"\\\"gen_pk\\\"\", valueColumnName = \"\\\"gen_value\\\"\")\r\n-    @GeneratedValue(strategy = GenerationType.TABLE, generator = \"f_id_gen\")\r\n-    @Id\r\n-    private int id;\r\n-    // Note: Delimited columnDefinition is not supported on some DBs\r\n-    // TODO: copy into a separate entity and conditionally run a different test\r\n-    @Column(name=\"\\\"f name\\\"\", columnDefinition=\"varchar(15)\")\r\n-    private String name;\r\n-    @Column(name=\"f_nonDelimName\")\r\n-    private String nonDelimName;\r\n-    @Column(name=\"\\\"secondary name\\\"\", table=\"\\\"secondary entityF\\\"\")\r\n-    private String secName;\r\n-    \r\n-    @ElementCollection\r\n-    // CollectionTable with default name generation\r\n-    @CollectionTable\r\n-    private Set<String> collectionSet = new HashSet<String>();\r\n-    \r\n-    @ElementCollection\r\n-    @CollectionTable(name=\"\\\"collectionDelimSet\\\"\")\r\n-    private Set<String> collectionDelimSet = new HashSet<String>();\r\n-    \r\n-    @ElementCollection\r\n-    // MapKeyColumn with default name generation\r\n-    @MapKeyColumn\r\n-    private Map<String, String> collectionMap = new HashMap<String, String>();\r\n-    \r\n-    @ElementCollection\r\n-    // Note: Delimited column definition is not supported on some DBs, so\r\n-    // it is not delimited here\r\n-    // TODO: create a separate entity and conditionally run the test on a supported DB\r\n-    @MapKeyColumn(name=\"\\\"mapKey\\\"\", columnDefinition=\"varchar(20)\", table=\"\\\"delim collection map\\\"\")\r\n-    private Map<String, String> delimCollectionMap = \r\n-        new HashMap<String, String>();\r\n-    \r\n-    public EntityF(String name) {\r\n-        this.name = name;\r\n-    }\r\n-    \r\n-    /**\r\n-     * @return the id\r\n-     */\r\n-    public int getId() {\r\n-        return id;\r\n-    }\r\n-    /**\r\n-     * @param id the id to set\r\n-     */\r\n-    public void setId(int id) {\r\n-        this.id = id;\r\n-    }\r\n-    /**\r\n-     * @return the name\r\n-     */\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-    /**\r\n-     * @param name the name to set\r\n-     */\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the nonDelimName\r\n-     */\r\n-    public String getNonDelimName() {\r\n-        return nonDelimName;\r\n-    }\r\n-\r\n-    /**\r\n-     * @param nonDelimName the nonDelimName to set\r\n-     */\r\n-    public void setNonDelimName(String nonDelimName) {\r\n-        this.nonDelimName = nonDelimName;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the secName\r\n-     */\r\n-    public String getSecName() {\r\n-        return secName;\r\n-    }\r\n-\r\n-    /**\r\n-     * @param secName the secName to set\r\n-     */\r\n-    public void setSecName(String secName) {\r\n-        this.secName = secName;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the collectionSet\r\n-     */\r\n-    public Set<String> getCollectionSet() {\r\n-        return collectionSet;\r\n-    }\r\n-\r\n-    /**\r\n-     * @param collectionSet the collectionSet to set\r\n-     */\r\n-    public void setCollectionSet(Set<String> collectionSet) {\r\n-        this.collectionSet = collectionSet;\r\n-    }\r\n-    \r\n-    public void addCollectionSet(String item) {\r\n-        collectionSet.add(item);\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the collectionNamedSet\r\n-     */\r\n-    public Set<String> getCollectionDelimSet() {\r\n-        return collectionDelimSet;\r\n-    }\r\n-\r\n-    /**\r\n-     * @param collectionNamedSet the collectionNamedSet to set\r\n-     */\r\n-    public void setCollectionDelimSet(Set<String> collectionDelimSet) {\r\n-        this.collectionDelimSet = collectionDelimSet;\r\n-    } \r\n-    \r\n-    public void addCollectionDelimSet(String item) {\r\n-        this.collectionDelimSet.add(item);\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the collectionMap\r\n-     */\r\n-    public Map<String, String> getCollectionMap() {\r\n-        return collectionMap;\r\n-    }\r\n-\r\n-    /**\r\n-     * @param collectionMap the collectionMap to set\r\n-     */\r\n-    public void setCollectionMap(Map<String, String> collectionMap) {\r\n-        this.collectionMap = collectionMap;\r\n-    }\r\n-\r\n-    public void addCollectionMap(String key, String value) {\r\n-        collectionMap.put(key, value);\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the delimCollectionMap\r\n-     */\r\n-    public Map<String, String> getDelimCollectionMap() {\r\n-        return delimCollectionMap;\r\n-    }\r\n-\r\n-    /**\r\n-     * @param delimCollectionMap the delimCollectionMap to set\r\n-     */\r\n-    public void setDelimCollectionMap(Map<String, String> delimCollectionMap) {\r\n-        this.delimCollectionMap = delimCollectionMap;\r\n-    }\r\n-    \r\n-    public void addDelimCollectionMap(String key, String value) {\r\n-        delimCollectionMap.put(key, value);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.delimited.identifiers.noschema;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.persistence.CollectionTable;\n+import javax.persistence.Column;\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.MapKeyColumn;\n+import javax.persistence.SecondaryTable;\n+import javax.persistence.Table;\n+import javax.persistence.TableGenerator;\n+import javax.persistence.UniqueConstraint;\n+\n+@Entity\n+@Table(name=\"\\\"primary entityF\\\"\",\n+    uniqueConstraints=\n+        @UniqueConstraint(columnNames={\"\\\"f name\\\"\", \"f_nonDelimName\"}))\n+@SecondaryTable(name=\"\\\"secondary entityF\\\"\",\n+    uniqueConstraints=\n+        @UniqueConstraint(name=\"\\\"sec_unq\\\"\", \n+            columnNames={\"\\\"secondary name\\\"\"}))         \n+public class EntityF {\n+    @TableGenerator(name = \"f_id_gen\", table = \"\\\"f_id_gen\\\"\", \n+        pkColumnName = \"\\\"gen_pk\\\"\", valueColumnName = \"\\\"gen_value\\\"\")\n+    @GeneratedValue(strategy = GenerationType.TABLE, generator = \"f_id_gen\")\n+    @Id\n+    private int id;\n+    // Note: Delimited columnDefinition is not supported on some DBs\n+    // TODO: copy into a separate entity and conditionally run a different test\n+    @Column(name=\"\\\"f name\\\"\", columnDefinition=\"varchar(15)\")\n+    private String name;\n+    @Column(name=\"f_nonDelimName\")\n+    private String nonDelimName;\n+    @Column(name=\"\\\"secondary name\\\"\", table=\"\\\"secondary entityF\\\"\")\n+    private String secName;\n+    \n+    @ElementCollection\n+    // CollectionTable with default name generation\n+    @CollectionTable\n+    private Set<String> collectionSet = new HashSet<String>();\n+    \n+    @ElementCollection\n+    @CollectionTable(name=\"\\\"collectionDelimSet\\\"\")\n+    private Set<String> collectionDelimSet = new HashSet<String>();\n+    \n+    @ElementCollection\n+    // MapKeyColumn with default name generation\n+    @MapKeyColumn\n+    private Map<String, String> collectionMap = new HashMap<String, String>();\n+    \n+    @ElementCollection\n+    // Note: Delimited column definition is not supported on some DBs, so\n+    // it is not delimited here\n+    // TODO: create a separate entity and conditionally run the test on a supported DB\n+    @MapKeyColumn(name=\"\\\"mapKey\\\"\", columnDefinition=\"varchar(20)\", table=\"\\\"delim collection map\\\"\")\n+    private Map<String, String> delimCollectionMap = \n+        new HashMap<String, String>();\n+    \n+    public EntityF(String name) {\n+        this.name = name;\n+    }\n+    \n+    /**\n+     * @return the id\n+     */\n+    public int getId() {\n+        return id;\n+    }\n+    /**\n+     * @param id the id to set\n+     */\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+    /**\n+     * @return the name\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+    /**\n+     * @param name the name to set\n+     */\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    /**\n+     * @return the nonDelimName\n+     */\n+    public String getNonDelimName() {\n+        return nonDelimName;\n+    }\n+\n+    /**\n+     * @param nonDelimName the nonDelimName to set\n+     */\n+    public void setNonDelimName(String nonDelimName) {\n+        this.nonDelimName = nonDelimName;\n+    }\n+\n+    /**\n+     * @return the secName\n+     */\n+    public String getSecName() {\n+        return secName;\n+    }\n+\n+    /**\n+     * @param secName the secName to set\n+     */\n+    public void setSecName(String secName) {\n+        this.secName = secName;\n+    }\n+\n+    /**\n+     * @return the collectionSet\n+     */\n+    public Set<String> getCollectionSet() {\n+        return collectionSet;\n+    }\n+\n+    /**\n+     * @param collectionSet the collectionSet to set\n+     */\n+    public void setCollectionSet(Set<String> collectionSet) {\n+        this.collectionSet = collectionSet;\n+    }\n+    \n+    public void addCollectionSet(String item) {\n+        collectionSet.add(item);\n+    }\n+\n+    /**\n+     * @return the collectionNamedSet\n+     */\n+    public Set<String> getCollectionDelimSet() {\n+        return collectionDelimSet;\n+    }\n+\n+    /**\n+     * @param collectionNamedSet the collectionNamedSet to set\n+     */\n+    public void setCollectionDelimSet(Set<String> collectionDelimSet) {\n+        this.collectionDelimSet = collectionDelimSet;\n+    } \n+    \n+    public void addCollectionDelimSet(String item) {\n+        this.collectionDelimSet.add(item);\n+    }\n+\n+    /**\n+     * @return the collectionMap\n+     */\n+    public Map<String, String> getCollectionMap() {\n+        return collectionMap;\n+    }\n+\n+    /**\n+     * @param collectionMap the collectionMap to set\n+     */\n+    public void setCollectionMap(Map<String, String> collectionMap) {\n+        this.collectionMap = collectionMap;\n+    }\n+\n+    public void addCollectionMap(String key, String value) {\n+        collectionMap.put(key, value);\n+    }\n+\n+    /**\n+     * @return the delimCollectionMap\n+     */\n+    public Map<String, String> getDelimCollectionMap() {\n+        return delimCollectionMap;\n+    }\n+\n+    /**\n+     * @param delimCollectionMap the delimCollectionMap to set\n+     */\n+    public void setDelimCollectionMap(Map<String, String> delimCollectionMap) {\n+        this.delimCollectionMap = delimCollectionMap;\n+    }\n+    \n+    public void addDelimCollectionMap(String key, String value) {\n+        delimCollectionMap.put(key, value);\n+    }\n+}"},{"sha":"5c2bf8fdd2ff0fb170c45d88dd661135a71e5d4d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityG.java","status":"modified","additions":68,"deletions":68,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/562b4942df21464b85b1a040019dde5936c06f0e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityG.java","raw_url":"https://github.com/apache/openjpa/raw/562b4942df21464b85b1a040019dde5936c06f0e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/EntityG.java?ref=562b4942df21464b85b1a040019dde5936c06f0e","patch":"@@ -1,68 +1,68 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.delimited.identifiers.noschema;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"\\\"entity d4\\\"\")\r\n-public class EntityG {\r\n-    @Id\r\n-    int id;\r\n-    String name;\r\n-    \r\n-    public EntityG() {}\r\n-    \r\n-    public EntityG(int id) {\r\n-        this.id = id;\r\n-    }\r\n-    \r\n-    public EntityG(int id, String name) {\r\n-        this.id = id;\r\n-        this.name = name;\r\n-    }\r\n-    \r\n-    /**\r\n-     * @return the id\r\n-     */\r\n-    public int getId() {\r\n-        return id;\r\n-    }\r\n-    /**\r\n-     * @param id the id to set\r\n-     */\r\n-    public void setId(int id) {\r\n-        this.id = id;\r\n-    }\r\n-    /**\r\n-     * @return the name\r\n-     */\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-    /**\r\n-     * @param name the name to set\r\n-     */\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.delimited.identifiers.noschema;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"\\\"entity d4\\\"\")\n+public class EntityG {\n+    @Id\n+    int id;\n+    String name;\n+    \n+    public EntityG() {}\n+    \n+    public EntityG(int id) {\n+        this.id = id;\n+    }\n+    \n+    public EntityG(int id, String name) {\n+        this.id = id;\n+        this.name = name;\n+    }\n+    \n+    /**\n+     * @return the id\n+     */\n+    public int getId() {\n+        return id;\n+    }\n+    /**\n+     * @param id the id to set\n+     */\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+    /**\n+     * @return the name\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+    /**\n+     * @param name the name to set\n+     */\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+}"},{"sha":"d688ad2a8f785565b9792f4b6660b54dcbdf153b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimId.java","status":"modified","additions":133,"deletions":133,"changes":266,"blob_url":"https://github.com/apache/openjpa/blob/562b4942df21464b85b1a040019dde5936c06f0e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimId.java","raw_url":"https://github.com/apache/openjpa/raw/562b4942df21464b85b1a040019dde5936c06f0e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimId.java?ref=562b4942df21464b85b1a040019dde5936c06f0e","patch":"@@ -1,133 +1,133 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.delimited.identifiers.noschema;\r\n-\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.Query;\r\n-\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.sql.DB2Dictionary;\r\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n-import org.apache.openjpa.jdbc.sql.DerbyDictionary;\r\n-import org.apache.openjpa.jdbc.sql.MySQLDictionary;\r\n-import org.apache.openjpa.jdbc.sql.OracleDictionary;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.test.AllowFailure;\r\n-import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n-\r\n-@AllowFailure(message=\"Temporarily allowing this test to fail until cleanup \" +\r\n-    \"order issues are resolved.\")\r\n-public class TestNoSchemaManualDelimId extends SQLListenerTestCase {\r\n-    OpenJPAEntityManager em;\r\n-    EntityF entityF;\r\n-    \r\n-    @Override\r\n-    public void setUp() throws Exception {\r\n-        \r\n-        // TODO: Delimiter support is currently limited to database that use\r\n-        // double quote as a delimiter.\r\n-        // Also Disabling DB2 until a SQLCODE -204 issue during the cleanup phase \r\n-        // is resolved.\r\n-        setUnsupportedDatabases(MySQLDictionary.class, DB2Dictionary.class);\r\n-        if (isTestsDisabled())\r\n-            return;\r\n-        \r\n-        super.setUp(\r\n-            org.apache.openjpa.persistence.delimited.identifiers.noschema.EntityF.class,\r\n-            DROP_TABLES);\r\n-        assertNotNull(emf);\r\n-\r\n-        em = emf.createEntityManager();\r\n-        assertNotNull(em);\r\n-    }\r\n-\r\n-    public void createEntityF() {\r\n-        entityF = new EntityF(\"fName\");\r\n-        entityF.setNonDelimName(\"fNonDelimName\");\r\n-        entityF.setSecName(\"sec name\");\r\n-        entityF.addCollectionSet(\"xxx\");\r\n-        entityF.addCollectionSet(\"yyy\");\r\n-        entityF.addCollectionDelimSet(\"aaa\");\r\n-        entityF.addCollectionDelimSet(\"bbb\");\r\n-        entityF.addCollectionMap(\"aaa\", \"xxx\");\r\n-        entityF.addCollectionMap(\"bbb\", \"yyy\");\r\n-        entityF.addDelimCollectionMap(\"www\", \"xxx\");\r\n-        entityF.addDelimCollectionMap(\"yyy\", \"zzz\");\r\n-    }\r\n-    \r\n-    public void testCreateF() {\r\n-        createEntityF();\r\n-        \r\n-        em.getTransaction().begin();\r\n-        em.persist(entityF);\r\n-        em.getTransaction().commit();\r\n-        \r\n-        runQueries();\r\n-        \r\n-    }\r\n-    \r\n-    // Run a second time to re-create a situation that initially caused a problem when running this\r\n-    // test consecutive times.\r\n-    public void testCreateF2() {\r\n-        createEntityF();\r\n-        \r\n-        em.getTransaction().begin();\r\n-        em.persist(entityF);\r\n-        em.getTransaction().commit();\r\n-    }\r\n-    \r\n-    private void runQueries() {\r\n-        em.clear();\r\n-        queryOnEntityOnly();\r\n-        em.clear();\r\n-        queryOnColumnValue();\r\n-        em.clear();\r\n-        queryCollection();\r\n-    }\r\n-    \r\n-    private void queryOnEntityOnly() {\r\n-        String query =\r\n-            \"SELECT DISTINCT f \" +\r\n-            \"FROM EntityF f\";\r\n-        Query q = em.createQuery(query);\r\n-        List<EntityF> results = (List<EntityF>)q.getResultList();\r\n-        assertEquals(1,results.size());\r\n-    }\r\n-    \r\n-    private void queryOnColumnValue() {\r\n-        String query =\r\n-            \"SELECT DISTINCT f \" +\r\n-            \"FROM EntityF f \" +\r\n-            \"WHERE f.name = 'fName'\";\r\n-        Query q = em.createQuery(query);\r\n-        List<EntityF> results = (List<EntityF>)q.getResultList();\r\n-        assertEquals(1,results.size());\r\n-    }\r\n-    \r\n-    private void queryCollection() {\r\n-        String query =\r\n-            \"SELECT DISTINCT f \" +\r\n-            \"FROM EntityF f, IN(f.collectionDelimSet) s \" +\r\n-            \"WHERE s = 'aaa'\";\r\n-        Query q = em.createQuery(query);\r\n-        List<EntityF> results = (List<EntityF>)q.getResultList();\r\n-        assertEquals(1,results.size());\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.delimited.identifiers.noschema;\n+\n+import java.util.List;\n+\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DB2Dictionary;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.DerbyDictionary;\n+import org.apache.openjpa.jdbc.sql.MySQLDictionary;\n+import org.apache.openjpa.jdbc.sql.OracleDictionary;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.AllowFailure;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+@AllowFailure(message=\"Temporarily allowing this test to fail until cleanup \" +\n+    \"order issues are resolved.\")\n+public class TestNoSchemaManualDelimId extends SQLListenerTestCase {\n+    OpenJPAEntityManager em;\n+    EntityF entityF;\n+    \n+    @Override\n+    public void setUp() throws Exception {\n+        \n+        // TODO: Delimiter support is currently limited to database that use\n+        // double quote as a delimiter.\n+        // Also Disabling DB2 until a SQLCODE -204 issue during the cleanup phase \n+        // is resolved.\n+        setUnsupportedDatabases(MySQLDictionary.class, DB2Dictionary.class);\n+        if (isTestsDisabled())\n+            return;\n+        \n+        super.setUp(\n+            org.apache.openjpa.persistence.delimited.identifiers.noschema.EntityF.class,\n+            DROP_TABLES);\n+        assertNotNull(emf);\n+\n+        em = emf.createEntityManager();\n+        assertNotNull(em);\n+    }\n+\n+    public void createEntityF() {\n+        entityF = new EntityF(\"fName\");\n+        entityF.setNonDelimName(\"fNonDelimName\");\n+        entityF.setSecName(\"sec name\");\n+        entityF.addCollectionSet(\"xxx\");\n+        entityF.addCollectionSet(\"yyy\");\n+        entityF.addCollectionDelimSet(\"aaa\");\n+        entityF.addCollectionDelimSet(\"bbb\");\n+        entityF.addCollectionMap(\"aaa\", \"xxx\");\n+        entityF.addCollectionMap(\"bbb\", \"yyy\");\n+        entityF.addDelimCollectionMap(\"www\", \"xxx\");\n+        entityF.addDelimCollectionMap(\"yyy\", \"zzz\");\n+    }\n+    \n+    public void testCreateF() {\n+        createEntityF();\n+        \n+        em.getTransaction().begin();\n+        em.persist(entityF);\n+        em.getTransaction().commit();\n+        \n+        runQueries();\n+        \n+    }\n+    \n+    // Run a second time to re-create a situation that initially caused a problem when running this\n+    // test consecutive times.\n+    public void testCreateF2() {\n+        createEntityF();\n+        \n+        em.getTransaction().begin();\n+        em.persist(entityF);\n+        em.getTransaction().commit();\n+    }\n+    \n+    private void runQueries() {\n+        em.clear();\n+        queryOnEntityOnly();\n+        em.clear();\n+        queryOnColumnValue();\n+        em.clear();\n+        queryCollection();\n+    }\n+    \n+    private void queryOnEntityOnly() {\n+        String query =\n+            \"SELECT DISTINCT f \" +\n+            \"FROM EntityF f\";\n+        Query q = em.createQuery(query);\n+        List<EntityF> results = (List<EntityF>)q.getResultList();\n+        assertEquals(1,results.size());\n+    }\n+    \n+    private void queryOnColumnValue() {\n+        String query =\n+            \"SELECT DISTINCT f \" +\n+            \"FROM EntityF f \" +\n+            \"WHERE f.name = 'fName'\";\n+        Query q = em.createQuery(query);\n+        List<EntityF> results = (List<EntityF>)q.getResultList();\n+        assertEquals(1,results.size());\n+    }\n+    \n+    private void queryCollection() {\n+        String query =\n+            \"SELECT DISTINCT f \" +\n+            \"FROM EntityF f, IN(f.collectionDelimSet) s \" +\n+            \"WHERE s = 'aaa'\";\n+        Query q = em.createQuery(query);\n+        List<EntityF> results = (List<EntityF>)q.getResultList();\n+        assertEquals(1,results.size());\n+    }\n+}"},{"sha":"99ddae8f93f1640f967bb6accbd6b2e736d75820","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimIdSeqGen.java","status":"modified","additions":119,"deletions":119,"changes":238,"blob_url":"https://github.com/apache/openjpa/blob/562b4942df21464b85b1a040019dde5936c06f0e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimIdSeqGen.java","raw_url":"https://github.com/apache/openjpa/raw/562b4942df21464b85b1a040019dde5936c06f0e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimIdSeqGen.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimIdSeqGen.java?ref=562b4942df21464b85b1a040019dde5936c06f0e","patch":"@@ -1,119 +1,119 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.delimited.identifiers.noschema;\r\n-\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.sql.DB2Dictionary;\r\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n-import org.apache.openjpa.jdbc.sql.MySQLDictionary;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.test.AllowFailure;\r\n-import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n-\r\n-@AllowFailure(message=\"Temporarily allowing this test to fail until cleanup \" +\r\n-    \"order issues are resolved.\")\r\n-public class TestNoSchemaManualDelimIdSeqGen extends SQLListenerTestCase {\r\n-    OpenJPAEntityManager em;\r\n-    JDBCConfiguration conf;\r\n-    DBDictionary dict;\r\n-    boolean supportsNativeSequence = false;\r\n-    \r\n-    EntityE entityE;\r\n-    \r\n-    @Override\r\n-    public void setUp() throws Exception {\r\n-\r\n-        // TODO: Delimiter support is currently limited to database that use\r\n-        // double quote as a delimiter.\r\n-        // Also Disabling DB2 until a SQLCODE -204 issue during the cleanup phase \r\n-        // is resolved.\r\n-        setUnsupportedDatabases(MySQLDictionary.class, DB2Dictionary.class);\r\n-        if (isTestsDisabled())\r\n-            return;\r\n-        \r\n-        super.setUp(EntityE.class, DROP_TABLES);\r\n-        assertNotNull(emf);\r\n-        \r\n-        conf = (JDBCConfiguration) emf.getConfiguration();\r\n-        dict = conf.getDBDictionaryInstance();\r\n-        supportsNativeSequence = dict.nextSequenceQuery != null;\r\n-        \r\n-        if (supportsNativeSequence) {\r\n-            em = emf.createEntityManager();\r\n-            assertNotNull(em);\r\n-        }\r\n-    }\r\n-    \r\n-    public void createEntityE() {\r\n-        entityE = new EntityE(\"e name\");\r\n-    }\r\n-    \r\n-    // TODO: temp\r\n-//    public void testDBCapability() {\r\n-//        Connection conn = (Connection)em.getConnection();\r\n-//        try {\r\n-//            DatabaseMetaData meta = conn.getMetaData();\r\n-//            System.out.println(\"LC - \" + \r\n-//                meta.storesLowerCaseIdentifiers());\r\n-//            System.out.println(\"LCQ - \" + \r\n-//                meta.storesLowerCaseQuotedIdentifiers());\r\n-//            System.out.println(\"MC - \" + \r\n-//                meta.storesMixedCaseIdentifiers());\r\n-//            System.out.println(\"MCQ - \" + \r\n-//                meta.storesMixedCaseQuotedIdentifiers());\r\n-//            System.out.println(\"UC - \" + \r\n-//                meta.storesUpperCaseIdentifiers());\r\n-//            System.out.println(\"UCQ - \" + \r\n-//                meta.storesUpperCaseQuotedIdentifiers());\r\n-//            \r\n-//            System.out.println(\"db product name - \" + \r\n-//                meta.getDatabaseProductName());\r\n-//            System.out.println(\"db product version - \" + \r\n-//                meta.getDatabaseProductVersion());\r\n-//            System.out.println(\"driver name - \" + \r\n-//                meta.getDriverName());\r\n-//            System.out.println(\"driver version - \" + \r\n-//                meta.getDriverVersion());\r\n-//        } catch (SQLException e) {\r\n-//            e.printStackTrace();\r\n-//        }\r\n-//    }\r\n-    \r\n-    public void testSeqGen() {\r\n-        if (!supportsNativeSequence) {\r\n-            return;\r\n-        }\r\n-        createEntityE();\r\n-        \r\n-        em.getTransaction().begin();\r\n-        em.persist(entityE);\r\n-        em.getTransaction().commit();\r\n-        \r\n-        System.out.println(super.toString(sql));\r\n-        \r\n-        int genId = entityE.getId();\r\n-        em.clear();\r\n-        em.getTransaction().begin();\r\n-        EntityE eA = em.find(EntityE.class, genId);\r\n-        assertEquals(\"e name\", eA.getName());\r\n-        \r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.delimited.identifiers.noschema;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DB2Dictionary;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.MySQLDictionary;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.AllowFailure;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+@AllowFailure(message=\"Temporarily allowing this test to fail until cleanup \" +\n+    \"order issues are resolved.\")\n+public class TestNoSchemaManualDelimIdSeqGen extends SQLListenerTestCase {\n+    OpenJPAEntityManager em;\n+    JDBCConfiguration conf;\n+    DBDictionary dict;\n+    boolean supportsNativeSequence = false;\n+    \n+    EntityE entityE;\n+    \n+    @Override\n+    public void setUp() throws Exception {\n+\n+        // TODO: Delimiter support is currently limited to database that use\n+        // double quote as a delimiter.\n+        // Also Disabling DB2 until a SQLCODE -204 issue during the cleanup phase \n+        // is resolved.\n+        setUnsupportedDatabases(MySQLDictionary.class, DB2Dictionary.class);\n+        if (isTestsDisabled())\n+            return;\n+        \n+        super.setUp(EntityE.class, DROP_TABLES);\n+        assertNotNull(emf);\n+        \n+        conf = (JDBCConfiguration) emf.getConfiguration();\n+        dict = conf.getDBDictionaryInstance();\n+        supportsNativeSequence = dict.nextSequenceQuery != null;\n+        \n+        if (supportsNativeSequence) {\n+            em = emf.createEntityManager();\n+            assertNotNull(em);\n+        }\n+    }\n+    \n+    public void createEntityE() {\n+        entityE = new EntityE(\"e name\");\n+    }\n+    \n+    // TODO: temp\n+//    public void testDBCapability() {\n+//        Connection conn = (Connection)em.getConnection();\n+//        try {\n+//            DatabaseMetaData meta = conn.getMetaData();\n+//            System.out.println(\"LC - \" + \n+//                meta.storesLowerCaseIdentifiers());\n+//            System.out.println(\"LCQ - \" + \n+//                meta.storesLowerCaseQuotedIdentifiers());\n+//            System.out.println(\"MC - \" + \n+//                meta.storesMixedCaseIdentifiers());\n+//            System.out.println(\"MCQ - \" + \n+//                meta.storesMixedCaseQuotedIdentifiers());\n+//            System.out.println(\"UC - \" + \n+//                meta.storesUpperCaseIdentifiers());\n+//            System.out.println(\"UCQ - \" + \n+//                meta.storesUpperCaseQuotedIdentifiers());\n+//            \n+//            System.out.println(\"db product name - \" + \n+//                meta.getDatabaseProductName());\n+//            System.out.println(\"db product version - \" + \n+//                meta.getDatabaseProductVersion());\n+//            System.out.println(\"driver name - \" + \n+//                meta.getDriverName());\n+//            System.out.println(\"driver version - \" + \n+//                meta.getDriverVersion());\n+//        } catch (SQLException e) {\n+//            e.printStackTrace();\n+//        }\n+//    }\n+    \n+    public void testSeqGen() {\n+        if (!supportsNativeSequence) {\n+            return;\n+        }\n+        createEntityE();\n+        \n+        em.getTransaction().begin();\n+        em.persist(entityE);\n+        em.getTransaction().commit();\n+        \n+        System.out.println(super.toString(sql));\n+        \n+        int genId = entityE.getId();\n+        em.clear();\n+        em.getTransaction().begin();\n+        EntityE eA = em.find(EntityE.class, genId);\n+        assertEquals(\"e name\", eA.getName());\n+        \n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+}"},{"sha":"8b75239b8352afb993456740eeec0b0cf2d1c73d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimitedJoinAnnotations.java","status":"modified","additions":169,"deletions":169,"changes":338,"blob_url":"https://github.com/apache/openjpa/blob/562b4942df21464b85b1a040019dde5936c06f0e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimitedJoinAnnotations.java","raw_url":"https://github.com/apache/openjpa/raw/562b4942df21464b85b1a040019dde5936c06f0e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimitedJoinAnnotations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/noschema/TestNoSchemaManualDelimitedJoinAnnotations.java?ref=562b4942df21464b85b1a040019dde5936c06f0e","patch":"@@ -1,169 +1,169 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.delimited.identifiers.noschema;\r\n-\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.Query;\r\n-\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.sql.DB2Dictionary;\r\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n-import org.apache.openjpa.jdbc.sql.MySQLDictionary;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.test.AllowFailure;\r\n-import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n-\r\n-@AllowFailure(message=\"Temporarily allowing this test to fail until cleanup \" +\r\n-    \"order issues are resolved.\")\r\n-public class TestNoSchemaManualDelimitedJoinAnnotations extends SQLListenerTestCase {\r\n-    OpenJPAEntityManager em;\r\n-    int id = 0;\r\n-    EntityC entityC;\r\n-    EntityD entityD;\r\n-    EntityD2 entityD2;\r\n-    EntityD3 entityD3;\r\n-    EntityD4 entityD4;\r\n-    JDBCConfiguration conf;\r\n-    DBDictionary dict;\r\n-    \r\n-    @Override\r\n-    public void setUp() throws Exception {\r\n-        \r\n-        // TODO: Delimiter support is currently limited to database that use\r\n-        // double quote as a delimiter.\r\n-        // Also Disabling DB2 until a SQLCODE -204 issue during the cleanup phase \r\n-        // is resolved.\r\n-        setUnsupportedDatabases(MySQLDictionary.class, DB2Dictionary.class);\r\n-        if (isTestsDisabled())\r\n-            return;\r\n-\r\n-        super.setUp(\r\n-            org.apache.openjpa.persistence.delimited.identifiers.noschema.EntityC.class,\r\n-            org.apache.openjpa.persistence.delimited.identifiers.noschema.EntityD.class,\r\n-            org.apache.openjpa.persistence.delimited.identifiers.noschema.EntityD2.class,\r\n-            org.apache.openjpa.persistence.delimited.identifiers.noschema.EntityD3.class,\r\n-            org.apache.openjpa.persistence.delimited.identifiers.noschema.EntityD4.class,\r\n-            DROP_TABLES);\r\n-        assertNotNull(emf);\r\n-        \r\n-        em = emf.createEntityManager();\r\n-        assertNotNull(em);\r\n-        \r\n-        conf = (JDBCConfiguration) emf.getConfiguration();\r\n-        dict = conf.getDBDictionaryInstance();\r\n-    }\r\n-    \r\n-    private void createCandD(int id) {\r\n-        entityC = new EntityC(id);\r\n-        entityC.setName(\"ec\");\r\n-        entityC.setSecName(\"secName1\");\r\n-        \r\n-        entityD = new EntityD(id);\r\n-        entityD.setName(\"ed\");\r\n-        \r\n-        entityD2 = new EntityD2(id);\r\n-        entityD2.setName(\"ed2\");\r\n-        \r\n-        entityD3 = new EntityD3(id);\r\n-        entityD3.setName(\"ed3\");\r\n-        \r\n-        entityD4 = new EntityD4(id);\r\n-        entityD4.setName(\"ed4\");\r\n-        \r\n-        entityC.addEntityD(entityD);\r\n-        entityD.addEntityC(entityC);\r\n-        \r\n-        entityC.setEntityD2(entityD2);\r\n-        \r\n-        entityC.addMapValues(entityD3, entityD4);\r\n-        entityC.addMap2Values(entityD4, entityD3);\r\n-        \r\n-        entityD2.setEntityD3(entityD3);\r\n-    }\r\n-    \r\n-    public void testCreate() {\r\n-        id++;\r\n-        createCandD(id);\r\n-        // TODO: Maybe create another one.\r\n-        \r\n-        em.getTransaction().begin();\r\n-        em.persist(entityC);\r\n-        em.persist(entityD);\r\n-        em.persist(entityD2);\r\n-        em.persist(entityD3);\r\n-        em.persist(entityD4);\r\n-        em.getTransaction().commit();\r\n-        \r\n-        runQueries();\r\n-    }\r\n-    \r\n-    private void runQueries() {\r\n-        em.clear();\r\n-        queryJoinTable();\r\n-        em.clear();\r\n-        queryJoinColumn();\r\n-        em.clear();\r\n-        querySecondaryTableValue();\r\n-        em.clear();\r\n-        queryMapValue();\r\n-    }\r\n-    \r\n-    private void queryJoinTable() {\r\n-        String query =\r\n-            \"SELECT c \" +\r\n-            \"FROM EntityC c JOIN c.entityDs d \" +\r\n-            \"WHERE d.name = 'ed'\";\r\n-        Query q = em.createQuery(query);\r\n-        List<EntityC> results = (List<EntityC>)q.getResultList();\r\n-        assertEquals(1,results.size());\r\n-    }\r\n-    \r\n-    private void queryJoinColumn() {\r\n-        String query = \r\n-            \"SELECT c \" +\r\n-            \"FROM EntityC c JOIN c.entityD2 d2 \" +\r\n-            \"WHERE d2.name = 'ed2'\";\r\n-        Query q = em.createQuery(query);\r\n-        List<EntityC> results = (List<EntityC>)q.getResultList();\r\n-        assertEquals(1,results.size());\r\n-    }\r\n-    \r\n-    private void querySecondaryTableValue() {\r\n-        String query = \r\n-            \"SELECT c \" +\r\n-            \"FROM EntityC c \" +\r\n-            \"WHERE c.secName = 'secName1'\";\r\n-        Query q = em.createQuery(query);\r\n-        List<EntityC> results = (List<EntityC>)q.getResultList();\r\n-        assertEquals(1,results.size());\r\n-    }\r\n-    \r\n-    private void queryMapValue() {\r\n-        String query =\r\n-            \"SELECT c \" +\r\n-            \"FROM EntityC c, IN(c.map2) m \" +\r\n-            \"WHERE m.name = 'ed3'\";\r\n-        Query q = em.createQuery(query);\r\n-        List<EntityC> results = (List<EntityC>)q.getResultList();\r\n-        assertEquals(1,results.size());\r\n-    }\r\n-        \r\n-      \r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.delimited.identifiers.noschema;\n+\n+import java.util.List;\n+\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DB2Dictionary;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.MySQLDictionary;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.AllowFailure;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+@AllowFailure(message=\"Temporarily allowing this test to fail until cleanup \" +\n+    \"order issues are resolved.\")\n+public class TestNoSchemaManualDelimitedJoinAnnotations extends SQLListenerTestCase {\n+    OpenJPAEntityManager em;\n+    int id = 0;\n+    EntityC entityC;\n+    EntityD entityD;\n+    EntityD2 entityD2;\n+    EntityD3 entityD3;\n+    EntityD4 entityD4;\n+    JDBCConfiguration conf;\n+    DBDictionary dict;\n+    \n+    @Override\n+    public void setUp() throws Exception {\n+        \n+        // TODO: Delimiter support is currently limited to database that use\n+        // double quote as a delimiter.\n+        // Also Disabling DB2 until a SQLCODE -204 issue during the cleanup phase \n+        // is resolved.\n+        setUnsupportedDatabases(MySQLDictionary.class, DB2Dictionary.class);\n+        if (isTestsDisabled())\n+            return;\n+\n+        super.setUp(\n+            org.apache.openjpa.persistence.delimited.identifiers.noschema.EntityC.class,\n+            org.apache.openjpa.persistence.delimited.identifiers.noschema.EntityD.class,\n+            org.apache.openjpa.persistence.delimited.identifiers.noschema.EntityD2.class,\n+            org.apache.openjpa.persistence.delimited.identifiers.noschema.EntityD3.class,\n+            org.apache.openjpa.persistence.delimited.identifiers.noschema.EntityD4.class,\n+            DROP_TABLES);\n+        assertNotNull(emf);\n+        \n+        em = emf.createEntityManager();\n+        assertNotNull(em);\n+        \n+        conf = (JDBCConfiguration) emf.getConfiguration();\n+        dict = conf.getDBDictionaryInstance();\n+    }\n+    \n+    private void createCandD(int id) {\n+        entityC = new EntityC(id);\n+        entityC.setName(\"ec\");\n+        entityC.setSecName(\"secName1\");\n+        \n+        entityD = new EntityD(id);\n+        entityD.setName(\"ed\");\n+        \n+        entityD2 = new EntityD2(id);\n+        entityD2.setName(\"ed2\");\n+        \n+        entityD3 = new EntityD3(id);\n+        entityD3.setName(\"ed3\");\n+        \n+        entityD4 = new EntityD4(id);\n+        entityD4.setName(\"ed4\");\n+        \n+        entityC.addEntityD(entityD);\n+        entityD.addEntityC(entityC);\n+        \n+        entityC.setEntityD2(entityD2);\n+        \n+        entityC.addMapValues(entityD3, entityD4);\n+        entityC.addMap2Values(entityD4, entityD3);\n+        \n+        entityD2.setEntityD3(entityD3);\n+    }\n+    \n+    public void testCreate() {\n+        id++;\n+        createCandD(id);\n+        // TODO: Maybe create another one.\n+        \n+        em.getTransaction().begin();\n+        em.persist(entityC);\n+        em.persist(entityD);\n+        em.persist(entityD2);\n+        em.persist(entityD3);\n+        em.persist(entityD4);\n+        em.getTransaction().commit();\n+        \n+        runQueries();\n+    }\n+    \n+    private void runQueries() {\n+        em.clear();\n+        queryJoinTable();\n+        em.clear();\n+        queryJoinColumn();\n+        em.clear();\n+        querySecondaryTableValue();\n+        em.clear();\n+        queryMapValue();\n+    }\n+    \n+    private void queryJoinTable() {\n+        String query =\n+            \"SELECT c \" +\n+            \"FROM EntityC c JOIN c.entityDs d \" +\n+            \"WHERE d.name = 'ed'\";\n+        Query q = em.createQuery(query);\n+        List<EntityC> results = (List<EntityC>)q.getResultList();\n+        assertEquals(1,results.size());\n+    }\n+    \n+    private void queryJoinColumn() {\n+        String query = \n+            \"SELECT c \" +\n+            \"FROM EntityC c JOIN c.entityD2 d2 \" +\n+            \"WHERE d2.name = 'ed2'\";\n+        Query q = em.createQuery(query);\n+        List<EntityC> results = (List<EntityC>)q.getResultList();\n+        assertEquals(1,results.size());\n+    }\n+    \n+    private void querySecondaryTableValue() {\n+        String query = \n+            \"SELECT c \" +\n+            \"FROM EntityC c \" +\n+            \"WHERE c.secName = 'secName1'\";\n+        Query q = em.createQuery(query);\n+        List<EntityC> results = (List<EntityC>)q.getResultList();\n+        assertEquals(1,results.size());\n+    }\n+    \n+    private void queryMapValue() {\n+        String query =\n+            \"SELECT c \" +\n+            \"FROM EntityC c, IN(c.map2) m \" +\n+            \"WHERE m.name = 'ed3'\";\n+        Query q = em.createQuery(query);\n+        List<EntityC> results = (List<EntityC>)q.getResultList();\n+        assertEquals(1,results.size());\n+    }\n+        \n+      \n+}"}]}

