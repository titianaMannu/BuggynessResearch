{"sha":"5632d5ab0abf661ba00e903ef740efc459c6a8fb","node_id":"MDY6Q29tbWl0MjA2MzY0OjU2MzJkNWFiMGFiZjY2MWJhMDBlOTAzZWY3NDBlZmM0NTljNmE4ZmI=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2013-02-21T14:39:07Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2013-02-21T14:39:07Z"},"message":"OPENJPA-2330: Fix StackoverflowError when checking if a field is loaded. Test contributed by Guillaume Chauvet.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1448662 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e7d5663bc2b71ef54b46ef1972c82ce6f3a1c665","url":"https://api.github.com/repos/apache/openjpa/git/trees/e7d5663bc2b71ef54b46ef1972c82ce6f3a1c665"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5632d5ab0abf661ba00e903ef740efc459c6a8fb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5632d5ab0abf661ba00e903ef740efc459c6a8fb","html_url":"https://github.com/apache/openjpa/commit/5632d5ab0abf661ba00e903ef740efc459c6a8fb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5632d5ab0abf661ba00e903ef740efc459c6a8fb/comments","author":null,"committer":null,"parents":[{"sha":"fd5cc0436cfdf426304a07cf950609094b46d8f4","url":"https://api.github.com/repos/apache/openjpa/commits/fd5cc0436cfdf426304a07cf950609094b46d8f4","html_url":"https://github.com/apache/openjpa/commit/fd5cc0436cfdf426304a07cf950609094b46d8f4"}],"stats":{"total":264,"additions":264,"deletions":0},"files":[{"sha":"45e41e67f444f4a4e7f36006b62742e8e4836b61","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestOpenJPA2330.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/5632d5ab0abf661ba00e903ef740efc459c6a8fb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestOpenJPA2330.java","raw_url":"https://github.com/apache/openjpa/raw/5632d5ab0abf661ba00e903ef740efc459c6a8fb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestOpenJPA2330.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestOpenJPA2330.java?ref=5632d5ab0abf661ba00e903ef740efc459c6a8fb","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.spi.LoadState;\n+\n+import org.apache.openjpa.persistence.entity.EntityA;\n+import org.apache.openjpa.persistence.entity.EntityB;\n+import org.apache.openjpa.persistence.entity.EntityC;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ *\n+ */\n+public class TestOpenJPA2330 extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(EntityA.class, EntityB.class, EntityC.class);\n+    }\n+    \n+    public void testOpenJPA2330() {\n+        final EntityManager em = emf.createEntityManager();\n+\n+        EntityA a = new EntityA();\n+        EntityB b = new EntityB(a);\n+        // set back pointer\n+        a.getBs().add(b);\n+        \n+        EntityC c = new EntityC(b);\n+        // set back pointer\n+        b.getCs().add(c);\n+\n+        em.persist(a);\n+        em.persist(b);\n+        em.persist(c);\n+        \n+        assertEquals(LoadState.LOADED, OpenJPAPersistenceUtil.isLoaded(b, \"center\"));\n+\n+        em.close();\n+    }\n+}"},{"sha":"3746f76f0b7253bcb5e9791015a84d36dfd4e432","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entity/EntityA.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/5632d5ab0abf661ba00e903ef740efc459c6a8fb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entity/EntityA.java","raw_url":"https://github.com/apache/openjpa/raw/5632d5ab0abf661ba00e903ef740efc459c6a8fb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entity/EntityA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entity/EntityA.java?ref=5632d5ab0abf661ba00e903ef740efc459c6a8fb","patch":"@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.entity;\n+\n+import java.io.Serializable;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OrderColumn;\n+\n+@Entity\n+public class EntityA implements Serializable {\n+\n+    private static final long serialVersionUID = 0L;\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private long id;\n+\n+    private String name;\n+\n+    @OneToMany(fetch = FetchType.EAGER, mappedBy = \"center\", orphanRemoval = true, cascade = CascadeType.ALL)\n+    @OrderColumn\n+    private Set<EntityB> services = new LinkedHashSet<EntityB>();\n+\n+    public EntityA() {\n+    }\n+\n+    public EntityA(String name) {\n+        this.name = name;\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public Set<EntityB> getBs() {\n+        return services;\n+    }\n+}"},{"sha":"df7b1cf7d80efd26546e64d555d02617370cf397","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entity/EntityB.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/5632d5ab0abf661ba00e903ef740efc459c6a8fb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entity/EntityB.java","raw_url":"https://github.com/apache/openjpa/raw/5632d5ab0abf661ba00e903ef740efc459c6a8fb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entity/EntityB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entity/EntityB.java?ref=5632d5ab0abf661ba00e903ef740efc459c6a8fb","patch":"@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.entity;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OrderColumn;\n+\n+@Entity\n+public class EntityB {\n+    private static final long serialVersionUID = 0L;\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private long id;\n+\n+    private String name;\n+\n+    @ManyToOne(cascade = { CascadeType.DETACH, CascadeType.MERGE, CascadeType.PERSIST })\n+    private EntityA center;\n+\n+    @OneToMany(fetch = FetchType.EAGER, mappedBy = \"service\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    private Set<EntityC> linacs;\n+\n+    public EntityB() {\n+    }\n+\n+    public EntityB(EntityA center) {\n+        this.center = center;\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public EntityA getCenter() {\n+        return center;\n+    }\n+\n+    public void setCenter(EntityA center) {\n+        this.center = center;\n+    }\n+\n+    public Set<EntityC> getCs() {\n+        if (linacs == null)\n+            linacs = new HashSet<EntityC>();\n+        return linacs;\n+    }\n+}"},{"sha":"bdb34c6370c5e249a53fb4a40217067448d06c13","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entity/EntityC.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/5632d5ab0abf661ba00e903ef740efc459c6a8fb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entity/EntityC.java","raw_url":"https://github.com/apache/openjpa/raw/5632d5ab0abf661ba00e903ef740efc459c6a8fb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entity/EntityC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entity/EntityC.java?ref=5632d5ab0abf661ba00e903ef740efc459c6a8fb","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.entity;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class EntityC {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    protected long id;\n+\n+    @Version\n+    int version;\n+\n+    @ManyToOne(cascade = { CascadeType.DETACH, CascadeType.MERGE, CascadeType.PERSIST })\n+    private EntityB service;\n+\n+    public EntityC() {\n+    }\n+\n+    public EntityC(EntityB service) {\n+        this.service = service;\n+    }\n+\n+    public EntityB getService() {\n+        return service;\n+    }\n+}"},{"sha":"3144789d0e63867054f52d205a1a3a2428f58e41","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistenceUtil.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/5632d5ab0abf661ba00e903ef740efc459c6a8fb/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistenceUtil.java","raw_url":"https://github.com/apache/openjpa/raw/5632d5ab0abf661ba00e903ef740efc459c6a8fb/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistenceUtil.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistenceUtil.java?ref=5632d5ab0abf661ba00e903ef740efc459c6a8fb","patch":"@@ -152,6 +152,9 @@ private static LoadState isLoaded(OpenJPAStateManager sm, String attr,\n                     return LoadState.NOT_LOADED;\n                 }\n             }\n+            if (pcs != null && pcs.contains(sm)) {\n+                return LoadState.LOADED;\n+            }\n             FieldMetaData[] fmds = sm.getMetaData().getFields();\n             // Check load state of all persistent eager fetch attributes\n             if (fmds != null && fmds.length > 0) {"}]}

