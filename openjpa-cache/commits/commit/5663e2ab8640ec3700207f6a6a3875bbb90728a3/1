{"sha":"5663e2ab8640ec3700207f6a6a3875bbb90728a3","node_id":"MDY6Q29tbWl0MjA2MzY0OjU2NjNlMmFiODY0MGVjMzcwMDIwN2Y2YTZhMzg3NWJiYjkwNzI4YTM=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-07-14T03:46:44Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-07-14T03:46:44Z"},"message":"OPENJPA-51 Incorrect SQL with syntax error for JPQL subqueries\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@676467 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0781d7645ef0d05bf900613a3bfff6d7327bbe2a","url":"https://api.github.com/repos/apache/openjpa/git/trees/0781d7645ef0d05bf900613a3bfff6d7327bbe2a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5663e2ab8640ec3700207f6a6a3875bbb90728a3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5663e2ab8640ec3700207f6a6a3875bbb90728a3","html_url":"https://github.com/apache/openjpa/commit/5663e2ab8640ec3700207f6a6a3875bbb90728a3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5663e2ab8640ec3700207f6a6a3875bbb90728a3/comments","author":null,"committer":null,"parents":[{"sha":"577c97446381fde7e969380c8374cd292e9f242d","url":"https://api.github.com/repos/apache/openjpa/commits/577c97446381fde7e969380c8374cd292e9f242d","html_url":"https://github.com/apache/openjpa/commit/577c97446381fde7e969380c8374cd292e9f242d"}],"stats":{"total":447,"additions":445,"deletions":2},"files":[{"sha":"fdf8fca254a253885e17520d200a103a66643ef5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":64,"deletions":2,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/5663e2ab8640ec3700207f6a6a3875bbb90728a3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/5663e2ab8640ec3700207f6a6a3875bbb90728a3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=5663e2ab8640ec3700207f6a6a3875bbb90728a3","patch":"@@ -470,6 +470,63 @@ public void setParent(Select parent, String path) {\n             else\n                 _joinSyntax = _parent._joinSyntax;\n         }\n+        \n+        if (_parent.getAliases() == null || _subPath == null)\n+            return;\n+        \n+        // resolve aliases for subselect from parent\n+        Set entries = _parent.getAliases().entrySet();\n+        Iterator it = entries.iterator();\n+        while (it.hasNext()) {\n+        \tMap.Entry entry = (Map.Entry) it.next();\n+            Object key = entry.getKey();\n+            Integer alias = (Integer) entry.getValue();\n+            if (key.toString().indexOf(_subPath) != -1) {\n+                if (_aliases == null)\n+                    _aliases = new HashMap();\n+                _aliases.put(key, alias);\n+\n+                Object tableString = _parent.getTables().get(alias);\n+                if (_tables == null)\n+                    _tables = new TreeMap();\n+                _tables.put(alias, tableString);\n+                \n+                _removedAliasFromParent.set(alias.intValue());\n+            }\n+        }\n+        \n+        if (_aliases != null) {\n+            // aliases moved into subselect should be removed from parent\n+            entries = _aliases.entrySet();\n+            it = entries.iterator();\n+            while (it.hasNext()) {\n+            \tMap.Entry entry = (Map.Entry) it.next();\n+                Object key = entry.getKey();\n+                Integer alias = (Integer) entry.getValue();\n+                if (key.toString().indexOf(_subPath) != -1) {\n+                    _parent.removeAlias(key);\n+\n+                    Object tableString = _parent.getTables().get(alias);\n+                    _parent.removeTable(alias);\n+                }\n+            }\n+        }\n+    }\n+    \n+    public Map getAliases() {\n+        return _aliases;\n+    }\n+    \n+    public void removeAlias(Object key) {\n+        _aliases.remove(key);\n+    }\n+    \n+    public Map getTables() {\n+        return _tables;\n+    }\n+    \n+    public void removeTable(Object key) {\n+        _tables.remove(key);\n     }\n \n     public Select getFromSelect() {\n@@ -1492,8 +1549,13 @@ private void removeParentJoins(PathJoins pj) {\n             return;\n         if (_parent._joins != null && !_parent._joins.isEmpty()) {\n             boolean removed = false;\n-            if (!_removedAliasFromParent.isEmpty())\n-                removed = _parent._joins.joins().removeAll(pj.joins());\n+            if (!_removedAliasFromParent.isEmpty()) {\n+                for (Iterator itr = pj.joins().iterator(); itr.hasNext();) {\n+                   Join jn = (Join) itr.next();\n+                   if (_aliases.containsValue(new Integer(jn.getIndex1())))\n+                       removed = _parent._joins.joins().remove(jn);\n+                }\n+            }\n             if (!removed)\n                 pj.joins().removeAll(_parent._joins.joins());\n         }"},{"sha":"ade69625387c5463853de2a6e49e0d1ca2912e4d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Customer.java","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/5663e2ab8640ec3700207f6a6a3875bbb90728a3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Customer.java","raw_url":"https://github.com/apache/openjpa/raw/5663e2ab8640ec3700207f6a6a3875bbb90728a3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Customer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Customer.java?ref=5663e2ab8640ec3700207f6a6a3875bbb90728a3","patch":"@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+import java.util.Collection;\n+import java.util.ArrayList;\n+\n+@Entity\n+@Table(name=\"TCUSTOMER\")\n+public class Customer {\n+\n+    @Embeddable\n+\tpublic static class CustomerKey implements Serializable {\n+\t\tpublic String countryCode;\n+\t\tpublic int id;\n+\t\t\n+\t\tpublic CustomerKey(){}\n+\t\t\n+\t\tpublic  CustomerKey(String cc, int id){\n+\t\t\tcountryCode=cc;\n+\t\t\tthis.id=id;\n+\t\t}\n+\t\t\n+\t\tpublic String toString() {\n+\t\t\treturn countryCode+\"/\"+id;\n+\t\t}\n+\t\t@Override\n+\t\tpublic boolean equals(Object obj){\n+\t\t\tif (obj==this) return true;\n+\t\t\tif ( ! (obj instanceof CustomerKey) ) return false;\n+\t\t\tCustomerKey key = (CustomerKey)obj;\n+\t\t\tif (key.countryCode.equals(this.countryCode) && \n+\t\t\t\t\tkey.id==this.id) return true;\n+\t\t\treturn false;\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic int hashCode() {\n+\t\t\treturn this.countryCode.hashCode()\n+\t\t\t\t^ this.id;\n+\t\t}\n+\t}\n+\t\n+\tpublic enum CreditRating { POOR, GOOD, EXCELLENT };\n+\t\n+\t@EmbeddedId\n+\t CustomerKey cid;\n+\t@Column(length=30)\n+    @Basic\n+\t String name;\n+\t@Enumerated\n+    @Basic\n+\t CreditRating creditRating;\n+\t@Version\n+\t long version;\n+\t\n+    @OneToMany(fetch=FetchType.EAGER, mappedBy=\"customer\")\n+    private Collection<Order> orders = new ArrayList<Order>();\n+\t\n+\tpublic Customer() {}\n+\t\n+\tpublic Customer(CustomerKey cid, String name, CreditRating rating){\n+\t\tthis.cid=cid;\n+\t\tthis.name=name;\n+\t\tthis.creditRating=rating;\n+\t}\n+\t\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\tpublic CreditRating getRating() {\n+\t\treturn creditRating;\n+\t}\n+\tpublic void setRating(CreditRating rating) {\n+\t\tthis.creditRating = rating;\n+\t}\n+\n+\tpublic Collection<Order> getOrders() {\n+\t\treturn orders;\n+\t}\n+\tpublic void setOrders(Collection<Order> orders) {\n+\t\tthis.orders = orders;\n+\t}\n+\t\n+\tpublic String toString() {\n+\t\treturn \"Customer:\"+cid+\" name:\"+name; \n+\t}\n+\n+\tpublic CustomerKey getCid() {\n+\t\treturn cid;\n+\t}\n+\n+\tpublic void setCid(CustomerKey cid) {\n+\t\tthis.cid = cid;\n+\t}\n+}\n+"},{"sha":"3b2238aa214ce0ecb905b07e11365b6dc390cda4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Order.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/5663e2ab8640ec3700207f6a6a3875bbb90728a3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Order.java","raw_url":"https://github.com/apache/openjpa/raw/5663e2ab8640ec3700207f6a6a3875bbb90728a3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Order.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Order.java?ref=5663e2ab8640ec3700207f6a6a3875bbb90728a3","patch":"@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import javax.persistence.*;\n+\n+import java.util.Collection;\n+import java.util.ArrayList;\n+\n+@Entity\n+@Table(name=\"TORDER\")\n+public class Order {\n+\t@Id \n+\t@GeneratedValue(strategy=GenerationType.IDENTITY)\n+\t int oid;\n+\t\n+\t double amount;\n+\t boolean delivered;\n+\t \n+\t@ManyToOne (fetch=FetchType.EAGER)\n+\t Customer customer;\n+\t\n+\t@OneToMany (fetch=FetchType.EAGER , mappedBy=\"order\")\n+\t Collection<OrderItem> lineitems = new ArrayList<OrderItem>();\n+\t@Version\n+\tlong version;\n+\t\n+\tpublic Order(){}\n+\t\n+\tpublic Order(  double amt, boolean delivered, Customer c){\n+\t\tamount=amt;\n+\t\tthis.delivered=delivered;\n+\t\tcustomer=c;\n+\t\tif (c!=null) c.getOrders().add(this);\n+\t}\n+\t\n+\tpublic double getAmount() {\n+\t\treturn amount;\n+\t}\n+\tpublic void setAmount(double amount) {\n+\t\tthis.amount = amount;\n+\t}\n+\tpublic Customer getCustomer() {\n+\t\treturn customer;\n+\t}\n+\tpublic void setCustomer(Customer customer) {\n+\t\tthis.customer = customer;\n+\t}\n+\tpublic boolean isDelivered() {\n+\t\treturn delivered;\n+\t}\n+\tpublic void setDelivered(boolean delivered) {\n+\t\tthis.delivered = delivered;\n+\t}\n+\tpublic int getOid() {\n+\t\treturn oid;\n+\t}\n+\t\n+\tpublic String toString(){\n+\t\treturn \"Order:\"+oid+\" amount:\"+amount+\" delivered:\"+delivered+\" customer:\"+\n+\t\t ( customer!=null ? customer.getCid()  :  -1 );\n+\t}\n+\n+\tpublic Collection<OrderItem> getLineitems() {\n+\t\treturn lineitems;\n+\t}\n+\n+\tpublic void setLineitems(Collection<OrderItem> lineitems) {\n+\t\tthis.lineitems = lineitems;\n+\t}\n+}"},{"sha":"8d4ab1f7b0f9918bca8e5fdad867c53fb0f3ae5b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/OrderItem.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/5663e2ab8640ec3700207f6a6a3875bbb90728a3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/OrderItem.java","raw_url":"https://github.com/apache/openjpa/raw/5663e2ab8640ec3700207f6a6a3875bbb90728a3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/OrderItem.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/OrderItem.java?ref=5663e2ab8640ec3700207f6a6a3875bbb90728a3","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+import javax.persistence.*;\n+@Entity\n+@Table(name=\"TORDERITEM\")\n+public class OrderItem {\n+\t@Id \n+\t@GeneratedValue(strategy=GenerationType.IDENTITY)\n+\tint lid;\n+\t\n+\tint quantity;\n+\tdouble cost;\n+\t \n+\t@ManyToOne (fetch=FetchType.EAGER)\n+\tOrder order;\n+\t\n+\t@Version\n+\tlong version;\n+\t\n+\tpublic OrderItem(){}\n+\n+    public OrderItem( int quantity, double cost, Order o){\n+        this.quantity=quantity;\n+        this.cost=cost;\n+        order = o;\n+    }\n+\n+\tpublic double getCost() {\n+\t\treturn cost;\n+\t}\n+\n+\tpublic void setCost(double cost) {\n+\t\tthis.cost = cost;\n+\t}\n+\n+\tpublic int getLid() {\n+\t\treturn lid;\n+\t}\n+\n+\tpublic void setLid(int lid) {\n+\t\tthis.lid = lid;\n+\t}\n+\n+\tpublic int getQuantity() {\n+\t\treturn quantity;\n+\t}\n+\n+\tpublic void setQuantity(int quantity) {\n+\t\tthis.quantity = quantity;\n+\t}\n+\n+\tpublic Order getOrder() {\n+\t\treturn order;\n+\t}\n+\n+\tpublic void setOrder(Order order) {\n+\t\tthis.order = order;\n+\t}\n+}"},{"sha":"23585beca1d604534b99d28a8cc839feda91a03c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/5663e2ab8640ec3700207f6a6a3875bbb90728a3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java","raw_url":"https://github.com/apache/openjpa/raw/5663e2ab8640ec3700207f6a6a3875bbb90728a3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java?ref=5663e2ab8640ec3700207f6a6a3875bbb90728a3","patch":"@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test JPQL subquery\n+ */\n+public class TestSubquery\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(Customer.class, Customer.CustomerKey.class,\n+            Order.class, OrderItem.class, CLEAR_TABLES);\n+    }\n+\n+    static String[]  querys = new String[] {\n+        \"select o.oid from Order o where o.customer.name =\" +\n+            \" (select max(o2.customer.name) from Order o2\" +\n+            \" where o.customer.cid.id = o2.customer.cid.id)\",\n+        \"select o from Order o where o.customer.name =\" +\n+            \" (select max(o2.customer.name) from Order o2\" +\n+            \" where o.customer.cid.id = o2.customer.cid.id)\",\n+        \"select o.oid from Order o where o.amount >\" +\n+            \" (select count(i) from o.lineitems i)\",\n+        \"select o.oid from Order o where o.amount >\" +\n+            \" (select count(o.amount) from Order o)\",\n+        \"select o.oid from Order o where o.amount >\" +\n+            \" (select count(o.oid) from Order o)\",\n+        \"select o.oid from Order o where o.amount >\" +\n+            \" (select avg(o.amount) from Order o)\",\n+        \"select c.name from Customer c where exists\" +\n+            \" (select o from c.orders o where o.oid = 1) or exists\" +\n+            \" (select o from c.orders o where o.oid = 2)\",\n+        \"select c.name from Customer c, in(c.orders) o where o.amount between\" +\n+            \" (select max(o.amount) from Order o) and\" +\n+            \" (select avg(o.amount) from Order o) \",\n+        \"select o.oid from Order o where o.amount >\" +\n+            \" (select sum(o2.amount) from Customer c, in(c.orders) o2) \",   \n+        \"select o.oid from Order o where o.amount between\" +\n+            \" (select avg(o2.amount) from Customer c, in(c.orders) o2)\" +\n+            \" and (select min(o2.amount) from Customer c, in(c.orders) o2)\",\n+        \"select o.oid from Customer c, in(c.orders)o where o.amount >\" +\n+            \" (select sum(o2.amount) from c.orders o2)\",\n+    // outstanding problem subqueries:\n+    //\"select o from Order o where o.amount > (select count(o) from Order o)\",\n+    //\"select o from Order o where o.amount > (select count(o2) from Order o2)\",\n+    // \"select c from Customer c left join c.orders p where not exists\"\n+    //   + \" (select o2 from c.orders o2 where o2 = o\",\n+    };\n+\n+\n+    static String[] updates = new String[] {\n+        \"update Order o set o.amount = 1000 where o.customer.name = \" +\n+            \" (select max(o2.customer.name) from Order o2 \" + \n+            \" where o.customer.cid.id = o2.customer.cid.id)\",  \n+    };\n+\n+\n+    public void testSubquery() {\n+        EntityManager em = emf.createEntityManager();\n+        for (int i = 0; i < querys.length; i++) {\n+            String q = querys[i];\n+            List rs = em.createQuery(q).getResultList();\n+            assertEquals(0, rs.size());\n+        }\n+\n+        em.getTransaction().begin();\n+        for (int i = 0; i < updates.length; i++) {\n+            int updateCount = em.createQuery(updates[i]).executeUpdate();\n+            assertEquals(0, updateCount);\n+        }\n+\n+        em.getTransaction().rollback();\n+        em.close();\n+    }\n+}"}]}

