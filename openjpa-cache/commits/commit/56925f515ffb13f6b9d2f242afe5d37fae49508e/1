{"sha":"56925f515ffb13f6b9d2f242afe5d37fae49508e","node_id":"MDY6Q29tbWl0MjA2MzY0OjU2OTI1ZjUxNWZmYjEzZjZiOWQyZjI0MmFmZTVkMzdmYWU0OTUwOGU=","commit":{"author":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2012-12-28T14:49:56Z"},"committer":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2012-12-28T14:49:56Z"},"message":"OPENJPA-2235: Updated TestIsolationFecthHint test to fix build failure.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1426530 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"42d3142fc37225c0a337c74e58e964a37f876cae","url":"https://api.github.com/repos/apache/openjpa/git/trees/42d3142fc37225c0a337c74e58e964a37f876cae"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/56925f515ffb13f6b9d2f242afe5d37fae49508e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/56925f515ffb13f6b9d2f242afe5d37fae49508e","html_url":"https://github.com/apache/openjpa/commit/56925f515ffb13f6b9d2f242afe5d37fae49508e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/56925f515ffb13f6b9d2f242afe5d37fae49508e/comments","author":null,"committer":null,"parents":[{"sha":"bded0a42b6a490a6cc80bc69a221f7ba7cd1b877","url":"https://api.github.com/repos/apache/openjpa/commits/bded0a42b6a490a6cc80bc69a221f7ba7cd1b877","html_url":"https://github.com/apache/openjpa/commit/bded0a42b6a490a6cc80bc69a221f7ba7cd1b877"}],"stats":{"total":122,"additions":61,"deletions":61},"files":[{"sha":"120d0403c772fb47f60bb7e8ca8724b29d50ec07","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationFecthHint.java","status":"modified","additions":61,"deletions":61,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/56925f515ffb13f6b9d2f242afe5d37fae49508e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationFecthHint.java","raw_url":"https://github.com/apache/openjpa/raw/56925f515ffb13f6b9d2f242afe5d37fae49508e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationFecthHint.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationFecthHint.java?ref=56925f515ffb13f6b9d2f242afe5d37fae49508e","patch":"@@ -1,61 +1,61 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package org.apache.openjpa.persistence.jdbc;\n-\n-import javax.persistence.Query;\n-\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n-import org.apache.openjpa.jdbc.sql.DB2Dictionary;\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n-import org.apache.openjpa.persistence.simple.AllFieldTypes;\n-import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n-\n-public class TestIsolationFecthHint extends SQLListenerTestCase{\n-\t\n-\tpublic void setUp(){\n-\t\tsetUp(AllFieldTypes.class, CLEAR_TABLES);\n-\t\t\n-\t}\t\n-\n-    public void testFetchPlanIsolationURHint(){\n-    \tOpenJPAEntityManagerSPI em = emf.createEntityManager();     \n-        try {\n-        \tDBDictionary dict = ((JDBCConfiguration) em.getConfiguration())\n-                    .getDBDictionaryInstance();\n-        \t if (dict instanceof DB2Dictionary) {\n-        \t\t AllFieldTypes allFieldTypes = new AllFieldTypes();\n-            \tallFieldTypes.setStringField(\"testString\");\n-            \tallFieldTypes.setIntField(2012);\n-            \t\n-            \tem.getTransaction().begin();\n-            \tem.persist(allFieldTypes);\n-            \tQuery query = em.createQuery(\"select e from AllFieldTypes e where e.stringField = ?1\");\n-            \tquery.setParameter(1, \"testString\");\n-            \tquery.setHint(\"openjpa.FetchPlan.Isolation\", \"READ_UNCOMMITTED\");\n-            \tassertEquals(1, query.getResultList().size());\n-            \tassertContainsSQL(\"FOR READ ONLY WITH UR\");\n-            \tem.getTransaction().rollback();\n-    \t\t}\n-        } finally {\n-        \tem.close();\n-        }\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+package org.apache.openjpa.persistence.jdbc;\r\n+\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.sql.DB2Dictionary;\r\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n+\r\n+public class TestIsolationFecthHint extends SQLListenerTestCase{\r\n+\t\r\n+\tpublic void setUp(){\r\n+\t\tsetUp(AllFieldTypes.class, CLEAR_TABLES);\r\n+\t\t\r\n+\t}\t\r\n+\r\n+    public void testFetchPlanIsolationURHint(){\r\n+    \tOpenJPAEntityManagerSPI em = emf.createEntityManager();     \r\n+        try {\r\n+        \tDBDictionary dict = ((JDBCConfiguration) em.getConfiguration())\r\n+                    .getDBDictionaryInstance();\r\n+        \t if (dict instanceof DB2Dictionary) {\r\n+        \t\t AllFieldTypes allFieldTypes = new AllFieldTypes();\r\n+            \tallFieldTypes.setStringField(\"testString\");\r\n+            \tallFieldTypes.setIntField(2012);\r\n+            \t\r\n+            \tem.getTransaction().begin();\r\n+            \tem.persist(allFieldTypes);\r\n+            \tQuery query = em.createQuery(\"select e from AllFieldTypes e where e.stringField = ?1\");\r\n+            \tquery.setParameter(1, \"testString\");\r\n+            \tquery.setHint(\"openjpa.FetchPlan.Isolation\", \"READ_UNCOMMITTED\");\r\n+            \tassertEquals(1, query.getResultList().size());\r\n+            \tassertContainsSQL(\"FOR READ ONLY WITH UR\");\r\n+            \tem.getTransaction().rollback();\r\n+    \t\t}\r\n+        } finally {\r\n+        \tem.close();\r\n+        }\r\n+    }\r\n+}\r"}]}

