{"sha":"569641f0950e01c8abbaff6e23e2739a8a2f2c9a","node_id":"MDY6Q29tbWl0MjA2MzY0OjU2OTY0MWYwOTUwZTAxYzhhYmJhZmY2ZTIzZTI3MzlhOGEyZjJjOWE=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-12-09T18:49:49Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-12-09T18:49:49Z"},"message":"OPENJPA-795  enhancer throws an exception when parsing column name \"first.name\" because it thinks 'first' is a table name\nIn U2 database column name may contain '.'\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@724817 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a5a180723cab394b9c8425c4895afee4f8e5d3f4","url":"https://api.github.com/repos/apache/openjpa/git/trees/a5a180723cab394b9c8425c4895afee4f8e5d3f4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/569641f0950e01c8abbaff6e23e2739a8a2f2c9a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/569641f0950e01c8abbaff6e23e2739a8a2f2c9a","html_url":"https://github.com/apache/openjpa/commit/569641f0950e01c8abbaff6e23e2739a8a2f2c9a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/569641f0950e01c8abbaff6e23e2739a8a2f2c9a/comments","author":null,"committer":null,"parents":[{"sha":"82e702867e6164cdffe3840b122f3190e9d526bb","url":"https://api.github.com/repos/apache/openjpa/commits/82e702867e6164cdffe3840b122f3190e9d526bb","html_url":"https://github.com/apache/openjpa/commit/82e702867e6164cdffe3840b122f3190e9d526bb"}],"stats":{"total":17,"additions":9,"deletions":8},"files":[{"sha":"ef44393294723c0c14e3f8b2e06fa971cfc7562b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/569641f0950e01c8abbaff6e23e2739a8a2f2c9a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/569641f0950e01c8abbaff6e23e2739a8a2f2c9a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java?ref=569641f0950e01c8abbaff6e23e2739a8a2f2c9a","patch":"@@ -492,9 +492,10 @@ public Table createTable(MetaDataContext context, TableDefaults def,\n         }\n \n         String fullName;\n-        int dotIdx = given.lastIndexOf('.');\n+        String sep = repos.getDBDictionary().catalogSeparator;\n+        int dotIdx = given.lastIndexOf(sep);\n         if (dotIdx == -1)\n-            fullName = (schemaName == null) ? given : schemaName + \".\" + given;\n+            fullName = (schemaName == null) ? given : schemaName + sep + given;\n         else {\n             fullName = given;\n             schema = null;\n@@ -626,12 +627,15 @@ protected static Column mergeColumn(MetaDataContext context, String prefix,\n             throw new MetaDataException(_loc.get(prefix + \"-no-col-name\",\n                 context));\n \n+        MappingRepository repos = (MappingRepository) context.getRepository();\n+        DBDictionary dict = repos.getDBDictionary();\n+\n         // determine the column name based on given info, or template if none;\n         // also make sure that if the user gave a column name, he didn't try\n         // to put the column in an unexpected table\n         if (colName == null)\n             colName = tmplate.getName();\n-        int dotIdx = colName.lastIndexOf('.');\n+        int dotIdx = colName.lastIndexOf(dict.catalogSeparator);\n         if (dotIdx == 0)\n             colName = colName.substring(1);\n         else if (dotIdx != -1) {\n@@ -646,9 +650,6 @@ else if (dotIdx != -1) {\n             throw new MetaDataException(_loc.get(prefix + \"-bad-col-name\",\n                 context, colName, table));\n \n-        MappingRepository repos = (MappingRepository) context.getRepository();\n-        DBDictionary dict = repos.getDBDictionary();\n-\n         // use information from template column by default, allowing any\n         // user-given specifics to override it\n         int type = tmplate.getType();\n@@ -1686,7 +1687,7 @@ protected static Column syncColumn(MetaDataContext context, Column col,\n         Column copy = new Column();\n         if (col.getTable() != colTable || inverse)\n             copy.setName(dict.getFullName(col.getTable(), true)\n-                + \".\" + col.getName());\n+                + dict.catalogSeparator + col.getName());\n         else\n             copy.setName(col.getName());\n \n@@ -1699,7 +1700,7 @@ else if (target instanceof Column) {\n                 if ((!inverse && tcol.getTable() != targetTable)\n                     || (inverse && tcol.getTable() != colTable))\n                     copy.setTarget(dict.getFullName(tcol.getTable(), true)\n-                        + \".\" + tcol.getName());\n+                        + dict.catalogSeparator + tcol.getName());\n                 else if (!defaultTarget(col, tcol, num))\n                     copy.setTarget(tcol.getName());\n             } else if (target instanceof Number)"}]}

