{"sha":"56ae0ae6ae48cd07156cb6c9e4048ad62df823cd","node_id":"MDY6Q29tbWl0MjA2MzY0OjU2YWUwYWU2YWU0OGNkMDcxNTZjYjZjOWU0MDQ4YWQ2MmRmODIzY2Q=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-07-08T20:01:08Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-07-08T20:01:08Z"},"message":"OPENJPA-525 - Semi-revert the original solution due to regression in ResultSetResult.translate() method. Implemented an alternative solution to perform the same original intent. Based on Milosz, the current solution caused some failure in MySQL. He agreed for this interim commit and look for cause of failures in MySQL.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@792284 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6c0bd5b999009ef91fac24523026ea8e57ffbdda","url":"https://api.github.com/repos/apache/openjpa/git/trees/6c0bd5b999009ef91fac24523026ea8e57ffbdda"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/56ae0ae6ae48cd07156cb6c9e4048ad62df823cd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/56ae0ae6ae48cd07156cb6c9e4048ad62df823cd","html_url":"https://github.com/apache/openjpa/commit/56ae0ae6ae48cd07156cb6c9e4048ad62df823cd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/56ae0ae6ae48cd07156cb6c9e4048ad62df823cd/comments","author":null,"committer":null,"parents":[{"sha":"717a0b18552a6814d12ba7a03ef05e9c28982725","url":"https://api.github.com/repos/apache/openjpa/commits/717a0b18552a6814d12ba7a03ef05e9c28982725","html_url":"https://github.com/apache/openjpa/commit/717a0b18552a6814d12ba7a03ef05e9c28982725"}],"stats":{"total":22,"additions":12,"deletions":10},"files":[{"sha":"ad2ec2e9c65736c4f45ce52252b4c5d5ef211008","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/56ae0ae6ae48cd07156cb6c9e4048ad62df823cd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java","raw_url":"https://github.com/apache/openjpa/raw/56ae0ae6ae48cd07156cb6c9e4048ad62df823cd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java?ref=56ae0ae6ae48cd07156cb6c9e4048ad62df823cd","patch":"@@ -30,6 +30,7 @@\n import java.sql.SQLException;\n import java.sql.Time;\n import java.sql.Timestamp;\n+import java.sql.Types;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.HashMap;\n@@ -756,15 +757,17 @@ protected short getShortInternal(Object obj, Joins joins)\n \n     public String getString(Object obj)\n         throws SQLException {\n-        return getStringInternal(translate(obj, null), null);\n+        return getStringInternal(translate(obj, null), null,\n+            obj instanceof Column && ((Column) obj).getType() == Types.CLOB);\n     }\n \n     public String getString(Column col, Joins joins)\n         throws SQLException {\n-        return getStringInternal(translate(col, joins), joins);\n+        return getStringInternal(translate(col, joins), joins,\n+            col.getType() == Types.CLOB);\n     }\n \n-    protected String getStringInternal(Object obj, Joins joins)\n+    protected String getStringInternal(Object obj, Joins joins, boolean isClobString)\n         throws SQLException {\n         Object val = checkNull(getObjectInternal(obj, JavaTypes.STRING,\n             null, joins));"},{"sha":"240cbf8c2bf43391d47c9ece2bdbfa5bd3bada4e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/56ae0ae6ae48cd07156cb6c9e4048ad62df823cd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","raw_url":"https://github.com/apache/openjpa/raw/56ae0ae6ae48cd07156cb6c9e4048ad62df823cd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java?ref=56ae0ae6ae48cd07156cb6c9e4048ad62df823cd","patch":"@@ -393,7 +393,8 @@ protected Object getObjectInternal(Object obj, int metaTypeCode,\n                 val = new Short(getShortInternal(obj, joins));\n                 break;\n             case JavaTypes.STRING:\n-                return getStringInternal(obj, joins);\n+                return getStringInternal(obj, joins,\n+                    obj instanceof Column && ((Column) obj).getType() == Types.CLOB);\n             case JavaTypes.OBJECT:\n                 return _dict\n                     .getBlobObject(_rs, ((Number) obj).intValue(), _store);\n@@ -462,10 +463,11 @@ protected short getShortInternal(Object obj, Joins joins)\n         return _dict.getShort(_rs, ((Number) obj).intValue());\n     }\n \n-    protected String getStringInternal(Object obj, Joins joins)\n+    protected String getStringInternal(Object obj, Joins joins, boolean isClobString)\n         throws SQLException {\n-        if (obj instanceof Column && ((Column) obj).getType() == Types.CLOB)\n-            return _dict.getClobString(_rs, findObject(obj, joins));\n+        if (isClobString) {\n+            return _dict.getClobString(_rs, ((Number) obj).intValue());\n+        }\n         return _dict.getString(_rs, ((Number) obj).intValue());\n     }\n \n@@ -489,9 +491,6 @@ protected Object translate(Object obj, Joins joins)\n         throws SQLException {\n         if (obj instanceof Number)\n             return obj;\n-        // getStringInternal will take care the translation\n-        if (obj instanceof Column && ((Column) obj).getType() == Types.CLOB)\n-        \treturn obj;\n         return Numbers.valueOf(findObject(obj, joins));\n     }\n "}]}

