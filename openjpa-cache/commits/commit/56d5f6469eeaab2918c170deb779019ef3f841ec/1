{"sha":"56d5f6469eeaab2918c170deb779019ef3f841ec","node_id":"MDY6Q29tbWl0MjA2MzY0OjU2ZDVmNjQ2OWVlYWFiMjkxOGMxNzBkZWI3NzkwMTllZjNmODQxZWM=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2006-09-06T21:42:31Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2006-09-06T21:42:31Z"},"message":"OPENJPA-40 Fall back to using the ConfigurationProvider's ClassLoader in the even of a loader mismatch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@440882 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b68ef76b32cbf46e2cde9c91653f1054cbc505e6","url":"https://api.github.com/repos/apache/openjpa/git/trees/b68ef76b32cbf46e2cde9c91653f1054cbc505e6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/56d5f6469eeaab2918c170deb779019ef3f841ec","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/56d5f6469eeaab2918c170deb779019ef3f841ec","html_url":"https://github.com/apache/openjpa/commit/56d5f6469eeaab2918c170deb779019ef3f841ec","comments_url":"https://api.github.com/repos/apache/openjpa/commits/56d5f6469eeaab2918c170deb779019ef3f841ec/comments","author":null,"committer":null,"parents":[{"sha":"890ae1a7022e116d0c82e94384c74de24f6f00e6","url":"https://api.github.com/repos/apache/openjpa/commits/890ae1a7022e116d0c82e94384c74de24f6f00e6","html_url":"https://github.com/apache/openjpa/commit/890ae1a7022e116d0c82e94384c74de24f6f00e6"}],"stats":{"total":52,"additions":31,"deletions":21},"files":[{"sha":"7e1d80578dd3b1cca22b3220c44700701a2b3165","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","status":"modified","additions":31,"deletions":21,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/56d5f6469eeaab2918c170deb779019ef3f841ec/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","raw_url":"https://github.com/apache/openjpa/raw/56d5f6469eeaab2918c170deb779019ef3f841ec/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java?ref=56d5f6469eeaab2918c170deb779019ef3f841ec","patch":"@@ -53,23 +53,17 @@ public static BrokerFactory newBrokerFactory() {\n      */\n     public static BrokerFactory newBrokerFactory(ConfigurationProvider conf,\n         ClassLoader loader) {\n-        if (conf == null)\n-            conf = new MapConfigurationProvider();\n-        ProductDerivations.beforeConfigurationConstruct(conf);\n-\n-        Class cls = getFactoryClass(conf, loader);\n         try {\n-            Method meth = cls.getMethod(\"newInstance\", FACTORY_ARGS);\n-            return (BrokerFactory) meth.invoke(null, new Object[]{ conf });\n+            return invokeFactory(conf, loader, \"newInstance\");\n         } catch (InvocationTargetException ite) {\n             Throwable cause = ite.getTargetException();\n             if (cause instanceof OpenJPAException)\n                 throw (OpenJPAException) cause;\n             throw new InternalException(s_loc.get(\"new-brokerfactory-excep\",\n-                cls), cause);\n+                getFactoryClass(conf, loader)), cause);\n         } catch (Exception e) {\n-            throw new UserException(s_loc.get(\"bad-new-brokerfactory\", cls),\n-                e).setFatal(true);\n+            throw new UserException(s_loc.get(\"bad-new-brokerfactory\",\n+                getFactoryClass(conf, loader)), e).setFatal(true);\n         }\n     }\n \n@@ -87,26 +81,42 @@ public static BrokerFactory getBrokerFactory() {\n      */\n     public static BrokerFactory getBrokerFactory(ConfigurationProvider conf,\n         ClassLoader loader) {\n-        if (conf == null)\n-            conf = new MapConfigurationProvider();\n-        ProductDerivations.beforeConfigurationConstruct(conf);\n-\n-        Class cls = getFactoryClass(conf, loader);\n         try {\n-            Method meth = cls.getMethod(\"getInstance\", FACTORY_ARGS);\n-            return (BrokerFactory) meth.invoke(null, new Object[]{ conf });\n+            return invokeFactory(conf, loader, \"getInstance\");\n         } catch (InvocationTargetException ite) {\n             Throwable cause = ite.getTargetException();\n             if (cause instanceof OpenJPAException)\n                 throw (OpenJPAException) cause;\n-            throw new InternalException(s_loc.get(\"brokerfactory-excep\", cls),\n-                cause);\n+            throw new InternalException(s_loc.get(\"brokerfactory-excep\",\n+                getFactoryClass(conf, loader)), cause);\n         } catch (Exception e) {\n-            throw new UserException(s_loc.get(\"bad-brokerfactory\", cls), e).\n-                setFatal(true);\n+            throw new UserException(s_loc.get(\"bad-brokerfactory\",\n+                getFactoryClass(conf, loader)), e).setFatal(true);\n         }\n     }\n \n+    private static BrokerFactory invokeFactory (ConfigurationProvider conf,\n+        ClassLoader loader, String methodName)\n+        throws InvocationTargetException, NoSuchMethodException,\n+            IllegalAccessException {\n+        if (conf == null)\n+            conf = new MapConfigurationProvider();\n+        ProductDerivations.beforeConfigurationConstruct(conf);\n+\n+        Class cls = getFactoryClass(conf, loader);\n+        Method meth;\n+        try {\n+            meth = cls.getMethod(methodName, FACTORY_ARGS); \n+        } catch (NoSuchMethodException nsme) {\n+            // handle cases where there is a mismatch between loaders by falling\n+            // back to the configuration's class loader for broker resolution\n+            cls = getFactoryClass(conf, conf.getClass().getClassLoader());\n+            meth = cls.getMethod(methodName, FACTORY_ARGS); \n+        }\n+\n+        return (BrokerFactory) meth.invoke(null, new Object[]{ conf });\n+    }\n+\n     /**\n      * Instantiate the factory class designated in properties.\n      */"}]}

