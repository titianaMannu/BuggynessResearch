{"sha":"582c83b29b9e825ab80208737e1d4c88bb7859d5","node_id":"MDY6Q29tbWl0MjA2MzY0OjU4MmM4M2IyOWI5ZTgyNWFiODAyMDg3MzdlMWQ0Yzg4YmI3ODU5ZDU=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2006-08-30T18:16:40Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2006-08-30T18:16:40Z"},"message":"OPENJPA-15 Updated grammer to fix some inconsistencies with the spec\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@438573 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2caacf29159f273ef11a9fb78cdabd6ac13aa328","url":"https://api.github.com/repos/apache/openjpa/git/trees/2caacf29159f273ef11a9fb78cdabd6ac13aa328"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/582c83b29b9e825ab80208737e1d4c88bb7859d5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/582c83b29b9e825ab80208737e1d4c88bb7859d5","html_url":"https://github.com/apache/openjpa/commit/582c83b29b9e825ab80208737e1d4c88bb7859d5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/582c83b29b9e825ab80208737e1d4c88bb7859d5/comments","author":null,"committer":null,"parents":[{"sha":"01735b123429e17033650fbe1c30506820e7af6a","url":"https://api.github.com/repos/apache/openjpa/commits/01735b123429e17033650fbe1c30506820e7af6a","html_url":"https://github.com/apache/openjpa/commit/01735b123429e17033650fbe1c30506820e7af6a"}],"stats":{"total":142,"additions":107,"deletions":35},"files":[{"sha":"40c0e3899c6b77a2d54a5e74f859462bf5b10f90","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":36,"deletions":2,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/582c83b29b9e825ab80208737e1d4c88bb7859d5/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/582c83b29b9e825ab80208737e1d4c88bb7859d5/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=582c83b29b9e825ab80208737e1d4c88bb7859d5","patch":"@@ -194,8 +194,15 @@ protected ClassMetaData getCandidateMetaData(JPQLNode node) {\n         // ### this should actually be the primary SELECT instance\n         // resolved against the from variable declarations\n         JPQLNode from = node.findChildByID(JJTFROMITEM, true);\n-        if (from == null)\n-            throw parseException(EX_USER, \"no-from-clause\", null, null);\n+        if (from == null) {\n+            // OPENJPA-15 allow subquery without a FROMITEM\n+            if (node.id == JJTSUBSELECT) { \n+                from = node.findChildByID(JJTFROM, true);\n+            }\n+            else {\n+                throw parseException(EX_USER, \"no-from-clause\", null, null);\n+            }\n+        }\n \n         for (int i = 0; i < from.children.length; i++) {\n             JPQLNode n = from.children[i];\n@@ -216,6 +223,24 @@ protected ClassMetaData getCandidateMetaData(JPQLNode node) {\n \n                 return getClassMetaData(cls, true);\n             }\n+            // OPENJPA-15 support subquery's from clause do not start with \n+            // identification_variable_declaration()\n+            if (node.id == JJTSUBSELECT) {\n+                if (n.id == JJTINNERJOIN) {\n+                    n = n.getChild(0);\n+                }\n+                if (n.id == JJTPATH) {\n+                    Path path = getPath(n);\n+                    ClassMetaData cmd = getFieldType(path.last());\n+                    if (cmd != null) {\n+                        return cmd;\n+                    }\n+                    else {\n+                        throw parseException(EX_USER, \"no-alias\", \n+                                new Object[]{ n }, null);\n+                    }\n+                }\n+            }           \n         }\n \n         return null;\n@@ -501,6 +526,15 @@ private Expression addJoin(JPQLNode node, boolean inner, Expression exp) {\n         Path path = getPath(firstChild(node), false, inner);\n \n         JPQLNode alias = node.getChildCount() >= 2 ? right(node) : null;\n+        // OPENJPA-15 support subquery's from clause do not start with \n+        // identification_variable_declaration()\n+        if (inner && ctx().subquery != null && ctx().schemaAlias == null) {\n+            setCandidate(getFieldType(path.last()), alias.text);\n+\n+            Path subpath = factory.newPath(ctx().subquery);\n+            subpath.setMetaData(ctx().subquery.getMetaData());\n+            exp =  and(exp, factory.equal(path, subpath));\n+        }\n \n         return addJoin(path, alias, inner, exp);\n     }"},{"sha":"5cd1fe0f1cfbefd80cf3e46674d58d4a89b2a00e","filename":"openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","status":"modified","additions":71,"deletions":33,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/582c83b29b9e825ab80208737e1d4c88bb7859d5/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","raw_url":"https://github.com/apache/openjpa/raw/582c83b29b9e825ab80208737e1d4c88bb7859d5/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt?ref=582c83b29b9e825ab80208737e1d4c88bb7859d5","patch":"@@ -233,7 +233,7 @@ TOKEN : /* literals */\n \t\t| (([\"0\"-\"9\"])+) (<EXPONENT>) ([\"f\",\"F\",\"d\",\"D\"])?\n \t\t| (([\"0\"-\"9\"])+) (<EXPONENT>)? ([\"f\",\"F\",\"d\",\"D\"])?) >\n \t| < BOOLEAN_LITERAL: \"TRUE\" | \"FALSE\" | \"true\" | \"false\" >\n-\t| < EXPONENT: [\"e\",\"E\"] ([\"+\",\"-\"])? ([\"0\"-\"9\"])+ >\n+\t| < #EXPONENT: [\"e\",\"E\"] ([\"+\",\"-\"])? ([\"0\"-\"9\"])+ >\n \t| < STRING_LITERAL: \"'\"\n \t  ((\"''\" | ~[\"'\"])\n \t\t/*\n@@ -341,7 +341,7 @@ void delete_statement() #DELETE : { }\n void from_clause() #FROM : { }\n {\n \t<FROM> identification_variable_declaration()\n-\t(<COMMA> (LOOKAHEAD(collection_member_declaration()) collection_member_declaration() | identification_variable_declaration()))*\n+\t(LOOKAHEAD(1) <COMMA> (LOOKAHEAD(collection_member_declaration()) collection_member_declaration() | LOOKAHEAD(identification_variable_declaration())identification_variable_declaration()))*\n }\n \n \n@@ -353,10 +353,22 @@ void identification_variable_declaration(): { }\n \n void from_item() #FROMITEM : { }\n {\n-\tabstract_schema_name() [<AS>] [identification_variable()]\n+\tabstract_schema_name() [LOOKAHEAD(1)<AS>] [LOOKAHEAD(identification_variable())identification_variable()]\n }\n \n \n+void subquery_from_clause() #FROM : { }\n+{\n+\t<FROM> subquery_from_item()\n+\t\t( LOOKAHEAD(1) <COMMA> subquery_from_item() )*\n+}\n+\n+void subquery_from_item() : { }\n+{\n+        LOOKAHEAD(collection_member_declaration()) collection_member_declaration()\n+\t| LOOKAHEAD(identification_variable_declaration()) identification_variable_declaration()\n+}\n+\n void inner_join() #INNERJOIN : { }\n {\n \t[<INNER>] <JOIN> path() [<AS>] identification_variable()\n@@ -366,13 +378,12 @@ void inner_join() #INNERJOIN : { }\n void collection_member_declaration() #INNERJOIN : { }\n {\n \t// synonymous with \"INNER JOIN path AS identifier\" (InnerJoin)\n-\t<IN> \"(\" path() \")\" [<AS>] identification_variable()\n+\t<IN> \"(\" path() \")\" [ LOOKAHEAD(1)<AS>] identification_variable()\n }\n \n-\n void outer_join() #OUTERJOIN : { }\n {\n-\t<LEFT> [<OUTER>] <JOIN> path() [<AS>] identification_variable()\n+\t<LEFT> [ <OUTER>] <JOIN> path() [ LOOKAHEAD(1)<AS>] identification_variable()\n }\n \n \n@@ -423,7 +434,7 @@ void update_item() #UPDATEITEM : { }\n void update_field() #UPDATEFIELD : { }\n {\n \t// identification_variable() (<DOT> path_component())+\n-\t[identification_variable() <DOT>] path_component()\n+\t[LOOKAHEAD(1) identification_variable() <DOT>] path_component()\n }\n \n \n@@ -453,7 +464,7 @@ void select_clause() #SELECTCLAUSE : { }\n \n void simple_select_clause() #SELECTCLAUSE : { }\n {\n-\t<SELECT> [distinct()] select_expressions() \n+\t<SELECT> [distinct()] subselect_expressions() \n }\n \n \n@@ -473,6 +484,20 @@ void select_expression() #SELECTEXPRESSION : { }\n }\n \n \n+void subselect_expressions() #SELECTEXPRESSIONS : { }\n+{\n+\tsubselect_expression() (<COMMA> subselect_expression())*\n+}\n+\n+void subselect_expression() #SELECTEXPRESSION : { }\n+{\n+\tLOOKAHEAD(path()) path() \n+\t\t| aggregate_select_expression()\n+\t\t| LOOKAHEAD(1) identification_variable()\n+\n+}\n+\n+\n void constructor_expression() #CONSTRUCTOR : { }\n {\n \t<NEW> classname() constructor_parameters()\n@@ -573,7 +598,7 @@ void groupby_clause() #GROUPBY : { }\n \n void groupby_item() : { }\n {\n-\tpath() \n+\tLOOKAHEAD(path()) path() | identification_variable()\n }\n \n \n@@ -586,7 +611,7 @@ void having_clause() #HAVING : { }\n void subquery() #SUBSELECT : { }\n {\n \tsimple_select_clause()\n-\t\tfrom_clause() \n+\t\tsubquery_from_clause() \n \t\t[LOOKAHEAD(where_clause()) where_clause()] \n \t\t[LOOKAHEAD(groupby_clause()) groupby_clause()] \n \t\t[LOOKAHEAD(having_clause()) having_clause()] \n@@ -623,7 +648,7 @@ void conditional_primary() : { }\n \n void simple_cond_expression() : { }\n {\n-\tLOOKAHEAD(all_or_any_expression()) all_or_any_expression() |\n+\t//LOOKAHEAD(all_or_any_expression()) all_or_any_expression() |\n \tLOOKAHEAD(exists_expression()) exists_expression() |\n \tLOOKAHEAD(comparison_expression()) comparison_expression() | \n \tLOOKAHEAD(between_expression()) between_expression() | \n@@ -637,19 +662,19 @@ void simple_cond_expression() : { }\n \n void between_expression() #BETWEEN : { }\n {\n-\tLOOKAHEAD(3) arithmetic_expression()\n+\tLOOKAHEAD(6) arithmetic_expression()\n \t\t[<NOT> { jjtThis.not = true; }] <BETWEEN> arithmetic_expression()\n \t\t<AND> arithmetic_expression()\n-\t| LOOKAHEAD(3) string_expression()\n+\t| LOOKAHEAD(6) string_expression()\n \t\t[<NOT> { jjtThis.not = true; }] <BETWEEN> string_expression() <AND> string_expression()\n-\t| datetime_expression()\n-\t\t[<NOT> { jjtThis.not = true; }] <BETWEEN> datetime_expression() <AND> datetime_expression() \n+\t| LOOKAHEAD(6) datetime_expression()\n+\t\t[<NOT> { jjtThis.not = true; }] <BETWEEN> datetime_expression() <AND> datetime_expression()\n }\n \n \n void in_expression() #IN : { }\n {\n-\tpath() [<NOT> { jjtThis.not = true; }] <IN>\n+\tpath() [ LOOKAHEAD(1) <NOT> { jjtThis.not = true; }] <IN>\n \t\t\"(\" (literal_or_param()\n \t\t\t(<COMMA> (literal_or_param()))* | subquery())\n \t\t\")\" \n@@ -667,7 +692,7 @@ void literal_or_param() : { }\n \n void like_expression() #LIKE : { }\n {\n-\tstring_value() [<NOT> { jjtThis.not = true; }] <LIKE> pattern_value() \n+\tstring_expression() [<NOT> { jjtThis.not = true; }] <LIKE> pattern_value() \n }\n \n \n@@ -729,32 +754,44 @@ void comparison_expression() : { }\n \tLOOKAHEAD(arithmetic_comp()) arithmetic_comp() |\n \tLOOKAHEAD(string_comp()) string_comp() |\n \tLOOKAHEAD(boolean_comp()) boolean_comp() | \n+\tLOOKAHEAD(enum_comp()) enum_comp() | \n \tLOOKAHEAD(datetime_comp()) datetime_comp() |\n \tLOOKAHEAD(entity_comp()) entity_comp()\n }\n \n \n void string_comp() : { }\n {\n-\tstring_value() (\n+\tstring_expression() (\n \t\t(<EQ> (string_expression()|all_or_any_expression()) #EQUALS(2))\n \t\t| (<NE> (string_expression()|all_or_any_expression()) #NOTEQUALS(2))\n+\t\t| (<GT> (string_expression() | all_or_any_expression()) #GREATERTHAN(2))\n+\t\t| (<GE> (string_expression() | all_or_any_expression()) #GREATEROREQUAL(2))\n+\t\t| (<LT> (string_expression() | all_or_any_expression()) #LESSTHAN(2))\n+\t\t| (<LE> (string_expression() | all_or_any_expression()) #LESSOREQUAL(2))\n \t\t)\n }\n \n \n void boolean_comp() : { }\n {\n-\tboolean_value() (\n+\tboolean_expression() (\n \t(<EQ> (boolean_expression() | all_or_any_expression()) #EQUALS(2))\n \t| (<NE> (boolean_expression() | all_or_any_expression()) #NOTEQUALS(2))\n \t)\n }\n \n+void enum_comp() : { }\n+{\n+\tenum_expression() (\n+\t(<EQ> (enum_expression() | all_or_any_expression()) #EQUALS(2))\n+\t| (<NE> (enum_expression() | all_or_any_expression()) #NOTEQUALS(2))\n+\t)\n+}\n \n void entity_comp() : { }\n {\n-\tentity_bean_value() (\n+\tentity_bean_expression() (\n \t(<EQ> ((LOOKAHEAD(all_or_any_expression()) all_or_any_expression() | entity_bean_expression()) #EQUALS(2)))\n \t| (<NE> ((LOOKAHEAD(all_or_any_expression()) all_or_any_expression() | entity_bean_expression()) #NOTEQUALS(2)))\n \t)\n@@ -764,7 +801,7 @@ void entity_comp() : { }\n void arithmetic_comp() : { }\n {\n \t// arithmetic_value() (\n-\tarithmetic_factor() (\n+\tarithmetic_expression() (\n \t(<EQ> (arithmetic_expression() | all_or_any_expression()) #EQUALS(2))\n \t| (<GT> (arithmetic_expression() | all_or_any_expression()) #GREATERTHAN(2))\n \t| (<GE> (arithmetic_expression() | all_or_any_expression()) #GREATEROREQUAL(2))\n@@ -777,7 +814,7 @@ void arithmetic_comp() : { }\n \n void datetime_comp() : { }\n {\n-\tdatetime_primary() (\n+\tdatetime_expression() (\n \t(<EQ> (datetime_expression() | all_or_any_expression()) #EQUALS(2))\n \t| (<GT> (datetime_expression() | all_or_any_expression()) #GREATERTHAN(2))\n \t| (<GE> (datetime_expression() | all_or_any_expression()) #GREATEROREQUAL(2))\n@@ -790,7 +827,7 @@ void datetime_comp() : { }\n \n void arithmetic_value() : { }\n {\n-\tpath() | functions_returning_numerics() | subquery() \n+\tpath() | functions_returning_numerics() | \"(\" subquery() \")\"\n }\n \n \n@@ -817,9 +854,10 @@ void arithmetic_factor() : { }\n \tnumeric_literal() | \n \tinput_parameter() | \n \tpath() |\n-\t\"(\" arithmetic_expression() \")\"  | \n+\tLOOKAHEAD(2) \"(\" arithmetic_expression() \")\" | \n \tfunctions_returning_numerics() | \n-\tsubquery() \n+\taggregate_select_expression() |\t\n+\tsubquery()\n }\n \n \n@@ -831,7 +869,7 @@ void negative() #NEGATIVE : { }\n \n void string_value() : { }\n {\n-\tpath() | functions_returning_strings() | subquery() \n+\tpath() | functions_returning_strings() | \"(\" subquery() \")\"\n }\n \n \n@@ -843,8 +881,8 @@ void string_expression() : { }\n \n void string_primary() : { }\n {\n-\tpath() | string_literal() | \"(\" string_expression() \")\" | \n-\tfunctions_returning_strings() | subquery() \n+\tstring_literal() | path() | LOOKAHEAD(2) \"(\" string_expression() \")\" | \n+\tfunctions_returning_strings() | LOOKAHEAD(2)  \"(\" subquery() \")\"\n }\n \n \n@@ -862,7 +900,7 @@ void datetime_primary() : { }\n \n void boolean_value() : { }\n {\n-\tpath() | subquery() \n+\tpath() | \"(\" subquery() \")\"\n }\n \n \n@@ -874,7 +912,7 @@ void boolean_expression() : { }\n \n void boolean_primary() : { }\n {\n-\tpath() | boolean_literal() | input_parameter()\n+\tLOOKAHEAD(2) path() | boolean_literal() | input_parameter()\n }\n \n \n@@ -886,7 +924,7 @@ void enum_expression() : { }\n \n void enum_primary() : { }\n {\n-\tpath()\n+\tLOOKAHEAD(2) path()\n \t| LOOKAHEAD(enum_literal()) enum_literal()\n \t| LOOKAHEAD(input_parameter()) input_parameter()\n }\n@@ -930,7 +968,7 @@ void substring() #SUBSTRING : { }\n \n void trim() #TRIM : { }\n {\n-\t<TRIM> \"(\" [[trim_specification()] [trim_character()] <FROM>]\n+\t<TRIM> \"(\" [LOOKAHEAD(2)[trim_specification()] [trim_character()] <FROM>]\n \t\tstring_expression() \")\"\n }\n \n@@ -950,7 +988,7 @@ void upper() #UPPER : { }\n \n void trim_specification() : { }\n {\n-\t(<LEADING> #TRIMLEADING) | (<TRAILING> #TRIMTRAILING) | (<BOTH> #TRIMBOTH)\n+\tLOOKAHEAD(2) (<LEADING> #TRIMLEADING) | (<TRAILING> #TRIMTRAILING) | (<BOTH> #TRIMBOTH)\n }\n \n "}]}

