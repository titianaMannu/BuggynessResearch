{"sha":"582e91b867963a008d2a8f398a8bd1c97a217a4b","node_id":"MDY6Q29tbWl0MjA2MzY0OjU4MmU5MWI4Njc5NjNhMDA4ZDJhOGYzOThhOGJkMWM5N2EyMTdhNGI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-10-26T20:14:15Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-10-26T20:14:15Z"},"message":"OPENJPA-1793 @EmbeddedId class having only one field java.sql.Data.  Contributed by Heath Thomann.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1027722 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9e90dd3bc8f284780dfcad022bef44c9a8a419d8","url":"https://api.github.com/repos/apache/openjpa/git/trees/9e90dd3bc8f284780dfcad022bef44c9a8a419d8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/582e91b867963a008d2a8f398a8bd1c97a217a4b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/582e91b867963a008d2a8f398a8bd1c97a217a4b","html_url":"https://github.com/apache/openjpa/commit/582e91b867963a008d2a8f398a8bd1c97a217a4b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/582e91b867963a008d2a8f398a8bd1c97a217a4b/comments","author":null,"committer":null,"parents":[{"sha":"89ed13599e99c74a1e281a5227694dd98440c667","url":"https://api.github.com/repos/apache/openjpa/commits/89ed13599e99c74a1e281a5227694dd98440c667","html_url":"https://github.com/apache/openjpa/commit/89ed13599e99c74a1e281a5227694dd98440c667"}],"stats":{"total":166,"additions":162,"deletions":4},"files":[{"sha":"0da2839c4dbb3fc8764eec4ce7386376606b2218","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/582e91b867963a008d2a8f398a8bd1c97a217a4b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/582e91b867963a008d2a8f398a8bd1c97a217a4b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java?ref=582e91b867963a008d2a8f398a8bd1c97a217a4b","patch":"@@ -316,10 +316,17 @@ public Object getPrimaryKeyValue(Result res, Column[] cols, ForeignKey fk,\n         Object val = null;\n         if (cols.length == 1) {\n             col = cols[0];\n-            if (fk != null)\n+            if (fk != null){\n                 col = fk.getColumn(col);\n-            val = res.getObject(col, field.getHandler().\n-                getResultArgument(field), joins);\n+            }\n+            \n+            //OJ-1793: Get the args from the handler and first check to see if the\n+            //args are null.  If they aren't null then use the first element in the args\n+            //array rather than passing into 'getObject' the entire args array.  This is\n+            //akin to what is done in the 'else if' leg below.\n+            Object[] args = (Object[]) field.getHandler().getResultArgument(field);            \n+            val = res.getObject(col, (args == null) ? null : args[0],\n+                    joins);\n         } else if (cols.length > 1) {\n             Object[] vals = new Object[cols.length];\n             Object[] args = (Object[]) field.getHandler()."},{"sha":"953202cb8dbc79bfcfa4c5d3a646c281e1d01398","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_Single_Coll.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/582e91b867963a008d2a8f398a8bd1c97a217a4b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_Single_Coll.java","raw_url":"https://github.com/apache/openjpa/raw/582e91b867963a008d2a8f398a8bd1c97a217a4b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_Single_Coll.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_Single_Coll.java?ref=582e91b867963a008d2a8f398a8bd1c97a217a4b","patch":"@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.embed;\n+\n+import java.sql.Date;\n+import java.util.HashSet;\n+import java.util.Set;\n+import javax.persistence.Embeddable;\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+\n+/* This test was created to test OJ-1793 */\n+\n+@Embeddable \n+public class Embed_Single_Coll {\n+\n+\t@Temporal(TemporalType.DATE)\t\n+\tprivate Date date;\n+\n+\tpublic Date getDate() {\n+\t\treturn date;\n+\t}\n+\n+\tpublic void setDate(Date date) {\n+\t\tthis.date = date;\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\tfinal int prime = 31;\n+\t\tint result = 1;\n+\t\tresult = prime * result + ((date == null) ? 0 : date.hashCode());\n+\t\treturn result;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (this == obj)\n+\t\t\treturn true;\n+\t\tif (obj == null)\n+\t\t\treturn false;\n+\t\tif (getClass() != obj.getClass())\n+\t\t\treturn false;\n+\t\tEmbed_Single_Coll other = (Embed_Single_Coll) obj;\n+\t\tif (date == null) {\n+\t\t\tif (other.date != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!date.equals(other.date))\n+\t\t\treturn false;\n+\t\treturn true;\n+\t}\n+\t\n+}"},{"sha":"bd0a2d9c7c85b5eb03308c45fcae43606b0de247","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Single_Coll.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/582e91b867963a008d2a8f398a8bd1c97a217a4b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Single_Coll.java","raw_url":"https://github.com/apache/openjpa/raw/582e91b867963a008d2a8f398a8bd1c97a217a4b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Single_Coll.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Single_Coll.java?ref=582e91b867963a008d2a8f398a8bd1c97a217a4b","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.embed;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Column;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class EntityA_Embed_Single_Coll implements Serializable {\n+\n+    @EmbeddedId\n+    protected Embed_Single_Coll embed;\n+\n+    @Column(length = 30)\n+    String name;\n+\n+    public String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic Embed_Single_Coll getEmbed() {\n+        return embed;\n+    }\n+\n+    public void setEmbed(Embed_Single_Coll embed) {\n+        this.embed = embed;\n+    }\n+}"},{"sha":"f7ab635a1b90b3f0a2631050ae96edac08ce8d81","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","status":"modified","additions":31,"deletions":1,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/582e91b867963a008d2a8f398a8bd1c97a217a4b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","raw_url":"https://github.com/apache/openjpa/raw/582e91b867963a008d2a8f398a8bd1c97a217a4b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java?ref=582e91b867963a008d2a8f398a8bd1c97a217a4b","patch":"@@ -103,7 +103,8 @@ public void setUp() {\n             Embed_MappedToOne.class, Embed_MappedToOneCascadeDelete.class, \n             EntityA_Embed_MappedToOneCascadeDelete.class, EntityB2.class, \n             Book.class, Listing.class, Seller.class,\n-            EntityA_Embed_Coll_Map.class, Embed_Coll_Map.class, EntityA_Embed.class,\n+            EntityA_Embed_Coll_Map.class, Embed_Coll_Map.class,\n+            EntityA_Embed_Single_Coll.class, Embed_Single_Coll.class, EntityA_Embed.class,\n             EntityA_Embed_Complex.class, A.class, CLEAR_TABLES);\n             sql.clear();\n             DBDictionary dict = ((JDBCConfiguration)emf.getConfiguration()).getDBDictionaryInstance();\n@@ -164,6 +165,35 @@ public void testEntityA_Embed_Coll_Map() {\n         queryEntityA_Embed_Coll_Map();\n     }\n \n+    /**\n+     * Test for OJ-1793.\n+     */\n+    public void testEntityA_Embed_Single_Coll() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        //create an EntityA_Embed_Single_Coll and persist it.\n+        EntityA_Embed_Single_Coll eesc = new EntityA_Embed_Single_Coll();\n+        Embed_Single_Coll esc = new Embed_Single_Coll();\n+        java.sql.Date date = java.sql.Date.valueOf(\"2010-10-13\");\n+        esc.setDate(date);\n+        eesc.setEmbed(esc);\n+        em.getTransaction().begin();\n+        em.persist(eesc);\n+        em.flush();\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        //Now query the recently created EntityA_Embed_Single_Coll.  Without OJ-1793, when you query\n+        //the EntityA_Embed_Single_Coll object, the issue of OJ-1793 will occur, regardless of the query\n+        //string (even the simplest string will do).\n+        em = emf.createEntityManager();\n+        Query query1 = em.createQuery(\"SELECT e FROM EntityA_Embed_Single_Coll e \"\n+            + \"where e.embed.date = '\" + date + \"'\");\n+        eesc = (EntityA_Embed_Single_Coll) query1.getSingleResult();\n+        assertEquals(eesc.getEmbed().getDate().toString(), date.toString());\n+        em.close();\n+    }\n+\n     public void queryEntityA_Embed_Coll_Map() {\n         EntityManager em = emf.createEntityManager();\n         String query[] = {"}]}

