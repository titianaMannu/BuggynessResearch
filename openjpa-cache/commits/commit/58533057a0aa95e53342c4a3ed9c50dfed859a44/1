{"sha":"58533057a0aa95e53342c4a3ed9c50dfed859a44","node_id":"MDY6Q29tbWl0MjA2MzY0OjU4NTMzMDU3YTBhYTk1ZTUzMzQyYzRhM2VkOWM1MGRmZWQ4NTlhNDQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-27T18:18:10Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-27T18:18:10Z"},"message":"OPENJPA-298\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@560342 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7690c2163ddb42dfd286c68a973ee1ab26177850","url":"https://api.github.com/repos/apache/openjpa/git/trees/7690c2163ddb42dfd286c68a973ee1ab26177850"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/58533057a0aa95e53342c4a3ed9c50dfed859a44","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/58533057a0aa95e53342c4a3ed9c50dfed859a44","html_url":"https://github.com/apache/openjpa/commit/58533057a0aa95e53342c4a3ed9c50dfed859a44","comments_url":"https://api.github.com/repos/apache/openjpa/commits/58533057a0aa95e53342c4a3ed9c50dfed859a44/comments","author":null,"committer":null,"parents":[{"sha":"8586e0fef3bf69757db2a9c27aaff91270ed1785","url":"https://api.github.com/repos/apache/openjpa/commits/8586e0fef3bf69757db2a9c27aaff91270ed1785","html_url":"https://github.com/apache/openjpa/commit/8586e0fef3bf69757db2a9c27aaff91270ed1785"}],"stats":{"total":276,"additions":189,"deletions":87},"files":[{"sha":"1250f1c0af3b38a0210702f122e4354ee6ade2f9","filename":"openjpa-project/src/doc/manual/jpa_overview_pc.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/58533057a0aa95e53342c4a3ed9c50dfed859a44/openjpa-project/src/doc/manual/jpa_overview_pc.xml","raw_url":"https://github.com/apache/openjpa/raw/58533057a0aa95e53342c4a3ed9c50dfed859a44/openjpa-project/src/doc/manual/jpa_overview_pc.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_pc.xml?ref=58533057a0aa95e53342c4a3ed9c50dfed859a44","patch":"@@ -177,7 +177,7 @@ constructor.\n                 <para>\n OpenJPA's <emphasis>enhancer</emphasis> will automatically add a protected\n no-arg constructor to your class when required. Therefore, this restriction does\n-not apply when using OpenJPA. See <xref linkend=\"ref_guide_pc_enhance\"/>\n+not apply when using the enhancer. See <xref linkend=\"ref_guide_pc_enhance\"/>\n of the Reference Guide for details.\n                 </para>\n             </note>"},{"sha":"e98a62fb0867ed67a4f9678f466363dc6a06942d","filename":"openjpa-project/src/doc/manual/jpa_tutorials.xml","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/58533057a0aa95e53342c4a3ed9c50dfed859a44/openjpa-project/src/doc/manual/jpa_tutorials.xml","raw_url":"https://github.com/apache/openjpa/raw/58533057a0aa95e53342c4a3ed9c50dfed859a44/openjpa-project/src/doc/manual/jpa_tutorials.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_tutorials.xml?ref=58533057a0aa95e53342c4a3ed9c50dfed859a44","patch":"@@ -222,7 +222,7 @@ information.\n             <para>\n Let's compile the initial classes and see them in action. To do so, we must\n compile the <filename>.java</filename> files, as we would with any Java project,\n-and then pass the resulting classes through the OpenJPA enhancer:\n+and then optionally pass the resulting classes through the OpenJPA enhancer.\n             </para>\n             <note>\n                 <para>\n@@ -387,7 +387,7 @@ You can use any java compiler instead of <command>javac</command>.\n                 </listitem>\n                 <listitem>\n                     <para>\n-Enhance the persistent classes.\n+Enhance the persistent classes. (Optional)\n                     </para>\n <programlisting>\n java org.apache.openjpa.enhance.PCEnhancer Animal.java Dog.java\n@@ -396,7 +396,7 @@ java org.apache.openjpa.enhance.PCEnhancer Animal.java Dog.java\n This step runs the OpenJPA enhancer on the <filename>Animal.java</filename> and\n <filename>Dog.java</filename> files mentioned above. See\n <xref linkend=\"ref_guide_pc_enhance\"/> of the Reference Guide for more\n-information on the enhancer, including how to use automatic runtime enhancement.\n+information on the enhancer, including alternatives to enhancement.\n                     </para>\n                     <note>\n                         <para>\n@@ -417,7 +417,7 @@ OpenJPA configuration.\n                     Configuring the Datastore\n                 </title>\n                 <para>\n-Now that we've compiled the source files and enhanced the persistent classes,\n+Now that we've compiled the source files,\n we're ready to set up the database. <ulink url=\"http://hsqldb.sourceforge.net\">\n Hypersonic SQL</ulink>, a pure Java relational database, is included in the\n OpenJPA distribution. We have included this database because it is simple to set\n@@ -819,7 +819,7 @@ javac Rabbit.java\n                 </listitem>\n                 <listitem>\n                     <para>\n-Enhance the <classname>Rabbit</classname> class.\n+Enhance the <classname>Rabbit</classname> class. (Optional)\n                     </para>\n <programlisting>\n java org.apache.openjpa.enhance.PCEnhancer Rabbit.java\n@@ -907,7 +907,7 @@ javac Snake.java\n                 </listitem>\n                 <listitem>\n                     <para>\n-Enhance the class.\n+Enhance the class. (Optional)\n                     </para>\n <programlisting>\n java org.apache.openjpa.enhance.PCEnhancer Snake.java\n@@ -1118,7 +1118,7 @@ key that joins the rabbit table to the snake table. The rabbit table has an\n                 <listitem>\n                     <para>\n Compile <filename>Snake.java</filename> and <filename>Rabbit.java</filename> and\n-enhance the classes.\n+optionally enhance the classes.\n                     </para>\n <programlisting>\n javac Snake.java Rabbit.java\n@@ -1320,7 +1320,7 @@ nested <filename>ejb</filename> and <filename>jsp</filename> directories:\n javac *.java  ejb/*.java jsp/*.java\n </programlisting>\n                 <para>\n-Enhance the Car class.\n+Enhance the Car class. (Optional)\n                 </para>\n <programlisting>\n java org.apache.openjpa.enhance.PCEnhancer Car.java"},{"sha":"350432a370bb70251a0d7d00566938e7173fec83","filename":"openjpa-project/src/doc/manual/ref_guide_mapping.xml","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/58533057a0aa95e53342c4a3ed9c50dfed859a44/openjpa-project/src/doc/manual/ref_guide_mapping.xml","raw_url":"https://github.com/apache/openjpa/raw/58533057a0aa95e53342c4a3ed9c50dfed859a44/openjpa-project/src/doc/manual/ref_guide_mapping.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_mapping.xml?ref=58533057a0aa95e53342c4a3ed9c50dfed859a44","patch":"@@ -7,15 +7,15 @@\n  to you under the Apache License, Version 2.0 (the\r\n  \"License\"); you may not use this file except in compliance\r\n  with the License.  You may obtain a copy of the License at\r\n- \r\n+\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n+\r\n  Unless required by applicable law or agreed to in writing,\r\n  software distributed under the License is distributed on an\r\n  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n  KIND, either express or implied.  See the License for the\r\n  specific language governing permissions and limitations\r\n- under the License.   \r\n+ under the License.\r\n -->\r\n <chapter id=\"ref_guide_mapping\">\r\n     <title>\r\n@@ -205,7 +205,7 @@ the action to take on each class. The available actions are:\n                 <para>\r\n <literal>buildSchema</literal>: This is the default action. It\r\n makes the database schema match your existing mappings. If your provided\r\n-mappings conflict with your class definitions, OpenJPA will fail with an \r\n+mappings conflict with your class definitions, OpenJPA will fail with an\r\n informative exception.\r\n                 </para>\r\n             </listitem>\r\n@@ -548,7 +548,7 @@ generation.\n                     <listitem>\r\n                         <para>\r\n <literal>-annotations/-ann &lt;true/t | false/f&gt;</literal>: Set to true to\r\n-generate JPA annotations in generated java classes. \r\n+generate JPA annotations in generated java classes.\r\n                         </para>\r\n                     </listitem>\r\n                     <listitem>\r\n@@ -677,7 +677,7 @@ the system defaults to a\n <classname>PropertiesReverseCustomizer</classname></ulink>. This customizer\r\n allows you to specify simple customization options in the properties file given\r\n with the <literal>-customizerProperties</literal> flag below. We present the\r\n-available property keys <link linkend=\"ref_guide_pc_reverse_custom\"> \r\n+available property keys <link linkend=\"ref_guide_pc_reverse_custom\">\r\n below</link>.\r\n                         </para>\r\n                     </listitem>\r\n@@ -714,12 +714,12 @@ generates.\n                 <para>\r\n After you are satisfied with the generated classes and their mappings, you\r\n should first compile the classes with <literal>javac</literal>, <literal>\r\n-jikes</literal>, or your favorite Java compiler. Make sure the classes are \r\n-located in the directory corresponding to the <literal>-package</literal> flag \r\n+jikes</literal>, or your favorite Java compiler. Make sure the classes are\r\n+located in the directory corresponding to the <literal>-package</literal> flag\r\n you gave the reverse mapping tool.  Next, if you have generated an <filename>\r\n orm.xml</filename>, move that file to a <filename>META-INF</filename> directory\r\n within a directory in your classpath.  Finally, enhance the classes\r\n-if necessary (see <xref linkend=\"ref_guide_pc_enhance\"/> ).\r\n+if necessary (see <xref linkend=\"ref_guide_pc_enhance\"/>).\r\n                 </para>\r\n             </listitem>\r\n         </orderedlist>\r\n@@ -929,7 +929,7 @@ In the <emphasis>meet-in-the-middle</emphasis>\n mapping approach, you control both the relational featureSelection and the object featureSelection. It\r\n is up to you to define the mappings between these models.  The mapping\r\n tool's <literal>validate</literal> action is useful to meet-in-the-middle\r\n-mappers. This action verifies that the mapping information for a class matches \r\n+mappers. This action verifies that the mapping information for a class matches\r\n the class definition and the existing schema. It throws an informative exception\r\n when your mappings are incorrect.\r\n         </para>\r\n@@ -986,8 +986,8 @@ schema that matches your object featureSelection.\n             <para>\r\n OpenJPA relies on foreign key constraint information at runtime to order SQL\r\n appropriately. Be sure to set your mapping defaults to reflect your existing\r\n-database constraints, set the schema factory to reflect on the database for \r\n-constraint information (see <xref linkend=\"ref_guide_schema_info_factory\"/>), \r\n+database constraints, set the schema factory to reflect on the database for\r\n+constraint information (see <xref linkend=\"ref_guide_schema_info_factory\"/>),\r\n or use explicit foreign key mappings as described in\r\n <xref linkend=\"ref_guide_mapping_jpa_fk\"/>.\r\n             </para>\r\n@@ -1015,7 +1015,7 @@ properties (though with different default values), as well as:\n                     <listitem>\r\n                         <para>\r\n <literal>PrependFieldNameToJoinTableInverseJoinColumns</literal>: Whether to\r\n-prepend the owning field name to the names of inverse join columns in join \r\n+prepend the owning field name to the names of inverse join columns in join\r\n tables.  Defaults to true per the JPA specification.  Set to false for\r\n compatibility with older OpenJPA versions which did not prepend the field name.\r\n                         </para>\r\n@@ -1281,8 +1281,8 @@ The bundled mapping factories are:\n                 <para>\r\n <literal>-</literal>: Leaving the <literal> openjpa.jdbc.MappingFactory\r\n </literal> property unset allows your metadata factory to take over mappings as\r\n-well.  If you are using the default <literal>jpa</literal> metadata factory, \r\n-OpenJPA will read mapping information from your annotations and \r\n+well.  If you are using the default <literal>jpa</literal> metadata factory,\r\n+OpenJPA will read mapping information from your annotations and\r\n <filename>orm.xml</filename> when you leave the mapping factory unspecified.\r\n                 </para>\r\n             </listitem>\r\n@@ -2172,7 +2172,7 @@ public class Subscription {\n             </indexterm>\r\n             <para>\r\n We detailed the <literal>ContainerTable</literal> annotation in\r\n-<xref linkend=\"ref_guide_mapping_jpa_coll_table\"/>. Custom map mappings may \r\n+<xref linkend=\"ref_guide_mapping_jpa_coll_table\"/>. Custom map mappings may\r\n also use this annotation to represent a map table.\r\n             </para>\r\n         </section>\r\n@@ -2189,7 +2189,7 @@ batch size.\n             </para>\r\n             <para>\r\n OpenJPA assumes certain columns have indexes or constraints based on your\r\n-mapping defaults, as detailed in <xref linkend=\"ref_guide_mapping_defaults\"/>. \r\n+mapping defaults, as detailed in <xref linkend=\"ref_guide_mapping_defaults\"/>.\r\n You can override the configured defaults on individual joins, field\r\n values, collection elements, map keys, or map values using the annotations\r\n presented in the following sections.\r\n@@ -2267,7 +2267,7 @@ The <ulink url=\"../javadoc/org/apache/openjpa/persistence/jdbc/ForeignKey.html\">\n annotation represents a foreign key on the columns of a field. It is also used\r\n within the <link linkend=\"ref_guide_mapping_jpa_coll_table\"><classname>\r\n ContainerTable</classname></link> annotation to set a database foreign key on\r\n-join columns.  To set a constraint to the columns of a collection element, use \r\n+join columns.  To set a constraint to the columns of a collection element, use\r\n the\r\n <ulink url=\"../javadoc/org/apache/openjpa/persistence/jdbc/ElementForeignKey.html\">\r\n <classname> org.apache.openjpa.persistence.jdbc.ElementForeignKey</classname>\r\n@@ -2397,20 +2397,20 @@ entity property mapped to an XML column.\n               <para>\r\n Annotate the entity property using the XMLValueHandler strategy:\r\n \t\t      </para>\r\n-<programlisting>\t\t         \r\n+<programlisting>\r\n @Persistent\r\n @Strategy(&quot;org.apache.openjpa.jdbc.meta.strats.XMLValueHandler&quot;)\r\n </programlisting>\r\n               <para>\r\n The default fetch type is EAGER but can be changed to LAZY by using:\r\n               </para>\r\n-<programlisting>           \r\n+<programlisting>\r\n @Persistence(fetch=FetchType.LAZY)\r\n </programlisting>\r\n               <para>\r\n The entity property class is required to have\r\n-jaxb binding annotations.  This is produced when the classes are generated \r\n-from an xml schema using the jaxb generator XJC.Ensure that <classname>@XmlRootElement</classname> \r\n+jaxb binding annotations.  This is produced when the classes are generated\r\n+from an xml schema using the jaxb generator XJC.Ensure that <classname>@XmlRootElement</classname>\r\n appears in the root class. In some case this annotation needs to be added manually if it is missing.\r\n               </para>\r\n               <para>\r\n@@ -2427,8 +2427,8 @@ XML functions.\n               </para>\r\n               <para>\r\n The path expression must be single valued.Path expressions over xml\r\n-mapped classes can only be used in WHERE as an operand to a simple predicate \r\n-(=  &lt;&gt;  &lt;  &gt;  &gt;=  &lt;=). \r\n+mapped classes can only be used in WHERE as an operand to a simple predicate\r\n+(=  &lt;&gt;  &lt;  &gt;  &gt;=  &lt;=).\r\n               </para>\r\n               <para>\r\n Path expressions over XML mapped fields can not be:\r\n@@ -2456,9 +2456,9 @@ used in the FROM , GROUP BY, HAVING, ORDER BY clauses\n                   </listitem>\r\n               </itemizedlist>\r\n               <para>\r\n-XML schema must not contain namespace declarations. The EJB query path \r\n+XML schema must not contain namespace declarations. The EJB query path\r\n expressions can not refer to java fields generated from XML ANY type or\r\n-XML mixed element types. \r\n+XML mixed element types.\r\n               </para>\r\n               <para>\r\n The datatype generated by JAXB must be a valid EJB query type\r\n@@ -2479,7 +2479,7 @@ in which the JPA entity Order has <classname>&lt;shipAddress&gt;</classname> per\n &lt;xs:complexType name=&quot;Address&quot;&gt;\r\n  &lt;xs:sequence&gt;\r\n   &lt;xs:element name=&quot;Name&quot; type=&quot;xs:string&quot; /&gt;\r\n-  &lt;xs:element name=&quot;Street&quot; type=&quot;xs:string&quot; \r\n+  &lt;xs:element name=&quot;Street&quot; type=&quot;xs:string&quot;\r\n   \tminOccurs=&quot;1&quot; maxOccurs=&quot;3&quot; /&gt;\r\n   &lt;xs:element name=&quot;City&quot; type=&quot;xs:string&quot; /&gt;\r\n &lt;/xs:sequence&gt;\r\n@@ -2524,8 +2524,8 @@ in which the JPA entity Order has <classname>&lt;shipAddress&gt;</classname> per\n               </example>\r\n               <para>\r\n Java classes <link linkend=\"ref_guide_xmlmapping_address\">Address</link>,\r\n-<link linkend=\"ref_guide_xmlmapping_usaaddress\">USAAddress</link> and \r\n-<link linkend=\"ref_guide_xmlmapping_canaddress\">CANAddress</link> \r\n+<link linkend=\"ref_guide_xmlmapping_usaaddress\">USAAddress</link> and\r\n+<link linkend=\"ref_guide_xmlmapping_canaddress\">CANAddress</link>\r\n are produced using jaxb XJC generator from myaddress schema.\r\n               </para>\r\n               <example id=\"ref_guide_xmlmapping_address\">\r\n@@ -2548,12 +2548,12 @@ public class Address {\n     protected List&lt;String&gt; street;\r\n     @XmlElement(name = &quot;City&quot;, required = true)\r\n     protected String city;\r\n-    \r\n+\r\n    /**\r\n      * Getter and Setter methods.\r\n-     * \r\n-     */     \r\n-     ...     \r\n+     *\r\n+     */\r\n+     ...\r\n }\r\n </programlisting>\r\n             </example>\r\n@@ -2580,9 +2580,9 @@ public class USAAddress\n \r\n    /**\r\n      * Getter and Setter methods.\r\n-     * \r\n-     */     \r\n-     ...     \r\n+     *\r\n+     */\r\n+     ...\r\n }\r\n </programlisting>\r\n             </example>\r\n@@ -2609,10 +2609,10 @@ public class CANAddress\n \r\n    /**\r\n      * Getter and Setter methods.\r\n-     * \r\n-     */     \r\n-     ...     \r\n-} \r\n+     *\r\n+     */\r\n+     ...\r\n+}\r\n </programlisting>\r\n             </example>\r\n             <example id=\"ref_guide_xmlmapping_annorder\">\r\n@@ -2621,9 +2621,9 @@ public class CANAddress\n                 </title>\r\n <programlisting>\r\n @Entity\r\n-public class Order { \r\n+public class Order {\r\n     @Id  private into id;\r\n-    @Persistent  \r\n+    @Persistent\r\n     @Strategy (&quot;org.apache.openjpa.jdbc.meta.strats.XMLValueHandler&quot;)\r\n     private Address shipAddress;\r\n     ...\r\n@@ -2657,12 +2657,12 @@ em.persist(o1);\n                     Sample EJB Queries for XML Column mapping\r\n                 </title>\r\n <programlisting>\r\n-. select o from Order o where o.shipAddress.city = &quot;San Jose&quot; or              \r\n+. select o from Order o where o.shipAddress.city = &quot;San Jose&quot; or\r\n \t\t\t      o.shipAddress.city = &quot;San Francisco&quot;  (OK)\r\n-\t\t\t    \r\n-. select o.shipaAddress from Order o  (OK)   \r\n \r\n-. select o.shipAddress.city from Order o  (INVALID)  \r\n+. select o.shipaAddress from Order o  (OK)\r\n+\r\n+. select o.shipAddress.city from Order o  (INVALID)\r\n \r\n . select o from Order o where o.shipAddress.street = &quot;San Jose&quot;  (INVALID multi valued)\r\n </programlisting>\r\n@@ -3044,7 +3044,7 @@ array or collection element relations, respectively:\n                     </seealso>\r\n                 </indexterm>\r\n                 <para>\r\n-OpenJPA's \r\n+OpenJPA's\r\n <ulink url=\"../javadoc/org/apache/openjpa/persistence/jdbc/Strategy.html\">\r\n <classname>org.apache.openjpa.persistence.jdbc.Strategy</classname></ulink>\r\n extension allows you to specify a custom mapping\r\n@@ -3174,8 +3174,8 @@ or more simple values. All value handlers implement the <classname>\n org.apache.openjpa.jdbc.meta.ValueHandler</classname> interface; see its\r\n <ulink url=\"../javadoc/org/apache/openjpa/jdbc/meta/ValueHandler.html\"> Javadoc\r\n </ulink> for details.  Also, examine the built-in handlers in the <filename>\r\n-src/openjpa/jdbc/meta/strats</filename> directory of your OpenJPA source \r\n-distribution.  Use these functional implementations as examples when you \r\n+src/openjpa/jdbc/meta/strats</filename> directory of your OpenJPA source\r\n+distribution.  Use these functional implementations as examples when you\r\n create your own value handlers.\r\n                 </para>\r\n             </section>\r\n@@ -3227,7 +3227,7 @@ MappingDefaults</classname> implementations allows you to globally associate\n field types with their corresponding custom value handler or strategy. OpenJPA\r\n will automatically use your custom strategies when it encounters a field of the\r\n associated type. OpenJPA will use your custom value handlers whenever it\r\n-encounters a field of the associated type. \r\n+encounters a field of the associated type.\r\n <xref linkend=\"ref_guide_mapping_defaults\"/> described mapping\r\n defaults in detail.\r\n                 </para>\r"},{"sha":"fd39b6e3b1e855e0db6f81edb95c255c6699528e","filename":"openjpa-project/src/doc/manual/ref_guide_optimization.xml","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/58533057a0aa95e53342c4a3ed9c50dfed859a44/openjpa-project/src/doc/manual/ref_guide_optimization.xml","raw_url":"https://github.com/apache/openjpa/raw/58533057a0aa95e53342c4a3ed9c50dfed859a44/openjpa-project/src/doc/manual/ref_guide_optimization.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_optimization.xml?ref=58533057a0aa95e53342c4a3ed9c50dfed859a44","patch":"@@ -167,6 +167,25 @@ OpenJPAEntityManager.setPopulateDataCache</ulink>\n                         </para>\n                     </entry>\n                 </row>\n+                <row>\n+                    <entry colname=\"name\">\n+                        <emphasis role=\"bold\">\n+                            Run the OpenJPA enhancer on your persistent classes,\n+                            either at build-time or deploy-time.\n+                        </emphasis>\n+                        <para>\n+<emphasis>performance, scalability, memory footprint</emphasis>\n+                        </para>\n+                    </entry>\n+                    <entry colname=\"desc\">\n+OpenJPA performs best when your persistent classes have been run through the\n+OpenJPA post-compilation bytecode enhancer. When dealing with enhanced classes,\n+OpenJPA can make a number of assumptions that reduce memory footprint and\n+accelerate persistent data access. When evaluating OpenJPA's performance,\n+build-time or deploy-time enhancement should be enabled. See\n+<xref linkend=\"ref_guide_pc_enhance\"/> for details.\n+                    </entry>\n+                </row>\n                 <row>\n                     <entry colname=\"name\">\n                         <emphasis role=\"bold\">"},{"sha":"227394b7064599488e9da4bcbc068aa63bded55b","filename":"openjpa-project/src/doc/manual/ref_guide_pc.xml","status":"modified","additions":110,"deletions":27,"changes":137,"blob_url":"https://github.com/apache/openjpa/blob/58533057a0aa95e53342c4a3ed9c50dfed859a44/openjpa-project/src/doc/manual/ref_guide_pc.xml","raw_url":"https://github.com/apache/openjpa/raw/58533057a0aa95e53342c4a3ed9c50dfed859a44/openjpa-project/src/doc/manual/ref_guide_pc.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_pc.xml?ref=58533057a0aa95e53342c4a3ed9c50dfed859a44","patch":"@@ -114,7 +114,7 @@ any unlisted class is not persistent.\n         </indexterm>\n         <para>\n In order to provide optimal runtime performance, flexible lazy loading, and\n-efficient, immediate dirty tracking, OpenJPA uses an <emphasis> enhancer\n+efficient, immediate dirty tracking, OpenJPA can use an <emphasis>enhancer\n </emphasis>. An enhancer is a tool that automatically adds code to your\n persistent classes after you have written them. The enhancer post-processes the\n bytecode generated by your Java compiler, adding the necessary fields and\n@@ -139,7 +139,7 @@ the <methodname>getId</methodname> method in your source file.\n The diagram above illustrates the compilation of a persistent class.\n         </para>\n         <para>\n-You can add the OpenJPA enhancer to your build process, or use Java 1.5's new\n+You can add the OpenJPA enhancer to your build process, or use Java 1.5's\n instrumentation features to transparently enhance persistent classes when they\n are loaded into the JVM. The following sections describe each option.\n         </para>\n@@ -269,14 +269,14 @@ class load error, simply re-compile and re-enhance the offending classes.\n                 </tertiary>\n             </indexterm>\n             <para>\n-The JEE 5 specification includes hooks to automatically enhance JPA entities\n-when they are deployed into a container. Thus, if you are using a JEE\n+The Java EE 5 specification includes hooks to automatically enhance JPA entities\n+when they are deployed into a container. Thus, if you are using a Java EE\n 5-compliant application server, OpenJPA will enhance your entities automatically\n at runtime. Note that if you prefer build-time enhancement, OpenJPA's runtime\n enhancer will correctly recognize and skip pre-enhanced classes.\n             </para>\n             <para>\n-If your application server does not support the JEE 5 enhancement hooks,\n+If your application server does not support the Java EE 5 enhancement hooks,\n consider using the build-time enhancement described above, or the more general\n runtime enhancement described in the next section.\n             </para>\n@@ -325,7 +325,7 @@ java -javaagent:/home/dev/openjpa/lib/openjpa.jar com.xyz.Main\n             <para>\n You can pass settings to the agent using OpenJPA's plugin syntax (see\n <xref linkend=\"ref_guide_conf_plugins\"/>). The agent accepts the long\n-form of any of the standard configuration options \n+form of any of the standard configuration options\n (<xref linkend=\"ref_guide_conf_devtools\"/> ). It also accepts the following\n options, the first three of which correspond exactly to to the same-named\n options of the enhancer tool described in\n@@ -351,6 +351,20 @@ check whether each class loaded into the JVM is persistent, and enhance it\n accordingly. This may slow down class load times significantly.\n                     </para>\n                 </listitem>\n+                <listitem>\n+                    <para>\n+<literal>runtimeEnhancement</literal>: Boolean controlling whether OpenJPA\n+class enhancement should be available in this JVM execution. Default:\n+<literal>true</literal>\n+                    </para>\n+                </listitem>\n+                <listitem>\n+                    <para>\n+<literal>runtimeRedefinition</literal>: Boolean controlling whether OpenJPA\n+class redefinition should be available in this JVM execution. Default:\n+<literal>true</literal>\n+                    </para>\n+                </listitem>\n             </itemizedlist>\n             <example id=\"ref_guide_pc_enhance_runtime_opt_ex\">\n                 <title>\n@@ -361,38 +375,107 @@ java -javaagent:/home/dev/openjpa/lib/openjpa.jar=addDefaultConstructor=false co\n </programlisting>\n             </example>\n         </section>\n-        <section id=\"ref_guide_pc_enhance_sercompat\">\n+        <section id=\"ref_guide_pc_enhance_unenhanced_types\">\n             <title>\n-                Serializing Enhanced Types\n+                Omitting the OpenJPA enhancer\n             </title>\n-            <indexterm zone=\"ref_guide_pc_enhance_sercompat\">\n+            <indexterm zone=\"ref_guide_pc_enhance_unenhanced_types\">\n                 <primary>\n                     enhancer\n                 </primary>\n                 <secondary>\n-                    serialization\n+                    omitting\n                 </secondary>\n                 <tertiary>\n-                    of enhanced types\n+                    outside a container\n                 </tertiary>\n             </indexterm>\n-            <indexterm zone=\"ref_guide_pc_enhance_sercompat\">\n-                <primary>\n-                    serialization\n-                </primary>\n-                <secondary>\n-                    of enhanced types\n-                </secondary>\n-            </indexterm>\n             <para>\n-By default, OpenJPA maintains serialization compatibility between the enhanced\n-and unenhanced versions of a class. This allows you to serialize instances\n-between a server using OpenJPA and a client that does not have access to\n-enhanced classes or OpenJPA libraries. In some cases, however, you can make the\n-persist and attach processes more robust and efficient by allowing breaks in\n-serialization compatibility. See <xref linkend=\"ref_guide_detach_graph\"/>\n-for details.\n-            </para>\n+OpenJPA does not require that the enhancer be run. If you do not run the\n+enhancer, OpenJPA will fall back to one of several possible alternatives for\n+state tracking, depending on the execution environment. \n+             </para>\n+            <itemizedlist>\n+                <listitem><para>\n+<emphasis>Deploy-time enhancement</emphasis>: if you are running your\n+application inside a Java EE 5 container, or another environment that supports\n+the JPA container contract, then OpenJPA will automatically perform class\n+transformation at deploy time.\n+                </para></listitem>\n+                <listitem><para>\n+<emphasis>Java 6 class retransformation</emphasis>: if you are running your\n+application in a Java 6 environment, OpenJPA will attempt to dynamically\n+register a <literal>ClassTransformer</literal> that will redefine your\n+persistent classes on the fly to track access to persistent data. Additionally,\n+OpenJPA will create a subclass for each of your persistent classes. When\n+you execute a query or traverse a relation, OpenJPA will return an instance\n+of the subclass. This means that the <literal>instanceof</literal> operator\n+will work as expected, but <literal>o.getClass()</literal> will return the\n+subclass instead of the class that you wrote.\n+                </para>\n+                <para>\n+You do not need to do anything at all to get this behavior. OpenJPA will\n+automatically detect whether or not the execution environment is capable of\n+Java 6 class retransformation.\n+                </para></listitem>\n+                <listitem><para>\n+<emphasis>Java 5 class redefinition</emphasis>: if you are running your\n+application in a Java 5 environment, and you specify the OpenJPA javaagent,\n+OpenJPA will use Java 5 class redefinition to redefine any persistent classes\n+that are not enhanced by thet OpenJPA javaagent. Aside from the requirement\n+that you specify a javaagent on the command line, this behavior is exactly the\n+same as the Java 6 class retransformation behavior. Of course, since the\n+OpenJPA javaagent performs enhancement by default, this will only be available\n+if you set the <literal>runtimeEnhancement</literal> javaagent flag to\n+<literal>false</literal>, or on any classes that are skipped by the OpenJPA\n+runtime enhancement process for some reason.\n+                </para></listitem>\n+                <listitem><para>\n+<emphasis>state comparison and subclassing</emphasis>: if you are running\n+in a Java 5 environment without a javaagent, or in a Java 6 environment that\n+does not support class retransformation, OpenJPA will still create subclasses\n+as outlined above. However, in some cases, OpenJPA may not be able to receive\n+notifications when you read or write persistent data.\n+                </para>\n+                <para>\n+If you are using <emphasis>property access</emphasis> for your persistent data,\n+then OpenJPA will be able to track all accesses for instances that you load\n+from the database, but not for instances that you create. This is because\n+OpenJPA will create new instances of its dynamically-generated subclass when\n+it loads data from the database. The dynamically-generated subclass has\n+code in the setters and getters that notify OpenJPA about persistent data\n+access. This means that new instances that you create will be subject to\n+state-comparison checks (see discussion below) to compute which fields to\n+write to the database, and that OpenJPA will ignore requests to evict\n+persistent data from such instances. In practice, this is not a particularly\n+bad limitation, since OpenJPA already knows that it must insert all field\n+values for new instances. So, this is only really an issue if you flush\n+changes to the database while inserting new records; after such a flush,\n+OpenJPA will need to hold potentially-unneeded hard references to the\n+new-flushed instances.\n+                </para>\n+                <para>\n+If you are using <emphasis>field access</emphasis> for your persistent data,\n+then OpenJPA will not be able to track accesses for any instances, including\n+ones that you load from the database. So, OpenJPA will perform state-comparison\n+checks to determine which fields are dirty. These state comparison checks are\n+costly in two ways. First, there is a performance penalty at flush / commit\n+time, since OpenJPA must walk through every field of every instance to determine\n+which fields of which records are dirty. Second, there is a memory penalty,\n+since OpenJPA must hold hard references to all instances that were loaded at\n+any time in a given transaction, and since OpenJPA must keep a copy of all\n+the initial values of the loaded data for later comparison. Additionally,\n+OpenJPA will ignore requests to evict persistent state for these types of\n+instances. Finally, the default lazy loading configuration will be ignored for\n+single-valued fields (one-to-one, many-to-one, and any other non-collection\n+or non-map field that has a lazy loading configuration). If you use fetch\n+groups or programmatically configure your fetch plan, OpenJPA will obey these\n+directives, but will be unable to lazily load any data that you exclude from\n+loading. As a result of these limitations, it is not recommended that you use\n+field access if you are not either running the enhancer or using OpenJPA with\n+a javaagent or in a Java 6 environment.\n+                </para></listitem>\n+            </itemizedlist>\n         </section>\n     </section>\n     <section id=\"ref_guide_pc_oid\">"},{"sha":"71df6b8671e2dda5d5e02a837d39ff4c1abb8f58","filename":"openjpa-project/src/doc/manual/samples_guide.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/58533057a0aa95e53342c4a3ed9c50dfed859a44/openjpa-project/src/doc/manual/samples_guide.xml","raw_url":"https://github.com/apache/openjpa/raw/58533057a0aa95e53342c4a3ed9c50dfed859a44/openjpa-project/src/doc/manual/samples_guide.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/samples_guide.xml?ref=58533057a0aa95e53342c4a3ed9c50dfed859a44","patch":"@@ -102,7 +102,7 @@ Compile the classes:\n             <listitem>\n                 <para>\n You should then proceed to pass in the configuration file you are using to the\n-enhancer:\n+enhancer: (Optional)\n                 </para>\n                 <para>\n <userinput>java org.apache.openjpa.enhance.PCEnhancer -p persistence.xml Machine.java Crane.java Bulldozer.java"}]}

