{"sha":"5903f31e690d02f9824dff400e9fd2763c41ded8","node_id":"MDY6Q29tbWl0MjA2MzY0OjU5MDNmMzFlNjkwZDAyZjk4MjRkZmY0MDBlOWZkMjc2M2M0MWRlZDg=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-05-12T19:11:14Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-05-12T19:11:14Z"},"message":"OPENJPA-1665: Update BrokerImpl to skip check for duplicate ids when they are auto generated.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@943638 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5490c9449e98d8023c8c0cddca8ee0f71df30abc","url":"https://api.github.com/repos/apache/openjpa/git/trees/5490c9449e98d8023c8c0cddca8ee0f71df30abc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5903f31e690d02f9824dff400e9fd2763c41ded8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5903f31e690d02f9824dff400e9fd2763c41ded8","html_url":"https://github.com/apache/openjpa/commit/5903f31e690d02f9824dff400e9fd2763c41ded8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5903f31e690d02f9824dff400e9fd2763c41ded8/comments","author":null,"committer":null,"parents":[{"sha":"85ba2eada3ffc4eeba3ed8e913ccfee560d6b006","url":"https://api.github.com/repos/apache/openjpa/commits/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006","html_url":"https://github.com/apache/openjpa/commit/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006"}],"stats":{"total":105,"additions":103,"deletions":2},"files":[{"sha":"daad72948cea39fc723b6976a2443fff88a074ac","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/5903f31e690d02f9824dff400e9fd2763c41ded8/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/5903f31e690d02f9824dff400e9fd2763c41ded8/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=5903f31e690d02f9824dff400e9fd2763c41ded8","patch":"@@ -2581,7 +2581,7 @@ else if (idType == ClassMetaData.ID_UNKNOWN)\n             }\n \n             // make sure we don't already have the instance cached\n-            checkForDuplicateId(id, obj);\n+            checkForDuplicateId(id, obj, meta);\n \n             // if had embedded sm, null it\n             if (sm != null)\n@@ -4952,7 +4952,11 @@ protected void assignObjectId(Object cache, Object id,\n     /** \n      * This method makes sure we don't already have the instance cached\n      */\n-    protected void checkForDuplicateId(Object id, Object obj) {\n+    protected void checkForDuplicateId(Object id, Object obj, ClassMetaData meta) {\n+        FieldMetaData[] pks = meta.getPrimaryKeyFields();\n+        if (pks != null && pks.length == 1 && pks[0].getValueStrategy() == ValueStrategies.AUTOASSIGN) {\n+            return;\n+        }\n         StateManagerImpl other = getStateManagerImplById(id, false);\n         if (other != null && !other.isDeleted() && !other.isNew())\n             throw new ObjectExistsException(_loc.get(\"cache-exists\","},{"sha":"7d46b1f48177cd3d9f721dfc5b657ed103fae1d4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/auto/AutoIncrementEntity.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/5903f31e690d02f9824dff400e9fd2763c41ded8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/auto/AutoIncrementEntity.java","raw_url":"https://github.com/apache/openjpa/raw/5903f31e690d02f9824dff400e9fd2763c41ded8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/auto/AutoIncrementEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/auto/AutoIncrementEntity.java?ref=5903f31e690d02f9824dff400e9fd2763c41ded8","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.auto;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class AutoIncrementEntity {\n+    @Id\n+    @GeneratedValue(strategy=GenerationType.IDENTITY)\n+    public int id;\n+\n+    public String somethingElse;\n+    \n+    public int getId(){\n+        return id;\n+    }\n+    \n+}"},{"sha":"839813ff45c5921860908235cae0559813bb94d9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/auto/TestAutoIncrement.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/5903f31e690d02f9824dff400e9fd2763c41ded8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/auto/TestAutoIncrement.java","raw_url":"https://github.com/apache/openjpa/raw/5903f31e690d02f9824dff400e9fd2763c41ded8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/auto/TestAutoIncrement.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/auto/TestAutoIncrement.java?ref=5903f31e690d02f9824dff400e9fd2763c41ded8","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.auto;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n+\n+public class TestAutoIncrement extends SingleEMTestCase {\n+    public void setUp() {\n+        super.setUp(DROP_TABLES, AutoIncrementEntity.class);\n+        if (!((JDBCConfiguration) emf.getConfiguration()).getDBDictionaryInstance().supportsAutoAssign) {\n+            return;\n+        }\n+        createZeroIdEntity();\n+    }\n+\n+    public void test() {\n+        em.getTransaction().begin();\n+        AutoIncrementEntity e1 = em.find(AutoIncrementEntity.class, 0);\n+        assertNotNull(e1);\n+        AutoIncrementEntity e2 = new AutoIncrementEntity();\n+        assertEquals(0, e2.getId());\n+        em.persist(e2);\n+        em.getTransaction().commit();\n+        assertNotEquals(0, e2.getId());\n+    }\n+    \n+    /**\n+     * A private worker method that will synthesize an Entity which has an auto generated id that starts at zero.\n+     */\n+    private void createZeroIdEntity() {\n+        em.getTransaction().begin();\n+        AutoIncrementEntity aie = new AutoIncrementEntity();\n+        em.persist(aie);\n+        em.flush();\n+        // If the created Entity has a non-zero id, update the Entity to have a zero id.\n+        if (aie.getId() != 0) {\n+            em.createQuery(\"UPDATE AutoIncrementEntity a SET a.id = 0 WHERE a.id = :id\")\n+                .setParameter(\"id\", aie.getId()).executeUpdate();\n+        }\n+        em.getTransaction().commit();\n+    }\n+}"}]}

