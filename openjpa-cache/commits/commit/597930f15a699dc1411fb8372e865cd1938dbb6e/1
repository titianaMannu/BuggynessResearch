{"sha":"597930f15a699dc1411fb8372e865cd1938dbb6e","node_id":"MDY6Q29tbWl0MjA2MzY0OjU5NzkzMGYxNWE2OTlkYzE0MTFmYjgzNzJlODY1Y2QxOTM4ZGJiNmU=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-12-14T20:27:16Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-12-14T20:27:16Z"},"message":"JPA says an EM should act closed when close() has been invoked even if the\npersistence context remains open while the current managed transaction \ncompletes.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@487339 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3fb42b2e2093847adc373d8705f5bcde0e80df1c","url":"https://api.github.com/repos/apache/openjpa/git/trees/3fb42b2e2093847adc373d8705f5bcde0e80df1c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/597930f15a699dc1411fb8372e865cd1938dbb6e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/597930f15a699dc1411fb8372e865cd1938dbb6e","html_url":"https://github.com/apache/openjpa/commit/597930f15a699dc1411fb8372e865cd1938dbb6e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/597930f15a699dc1411fb8372e865cd1938dbb6e/comments","author":null,"committer":null,"parents":[{"sha":"d8be93089cba9c9a129ea229d91fede7ef23c02d","url":"https://api.github.com/repos/apache/openjpa/commits/d8be93089cba9c9a129ea229d91fede7ef23c02d","html_url":"https://github.com/apache/openjpa/commit/d8be93089cba9c9a129ea229d91fede7ef23c02d"}],"stats":{"total":160,"additions":156,"deletions":4},"files":[{"sha":"e6795238ceafe86ed96831bb8a1c6802652db862","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/597930f15a699dc1411fb8372e865cd1938dbb6e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","raw_url":"https://github.com/apache/openjpa/raw/597930f15a699dc1411fb8372e865cd1938dbb6e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java?ref=597930f15a699dc1411fb8372e865cd1938dbb6e","patch":"@@ -650,6 +650,12 @@ public void lockAll(Collection objs, int level, int timeout,\n      */\n     public boolean isClosed();\n \n+    /**\n+     * Whether {@link #close} has been invoked, though the broker might \n+     * remain open until the current managed transaction completes.\n+     */\n+    public boolean isCloseInvoked();\n+\n     /**\n      * Close the broker.\n      */"},{"sha":"2632b26c8a1a87bf320104723b5f81337b806c09","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/597930f15a699dc1411fb8372e865cd1938dbb6e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/597930f15a699dc1411fb8372e865cd1938dbb6e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=597930f15a699dc1411fb8372e865cd1938dbb6e","patch":"@@ -3955,6 +3955,10 @@ public boolean isClosed() {\n         return _closed != null;\n     }\n \n+    public boolean isCloseInvoked() {\n+        return _closed != null || (_flags & FLAG_CLOSE_INVOKED) != 0;\n+    }\n+\n     public void close() {\n         beginOperation(false);\n         try {"},{"sha":"71d5344c9b04d7dda5885f14004a969ab93943ea","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/597930f15a699dc1411fb8372e865cd1938dbb6e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","raw_url":"https://github.com/apache/openjpa/raw/597930f15a699dc1411fb8372e865cd1938dbb6e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java?ref=597930f15a699dc1411fb8372e865cd1938dbb6e","patch":"@@ -1271,6 +1271,14 @@ public boolean isClosed() {\n         }\n     }\n \n+    public boolean isCloseInvoked() {\n+        try {\n+            return _broker.isCloseInvoked();\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n     public void assertOpen() {\n         try {\n             _broker.assertOpen();"},{"sha":"e8df235cc11cc5bfdb646f0415d74caa53ddece0","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":110,"deletions":4,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/597930f15a699dc1411fb8372e865cd1938dbb6e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/597930f15a699dc1411fb8372e865cd1938dbb6e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=597930f15a699dc1411fb8372e865cd1938dbb6e","patch":"@@ -95,6 +95,7 @@ public ConnectionMetaData getMetaData()\n \n     public Interaction createInteraction()\n         throws ResourceException {\n+        assertOpen();\n         return _broker.createInteraction();\n     }\n \n@@ -117,6 +118,7 @@ public OpenJPAConfiguration getConfiguration() {\n     }\n \n     public FetchPlan getFetchPlan() {\n+        assertOpen();\n         _broker.lock();\n         try {\n             if (_fetch == null)\n@@ -145,6 +147,7 @@ public boolean getSyncWithManagedTransactions() {\n     }\n \n     public void setSyncWithManagedTransactions(boolean sync) {\n+        assertOpen();\n         _broker.setSyncWithManagedTransactions(sync);\n     }\n \n@@ -165,6 +168,7 @@ public boolean getMultithreaded() {\n     }\n \n     public void setMultithreaded(boolean multithreaded) {\n+        assertOpen();\n         _broker.setMultithreaded(multithreaded);\n     }\n \n@@ -173,6 +177,7 @@ public boolean getIgnoreChanges() {\n     }\n \n     public void setIgnoreChanges(boolean val) {\n+        assertOpen();\n         _broker.setIgnoreChanges(val);\n     }\n \n@@ -181,6 +186,7 @@ public boolean getNontransactionalRead() {\n     }\n \n     public void setNontransactionalRead(boolean val) {\n+        assertOpen();\n         _broker.setNontransactionalRead(val);\n     }\n \n@@ -189,6 +195,7 @@ public boolean getNontransactionalWrite() {\n     }\n \n     public void setNontransactionalWrite(boolean val) {\n+        assertOpen();\n         _broker.setNontransactionalWrite(val);\n     }\n \n@@ -197,6 +204,7 @@ public boolean getOptimistic() {\n     }\n \n     public void setOptimistic(boolean val) {\n+        assertOpen();\n         _broker.setOptimistic(val);\n     }\n \n@@ -205,6 +213,7 @@ public int getRestoreState() {\n     }\n \n     public void setRestoreState(int val) {\n+        assertOpen();\n         _broker.setRestoreState(val);\n     }\n \n@@ -213,6 +222,7 @@ public boolean getRetainState() {\n     }\n \n     public void setRetainState(boolean val) {\n+        assertOpen();\n         _broker.setRetainState(val);\n     }\n \n@@ -221,6 +231,7 @@ public int getAutoClear() {\n     }\n \n     public void setAutoClear(int val) {\n+        assertOpen();\n         _broker.setAutoClear(val);\n     }\n \n@@ -229,6 +240,7 @@ public int getDetachState() {\n     }\n \n     public void setDetachState(int mode) {\n+        assertOpen();\n         _broker.setDetachState(mode);\n     }\n \n@@ -237,10 +249,12 @@ public int getAutoDetach() {\n     }\n \n     public void setAutoDetach(int flags) {\n+        assertOpen();\n         _broker.setAutoDetach(flags);\n     }\n \n     public void setAutoDetach(int flag, boolean on) {\n+        assertOpen();\n         _broker.setAutoDetach(flag, on);\n     }\n \n@@ -249,6 +263,7 @@ public boolean getEvictFromStoreCache() {\n     }\n \n     public void setEvictFromStoreCache(boolean evict) {\n+        assertOpen();\n         _broker.setEvictFromDataCache(evict);\n     }\n \n@@ -257,6 +272,7 @@ public boolean getPopulateStoreCache() {\n     }\n \n     public void setPopulateStoreCache(boolean cache) {\n+        assertOpen();\n         _broker.setPopulateDataCache(cache);\n     }\n \n@@ -265,6 +281,7 @@ public boolean isLargeTransaction() {\n     }\n \n     public void setLargeTransaction(boolean largeTransaction) {\n+        assertOpen();\n         _broker.setLargeTransaction(largeTransaction);\n     }\n \n@@ -273,14 +290,17 @@ public Object getUserObject(Object key) {\n     }\n \n     public Object putUserObject(Object key, Object val) {\n+        assertOpen();\n         return _broker.putUserObject(key, val);\n     }\n \n     public void addTransactionListener(Object listener) {\n+        assertOpen();\n         _broker.addTransactionListener(listener);\n     }\n \n     public void removeTransactionListener(Object listener) {\n+        assertOpen();\n         _broker.removeTransactionListener(listener);\n     }\n \n@@ -289,14 +309,17 @@ public int getTransactionListenerCallbackMode() {\n     }\n \n     public void setTransactionListenerCallbackMode(int mode) {\n+        assertOpen();\n         _broker.setTransactionListenerCallbackMode(mode);\n     }\n \n     public void addLifecycleListener(Object listener, Class... classes) {\n+        assertOpen();\n         _broker.addLifecycleListener(listener, classes);\n     }\n \n     public void removeLifecycleListener(Object listener) {\n+        assertOpen();\n         _broker.removeLifecycleListener(listener);\n     }\n \n@@ -305,17 +328,20 @@ public int getLifecycleListenerCallbackMode() {\n     }\n \n     public void setLifecycleListenerCallbackMode(int mode) {\n+        assertOpen();\n         _broker.setLifecycleListenerCallbackMode(mode);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     public <T> T getReference(Class<T> cls, Object oid) {\n+        assertOpen();\n         oid = _broker.newObjectId(cls, oid);\n         return (T) _broker.find(oid, false, this);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     public <T> T find(Class<T> cls, Object oid) {\n+        assertOpen();\n         oid = _broker.newObjectId(cls, oid);\n         return (T) _broker.find(oid, true, this);\n     }\n@@ -330,6 +356,7 @@ public void setLifecycleListenerCallbackMode(int mode) {\n \n     @SuppressWarnings(\"unchecked\")\n     public <T> Collection<T> findAll(final Class<T> cls, Collection oids) {\n+        assertOpen();\n         Object[] objs = _broker.findAll(oids, true, new FindCallbacks() {\n             public Object processArgument(Object oid) {\n                 return _broker.newObjectId(cls, oid);\n@@ -344,15 +371,16 @@ public Object processReturn(Object oid, OpenJPAStateManager sm) {\n \n     @SuppressWarnings(\"unchecked\")\n     public <T> T findCached(Class<T> cls, Object oid) {\n+        assertOpen();\n         return (T) _broker.findCached(_broker.newObjectId(cls, oid), this);\n     }\n \n     public Class getObjectIdClass(Class cls) {\n+        assertOpen();\n         if (cls == null)\n             return null;\n-        return OpenJPAPersistence\n-            .fromOpenJPAObjectIdClass(_broker.getObjectIdType\n-                (cls));\n+        return OpenJPAPersistence.fromOpenJPAObjectIdClass\n+                (_broker.getObjectIdType(cls));\n     }\n \n     public EntityTransaction getTransaction() {\n@@ -363,6 +391,7 @@ public EntityTransaction getTransaction() {\n     }\n \n     public void joinTransaction() {\n+        assertOpen();\n         if (!_broker.syncWithManagedTransaction())\n             throw new TransactionRequiredException(_loc.get\n                 (\"no-managed-trans\"), null, null, false);\n@@ -414,35 +443,43 @@ public void setRollbackOnly() {\n     }\n \n     public void setSavepoint(String name) {\n+        assertOpen();\n         _broker.setSavepoint(name);\n     }\n \n     public void rollbackToSavepoint() {\n+        assertOpen();\n         _broker.rollbackToSavepoint();\n     }\n \n     public void rollbackToSavepoint(String name) {\n+        assertOpen();\n         _broker.rollbackToSavepoint(name);\n     }\n \n     public void releaseSavepoint() {\n+        assertOpen();\n         _broker.releaseSavepoint();\n     }\n \n     public void releaseSavepoint(String name) {\n+        assertOpen();\n         _broker.releaseSavepoint(name);\n     }\n \n     public void flush() {\n+        assertOpen();\n         _broker.assertActiveTransaction();\n         _broker.flush();\n     }\n \n     public void preFlush() {\n+        assertOpen();\n         _broker.preFlush();\n     }\n \n     public void validateChanges() {\n+        assertOpen();\n         _broker.validateChanges();\n     }\n \n@@ -459,6 +496,7 @@ public void beginStore() {\n     }\n \n     public boolean contains(Object entity) {\n+        assertOpen();\n         if (entity == null)\n             return false;\n         OpenJPAStateManager sm = _broker.getStateManager(entity);\n@@ -483,6 +521,7 @@ public boolean containsAll(Collection entities) {\n     }\n \n     public void persist(Object entity) {\n+        assertOpen();\n         _broker.persist(entity, this);\n     }\n \n@@ -491,10 +530,12 @@ public void persistAll(Object... entities) {\n     }\n \n     public void persistAll(Collection entities) {\n+        assertOpen();\n         _broker.persistAll(entities, this);\n     }\n \n     public void remove(Object entity) {\n+        assertOpen();\n         _broker.delete(entity, this);\n     }\n \n@@ -503,14 +544,17 @@ public void removeAll(Object... entities) {\n     }\n \n     public void removeAll(Collection entities) {\n+        assertOpen();\n         _broker.deleteAll(entities, this);\n     }\n \n     public void release(Object entity) {\n+        assertOpen();\n         _broker.release(entity, this);\n     }\n \n     public void releaseAll(Collection entities) {\n+        assertOpen();\n         _broker.releaseAll(entities, this);\n     }\n \n@@ -519,16 +563,19 @@ public void releaseAll(Object... entities) {\n     }\n \n     public void refresh(Object entity) {\n+        assertOpen();\n         _broker.assertWriteOperation();\n         _broker.refresh(entity, this);\n     }\n \n     public void refreshAll() {\n+        assertOpen();\n         _broker.assertWriteOperation();\n         _broker.refreshAll(_broker.getTransactionalObjects(), this);\n     }\n \n     public void refreshAll(Collection entities) {\n+        assertOpen();\n         _broker.assertWriteOperation();\n         _broker.refreshAll(entities, this);\n     }\n@@ -538,10 +585,12 @@ public void refreshAll(Object... entities) {\n     }\n \n     public void retrieve(Object entity) {\n+        assertOpen();\n         _broker.retrieve(entity, true, this);\n     }\n \n     public void retrieveAll(Collection entities) {\n+        assertOpen();\n         _broker.retrieveAll(entities, true, this);\n     }\n \n@@ -550,10 +599,12 @@ public void retrieveAll(Object... entities) {\n     }\n \n     public void evict(Object entity) {\n+        assertOpen();\n         _broker.evict(entity, this);\n     }\n \n     public void evictAll(Collection entities) {\n+        assertOpen();\n         _broker.evictAll(entities, this);\n     }\n \n@@ -562,32 +613,39 @@ public void evictAll(Object... entities) {\n     }\n \n     public void evictAll() {\n+        assertOpen();\n         _broker.evictAll(this);\n     }\n \n     public void evictAll(Class cls) {\n+        assertOpen();\n         _broker.evictAll(_broker.newExtent(cls, true), this);\n     }\n \n     public void evictAll(Extent extent) {\n+        assertOpen();\n         _broker.evictAll(extent.getDelegate(), this);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     public <T> T detach(T entity) {\n+        assertOpen();\n         return (T) _broker.detach(entity, this);\n     }\n \n     public Object[] detachAll(Object... entities) {\n+        assertOpen();\n         return _broker.detachAll(Arrays.asList(entities), this);\n     }\n \n     public Collection detachAll(Collection entities) {\n+        assertOpen();\n         return Arrays.asList(_broker.detachAll(entities, this));\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     public <T> T merge(T entity) {\n+        assertOpen();\n         return (T) _broker.attach(entity, true, this);\n     }\n \n@@ -598,34 +656,42 @@ public Collection detachAll(Collection entities) {\n     }\n \n     public Collection mergeAll(Collection entities) {\n+        assertOpen();\n         return Arrays.asList(_broker.attachAll(entities, true, this));\n     }\n \n     public void transactional(Object entity, boolean updateVersion) {\n+        assertOpen();\n         _broker.transactional(entity, updateVersion, this);\n     }\n \n     public void transactionalAll(Collection objs, boolean updateVersion) {\n+        assertOpen();\n         _broker.transactionalAll(objs, updateVersion, this);\n     }\n \n     public void transactionalAll(Object[] objs, boolean updateVersion) {\n+        assertOpen();\n         _broker.transactionalAll(Arrays.asList(objs), updateVersion, this);\n     }\n \n     public void nontransactional(Object entity) {\n+        assertOpen();\n         _broker.nontransactional(entity, this);\n     }\n \n     public void nontransactionalAll(Collection objs) {\n+        assertOpen();\n         _broker.nontransactionalAll(objs, this);\n     }\n \n     public void nontransactionalAll(Object[] objs) {\n+        assertOpen();\n         _broker.nontransactionalAll(Arrays.asList(objs), this);\n     }\n \n     public Generator getNamedGenerator(String name) {\n+        assertOpen();\n         try {\n             SequenceMetaData meta = _broker.getConfiguration().\n                 getMetaDataRepositoryInstance().getSequenceMetaData(name,\n@@ -638,6 +704,7 @@ public Generator getNamedGenerator(String name) {\n     }\n \n     public Generator getIdGenerator(Class forClass) {\n+        assertOpen();\n         try {\n             ClassMetaData meta = _broker.getConfiguration().\n                 getMetaDataRepositoryInstance().getMetaData(forClass,\n@@ -651,6 +718,7 @@ public Generator getIdGenerator(Class forClass) {\n     }\n \n     public Generator getFieldGenerator(Class forClass, String fieldName) {\n+        assertOpen();\n         try {\n             ClassMetaData meta = _broker.getConfiguration().\n                 getMetaDataRepositoryInstance().getMetaData(forClass,\n@@ -669,6 +737,7 @@ public Generator getFieldGenerator(Class forClass, String fieldName) {\n     }\n \n     public <T> Extent<T> createExtent(Class<T> cls, boolean subclasses) {\n+        assertOpen();\n         return new ExtentImpl<T>(this, _broker.newExtent(cls, subclasses));\n     }\n \n@@ -677,18 +746,21 @@ public OpenJPAQuery createQuery(String query) {\n     }\n \n     public OpenJPAQuery createQuery(String language, String query) {\n+        assertOpen();\n         return new QueryImpl(this, _broker.newQuery(language, query));\n     }\n \n     public OpenJPAQuery createQuery(Query query) {\n         if (query == null)\n             return createQuery((String) null);\n+        assertOpen();\n         org.apache.openjpa.kernel.Query q = ((QueryImpl) query).getDelegate();\n         return new QueryImpl(this, _broker.newQuery(q.getLanguage(),\n             q));\n     }\n \n     public OpenJPAQuery createNamedQuery(String name) {\n+        assertOpen();\n         try {\n             QueryMetaData meta = _broker.getConfiguration().\n                 getMetaDataRepositoryInstance().getQueryMetaData(null, name,\n@@ -719,6 +791,7 @@ public OpenJPAQuery createNativeQuery(String query, Class cls) {\n     }\n \n     public OpenJPAQuery createNativeQuery(String query, String mappingName) {\n+        assertOpen();\n         validateSQL(query);\n         org.apache.openjpa.kernel.Query kernelQuery = _broker.newQuery(\n             QueryLanguages.LANG_SQL, query);\n@@ -735,11 +808,13 @@ private static void validateSQL(String query) {\n     }\n \n     public void setFlushMode(FlushModeType flushMode) {\n+        assertOpen();\n         _broker.getFetchConfiguration().setFlushBeforeQueries\n             (toFlushBeforeQueries(flushMode));\n     }\n \n     public FlushModeType getFlushMode() {\n+        assertOpen();\n         return fromFlushBeforeQueries(_broker.getFetchConfiguration().\n             getFlushBeforeQueries());\n     }\n@@ -773,6 +848,7 @@ static int toFlushBeforeQueries(FlushModeType flushMode) {\n     }\n \n     public void clear() {\n+        assertOpen();\n         _broker.detachAll(this);\n     }\n \n@@ -781,26 +857,32 @@ public Object getDelegate() {\n     }\n \n     public LockModeType getLockMode(Object entity) {\n+        assertOpen();\n         return fromLockLevel(_broker.getLockLevel(entity));\n     }\n \n     public void lock(Object entity, LockModeType mode) {\n+        assertOpen();\n         _broker.lock(entity, toLockLevel(mode), -1, this);\n     }\n \n     public void lock(Object entity) {\n+        assertOpen();\n         _broker.lock(entity, this);\n     }\n \n     public void lock(Object entity, LockModeType mode, int timeout) {\n+        assertOpen();\n         _broker.lock(entity, toLockLevel(mode), timeout, this);\n     }\n \n     public void lockAll(Collection entities) {\n+        assertOpen();\n         _broker.lockAll(entities, this);\n     }\n \n     public void lockAll(Collection entities, LockModeType mode, int timeout) {\n+        assertOpen();\n         _broker.lockAll(entities, toLockLevel(mode), timeout, this);\n     }\n \n@@ -865,10 +947,12 @@ public boolean getOrderDirtyObjects() {\n     }\n \n     public void setOrderDirtyObjects(boolean order) {\n+        assertOpen();\n         _broker.setOrderDirtyObjects(order);\n     }\n \n     public void dirtyClass(Class cls) {\n+        assertOpen();\n         _broker.dirtyType(cls);\n     }\n \n@@ -888,6 +972,7 @@ public void dirtyClass(Class cls) {\n     }\n \n     public <T> T createInstance(Class<T> cls) {\n+        assertOpen();\n         return (T) _broker.newInstance(cls);\n     }\n \n@@ -896,10 +981,12 @@ public void close() {\n     }\n \n     public boolean isOpen() {\n-        return !_broker.isClosed();\n+        assertOpen();\n+        return !_broker.isCloseInvoked();\n     }\n \n     public void dirty(Object o, String field) {\n+        assertOpen();\n         OpenJPAStateManager sm = _broker.getStateManager(o);\n         try {\n             if (sm != null)\n@@ -910,37 +997,56 @@ public void dirty(Object o, String field) {\n     }\n \n     public Object getObjectId(Object o) {\n+        assertOpen();\n         return OpenJPAPersistence.fromOpenJPAObjectId(_broker.getObjectId(o));\n     }\n \n     public boolean isDirty(Object o) {\n+        assertOpen();\n         return _broker.isDirty(o);\n     }\n \n     public boolean isTransactional(Object o) {\n+        assertOpen();\n         return _broker.isTransactional(o);\n     }\n \n     public boolean isPersistent(Object o) {\n+        assertOpen();\n         return _broker.isPersistent(o);\n     }\n \n     public boolean isNewlyPersistent(Object o) {\n+        assertOpen();\n         return _broker.isNew(o);\n     }\n \n     public boolean isRemoved(Object o) {\n+        assertOpen();\n         return _broker.isDeleted(o);\n     }\n \n     public boolean isDetached(Object entity) {\n+        assertOpen();\n         return _broker.isDetached(entity);\n     }\n \n     public Object getVersion(Object o) {\n+        assertOpen();\n         return _broker.getVersion(o);\n     }\n \n+    /**\n+     * Throw appropriate exception if entity manager is closed.\n+     */\n+    void assertOpen() {\n+        // only throw when broker wouldn't throw anyway, because we prefer\n+        // the broker's more detailed exception when available\n+        if (!_broker.isClosed() && _broker.isCloseInvoked())\n+            throw new InvalidStateException(_loc.get(\"close-invoked\"), null,\n+                null, true);\n+    }\n+\n     ////////////////////////////////\n     // FindCallbacks implementation\n     ////////////////////////////////"},{"sha":"57a88ffba0c9937a201a16b4f03379426cf888d0","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ExtentImpl.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/597930f15a699dc1411fb8372e865cd1938dbb6e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ExtentImpl.java","raw_url":"https://github.com/apache/openjpa/raw/597930f15a699dc1411fb8372e865cd1938dbb6e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ExtentImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ExtentImpl.java?ref=597930f15a699dc1411fb8372e865cd1938dbb6e","patch":"@@ -61,6 +61,7 @@ public OpenJPAEntityManager getEntityManager() {\n     }\n \n     public FetchPlan getFetchPlan() {\n+        _em.assertOpen();\n         _extent.lock();\n         try {\n             if (_fetch == null)\n@@ -78,14 +79,17 @@ public boolean getIgnoreChanges() {\n     }\n \n     public void setIgnoreChanges(boolean ignoreChanges) {\n+        _em.assertOpen();\n         _extent.setIgnoreChanges(ignoreChanges);\n     }\n \n     public List<T> list() {\n+        _em.assertOpen();\n         return _extent.list();\n     }\n \n     public Iterator<T> iterator() {\n+        _em.assertOpen();\n         return _extent.iterator();\n     }\n "},{"sha":"5225c49fe216eb04621dcc9658f1a59479f4c0e2","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/597930f15a699dc1411fb8372e865cd1938dbb6e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/597930f15a699dc1411fb8372e865cd1938dbb6e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=597930f15a699dc1411fb8372e865cd1938dbb6e","patch":"@@ -91,6 +91,7 @@ public int getOperation() {\n     }\n \n     public FetchPlan getFetchPlan() {\n+        _em.assertOpen();\n         _query.assertNotSerialized();\n         _query.lock();\n         try {\n@@ -113,26 +114,31 @@ public boolean getIgnoreChanges() {\n     }\n \n     public OpenJPAQuery setIgnoreChanges(boolean ignore) {\n+        _em.assertOpen();\n         _query.setIgnoreChanges(ignore);\n         return this;\n     }\n \n     public OpenJPAQuery addFilterListener(FilterListener listener) {\n+        _em.assertOpen();\n         _query.addFilterListener(listener);\n         return this;\n     }\n \n     public OpenJPAQuery removeFilterListener(FilterListener listener) {\n+        _em.assertOpen();\n         _query.removeFilterListener(listener);\n         return this;\n     }\n \n     public OpenJPAQuery addAggregateListener(AggregateListener listener) {\n+        _em.assertOpen();\n         _query.addAggregateListener(listener);\n         return this;\n     }\n \n     public OpenJPAQuery removeAggregateListener(AggregateListener listener) {\n+        _em.assertOpen();\n         _query.removeAggregateListener(listener);\n         return this;\n     }\n@@ -142,6 +148,7 @@ public Collection getCandidateCollection() {\n     }\n \n     public OpenJPAQuery setCandidateCollection(Collection coll) {\n+        _em.assertOpen();\n         _query.setCandidateCollection(coll);\n         return this;\n     }\n@@ -154,6 +161,7 @@ public Class getResultClass() {\n     }\n \n     public OpenJPAQuery setResultClass(Class cls) {\n+        _em.assertOpen();\n         if (OpenJPAPersistence.isManagedType(_em, cls))\n             _query.setCandidateType(cls, true);\n         else\n@@ -166,6 +174,7 @@ public boolean hasSubclasses() {\n     }\n \n     public OpenJPAQuery setSubclasses(boolean subs) {\n+        _em.assertOpen();\n         Class cls = _query.getCandidateType();\n         _query.setCandidateExtent(_query.getBroker().newExtent(cls, subs));\n         return this;\n@@ -176,6 +185,7 @@ public int getFirstResult() {\n     }\n \n     public OpenJPAQuery setFirstResult(int startPosition) {\n+        _em.assertOpen();\n         _query.setRange(startPosition, _query.getEndRange());\n         return this;\n     }\n@@ -185,6 +195,7 @@ public int getMaxResults() {\n     }\n \n     public OpenJPAQuery setMaxResults(int max) {\n+        _em.assertOpen();\n         long start = _query.getStartRange();\n         if (max == Integer.MAX_VALUE)\n             _query.setRange(start, Long.MAX_VALUE);\n@@ -194,6 +205,7 @@ public OpenJPAQuery setMaxResults(int max) {\n     }\n \n     public OpenJPAQuery compile() {\n+        _em.assertOpen();\n         _query.compile();\n         return this;\n     }\n@@ -248,6 +260,7 @@ private void validateParameter(String paramDesc, Class type, Object param) {\n     }\n \n     public List getResultList() {\n+        _em.assertOpen();\n         Object ob = execute();\n         if (ob instanceof List) {\n             List ret = (List) ob;\n@@ -265,6 +278,7 @@ public List getResultList() {\n      * Execute a query that returns a single result.\n      */\n     public Object getSingleResult() {\n+        _em.assertOpen();\n         Object ob = execute();\n         if (!(ob instanceof List))\n             return ob;\n@@ -287,6 +301,7 @@ public Object getSingleResult() {\n     }\n \n     public int executeUpdate() {\n+        _em.assertOpen();\n         if (_query.getOperation() == OP_DELETE) {\n             // handle which types of parameters we are using, if any\n             if (_positional != null)\n@@ -324,12 +339,14 @@ public FlushModeType getFlushMode() {\n     }\n \n     public OpenJPAQuery setFlushMode(FlushModeType flushMode) {\n+        _em.assertOpen();\n         _query.getFetchConfiguration().setFlushBeforeQueries\n             (EntityManagerImpl.toFlushBeforeQueries(flushMode));\n         return this;\n     }\n \n     public OpenJPAQuery setHint(String key, Object value) {\n+        _em.assertOpen();\n         if (key == null || !key.startsWith(\"openjpa.\"))\n             return this;\n         String k = key.substring(\"openjpa.\".length());\n@@ -380,6 +397,7 @@ public OpenJPAQuery setParameter(int position, Date value,\n     }\n \n     public OpenJPAQuery setParameter(int position, Object value) {\n+        _em.assertOpen();\n         _query.lock();\n         try {\n             // not allowed to mix positional and named parameters (EDR2 3.6.4)\n@@ -419,6 +437,7 @@ public OpenJPAQuery setParameter(String name, Date value,\n     }\n \n     public OpenJPAQuery setParameter(String name, Object value) {\n+        _em.assertOpen();\n         _query.lock();\n         try {\n             // not allowed to mix positional and named parameters (EDR2 3.6.4)\n@@ -441,6 +460,7 @@ public boolean hasPositionalParameters() {\n     }\n \n     public Object[] getPositionalParameters() {\n+        _em.assertOpen();\n         _query.lock();\n         try {\n             return (_positional == null) ? EMPTY_ARRAY : _positional.toArray();\n@@ -450,6 +470,7 @@ public boolean hasPositionalParameters() {\n     }\n \n     public OpenJPAQuery setParameters(Object... params) {\n+        _em.assertOpen();\n         _query.lock();\n         try {\n             _positional = null;\n@@ -474,6 +495,7 @@ public Map getNamedParameters() {\n     }\n \n     public OpenJPAQuery setParameters(Map params) {\n+        _em.assertOpen();\n         _query.lock();\n         try {\n             _positional = null;"},{"sha":"93099142b5cd6dc4ed6545627661643d4db19bbf","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/597930f15a699dc1411fb8372e865cd1938dbb6e/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/597930f15a699dc1411fb8372e865cd1938dbb6e/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties?ref=597930f15a699dc1411fb8372e865cd1938dbb6e","patch":"@@ -12,6 +12,8 @@\n # See the License for the specific language governing permissions and\n # limitations under the License.\n \n+close-invoked: You have closed the EntityManager, though the persistence \\\n+    context will remain active until the current transaction commits.\n no-managed-trans: There is no managed transaction in progress to sync this \\\n \tEntityManager with.\n get-managed-trans: You cannot access the EntityTransaction when using managed \\"}]}

