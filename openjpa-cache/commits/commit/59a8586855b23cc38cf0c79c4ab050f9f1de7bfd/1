{"sha":"59a8586855b23cc38cf0c79c4ab050f9f1de7bfd","node_id":"MDY6Q29tbWl0MjA2MzY0OjU5YTg1ODY4NTViMjNjYzM4Y2YwYzc5YzRhYjA1MGY5ZjFkZTdiZmQ=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2021-04-09T12:26:51Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2021-04-09T12:26:51Z"},"message":"OPENJPA-2865 use java.time handling from JDBC driver","tree":{"sha":"815c1239cc8ae5ddcd1245097facff5993aa336d","url":"https://api.github.com/repos/apache/openjpa/git/trees/815c1239cc8ae5ddcd1245097facff5993aa336d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/59a8586855b23cc38cf0c79c4ab050f9f1de7bfd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/59a8586855b23cc38cf0c79c4ab050f9f1de7bfd","html_url":"https://github.com/apache/openjpa/commit/59a8586855b23cc38cf0c79c4ab050f9f1de7bfd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/59a8586855b23cc38cf0c79c4ab050f9f1de7bfd/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"c7539a11715954db1b8d55789e386fa7dae0837f","url":"https://api.github.com/repos/apache/openjpa/commits/c7539a11715954db1b8d55789e386fa7dae0837f","html_url":"https://github.com/apache/openjpa/commit/c7539a11715954db1b8d55789e386fa7dae0837f"}],"stats":{"total":86,"additions":73,"deletions":13},"files":[{"sha":"b35290868e799f295548d983a7bf88229fbcc3be","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","status":"modified","additions":73,"deletions":13,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/59a8586855b23cc38cf0c79c4ab050f9f1de7bfd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/59a8586855b23cc38cf0c79c4ab050f9f1de7bfd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java?ref=59a8586855b23cc38cf0c79c4ab050f9f1de7bfd","patch":"@@ -34,6 +34,10 @@\n import java.sql.Statement;\n import java.sql.Timestamp;\n import java.sql.Types;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.OffsetDateTime;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Calendar;\n@@ -93,6 +97,14 @@\n      */\n     public String autoAssignSequenceName = null;\n \n+    /**\n+     * Whether this JDBC driver has native java.time support for\n+     * LocalDate, LocalDateTime, LocalTime, OffsetTime and OffsetDateTime\n+     *\n+     *\n+     */\n+    public boolean nativeJavaTimeSupport = true;\n+\n     /**\n      * Flag to use OpenJPA 0.3 style naming for auto assign sequence name and\n      * trigger name for backwards compatibility.\n@@ -218,7 +230,7 @@ public OracleDictionary() {\n             \"EXCLUSIVE\", \"EXISTS\", \"FILE\", \"FLOAT\", \"FOR\", \"FROM\", \"GRANT\",\n             \"GROUP\", \"HAVING\", \"IDENTIFIED\", \"IMMEDIATE\", \"IN\", \"INCREMENT\",\n             \"INDEX\", \"INITIAL\", \"INSERT\", \"INTEGER\", \"INTERSECT\", \"INTO\",\n-            \"IS\", \"LEVEL\", \"LIKE\", \"LOCK\", \"LONG\", \"MAXEXTENTS\", \"MINUS\",\n+            \"IS\", \"KEY\", \"LEVEL\", \"LIKE\", \"LOCK\", \"LONG\", \"MAXEXTENTS\", \"MINUS\",\n             \"MODE\", \"NOAUDIT\", \"NOCOMPRESS\", \"NOT\", \"NOWAIT\", \"NULL\", \"NUMBER\",\n             \"OF\", \"OFFLINE\", \"ON\", \"ONLINE\", \"OPTION\", \"OR\", \"ORDER\", \"PCTFREE\",\n             \"PRIOR\", \"PRIVILEGES\", \"PUBLIC\", \"REVOKE\", \"ROW\", \"ROWS\", \"SELECT\",\n@@ -302,6 +314,10 @@ public void connectedConfiguration(Connection conn)\n                     maxEmbeddedBlobSize = -1;\n                     maxEmbeddedClobSize = -1;\n                 }\n+                if (jdbcMajor < 18) {\n+                    // no native java.time support for old JDBC drivers.\n+                    nativeJavaTimeSupport = false;\n+                }\n                 String productVersion = meta.getDatabaseProductVersion()\n                     .split(\"Release \",0)[1].split(\"\\\\.\",0)[0];\n                 int release = Integer.parseInt(productVersion);\n@@ -648,18 +664,18 @@ public void setClobString(PreparedStatement stmnt, int idx, String val,\n         Column col)\n         throws SQLException {\n \n-    \t//We need a place to detect if the user is setting the 'supportsSetClob' property.\n-    \t//While in previous releases this property had meaning, it is no longer useful\n-    \t//given the code added via OPENJPA-1691.  As such, we need to warn user's the\n-    \t//property no longer has meaning.  While it would be nice to have a better way\n-    \t//to detect if the supportsSetClob property has been set, the best we can do\n-    \t//is detect the variable in this code path as this is the path a user's code\n-    \t//would go down if they are still executing code which actually made use of\n-    \t//the support provided via setting supportsSetClob.\n-    \tif (supportsSetClob && logSupportsSetClobWarning){\n-    \t\tlog.warn(_loc.get(\"oracle-set-clob-warning\"));\n-    \t\tlogSupportsSetClobWarning=false;\n-    \t}\n+        //We need a place to detect if the user is setting the 'supportsSetClob' property.\n+        //While in previous releases this property had meaning, it is no longer useful\n+        //given the code added via OPENJPA-1691.  As such, we need to warn user's the\n+        //property no longer has meaning.  While it would be nice to have a better way\n+        //to detect if the supportsSetClob property has been set, the best we can do\n+        //is detect the variable in this code path as this is the path a user's code\n+        //would go down if they are still executing code which actually made use of\n+        //the support provided via setting supportsSetClob.\n+        if (supportsSetClob && logSupportsSetClobWarning){\n+            log.warn(_loc.get(\"oracle-set-clob-warning\"));\n+            logSupportsSetClobWarning=false;\n+        }\n \n         if (col.isXML()) {\n             if (isJDBC4) {\n@@ -704,6 +720,46 @@ else if (colType == Types.OTHER || col.isXML())\n             super.setNull(stmnt, idx, colType, col);\n     }\n \n+    @Override\n+    public void setLocalDate(PreparedStatement stmnt, int idx, LocalDate val, Column col) throws SQLException {\n+        stmnt.setObject(idx, val);\n+    }\n+\n+    @Override\n+    public LocalDate getLocalDate(ResultSet rs, int column) throws SQLException {\n+        return rs.getObject(column, LocalDate.class);\n+    }\n+\n+    @Override\n+    public void setLocalTime(PreparedStatement stmnt, int idx, LocalTime val, Column col) throws SQLException {\n+        stmnt.setObject(idx, val);\n+    }\n+\n+    @Override\n+    public LocalTime getLocalTime(ResultSet rs, int column) throws SQLException {\n+        return rs.getObject(column, LocalTime.class);\n+    }\n+\n+    @Override\n+    public void setLocalDateTime(PreparedStatement stmnt, int idx, LocalDateTime val, Column col) throws SQLException {\n+        stmnt.setObject(idx, val);\n+    }\n+\n+    @Override\n+    public LocalDateTime getLocalDateTime(ResultSet rs, int column) throws SQLException {\n+        return rs.getObject(column, LocalDateTime.class);\n+    }\n+\n+    @Override\n+    public void setOffsetDateTime(PreparedStatement stmnt, int idx, OffsetDateTime val, Column col) throws SQLException {\n+        stmnt.setObject(idx, val);\n+    }\n+\n+    @Override\n+    public OffsetDateTime getOffsetDateTime(ResultSet rs, int column) throws SQLException {\n+        return rs.getObject(column, OffsetDateTime.class);\n+    }\n+\n     @Override\n     public String getClobString(ResultSet rs, int column)\n         throws SQLException {\n@@ -831,6 +887,10 @@ else if (\"XMLTYPE\".equalsIgnoreCase(typeName)) {\n      */\n     @Override\n     public int getPreferredType(int type) {\n+        if (nativeJavaTimeSupport) {\n+            return type;\n+        }\n+\n         switch (type) {\n             case Types.TIME_WITH_TIMEZONE:\n                 return Types.TIME;"}]}

