{"sha":"59bd5b0d3f891f16d7f9ca93dea13b40c082c11d","node_id":"MDY6Q29tbWl0MjA2MzY0OjU5YmQ1YjBkM2Y4OTFmMTZkN2Y5Y2E5M2RlYTEzYjQwYzA4MmMxMWQ=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-05-09T23:05:16Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-05-09T23:05:16Z"},"message":"OPENJPA-51 removing testcases\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@536706 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cce64d06212d5b032ae1f078532c5054a6ca9b50","url":"https://api.github.com/repos/apache/openjpa/git/trees/cce64d06212d5b032ae1f078532c5054a6ca9b50"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/59bd5b0d3f891f16d7f9ca93dea13b40c082c11d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/59bd5b0d3f891f16d7f9ca93dea13b40c082c11d","html_url":"https://github.com/apache/openjpa/commit/59bd5b0d3f891f16d7f9ca93dea13b40c082c11d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/59bd5b0d3f891f16d7f9ca93dea13b40c082c11d/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"a92785fea6938eebd85f1a6f8ed7d29fe20307cf","url":"https://api.github.com/repos/apache/openjpa/commits/a92785fea6938eebd85f1a6f8ed7d29fe20307cf","html_url":"https://github.com/apache/openjpa/commit/a92785fea6938eebd85f1a6f8ed7d29fe20307cf"}],"stats":{"total":261,"additions":0,"deletions":261},"files":[{"sha":"594b668445072b7ec5bcb56ca3ab99ef2fed3beb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/CustomerEntity.java","status":"removed","additions":0,"deletions":87,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/a92785fea6938eebd85f1a6f8ed7d29fe20307cf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/CustomerEntity.java","raw_url":"https://github.com/apache/openjpa/raw/a92785fea6938eebd85f1a6f8ed7d29fe20307cf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/CustomerEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/CustomerEntity.java?ref=a92785fea6938eebd85f1a6f8ed7d29fe20307cf","patch":"@@ -1,87 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-import java.util.Collection;\r\n-import java.util.ArrayList;\r\n-\r\n-@Entity(name=\"Customer\")\r\n-@Table(name=\"CUSTOMERTB\")\r\n-public class CustomerEntity {\r\n-\t\t\r\n-\tpublic enum CreditRating { POOR, GOOD, EXCELLENT };\r\n-\t\r\n-    @Id \r\n-    @GeneratedValue\r\n-     long cid;\r\n-\t@Column(length=30)\r\n-\t String name;\r\n-\t@Enumerated\r\n-\t CreditRating creditRating;\r\n-\t @Version\r\n-\t long version;\r\n-\t\r\n-\t@OneToMany(fetch=FetchType.LAZY, mappedBy=\"customer\")\r\n-\tprivate Collection<OrderEntity> orders = new ArrayList<OrderEntity>();\r\n-\t\t\r\n-\tpublic CustomerEntity() {}\r\n-\t\r\n-\tpublic CustomerEntity(String name, CreditRating rating){\r\n-\t\tthis.name=name;\r\n-\t\tthis.creditRating=rating;\r\n-\t}\t\r\n-\r\n-\tpublic String getName() {\r\n-\t\treturn name;\r\n-\t}\r\n-    \r\n-\tpublic void setName(String name) {\r\n-\t\tthis.name = name;\r\n-\t}\r\n-    \r\n-\tpublic CreditRating getRating() {\r\n-\t\treturn creditRating;\r\n-\t}\r\n-    \r\n-\tpublic void setRating(CreditRating rating) {\r\n-\t\tthis.creditRating = rating;\r\n-\t}\r\n-\r\n-\tpublic Collection<OrderEntity> getOrders() {\r\n-\t\treturn orders;\r\n-\t}\r\n-    \r\n-\tpublic void setOrders(Collection<OrderEntity> orders) {\r\n-\t\tthis.orders = orders;\r\n-\t}\r\n-\t\r\n-\tpublic String toString() {\r\n-\t\treturn \"Customer:\"+cid+\" name:\"+name; \r\n-\t}\r\n-\r\n-\tpublic long getCid() {\r\n-\t\treturn cid;\r\n-\t}\r\n-\r\n-\tpublic void setCid(long cid) {\r\n-\t\tthis.cid = cid;\r\n-\t}\r\n-}\r"},{"sha":"a09f3ecb0e64bd68469be36de70805fdc35a69b8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/OrderEntity.java","status":"removed","additions":0,"deletions":80,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/a92785fea6938eebd85f1a6f8ed7d29fe20307cf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/OrderEntity.java","raw_url":"https://github.com/apache/openjpa/raw/a92785fea6938eebd85f1a6f8ed7d29fe20307cf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/OrderEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/OrderEntity.java?ref=a92785fea6938eebd85f1a6f8ed7d29fe20307cf","patch":"@@ -1,80 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity(name=\"Order\")\r\n-@Table(name=\"ORDERTB\")\r\n-public class OrderEntity {\r\n-    @Id \r\n-    @GeneratedValue\r\n-     int oid;\r\n-\r\n-     double amount;\r\n-     boolean delivered;\r\n-\r\n-    @ManyToOne\r\n-     CustomerEntity customer;\r\n-\r\n-    @Version\r\n-     long version;\r\n-\r\n-\tpublic OrderEntity(){}\r\n-\t\r\n-\tpublic OrderEntity(  double amt, boolean delivered, CustomerEntity c){\r\n-\t\tamount=amt;\r\n-\t\tthis.delivered=delivered;\r\n-\t\tcustomer=c;\r\n-\t\tif (c!=null) c.getOrders().add(this);\r\n-\t}\r\n-\t\r\n-\tpublic double getAmount() {\r\n-\t\treturn amount;\r\n-\t}\r\n-    \r\n-\tpublic void setAmount(double amount) {\r\n-\t\tthis.amount = amount;\r\n-\t}\r\n-    \r\n-\tpublic CustomerEntity getCustomer() {\r\n-\t\treturn customer;\r\n-\t}\r\n-    \r\n-\tpublic void setCustomer(CustomerEntity customer) {\r\n-\t\tthis.customer = customer;\r\n-\t}\r\n-    \r\n-\tpublic boolean isDelivered() {\r\n-\t\treturn delivered;\r\n-\t}\r\n-    \r\n-\tpublic void setDelivered(boolean delivered) {\r\n-\t\tthis.delivered = delivered;\r\n-\t}\r\n-    \r\n-\tpublic int getOid() {\r\n-\t\treturn oid;\r\n-\t}\r\n-\r\n-\tpublic String toString(){\r\n-\t\treturn \"Order:\"+oid+\" amount:\"+amount+\" delivered:\"+delivered+\" customer:\"+\r\n-\t\t ( customer!=null ? customer.getCid()  :  -1 );\r\n-\t}\r\n-}\r"},{"sha":"f2eab7afcf3183ebb79e078f0eddbe9019dbf758","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubQuery.java","status":"removed","additions":0,"deletions":94,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/a92785fea6938eebd85f1a6f8ed7d29fe20307cf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubQuery.java","raw_url":"https://github.com/apache/openjpa/raw/a92785fea6938eebd85f1a6f8ed7d29fe20307cf/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubQuery.java?ref=a92785fea6938eebd85f1a6f8ed7d29fe20307cf","patch":"@@ -1,94 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.persistence.query;\n-\n-import java.util.List;\n-import javax.persistence.EntityManager;\n-\n-import junit.textui.TestRunner;\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n-\n-/**\n- * Test queries with subselects\n- *\n- * @author Catalina Wei\n- */\n-public class TestSubQuery\n-    extends SingleEMFTestCase {\n-\n-    public void setUp() {\n-        setUp(CustomerEntity.class, CustomerEntity.class,\n-              OrderEntity.class, OrderEntity.class);\n-    }\n-\n-    public void testQuery() {\n-        EntityManager em = emf.createEntityManager();\n-        String[] query = new String[] {\n-            \"select o from Customer c, in(c.orders) o where o.amount > \"\n-                + \"(select avg(o.amount) from Order o)\",\n-            \"select c from Customer c, in(c.orders) o where o.amount > \"\n-                + \"(select avg(o.amount) from in(c.orders) o)\",\n-            \"select c from Customer c where \"\n-                + \"((select sum(o.amount) from Order o where o.customer = c) \"\n-                + \"between 100 and 200) order by c.name\",        \n-            \"select o from Order o where o.amount < \"\n-                + \"(select max(o2.amount) from Order o2 where \"\n-                + \"o2.amount = o.amount)\",\n-            \"select o from Order o where o.amount > \"\n-                + \"(select avg(o.amount) from Customer c, in(c.orders) o)\",\n-            \"select o.oid from Order o where o.amount > 10 \"\n-                + \"and o.amount < (select min(o2.amount) from Order o2 where \"\n-                + \"o2.amount > 0)\",\n-            \"select o from Order o where o.amount > any \" \n-                + \"(select o.amount from Customer c, in (c.orders) o where \"\n-                + \"c.cid = 1)\",\n-            \"select o from Order o where o.amount between \"\n-                + \"(select min(o.amount) from Customer c, in(c.orders) o) and \"\n-                + \"(select avg(o.amount) from Customer c, in(c.orders) o)\"\n-        };\n-        \n-        int failures = 0;\n-        for (int i=0; i<query.length; i++) {\n-            try {\n-                List res = em.createQuery(query[i])\n-                    .getResultList();\n-            } catch (Exception e) {\n-                failures++;\n-            }\n-        }\n-        em.getTransaction().begin();\n-        try {\n-            String update = \"update Order o set o.amount = o.amount + 1 where \"\n-                + \"o.oid not in (select o2.oid from Customer c, \"\n-                + \"in(c.orders) o2)\";\n-            em.createQuery(update).executeUpdate();\n-        }\n-        catch (Exception e) {\n-            failures++;\n-        }\n-        em.getTransaction().commit();\n-        assertEquals(0, failures);\n-        em.close();\n-    }\n-\n-    public static void main(String[] args) {\n-        TestRunner.run(TestSubQuery.class);\n-    }\n-}\n-"}]}

