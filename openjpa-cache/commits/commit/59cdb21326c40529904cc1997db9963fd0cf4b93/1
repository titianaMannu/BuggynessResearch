{"sha":"59cdb21326c40529904cc1997db9963fd0cf4b93","node_id":"MDY6Q29tbWl0MjA2MzY0OjU5Y2RiMjEzMjZjNDA1Mjk5MDRjYzE5OTdkYjk5NjNmZDBjZjRiOTM=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-04-05T20:48:54Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-04-05T20:48:54Z"},"message":"OPENJPA-1604: Backing out the two previous commits while investigating a couple test failures.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@930957 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1de08d6de408d427eca1ea43dbc490a102ed6cf7","url":"https://api.github.com/repos/apache/openjpa/git/trees/1de08d6de408d427eca1ea43dbc490a102ed6cf7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/59cdb21326c40529904cc1997db9963fd0cf4b93","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/59cdb21326c40529904cc1997db9963fd0cf4b93","html_url":"https://github.com/apache/openjpa/commit/59cdb21326c40529904cc1997db9963fd0cf4b93","comments_url":"https://api.github.com/repos/apache/openjpa/commits/59cdb21326c40529904cc1997db9963fd0cf4b93/comments","author":null,"committer":null,"parents":[{"sha":"b382e52bbdc5f2c2bd655a7b809bc324cdbd8101","url":"https://api.github.com/repos/apache/openjpa/commits/b382e52bbdc5f2c2bd655a7b809bc324cdbd8101","html_url":"https://github.com/apache/openjpa/commit/b382e52bbdc5f2c2bd655a7b809bc324cdbd8101"}],"stats":{"total":142,"additions":12,"deletions":130},"files":[{"sha":"948f144cb61266db5605ac08ee850052ead36b87","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/QueryMetaData.java","status":"modified","additions":1,"deletions":11,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/59cdb21326c40529904cc1997db9963fd0cf4b93/openjpa-kernel/src/main/java/org/apache/openjpa/meta/QueryMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/59cdb21326c40529904cc1997db9963fd0cf4b93/openjpa-kernel/src/main/java/org/apache/openjpa/meta/QueryMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/QueryMetaData.java?ref=59cdb21326c40529904cc1997db9963fd0cf4b93","patch":"@@ -58,8 +58,7 @@\n     private String _resultSetMappingName;\n     private int _lineNum;  \n     private int _colNum;  \n-    private int _lockMode;\n-    \n+\n     /**\n      * Construct with the given name.\n      */\n@@ -157,14 +156,6 @@ public String getQueryString() {\n     public void setQueryString(String query) {\n         _query = query;\n     }\n-    \n-    public void setLockMode(int mode) {\n-        _lockMode = mode;\n-    }\n-    \n-    public int getLockMode() {\n-        return _lockMode;\n-    }\n \n     /**\n      * Query hints.\n@@ -218,7 +209,6 @@ public void setInto(Query query) {\n             query.setReadOnly(_readOnly.booleanValue());\n         if (_resultSetMappingName != null)\n             query.setResultMapping(null, _resultSetMappingName);\n-        query.getFetchConfiguration().setReadLockLevel(_lockMode);\n     }\n \n     /**"},{"sha":"b816dc6f7dca2c379d4e4522b33ea827851996ee","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/LockEmployee.java","status":"modified","additions":4,"deletions":13,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/59cdb21326c40529904cc1997db9963fd0cf4b93/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/LockEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/59cdb21326c40529904cc1997db9963fd0cf4b93/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/LockEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/LockEmployee.java?ref=59cdb21326c40529904cc1997db9963fd0cf4b93","patch":"@@ -25,22 +25,13 @@\n \n import javax.persistence.Entity;\n import javax.persistence.Id;\n-import javax.persistence.LockModeType;\n-import javax.persistence.NamedQueries;\n import javax.persistence.NamedQuery;\n import javax.persistence.Version;\n \n-\n-@NamedQueries({\n-    @NamedQuery(name=\"findEmployeeById\",\n-                query=\"SELECT c FROM LockEmployee c WHERE c.id = :id\"),\n-    @NamedQuery(name=\"findEmployeeByIdWithLock\",\n-                query=\"SELECT c FROM LockEmployee c WHERE c.id = :id\",\n-                lockMode=LockModeType.PESSIMISTIC_READ),\n-    @NamedQuery(name=\"findEmployeeByIdWithNoLock\",\n-            query=\"SELECT c FROM LockEmployee c WHERE c.id = :id\",\n-            lockMode=LockModeType.NONE)\n-    })\n+@NamedQuery(\n+        name=\"findEmployeeById\"\n+        , query=\"SELECT c FROM LockEmployee c WHERE c.id = :id\"\n+        )\n \n @Entity\n public class LockEmployee implements Externalizable {"},{"sha":"160f7baaa463f366085bdc5707290c5d3e753586","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestNamedQueryLockMode.java","status":"removed","additions":0,"deletions":88,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/b382e52bbdc5f2c2bd655a7b809bc324cdbd8101/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestNamedQueryLockMode.java","raw_url":"https://github.com/apache/openjpa/raw/b382e52bbdc5f2c2bd655a7b809bc324cdbd8101/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestNamedQueryLockMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestNamedQueryLockMode.java?ref=b382e52bbdc5f2c2bd655a7b809bc324cdbd8101","patch":"@@ -1,88 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.openjpa.persistence.lockmgr;\n-\n-import javax.persistence.EntityManager;\n-import javax.persistence.Query;\n-import javax.persistence.TransactionRequiredException;\n-\n-import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n-\n-/**\n- * Tests the lock mode on named query emits a FOR UPDATE clause in target SQL query.\n- * \n- * @author Pinaki Poddar\n- *\n- */\n-public class TestNamedQueryLockMode extends SQLListenerTestCase {\n-    public void setUp() {\n-        super.setUp(CLEAR_TABLES, LockEmployee.class, \n-                \"openjpa.LockManager\", \"pessimistic\",\n-                \"openjpa.Optimistic\", \"false\");\n-    }\n-    \n-    public void testForUpdateClausePresentInNamedQueryWithLockMode() {\n-        EntityManager em = emf.createEntityManager();\n-        em.getTransaction().begin();\n-        assertClausePresentInSQL(\"FOR UPDATE\", \n-                     em.createNamedQuery(\"findEmployeeByIdWithLock\").setParameter(\"id\", 0));\n-        em.getTransaction().rollback();\n-    }\n-    \n-    public void testNamedQueryWithLockModeMustExecuteInTransaction() {\n-        EntityManager em = emf.createEntityManager();\n-        // execute without a transaction\n-        try {\n-            em.createNamedQuery(\"findEmployeeByIdWithLock\").setParameter(\"id\", 0).getResultList();\n-            fail(\"Expected \" + TransactionRequiredException.class.getName());\n-        } catch (TransactionRequiredException e) {\n-            // Expected\n-        }\n-    }\n-    \n-    public void testForUpdateClauseAbsentInQueryWithDefault() {\n-        EntityManager em = emf.createEntityManager();\n-        assertClauseAbsentInSQL(\"FOR UPDATE\", \n-                                em.createNamedQuery(\"findEmployeeById\").setParameter(\"id\", 0));\n-    }\n-    \n-    public void testForUpdateClauseAbsentInQueryWithExplictNoLock() {\n-        EntityManager em = emf.createEntityManager();\n-        assertClauseAbsentInSQL(\"FOR UPDATE\", \n-                                em.createNamedQuery(\"findEmployeeByIdWithNoLock\").setParameter(\"id\", 0));\n-    }\n-    \n-    String getLastSQL() {\n-        String last = sql.get(getSQLCount()-1);\n-        assertNotNull(\"No last sql found\", last);\n-        return last;\n-    }\n-    \n-    void assertClausePresentInSQL(String clause, Query q) {\n-        q.getResultList();\n-        String last = getLastSQL();\n-        assertTrue(clause + \" is not present in \" + last, last.toUpperCase().indexOf(clause) != -1);\n-    }\n-    \n-    void assertClauseAbsentInSQL(String clause, Query q) {\n-        q.getResultList();\n-        String last = getLastSQL();\n-        assertTrue(clause + \" is not absent in \" + last, last.toUpperCase().indexOf(clause) == -1);\n-    }\n-}"},{"sha":"ab776e4e40fbdbeb8ca07db6ca09f62af60f92cf","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/59cdb21326c40529904cc1997db9963fd0cf4b93/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/59cdb21326c40529904cc1997db9963fd0cf4b93/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=59cdb21326c40529904cc1997db9963fd0cf4b93","patch":"@@ -94,7 +94,6 @@\n import org.apache.openjpa.event.LifecycleCallbacks;\n import org.apache.openjpa.event.LifecycleEvent;\n import org.apache.openjpa.event.MethodLifecycleCallbacks;\n-import org.apache.openjpa.kernel.LockLevels;\n import org.apache.openjpa.kernel.QueryLanguages;\n import org.apache.openjpa.kernel.jpql.JPQLParser;\n import org.apache.openjpa.lib.conf.Configurations;\n@@ -1776,10 +1775,11 @@ private void parseNamedQueries(AnnotatedElement el, NamedQuery... queries) {\n             meta = getRepository().addQueryMetaData(_cls, query.name());\n             meta.setQueryString(query.query());\n             meta.setLanguage(JPQLParser.LANG_JPQL);\n-            meta.setLockMode(MixedLockLevelsHelper.toLockLevel(query.lockMode()));\n             for (QueryHint hint : query.hints())\n                 meta.addHint(hint.name(), hint.value());\n-            \n+            if (query.lockMode() != null) {\n+                meta.addHint(\"openjpa.FetchPlan.ReadLockMode\", query.lockMode());\n+            }\n             meta.setSource(getSourceFile(), (el instanceof Class) ? el : null,\n                 SourceTracker.SRC_ANNOTATIONS);\n             if (isMetaDataMode())"},{"sha":"d26fb0194d338ec08f89f0f369216fb7b6c91322","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":1,"deletions":8,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/59cdb21326c40529904cc1997db9963fd0cf4b93/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/59cdb21326c40529904cc1997db9963fd0cf4b93/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=59cdb21326c40529904cc1997db9963fd0cf4b93","patch":"@@ -85,7 +85,6 @@\n import org.apache.openjpa.util.ExceptionInfo;\n import org.apache.openjpa.util.Exceptions;\n import org.apache.openjpa.util.ImplHelper;\n-import org.apache.openjpa.util.NoTransactionException;\n import org.apache.openjpa.util.RuntimeExceptionTranslator;\n import org.apache.openjpa.util.UserException;\n \n@@ -1024,13 +1023,7 @@ public OpenJPAQuery createNamedQuery(String name) {\n             if (pq != null) {\n                 pq.setInto(del);\n             } else {\n-                try {\n-                    meta.setInto(del);\n-                } catch (NoTransactionException e) {\n-                    throw new TransactionRequiredException(_loc.get(\"named-query-no-txn\", name, \n-                           meta.getDefiningType(), MixedLockLevelsHelper.fromLockLevel(meta.getLockMode())), \n-                           new Throwable[]{e}, name, false);\n-                }\n+                meta.setInto(del);\n                 del.compile();\n             }\n             "},{"sha":"cfadd3eb61de2b82fb147558a0ca70f3f85d65c6","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/59cdb21326c40529904cc1997db9963fd0cf4b93/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/59cdb21326c40529904cc1997db9963fd0cf4b93/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=59cdb21326c40529904cc1997db9963fd0cf4b93","patch":"@@ -50,7 +50,6 @@\n import org.apache.openjpa.kernel.DelegatingResultList;\n import org.apache.openjpa.kernel.FetchConfiguration;\n import org.apache.openjpa.kernel.Filters;\n-import org.apache.openjpa.kernel.LockLevels;\n import org.apache.openjpa.kernel.PreparedQuery;\n import org.apache.openjpa.kernel.PreparedQueryCache;\n import org.apache.openjpa.kernel.QueryLanguages;\n@@ -509,7 +508,7 @@ private boolean preExecute(Map params) {\n             return false;\n         }\n         FetchConfiguration fetch = _query.getFetchConfiguration();\n-        if (fetch.getReadLockLevel() != LockLevels.LOCK_NONE)\n+        if (fetch.getReadLockLevel() != 0)\n             return false;\n         Boolean registered = cache.register(_id, _query, fetch);\n         boolean alreadyCached = (registered == null);"},{"sha":"10ac2b31783102419cc42bddf079124a1433f76b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/59cdb21326c40529904cc1997db9963fd0cf4b93/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/59cdb21326c40529904cc1997db9963fd0cf4b93/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=59cdb21326c40529904cc1997db9963fd0cf4b93","patch":"@@ -1674,7 +1674,7 @@ protected boolean startNamedQuery(Attributes attrs)\n         meta.setLanguage(JPQLParser.LANG_JPQL);\n         String lockModeStr = attrs.getValue(\"lock-mode\");\n         if (lockModeStr != null) {\n-            meta.setLockMode(MixedLockLevelsHelper.toLockLevel(LockModeType.valueOf(lockModeStr)));\n+            meta.addHint(\"openjpa.FetchPlan.ReadLockMode\", LockModeType.valueOf(lockModeStr));\n         }\n         Locator locator = getLocation().getLocator();\n         if (locator != null) {"},{"sha":"ef65fa9d9ae1a1a72a92f1fbb9592fb8efb853a8","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/59cdb21326c40529904cc1997db9963fd0cf4b93/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/59cdb21326c40529904cc1997db9963fd0cf4b93/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties?ref=59cdb21326c40529904cc1997db9963fd0cf4b93","patch":"@@ -229,7 +229,4 @@ create-emf-depend-error: Failed to create a provider for \"{0}\" because a \\\n invalid-version-attribute: Persistence version attribute value \"{0}\" is not valid.  Using version \"{1}\" by default.\n not-jpql-or-criteria-query: Query is neither a JPQL SELECT nor a Criteria API query.\n cache-retrieve-override: The setting of CacheRetrieveMode.USE is ignored and set to BYPASS for refresh operation.  \n-null-detach: Can not detach null entity\n-named-query-no-txn: Named query \"{0}\" declared in \"{1}\" specifies \"{2}\" lock mode and hence must be \\\n-\tcreated and executed within an active transaction.\n-\t\n\\ No newline at end of file\n+null-detach: Can not detach null entity\n\\ No newline at end of file"}]}

