{"sha":"59d0a5262bcd64b577cbdf815e530a3fdc67dac7","node_id":"MDY6Q29tbWl0MjA2MzY0OjU5ZDBhNTI2MmJjZDY0YjU3N2NiZGY4MTVlNTMwYTNmZGM2N2RhYzc=","commit":{"author":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2012-01-04T22:29:38Z"},"committer":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2012-01-04T22:29:38Z"},"message":"OPENJPA-2102: Added code to compare decoded URLs in AbstractCFMetaDataFactory.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1227364 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2d20d901e6eb1dd68c3caf89812ea452df9e2c04","url":"https://api.github.com/repos/apache/openjpa/git/trees/2d20d901e6eb1dd68c3caf89812ea452df9e2c04"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/59d0a5262bcd64b577cbdf815e530a3fdc67dac7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/59d0a5262bcd64b577cbdf815e530a3fdc67dac7","html_url":"https://github.com/apache/openjpa/commit/59d0a5262bcd64b577cbdf815e530a3fdc67dac7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/59d0a5262bcd64b577cbdf815e530a3fdc67dac7/comments","author":null,"committer":null,"parents":[{"sha":"9cc9b97c97a28d3d9154f78c6a5255414c591d9c","url":"https://api.github.com/repos/apache/openjpa/commits/9cc9b97c97a28d3d9154f78c6a5255414c591d9c","html_url":"https://github.com/apache/openjpa/commit/9cc9b97c97a28d3d9154f78c6a5255414c591d9c"}],"stats":{"total":63,"additions":62,"deletions":1},"files":[{"sha":"fe10b3abb50cb53d70312ef3e96a151b668095cc","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","status":"modified","additions":62,"deletions":1,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/59d0a5262bcd64b577cbdf815e530a3fdc67dac7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/59d0a5262bcd64b577cbdf815e530a3fdc67dac7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java?ref=59d0a5262bcd64b577cbdf815e530a3fdc67dac7","patch":"@@ -787,7 +787,8 @@ protected ClassMetaData getDefiningMetaData(QueryMetaData query,\n                         if (log.isTraceEnabled())\n                             log.trace(_loc.get(\"resource-url\", urlString));\n                         if (peMap != null) {\n-                            if (puUrlString != null && urlString.indexOf(puUrlString) != -1) \n+                        \t//OPENJPA-2102: decode the URL to remove such things a spaces (' ') encoded as '%20'\n+                            if (puUrlString != null && decode(urlString).indexOf(decode(puUrlString)) != -1) \n                                 urls.add(url);\n                             if (mappingFileNames != null && mappingFileNames.size() != 0) {\n                                 for (String mappingFileName : mappingFileNames) {\n@@ -865,6 +866,66 @@ private void scan(MetaDataIterator mitr, ClassArgParser cparser, Set names,\n             names.addAll(newNames);\n         }\n     }\n+    \n+    /**\n+     * Decodes a URL-encoded path string.  For example, an encoded\n+     * space (%20) is decoded into a normal space (' ') character.\n+     * Added via OPENJPA-2102.\n+     * @param String encoded - the encoded URL string\n+     * @return String decoded - the decoded string.\n+     */\n+    public static String decode(String s) {\n+       if (s == null) {\n+          return null;\n+       }\n+\n+       int i = s.indexOf('%');\n+       if (i == -1) {\n+          return s;\n+       }\n+\n+       StringBuilder builder = new StringBuilder();\n+       int begin = 0;\n+\n+       do {\n+          builder.append(s, begin, i);\n+          begin = i + 3;\n+\n+          char ch = (char) Integer.parseInt(s.substring(i + 1, begin), 16);\n+\n+          if ((ch & 0x80) != 0) {\n+             // Decode \"modified UTF-8\".\n+\n+             if (s.charAt(begin++) != '%') {\n+                throw new IllegalArgumentException();\n+             }\n+\n+             char ch2 = (char) Integer.parseInt(s.substring(begin, begin + 2), 16);\n+             begin += 2;\n+\n+             if ((ch & 0xe0) == 0xc0) {\n+                ch = (char) (((ch & 0x1f) << 6) | (ch2 & 0x3f));\n+             } else if ((ch & 0xf0) == 0xe0) {\n+                if (s.charAt(begin++) != '%') {\n+                   throw new IllegalArgumentException();\n+                }\n+\n+                char ch3 = (char) Integer.parseInt(s.substring(begin, begin + 2), 16);\n+                begin += 2;\n+\n+                ch = (char) (((ch & 0x0f) << 12) | ((ch2 & 0x3f) << 6) | (ch3 & 0x3f));\n+             } else {\n+                throw new IllegalArgumentException();\n+             }\n+          }\n+\n+          builder.append(ch);\n+       } while ((i = s.indexOf('%', begin)) != -1);\n+\n+       builder.append(s, begin, s.length());\n+\n+       return builder.toString();\n+    }\n \n     /**\n      * Implement this method to map metadata resources to the persistent"}]}

