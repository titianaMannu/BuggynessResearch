{"sha":"5a0b5b39e7c6fe354e722ab467bdf355ddd3ff85","node_id":"MDY6Q29tbWl0MjA2MzY0OjVhMGI1YjM5ZTdjNmZlMzU0ZTcyMmFiNDY3YmRmMzU1ZGRkM2ZmODU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-07T20:58:01Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-07T20:58:01Z"},"message":"Write output to the logging channels instead of to stdout.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@609776 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"63beff932cba4c681fe1ce719606d90c4bc33653","url":"https://api.github.com/repos/apache/openjpa/git/trees/63beff932cba4c681fe1ce719606d90c4bc33653"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5a0b5b39e7c6fe354e722ab467bdf355ddd3ff85","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5a0b5b39e7c6fe354e722ab467bdf355ddd3ff85","html_url":"https://github.com/apache/openjpa/commit/5a0b5b39e7c6fe354e722ab467bdf355ddd3ff85","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5a0b5b39e7c6fe354e722ab467bdf355ddd3ff85/comments","author":null,"committer":null,"parents":[{"sha":"6f29454e48415ac92f14e407119a69dfcddea9c4","url":"https://api.github.com/repos/apache/openjpa/commits/6f29454e48415ac92f14e407119a69dfcddea9c4","html_url":"https://github.com/apache/openjpa/commit/6f29454e48415ac92f14e407119a69dfcddea9c4"}],"stats":{"total":84,"additions":48,"deletions":36},"files":[{"sha":"7fdc3aaa257e6770dbf6024d935c1ad2f3de1ba6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataCacheMaintenance.java","status":"modified","additions":48,"deletions":36,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/5a0b5b39e7c6fe354e722ab467bdf355ddd3ff85/openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataCacheMaintenance.java","raw_url":"https://github.com/apache/openjpa/raw/5a0b5b39e7c6fe354e722ab467bdf355ddd3ff85/openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataCacheMaintenance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/MetaDataCacheMaintenance.java?ref=5a0b5b39e7c6fe354e722ab467bdf355ddd3ff85","patch":"@@ -18,7 +18,6 @@\n  */\r\n package org.apache.openjpa.conf;\r\n \r\n-import java.io.PrintStream;\r\n import java.util.Collection;\r\n import java.util.Iterator;\r\n import java.util.Map;\r\n@@ -27,8 +26,8 @@\n import org.apache.openjpa.kernel.Broker;\r\n import org.apache.openjpa.kernel.BrokerFactory;\r\n import org.apache.openjpa.kernel.Query;\r\n-import org.apache.openjpa.conf.CacheMarshallersValue;\r\n import org.apache.openjpa.lib.util.Options;\r\n+import org.apache.openjpa.lib.log.Log;\r\n import org.apache.openjpa.meta.ClassMetaData;\r\n import org.apache.openjpa.meta.MetaDataRepository;\r\n import org.apache.openjpa.meta.QueryMetaData;\r\n@@ -45,33 +44,39 @@\n     private final BrokerFactory factory;\r\n     private final OpenJPAConfiguration conf;\r\n     private final boolean devpath;\r\n-    private final boolean verbose;\r\n-    private PrintStream out = System.out;\r\n+    private final Log log;\r\n \r\n+    /**\r\n+     * @deprecated logging is routed to the logging system now.\r\n+     */\r\n     public MetaDataCacheMaintenance(BrokerFactory factory, boolean devpath,\r\n         boolean verbose) {\r\n+        this(factory, devpath);\r\n+    }\r\n+\r\n+    /**\r\n+     * @param factory The {@link BrokerFactory} for which cached metadata\r\n+     * should be built.\r\n+     * @param devpath Whether or not to scan the development environment paths\r\n+     * to find persistent types to store.\r\n+     */\r\n+    public MetaDataCacheMaintenance(BrokerFactory factory, boolean devpath) {\r\n         this.factory = factory;\r\n         this.conf = factory.getConfiguration();\r\n         this.devpath = devpath;\r\n-        this.verbose = verbose;\r\n-    }\r\n-\r\n-    public void setOutputStream(PrintStream out) {\r\n-        this.out = out;\r\n+        this.log = conf.getLog(OpenJPAConfiguration.LOG_TOOL);\r\n     }\r\n \r\n     public static void main(String[] args) {\r\n         Options opts = new Options();\r\n         args = opts.setFromCmdLine(args);\r\n         boolean devpath = opts.getBooleanProperty(\"scanDevPath\", \"ScanDevPath\",\r\n             true);\r\n-        boolean verbose = opts.getBooleanProperty(\"verbose\", \"verbose\",\r\n-            false);\r\n \r\n         BrokerFactory factory = Bootstrap.newBrokerFactory();\r\n         try {\r\n             MetaDataCacheMaintenance maint = new MetaDataCacheMaintenance(\r\n-                factory, devpath, verbose);\r\n+                factory, devpath);\r\n \r\n             if (args.length != 1)\r\n                 usage();\r\n@@ -89,10 +94,15 @@ else if (\"dump\".equals(args[0]))\n \r\n     private static int usage() {\r\n         System.err.println(\"Usage: java MetaDataCacheMaintenance \"\r\n-            + \"[-scanDevPath t|f] [-verbose t|f] store | dump\");\r\n+            + \"[-scanDevPath t|f] store | dump\");\r\n         return -1;\r\n     }\r\n \r\n+    /**\r\n+     * The metadata repository for the factory that this instance was\r\n+     * constructed with will be serialized, along with any query\r\n+     * compilations etc. that have been created for the factory.\r\n+     */\r\n     public void store() {\r\n         MetaDataRepository repos = conf.getMetaDataRepositoryInstance();\r\n         repos.setSourceMode(MetaDataRepository.MODE_ALL);\r\n@@ -102,8 +112,8 @@ public void store() {\n \r\n         loadQueries();\r\n \r\n-        out.println(\"The following data will be stored: \");\r\n-        log(repos, conf.getQueryCompilationCacheInstance(), verbose, out);\r\n+        log.info(\"The following data will be stored: \");\r\n+        log(repos, conf.getQueryCompilationCacheInstance());\r\n \r\n         CacheMarshallersValue.getMarshallerById(conf, getClass().getName())\r\n             .store(new Object[] {\r\n@@ -129,10 +139,13 @@ private void loadQuery(Broker broker, QueryMetaData qmd) {\n             qmd.setInto(q);\r\n             q.compile();\r\n         } catch (Exception e) {\r\n-            out.println(\"Skipping named query \" + qmd.getName() + \": \"\r\n-                + e.getMessage());\r\n-            if (verbose)\r\n-                e.printStackTrace(out);\r\n+            if (log.isTraceEnabled()) {\r\n+                log.warn(\"Skipping named query \" + qmd.getName() + \": \"\r\n+                    + e.getMessage(), e);\r\n+            } else {\r\n+                log.warn(\"Skipping named query \" + qmd.getName() + \": \"\r\n+                    + e.getMessage());\r\n+            }\r\n         }\r\n     }\r\n \r\n@@ -141,41 +154,40 @@ public void dump() {\n             CacheMarshallersValue.getMarshallerById(conf, getClass().getName())\r\n             .load();\r\n         if (os == null) {\r\n-            out.println(\"No cached data was found\");\r\n+            log.info(\"No cached data was found\");\r\n             return;\r\n         }\r\n         MetaDataRepository repos = (MetaDataRepository) os[0];\r\n         Map qcc = (Map) os[1];\r\n \r\n-        out.println(\"The following data was found: \");\r\n-        log(repos, qcc, verbose, out);\r\n+        log.info(\"The following data was found: \");\r\n+        log(repos, qcc);\r\n     }\r\n \r\n-    private static void log(MetaDataRepository repos, Map qcc,\r\n-        boolean verbose, PrintStream out) {\r\n+    private void log(MetaDataRepository repos, Map qcc) {\r\n         ClassMetaData[] metas = repos.getMetaDatas();\r\n-        out.println(\"  Types: \" + metas.length);\r\n-        if (verbose)\r\n+        log.info(\"  Types: \" + metas.length);\r\n+        if (log.isTraceEnabled())\r\n             for (int i = 0; i < metas.length; i++)\r\n-                out.println(\"    \" + metas[i].getDescribedType().getName());\r\n+                log.trace(\"    \" + metas[i].getDescribedType().getName());\r\n \r\n         QueryMetaData[] qmds = repos.getQueryMetaDatas();\r\n-        out.println(\"  Queries: \" + qmds.length);\r\n-        if (verbose)\r\n+        log.info(\"  Queries: \" + qmds.length);\r\n+        if (log.isTraceEnabled())\r\n             for (int i = 0; i < qmds.length; i++)\r\n-                out.println(\"    \" + qmds[i].getName() + \": \"\r\n+                log.trace(\"    \" + qmds[i].getName() + \": \"\r\n                     + qmds[i].getQueryString());\r\n \r\n         SequenceMetaData[] smds = repos.getSequenceMetaDatas();\r\n-        out.println(\"  Sequences: \" + smds.length);\r\n-        if (verbose)\r\n+        log.info(\"  Sequences: \" + smds.length);\r\n+        if (log.isTraceEnabled())\r\n             for (int i = 0; i < smds.length; i++)\r\n-                out.println(\"    \" + smds[i].getName());\r\n+                log.trace(\"    \" + smds[i].getName());\r\n \r\n-        out.println(\"  Compiled queries: \"\r\n+        log.info(\"  Compiled queries: \"\r\n             + (qcc == null ? \"0\" : \"\" + qcc.size()));\r\n-        if (verbose && qcc != null)\r\n+        if (log.isTraceEnabled() && qcc != null)\r\n             for (Iterator iter = qcc.keySet().iterator(); iter.hasNext(); )\r\n-                out.println(\"    \" + iter.next());\r\n+                log.trace(\"    \" + iter.next());\r\n     }\r\n }\r"}]}

