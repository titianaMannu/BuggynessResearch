{"sha":"5a1faec4719c40ee0769901f2b4a959084e67cd9","node_id":"MDY6Q29tbWl0MjA2MzY0OjVhMWZhZWM0NzE5YzQwZWUwNzY5OTAxZjJiNGE5NTkwODRlNjdjZDk=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-24T07:33:32Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-24T07:33:32Z"},"message":"OPENJPA-502\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@614812 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"13a062e908b94a038ce43fa0986a673cf67aa3e7","url":"https://api.github.com/repos/apache/openjpa/git/trees/13a062e908b94a038ce43fa0986a673cf67aa3e7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5a1faec4719c40ee0769901f2b4a959084e67cd9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5a1faec4719c40ee0769901f2b4a959084e67cd9","html_url":"https://github.com/apache/openjpa/commit/5a1faec4719c40ee0769901f2b4a959084e67cd9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5a1faec4719c40ee0769901f2b4a959084e67cd9/comments","author":null,"committer":null,"parents":[{"sha":"6a29ebffe46e6e3d61d41a3b87442a94307a73a6","url":"https://api.github.com/repos/apache/openjpa/commits/6a29ebffe46e6e3d61d41a3b87442a94307a73a6","html_url":"https://github.com/apache/openjpa/commit/6a29ebffe46e6e3d61d41a3b87442a94307a73a6"}],"stats":{"total":149,"additions":139,"deletions":10},"files":[{"sha":"45f85f9cebbb1b50efd6b68a777e341a9d6e4c81","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","status":"modified","additions":58,"deletions":2,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/5a1faec4719c40ee0769901f2b4a959084e67cd9/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","raw_url":"https://github.com/apache/openjpa/raw/5a1faec4719c40ee0769901f2b4a959084e67cd9/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java?ref=5a1faec4719c40ee0769901f2b4a959084e67cd9","patch":"@@ -23,13 +23,37 @@\n  */\n public class Compatibility {\n \n+    /**\n+     * If a JPQL statement is not compliant with the JPA specification,\n+     * fail to parse it.\n+     *\n+     * @since 1.1.0\n+     */\n+    public static final int JPQL_STRICT = 0;\n+\n+    /**\n+     * If a JPQL statement is not compliant with the JPA specification,\n+     * warn the first time that statement is parsed.\n+     *\n+     * @since 1.1.0\n+     */\n+    public static final int JPQL_WARN = 1;\n+\n+    /**\n+     * Allow non-compliant extensions of JPQL.\n+     * \n+     * @since 1.1.0\n+     */\n+    public static final int JPQL_EXTENDED = 2;\n+\n     private boolean _strictIdValues = false;\n     private boolean _hollowLookups = true;\n     private boolean _checkStore = false;\n     private boolean _copyIds = false;\n     private boolean _closeOnCommit = true;\n     private boolean _quotedNumbers = false;\n     private boolean _nonOptimisticVersionCheck = false;\n+    private int _jpql = JPQL_STRICT;\n \n     /**\n      * Whether to require exact identity value types when creating object\n@@ -146,8 +170,7 @@ public void setCloseOnManagedCommit(boolean close) {\n      * in a datastore transaction. Version of OpenJPA prior to 0.4.1 always\n      * forced a version check.\n      */\n-    public void setNonOptimisticVersionCheck\n-        (boolean nonOptimisticVersionCheck) {\n+    public void setNonOptimisticVersionCheck(boolean nonOptimisticVersionCheck){\n         _nonOptimisticVersionCheck = nonOptimisticVersionCheck;\n     }\n \n@@ -159,4 +182,37 @@ public void setCloseOnManagedCommit(boolean close) {\n     public boolean getNonOptimisticVersionCheck() {\n         return _nonOptimisticVersionCheck;\n     }\n+\n+    /**\n+     * Whether or not JPQL extensions are allowed. Defaults to\n+     * {@link #JPQL_STRICT}.\n+     *\n+     * @since 1.1.0\n+     * @see #JPQL_WARN\n+     * @see #JPQL_STRICT\n+     * @see #JPQL_EXTENDED\n+     */\n+    public int getJPQL() {\n+        return _jpql;\n+    }\n+\n+    /**\n+     * Whether or not JPQL extensions are allowed. Possible values: \"warn\",\n+     * \"strict\", \"extended\".\n+     *\n+     * @since 1.1.0\n+     * @see #JPQL_WARN\n+     * @see #JPQL_STRICT\n+     * @see #JPQL_EXTENDED\n+     */\n+    public void setJPQL(String jpql) {\n+        if (\"warn\".equals(jpql))\n+            _jpql = JPQL_WARN;\n+        else if (\"strict\".equals(jpql))\n+            _jpql = JPQL_STRICT;\n+        else if (\"extended\".equals(jpql))\n+            _jpql = JPQL_EXTENDED;\n+        else\n+            throw new IllegalArgumentException(jpql);\n+    }\n }"},{"sha":"e67abfb14544a32fce9f5fc64a3a8ab6d460512c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/5a1faec4719c40ee0769901f2b4a959084e67cd9/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/5a1faec4719c40ee0769901f2b4a959084e67cd9/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java?ref=5a1faec4719c40ee0769901f2b4a959084e67cd9","patch":"@@ -119,6 +119,10 @@ public AggregateListener getAggregateListener(String tag) {\n             public OpenJPAConfiguration getConfiguration() {\n                 return ctx.getStoreContext().getConfiguration();\n             }\n+\n+            public QueryContext getQueryContext() {\n+                return ctx;\n+            }\n         };\n     }\n "},{"sha":"a05705ebc5322f7d7e95a3600c8ec654f3deb38e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/5a1faec4719c40ee0769901f2b4a959084e67cd9/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","raw_url":"https://github.com/apache/openjpa/raw/5a1faec4719c40ee0769901f2b4a959084e67cd9/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java?ref=5a1faec4719c40ee0769901f2b4a959084e67cd9","patch":"@@ -46,8 +46,7 @@\n \n     /**\n      * Return the broker for this context, if possible. Note that a broker\n-     * will be unavailable in remote contexts, and this method may throw\n-     * an exception to that effect.\n+     * will be unavailable in remote contexts, and this method may return null.\n      */\n     public Broker getBroker();\n "},{"sha":"be0361ee25c297a2def8ece2701049c89b76bbe6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Resolver.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/5a1faec4719c40ee0769901f2b4a959084e67cd9/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Resolver.java","raw_url":"https://github.com/apache/openjpa/raw/5a1faec4719c40ee0769901f2b4a959084e67cd9/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Resolver.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Resolver.java?ref=5a1faec4719c40ee0769901f2b4a959084e67cd9","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.kernel.exps;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.kernel.QueryContext;\n \n /**\n  * A Resolver is used to resolve listeners and class or entity names\n@@ -51,4 +52,11 @@\n      * Return the OpenJPA configuration.\n      */\n     public OpenJPAConfiguration getConfiguration ();\n+\n+    /**\n+     * The {@link QueryContext} for which this resolver was created\n+     *\n+     * @since 1.1.0\n+     */\n+    public QueryContext getQueryContext();\n }"},{"sha":"4642189cf0fd7a0899d35b52876b7fdc5099d8f9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/5a1faec4719c40ee0769901f2b4a959084e67cd9/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/5a1faec4719c40ee0769901f2b4a959084e67cd9/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=5a1faec4719c40ee0769901f2b4a959084e67cd9","patch":"@@ -34,6 +34,8 @@\n import org.apache.openjpa.kernel.ExpressionStoreQuery;\n import org.apache.openjpa.kernel.QueryContext;\n import org.apache.openjpa.kernel.QueryOperations;\n+import org.apache.openjpa.kernel.StoreContext;\n+import org.apache.openjpa.kernel.BrokerFactory;\n import org.apache.openjpa.kernel.exps.AbstractExpressionBuilder;\n import org.apache.openjpa.kernel.exps.Expression;\n import org.apache.openjpa.kernel.exps.ExpressionFactory;\n@@ -44,12 +46,15 @@\n import org.apache.openjpa.kernel.exps.Subquery;\n import org.apache.openjpa.kernel.exps.Value;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.meta.ValueMetaData;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.UserException;\n+import org.apache.openjpa.conf.Compatibility;\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n import serp.util.Numbers;\n \n /**\n@@ -1078,12 +1083,15 @@ else if (node.getChildCount() == 2\n                 return factory.getCurrentTimestamp();\n \n             case JJTSELECTEXTENSION:\n+                assertQueryExtensions(\"SELECT\");\n                 return eval(onlyChild(node));\n \n             case JJTGROUPBYEXTENSION:\n+                assertQueryExtensions(\"GROUP BY\");\n                 return eval(onlyChild(node));\n \n             case JJTORDERBYEXTENSION:\n+                assertQueryExtensions(\"ORDER BY\");\n                 return eval(onlyChild(node));\n \n             default:\n@@ -1092,6 +1100,39 @@ else if (node.getChildCount() == 2\n         }\n     }\n \n+    private void assertQueryExtensions(String clause) {\n+        OpenJPAConfiguration conf = resolver.getConfiguration();\n+        switch(conf.getCompatibilityInstance().getJPQL()) {\n+            case Compatibility.JPQL_WARN:\n+                // check if we've already warned for this query-factory combo\n+                StoreContext ctx = resolver.getQueryContext().getStoreContext();\n+                String query = currentQuery();\n+                if (ctx.getBroker() != null && query != null) {\n+                    String key = getClass().getName() + \":\" + query;\n+                    BrokerFactory factory = ctx.getBroker().getBrokerFactory();\n+                    Object hasWarned = factory.getUserObject(key);\n+                    if (hasWarned != null)\n+                        break;\n+                    else\n+                        factory.putUserObject(key, Boolean.TRUE);\n+                }\n+                Log log = conf.getLog(OpenJPAConfiguration.LOG_QUERY);\n+                if (log.isWarnEnabled())\n+                    log.warn(_loc.get(\"query-extensions-warning\", clause,\n+                        currentQuery()));\n+                break;\n+            case Compatibility.JPQL_STRICT:\n+                throw new ParseException(_loc.get(\"query-extensions-error\",\n+                    clause, currentQuery()).getMessage());\n+            case Compatibility.JPQL_EXTENDED:\n+                break;\n+            default:\n+                throw new IllegalStateException(\n+                    \"Compatibility.getJPQL() == \"\n+                        + conf.getCompatibilityInstance().getJPQL());\n+        }\n+    }\n+\n     protected void setImplicitTypes(Value val1, Value val2, Class expected) {\n         super.setImplicitTypes(val1, val2, expected);\n "},{"sha":"0943ab0b1506c4dd71bfbe9d564d195ea923d236","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/ParseException.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/5a1faec4719c40ee0769901f2b4a959084e67cd9/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/ParseException.java","raw_url":"https://github.com/apache/openjpa/raw/5a1faec4719c40ee0769901f2b4a959084e67cd9/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/ParseException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/ParseException.java?ref=5a1faec4719c40ee0769901f2b4a959084e67cd9","patch":"@@ -64,6 +64,18 @@ public ParseException() {\n         super();\n     }\n \n+    /**\n+     * String constructor. Constructing the exception in this\n+     * manner makes the exception behave in the normal way - i.e., as\n+     * documented in the class \"Throwable\". The fields \"errorToken\",\n+     * \"expectedTokenSequences\", and \"tokenImage\" do not contain\n+     * relevant information. The JavaCC generated code does not use\n+     * these constructors.\n+     */\n+    public ParseException(String message) {\n+        super(message);\n+    }\n+\n     /**\n      * This method has the standard behavior when this object has been\n      * created using the standard constructors. Otherwise, it uses"},{"sha":"2e6d530ee88dceb10cd19534c74feb58eb2592c8","filename":"openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/5a1faec4719c40ee0769901f2b4a959084e67cd9/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","raw_url":"https://github.com/apache/openjpa/raw/5a1faec4719c40ee0769901f2b4a959084e67cd9/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt?ref=5a1faec4719c40ee0769901f2b4a959084e67cd9","patch":"@@ -64,7 +64,6 @@ import java.io.*;\n public class JPQL\n {\n \tString jpql;\n-\tboolean extensionsEnabled = true;\n \n \n \tpublic JPQL (String jpql)\n@@ -503,7 +502,7 @@ void select_expression() #SELECTEXPRESSION : { }\n }\n \n \n-void select_extension() #SELECTEXTENSION(extensionsEnabled) : { }\n+void select_extension() #SELECTEXTENSION : { }\n {\n     scalar_function()\n }\n@@ -627,7 +626,7 @@ void groupby_item() : { }\n }\n \n \n-void groupby_extension() #GROUPBYEXTENSION(extensionsEnabled) : { }\n+void groupby_extension() #GROUPBYEXTENSION : { }\n {\n     scalar_function()\n }\n@@ -1098,7 +1097,7 @@ void orderby_item() #ORDERBYITEM : { }\n }\n \n \n-void orderby_extension() #ORDERBYEXTENSION(extensionsEnabled) : { }\n+void orderby_extension() #ORDERBYEXTENSION : { }\n {\n     aggregate_select_expression()\n }"},{"sha":"475f5e2619073cb928804ea64bb4f36f91b52cff","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/5a1faec4719c40ee0769901f2b4a959084e67cd9/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/5a1faec4719c40ee0769901f2b4a959084e67cd9/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/jpql/localizer.properties?ref=5a1faec4719c40ee0769901f2b4a959084e67cd9","patch":"@@ -58,3 +58,11 @@ unknown-identifier: Undeclared identifier \"{0}\".\n update-constant-value: Update expression \"{0}\" may only use literals \\\n \tor parameters as update values.\n bad-parse: Encountered \"{0}\" at character {1}, but expected: {2}.\n+query-extensions-warning: This JPQL query uses non-standard OpenJPA \\\n+    extensions in the {0} clause. JPQL string: \"{1}\". Query execution will \\\n+    proceed. The openjpa.Compatibility configuration setting is configured to \\\n+    log a warning the first time a given extended query is encountered.\n+query-extensions-error: This JPQL query uses non-standard OpenJPA \\\n+    extensions in the {0} clause. JPQL string: \"{1}\". The \\\n+    openjpa.Compatibility configuration setting is configured to disallow \\\n+    JPQL extensions."},{"sha":"988ea3a38e41b34545e9ccfa3910c64830d16ef7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/GroupingTestCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/5a1faec4719c40ee0769901f2b4a959084e67cd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/GroupingTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/5a1faec4719c40ee0769901f2b4a959084e67cd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/GroupingTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/GroupingTestCase.java?ref=5a1faec4719c40ee0769901f2b4a959084e67cd9","patch":"@@ -38,7 +38,8 @@\n     protected abstract void prepareQuery(Query q);\r\n \r\n     public void setUp() {\r\n-        super.setUp(AllFieldTypes.class, CLEAR_TABLES);\r\n+        super.setUp(AllFieldTypes.class, CLEAR_TABLES,\r\n+            \"openjpa.Compatibility\", \"JPQL=warn\");\r\n \r\n         AllFieldTypes pc1 = new AllFieldTypes();\r\n         AllFieldTypes pc2 = new AllFieldTypes();\r"},{"sha":"d643ae573eef418a42dc2558697b37f50b269440","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubstring.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/5a1faec4719c40ee0769901f2b4a959084e67cd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubstring.java","raw_url":"https://github.com/apache/openjpa/raw/5a1faec4719c40ee0769901f2b4a959084e67cd9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubstring.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubstring.java?ref=5a1faec4719c40ee0769901f2b4a959084e67cd9","patch":"@@ -25,7 +25,8 @@\n public class TestSubstring extends SingleEMTestCase {\r\n \r\n     public void setUp() {\r\n-        super.setUp(SimpleEntity.class, CLEAR_TABLES, \"openjpa.Log\", \"SQL=TRACE\");\r\n+        super.setUp(SimpleEntity.class, CLEAR_TABLES,\r\n+            \"openjpa.Compatibility\", \"JPQL=extended\");\r\n \r\n         EntityManager em = emf.createEntityManager();\r\n         em.getTransaction().begin();\r"}]}

