{"sha":"5a98879567c0288cd1117aa0b177091fa14706bc","node_id":"MDY6Q29tbWl0MjA2MzY0OjVhOTg4Nzk1NjdjMDI4OGNkMTExN2FhMGIxNzcwOTFmYTE0NzA2YmM=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-10-03T20:46:38Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-10-03T20:46:38Z"},"message":"OPENJPA-1691: Support XML strings longer than 4000 bytes on Oracle.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1004043 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6a49002cdff7927eae2d3a0686c72f4b4d5aba69","url":"https://api.github.com/repos/apache/openjpa/git/trees/6a49002cdff7927eae2d3a0686c72f4b4d5aba69"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5a98879567c0288cd1117aa0b177091fa14706bc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5a98879567c0288cd1117aa0b177091fa14706bc","html_url":"https://github.com/apache/openjpa/commit/5a98879567c0288cd1117aa0b177091fa14706bc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5a98879567c0288cd1117aa0b177091fa14706bc/comments","author":null,"committer":null,"parents":[{"sha":"8fa232c9330e0ea206beecfb070fd21161eecaa7","url":"https://api.github.com/repos/apache/openjpa/commits/8fa232c9330e0ea206beecfb070fd21161eecaa7","html_url":"https://github.com/apache/openjpa/commit/8fa232c9330e0ea206beecfb070fd21161eecaa7"}],"stats":{"total":118,"additions":97,"deletions":21},"files":[{"sha":"20e9a845168a3176a9c213e8d32449b7e8fd2d58","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":17,"deletions":2,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/5a98879567c0288cd1117aa0b177091fa14706bc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/5a98879567c0288cd1117aa0b177091fa14706bc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=5a98879567c0288cd1117aa0b177091fa14706bc","patch":"@@ -355,6 +355,7 @@\n     protected Log log = null;\n     protected boolean connected = false;\n     protected boolean isJDBC3 = false;\n+    protected boolean isJDBC4 = false;\n     protected final Set<String> reservedWordSet = new HashSet<String>();\n     // reservedWordSet subset that CANNOT be used as valid column names\n     // (i.e., without surrounding them with double-quotes)\n@@ -423,9 +424,11 @@ public void connectedConfiguration(Connection conn)\n             try {\n                 metaData = conn.getMetaData();\n                 try {\n-                    // JDBC3-only method, so it might throw a \n+                    // JDBC3-only method, so it might throw an\n                     // AbstractMethodError\n-                    isJDBC3 = metaData.getJDBCMajorVersion() >= 3;\n+                    int JDBCMajorVersion = metaData.getJDBCMajorVersion();\n+                    isJDBC3 = JDBCMajorVersion >= 3;\n+                    isJDBC4 = JDBCMajorVersion >= 4;\n                 } catch (Throwable t) {\n                     // ignore if not JDBC3\n                 }\n@@ -5437,4 +5440,16 @@ public String getConversionKey() {\n         }\n         return conversionKey;\n     }\n+\n+    /**\n+     * Return parameter marker for INSERT and UPDATE statements.\n+     * Usually it is <code>?</code> but some database-specific types might require customization.\n+     * \n+     * @param col column definition\n+     * @param val value to be inserted/updated\n+     * @return parameter marker\n+     */\n+    public String getMarkerForInsertUpdate(Column col, Object val) {\n+        return \"?\";\n+    }\n }"},{"sha":"1115e185405028c6c4c035a42100b43b285ec2ff","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","status":"modified","additions":52,"deletions":3,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/5a98879567c0288cd1117aa0b177091fa14706bc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/5a98879567c0288cd1117aa0b177091fa14706bc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java?ref=5a98879567c0288cd1117aa0b177091fa14706bc","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.jdbc.sql;\n \n import java.io.InputStream;\n+import java.io.StringReader;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.security.AccessController;\n@@ -105,6 +106,11 @@\n      */\n     public boolean useSetFormOfUseForUnicode = true;\n \n+    /**\n+     * Type constructor for XML column, used in INSERT and UPDATE statements.\n+     */\n+    public String xmlTypeMarker = \"XMLType(?)\";\n+\n     // some oracle drivers have problems with select for update; warn the\n     // first time locking is attempted\n     private boolean _checkedUpdateBug = false;\n@@ -237,9 +243,9 @@ public void connectedConfiguration(Connection conn)\n                     timestampTypeName = \"DATE\"; // added oracle 9\n                     supportsXMLColumn = false;\n                 }\n-                    // select of an xml column requires \".getStringVal()\"\n-                    // suffix. eg. t0.xmlcol.getStringVal()\n-                    getStringVal = \".getStringVal()\";\n+                // select of an xml column requires \".getStringVal()\" (for values <= 4000 bytes only)\n+                // or \".getClobVal()\" suffix. eg. t0.xmlcol.getClobVal()\n+                getStringVal = \".getClobVal()\";\n             } else if (metadataClassName.startsWith(\"com.ddtek.\")\n                 || url.indexOf(\"jdbc:datadirect:oracle:\") != -1\n                 || \"Oracle\".equals(driverName)) {\n@@ -249,6 +255,7 @@ public void connectedConfiguration(Connection conn)\n                 driverVendor = VENDOR_OTHER;\n         }\n         cacheDriverBehavior(driverVendor);\n+        guessJDBCVersion(conn);\n     }\n \n     /**\n@@ -560,6 +567,16 @@ public void setBinaryStream(PreparedStatement stmnt, int idx,\n     public void setClobString(PreparedStatement stmnt, int idx, String val,\n         Column col)\n         throws SQLException {\n+        if (col.isXML()) {\n+            if (isJDBC4) {\n+                // This JDBC 4 method handles values longer than 4000 bytes.\n+                stmnt.setClob(idx, new StringReader(val), val.length());\n+            } else {\n+                // This method is limited to 4000 bytes.\n+                setCharacterStream(stmnt, idx, new StringReader(val), val.length(), col);\n+            }\n+            return;\n+        }\n         if (!useSetStringForClobs && val.length() == 0)\n             stmnt.setClob(idx, getEmptyClob());\n         else {\n@@ -1310,4 +1327,36 @@ public void insertBlobForStreamingLoad(Row row, Column col,\n             row.setBlob(col, getEmptyBlob());\n         }\n     }\n+\n+    /**\n+     * Oracle requires special handling of XML column.\n+     * Unless the value length is less or equal to 4000 bytes,\n+     * the parameter marker must be decorated with type constructor.\n+     */\n+    @Override\n+    public String getMarkerForInsertUpdate(Column col, Object val) {\n+        if (col.isXML() && val != RowImpl.NULL) {\n+            return xmlTypeMarker;\n+        }\n+        return super.getMarkerForInsertUpdate(col, val);\n+    }\n+\n+    /**\n+     * Oracle drivers, at least in versions 10.2.0.4 and 11.2.0.1, incorrectly return a driver major version from\n+     * {@link DatabaseMetaData#getJDBCMajorVersion()}.\n+     */\n+    protected void guessJDBCVersion(Connection conn) {\n+        if (_driverBehavior != BEHAVE_ORACLE) {\n+            return;\n+        }\n+        isJDBC4 = true;\n+        try {\n+            conn.getClientInfo();   // Try to call a JDBC 4 method.\n+        } catch (SQLException e) {\n+            // OK, we are on JDBC 4.\n+        } catch (Throwable t) {\n+            // Most likely an AbstractMethodError from JDBC 3 driver.\n+            isJDBC4 = false;\n+        }\n+    }\n }"},{"sha":"e3d9a006cb600ceb460229f4bec5454cfe601e45","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/5a98879567c0288cd1117aa0b177091fa14706bc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","raw_url":"https://github.com/apache/openjpa/raw/5a98879567c0288cd1117aa0b177091fa14706bc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java?ref=5a98879567c0288cd1117aa0b177091fa14706bc","patch":"@@ -758,8 +758,10 @@ private String getUpdateSQL(DBDictionary dict) {\n             buf.append(dict.getColumnDBName(_cols[i]));\n             if (_types[i] == RAW)\n                 buf.append(\" = \").append(_vals[i]);\n-            else\n-                buf.append(\" = ?\");\n+            else {\n+                buf.append(\" = \");\n+                buf.append(dict.getMarkerForInsertUpdate(_cols[i], _vals[i]));\n+            }\n             hasVal = true;\n         }\n \n@@ -789,7 +791,7 @@ private String getInsertSQL(DBDictionary dict) {\n             if (_types[i] == RAW)\n                 vals.append(_vals[i]);\n             else\n-                vals.append(\"?\");\n+                vals.append(dict.getMarkerForInsertUpdate(_cols[i], _vals[i]));\n             hasVal = true;\n         }\n "},{"sha":"ad5848e8d899d19c80dc7c31e41b6b742e2dcdd3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/5a98879567c0288cd1117aa0b177091fa14706bc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java","raw_url":"https://github.com/apache/openjpa/raw/5a98879567c0288cd1117aa0b177091fa14706bc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java?ref=5a98879567c0288cd1117aa0b177091fa14706bc","patch":"@@ -26,6 +26,7 @@\n \n import junit.textui.TestRunner;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n@@ -64,9 +65,13 @@\n     private static final double ORDER_2_AMOUNT = 1000;\n     private static final boolean ORDER_2_DELIVERED = false;\n \n+    private static boolean firstTestExecuted;\n+\n     public void setUp() {\n+        Object clearOrDropTables = (firstTestExecuted) ? CLEAR_TABLES : DROP_TABLES;\n+        firstTestExecuted = true;\n         setUp(Customer.class, Customer.CustomerKey.class, Order.class,\n-            EAddress.class, DROP_TABLES);  // test create table DDL for XML column\n+            EAddress.class, clearOrDropTables);  // test create table DDL for XML column but only once to save time.\n \n         // skip test if dictionary has no support for XML column type\n         setTestsDisabled(!dictionarySupportsXMLColumn());\n@@ -347,10 +352,11 @@ private boolean dictionarySupportsXMLColumn() {\n     private USAAddress createUSAAddress(String name) {\n         USAAddress address = new ObjectFactory().createUSAAddress();\n         address.setName(name);\n-        address.getStreet().add(\"12500 Monterey\");\n+        // Use a 4000-byte value so the entire XML string is longer than 4000 bytes - ensure Oracle handles this.\n+        address.getStreet().add(StringUtils.repeat(\"12500 Mont\", 400));\n         address.setCity(\"San Jose\");\n         address.setState(\"CA\");\n-        address.setZIP(new Integer(\"95141\"));\n+        address.setZIP(95141);\n         return address;\n     }\n "},{"sha":"c53d9ab0e476fe2cf443c871d6d8db11447ac4ce","filename":"openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","status":"modified","additions":2,"deletions":10,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/5a98879567c0288cd1117aa0b177091fa14706bc/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","raw_url":"https://github.com/apache/openjpa/raw/5a98879567c0288cd1117aa0b177091fa14706bc/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml?ref=5a98879567c0288cd1117aa0b177091fa14706bc","patch":"@@ -1490,8 +1490,8 @@ to <literal>\"FOR UPDATE\"</literal>.\n <literal>GetStringVal</literal>: \n A special function to return the value of an XML \n column in a select statement.  For example, Oracle uses \n-<literal>\".getStringVal()\"</literal>, as in, \n-<literal>\"select t0.xmlcol.getStringVal() from xmltab t0\"</literal>.\n+<literal>\".getClobVal()\"</literal>, as in \n+<literal>\"SELECT t0.xmlcol.getClobVal() FROM xmltab t0\"</literal>.\n Defaults to the empty string.\n                     </para>\n                 </listitem>\n@@ -1505,14 +1505,6 @@ Defaults to the empty string.\n                             InClauseLimit\n                         </secondary>\n                     </indexterm>\n-                    <indexterm>\n-                        <primary>\n-                            JDBC\n-                        </primary>\n-                        <secondary>\n-                            GetStringVal\n-                        </secondary>\n-                    </indexterm>\n <literal>InClauseLimit</literal>: \n The maximum number of elements in an <literal>IN</literal> clause.  OpenJPA\n works around cases where the limit is exceeded.  Defaults to -1 meaning "},{"sha":"8b35724b3712df481a3579d4f331da9110df03f0","filename":"openjpa-project/src/doc/manual/ref_guide_mapping.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/5a98879567c0288cd1117aa0b177091fa14706bc/openjpa-project/src/doc/manual/ref_guide_mapping.xml","raw_url":"https://github.com/apache/openjpa/raw/5a98879567c0288cd1117aa0b177091fa14706bc/openjpa-project/src/doc/manual/ref_guide_mapping.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_mapping.xml?ref=5a98879567c0288cd1117aa0b177091fa14706bc","patch":"@@ -2633,6 +2633,10 @@ SQL Server 2005\n                   </listitem>\n               </itemizedlist>\n               <para>\n+See <xref linkend=\"supported_databases\"/> for possible database-specific\n+restrictions.\n+              </para>\n+              <para>\n Annotate the entity property using the XMLValueHandler strategy:\n \t\t      </para>\n <programlisting>"},{"sha":"aaaa0a24675df6ab5aa6478260b21f591b738741","filename":"openjpa-project/src/doc/manual/supported_databases.xml","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/5a98879567c0288cd1117aa0b177091fa14706bc/openjpa-project/src/doc/manual/supported_databases.xml","raw_url":"https://github.com/apache/openjpa/raw/5a98879567c0288cd1117aa0b177091fa14706bc/openjpa-project/src/doc/manual/supported_databases.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/supported_databases.xml?ref=5a98879567c0288cd1117aa0b177091fa14706bc","patch":"@@ -1206,6 +1206,14 @@ openjpa.ConnectionRetainMode: always\n             </example>\n                     </para>\n                 </listitem>\n+                <listitem>\n+                    <para>\n+Mapping persistent attributes to <link linkend=\"ref_guide_xmlmapping\">XML columns</link> requires\n+a JDBC 4 compliant driver if XML strings are longer than 4000 bytes, as counted in database.\n+Otherwise an <literal>ORA-01461: can bind a LONG value only for insert into a LONG column</literal>\n+error may result.\n+                    </para>\n+                </listitem>\n             </itemizedlist>\n         </section>\n     </section>"}]}

