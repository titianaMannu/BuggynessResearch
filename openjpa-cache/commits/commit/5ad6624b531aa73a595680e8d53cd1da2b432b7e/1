{"sha":"5ad6624b531aa73a595680e8d53cd1da2b432b7e","node_id":"MDY6Q29tbWl0MjA2MzY0OjVhZDY2MjRiNTMxYWE3M2E1OTU2ODBlOGQ1M2NkMWRhMmI0MzJiN2U=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-07-11T19:51:31Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-07-11T19:51:31Z"},"message":"OPENJPA-1719: Prepared SQL cache user parameter ordering problem with subqueries. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@963139 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1d3d3a483fcfc1c3e1df7bd9527c9fdcb37662f3","url":"https://api.github.com/repos/apache/openjpa/git/trees/1d3d3a483fcfc1c3e1df7bd9527c9fdcb37662f3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5ad6624b531aa73a595680e8d53cd1da2b432b7e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5ad6624b531aa73a595680e8d53cd1da2b432b7e","html_url":"https://github.com/apache/openjpa/commit/5ad6624b531aa73a595680e8d53cd1da2b432b7e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5ad6624b531aa73a595680e8d53cd1da2b432b7e/comments","author":null,"committer":null,"parents":[{"sha":"fc63143dfe528e9afbf68aca93f1ce2ba864a2ae","url":"https://api.github.com/repos/apache/openjpa/commits/fc63143dfe528e9afbf68aca93f1ce2ba864a2ae","html_url":"https://github.com/apache/openjpa/commit/fc63143dfe528e9afbf68aca93f1ce2ba864a2ae"}],"stats":{"total":105,"additions":79,"deletions":26},"files":[{"sha":"be3f9174c00e5fb8d8b00ebb05995e4e22d7d875","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/5ad6624b531aa73a595680e8d53cd1da2b432b7e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/5ad6624b531aa73a595680e8d53cd1da2b432b7e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java?ref=5ad6624b531aa73a595680e8d53cd1da2b432b7e","patch":"@@ -43,6 +43,7 @@\n import org.apache.openjpa.kernel.QueryLanguages;\n import org.apache.openjpa.kernel.StoreQuery;\n import org.apache.openjpa.kernel.PreparedQueryCache.Exclusion;\n+import org.apache.openjpa.kernel.exps.Parameter;\n import org.apache.openjpa.kernel.exps.QueryExpressions;\n import org.apache.openjpa.lib.rop.RangeResultObjectProvider;\n import org.apache.openjpa.lib.rop.ResultList;\n@@ -409,7 +410,7 @@ private void setCollectionValuedParameter(Map<Integer,Object> result,\n     void setUserParameterPositions(List list) {\n         _userParamPositions = new HashMap<Object, int[]>();\n         for (int i = 1; list != null && i < list.size(); i += 2) {\n-            Object key = list.get(i);\n+            Object key = ((Parameter)list.get(i)).getParameterKey();\n             int p = (Integer)list.get(i-1);\n             int[] positions = _userParamPositions.get(key);\n             if (positions == null) {"},{"sha":"5c39c5b829cfaccb5b856ee8d09accec6241ca54","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CollectionParam.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/5ad6624b531aa73a595680e8d53cd1da2b432b7e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CollectionParam.java","raw_url":"https://github.com/apache/openjpa/raw/5ad6624b531aa73a595680e8d53cd1da2b432b7e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CollectionParam.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CollectionParam.java?ref=5ad6624b531aa73a595680e8d53cd1da2b432b7e","patch":"@@ -56,6 +56,13 @@ public CollectionParam(Object key, Class type) {\n         setImplicitType(type);\n     }\n \n+    public CollectionParam clone() {\n+        CollectionParam c = new CollectionParam(this._key, this._type);\n+        c._idx = this._idx;\n+        c._container = this._container;\n+        return c;\n+    }\n+\n     public Object getParameterKey() {\n         return _key;\n     }"},{"sha":"90f9ebcfae380d4e9b3814035bddd37affa826f6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","status":"modified","additions":38,"deletions":24,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/5ad6624b531aa73a595680e8d53cd1da2b432b7e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","raw_url":"https://github.com/apache/openjpa/raw/5ad6624b531aa73a595680e8d53cd1da2b432b7e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java?ref=5ad6624b531aa73a595680e8d53cd1da2b432b7e","patch":"@@ -32,6 +32,7 @@\n import org.apache.commons.lang.ObjectUtils;\n import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n+import org.apache.openjpa.jdbc.kernel.exps.CollectionParam;\n import org.apache.openjpa.jdbc.kernel.exps.Val;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.Sequence;\n@@ -64,8 +65,9 @@\n     private List _cols = null;\n     \n     // Even element refers to an index of the _params list\n-    // Odd element refers to the user parameter key\n+    // Odd element refers to the user parameter\n     private List _userIndex = null;\n+    private List _userParams = null;\n     \n     /**\n      * Default constructor.\n@@ -142,44 +144,48 @@ private void append(SQLBuffer buf, int sqlIndex, int paramIndex,\n \n             if (paramIndex == _params.size()) {\n                 _params.addAll(buf._params);\n+                if (buf._userParams != null) {\n+                    if (_userParams == null)\n+                        _userParams = new ArrayList();\n+                   _userParams.addAll(paramIndex, buf._userParams);\n+                }\n+                if (buf._userIndex != null) {\n+                    if (_userIndex == null)\n+                        _userIndex = new ArrayList();\n+                    _userIndex.addAll(buf._userIndex);\n+                }\n                 if (buf._cols != null)\n                     _cols.addAll(buf._cols);\n                 else if (_cols != null)\n                     while (_cols.size() < _params.size())\n                         _cols.add(null);\n             } else {\n                 _params.addAll(paramIndex, buf._params);\n+                if ( buf._userParams != null) {\n+                    if (_userParams == null)\n+                        _userParams = new ArrayList();\n+                    _userParams.addAll(paramIndex, buf._userParams);\n+                }\n+                 if (buf._userIndex != null) {\n+                     if (_userIndex == null) {\n+                         _userIndex = new ArrayList();\n+                         _userIndex.addAll(buf._userIndex);\n+                     } else\n+                         _userIndex.addAll(paramIndex*2, buf._userIndex);\n+                 }\n                 if (buf._cols != null)\n                     _cols.addAll(paramIndex, buf._cols);\n                 else if (_cols != null)\n                     while (_cols.size() < _params.size())\n                         _cols.add(paramIndex, null);\n             }\n         }\n-        \n-        // adding user parameters from another buffer to this buffer\n-        // this buffer's user parameter index gets modified\n-        if (buf._userIndex == null && this._userIndex == null) {\n-            // do nothing\n-        } else if (buf._userIndex != null && this._userIndex == null) {\n-            // copy the other buffers data\n-            this._userIndex = new ArrayList(buf._userIndex);\n-        } else if (buf._userIndex == null && this._userIndex != null) {\n-            // nothing to add from the other buffer\n-        } else { // both has data. \n-            // modify this buffer's user parameter index\n-            int otherSize = buf._userIndex.size()/2;\n+\n+        if (_userIndex != null) {\n+            // fix up user parameter index\n             for (int i = 0; i < _userIndex.size(); i+=2) {\n-                int newIndex = ((Integer)_userIndex.get(i)).intValue() + otherSize;\n-                _userIndex.set(i, newIndex);\n+                _userIndex.set(i, _userParams.indexOf(_userIndex.get(i+1)));\n             }\n-            // append the other buffer's user parameters to this one\n-            for (int i = 0; i < buf._userIndex.size(); i+=2) {\n-                Object otherIndex = buf._userIndex.get(i);\n-                Object otherParam = buf._userIndex.get(i+1);\n-                _userIndex.add(otherIndex);\n-                _userIndex.add(otherParam);\n-            }            \n         }\n     }\n     \n@@ -293,6 +299,8 @@ else if (o instanceof Raw)\n             // we get the first non-null col\n             if (_params == null)\n                 _params = new ArrayList();\n+            if (_userParams == null)\n+                _userParams = new ArrayList();\n             if (col != null && _cols == null) {\n                 _cols = new ArrayList();\n                 while (_cols.size() < _params.size())\n@@ -301,12 +309,18 @@ else if (o instanceof Raw)\n \n             _params.add(o);\n             if (userParam != null) {\n+                Object param = userParam;\n+                if (userParam instanceof CollectionParam)\n+                    param = ((CollectionParam) userParam).clone();\n+                _userParams.add(param);\n                 if (_userIndex == null)\n                     _userIndex = new ArrayList();\n                 int index = _params.size()-1;\n                 _userIndex.add(index);\n-                _userIndex.add(userParam.getParameterKey());\n+                _userIndex.add(param);\n             }\n+            else\n+                _userParams.add(o);\n             if (_cols != null)\n                 _cols.add(col);\n         }"},{"sha":"7f74bb2d095b72559e8ff7fef098da3ce1c87612","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","status":"modified","additions":32,"deletions":1,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/5ad6624b531aa73a595680e8d53cd1da2b432b7e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/5ad6624b531aa73a595680e8d53cd1da2b432b7e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java?ref=5ad6624b531aa73a595680e8d53cd1da2b432b7e","patch":"@@ -213,7 +213,38 @@ public void tearDown() throws Exception {\n \t        em.close();\n \t\tsuper.tearDown();\n \t}\n-\t\n+    \n+    public void testRepeatedParameterInSubqueryInDifferentOrderSubQLast() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+       \n+        String jpql = \"SELECT o from OrderJPA o \" +\n+                \"WHERE (o.CustomerId = :customerId) \" +\n+                \"AND (o.WarehouseId = :warehouseId) \" +\n+                \"AND (o.DistrictId = :districtId) \" +\n+                \"AND o.OrderId IN (SELECT MAX (o1.OrderId) from OrderJPA o1 \" +\n+                    \"WHERE ((o1.CustomerId = :customerId) \" +\n+                    \"AND    (o1.DistrictId = :districtId) \" +\n+                    \"AND    (o1.WarehouseId = :warehouseId)))\";\n+        \n+        em.getTransaction().begin();\n+        TypedQuery<OrderJPA> q1 = em.createQuery(jpql, OrderJPA.class);\n+        q1.setParameter(\"customerId\", 339)\n+          .setParameter(\"districtId\", 3)\n+          .setParameter(\"warehouseId\", 23);\n+                  \n+        assertEquals(JPQLParser.LANG_JPQL, OpenJPAPersistence.cast(q1).getLanguage());\n+        assertFalse(q1.getResultList().isEmpty());        \n+        \n+        TypedQuery<OrderJPA> q2 = em.createQuery(jpql, OrderJPA.class);\n+        assertEquals(QueryLanguages.LANG_PREPARED_SQL, OpenJPAPersistence.cast(q2).getLanguage());\n+        q2.setParameter(\"customerId\", 2967)\n+          .setParameter(\"districtId\", 5)\n+          .setParameter(\"warehouseId\", 22);\n+        \n+        assertFalse(q2.getResultList().isEmpty());\n+        em.getTransaction().rollback();\n+        \n+    }\n \n \tpublic void testPreparedQueryCacheIsActiveByDefault() {\n \t\tassertNotNull(getPreparedQueryCache());"}]}

