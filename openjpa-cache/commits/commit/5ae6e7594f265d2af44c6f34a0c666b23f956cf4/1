{"sha":"5ae6e7594f265d2af44c6f34a0c666b23f956cf4","node_id":"MDY6Q29tbWl0MjA2MzY0OjVhZTZlNzU5NGYyNjVkMmFmNDRjNmYzNGEwYzY2NmIyM2Y5NTZjZjQ=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-02-27T17:23:27Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-02-27T17:23:27Z"},"message":"These changes are reverting the changes integrated for revisions 510336 and 510281.  From the remarks on the dev mailing list, the basic idea is sound, we just need to re-visit the implementation a bit.  \n\nOne \"problem\" that I couldn't resolve with this revert process was to restore the svn history for the DB2Dictionary.java part.  Somehow, the history for this part was lost when revision 510336 was integrated.  I have not found a means of restoring that history.  But, at least the contents are back to a known state.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@512327 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6f6e65360bbca41977d6042021be6b94fef00ccd","url":"https://api.github.com/repos/apache/openjpa/git/trees/6f6e65360bbca41977d6042021be6b94fef00ccd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5ae6e7594f265d2af44c6f34a0c666b23f956cf4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5ae6e7594f265d2af44c6f34a0c666b23f956cf4","html_url":"https://github.com/apache/openjpa/commit/5ae6e7594f265d2af44c6f34a0c666b23f956cf4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5ae6e7594f265d2af44c6f34a0c666b23f956cf4/comments","author":null,"committer":null,"parents":[{"sha":"53f19cbb4ff42fbd87bf1b8082b87af7524c31b2","url":"https://api.github.com/repos/apache/openjpa/commits/53f19cbb4ff42fbd87bf1b8082b87af7524c31b2","html_url":"https://github.com/apache/openjpa/commit/53f19cbb4ff42fbd87bf1b8082b87af7524c31b2"}],"stats":{"total":39,"additions":3,"deletions":36},"files":[{"sha":"cb3df2874b24bb9dfd7732b1179cff25375bdac4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":1,"deletions":17,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/5ae6e7594f265d2af44c6f34a0c666b23f956cf4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/5ae6e7594f265d2af44c6f34a0c666b23f956cf4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=5ae6e7594f265d2af44c6f34a0c666b23f956cf4","patch":"@@ -20,7 +20,6 @@\n import java.sql.SQLException;\r\n import java.util.Arrays;\r\n \r\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\r\n import org.apache.openjpa.jdbc.schema.Sequence;\r\n \r\n /**\r\n@@ -34,7 +33,7 @@ public DB2Dictionary() {\n         validationSQL = \"SELECT DISTINCT(CURRENT TIMESTAMP) FROM \"\r\n             + \"SYSIBM.SYSTABLES\";\r\n         supportsSelectEndIndex = true;\r\n-        optimizeClause =\"optimize for\";\r\n+\r\n         nextSequenceQuery = \"VALUES NEXTVAL FOR {0}\";\r\n \r\n         sequenceSQL = \"SELECT SEQSCHEMA AS SEQUENCE_SCHEMA, \"\r\n@@ -192,19 +191,4 @@ public void connectedConfiguration(Connection conn) throws SQLException {\n             }\r\n     \t}\r\n     }\r\n-\r\n-    public String getOptimizeClause(JDBCFetchConfiguration fetch) {\r\n-        Integer rows = null;\r\n-        StringBuffer optimizeString = new StringBuffer();\r\n-        if (fetch.getHint(\"openjpa.hint.optimize\") != null) {\r\n-            rows = (Integer)fetch.getHint(\"openjpa.hint.optimize\");\r\n-            optimizeString.append(\" \").append(optimizeClause).append(\" \")\r\n-                .append(rows).append(\" \");\r\n-            if (rows.intValue() > 1)\r\n-                optimizeString.append(rowsClause).append(\" \");\r\n-            else\r\n-                optimizeString.append(rowClause).append(\" \");\r\n-        }        \r\n-        return optimizeString.toString();    \r\n-    }\r\n }\r"},{"sha":"31f2532263f98b791e83e7a52edbd503ca7a38c9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":1,"deletions":16,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/5ae6e7594f265d2af44c6f34a0c666b23f956cf4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/5ae6e7594f265d2af44c6f34a0c666b23f956cf4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=5ae6e7594f265d2af44c6f34a0c666b23f956cf4","patch":"@@ -184,9 +184,6 @@\n     public String crossJoinClause = \"CROSS JOIN\";\n     public boolean requiresConditionForCrossJoin = false;\n     public String forUpdateClause = \"FOR UPDATE\";\n-    public String optimizeClause = null;\n-    public String rowClause = \"row\";\n-    public String rowsClause = \"rows\";\n     public String tableForUpdateClause = null;\n     public String distinctCountColumnSeparator = null;\n     public boolean supportsSelectForUpdate = true;\n@@ -2146,22 +2143,10 @@ public SQLBuffer toSelect(SQLBuffer selects, JDBCFetchConfiguration fetch,\n         SQLBuffer from, SQLBuffer where, SQLBuffer group,\n         SQLBuffer having, SQLBuffer order,\n         boolean distinct, boolean forUpdate, long start, long end) {\n-    \t\n-        String optimizeString = null;\n-        SQLBuffer selString = toOperation(getSelectOperation(fetch), \n-            selects, from, where,\n+        return toOperation(getSelectOperation(fetch), selects, from, where,\n             group, having, order, distinct, forUpdate, start, end);\n-        if (fetch != null)\n-            optimizeString = getOptimizeClause(fetch);\n-        if (optimizeString != null)\n-            selString.append(optimizeString);\n-        return selString;    \t\n     }\n \n-    public String getOptimizeClause(JDBCFetchConfiguration fetch) {\n-        return null;    \t\n-    }\n-    \n     /**\n      * Return the \"SELECT\" operation clause, adding any available hints, etc.\n      */"},{"sha":"8122267ce8bfc6b342c88896a50285a908906d88","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/5ae6e7594f265d2af44c6f34a0c666b23f956cf4/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/5ae6e7594f265d2af44c6f34a0c666b23f956cf4/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=5ae6e7594f265d2af44c6f34a0c666b23f956cf4","patch":"@@ -765,7 +765,7 @@ protected Object find(Object oid, FetchConfiguration fetch, BitSet exclude,\n         }\n         if (fetch == null)\n             fetch = _fc;\n-        fetch.setHint(\"openjpa.hint.optimize\", new Integer(1));\n+\n         beginOperation(true);\n         try {\n             assertNontransactionalRead();"},{"sha":"5dd37a89f53f5fb0ad492142536a438f7fd324b3","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/5ae6e7594f265d2af44c6f34a0c666b23f956cf4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/5ae6e7594f265d2af44c6f34a0c666b23f956cf4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=5ae6e7594f265d2af44c6f34a0c666b23f956cf4","patch":"@@ -279,8 +279,6 @@ public List getResultList() {\n      */\n     public Object getSingleResult() {\n         _em.assertNotCloseInvoked();\n-    \t_query.getFetchConfiguration().\n-    \t\tsetHint(\"openjpa.hint.optimize\", new Integer(1));\n         Object ob = execute();\n         if (!(ob instanceof List))\n             return ob;"}]}

