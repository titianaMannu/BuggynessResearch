{"sha":"5afd4e851bb1fe56de5b1b546abecd799d036ad7","node_id":"MDY6Q29tbWl0MjA2MzY0OjVhZmQ0ZTg1MWJiMWZlNTZkZTViMWI1NDZhYmVjZDc5OWQwMzZhZDc=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2012-07-23T15:35:01Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2012-07-23T15:35:01Z"},"message":"OPENJPA-2238: Don't create custom proxies for default scoped classes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1364683 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0206aa37380e3d913326917b17753dddf0e1c674","url":"https://api.github.com/repos/apache/openjpa/git/trees/0206aa37380e3d913326917b17753dddf0e1c674"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5afd4e851bb1fe56de5b1b546abecd799d036ad7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5afd4e851bb1fe56de5b1b546abecd799d036ad7","html_url":"https://github.com/apache/openjpa/commit/5afd4e851bb1fe56de5b1b546abecd799d036ad7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5afd4e851bb1fe56de5b1b546abecd799d036ad7/comments","author":null,"committer":null,"parents":[{"sha":"0506e9f0b5005087032543c3f908e7b2d07af8e4","url":"https://api.github.com/repos/apache/openjpa/commits/0506e9f0b5005087032543c3f908e7b2d07af8e4","html_url":"https://github.com/apache/openjpa/commit/0506e9f0b5005087032543c3f908e7b2d07af8e4"}],"stats":{"total":579,"additions":300,"deletions":279},"files":[{"sha":"2ed4fff43281413fcfcc4ff120939ad12d1f0a37","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/5afd4e851bb1fe56de5b1b546abecd799d036ad7/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/5afd4e851bb1fe56de5b1b546abecd799d036ad7/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java?ref=5afd4e851bb1fe56de5b1b546abecd799d036ad7","patch":"@@ -291,6 +291,9 @@ public Proxy newCustomProxy(Object orig, boolean autoOff) {\n             return (Proxy) orig;\n         if (ImplHelper.isManageable(orig))\n             return null;\n+        if (!isProxyable(orig.getClass()))\n+            return null;\n+        \n         if (orig instanceof Collection) {\n             Comparator comp = (orig instanceof SortedSet) \n                 ? ((SortedSet) orig).comparator() : null;\n@@ -598,6 +601,21 @@ private static void assertNotFinal(Class type) {\n         if (Modifier.isFinal(type.getModifiers()))\n             throw new UnsupportedException(_loc.get(\"no-proxy-final\", type));\n     }\n+    \n+    private static boolean isProxyable(Class<?> cls){\n+        int mod = cls.getModifiers();\n+        if(Modifier.isFinal(mod))\n+            return false;\n+        if(Modifier.isProtected(mod) || Modifier.isPublic(mod))\n+            return true;\n+        // Default scoped class, we can only extend if it is in the same package as the generated proxy. Ideally\n+        // we'd fix the code gen portion and place proxies in the same pacakge as the types being proxied.\n+        if(cls.getPackage().getName().equals(\"org.apache.openjpa.util\"))\n+            return true;\n+        \n+        return false;\n+                    \n+    }\n \n     /**\n      * Generate the bytecode for a map proxy for the given type."},{"sha":"5b3e4e48ac8ea0afe3cba812a5d31e43d47c2f05","filename":"openjpa-kernel/src/test/java/org/apache/openjpa/util/TestProxyManager.java","status":"modified","additions":197,"deletions":279,"changes":476,"blob_url":"https://github.com/apache/openjpa/blob/5afd4e851bb1fe56de5b1b546abecd799d036ad7/openjpa-kernel/src/test/java/org/apache/openjpa/util/TestProxyManager.java","raw_url":"https://github.com/apache/openjpa/raw/5afd4e851bb1fe56de5b1b546abecd799d036ad7/openjpa-kernel/src/test/java/org/apache/openjpa/util/TestProxyManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/test/java/org/apache/openjpa/util/TestProxyManager.java?ref=5afd4e851bb1fe56de5b1b546abecd799d036ad7","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.util;\n \n import java.io.InputStream;\n+import java.lang.reflect.Method;\n import java.sql.Time;\n import java.sql.Timestamp;\n import java.util.AbstractMap;\n@@ -27,6 +28,7 @@\n import java.util.ArrayList;\n import java.util.Calendar;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.Comparator;\n import java.util.Date;\n import java.util.GregorianCalendar;\n@@ -52,11 +54,10 @@\n \n /**\n  * Test proxies generated by the proxy manager.\n- *\n+ * \n  * @author Abe White\n  */\n-public class TestProxyManager\n-    extends TestCase {\n+public class TestProxyManager extends TestCase {\n \n     private ProxyManagerImpl _mgr;\n \n@@ -97,13 +98,13 @@ private static void assertListsEqual(List l1, List l2) {\n         assertEquals(l1.size(), l2.size());\n         for (int i = 0; i < l1.size(); i++)\n             assertTrue(l1.get(i) + \" != \" + l2.get(i), l1.get(i) == l2.get(i));\n-    }  \n+    }\n \n     public void testCopySets() {\n         Set orig = new HashSet();\n         populate(orig);\n         assertSetsEqual(orig, (Set) _mgr.copyCollection(orig));\n-        \n+\n         orig = new CustomSet();\n         populate(orig);\n         assertSetsEqual(orig, (Set) _mgr.copyCollection(orig));\n@@ -116,7 +117,7 @@ private static void assertSetsEqual(Set s1, Set s2) {\n         assertTrue(s1.getClass() == s2.getClass());\n         assertEquals(s1.size(), s2.size());\n         assertEquals(s1, s2);\n-    }  \n+    }\n \n     public void testCopySortedSets() {\n         SortedSet orig = new TreeSet();\n@@ -126,7 +127,7 @@ public void testCopySortedSets() {\n         orig = new TreeSet(new CustomComparator());\n         populate(orig);\n         assertSortedSetsEqual(orig, (SortedSet) _mgr.copyCollection(orig));\n-        \n+\n         orig = new CustomSortedSet();\n         populate(orig);\n         assertSortedSetsEqual(orig, (SortedSet) _mgr.copyCollection(orig));\n@@ -153,7 +154,7 @@ private static void populate(SortedSet coll) {\n     private static void assertSortedSetsEqual(SortedSet s1, SortedSet s2) {\n         assertTrue(s1.getClass() == s2.getClass());\n         assertSortedSetsEquals(s1, s2);\n-    }  \n+    }\n \n     /**\n      * Assert that the given sets are exactly the same (minus the class).\n@@ -166,125 +167,100 @@ private static void assertSortedSetsEquals(SortedSet s1, SortedSet s2) {\n         while (itr1.hasNext())\n             assertTrue(itr1.next() == itr2.next());\n         assertTrue(s1.equals(s2));\n-    }  \n+    }\n \n     public void testCopyNullCollection() {\n         assertNull(_mgr.copyCollection(null));\n     }\n \n     public void testCopyProxyCollection() {\n-        List orig = (List) _mgr.newCollectionProxy(ArrayList.class, null, null,true);\n+        List orig = (List) _mgr.newCollectionProxy(ArrayList.class, null, null, true);\n         populate(orig);\n         assertListsEqual(new ArrayList(orig), (List) _mgr.copyCollection(orig));\n \n-        TreeSet torig = (TreeSet) _mgr.newCollectionProxy(TreeSet.class, null, \n-            new CustomComparator(),true);\n+        TreeSet torig = (TreeSet) _mgr.newCollectionProxy(TreeSet.class, null, new CustomComparator(), true);\n         assertTrue(torig.comparator() instanceof CustomComparator);\n         populate(torig);\n-        assertSortedSetsEqual(new TreeSet(torig), (SortedSet) \n-            _mgr.copyCollection(torig));\n+        assertSortedSetsEqual(new TreeSet(torig), (SortedSet) _mgr.copyCollection(torig));\n     }\n \n     public void testCloneProxyCollection() {\n         // List doesn't support clone()\n-        \n-        TreeSet torig = (TreeSet) _mgr.newCollectionProxy(TreeSet.class, null, \n-            new CustomComparator(),true);\n+\n+        TreeSet torig = (TreeSet) _mgr.newCollectionProxy(TreeSet.class, null, new CustomComparator(), true);\n         assertTrue(torig.comparator() instanceof CustomComparator);\n         populate(torig);\n         assertSortedSetsEquals(new TreeSet(torig), (SortedSet) torig.clone());\n     }\n \n-    public void testListMethodsProxied() \n-        throws Exception {\n-        Class proxy = _mgr.newCollectionProxy(ArrayList.class, null, null,true).\n-            getClass();\n+    public void testListMethodsProxied() throws Exception {\n+        Class proxy = _mgr.newCollectionProxy(ArrayList.class, null, null, true).getClass();\n         assertListMethodsProxied(proxy);\n \n-        proxy = _mgr.newCollectionProxy(CustomList.class, null, null,true).\n-            getClass();\n+        proxy = _mgr.newCollectionProxy(CustomList.class, null, null, true).getClass();\n         assertListMethodsProxied(proxy);\n     }\n \n     /**\n-     * Assert that the methods we need to override to dirty the collection are\n-     * proxied appropriately.\n+     * Assert that the methods we need to override to dirty the collection are proxied appropriately.\n      */\n-    private void assertCollectionMethodsProxied(Class cls) \n-        throws Exception {\n-        assertNotNull(cls.getDeclaredMethod(\"add\", new Class[] {Object.class}));\n-        assertNotNull(cls.getDeclaredMethod(\"addAll\", \n-            new Class[] {Collection.class})); \n+    private void assertCollectionMethodsProxied(Class cls) throws Exception {\n+        assertNotNull(cls.getDeclaredMethod(\"add\", new Class[] { Object.class }));\n+        assertNotNull(cls.getDeclaredMethod(\"addAll\", new Class[] { Collection.class }));\n         assertNotNull(cls.getDeclaredMethod(\"clear\", (Class[]) null));\n         assertNotNull(cls.getDeclaredMethod(\"iterator\", (Class[]) null));\n-        assertNotNull(cls.getDeclaredMethod(\"remove\", \n-            new Class[] {Object.class}));\n-        assertNotNull(cls.getDeclaredMethod(\"removeAll\", \n-            new Class[] {Collection.class}));\n-        assertNotNull(cls.getDeclaredMethod(\"retainAll\", \n-            new Class[] {Collection.class}));\n+        assertNotNull(cls.getDeclaredMethod(\"remove\", new Class[] { Object.class }));\n+        assertNotNull(cls.getDeclaredMethod(\"removeAll\", new Class[] { Collection.class }));\n+        assertNotNull(cls.getDeclaredMethod(\"retainAll\", new Class[] { Collection.class }));\n \n         // check a non-mutating method to make sure we're not just proxying\n-        // everything \n+        // everything\n         try {\n-            cls.getDeclaredMethod(\"contains\", new Class[] {Object.class});\n+            cls.getDeclaredMethod(\"contains\", new Class[] { Object.class });\n             fail(\"Proxied non-mutating method.\");\n         } catch (NoSuchMethodException nsme) {\n             // expected\n         }\n     }\n \n     /**\n-     * Assert that the methods we need to override to dirty the list are\n-     * proxied appropriately.\n+     * Assert that the methods we need to override to dirty the list are proxied appropriately.\n      */\n-    private void assertListMethodsProxied(Class cls) \n-        throws Exception {\n+    private void assertListMethodsProxied(Class cls) throws Exception {\n         assertCollectionMethodsProxied(cls);\n-        assertNotNull(cls.getDeclaredMethod(\"add\", \n-            new Class[] {int.class, Object.class}));\n-        assertNotNull(cls.getDeclaredMethod(\"addAll\", \n-            new Class[] {int.class, Collection.class}));\n-        assertNotNull(cls.getDeclaredMethod(\"listIterator\", (Class[]) null)); \n-        assertNotNull(cls.getDeclaredMethod(\"listIterator\", \n-            new Class[] {int.class}));\n-        assertNotNull(cls.getDeclaredMethod(\"remove\", new Class[] {int.class}));\n-        assertNotNull(cls.getDeclaredMethod(\"set\", \n-            new Class[] {int.class, Object.class}));\n-    }\n-\n-    public void testSetMethodsProxied() \n-        throws Exception {\n-        Class proxy = _mgr.newCollectionProxy(HashSet.class, null, null,true).\n-            getClass();\n+        assertNotNull(cls.getDeclaredMethod(\"add\", new Class[] { int.class, Object.class }));\n+        assertNotNull(cls.getDeclaredMethod(\"addAll\", new Class[] { int.class, Collection.class }));\n+        assertNotNull(cls.getDeclaredMethod(\"listIterator\", (Class[]) null));\n+        assertNotNull(cls.getDeclaredMethod(\"listIterator\", new Class[] { int.class }));\n+        assertNotNull(cls.getDeclaredMethod(\"remove\", new Class[] { int.class }));\n+        assertNotNull(cls.getDeclaredMethod(\"set\", new Class[] { int.class, Object.class }));\n+    }\n+\n+    public void testSetMethodsProxied() throws Exception {\n+        Class proxy = _mgr.newCollectionProxy(HashSet.class, null, null, true).getClass();\n         assertCollectionMethodsProxied(proxy);\n \n-        proxy = _mgr.newCollectionProxy(CustomSet.class, null, null,true).getClass();\n+        proxy = _mgr.newCollectionProxy(CustomSet.class, null, null, true).getClass();\n         assertCollectionMethodsProxied(proxy);\n \n-        proxy = _mgr.newCollectionProxy(CustomSortedSet.class, null, null,true).\n-            getClass();\n+        proxy = _mgr.newCollectionProxy(CustomSortedSet.class, null, null, true).getClass();\n         assertCollectionMethodsProxied(proxy);\n \n-        proxy = _mgr.newCollectionProxy(CustomComparatorSortedSet.class, null, \n-            new CustomComparator(),true).getClass();\n+        proxy = _mgr.newCollectionProxy(CustomComparatorSortedSet.class, null, new CustomComparator(), true).getClass();\n         assertCollectionMethodsProxied(proxy);\n     }\n \n-    public void testQueueMethodsProxied() \n-        throws Exception {\n+    public void testQueueMethodsProxied() throws Exception {\n         Class queue = getQueueClass();\n         if (queue == null)\n             return;\n \n-        Class proxy = _mgr.newCollectionProxy(LinkedList.class, null, null,true).\n-            getClass();\n-        assertTrue(queue.isAssignableFrom(proxy));        \n+        Class proxy = _mgr.newCollectionProxy(LinkedList.class, null, null, true).getClass();\n+        assertTrue(queue.isAssignableFrom(proxy));\n         assertCollectionMethodsProxied(proxy);\n-        assertNotNull(proxy.getDeclaredMethod(\"offer\", \n-            new Class[] {Object.class}));\n-        assertNotNull(proxy.getDeclaredMethod(\"poll\", (Class[]) null)); \n-        assertNotNull(proxy.getDeclaredMethod(\"remove\", (Class[]) null)); \n+        assertNotNull(proxy.getDeclaredMethod(\"offer\", new Class[] { Object.class }));\n+        assertNotNull(proxy.getDeclaredMethod(\"poll\", (Class[]) null));\n+        assertNotNull(proxy.getDeclaredMethod(\"remove\", (Class[]) null));\n         try {\n             proxy.getDeclaredMethod(\"peek\", (Class[]) null);\n             fail(\"Proxied non-mutating method.\");\n@@ -293,82 +269,66 @@ public void testQueueMethodsProxied()\n         }\n     }\n \n-    public void testLinkedListMethodsProxied() \n-        throws Exception {\n-        Class proxy = _mgr.newCollectionProxy(LinkedList.class, null, null,true).\n-            getClass();\n+    public void testLinkedListMethodsProxied() throws Exception {\n+        Class proxy = _mgr.newCollectionProxy(LinkedList.class, null, null, true).getClass();\n         assertListMethodsProxied(proxy);\n-        assertNotNull(proxy.getDeclaredMethod(\"addFirst\", \n-            new Class[] {Object.class}));\n-        assertNotNull(proxy.getDeclaredMethod(\"addLast\", \n-            new Class[] {Object.class}));\n-        assertNotNull(proxy.getDeclaredMethod(\"removeFirst\", (Class[]) null)); \n-        assertNotNull(proxy.getDeclaredMethod(\"removeLast\", (Class[]) null)); \n-    }\n-\n-    public void testVectorMethodsProxied() \n-        throws Exception {\n-         Class proxy = _mgr.newCollectionProxy(Vector.class, null, null,true).\n-            getClass();\n+        assertNotNull(proxy.getDeclaredMethod(\"addFirst\", new Class[] { Object.class }));\n+        assertNotNull(proxy.getDeclaredMethod(\"addLast\", new Class[] { Object.class }));\n+        assertNotNull(proxy.getDeclaredMethod(\"removeFirst\", (Class[]) null));\n+        assertNotNull(proxy.getDeclaredMethod(\"removeLast\", (Class[]) null));\n+    }\n+\n+    public void testVectorMethodsProxied() throws Exception {\n+        Class proxy = _mgr.newCollectionProxy(Vector.class, null, null, true).getClass();\n         assertListMethodsProxied(proxy);\n-        assertNotNull(proxy.getDeclaredMethod(\"addElement\", \n-            new Class[] {Object.class}));\n-        assertNotNull(proxy.getDeclaredMethod(\"insertElementAt\", \n-            new Class[] {Object.class, int.class}));\n-        assertNotNull(proxy.getDeclaredMethod(\"removeAllElements\", \n-            (Class[]) null));\n-        assertNotNull(proxy.getDeclaredMethod(\"removeElement\", \n-            new Class[] {Object.class}));\n-        assertNotNull(proxy.getDeclaredMethod(\"removeElementAt\", \n-            new Class[] {int.class}));\n-        assertNotNull(proxy.getDeclaredMethod(\"setElementAt\", \n-            new Class[] {Object.class, int.class}));\n+        assertNotNull(proxy.getDeclaredMethod(\"addElement\", new Class[] { Object.class }));\n+        assertNotNull(proxy.getDeclaredMethod(\"insertElementAt\", new Class[] { Object.class, int.class }));\n+        assertNotNull(proxy.getDeclaredMethod(\"removeAllElements\", (Class[]) null));\n+        assertNotNull(proxy.getDeclaredMethod(\"removeElement\", new Class[] { Object.class }));\n+        assertNotNull(proxy.getDeclaredMethod(\"removeElementAt\", new Class[] { int.class }));\n+        assertNotNull(proxy.getDeclaredMethod(\"setElementAt\", new Class[] { Object.class, int.class }));\n     }\n \n     public void testListChangeTracker() {\n-        Proxy coll = _mgr.newCollectionProxy(ArrayList.class, null, null,true);\n+        Proxy coll = _mgr.newCollectionProxy(ArrayList.class, null, null, true);\n         assertNotNull(coll);\n         assertNotNull(coll.getChangeTracker());\n-        assertTrue(coll.getChangeTracker() \n-            instanceof CollectionChangeTrackerImpl);\n-        CollectionChangeTrackerImpl ct = (CollectionChangeTrackerImpl) \n-            coll.getChangeTracker();\n+        assertTrue(coll.getChangeTracker() instanceof CollectionChangeTrackerImpl);\n+        CollectionChangeTrackerImpl ct = (CollectionChangeTrackerImpl) coll.getChangeTracker();\n         assertTrue(ct.allowsDuplicates());\n         assertTrue(ct.isOrdered());\n     }\n-    \n+\n     public void testSetChangeTracker() {\n-        Proxy coll = _mgr.newCollectionProxy(HashSet.class, null, null,true);\n+        Proxy coll = _mgr.newCollectionProxy(HashSet.class, null, null, true);\n         assertNotNull(coll);\n         assertNotNull(coll.getChangeTracker());\n-        assertTrue(coll.getChangeTracker() \n-            instanceof CollectionChangeTrackerImpl);\n-        CollectionChangeTrackerImpl ct = (CollectionChangeTrackerImpl) \n-            coll.getChangeTracker();\n+        assertTrue(coll.getChangeTracker() instanceof CollectionChangeTrackerImpl);\n+        CollectionChangeTrackerImpl ct = (CollectionChangeTrackerImpl) coll.getChangeTracker();\n         assertFalse(ct.allowsDuplicates());\n         assertFalse(ct.isOrdered());\n     }\n- \n+\n     public void testCollectionInterfaceProxy() {\n-        Proxy coll = _mgr.newCollectionProxy(Collection.class, null, null,true);\n+        Proxy coll = _mgr.newCollectionProxy(Collection.class, null, null, true);\n         assertNotNull(coll);\n     }\n \n     public void testListInterfaceProxy() {\n-        Proxy coll = _mgr.newCollectionProxy(List.class, null, null,true);\n+        Proxy coll = _mgr.newCollectionProxy(List.class, null, null, true);\n         assertNotNull(coll);\n         assertTrue(coll instanceof List);\n     }\n \n     public void testSetInterfaceProxy() {\n-        Proxy coll = _mgr.newCollectionProxy(Set.class, null, null,true);\n+        Proxy coll = _mgr.newCollectionProxy(Set.class, null, null, true);\n         assertNotNull(coll);\n         assertTrue(coll instanceof Set);\n         assertFalse(coll instanceof SortedSet);\n     }\n \n     public void testSortedSetInterfaceProxy() {\n-        Proxy coll = _mgr.newCollectionProxy(SortedSet.class, null, null,true);\n+        Proxy coll = _mgr.newCollectionProxy(SortedSet.class, null, null, true);\n         assertNotNull(coll);\n         assertTrue(coll instanceof SortedSet);\n     }\n@@ -378,11 +338,37 @@ public void testQueueInterfaceProxy() {\n         if (queue == null)\n             return;\n \n-        Proxy coll = _mgr.newCollectionProxy(queue, null, null,true);\n+        Proxy coll = _mgr.newCollectionProxy(queue, null, null, true);\n         assertNotNull(coll);\n         assertTrue(queue.isInstance(coll));\n     }\n \n+    public void testProxyCustomDefaultScopedType() throws Exception {\n+        // Use reflection to instantiate a type that isn't in the current package.\n+        Class<?> cls = Class.forName(\"org.apache.openjpa.util.custom.CustomProxyDefaultScopeType\");\n+        assertNotNull(cls);\n+        Method meth = cls.getMethod(\"instance\", new Class[0]);\n+        assertNotNull(meth);\n+\n+        meth.setAccessible(true);\n+        Object obj = meth.invoke(cls, new Object[0]);\n+        assertNotNull(obj);\n+        assertNull(_mgr.newCustomProxy(obj, true));\n+    }\n+    \n+    public void testProxyCustomDefaultScopedList() throws Exception {\n+        // Use reflection to instantiate a type that isn't in the current package.\n+        Class<?> cls = Class.forName(\"org.apache.openjpa.util.custom.CustomProxyDefaultScopeList\");\n+        assertNotNull(cls);\n+        Method meth = cls.getMethod(\"instance\", new Class[0]);\n+        assertNotNull(meth);\n+\n+        meth.setAccessible(true);\n+        Object obj = meth.invoke(cls, new Object[0]);\n+        assertNotNull(obj);\n+        assertNull(_mgr.newCustomProxy(obj, true));\n+    }\n+\n     /**\n      * Return the {@link java.util.Queue} class if avaialble.\n      */\n@@ -427,7 +413,7 @@ private static void assertMapsEqual(Map m1, Map m2) {\n         assertTrue(m1.getClass() == m2.getClass());\n         assertEquals(m1.size(), m2.size());\n         assertEquals(m1, m2);\n-    }  \n+    }\n \n     public void testCopySortedMaps() {\n         SortedMap orig = new TreeMap();\n@@ -453,7 +439,7 @@ public void testCopySortedMaps() {\n     private static void assertSortedMapsEqual(SortedMap m1, SortedMap m2) {\n         assertTrue(m1.getClass() == m2.getClass());\n         assertSortedMapsEquals(m1, m2);\n-    }  \n+    }\n \n     /**\n      * Assert that the given maps are exactly the same (minus the class).\n@@ -472,98 +458,81 @@ private static void assertSortedMapsEquals(SortedMap m1, SortedMap m2) {\n             assertTrue(entry1.getValue() == entry2.getValue());\n         }\n         assertTrue(m1.equals(m2));\n-    }  \n+    }\n \n     public void testCopyNullMap() {\n         assertNull(_mgr.copyMap(null));\n     }\n \n     public void testCopyProxyMap() {\n-        Map orig = (Map) _mgr.newMapProxy(HashMap.class, null, null, null,true);\n+        Map orig = (Map) _mgr.newMapProxy(HashMap.class, null, null, null, true);\n         populate(orig);\n         assertMapsEqual(new HashMap(orig), (Map) _mgr.copyMap(orig));\n \n-        TreeMap torig = (TreeMap) _mgr.newMapProxy(TreeMap.class, null, null, \n-            new CustomComparator(),true);\n+        TreeMap torig = (TreeMap) _mgr.newMapProxy(TreeMap.class, null, null, new CustomComparator(), true);\n         assertTrue(torig.comparator() instanceof CustomComparator);\n         populate(torig);\n-        assertSortedMapsEqual(new TreeMap(torig), (SortedMap) \n-            _mgr.copyMap(torig));\n+        assertSortedMapsEqual(new TreeMap(torig), (SortedMap) _mgr.copyMap(torig));\n     }\n \n     public void testCloneProxyMap() {\n         // Map does not support clone()\n-        \n-        TreeMap torig = (TreeMap) _mgr.newMapProxy(TreeMap.class, null, null, \n-            new CustomComparator(),true);\n+\n+        TreeMap torig = (TreeMap) _mgr.newMapProxy(TreeMap.class, null, null, new CustomComparator(), true);\n         assertTrue(torig.comparator() instanceof CustomComparator);\n         populate(torig);\n         assertSortedMapsEquals(new TreeMap(torig), (SortedMap) torig.clone());\n     }\n \n-    public void testMapMethodsProxied() \n-        throws Exception {\n-        Class proxy = _mgr.newMapProxy(HashMap.class, null, null, null,true).\n-            getClass();\n+    public void testMapMethodsProxied() throws Exception {\n+        Class proxy = _mgr.newMapProxy(HashMap.class, null, null, null, true).getClass();\n         assertMapMethodsProxied(proxy);\n \n-        proxy = _mgr.newMapProxy(TreeMap.class, null, null, null,true).getClass();\n+        proxy = _mgr.newMapProxy(TreeMap.class, null, null, null, true).getClass();\n         assertMapMethodsProxied(proxy);\n \n-        proxy = _mgr.newMapProxy(TreeMap.class, null, null, \n-            new CustomComparator(),true).getClass();\n+        proxy = _mgr.newMapProxy(TreeMap.class, null, null, new CustomComparator(), true).getClass();\n         assertMapMethodsProxied(proxy);\n \n-        proxy = _mgr.newMapProxy(CustomMap.class, null, null, null,true).getClass();\n+        proxy = _mgr.newMapProxy(CustomMap.class, null, null, null, true).getClass();\n         assertMapMethodsProxied(proxy);\n \n-        proxy = _mgr.newMapProxy(CustomSortedMap.class, null, null, null,true).\n-            getClass();\n+        proxy = _mgr.newMapProxy(CustomSortedMap.class, null, null, null, true).getClass();\n         assertMapMethodsProxied(proxy);\n \n-        proxy = _mgr.newMapProxy(CustomComparatorSortedMap.class, null, null, \n-            new CustomComparator(),true).getClass();\n+        proxy = _mgr.newMapProxy(CustomComparatorSortedMap.class, null, null, new CustomComparator(), true).getClass();\n         assertMapMethodsProxied(proxy);\n     }\n \n     /**\n-     * Assert that the methods we need to override to dirty the collection are\n-     * proxied appropriately.\n+     * Assert that the methods we need to override to dirty the collection are proxied appropriately.\n      */\n-    private void assertMapMethodsProxied(Class cls) \n-        throws Exception {\n-        assertNotNull(cls.getDeclaredMethod(\"put\", \n-            new Class[] {Object.class, Object.class}));\n-        assertNotNull(cls.getDeclaredMethod(\"putAll\", new Class[] {Map.class}));\n+    private void assertMapMethodsProxied(Class cls) throws Exception {\n+        assertNotNull(cls.getDeclaredMethod(\"put\", new Class[] { Object.class, Object.class }));\n+        assertNotNull(cls.getDeclaredMethod(\"putAll\", new Class[] { Map.class }));\n         assertNotNull(cls.getDeclaredMethod(\"clear\", (Class[]) null));\n-        assertNotNull(cls.getDeclaredMethod(\"remove\", \n-            new Class[] {Object.class}));\n+        assertNotNull(cls.getDeclaredMethod(\"remove\", new Class[] { Object.class }));\n         assertNotNull(cls.getDeclaredMethod(\"keySet\", (Class[]) null));\n         assertNotNull(cls.getDeclaredMethod(\"values\", (Class[]) null));\n         assertNotNull(cls.getDeclaredMethod(\"entrySet\", (Class[]) null));\n \n         // check a non-mutating method to make sure we're not just proxying\n-        // everything \n+        // everything\n         try {\n-            cls.getDeclaredMethod(\"containsKey\", new Class[] {Object.class});\n+            cls.getDeclaredMethod(\"containsKey\", new Class[] { Object.class });\n             fail(\"Proxied non-mutating method.\");\n         } catch (NoSuchMethodException nsme) {\n             // expected\n         }\n     }\n \n-    public void testPropertiesMethodsProxied() \n-        throws Exception {\n-        Class proxy = _mgr.newMapProxy(Properties.class, null, null, null,true).\n-            getClass();\n+    public void testPropertiesMethodsProxied() throws Exception {\n+        Class proxy = _mgr.newMapProxy(Properties.class, null, null, null, true).getClass();\n         assertMapMethodsProxied(proxy);\n-        assertNotNull(proxy.getDeclaredMethod(\"setProperty\", \n-            new Class[] {String.class, String.class}));\n-        assertNotNull(proxy.getDeclaredMethod(\"load\", \n-            new Class[] {InputStream.class}));\n-        assertNotNull(proxy.getDeclaredMethod(\"loadFromXML\", \n-            new Class[] {InputStream.class}));\n-    } \n+        assertNotNull(proxy.getDeclaredMethod(\"setProperty\", new Class[] { String.class, String.class }));\n+        assertNotNull(proxy.getDeclaredMethod(\"load\", new Class[] { InputStream.class }));\n+        assertNotNull(proxy.getDeclaredMethod(\"loadFromXML\", new Class[] { InputStream.class }));\n+    }\n \n     public void testCopyDates() {\n         Date orig = new Date(1999);\n@@ -590,14 +559,14 @@ public void testCopyDates() {\n     private static void assertDatesEqual(Date d1, Date d2) {\n         assertTrue(d1.getClass() == d2.getClass());\n         assertDatesEquals(d1, d2);\n-    }  \n+    }\n \n     /**\n      * Assert that the given dates are exactly the same (minus the class).\n      */\n     private static void assertDatesEquals(Date d1, Date d2) {\n         assertTrue(d1.equals(d2));\n-    }  \n+    }\n \n     public void testCopyNullDate() {\n         assertNull(_mgr.copyDate(null));\n@@ -615,8 +584,7 @@ public void testCloneProxyDate() {\n         assertDatesEquals(new Time(orig.getTime()), (Date) orig.clone());\n     }\n \n-    public void testDateMethodsProxied() \n-        throws Exception {\n+    public void testDateMethodsProxied() throws Exception {\n         Class proxy = _mgr.newDateProxy(Date.class).getClass();\n         assertDateMethodsProxied(proxy);\n \n@@ -634,28 +602,19 @@ public void testDateMethodsProxied()\n     }\n \n     /**\n-     * Assert that the methods we need to override to dirty the date are\n-     * proxied appropriately.\n+     * Assert that the methods we need to override to dirty the date are proxied appropriately.\n      */\n-    private void assertDateMethodsProxied(Class cls) \n-        throws Exception {\n-        assertNotNull(cls.getDeclaredMethod(\"setDate\", \n-            new Class[] {int.class}));\n-        assertNotNull(cls.getDeclaredMethod(\"setHours\", \n-            new Class[] {int.class}));\n-        assertNotNull(cls.getDeclaredMethod(\"setMinutes\", \n-            new Class[] {int.class}));\n-        assertNotNull(cls.getDeclaredMethod(\"setMonth\", \n-            new Class[] {int.class}));\n-        assertNotNull(cls.getDeclaredMethod(\"setSeconds\", \n-            new Class[] {int.class}));\n-        assertNotNull(cls.getDeclaredMethod(\"setTime\", \n-            new Class[] {long.class}));\n-        assertNotNull(cls.getDeclaredMethod(\"setYear\", \n-            new Class[] {int.class}));\n+    private void assertDateMethodsProxied(Class cls) throws Exception {\n+        assertNotNull(cls.getDeclaredMethod(\"setDate\", new Class[] { int.class }));\n+        assertNotNull(cls.getDeclaredMethod(\"setHours\", new Class[] { int.class }));\n+        assertNotNull(cls.getDeclaredMethod(\"setMinutes\", new Class[] { int.class }));\n+        assertNotNull(cls.getDeclaredMethod(\"setMonth\", new Class[] { int.class }));\n+        assertNotNull(cls.getDeclaredMethod(\"setSeconds\", new Class[] { int.class }));\n+        assertNotNull(cls.getDeclaredMethod(\"setTime\", new Class[] { long.class }));\n+        assertNotNull(cls.getDeclaredMethod(\"setYear\", new Class[] { int.class }));\n \n         // check a non-mutating method to make sure we're not just proxying\n-        // everything \n+        // everything\n         try {\n             cls.getDeclaredMethod(\"getTime\", (Class[]) null);\n             fail(\"Proxied non-mutating method.\");\n@@ -665,14 +624,11 @@ private void assertDateMethodsProxied(Class cls)\n     }\n \n     /**\n-     * Assert that the methods we need to override to dirty the timestamp are\n-     * proxied appropriately.\n+     * Assert that the methods we need to override to dirty the timestamp are proxied appropriately.\n      */\n-    private void assertTimestampMethodsProxied(Class cls) \n-        throws Exception {\n+    private void assertTimestampMethodsProxied(Class cls) throws Exception {\n         assertDateMethodsProxied(cls);\n-        assertNotNull(cls.getDeclaredMethod(\"setNanos\", \n-            new Class[] {int.class}));\n+        assertNotNull(cls.getDeclaredMethod(\"setNanos\", new Class[] { int.class }));\n     }\n \n     public void testCopyCalendars() {\n@@ -699,75 +655,63 @@ private static void populate(Calendar cal) {\n     private static void assertCalendarsEqual(Calendar c1, Calendar c2) {\n         assertTrue(c1.getClass() == c2.getClass());\n         assertCalendarsEquals(c1, c2);\n-    }  \n+    }\n \n     /**\n      * Assert that the given dates are exactly the same (minus the class).\n      */\n     private static void assertCalendarsEquals(Calendar c1, Calendar c2) {\n         assertTrue(c1.equals(c2));\n-    }  \n+    }\n \n     public void testCopyNullCalendar() {\n         assertNull(_mgr.copyCalendar(null));\n     }\n \n     public void testCopyProxyCalendar() {\n-        Calendar orig = (Calendar) _mgr.newCalendarProxy\n-            (GregorianCalendar.class, TimeZone.getTimeZone(\"CST\"));\n+        Calendar orig = (Calendar) _mgr.newCalendarProxy(GregorianCalendar.class, TimeZone.getTimeZone(\"CST\"));\n         populate(orig);\n         Calendar cal = new GregorianCalendar();\n         populate(cal);\n         assertCalendarsEqual(cal, _mgr.copyCalendar(orig));\n     }\n \n     public void testCloneProxyCalendar() {\n-        Calendar orig = (Calendar) _mgr.newCalendarProxy\n-            (GregorianCalendar.class, TimeZone.getTimeZone(\"CST\"));\n+        Calendar orig = (Calendar) _mgr.newCalendarProxy(GregorianCalendar.class, TimeZone.getTimeZone(\"CST\"));\n         populate(orig);\n         Calendar cal = new GregorianCalendar();\n         populate(cal);\n-        assertCalendarsEquals(cal, (Calendar)orig.clone());\n+        assertCalendarsEquals(cal, (Calendar) orig.clone());\n     }\n \n     public void testCalendarAbstractClassProxy() {\n         Proxy cal = _mgr.newCalendarProxy(Calendar.class, null);\n         assertNotNull(cal);\n     }\n \n-    public void testCalendarMethodsProxied() \n-        throws Exception {\n-        Class proxy = _mgr.newCalendarProxy(GregorianCalendar.class,\n-            TimeZone.getDefault()).getClass();\n+    public void testCalendarMethodsProxied() throws Exception {\n+        Class proxy = _mgr.newCalendarProxy(GregorianCalendar.class, TimeZone.getDefault()).getClass();\n         assertCalendarMethodsProxied(proxy);\n \n-        proxy = _mgr.newCalendarProxy(CustomCalendar.class,\n-            TimeZone.getDefault()).getClass();\n+        proxy = _mgr.newCalendarProxy(CustomCalendar.class, TimeZone.getDefault()).getClass();\n         assertCalendarMethodsProxied(proxy);\n \n-        proxy = _mgr.newCalendarProxy(Calendar.class,\n-            TimeZone.getDefault()).getClass();\n+        proxy = _mgr.newCalendarProxy(Calendar.class, TimeZone.getDefault()).getClass();\n         assertCalendarMethodsProxied(proxy);\n     }\n \n     /**\n-     * Assert that the methods we need to override to dirty the calendar are\n-     * proxied appropriately.\n+     * Assert that the methods we need to override to dirty the calendar are proxied appropriately.\n      */\n-    private void assertCalendarMethodsProxied(Class cls) \n-        throws Exception {\n-        assertNotNull(cls.getDeclaredMethod(\"set\", \n-            new Class[] {int.class, int.class}));\n-        assertNotNull(cls.getDeclaredMethod(\"roll\", \n-            new Class[] {int.class, int.class}));\n-        assertNotNull(cls.getDeclaredMethod(\"setTimeInMillis\", \n-            new Class[] {long.class}));\n-        assertNotNull(cls.getDeclaredMethod(\"setTimeZone\", \n-            new Class[] {TimeZone.class}));\n+    private void assertCalendarMethodsProxied(Class cls) throws Exception {\n+        assertNotNull(cls.getDeclaredMethod(\"set\", new Class[] { int.class, int.class }));\n+        assertNotNull(cls.getDeclaredMethod(\"roll\", new Class[] { int.class, int.class }));\n+        assertNotNull(cls.getDeclaredMethod(\"setTimeInMillis\", new Class[] { long.class }));\n+        assertNotNull(cls.getDeclaredMethod(\"setTimeZone\", new Class[] { TimeZone.class }));\n         assertNotNull(cls.getDeclaredMethod(\"computeFields\", (Class[]) null));\n \n         // check a non-mutating method to make sure we're not just proxying\n-        // everything \n+        // everything\n         try {\n             cls.getDeclaredMethod(\"getTimeInMillis\", (Class[]) null);\n             fail(\"Proxied non-mutating method.\");\n@@ -797,54 +741,47 @@ public void testNonproxyableBean() {\n         NonproxyableBean orig = new NonproxyableBean(1);\n         populate(orig);\n         assertNull(_mgr.copyCustom(orig));\n-        assertNull(_mgr.newCustomProxy(orig,true));\n+        assertNull(_mgr.newCustomProxy(orig, true));\n     }\n \n-\n     /**\n      * Assert that the given beans are exactly the same.\n      */\n     private static void assertBeansEqual(CustomBean b1, CustomBean b2) {\n         assertTrue(b1.getClass() == b2.getClass());\n         assertTrue(b1.getString() == b2.getString());\n         assertTrue(b1.getNumber() == b2.getNumber());\n-    }  \n+    }\n \n     public void testCopyNullBean() {\n         assertNull(_mgr.copyCustom(null));\n     }\n \n     public void testCopyProxyBean() {\n-        CustomBean orig = (CustomBean) _mgr.newCustomProxy(new CustomBean(),true);\n+        CustomBean orig = (CustomBean) _mgr.newCustomProxy(new CustomBean(), true);\n         populate(orig);\n         CustomBean comp = new CustomBean();\n         populate(comp);\n         assertBeansEqual(comp, (CustomBean) _mgr.copyCustom(orig));\n     }\n \n-    public void testBeanMethodsProxied()\n-        throws Exception {\n-        Class proxy = _mgr.newCustomProxy(new CustomBean(),true).getClass();\n+    public void testBeanMethodsProxied() throws Exception {\n+        Class proxy = _mgr.newCustomProxy(new CustomBean(), true).getClass();\n         assertBeanMethodsProxied(proxy);\n \n-        proxy = _mgr.newCustomProxy(new CustomCopyConstructorBean\n-            (new CustomBean()),true).getClass();\n+        proxy = _mgr.newCustomProxy(new CustomCopyConstructorBean(new CustomBean()), true).getClass();\n         assertBeanMethodsProxied(proxy);\n     }\n \n     /**\n-     * Assert that the methods we need to override to dirty the bean are\n-     * proxied appropriately.\n+     * Assert that the methods we need to override to dirty the bean are proxied appropriately.\n      */\n-    private void assertBeanMethodsProxied(Class cls) \n-        throws Exception {\n-        assertNotNull(cls.getDeclaredMethod(\"setString\", \n-            new Class[] {String.class}));\n-        assertNotNull(cls.getDeclaredMethod(\"setNumber\", \n-            new Class[] {int.class}));\n+    private void assertBeanMethodsProxied(Class cls) throws Exception {\n+        assertNotNull(cls.getDeclaredMethod(\"setString\", new Class[] { String.class }));\n+        assertNotNull(cls.getDeclaredMethod(\"setNumber\", new Class[] { int.class }));\n \n         // check a non-mutating method to make sure we're not just proxying\n-        // everything \n+        // everything\n         try {\n             cls.getDeclaredMethod(\"getString\", (Class[]) null);\n             fail(\"Proxied non-mutating method.\");\n@@ -858,14 +795,12 @@ public static void main(String[] args) {\n     }\n \n     /**\n-     * Used to test custom list handling.  Copy constructor intentionally \n-     * ommitted.\n+     * Used to test custom list handling. Copy constructor intentionally ommitted.\n      */\n-    public static class CustomList\n-        extends AbstractSequentialList {\n+    public static class CustomList extends AbstractSequentialList {\n \n         private final List _delegate = new ArrayList();\n-        \n+\n         public int size() {\n             return _delegate.size();\n         }\n@@ -876,14 +811,12 @@ public ListIterator listIterator(int idx) {\n     }\n \n     /**\n-     * Used to test custom set handling.  Copy constructor intentionally \n-     * ommitted.\n+     * Used to test custom set handling. Copy constructor intentionally ommitted.\n      */\n-    public static class CustomSet\n-        extends AbstractSet {\n+    public static class CustomSet extends AbstractSet {\n \n         private final Set _delegate = new HashSet();\n-        \n+\n         public int size() {\n             return _delegate.size();\n         }\n@@ -898,19 +831,15 @@ public boolean add(Object o) {\n     }\n \n     /**\n-     * Used to test custom set handling.  Copy constructor intentionally \n-     * ommitted.\n+     * Used to test custom set handling. Copy constructor intentionally ommitted.\n      */\n-    public static class CustomSortedSet\n-        extends TreeSet {\n+    public static class CustomSortedSet extends TreeSet {\n     }\n \n     /**\n-     * Used to test custom set handling.  Copy constructor intentionally \n-     * ommitted.\n+     * Used to test custom set handling. Copy constructor intentionally ommitted.\n      */\n-    public static class CustomComparatorSortedSet\n-        extends TreeSet {\n+    public static class CustomComparatorSortedSet extends TreeSet {\n \n         public CustomComparatorSortedSet() {\n         }\n@@ -921,37 +850,31 @@ public CustomComparatorSortedSet(Comparator comp) {\n     }\n \n     /**\n-     * Used to test custom map handling.  Copy constructor intentionally \n-     * ommitted.\n+     * Used to test custom map handling. Copy constructor intentionally ommitted.\n      */\n-    public static class CustomMap\n-        extends AbstractMap {\n+    public static class CustomMap extends AbstractMap {\n \n         private final Map _delegate = new HashMap();\n \n         public Object put(Object key, Object value) {\n             return _delegate.put(key, value);\n         }\n-        \n+\n         public Set entrySet() {\n             return _delegate.entrySet();\n         }\n     }\n \n     /**\n-     * Used to test custom map handling.  Copy constructor intentionally \n-     * ommitted.\n+     * Used to test custom map handling. Copy constructor intentionally ommitted.\n      */\n-    public static class CustomSortedMap\n-        extends TreeMap {\n+    public static class CustomSortedMap extends TreeMap {\n     }\n \n     /**\n-     * Used to test custom map handling.  Copy constructor intentionally \n-     * ommitted.\n+     * Used to test custom map handling. Copy constructor intentionally ommitted.\n      */\n-    public static class CustomComparatorSortedMap\n-        extends TreeMap {\n+    public static class CustomComparatorSortedMap extends TreeMap {\n \n         public CustomComparatorSortedMap() {\n         }\n@@ -964,8 +887,7 @@ public CustomComparatorSortedMap(Comparator comp) {\n     /**\n      * Used to test transfer of comparators to proxies.\n      */\n-    private static class CustomComparator\n-        implements Comparator {\n+    private static class CustomComparator implements Comparator {\n \n         public int compare(Object o1, Object o2) {\n             return ((Comparable) o1).compareTo(o2);\n@@ -975,8 +897,7 @@ public int compare(Object o1, Object o2) {\n     /**\n      * Used to test custom date handling.\n      */\n-    public static class CustomDate\n-        extends Timestamp {\n+    public static class CustomDate extends Timestamp {\n \n         public CustomDate(long time) {\n             super(time);\n@@ -998,7 +919,7 @@ public void setString(String str) {\n             _string = str;\n         }\n \n-        public int getNumber() { \n+        public int getNumber() {\n             return _number;\n         }\n \n@@ -1010,8 +931,7 @@ public void setNumber(int number) {\n     /**\n      * Used to test custom bean handling.\n      */\n-    public static class CustomCopyConstructorBean \n-        extends CustomBean {\n+    public static class CustomCopyConstructorBean extends CustomBean {\n \n         public CustomCopyConstructorBean(CustomBean bean) {\n             setString(bean.getString());\n@@ -1022,8 +942,7 @@ public CustomCopyConstructorBean(CustomBean bean) {\n     /**\n      * Used to non-proxyable custom bean handling.\n      */\n-    public static class NonproxyableBean \n-        extends CustomBean {\n+    public static class NonproxyableBean extends CustomBean {\n \n         public NonproxyableBean(long x) {\n             // single non-default, non-copy constructor\n@@ -1033,7 +952,6 @@ public NonproxyableBean(long x) {\n     /**\n      * Used to test custom calendar handling.\n      */\n-    public static class CustomCalendar\n-        extends GregorianCalendar {\n+    public static class CustomCalendar extends GregorianCalendar {\n     }\n }"},{"sha":"a37ef7f35382f830df07d1fcd11efab690b1273e","filename":"openjpa-kernel/src/test/java/org/apache/openjpa/util/custom/CustomProxyDefaultScopeList.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/5afd4e851bb1fe56de5b1b546abecd799d036ad7/openjpa-kernel/src/test/java/org/apache/openjpa/util/custom/CustomProxyDefaultScopeList.java","raw_url":"https://github.com/apache/openjpa/raw/5afd4e851bb1fe56de5b1b546abecd799d036ad7/openjpa-kernel/src/test/java/org/apache/openjpa/util/custom/CustomProxyDefaultScopeList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/test/java/org/apache/openjpa/util/custom/CustomProxyDefaultScopeList.java?ref=5afd4e851bb1fe56de5b1b546abecd799d036ad7","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.util.custom;\n+\n+import java.util.AbstractSequentialList;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+class CustomProxyDefaultScopeList<E> extends AbstractSequentialList<E> {\n+\n+    private final List<E> _delegate = new ArrayList<E>();\n+\n+    public int size() {\n+        return _delegate.size();\n+    }\n+\n+    public ListIterator<E> listIterator(int idx) {\n+        return _delegate.listIterator(idx);\n+    }\n+\n+    public static Object instance() {\n+        return new CustomProxyDefaultScopeList<Integer>();\n+    };\n+}"},{"sha":"4ef122e21df14f4289df6405dfd867983609a0a5","filename":"openjpa-kernel/src/test/java/org/apache/openjpa/util/custom/CustomProxyDefaultScopeType.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/5afd4e851bb1fe56de5b1b546abecd799d036ad7/openjpa-kernel/src/test/java/org/apache/openjpa/util/custom/CustomProxyDefaultScopeType.java","raw_url":"https://github.com/apache/openjpa/raw/5afd4e851bb1fe56de5b1b546abecd799d036ad7/openjpa-kernel/src/test/java/org/apache/openjpa/util/custom/CustomProxyDefaultScopeType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/test/java/org/apache/openjpa/util/custom/CustomProxyDefaultScopeType.java?ref=5afd4e851bb1fe56de5b1b546abecd799d036ad7","patch":"@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.util.custom;\n+\n+class CustomProxyDefaultScopeType {\n+\n+    int data;\n+\n+    public CustomProxyDefaultScopeType() {\n+\n+    }\n+\n+    public CustomProxyDefaultScopeType(CustomProxyDefaultScopeType c) {\n+        data = c.data;\n+    }\n+\n+    public int getData() {\n+        return data;\n+    }\n+\n+    public void setData(int data) {\n+        this.data = data;\n+    }\n+\n+    public static Object instance() {\n+        return new CustomProxyDefaultScopeType();\n+    };\n+}"}]}

