{"sha":"5b68196cf1b235977c9134fe57f5ef694f8eafa1","node_id":"MDY6Q29tbWl0MjA2MzY0OjViNjgxOTZjZjFiMjM1OTc3YzkxMzRmZTU3ZjVlZjY5NGY4ZWFmYTE=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-08-12T02:31:53Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-08-12T02:31:53Z"},"message":"OPENJPA-1239 Corrected method which determines explicit access type to set explicit bit\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@803354 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7463c5af88b27db591bba9807ba73353f5794617","url":"https://api.github.com/repos/apache/openjpa/git/trees/7463c5af88b27db591bba9807ba73353f5794617"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5b68196cf1b235977c9134fe57f5ef694f8eafa1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5b68196cf1b235977c9134fe57f5ef694f8eafa1","html_url":"https://github.com/apache/openjpa/commit/5b68196cf1b235977c9134fe57f5ef694f8eafa1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5b68196cf1b235977c9134fe57f5ef694f8eafa1/comments","author":null,"committer":null,"parents":[{"sha":"45acdf357a50a0290d659b538d128b465365326d","url":"https://api.github.com/repos/apache/openjpa/commits/45acdf357a50a0290d659b538d128b465365326d","html_url":"https://github.com/apache/openjpa/commit/45acdf357a50a0290d659b538d128b465365326d"}],"stats":{"total":271,"additions":267,"deletions":4},"files":[{"sha":"8c377960a4c8313670eb15894078d3264a49d189","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/Ingredient.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/5b68196cf1b235977c9134fe57f5ef694f8eafa1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/Ingredient.java","raw_url":"https://github.com/apache/openjpa/raw/5b68196cf1b235977c9134fe57f5ef694f8eafa1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/Ingredient.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/Ingredient.java?ref=5b68196cf1b235977c9134fe57f5ef694f8eafa1","patch":"@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.access;\n+\n+import javax.persistence.Access;\n+import javax.persistence.AccessType;\n+import javax.persistence.Embeddable;\n+import javax.persistence.Embedded;\n+import javax.persistence.Transient;\n+\n+@Embeddable\n+@Access(AccessType.FIELD)\n+public class Ingredient {\n+    \n+    private String name;\n+    \n+    private String description;\n+\n+    @Transient\n+    private Quantity qty;\n+    \n+    public Ingredient() {        \n+    }\n+    \n+    public Ingredient(String ingName) {\n+        setName(ingName);\n+    }\n+    \n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setQuantity(Quantity quantity) {\n+        qty = quantity;\n+    }\n+\n+    @Embedded\n+    @Access(AccessType.PROPERTY)\n+    public Quantity getQuantity() {\n+        return qty;\n+    }\n+}"},{"sha":"5d79b1fdaf42b62aebe6849e2168e54054fa5c52","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/MenuItem.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/5b68196cf1b235977c9134fe57f5ef694f8eafa1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/MenuItem.java","raw_url":"https://github.com/apache/openjpa/raw/5b68196cf1b235977c9134fe57f5ef694f8eafa1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/MenuItem.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/MenuItem.java?ref=5b68196cf1b235977c9134fe57f5ef694f8eafa1","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.access;\n+\n+import java.util.Map;\n+\n+import javax.persistence.Access;\n+import javax.persistence.AccessType;\n+import javax.persistence.CollectionTable;\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.MapKeyColumn;\n+\n+@Access(AccessType.PROPERTY)\n+@Entity\n+public class MenuItem {\n+\n+    private String id;  \n+    private String name;\n+    private Map<String, Ingredient> ingredients;\n+\n+    @Id\n+    @GeneratedValue\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+\n+    @ElementCollection\n+    @CollectionTable(name=\"MENU_INGREDIENT\",joinColumns={@JoinColumn(name=\"FK_MENU_ID\")})\n+    @MapKeyColumn(name = \"INGREDIENT_ID\")\n+    public Map<String, Ingredient> getIngredients() {\n+        return ingredients;\n+    }    \n+\n+    public void setIngredients(Map<String, Ingredient> ingredients) {\n+        this.ingredients = ingredients;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+}"},{"sha":"d1efc621f26e2baa46c93528a285fe1ec90f6c44","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/Quantity.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/5b68196cf1b235977c9134fe57f5ef694f8eafa1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/Quantity.java","raw_url":"https://github.com/apache/openjpa/raw/5b68196cf1b235977c9134fe57f5ef694f8eafa1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/Quantity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/Quantity.java?ref=5b68196cf1b235977c9134fe57f5ef694f8eafa1","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.access;\n+\n+import javax.persistence.Access;\n+import javax.persistence.AccessType;\n+import javax.persistence.Column;\n+import javax.persistence.Embeddable;\n+import javax.persistence.Transient;\n+\n+@Embeddable\n+@Access(AccessType.FIELD)\n+public class Quantity {\n+\n+    public Quantity() {        \n+    }\n+    \n+    public Quantity(double amt, String uom) {\n+        setAmount(amt);\n+        setUnitOfMeasure(uom);\n+    }\n+    \n+    private double amount;\n+    \n+    @Transient\n+    private String unit;\n+\n+    public void setAmount(double amount) {\n+        this.amount = amount;\n+    }\n+\n+    public double getAmount() {\n+        return amount;\n+    }\n+\n+    public void setUnitOfMeasure(String unit) {\n+        this.unit = unit;\n+    }\n+\n+    @Access(AccessType.PROPERTY)\n+    @Column(name=\"U_O_M\")\n+    public String getUnitOfMeasure() {\n+        return unit;\n+    }\n+}"},{"sha":"c8150f87d2e4a57adf01bdb47895c3b3452c2722","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestExplicitAccess.java","status":"modified","additions":63,"deletions":1,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/5b68196cf1b235977c9134fe57f5ef694f8eafa1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestExplicitAccess.java","raw_url":"https://github.com/apache/openjpa/raw/5b68196cf1b235977c9134fe57f5ef694f8eafa1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestExplicitAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestExplicitAccess.java?ref=5b68196cf1b235977c9134fe57f5ef694f8eafa1","patch":"@@ -22,6 +22,8 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n import java.util.Random;\n \n import javax.persistence.Query;\n@@ -53,7 +55,7 @@ public void setUp() {\n             EmbedOuterField.class, MixedMultEmbedEntity.class,\n             FieldAccessPropStratsEntity.class, \n             PropAccessFieldStratsEntity.class,\n-            EmbedId.class);\n+            EmbedId.class, MenuItem.class, Ingredient.class, Quantity.class);\n     }\n \n     \n@@ -1064,6 +1066,66 @@ public void testFieldAccessStrategies() {\n         em.close();\n     }\n \n+    /**\n+     * Verifies the use of a map of embeddables containing a nested\n+     * mixed access embeddable. \n+     */\n+    public void testMapWithNestedEmbeddable() {\n+        OpenJPAEntityManagerSPI em = emf.createEntityManager();\n+        \n+        MenuItem mi = new MenuItem();\n+        mi.setName(\"PB & J Sandwich\");\n+        \n+        Map<String, Ingredient> ingredients = new HashMap<String, Ingredient>();\n+        mi.setIngredients(ingredients);\n+        \n+        Ingredient i1 = new Ingredient(\"Peanut Butter\");\n+        i1.setDescription(\"Edible brown paste, made from peanuts\");\n+        Quantity q1 = new Quantity(1.0, \"Tbsp\");\n+        i1.setQuantity(q1);\n+        ingredients.put(\"Peanut Butter\", i1);\n+        \n+        Ingredient i2 = new Ingredient(\"Jelly\");\n+        i2.setDescription(\"Sweet gel, made from fruit\");\n+        Quantity q2 = new Quantity(1.5, \"Tbsp\");\n+        i2.setQuantity(q2);\n+        ingredients.put(\"Jelly\", i2);\n+\n+        Ingredient i3 = new Ingredient(\"Bread\");\n+        i3.setDescription(\"Baked material, made from flour and water\");\n+        Quantity q3 = new Quantity(2.0, \"Slice\");\n+        i3.setQuantity(q3);\n+        ingredients.put(\"Bread\", i3);\n+\n+        em.getTransaction().begin();\n+        em.persist(mi);\n+        em.getTransaction().commit();\n+        em.clear();\n+        \n+        MenuItem mi2 = em.find(MenuItem.class, mi.getId());\n+        \n+        assertEquals(mi2.getId(), mi.getId());\n+        Map<String, Ingredient> ing2 = mi2.getIngredients();\n+        assertTrue(ing2.containsKey(\"Peanut Butter\"));\n+        Quantity q = ing2.get(\"Peanut Butter\").getQuantity();\n+        assertNotNull(q);\n+        assertEquals(1.0, q.getAmount());\n+        assertEquals(\"Tbsp\", q.getUnitOfMeasure());\n+        assertTrue(ing2.containsKey(\"Jelly\"));\n+        q = ing2.get(\"Jelly\").getQuantity();\n+        assertNotNull(q);\n+        assertEquals(1.5, q.getAmount());\n+        assertEquals(\"Tbsp\", q.getUnitOfMeasure());\n+        assertTrue(ing2.containsKey(\"Bread\"));\n+        q = ing2.get(\"Bread\").getQuantity();\n+        assertNotNull(q);\n+        assertEquals(2.0, q.getAmount());\n+        assertEquals(\"Slice\", q.getUnitOfMeasure());\n+\n+        em.remove(mi2);\n+        \n+        em.close();\n+    }\n     \n     /*\n      * Simple method to verify if an exception is of the correct type and"},{"sha":"7fbed077c79fc568283cabb608db6d4e0781472f","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/5b68196cf1b235977c9134fe57f5ef694f8eafa1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/5b68196cf1b235977c9134fe57f5ef694f8eafa1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java?ref=5b68196cf1b235977c9134fe57f5ef694f8eafa1","patch":"@@ -382,9 +382,10 @@ private int determineImplicitAccessType(Class<?> cls, OpenJPAConfiguration\n      * @see ValueMetaData#addEmbeddedMetaData()\n      */\n     private int determineExplicitAccessType(Class<?> cls) {\n-    \tAccess access = cls.getAnnotation(Access.class);\n-        return access == null ? AccessCode.UNKNOWN : (access.value() == \n-        \tAccessType.FIELD ? AccessCode.FIELD : AccessCode.PROPERTY);\n+        Access access = cls.getAnnotation(Access.class);\n+        return access == null ? AccessCode.UNKNOWN : ((access.value() == \n+            AccessType.FIELD ? AccessCode.FIELD : AccessCode.PROPERTY) |\n+            AccessCode.EXPLICIT);\n     }\n     \n     /**"}]}

