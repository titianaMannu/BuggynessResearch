{"sha":"5b7c20eacb99d974a48fcb6bc585ef6fd9f671d5","node_id":"MDY6Q29tbWl0MjA2MzY0OjViN2MyMGVhY2I5OWQ5NzRhNDhmY2I2YmM1ODVlZjZmZDlmNjcxZDU=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-01-01T17:39:28Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2010-01-01T17:39:28Z"},"message":"OPENJPA-1248: Test case refactored for easier control of LOB data creation, increased amount of LOB data to a more realistic value (but still under MySQL default BLOB limit - 64 kB).\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@895040 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"54525bef83a71da39ebbd4bbb41dbded74b87db4","url":"https://api.github.com/repos/apache/openjpa/git/trees/54525bef83a71da39ebbd4bbb41dbded74b87db4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5b7c20eacb99d974a48fcb6bc585ef6fd9f671d5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5b7c20eacb99d974a48fcb6bc585ef6fd9f671d5","html_url":"https://github.com/apache/openjpa/commit/5b7c20eacb99d974a48fcb6bc585ef6fd9f671d5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5b7c20eacb99d974a48fcb6bc585ef6fd9f671d5/comments","author":null,"committer":null,"parents":[{"sha":"d33884a90a43d7261e8bbc761295394ce9059df2","url":"https://api.github.com/repos/apache/openjpa/commits/d33884a90a43d7261e8bbc761295394ce9059df2","html_url":"https://github.com/apache/openjpa/commit/d33884a90a43d7261e8bbc761295394ce9059df2"}],"stats":{"total":59,"additions":35,"deletions":24},"files":[{"sha":"aa743e543c49644e1517ba1dca48008d9369bdd2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/AbstractLobTest.java","status":"modified","additions":33,"deletions":22,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/5b7c20eacb99d974a48fcb6bc585ef6fd9f671d5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/AbstractLobTest.java","raw_url":"https://github.com/apache/openjpa/raw/5b7c20eacb99d974a48fcb6bc585ef6fd9f671d5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/AbstractLobTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/AbstractLobTest.java?ref=5b7c20eacb99d974a48fcb6bc585ef6fd9f671d5","patch":"@@ -27,6 +27,7 @@\n import javax.persistence.EntityManager;\n import javax.persistence.Query;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.datacache.DataCachePCData;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n@@ -39,7 +40,7 @@\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n /**\n- * This abstract class defines all the tests for LOBS.\n+ * This abstract class defines all the tests for LOB streaming.\n  *\n  * @author Ignacio Andreu\n  * @since 1.1.0\n@@ -72,11 +73,11 @@ public void insert(LobEntity le) {\n     }\n \n     public void testInsert() {\n-        insert(newLobEntity(\"oOOOOOo\", 1));\n+        insert(newLobEntity(createLobData(), 1));\n     }\n \n     public void testInsertAndSelect() throws IOException {\n-        String s = \"oooOOOooo\";\n+        String s = createLobData();\n         insert(newLobEntity(s, 1));\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n@@ -100,11 +101,11 @@ public void testInsertNull() {\n     }\n \n     public void testUpdate() throws IOException {\n-        insert(newLobEntity(\"oOOOOOo\", 1));\n+        insert(newLobEntity(createLobData(), 1));\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n         LobEntity entity = (LobEntity) em.find(getLobEntityClass(), 1);\n-        String string = \"iIIIIIi\";\n+        String string = createLobData2();\n         changeStream(entity, string);\n         em.getTransaction().commit();\n         em.close();\n@@ -117,7 +118,7 @@ public void testUpdate() throws IOException {\n     }\n \n     public void testUpdateWithNull() {\n-        insert(newLobEntity(\"oOOOOOo\", 1));\n+        insert(newLobEntity(createLobData(), 1));\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n         LobEntity entity = (LobEntity) em.find(getLobEntityClass(), 1);\n@@ -137,7 +138,7 @@ public void testUpdateANullObjectWithoutNull() throws IOException {\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n         LobEntity entity = (LobEntity) em.find(getLobEntityClass(), 1);\n-        String string = \"iIIIIIi\";\n+        String string = createLobData2();\n         changeStream(entity, string);\n         em.getTransaction().commit();\n         em.close();\n@@ -150,7 +151,7 @@ public void testUpdateANullObjectWithoutNull() throws IOException {\n     }\n     \n     public void testDelete() {\n-        insert(newLobEntity(\"oOOOOOo\", 1));\n+        insert(newLobEntity(createLobData(), 1));\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n         LobEntity entity = (LobEntity) em.find(getLobEntityClass(), 1);\n@@ -168,41 +169,41 @@ public void testDelete() {\n     public void testLifeCycleInsertFlushModify() {\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n-        LobEntity le = newLobEntity(\"oOOOOOo\", 1);\n+        LobEntity le = newLobEntity(createLobData(), 1);\n         em.persist(le);\n         em.flush();\n-        changeStream(le, \"iIIIIIi\");\n+        changeStream(le, createLobData2());\n         em.getTransaction().commit();\n         em.close();\n     }\n \n     public void testLifeCycleLoadFlushModifyFlush() {\n-        insert(newLobEntity(\"oOOOOOo\", 1));\n+        insert(newLobEntity(createLobData(), 1));\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n         LobEntity entity = (LobEntity) em.find(getLobEntityClass(), 1);\n         em.flush();\n-        changeStream(entity, \"iIIIIIi\");\n+        changeStream(entity, createLobData2());\n         em.flush();\n         em.getTransaction().commit();\n         em.close();\n     }\n \n     public void testReadingMultipleTimesWithASingleConnection()\n         throws IOException {\n-        insert(newLobEntity(\"oOOOOOo\", 1));\n+        insert(newLobEntity(createLobData(), 1));\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n         LobEntity le = (LobEntity) em.find(getLobEntityClass(), 1);\n-        String string = \"iIIIIIi\";\n+        String string = createLobData2();\n         changeStream(le, string);\n         em.getTransaction().commit();\n         em.close();\n         em = emf.createEntityManager();\n         em.getTransaction().begin();\n         le = (LobEntity) em.find(getLobEntityClass(), 1);\n         assertNotNull(le.getStream());\n-        LobEntity entity = newLobEntity(\"oOOOOOo\", 2);\n+        LobEntity entity = newLobEntity(createLobData(), 2);\n         em.persist(entity);\n         assertEquals(string, getStreamContentAsString(le.getStream()));\n         em.getTransaction().commit();\n@@ -213,7 +214,7 @@ public void testDataCache() {\n         OpenJPAEntityManager em = emf.createEntityManager();\n \n         em.getTransaction().begin();\n-        LobEntity le = newLobEntity(\"oOOOOOo\", 1);\n+        LobEntity le = newLobEntity(createLobData(), 1);\n         em.persist(le);\n         em.getTransaction().commit();\n         OpenJPAConfiguration conf = emf.getConfiguration();\n@@ -230,33 +231,43 @@ public void testDataCache() {\n     public void testSetResetAndFlush() throws IOException {\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n-        LobEntity le = newLobEntity(\"oOOOOOo\", 1);\n+        LobEntity le = newLobEntity(createLobData(), 1);\n         em.persist(le);\n-        changeStream(le, \"iIIIIIi\");\n+        String string = createLobData2();\n+        changeStream(le, string);\n         em.flush();\n         em.getTransaction().commit();\n         em.close();\n         em = emf.createEntityManager();\n         em.getTransaction().begin();\n         LobEntity entity = (LobEntity) em.find(getLobEntityClass(), 1);\n-        assertEquals(\"iIIIIIi\", getStreamContentAsString(entity.getStream()));\n+        assertEquals(string, getStreamContentAsString(entity.getStream()));\n         em.getTransaction().commit();\n         em.close();\n     }\n \n     public void testSetFlushAndReset() throws IOException {\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n-        LobEntity le = newLobEntity(\"oOOOOOo\", 1);\n+        LobEntity le = newLobEntity(createLobData(), 1);\n         em.persist(le);\n         em.flush();\n-        changeStream(le, \"iIIIIIi\");\n+        String string = createLobData2();\n+        changeStream(le, string);\n         LobEntity entity = (LobEntity) em.find(getLobEntityClass(), 1);\n-        assertEquals(\"iIIIIIi\", getStreamContentAsString(entity.getStream()));\n+        assertEquals(string, getStreamContentAsString(entity.getStream()));\n         em.getTransaction().commit();\n         em.close();\n     }\n \n+    protected String createLobData() {\n+        return StringUtils.repeat(\"ooOOOOoo, \", 3000);\n+    }\n+\n+    protected String createLobData2() {\n+        return StringUtils.repeat(\"iiIIIIii, \", 1000);\n+    }\n+\n     protected abstract Class getLobEntityClass();\n \n     protected abstract String getStreamContentAsString(Object o)"},{"sha":"cf252ce17ecec989d20d46e4f97658589c68a214","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/TestInputStreamLob.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/5b7c20eacb99d974a48fcb6bc585ef6fd9f671d5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/TestInputStreamLob.java","raw_url":"https://github.com/apache/openjpa/raw/5b7c20eacb99d974a48fcb6bc585ef6fd9f671d5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/TestInputStreamLob.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/TestInputStreamLob.java?ref=5b7c20eacb99d974a48fcb6bc585ef6fd9f671d5","patch":"@@ -25,7 +25,7 @@\n import org.apache.openjpa.jdbc.sql.PostgresDictionary;\n \n /**\n- * Defines all the abstract methods from AbstractLobTest to tests the\n+ * Defines all the abstract methods from AbstractLobTest to test\n  * the LOB support with an InputStream.\n  *\n  * @author Ignacio Andreu\n@@ -69,7 +69,7 @@ protected String getSelectQuery() {\n     protected String getStreamContentAsString(Object o) throws IOException {\n         InputStream is = (InputStream) o;\n         String content = \"\";\n-        byte[] bs = new byte[4];\n+        byte[] bs = new byte[1024];\n         int read = -1;\n         do {\n             read = is.read(bs);"}]}

