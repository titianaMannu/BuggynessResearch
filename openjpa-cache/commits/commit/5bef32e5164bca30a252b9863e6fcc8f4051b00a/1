{"sha":"5bef32e5164bca30a252b9863e6fcc8f4051b00a","node_id":"MDY6Q29tbWl0MjA2MzY0OjViZWYzMmU1MTY0YmNhMzBhMjUyYjk4NjNlNmZjYzhmNDA1MWIwMGE=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-08-09T20:59:45Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-08-09T20:59:45Z"},"message":"Make Localizer.Message a static class.  Fix implicit type of query path \ntraversal terminating in byte[], char[] fields.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@430146 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"038d34c44b286dd2619b17e039a69db8cf9fb070","url":"https://api.github.com/repos/apache/openjpa/git/trees/038d34c44b286dd2619b17e039a69db8cf9fb070"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5bef32e5164bca30a252b9863e6fcc8f4051b00a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5bef32e5164bca30a252b9863e6fcc8f4051b00a","html_url":"https://github.com/apache/openjpa/commit/5bef32e5164bca30a252b9863e6fcc8f4051b00a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5bef32e5164bca30a252b9863e6fcc8f4051b00a/comments","author":null,"committer":null,"parents":[{"sha":"a120874a44f75cb61362a741f1e204a89fd20ab6","url":"https://api.github.com/repos/apache/openjpa/commits/a120874a44f75cb61362a741f1e204a89fd20ab6","html_url":"https://github.com/apache/openjpa/commit/a120874a44f75cb61362a741f1e204a89fd20ab6"}],"stats":{"total":79,"additions":46,"deletions":33},"files":[{"sha":"d97f19528773e91050644d79825490e38cec4a63","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/5bef32e5164bca30a252b9863e6fcc8f4051b00a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","raw_url":"https://github.com/apache/openjpa/raw/5bef32e5164bca30a252b9863e6fcc8f4051b00a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java?ref=5bef32e5164bca30a252b9863e6fcc8f4051b00a","patch":"@@ -306,11 +306,17 @@ public Class getType() {\n \n         if (fld != null) {\n             switch (fld.getDeclaredTypeCode()) {\n+                case JavaTypes.ARRAY:\n+                    if (fld.getDeclaredType() == byte[].class\n+                        || fld.getDeclaredType() == Byte[].class\n+                        || fld.getDeclaredType() == char[].class\n+                        || fld.getDeclaredType() == Character[].class)\n+                        return fld.getDeclaredType();\n+                    return fld.getElement().getDeclaredType();\n                 case JavaTypes.MAP:\n                     if (key)\n                         return fld.getKey().getDeclaredType();\n-                    // no break\n-                case JavaTypes.ARRAY:\n+                    return fld.getElement().getDeclaredType();\n                 case JavaTypes.COLLECTION:\n                     return fld.getElement().getDeclaredType();\n                 default:"},{"sha":"e7e84e2714a5d36806b2e1763209f86a5792d5e7","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","status":"modified","additions":38,"deletions":31,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/5bef32e5164bca30a252b9863e6fcc8f4051b00a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","raw_url":"https://github.com/apache/openjpa/raw/5bef32e5164bca30a252b9863e6fcc8f4051b00a/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java?ref=5bef32e5164bca30a252b9863e6fcc8f4051b00a","patch":"@@ -207,7 +207,7 @@ public Message get(String key, Object sub1, Object sub2, Object sub3) {\n      * @see #get(String)\n      */\n     public Message get(String key, Object[] subs) {\n-        return new Message(key, subs, false);\n+        return new Message(_package, _bundle, key, subs, false);\n     }\n \n     /**\n@@ -219,63 +219,70 @@ public Message get(String key, Object[] subs) {\n      * @see #getFatal(String)\n      */\n     public Message getFatal(String key, Object[] subs) {\n-        return new Message(key, subs, true);\n+        return new Message(_package, _bundle, key, subs, true);\n     }\n \n     /**\n      * A <code>Message</code> can provide a localized message via the \n      * {@link #getMessage} method call, and can also provide the original key,\n      * package, and substitution array that were used to assemble the message.\n      */\n-    public class Message {\n-\n-        private final String key;\n-        private final Object[] subs;\n-        private String localizedMessage;\n-        private boolean messageFound = false;\n-\n-        private Message(String key, Object[] subs, boolean fatal) {\n-            this.key = key;\n-            this.subs = subs;\n-\n-            if (_bundle == null) {\n-                if (fatal)\n-                    throw new MissingResourceException(key, key, key);\n-                else {\n-                    localizedMessage = key;\n-                    messageFound = false;\n-                }\n+    public static class Message {\n+\n+        private final Package _package;\n+        private final String _key;\n+        private final Object[] _subs;\n+        private final String _localizedMessage;\n+        private final boolean _messageFound;\n+\n+        private Message(Package pkg, ResourceBundle bundle, String key, \n+            Object[] subs, boolean fatal) {\n+            if (bundle == null && fatal)\n+                throw new MissingResourceException(key, key, key);\n+\n+            _package = pkg;\n+            _key = key;\n+            _subs = subs;\n+            if (bundle == null) {\n+                _localizedMessage = key;\n+                _messageFound = false;\n             } else {\n+                String localized = null;\n                 try {\n-                    localizedMessage = _bundle.getString(key);\n-                    messageFound = true;\n+                    localized = bundle.getString(key);\n                 } catch (MissingResourceException mre) {\n-                    if (!fatal)\n-                        localizedMessage = key;\n-                    else\n+                    if (fatal)\n                         throw mre;\n                 }\n+                _localizedMessage = (localized == null) ? key : localized;\n+                _messageFound = localized != null;\n             }\n         }\n \n         /**\n          * The localized message.\n          */\n         public String getMessage() {\n-            if (messageFound)\n-                return MessageFormat.format(localizedMessage, subs);\n-            else\n-                return key;\n+            return MessageFormat.format(_localizedMessage, _subs);\n         }\n \n+        /**\n+         * The unique key for the localized message.\n+         */\n         public String getKey() {\n-            return key;\n+            return _key;\n         }\n \n+        /**\n+         * Substitutions inserted into the message.\n+         */\n         public Object[] getSubstitutions() {\n-            return subs;\n+            return _subs;\n         }\n \n+        /**\n+         * Package containing localized resource for this message.\n+         */\n         public Package getPackage() {\n             return _package;\n         }"}]}

