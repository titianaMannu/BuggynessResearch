{"sha":"5c1421cf09d4628064510e6b29c485a749b5f574","node_id":"MDY6Q29tbWl0MjA2MzY0OjVjMTQyMWNmMDlkNDYyODA2NDUxMGU2YjI5YzQ4NWE3NDliNWY1NzQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2013-03-27T20:05:24Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2013-03-27T20:05:24Z"},"message":"OPENJPA-1979: reference column name starting with single-quote *not* delimited as they have special semantics for non-standard constant join\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1461833 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b429b1ea7598587dfd048c31cf3b0bae0b1b8abd","url":"https://api.github.com/repos/apache/openjpa/git/trees/b429b1ea7598587dfd048c31cf3b0bae0b1b8abd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5c1421cf09d4628064510e6b29c485a749b5f574","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5c1421cf09d4628064510e6b29c485a749b5f574","html_url":"https://github.com/apache/openjpa/commit/5c1421cf09d4628064510e6b29c485a749b5f574","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5c1421cf09d4628064510e6b29c485a749b5f574/comments","author":null,"committer":null,"parents":[{"sha":"82027f4a35bdb28c3bc2358f5e1bb220e65e8822","url":"https://api.github.com/repos/apache/openjpa/commits/82027f4a35bdb28c3bc2358f5e1bb220e65e8822","html_url":"https://github.com/apache/openjpa/commit/82027f4a35bdb28c3bc2358f5e1bb220e65e8822"}],"stats":{"total":57,"additions":47,"deletions":10},"files":[{"sha":"025b1185b4585c4b893de9ce2f28748bd49302e9","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","status":"modified","additions":27,"deletions":8,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/5c1421cf09d4628064510e6b29c485a749b5f574/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/5c1421cf09d4628064510e6b29c485a749b5f574/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java?ref=5c1421cf09d4628064510e6b29c485a749b5f574","patch":"@@ -490,7 +490,7 @@ private Column newColumn(PrimaryKeyJoinColumn join) {\n         if (!StringUtils.isEmpty(join.columnDefinition()))\n             col.setTypeIdentifier(DBIdentifier.newColumnDefinition(join.columnDefinition()));\n         if (!StringUtils.isEmpty(join.referencedColumnName()))\n-            col.setTargetIdentifier(DBIdentifier.newColumn(join.referencedColumnName(), delimit()));\n+            setTargetIdentifier(col, join.referencedColumnName());\n         return col;\n     }\n \n@@ -1737,13 +1737,32 @@ private Column newColumn(JoinColumn join) {\n             col.setIdentifier(DBIdentifier.newColumn(join.name(), delimit()));\n         if (!StringUtils.isEmpty(join.columnDefinition()))\n             col.setTypeIdentifier(DBIdentifier.newColumnDefinition(join.columnDefinition())); \n-        if (!StringUtils.isEmpty(join.referencedColumnName()))\n-            col.setTargetIdentifier(DBIdentifier.newColumn(join.referencedColumnName(), delimit()));\n+        String refColumnName = join.referencedColumnName();\n+        if (!StringUtils.isEmpty(refColumnName)) {\n+        \tsetTargetIdentifier(col, refColumnName);\n+        }\n         col.setNotNull(!join.nullable());\n         col.setFlag(Column.FLAG_UNINSERTABLE, !join.insertable());\n         col.setFlag(Column.FLAG_UNUPDATABLE, !join.updatable());\n         return col;\n     }\n+    \n+    /**\n+     * Sets reference column name of the given column taking into account\n+     * that the given reference name that begins with a single quote represents\n+     * special meaning of a constant join column and hence not to be delimited.  \n+     * @param col\n+     * @param refColumnName\n+     * @see <a href=\"http://issues.apache.org/jira/browse/OPENJPA-1979\">OPENJPA-1979</a>\n+     */\n+    private static final char SINGLE_QUOTE = '\\'';\n+    protected void setTargetIdentifier(Column col, String refColumnName) {\n+    \tif (refColumnName.charAt(0) == SINGLE_QUOTE) {\n+    \t\tcol.setTargetIdentifier(DBIdentifier.newConstant(refColumnName));\n+    \t} else {\n+    \t\tcol.setTargetIdentifier(DBIdentifier.newColumn(refColumnName, delimit()));\n+    \t}\n+    }\n \n     /**\n      * Parse @KeyColumn(s).\n@@ -1820,14 +1839,14 @@ protected void parseXJoinColumns(FieldMapping fm, MappingInfo info,\n     /**\n      * Create a new schema column with information from the given annotation.\n      */\n-    private static Column newColumn(XJoinColumn join, boolean delimit) {\n+    private Column newColumn(XJoinColumn join, boolean delimit) {\n         Column col = new Column();\n         if (!StringUtils.isEmpty(join.name()))\n             col.setIdentifier(DBIdentifier.newColumn(join.name(), delimit));\n         if (!StringUtils.isEmpty(join.columnDefinition()))\n             col.setTypeIdentifier(DBIdentifier.newColumnDefinition(join.columnDefinition()));\n         if (!StringUtils.isEmpty(join.referencedColumnName()))\n-            col.setTargetIdentifier(DBIdentifier.newColumn(join.referencedColumnName(), delimit));\n+            setTargetIdentifier(col, join.referencedColumnName());\n         if (!StringUtils.isEmpty(join.referencedAttributeName()))\n             col.setTargetField(join.referencedAttributeName());\n         col.setNotNull(!join.nullable());\n@@ -1992,14 +2011,14 @@ protected void parseElementJoinColumns(FieldMapping fm,\n     /**\n      * Create a new schema column with information from the given annotation.\n      */\n-    private static Column newColumn(ElementJoinColumn join, boolean delimit) {\n+    private Column newColumn(ElementJoinColumn join, boolean delimit) {\n         Column col = new Column();\n         if (!StringUtils.isEmpty(join.name()))\n             col.setIdentifier(DBIdentifier.newColumn(join.name(), delimit));\n         if (!StringUtils.isEmpty(join.columnDefinition()))\n             col.setTypeIdentifier(DBIdentifier.newColumnDefinition(join.columnDefinition()));\n         if (!StringUtils.isEmpty(join.referencedColumnName()))\n-            col.setTargetIdentifier(DBIdentifier.newColumn(join.referencedColumnName(), delimit));\n+            setTargetIdentifier(col, join.referencedColumnName());\n         if (!StringUtils.isEmpty(join.referencedAttributeName()))\n             col.setTargetField(join.referencedAttributeName());\n         col.setNotNull(!join.nullable());\n@@ -2087,7 +2106,7 @@ private Column newColumn(MapKeyJoinColumn join) {\n         if (!StringUtils.isEmpty(join.columnDefinition()))\n             col.setTypeIdentifier(DBIdentifier.newColumnDefinition(join.columnDefinition())); \n         if (!StringUtils.isEmpty(join.referencedColumnName()))\n-            col.setTargetIdentifier(DBIdentifier.newColumn(join.referencedColumnName(), delimit())); \n+            setTargetIdentifier(col, join.referencedColumnName()); \n         col.setNotNull(!join.nullable());\n         col.setFlag(Column.FLAG_UNINSERTABLE, !join.insertable());\n         col.setFlag(Column.FLAG_UNUPDATABLE, !join.updatable ());"},{"sha":"04fc9d7f01e13fd69a4ba2ac53108d0586ecf07a","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","status":"modified","additions":20,"deletions":2,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/5c1421cf09d4628064510e6b29c485a749b5f574/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/5c1421cf09d4628064510e6b29c485a749b5f574/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java?ref=5c1421cf09d4628064510e6b29c485a749b5f574","patch":"@@ -1055,8 +1055,9 @@ private Column parseColumn(Attributes attrs)\n         if (val != null)\n             col.setIdentifier(DBIdentifier.newColumn(val, delimit()));\n         val = attrs.getValue(\"referenced-column-name\");\n-        if (val != null)\n-            col.setTargetIdentifier(DBIdentifier.newColumn(val, delimit()));\n+        if (val != null) {\n+            setTargetIdentifier(col, val);\n+        }\n         val = attrs.getValue(\"column-definition\");\n         if (val != null)\n             col.setTypeIdentifier(DBIdentifier.newColumnDefinition(val));\n@@ -1092,6 +1093,23 @@ private Column parseColumn(Attributes attrs)\n         return col;\n     }\n \n+    /**\n+     * Sets reference column name of the given column taking into account\n+     * that the given reference name that begins with a single quote represents\n+     * special meaning of a constant join column and hence not to be delimited.  \n+     * @param col\n+     * @param refColumnName\n+     * @see <a href=\"http://issues.apache.org/jira/browse/OPENJPA-1979\">OPENJPA-1979</a>\n+     */\n+    private static final char SINGLE_QUOTE = '\\'';\n+    protected void setTargetIdentifier(Column col, String refColumnName) {\n+    \tif (refColumnName.charAt(0) == SINGLE_QUOTE) {\n+    \t\tcol.setTargetIdentifier(DBIdentifier.newConstant(refColumnName));\n+    \t} else {\n+    \t\tcol.setTargetIdentifier(DBIdentifier.newColumn(refColumnName, delimit()));\n+    \t}\n+    }\n+    \n     /**\n      * Parse collectionTable.\n      */"}]}

