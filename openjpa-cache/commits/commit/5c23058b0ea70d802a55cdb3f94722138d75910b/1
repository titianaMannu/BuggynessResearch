{"sha":"5c23058b0ea70d802a55cdb3f94722138d75910b","node_id":"MDY6Q29tbWl0MjA2MzY0OjVjMjMwNThiMGVhNzBkODAyYTU1Y2RiM2Y5NDcyMjEzOGQ3NTkxMGI=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-21T02:13:18Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-21T02:13:18Z"},"message":"OPENJPA-1253: support non-default bi-directional one to many using Join Table/Join column annotation\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@817131 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3bf832d5cf391463d5903560c80017b8cea00621","url":"https://api.github.com/repos/apache/openjpa/git/trees/3bf832d5cf391463d5903560c80017b8cea00621"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5c23058b0ea70d802a55cdb3f94722138d75910b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5c23058b0ea70d802a55cdb3f94722138d75910b","html_url":"https://github.com/apache/openjpa/commit/5c23058b0ea70d802a55cdb3f94722138d75910b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5c23058b0ea70d802a55cdb3f94722138d75910b/comments","author":null,"committer":null,"parents":[{"sha":"cf7f69bbd57fe1f40f9c7341c10788a591278777","url":"https://api.github.com/repos/apache/openjpa/commits/cf7f69bbd57fe1f40f9c7341c10788a591278777","html_url":"https://github.com/apache/openjpa/commit/cf7f69bbd57fe1f40f9c7341c10788a591278777"}],"stats":{"total":25,"additions":16,"deletions":9},"files":[{"sha":"406cd7577b89eb0ee34aface3cb56c2744064f60","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/5c23058b0ea70d802a55cdb3f94722138d75910b/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/5c23058b0ea70d802a55cdb3f94722138d75910b/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java?ref=5c23058b0ea70d802a55cdb3f94722138d75910b","patch":"@@ -1651,9 +1651,16 @@ private String trackSecondaryTable(FieldMapping fm, String secondary,\n     private void parseJoinTable(FieldMapping fm, JoinTable join) {\n     \tFieldMappingInfo info = fm.getMappingInfo();\n         info.setTableName(toTableName(join.schema(), join.name()));\n-        parseJoinColumns(fm, info, false, join.joinColumns());\n-        parseJoinColumns(fm, fm.getElementMapping().getValueInfo(), false,\n-            join.inverseJoinColumns());\n+        if (fm.getAssociationType() == FieldMetaData.ONE_TO_MANY && \n+            fm.getMappedBy() != null) { //Bi-/One-To-Many/JoinTable+JoinColumn\n+            parseJoinColumns(fm, info, false, join.inverseJoinColumns());\n+            parseJoinColumns(fm, fm.getElementMapping().getValueInfo(), false,\n+                join.joinColumns());\n+        } else {\n+            parseJoinColumns(fm, info, false, join.joinColumns());\n+            parseJoinColumns(fm, fm.getElementMapping().getValueInfo(), false,\n+                join.inverseJoinColumns());\n+        }\n         addUniqueConstraints(info.getTableName(), fm, info,  \n             join.uniqueConstraints());\n     }"},{"sha":"ae5a1c31a86a077fa3ed93e520136eaec2519b22","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_JT.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/5c23058b0ea70d802a55cdb3f94722138d75910b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_JT.java","raw_url":"https://github.com/apache/openjpa/raw/5c23058b0ea70d802a55cdb3f94722138d75910b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_JT.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_JT.java?ref=5c23058b0ea70d802a55cdb3f94722138d75910b","patch":"@@ -29,22 +29,22 @@\n \n     @Id\n     @GeneratedValue\n-    private long id;\n+    private long bid;\n \n     private String name;\n \n     @OneToMany(mappedBy=\"bi1mjt\", fetch=FetchType.EAGER)\n     @JoinTable(\n         name=\"Bi1MJT_C\",\n         joinColumns=\n-          @JoinColumn(name=\"C_ID\", referencedColumnName=\"ID\"),\n+          @JoinColumn(name=\"C_ID\", referencedColumnName=\"CID\"),\n           inverseJoinColumns=\n-          @JoinColumn(name=\"Bi1MJT_ID\", referencedColumnName=\"ID\")\n+          @JoinColumn(name=\"Bi1MJT_ID\", referencedColumnName=\"BID\")\n     )\n     private List<EntityC_B1MJT> entityCs = null;\n     \n     public long getId() { \n-        return id; \n+        return bid; \n     }\n \n     public String getName() { "},{"sha":"6ce7698d4f1b4023859e2c5fe8c60531c0270e17","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1MJT.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/5c23058b0ea70d802a55cdb3f94722138d75910b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1MJT.java","raw_url":"https://github.com/apache/openjpa/raw/5c23058b0ea70d802a55cdb3f94722138d75910b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1MJT.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC_B1MJT.java?ref=5c23058b0ea70d802a55cdb3f94722138d75910b","patch":"@@ -25,15 +25,15 @@\n \n     @Id\n     @GeneratedValue\n-    private long id;\n+    private long cid;\n \n     private String name;\n     \n     @ManyToOne\n     Bi_1ToM_JT bi1mjt;\n \n     public long getId() { \n-        return id; \n+        return cid; \n     }\n \n     public String getName() { "}]}

