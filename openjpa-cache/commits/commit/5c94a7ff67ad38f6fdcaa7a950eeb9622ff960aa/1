{"sha":"5c94a7ff67ad38f6fdcaa7a950eeb9622ff960aa","node_id":"MDY6Q29tbWl0MjA2MzY0OjVjOTRhN2ZmNjdhZDM4ZjZmZGNhYTdhOTUwZWViOTYyMmZmOTYwYWE=","commit":{"author":{"name":"Jody Grassel","email":"jgrassel@apache.org","date":"2017-07-20T20:11:40Z"},"committer":{"name":"Jody Grassel","email":"jgrassel@apache.org","date":"2017-07-20T20:11:40Z"},"message":"OPENJPA-2705: ArrayOutOfBoundsException occurs with an @EmbeddedId (commit on wdazeys behalf)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1802529 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4a36a3cf5b0c9761a271c6c1367dc61da9308660","url":"https://api.github.com/repos/apache/openjpa/git/trees/4a36a3cf5b0c9761a271c6c1367dc61da9308660"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5c94a7ff67ad38f6fdcaa7a950eeb9622ff960aa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5c94a7ff67ad38f6fdcaa7a950eeb9622ff960aa","html_url":"https://github.com/apache/openjpa/commit/5c94a7ff67ad38f6fdcaa7a950eeb9622ff960aa","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5c94a7ff67ad38f6fdcaa7a950eeb9622ff960aa/comments","author":null,"committer":null,"parents":[{"sha":"ed28ddca1a1ff1026cc068a0a85540eb756f655e","url":"https://api.github.com/repos/apache/openjpa/commits/ed28ddca1a1ff1026cc068a0a85540eb756f655e","html_url":"https://github.com/apache/openjpa/commit/ed28ddca1a1ff1026cc068a0a85540eb756f655e"}],"stats":{"total":23,"additions":21,"deletions":2},"files":[{"sha":"c5768faabec93a62bb5049cc750e3b48f24912cf","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/5c94a7ff67ad38f6fdcaa7a950eeb9622ff960aa/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","raw_url":"https://github.com/apache/openjpa/raw/5c94a7ff67ad38f6fdcaa7a950eeb9622ff960aa/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java?ref=5c94a7ff67ad38f6fdcaa7a950eeb9622ff960aa","patch":"@@ -269,7 +269,7 @@ public Object toDataStoreValue(Object obj, Column[] cols, JDBCStore store) {\n                 // If on the other hand we are dealing with an embeddable that is an @IdClass, fms.size will be the \n                 // number columns in the @IdClass.  Furthermore, when dealing with @IdClass, 'ret' will already  \n                 // properly contain the column values, therefore no further processing is needed.\n-                if (fmsPK[0].isEmbedded() && cols.length > 1 && fms.size() == 1) {\n+                if (fmsPK.length > 0 && fmsPK[0].isEmbedded() && cols.length > 1 && fms.size() == 1) {\n                     // OK, we know this PK is an embeddable. So get the individual field values.\n                     Object[] tmpRet = new Object[cols.length];\n                     for (int i = 0; i < cols.length; i++) {"},{"sha":"416d7e80ff093dbdc162724b2ccb9511a842975f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/TestCompositePrimaryKeys.java","status":"modified","additions":20,"deletions":1,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/5c94a7ff67ad38f6fdcaa7a950eeb9622ff960aa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/TestCompositePrimaryKeys.java","raw_url":"https://github.com/apache/openjpa/raw/5c94a7ff67ad38f6fdcaa7a950eeb9622ff960aa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/TestCompositePrimaryKeys.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/compositepk/TestCompositePrimaryKeys.java?ref=5c94a7ff67ad38f6fdcaa7a950eeb9622ff960aa","patch":"@@ -19,10 +19,12 @@\n package org.apache.openjpa.persistence.embed.compositepk;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n \n import javax.persistence.EntityManager;\n import javax.persistence.EntityTransaction;\n+import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n import javax.persistence.criteria.CriteriaBuilder;\n import javax.persistence.criteria.CriteriaQuery;\n@@ -111,7 +113,7 @@ public void testFindUsingJPQLEqualsOnSubjectKeyAttributes() {\n      * \n      * ArgumentException: An error occurred while parsing the query filter 'select distinct g from Topic g where\n      * t.subject.key = :subjectKey'. Error message: JPQL query does not support conditional expression over embeddable\n-     * class. JPQL string: \"key\".\n+     * class. JPQL string: \"key\". See section 4.6.3 of the JPA 2.0 specification.\n      * \n      * The message in the exception tells it all. Per the spec, you can not do a compare on embeddables.\n      */\n@@ -187,6 +189,23 @@ public void testFindUsingJPQLEqualsOnSubject() {\n         verifyResults(topic, s);\n     }\n \n+    /*\n+     * Due to the fix #1 (see notes above), this fails on OJ with:\n+     * \n+     * java.lang.ArrayIndexOutOfBoundsException: Array index out of range: 0\n+     * at org.apache.openjpa.jdbc.meta.ClassMapping.toDataStoreValue(ClassMapping.java:272)\n+     * \n+     */\n+    public void testFindUsingJPQLSubjectKeyIn() { \n+        Query query = em.createQuery(\"select distinct s from Subject s where s.key in :subjectKeyList\");\n+        query.setParameter(\"subjectKeyList\", \n+                Arrays.asList(\n+                    new SubjectKey(1, \"Type\"), \n+                    new SubjectKey(2, \"Type2\"), \n+                    new SubjectKey(3, \"Type3\")));\n+        query.getResultList();\n+    }\n+\n     /*\n      * Prior to the fix #1 (see notes above), this fails on OJ with:\n      * "}]}

