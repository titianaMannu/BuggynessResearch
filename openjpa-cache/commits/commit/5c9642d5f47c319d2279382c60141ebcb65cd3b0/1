{"sha":"5c9642d5f47c319d2279382c60141ebcb65cd3b0","node_id":"MDY6Q29tbWl0MjA2MzY0OjVjOTY0MmQ1ZjQ3YzMxOWQyMjc5MzgyYzYwMTQxZWJjYjY1Y2QzYjA=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-09T22:27:17Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-09T22:27:17Z"},"message":"OPENJPA-244.  Committing Albert's changes for Java 2 Security (minus the white space).\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@564408 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"55803f4de66db3809ed0c9b84023d27634ffe479","url":"https://api.github.com/repos/apache/openjpa/git/trees/55803f4de66db3809ed0c9b84023d27634ffe479"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5c9642d5f47c319d2279382c60141ebcb65cd3b0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5c9642d5f47c319d2279382c60141ebcb65cd3b0","html_url":"https://github.com/apache/openjpa/commit/5c9642d5f47c319d2279382c60141ebcb65cd3b0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5c9642d5f47c319d2279382c60141ebcb65cd3b0/comments","author":null,"committer":null,"parents":[{"sha":"60f59740f509071e75a705168fcf1b49540ecaeb","url":"https://api.github.com/repos/apache/openjpa/commits/60f59740f509071e75a705168fcf1b49540ecaeb","html_url":"https://github.com/apache/openjpa/commit/60f59740f509071e75a705168fcf1b49540ecaeb"}],"stats":{"total":782,"additions":644,"deletions":138},"files":[{"sha":"1db9dad62df55cdd9e6b88a2e8b58fa7efc60b01","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -179,7 +179,8 @@\n     private final Log _log;\n     private final Map _tables = new HashMap();\n     private final Project _project = new Project();\n-    private final BCClassLoader _loader = new BCClassLoader(_project);\n+    private final BCClassLoader _loader = (BCClassLoader) AccessController\n+        .doPrivileged(J2DoPrivHelper.newBCClassLoaderAction(_project));\n     private StrategyInstaller _strat = null;\n     private String _package = null;\n     private File _dir = null;"},{"sha":"265b6ac6634348ea0b61cb523542d2b83521bcf9","filename":"openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -19,6 +19,8 @@\n package org.apache.openjpa.enhance;\r\n \r\n import java.io.IOException;\r\n+import java.security.AccessController;\r\n+import java.security.PrivilegedActionException;\r\n import java.util.Map;\r\n import java.util.HashMap;\r\n import java.util.Collection;\r\n@@ -28,6 +30,7 @@\n import java.util.Iterator;\r\n \r\n import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\r\n import org.apache.openjpa.lib.util.JavaVersions;\r\n import org.apache.openjpa.lib.util.BytecodeWriter;\r\n import org.apache.openjpa.lib.util.Localizer;\r\n@@ -169,14 +172,19 @@ private static void configureMetaData(ClassMetaData meta,\n         }\r\n     }\r\n \r\n-    private static void write(BCClass bc, PCEnhancer enhancer,\r\n+    private static void write(final BCClass bc, PCEnhancer enhancer,\r\n         Map<Class, byte[]> map, Class cls, List subs, List ints)\r\n         throws IOException {\r\n \r\n         // #####\r\n         java.io.File dir = org.apache.openjpa.lib.util.Files.getPackageFile(\r\n             new java.io.File(\"subs\"), bc.getPackageName(), true);\r\n-        bc.write(new java.io.File(dir, bc.getClassName() + \".class\"));\r\n+        try {\r\n+            AccessController.doPrivileged(J2DoPrivHelper.bCClassWrite(bc,\r\n+                    new java.io.File(dir, bc.getClassName() + \".class\")));\r\n+        } catch (PrivilegedActionException pae) {\r\n+            throw (IOException) pae.getException();\r\n+        }\r\n \r\n         if (bc == enhancer.getManagedTypeBytecode()) {\r\n             // if it was already defined, don't put it in the map,\r"},{"sha":"a906260b6bc60be47cf1d73c795de1db804d7644","filename":"openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -84,9 +84,11 @@ private static void registerRuntimeEnhancer(Instrumentation inst,\n         conf.setConnectionDriverName(null);\n         conf.setConnectionFactoryName(null);\n         // set single class resolver\n-        final ClassLoader tmpLoader = new TemporaryClassLoader(\n-            (ClassLoader) AccessController.doPrivileged(\n-                J2DoPrivHelper.getContextClassLoaderAction()));\n+        final ClassLoader tmpLoader = (ClassLoader) AccessController\n+            .doPrivileged(J2DoPrivHelper\n+                .newTemporaryClassLoaderAction((ClassLoader) AccessController\n+                    .doPrivileged(J2DoPrivHelper.getContextClassLoaderAction())\n+                    ));\n         conf.setClassResolver(new ClassResolver() {\n             public ClassLoader getClassLoader(Class context, ClassLoader env) {\n                 return tmpLoader;"},{"sha":"6e437883a245ec3fee291dfca1923c9c1e7cde0b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -1366,7 +1366,8 @@ public static boolean run(OpenJPAConfiguration conf, String[] args,\n         ApplicationIdTool tool;\n         Class cls;\n         ClassMetaData meta;\n-        BCClassLoader bc = new BCClassLoader(new Project());\n+        BCClassLoader bc = (BCClassLoader) AccessController\n+            .doPrivileged(J2DoPrivHelper.newBCClassLoaderAction(new Project()));\n         for (Iterator itr = classes.iterator(); itr.hasNext();) {\n             cls = (Class) itr.next();\n             log.info(_loc.get(\"appid-running\", cls));"},{"sha":"a7a7a573abd258df4cf7791cdb2ffd6fa432fff1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicStorageGenerator.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicStorageGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicStorageGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicStorageGenerator.java?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -96,9 +96,10 @@\n \n     // the project/classloader for the classes.\n     private final Project _project = new Project();\n-    private final BCClassLoader _loader = new BCClassLoader(_project,\n-        (ClassLoader) AccessController.doPrivileged(\n-            J2DoPrivHelper.getClassLoaderAction(DynamicStorage.class)));\n+    private final BCClassLoader _loader = (BCClassLoader) AccessController\n+        .doPrivileged(J2DoPrivHelper.newBCClassLoaderAction(_project,\n+            (ClassLoader) AccessController.doPrivileged(J2DoPrivHelper\n+                .getClassLoaderAction(DynamicStorage.class))));\n \n     /**\n      * Generate a generic {@link DynamicStorage} instance with the given"},{"sha":"c03151f35c9e1a6d2a147d51bd6a6ec7b8a0cc95","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":26,"deletions":13,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -57,7 +57,6 @@\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.lib.util.Services;\n-import org.apache.openjpa.lib.util.TemporaryClassLoader;\n import org.apache.openjpa.lib.util.Localizer.Message;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n@@ -179,14 +178,17 @@\n      * Constructor. Supply configuration and type to enhance.\n      */\n     public PCEnhancer(OpenJPAConfiguration conf, Class type) {\n-        this(conf, new Project().loadClass(type), (MetaDataRepository) null);\n+        this(conf, (BCClass) AccessController.doPrivileged(J2DoPrivHelper\n+            .loadProjectClassAction(new Project(), type)),\n+            (MetaDataRepository) null);\n     }\n \n     /**\n      * Constructor. Supply configuration and type to enhance.\n      */\n     public PCEnhancer(OpenJPAConfiguration conf, ClassMetaData type) {\n-        this(conf, new Project().loadClass(type.getDescribedType()),\n+        this(conf, (BCClass) AccessController.doPrivileged(J2DoPrivHelper\n+            .loadProjectClassAction(new Project(), type.getDescribedType())),\n             type.getRepository());\n     }\n \n@@ -726,14 +728,19 @@ private static BCField findField(BCMethod meth, Instruction template,\n \n             // if the middle instruction was a getfield, then it's the\n             // field that's being accessed\n-            if (!findAccessed && prevIns instanceof GetFieldInstruction)\n-                cur = ((FieldInstruction) prevIns).getField();\n+            if (!findAccessed && prevIns instanceof GetFieldInstruction) {\n+                final FieldInstruction fPrevIns = (FieldInstruction) prevIns;\n+                cur = (BCField) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getFieldInstructionFieldAction(fPrevIns));\n                 // if the middle instruction was an xload_1, then the\n                 // matched instruction is the field that's being set.\n-            else if (findAccessed && prevIns instanceof LoadInstruction\n-                && ((LoadInstruction) prevIns).getParam() == 0)\n-                cur = ((FieldInstruction) templateIns).getField();\n-            else\n+            } else if (findAccessed && prevIns instanceof LoadInstruction\n+                && ((LoadInstruction) prevIns).getParam() == 0) {\n+                final FieldInstruction fTemplateIns =\n+                    (FieldInstruction) templateIns;\n+                cur = (BCField) AccessController.doPrivileged(J2DoPrivHelper\n+                    .getFieldInstructionFieldAction(fTemplateIns));\n+            } else\n                 return null;\n \n             if (field != null && cur != field)\n@@ -888,7 +895,10 @@ private void replaceAndValidateFieldAccess(Code code, Instruction ins,\n                     // first load the old value for use in the\n                     // StateManager.settingXXX method.\n                     loadManagedInstance(code, false);\n-                    code.getfield().setField(fi.getField());\n+                    final FieldInstruction fFi = fi;\n+                    code.getfield().setField(\n+                        (BCField) AccessController.doPrivileged(J2DoPrivHelper\n+                            .getFieldInstructionFieldAction(fFi)));\n                     int val = code.getNextLocalsIndex();\n                     code.xstore().setLocal(val).setType(fi.getFieldType());\n \n@@ -3441,7 +3451,7 @@ private void addSetMethod(int index, FieldMetaData fmd)\n         code.vreturn();\n \n         // inst.pcStateManager.setting<fieldType>Field (inst,\n-        //\tpcInheritedFieldCount + <index>, inst.<field>, value, 0);\n+        //     pcInheritedFieldCount + <index>, inst.<field>, value, 0);\n         ifins.setTarget(loadManagedInstance(code, true));\n         code.getfield().setField(SM, SMTYPE);\n         loadManagedInstance(code, true);\n@@ -3569,7 +3579,9 @@ private void getfield(Code code, BCClass declarer, String attrName) {\n         String fieldName = toBackingFieldName(attrName);\n \n         // next, find the field in the managed type.\n-        BCField[] fields = _managedType.getFields(fieldName);\n+        BCField[] fields = (BCField[]) AccessController\n+            .doPrivileged(J2DoPrivHelper.getBCClassFieldsAction(_managedType,\n+                fieldName)); \n         BCField field = null;\n         for (int i = 0; i < fields.length; i++) {\n             field = fields[i];\n@@ -4284,7 +4296,8 @@ public static boolean run(OpenJPAConfiguration conf, String[] args,\n             loader = conf.getClassResolverInstance().\n                 getClassLoader(PCEnhancer.class, null);\n         if (flags.tmpClassLoader)\n-            loader = new TemporaryClassLoader(loader);\n+            loader = (ClassLoader) AccessController.doPrivileged(J2DoPrivHelper\n+                .newTemporaryClassLoaderAction(loader));\n \n         if (repos == null) {\n             repos = conf.newMetaDataRepositoryInstance();"},{"sha":"7393bd1ce5a49a7ffe8d2253d8cf5c667dbfa422","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -192,7 +192,8 @@ public static Object get(Object target, Field field) {\n     private static void makeAccessible(AccessibleObject ao, int mods) {\n         try {\n             if (!Modifier.isPublic(mods) && !ao.isAccessible())\n-                ao.setAccessible(true);\n+                AccessController.doPrivileged(J2DoPrivHelper\n+                    .setAccessibleAction(ao, true));\n         } catch (SecurityException se) {\n             throw new UserException(_loc.get(\"reflect-security\", ao)).\n                 setFatal(true);"},{"sha":"2f7ffecf94568f4bce117064f081b38af4182159","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/BeanLifecycleCallbacks.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel/src/main/java/org/apache/openjpa/event/BeanLifecycleCallbacks.java","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel/src/main/java/org/apache/openjpa/event/BeanLifecycleCallbacks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/BeanLifecycleCallbacks.java?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -77,7 +77,8 @@ public void makeCallback(Object obj, Object rel, int eventType)\n         throws Exception {\n         Method callback = getCallbackMethod();\n         if (!callback.isAccessible())\n-            callback.setAccessible(true);\n+            AccessController.doPrivileged(J2DoPrivHelper.setAccessibleAction(\n+                callback, true));\n         if (requiresArgument())\n             callback.invoke(_listener, new Object[]{ obj, rel });\n         else"},{"sha":"77be27c91d97d60f8bded7c1d1599f846e10050b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -84,7 +84,8 @@ public boolean hasCallback(Object obj, int eventType) {\n     public void makeCallback(Object obj, Object arg, int eventType)\n         throws Exception {\n         if (!_callback.isAccessible())\n-            _callback.setAccessible(true);\n+            AccessController.doPrivileged(J2DoPrivHelper.setAccessibleAction(\n+                _callback, true));\n \n         if (_arg)\n             _callback.invoke(obj, new Object[]{ arg });"},{"sha":"25cf716b9aba4100bf149f4159dae32da25535a6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/TCPRemoteCommitProvider.java","status":"modified","additions":42,"deletions":16,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel/src/main/java/org/apache/openjpa/event/TCPRemoteCommitProvider.java","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel/src/main/java/org/apache/openjpa/event/TCPRemoteCommitProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/TCPRemoteCommitProvider.java?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -31,6 +31,8 @@\n import java.net.Socket;\n import java.net.SocketException;\n import java.net.UnknownHostException;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashMap;\n@@ -46,6 +48,7 @@\n import org.apache.commons.pool.impl.GenericObjectPool;\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.GeneralException;\n import org.apache.openjpa.util.InternalException;\n@@ -235,7 +238,8 @@ public void setAddresses(String names)\n                     hostname = host;\n                     tmpPort = DEFAULT_PORT;\n                 }\n-                InetAddress tmpAddress = InetAddress.getByName(hostname);\n+                InetAddress tmpAddress = (InetAddress) AccessController\n+                    .doPrivileged(J2DoPrivHelper.getByNameAction(hostname)); \n \n                 // bleair: For each address we would rather make use of\n                 // the jdk1.4 isLinkLocalAddress () || isLoopbackAddress ().\n@@ -260,8 +264,9 @@ public void setAddresses(String names)\n                     }\n                 }\n             }\n-        }\n-        finally {\n+        } catch (PrivilegedActionException pae) {\n+            throw (UnknownHostException) pae.getException();\n+        } finally {\n             _addressesLock.unlock();\n         }\n     }\n@@ -499,7 +504,12 @@ private TCPPortListener(int port, Log log)\n             throws IOException {\n             _port = port;\n             _log = log;\n-            _receiveSocket = new ServerSocket(_port);\n+            try {\n+                _receiveSocket = (ServerSocket) AccessController\n+                    .doPrivileged(J2DoPrivHelper.newServerSocketAction(_port));\n+            } catch (PrivilegedActionException pae) {\n+                throw (IOException) pae.getException();\n+            }\n             _localhost = InetAddress.getLocalHost().getAddress();\n \n             if (_log.isTraceEnabled())\n@@ -566,7 +576,8 @@ public void run() {\n                 try {\n                     s = null;\n                     // Block, waiting to accept new connection from a peer\n-                    s = _receiveSocket.accept();\n+                    s = (Socket) AccessController.doPrivileged(J2DoPrivHelper\n+                        .acceptAction(_receiveSocket));\n                     if (_log.isTraceEnabled()) {\n                         _log.trace(s_loc.get(\"tcp-received-connection\",\n                             s.getInetAddress().getHostAddress()\n@@ -578,6 +589,8 @@ public void run() {\n                     receiverThread.start();\n                     _receiverThreads.add(receiverThread);\n                 } catch (Exception e) {\n+                    if (e instanceof PrivilegedActionException)\n+                        e = ((PrivilegedActionException) e).getException();\n                     if (!(e instanceof SocketException) || _isRunning)\n                         if (_log.isWarnEnabled())\n                             _log.warn(s_loc.get(\"tcp-accept-error\"), e);\n@@ -755,12 +768,19 @@ private void handle(InputStream in)\n         private HostAddress(String host)\n             throws UnknownHostException {\n             int colon = host.indexOf(':');\n-            if (colon != -1) {\n-                _address = InetAddress.getByName(host.substring(0, colon));\n-                _port = Integer.parseInt(host.substring(colon + 1));\n-            } else {\n-                _address = InetAddress.getByName(host);\n-                _port = DEFAULT_PORT;\n+            try {\n+                if (colon != -1) {\n+                    _address = (InetAddress) AccessController\n+                        .doPrivileged(J2DoPrivHelper.getByNameAction(host\n+                            .substring(0, colon)));\n+                    _port = Integer.parseInt(host.substring(colon + 1));\n+                } else {\n+                    _address = (InetAddress) AccessController\n+                        .doPrivileged(J2DoPrivHelper.getByNameAction(host));\n+                    _port = DEFAULT_PORT;\n+                }\n+            } catch (PrivilegedActionException pae) {\n+                throw (UnknownHostException) pae.getException();\n             }\n             // -1 max wait == as long as it takes\n             _socketPool = new GenericObjectPool\n@@ -884,12 +904,18 @@ private void closeSocket(Socket s) {\n \n             public Object makeObject()\n                 throws IOException {\n-                Socket s = new Socket(_address, _port);\n-                if (log.isTraceEnabled()) {\n-                    log.trace(s_loc.get(\"tcp-open-connection\",\n-                        _address + \":\" + _port, \"\" + s.getLocalPort()));\n+                try {\n+                    Socket s = (Socket) AccessController\n+                        .doPrivileged(J2DoPrivHelper.newSocketAction(_address,\n+                            _port));\n+                    if (log.isTraceEnabled()) {\n+                        log.trace(s_loc.get(\"tcp-open-connection\", _address\n+                            + \":\" + _port, \"\" + s.getLocalPort()));\n+                    }\n+                    return s;\n+                } catch (PrivilegedActionException pae) {\n+                    throw (IOException) pae.getException();\n                 }\n-                return s;\n             }\n \n             public void destroyObject(Object obj) {"},{"sha":"ff35d3a25a067538838c52d92745e1567a7f75f5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","status":"modified","additions":27,"deletions":11,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -363,7 +363,8 @@ private Set assignDefaultMetaDataFiles(ClassMetaData[] metas,\n         for (int i = 0; i < metas.length; i++) {\n             if (getSourceFile(metas[i]) == null)\n                 setSourceFile(metas[i], defaultSourceFile(metas[i]));\n-            if (getSourceFile(metas[i]).exists()) {\n+            if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+                .existsAction(getSourceFile(metas[i])))).booleanValue()) {\n                 if (files == null)\n                     files = new HashSet();\n                 files.add(getSourceFile(metas[i]));\n@@ -490,7 +491,8 @@ protected void backupAndDelete(Collection files) {\n         for (Iterator itr = files.iterator(); itr.hasNext();) {\n             file = (File) itr.next();\n             if (Files.backup(file, false) != null)\n-                file.delete();\n+                AccessController\n+                    .doPrivileged(J2DoPrivHelper.deleteAction(file));\n         }\n     }\n \n@@ -628,16 +630,24 @@ private Set parsePersistentTypeNames(ClassLoader loader)\n             File file;\n             for (Iterator itr = files.iterator(); itr.hasNext();) {\n                 file = (File) itr.next();\n-                if (file.isDirectory()) {\n+                if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+                    .isDirectoryAction(file))).booleanValue()) {\n                     if (log.isTraceEnabled())\n                         log.trace(_loc.get(\"scanning-directory\", file));\n                     scan(new FileMetaDataIterator(file, newMetaDataFilter()),\n                         cparser, names, true, file);\n                 } else if (file.getName().endsWith(\".jar\")) {\n                     if (log.isTraceEnabled())\n                         log.trace(_loc.get(\"scanning-jar\", file));\n-                    scan(new ZipFileMetaDataIterator(new ZipFile(file),\n-                        newMetaDataFilter()), cparser, names, true, file);\n+                    try {\n+                        ZipFile zFile = (ZipFile) AccessController\n+                            .doPrivileged(J2DoPrivHelper\n+                                .newZipFileAction(file));\n+                        scan(new ZipFileMetaDataIterator(zFile,\n+                            newMetaDataFilter()), cparser, names, true, file);\n+                    } catch (PrivilegedActionException pae) {\n+                        throw (IOException) pae.getException();\n+                    }\n                 } else {\n                     if (log.isTraceEnabled())\n                         log.trace(_loc.get(\"scanning-file\", file));\n@@ -646,8 +656,9 @@ private Set parsePersistentTypeNames(ClassLoader loader)\n                     if (log.isTraceEnabled())\n                         log.trace(_loc.get(\"scan-found-names\", clss, file));\n                     names.addAll(Arrays.asList(clss));\n-                    mapPersistentTypeNames(file.getAbsoluteFile().toURL(),\n-                        clss);\n+                    mapPersistentTypeNames(((File) AccessController\n+                        .doPrivileged(J2DoPrivHelper\n+                            .getAbsoluteFileAction(file))).toURL(), clss);\n                 }\n             }\n         }\n@@ -656,14 +667,19 @@ private Set parsePersistentTypeNames(ClassLoader loader)\n             for (Iterator itr = urls.iterator(); itr.hasNext();) {\n                 url = (URL) itr.next();\n                 if (\"file\".equals(url.getProtocol())) {\n-                    File file = new File(url.getFile()).getAbsoluteFile();\n+                    File file = (File) AccessController\n+                        .doPrivileged(J2DoPrivHelper\n+                            .getAbsoluteFileAction(new File(url.getFile()))); \n                     if (files != null && files.contains(file)) {\n                         continue;\n-                    } else if (file.isDirectory()) {\n+                    } else if (((Boolean) AccessController\n+                        .doPrivileged(J2DoPrivHelper.isDirectoryAction(file)))\n+                        .booleanValue()) {\n                         if (log.isTraceEnabled())\n                             log.trace(_loc.get(\"scanning-directory\", file));\n-                        scan(new FileMetaDataIterator(file, newMetaDataFilter()),\n-                                cparser, names, true, file);\n+                        scan(\n+                            new FileMetaDataIterator(file, newMetaDataFilter()),\n+                            cparser, names, true, file);\n                         continue;\n                     }\n                 }"},{"sha":"e67ef031b62931e5aa9bb6e1ea410772e91eca8e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java","status":"modified","additions":11,"deletions":6,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -79,17 +79,22 @@ public synchronized Class createImpl(ClassMetaData meta) {\n \n         ClassLoader parentLoader = (ClassLoader) AccessController.doPrivileged(\n             J2DoPrivHelper.getClassLoaderAction(iface)); \n-        BCClassLoader loader = new BCClassLoader(_project, parentLoader);\n-        BCClassLoader enhLoader = new BCClassLoader(_enhProject, parentLoader);\n+        BCClassLoader loader = (BCClassLoader) AccessController\n+            .doPrivileged(J2DoPrivHelper.newBCClassLoaderAction(_project,\n+                parentLoader));\n+        BCClassLoader enhLoader = (BCClassLoader) AccessController\n+            .doPrivileged(J2DoPrivHelper.newBCClassLoaderAction(_enhProject,\n+                parentLoader));\n         BCClass bc = _project.loadClass(getClassName(meta));\n         bc.declareInterface(iface);\n         ClassMetaData sup = meta.getPCSuperclassMetaData();\n         if (sup != null) {\n             bc.setSuperclass(sup.getInterfaceImpl());\n-            enhLoader = new BCClassLoader(_enhProject,\n-                (ClassLoader) AccessController.doPrivileged(\n-                    J2DoPrivHelper.getClassLoaderAction(\n-                        sup.getInterfaceImpl())));\n+            enhLoader = (BCClassLoader) AccessController\n+                .doPrivileged(J2DoPrivHelper.newBCClassLoaderAction(\n+                    _enhProject, (ClassLoader) AccessController\n+                        .doPrivileged(J2DoPrivHelper.getClassLoaderAction(sup\n+                            .getInterfaceImpl()))));\n         }\n \n         FieldMetaData[] fields = meta.getDeclaredFields();"},{"sha":"a325a69ea4c8bfe8854d73df5e1eb86a6e0fcc03","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ClassResolverImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel/src/main/java/org/apache/openjpa/util/ClassResolverImpl.java","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel/src/main/java/org/apache/openjpa/util/ClassResolverImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ClassResolverImpl.java?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -56,7 +56,8 @@ public ClassLoader getClassLoader(Class contextClass,\n \n         // construct a multi class loader that will delegate in the order\n         // described in section 12.5 of the spec\n-        MultiClassLoader loader = new MultiClassLoader();\n+        MultiClassLoader loader = (MultiClassLoader) AccessController\n+            .doPrivileged(J2DoPrivHelper.newMultiClassLoaderAction());\n         if (contextLoader != null)\n             loader.addClassLoader(contextLoader);\n         loader.addClassLoader(threadLoader);"},{"sha":"ff4ae9bcd579211fcc204bfd228e8c6955448f5f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/GeneratedClasses.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel/src/main/java/org/apache/openjpa/util/GeneratedClasses.java","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel/src/main/java/org/apache/openjpa/util/GeneratedClasses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/GeneratedClasses.java?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -63,7 +63,9 @@ public static ClassLoader getMostDerivedLoader(Class c1, Class c2) {\n      * Load the class represented by the given bytecode.\r\n      */\r\n     public static Class loadBCClass(BCClass bc, ClassLoader loader) {\r\n-        BCClassLoader bcloader = new BCClassLoader(bc.getProject(), loader);\r\n+        BCClassLoader bcloader = (BCClassLoader) AccessController\r\n+                .doPrivileged(J2DoPrivHelper.newBCClassLoaderAction(bc\r\n+                        .getProject(), loader));\r\n         try {\r\n             Class c = Class.forName(bc.getName(), true, bcloader);\r\n             bc.getProject().clear();\r"},{"sha":"473bdaa36b13545d7ad7b628503d777a5f73660f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/MultiLoaderClassResolver.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel/src/main/java/org/apache/openjpa/util/MultiLoaderClassResolver.java","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel/src/main/java/org/apache/openjpa/util/MultiLoaderClassResolver.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/MultiLoaderClassResolver.java?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -18,6 +18,9 @@\n  */\n package org.apache.openjpa.util;\n \n+import java.security.AccessController;\n+\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.MultiClassLoader;\n \n /**\n@@ -28,7 +31,8 @@\n  */\n public class MultiLoaderClassResolver implements ClassResolver {\n \n-    final private MultiClassLoader _loader = new MultiClassLoader();\n+    final private MultiClassLoader _loader = (MultiClassLoader) AccessController\n+        .doPrivileged(J2DoPrivHelper.newMultiClassLoaderAction());\n \n     public MultiLoaderClassResolver() {\n     }"},{"sha":"24e4894143bb3344c85ef4e0ad83c519ce828ce6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -61,7 +61,6 @@\n import serp.bytecode.Code;\n import serp.bytecode.JumpInstruction;\n import serp.bytecode.Project;\n-import serp.bytecode.BCClassLoader;\n import serp.util.Strings;\n \n /**\n@@ -87,10 +86,12 @@\n         _stdCollections.put(List.class, ArrayList.class);\n         if (JavaVersions.VERSION >= 5) {\n             try {\n-                Class queue = Class.forName(\"java.util.Queue\", false,\n-                    (ClassLoader) AccessController.doPrivileged(\n-                        J2DoPrivHelper.getClassLoaderAction(\n-                            Collection.class)));\n+                Class queue = (Class) AccessController\n+                    .doPrivileged(J2DoPrivHelper.getForNameAction(\n+                        \"java.util.Queue\", false,\n+                        (ClassLoader) AccessController\n+                            .doPrivileged(J2DoPrivHelper\n+                                .getClassLoaderAction(Collection.class))));\n                 _stdCollections.put(queue, LinkedList.class);\n             } catch (Throwable t) {\n                 // not really java 5 after all?"},{"sha":"b39db70677d92db1af1bdf3d0de4c45902f6a7ed","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Serialization.java","status":"modified","additions":15,"deletions":3,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel/src/main/java/org/apache/openjpa/util/Serialization.java","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-kernel/src/main/java/org/apache/openjpa/util/Serialization.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Serialization.java?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -28,6 +28,7 @@\n import java.io.OutputStream;\n import java.io.Serializable;\n import java.security.AccessController;\n+import java.security.PrivilegedAction;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.kernel.StoreContext;\n@@ -104,7 +105,12 @@ public PersistentObjectOutputStream(OutputStream delegate,\n             throws IOException {\n             super(delegate);\n             _ctx = ctx;\n-            enableReplaceObject(true);\n+            AccessController.doPrivileged(new PrivilegedAction() {\n+                public Object run() {\n+                    enableReplaceObject(true);\n+                    return null;\n+                }\n+            });\n         }\n \n         protected Object replaceObject(Object obj) {\n@@ -123,7 +129,8 @@ public ClassResolvingObjectInputStream(InputStream delegate)\n \n         protected Class resolveClass(ObjectStreamClass desc) \n             throws IOException, ClassNotFoundException {\n-            MultiClassLoader loader = new MultiClassLoader();\n+            MultiClassLoader loader = (MultiClassLoader) AccessController\n+                .doPrivileged(J2DoPrivHelper.newMultiClassLoaderAction());\n             addContextClassLoaders(loader);\n             loader.addClassLoader(getClass().getClassLoader());\n             loader.addClassLoader(MultiClassLoader.SYSTEM_LOADER);\n@@ -153,7 +160,12 @@ public PersistentObjectInputStream(InputStream delegate,\n             throws IOException {\n             super(delegate);\n             _ctx = ctx;\n-            enableResolveObject(true);\n+            AccessController.doPrivileged(new PrivilegedAction() {\n+                public Object run() {\n+                    enableResolveObject(true);\n+                    return null;\n+                }\n+            });\n         }\n \n         protected void addContextClassLoaders(MultiClassLoader loader) {"},{"sha":"0fb9221eefdb3dc2b00a3c9f543a50b515f87771","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -189,7 +189,8 @@ public void execute() throws BuildException {\n             String[] dsFiles = ds.getIncludedFiles();\n             for (int j = 0; j < dsFiles.length; j++) {\n                 File f = new File(dsFiles[j]);\n-                if (!f.isFile())\n+                if (!((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+                    .isFileAction(f))).booleanValue())\n                     f = new File(ds.getBasedir(), dsFiles[j]);\n                 files.add((String) AccessController.doPrivileged(\n                     J2DoPrivHelper.getAbsolutePathAction(f)));"},{"sha":"c38cd5a98dc5946b3ad6a4dd823b5fc98491b300","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -40,6 +40,7 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -164,7 +165,8 @@ public ConfigurationImpl(boolean loadGlobals) {\n      * {@link ProductDerivation}s, and from System properties.\n      */\n     public boolean loadGlobals() {\n-        MultiClassLoader loader = new MultiClassLoader();\n+        MultiClassLoader loader = (MultiClassLoader) AccessController\n+            .doPrivileged(J2DoPrivHelper.newMultiClassLoaderAction()); \n         loader.addClassLoader((ClassLoader) AccessController.doPrivileged(\n             J2DoPrivHelper.getContextClassLoaderAction()));\n         loader.addClassLoader(getClass().getClassLoader());"},{"sha":"22f07d8876fd9e5e52079f40a59e04fa7dc2e39e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -294,11 +294,13 @@ public static void populateConfiguration(Configuration conf, Options opts) {\n             }\n \n             File file = new File(path);\n-            if (file.isFile())\n+            if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+                .isFileAction(file))).booleanValue())\n                 provider = ProductDerivations.load(file, anchor, null);\n             else {\n                 file = new File(\"META-INF\" + File.separatorChar + path);\n-                if (file.isFile())\n+                if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+                    .isFileAction(file))).booleanValue())\n                     provider = ProductDerivations.load(file, anchor, null);\n                 else\n                     provider = ProductDerivations.load(path, anchor, null);"},{"sha":"789e89905c2f6ebc7dc7bc37d2a79e926548bb37","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassMetaDataIterator.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassMetaDataIterator.java?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -75,7 +75,8 @@ public ClassMetaDataIterator(Class cls, String suffix, ClassLoader loader,\n         }\n \n         if (loader == null) {\n-            MultiClassLoader multi = new MultiClassLoader();\n+            MultiClassLoader multi = (MultiClassLoader) AccessController\n+                .doPrivileged(J2DoPrivHelper.newMultiClassLoaderAction());\n             multi.addClassLoader(multi.SYSTEM_LOADER);\n             multi.addClassLoader(multi.THREAD_LOADER);\n             multi.addClassLoader(getClass().getClassLoader());"},{"sha":"f787488ca974a7e2b1e7bcdc56dbe1a60c928faa","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClasspathMetaDataIterator.java","status":"modified","additions":12,"deletions":4,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClasspathMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClasspathMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClasspathMetaDataIterator.java?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -21,6 +21,7 @@\n import java.io.File;\n import java.io.IOException;\n import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.Properties;\n import java.util.zip.ZipFile;\n \n@@ -64,11 +65,18 @@ public ClasspathMetaDataIterator(String[] dirs, MetaDataFilter filter)\n             if (!((Boolean) AccessController.doPrivileged(\n                 J2DoPrivHelper.existsAction(file))).booleanValue())\n                 continue;\n-            if (file.isDirectory())\n+            if (((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+                .isDirectoryAction(file))).booleanValue())\n                 addIterator(new FileMetaDataIterator(file, filter));\n-            else if (tokens[i].endsWith(\".jar\"))\n-                addIterator(new ZipFileMetaDataIterator(new ZipFile(file),\n-                    filter));\n+            else if (tokens[i].endsWith(\".jar\")) {\n+                try {\n+                    ZipFile zFile = (ZipFile) AccessController\n+                        .doPrivileged(J2DoPrivHelper.newZipFileAction(file));\n+                    addIterator(new ZipFileMetaDataIterator(zFile, filter));\n+                } catch (PrivilegedActionException pae) {\n+                    throw (IOException) pae.getException();\n+                }\n+            }\n         }\n     }\n "},{"sha":"a2d69da6eefc2aa068b42e54f00542c006464b16","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -92,7 +92,8 @@ private int scan(File file, MetaDataFilter filter, FileResource rsrc,\n             if (filter.matches(rsrc))\n                 metas.add(file);\n             else {\n-                File[] files = file.listFiles();\n+                File[] files = (File[]) AccessController\n+                    .doPrivileged(J2DoPrivHelper.listFilesAction(file)); \n                 if (files != null)\n                     for (int i = 0; i < files.length; i++)\n                         scanned = scan(files[i], filter, rsrc, metas, scanned);\n@@ -110,7 +111,8 @@ public Object next() throws IOException {\n             throw new NoSuchElementException();\n \n         _file = (File) _itr.next();\n-        return _file.getAbsoluteFile().toURL();\n+        return ((File) AccessController.doPrivileged(J2DoPrivHelper\n+            .getAbsoluteFileAction(_file))).toURL();\n     }\n \n     public InputStream getInputStream() throws IOException {"},{"sha":"af8d01f827f119e1e71916e89821ae78c61640d2","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ResourceMetaDataIterator.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ResourceMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ResourceMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ResourceMetaDataIterator.java?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -57,7 +57,8 @@ public ResourceMetaDataIterator(String rsrc) throws IOException {\n     public ResourceMetaDataIterator(String rsrc, ClassLoader loader)\n         throws IOException {\n         if (loader == null) {\n-            MultiClassLoader multi = new MultiClassLoader();\n+            MultiClassLoader multi = (MultiClassLoader) AccessController\n+                .doPrivileged(J2DoPrivHelper.newMultiClassLoaderAction());\n             multi.addClassLoader(multi.SYSTEM_LOADER);\n             multi.addClassLoader(multi.THREAD_LOADER);\n             multi.addClassLoader(getClass().getClassLoader());"},{"sha":"131dce98fb9ee5113075147c0a4658a3901af484","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -271,7 +271,8 @@ public void parse(URL url) throws IOException {\n     public void parse(File file) throws IOException {\n         if (file == null)\n             return;\n-        if (!file.isDirectory())\n+        if (!((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+            .isDirectoryAction(file))).booleanValue())\n             parse(new FileMetaDataIterator(file));\n         else {\n             String suff = (_suffix == null) ? \"\" : _suffix;"},{"sha":"838759865a08f24f35ef0d87568cf690e070d030","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","status":"modified","additions":366,"deletions":1,"changes":367,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -23,19 +23,31 @@\n import java.io.FileNotFoundException;\n import java.io.FileOutputStream;\n import java.io.IOException;\n+import java.lang.reflect.AccessibleObject;\n+import java.net.InetAddress;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n import java.net.URL;\n import java.net.URLConnection;\n+import java.net.UnknownHostException;\n import java.security.AccessController;\n import java.security.PrivilegedAction;\n import java.security.PrivilegedExceptionAction;\n+import java.util.zip.ZipFile;\n+\n import serp.bytecode.BCClass;\n+import serp.bytecode.BCClassLoader;\n import serp.bytecode.Code;\n+import serp.bytecode.FieldInstruction;\n+import serp.bytecode.Project;\n \n /**\n  * Helper class to obtain the Privilege(Exception)Action object to perform\n  * Java 2 doPrivilege security sensitive function call in the following\n  * methods:\n  * <ul>\n+ * <li>AccessibleObject.setAccessible\n+ * <li>Class.forName\n  * <li>Class.getClassLoader\n  * <li>Class.getDeclaredField\n  * <li>Class.getDeclaredFields\n@@ -47,21 +59,36 @@\n  * <li>ClassLoader.getResource\n  * <li>ClassLoader.getResources\n  * <li>ClassLoader.getSystemClassLoader\n+ * <li>File.delete\n  * <li>File.exists\n+ * <li>File.getAbsoluteFile\n  * <li>File.getAbsolutePath\n  * <li>File.getCanonicalPath\n+ * <li>File.listFiles\n  * <li>File.length\n+ * <li>File.isDirectory\n  * <li>File.mkdirs\n  * <li>File.renameTo\n  * <li>FileInputStream new\n  * <li>FileOutputStream new\n  * <li>System.getProperties\n+ * <li>InetAddress.getByName\n+ * <li>MultiClassLoader new\n+ * <li>ServerSocket new\n+ * <li>Socket new\n+ * <li>Socket.accept\n  * <li>System.getProperty\n  * <li>Thread.getContextClassLoader\n+ * <li>TemporaryClassLoader new\n  * <li>URL.openStream\n  * <li>URLConnection.getContent\n+ * <li>ZipFile new\n  * <li>serp.bytecode.Code new\n- * <li>serp.bytecode.BCClass.isInstanceOf\n+ * <li>serp.bytecode.BCClassLoader new\n+ * <li>serp.bytecode.BCClass.write\n+ * <li>serp.bytecode.BCClass.getFields\n+ * <li>serp.bytecode.FieldInstruction.getField\n+ * <li>serp.bytecode.Project.loadClass\n  * </ul>\n  * \n  * If these methods are used, the following sample usage patterns should be\n@@ -144,6 +171,45 @@ public Object run() {\n         return pathSeparator;\n     }\n \n+    /**\n+     * Return a PrivilegeAction object for aObj.setAccessible().\n+     * \n+     * Requires security policy: 'permission java.lang.reflect.ReflectPermission\n+     * \"suppressAccessChecks\";'\n+     */\n+    public static final PrivilegedAction setAccessibleAction(\n+        final AccessibleObject aObj, final boolean flag) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                aObj.setAccessible(flag);\n+                return (Object) null;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for Class.forName().\n+     * \n+     * Notes: doPriv of Class.forName call is required only if the input\n+     * classloader argument is null. E.g.\n+     * \n+     * Class.forName(\"x\", false, Collection.class.getClassLoader());\n+     * \n+     * Requires security policy: 'permission java.lang.RuntimePermission\n+     * \"getClassLoader\";'\n+     * \n+     * @return Classloader\n+     */\n+    public static final PrivilegedExceptionAction getForNameAction(\n+        final String className, final boolean initializeBoolean,\n+        final ClassLoader classLoader) {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws ClassNotFoundException {\n+                return Class.forName(className, initializeBoolean, classLoader);\n+            }\n+        };\n+    }\n+\n     /**\n      * Return a PrivilegeAction object for clazz.getClassloader().\n      * \n@@ -344,6 +410,22 @@ public Object run() {\n         };\n     }\n \n+    /**\n+     * Return a PrivilegeAction object for f.delete().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"delete\";'\n+     * \n+     * @return Boolean\n+     */\n+    public static final PrivilegedAction deleteAction(final File f) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return f.delete() ? Boolean.TRUE : Boolean.FALSE;\n+            }\n+        };\n+    }\n+\n     /**\n      * Return a PrivilegeAction object for f.exists().\n      * \n@@ -364,6 +446,22 @@ public Object run() {\n         };\n     }\n \n+    /**\n+     * Return a PrivilegeAction object for f.getAbsoluteFile().\n+     * \n+     * Requires security policy:\n+     *   'permission java.util.PropertyPermission \"read\";'\n+     * \n+     * @return File\n+     */\n+    public static final PrivilegedAction getAbsoluteFileAction(final File f) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return f.getAbsoluteFile();\n+            }\n+        };\n+    }\n+\n     /**\n      * Return a PrivilegeAction object for f.getAbsolutePath().\n      * \n@@ -398,6 +496,38 @@ public Object run() throws IOException {\n         };\n     }\n \n+    /**\n+     * Return a PrivilegeAction object for f.isDirectory().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"read\";'\n+     * \n+     * @return Boolean\n+     */\n+    public static final PrivilegedAction isDirectoryAction(final File f) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return f.isDirectory() ? Boolean.TRUE : Boolean.FALSE;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for f.isFile().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"read\";'\n+     * \n+     * @return Boolean\n+     */\n+    public static final PrivilegedAction isFileAction(final File f) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return f.isFile() ? Boolean.TRUE : Boolean.FALSE;\n+            }\n+        };\n+    }\n+\n     /**\n      * Return a PrivilegeAction object for f.length().\n      * \n@@ -414,6 +544,22 @@ public Object run() {\n         };\n     }\n \n+    /**\n+     * Return a PrivilegeAction object for f.listFiles().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"read\";'\n+     * \n+     * @return File[]\n+     */\n+    public static final PrivilegedAction listFilesAction(final File f) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return f.listFiles();\n+            }\n+        };\n+    }\n+\n     /**\n      * Return a PrivilegeAction object for f.mkdirs().\n      * \n@@ -501,6 +647,78 @@ public Object run() throws FileNotFoundException {\n         };\n     }\n \n+    /**\n+     * Return a PrivilegedExceptionAction object for InetAdress.getByName().\n+     * \n+     * Requires security policy:\n+     *   'permission java.net.SocketPermission \"connect\";'\n+     * \n+     * @return InetAddress\n+     * @throws UnknownHostException\n+     */\n+    public static final PrivilegedExceptionAction getByNameAction(\n+        final String hostname) throws UnknownHostException {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws UnknownHostException {\n+                return InetAddress.getByName(hostname);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegedExceptionAction object for new Socket().\n+     * \n+     * Requires security policy:\n+     *   'permission java.net.SocketPermission \"connect\";'\n+     * \n+     * @return Socket\n+     * @throws IOException\n+     */\n+    public static final PrivilegedExceptionAction newSocketAction(\n+        final InetAddress host, final int port) throws IOException {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws IOException {\n+                return new Socket(host, port);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegedExceptionAction object for new ServerSocket().\n+     * \n+     * Requires security policy:\n+     *   'permission java.net.SocketPermission \"listen\";'\n+     * \n+     * @return ServerSocket\n+     * @throws IOException\n+     */\n+    public static final PrivilegedExceptionAction newServerSocketAction(\n+        final int port) throws IOException {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws IOException {\n+                return new ServerSocket(port);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegedExceptionAction object for ServerSocket.accept().\n+     * \n+     * Requires security policy:\n+     *   'permission java.net.SocketPermission \"listen\";'\n+     * \n+     * @return Socket\n+     * @throws IOException\n+     */\n+    public static final PrivilegedExceptionAction acceptAction(\n+        final ServerSocket ss) throws IOException {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws IOException {\n+                return ss.accept();\n+            }\n+        };\n+    }\n+\n     /**\n      * Return a PrivilegeAction object for System.getProperties().\n      * \n@@ -586,6 +804,24 @@ public Object run() throws IOException {\n         };\n     }\n \n+    /**\n+     * Return a PrivilegedExceptionAction object for new ZipFile().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"read\";'\n+     * \n+     * @return ZipFile\n+     * @throws IOException\n+     */\n+    public static final PrivilegedExceptionAction newZipFileAction(final File f)\n+        throws IOException {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws IOException {\n+                return new ZipFile(f);\n+            }\n+        };\n+    }\n+\n     /**\n      * Return a PrivilegeAction object for new serp.bytecode.Code().\n      * \n@@ -601,4 +837,133 @@ public Object run() {\n             }\n         };\n     }\n+\n+    /**\n+     * Return a PrivilegeAction object for new TemporaryClassLoader().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"createClassLoader\";'\n+     *   \n+     * @return TemporaryClassLoader\n+     */\n+    public static final PrivilegedAction newTemporaryClassLoaderAction(\n+        final ClassLoader parent) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return new TemporaryClassLoader(parent);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for new MultiClassLoader().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"createClassLoader\";'\n+     *   \n+     * @return MultiClassLoader\n+     */\n+    public static final PrivilegedAction newMultiClassLoaderAction() {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return new MultiClassLoader();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for new BCClassLoader().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"createClassLoader\";'\n+     *   \n+     * @return BCClassLoader\n+     */\n+    public static final PrivilegedAction newBCClassLoaderAction(\n+        final Project project, final ClassLoader parent) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return new BCClassLoader(project, parent);\n+            }\n+        };\n+    }\n+\n+    public static final PrivilegedAction newBCClassLoaderAction(\n+        final Project project) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return new BCClassLoader(project);\n+            }\n+        };\n+    }\n+    \n+    /**\n+     * Return a PrivilegedExceptionAction object for BCClass.write().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"write\";'\n+     * \n+     * @return File\n+     * @throws IOException\n+     */\n+    public static final PrivilegedExceptionAction bCClassWrite(\n+        final BCClass bc, final File f) throws IOException {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws IOException {\n+                bc.write(f);\n+                return null;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for BCClass.getFields().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"getClassLoader\";'\n+     *   \n+     * @return BCField\n+     */\n+    public static final PrivilegedAction getBCClassFieldsAction(\n+        final BCClass bcClass, final String fieldName) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return bcClass.getFields(fieldName);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for FieldInstruction.getField().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"getClassLoader\";'\n+     *   \n+     * @return BCField\n+     */\n+    public static final PrivilegedAction getFieldInstructionFieldAction(\n+        final FieldInstruction instruction) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return instruction.getField();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for Project.loadClass().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"createClassLoader\";'\n+     *   \n+     * @return BCClass\n+     */\n+    public static final PrivilegedAction loadProjectClassAction(\n+        final Project project, final Class clazz) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return project.loadClass(clazz);\n+            }\n+        };\n+    }\n }"},{"sha":"006501efbcc323768062d1a2c79fcdd2ceb6d3f1","filename":"openjpa-persistence-jdbc/src/test/resources/j2.security.jse.policy","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-persistence-jdbc/src/test/resources/j2.security.jse.policy","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-persistence-jdbc/src/test/resources/j2.security.jse.policy","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/j2.security.jse.policy?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -0,0 +1,62 @@\n+// ================================================================\r\n+// Example JSE Java 2 security policy required by OpenJPA.\r\n+//\r\n+//   -Djava.security.manager -Djava.security.policy=C:\\j2.security.jse.policy\r\n+\r\n+// ----------------------------------------------------------------\r\n+// Application:  E.g.\r\n+//   -Dapplication=file:///C:/com/my/appl/classes\r\n+\r\n+grant CodeBase \"${application}/-\" {\r\n+\r\n+    // Allows Persistence.createEntityManagerFacotry() to read META-INF/*\r\n+    permission java.io.FilePermission   \"<<ALL FILES>>\", \"read\";\r\n+};\r\n+\r\n+// ----------------------------------------------------------------\r\n+// Derby:  E.g.\r\n+//   -Dderby.base=\"file:///C:\\.m2\\repository\\org\\apache\\derby\\derby\\10.2.2.0\r\n+\r\n+grant CodeBase \"${derby.base}/-\" {\r\n+\r\n+    permission java.io.FilePermission   \"<<ALL FILES>>\", \"read,write,delete\";\r\n+    permission java.lang.RuntimePermission               \"createClassLoader\";\r\n+    permission java.util.PropertyPermission         \"*\", \"read\";\r\n+};\r\n+\r\n+// ----------------------------------------------------------------\r\n+// DB2:  E.g.\r\n+//  -db2.base=file:///C:/sqllib/java\r\n+\r\n+grant CodeBase \"${db2.base}/-\" {\r\n+\r\n+    permission java.lang.RuntimePermission               \"loadLibrary.*\";\r\n+    permission java.util.PropertyPermission         \"*\", \"read\";\r\n+};\r\n+\r\n+\r\n+// ================================================================\r\n+// The following permissions are required by OpenJPA implementation.\r\n+\r\n+// ----------------------------------------------------------------\r\n+// Serp:  E.g.\r\n+//  -Dserp.base=\"file:///C:\\.m2\\repository\\net\\sourceforge\\serp\\serp\\1.11.0\"\r\n+\r\n+grant CodeBase \"${serp.base}/-\" {\r\n+\r\n+    permission java.io.FilePermission   \"<<ALL FILES>>\", \"read,write\";\r\n+    permission java.lang.RuntimePermission               \"createClassLoader\";\r\n+};\r\n+\r\n+// ----------------------------------------------------------------\r\n+// OpeJPA:  E.g.\r\n+//  -Dopenjpa.base=file:///C:\\openjpa.cur\\openjpa-all\\target\r\n+\r\n+grant CodeBase \"${openjpa.base}/-\" {\r\n+\r\n+    permission java.io.FilePermission   \"<<ALL FILES>>\", \"read,write\";\r\n+    permission java.lang.RuntimePermission               \"createClassLoader\";\r\n+    permission java.lang.reflect.ReflectPermission       \"suppressAccessChecks\";\r\n+    permission java.util.PropertyPermission         \"*\", \"read\";\r\n+};\r\n+\r"},{"sha":"400f021600e57195feb079c68847f07fdf68000c","filename":"openjpa-persistence-jdbc/src/test/resources/j2.security.test.policy","status":"modified","additions":0,"deletions":45,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-persistence-jdbc/src/test/resources/j2.security.test.policy","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-persistence-jdbc/src/test/resources/j2.security.test.policy","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/j2.security.test.policy?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -35,48 +35,3 @@ grant CodeBase \"file:///${user.home}/.m2/repository/-\" {\n     permission java.util.PropertyPermission     \"*\",                \"read,write\";\n };\n \n-\n-// ================================================================\n-// The following permissions are required by OpenJPA implementation.\n-grant CodeBase \"${application}/openjpa-1.0.0-SNAPSHOT.jar\" {\n-\n-    // class.getClassLoader()\n-    // thread.getContextClassLoader()\n-    // classloader.getParent()\n-    // classloader.getSystemClassLoader()\n-    // new serp.bytecode.Code()\n-    // serp.bytecode.BCClass.isInstanceOf()\n-    // class.newInstance()\n-    //\n-    permission java.lang.RuntimePermission                          \"getClassLoader\";\n-\n-    // urlConnection.getContext()\n-    // url.openStream()\n-    // classloader.getResource()\n-    // classloader.getResources()\n-    // new FileInputStream()\n-    // file.exists()\n-    //\n-    permission java.io.FilePermission           \"<<ALL FILES>>\",    \"read\";\n-\n-    // file.mkdirs()\n-    // file.renameTo()\n-    // new FileOutputStream()\n-    //\n-    permission java.io.FilePermission           \"<<ALL FILES>>\",    \"write\";\n-\n-    // class.getDeclaredField()\n-    // class.getDeclaredFields()\n-    // class.getDeclaredMethod()\n-    // class.getDeclaredMethods()\n-    //\n-    permission java.lang.RuntimePermission                          \"accessDeclaredMembers\";\n-\n-    // System.getProperty()\n-    // System.getPrperties()\n-    // File.getAbsolutePath()\n-    // File.getCanonicalPath()\n-    //\n-    permission java.util.PropertyPermission     \"*\",                \"read\";\n-};\n-"},{"sha":"f197bc051533a30dcee9de99c56d5f375d987d06","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataSerializer.java","status":"modified","additions":12,"deletions":4,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataSerializer.java?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence;\n \n import org.apache.openjpa.lib.meta.SourceTracker;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.JavaVersions;\n import org.apache.openjpa.lib.log.Log;\n@@ -29,6 +30,8 @@\n import org.apache.openjpa.util.InternalException;\n import org.apache.commons.lang.StringUtils;\n \n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n import java.util.*;\n import java.io.File;\n import java.io.IOException;\n@@ -1194,10 +1197,15 @@ public void serialize(Map output, int flags) throws IOException {\n     }\n \n     public void serialize(File file, int flags) throws IOException {\n-        FileWriter out = new FileWriter(file.getCanonicalPath(),\n-            (flags & APPEND) > 0);\n-        serialize(out, flags);\n-        out.close();\n+        try {\n+            FileWriter out = new FileWriter((String) AccessController\n+                .doPrivileged(J2DoPrivHelper.getCanonicalPathAction(file)),\n+                (flags & APPEND) > 0);\n+            serialize(out, flags);\n+            out.close();\n+        } catch (PrivilegedActionException pae) {\n+            throw (IOException) pae.getException();\n+        }\n     }\n \n     public void serialize(Writer out, int flags) throws IOException {"},{"sha":"630162b7e86ff7e53e83a352fb0e3ea9f08b4e84","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -204,7 +204,8 @@ public ConfigurationProvider loadGlobals(ClassLoader loader)\n         String[] prefixes = ProductDerivations.getConfigurationPrefixes();\n         String rsrc = null;\n         for (int i = 0; i < prefixes.length && StringUtils.isEmpty(rsrc); i++)\n-           rsrc = System.getProperty(prefixes[i] + \".properties\"); \n+           rsrc = (String) AccessController.doPrivileged(J2DoPrivHelper\n+                .getPropertyAction(prefixes[i] + \".properties\")); \n         boolean explicit = !StringUtils.isEmpty(rsrc);\n         String anchor = null;\n         int idx = (!explicit) ? -1 : rsrc.lastIndexOf('#');"},{"sha":"c7fefc05ba7af21bf3d2b272f2017267037e364a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","raw_url":"https://github.com/apache/openjpa/raw/5c9642d5f47c319d2279382c60141ebcb65cd3b0/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java?ref=5c9642d5f47c319d2279382c60141ebcb65cd3b0","patch":"@@ -93,9 +93,9 @@ public ClassLoader getClassLoader() {\n     }\n \n     public ClassLoader getNewTempClassLoader() {\n-        return new TemporaryClassLoader(\n-            (ClassLoader) AccessController.doPrivileged(\n-                J2DoPrivHelper.getContextClassLoaderAction()));\n+        return (ClassLoader) AccessController.doPrivileged(J2DoPrivHelper\n+            .newTemporaryClassLoaderAction((ClassLoader) AccessController\n+                .doPrivileged(J2DoPrivHelper.getContextClassLoaderAction())));\n     }\n \n     public String getPersistenceUnitName() {\n@@ -201,7 +201,8 @@ public void addJarFile(URL jar) {\n     }\n \n     public void addJarFileName(String name) {\n-        MultiClassLoader loader = new MultiClassLoader();\n+        MultiClassLoader loader = (MultiClassLoader) AccessController\n+            .doPrivileged(J2DoPrivHelper.newMultiClassLoaderAction());\n         loader.addClassLoader(getClass().getClassLoader());\n         loader.addClassLoader(MultiClassLoader.THREAD_LOADER);\n         URL url = (URL) AccessController.doPrivileged("}]}

