{"sha":"5cb14fe384cf59d2612817ec4c3f1c62e17dd611","node_id":"MDY6Q29tbWl0MjA2MzY0OjVjYjE0ZmUzODRjZjU5ZDI2MTI4MTdlYzRjM2YxYzYyZTE3ZGQ2MTE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-09T16:54:55Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-09T16:54:55Z"},"message":"OPENJPA-1053:: unwrap() query failure to throw correct exception and  set rollback\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920981 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cd88946cc994782b8a9b46f2c657c444b8e0576c","url":"https://api.github.com/repos/apache/openjpa/git/trees/cd88946cc994782b8a9b46f2c657c444b8e0576c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5cb14fe384cf59d2612817ec4c3f1c62e17dd611","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5cb14fe384cf59d2612817ec4c3f1c62e17dd611","html_url":"https://github.com/apache/openjpa/commit/5cb14fe384cf59d2612817ec4c3f1c62e17dd611","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5cb14fe384cf59d2612817ec4c3f1c62e17dd611/comments","author":null,"committer":null,"parents":[{"sha":"17652a870b6f082cbe7980fd50c57670aec397cf","url":"https://api.github.com/repos/apache/openjpa/commits/17652a870b6f082cbe7980fd50c57670aec397cf","html_url":"https://github.com/apache/openjpa/commit/17652a870b6f082cbe7980fd50c57670aec397cf"}],"stats":{"total":69,"additions":51,"deletions":18},"files":[{"sha":"268e62d005a76fd590b149a47b202daeb1a73801","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestUnwrap.java","status":"modified","additions":38,"deletions":5,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/5cb14fe384cf59d2612817ec4c3f1c62e17dd611/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestUnwrap.java","raw_url":"https://github.com/apache/openjpa/raw/5cb14fe384cf59d2612817ec4c3f1c62e17dd611/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestUnwrap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestUnwrap.java?ref=5cb14fe384cf59d2612817ec4c3f1c62e17dd611","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.persistence;\n \n+import java.util.Map;\n import java.util.Properties;\n \n import javax.persistence.EntityManager;\n@@ -70,24 +71,56 @@ public void testValidEntityManagerUnwrap() {\n     }\n     \n     /**\n-     * Tests a EntityManager can be unwrapped as an instance of a series of \n-     * class or interface. \n+     * Tests a EntityManager can not be unwrapped as Object class, null or an interface. \n+     * And each such failure raises a Persistence Exception and causes an active transaction\n+     * to rollback.\n      */\n     public void testInvalidEntityManagerUnwrap() {\n         EntityManager em = emf.createEntityManager();\n         \n         Class<?>[] invalidCasts = new Class[] {\n             Object.class,\n             Properties.class,\n+            Map.class, \n             null,\n         };\n         for (Class<?> c : invalidCasts) {\n             try {\n+                em.getTransaction().begin();\n                 em.unwrap(c);\n-                fail(\"Expected to fail to unwarp with \" + c);\n-            } catch (Exception e) {\n+                fail(\"Expected to fail to unwarp with invalid \" + c);\n+            } catch (PersistenceException e) {\n+                EntityTransaction txn = em.getTransaction();\n+                assertTrue(txn.getRollbackOnly());\n+                txn.rollback();\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Tests a Query can not be unwrapped as Object class, null or an interface. \n+     * And each such failure raises a Persistence Exception and causes an active transaction\n+     * to rollback.\n+     */\n+    public void testInvalidQueryUnwrap() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        \n+        Class<?>[] invalidCasts = new Class[] {\n+            Object.class,\n+            Properties.class,\n+            Map.class, \n+            null,\n+        };\n+        for (Class<?> c : invalidCasts) {\n+            try {\n+                em.getTransaction().begin();\n+                Query query = em.createQuery(QueryLanguages.LANG_SQL,\"\");\n+                query.unwrap(c);\n+                fail(\"Expected to fail to unwarp with invalid \" + c);\n+            } catch (PersistenceException e) {\n                 EntityTransaction txn = em.getTransaction();\n-                assertFalse(txn.isActive());\n+                assertTrue(txn.getRollbackOnly());\n+                txn.rollback();\n             }\n         }\n     }"},{"sha":"23baca6e4ebcba2a056a8d91691bcec1cd06e82f","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/5cb14fe384cf59d2612817ec4c3f1c62e17dd611/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/5cb14fe384cf59d2612817ec4c3f1c62e17dd611/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=5cb14fe384cf59d2612817ec4c3f1c62e17dd611","patch":"@@ -461,28 +461,28 @@ public boolean equals(Object other) {\n     }\n \n     /**\n-     * Returns the innermost implementation that is an instance of the given \n-     * class. \n+     * Unwraps this receiver to an instance of the given class, if possible.\n      * \n-     * @throws PersistenceException if none in the delegate chain is an \n-     * instance of the given class.\n+     * @exception if the given class is null, generic <code>Object.class</code> or a class\n+     * that is not wrapped by this receiver.  \n      * \n      * @since 2.0.0\n      */\n     public <T> T unwrap(Class<T> cls) {\n-        Object[] delegates = new Object[]{_query.getInnermostDelegate(), \n-            _query.getDelegate(), _query, this};\n-        if (cls == null || cls == Object.class) {\n-            throw new PersistenceException(_loc.get(\"unwrap-em-invalid\", cls)\n-                    .toString(), null, this, false);\n-        }\n+        Object[] delegates = new Object[]{_query.getInnermostDelegate(), _query.getDelegate(), _query, this};\n         for (Object o : delegates) {\n-            if (cls.isInstance(o))\n+            if (cls != null && cls != Object.class && cls.isInstance(o))\n                 return (T)o;\n         }\n-        throw new PersistenceException(_loc.get(\"unwrap-query-invalid\", cls)\n-            .toString(), null, this, false);\n+        // Set this transaction to rollback only (as per spec) here because the raised exception \n+        // does not go through normal exception translation pathways\n+        RuntimeException ex = new PersistenceException(_loc.get(\"unwrap-query-invalid\", cls).toString(), null, \n+                this, false);\n+        if (_em.isActive())\n+            _em.setRollbackOnly(ex);\n+        throw ex;\n     }\n+\n     \n     // =======================================================================\n     // Prepared Query Cache related methods"}]}

