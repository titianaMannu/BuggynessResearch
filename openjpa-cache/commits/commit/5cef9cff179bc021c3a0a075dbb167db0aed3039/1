{"sha":"5cef9cff179bc021c3a0a075dbb167db0aed3039","node_id":"MDY6Q29tbWl0MjA2MzY0OjVjZWY5Y2ZmMTc5YmMwMjFjM2EwYTA3NWRiYjE2N2RiMGFlZDMwMzk=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-08T19:40:10Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-08T19:40:10Z"},"message":"reduce performance cost of isCacheable().\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@897308 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4816def37f941c2dfb9559964e905652913149b3","url":"https://api.github.com/repos/apache/openjpa/git/trees/4816def37f941c2dfb9559964e905652913149b3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5cef9cff179bc021c3a0a075dbb167db0aed3039","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5cef9cff179bc021c3a0a075dbb167db0aed3039","html_url":"https://github.com/apache/openjpa/commit/5cef9cff179bc021c3a0a075dbb167db0aed3039","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5cef9cff179bc021c3a0a075dbb167db0aed3039/comments","author":null,"committer":null,"parents":[{"sha":"3065f2febb333b4680ccd5649ece87dc2592afa9","url":"https://api.github.com/repos/apache/openjpa/commits/3065f2febb333b4680ccd5649ece87dc2592afa9","html_url":"https://github.com/apache/openjpa/commit/3065f2febb333b4680ccd5649ece87dc2592afa9"}],"stats":{"total":23,"additions":10,"deletions":13},"files":[{"sha":"b7f3fe72c8c9ead8d12cfca1e61f56da1ee1256b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java","status":"modified","additions":10,"deletions":13,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/5cef9cff179bc021c3a0a075dbb167db0aed3039/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/5cef9cff179bc021c3a0a075dbb167db0aed3039/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java?ref=5cef9cff179bc021c3a0a075dbb167db0aed3039","patch":"@@ -160,19 +160,16 @@ public boolean isCachable(ClassMetaData meta) {\n      * @return TRUE or FALSE if  cache mode is configured. null otherwise.\n      */\n     private Boolean isCacheableByMode(ClassMetaData meta) { \n-        switch (DataCacheMode.valueOf(_conf.getDataCacheMode())) {\n-          case ALL: // include everything, regardless of annotation or xml configuration\n-              return true;\n-          case NONE: // exclude everything, regardless of annotation of xml configuration\n-              return false;\n-          case ENABLE_SELECTIVE: // cache only those entities which were explicitly enabled\n-              return Boolean.TRUE.equals(meta.getCacheEnabled());\n-          case DISABLE_SELECTIVE: // exclude *only* the entities which are explicitly excluded \n-              return !Boolean.FALSE.equals(meta.getCacheEnabled());\n-          case UNSPECIFIED:\n-          default: // not determinable by mode \n-              return null; \n-      }\n+        String mode = _conf.getDataCacheMode();\n+        if (DataCacheMode.ALL.toString().equalsIgnoreCase(mode))\n+            return true;\n+        if (DataCacheMode.NONE.toString().equalsIgnoreCase(mode))\n+            return false;\n+        if (DataCacheMode.ENABLE_SELECTIVE.toString().equalsIgnoreCase(mode))\n+            return Boolean.TRUE.equals(meta.getCacheEnabled());\n+        if (DataCacheMode.DISABLE_SELECTIVE.toString().equalsIgnoreCase(mode))\n+            return !Boolean.FALSE.equals(meta.getCacheEnabled());\n+        return null;\n     }\n     \n     /**"}]}

