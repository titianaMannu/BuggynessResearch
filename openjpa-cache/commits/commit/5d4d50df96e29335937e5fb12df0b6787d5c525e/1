{"sha":"5d4d50df96e29335937e5fb12df0b6787d5c525e","node_id":"MDY6Q29tbWl0MjA2MzY0OjVkNGQ1MGRmOTZlMjkzMzU5MzdlNWZiMTJkZjBiNjc4N2Q1YzUyNWU=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2007-09-21T03:32:14Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2007-09-21T03:32:14Z"},"message":"OPENJPA-378 DB2 \"FETCH FIRST <n> ROWS ONLY\" clause should not be generated in subselect for SELECT COUNT(*) from (subselect ...) s\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@577973 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7b36cfb18b1d4a8e00d243642da9cac8917d193c","url":"https://api.github.com/repos/apache/openjpa/git/trees/7b36cfb18b1d4a8e00d243642da9cac8917d193c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5d4d50df96e29335937e5fb12df0b6787d5c525e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5d4d50df96e29335937e5fb12df0b6787d5c525e","html_url":"https://github.com/apache/openjpa/commit/5d4d50df96e29335937e5fb12df0b6787d5c525e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5d4d50df96e29335937e5fb12df0b6787d5c525e/comments","author":null,"committer":null,"parents":[{"sha":"cea8ab57d16578c0a087b642ae3b9a88780148cf","url":"https://api.github.com/repos/apache/openjpa/commits/cea8ab57d16578c0a087b642ae3b9a88780148cf","html_url":"https://github.com/apache/openjpa/commit/cea8ab57d16578c0a087b642ae3b9a88780148cf"}],"stats":{"total":46,"additions":37,"deletions":9},"files":[{"sha":"f8225eec6949268a1f8f4010718ed035f10bdd6c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/5d4d50df96e29335937e5fb12df0b6787d5c525e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/5d4d50df96e29335937e5fb12df0b6787d5c525e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=5d4d50df96e29335937e5fb12df0b6787d5c525e","patch":"@@ -148,11 +148,14 @@ public boolean supportsRandomAccessResultSet(Select sel,\n             && super.supportsRandomAccessResultSet(sel, forUpdate);\r\n     }\r\n \r\n-    protected void appendSelectRange(SQLBuffer buf, long start, long end) {\r\n+    protected void appendSelectRange(SQLBuffer buf, long start, long end,\r\n+        boolean subselect) {\r\n         // appends the literal range string, since DB2 is unable to handle\r\n         // a bound parameter for it\r\n-        buf.append(\" FETCH FIRST \").append(Long.toString(end)).\r\n-            append(\" ROWS ONLY\");\r\n+        // do not generate FETCH FIRST clause for subselect\r\n+        if (!subselect)\r\n+            buf.append(\" FETCH FIRST \").append(Long.toString(end)).\r\n+                append(\" ROWS ONLY\");\r\n     }\r\n \r\n     protected void appendSelect(SQLBuffer selectSQL, Object alias, Select sel,\r"},{"sha":"70adc530554e6f7d7c681cfb0eac716562275ee2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":31,"deletions":6,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/5d4d50df96e29335937e5fb12df0b6787d5c525e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/5d4d50df96e29335937e5fb12df0b6787d5c525e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=5d4d50df96e29335937e5fb12df0b6787d5c525e","patch":"@@ -1742,7 +1742,7 @@ public SQLBuffer toSelectCount(Select sel) {\n         from.append(\"(\");\n         from.append(toSelect(subSelect, null, subFrom, where,\n             sel.getGrouping(), sel.getHaving(), null, sel.isDistinct(),\n-            false, sel.getStartIndex(), sel.getEndIndex()));\n+            false, sel.getStartIndex(), sel.getEndIndex(), true));\n         from.append(\")\");\n         if (requiresAliasForSubselect)\n             from.append(\" \").append(Select.FROM_SELECT_ALIAS);\n@@ -2189,6 +2189,19 @@ public SQLBuffer toSelect(SQLBuffer selects, JDBCFetchConfiguration fetch,\n             getForUpdateClause(fetch, forUpdate, null));\n     }\n \n+    /**\n+     * Combine the given components into a SELECT statement.\n+     */\n+    private SQLBuffer toSelect(SQLBuffer selects, JDBCFetchConfiguration fetch,\n+        SQLBuffer from, SQLBuffer where, SQLBuffer group,\n+        SQLBuffer having, SQLBuffer order,\n+        boolean distinct, boolean forUpdate, long start, long end,\n+        boolean subselect) {\n+        return toOperation(getSelectOperation(fetch), selects, from, where,\n+            group, having, order, distinct, start, end,\n+            getForUpdateClause(fetch, forUpdate, null), subselect);\n+    }\n+\n     /**\n      * Combine the given components into a SELECT statement.\n      */\n@@ -2233,16 +2246,27 @@ protected SQLBuffer toOperation(String op, SQLBuffer selects,\n         SQLBuffer from, SQLBuffer where, SQLBuffer group, SQLBuffer having,\n         SQLBuffer order, boolean distinct, long start, long end,\n         String forUpdateClause) {\n+        return toOperation(op, selects, from, where, group, having, order,\n+            distinct, start, end, forUpdateClause, false);\n+    }\n+\n+    /**\n+     * Return the SQL for the given selecting operation.\n+     */\n+    private SQLBuffer toOperation(String op, SQLBuffer selects,\n+        SQLBuffer from, SQLBuffer where, SQLBuffer group, SQLBuffer having,\n+        SQLBuffer order, boolean distinct, long start, long end,\n+        String forUpdateClause, boolean subselect) {\n         SQLBuffer buf = new SQLBuffer(this);\n         buf.append(op);\n \n         boolean range = start != 0 || end != Long.MAX_VALUE;\n         if (range && rangePosition == RANGE_PRE_DISTINCT)\n-            appendSelectRange(buf, start, end);\n+            appendSelectRange(buf, start, end, subselect);\n         if (distinct)\n             buf.append(\" DISTINCT\");\n         if (range && rangePosition == RANGE_POST_DISTINCT)\n-            appendSelectRange(buf, start, end);\n+            appendSelectRange(buf, start, end, subselect);\n \n         buf.append(\" \").append(selects).append(\" FROM \").append(from);\n \n@@ -2257,19 +2281,20 @@ protected SQLBuffer toOperation(String op, SQLBuffer selects,\n         if (order != null && !order.isEmpty())\n             buf.append(\" ORDER BY \").append(order);\n         if (range && rangePosition == RANGE_POST_SELECT)\n-            appendSelectRange(buf, start, end);\n+            appendSelectRange(buf, start, end, subselect);\n         if (forUpdateClause != null)\n             buf.append(\" \").append(forUpdateClause);\n         if (range && rangePosition == RANGE_POST_LOCK)\n-            appendSelectRange(buf, start, end);\n+            appendSelectRange(buf, start, end, subselect);\n         return buf;\n     }\n \n     /**\n      * If this dictionary can select ranges,\n      * use this method to append the range SQL.\n      */\n-    protected void appendSelectRange(SQLBuffer buf, long start, long end) {\n+    protected void appendSelectRange(SQLBuffer buf, long start, long end\n+        , boolean subselect) {\n     }\n \n     /**"}]}

