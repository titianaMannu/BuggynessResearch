{"sha":"5d9f08e72877b208dad9135afec8b630ce41f81d","node_id":"MDY6Q29tbWl0MjA2MzY0OjVkOWYwOGU3Mjg3N2IyMDhkYWQ5MTM1YWZlYzhiNjMwY2U0MWY4MWQ=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-12-18T23:24:23Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-12-18T23:24:23Z"},"message":"OPENJPA-1432: preserve Compatibility flags set in compliance with the Specification.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@892397 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bc985b4a6f9d6117af506e62c0d6676ab27ed6ac","url":"https://api.github.com/repos/apache/openjpa/git/trees/bc985b4a6f9d6117af506e62c0d6676ab27ed6ac"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5d9f08e72877b208dad9135afec8b630ce41f81d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5d9f08e72877b208dad9135afec8b630ce41f81d","html_url":"https://github.com/apache/openjpa/commit/5d9f08e72877b208dad9135afec8b630ce41f81d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5d9f08e72877b208dad9135afec8b630ce41f81d/comments","author":null,"committer":null,"parents":[{"sha":"9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421","url":"https://api.github.com/repos/apache/openjpa/commits/9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421","html_url":"https://github.com/apache/openjpa/commit/9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421"}],"stats":{"total":67,"additions":63,"deletions":4},"files":[{"sha":"27ba63302b41c4be14c2416b70146f827d0f8ab7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":14,"deletions":2,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/5d9f08e72877b208dad9135afec8b630ce41f81d/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/5d9f08e72877b208dad9135afec8b630ce41f81d/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=5d9f08e72877b208dad9135afec8b630ce41f81d","patch":"@@ -1477,9 +1477,21 @@ public void setCompatibility(String compatibility) {\n         compatibilityPlugin.setString(compatibility);\n     }\n \n+    /**\n+     * If a Compatibility instance is associated with the Specification, \n+     * we will configure this Compatibility instance instead of instantiating a \n+     * new one so that the compatibility flags set in compliance with the \n+     * Specification can be preserved.\n+     */\n     public Compatibility getCompatibilityInstance() {\n-        if (compatibilityPlugin.get() == null)\n-            compatibilityPlugin.instantiate(Compatibility.class, this);\n+        if (compatibilityPlugin.get() == null) {\n+            Specification spec = getSpecificationInstance();\n+            Compatibility comp = spec != null ? spec.getCompatibility() : null;\n+            if (comp == null)\n+                compatibilityPlugin.instantiate(Compatibility.class, this);\n+            else \n+                compatibilityPlugin.configure(comp, this);\n+        }\n         return (Compatibility) compatibilityPlugin.get();\n     }\n     "},{"sha":"b3dfde43d63d5d8b2e8e512004d694ed5ad55f65","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Specification.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/5d9f08e72877b208dad9135afec8b630ce41f81d/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Specification.java","raw_url":"https://github.com/apache/openjpa/raw/5d9f08e72877b208dad9135afec8b630ce41f81d/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Specification.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Specification.java?ref=5d9f08e72877b208dad9135afec8b630ce41f81d","patch":"@@ -40,6 +40,7 @@\n     private int    _major = 1;\n     private String _minor = \"0\";\n     private String _description = \"\";\n+    private Compatibility _compatibility;\n \n     private static Localizer _loc = Localizer.forPackage(Specification.class);\n     \n@@ -144,4 +145,21 @@ public String toString() {\n         return new Object[] {name, \n             version.substring(0,dot), version.substring(dot+1)};\n     }\n+    \n+    /**\n+     * Associate a compatibility object with this Specification instance\n+     * @param compatibility a Compatibility object with flags set in compliance\n+     * with this Specification instance.\n+     */\n+    public void setCompatibility(Compatibility compatibility) {\n+        _compatibility = compatibility;\n+    }\n+    \n+    /**\n+     * Return the compatibility object associated with this Specification instance.\n+     * @return\n+     */\n+    public Compatibility getCompatibility() {\n+        return _compatibility;\n+    }\n }"},{"sha":"eba5098ecc7e8e1abb7eae3cb6a1e6a195b9f45f","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/5d9f08e72877b208dad9135afec8b630ce41f81d/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java","raw_url":"https://github.com/apache/openjpa/raw/5d9f08e72877b208dad9135afec8b630ce41f81d/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java?ref=5d9f08e72877b208dad9135afec8b630ce41f81d","patch":"@@ -91,6 +91,20 @@ public Object instantiate(Class<?> type, Configuration conf, boolean fatal)\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * Configure the given object.\n+     */\n+    public Object configure(Object obj, Configuration conf) {\n+        return configure(obj, conf, true);\n+    }\n+\n+    /**\n+     * Configure the given object.\n+     */\n+    public Object configure(Object obj, Configuration conf, boolean fatal) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n     /**\n      * Allow subclasses to instantiate additional plugins. This method does\n      * not perform configuration."},{"sha":"10d68d4f7680ef2d1094c24b8e299279e004d06e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginValue.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/5d9f08e72877b208dad9135afec8b630ce41f81d/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginValue.java","raw_url":"https://github.com/apache/openjpa/raw/5d9f08e72877b208dad9135afec8b630ce41f81d/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginValue.java?ref=5d9f08e72877b208dad9135afec8b630ce41f81d","patch":"@@ -108,6 +108,18 @@ public Object instantiate(Class<?> type, Configuration conf, boolean fatal)\n         return obj;\n     }\n \n+    /**\n+     * Configure the given object.\n+     */\n+    public Object configure(Object obj, Configuration conf, boolean fatal) {\n+        Configurations.configureInstance(obj, conf, _props,\n+            (fatal) ? getProperty() : null);\n+        if (_singleton)\n+            set(obj, true);\n+        return obj;\n+    }\n+    \n+\n     public void set(Object obj, boolean derived) {\n         if (!_singleton)\n             throw new IllegalStateException(_loc.get(\"not-singleton\","},{"sha":"9436dc78ecfc7ca2391c6685029c9c3311189632","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/5d9f08e72877b208dad9135afec8b630ce41f81d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","raw_url":"https://github.com/apache/openjpa/raw/5d9f08e72877b208dad9135afec8b630ce41f81d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java?ref=5d9f08e72877b208dad9135afec8b630ce41f81d","patch":"@@ -861,6 +861,7 @@ private OpenJPAEntityManagerFactorySPI createEMF2_0(List<Class<?>> types) {\n                 });\n         map.put(\"openjpa.jdbc.SynchronizeMappings\", \n             \"buildSchema(ForeignKeys=true,SchemaAction='drop,add')\");\n+        map.put(\"openjpa.Compatibility\", \"StrictIdentityValues=true\");\n \n         StringBuffer buf = new StringBuffer();\n         for (Class<?> c : types) {"},{"sha":"886af2d77c4698a1b5ee2319294dffd40007c2f5","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/5d9f08e72877b208dad9135afec8b630ce41f81d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/5d9f08e72877b208dad9135afec8b630ce41f81d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java?ref=5d9f08e72877b208dad9135afec8b630ce41f81d","patch":"@@ -218,10 +218,12 @@ public boolean afterSpecificationSet(Configuration c) {\n         conf.lockManagerPlugin.setString(\"mixed\");\n         conf.nontransactionalWrite.setDefault(\"true\");\n         conf.nontransactionalWrite.set(true);\n-        int specVersion = ((OpenJPAConfiguration) c).getSpecificationInstance().getVersion();\n+        Specification spec = ((OpenJPAConfiguration) c).getSpecificationInstance();\n+        int specVersion = spec.getVersion();\n         Compatibility compatibility = conf.getCompatibilityInstance();\n+        spec.setCompatibility(compatibility);\n         if (specVersion < 2) {\n-             compatibility.setFlushBeforeDetach(true);\n+            compatibility.setFlushBeforeDetach(true);\n             compatibility.setCopyOnDetach(true);\n             compatibility.setPrivatePersistentProperties(true);\n             // Disable bean validation for spec level < 2 configurations"}]}

