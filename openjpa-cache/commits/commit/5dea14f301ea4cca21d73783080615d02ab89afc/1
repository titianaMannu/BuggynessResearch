{"sha":"5dea14f301ea4cca21d73783080615d02ab89afc","node_id":"MDY6Q29tbWl0MjA2MzY0OjVkZWExNGYzMDFlYTRjY2EyMWQ3Mzc4MzA4MDYxNWQwMmFiODlhZmM=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2006-09-23T00:04:51Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2006-09-23T00:04:51Z"},"message":"Use the escape character to escape out wildcard characters from the source string.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@449130 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ac1c7a45190f3cf97b5738546be63f06b5568603","url":"https://api.github.com/repos/apache/openjpa/git/trees/ac1c7a45190f3cf97b5738546be63f06b5568603"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5dea14f301ea4cca21d73783080615d02ab89afc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5dea14f301ea4cca21d73783080615d02ab89afc","html_url":"https://github.com/apache/openjpa/commit/5dea14f301ea4cca21d73783080615d02ab89afc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5dea14f301ea4cca21d73783080615d02ab89afc/comments","author":null,"committer":null,"parents":[{"sha":"b7f2721aff3d9b22e02f1bbc2aec49de0612c5d6","url":"https://api.github.com/repos/apache/openjpa/commits/b7f2721aff3d9b22e02f1bbc2aec49de0612c5d6","html_url":"https://github.com/apache/openjpa/commit/b7f2721aff3d9b22e02f1bbc2aec49de0612c5d6"}],"stats":{"total":41,"additions":39,"deletions":2},"files":[{"sha":"7313a1179f518898aaa209bc9f731014f3cffa79","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MatchesExpression.java","status":"modified","additions":39,"deletions":2,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/5dea14f301ea4cca21d73783080615d02ab89afc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MatchesExpression.java","raw_url":"https://github.com/apache/openjpa/raw/5dea14f301ea4cca21d73783080615d02ab89afc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MatchesExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MatchesExpression.java?ref=5dea14f301ea4cca21d73783080615d02ab89afc","patch":"@@ -95,8 +95,12 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n             // create a DB wildcard string by replacing the\n             // multi token (e.g., '.*') and the single token (e.g., \".\")\n             // with '%' and '.' with '_'\n-            str = Strings.replace(str, _multi, \"%\");\n-            str = Strings.replace(str, _single, \"_\");\n+            String[] parts;\n+            StringBuffer repbuf;\n+\n+            str = replaceEscape(str, _multi, \"%\", _escape);\n+            str = replaceEscape(str, _single, \"_\", _escape);\n+\n             buf.append(\" LIKE \").appendValue(str, col);\n \n             // escape out characters by using the database's escape sequence\n@@ -106,6 +110,39 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         sel.append(buf, state.joins);\n     }\n \n+    /** \n+     * Perform a string replacement with simplistic escape handing. \n+     *  \n+     * @param  str      the source string\n+     * @param  from     the string to find\n+     * @param  to       the string to replace\n+     * @param  escape   the string to use to escape replacement\n+     * @return          the replaced string\n+     */\n+    private static String replaceEscape(String str, String from, String to,\n+        String escape) {\n+        String[] parts = Strings.split(str, from, Integer.MAX_VALUE);\n+        StringBuffer repbuf = new StringBuffer();\n+        for (int i = 0; parts != null && i < parts.length; i++) {\n+            if (i > 0) {\n+                // if the previous part ended with an escape character, then\n+                // escape the character and remove the previous escape;\n+                // this doesn't support any double-escaping or other more\n+                // sophisticated features\n+                if (parts[i - 1].endsWith(escape)) {\n+                    repbuf.setLength(repbuf.length() - 1);\n+                    repbuf.append(from);\n+                }\n+                else {\n+                    repbuf.append(to);\n+                }\n+            }\n+            repbuf.append(parts[i]);\n+        }\n+\n+        return repbuf.toString();\n+    }\n+\n     public void selectColumns(Select sel, ExpContext ctx, ExpState state, \n         boolean pks) {\n         BinaryOpExpState bstate = (BinaryOpExpState) state;"}]}

