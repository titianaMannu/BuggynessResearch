{"sha":"5e73ca14edc6d37a2ebff56cf0cb30c763fa6774","node_id":"MDY6Q29tbWl0MjA2MzY0OjVlNzNjYTE0ZWRjNmQzN2EyZWJmZjU2Y2YwY2IzMGM3NjNmYTY3NzQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-29T00:22:27Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-29T00:22:27Z"},"message":"Consolidate property key-value processings for javax.persistence.* keys. They have been accumulating in OpenJPAConf and now moving to where they belong i.e. PersistenceProductDerivation. The value processing from String/integer/enums for these properties  have also been spread across many places and now being localized.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@830806 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1472e35984d13fd7013fc607e18b8ca2d17db9ad","url":"https://api.github.com/repos/apache/openjpa/git/trees/1472e35984d13fd7013fc607e18b8ca2d17db9ad"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5e73ca14edc6d37a2ebff56cf0cb30c763fa6774","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5e73ca14edc6d37a2ebff56cf0cb30c763fa6774","html_url":"https://github.com/apache/openjpa/commit/5e73ca14edc6d37a2ebff56cf0cb30c763fa6774","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5e73ca14edc6d37a2ebff56cf0cb30c763fa6774/comments","author":null,"committer":null,"parents":[{"sha":"28dafc7affc77ab41b0788f5795834bb5907b8f0","url":"https://api.github.com/repos/apache/openjpa/commits/28dafc7affc77ab41b0788f5795834bb5907b8f0","html_url":"https://github.com/apache/openjpa/commit/28dafc7affc77ab41b0788f5795834bb5907b8f0"}],"stats":{"total":319,"additions":171,"deletions":148},"files":[{"sha":"4abb0ec50158a8d89501caa8ec1d472ccf816376","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":1,"deletions":33,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/5e73ca14edc6d37a2ebff56cf0cb30c763fa6774/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/5e73ca14edc6d37a2ebff56cf0cb30c763fa6774/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=5e73ca14edc6d37a2ebff56cf0cb30c763fa6774","patch":"@@ -552,36 +552,7 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         queryTimeout = addInt(\"javax.persistence.query.timeout\");\n         queryTimeout.setDefault(\"-1\");\n         queryTimeout.setDynamic(true);\n-\n-        // kernel can't access javax.persistence.ValidationMode enums here\n-        // so the config will be done in PersistenceProductDerivation\n-        validationMode = addString(\"javax.persistence.validation.mode\");\n-        validationMode.setDynamic(true);\n-\n-        String defValidationGroup = \"javax.validation.groups.Default\";\n-        validationGroupPrePersist = addString(\"javax.persistence.validation.group.pre-persist\");\n-        validationGroupPrePersist.setString(defValidationGroup);\n-        validationGroupPrePersist.setDefault(\"\");\n-        validationGroupPrePersist.setDynamic(true);\n-\n-        validationGroupPreUpdate = addString(\"javax.persistence.validation.group.pre-update\");\n-        validationGroupPreUpdate.setString(defValidationGroup);\n-        validationGroupPreUpdate.setDefault(\"\");\n-        validationGroupPreUpdate.setDynamic(true);\n-\n-        validationGroupPreRemove = addString(\"javax.persistence.validation.group.pre-remove\");\n-        validationGroupPreRemove.setDefault(\"\");\n-        validationGroupPreRemove.setDynamic(true);\n-\n-        validationFactory = addObject(\"javax.persistence.validation.factory\");\n-        validationFactory.setInstantiatingGetter(\"getValidationFactoryInstance\");\n-        validationFactory.setDynamic(true);\n-\n-        validator = addObject(\"Validator\");\n-        validator.setInstantiatingGetter(\"getValidatorInstance\");\n-        validator.setDynamic(true);\n-        validator.makePrivate();\n-        \n+      \n         lifecycleEventManager = addPlugin(\"LifecycleEventManager\", true);\n         aliases = new String[] {\n             \"default\", LifecycleEventManager.class.getName(),\n@@ -638,9 +609,6 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         writeBehindCallbackPlugin.setDefault(aliases[0]);\n         writeBehindCallbackPlugin.setString(aliases[0]);\n         \n-        dataCacheMode = addString(DataCacheMode.class.getSimpleName());\n-        dataCacheMode.setDefault(DataCacheMode.UNSPECIFIED.toString());\n-        dataCacheMode.set(DataCacheMode.UNSPECIFIED.toString());\n \n         if (derivations)\n             ProductDerivations.beforeConfigurationLoad(this);"},{"sha":"61e5ffddc3bfc424fc03a7d9c8465df063c896b6","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringValue.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/5e73ca14edc6d37a2ebff56cf0cb30c763fa6774/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringValue.java","raw_url":"https://github.com/apache/openjpa/raw/5e73ca14edc6d37a2ebff56cf0cb30c763fa6774/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/StringValue.java?ref=5e73ca14edc6d37a2ebff56cf0cb30c763fa6774","patch":"@@ -62,9 +62,13 @@ protected String getInternalString() {\n     protected void setInternalString(String val) {\n         set(val);\n     }\n-\n+    \n     protected void setInternalObject(Object obj) {\n-        set((String) obj);\n+        if (obj instanceof String) {\n+            set((String) obj);\n+        } else {\n+            set(obj == null ? null : obj.toString());\n+        }\n     }\n }\n "},{"sha":"49f511b90ddb07fa48014c0ee8671cadf57802ea","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAProperties.java","status":"modified","additions":59,"deletions":17,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/5e73ca14edc6d37a2ebff56cf0cb30c763fa6774/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAProperties.java","raw_url":"https://github.com/apache/openjpa/raw/5e73ca14edc6d37a2ebff56cf0cb30c763fa6774/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAProperties.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAProperties.java?ref=5e73ca14edc6d37a2ebff56cf0cb30c763fa6774","patch":"@@ -30,24 +30,54 @@\n /**\n  * Enumerates configuration property keys defined in JPA 2.0 Specification.\n  * <br>\n- * Provides static utility functions to read their values from supplied\n- * map of properties.\n+ * Provides static utility functions to read their values from supplied map of properties.\n  * <br>\n- * Provides static utility functions to convert them to values that are\n- * fit for consumption by OpenJPA implementation.  \n+ * Provides static utility functions to convert them to values that are fit for OpenJPA implementation.  \n  * <br>\n  * @author Pinaki Poddar\n  * @since 2.0.0\n  *\n  */\n public class JPAProperties {\n-    public static final String DOT                 = \"\\\\.\";\n+    private static final String REGEX_DOT           = \"\\\\.\";\n     public static final String PREFIX              = \"javax.persistence.\";\n-    public static final String LOCK_TIMEOUT        = PREFIX + \"lock.timeout\";\n-    public static final String QUERY_TIMEOUT       = PREFIX + \"query.timeout\";\n-    public static final String CACHE_STORE_MODE    = PREFIX + \"cache.storeMode\";\n-    public static final String CACHE_RETRIEVE_MODE = PREFIX + \"cache.retrieveMode\";\n     \n+    public static final String PROVIDER            = PREFIX + \"provider\";\n+    public static final String TRANSACTION_TYPE    = PREFIX + \"transactionType\";\n+    \n+    public static final String DATASOURCE          = PREFIX + \"dataSource\";\n+    public static final String DATASOURCE_JTA      = PREFIX + \"jtaDataSource\";\n+    public static final String DATASOURCE_NONJTA   = PREFIX + \"nonJtaDataSource\";\n+    \n+    public static final String JDBC_DRIVER          = PREFIX + \"jdbc.driver\";\n+    public static final String JDBC_URL             = PREFIX + \"jdbc.url\";\n+    public static final String JDBC_USER            = PREFIX + \"jdbc.user\";\n+    public static final String JDBC_PASSWORD        = PREFIX + \"jdbc.password\";\n+    \n+    public static final String LOCK_SCOPE           = PREFIX + \"lock.scope\";\n+    public static final String LOCK_TIMEOUT         = PREFIX + \"lock.timeout\";\n+    \n+    public static final String QUERY_TIMEOUT        = PREFIX + \"query.timeout\";\n+    \n+    public static final String CACHE_MODE           = PREFIX + \"sharedCache.mode\";\n+    public static final String CACHE_STORE_MODE     = PREFIX + \"cache.storeMode\";\n+    public static final String CACHE_RETRIEVE_MODE  = PREFIX + \"cache.retrieveMode\";\n+    \n+    public static final String VALIDATE_FACTORY     = PREFIX + \"validation.factory\";\n+    public static final String VALIDATE_MODE        = PREFIX + \"validation.mode\";\n+    public static final String VALIDATE_PRE_PERSIST = PREFIX + \"validation.group.pre-persist\";\n+    public static final String VALIDATE_PRE_REMOVE  = PREFIX + \"validation.group.pre-remove\";\n+    public static final String VALIDATE_PRE_UPDATE  = PREFIX + \"validation.group.pre-update\";\n+    \n+    public static final String VALIDATE_GROUP_DEFAULT = \"javax.validation.groups.Default\";\n+    \n+    /**\n+     * Is the given key appears to be a valid JPA specification defined key?\n+     * \n+     * @param key\n+     * @return true if the given string merely prefixed with <code>javax.persistence.</code>.\n+     * Does not really check all the keys defined in the specification.\n+     */\n     public static boolean isValidKey(String key) {\n         return key != null && key.startsWith(PREFIX);\n     }\n@@ -58,13 +88,13 @@ public static boolean isValidKey(String key) {\n      * \n      * @param key must begin with JPA property prefix <code>javax.persistence</code>\n      * \n-     * @return null if the key is not a valid JPA property.\n-     * Otherwise, concatenates each part of the string. Part of string is what appears between DOT character.\n+     * @return concatenates each part of the string leaving out <code>javax.persistence.</code> prefix. \n+     * Part of string is what appears between DOT character.\n      */\n     public static String getBeanProperty(String key) {\n         if (!isValidKey(key))\n             throw new IllegalArgumentException(\"Invalid JPA property \" + key);\n-        String[] parts = key.split(DOT);\n+        String[] parts = key.split(REGEX_DOT);\n         StringBuilder buf = new StringBuilder();\n         for (int i = 2; i < parts.length; i++) {\n             buf.append(StringUtils.capitalize(parts[i]));\n@@ -73,15 +103,15 @@ public static String getBeanProperty(String key) {\n     }\n     \n     public static CacheRetrieveMode getCacheRetrieveMode(Map<String,Object> props) {\n-        return get(CacheRetrieveMode.class, CacheRetrieveMode.values(), CACHE_RETRIEVE_MODE, props);\n+        return getEnumValue(CacheRetrieveMode.class, CacheRetrieveMode.values(), CACHE_RETRIEVE_MODE, props);\n     }\n     \n     static CacheStoreMode getCacheStoreMode(Map<String,Object> props) {\n-        return get(CacheStoreMode.class, CacheStoreMode.values(), CACHE_STORE_MODE, props);\n+        return getEnumValue(CacheStoreMode.class, CacheStoreMode.values(), CACHE_STORE_MODE, props);\n     }\n     \n     static <E extends Enum<E>> E get(Class<E> type, String key, Map<String,Object> prop) {\n-        return get(type, null, key, prop);\n+        return getEnumValue(type, null, key, prop);\n     }\n     \n     /**\n@@ -102,6 +132,11 @@ public static Object convertValue(String key, Object value) {\n         return value;\n     }\n     \n+    \n+    public static <E extends Enum<E>> E getEnumValue(Class<E> type, String key, Map<String,Object> prop) {\n+        return getEnumValue(type, null, key, prop);\n+    }\n+    \n     /**\n      * Gets a enum value of the given type from the given properties looking up with the given key.\n      * Converts the original value from a String or ordinal number, if necessary.\n@@ -110,10 +145,17 @@ public static Object convertValue(String key, Object value) {\n      * \n      * @return null if the key does not exist in the given properties.\n      */\n-    static <E extends Enum<E>> E get(Class<E> type, E[] values, String key, Map<String,Object> prop) {\n+    public static <E extends Enum<E>> E getEnumValue(Class<E> type, E[] values, String key, Map<String,Object> prop) {\n         if (prop == null)\n             return null;\n-        Object val = prop.get(key);\n+        return getEnumValue(type, values, key, prop.get(key));\n+    }\n+    \n+    public static <E extends Enum<E>> E  getEnumValue(Class<E> type, String key, Object val) {\n+        return getEnumValue(type, null, key, val);\n+    }\n+    \n+    public static <E extends Enum<E>> E  getEnumValue(Class<E> type, E[] values, String key, Object val) {\n         if (val == null)\n             return null;\n         if (type.isInstance(val))"},{"sha":"27a5e9e3f49d2693ecb89a6c1576553fb45f1ad1","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","status":"modified","additions":61,"deletions":18,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/5e73ca14edc6d37a2ebff56cf0cb30c763fa6774/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/5e73ca14edc6d37a2ebff56cf0cb30c763fa6774/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java?ref=5e73ca14edc6d37a2ebff56cf0cb30c763fa6774","patch":"@@ -37,6 +37,7 @@\n \n import javax.persistence.spi.PersistenceUnitInfo;\n import javax.persistence.spi.PersistenceUnitTransactionType;\n+import javax.persistence.SharedCacheMode;\n import javax.persistence.ValidationMode;\n \n import org.apache.commons.lang.StringUtils;\n@@ -45,6 +46,7 @@\n import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n import org.apache.openjpa.conf.OpenJPAProductDerivation;\n import org.apache.openjpa.conf.Specification;\n+import org.apache.openjpa.datacache.DataCacheMode;\n import org.apache.openjpa.kernel.MixedLockLevels;\n import org.apache.openjpa.lib.conf.AbstractProductDerivation;\n import org.apache.openjpa.lib.conf.Configuration;\n@@ -60,6 +62,7 @@\n import org.xml.sax.Attributes;\n import org.xml.sax.SAXException;\n \n+\n /**\n  * Sets JPA specification defaults and parses JPA specification XML files.\n  * \n@@ -116,15 +119,12 @@ public boolean beforeConfigurationLoad(Configuration c) {\n             return false;\n         \n         OpenJPAConfigurationImpl conf = (OpenJPAConfigurationImpl) c;\n-        conf.metaFactoryPlugin.setAlias(ALIAS_EJB.getName(),\n-            PersistenceMetaDataFactory.class.getName());\n-        conf.metaFactoryPlugin.setAlias(SPEC_JPA.getName(),\n-            PersistenceMetaDataFactory.class.getName());\n+        conf.metaFactoryPlugin.setAlias(ALIAS_EJB.getName(), PersistenceMetaDataFactory.class.getName());\n+        conf.metaFactoryPlugin.setAlias(SPEC_JPA.getName(),  PersistenceMetaDataFactory.class.getName());\n         \n         conf.addValue(new EntityManagerFactoryValue());\n         \n-        conf.readLockLevel.setAlias(\"optimistic\", String\n-            .valueOf(MixedLockLevels.LOCK_OPTIMISTIC));\n+        conf.readLockLevel.setAlias(\"optimistic\", String.valueOf(MixedLockLevels.LOCK_OPTIMISTIC));\n         conf.readLockLevel.setAlias(\"optimistic-force-increment\", String\n             .valueOf(MixedLockLevels.LOCK_OPTIMISTIC_FORCE_INCREMENT));\n         conf.readLockLevel.setAlias(\"pessimistic-read\", String\n@@ -145,22 +145,64 @@ public boolean beforeConfigurationLoad(Configuration c) {\n         conf.writeLockLevel.setAlias(\"pessimistic-force-increment\", String\n             .valueOf(MixedLockLevels.LOCK_PESSIMISTIC_FORCE_INCREMENT));\n \n-        conf.lockManagerPlugin.setAlias(\"mixed\",\n-            \"org.apache.openjpa.jdbc.kernel.MixedLockManager\");\n+        conf.lockManagerPlugin.setAlias(\"mixed\", \"org.apache.openjpa.jdbc.kernel.MixedLockManager\");\n+\n+        configureBeanValidation(conf);\n+        \n+        conf.dataCacheMode = conf.addString(JPAProperties.CACHE_MODE);\n+        conf.dataCacheMode.setDefault(DataCacheMode.UNSPECIFIED.toString());\n+        conf.dataCacheMode.set(DataCacheMode.UNSPECIFIED.toString());\n \n+        return true;\n+    }\n+    \n+    /**\n+     * Bean Validation configuration is unusual because its usage of enums and keys that\n+     * do not have counterparts in kernel.\n+     * Hence the plugins are defined in product derivation instead of the kernel's\n+     * core configuration.\n+     * \n+     * @param conf\n+     */\n+    private void configureBeanValidation(OpenJPAConfigurationImpl conf) {\n+        // Validation defines/adds the following plugins to OpenJPA Configuration\n+        conf.validationFactory         = conf.addObject(JPAProperties.VALIDATE_FACTORY); \n+        conf.validator                 = conf.addObject(\"Validator\");\n+        conf.validationMode            = conf.addString(JPAProperties.VALIDATE_MODE);\n+        conf.validationGroupPrePersist = conf.addString(JPAProperties.VALIDATE_PRE_PERSIST);\n+        conf.validationGroupPreUpdate  = conf.addString(JPAProperties.VALIDATE_PRE_UPDATE);\n+        conf.validationGroupPreRemove  = conf.addString(JPAProperties.VALIDATE_PRE_REMOVE);\n+        \n+        conf.validationMode.setDynamic(true);\n         String[] aliases = new String[] {\n-            String.valueOf(ValidationMode.AUTO),\n-            String.valueOf(ValidationMode.AUTO).toLowerCase(),\n-            String.valueOf(ValidationMode.CALLBACK),\n-            String.valueOf(ValidationMode.CALLBACK).toLowerCase(),\n-            String.valueOf(ValidationMode.NONE),\n-            String.valueOf(ValidationMode.NONE).toLowerCase()\n+                String.valueOf(ValidationMode.AUTO),\n+                String.valueOf(ValidationMode.AUTO).toLowerCase(),\n+                String.valueOf(ValidationMode.CALLBACK),\n+                String.valueOf(ValidationMode.CALLBACK).toLowerCase(),\n+                String.valueOf(ValidationMode.NONE),\n+                String.valueOf(ValidationMode.NONE).toLowerCase()\n         };\n         conf.validationMode.setAliases(aliases);\n         conf.validationMode.setAliasListComprehensive(true);\n         conf.validationMode.setDefault(aliases[0]);\n \n-        return true;\n+        conf.validationGroupPrePersist.setString(JPAProperties.VALIDATE_GROUP_DEFAULT);\n+        conf.validationGroupPrePersist.setDefault(\"\");\n+        conf.validationGroupPrePersist.setDynamic(true);\n+\n+        conf.validationGroupPreUpdate.setString(JPAProperties.VALIDATE_GROUP_DEFAULT);\n+        conf.validationGroupPreUpdate.setDefault(\"\");\n+        conf.validationGroupPreUpdate.setDynamic(true);\n+\n+        conf.validationGroupPreRemove.setDefault(\"\");\n+        conf.validationGroupPreRemove.setDynamic(true);\n+\n+        conf.validationFactory.setInstantiatingGetter(\"getValidationFactoryInstance\");\n+        conf.validationFactory.setDynamic(true);\n+\n+        conf.validator.setInstantiatingGetter(\"getValidatorInstance\");\n+        conf.validator.setDynamic(true);\n+        conf.validator.makePrivate();\n     }\n \n     @Override\n@@ -732,11 +774,12 @@ protected void endElement(String name)\n                         _info.setPersistenceProviderClassName(currentText());\n                     break;\n                 case 's' : // shared-cache-mode\n-                    _info.setSharedCacheMode(currentText());\n+                    _info.setSharedCacheMode(JPAProperties.getEnumValue(SharedCacheMode.class, \n+                            JPAProperties.CACHE_MODE, currentText()));\n                     break;\n                 case 'v': // validation-mode\n-                    _info.setValidationMode(Enum.valueOf(ValidationMode.class,\n-                        currentText()));\n+                    _info.setValidationMode(JPAProperties.getEnumValue(ValidationMode.class,\n+                        JPAProperties.VALIDATE_MODE, currentText()));\n                     break;\n             }\n         }"},{"sha":"611e6689df4482a605e0eb52cc0babacd4f2c746","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","status":"modified","additions":44,"deletions":77,"changes":121,"blob_url":"https://github.com/apache/openjpa/blob/5e73ca14edc6d37a2ebff56cf0cb30c763fa6774/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","raw_url":"https://github.com/apache/openjpa/raw/5e73ca14edc6d37a2ebff56cf0cb30c763fa6774/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java?ref=5e73ca14edc6d37a2ebff56cf0cb30c763fa6774","patch":"@@ -60,17 +60,14 @@\n public class PersistenceUnitInfoImpl\n     implements PersistenceUnitInfo, SourceTracker {\n \n-    public static final String KEY_PROVIDER = \"javax.persistence.provider\";\n-    public static final String VALIDATION_MODE =\n-        \"javax.persistence.validation.mode\";\n     public static final String PERSISTENCE_VERSION = \"PersistenceVersion\";\n     \n     /**\n      * Properties key for the SHARED_CACHE_MODE. The JPA 2.0 spec\n      * SharedCacheMode maps to OpenJPA's DataCacheMode so we're using that\n      * class' simple name as the property key.\n      */\n-    public static final String SHARED_CACHE_MODE=DataCacheMode.class.getSimpleName();  \n+//    public static final String SHARED_CACHE_MODE=DataCacheMode.class.getSimpleName();  \n \n     private static final Localizer s_loc = Localizer.forPackage\n         (PersistenceUnitInfoImpl.class);\n@@ -198,8 +195,9 @@ public void setExcludeUnlistedClasses(boolean excludeUnlisted) {\n     }\n \n     public List<String> getMappingFileNames() {\n-        return (_mappingFileNames == null)\n-            ? (List<String>) Collections.EMPTY_LIST : _mappingFileNames;\n+        if (_mappingFileNames == null)\n+            return Collections.emptyList();\n+        return _mappingFileNames;\n     }\n \n     public void addMappingFileName(String name) {\n@@ -209,8 +207,9 @@ public void addMappingFileName(String name) {\n     }\n \n     public List<URL> getJarFileUrls() {\n-        return (_jarFiles == null) ? (List<URL>) Collections.EMPTY_LIST \n-            : _jarFiles;\n+        if (_jarFiles == null) \n+            return Collections.emptyList();\n+        return _jarFiles;\n     }\n \n     public void addJarFile(URL jar) {\n@@ -255,8 +254,9 @@ public void addJarFileName(String name) {\n     }\n \n     public List<String> getManagedClassNames() {\n-        return (_entityClassNames == null)\n-            ? (List<String>) Collections.EMPTY_LIST : _entityClassNames;\n+        if (_entityClassNames == null)\n+            return Collections.emptyList();\n+        return _entityClassNames;\n     }\n \n     public void addManagedClassName(String name) {\n@@ -304,48 +304,28 @@ public void fromUserProperties(Map map) {\n         for (Object o : map.entrySet()) {\n             key = ((Map.Entry) o).getKey();\n             val = ((Map.Entry) o).getValue();\n-            if (KEY_PROVIDER.equals(key))\n+            if (JPAProperties.PROVIDER.equals(key))\n                 setPersistenceProviderClassName((String) val);\n-            else if (\"javax.persistence.transactionType\".equals(key)) {\n-                PersistenceUnitTransactionType ttype;\n-                if (val instanceof String) {\n-                    ttype = Enum.valueOf(PersistenceUnitTransactionType.class, \n-                        (String) val);\n-                }\n-                else {\n-                    ttype = (PersistenceUnitTransactionType) val;\n-                }\n-                setTransactionType(ttype);\n-            } else if (\"javax.persistence.jtaDataSource\".equals(key)) {\n+            else if (JPAProperties.TRANSACTION_TYPE.equals(key)) {\n+                setTransactionType(JPAProperties.getEnumValue(PersistenceUnitTransactionType.class, \n+                        JPAProperties.TRANSACTION_TYPE, key));\n+            } else if (JPAProperties.DATASOURCE_JTA.equals(key)) {\n                 if (val instanceof String) {\n                     setJtaDataSourceName((String) val);\n-                }\n-                else {\n+                } else {\n                     setJtaDataSource((DataSource) val);\n                 }\n-            } else if (\"javax.persistence.nonJtaDataSource\".equals(key)) {\n+            } else if (JPAProperties.DATASOURCE_NONJTA.equals(key)) {\n                 if (val instanceof String) {\n                     setNonJtaDataSourceName((String) val);\n-                }\n-                else {\n+                } else {\n                     setNonJtaDataSource((DataSource) val);\n                 }\n-            } else if (VALIDATION_MODE.equals(key)) {\n-                if (val instanceof String) {\n-                    setValidationMode((String) val);\n-                }\n-                else {\n-                    setValidationMode((ValidationMode) val);\n-                }\n-            } else if (SHARED_CACHE_MODE.equals(key)) { \n-               if(val instanceof String) { \n-                   setSharedCacheMode((String) val);\n-               }\n-               else {\n-                   setSharedCacheMode((SharedCacheMode) val);\n-               }\n-            }\n-            else {\n+            } else if (JPAProperties.VALIDATE_MODE.equals(key)) {\n+                setValidationMode(JPAProperties.getEnumValue(ValidationMode.class, JPAProperties.VALIDATE_MODE, val));\n+            } else if (JPAProperties.CACHE_MODE.equals(key)) { \n+                setSharedCacheMode(JPAProperties.getEnumValue(SharedCacheMode.class, JPAProperties.CACHE_MODE, val));\n+            } else {\n                 _props.put(key, val);\n             }\n         }\n@@ -366,49 +346,40 @@ public Map toOpenJPAProperties() {\n      * persistence unit info.\n      */\n     public static Map toOpenJPAProperties(PersistenceUnitInfo info) {\n-        Map map = new HashMap();\n+        Map map = new HashMap<String,Object>();\n         Set<String> added = new HashSet<String>();\n         if (info.getTransactionType() == PersistenceUnitTransactionType.JTA)\n-            put(map, added, \"TransactionMode\", \"managed\");\n+            replaceAsOpenJPAProperty(map, added, \"TransactionMode\", \"managed\");\n \n         boolean hasJta = false;\n         DataSource ds = info.getJtaDataSource();\n         if (ds != null) {\n-            put(map, added, \"ConnectionFactory\", ds);\n-            put(map, added, \"ConnectionFactoryMode\", \"managed\");\n+            replaceAsOpenJPAProperty(map, added, \"ConnectionFactory\", ds);\n+            replaceAsOpenJPAProperty(map, added, \"ConnectionFactoryMode\", \"managed\");\n             hasJta = true;\n         } else if (info instanceof PersistenceUnitInfoImpl\n             && ((PersistenceUnitInfoImpl) info).getJtaDataSourceName() != null){\n-            put(map, added, \"ConnectionFactoryName\", ((PersistenceUnitInfoImpl)\n-                info).getJtaDataSourceName());\n-            put(map, added, \"ConnectionFactoryMode\", \"managed\");\n+            replaceAsOpenJPAProperty(map, added, \"ConnectionFactoryName\", \n+                    ((PersistenceUnitInfoImpl)info).getJtaDataSourceName());\n+            replaceAsOpenJPAProperty(map, added, \"ConnectionFactoryMode\", \"managed\");\n             hasJta = true;\n         }\n \n         ds = info.getNonJtaDataSource();\n         if (ds != null) {\n-            if (!hasJta)\n-                put(map, added, \"ConnectionFactory\", ds);\n-            else\n-                put(map, added, \"ConnectionFactory2\", ds);\n+             replaceAsOpenJPAProperty(map, added, hasJta ? \"ConnectionFactory2\" : \"ConnectionFactory\", ds);\n         } else if (info instanceof PersistenceUnitInfoImpl\n-            && ((PersistenceUnitInfoImpl) info).getNonJtaDataSourceName()\n-            != null) {\n-            String nonJtaName = ((PersistenceUnitInfoImpl) info).\n-                getNonJtaDataSourceName();\n-            if (!hasJta)\n-                put(map, added, \"ConnectionFactoryName\", nonJtaName);\n-            else\n-                put(map, added, \"ConnectionFactory2Name\", nonJtaName);\n+            && ((PersistenceUnitInfoImpl) info).getNonJtaDataSourceName() != null) {\n+            String nonJtaName = ((PersistenceUnitInfoImpl) info).getNonJtaDataSourceName();\n+            replaceAsOpenJPAProperty(map, added, hasJta ? \"ConnectionFactory2Name\" : \"ConnectionFactoryName\", \n+                    nonJtaName);\n         }\n \n         if (info.getClassLoader() != null)\n-            put(map, added, \"ClassResolver\", new ClassResolverImpl(\n-                info.getClassLoader()));\n+            replaceAsOpenJPAProperty(map, added, \"ClassResolver\", new ClassResolverImpl(info.getClassLoader()));\n \n         Properties props = info.getProperties();\n         if (props != null) {\n-\n             // remove any of the things that were set above\n             for (String key : added) {\n                 if (Configurations.containsProperty(key, props))\n@@ -481,24 +452,28 @@ public static Map toOpenJPAProperties(PersistenceUnitInfo info) {\n         \n         // always record provider name for product derivations to access\n         if (info.getPersistenceProviderClassName() != null)\n-            map.put(KEY_PROVIDER, info.getPersistenceProviderClassName());\n+            map.put(JPAProperties.PROVIDER, info.getPersistenceProviderClassName());\n         \n         // convert validation-mode enum to a StringValue\n         if (info.getValidationMode() != null)\n-            map.put(VALIDATION_MODE, String.valueOf(info.getValidationMode()).toLowerCase());\n+            map.put(JPAProperties.VALIDATE_MODE, info.getValidationMode());\n \n         if (info.getPersistenceXMLSchemaVersion() != null) {\n             map.put(PERSISTENCE_VERSION, info.getPersistenceXMLSchemaVersion());\n         }\n         \n         if (info.getSharedCacheMode() != null) { \n-            put(map, added, SHARED_CACHE_MODE, info.getSharedCacheMode().toString());\n+            map.put(JPAProperties.CACHE_MODE, info.getSharedCacheMode());\n         }\n         \n         return map;\n     }\n \n-    private static void put(Map map, Set added, String key, Object val) {\n+    /**\n+     * Adds the given key-val to the given map after adding \"openjpa.\" prefix to the key.\n+     * Tracks this addition in the given set of added keys.\n+     */\n+    private static void replaceAsOpenJPAProperty(Map map, Set<String> added, String key, Object val) {\n         map.put(\"openjpa.\" + key, val);\n         added.add(key);\n     }\n@@ -565,10 +540,6 @@ public ValidationMode getValidationMode() {\n         return _validationMode;\n     }\n     \n-    protected void setValidationMode(String mode) {\n-        setValidationMode(Enum.valueOf(ValidationMode.class, mode.toUpperCase()));\n-    }\n-\n     public void setValidationMode(ValidationMode mode) {\n         _validationMode = mode;\n     }\n@@ -577,10 +548,6 @@ public SharedCacheMode getSharedCacheMode() {\n         return _sharedCacheMode;\n     }\n     \n-    public void setSharedCacheMode(String mode) { \n-        setSharedCacheMode(Enum.valueOf(SharedCacheMode.class, mode.toUpperCase()));\n-    }\n-\n     public void setSharedCacheMode(SharedCacheMode mode) { \n         _sharedCacheMode = mode;\n     }"},{"sha":"2f741da0c84b38035dac9c326a280c5a9ae765c3","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/validation/TraversableResolverImpl.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/5e73ca14edc6d37a2ebff56cf0cb30c763fa6774/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/validation/TraversableResolverImpl.java","raw_url":"https://github.com/apache/openjpa/raw/5e73ca14edc6d37a2ebff56cf0cb30c763fa6774/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/validation/TraversableResolverImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/validation/TraversableResolverImpl.java?ref=5e73ca14edc6d37a2ebff56cf0cb30c763fa6774","patch":"@@ -21,7 +21,6 @@\n import javax.persistence.spi.LoadState;\n import javax.validation.Path;\n import javax.validation.TraversableResolver;\n-import javax.validation.ValidationException;\n import javax.validation.Path.Node;\n \n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;"}]}

