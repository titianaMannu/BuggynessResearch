{"sha":"5eb13dbde9782affaa41e954e72decef8f3748ca","node_id":"MDY6Q29tbWl0MjA2MzY0OjVlYjEzZGJkZTk3ODJhZmZhYTQxZTk1NGU3MmRlY2VmOGYzNzQ4Y2E=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2012-07-13T19:46:41Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2012-07-13T19:46:41Z"},"message":"OPENJPA-2230.  Set the _activated flag when processing EventListeners in super classes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1361354 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ddae1544d380046fff90e39b899cf306ff017b65","url":"https://api.github.com/repos/apache/openjpa/git/trees/ddae1544d380046fff90e39b899cf306ff017b65"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5eb13dbde9782affaa41e954e72decef8f3748ca","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5eb13dbde9782affaa41e954e72decef8f3748ca","html_url":"https://github.com/apache/openjpa/commit/5eb13dbde9782affaa41e954e72decef8f3748ca","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5eb13dbde9782affaa41e954e72decef8f3748ca/comments","author":null,"committer":null,"parents":[{"sha":"f30d74802dfec7a0148ca0e98993a2d7495f1085","url":"https://api.github.com/repos/apache/openjpa/commits/f30d74802dfec7a0148ca0e98993a2d7495f1085","html_url":"https://github.com/apache/openjpa/commit/f30d74802dfec7a0148ca0e98993a2d7495f1085"}],"stats":{"total":205,"additions":205,"deletions":0},"files":[{"sha":"a80bf4d46484eea692cc1927056ae161a1be42f2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/LifecycleMetaData.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/5eb13dbde9782affaa41e954e72decef8f3748ca/openjpa-kernel/src/main/java/org/apache/openjpa/meta/LifecycleMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/5eb13dbde9782affaa41e954e72decef8f3748ca/openjpa-kernel/src/main/java/org/apache/openjpa/meta/LifecycleMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/LifecycleMetaData.java?ref=5eb13dbde9782affaa41e954e72decef8f3748ca","patch":"@@ -204,6 +204,7 @@ void resolve() {\n                 return _declared;\n             if (_declared == null && _ignoreSups == 0) {\n                 _high = supMeta._high;\n+                _activated = true;\n                 return supMeta._all;\n             }\n             // don't hold strong refs onto redundant info"},{"sha":"9b0a59556923ef03df710b1a4c931a417650e0df","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/EntityListenerMappedSuperClass.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/5eb13dbde9782affaa41e954e72decef8f3748ca/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/EntityListenerMappedSuperClass.java","raw_url":"https://github.com/apache/openjpa/raw/5eb13dbde9782affaa41e954e72decef8f3748ca/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/EntityListenerMappedSuperClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/EntityListenerMappedSuperClass.java?ref=5eb13dbde9782affaa41e954e72decef8f3748ca","patch":"@@ -0,0 +1,29 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+package org.apache.openjpa.persistence.callbacks;\r\n+\r\n+import javax.persistence.EntityListeners;\r\n+import javax.persistence.MappedSuperclass;\r\n+\r\n+@MappedSuperclass\r\n+@EntityListeners({ListenerImpl.class})\r\n+public abstract class EntityListenerMappedSuperClass {\r\n+\r\n+}\r"},{"sha":"4fe04f203273b17bebe4d9335950ef6bc4a71ad3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/MSCListenerEntity.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/5eb13dbde9782affaa41e954e72decef8f3748ca/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/MSCListenerEntity.java","raw_url":"https://github.com/apache/openjpa/raw/5eb13dbde9782affaa41e954e72decef8f3748ca/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/MSCListenerEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/MSCListenerEntity.java?ref=5eb13dbde9782affaa41e954e72decef8f3748ca","patch":"@@ -0,0 +1,47 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.callbacks;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.GeneratedValue;\r\n+\r\n+@Entity\r\n+public class MSCListenerEntity extends EntityListenerMappedSuperClass implements ListenerTestEntity {\r\n+    @Id @GeneratedValue\r\n+    private long id;\r\n+\r\n+    private int value;\r\n+\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public int getValue() {\r\n+        return value;\r\n+    }\r\n+\r\n+    public void setValue(int value) {\r\n+        this.value = value;\r\n+    }\r\n+}\r"},{"sha":"eadf725bb614a2310536f4b880ef43b1373b8f34","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestMSCEntityListeners.java","status":"added","additions":119,"deletions":0,"changes":119,"blob_url":"https://github.com/apache/openjpa/blob/5eb13dbde9782affaa41e954e72decef8f3748ca/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestMSCEntityListeners.java","raw_url":"https://github.com/apache/openjpa/raw/5eb13dbde9782affaa41e954e72decef8f3748ca/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestMSCEntityListeners.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestMSCEntityListeners.java?ref=5eb13dbde9782affaa41e954e72decef8f3748ca","patch":"@@ -0,0 +1,119 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.callbacks;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+/*\r\n+ * Separate testcase from TestEntityListeners to avoid the declaration of\r\n+ * a System level event listener in the orm.xml file...\r\n+ */\r\n+public class TestMSCEntityListeners extends SingleEMFTestCase {\r\n+\r\n+    private static final int MSC_LISTENER_ENTITY = 4;\r\n+    \r\n+    public void setUp() {\r\n+        setUp(CLEAR_TABLES);\r\n+        ListenerImpl.prePersistCount = 0;\r\n+        ListenerImpl.postPersistCount = 0;\r\n+        ListenerImpl.preUpdateCount = 0;\r\n+        ListenerImpl.postUpdateCount = 0;\r\n+        ListenerImpl.preRemoveCount = 0;\r\n+        ListenerImpl.postRemoveCount = 0;\r\n+        ListenerImpl.postLoadCount = 0;\r\n+    }\r\n+\r\n+    @Override\r\n+    protected String getPersistenceUnitName() {\r\n+        return \"msclistener-pu\";\r\n+    }\r\n+\r\n+    public void testMSCEntityListeners() {\r\n+        helper(MSC_LISTENER_ENTITY);\r\n+    }\r\n+\r\n+    public void helper(int entityListeners) {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        try {\r\n+            em.getTransaction().begin();\r\n+            ListenerTestEntity o = null;\r\n+            switch (entityListeners) {\r\n+            case MSC_LISTENER_ENTITY:\r\n+                o = new MSCListenerEntity();\r\n+                break;\r\n+                \r\n+            }\r\n+            em.persist(o);\r\n+\r\n+            assertStatus(1, 0, 0, 0, 0, 0, 0);\r\n+\r\n+            em.getTransaction().commit();\r\n+            long id = o.getId();\r\n+            em.close();\r\n+\r\n+            assertStatus(1, 1, 0, 0, 0, 0, 0);\r\n+\r\n+            em = emf.createEntityManager();\r\n+            em.getTransaction().begin();\r\n+            switch (entityListeners) {\r\n+            case MSC_LISTENER_ENTITY:\r\n+                o = em.find(MSCListenerEntity.class, id);\r\n+                break;\r\n+                \r\n+            }\r\n+            assertNotNull(o);\r\n+            assertStatus(1, 1, 0, 0, 0, 0, 1);\r\n+\r\n+            o.setValue(o.getValue() + 1);\r\n+\r\n+            em.flush();\r\n+            assertStatus(1, 1, 1, 1, 0, 0, 1);\r\n+\r\n+            em.remove(o);\r\n+            assertStatus(1, 1, 1, 1, 1, 0, 1);\r\n+\r\n+            em.getTransaction().commit();\r\n+\r\n+            assertStatus(1, 1, 1, 1, 1, 1, 1);\r\n+\r\n+            em.close();\r\n+        } finally {\r\n+            if (em != null && em.getTransaction().isActive())\r\n+                em.getTransaction().rollback();\r\n+            if (em != null && em.isOpen())\r\n+                em.close();\r\n+        }\r\n+    }\r\n+\r\n+    private void assertStatus(\r\n+        int prePersist, int postPersist,\r\n+        int preUpdate, int postUpdate,\r\n+        int preRemove, int postRemove,\r\n+        int postLoad) {\r\n+        assertEquals(prePersist, ListenerImpl.prePersistCount);\r\n+        assertEquals(postPersist, ListenerImpl.postPersistCount);\r\n+        assertEquals(preUpdate, ListenerImpl.preUpdateCount);\r\n+        assertEquals(postUpdate, ListenerImpl.postUpdateCount);\r\n+        assertEquals(preRemove, ListenerImpl.preRemoveCount);\r\n+        assertEquals(postRemove, ListenerImpl.postRemoveCount);\r\n+        assertEquals(postLoad, ListenerImpl.postLoadCount);\r\n+    }\r\n+\r\n+}\r"},{"sha":"3ecb58f15a79ebd000027e8fe9bed83337c0cc74","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/5eb13dbde9782affaa41e954e72decef8f3748ca/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/5eb13dbde9782affaa41e954e72decef8f3748ca/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=5eb13dbde9782affaa41e954e72decef8f3748ca","patch":"@@ -111,6 +111,15 @@\n         </properties>\n     </persistence-unit>\n     \n+    <persistence-unit name=\"msclistener-pu\">\n+        <class>org.apache.openjpa.persistence.callbacks.MSCListenerEntity</class>\n+        <class>org.apache.openjpa.persistence.callbacks.EntityListenerMappedSuperClass</class>\n+        <properties>\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\"\n+                  value=\"buildSchema(ForeignKeys=true)\"/>\n+        </properties>\n+    </persistence-unit>\n+    \n     <persistence-unit name=\"test-unique-constraint\">\n         <mapping-file>org/apache/openjpa/persistence/jdbc/unique/orm.xml</mapping-file>\n         <class>org.apache.openjpa.persistence.jdbc.unique.UniqueA</class>"}]}

