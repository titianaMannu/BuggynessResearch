{"sha":"5f138fe08d3ab7a404f766c564ca58ff9b006801","node_id":"MDY6Q29tbWl0MjA2MzY0OjVmMTM4ZmUwOGQzYWI3YTQwNGY3NjZjNTY0Y2E1OGZmOWIwMDY4MDE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-28T23:37:58Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-28T23:37:58Z"},"message":"OPENJPA-44: Add test cases for processing metadata-complete tag.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@680566 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"64ca9c6464aae8c954aa89989fc7c265b32560bf","url":"https://api.github.com/repos/apache/openjpa/git/trees/64ca9c6464aae8c954aa89989fc7c265b32560bf"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5f138fe08d3ab7a404f766c564ca58ff9b006801","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5f138fe08d3ab7a404f766c564ca58ff9b006801","html_url":"https://github.com/apache/openjpa/commit/5f138fe08d3ab7a404f766c564ca58ff9b006801","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5f138fe08d3ab7a404f766c564ca58ff9b006801/comments","author":null,"committer":null,"parents":[{"sha":"9174b3f1742e0d17eeaa874690cf2dca2752b97d","url":"https://api.github.com/repos/apache/openjpa/commits/9174b3f1742e0d17eeaa874690cf2dca2752b97d","html_url":"https://github.com/apache/openjpa/commit/9174b3f1742e0d17eeaa874690cf2dca2752b97d"}],"stats":{"total":387,"additions":387,"deletions":0},"files":[{"sha":"19729d178007f7a02ad80930fdfe2910a850dcec","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/xml/DerivedA.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/5f138fe08d3ab7a404f766c564ca58ff9b006801/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/xml/DerivedA.java","raw_url":"https://github.com/apache/openjpa/raw/5f138fe08d3ab7a404f766c564ca58ff9b006801/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/xml/DerivedA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/xml/DerivedA.java?ref=5f138fe08d3ab7a404f766c564ca58ff9b006801","patch":"@@ -0,0 +1,34 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.xml;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.NamedQuery;\r\n+\r\n+/**\r\n+ * Used to test effect of metadata-complete tag. \r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+@NamedQuery(name=\"DerivedA.SelectAll\", query=\"SELECT a FROM DerivedA a\")\r\n+public class DerivedA extends EntityA {\r\n+\r\n+}\r"},{"sha":"5fb7be30dc6b5e0ae561b8b802f1a2717aacce7e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/xml/DerivedB.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/5f138fe08d3ab7a404f766c564ca58ff9b006801/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/xml/DerivedB.java","raw_url":"https://github.com/apache/openjpa/raw/5f138fe08d3ab7a404f766c564ca58ff9b006801/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/xml/DerivedB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/xml/DerivedB.java?ref=5f138fe08d3ab7a404f766c564ca58ff9b006801","patch":"@@ -0,0 +1,37 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.xml;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.NamedQuery;\r\n+\r\n+/**\r\n+ * Used to test effect of metadata-complete tag. \r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class DerivedB extends EntityB {\r\n+\t@Basic\r\n+\t@Column(name=\"xyz\")\r\n+\tprivate String data;\r\n+}\r"},{"sha":"545898313d5779e0592a0562b009cef969255f49","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/xml/EntityA.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/5f138fe08d3ab7a404f766c564ca58ff9b006801/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/xml/EntityA.java","raw_url":"https://github.com/apache/openjpa/raw/5f138fe08d3ab7a404f766c564ca58ff9b006801/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/xml/EntityA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/xml/EntityA.java?ref=5f138fe08d3ab7a404f766c564ca58ff9b006801","patch":"@@ -0,0 +1,62 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.xml;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+\r\n+/**\r\n+ * Used to test effect of metadata-complete tag. \r\n+ * \r\n+ * The annotations should not be processed as corresponding orm.xml will\r\n+ * switch off annotation processing via metadata-complete tag.\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n+public class EntityA {\r\n+\t@Id\r\n+\t@GeneratedValue(strategy=GenerationType.IDENTITY)\r\n+\tprivate long id;\r\n+\t\r\n+\t@Basic(optional=true)\r\n+\tprivate String name;\r\n+\r\n+\t\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+}\r"},{"sha":"20e7a3c93b40bce3fd4427e9dd9a32d621e90dd5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/xml/EntityB.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/5f138fe08d3ab7a404f766c564ca58ff9b006801/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/xml/EntityB.java","raw_url":"https://github.com/apache/openjpa/raw/5f138fe08d3ab7a404f766c564ca58ff9b006801/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/xml/EntityB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/xml/EntityB.java?ref=5f138fe08d3ab7a404f766c564ca58ff9b006801","patch":"@@ -0,0 +1,63 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.xml;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.NamedQuery;\r\n+\r\n+/**\r\n+ * Used to test effect of metadata-complete tag. \r\n+ * \r\n+ * The annotations should be processed in conjunction with corresponding orm.xml \r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n+@NamedQuery(name=\"EntityB.SelectOne\", query=\"SELECT b FROM DerivedB b WHERE name=?1\")\r\n+public class EntityB {\r\n+\t@Id\r\n+\t@GeneratedValue(strategy=GenerationType.IDENTITY)\r\n+\tprivate long id;\r\n+\t\r\n+\t@Basic(optional=true)\r\n+\tprivate String name;\r\n+\r\n+\t\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+}\r"},{"sha":"2e5caa59871e3df16a2e6f1d8d522f6b15be7008","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/xml/TestMetaDataComplete.java","status":"added","additions":124,"deletions":0,"changes":124,"blob_url":"https://github.com/apache/openjpa/blob/5f138fe08d3ab7a404f766c564ca58ff9b006801/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/xml/TestMetaDataComplete.java","raw_url":"https://github.com/apache/openjpa/raw/5f138fe08d3ab7a404f766c564ca58ff9b006801/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/xml/TestMetaDataComplete.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/xml/TestMetaDataComplete.java?ref=5f138fe08d3ab7a404f766c564ca58ff9b006801","patch":"@@ -0,0 +1,124 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.xml;\r\n+\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.strats.FlatClassStrategy;\r\n+import org.apache.openjpa.jdbc.meta.strats.FullClassStrategy;\r\n+import org.apache.openjpa.jdbc.meta.strats.VerticalClassStrategy;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.meta.MetaDataRepository;\r\n+import org.apache.openjpa.meta.ValueStrategies;\r\n+import org.apache.openjpa.persistence.ArgumentException;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Tests metadata-complete tag switches off any annotation processing.\r\n+ * \r\n+ * EntityA uses metadata-complete tag and hence all its annotated mapping info\r\n+ * must not be processed.\r\n+ * \r\n+ * EntityB does not use metadata-complete tag and hence its mapping info should\r\n+ * be combination of annotation mapping info overwritten by xml description\r\n+ * mapping info.\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ * \r\n+ */\r\n+public class TestMetaDataComplete extends SingleEMFTestCase {\r\n+\tprivate static OpenJPAEntityManagerFactorySPI oemf;\r\n+\r\n+\tprivate static ClassMetaData entityA, entityB, derivedA, derivedB;\r\n+\r\n+\tpublic void setUp() throws Exception {\r\n+\t\tif (oemf == null) {\r\n+\t\t\tsuper.setUp(EntityA.class, EntityB.class, DerivedA.class,\r\n+\t\t\t\t\tDerivedB.class);\r\n+\t\t\toemf = (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence\r\n+\t\t\t\t\t.cast(emf);\r\n+\t\t\tMetaDataRepository repos = oemf.getConfiguration()\r\n+\t\t\t\t\t.getMetaDataRepositoryInstance();\r\n+\r\n+\t\t\tentityA = repos.getMetaData(EntityA.class, null, true);\r\n+\t\t\tentityB = repos.getMetaData(EntityB.class, null, true);\r\n+\t\t\tderivedA = repos.getMetaData(DerivedA.class, null, true);\r\n+\t\t\tderivedB = repos.getMetaData(DerivedB.class, null, true);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tpublic void tearDown() {\r\n+\r\n+\t}\r\n+\r\n+\tprotected String getPersistenceUnitName() {\r\n+\t\treturn \"test-metadata-complete\";\r\n+\t}\r\n+\r\n+\tpublic void testIgnoresClassAnnotationIfMetaDataComplete() {\r\n+\t\t// inheritance strategy of EntityA by annotation is SINGLE_TABLE\r\n+\t\t// inheritance strategy of EntityA in xml descriptor is JOINED\r\n+\t\tassertEquals(FullClassStrategy.class, ((ClassMapping) entityA)\r\n+\t\t\t\t.getStrategy().getClass());\r\n+\t\tassertEquals(VerticalClassStrategy.class, ((ClassMapping) derivedA)\r\n+\t\t\t\t.getStrategy().getClass());\r\n+\t}\r\n+\r\n+\tpublic void testProcessesClassAnnotationIfMetaDataIsNotComplete() {\r\n+\t\t// inheritance strategy of EntityB by annotation is SINGLE_TABLE\r\n+\t\t// inheritance strategy of EntityB in xml descriptor is not specified\r\n+\t\tassertEquals(FullClassStrategy.class, ((ClassMapping) entityB)\r\n+\t\t\t\t.getStrategy().getClass());\r\n+\t\tassertEquals(FlatClassStrategy.class, ((ClassMapping) derivedB)\r\n+\t\t\t\t.getStrategy().getClass());\r\n+\t}\r\n+\r\n+\tpublic void testIgnoresFieldAnnotationIfMetaDataComplete() {\r\n+\t\t// generation strategy of EntityA.id by annotation is IDENTITY\r\n+\t\t// inheritance strategy of EntityA in xml descriptor is SEQUENCE\r\n+\t\tint valueStrategyA = entityA.getField(\"id\").getValueStrategy();\r\n+\t\tassertEquals(ValueStrategies.SEQUENCE, valueStrategyA);\r\n+\t}\r\n+\r\n+\tpublic void testProcessesFieldAnnotationIfMetaDataIsNotComplete() {\r\n+\t\t// generation strategy of EntityB.id by annotation is IDENTITY\r\n+\t\t// inheritance strategy of EntityA in xml descriptor is not specified\r\n+\t\tint valueStrategyB = entityB.getField(\"id\").getValueStrategy();\r\n+\t\tassertEquals(ValueStrategies.AUTOASSIGN, valueStrategyB);\r\n+\t}\r\n+\r\n+\tpublic void testIgnoresNamedQueryIfMetaDataComplete() {\r\n+\t\t// DerivedA has annotated NamedQuery\r\n+\t\tString namedQuery = \"DerivedA.SelectAll\";\r\n+\t\ttry {\r\n+\t\t\toemf.createEntityManager().createNamedQuery(namedQuery);\r\n+\t\t\tfail(\"Expected not to find NamedQuery [\" + namedQuery + \"]\");\r\n+\t\t} catch (ArgumentException e) {\r\n+\t\t\tassertTrue(e.getMessage().contains(namedQuery));\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tpublic void testProcessesNamedQueryIfMetaDataIsNotComplete() {\r\n+\t\t// EntityB has annotated NamedQuery\r\n+\t\t// EntityB has a Named Query in xml descriptor\r\n+\t\toemf.createEntityManager().createNamedQuery(\"EntityB.SelectOne\");\r\n+\t\toemf.createEntityManager().createNamedQuery(\"EntityB.SelectAll\");\r\n+\t}\r\n+}\r"},{"sha":"307785db49ff64dcfb4cfd664f2065b1dc20a731","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/5f138fe08d3ab7a404f766c564ca58ff9b006801/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/5f138fe08d3ab7a404f766c564ca58ff9b006801/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=5f138fe08d3ab7a404f766c564ca58ff9b006801","patch":"@@ -95,5 +95,9 @@\n         <class>org.apache.openjpa.persistence.jdbc.unique.UniqueA</class>\r\n         <class>org.apache.openjpa.persistence.jdbc.unique.UniqueB</class>\r\n     </persistence-unit>\r\n+\r\n+    <persistence-unit name=\"test-metadata-complete\">\r\n+        <mapping-file>org/apache/openjpa/persistence/annotations/xml/orm.xml</mapping-file>\r\n+    </persistence-unit>\r\n     \n </persistence>"},{"sha":"295962e9b083e3ede64e666b700eb077d6099b33","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/xml/orm.xml","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/5f138fe08d3ab7a404f766c564ca58ff9b006801/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/xml/orm.xml","raw_url":"https://github.com/apache/openjpa/raw/5f138fe08d3ab7a404f766c564ca58ff9b006801/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/xml/orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/xml/orm.xml?ref=5f138fe08d3ab7a404f766c564ca58ff9b006801","patch":"@@ -0,0 +1,63 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.\n+-->\r\n+\r\n+<!-- A pair of entities are defined with metadata-complete attribute set to \r\n+     true and false respectively. Both entities carry identical annotation.\r\n+     \r\n+-->\n+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_1_0.xsd\"\n+  version=\"1.0\">\n+  <entity class=\"org.apache.openjpa.persistence.annotations.xml.EntityA\" metadata-complete=\"true\">\r\n+    <inheritance strategy=\"JOINED\"/>\r\n+    <attributes>\r\n+      <id name=\"id\">\r\n+        <column name=\"ID\" />\r\n+          <generated-value strategy=\"SEQUENCE\"/>\r\n+      </id>\r\n+      <basic name=\"name\" optional=\"false\">\r\n+      </basic>\r\n+    </attributes>\r\n+  </entity>\r\n+  \r\n+  <entity class=\"org.apache.openjpa.persistence.annotations.xml.EntityB\" metadata-complete=\"false\">\r\n+    <named-query name=\"EntityB.SelectAll\">\r\n+    \t<query>SELECT b FROM EntityB b</query>\r\n+    </named-query>\r\n+    <attributes>\r\n+      <id name=\"id\">\r\n+        <column name=\"ID\" />\r\n+      </id>\r\n+      <basic name=\"name\">\r\n+      </basic>\r\n+    </attributes>\r\n+  </entity>\r\n+  <entity class=\"org.apache.openjpa.persistence.annotations.xml.DerivedA\"\r\n+  \tmetadata-complete=\"true\">\r\n+  </entity>\r\n+  <entity class=\"org.apache.openjpa.persistence.annotations.xml.DerivedB\"\r\n+  \tmetadata-complete=\"false\">\r\n+  \t<attributes>\r\n+  \t\t<basic name=\"data\">\r\n+  \t\t</basic>\r\n+  \t</attributes>\r\n+  </entity>\r\n+</entity-mappings>"}]}

