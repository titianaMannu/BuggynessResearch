{"sha":"5f49357c193dc5f5fd87220a7465019a7440033a","node_id":"MDY6Q29tbWl0MjA2MzY0OjVmNDkzNTdjMTkzZGM1ZjVmZDg3MjIwYTc0NjUwMTlhNzQ0MDAzM2E=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-11T22:37:51Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-11T22:37:51Z"},"message":"OPENJPA-679. Committing Fay's patch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@752663 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8c3aac49748b94f14a0bb86f78150d9b0471a1e6","url":"https://api.github.com/repos/apache/openjpa/git/trees/8c3aac49748b94f14a0bb86f78150d9b0471a1e6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5f49357c193dc5f5fd87220a7465019a7440033a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5f49357c193dc5f5fd87220a7465019a7440033a","html_url":"https://github.com/apache/openjpa/commit/5f49357c193dc5f5fd87220a7465019a7440033a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5f49357c193dc5f5fd87220a7465019a7440033a/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"5bf64d1f681670265a18992bfd07574033adb5fc","url":"https://api.github.com/repos/apache/openjpa/commits/5bf64d1f681670265a18992bfd07574033adb5fc","html_url":"https://github.com/apache/openjpa/commit/5bf64d1f681670265a18992bfd07574033adb5fc"}],"stats":{"total":25,"additions":12,"deletions":13},"files":[{"sha":"fd9344455bb4be3bb30819d183454d2d374707a8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","status":"modified","additions":12,"deletions":13,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/5f49357c193dc5f5fd87220a7465019a7440033a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","raw_url":"https://github.com/apache/openjpa/raw/5f49357c193dc5f5fd87220a7465019a7440033a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java?ref=5f49357c193dc5f5fd87220a7465019a7440033a","patch":"@@ -89,7 +89,6 @@\n \n     // maps columns to joinables\n     private final Map _joinables = Collections.synchronizedMap(new HashMap());\n-    private boolean redoPrimaryKeyColumns = false;\n \n     /**\n      * Constructor. Supply described type and owning repository.\n@@ -403,18 +402,15 @@ public void setTable(Table table) {\n      */\n     public Column[] getPrimaryKeyColumns() {\n         if (getIdentityType() == ID_APPLICATION && isMapped()) {\n-            if (_cols.length == 0 || redoPrimaryKeyColumns) {            \n+            if (_cols.length == 0) {            \n                 FieldMapping[] pks = getPrimaryKeyFieldMappings();\n                 Collection cols = new ArrayList(pks.length);\n                 Column[] fieldCols;\n                 for (int i = 0; i < pks.length; i++) {\n                     fieldCols = pks[i].getColumns();\n                     if (fieldCols.length == 0) {\n-                        // some pk columns depends on fk. At this moment, \n-                        // the fk may not contain complete information.\n-                        // need to redo the primary key again later on\n-                        redoPrimaryKeyColumns = true;\n-                        continue;\n+                        _cols = new Column[0];\n+                        return _cols;\n                     }\n                     for (int j = 0; j < fieldCols.length; j++)\n                         cols.add(fieldCols[j]);\n@@ -820,8 +816,12 @@ protected void resolveMapping(boolean runtime) {\n         FieldMapping[] fms = getFieldMappings();\n         for (int i = 0; i < fms.length; i++) {\n             if (fms[i].getDefiningMetaData() == this) {\n-                if (fms[i].getForeignKey() != null &&\n-                    fms[i].getStrategy() instanceof RelationFieldStrategy) {\n+                boolean fill =\n+                    getMappingRepository().getMappingDefaults()\n+                        .defaultMissingInfo();\n+                ForeignKey fk = fms[i].getForeignKey();\n+                if (fill && fk != null && \n+                    fk.getPrimaryKeyColumns().length == 0) { \n                     // set resolve mode to force this field mapping to be \n                     // resolved again. The need to resolve again occurs when \n                     // a primary key is a relation field with the foreign key\n@@ -831,10 +831,9 @@ protected void resolveMapping(boolean runtime) {\n                     // field, the foreign key will be constructed. However, \n                     // the primary key of the parent entity may not have been \n                     // resolved yet, resulting in missing informaiton in the fk\n-                    fms[i].setResolve(MODE_META); \n-\n-                    // set strategy to null to force fk to be re-constructed\n-                    fms[i].setStrategy(null, false); \n+                    fms[i].setResolve(MODE_META);\n+                    fms[i].getStrategy().map(false);\n+                 \n                 }                \n                 fms[i].resolve(MODE_MAPPING);\n             }"}]}

