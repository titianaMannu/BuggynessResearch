{"sha":"5f9f9124b1082e161e222bf002918cb8b6857677","node_id":"MDY6Q29tbWl0MjA2MzY0OjVmOWY5MTI0YjEwODJlMTYxZTIyMmJmMDAyOTE4Y2I4YjY4NTc2Nzc=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-07-08T17:48:00Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-07-08T17:48:00Z"},"message":"OPENJPA-1029:\nSQLServerDictionary can handle Microsoft JDBC driver. Changes originally\nmade to trunk in revision 765841,now merged to 1.0.x.\nSubmitted by: Donald Woods\n\tmodified:   openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@792242 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"985fad547314bc131aebd48dd559fa8c874b5002","url":"https://api.github.com/repos/apache/openjpa/git/trees/985fad547314bc131aebd48dd559fa8c874b5002"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5f9f9124b1082e161e222bf002918cb8b6857677","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5f9f9124b1082e161e222bf002918cb8b6857677","html_url":"https://github.com/apache/openjpa/commit/5f9f9124b1082e161e222bf002918cb8b6857677","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5f9f9124b1082e161e222bf002918cb8b6857677/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"da880cef0cf77da43fc9c352e194aa0b25579a41","url":"https://api.github.com/repos/apache/openjpa/commits/da880cef0cf77da43fc9c352e194aa0b25579a41","html_url":"https://github.com/apache/openjpa/commit/da880cef0cf77da43fc9c352e194aa0b25579a41"}],"stats":{"total":86,"additions":55,"deletions":31},"files":[{"sha":"7f9a4bd4ec80d4b4c7340139c243d5540900acac","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","status":"modified","additions":55,"deletions":31,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/5f9f9124b1082e161e222bf002918cb8b6857677/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/5f9f9124b1082e161e222bf002918cb8b6857677/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java?ref=5f9f9124b1082e161e222bf002918cb8b6857677","patch":"@@ -64,49 +64,73 @@ public SQLServerDictionary() {\n     public void connectedConfiguration(Connection conn)\n         throws SQLException {\n         super.connectedConfiguration(conn);\n-\n+        boolean requiresWarnings = true;\n         DatabaseMetaData meta = conn.getMetaData();\n         String driverName = meta.getDriverName();\n         String url = meta.getURL();\n         if (driverVendor == null) {\n-            if (\"NetDirect JSQLConnect\".equals(driverName))\n-                driverVendor = VENDOR_NETDIRECT;\n-            else if (driverName != null && driverName.startsWith(\"jTDS\"))\n-                driverVendor = VENDOR_JTDS;\n-            else if (\"SQLServer\".equals(driverName)) {\n-                if (url != null && url.startsWith(\"jdbc:microsoft:sqlserver:\"))\n-                    driverVendor = VENDOR_MICROSOFT;\n-                else if (url != null\n-                    && url.startsWith(\"jdbc:datadirect:sqlserver:\"))\n-                    driverVendor = VENDOR_DATADIRECT;\n-                else\n-                    driverVendor = VENDOR_OTHER;\n-            } else\n+            if (driverName != null) {\n+                if (driverName.startsWith(\"Microsoft SQL Server\")) {\n+                    // v1.1, 1.2 or 2.0 driver\n+                    driverVendor = VENDOR_MICROSOFT;                \n+                    // serverMajorVersion of 8==2000, 9==2005, 10==2008\n+                    if (meta.getDatabaseMajorVersion() >= 9)\n+                        supportsXMLColumn = true;\n+                    if (meta.getDriverMajorVersion() >= 2) {\n+                        // see http://blogs.msdn.com/jdbcteam/archive/2007/05/\\\n+                        // 02/what-is-adaptive-response-buffering-and-why-\\\n+                        // should-i-use-it.aspx\n+                        // 2.0 driver connectURL automatically includes \n+                        // responseBuffering=adaptive\n+                        // and disableStatementPooling=true\n+                        requiresWarnings = false;\n+                    }\n+                } else {\n+                    if (\"NetDirect JSQLConnect\".equals(driverName))\n+                        driverVendor = VENDOR_NETDIRECT;\n+                    else if (driverName.startsWith(\"jTDS\"))\n+                        driverVendor = VENDOR_JTDS;\n+                    else if (\"SQLServer\".equals(driverName)) {\n+                        if (url != null &&\n+                            url.startsWith(\"jdbc:microsoft:sqlserver:\"))\n+                            driverVendor = VENDOR_MICROSOFT;\n+                        else if (url != null\n+                            && url.startsWith(\"jdbc:datadirect:sqlserver:\"))\n+                            driverVendor = VENDOR_DATADIRECT;\n+                        else\n+                            driverVendor = VENDOR_OTHER;\n+                    }\n+                    // old way of determining xml support\n+                    if (driverName.indexOf(platform) != -1) {\n+                        String versionString = driverName.\n+                            substring(platform.length() + 1);\n+                        if (versionString.indexOf(\" \") != -1)\n+                            versionString = versionString.substring(0,\n+                                versionString.indexOf(\" \"));\n+                        int version = Integer.parseInt(versionString);\n+                        if (version >= 2005)\n+                            supportsXMLColumn = true;\n+                    }\n+                }\n+            } else {\n                 driverVendor = VENDOR_OTHER;\n-            if (driverName.indexOf(platform) != -1) {\n-                String versionString = driverName.\n-                    substring(platform.length() + 1);\n-                if (versionString.indexOf(\" \") != -1)\n-                    versionString = versionString.substring(0,\n-                        versionString.indexOf(\" \"));\n-                int version = Integer.parseInt(versionString);\n-                if (version >= 2005)\n-                    supportsXMLColumn = true;\n             }\n         }\n \n-        // warn about using cursors\n-        if ((VENDOR_MICROSOFT.equalsIgnoreCase(driverVendor)\n+        // warn about not using cursors for pre-2.0 MS driver\n+        // as connectURL includes selectMethod=direct\n+        if (((VENDOR_MICROSOFT.equalsIgnoreCase(driverVendor)\n+            && requiresWarnings) \n             || VENDOR_DATADIRECT.equalsIgnoreCase(driverVendor))\n-            && url.toLowerCase().indexOf(\"selectmethod=cursor\") == -1)\n+            && (url.toLowerCase().indexOf(\"selectmethod=cursor\") == -1))\n             log.warn(_loc.get(\"sqlserver-cursor\", url));\n \n-        // warn about prepared statement caching if using ms driver\n+        // warn about prepared statement caching if using pre-2.0 MS drivers\n+        // as connectURL includes responseBuffering=full\n         String props = conf.getConnectionFactoryProperties();\n-        if (props == null)\n-            props = \"\";\n-        if (VENDOR_MICROSOFT.equalsIgnoreCase(driverVendor)\n-            && props.toLowerCase().indexOf(\"maxcachedstatements=0\") == -1)\n+        if ((props != null) && \n+            VENDOR_MICROSOFT.equalsIgnoreCase(driverVendor) && requiresWarnings\n+            && (props.toLowerCase().indexOf(\"maxcachedstatements=0\") == -1))\n             log.warn(_loc.get(\"sqlserver-cachedstmnts\"));\n     }\n "}]}

