{"sha":"5fafa802aa71b6f07aa99570c9ba4e73245e937c","node_id":"MDY6Q29tbWl0MjA2MzY0OjVmYWZhODAyYWE3MWI2ZjA3YWE5OTU3MGM5YmE0ZTczMjQ1ZTkzN2M=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2011-11-09T19:12:34Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2011-11-09T19:12:34Z"},"message":"OPENJPA-2069 Update db sequence's INCREMENT BY value to match the allocationSize specified in @SequenceGenerator\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1199921 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b16c7d944ab923fb6a9363fd81599c03bdd97e42","url":"https://api.github.com/repos/apache/openjpa/git/trees/b16c7d944ab923fb6a9363fd81599c03bdd97e42"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/5fafa802aa71b6f07aa99570c9ba4e73245e937c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/5fafa802aa71b6f07aa99570c9ba4e73245e937c","html_url":"https://github.com/apache/openjpa/commit/5fafa802aa71b6f07aa99570c9ba4e73245e937c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/5fafa802aa71b6f07aa99570c9ba4e73245e937c/comments","author":null,"committer":null,"parents":[{"sha":"d64a3e5fdbc286694ad644ab0dfc460307cd1159","url":"https://api.github.com/repos/apache/openjpa/commits/d64a3e5fdbc286694ad644ab0dfc460307cd1159","html_url":"https://github.com/apache/openjpa/commit/d64a3e5fdbc286694ad644ab0dfc460307cd1159"}],"stats":{"total":85,"additions":60,"deletions":25},"files":[{"sha":"9ede96ab3ae069248a53a2e194edb2355ac1455a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","status":"modified","additions":33,"deletions":7,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/5fafa802aa71b6f07aa99570c9ba4e73245e937c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/5fafa802aa71b6f07aa99570c9ba4e73245e937c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java?ref=5fafa802aa71b6f07aa99570c9ba4e73245e937c","patch":"@@ -80,7 +80,9 @@\n     private long _maxValue = -1;\n \n     private DBIdentifier _schema = DBIdentifier.NULL;\n-        \n+\n+    private boolean alterIncrementBy = false;\n+\n     /**\n      * The sequence name. Defaults to <code>OPENJPA_SEQUENCE</code>.\n      */\n@@ -191,13 +193,13 @@ public void endConfiguration() {\n     @Override\n     protected synchronized Object nextInternal(JDBCStore store, ClassMapping mapping)\n         throws SQLException {\n-        if (_nextValue < _maxValue) {\n-            long result = _nextValue;\n-            _nextValue += _increment;\n-            return result;\n+        if (!alterIncrementBy) {\n+            allocateInternal(0, store, mapping);\n+            alterIncrementBy = true;\n+        }\n+        if (_nextValue >= _maxValue) {\n+            allocateInternal(0, store, mapping);\n         }\n-\n-        allocateInternal(0, store, mapping);\n         long result = _nextValue;\n         _nextValue += _increment;\n         return result;\n@@ -214,6 +216,10 @@ protected synchronized void allocateInternal(int additional, JDBCStore store, Cl\n         throws SQLException {\n         Connection conn = getConnection(store);\n         try {\n+            if (!alterIncrementBy) {\n+                DBDictionary dict = _conf.getDBDictionaryInstance();\n+                udpateSql(conn, dict.getAlterSequenceSQL(_seq));\n+            }\n             _nextValue = getSequence(conn);\n             _maxValue = _nextValue + _allocate * _increment;\n         } finally {\n@@ -305,6 +311,26 @@ private long getSequence(Connection conn)\n         }\n     }\n \n+    private int udpateSql(Connection conn, String sql) throws SQLException {\n+        DBDictionary dict = _conf.getDBDictionaryInstance();\n+        PreparedStatement stmnt = null;\n+        int rc = -1;\n+        try {\n+            stmnt = conn.prepareStatement(sql);\n+            dict.setTimeouts(stmnt, _conf, false);\n+            rc = stmnt.executeUpdate();\n+        } finally {\n+            // clean up our resources\n+            if (stmnt != null) {\n+                try {\n+                    stmnt.close();\n+                } catch (SQLException se) {\n+                }\n+            }\n+        }\n+        return rc;\n+    }\n+\n     /////////\n     // Main\n     /////////"},{"sha":"07df88169ae17908392bce9c17fdd564b284aa8d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":22,"deletions":14,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/5fafa802aa71b6f07aa99570c9ba4e73245e937c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/5fafa802aa71b6f07aa99570c9ba4e73245e937c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=5fafa802aa71b6f07aa99570c9ba4e73245e937c","patch":"@@ -3406,28 +3406,36 @@ protected StringBuilder comment(StringBuilder buf, String comment) {\n      * [ INCREMENT BY &lt;increment&gt;]</code> by default.\n      */\n     public String[] getCreateSequenceSQL(Sequence seq) {\n+        return commonCreateAlterSequenceSQL(seq, true);\n+    }\n+\n+    public String getAlterSequenceSQL(Sequence seq) {\n+        return commonCreateAlterSequenceSQL(seq, false)[0];\n+    }\n+\n+    private String[] commonCreateAlterSequenceSQL(Sequence seq, boolean create) {\n         if (nextSequenceQuery == null)\n             return null;\n         \n-    \t//We need a place to detect if the user is setting the 'useNativeSequenceCache' property.\n-    \t//While in previous releases this property had meaning, it is no longer useful\n-    \t//given the code added via OPENJPA-1327.  As such, we need to warn user's the\n-    \t//property no longer has meaning.  While it would be nice to have a better way\n-    \t//to detect if the useNativeSequenceCache property has been set, the best we can do\n-    \t//is detect the variable in this code path as this is the path a user's code\n-    \t//would go down if they are still executing code which actually made use of\n-    \t//the support provided via setting useNativeSequenceCache.\n-    \tif (!useNativeSequenceCache && logNativeSequenceCacheWarning){\n-    \t\tlog.warn(_loc.get(\"sequence-cache-warning\"));\n-    \t\tlogNativeSequenceCacheWarning=false;\n-    \t}        \n+        //We need a place to detect if the user is setting the 'useNativeSequenceCache' property.\n+        //While in previous releases this property had meaning, it is no longer useful\n+        //given the code added via OPENJPA-1327.  As such, we need to warn user's the\n+        //property no longer has meaning.  While it would be nice to have a better way\n+        //to detect if the useNativeSequenceCache property has been set, the best we can do\n+        //is detect the variable in this code path as this is the path a user's code\n+        //would go down if they are still executing code which actually made use of\n+        //the support provided via setting useNativeSequenceCache.\n+        if (!useNativeSequenceCache && logNativeSequenceCacheWarning){\n+            log.warn(_loc.get(\"sequence-cache-warning\"));\n+            logNativeSequenceCacheWarning=false;\n+        }        \n \n         StringBuilder buf = new StringBuilder();\n-        buf.append(\"CREATE SEQUENCE \");\n+        buf.append(create ? \"CREATE\" : \"ALTER\").append(\" SEQUENCE \");\n         String seqName = checkNameLength(getFullName(seq), maxTableNameLength, \n                 \"long-seq-name\");\n         buf.append(seqName);\n-        if (seq.getInitialValue() != 0)\n+        if (create && seq.getInitialValue() != 0)\n             buf.append(\" START WITH \").append(seq.getInitialValue());\n         if ((seq.getIncrement() > 1) || (seq.getAllocate() > 1))\n             buf.append(\" INCREMENT BY \").append(seq.getIncrement() * seq.getAllocate());"},{"sha":"67d93a9299431055df145ba967a1a7af106c6c62","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestNativeSeqGenerator.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/5fafa802aa71b6f07aa99570c9ba4e73245e937c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestNativeSeqGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/5fafa802aa71b6f07aa99570c9ba4e73245e937c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestNativeSeqGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestNativeSeqGenerator.java?ref=5fafa802aa71b6f07aa99570c9ba4e73245e937c","patch":"@@ -79,11 +79,12 @@ public void testAllocationSize() {\n         em.getTransaction().commit();\n \n         // Since allocationSize has a default of 50, we expect 2 sequence fetches and 51 INSERTs.\n-        assertEquals(\"53 statements should be executed.\", 53, getSQLCount());\n-        String[] statements = new String[53];\n-        statements[0] = \".*\";\n+        assertEquals(\"54 statements should be executed.\", 54, getSQLCount());\n+        String[] statements = new String[54];\n+        statements[0] = \"ALTER .*\";\n         statements[1] = \".*\";\n-        for (int i = 2; i < 53; i++) {\n+        statements[2] = \".*\";\n+        for (int i = 3; i < 54; i++) {\n             statements[i] = \"INSERT .*\";\n         }\n         assertAllExactSQLInOrder(statements);"}]}

