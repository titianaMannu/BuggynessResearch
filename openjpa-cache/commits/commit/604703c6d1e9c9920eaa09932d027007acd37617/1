{"sha":"604703c6d1e9c9920eaa09932d027007acd37617","node_id":"MDY6Q29tbWl0MjA2MzY0OjYwNDcwM2M2ZDFlOWM5OTIwZWFhMDk5MzJkMDI3MDA3YWNkMzc2MTc=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-07-28T19:58:44Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-07-28T19:58:44Z"},"message":"Got all tests passing.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@426658 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e8390e62b73a11674cf4d160cc9ec8f54189fb6d","url":"https://api.github.com/repos/apache/openjpa/git/trees/e8390e62b73a11674cf4d160cc9ec8f54189fb6d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/604703c6d1e9c9920eaa09932d027007acd37617","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/604703c6d1e9c9920eaa09932d027007acd37617","html_url":"https://github.com/apache/openjpa/commit/604703c6d1e9c9920eaa09932d027007acd37617","comments_url":"https://api.github.com/repos/apache/openjpa/commits/604703c6d1e9c9920eaa09932d027007acd37617/comments","author":null,"committer":null,"parents":[{"sha":"1a6d7d547cdbf79c6bc06c93b6e636f167f00fb9","url":"https://api.github.com/repos/apache/openjpa/commits/1a6d7d547cdbf79c6bc06c93b6e636f167f00fb9","html_url":"https://github.com/apache/openjpa/commit/1a6d7d547cdbf79c6bc06c93b6e636f167f00fb9"}],"stats":{"total":124,"additions":102,"deletions":22},"files":[{"sha":"5770b12c73a835a78bc03b3dceb0b64c89cd8246","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/ConfigurationTestConfigurationProvider.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/604703c6d1e9c9920eaa09932d027007acd37617/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/ConfigurationTestConfigurationProvider.java","raw_url":"https://github.com/apache/openjpa/raw/604703c6d1e9c9920eaa09932d027007acd37617/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/ConfigurationTestConfigurationProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/ConfigurationTestConfigurationProvider.java?ref=604703c6d1e9c9920eaa09932d027007acd37617","patch":"@@ -0,0 +1,88 @@\n+package org.apache.openjpa.lib.conf.test;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.MissingResourceException;\n+import java.util.Properties;\n+\n+import org.apache.openjpa.lib.conf.MapConfigurationProvider;\n+\n+/**\n+ * Configuration provider used in testing.\n+ *\n+ * @author Abe White\n+ */\n+public class ConfigurationTestConfigurationProvider\n+    extends MapConfigurationProvider {\n+\n+    public ConfigurationTestConfigurationProvider() {\n+        super(null);\n+    }\n+\n+    public boolean loadDefaults(ClassLoader loader)\n+        throws IOException {\n+        return load(null, loader);\n+    }\n+\n+    public boolean load(String rsrc, ClassLoader loader)\n+        throws IOException {\n+        if (rsrc == null)\n+            rsrc = System.getProperty(\"openjpatest.properties\");\n+        if (rsrc == null || !rsrc.endsWith(\".properties\"))\n+            return false;\n+\n+        URL url = findResource(rsrc, loader);\n+        if (url == null)\n+            throw new MissingResourceException(rsrc, getClass().getName(), \n+                rsrc);\n+\n+        InputStream in = url.openStream();\n+        Properties props = new Properties();\n+        if (in != null) {\n+            try {\n+                props.load(in);\n+                addProperties(props);\n+                return true;\n+            } finally {\n+                try {\n+                    in.close();\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Locate the given resource.\n+     */\n+    private URL findResource(String rsrc, ClassLoader loader)\n+        throws IOException {\n+        if (loader != null)\n+            return loader.getResource(rsrc);\n+\n+        // in jbuilder the classloader can be null\n+        URL url = null;\n+        loader = getClass().getClassLoader();\n+        if (loader != null)\n+            url = loader.getResource(rsrc);\n+        if (url == null) {\n+            loader = Thread.currentThread().getContextClassLoader();\n+            if (loader != null)\n+                url = loader.getResource(rsrc);\n+        }\n+        if (url == null) {\n+            loader = ClassLoader.getSystemClassLoader();\n+            if (loader != null)\n+                url = loader.getResource(rsrc);\n+        }\n+        return url;\n+    }\n+\n+    public boolean load(File file)\n+        throws IOException {\n+        return false;\n+    }\n+}"},{"sha":"5033413f43e243aa972b7c6e93b1aca568cec6c5","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java","status":"modified","additions":11,"deletions":20,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/604703c6d1e9c9920eaa09932d027007acd37617/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/604703c6d1e9c9920eaa09932d027007acd37617/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java?ref=604703c6d1e9c9920eaa09932d027007acd37617","patch":"@@ -43,24 +43,19 @@ public TestConfigurationImpl(String test) {\n     }\n \n     public void setUp() {\n-        _def = System.getProperty(\"openjpa.properties\");\n-        System.setProperty(\"openjpa.properties\", \"test.properties\");\n+        System.setProperty(\"openjpatest.properties\", \"test.properties\");\n     }\n \n     public void tearDown() throws Exception {\n-    \tif (_def != null)\n-    \t\tSystem.setProperty(\"openjpa.properties\", _def);\n-\n+        System.setProperty(\"openjpatest.properties\", \"\");\n     \tsuper.tearDown();\n     }\n \n     /**\n      * Test that default properties are found and loaded.\n-     * ### This test method requires some sort of ConfigurationProvider\n-     * ### to be available in the openjpa-lib module, which is not the case.\n      */\n     public void testDefaults() {\n-        System.setProperty(\"sysKey\", \"sysvalue\");\n+        System.setProperty(\"openjpa.sysKey\", \"sysvalue\");\n         assertNull(_conf.getTestKey());\n         assertNull(_conf.getSysKey());\n         assertNull(_conf.getPluginKey());\n@@ -74,16 +69,16 @@ public void testDefaults() {\n         // override the properties location to a non-existant value\n         _conf.setTestKey(null);\n         _conf.setSysKey(null);\n-        System.setProperty(\"openjpa.properties\", \"foo.properties\");\n+        System.setProperty(\"openjpatest.properties\", \"foo.properties\");\n         try {\n             assertTrue(!_conf.loadDefaults());\n             fail(\"Should have thrown exception for missing resource.\");\n         } catch (MissingResourceException mre) {\n         }\n \n         // set back for remainder of tests\n-        System.setProperty(\"openjpa.properties\", \"test.properties\");\n-        System.setProperty(\"pluginKey\", \"java.lang.Object\");\n+        System.setProperty(\"openjpatest.properties\", \"test.properties\");\n+        System.setProperty(\"openjpa.pluginKey\", \"java.lang.Object\");\n         assertTrue(_conf.loadDefaults());\n         assertEquals(\"testvalue\", _conf.getTestKey());\n         assertEquals(\"sysvalue\", _conf.getSysKey());\n@@ -99,15 +94,15 @@ public void testToProperties() {\n         assertTrue(_conf.loadDefaults());\n         assertEquals(\"testvalue\", _conf.getTestKey());\n         Map props = _conf.toProperties(false);\n-        assertEquals(\"testvalue\", props.get(\"testKey\"));\n-        assertFalse(props.containsKey(\"objectKey\"));\n+        assertEquals(\"testvalue\", props.get(\"openjpa.testKey\"));\n+        assertFalse(props.containsKey(\"openjpa.objectKey\"));\n         _conf.setTestKey(\"foo\");\n         _conf.setPluginKey(new Object());\n         _conf.setObjectKey(new Object());\n         props = _conf.toProperties(false);\n-        assertEquals(\"foo\", props.get(\"testKey\"));\n-        assertEquals(\"java.lang.Object\", props.get(\"pluginKey\"));\n-        assertFalse(props.containsKey(\"objectKey\"));\n+        assertEquals(\"foo\", props.get(\"openjpa.testKey\"));\n+        assertEquals(\"java.lang.Object\", props.get(\"openjpa.pluginKey\"));\n+        assertFalse(props.containsKey(\"openjpa.objectKey\"));\n     }\n \n     /**\n@@ -263,10 +258,6 @@ public ConfigurationTest(boolean canSetPlugin) {\n             _objectKey = addObject(\"objectKey\");\n         }\n \n-        public String getProductName() {\n-            return \"test\";\n-        }\n-\n         public String getTestKey() {\n             return _testKey.get();\n         }"},{"sha":"21fff2124c56b9d0983cd120de88ddedb4f6eb3c","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/xml/TestDocTypeReader.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/604703c6d1e9c9920eaa09932d027007acd37617/openjpa-lib/src/test/java/org/apache/openjpa/lib/xml/TestDocTypeReader.java","raw_url":"https://github.com/apache/openjpa/raw/604703c6d1e9c9920eaa09932d027007acd37617/openjpa-lib/src/test/java/org/apache/openjpa/lib/xml/TestDocTypeReader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/xml/TestDocTypeReader.java?ref=604703c6d1e9c9920eaa09932d027007acd37617","patch":"@@ -51,7 +51,7 @@ public TestDocTypeReader(String test) {\n     public void setUp() {\n         StringBuffer docType = new StringBuffer();\n         docType.append(\"<!DOCTYPE foo [\\n\");\n-        docType.append(\"\\t<!ELEMENT foo(bar)>\\n\");\n+        docType.append(\"\\t<!ELEMENT foo (bar)>\\n\");\n         docType.append(\"\\t<!ELEMENT bar EMPTY>\\n\");\n         docType.append(\"\\t<!ATTLIST bar attr CDATA \\\"value\\\">\\n\");\n         docType.append(\"\\t<!ATTLIST bar attr2 CDATA \\\"value2\\\">\\n\");"},{"sha":"902d0f8c4eea70b1d704ba6287a3509bcc0c9af1","filename":"openjpa-lib/src/test/resources/META-INF/services/org.apache.openjpa.lib.conf.ConfigurationProvider","status":"added","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/604703c6d1e9c9920eaa09932d027007acd37617/openjpa-lib/src/test/resources/META-INF/services/org.apache.openjpa.lib.conf.ConfigurationProvider","raw_url":"https://github.com/apache/openjpa/raw/604703c6d1e9c9920eaa09932d027007acd37617/openjpa-lib/src/test/resources/META-INF/services/org.apache.openjpa.lib.conf.ConfigurationProvider","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/resources/META-INF/services/org.apache.openjpa.lib.conf.ConfigurationProvider?ref=604703c6d1e9c9920eaa09932d027007acd37617","patch":"@@ -0,0 +1 @@\n+org.apache.openjpa.lib.conf.test.ConfigurationTestConfigurationProvider"},{"sha":"aeadb30e2505692d4fca789c6d9243a3028850d7","filename":"openjpa-lib/src/test/resources/org/apache/openjpa/lib/xml/formatted-result.xml","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/604703c6d1e9c9920eaa09932d027007acd37617/openjpa-lib/src/test/resources/org/apache/openjpa/lib/xml/formatted-result.xml","raw_url":"https://github.com/apache/openjpa/raw/604703c6d1e9c9920eaa09932d027007acd37617/openjpa-lib/src/test/resources/org/apache/openjpa/lib/xml/formatted-result.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/resources/org/apache/openjpa/lib/xml/formatted-result.xml?ref=604703c6d1e9c9920eaa09932d027007acd37617","patch":"@@ -1,5 +1,4 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-\n <root attr1=\"1\" attr2=\"2\">\n     <list/>\n     <list>"},{"sha":"9102185996db4cdeaedc003dafe69021a5b8e3f6","filename":"openjpa-lib/src/test/resources/test.properties","status":"added","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/604703c6d1e9c9920eaa09932d027007acd37617/openjpa-lib/src/test/resources/test.properties","raw_url":"https://github.com/apache/openjpa/raw/604703c6d1e9c9920eaa09932d027007acd37617/openjpa-lib/src/test/resources/test.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/resources/test.properties?ref=604703c6d1e9c9920eaa09932d027007acd37617","patch":"@@ -0,0 +1 @@\n+openjpa.testKey=testvalue"}]}

