{"sha":"6055a34b4215b472dce012d28ead7a2a7c6f8f19","node_id":"MDY6Q29tbWl0MjA2MzY0OjYwNTVhMzRiNDIxNWI0NzJkY2UwMTJkMjhlYWQ3YTJhN2M2ZjhmMTk=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-01-10T23:06:42Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-01-10T23:06:42Z"},"message":"OPENJPA-100: <jar-file> processing bugfix, and logging improvements\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@495028 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5e1cd4737368c9064fb6d33b047efd7b031157c1","url":"https://api.github.com/repos/apache/openjpa/git/trees/5e1cd4737368c9064fb6d33b047efd7b031157c1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6055a34b4215b472dce012d28ead7a2a7c6f8f19","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6055a34b4215b472dce012d28ead7a2a7c6f8f19","html_url":"https://github.com/apache/openjpa/commit/6055a34b4215b472dce012d28ead7a2a7c6f8f19","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6055a34b4215b472dce012d28ead7a2a7c6f8f19/comments","author":null,"committer":null,"parents":[{"sha":"9851f6274855162bc6dd6e95cd06adf782c5e1a2","url":"https://api.github.com/repos/apache/openjpa/commits/9851f6274855162bc6dd6e95cd06adf782c5e1a2","html_url":"https://github.com/apache/openjpa/commit/9851f6274855162bc6dd6e95cd06adf782c5e1a2"}],"stats":{"total":51,"additions":50,"deletions":1},"files":[{"sha":"87257530e51137c4ee794a382f2427c932009f62","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/6055a34b4215b472dce012d28ead7a2a7c6f8f19/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/6055a34b4215b472dce012d28ead7a2a7c6f8f19/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java?ref=6055a34b4215b472dce012d28ead7a2a7c6f8f19","patch":"@@ -604,12 +604,18 @@ private Set parsePersistentTypeNames(ClassLoader loader)\n             for (Iterator itr = files.iterator(); itr.hasNext();) {\n                 file = (File) itr.next();\n                 if (file.isDirectory()) {\n+                    if (log.isTraceEnabled())\n+                        log.trace(_loc.get(\"scanning-directory\", file));\n                     scan(new FileMetaDataIterator(dir, newMetaDataFilter()),\n                         cparser, names, true);\n                 } else if (file.getName().endsWith(\".jar\")) {\n+                    if (log.isTraceEnabled())\n+                        log.trace(_loc.get(\"scanning-jar\", file));\n                     scan(new ZipFileMetaDataIterator(new ZipFile(file),\n                         newMetaDataFilter()), cparser, names, true);\n                 } else {\n+                    if (log.isTraceEnabled())\n+                        log.trace(_loc.get(\"scanning-file\", file));\n                     clss = cparser.parseTypeNames(new FileMetaDataIterator\n                         (file));\n                     names.addAll(Arrays.asList(clss));\n@@ -624,9 +630,19 @@ private Set parsePersistentTypeNames(ClassLoader loader)\n                 url = (URL) itr.next();\n                 if (\"jar\".equals(url.getProtocol())\n                     && url.getPath().endsWith(\"!/\")) {\n+                    if (log.isTraceEnabled())\n+                        log.trace(_loc.get(\"scanning-jar-url\", url));\n                     scan(new ZipFileMetaDataIterator(url,\n                         newMetaDataFilter()), cparser, names, true);\n+                } else if (url.getPath().endsWith(\".jar\")) {\n+                    if (log.isTraceEnabled())\n+                        log.trace(_loc.get(\"scanning-jar-at-url\", url));\n+                    scan(new ZipStreamMetaDataIterator(\n+                        new ZipInputStream(url.openStream()),\n+                        newMetaDataFilter()), cparser, names, true);\n                 } else {\n+                    if (log.isTraceEnabled())\n+                        log.trace(_loc.get(\"scanning-url\", url));\n                     clss = cparser.parseTypeNames(new URLMetaDataIterator\n                         (url));\n                     names.addAll(Arrays.asList(clss));\n@@ -642,11 +658,15 @@ private Set parsePersistentTypeNames(ClassLoader loader)\n                 if (rsrc.endsWith(\".jar\")) {\n                     url = loader.getResource(rsrc);\n                     if (url != null) {\n+                        if (log.isTraceEnabled())\n+                            log.trace(_loc.get(\"scanning-jar-stream-url\", url));\n                         scan(new ZipStreamMetaDataIterator\n                             (new ZipInputStream(url.openStream()),\n                                 newMetaDataFilter()), cparser, names, true);\n                     }\n                 } else {\n+                    if (log.isTraceEnabled())\n+                        log.trace(_loc.get(\"scanning-resource\", rsrc));\n                     mitr = new ResourceMetaDataIterator(rsrc, loader);\n                     while (mitr.hasNext()) {\n                         url = (URL) mitr.next();"},{"sha":"4d079c96b8c23d49e9853a6c5a2e64df1c538f21","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/6055a34b4215b472dce012d28ead7a2a7c6f8f19/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/6055a34b4215b472dce012d28ead7a2a7c6f8f19/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties?ref=6055a34b4215b472dce012d28ead7a2a7c6f8f19","patch":"@@ -281,3 +281,12 @@ no-metadatafactory: MetaDataFactory could not be configured \\\n     of the task''s nested <config> element. This can also occur if your \\\n     OpenJPA distribution jars are corrupt, or if your security policy is \\\n     overly strict.\n+scanning-directory: Scanning directory \"{0}\" for persistent types.\n+scanning-jar: Scanning jar \"{0}\" for persistent types.\n+scanning-file: Scanning file \"{0}\" for persistent types.\n+scanning-jar-url: Scanning jar: URL \"{0}\" for persistent types.\n+scanning-jar-at-url: Scanning jar file from URL \"{0}\" for persistent types.\n+scanning-url: Scanning URL \"{0}\" for persistent types.\n+scanning-zip-stream-url: Scanning jar in stream from URL \"{0}\" for persistent \\\n+\ttypes.\n+scanning-resource: Scanning resource \"{0}\" for persistent types."},{"sha":"797d45eeebb7e1c810be71985d4cf2b5790627b1","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/6055a34b4215b472dce012d28ead7a2a7c6f8f19/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/6055a34b4215b472dce012d28ead7a2a7c6f8f19/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java?ref=6055a34b4215b472dce012d28ead7a2a7c6f8f19","patch":"@@ -245,9 +245,22 @@ private URL findXML(Class cls) {\n \n     @Override\n     protected void mapPersistentTypeNames(Object rsrc, String[] names) {\n-        if (!(rsrc instanceof URL) || rsrc.toString().endsWith(\".class\"))\n+        if (!(rsrc instanceof URL)) {\n+            if (log.isTraceEnabled())\n+                log.trace(\n+                    _loc.get(\"map-persistent-types-skipping-non-url\", rsrc));\n             return;\n+        } else if (rsrc.toString().endsWith(\".class\")) {\n+            if (log.isTraceEnabled())\n+                log.trace(\n+                    _loc.get(\"map-persistent-types-skipping-class\", rsrc));\n+            return;\n+        }\n \n+        if (log.isTraceEnabled())\n+            log.trace(_loc.get(\n+                \"map-persistent-type-names\", rsrc, Arrays.asList(names)));\n+        \n         if (_xml == null)\n             _xml = new HashMap<URL, Set>();\n         _xml.put((URL) rsrc, new HashSet(Arrays.asList(names)));"},{"sha":"e8c9a8cc59ae970e252cb619635539f81b772dda","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/6055a34b4215b472dce012d28ead7a2a7c6f8f19/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/6055a34b4215b472dce012d28ead7a2a7c6f8f19/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties?ref=6055a34b4215b472dce012d28ead7a2a7c6f8f19","patch":"@@ -110,6 +110,13 @@ cant-convert-brokerfactory: Unable to convert EntityManagerFactory of type \\\n     \"{0}\" into a BrokerFactory.\n cant-convert-broker: Unable to convert EntityManager of type \"{0}\" into a \\\n     Broker.\n+map-persistent-type-names: Mapping resource location \"{0}\" to persistent \\\n+\ttypes \"{1}\".\n+map-persistent-types-skipping-non-url: Skipping mapping for location \"{0}\" \\\n+\tsince it is not a URL.\n+map-persistent-types-skipping-class: Skipping mapping for location \"{0}\" since \\\n+\tit is a class, and will not need to be re-parsed later.\n+    \n EntityManagerFactory-name: EntityManagerFactory implementation\n EntityManagerFactory-desc: Allows extension of standard \\\n     org.apache.openjpa.persistence.EntityManagerFactoryImpl for custom behavior."}]}

