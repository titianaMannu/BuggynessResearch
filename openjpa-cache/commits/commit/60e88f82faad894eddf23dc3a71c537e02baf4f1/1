{"sha":"60e88f82faad894eddf23dc3a71c537e02baf4f1","node_id":"MDY6Q29tbWl0MjA2MzY0OjYwZTg4ZjgyZmFhZDg5NGVkZGYyM2RjM2E3MWM1MzdlMDJiYWY0ZjE=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-10-18T17:30:48Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-10-18T17:30:48Z"},"message":"OPENJPA-1828: Query with expression IN (collection_valued_input_parameter) gives wrong result when executed the second time\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1023914 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7d1c455074d09e3176d50959d803998a3fa0beee","url":"https://api.github.com/repos/apache/openjpa/git/trees/7d1c455074d09e3176d50959d803998a3fa0beee"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/60e88f82faad894eddf23dc3a71c537e02baf4f1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/60e88f82faad894eddf23dc3a71c537e02baf4f1","html_url":"https://github.com/apache/openjpa/commit/60e88f82faad894eddf23dc3a71c537e02baf4f1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/60e88f82faad894eddf23dc3a71c537e02baf4f1/comments","author":null,"committer":null,"parents":[{"sha":"0f5c5291aef2e1bbf836ca638a7d01be1459560b","url":"https://api.github.com/repos/apache/openjpa/commits/0f5c5291aef2e1bbf836ca638a7d01be1459560b","html_url":"https://github.com/apache/openjpa/commit/0f5c5291aef2e1bbf836ca638a7d01be1459560b"}],"stats":{"total":44,"additions":43,"deletions":1},"files":[{"sha":"187c04cb93ba5415f554762090617ccb8d945d07","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/60e88f82faad894eddf23dc3a71c537e02baf4f1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","raw_url":"https://github.com/apache/openjpa/raw/60e88f82faad894eddf23dc3a71c537e02baf4f1/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java?ref=60e88f82faad894eddf23dc3a71c537e02baf4f1","patch":"@@ -27,6 +27,7 @@\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.Filters;\n import org.apache.openjpa.kernel.exps.Parameter;\n+import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.ImplHelper;\n \n /**\n@@ -38,6 +39,7 @@\n     extends Const\n     implements Parameter {\n \n+    private static final Localizer _loc = Localizer.forPackage(Param.class);\n     private final Object _key;\n     private Class _type = null;\n     private int _idx = -1;\n@@ -136,6 +138,10 @@ public void calculateValue(Select sel, ExpContext ctx, ExpState state,\n             pstate.sqlValue = mapping.toDataStoreValue(val,\n                 mapping.getPrimaryKeyColumns(), ctx.store);\n             pstate.otherLength = mapping.getPrimaryKeyColumns().length;\n+        } else if (val instanceof Collection) {\n+            throw new IllegalArgumentException(_loc.get(\n+                \"collection-param-not-allowed\", _key).toString());\n+            \n         } else\n             pstate.sqlValue = val;\n     }"},{"sha":"3a66ba63a894f4ac5871a6ef02a7201ec634012e","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/exps/localizer.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/60e88f82faad894eddf23dc3a71c537e02baf4f1/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/exps/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/60e88f82faad894eddf23dc3a71c537e02baf4f1/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/exps/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/exps/localizer.properties?ref=60e88f82faad894eddf23dc3a71c537e02baf4f1","patch":"@@ -50,3 +50,7 @@ type-in-expression-unsupported: The argument \"{0}\" in TYPE discriminator is in a\n collection-param-unsupported: The collection parameter used in IN expression is not supported \\\n     for table-per-class inheritance hierarchy or inheritance type joined strategy. \\\n     Use TYPE equal comparison(s) and combine them with OR operators for polymorphic query results.\n+collection-param-not-allowed: Invalid input parameter \"{0}\". \\\n+    A collection valued parameter syntax may incorrectly used in the query string. \\\n+    If the parameter is parenthesized, remove the parentheses and try again.\n+    \n\\ No newline at end of file"},{"sha":"dffe05f74694f1f7f5e0fa468b51adbda6074d68","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/60e88f82faad894eddf23dc3a71c537e02baf4f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/60e88f82faad894eddf23dc3a71c537e02baf4f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java?ref=60e88f82faad894eddf23dc3a71c537e02baf4f1","patch":"@@ -607,7 +607,7 @@ public void decorate(Query q) {\n     }\n     \n     public void testParameters5() {\n-        String jpql = \"SELECT c FROM Customer c Where c.status IN (:coll)\";\n+        String jpql = \"SELECT c FROM Customer c Where c.status IN :coll\";\n         \n         CriteriaQuery<Customer> q = cb.createQuery(Customer.class);\n         Root<Customer> c = q.from(Customer.class);"},{"sha":"eea912963b622da9227e1f74d4fdb2fe775742f4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","status":"modified","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/60e88f82faad894eddf23dc3a71c537e02baf4f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/60e88f82faad894eddf23dc3a71c537e02baf4f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java?ref=60e88f82faad894eddf23dc3a71c537e02baf4f1","patch":"@@ -228,6 +228,38 @@ public void tearDown() throws Exception {\n \t        em.close();\n \t\tsuper.tearDown();\n \t}\n+    \n+    public void testCollectionValuedParams() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String jpql = \"select c.name from Department c where c.name in (:names) order by c.name\";\n+        List<String> params = new ArrayList<String>();\n+        for (int i = 0; i < DEPARTMENT_NAMES.length; i++)\n+            params.add(DEPARTMENT_NAMES[i]);\n+\n+        List<String> rs = null;\n+        List<String> rs2 = null;\n+        try {\n+            rs = (List<String>) em.createQuery(jpql).setParameter(\"names\", params).getResultList();\n+        } catch (Exception e) {\n+            // as expected - syntax for collection valued parameter should be :names;\n+        }\n+        assertNull(rs);\n+\n+        try {\n+            rs2 = (List<String>) em.createQuery(jpql).setParameter(\"names\", params).getResultList();\n+        } catch (Exception e) {\n+            // as expected - syntax for collection valued parameter should be :names;\n+        }\n+        assertNull(rs2);\n+\n+        String jpql2 = \"select c.name from Company c where c.name in :names order by c.name\";\n+        List<String> params2 = new ArrayList<String>();\n+        for (int i = 0; i < COMPANY_NAMES.length; i++)\n+            params2.add(COMPANY_NAMES[i]);\n+        rs = (List<String>) em.createQuery(jpql2).setParameter(\"names\", params2).getResultList();\n+        rs2 = (List<String>) em.createQuery(jpql2).setParameter(\"names\", params2).getResultList();\n+        assertEquals(rs.size(), rs2.size());\n+    }\n \n     public void testCollectionValuedParameterOfEntities() {\n         OpenJPAEntityManager em = emf.createEntityManager();"}]}

