{"sha":"6128ddbc2d8477628e08c53363657f71b6fcca1a","node_id":"MDY6Q29tbWl0MjA2MzY0OjYxMjhkZGJjMmQ4NDc3NjI4ZTA4YzUzMzYzNjU3ZjcxYjZmY2NhMWE=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-31T18:01:19Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-31T18:01:19Z"},"message":"OPENJPA-266 load platform specific DBDictionary from dbdictionaryPlugin\nHelp committing Catalina's DBDictionaryFactory.patch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@561413 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4c685216c52fa4290ddba745b03507300d12f0ea","url":"https://api.github.com/repos/apache/openjpa/git/trees/4c685216c52fa4290ddba745b03507300d12f0ea"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6128ddbc2d8477628e08c53363657f71b6fcca1a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6128ddbc2d8477628e08c53363657f71b6fcca1a","html_url":"https://github.com/apache/openjpa/commit/6128ddbc2d8477628e08c53363657f71b6fcca1a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6128ddbc2d8477628e08c53363657f71b6fcca1a/comments","author":null,"committer":null,"parents":[{"sha":"a1d28857fa6cff6a6374b5f10d747b8538af9cdf","url":"https://api.github.com/repos/apache/openjpa/commits/a1d28857fa6cff6a6374b5f10d747b8538af9cdf","html_url":"https://github.com/apache/openjpa/commit/a1d28857fa6cff6a6374b5f10d747b8538af9cdf"}],"stats":{"total":58,"additions":25,"deletions":33},"files":[{"sha":"0c1f3ca0f322a1af83319615e15236956e84ec81","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","status":"modified","additions":25,"deletions":33,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/6128ddbc2d8477628e08c53363657f71b6fcca1a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","raw_url":"https://github.com/apache/openjpa/raw/6128ddbc2d8477628e08c53363657f71b6fcca1a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java?ref=6128ddbc2d8477628e08c53363657f71b6fcca1a","patch":"@@ -29,6 +29,7 @@\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.lib.conf.PluginValue;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n@@ -54,12 +55,6 @@\n  */\n public class DBDictionaryFactory {\n \n-    // pcl: can't use these classes directly because they rely on native libs\n-    private static final String ORACLE_DICT_NAME =\n-        \"org.apache.openjpa.jdbc.sql.OracleDictionary\";\n-    private static final String HSQL_DICT_NAME =\n-        \"org.apache.openjpa.jdbc.sql.HSQLDictionary\";\n-\n     private static final Localizer _loc = Localizer.forPackage\n         (DBDictionaryFactory.class);\n \n@@ -171,49 +166,53 @@ private static DBDictionary newDBDictionary(JDBCConfiguration conf,\n     /**\n      * Guess the dictionary class name to use based on the product string.\n      */\n-    private static String dictionaryClassForString(String prod, JDBCConfiguration conf) {\n+    private static String dictionaryClassForString(String prod\n+        , JDBCConfiguration conf) {\n         if (StringUtils.isEmpty(prod))\n             return null;\n         prod = prod.toLowerCase();\n \n+        PluginValue dbdictionaryPlugin = ((JDBCConfigurationImpl) conf)\n+            .dbdictionaryPlugin;\n+\n         if (prod.indexOf(\"oracle\") != -1)\n-            return getDBDictionaryPluginValue(conf, \"oracle\");\n+            return dbdictionaryPlugin.unalias(\"oracle\");\n         if (prod.indexOf(\"sqlserver\") != -1)\n-            return getDBDictionaryPluginValue(conf, \"sqlserver\");\n+            return dbdictionaryPlugin.unalias(\"sqlserver\");\n         if (prod.indexOf(\"jsqlconnect\") != -1)\n-            return SQLServerDictionary.class.getName();\n+            return dbdictionaryPlugin.unalias(\"sqlserver\");\n         if (prod.indexOf(\"mysql\") != -1)\n-            return MySQLDictionary.class.getName();\n+            return dbdictionaryPlugin.unalias(\"mysql\");\n         if (prod.indexOf(\"postgres\") != -1)\n-            return PostgresDictionary.class.getName();\n+            return dbdictionaryPlugin.unalias(\"postgres\");\n         if (prod.indexOf(\"sybase\") != -1)\n-            return SybaseDictionary.class.getName();\n+            return dbdictionaryPlugin.unalias(\"sybase\");\n         if (prod.indexOf(\"adaptive server\") != -1)\n-            return SybaseDictionary.class.getName();\n+            return dbdictionaryPlugin.unalias(\"sybase\");\n         if (prod.indexOf(\"informix\") != -1)\n-            return InformixDictionary.class.getName();\n+            return dbdictionaryPlugin.unalias(\"informix\");\n         if (prod.indexOf(\"hsql\") != -1)\n-            return HSQL_DICT_NAME;\n+            return dbdictionaryPlugin.unalias(\"hsql\");\n         if (prod.indexOf(\"foxpro\") != -1)\n-            return FoxProDictionary.class.getName();\n+            return dbdictionaryPlugin.unalias(\"foxpro\");\n         if (prod.indexOf(\"interbase\") != -1)\n             return InterbaseDictionary.class.getName();\n         if (prod.indexOf(\"jdatastore\") != -1)\n             return JDataStoreDictionary.class.getName();\n         if (prod.indexOf(\"borland\") != -1)\n             return JDataStoreDictionary.class.getName();\n         if (prod.indexOf(\"access\") != -1)\n-            return AccessDictionary.class.getName();\n+            return dbdictionaryPlugin.unalias(\"access\");\n         if (prod.indexOf(\"pointbase\") != -1)\n-            return PointbaseDictionary.class.getName();\n+            return dbdictionaryPlugin.unalias(\"pointbase\");\n         if (prod.indexOf(\"empress\") != -1)\n-            return EmpressDictionary.class.getName();\n+            return dbdictionaryPlugin.unalias(\"empress\");\n         if (prod.indexOf(\"firebird\") != -1)\n             return FirebirdDictionary.class.getName();\n         if (prod.indexOf(\"cache\") != -1)\n             return CacheDictionary.class.getName();\n         if (prod.indexOf(\"derby\") != -1)\n-            return DerbyDictionary.class.getName();\n+            return dbdictionaryPlugin.unalias(\"derby\");\n         // test h2 in a special way, because there's a decent chance the string \n         // h2 could appear in the URL of another database\n         if (prod.indexOf(\"jdbc:h2:\") != -1)\n@@ -224,7 +223,7 @@ private static String dictionaryClassForString(String prod, JDBCConfiguration co\n         // appear in the URL of another database (like if the db is named\n         // \"testdb2\" or something)\n         if (prod.indexOf(\"db2\") != -1 || prod.indexOf(\"as400\") != -1)\n-            return getDBDictionaryPluginValue(conf, \"db2\");\n+            return dbdictionaryPlugin.unalias(\"db2\");\n \n         // known dbs that we don't support\n         if (prod.indexOf(\"cloudscape\") != -1)\n@@ -236,6 +235,10 @@ private static String dictionaryClassForString(String prod, JDBCConfiguration co\n         if (prod.indexOf(\"idb\") != -1) // instantdb\n             return DBDictionary.class.getName();\n \n+        String prodClassName = dbdictionaryPlugin.unalias(prod);\n+        if (!StringUtils.equals(prod, prodClassName))\n+            return prodClassName;\n+        \n         // give up\n         return null;\n     }\n@@ -609,15 +612,4 @@ public static String toString(DatabaseMetaData meta)\n \n         return buf.toString();\n     }\n-    \n-    private static String getDBDictionaryPluginValue(JDBCConfiguration conf\n-        , String alias) {\n-        String[] aliases = ((JDBCConfigurationImpl) conf)\n-            .dbdictionaryPlugin.getAliases();\n-        for (int i = 0; i < aliases.length; i++) {\n-            if (StringUtils.equals(alias, aliases[i]))\n-                return aliases[++i];\n-        }\n-        return null;\n-    }\n }"}]}

