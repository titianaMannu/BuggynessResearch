{"sha":"61b023c7842ba0cdde6305f1be742f773d0f3b84","node_id":"MDY6Q29tbWl0MjA2MzY0OjYxYjAyM2M3ODQyYmEwY2RkZTYzMDVmMWJlNzQyZjc3M2QwZjNiODQ=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2012-05-17T07:55:41Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2012-05-17T07:55:41Z"},"message":"OPENJPA-2197 fix lifecycle method detection\n\nThis commit fixes a problem to pick up a JPA lifecycle method\nlike @PrePersist if there is a method with the same name\n(but different parameters) in the class as well.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1339509 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e79617cf5b89422f1e86190c47188d8962b89d54","url":"https://api.github.com/repos/apache/openjpa/git/trees/e79617cf5b89422f1e86190c47188d8962b89d54"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/61b023c7842ba0cdde6305f1be742f773d0f3b84","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/61b023c7842ba0cdde6305f1be742f773d0f3b84","html_url":"https://github.com/apache/openjpa/commit/61b023c7842ba0cdde6305f1be742f773d0f3b84","comments_url":"https://api.github.com/repos/apache/openjpa/commits/61b023c7842ba0cdde6305f1be742f773d0f3b84/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"e6a8d377bce1c2b4ecbb349c8be7c836ea78af56","url":"https://api.github.com/repos/apache/openjpa/commits/e6a8d377bce1c2b4ecbb349c8be7c836ea78af56","html_url":"https://github.com/apache/openjpa/commit/e6a8d377bce1c2b4ecbb349c8be7c836ea78af56"}],"stats":{"total":43,"additions":35,"deletions":8},"files":[{"sha":"b7bf175d3ed55dab4dd2e88487440571d00bf649","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerImpl.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/61b023c7842ba0cdde6305f1be742f773d0f3b84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/61b023c7842ba0cdde6305f1be742f773d0f3b84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerImpl.java?ref=61b023c7842ba0cdde6305f1be742f773d0f3b84","patch":"@@ -51,6 +51,14 @@ public void postLoad(Object o) {\n         postLoadCount++;\n     }\n \n+    // dummy methods for testing OPENJPA-2197\n+    public void postLoad(int someotherValue, String dummyParameter) {\n+        // do nothing. This just breaks the other method ... ;)\n+    }\n+    public void postLoad(int someotherValue) {\n+        // do nothing. This just breaks the other method ... ;)\n+    }\n+\n     @PreUpdate\n     public void preUpdate(Object o) {\n         preUpdateCount++;"},{"sha":"a35b5f89cad74be5c1430a385d4cad1c9338e9c2","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":27,"deletions":8,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/61b023c7842ba0cdde6305f1be742f773d0f3b84/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/61b023c7842ba0cdde6305f1be742f773d0f3b84/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=61b023c7842ba0cdde6305f1be742f773d0f3b84","patch":"@@ -2017,14 +2017,33 @@ public int compare(Method m1, Method m2) {\n                 if (c1.isAssignableFrom(c2))\n                     return -1;\n                 else\n-\t\t\t\t\treturn 1;\n-\t\t\t}\n-\t\t\tint compare = m1.getName ().compareTo (m2.getName ());\n-\t\t\tif (compare == 0)\n-\t\t\t\treturn m1.hashCode () - m2.hashCode ();\n-\t\t\treturn compare;\n-\t\t}\n-\t}\n+                    return 1;\n+            }\n+            int compare = m1.getName().compareTo(m2.getName ());\n+            if (compare != 0) {\n+                return compare;\n+            }\n+\n+            Class<?>[] params1 = m1.getParameterTypes();\n+            Class<?>[] params2 = m2.getParameterTypes();\n+            compare = params1.length - params2.length;\n+            if (compare != 0) {\n+                return compare;\n+            }\n+\n+            // Just using the Method#hashCode() is not enough as it only contains\n+            // the hash of the class + the hash of the NAME of the method...\n+            // Thus if they have the same number of parameters, we need to compare them all\n+            for (int i = 0; i < params1.length; i++) {\n+                compare = params1[i].hashCode() - params2[i].hashCode();\n+                if (compare != 0) {\n+                    return compare;\n+                }\n+            }\n+\n+            return 0;\n+        }\n+    }\n     \n     /**\n      * An internal class used to mimic the FetchGroup annotation."}]}

