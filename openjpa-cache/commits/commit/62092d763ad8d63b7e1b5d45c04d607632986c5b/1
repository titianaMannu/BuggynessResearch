{"sha":"62092d763ad8d63b7e1b5d45c04d607632986c5b","node_id":"MDY6Q29tbWl0MjA2MzY0OjYyMDkyZDc2M2FkOGQ2M2I3ZTFiNWQ0NWMwNGQ2MDc2MzI5ODZjNWI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-03-08T20:43:37Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-03-08T20:43:37Z"},"message":"OPENJPA-1118:\nRemove Numbers.valueOf() - prefer autoboxing\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@920503 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"552d4f7926c3ea2006c65b05556400c87e608f57","url":"https://api.github.com/repos/apache/openjpa/git/trees/552d4f7926c3ea2006c65b05556400c87e608f57"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/62092d763ad8d63b7e1b5d45c04d607632986c5b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/62092d763ad8d63b7e1b5d45c04d607632986c5b","html_url":"https://github.com/apache/openjpa/commit/62092d763ad8d63b7e1b5d45c04d607632986c5b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/62092d763ad8d63b7e1b5d45c04d607632986c5b/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"82694335ddfd450d60b34744a5345bebd99d992e","url":"https://api.github.com/repos/apache/openjpa/commits/82694335ddfd450d60b34744a5345bebd99d992e","html_url":"https://github.com/apache/openjpa/commit/82694335ddfd450d60b34744a5345bebd99d992e"}],"stats":{"total":345,"additions":173,"deletions":172},"files":[{"sha":"101d6e4e0033ce53d409246bed08b2b610d610b2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderQueryImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderQueryImpl.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -124,7 +124,7 @@ public String getQueryString() {\n         for (int i = 0; i < _pkCols.length; i++, count++) {\n             if (pks == null)\n                 val[0] = (oid == null) \n-                    ? null : Numbers.valueOf(((Id) oid).getId());\n+                    ? null : ((Id) oid).getId();\n             else {\n                 val[i] = _joins[i].getJoinValue(pks[_pkIndices[i]], _pkCols[i], \n                     store);"},{"sha":"879b41196d39f663e9048efdece9e8aa35b74970","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -126,7 +126,7 @@ public FilterListener getFilterListener(String tag) {\n     public Object newCompilationKey() {\n         JDBCFetchConfiguration fetch = (JDBCFetchConfiguration) ctx\n             .getFetchConfiguration();\n-        return Numbers.valueOf(fetch.getJoinSyntax());\n+        return fetch.getJoinSyntax();\n     }\n \n     public boolean supportsDataStoreExecution() {\n@@ -541,7 +541,7 @@ private Number executeBulkOperation(ClassMetaData[] metas,\n         }\n \n         localContext.remove();\n-        return Numbers.valueOf(count);\n+        return count;\n     }\n \n     /**"},{"sha":"f0f6b8d702fa47838779007eaf6abb8fdf3b3541","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -226,7 +226,7 @@ protected Object nextInternal(JDBCStore store, ClassMapping mapping)\n         throws SQLException {\n         Connection conn = getConnection(store);\n         try {\n-            return Numbers.valueOf(getSequence(conn));\n+            return getSequence(conn);\n         } finally {\n             closeConnection(conn);\n         }"},{"sha":"10a68c5434bdc087cc0fe864d3f38d8d980996e2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLProjectionResultObjectProvider.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLProjectionResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLProjectionResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLProjectionResultObjectProvider.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -84,14 +84,14 @@ public void open() {\n     public Object getResultObject()\n         throws SQLException {\n         if (_cols == 1) {\n-            Object val = _res.getObject(Numbers.valueOf(1),\n+            Object val = _res.getObject(1,\n                 JavaSQLTypes.JDBC_DEFAULT, null);\n             return (_packer == null) ? val : _packer.pack(val);\n         }\n \n         Object[] vals = new Object[_cols];\n         for (int i = 0; i < vals.length; i++)\n-            vals[i] = _res.getObject(Numbers.valueOf(i + 1),\n+            vals[i] = _res.getObject(i + 1,\n                 JavaSQLTypes.JDBC_DEFAULT, null);\n         return (_packer == null) ? vals : _packer.pack(vals);\n     }"},{"sha":"369bc32fb5f1f10b34ba1653e238d78a938a59db","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -168,7 +168,7 @@ public Number executeUpdate(StoreQuery q, Object[] params) {\n                 \n                 int count = executeUpdate(store, conn, stmnt, buf);  \n               \n-                return Numbers.valueOf(count);\n+                return count;\n             } catch (SQLException se) {\n                 throw SQLExceptions.getStore(se, dict);\n             } finally {"},{"sha":"f626819e790eb495349407db2b8dcfb82c25a551","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -301,7 +301,7 @@ protected Object nextInternal(JDBCStore store, ClassMapping mapping)\n                 // conflict with uninitialized values\n                 stat.seq = Math.max(stat.seq, 1);\n                 if (stat.seq < stat.max)\n-                    return Numbers.valueOf(stat.seq++);\n+                    return stat.seq++;\n             }\n             allocateSequence(store, mapping, stat, _alloc, true);\n         }\n@@ -375,7 +375,7 @@ protected Column addPrimaryKeyColumn(Table table) {\n      * Return the primary key value for the sequence table for the given class.\n      */\n     protected Object getPrimaryKey(ClassMapping mapping) {\n-        return Numbers.valueOf(0);\n+        return 0;\n     }\n \n     /**\n@@ -595,10 +595,10 @@ protected boolean setSequence(ClassMapping mapping, Status stat, int inc,\n                         _seqColumn.getTable());\n                 upd.append(\"UPDATE \").append(tableName).\n                     append(\" SET \").append(_seqColumn).append(\" = \").\n-                    appendValue(Numbers.valueOf(cur + inc), _seqColumn).\n+                    appendValue(cur + inc, _seqColumn).\n                     append(\" WHERE \").append(where).append(\" AND \").\n                     append(_seqColumn).append(\" = \").\n-                    appendValue(Numbers.valueOf(cur), _seqColumn);\n+                    appendValue(cur, _seqColumn);\n \n                 stmnt = prepareStatement(conn, upd);\n                 dict.setTimeouts(stmnt, _conf, true);\n@@ -952,7 +952,7 @@ public void run() throws RuntimeException {\n                 conn = getConnection(_store);\n                 long cur = getSequence(_mapping, conn);\n                 if (cur != -1 ) // USE the constant\n-                    current = Numbers.valueOf(cur);\n+                    current = cur;\n             } catch (SQLException sqle) {\n                 RuntimeException re = new RuntimeException(sqle.getMessage());\n                 re.initCause(sqle);"},{"sha":"e15fd16ce66dda5ef8ba08fafc6667c973c94fd2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ContainsExpression.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ContainsExpression.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ContainsExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ContainsExpression.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -47,9 +47,9 @@ public ExpState initialize(Select sel, ExpContext ctx, Map contains) {\n             // update the count for this path\n             Integer count = (Integer) contains.get(path);\n             if (count == null)\n-                count = Numbers.valueOf(0);\n+                count = 0;\n             else\n-                count = Numbers.valueOf(count.intValue() + 1);\n+                count = count.intValue() + 1;\n             contains.put(path, count);\n \n             sql.setContainsId(count.toString());"},{"sha":"ff6114ebd5bad96b375893e9b001c415d820e16e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetObjectId.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetObjectId.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetObjectId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetObjectId.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -98,7 +98,7 @@ public Object toDataStoreValue(Select sel, ExpContext ctx, ExpState state,\n         ClassMapping mapping = _path.getClassMapping(state);\n         if (mapping.getIdentityType() == mapping.ID_DATASTORE) {\n             if (val instanceof Id)\n-                return Numbers.valueOf(((Id) val).getId());\n+                return ((Id) val).getId();\n             return Filters.convert(val, long.class);\n         }\n "},{"sha":"5aeae2a15e7168221b7a109ac962f8d76ea2d98b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -167,11 +167,11 @@ public boolean isConstant() {\n         }\n \n         public Object getValue() {\n-            return Numbers.valueOf(0);\n+            return 0;\n         }\n \n         public Object getSQLValue() {\n-            return Numbers.valueOf(0);\n+            return 0;\n         }\n \n         public boolean isPath() {"},{"sha":"52e15ae7ad9d8a008ed89cdeb5ac4a934e403252","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JavaSQLTypes.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JavaSQLTypes.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JavaSQLTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/JavaSQLTypes.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -104,10 +104,10 @@ public static Object getEmptyValue(int type) {\n                 return ZERO_FLOAT;\n             case JavaTypes.INT:\n             case JavaTypes.INT_OBJ:\n-                return Numbers.valueOf(0);\n+                return 0;\n             case JavaTypes.LONG:\n             case JavaTypes.LONG_OBJ:\n-                return Numbers.valueOf(0L);\n+                return 0L;\n             case JavaTypes.SHORT:\n             case JavaTypes.SHORT_OBJ:\n                 return ZERO_SHORT;\n@@ -145,10 +145,10 @@ public static Object getNonEmptyValue(int type) {\n                 return NONZERO_FLOAT;\n             case JavaTypes.INT:\n             case JavaTypes.INT_OBJ:\n-                return Numbers.valueOf(1);\n+                return 1;\n             case JavaTypes.LONG:\n             case JavaTypes.LONG_OBJ:\n-                return Numbers.valueOf(1L);\n+                return 1L;\n             case JavaTypes.SHORT:\n             case JavaTypes.SHORT_OBJ:\n                 return NONZERO_SHORT;"},{"sha":"8e1540fd7f5d5d9e35dadcf5611255f83af1d0b8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/IdentityJoinable.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/IdentityJoinable.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/IdentityJoinable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/IdentityJoinable.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -61,7 +61,7 @@ public Object getPrimaryKeyValue(Result res, Column[] cols, ForeignKey fk,\n         long id = res.getLong(col);\n         if (id == 0 && res.wasNull())\n             return null;\n-        return Numbers.valueOf(id);\n+        return id;\n     }\n \n     public Column[] getColumns() {"},{"sha":"16b20507f983cf1703eae99542511c9439a40b19","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MultiColumnVersionStrategy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MultiColumnVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MultiColumnVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MultiColumnVersionStrategy.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -46,7 +46,7 @@ public void initialize() {\n     \t\tColumn[] cols = vers.getColumns();\n     \t\t_initials = new Number[cols.length];\n     \t\tfor (int i = 0; i < cols.length; i++) {\n-                _initials[i] = nextValue(Numbers.valueOf(0), getJavaType(i));\n+                _initials[i] = nextValue(0, getJavaType(i));\n     \t\t}\n     \t}\n     \tsuper.initialize();"},{"sha":"8438075583912fc83a041fc5d3a0cff191a337b9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NumberVersionStrategy.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NumberVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NumberVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NumberVersionStrategy.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -36,13 +36,13 @@\n \n     public static final String ALIAS = \"version-number\";\n \n-    private Number _initial = Numbers.valueOf(1);\n+    private Number _initial = 1;\n \n     /**\n      * Set the initial value for version column. Defaults to 1.\n      */\n     public void setInitialValue(int initial) {\n-        _initial = Numbers.valueOf(initial);\n+        _initial = initial;\n     }\n \n     /**\n@@ -63,7 +63,7 @@ protected int getJavaType() {\n     protected Object nextVersion(Object version) {\n         if (version == null)\n             return _initial;\n-        return Numbers.valueOf(((Number) version).intValue() + 1);\n+        return ((Number) version).intValue() + 1;\n     }\n \n     public Map getBulkUpdateValues() {"},{"sha":"abd381baba8c607e8c5c898a3215b5b6e2672402","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -950,7 +950,7 @@ public Object getPrimaryKeyValue(Result res, Column[] cols, ForeignKey fk,\n                 col = fk.getColumn(col);   \n             long id = res.getLong(col, joins);\n             if (field.getObjectIdFieldTypeCode() == JavaTypes.LONG)\n-                return Numbers.valueOf(id);\n+                return id;\n             return store.newDataStoreId(id, relmapping, field.getPolymorphic() \n                 != ValueMapping.POLY_FALSE);\n         }"},{"sha":"d5b463c1c22bce76aec91cdd8471b1478bba3a0b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -425,11 +425,11 @@ public Object getDefault() {\n                 break;\n             case JavaTypes.INT:\n             case JavaTypes.INT_OBJ:\n-                _default = Numbers.valueOf(Integer.parseInt(_defaultStr));\n+                _default = Integer.parseInt(_defaultStr);\n                 break;\n             case JavaTypes.LONG:\n             case JavaTypes.LONG_OBJ:\n-                _default = Numbers.valueOf(Long.parseLong(_defaultStr));\n+                _default = Long.parseLong(_defaultStr);\n                 break;\n             case JavaTypes.NUMBER:\n             case JavaTypes.BIGDECIMAL:"},{"sha":"9735316db96ad0511dd2056a63a9a4722b03cd1b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/TableSchemaFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/TableSchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/TableSchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/TableSchemaFactory.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -279,7 +279,7 @@ public String readSchemaColumn()\n         DBDictionary dict = _conf.getDBDictionaryInstance();\n         SQLBuffer sel = new SQLBuffer(dict).append(_schemaColumn);\n         SQLBuffer where = new SQLBuffer(dict).append(_pkColumn).append(\" = \").\n-            appendValue(Numbers.valueOf(1), _pkColumn);\n+            appendValue(1, _pkColumn);\n         SQLBuffer tables = new SQLBuffer(dict).append(_pkColumn.getTable());\n \n         SQLBuffer select = dict.toSelect(sel, null, tables, where, null,"},{"sha":"75090b62983ed1e6a32500f07abbc2e50d3631f0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaParser.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaParser.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaParser.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -410,8 +410,8 @@ private void startSequence(Attributes attrs) {\n         Sequence seq = _schema.addSequence(attrs.getValue(\"name\"));\n         Locator locator = getLocation().getLocator();\n         if (locator != null) {\n-            seq.setLineNumber(Numbers.valueOf(locator.getLineNumber()));\n-            seq.setColNumber(Numbers.valueOf(locator.getColumnNumber()));\n+            seq.setLineNumber(locator.getLineNumber());\n+            seq.setColNumber(locator.getColumnNumber());\n         }\n         seq.setSource(getSourceFile(), SourceTracker.SRC_XML);\n         try {\n@@ -434,8 +434,8 @@ private void startTable(Attributes attrs) {\n         _table.setSource(getSourceFile(), SourceTracker.SRC_XML);\n         Locator locator = getLocation().getLocator();\n         if (locator != null) {\n-            _table.setLineNumber(Numbers.valueOf(locator.getLineNumber()));\n-            _table.setColNumber(Numbers.valueOf(locator.getColumnNumber()));\n+            _table.setLineNumber(locator.getLineNumber());\n+            _table.setColNumber(locator.getColumnNumber());\n         }\n     }\n "},{"sha":"5debb948f232c0d66d22319eade96c36b8a389f7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -539,10 +539,10 @@ public Number getNumber(ResultSet rs, int column)\n                     return new Float(getFloat(rs, column));\n                 } catch (Exception e3) {\n                     try {\n-                        return Numbers.valueOf(getLong(rs, column));\n+                        return getLong(rs, column);\n                     } catch (Exception e4) {\n                         try {\n-                            return Numbers.valueOf(getInt(rs, column));\n+                            return getInt(rs, column);\n                         } catch (Exception e5) {\n                         }\n                     }"},{"sha":"775d54289be3b71c228975d15561536436cc4912","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -1006,7 +1006,7 @@ public boolean isSystemSequence(DBIdentifier name, DBIdentifier schema,\n     public Object getGeneratedKey(Column col, Connection conn)\n         throws SQLException {\n         if (!useTriggersForAutoAssign)\n-            return Numbers.valueOf(0L);\n+            return 0L;\n \n         // if we simulate auto-assigned columns using triggers and\n         // sequences, then return the current value of the sequence\n@@ -1023,7 +1023,7 @@ else if (seq == null)\n             setTimeouts(stmnt, conf, false);\n             rs = stmnt.executeQuery();\n             rs.next();\n-            return Numbers.valueOf(rs.getLong(1));\n+            return rs.getLong(1);\n         } finally {\n             if (rs != null)\n                 try { rs.close(); } catch (SQLException se) {}\n@@ -1129,7 +1129,7 @@ private static void invokePutLobMethod(Method method, Object target,\n         Object data)\n         throws SQLException {\n         try {\n-            method.invoke(target, new Object[]{ Numbers.valueOf(1L), data });\n+            method.invoke(target, new Object[]{ 1L, data });\n         } catch (InvocationTargetException ite) {\n             Throwable t = ite.getTargetException();\n             if (t instanceof SQLException)"},{"sha":"f8a410570b6d39c70963e0091ad5a71af3db42e6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/ResultSetResult.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -387,11 +387,11 @@ protected Object getObjectInternal(Object obj, int metaTypeCode,\n                 break;\n             case JavaTypes.INT:\n             case JavaTypes.INT_OBJ:\n-                val = Numbers.valueOf(getIntInternal(obj, joins));\n+                val = getIntInternal(obj, joins);\n                 break;\n             case JavaTypes.LONG:\n             case JavaTypes.LONG_OBJ:\n-                val = Numbers.valueOf(getLongInternal(obj, joins));\n+                val = getLongInternal(obj, joins);\n                 break;\n             case JavaTypes.SHORT:\n             case JavaTypes.SHORT_OBJ:\n@@ -495,7 +495,7 @@ protected Object translate(Object obj, Joins joins)\n         throws SQLException {\n         if (obj instanceof Number)\n             return obj;\n-        return Numbers.valueOf(findObject(obj, joins));\n+        return findObject(obj, joins);\n     }\n \n     /**"},{"sha":"7ccb973b753a3fa6b84417e689078ae56b10345e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/RowImpl.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -440,12 +440,12 @@ public void setFloat(Column col, float val)\n \n     public void setInt(Column col, int val)\n         throws SQLException {\n-        setObject(col, Numbers.valueOf(val), JavaTypes.INT, false);\n+        setObject(col, val, JavaTypes.INT, false);\n     }\n \n     public void setLong(Column col, long val)\n         throws SQLException {\n-        setObject(col, Numbers.valueOf(val), JavaTypes.LONG, false);\n+        setObject(col, val, JavaTypes.LONG, false);\n     }\n \n     public void setLocale(Column col, Locale val)\n@@ -607,12 +607,12 @@ public void whereFloat(Column col, float val)\n \n     public void whereInt(Column col, int val)\n         throws SQLException {\n-        whereObject(col, Numbers.valueOf(val), JavaTypes.INT);\n+        whereObject(col, val, JavaTypes.INT);\n     }\n \n     public void whereLong(Column col, long val)\n         throws SQLException {\n-        whereObject(col, Numbers.valueOf(val), JavaTypes.LONG);\n+        whereObject(col, val, JavaTypes.LONG);\n     }\n \n     public void whereLocale(Column col, Locale val)"},{"sha":"ced04f94fcdbf18104dc2a333f679a685844bc93","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -388,28 +388,28 @@ public SQLBuffer appendValue(float f, Column col) {\n      * Append a parameter value.\n      */\n     public SQLBuffer appendValue(int i) {\n-        return appendValue(i, null);\n+        return appendValue(Integer.valueOf(i), null);\n     }\n \n     /**\n      * Append a parameter value.\n      */\n     public SQLBuffer appendValue(int i, Column col) {\n-        return appendValue(Numbers.valueOf(i), col);\n+        return appendValue(Integer.valueOf(i), col);\n     }\n \n     /**\n      * Append a parameter value.\n      */\n     public SQLBuffer appendValue(long l) {\n-        return appendValue(l, null);\n+        return appendValue(Long.valueOf(l), null);\n     }\n \n     /**\n      * Append a parameter value.\n      */\n     public SQLBuffer appendValue(long l, Column col) {\n-        return appendValue(Numbers.valueOf(l), col);\n+        return appendValue(Long.valueOf(l), col);\n     }\n \n     /**"},{"sha":"763d06175d8ef65f70e8f5b2afa917e50647f986","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -1261,7 +1261,7 @@ List getOrderedIndexes() {\n             return null;\n         List idxs = new ArrayList(_ordered.size());\n         for (int i = 0; i < _ordered.size(); i++)\n-            idxs.add(Numbers.valueOf(_selects.indexOf(_ordered.get(i))));\n+            idxs.add(_selects.indexOf(_ordered.get(i)));\n         return idxs;\n     }\n \n@@ -1362,7 +1362,7 @@ private void where(Object oid, ClassMapping mapping, Column[] toCols,\n         for (int i = 0; i < toCols.length; i++, count++) {\n             if (pks == null)\n                 val = (oid == null) ? null :\n-                        Numbers.valueOf(((Id) oid).getId());\n+                        ((Id) oid).getId();\n             else {\n                 // must be app identity; use pk index to get correct pk value\n                 join = mapping.assertJoinable(toCols[i]);\n@@ -2015,7 +2015,7 @@ private int getTableIndex(Table table, PathJoins pj, boolean create) {\n             return -1;\n \n         // not found; create alias\n-        i = Numbers.valueOf(aliasSize(null));\n+        i = aliasSize(null);\n //        System.out.println(\"GetTableIndex\\t\"+\n //                ((_parent != null) ? \"Sub\" :\"\") +\n //                \" created alias: \"+\n@@ -2077,7 +2077,7 @@ private Integer getAlias(Table table, Object key) {\n     }\n \n     private int createAlias(Table table, Object key) {\n-        Integer i = Numbers.valueOf(ctx().nextAlias());\n+        Integer i = ctx().nextAlias();\n //        System.out.println(\"\\t\"+\n //                ((_parent != null) ? \"Sub\" :\"\") +\n //                \"Query created alias: \"+ "},{"sha":"733a5ded08d05d295c84f7fcfd46c293f86c625a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -593,7 +593,7 @@ private void checkFinished(Object obj, boolean result) {\n             synchronized (this) {\n                 if (_maintainCache) {\n                     if (result) {\n-                        Integer index = Numbers.valueOf(_pos);\n+                        Integer index = _pos;\n                         if (!_data.containsKey(index)) {\n                             Object cached;\n                             if (obj == null)"},{"sha":"b3a476f6e53836bc52906f9605fae3bd211cecd3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -2930,8 +2930,8 @@ private void addSerializationCode() {\n         if (field == null) {\n             Long uid = null;\n             try {\n-                uid = Numbers.valueOf(ObjectStreamClass.lookup\n-                    (_meta.getDescribedType()).getSerialVersionUID());\n+                uid = ObjectStreamClass.lookup\n+                    (_meta.getDescribedType()).getSerialVersionUID();\n             } catch (Throwable t) {\n                 // last-chance catch for bug #283 (which can happen\n                 // in a variety of ClassLoading environments)"},{"sha":"474975c5d0687385d9900818e910156c79d478df","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -318,9 +318,9 @@ private Object fetchField(FieldManager fm, int field) {\n             case JavaTypes.FLOAT:\n                 return new Float(fm.fetchFloatField(field));\n             case JavaTypes.INT:\n-                return Numbers.valueOf(fm.fetchIntField(field));\n+                return fm.fetchIntField(field);\n             case JavaTypes.LONG:\n-                return Numbers.valueOf(fm.fetchLongField(field));\n+                return fm.fetchLongField(field);\n             case JavaTypes.SHORT:\n                 return new Short(fm.fetchShortField(field));\n             default:"},{"sha":"939a2ac0e701ad729a117051f7b0692862d9a78e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -291,10 +291,11 @@ else if (type == Character.class) {\n                 return ((Calendar) o).getTime();\n             } else if (Number.class.isAssignableFrom(type)) {\n                 Integer i = null;\n-                if (o instanceof Character)\n-                    i = Numbers.valueOf(((Character) o).charValue());\n+                if (o instanceof Character) {\n+                    i = Integer.valueOf((Character)o);\n+                }\n                 else if (o instanceof String && ((String) o).length() == 1)\n-                    i = Numbers.valueOf(((String) o).charAt(0));\n+                    i = Integer.valueOf(((String)o));\n \n                 if (i != null) {\n                     if (type == Integer.class)\n@@ -316,13 +317,13 @@ else if (o instanceof String && ((String) o).length() == 1)\n                 o.getClass(), type).getMessage());\n \n         if (type == Integer.class) {\n-            return Numbers.valueOf(((Number) o).intValue());\n+            return ((Number) o).intValue();\n         } else if (type == Float.class) {\n             return new Float(((Number) o).floatValue());\n         } else if (type == Double.class) {\n             return new Double(((Number) o).doubleValue());\n         } else if (type == Long.class) {\n-            return Numbers.valueOf(((Number) o).longValue());\n+            return ((Number) o).longValue();\n         } else if (type == BigDecimal.class) {\n             // the BigDecimal constructor doesn't handle the\n             // \"NaN\" string version of Double.NaN and Float.NaN, nor\n@@ -344,7 +345,7 @@ else if (o instanceof String && ((String) o).length() == 1)\n         } else if (type == Byte.class) {\n             return new Byte(((Number) o).byteValue());\n         } else {\n-            return Numbers.valueOf(((Number) o).intValue());\n+            return ((Number) o).intValue();\n         }\n     }\n \n@@ -452,7 +453,7 @@ private static Object op(int n1, int n2, int op) {\n             default:\n                 throw new InternalException();\n         }\n-        return Numbers.valueOf(tot);\n+        return tot;\n     }\n \n     /**\n@@ -533,7 +534,7 @@ private static Object op(long n1, long n2, int op) {\n             default:\n                 throw new InternalException();\n         }\n-        return Numbers.valueOf(tot);\n+        return tot;\n     }\n \n     /**"},{"sha":"669292df7fb4da5d2f8a561e6017b33be51ee29b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -472,15 +472,15 @@ public void storeChar(int field, char extVal) {\n     }\n \n     public void storeInt(int field, int extVal) {\n-        setValue(field, Numbers.valueOf(extVal), true);\n+        setValue(field, extVal, true);\n     }\n \n     public void storeShort(int field, short extVal) {\n         setValue(field, new Short(extVal), true);\n     }\n \n     public void storeLong(int field, long extVal) {\n-        setValue(field, Numbers.valueOf(extVal), true);\n+        setValue(field, extVal, true);\n     }\n \n     public void storeFloat(int field, float extVal) {\n@@ -674,9 +674,9 @@ private Object getDefaultValue(int field) {\n             case JavaTypes.FLOAT:\n                 return ZERO_FLOAT;\n             case JavaTypes.INT:\n-                return Numbers.valueOf(0);\n+                return 0;\n             case JavaTypes.LONG:\n-                return Numbers.valueOf(0L);\n+                return 0L;\n             case JavaTypes.SHORT:\n                 return ZERO_SHORT;\n             default:"},{"sha":"23c8493339f6d2d3ce005930ee3997b9cc9c98ea","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -1033,7 +1033,7 @@ public Number deleteInMemory(StoreQuery q, StoreQuery.Executor executor,\n             int size = 0;\n             for (Iterator i = ((Collection) o).iterator(); i.hasNext(); size++)\n                 _broker.delete(i.next(), null);\n-            return Numbers.valueOf(size);\n+            return size;\n         } catch (OpenJPAException ke) {\n             throw ke;\n         } catch (Exception e) {\n@@ -1064,7 +1064,7 @@ public Number updateInMemory(StoreQuery q, StoreQuery.Executor executor,\n             int size = 0;\n             for (Iterator i = ((Collection) o).iterator(); i.hasNext(); size++)\n                 updateInMemory(i.next(), params, q);\n-            return Numbers.valueOf(size);\n+            return size;\n         } catch (OpenJPAException ke) {\n             throw ke;\n         } catch (Exception e) {\n@@ -1909,14 +1909,14 @@ public Number executeDelete(StoreQuery q, Object[] params) {\n             long num = 0;\n             for (int i = 0; i < _executors.length; i++)\n                 num += _executors[i].executeDelete(q, params).longValue();\n-            return Numbers.valueOf(num);\n+            return num;\n         }\n \n         public Number executeUpdate(StoreQuery q, Object[] params) {\n             long num = 0;\n             for (int i = 0; i < _executors.length; i++)\n                 num += _executors[i].executeUpdate(q, params).longValue();\n-            return Numbers.valueOf(num);\n+            return num;\n         }\n \n         public String[] getDataStoreActions(StoreQuery q, Object[] params,"},{"sha":"376c5e6634b02de444a92cb17bddbfb871cda16c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -857,9 +857,9 @@ public Object fetchField(int field, boolean transitions) {\n             case JavaTypes.FLOAT:\n                 return new Float(fetchFloatField(field));\n             case JavaTypes.INT:\n-                return Numbers.valueOf(fetchIntField(field));\n+                return fetchIntField(field);\n             case JavaTypes.LONG:\n-                return Numbers.valueOf(fetchLongField(field));\n+                return fetchLongField(field);\n             case JavaTypes.SHORT:\n                 return new Short(fetchShortField(field));\n             default:\n@@ -988,9 +988,9 @@ private static Object fetchField(FieldManager fm, FieldMetaData fmd) {\n             case JavaTypes.FLOAT:\n                 return new Float(fm.fetchFloatField(field));\n             case JavaTypes.INT:\n-                return Numbers.valueOf(fm.fetchIntField(field));\n+                return fm.fetchIntField(field);\n             case JavaTypes.LONG:\n-                return Numbers.valueOf(fm.fetchLongField(field));\n+                return fm.fetchLongField(field);\n             case JavaTypes.SHORT:\n                 return new Short(fm.fetchShortField(field));\n             case JavaTypes.STRING:\n@@ -2529,7 +2529,7 @@ public void storeInt(int field, int externalVal) {\n         if (!fmd.isExternalized())\n             storeIntField(field, externalVal);\n         else\n-            storeField(field, fmd.getFieldValue(Numbers.valueOf(externalVal),\n+            storeField(field, fmd.getFieldValue(externalVal,\n                 _broker));\n     }\n \n@@ -2550,7 +2550,7 @@ public void storeLong(int field, long externalVal) {\n         if (!fmd.isExternalized())\n             storeLongField(field, externalVal);\n         else\n-            storeField(field, fmd.getFieldValue(Numbers.valueOf(externalVal),\n+            storeField(field, fmd.getFieldValue(externalVal,\n                 _broker));\n     }\n "},{"sha":"061b7ab9f4e93b288d44de39faee3e2a3cb1e7a8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TimeSeededSeq.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TimeSeededSeq.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TimeSeededSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TimeSeededSeq.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -52,11 +52,11 @@ public void setIncrement(int increment) {\n \n     public synchronized Object next(StoreContext ctx, ClassMetaData meta) {\n         _id += _increment;\n-        return Numbers.valueOf(_id);\n+        return _id;\n     }\n \n     public synchronized Object current(StoreContext ctx, ClassMetaData meta) {\n-        return Numbers.valueOf(_id);\n+        return _id;\n     }\n \n     public void allocate(int additional, StoreContext ctx, ClassMetaData meta) {"},{"sha":"2c05c9dbc052822e5291a11a08fe80aa1adbc4f0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionLockManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionLockManager.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -50,7 +50,7 @@ public int getLockLevel(OpenJPAStateManager sm) {\n      * to store something else as the lock.\n      */\n     protected void setLockLevel(OpenJPAStateManager sm, int level) {\n-        sm.setLock(Numbers.valueOf(level));\n+        sm.setLock(level);\n     }\n \n     /**"},{"sha":"799dc987b1e642cdf2bfe885bd14c379e1f79512","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Abs.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Abs.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Abs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Abs.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -52,19 +52,19 @@ protected Class getType(Class c) {\n     protected Object operate(Object o, Class c) {\n         c = Filters.wrap(c);\n         if (c == Integer.class)\n-            return Numbers.valueOf(Math.abs(((Number) o).intValue()));\n+            return Math.abs(((Number) o).intValue());\n         if (c == Float.class)\n             return new Float(Math.abs(((Number) o).floatValue()));\n         if (c == Double.class)\n             return new Double(Math.abs(((Number) o).doubleValue()));\n         if (c == Long.class)\n-            return Numbers.valueOf(Math.abs(((Number) o).longValue()));\n+            return Math.abs(((Number) o).longValue());\n         if (c == BigDecimal.class)\n             return ((BigDecimal) o).abs();\n         if (c == BigInteger.class)\n             return ((BigInteger) o).abs();\n \n         // default to int\n-        return Numbers.valueOf(Math.abs(((Number) o).intValue()));\n+        return Math.abs(((Number) o).intValue());\n     }\n }"},{"sha":"693668f46d46168188a7c4a84b921cf0e0b8dbab","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Avg.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Avg.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Avg.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Avg.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -47,7 +47,7 @@ protected Object operate(Collection os, Class c) {\n         if (os.isEmpty())\n             return null;\n \n-        Object sum = Filters.convert(Numbers.valueOf(0), c);\n+        Object sum = Filters.convert(0, c);\n         Object cur;\n         int size = 0;\n         for (Iterator itr = os.iterator(); itr.hasNext();) {\n@@ -60,6 +60,6 @@ protected Object operate(Collection os, Class c) {\n         }\n         if (size == 0)\n             return null;\n-        return Filters.divide(sum, c, Numbers.valueOf(size), int.class);\n+        return Filters.divide(sum, c, size, int.class);\n     }\n }"},{"sha":"a1b1733a1aaf8dd36fe2a346457e2ba2eada223a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Count.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Count.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Count.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Count.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -47,6 +47,6 @@ protected Object operate(Collection os, Class c) {\n         for (Iterator itr = os.iterator(); itr.hasNext();)\n             if (itr.next() != null)\n                 count++;\n-        return Numbers.valueOf(count);\n+        return count;\n     }\n }"},{"sha":"5fe933def154140110a07d569b7dd2ae4f3eaa24","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/IndexOf.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/IndexOf.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/IndexOf.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/IndexOf.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -59,7 +59,7 @@ protected Object eval(Object candidate, Object orig,\n                 ((Number) args[1]).intValue());\n         } else\n             idx = str.toString().indexOf(arg.toString());\n-        return Numbers.valueOf(idx);\n+        return idx;\n     }\n \n     public void acceptVisit(ExpressionVisitor visitor) {"},{"sha":"ca4e394d4187cf4684edb3f481ca1d3df23a764a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Size.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Size.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Size.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Size.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -41,9 +41,9 @@ protected Class getType(Class c) {\n \n     protected Object operate(Object o, Class c) {\n         if (o instanceof Collection)\n-            return Numbers.valueOf(((Collection) o).size());\n+            return ((Collection) o).size();\n         if (o instanceof Map)\n-            return Numbers.valueOf(((Map) o).size());\n-        return (o == null) ? Numbers.valueOf(0) : Numbers.valueOf(1);\n+            return ((Map) o).size();\n+        return (o == null) ? 0 : 1;\n     }\n }"},{"sha":"a7ddd4972e2dfdeb8ed90759be2d0426c06f722d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/StringLength.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/StringLength.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/StringLength.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/StringLength.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -53,9 +53,9 @@ protected Object eval(Object candidate, Object orig,\n         StoreContext ctx, Object[] params) {\n         Object eval = _val.eval(candidate, orig, ctx, params);\n         if (eval == null)\n-            return Numbers.valueOf(0);\n+            return 0;\n \n-        return Numbers.valueOf(eval.toString().length());\n+        return eval.toString().length();\n     }\n \n     public void acceptVisit(ExpressionVisitor visitor) {"},{"sha":"487b41b3e56c2cb4b7f34a31bf42a7bcccf56eb6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Sum.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Sum.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Sum.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Sum.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -53,7 +53,7 @@ protected Object operate(Collection os, Class c) {\n             return null;\n \n         Class type = getType(c);\n-        Object sum = Filters.convert(Numbers.valueOf(0), type);\n+        Object sum = Filters.convert(0, type);\n         Object cur;\n         for (Iterator itr = os.iterator(); itr.hasNext();) {\n             cur = itr.next();"},{"sha":"ae3381d61ba8e4d7a88694e2759508505926129a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -1320,9 +1320,9 @@ else if (node.getChildCount() == 2\n                     locateFromIndex == null ? locatePath\n                         : factory.newArgumentList(locatePath,\n                         factory.subtract(locateFromIndex,\n-                            factory.newLiteral(Numbers.valueOf(1),\n+                            factory.newLiteral(1,\n                                 Literal.TYPE_NUMBER)))),\n-                    factory.newLiteral(Numbers.valueOf(1),\n+                    factory.newLiteral(1,\n                         Literal.TYPE_NUMBER));\n \n             case JJTAGGREGATE:\n@@ -1443,11 +1443,11 @@ public static Value convertSubstringArguments(ExpressionFactory factory,\n             }\n         } else {\n             start = factory.subtract(val2, factory.newLiteral\n-                (Numbers.valueOf(1), Literal.TYPE_NUMBER));\n+                (1, Literal.TYPE_NUMBER));\n             if (val3 != null)\n             end = factory.add(val3,\n                 (factory.subtract(val2, factory.newLiteral\n-                    (Numbers.valueOf(1), Literal.TYPE_NUMBER))));\n+                    (1, Literal.TYPE_NUMBER))));\n         }\n         if (val3 != null)\n             return factory.substring(val1, factory.newArgumentList(start, end));"},{"sha":"a4640b09e1fe1199bf9f66a428a5a7d50b62289a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -229,10 +229,10 @@ public void setRecursionDepth(FieldMetaData fm, int depth) {\n             throw new UnsupportedOperationException();\n         if (depth < -1)\n             throw new MetaDataException(_loc.get(\"invalid-fg-depth\", _name, fm, \n-                Numbers.valueOf(depth)));\n+                depth));\n         if (_depths == null)\n             _depths = new HashMap();\n-        _depths.put(fm, Numbers.valueOf(depth));\n+        _depths.put(fm, depth);\n     }\n \n     /**"},{"sha":"024f7599f5e5897a1cb2ef02415ebf4531397bb5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -90,27 +90,27 @@\n     private static final Map<Class<?>, Integer> _typeCodes = new HashMap<Class<?>, Integer>();\n \n     static {\n-        _typeCodes.put(String.class, Numbers.valueOf(STRING));\n-        _typeCodes.put(Boolean.class, Numbers.valueOf(BOOLEAN_OBJ));\n-        _typeCodes.put(Byte.class, Numbers.valueOf(BYTE_OBJ));\n-        _typeCodes.put(Character.class, Numbers.valueOf(CHAR_OBJ));\n-        _typeCodes.put(Double.class, Numbers.valueOf(DOUBLE_OBJ));\n-        _typeCodes.put(Float.class, Numbers.valueOf(FLOAT_OBJ));\n-        _typeCodes.put(Integer.class, Numbers.valueOf(INT_OBJ));\n-        _typeCodes.put(Long.class, Numbers.valueOf(LONG_OBJ));\n-        _typeCodes.put(Short.class, Numbers.valueOf(SHORT_OBJ));\n-        _typeCodes.put(Date.class, Numbers.valueOf(DATE));\n-        _typeCodes.put(java.sql.Date.class, Numbers.valueOf(DATE));\n-        _typeCodes.put(java.sql.Timestamp.class, Numbers.valueOf(DATE));\n-        _typeCodes.put(java.sql.Time.class, Numbers.valueOf(DATE));\n-        _typeCodes.put(BigInteger.class, Numbers.valueOf(BIGINTEGER));\n-        _typeCodes.put(BigDecimal.class, Numbers.valueOf(BIGDECIMAL));\n-        _typeCodes.put(Number.class, Numbers.valueOf(NUMBER));\n-        _typeCodes.put(Locale.class, Numbers.valueOf(LOCALE));\n-        _typeCodes.put(Object.class, Numbers.valueOf(OBJECT));\n-        _typeCodes.put(PersistenceCapable.class, Numbers.valueOf(PC_UNTYPED));\n-        _typeCodes.put(Properties.class, Numbers.valueOf(MAP));\n-        _typeCodes.put(Calendar.class, Numbers.valueOf(CALENDAR));\n+        _typeCodes.put(String.class, STRING);\n+        _typeCodes.put(Boolean.class, BOOLEAN_OBJ);\n+        _typeCodes.put(Byte.class, BYTE_OBJ);\n+        _typeCodes.put(Character.class, CHAR_OBJ);\n+        _typeCodes.put(Double.class, DOUBLE_OBJ);\n+        _typeCodes.put(Float.class, FLOAT_OBJ);\n+        _typeCodes.put(Integer.class, INT_OBJ);\n+        _typeCodes.put(Long.class, LONG_OBJ);\n+        _typeCodes.put(Short.class, SHORT_OBJ);\n+        _typeCodes.put(Date.class, DATE);\n+        _typeCodes.put(java.sql.Date.class, DATE);\n+        _typeCodes.put(java.sql.Timestamp.class, DATE);\n+        _typeCodes.put(java.sql.Time.class, DATE);\n+        _typeCodes.put(BigInteger.class, BIGINTEGER);\n+        _typeCodes.put(BigDecimal.class, BIGDECIMAL);\n+        _typeCodes.put(Number.class, NUMBER);\n+        _typeCodes.put(Locale.class, LOCALE);\n+        _typeCodes.put(Object.class, OBJECT);\n+        _typeCodes.put(PersistenceCapable.class, PC_UNTYPED);\n+        _typeCodes.put(Properties.class, MAP);\n+        _typeCodes.put(Calendar.class, CALENDAR);\n     }\n \n     /**\n@@ -316,7 +316,7 @@ public static Object convert(Object val, int typeCode) {\n                 if (val instanceof Integer)\n                     return val;\n                 if (val instanceof Number)\n-                    return Numbers.valueOf(((Number) val).intValue());\n+                    return ((Number) val).intValue();\n                 // no break\n             case INT:\n                 if (val instanceof String)\n@@ -326,7 +326,7 @@ public static Object convert(Object val, int typeCode) {\n                 if (val instanceof Long)\n                     return val;\n                 if (val instanceof Number)\n-                    return Numbers.valueOf(((Number) val).longValue());\n+                    return ((Number) val).longValue();\n                 // no break\n             case LONG:\n                 if (val instanceof String)"},{"sha":"19fb1c3b75d748e8a5ca11a69a726f308d9efee9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueStrategies.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueStrategies.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueStrategies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueStrategies.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -85,22 +85,22 @@\n     private static final TreeBidiMap _map = new TreeBidiMap();\n \n     static {\n-        _map.put(\"none\", Numbers.valueOf(NONE));\n-        _map.put(\"native\", Numbers.valueOf(NATIVE));\n-        _map.put(\"sequence\", Numbers.valueOf(SEQUENCE));\n-        _map.put(\"autoassign\", Numbers.valueOf(AUTOASSIGN));\n-        _map.put(\"increment\", Numbers.valueOf(INCREMENT));\n-        _map.put(\"uuid-string\", Numbers.valueOf(UUID_STRING));\n-        _map.put(\"uuid-hex\", Numbers.valueOf(UUID_HEX));\n-        _map.put(\"uuid-type4-string\", Numbers.valueOf(UUID_TYPE4_STRING));\n-        _map.put(\"uuid-type4-hex\", Numbers.valueOf(UUID_TYPE4_HEX));\n+        _map.put(\"none\", NONE);\n+        _map.put(\"native\", NATIVE);\n+        _map.put(\"sequence\", SEQUENCE);\n+        _map.put(\"autoassign\", AUTOASSIGN);\n+        _map.put(\"increment\", INCREMENT);\n+        _map.put(\"uuid-string\", UUID_STRING);\n+        _map.put(\"uuid-hex\", UUID_HEX);\n+        _map.put(\"uuid-type4-string\", UUID_TYPE4_STRING);\n+        _map.put(\"uuid-type4-hex\", UUID_TYPE4_HEX);\n     }\n \n     /**\n      * Convert the given strategy to a name.\n      */\n     public static String getName(int strategy) {\n-        Object code = Numbers.valueOf(strategy);\n+        Object code = strategy;\n         String name = (String) _map.getKey(code);\n         if (name != null)\n             return name;"},{"sha":"bbfa4aacfce36d2b598cdfa53fc5398edef2d2b2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -609,11 +609,11 @@ public void storeShortField(int field, short val) {\n         }\n \n         public void storeIntField(int field, int val) {\n-            store(Numbers.valueOf(val));\n+            store(val);\n         }\n \n         public void storeLongField(int field, long val) {\n-            store(Numbers.valueOf(val));\n+            store(val);\n         }\n \n         public void storeFloatField(int field, float val) {"},{"sha":"b3e95f69a7068bf6f32b62d2347ad427b3b043af","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Id.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/util/Id.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/util/Id.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Id.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -143,7 +143,7 @@ public long getId() {\n     }\n \n     public Object getIdObject() {\n-        return Numbers.valueOf(_id);\n+        return _id;\n     }\n \n     protected int idHash() {"},{"sha":"907cfb31230b0bbc862cac3a9783a8334b63133e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/IntId.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/util/IntId.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/util/IntId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/IntId.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -52,7 +52,7 @@ public int getId() {\n     }\n \n     public Object getIdObject() {\n-        return Numbers.valueOf(key);\n+        return key;\n     }\n \n     public String toString() {"},{"sha":"7335c42f874876b56d0aa57668011a930433beca","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/LongId.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/util/LongId.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-kernel/src/main/java/org/apache/openjpa/util/LongId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/LongId.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -52,7 +52,7 @@ public long getId() {\n     }\n \n     public Object getIdObject() {\n-        return Numbers.valueOf(key);\n+        return key;\n     }\n \n     protected int idHash() {"},{"sha":"7568fa5f4526e6e1456703cb2edd70e0af3fde70","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -372,7 +372,7 @@ public void setHoldability(int holdability) throws SQLException {\n         if (m == null)\n             m = createJDBC3Method(SET_HOLDABILITY, \"setHoldability\",\n                 new Class[]{ int.class });\n-        invokeJDBC3(m, new Object[]{ Numbers.valueOf(holdability) });\n+        invokeJDBC3(m, new Object[]{ holdability });\n     }\n \n     public int getHoldability() throws SQLException {\n@@ -439,9 +439,9 @@ protected Statement createStatement(int resultSetType,\n                 m = createJDBC3Method(CREATE_STATEMENT, \"createStatement\",\n                     new Class[]{ int.class, int.class, int.class });\n             stmnt = (Statement) invokeJDBC3(m, new Object[]{\n-                Numbers.valueOf(resultSetType),\n-                Numbers.valueOf(resultSetConcurrency),\n-                Numbers.valueOf(resultSetHoldability) });\n+                resultSetType,\n+                resultSetConcurrency,\n+                resultSetHoldability });\n         }\n         if (wrap)\n             stmnt = DelegatingStatement.newInstance(stmnt, this);\n@@ -470,9 +470,9 @@ protected PreparedStatement prepareStatement(String sql,\n                     new Class[]{ String.class, int.class, int.class,\n                         int.class });\n             stmnt = (PreparedStatement) invokeJDBC3(m, new Object[]{ sql,\n-                Numbers.valueOf(resultSetType),\n-                Numbers.valueOf(resultSetConcurrency),\n-                Numbers.valueOf(resultSetHoldability) });\n+                resultSetType,\n+                resultSetConcurrency,\n+                resultSetHoldability });\n         }\n         if (wrap)\n             stmnt = DelegatingPreparedStatement.newInstance(stmnt, this);\n@@ -501,9 +501,9 @@ protected CallableStatement prepareCall(String sql, int resultSetType,\n                     new Class[]{ String.class, int.class, int.class,\n                         int.class });\n             stmnt = (CallableStatement) invokeJDBC3(m, new Object[]{ sql,\n-                Numbers.valueOf(resultSetType),\n-                Numbers.valueOf(resultSetConcurrency),\n-                Numbers.valueOf(resultSetHoldability) });\n+                resultSetType,\n+                resultSetConcurrency,\n+                resultSetHoldability });\n         }\n         if (wrap)\n             stmnt = DelegatingCallableStatement.newInstance(stmnt, this);\n@@ -527,7 +527,7 @@ protected PreparedStatement prepareStatement(String sql,\n                 m = createJDBC3Method(PREPARE_WITH_KEYS, \"prepareStatement\",\n                     new Class[]{ String.class, int.class });\n             stmnt = (PreparedStatement) invokeJDBC3(m, new Object[]{ sql,\n-                Numbers.valueOf(autoGeneratedKeys) });\n+                autoGeneratedKeys });\n         }\n         if (wrap)\n             stmnt = DelegatingPreparedStatement.newInstance(stmnt, this);"},{"sha":"7bba530b52c1072562e98ca4b0119ebadf349f97","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RandomAccessResultList.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RandomAccessResultList.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RandomAccessResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RandomAccessResultList.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -98,7 +98,7 @@ protected Object getInternal(int index) {\n             return _full[index];\n         }\n \n-        Integer i = Numbers.valueOf(index);\n+        Integer i = index;\n         Object ret = _rows.get(i);\n         if (ret != null) {\n             if (ret instanceof Null)"},{"sha":"3d9bf3d5d853047a3dd4cf595d2d2a54bfebdd2f","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Location.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Location.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Location.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Location.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -53,8 +53,8 @@ public String getLocation(String format) {\n             return _loc.get(\"no-locator\").getMessage();\n         }\n         return MessageFormat.format(format, new Object []{\n-            Numbers.valueOf(_locator.getLineNumber()),\n-            Numbers.valueOf(_locator.getColumnNumber()), _locator.getPublicId(),\n+            _locator.getLineNumber(),\n+            _locator.getColumnNumber(), _locator.getPublicId(),\n             _locator.getSystemId() });\n     }\n "},{"sha":"e52df2baab250a74dd54209738a1ccbd5650fcdc","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -477,8 +477,8 @@ private boolean startTableGenerator(Attributes attrs) {\n         seq.setSource(getSourceFile(), scope, SourceTracker.SRC_XML);\n         Locator locator = getLocation().getLocator();\n         if (locator != null) {\n-            seq.setLineNumber(Numbers.valueOf(locator.getLineNumber()));\n-            seq.setColNumber(Numbers.valueOf(locator.getColumnNumber()));\n+            seq.setLineNumber(locator.getLineNumber());\n+            seq.setColNumber(locator.getColumnNumber());\n         }\n         pushElement(seq);\n         return true;\n@@ -1091,8 +1091,8 @@ private boolean startSQLResultSetMapping(Attributes attrs) {\n         result.setSource(getSourceFile(), scope, SourceTracker.SRC_XML);\n         Locator locator = getLocation().getLocator();\n         if (locator != null) {\n-            result.setLineNumber(Numbers.valueOf(locator.getLineNumber()));\n-            result.setColNumber(Numbers.valueOf(locator.getColumnNumber()));\n+            result.setLineNumber(locator.getLineNumber());\n+            result.setColNumber(locator.getColumnNumber());\n         }\n         pushElement(result);\n         return true;"},{"sha":"d1a44a26045441a4732fd1c41611e0111d5f62f2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PointHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PointHandler.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PointHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PointHandler.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -71,7 +71,7 @@ public Object toDataStoreValue(ValueMapping vm, Object val,\n             return null;\n \n         Point p = (Point) val;\n-        return new Object[]{ Numbers.valueOf(p.x), Numbers.valueOf(p.y) };\n+        return new Object[]{ p.x, p.y };\n     }\n \n     /**"},{"sha":"d55310d6ef10d7f364e1ca73fe7d3484320e2d63","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -473,9 +473,9 @@ private int getSourceMode(Package pkg) {\n     private void addSourceMode(Package pkg, int mode) {\n         Integer num = _pkgs.get(pkg);\n         if (num == null)\n-            num = Numbers.valueOf(mode);\n+            num = mode;\n         else\n-            num = Numbers.valueOf(num.intValue() | mode);\n+            num = num.intValue() | mode;\n         _pkgs.put(pkg, num);\n     }\n "},{"sha":"713bdf7bc1e7bbb92412ddbfae950953180cdc30","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -906,8 +906,8 @@ protected boolean startClass(String elem, Attributes attrs)\n             meta.setSourceMode(MODE_META, true);\n             Locator locator = getLocation().getLocator();\n             if (locator != null) {\n-                meta.setLineNumber(Numbers.valueOf(locator.getLineNumber()));\n-                meta.setColNumber(Numbers.valueOf(locator.getColumnNumber()));\n+                meta.setLineNumber(locator.getLineNumber());\n+                meta.setColNumber(locator.getColumnNumber());\n             }\n             meta.setListingIndex(_clsPos);\n             String name = attrs.getValue(\"name\");\n@@ -1049,8 +1049,8 @@ protected boolean startSequenceGenerator(Attributes attrs) {\n         meta.setSource(getSourceFile(), scope, SourceTracker.SRC_XML);\n         Locator locator = getLocation().getLocator();\n         if (locator != null) {\n-            meta.setLineNumber(Numbers.valueOf(locator.getLineNumber()));\n-            meta.setColNumber(Numbers.valueOf(locator.getColumnNumber()));\n+            meta.setLineNumber(locator.getLineNumber());\n+            meta.setColNumber(locator.getColumnNumber());\n         }\n         return true;\n     }\n@@ -1678,8 +1678,8 @@ protected boolean startNamedQuery(Attributes attrs)\n         }\n         Locator locator = getLocation().getLocator();\n         if (locator != null) {\n-            meta.setLineNumber(Numbers.valueOf(locator.getLineNumber()));\n-            meta.setColNumber(Numbers.valueOf(locator.getColumnNumber()));\n+            meta.setLineNumber(locator.getLineNumber());\n+            meta.setColNumber(locator.getColumnNumber());\n         }\n         Object cur = currentElement();\n         Object scope = (cur instanceof ClassMetaData)\n@@ -1765,8 +1765,8 @@ protected boolean startNamedNativeQuery(Attributes attrs)\n         meta.setSource(getSourceFile(), scope, SourceTracker.SRC_XML);\n         Locator locator = getLocation().getLocator();\n         if (locator != null) {\n-            meta.setLineNumber(Numbers.valueOf(locator.getLineNumber()));\n-            meta.setColNumber(Numbers.valueOf(locator.getColumnNumber()));\n+            meta.setLineNumber(locator.getLineNumber());\n+            meta.setColNumber(locator.getColumnNumber());\n         }\n         if (isMetaDataMode())\n             meta.setSourceMode(MODE_META);"},{"sha":"2eb0999ffe27f1ae0472a0f03254d96e248b878d","filename":"openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/ObjectData.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/ObjectData.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/ObjectData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/ObjectData.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -246,7 +246,7 @@ public void store(OpenJPAStateManager sm) {\n         // if the version has not been set in the state manager (only true\n         // when the object is new), set the version number to 0\n         if (_version == null)\n-            _version = Numbers.valueOf(0L);\n+            _version = 0L;\n \n         // run through each persistent field in the state manager and store it\n         FieldMetaData[] fmds = _meta.getFields();"},{"sha":"bee709f1d7785f48ac43a8892e1488465999f5ae","filename":"openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/62092d763ad8d63b7e1b5d45c04d607632986c5b/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java?ref=62092d763ad8d63b7e1b5d45c04d607632986c5b","patch":"@@ -92,7 +92,7 @@ private static void incrementVersion(OpenJPAStateManager sm) {\n         long version = 0;\n         if (sm.getVersion() != null)\n             version = ((Long) sm.getVersion()).longValue() + 1;\n-        sm.setNextVersion(Numbers.valueOf(version));\n+        sm.setNextVersion(version);\n     }\n \n     public boolean initialize(OpenJPAStateManager sm, PCState state,"}]}

