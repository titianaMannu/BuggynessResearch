{"sha":"621c52065eaac92fd989ff33e0d8fe72b567096c","node_id":"MDY6Q29tbWl0MjA2MzY0OjYyMWM1MjA2NWVhYWM5MmZkOTg5ZmYzM2UwZDhmZTcyYjU2NzA5NmM=","commit":{"author":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2011-03-13T09:54:15Z"},"committer":{"name":"Milosz Tylenda","email":"mtylenda@apache.org","date":"2011-03-13T09:54:15Z"},"message":"OPENJPA-1376: Add a test for new allocationSize behavior, make test take advantage of setTestsDisabled method.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1081067 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9e9341511b3d538db0d7f4c1f6d103bb07b4f35b","url":"https://api.github.com/repos/apache/openjpa/git/trees/9e9341511b3d538db0d7f4c1f6d103bb07b4f35b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/621c52065eaac92fd989ff33e0d8fe72b567096c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/621c52065eaac92fd989ff33e0d8fe72b567096c","html_url":"https://github.com/apache/openjpa/commit/621c52065eaac92fd989ff33e0d8fe72b567096c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/621c52065eaac92fd989ff33e0d8fe72b567096c/comments","author":null,"committer":null,"parents":[{"sha":"d3d944ccd28095b9fbaa6368979b5a064fc9e744","url":"https://api.github.com/repos/apache/openjpa/commits/d3d944ccd28095b9fbaa6368979b5a064fc9e744","html_url":"https://github.com/apache/openjpa/commit/d3d944ccd28095b9fbaa6368979b5a064fc9e744"}],"stats":{"total":39,"additions":33,"deletions":6},"files":[{"sha":"b63bbccf29308fd57a9d96783fd9354f8f303244","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestNativeSeqGenerator.java","status":"modified","additions":33,"deletions":6,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/621c52065eaac92fd989ff33e0d8fe72b567096c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestNativeSeqGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/621c52065eaac92fd989ff33e0d8fe72b567096c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestNativeSeqGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestNativeSeqGenerator.java?ref=621c52065eaac92fd989ff33e0d8fe72b567096c","patch":"@@ -27,7 +27,6 @@\n     OpenJPAEntityManager em;\n     JDBCConfiguration conf;\n     DBDictionary dict;\n-    boolean supportsNativeSequence = false;\n     \n     EntityE2 entityE2;\n     \n@@ -37,10 +36,14 @@ public void setUp() throws Exception {\n         assertNotNull(emf);\n         conf = (JDBCConfiguration) emf.getConfiguration();\n         dict = conf.getDBDictionaryInstance();\n-        supportsNativeSequence = dict.nextSequenceQuery != null;       \n+        boolean supportsNativeSequence = dict.nextSequenceQuery != null;       \n+        setTestsDisabled(!supportsNativeSequence);\n         if (supportsNativeSequence) {\n             em = emf.createEntityManager();\n             assertNotNull(em);\n+        } else {\n+            getLog().trace(this + \" is disabled because \" + dict.getClass().getSimpleName() +\n+                \" does not support native sequences.\");\n         }\n     }\n     \n@@ -49,10 +52,6 @@ public void createEntityE2() {\n     }\n     \n     public void testGetIdGeneratorSeqGen() {\n-        if (!supportsNativeSequence) {\n-            System.out.println(\"Does not support native sequence\");\n-            return;\n-        }\n         createEntityE2();\n         em.getTransaction().begin();\n         em.persist(entityE2);\n@@ -62,4 +61,32 @@ public void testGetIdGeneratorSeqGen() {\n         assertTrue(\"Next value should depend on previous genid\", nextId >= genId + 1);\n         em.close();\n     }\n+\n+    /**\n+     * Asserts native sequence generator allocates values in memory\n+     * and requests sequence values from database only when necessary.\n+     * @since 2.2.0\n+     */\n+    public void testAllocationSize() {\n+        // Turn off statement batching for easier INSERT counting.\n+        dict.setBatchLimit(0);\n+        em.getTransaction().begin();\n+        resetSQL();\n+        for (int i = 0; i < 51; i++) {\n+            createEntityE2();\n+            em.persist(entityE2);\n+        }\n+        em.getTransaction().commit();\n+\n+        // Since allocationSize has a default of 50, we expect 2 sequence fetches and 51 INSERTs.\n+        assertEquals(\"53 statements should be executed.\", 53, getSQLCount());\n+        String[] statements = new String[53];\n+        statements[0] = \".*\";\n+        statements[1] = \".*\";\n+        for (int i = 2; i < 53; i++) {\n+            statements[i] = \"INSERT .*\";\n+        }\n+        assertAllExactSQLInOrder(statements);\n+        em.close();\n+    }\n }"}]}

