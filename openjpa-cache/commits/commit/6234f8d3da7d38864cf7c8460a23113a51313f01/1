{"sha":"6234f8d3da7d38864cf7c8460a23113a51313f01","node_id":"MDY6Q29tbWl0MjA2MzY0OjYyMzRmOGQzZGE3ZDM4ODY0Y2Y3Yzg0NjBhMjMxMTNhNTEzMTNmMDE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-08-08T01:42:34Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-08-08T01:42:34Z"},"message":"Changed logging infrastructure to be aware of localization; changed localization to return log-ready Message instances instead of strings. Changed tons of code to use the new logging and localization calls.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@429535 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d897799670ba42f70b1799e1295c091903f2e994","url":"https://api.github.com/repos/apache/openjpa/git/trees/d897799670ba42f70b1799e1295c091903f2e994"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6234f8d3da7d38864cf7c8460a23113a51313f01","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6234f8d3da7d38864cf7c8460a23113a51313f01","html_url":"https://github.com/apache/openjpa/commit/6234f8d3da7d38864cf7c8460a23113a51313f01","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6234f8d3da7d38864cf7c8460a23113a51313f01/comments","author":null,"committer":null,"parents":[{"sha":"f44dd067d8e1a724e92ee054adbcc0392b5389b1","url":"https://api.github.com/repos/apache/openjpa/commits/f44dd067d8e1a724e92ee054adbcc0392b5389b1","html_url":"https://github.com/apache/openjpa/commit/f44dd067d8e1a724e92ee054adbcc0392b5389b1"}],"stats":{"total":881,"additions":475,"deletions":406},"files":[{"sha":"49fdd199e45a9971c66d7fd1dc12b9f4913dcb3b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -185,7 +185,8 @@ protected void executeOn(String[] files)\n         conf.setClassResolver(resolver);\n \n         if (!MappingTool.run(conf, files, flags, loader))\n-            throw new BuildException(_loc.get(\"bad-conf\", \"MappingToolTask\"));\n+            throw new BuildException(_loc.get(\"bad-conf\", \"MappingToolTask\")\n+                .getMessage());\n     }\n \n     public static class Action"},{"sha":"2031cb019e06f57905a61cf0ddf9e91011c489ab","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/SchemaToolTask.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/SchemaToolTask.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/SchemaToolTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/SchemaToolTask.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -133,7 +133,8 @@ protected void executeOn(String[] files)\n         flags.writer = Files.getWriter(file, loader);\n         if (!SchemaTool.run((JDBCConfiguration) getConfiguration(), files,\n             flags, loader))\n-            throw new BuildException(_loc.get(\"bad-conf\", \"SchemaToolTask\"));\n+            throw new BuildException(_loc.get(\"bad-conf\", \"SchemaToolTask\")\n+                .getMessage());\n     }\n \n     public static class Action"},{"sha":"16658795bb1de44d9b742d35f8496189e7935e64","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -97,7 +97,7 @@ private void flushInternal(RowImpl row) throws SQLException {\n                 else if (row.getAction() == Row.ACTION_INSERT)\n                     throw new SQLException(_loc.get(\n                         \"update-failed-no-failed-obj\", String.valueOf(count),\n-                        sql));\n+                        sql).getMessage());\n             }\n         } catch (SQLException se) {\n             throw SQLExceptions.getStore(se, row.getFailedObject(), _dict);"},{"sha":"cbb226382252572b63c115e88f5fc6a105e9df8e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -322,7 +322,7 @@ private void allocateSequence(JDBCStore store, ClassMapping mapping,\n                 if (!setSequence(mapping, stat, alloc, updateStatSeq,\n                     getConnection(store)))\n                     throw(err != null) ? err : new SQLException(_loc.get\n-                        (\"no-seq-row\", mapping, _table));\n+                        (\"no-seq-row\", mapping, _table).getMessage());\n             }\n         }\n         catch (SQLException se2) {"},{"sha":"b69c864bc04282d922cae99cf7c90bca3d45aa5b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","status":"modified","additions":9,"deletions":7,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -34,9 +34,11 @@\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.Localizer.Message;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.MetaDataContext;\n import org.apache.openjpa.util.MetaDataException;\n+\n import serp.util.Strings;\n \n /**\n@@ -315,7 +317,7 @@ public void assertNoSchemaComponents(MetaDataContext context, boolean die) {\n             return;\n         }\n \n-        String msg = _loc.get(\"unexpected-cols\", context);\n+        Message msg = _loc.get(\"unexpected-cols\", context);\n         if (die)\n             throw new MetaDataException(msg);\n         context.getRepository().getLog().warn(msg);\n@@ -344,7 +346,7 @@ public void assertStrategy(MetaDataContext context, Object contextStrat,\n         else\n             strat = contextStrat.getClass().getName();\n \n-        String msg = _loc.get(\"unexpected-strategy\", context, expected,\n+        Message msg = _loc.get(\"unexpected-strategy\", context, expected,\n             strat);\n         if (die)\n             throw new MetaDataException(msg);\n@@ -358,7 +360,7 @@ public void assertNoIndex(MetaDataContext context, boolean die) {\n         if (_idx == null)\n             return;\n \n-        String msg = _loc.get(\"unexpected-index\", context);\n+        Message msg = _loc.get(\"unexpected-index\", context);\n         if (die)\n             throw new MetaDataException(msg);\n         context.getRepository().getLog().warn(msg);\n@@ -372,7 +374,7 @@ public void assertNoUnique(MetaDataContext context, boolean die) {\n         if (_unq == null)\n             return;\n \n-        String msg = _loc.get(\"unexpected-unique\", context);\n+        Message msg = _loc.get(\"unexpected-unique\", context);\n         if (die)\n             throw new MetaDataException(msg);\n         context.getRepository().getLog().warn(msg);\n@@ -385,7 +387,7 @@ public void assertNoForeignKey(MetaDataContext context, boolean die) {\n         if (_fk == null)\n             return;\n \n-        String msg = _loc.get(\"unexpected-fk\", context);\n+        Message msg = _loc.get(\"unexpected-fk\", context);\n         if (die)\n             throw new MetaDataException(msg);\n         context.getRepository().getLog().warn(msg);\n@@ -407,7 +409,7 @@ public void assertNoJoin(MetaDataContext context, boolean die) {\n         if (!join)\n             return;\n \n-        String msg = _loc.get(\"unexpected-join\", context);\n+        Message msg = _loc.get(\"unexpected-join\", context);\n         if (die)\n             throw new MetaDataException(msg);\n         context.getRepository().getLog().warn(msg);\n@@ -643,7 +645,7 @@ else if (dotIdx != -1) {\n         } else if ((compat || !ttype) && !col.isCompatible(type, size)) {\n             // if existing column isn't compatible with desired type, die if\n             // can't adapt, else warn and change the existing column type\n-            String msg = _loc.get(prefix + \"-bad-col\", context,\n+            Message msg = _loc.get(prefix + \"-bad-col\", context,\n                 Schemas.getJDBCName(type), col.getDescription());\n             if (!adapt)\n                 throw new MetaDataException(msg);"},{"sha":"fa13eb7ac777072e370f629fb6c5b93168cdcdc5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ClassNameDiscriminatorStrategy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ClassNameDiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ClassNameDiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ClassNameDiscriminatorStrategy.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -90,7 +90,7 @@ public void loadSubclasses(JDBCStore store)\n                 className = dict.getString(rs, 1);\n                 if (className == null || className.length() == 0)\n                     throw new ClassNotFoundException(_loc.get(\"no-class-name\",\n-                        disc.getClassMapping(), col));\n+                        disc.getClassMapping(), col).getMessage());\n                 Class.forName(className, true, loader);\n             }\n             disc.setSubclassesLoaded(true);"},{"sha":"b48ea77d240969191d822367df3229aaadad396f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ValueMapDiscriminatorStrategy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ValueMapDiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ValueMapDiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ValueMapDiscriminatorStrategy.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -95,7 +95,7 @@ protected Class getClass(Object val, JDBCStore store)\n         throw new ClassNotFoundException(_loc.get(\"unknown-discrim-value\",\n             new Object[]{ str,\n                 disc.getClassMapping().getDescribedType().getName(),\n-                new TreeSet(_vals.keySet()) }));\n+                new TreeSet(_vals.keySet()) }).getMessage());\n     }\n \n     /**"},{"sha":"3bbc3faac8940cbcde6a2fdde19c0d422093ea6d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -113,9 +113,10 @@ public static int getAction(String name) {\n \n         String msg;\n         if (closest != null)\n-            msg = _loc.get(\"bad-fk-action-hint\", name, closest, recognized);\n+            msg = _loc.get(\"bad-fk-action-hint\", name, closest, recognized)\n+                .getMessage();\n         else\n-            msg = _loc.get(\"bad-fk-action\", name, recognized);\n+            msg = _loc.get(\"bad-fk-action\", name, recognized).getMessage();\n         throw new IllegalArgumentException(msg);\n     }\n "},{"sha":"a2bb7e3e2e022ca2ed960c7b181a1c3a27a9dba5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -51,7 +51,8 @@ public boolean isNameTaken(String name) {\n     protected void addName(String name, boolean validate) {\n         if (name == null || name.length() == 0) {\n             if (validate)\n-                throw new IllegalArgumentException(_loc.get(\"bad-name\", name));\n+                throw new IllegalArgumentException(_loc.get(\"bad-name\", name)\n+                    .getMessage());\n             return;\n         }\n "},{"sha":"5fe4abb1e02790b30c2109271fcdae6890698662","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -772,7 +772,7 @@ public void generateForeignKeys(String schemaName, String tableName,\n             pkTable = group.findTable(pkTableName);\n             if (pkTable == null)\n                 throw new SQLException(_loc.get(\"gen-nofktable\",\n-                    table, pkTableName));\n+                    table, pkTableName).getMessage());\n \n             // this sucks, because it is *not* guaranteed to work;\n             // the fk resultset is ordered by primary key table, then\n@@ -870,7 +870,8 @@ private void fireGenerationEvent(Object schemaObject)\n         for (Iterator i = _listeners.iterator(); i.hasNext();) {\n             Listener l = (Listener) i.next();\n             if (!l.schemaObjectGenerated(e))\n-                throw new SQLException(_loc.get(\"refresh-cancelled\"));\n+                throw new SQLException(_loc.get(\"refresh-cancelled\")\n+                    .getMessage());\n         }\n     }\n "},{"sha":"87582b41e49497b40acd4cb85c6d1841b0c0a284","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaParser.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaParser.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaParser.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -28,6 +28,7 @@\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.lib.meta.XMLMetaDataParser;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.Localizer.Message;\n import org.apache.openjpa.util.UserException;\n \n /**\n@@ -553,8 +554,8 @@ private static Object convertConstant(String val) {\n         return new Double(val);\n     }\n \n-    private void throwUserException(String msg) {\n-        throw new UserException(getSourceName() + \": \" + msg);\n+    private void throwUserException(Message msg) {\n+        throw new UserException(getSourceName() + \": \" + msg.getMessage());\n     }\n \n     /**"},{"sha":"14f947fb7286fa4e4cbcd3845cb354c68b1d4cf8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -81,6 +81,7 @@\n import org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.Localizer.Message;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.GeneralException;\n@@ -1362,7 +1363,7 @@ protected void storageWarning(Object orig, Object converted) {\n \n         if (storageLimitationsFatal || (warn && log.isWarnEnabled())\n             || (!warn && log.isTraceEnabled())) {\n-            String msg = _loc.get(\"storage-restriction\", new Object[]{\n+            Message msg = _loc.get(\"storage-restriction\", new Object[]{\n                 platform,\n                 orig,\n                 orig.getClass().getName(),"},{"sha":"3decfede9738c76520dedcc4601892faa186c3e3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLExceptions.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -19,6 +19,7 @@\n import java.util.LinkedList;\n import java.util.List;\n \n+import org.apache.openjpa.lib.util.Localizer.Message;\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.StoreException;\n \n@@ -63,6 +64,14 @@ public static OpenJPAException getStore(SQLException se, Object failed,\n         return getStore(se.getMessage(), se, failed, dict);\n     }\n \n+    /**\n+     * Convert the specified exception into a {@link StoreException}.\n+     */\n+    public static OpenJPAException getStore(Message msg, SQLException se,\n+        DBDictionary dict) {\n+        return getStore(msg.getMessage(), se, null, dict);\n+    }\n+\n     /**\n      * Convert the specified exception into a {@link StoreException}.\n      */"},{"sha":"c74d15a0a56323a888fed3759ef085f368f574f6","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -140,3 +140,4 @@ illegal-method: {0}.{1}() is illegal to be invoked\n column-not-mapped: SQLResultSetMapping \"{0}\" does not map the columns \"{1}\" \\\n \tthat are selected by the SQL query\\r\\n \"{2}\"\n batch-license: Your license does not have SQL batching capabilities.\n+dictionary-configuration: DBDictionary configuration: \\n{0}"},{"sha":"c5d65a327200c854d4644181a7a6e6770bc8d6d8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ant/MetaDataToolTask.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/ant/MetaDataToolTask.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/ant/MetaDataToolTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ant/MetaDataToolTask.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -73,7 +73,8 @@ else if (fileName != null)\n             flags.file = Files.getFile(fileName, loader);\n         if (!MetaDataTool.run((OpenJPAConfiguration) getConfiguration(), files,\n             flags, null, loader))\n-            throw new BuildException(_loc.get(\"bad-conf\", \"MetaDataToolTask\"));\n+            throw new BuildException(_loc.get(\"bad-conf\", \"MetaDataToolTask\")\n+                .getMessage());\n     }\n \n     public static class Action"},{"sha":"7674119f3344569eb86af08963c2ffcb1b5b5a4d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivations.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivations.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivations.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -51,7 +51,7 @@\n         if (derivations.isEmpty()) {\n             Localizer loc = Localizer.forPackage(ProductDerivations.class);\n             throw new MissingResourceException(loc.get(\"no-product-derivations\",\n-                ProductDerivation.class.getName()),\n+                ProductDerivation.class.getName()).getMessage(),\n                 ProductDerivations.class.getName(), \"derivations\");\n         }\n "},{"sha":"f9ec4ca6def0a3f3db5a47b647794455d7da55d0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/Caches.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/Caches.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/Caches.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/Caches.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -47,7 +47,7 @@ static Set addTypesByName(OpenJPAConfiguration conf,\n                     classes = new HashSet();\n                 classes.add(cls);\n             } catch (Throwable t) {\n-                conf.getLog(OpenJPAConfiguration.LOG_RUNTIME).warn(t, t);\n+                conf.getLog(OpenJPAConfiguration.LOG_RUNTIME).warn(null, t);\n             }\n         }\n         return classes;"},{"sha":"174bc1dbdc39399a05b5ed62f61a98777aee99b1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -96,7 +96,7 @@ public synchronized void scheduleEviction(DataCache cache, String times) {\n         _caches.put(cache, schedule);\n         _stop = false;\n         if (_thread == null) {\n-            _thread = new Thread(this, _loc.get(\"scheduler-name\"));\n+            _thread = new Thread(this, _loc.get(\"scheduler-name\").getMessage());\n             _thread.start();\n             if (_log.isTraceEnabled())\n                 _log.trace(_loc.get(\"scheduler-start\", _thread.getName()));\n@@ -191,7 +191,7 @@ public Schedule(String date) {\n         }\n \n         private int[] parse(String token, int min, int max) {\n-            if (token.trim().equals(\"*\"))\n+            if (\"*\".equals(token.trim()))\n                 return WILDCARD;\n             String[] tokens = Strings.split(token, \",\", 0);\n             int [] times = new int[tokens.length];"},{"sha":"012fcb9a576257a4f4ed6386edce4d4cd6088f9c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCDataGenerator.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCDataGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCDataGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCDataGenerator.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -89,8 +89,8 @@ public PCData generatePCData(Object oid, ClassMetaData meta) {\n         if (storage == null) {\n             storage = generateStorage(meta);\n             _generated.put(type, storage);\n-            if (_log.isDebugEnabled())\n-                _log.debug(_loc.get(\"pcdata-created\", type.getName(), meta));\n+            if (_log.isTraceEnabled())\n+                _log.trace(_loc.get(\"pcdata-created\", type.getName(), meta));\n         }\n         DynamicPCData data = (DynamicPCData) storage.newInstance();\n         data.setId(oid);\n@@ -103,8 +103,8 @@ public PCData generatePCData(Object oid, ClassMetaData meta) {\n      * Actually generate the factory instance.\n      */\n     private DynamicStorage generateStorage(ClassMetaData meta) {\n-        if (_log.isDebugEnabled())\n-            _log.debug(_loc.get(\"pcdata-generate\", meta));\n+        if (_log.isTraceEnabled())\n+            _log.trace(_loc.get(\"pcdata-generate\", meta));\n \n         FieldMetaData[] fields = meta.getFields();\n         int[] types = new int[fields.length];"},{"sha":"2d8e7dfb4ee79fa458d0a92c2c876c69c1aeac81","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":80,"deletions":79,"changes":159,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -51,6 +51,7 @@\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.lib.util.Services;\n import org.apache.openjpa.lib.util.TemporaryClassLoader;\n+import org.apache.openjpa.lib.util.Localizer.Message;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n@@ -513,7 +514,7 @@ private void processViolations() {\n             if (itr.hasNext())\n                 buf.append(sep);\n         }\n-        String msg = _loc.get(\"property-violations\", buf);\n+        Message msg = _loc.get(\"property-violations\", buf);\n \n         if (_fail)\n             throw new UserException(msg);\n@@ -730,7 +731,7 @@ private void addClearFieldsMethod()\n             if (fmds[i].getManagement() != FieldMetaData.MANAGE_PERSISTENT)\n                 continue;\n \n-            loadManagedInstance(code, false, false);\n+            loadManagedInstance(code, false);\n             switch (fmds[i].getDeclaredTypeCode()) {\n                 case JavaTypes.BOOLEAN:\n                 case JavaTypes.BYTE:\n@@ -884,11 +885,11 @@ private void addProvideFieldsMethods()\n             // <field> = pcStateManager.provided<type>Field\n             //     (this, fieldNumber);\n             for (int i = 0; i < fmds.length; i++) {\n-                tabins.addTarget(loadManagedInstance(code, false, false));\n+                tabins.addTarget(loadManagedInstance(code, false));\n                 code.getfield().setField(SM, SMTYPE);\n-                loadManagedInstance(code, false, false);\n+                loadManagedInstance(code, false);\n                 code.iload().setParam(0);\n-                loadManagedInstance(code, true, false);\n+                loadManagedInstance(code, false);\n                 addGetManagedValueCode(code, fmds[i]);\n                 code.invokeinterface().setMethod(getStateManagerMethod\n                     (fmds[i].getDeclaredType(), \"provided\", false, false));\n@@ -935,11 +936,11 @@ private void addReplaceFieldsMethods()\n             //  (this, fieldNumber);\n             for (int i = 0; i < fmds.length; i++) {\n                 // for the addSetManagedValueCode call below.\n-                tabins.addTarget(loadManagedInstance(code, true, false));\n+                tabins.addTarget(loadManagedInstance(code, false));\n \n-                loadManagedInstance(code, false, false);\n+                loadManagedInstance(code, false);\n                 code.getfield().setField(SM, SMTYPE);\n-                loadManagedInstance(code, false, false);\n+                loadManagedInstance(code, false);\n                 code.iload().setParam(0);\n                 code.invokeinterface().setMethod(getStateManagerMethod\n                     (fmds[i].getDeclaredType(), \"replace\", true, false));\n@@ -990,7 +991,7 @@ private void addCopyFieldsMethod()\n             for (int i = 0; i < fmds.length; i++) {\n                 // <field> = other.<field>;\n                 // or set<field> (other.get<field>);\n-                tabins.addTarget(loadManagedInstance(code, true, false));\n+                tabins.addTarget(loadManagedInstance(code, false));\n                 code.aload().setParam(0);\n                 addGetManagedValueCode(code, fmds[i]);\n                 addSetManagedValueCode(code, fmds[i]);\n@@ -1035,7 +1036,7 @@ private int beginSwitchMethod(String name, Code code) {\n         // no super: if (rel < 0) throw new IllegalArgumentException ();\n         JumpInstruction ifins = code.ifge();\n         if (_meta.getPCSuperclass() != null) {\n-            loadManagedInstance(code, false, false);\n+            loadManagedInstance(code, false);\n             String[] args;\n             if (copy) {\n                 args = new String[]{ _meta.getPCSuperclass().getName(),\n@@ -1087,15 +1088,15 @@ private void addMultipleFieldsMethodVersion(BCMethod single) {\n             //\tthrow new IllegalArgumentException\n             code.aload().setLocal(inst);\n             code.getfield().setField(SM, SMTYPE);\n-            loadManagedInstance(code, false, false);\n+            loadManagedInstance(code, false);\n             code.getfield().setField(SM, SMTYPE);\n             JumpInstruction ifins = code.ifacmpeq();\n             throwException(code, IllegalArgumentException.class);\n             ifins.setTarget(code.nop());\n \n             // if (pcStateManager == null)\n             //  throw new IllegalStateException\n-            loadManagedInstance(code, false, false);\n+            loadManagedInstance(code, false);\n             code.getfield().setField(SM, SMTYPE);\n             ifins = code.ifnonnull();\n             throwException(code, IllegalStateException.class);\n@@ -1109,7 +1110,7 @@ private void addMultipleFieldsMethodVersion(BCMethod single) {\n         JumpInstruction testins = code.go2();\n \n         // <method> (fields[i]);\n-        Instruction bodyins = loadManagedInstance(code, false, false);\n+        Instruction bodyins = loadManagedInstance(code, false);\n         if (copy)\n             code.aload().setLocal(inst);\n         code.aload().setParam(fieldNumbers);\n@@ -1178,7 +1179,7 @@ private void addStockMethods()\n         BCMethod meth = _pc.declareMethod(PRE + \"GetStateManager\",\n             StateManager.class, null);\n         Code code = meth.getCode(true);\n-        loadManagedInstance(code, false, false);\n+        loadManagedInstance(code, false);\n         code.getfield().setField(SM, StateManager.class);\n         code.areturn();\n         code.calculateMaxStack();\n@@ -1202,7 +1203,7 @@ private void translateFromStateManagerMethod(Method m) {\n         Code code = method.getCode(true);\n \n         // if (pcStateManager == null) return <default>;\n-        loadManagedInstance(code, false, false);\n+        loadManagedInstance(code, false);\n         code.getfield().setField(SM, SMTYPE);\n         JumpInstruction ifins = code.ifnonnull();\n         if (returnType.equals(boolean.class))\n@@ -1212,7 +1213,7 @@ else if (!returnType.equals(void.class))\n         code.xreturn().setType(returnType);\n \n         // return pcStateManager.<method> (<args>);\n-        ifins.setTarget(loadManagedInstance(code, false, false));\n+        ifins.setTarget(loadManagedInstance(code, false));\n         code.getfield().setField(SM, SMTYPE);\n         for (int i = 0; i < params.length; i++)\n             code.xload().setParam(i);\n@@ -1233,7 +1234,7 @@ private void addGetVersionMethod()\n         Code code = method.getCode(true);\n \n         // if (pcStateManager == null)\n-        loadManagedInstance(code, false, false);\n+        loadManagedInstance(code, false);\n         code.getfield().setField(SM, SMTYPE);\n         JumpInstruction ifins = code.ifnonnull();\n         FieldMetaData versionField = _meta.getVersionField();\n@@ -1247,7 +1248,7 @@ private void addGetVersionMethod()\n                 code.anew().setType(wrapper);\n                 code.dup();\n             }\n-            loadManagedInstance(code, true, false);\n+            loadManagedInstance(code, false);\n             addGetManagedValueCode(code, versionField);\n             if (wrapper != null)\n                 code.invokespecial().setMethod(wrapper, \"<init>\", void.class,\n@@ -1256,7 +1257,7 @@ private void addGetVersionMethod()\n         code.areturn();\n \n         // return pcStateManager.getVersion ();\n-        ifins.setTarget(loadManagedInstance(code, false, false));\n+        ifins.setTarget(loadManagedInstance(code, false));\n         code.getfield().setField(SM, SMTYPE);\n         code.invokeinterface().setMethod(SMTYPE, \"getVersion\", Object.class,\n             null);\n@@ -1297,14 +1298,14 @@ private void addReplaceFlagsMethod() {\n         Code code = method.getCode(true);\n \n         // if (pcStateManager != null)\n-        loadManagedInstance(code, false, false);\n+        loadManagedInstance(code, false);\n         code.getfield().setField(SM, SMTYPE);\n         JumpInstruction ifins = code.ifnonnull();\n         code.vreturn();\n \n         // pcFlags = pcStateManager.replaceFlags ();\n-        ifins.setTarget(loadManagedInstance(code, false, false));\n-        loadManagedInstance(code, false, false);\n+        ifins.setTarget(loadManagedInstance(code, false));\n+        loadManagedInstance(code, false);\n         code.getfield().setField(SM, SMTYPE);\n         code.invokeinterface().setMethod(SMTYPE, \"replaceFlags\",\n             byte.class, null);\n@@ -1329,11 +1330,11 @@ private void addReplaceStateManagerMethod() {\n \n         // if (pcStateManager != null)\n         //\tpcStateManager = pcStateManager.replaceStateManager(sm);\n-        loadManagedInstance(code, false, false);\n+        loadManagedInstance(code, false);\n         code.getfield().setField(SM, SMTYPE);\n         JumpInstruction ifins = code.ifnull();\n-        loadManagedInstance(code, false, false);\n-        loadManagedInstance(code, false, false);\n+        loadManagedInstance(code, false);\n+        loadManagedInstance(code, false);\n         code.getfield().setField(SM, SMTYPE);\n         code.aload().setParam(0);\n         code.invokeinterface().setMethod(SMTYPE, \"replaceStateManager\",\n@@ -1348,7 +1349,7 @@ private void addReplaceStateManagerMethod() {\n             \"getSecurityManager\", SecurityManager.class, null));\n \n         // pcStateManager = sm;\n-        ifins.setTarget(loadManagedInstance(code, false, false));\n+        ifins.setTarget(loadManagedInstance(code, false));\n         code.aload().setParam(0);\n         code.putfield().setField(SM, SMTYPE);\n         code.vreturn();\n@@ -1438,7 +1439,7 @@ private void addCopyKeyFieldsToObjectIdMethod(boolean fieldManager)\n \n         // call superclass method\n         if (_meta.getPCSuperclass() != null) {\n-            loadManagedInstance(code, false, false);\n+            loadManagedInstance(code, false);\n             for (int i = 0; i < args.length; i++)\n                 code.aload().setParam(i);\n             code.invokespecial().setMethod(_meta.getPCSuperclass().getName(),\n@@ -1496,7 +1497,7 @@ private void addCopyKeyFieldsToObjectIdMethod(boolean fieldManager)\n                     && !type.getName().equals(String.class.getName()))\n                     code.checkcast().setType(type);\n             } else {\n-                loadManagedInstance(code, true, false);\n+                loadManagedInstance(code, false);\n                 addGetManagedValueCode(code, fmds[i]);\n             }\n \n@@ -1531,7 +1532,7 @@ private void addCopyKeyFieldsFromObjectIdMethod(boolean fieldManager)\n \n         // call superclass method\n         if (_meta.getPCSuperclass() != null) {\n-            loadManagedInstance(code, false, false);\n+            loadManagedInstance(code, false);\n             for (int i = 0; i < args.length; i++)\n                 code.aload().setParam(i);\n             code.invokespecial().setMethod(_meta.getPCSuperclass().getName(),\n@@ -1585,7 +1586,7 @@ private void addCopyKeyFieldsFromObjectIdMethod(boolean fieldManager)\n                 code.iload().setLocal(inherited);\n                 code.iadd();\n             } else\n-                loadManagedInstance(code, true, false);\n+                loadManagedInstance(code, false);\n \n             if (unwrapped != type) {\n                 code.anew().setType(type);\n@@ -1710,7 +1711,7 @@ private void addNewObjectIdInstanceMethod(boolean obj)\n         if (obj && usesClsString == null) {\n             // throw new IllegalArgumentException (...);\n             String msg = _loc.get(\"str-cons\", oidType,\n-                _meta.getDescribedType());\n+                _meta.getDescribedType()).getMessage();\n             code.anew().setType(IllegalArgumentException.class);\n             code.dup();\n             code.constant().setValue(msg);\n@@ -1745,7 +1746,7 @@ else if (usesClsString == Boolean.FALSE)\n                 args = new Class[]{ String.class };\n         } else if (_meta.isOpenJPAIdentity()) {\n             // new <type>Identity (XXX.class, <pk>);\n-            loadManagedInstance(code, true, false);\n+            loadManagedInstance(code, false);\n             FieldMetaData pk = _meta.getPrimaryKeyFields()[0];\n             addGetManagedValueCode(code, pk);\n             if (_meta.getObjectIdType() == ObjectId.class)\n@@ -2112,7 +2113,7 @@ private void modifyWriteObjectMethod(BCMethod method, boolean full) {\n         code.beforeFirst();\n \n         // bool clear = pcSerializing ();\n-        loadManagedInstance(code, false, false);\n+        loadManagedInstance(code, false);\n         code.invokevirtual().setMethod(PRE + \"Serializing\",\n             boolean.class, null);\n         int clear = code.getNextLocalsIndex();\n@@ -2135,7 +2136,7 @@ private void modifyWriteObjectMethod(BCMethod method, boolean full) {\n             // if (clear) pcSetDetachedState (null);\n             code.iload().setLocal(clear);\n             toret = code.ifeq();\n-            loadManagedInstance(code, false, false);\n+            loadManagedInstance(code, false);\n             code.constant().setNull();\n             code.invokevirtual().setMethod(PRE + \"SetDetachedState\",\n                 void.class, new Class[]{ Object.class });\n@@ -2157,7 +2158,7 @@ private void modifyReadObjectMethod(BCMethod method, boolean full) {\n         // if this instance uses synthetic detached state, note that it has\n         // been deserialized\n         if (ClassMetaData.SYNTHETIC.equals(_meta.getDetachedState())) {\n-            loadManagedInstance(code, false, false);\n+            loadManagedInstance(code, false);\n             code.getstatic().setField(PersistenceCapable.class,\n                 \"DESERIALIZED\", Object.class);\n             code.invokevirtual().setMethod(PRE + \"SetDetachedState\",\n@@ -2207,10 +2208,10 @@ private void writeIsDetachedMethod(Code code)\n \n         // if (sm != null)\n         //\t\treturn (sm.isDetached ()) ? Boolean.TRUE : Boolean.FALSE;\n-        loadManagedInstance(code, false, false);\n+        loadManagedInstance(code, false);\n         code.getfield().setField(SM, SMTYPE);\n         JumpInstruction ifins = code.ifnull();\n-        loadManagedInstance(code, false, false);\n+        loadManagedInstance(code, false);\n         code.getfield().setField(SM, SMTYPE);\n         code.invokeinterface().setMethod(SMTYPE, \"isDetached\",\n             boolean.class, null);\n@@ -2229,11 +2230,11 @@ private void writeIsDetachedMethod(Code code)\n         JumpInstruction notdeser = null;\n         Instruction target;\n         if (state != Boolean.FALSE) {\n-            ifins.setTarget(loadManagedInstance(code, false, false));\n+            ifins.setTarget(loadManagedInstance(code, false));\n             code.invokevirtual().setMethod(PRE + \"GetDetachedState\",\n                 Object.class, null);\n             ifins = code.ifnull();\n-            loadManagedInstance(code, false, false);\n+            loadManagedInstance(code, false);\n             code.invokevirtual().setMethod(PRE + \"GetDetachedState\",\n                 Object.class, null);\n             code.getstatic().setField(PersistenceCapable.class,\n@@ -2269,7 +2270,7 @@ private void writeIsDetachedMethod(Code code)\n         if (state != Boolean.TRUE && version != null) {\n             // if (<version> != <default>)\n             //\t\treturn true;\n-            loadManagedInstance(code, false, false);\n+            loadManagedInstance(code, false);\n             addGetManagedValueCode(code, version);\n             ifins = ifDefaultValue(code, version);\n             code.getstatic().setField(Boolean.class, \"TRUE\", Boolean.class);\n@@ -2300,7 +2301,7 @@ private void writeIsDetachedMethod(Code code)\n         if (state == null) {\n             // if (pcGetDetachedState () == null) // instead of DESERIALIZED\n             //     return Boolean.FALSE;\n-            loadManagedInstance(code, false, false);\n+            loadManagedInstance(code, false);\n             code.invokevirtual().setMethod(PRE + \"GetDetachedState\",\n                 Object.class, null);\n             ifins = code.ifnonnull();\n@@ -2322,7 +2323,7 @@ private void writeIsDetachedMethod(Code code)\n                 if (pks[i].getValueStrategy() == ValueStrategies.NONE)\n                     continue;\n \n-                target = loadManagedInstance(code, false, false);\n+                target = loadManagedInstance(code, false);\n                 if (ifins != null)\n                     ifins.setTarget(target);\n                 if (ifins2 != null)\n@@ -2333,7 +2334,7 @@ private void writeIsDetachedMethod(Code code)\n                 ifins = ifDefaultValue(code, pks[i]);\n                 if (pks[i].getDeclaredTypeCode() == JavaTypes.STRING) {\n                     code.constant().setValue(\"\");\n-                    loadManagedInstance(code, false, false);\n+                    loadManagedInstance(code, false);\n                     addGetManagedValueCode(code, pks[i]);\n                     code.invokevirtual().setMethod(String.class, \"equals\",\n                         boolean.class, new Class[]{ Object.class });\n@@ -2451,7 +2452,7 @@ private void addCloningCode() {\n             code = clone.getCode(true);\n \n             // return super.clone ();\n-            loadManagedInstance(code, true, false);\n+            loadManagedInstance(code, false);\n             code.invokespecial().setMethod(_pc.getSuperclassName(),\n                 \"clone\", Object.class.getName(), null);\n             code.areturn();\n@@ -2681,7 +2682,7 @@ private void addGetMethod(int index, FieldMetaData fmd)\n         byte fieldFlag = getFieldFlag(fmd);\n         if ((fieldFlag & PersistenceCapable.CHECK_READ) == 0\n             && (fieldFlag & PersistenceCapable.MEDIATE_READ) == 0) {\n-            loadManagedInstance(code, true, true);\n+            loadManagedInstance(code, true);\n             addGetManagedValueCode(code, fmd);\n             code.xreturn().setType(fmd.getDeclaredType());\n \n@@ -2693,21 +2694,21 @@ private void addGetMethod(int index, FieldMetaData fmd)\n         // dfg: if (inst.pcFlags <= 0) return inst.<field>;\n         JumpInstruction ifins = null;\n         if ((fieldFlag & PersistenceCapable.CHECK_READ) > 0) {\n-            loadManagedInstance(code, false, true);\n+            loadManagedInstance(code, true);\n             code.getfield().setField(PRE + \"Flags\", byte.class);\n             ifins = code.ifgt();\n-            loadManagedInstance(code, true, true);\n+            loadManagedInstance(code, true);\n             addGetManagedValueCode(code, fmd);\n             code.xreturn().setType(fmd.getDeclaredType());\n         }\n \n         // if (inst.pcStateManager == null) return inst.<field>;\n-        Instruction ins = loadManagedInstance(code, false, true);\n+        Instruction ins = loadManagedInstance(code, true);\n         if (ifins != null)\n             ifins.setTarget(ins);\n         code.getfield().setField(SM, SMTYPE);\n         ifins = code.ifnonnull();\n-        loadManagedInstance(code, true, true);\n+        loadManagedInstance(code, true);\n         addGetManagedValueCode(code, fmd);\n         code.xreturn().setType(fmd.getDeclaredType());\n \n@@ -2720,12 +2721,12 @@ private void addGetMethod(int index, FieldMetaData fmd)\n \n         // inst.pcStateManager.accessingField (field);\n         // return inst.<field>;\n-        loadManagedInstance(code, false, true);\n+        loadManagedInstance(code, true);\n         code.getfield().setField(SM, SMTYPE);\n         code.iload().setLocal(fieldLocal);\n         code.invokeinterface().setMethod(SMTYPE, \"accessingField\", void.class,\n             new Class[]{ int.class });\n-        loadManagedInstance(code, true, true);\n+        loadManagedInstance(code, true);\n         addGetManagedValueCode(code, fmd);\n         code.xreturn().setType(fmd.getDeclaredType());\n \n@@ -2753,35 +2754,35 @@ private void addSetMethod(int index, FieldMetaData fmd)\n         JumpInstruction ifins = null;\n         byte fieldFlag = getFieldFlag(fmd);\n         if ((fieldFlag & PersistenceCapable.CHECK_WRITE) > 0) {\n-            loadManagedInstance(code, false, true);\n+            loadManagedInstance(code, true);\n             code.getfield().setField(PRE + \"Flags\", byte.class);\n             ifins = code.ifne();\n-            loadManagedInstance(code, true, true);\n+            loadManagedInstance(code, true);\n             code.xload().setParam(firstParamOffset);\n             addSetManagedValueCode(code, fmd);\n             code.vreturn();\n         }\n \n         // if (inst.pcStateManager == null) inst.<field> = value;\n-        Instruction ins = loadManagedInstance(code, false, true);\n+        Instruction ins = loadManagedInstance(code, true);\n         if (ifins != null)\n             ifins.setTarget(ins);\n         code.getfield().setField(SM, SMTYPE);\n         ifins = code.ifnonnull();\n-        loadManagedInstance(code, true, true);\n+        loadManagedInstance(code, true);\n         code.xload().setParam(firstParamOffset);\n         addSetManagedValueCode(code, fmd);\n         code.vreturn();\n \n         // inst.pcStateManager.setting<fieldType>Field (inst,\n         //\tpcInheritedFieldCount + <index>, inst.<field>, value, 0);\n-        ifins.setTarget(loadManagedInstance(code, false, true));\n+        ifins.setTarget(loadManagedInstance(code, true));\n         code.getfield().setField(SM, SMTYPE);\n-        loadManagedInstance(code, false, true);\n+        loadManagedInstance(code, true);\n         code.getstatic().setField(INHERIT, int.class);\n         code.constant().setValue(index);\n         code.iadd();\n-        loadManagedInstance(code, true, true);\n+        loadManagedInstance(code, true);\n         addGetManagedValueCode(code, fmd);\n         code.xload().setParam(firstParamOffset);\n         code.constant().setValue(0);\n@@ -2860,7 +2861,7 @@ private void addDetachedStateMethods(boolean impl) {\n         Code code = method.getCode(true);\n         if (impl) {\n             // return pcDetachedState;\n-            loadManagedInstance(code, true, false);\n+            loadManagedInstance(code, false);\n             code.getfield().setField(declarer, name, Object.class.getName());\n         } else\n             code.constant().setNull();\n@@ -2875,7 +2876,7 @@ private void addDetachedStateMethods(boolean impl) {\n         code = method.getCode(true);\n         if (impl) {\n             // pcDetachedState = state;\n-            loadManagedInstance(code, false, false);\n+            loadManagedInstance(code, false);\n             code.aload().setParam(0);\n             code.putfield().setField(declarer, name,\n                 Object.class.getName());\n@@ -2941,29 +2942,29 @@ private void addReadExternal(boolean parentDetachable,\n         // super.readExternal (in);\n         Class sup = _meta.getDescribedType().getSuperclass();\n         if (!parentDetachable && Externalizable.class.isAssignableFrom(sup)) {\n-            loadManagedInstance(code, false, false);\n+            loadManagedInstance(code, false);\n             code.aload().setParam(0);\n             code.invokespecial().setMethod(sup, \"readExternal\",\n                 void.class, inargs);\n         }\n \n         // readUnmanaged (in);\n-        loadManagedInstance(code, false, false);\n+        loadManagedInstance(code, false);\n         code.aload().setParam(0);\n         code.invokevirtual().setMethod(_meta.getDescribedType(),\n             PRE + \"ReadUnmanaged\", void.class, inargs);\n \n         if (detachedState) {\n             // pcSetDetachedState (in.readObject ());\n-            loadManagedInstance(code, false, false);\n+            loadManagedInstance(code, false);\n             code.aload().setParam(0);\n             code.invokeinterface().setMethod(ObjectInput.class, \"readObject\",\n                 Object.class, null);\n             code.invokevirtual().setMethod(PRE + \"SetDetachedState\",\n                 void.class, new Class[]{ Object.class });\n \n             // pcReplaceStateManager ((StateManager) in.readObject ());\n-            loadManagedInstance(code, false, false);\n+            loadManagedInstance(code, false);\n             code.aload().setParam(0);\n             code.invokeinterface().setMethod(ObjectInput.class, \"readObject\",\n                 Object.class, null);\n@@ -3000,7 +3001,7 @@ private void addReadUnmanaged(Collection unmgd, boolean parentDetachable)\n \n         // super.readUnmanaged (in);\n         if (parentDetachable) {\n-            loadManagedInstance(code, false, false);\n+            loadManagedInstance(code, false);\n             code.aload().setParam(0);\n             code.invokespecial().setMethod(_meta.getPCSuperclass(),\n                 PRE + \"ReadUnmanaged\", void.class, inargs);\n@@ -3033,7 +3034,7 @@ private void readExternal(Code code, String fieldName, Class type,\n             methName = \"readObject\";\n \n         // <field> = in.read<type> ();\n-        loadManagedInstance(code, true, false);\n+        loadManagedInstance(code, false);\n         code.aload().setParam(0);\n         Class ret = (type.isPrimitive()) ? type : Object.class;\n         code.invokeinterface().setMethod(ObjectInput.class, methName,\n@@ -3053,10 +3054,10 @@ private void readExternal(Code code, String fieldName, Class type,\n                 case JavaTypes.CALENDAR:\n                     // if (sm != null)\n                     //   sm.proxyDetachedDeserialized (<index>);\n-                    loadManagedInstance(code, false, false);\n+                    loadManagedInstance(code, false);\n                     code.getfield().setField(SM, SMTYPE);\n                     IfInstruction ifins = code.ifnull();\n-                    loadManagedInstance(code, false, false);\n+                    loadManagedInstance(code, false);\n                     code.getfield().setField(SM, SMTYPE);\n                     code.constant().setValue(fmd.getIndex());\n                     code.invokeinterface().setMethod(SMTYPE,\n@@ -3082,14 +3083,14 @@ private void addWriteExternal(boolean parentDetachable,\n         // super.writeExternal (out);\n         Class sup = _meta.getDescribedType().getSuperclass();\n         if (!parentDetachable && Externalizable.class.isAssignableFrom(sup)) {\n-            loadManagedInstance(code, false, false);\n+            loadManagedInstance(code, false);\n             code.aload().setParam(0);\n             code.invokespecial().setMethod(sup, \"writeExternal\",\n                 void.class, outargs);\n         }\n \n         // writeUnmanaged (out);\n-        loadManagedInstance(code, false, false);\n+        loadManagedInstance(code, false);\n         code.aload().setParam(0);\n         code.invokevirtual().setMethod(_meta.getDescribedType(),\n             PRE + \"WriteUnmanaged\", void.class, outargs);\n@@ -3099,10 +3100,10 @@ private void addWriteExternal(boolean parentDetachable,\n             // if (sm != null)\n             //   if (sm.writeDetached (out))\n             //      return;\n-            loadManagedInstance(code, false, false);\n+            loadManagedInstance(code, false);\n             code.getfield().setField(SM, SMTYPE);\n             IfInstruction ifnull = code.ifnull();\n-            loadManagedInstance(code, false, false);\n+            loadManagedInstance(code, false);\n             code.getfield().setField(SM, SMTYPE);\n             code.aload().setParam(0);\n             code.invokeinterface().setMethod(SMTYPE, \"writeDetached\",\n@@ -3114,7 +3115,7 @@ private void addWriteExternal(boolean parentDetachable,\n             //   out.writeObject (pcGetDetachedState ());\n             Class[] objargs = new Class[]{ Object.class };\n             ifnull.setTarget(code.aload().setParam(0));\n-            loadManagedInstance(code, false, false);\n+            loadManagedInstance(code, false);\n             code.invokevirtual().setMethod(PRE + \"GetDetachedState\",\n                 Object.class, null);\n             code.invokeinterface().setMethod(ObjectOutput.class,\n@@ -3133,7 +3134,7 @@ private void addWriteExternal(boolean parentDetachable,\n         for (int i = 0; i < fmds.length; i++)\n             if (!fmds[i].isTransient())\n                 writeExternal(code, fmds[i].getName(),\n-                    fmds[i].getDeclaredType(), i, fmds[i]);\n+                    fmds[i].getDeclaredType(), fmds[i]);\n \n         // return\n         code.vreturn();\n@@ -3156,7 +3157,7 @@ private void addWriteUnmanaged(Collection unmgd, boolean parentDetachable)\n \n         // super.writeUnmanaged (out);\n         if (parentDetachable) {\n-            loadManagedInstance(code, false, false);\n+            loadManagedInstance(code, false);\n             code.aload().setParam(0);\n             code.invokespecial().setMethod(_meta.getPCSuperclass(),\n                 PRE + \"WriteUnmanaged\", void.class, outargs);\n@@ -3166,7 +3167,7 @@ private void addWriteUnmanaged(Collection unmgd, boolean parentDetachable)\n         BCField field;\n         for (Iterator itr = unmgd.iterator(); itr.hasNext();) {\n             field = (BCField) itr.next();\n-            writeExternal(code, field.getName(), field.getType(), -1, null);\n+            writeExternal(code, field.getName(), field.getType(), null);\n         }\n         code.vreturn();\n         code.calculateMaxStack();\n@@ -3177,7 +3178,7 @@ private void addWriteUnmanaged(Collection unmgd, boolean parentDetachable)\n      * Helper method to write a field to an externalization output stream.\n      */\n     private void writeExternal(Code code, String fieldName, Class type,\n-        int idx, FieldMetaData fmd)\n+        FieldMetaData fmd)\n         throws NoSuchMethodException {\n         String methName;\n         if (type.isPrimitive()) {\n@@ -3190,7 +3191,7 @@ private void writeExternal(Code code, String fieldName, Class type,\n \n         // out.write<type> (<field>);\n         code.aload().setParam(0);\n-        loadManagedInstance(code, true, false);\n+        loadManagedInstance(code, false);\n         if (fmd == null)\n             code.getfield().setField(fieldName, type);\n         else\n@@ -3256,7 +3257,7 @@ private int getAccessorParameterOffset() {\n      *\n      * @return the first instruction added to <code>code</code>.\n      */\n-    private Instruction loadManagedInstance(Code code, boolean userObject,\n+    private Instruction loadManagedInstance(Code code,\n         boolean forAccessor) {\n         if (_meta.getAccessType() == ClassMetaData.ACCESS_FIELD && forAccessor)\n             return code.aload().setParam(0);"},{"sha":"0a6ddd76a26267d4b75f0eb28bf6ecb1b2630239","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/LogOrphanedKeyAction.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/event/LogOrphanedKeyAction.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/event/LogOrphanedKeyAction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/LogOrphanedKeyAction.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -82,10 +82,6 @@ public Object orphan(Object oid, OpenJPAStateManager sm,\n                 if (log.isTraceEnabled())\n                     log.trace(_loc.get(msg, oid, vmd, owner));\n                 break;\n-            case Log.DEBUG:\n-                if (log.isDebugEnabled())\n-                    log.debug(_loc.get(msg, oid, vmd, owner));\n-                break;\n             case Log.INFO:\n                 if (log.isInfoEnabled())\n                     log.info(_loc.get(msg, oid, vmd, owner));"},{"sha":"93d52f51905369afe248068f6bfc747a4b87ac84","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -235,7 +235,8 @@ private void loadPersistentTypes(ClassLoader envLoader) {\n                 try {\n                     Class.forName((String) itr.next(), true, loader);\n                 } catch (Throwable t) {\n-                    _conf.getLog(OpenJPAConfiguration.LOG_RUNTIME).warn(t, t);\n+                    _conf.getLog(OpenJPAConfiguration.LOG_RUNTIME)\n+                        .warn(null, t);\n                 }\n             }\n         }\n@@ -515,7 +516,7 @@ public void makeReadOnly() {\n                     if (itr.hasNext())\n                         buf.append(lineSep);\n                 }\n-                log.trace(buf.toString());\n+                log.trace(_loc.get(\"factory-properties\", buf.toString()));\n             }\n \n             // setup transient state"},{"sha":"d36e1d0269d129e2cf754054dc5957f8f3d5a419","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -3989,7 +3989,7 @@ public Object newInstance(Class cls) {\n         //### JDO2\n         if (cls.isInterface() || Modifier.isAbstract(cls.getModifiers()))\n             throw new UnsupportedOperationException(_loc.get\n-                (\"new-abstract\", cls));\n+                (\"new-abstract\", cls).getMessage());\n \n         // 1.5 doesn't initialize classes without a true Class.forName\n         if (!PCRegistry.isRegistered(cls)) {"},{"sha":"6f3a6a627c7b98373219c63e8393598491d4bf0d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateAttachStrategy.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateAttachStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateAttachStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateAttachStrategy.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -18,7 +18,6 @@\n import java.util.BitSet;\n \n import org.apache.openjpa.enhance.PersistenceCapable;\n-import org.apache.openjpa.event.LifecycleEvent;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;"},{"sha":"7f6f0141cd68885cf51d192049536679538afb0c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -378,7 +378,7 @@ public Object fetchObjectId() {\n     public void accessingField(int idx) {\n         if (!_access && !_loaded.get(idx))\n             throw new IllegalStateException(_loc.get(\"unloaded-detached\",\n-                _pc));\n+                _pc).getMessage());\n     }\n \n     public boolean serializing() {"},{"sha":"53740a44bb71a7f7927288750900b36c69b25573","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -276,7 +276,7 @@ else if (o instanceof String && ((String) o).length() == 1)\n         }\n         if (!num)\n             throw new ClassCastException(_loc.get(\"cant-convert\", o,\n-                o.getClass(), type));\n+                o.getClass(), type).getMessage());\n \n         if (type == Integer.class) {\n             return Numbers.valueOf(((Number) o).intValue());"},{"sha":"242273c0645ca26ea7c39adbcb0403716c5d5b5e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -24,6 +24,7 @@\n \n import org.apache.openjpa.kernel.Filters;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.Localizer.Message;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.util.InternalException;\n@@ -97,11 +98,11 @@ protected OpenJPAException parseException(int e, String token,\n         Exception nest) {\n         String argStr;\n         if (args == null)\n-            argStr = getLocalizer().get(token);\n+            argStr = getLocalizer().get(token).getMessage();\n         else\n-            argStr = getLocalizer().get(token, args);\n+            argStr = getLocalizer().get(token, args).getMessage();\n \n-        String msg = _loc.get(\"parse-error\", argStr, currentQuery());\n+        Message msg = _loc.get(\"parse-error\", argStr, currentQuery());\n \n         switch (e) {\n             case EX_FATAL:\n@@ -361,14 +362,14 @@ private void convertTypes(Value val1, Value val2) {\n         String right;\n         if (val1 instanceof Path && ((Path) val1).last() != null)\n             left = _loc.get(\"non-numeric-path\", ((Path) val1).last().\n-                getName(), t1.getName());\n+                getName(), t1.getName()).getMessage();\n         else\n-            left = _loc.get(\"non-numeric-value\", t1.getName());\n+            left = _loc.get(\"non-numeric-value\", t1.getName()).getMessage();\n         if (val2 instanceof Path && ((Path) val2).last() != null)\n             right = _loc.get(\"non-numeric-path\", ((Path) val2).last().\n-                getName(), t2.getName());\n+                getName(), t2.getName()).getMessage();\n         else\n-            right = _loc.get(\"non-numeric-value\", t2.getName());\n+            right = _loc.get(\"non-numeric-value\", t2.getName()).getMessage();\n         throw new UserException(_loc.get(\"non-numeric-comparison\",\n             left, right));\n     }"},{"sha":"04ce062e995270fa550ac505247b6d0871d4d213","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/ParseException.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/ParseException.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/ParseException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/ParseException.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -18,6 +18,7 @@\n import java.util.TreeSet;\n \n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.Localizer.Message;\n import org.apache.openjpa.util.UserException;\n \n /**\n@@ -28,7 +29,8 @@\n public class ParseException\n     extends UserException {\n \n-    private static Localizer _loc = Localizer.forPackage(ParseException.class);\n+    private static final Localizer _loc =\n+        Localizer.forPackage(ParseException.class);\n \n     /**\n      * This constructor is used by the method \"generateParseException\"\n@@ -59,10 +61,6 @@ public ParseException() {\n         super();\n     }\n \n-    public ParseException(String message) {\n-        super(message);\n-    }\n-\n     /**\n      * This method has the standard behavior when this object has been\n      * created using the standard constructors. Otherwise, it uses\n@@ -73,7 +71,7 @@ public ParseException(String message) {\n      * of the final stack trace, and hence the correct error message\n      * gets displayed.\n      */\n-    private static String initMessage(Token currentToken,\n+    private static Message initMessage(Token currentToken,\n         int[][]expectedTokenSequences, String[]tokenImage) {\n         TreeSet expected = new TreeSet();\n "},{"sha":"c73ded669260e49f22b1e77bd58acd9e83188800","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/Extensions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/meta/Extensions.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/meta/Extensions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/Extensions.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -320,7 +320,7 @@ public void validateExtensionKeys() {\n         // way a new vendor could theoretically add in their\n         // own prefix into the localizer.properties file and\n         // not have to issue warnings for their extensions\n-        String prefixes = _loc.get(\"extension-datastore-prefix\");\n+        String prefixes = _loc.get(\"extension-datastore-prefix\").getMessage();\n         String[] allowedPrefixes = null;\n         if (prefixes != null)\n             allowedPrefixes = Strings.split(prefixes, \",\", 0);"},{"sha":"9ab7d9137dcf06151b8ddb13c3f70510b25fe5d1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/UpdateStrategies.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/meta/UpdateStrategies.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/meta/UpdateStrategies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/UpdateStrategies.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -80,9 +80,10 @@ public static int getCode(String val, Object context) {\n         String msg;\n         if (closest != null)\n             msg = _loc.get(\"bad-update-strategy-hint\", new Object[]{\n-                context, val, closest, opts });\n+                context, val, closest, opts }).getMessage();\n         else\n-            msg = _loc.get(\"bad-update-strategy\", context, val, opts);\n+            msg = _loc.get(\"bad-update-strategy\", context, val, opts)\n+                .getMessage();\n         throw new IllegalArgumentException(msg);\n \t}\n }"},{"sha":"f92a50c7d3f68f5ff0e724859729a73bb16c56a1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueStrategies.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueStrategies.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueStrategies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ValueStrategies.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -108,9 +108,10 @@ public static int getCode(String val, Object context) {\n         String msg;\n         if (closest != null)\n             msg = _loc.get(\"bad-value-strategy-hint\", new Object[]{\n-                context, val, closest, _map.keySet() });\n+                context, val, closest, _map.keySet() }).getMessage();\n         else\n-            msg = _loc.get(\"bad-value-strategy\", context, val, _map.keySet());\n+            msg = _loc.get(\"bad-value-strategy\", context, val, _map.keySet())\n+                .getMessage();\n         throw new IllegalArgumentException(msg);\n     }\n "},{"sha":"d859a42b0f39d840e42ab4805de9eb459e924950","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/CallbackException.java","status":"modified","additions":3,"deletions":9,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/util/CallbackException.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/util/CallbackException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/CallbackException.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -15,6 +15,8 @@\n  */\n package org.apache.openjpa.util;\n \n+import org.apache.openjpa.lib.util.Localizer.Message;\n+\n /**\n  * Exception type thrown when an error occurs in a callback.\n  *\n@@ -24,16 +26,8 @@\n public class CallbackException\n     extends UserException {\n \n-    public CallbackException() {\n-    }\n-\n-    public CallbackException(String msg) {\n-        super(msg);\n-    }\n-\n-    public CallbackException(String msg, Object failed) {\n+    public CallbackException(Message msg) {\n         super(msg);\n-        setFailedObject(failed);\n     }\n \n     public int getSubtype() {"},{"sha":"762e97f99a3d82ca8ccaa42903c4e01cb17e8fe1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/GeneralException.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/util/GeneralException.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/util/GeneralException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/GeneralException.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -15,6 +15,8 @@\n  */\n package org.apache.openjpa.util;\n \n+import org.apache.openjpa.lib.util.Localizer.Message;\n+\n /**\n  * General exception type.\n  *\n@@ -30,11 +32,15 @@ public GeneralException(String msg) {\n         super(msg);\n     }\n \n+    public GeneralException(Message msg) {\n+        super(msg);\n+    }\n+\n     public GeneralException(Throwable cause) {\n         super(cause);\n     }\n \n-    public GeneralException(String msg, Throwable cause) {\n+    public GeneralException(Message msg, Throwable cause) {\n         super(msg, cause);\n     }\n "},{"sha":"51139482f99fe135b21c2794c92fd6cdea7be92a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/InternalException.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/util/InternalException.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/util/InternalException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/InternalException.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -15,6 +15,8 @@\n  */\n package org.apache.openjpa.util;\n \n+import org.apache.openjpa.lib.util.Localizer.Message;\n+\n /**\n  * Exception type for internal errors.\n  *\n@@ -33,6 +35,11 @@ public InternalException(String msg) {\n         setFatal(true);\n     }\n \n+    public InternalException(Message msg) {\n+        super(msg);\n+        setFatal(true);\n+    }\n+\n     public InternalException(Throwable cause) {\n         super(cause);\n         setFatal(true);\n@@ -43,6 +50,11 @@ public InternalException(String msg, Throwable cause) {\n         setFatal(true);\n     }\n \n+    public InternalException(Message msg, Throwable cause) {\n+        super(msg, cause);\n+        setFatal(true);\n+    }\n+\n     public int getType() {\n         return INTERNAL;\n     }"},{"sha":"70f12c9a19b9dd1bb351e78873958f48c7ebac4c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/InvalidStateException.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/util/InvalidStateException.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/util/InvalidStateException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/InvalidStateException.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -15,6 +15,8 @@\n  */\n package org.apache.openjpa.util;\n \n+import org.apache.openjpa.lib.util.Localizer.Message;\n+\n /**\n  * Exception type thrown when attempting to execute an operation that\n  * is not allowed by the current state.\n@@ -25,14 +27,11 @@\n public class InvalidStateException\n     extends UserException {\n \n-    public InvalidStateException() {\n-    }\n-\n-    public InvalidStateException(String msg) {\n+    public InvalidStateException(Message msg) {\n         super(msg);\n     }\n \n-    public InvalidStateException(String msg, Object failed) {\n+    public InvalidStateException(Message msg, Object failed) {\n         super(msg);\n         setFailedObject(failed);\n     }"},{"sha":"8ccb15e0088c6e1ffdf90ee7ee50fd088186052b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/LockException.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/util/LockException.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/util/LockException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/LockException.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -35,13 +35,6 @@\n \n     private int timeout = -1;\n \n-    public LockException() {\n-    }\n-\n-    public LockException(String msg) {\n-        super(msg);\n-    }\n-\n     public LockException(Object failed) {\n         super(_loc.get(\"lock-failed\", Exceptions.toString(failed)));\n         setFailedObject(failed);"},{"sha":"4669b00ca7cd43b4fb8de742f22900fcbefca595","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/MetaDataException.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/util/MetaDataException.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/util/MetaDataException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/MetaDataException.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -15,6 +15,8 @@\n  */\n package org.apache.openjpa.util;\n \n+import org.apache.openjpa.lib.util.Localizer.Message;\n+\n /**\n  * Exception type reserved for missing or invalid metadata.\n  *\n@@ -33,7 +35,12 @@ public MetaDataException(String msg) {\n         setFatal(true);\n     }\n \n-    public MetaDataException(String msg, Object failed) {\n+    public MetaDataException(Message msg) {\n+        super(msg);\n+        setFatal(true);\n+    }\n+\n+    public MetaDataException(Message msg, Object failed) {\n         super(msg);\n         setFatal(true);\n         setFailedObject(failed);"},{"sha":"f6000e57c9b086d2c117123204c0a486eba2cc5b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/NoTransactionException.java","status":"modified","additions":3,"deletions":9,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/util/NoTransactionException.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/util/NoTransactionException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/NoTransactionException.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -15,6 +15,8 @@\n  */\n package org.apache.openjpa.util;\n \n+import org.apache.openjpa.lib.util.Localizer.Message;\n+\n /**\n  * Exception type thrown when attempting a transactional operation without\n  * an active transaction.\n@@ -25,16 +27,8 @@\n public class NoTransactionException\n     extends InvalidStateException {\n \n-    public NoTransactionException() {\n-    }\n-\n-    public NoTransactionException(String msg) {\n-        super(msg);\n-    }\n-\n-    public NoTransactionException(String msg, Object failed) {\n+    public NoTransactionException(Message msg) {\n         super(msg);\n-        setFailedObject(failed);\n     }\n \n     public int getSubtype() {"},{"sha":"c312e6bf9138e6c25cfe03b16dddbade963b23f9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectExistsException.java","status":"modified","additions":2,"deletions":13,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectExistsException.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectExistsException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectExistsException.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -15,7 +15,7 @@\n  */\n package org.apache.openjpa.util;\n \n-import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.Localizer.Message;\n \n /**\n  * Exception type reserved for conflicts with existing objects.\n@@ -25,21 +25,10 @@\n public class ObjectExistsException\n     extends StoreException {\n \n-    private static final transient Localizer _loc = Localizer.forPackage\n-        (ObjectExistsException.class);\n-\n-    public ObjectExistsException() {\n-    }\n-\n-    public ObjectExistsException(String msg) {\n+    public ObjectExistsException(Message msg) {\n         super(msg);\n     }\n \n-    public ObjectExistsException(Object failed) {\n-        super(_loc.get(\"obj-exists\", Exceptions.toString(failed)));\n-        setFailedObject(failed);\n-    }\n-\n     public int getSubtype() {\n         return OBJECT_EXISTS;\n     }"},{"sha":"b9365a78a5fe1d4ce9e3b54d4e5a18e15fbd5771","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectNotFoundException.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectNotFoundException.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectNotFoundException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ObjectNotFoundException.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -18,6 +18,7 @@\n import java.util.Collection;\n \n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.Localizer.Message;\n \n /**\n  * Exception type reserved for failed object lookups.\n@@ -30,10 +31,7 @@\n     private static final transient Localizer _loc = Localizer.forPackage\n         (ObjectNotFoundException.class);\n \n-    public ObjectNotFoundException() {\n-    }\n-\n-    public ObjectNotFoundException(String msg) {\n+    public ObjectNotFoundException(Message msg) {\n         super(msg);\n     }\n "},{"sha":"506af96e8d828743d36f12129afa40335fbaf563","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAException.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAException.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAException.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -22,6 +22,8 @@\n import java.io.PrintWriter;\n import java.io.Serializable;\n \n+import org.apache.openjpa.lib.util.Localizer.Message;\n+\n /**\n  * Exception type for all OpenJPA exceptions. Meant to be easily\n  * transformed into an appropriate exception at the API layer, since most APIs\n@@ -51,6 +53,13 @@ public OpenJPAException(String msg) {\n         super(msg);\n     }\n \n+    /**\n+     * Constructor; supply message.\n+     */\n+    public OpenJPAException(Message msg) {\n+        super(msg.getMessage());\n+    }\n+\n     /**\n      * Construct with cause.\n      */\n@@ -66,6 +75,14 @@ public OpenJPAException(String msg, Throwable cause) {\n         setCause(cause);\n     }\n \n+    /**\n+     * Construct with message and cause.\n+     */\n+    public OpenJPAException(Message msg, Throwable cause) {\n+        super(msg.getMessage());\n+        setCause(cause);\n+    }\n+\n     /**\n      * Exception type.\n      */"},{"sha":"9a7e278d54b6c87d1df0c50a247aafe1e22f1091","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/OptimisticException.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/util/OptimisticException.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/util/OptimisticException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/OptimisticException.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -18,6 +18,7 @@\n import java.util.Collection;\n \n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.Localizer.Message;\n \n /**\n  * Exception type for optimistic concurrency violations.\n@@ -32,10 +33,7 @@\n     private static final transient Localizer _loc = Localizer.forPackage\n         (OptimisticException.class);\n \n-    public OptimisticException() {\n-    }\n-\n-    public OptimisticException(String msg) {\n+    public OptimisticException(Message msg) {\n         super(msg);\n     }\n "},{"sha":"ab3b453eab1a1910d5b2a55667a9b66d55da6464","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ReferentialIntegrityException.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/util/ReferentialIntegrityException.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/util/ReferentialIntegrityException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ReferentialIntegrityException.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -40,9 +40,6 @@\n \n     private int _iv = IV_UNKNOWN;\n \n-    public ReferentialIntegrityException() {\n-    }\n-\n     public ReferentialIntegrityException(String msg) {\n         super(msg);\n     }\n@@ -55,11 +52,11 @@ public ReferentialIntegrityException(int iv) {\n     private static String getMessage(int iv) {\n         switch (iv) {\n             case IV_DUPLICATE_OID:\n-                return _loc.get(\"dup-oid\");\n+                return _loc.get(\"dup-oid\").getMessage();\n             case IV_UNIQUE:\n-                return _loc.get(\"unique\");\n+                return _loc.get(\"unique\").getMessage();\n             default:\n-                return _loc.get(\"ref-integrity\");\n+                return _loc.get(\"ref-integrity\").getMessage();\n         }\n     }\n "},{"sha":"b3d6e771e0ab10f98f55ad2fd19570f98fafcfde","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreException.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreException.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreException.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -15,6 +15,8 @@\n  */\n package org.apache.openjpa.util;\n \n+import org.apache.openjpa.lib.util.Localizer.Message;\n+\n /**\n  * Base exception for data store errors.\n  *\n@@ -30,19 +32,16 @@\n     public static final int REFERENTIAL_INTEGRITY = 4;\n     public static final int OBJECT_EXISTS = 5;\n \n-    public StoreException() {\n-    }\n-\n     public StoreException(String msg) {\n         super(msg);\n     }\n \n-    public StoreException(Throwable cause) {\n-        super(cause);\n+    public StoreException(Message msg) {\n+        super(msg.getMessage());\n     }\n \n-    public StoreException(String msg, Throwable cause) {\n-        super(msg, cause);\n+    public StoreException(Throwable cause) {\n+        super(cause);\n     }\n \n     public int getType() {"},{"sha":"7ef5f9af40d6161a760f0b3d235495dfd6e40093","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/UnsupportedException.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/util/UnsupportedException.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/util/UnsupportedException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/UnsupportedException.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -15,6 +15,8 @@\n  */\n package org.apache.openjpa.util;\n \n+import org.apache.openjpa.lib.util.Localizer.Message;\n+\n /**\n  * Exception type for attempts to perform unsupported operations.\n  *\n@@ -33,12 +35,12 @@ public UnsupportedException(String msg) {\n         setFatal(true);\n     }\n \n-    public UnsupportedException(Throwable cause) {\n-        super(cause);\n+    public UnsupportedException(Message msg) {\n+        super(msg);\n         setFatal(true);\n     }\n \n-    public UnsupportedException(String msg, Throwable cause) {\n+    public UnsupportedException(Message msg, Throwable cause) {\n         super(msg, cause);\n         setFatal(true);\n     }"},{"sha":"80638d8fbcbe5133eecb35ff8751c1c363cb4ca6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/UserException.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/util/UserException.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/java/org/apache/openjpa/util/UserException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/UserException.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -15,6 +15,8 @@\n  */\n package org.apache.openjpa.util;\n \n+import org.apache.openjpa.lib.util.Localizer.Message;\n+\n /**\n  * Base exception type for user errors.\n  *\n@@ -36,6 +38,10 @@ public UserException(String msg) {\n         super(msg);\n     }\n \n+    public UserException(Message msg) {\n+        super(msg);\n+    }\n+\n     public UserException(Throwable cause) {\n         super(cause);\n     }\n@@ -44,6 +50,10 @@ public UserException(String msg, Throwable cause) {\n         super(msg, cause);\n     }\n \n+    public UserException(Message msg, Throwable cause) {\n+        super(msg, cause);\n+    }\n+\n     public int getType() {\n         return USER;\n     }"},{"sha":"4f6f7c64229eb5706b313c6b997f00def0591406","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -161,6 +161,7 @@ objectid-abstract: Cannot create new application identity instance for \\\n bad-id-value: The given value \"{0}\" cannot be converted into an identity \\\n \tfor \"{2}\".  The value is the wrong type ({1}).\n factory-init: Starting OpenJPA {0}\n+factory-properties: Properties: {0}\n inverse-consistency: An inverse inconsistency in the object featureSelection was \\\n \tdetected while flushing the field \"{0}\" of the instance with id \"{1}\" \\\n \tin context \"{2}\"."},{"sha":"43a097a8803287f09960ab19be081097a992d309","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -126,7 +126,7 @@ protected ClassLoader getClassLoader() {\n      */\n     protected void assertFiles(String[] files) {\n         if (files.length == 0)\n-            throw new BuildException(_loc.get(\"no-filesets\"));\n+            throw new BuildException(_loc.get(\"no-filesets\").getMessage());\n     }\n \n     public void setClasspath(Path classPath) {"},{"sha":"068f72aeb0530f7270b1401b8955d278919c2be1","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -276,7 +276,7 @@ public void instantiateAll() {\n         }\n         if (errs != null)\n             throw new RuntimeException(_loc.get(\"get-prop-errs\",\n-                errs.toString()));\n+                errs.toString()).getMessage());\n     }\n \n     public boolean isReadOnly() {\n@@ -503,7 +503,7 @@ private String findLocalized(String key, boolean fatal, Class scope) {\n         if (scope != null) {\n             loc = Localizer.forPackage(scope);\n             try {\n-                return loc.getFatal(key);\n+                return loc.getFatal(key).getMessage();\n             } catch (MissingResourceException mse) {\n             }\n         }\n@@ -512,7 +512,7 @@ private String findLocalized(String key, boolean fatal, Class scope) {\n             cls = cls.getSuperclass()) {\n             loc = Localizer.forPackage(cls);\n             try {\n-                return loc.getFatal(key);\n+                return loc.getFatal(key).getMessage();\n             } catch (MissingResourceException mse) {\n             }\n         }\n@@ -670,7 +670,8 @@ private Object get(Map map, Value val, boolean setLoadKey) {\n                 // if we've already found a property with a previous prefix,\n                 // then this is a collision.\n                 throw new IllegalStateException(\n-                    _loc.get(\"dup-with-different-prefixes\", firstKey, key));\n+                    _loc.get(\"dup-with-different-prefixes\", firstKey, key)\n+                        .getMessage());\n             }\n         }\n         if (firstKey != null && setLoadKey)\n@@ -761,7 +762,7 @@ public void setPropertiesFile(File file) throws IOException {\n      */\n     public void assertNotReadOnly() {\n         if (isReadOnly())\n-            throw new IllegalStateException(_loc.get(\"read-only\"));\n+            throw new IllegalStateException(_loc.get(\"read-only\").getMessage());\n     }\n \n     /**"},{"sha":"689678a6439b23b992cd0524db16bb2b67674191","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -140,20 +140,20 @@ static Object newInstance(String clsName, Value val, Configuration conf,\n                 throw re;\n             Log log = (conf == null) ? null : conf.getConfigurationLog();\n             if (log != null && log.isErrorEnabled())\n-                log.error(re);\n+                log.error(_loc.get(\"plugin-creation-exception\", val), re);\n             return null;\n         }\n \n         try {\n             return cls.newInstance();\n         } catch (Exception e) {\n             RuntimeException re = new NestableRuntimeException(_loc.get\n-                (\"obj-create\", cls), e);\n+                (\"obj-create\", cls).getMessage(), e);\n             if (fatal)\n                 throw re;\n             Log log = (conf == null) ? null : conf.getConfigurationLog();\n             if (log != null && log.isErrorEnabled())\n-                log.error(re);\n+                log.error(_loc.get(\"plugin-creation-exception\", val), re);\n             return null;\n         }\n     }\n@@ -279,7 +279,7 @@ public static void configureInstance(Object obj, Configuration conf,\n             ((GenericConfigurable) obj).setInto(invalidEntries);\n \n \t\tif (!invalidEntries.isEmpty() && configurationName != null) {\n-\t\t\tString msg = null;\n+\t\t\tLocalizer.Message msg = null;\n \t\t\tString first = (String) invalidEntries.keySet().iterator().next();\n \t\t\tif (invalidEntries.keySet().size() == 1 &&\n \t\t\t\tfirst.indexOf('.') == -1) {\n@@ -460,7 +460,7 @@ public static ConfigurationProvider loadDefaults(ClassLoader loader) {\n                 Configurations.class.getName(), \"defaults\");\n         if (providerCount == 0)\n             throw new MissingResourceException(_loc.get (\"no-providers\", \n-                ConfigurationProvider.class.getName()),\n+                ConfigurationProvider.class.getName()).getMessage(),\n                 Configurations.class.getName(), \"defaults\"); \n         return null;\n     }\n@@ -518,9 +518,9 @@ public static ConfigurationProvider load(String resource,\n             msg = errs.toString();\n         else if (providerCount == 0)\n             msg = _loc.get(\"no-providers\", \n-                ConfigurationProvider.class.getName());\n+                ConfigurationProvider.class.getName()).getMessage();\n         else\n-            msg = _loc.get(\"no-provider\", resource);\n+            msg = _loc.get(\"no-provider\", resource).getMessage();\n         \n         throw new MissingResourceException(msg,\n             Configurations.class.getName(), resource);\n@@ -572,8 +572,8 @@ public static Object lookup(String name) {\n             ctx = new InitialContext();\n             return ctx.lookup(name);\n         } catch (NamingException ne) {\n-            throw new NestableRuntimeException(_loc.get(\"naming-err\", name),\n-                ne);\n+            throw new NestableRuntimeException(\n+                _loc.get(\"naming-err\", name).getMessage(), ne);\n         } finally {\n             if (ctx != null)\n                 try {"},{"sha":"163d5f0c7fa75b51915ea79d0e88754b7e9b1f41","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -107,7 +107,7 @@ protected void setInternalString(String str) {\n             set(null);\n         else\n             throw new IllegalArgumentException(_loc.get(\"cant-set-string\",\n-                getProperty()));\n+                getProperty()).getMessage());\n     }\n \n     protected void setInternalObject(Object obj) {"},{"sha":"0f4c08ffabe3fff15cd3d7b964c6db36ee98ade9","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginValue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginValue.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/PluginValue.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -106,7 +106,7 @@ public Object instantiate(Class type, Configuration conf, boolean fatal) {\n     public void set(Object obj, boolean derived) {\n         if (!_singleton)\n             throw new IllegalStateException(_loc.get(\"not-singleton\",\n-                getProperty()));\n+                getProperty()).getMessage());\n         super.set(obj, derived);\n     }\n "},{"sha":"8b56703dbbdb849175912d365a51cb8aabe7d5e0","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DataSourceLogs.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DataSourceLogs.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DataSourceLogs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DataSourceLogs.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -19,6 +19,7 @@\n \n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.log.NoneLogFactory;\n+import org.apache.openjpa.lib.util.Localizer;\n \n /**\n  * Provies basic logging facilities to a DataSource.\n@@ -28,6 +29,9 @@\n  */\n public class DataSourceLogs {\n \n+    private static final Localizer _loc =\n+        Localizer.forPackage(DataSourceLogs.class);\n+\n     private Log _jdbcLog = null;\n     private Log _sqlLog = null;\n \n@@ -136,12 +140,12 @@ private static void log(String msg, Connection conn,\n             buf.append(\", \").append(conn);\n         buf.append(\"> \");\n \n-        // in the time != -1, append time profiling information\n+        // if the time != -1, append time profiling information\n         if (totalTime != -1)\n             buf.append(\"[\").append(totalTime).append(\" ms] \");\n \n         buf.append(msg);\n-        log.trace(buf.toString());\n+        log.trace(_loc.get(\"datasource-trace-data\", buf.toString()));\n     }\n }\n "},{"sha":"8a58af1708fd253a7e3c1ac1229f81027f419444","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/DelegatingConnection.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -557,7 +557,8 @@ protected PreparedStatement prepareStatement(String sql,\n \n     private static void assertJDBC3() {\n         if (_jdbc3 == null)\n-            throw new UnsupportedOperationException(_loc.get(\"not-jdbc3\"));\n+            throw new UnsupportedOperationException(_loc.get(\"not-jdbc3\")\n+                .getMessage());\n     }\n \n     private Object invokeJDBC3(Method m, Object[] args) throws SQLException {\n@@ -566,7 +567,8 @@ private Object invokeJDBC3(Method m, Object[] args) throws SQLException {\n         } catch (Throwable t) {\n             if (t instanceof SQLException)\n                 throw(SQLException) t;\n-            throw new NestableRuntimeException(_loc.get(\"invoke-jdbc3\"), t);\n+            throw new NestableRuntimeException(_loc.get(\"invoke-jdbc3\")\n+                .getMessage(), t);\n         }\n     }\n \n@@ -577,7 +579,8 @@ private static Method createJDBC3Method(Object key, String name,\n             _jdbc3.put(key, m);\n             return m;\n         } catch (Throwable t) {\n-            throw new NestableRuntimeException(_loc.get(\"error-jdbc3\"), t);\n+            throw new NestableRuntimeException(_loc.get(\"error-jdbc3\")\n+                .getMessage(), t);\n         }\n     }\n }"},{"sha":"a1701d102a123fdbd54407b92b4a661b740adc3a","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/AbstractLog.java","status":"modified","additions":0,"deletions":13,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/AbstractLog.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/AbstractLog.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/AbstractLog.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -44,10 +44,6 @@ public boolean isTraceEnabled() {\n         return isEnabled(TRACE);\n     }\n \n-    public boolean isDebugEnabled() {\n-        return isEnabled(DEBUG);\n-    }\n-\n     public boolean isInfoEnabled() {\n         return isEnabled(INFO);\n     }\n@@ -73,15 +69,6 @@ public void trace(Object message, Throwable t) {\n             log(TRACE, toString(message), throwableParam(message, t));\n     }\n \n-    public void debug(Object message) {\n-        debug(message, throwableParam(message, null));\n-    }\n-\n-    public void debug(Object message, Throwable t) {\n-        if (isDebugEnabled())\n-            log(DEBUG, toString(message), throwableParam(message, t));\n-    }\n-\n     public void info(Object message) {\n         info(message, throwableParam(message, null));\n     }"},{"sha":"faa7bc8535c0b3e82bbcd7cc5d72b85de4c92865","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/CommonsLogFactory.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/CommonsLogFactory.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/CommonsLogFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/CommonsLogFactory.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -49,10 +49,6 @@ private LogAdapter(org.apache.commons.logging.Log wrapee) {\n             return _log;\n         }\n \n-        public boolean isDebugEnabled() {\n-            return _log.isDebugEnabled();\n-        }\n-\n         public boolean isErrorEnabled() {\n             return _log.isErrorEnabled();\n         }\n@@ -81,14 +77,6 @@ public void trace(Object o, Throwable t) {\n             _log.trace(o, t);\n         }\n \n-        public void debug(Object o) {\n-            _log.debug(o);\n-        }\n-\n-        public void debug(Object o, Throwable t) {\n-            _log.debug(o, t);\n-        }\n-\n         public void info(Object o) {\n             _log.info(o);\n         }"},{"sha":"630e33494ccf76a1b946852b84e3ca5b5dbea698","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log.java","status":"modified","additions":1,"deletions":20,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -24,7 +24,7 @@\n public interface Log {\n \n     public static final short TRACE = 1;\n-    public static final short DEBUG = 2;\n+    // the old DEBUG constant was 2. Leaving a hole for compatibility.\n     public static final short INFO = 3;\n     public static final short WARN = 4;\n     public static final short ERROR = 5;\n@@ -35,11 +35,6 @@\n      */\n     public boolean isTraceEnabled();\n \n-    /**\n-     * Returns if the {@link #DEBUG} log level is enabled.\n-     */\n-    public boolean isDebugEnabled();\n-\n     /**\n      * Returns if the {@link #INFO} log level is enabled.\n      */\n@@ -74,20 +69,6 @@\n      */\n     public void trace(Object o, Throwable t);\n \n-    /**\n-     * Write out a log message at the {@link #DEBUG}\n-     * level with the stringification of <code>o</code> as the body\n-     * of the message, also outputting <code>t</code> to the log.\n-     */\n-    public void debug(Object o);\n-\n-    /**\n-     * Write out a log message at the {@link #DEBUG}\n-     * level with the stringification of <code>o</code> as the body\n-     * of the message, also outputting <code>t</code> to the log.\n-     */\n-    public void debug(Object o, Throwable t);\n-\n     /**\n      * Write out a log message at the {@link #INFO}\n      * level with the stringification of <code>o</code> as the body"},{"sha":"7d5ba753d14ed8c7fba13028a6358757163cf66c","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log4JLogFactory.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log4JLogFactory.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log4JLogFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/Log4JLogFactory.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -46,10 +46,6 @@ public Logger getDelegate() {\n         }\n \n         public boolean isTraceEnabled() {\n-            return isDebugEnabled();\n-        }\n-\n-        public boolean isDebugEnabled() {\n             return _log.getEffectiveLevel().toInt() >= Level.DEBUG_INT;\n         }\n \n@@ -77,14 +73,6 @@ public void trace(Object o, Throwable t) {\n             _log.debug(o, t);\n         }\n \n-        public void debug(Object o) {\n-            _log.debug(o);\n-        }\n-\n-        public void debug(Object o, Throwable t) {\n-            _log.debug(o, t);\n-        }\n-\n         public void info(Object o) {\n             _log.info(o);\n         }"},{"sha":"e1e5738e579f7afa4d12d2007f82a3fcb4b5139d","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","status":"modified","additions":11,"deletions":15,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -42,12 +42,11 @@\n \n     private static Localizer _loc = Localizer.forPackage(LogFactoryImpl.class);\n \n-    public static final String TRACE_STR = _loc.get(\"log-trace\");\n-    public static final String DEBUG_STR = _loc.get(\"log-debug\");\n-    public static final String INFO_STR = _loc.get(\"log-info\");\n-    public static final String WARN_STR = _loc.get(\"log-warn\");\n-    public static final String ERROR_STR = _loc.get(\"log-error\");\n-    public static final String FATAL_STR = _loc.get(\"log-fatal\");\n+    public static final String TRACE_STR = _loc.get(\"log-trace\").getMessage();\n+    public static final String INFO_STR = _loc.get(\"log-info\").getMessage();\n+    public static final String WARN_STR = _loc.get(\"log-warn\").getMessage();\n+    public static final String ERROR_STR = _loc.get(\"log-error\").getMessage();\n+    public static final String FATAL_STR = _loc.get(\"log-fatal\").getMessage();\n \n     public static final String STDOUT = \"stdout\";\n     public static final String STDERR = \"stderr\";\n@@ -187,8 +186,6 @@ public static String getLevelName(short level) {\n         switch (level) {\n             case Log.TRACE:\n                 return TRACE_STR;\n-            case Log.DEBUG:\n-                return DEBUG_STR;\n             case Log.INFO:\n                 return INFO_STR;\n             case Log.WARN:\n@@ -198,7 +195,7 @@ public static String getLevelName(short level) {\n             case Log.FATAL:\n                 return FATAL_STR;\n             default:\n-                return _loc.get(\"log-unknown\");\n+                return _loc.get(\"log-unknown\").getMessage();\n         }\n     }\n \n@@ -208,15 +205,14 @@ public static String getLevelName(short level) {\n     public static short getLevel(String str) {\n         str = str.toUpperCase().trim();\n         short val = TRACE_STR.equals(str) ? Log.TRACE :\n-            DEBUG_STR.equals(str) ? Log.DEBUG :\n-                INFO_STR.equals(str) ? Log.INFO :\n-                    WARN_STR.equals(str) ? Log.WARN :\n-                        ERROR_STR.equals(str) ? Log.ERROR :\n-                            FATAL_STR.equals(str) ? Log.FATAL : -1;\n+            INFO_STR.equals(str) ? Log.INFO :\n+                WARN_STR.equals(str) ? Log.WARN :\n+                    ERROR_STR.equals(str) ? Log.ERROR :\n+                        FATAL_STR.equals(str) ? Log.FATAL : -1;\n \n         if (val == -1)\n             throw new IllegalArgumentException\n-                (_loc.get(\"log-bad-constant\", str));\n+                (_loc.get(\"log-bad-constant\", str).getMessage());\n \n         return val;\n     }"},{"sha":"b9eeae7f7d0e8550987b9ad06cccfa955c461310","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogOutputStream.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogOutputStream.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogOutputStream.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogOutputStream.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -69,9 +69,6 @@ private void log(String msg) {\n             case Log.TRACE:\n                 _log.trace(msg);\n                 break;\n-            case Log.DEBUG:\n-                _log.debug(msg);\n-                break;\n             case Log.INFO:\n                 _log.info(msg);\n                 break;"},{"sha":"c1b7806e1bc5b05411347c487a3d60f55d10f2d7","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/MultiLogFactory.java","status":"modified","additions":0,"deletions":17,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/MultiLogFactory.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/MultiLogFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/MultiLogFactory.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -122,16 +122,6 @@ public void info(Object msg, Throwable t) {\n                 _logs[i].info(msg, t);\n         }\n \n-        public void debug(Object msg) {\n-            for (int i = 0; i < _logs.length; i++)\n-                _logs[i].debug(msg);\n-        }\n-\n-        public void debug(Object msg, Throwable t) {\n-            for (int i = 0; i < _logs.length; i++)\n-                _logs[i].debug(msg, t);\n-        }\n-\n         public void warn(Object msg) {\n             for (int i = 0; i < _logs.length; i++)\n                 _logs[i].warn(msg);\n@@ -183,13 +173,6 @@ public boolean isWarnEnabled() {\n             return false;\n         }\n \n-        public boolean isDebugEnabled() {\n-            for (int i = 0; i < _logs.length; i++)\n-                if (_logs[i].isDebugEnabled())\n-                    return true;\n-            return false;\n-        }\n-\n         public boolean isErrorEnabled() {\n             for (int i = 0; i < _logs.length; i++)\n                 if (_logs[i].isErrorEnabled())"},{"sha":"7fe45d060b29ee5667cd4fd62ca86e13e4042ebc","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/NoneLogFactory.java","status":"modified","additions":0,"deletions":10,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/NoneLogFactory.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/NoneLogFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/NoneLogFactory.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -38,10 +38,6 @@ public static NoneLog getInstance() {\n             return s_log;\n         }\n \n-        public final boolean isDebugEnabled() {\n-            return false;\n-        }\n-\n         public final boolean isErrorEnabled() {\n             return false;\n         }\n@@ -68,12 +64,6 @@ public final void trace(Object o) {\n         public final void trace(Object o, Throwable t) {\n         }\n \n-        public final void debug(Object o) {\n-        }\n-\n-        public final void debug(Object o, Throwable t) {\n-        }\n-\n         public final void info(Object o) {\n         }\n "},{"sha":"2d22589057b17170a30692dc4d7ed13f9f76aa70","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataParser.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataParser.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -279,7 +279,7 @@ protected Class classForName(String name, boolean resolve)\n             return null;\n         Class cls = classForName(name, _package, resolve, currentClassLoader());\n         if (cls == null)\n-            throw getException(_loc.get(\"invalid-class\", name));\n+            throw getException(_loc.get(\"invalid-class\", name).getMessage());\n         return cls;\n     }\n "},{"sha":"8ca36b2c6d4da0c1bf0953da560f4b0d7f3feda5","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -101,12 +101,12 @@ public void setMetaDataStructure(String packageElementName,\n                 if (i == 0) {\n                     if (charIdx == packageElementName.length())\n                         throw new UnsupportedOperationException(_loc.get\n-                            (\"cant-diff-elems\"));\n+                            (\"cant-diff-elems\").getMessage());\n                     buf[i] = packageElementName.charAt(charIdx);\n                 } else {\n                     if (charIdx == classElementNames[i - 1].length())\n                         throw new UnsupportedOperationException(_loc.get\n-                            (\"cant-diff-elems\"));\n+                            (\"cant-diff-elems\").getMessage());\n                     buf[i] = classElementNames[i - 1].charAt(charIdx);\n                 }\n             }\n@@ -212,7 +212,8 @@ public Map mapTypes(MetaDataIterator itr) {\n                 return (String[]) col.toArray(new String[col.size()]);\n             }\n         } catch (Exception e) {\n-            throw new NestableRuntimeException(_loc.get(\"class-arg\", arg), e);\n+            throw new NestableRuntimeException(\n+                _loc.get(\"class-arg\", arg).getMessage(), e);\n         }\n \n         // must be a class name\n@@ -234,8 +235,8 @@ public Map mapTypes(MetaDataIterator itr) {\n                 appendTypeNames(source, itr.getInputStream(), names);\n             }\n         } catch (Exception e) {\n-            throw new NestableRuntimeException(_loc.get(\"class-arg\", source),\n-                e);\n+            throw new NestableRuntimeException(\n+                _loc.get(\"class-arg\", source).getMessage(), e);\n         }\n         return (String[]) names.toArray(new String[names.size()]);\n     }\n@@ -279,8 +280,8 @@ public Map mapTypeNames(MetaDataIterator itr) {\n                 names.clear();\n             }\n         } catch (Exception e) {\n-            throw new NestableRuntimeException(_loc.get(\"class-arg\", source),\n-                e);\n+            throw new NestableRuntimeException(\n+                _loc.get(\"class-arg\", source).getMessage(), e);\n         }\n         return map;\n     }"},{"sha":"1089fdacd9f429608ecf75b93961efadce927bcd","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -74,7 +74,7 @@ private int scan(File file, MetaDataFilter filter, FileResource rsrc,\n         Collection metas, int scanned) throws IOException {\n         if (scanned > SCAN_LIMIT)\n             throw new IllegalStateException(_loc.get(\"too-many-files\",\n-                String.valueOf(SCAN_LIMIT)));\n+                String.valueOf(SCAN_LIMIT)).getMessage());\n         scanned++;\n \n         if (filter == null)"},{"sha":"f7bcff54a536d935449cadc3d7fe1cc42fbdc02f","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -42,7 +42,7 @@ public static String getSourceLocationMessage(SourceTracker[] trackers) {\n         String sourceFilePath;\n         for (int i = 0; i < trackers.length; i++) {\n             sourceFilePath = (trackers[i].getSourceFile() == null ?\n-                _loc.get(\"source-tracker-file-unknown\") :\n+                _loc.get(\"source-tracker-file-unknown\").getMessage() :\n                 trackers[i].getSourceFile().getAbsolutePath());\n             buf.append(\"  \").append(_loc.get(\n                 \"source-trackers-location-line-item\","},{"sha":"917eedde72d651577d5c92951bb5d612810f7375","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","status":"modified","additions":13,"deletions":2,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -40,6 +40,7 @@\n import org.xml.sax.helpers.DefaultHandler;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.JavaVersions;\n+import org.apache.openjpa.lib.util.Localizer.Message;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.xml.Commentable;\n import org.apache.openjpa.lib.xml.DocTypeReader;\n@@ -655,9 +656,19 @@ protected SAXException getException(String msg) {\n      * Returns a SAXException with the source file name and the given error\n      * message.\n      */\n-    protected SAXException getException(String msg, Throwable cause) {\n+    protected SAXException getException(Message msg) {\n+        return new SAXException(getSourceName() + currentLocation() +\n+            \": \" + msg.getMessage());\n+    }\n+\n+    /**\n+     * Returns a SAXException with the source file name and the given error\n+     * message.\n+     */\n+    protected SAXException getException(Message msg, Throwable cause) {\n         if (cause != null && _log != null && _log.isTraceEnabled())\n-            _log.trace(cause);\n+            _log.trace(_loc.get(\"sax-exception\",\n+                getSourceName(), _location.getLocation()), cause);\n         return new SAXException(getSourceName() + currentLocation() +\n             \": \" + msg + \" [\" + cause + \"]\");\n     }"},{"sha":"0e80d9541c2059032155cb2e22891c2ea60824fe","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractListIterator.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractListIterator.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractListIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractListIterator.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -31,14 +31,17 @@\n         (AbstractListIterator.class);\n \n     public void add(Object o) {\n-        throw new UnsupportedOperationException(_loc.get(\"read-only\"));\n+        throw new UnsupportedOperationException(_loc.get(\"read-only\")\n+            .getMessage());\n     }\n \n     public void set(Object o) {\n-        throw new UnsupportedOperationException(_loc.get(\"read-only\"));\n+        throw new UnsupportedOperationException(_loc.get(\"read-only\")\n+            .getMessage());\n     }\n \n     public void remove() {\n-        throw new UnsupportedOperationException(_loc.get(\"read-only\"));\n+        throw new UnsupportedOperationException(_loc.get(\"read-only\")\n+            .getMessage());\n     }\n }"},{"sha":"e733322d78966f464bdf71b9bcecf91632079f59","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractResultList.java","status":"modified","additions":16,"deletions":11,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractResultList.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractResultList.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -33,43 +33,48 @@\n         (AbstractResultList.class);\n \n     public void add(int index, Object element) {\n-        throw new UnsupportedOperationException(_loc.get(\"read-only\"));\n+        throw readOnly();\n+    }\n+\n+    private UnsupportedOperationException readOnly() {\n+        return new UnsupportedOperationException(_loc.get(\"read-only\")\n+            .getMessage());\n     }\n \n     public boolean add(Object o) {\n-        throw new UnsupportedOperationException(_loc.get(\"read-only\"));\n+        throw readOnly();\n     }\n \n     public boolean addAll(Collection c) {\n-        throw new UnsupportedOperationException(_loc.get(\"read-only\"));\n+        throw readOnly();\n     }\n \n     public boolean addAll(int index, Collection c) {\n-        throw new UnsupportedOperationException(_loc.get(\"read-only\"));\n+        throw readOnly();\n     }\n \n     public Object remove(int index) {\n-        throw new UnsupportedOperationException(_loc.get(\"read-only\"));\n+        throw readOnly();\n     }\n \n     public boolean remove(Object o) {\n-        throw new UnsupportedOperationException(_loc.get(\"read-only\"));\n+        throw readOnly();\n     }\n \n     public boolean removeAll(Collection c) {\n-        throw new UnsupportedOperationException(_loc.get(\"read-only\"));\n+        throw readOnly();\n     }\n \n     public boolean retainAll(Collection c) {\n-        throw new UnsupportedOperationException(_loc.get(\"read-only\"));\n+        throw readOnly();\n     }\n \n     public Object set(int index, Object element) {\n-        throw new UnsupportedOperationException(_loc.get(\"read-only\"));\n+        throw readOnly();\n     }\n \n     public void clear() {\n-        throw new UnsupportedOperationException(_loc.get(\"read-only\"));\n+        throw readOnly();\n     }\n \n     public List subList(int from, int to) {\n@@ -83,6 +88,6 @@ protected void finalize() throws Throwable {\n \n     protected void assertOpen() {\n         if (isClosed())\n-            throw new NoSuchElementException(_loc.get(\"closed\"));\n+            throw new NoSuchElementException(_loc.get(\"closed\").getMessage());\n     }\n }"},{"sha":"3352d9449513c50d7e3e02cbf41c77ff192116e5","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RangeResultObjectProvider.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RangeResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RangeResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RangeResultObjectProvider.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -57,7 +57,7 @@ public RangeResultObjectProvider(ResultObjectProvider delegate,\n         _delegate = delegate;\n         if (startIdx > Integer.MAX_VALUE || endIdx > Integer.MAX_VALUE)\n             throw new IllegalArgumentException(_loc.get(\"range-too-high\",\n-                String.valueOf(startIdx), String.valueOf(endIdx)));\n+                String.valueOf(startIdx), String.valueOf(endIdx)).getMessage());\n \n         _startIdx = (int) startIdx;\n         _endIdx = (int) endIdx;"},{"sha":"8c48b6f4253260516efb27ed932ec95b581d5b86","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultListIterator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultListIterator.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultListIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultListIterator.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -56,7 +56,7 @@ public boolean hasPrevious() {\n \n     public Object next() {\n         if (_rl.isClosed())\n-            throw new NoSuchElementException(_loc.get(\"closed\"));\n+            throw new NoSuchElementException(_loc.get(\"closed\").getMessage());\n         return _li.next();\n     }\n "},{"sha":"4245d057ff7deb6e8d162a026d2d9f2c2c8d6136","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -557,7 +557,7 @@ else if (c < ' ' || c > '~')\n \n         public DuplicateKeyException(String key, Object firstVal,\n             String secondVal) {\n-            super(_loc.get(\"dup-key\", key, firstVal, secondVal));\n+            super(_loc.get(\"dup-key\", key, firstVal, secondVal).getMessage());\n         }\n     }\n "},{"sha":"26764bb611f21f3ae7b2873f5f58757b6b2ec823","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","status":"modified","additions":78,"deletions":26,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -56,6 +56,9 @@\n     // the local file name and class' classloader\n     private ResourceBundle _bundle = null;\n \n+    // the package that this localizer was created for.\n+    private Package _package;\n+\n     /**\n      * Return a Localizer instance that will access the properties file\n      * in the package of the given class using the system default locale.\n@@ -106,7 +109,7 @@ public static Localizer forPackage(Class cls, Locale locale) {\n         }\n \n         // cache the localizer\n-        loc = new Localizer();\n+        loc = new Localizer(cls == null ? null : cls.getPackage());\n         loc._bundle = bundle;\n         _localizers.put(key, loc);\n         return loc;\n@@ -126,18 +129,22 @@ public static boolean removeProvider(ResourceBundleProvider provider) {\n         return _providers.remove(provider);\n     }\n \n+    private Localizer(Package p) {\n+        _package = p;\n+    }\n+\n     /**\n      * Return the localized string matching the given key.\n      */\n-    public String get(String key) {\n-        return get(key, false);\n+    public Message get(String key) {\n+        return get(key, null);\n     }\n \n     /**\n      * Return the localized string matching the given key.\n      */\n-    public String getFatal(String key) {\n-        return get(key, true);\n+    public Message getFatal(String key) {\n+        return getFatal(key, null);\n     }\n \n     /**\n@@ -148,7 +155,7 @@ public String getFatal(String key) {\n      *\n      * @see #get(String)\n      */\n-    public String get(String key, Object sub) {\n+    public Message get(String key, Object sub) {\n         return get(key, new Object[]{ sub });\n     }\n \n@@ -160,7 +167,7 @@ public String get(String key, Object sub) {\n      *\n      * @see #getFatal(String)\n      */\n-    public String getFatal(String key, Object sub) {\n+    public Message getFatal(String key, Object sub) {\n         return getFatal(key, new Object[]{ sub });\n     }\n \n@@ -169,7 +176,7 @@ public String getFatal(String key, Object sub) {\n      *\n      * @see #get(String,Object)\n      */\n-    public String get(String key, Object sub1, Object sub2) {\n+    public Message get(String key, Object sub1, Object sub2) {\n         return get(key, new Object[]{ sub1, sub2 });\n     }\n \n@@ -178,7 +185,7 @@ public String get(String key, Object sub1, Object sub2) {\n      *\n      * @see #getFatal(String,Object)\n      */\n-    public String getFatal(String key, Object sub1, Object sub2) {\n+    public Message getFatal(String key, Object sub1, Object sub2) {\n         return getFatal(key, new Object[]{ sub1, sub2 });\n     }\n \n@@ -187,7 +194,7 @@ public String getFatal(String key, Object sub1, Object sub2) {\n      *\n      * @see #get(String,Object)\n      */\n-    public String get(String key, Object sub1, Object sub2, Object sub3) {\n+    public Message get(String key, Object sub1, Object sub2, Object sub3) {\n         return get(key, new Object[]{ sub1, sub2, sub3 });\n     }\n \n@@ -199,9 +206,8 @@ public String get(String key, Object sub1, Object sub2, Object sub3) {\n      *\n      * @see #get(String)\n      */\n-    public String get(String key, Object[] subs) {\n-        String str = get(key);\n-        return MessageFormat.format(str, subs);\n+    public Message get(String key, Object[] subs) {\n+        return new Message(key, subs, false);\n     }\n \n     /**\n@@ -212,24 +218,70 @@ public String get(String key, Object[] subs) {\n      *\n      * @see #getFatal(String)\n      */\n-    public String getFatal(String key, Object[] subs) {\n-        String str = getFatal(key);\n-        return MessageFormat.format(str, subs);\n+    public Message getFatal(String key, Object[] subs) {\n+        return new Message(key, subs, true);\n     }\n \n-    private String get(String key, boolean fatal) {\n-        if (_bundle == null) {\n-            if (fatal)\n-                throw new MissingResourceException(key, key, key);\n-            return key;\n+    /**\n+     * A <code>Message</code> can provide a localized message via the \n+     * {@link #getMessage} method call, and can also provide the original key,\n+     * package, and substitution array that were used to assemble the message.\n+     */\n+    public class Message {\n+\n+        private final String key;\n+        private final Object[] subs;\n+        private String localizedMessage;\n+        private boolean messageFound = false;\n+\n+        private Message(String key, Object[] subs, boolean fatal) {\n+            this.key = key;\n+            this.subs = subs;\n+\n+            if (_bundle == null) {\n+                if (fatal)\n+                    throw new MissingResourceException(key, key, key);\n+                else {\n+                    localizedMessage = key;\n+                    messageFound = false;\n+                }\n+            } else {\n+                try {\n+                    localizedMessage = _bundle.getString(key);\n+                    messageFound = true;\n+                } catch (MissingResourceException mre) {\n+                    if (!fatal)\n+                        localizedMessage = key;\n+                    else\n+                        throw mre;\n+                }\n+            }\n         }\n \n-        try {\n-            return _bundle.getString(key);\n-        } catch (MissingResourceException mre) {\n-            if (!fatal)\n+        /**\n+         * The localized message.\n+         */\n+        public String getMessage() {\n+            if (messageFound)\n+                return MessageFormat.format(localizedMessage, subs);\n+            else\n                 return key;\n-            throw mre;\n+        }\n+\n+        public String getKey() {\n+            return key;\n+        }\n+\n+        public Object[] getSubstitutions() {\n+            return subs;\n+        }\n+\n+        public Package getPackage() {\n+            return _package;\n+        }\n+        \n+        public String toString() {\n+            return getMessage();\n         }\n     }\n }"},{"sha":"5716e8274f68cc8e82668591f60fbba7f0bac2f6","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParseException.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParseException.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParseException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParseException.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -33,11 +33,19 @@ public ParseException(String msg) {\n         super(msg);\n     }\n \n+    public ParseException(Localizer.Message msg) {\n+        super(msg.getMessage());\n+    }\n+\n     public ParseException(Throwable cause) {\n         super(cause);\n     }\n \n     public ParseException(String msg, Throwable cause) {\n         super(msg, cause);\n     }\n+\n+    public ParseException(Localizer.Message msg, Throwable cause) {\n+        super(msg.getMessage(), cause);\n+    }\n }"},{"sha":"5c616aa2a067f769a6229f35a7623bf56715ca73","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Location.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Location.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Location.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Location.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -47,17 +47,16 @@ public String getLocation(String format) {\n         if (_locator == null) {\n             if (_nullOnNoLocator)\n                 return null;\n-            return _loc.get(\"no-locator\");\n+            return _loc.get(\"no-locator\").getMessage();\n         }\n-        String forma = MessageFormat.format(format, new Object []{\n+        return MessageFormat.format(format, new Object []{\n             Numbers.valueOf(_locator.getLineNumber()),\n             Numbers.valueOf(_locator.getColumnNumber()), _locator.getPublicId(),\n             _locator.getSystemId() });\n-        return forma;\n     }\n \n     public String getLocation() {\n-        return getLocation(_loc.get(\"location-format\"));\n+        return getLocation(_loc.get(\"location-format\").getMessage());\n     }\n \n     public void setLocator(Locator locator) {"},{"sha":"d5c68f76be44877dc09263edf8b23afd0e3b6ca3","filename":"openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -60,6 +60,8 @@ closeable-ex: An exception occurred while invoking close() on \"{0}\". This \\\n \texception will be consumed.\n dup-with-different-prefixes: Found multiple properties with different valid \\\n \tprefixes. Properties: {0}, {1}.\n+plugin-creation-exception: An exception occurred while creating a plugin for \\\n+    value {0}. This exception will be consumed.\n \n Log-name: Log factory\n Log-desc: LogFactory and configuration"},{"sha":"bf9048f9a5f5a7c7b41a4f57a401df0332c50225","filename":"openjpa-lib/src/main/resources/org/apache/openjpa/lib/jdbc/localizer.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/resources/org/apache/openjpa/lib/jdbc/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/resources/org/apache/openjpa/lib/jdbc/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/resources/org/apache/openjpa/lib/jdbc/localizer.properties?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -84,3 +84,4 @@ login-timeout-desc:  The maximum number of milliseconds to block for database \\\n \tlogin.\n close-pool: Shutting down connection pool.\n close-pool-fail: Error caught when issuing close pool SQL: {0}\n+datasource-trace-data: {0}\n\\ No newline at end of file"},{"sha":"8c0eff90176623f0478faae298cb0bc6f2973d85","filename":"openjpa-lib/src/main/resources/org/apache/openjpa/lib/log/localizer.properties","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/resources/org/apache/openjpa/lib/log/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/resources/org/apache/openjpa/lib/log/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/resources/org/apache/openjpa/lib/log/localizer.properties?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -1,14 +1,14 @@\n log-trace: TRACE\n-log-debug: DEBUG\n log-info: INFO\n log-warn: WARN\n log-error: ERROR\n log-fatal: FATAL\n log-unknown: UNKNOWN\n log-bad-constant: The log level string \"{0}\" is not valid. Valid values are \\\n-\tTRACE, DEBUG, INFO, WARN, ERROR or FATAL.\n+\tTRACE, INFO, WARN, ERROR or FATAL.\n log-bad-file: The file name \"{0}\" is not valid.\n could-not-create-factory: An error occurred while trying to create a \\\n \tLogFactory of type \"{0}\", as specified by the \\\n-\torg.apache.openjpa.lib.log.LogFactory system property. Created a \\\n+\topenjpa.Log system property. Created a \\\n \torg.apache.openjpa.lib.log.LogFactoryImpl instead.\n+log-output-stream-data: {0}"},{"sha":"869604f805aed93b994b1e8d3bc84afdcc4dbcff","filename":"openjpa-lib/src/main/resources/org/apache/openjpa/lib/meta/localizer.properties","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/resources/org/apache/openjpa/lib/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/main/resources/org/apache/openjpa/lib/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/resources/org/apache/openjpa/lib/meta/localizer.properties?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -23,3 +23,6 @@ source-trackers-location-line-item: {0}: {1}\n source-tracker-file-unknown: <file location unknown>\n parser-schema-bug: XML schema validation is disabled due to bugs detected \\\n \tin the SAX parser.\n+sax-exception: An exception occurred while parsing {0} at location {1}. \\\n+    This exception has been translated to a SAXException, and will be \\\n+    re-thrown. The original exception is being logged along with this message.\n\\ No newline at end of file"},{"sha":"4a187ffb1da15c4d4d5f2fc2121d521a4c3eda75","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java","status":"modified","additions":12,"deletions":7,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -61,6 +61,7 @@\n import org.apache.tools.ant.ProjectHelper;\r\n import org.apache.openjpa.lib.log.Log;\r\n import org.apache.openjpa.lib.log.LogFactoryImpl;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n \r\n /**\r\n  * TestCase framework to run various tests against solarmetric code.\r\n@@ -85,6 +86,9 @@\n     public static final String SKIP_TOKEN = \"SOLARSKIP\";\r\n     public static final String SKIP_DELIMITER = \"|\";\r\n \r\n+    private static final Localizer _loc =\r\n+        Localizer.forPackage(AbstractTestCase.class);\r\n+\r\n     protected String multiThreadExecuting = null;\r\n     protected boolean inTimeoutThread = false;\r\n \r\n@@ -148,15 +152,15 @@ public void run(TestResult result) {\n             try {\r\n                 _lastTest.tearDownTestClass();\r\n             } catch (Throwable t) {\r\n-                getLog().error(t);\r\n+                getLog().error(null, t);\r\n             }\r\n         }\r\n \r\n         if (_lastTest == null || _lastTest.getClass() != getClass()) {\r\n             try {\r\n                 setUpTestClass();\r\n             } catch (Throwable t) {\r\n-                getLog().error(t);\r\n+                getLog().error(null, t);\r\n             }\r\n         }\r\n \r\n@@ -875,8 +879,8 @@ public long endProfile(String name) {\n         if (time != null)\r\n             elapsed = System.currentTimeMillis() - time.longValue();\r\n \r\n-        getLog()\r\n-            .info(name + \": \" + (time == null ? \"???\" : \"\" + elapsed) + \"ms\");\r\n+        getLog().info(_loc.get(\"profile-info\", name,\r\n+            (time == null ? \"???\" : \"\" + elapsed)));\r\n         return elapsed;\r\n     }\r\n \r\n@@ -1234,9 +1238,10 @@ public void printMemoryInfo() {\n         long used = total - free;\r\n \r\n         NumberFormat nf = NumberFormat.getInstance();\r\n-        getLog().warn(\"memory:\" + \" used: \" + nf.format(used)\r\n-            + \" total: \" + nf.format(total)\r\n-            + \" free: \" + nf.format(free));\r\n+        getLog().warn(_loc.get(\"mem-info\",\r\n+            nf.format(used),\r\n+            nf.format(total),\r\n+            nf.format(free)));\r\n     }\r\n \r\n     /**\r"},{"sha":"a53e76efa8af0e598ff0b573b5c9a607e598ac12","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestLocalizer.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestLocalizer.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestLocalizer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestLocalizer.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -19,6 +19,8 @@\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n+\n+import org.apache.openjpa.lib.util.Localizer.Message;\n import org.apache.openjpa.lib.util.testlocalizer.LocalizerTestHelper;\n \n /**\n@@ -108,6 +110,10 @@ public void testMissingKey() {\n         } catch (MissingResourceException mre) {\n         }\n     }\n+    \n+    public static void assertEquals(String s, Message m) {\n+        assertEquals(s, m.getMessage());\n+    }\n \n     public static Test suite() {\n         return new TestSuite(TestLocalizer.class);"},{"sha":"9a827f1965efeb4f9e890d979aab403a2bfeb914","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ArgumentException.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ArgumentException.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ArgumentException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ArgumentException.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -25,6 +25,8 @@\n import org.apache.openjpa.util.ExceptionInfo;\n import org.apache.openjpa.util.Exceptions;\n \n+import org.apache.openjpa.lib.util.Localizer.Message;\n+\n /**\n  * Extended {@link IllegalArgumentException}.\n  *\n@@ -48,6 +50,11 @@ public ArgumentException(String msg, Throwable[] nested, Object failed,\n         _fatal = fatal;\n     }\n \n+    public ArgumentException(Message msg, Throwable[] nested, Object failed,\n+        boolean fatal) {\n+        this(msg.getMessage(), nested, failed, fatal);\n+    }\n+\n     public int getType() {\n         return USER;\n     }"},{"sha":"059b8339b32afab444063626faeee8fa25f6d2a0","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConfigurationProviderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConfigurationProviderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConfigurationProviderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConfigurationProviderImpl.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -180,7 +180,7 @@ private Boolean load(String name, String rsrc, Map m, ClassLoader loader,\n             String msg = (pinfo == null) ? \"missing-xml-config\"\n                 : \"cantload-xml-config\";\n             throw new MissingResourceException(_loc.get(msg, rsrc,\n-                String.valueOf(name)), getClass().getName(), rsrc);\n+                String.valueOf(name)).getMessage(), getClass().getName(), rsrc);\n         }\n         return true;\n     }"},{"sha":"d0755c2274c49048b9935f80dea4e9a49969b3b8","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -386,7 +386,8 @@ public void rollbackAndResume() {\n \n     public boolean getRollbackOnly() {\n         if (!isActive())\n-            throw new IllegalStateException(_loc.get(\"no-transaction\"));\n+            throw new IllegalStateException(_loc.get(\"no-transaction\")\n+                .getMessage());\n \n         return _broker.getRollbackOnly();\n     }"},{"sha":"49b15ffff8526583656ba52837b4c8bc406a7286","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/InvalidStateException.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/InvalidStateException.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/InvalidStateException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/InvalidStateException.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -25,6 +25,7 @@\n import org.apache.openjpa.util.ExceptionInfo;\n import org.apache.openjpa.util.Exceptions;\n import org.apache.openjpa.util.UserException;\n+import org.apache.openjpa.lib.util.Localizer.Message;\n \n /**\n  * Extended {@link IllegalStateException}.\n@@ -41,6 +42,11 @@\n     private transient Object _failed = null;\n     private transient Throwable[] _nested = null;\n \n+    public InvalidStateException(Message msg, Throwable[] nested, Object failed,\n+        boolean fatal) {\n+        this(msg.getMessage(), nested, failed, fatal);\n+    }\n+\n     public InvalidStateException(String msg, Throwable[] nested, Object failed,\n         boolean fatal) {\n         super(msg);"},{"sha":"3db3a3119655eddc3af98851ad7b8b987a8d0724","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -168,8 +168,8 @@ private static Exception translateUserException(OpenJPAException ke) {\n         Exception e;\n         switch (ke.getSubtype()) {\n             case UserException.NO_TRANSACTION:\n-                e =\n-                    new org.apache.openjpa.persistence.TransactionRequiredException\n+                e = new \n+                    org.apache.openjpa.persistence.TransactionRequiredException\n                         (ke.getMessage(), getNestedThrowables(ke),\n                             getFailedObject(ke), ke.isFatal());\n                 break;"},{"sha":"da8ed3a550ede829bd5e5e636c5346d9fc518fc8","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -215,7 +215,8 @@ public void addJarFileName(String name) {\n                 }\n             }\n         }\n-        throw new IllegalArgumentException(s_loc.get(\"bad-jar-name\", name));\n+        throw new IllegalArgumentException(s_loc.get(\"bad-jar-name\", name)\n+            .getMessage());\n     }\n \n     public List<String> getManagedClassNames() {"},{"sha":"17e25c2bb14fd4b363ff7f9377e6fe7f715c19e0","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -278,11 +278,11 @@ public Object getSingleResult() {\n             Iterator itr = res.iterator();\n             if (!itr.hasNext())\n                 throw new NoResultException(_loc.get(\"no-results\",\n-                    _query.getQueryString()), null, null, false);\n+                    _query.getQueryString()).getMessage(), null, null, false);\n             Object ret = itr.next();\n             if (itr.hasNext())\n                 throw new NonUniqueResultException(_loc.get(\"mult-results\",\n-                    _query.getQueryString()), null, null, false);\n+                    _query.getQueryString()).getMessage(), null, null, false);\n             return ret;\n         } finally {\n             OpenJPAPersistence.close(res);"},{"sha":"972c891ce378897140c3dbd0fbc8aac6bde7ab0d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/TransactionRequiredException.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/TransactionRequiredException.java","raw_url":"https://github.com/apache/openjpa/raw/6234f8d3da7d38864cf7c8460a23113a51313f01/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/TransactionRequiredException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/TransactionRequiredException.java?ref=6234f8d3da7d38864cf7c8460a23113a51313f01","patch":"@@ -22,6 +22,7 @@\n import java.io.PrintWriter;\n import java.io.Serializable;\n \n+import org.apache.openjpa.lib.util.Localizer.Message;\n import org.apache.openjpa.util.ExceptionInfo;\n import org.apache.openjpa.util.Exceptions;\n import org.apache.openjpa.util.UserException;\n@@ -41,6 +42,11 @@\n     private transient Object _failed = null;\n     private transient Throwable[] _nested = null;\n \n+    public TransactionRequiredException(Message msg, Throwable[] nested,\n+        Object failed, boolean fatal) {\n+        this(msg.getMessage(), nested, failed, fatal);\n+    }\n+\n     public TransactionRequiredException(String msg, Throwable[] nested,\n         Object failed, boolean fatal) {\n         super(msg);"}]}

