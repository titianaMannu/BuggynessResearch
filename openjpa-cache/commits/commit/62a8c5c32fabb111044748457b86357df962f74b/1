{"sha":"62a8c5c32fabb111044748457b86357df962f74b","node_id":"MDY6Q29tbWl0MjA2MzY0OjYyYThjNWMzMmZhYmIxMTEwNDQ3NDg0NTdiODYzNTdkZjk2MmY3NGI=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-07-24T01:39:55Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-07-24T01:39:55Z"},"message":"OPENJPA-292 Extra JOIN on eager bi-directional relationship\ncommit openjpa_292_1.patch and testcase_241_292.patch on behalf of Fay Wang\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@679262 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"067917966602d820c9fd2b0c883b979c8cbac8ec","url":"https://api.github.com/repos/apache/openjpa/git/trees/067917966602d820c9fd2b0c883b979c8cbac8ec"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/62a8c5c32fabb111044748457b86357df962f74b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/62a8c5c32fabb111044748457b86357df962f74b","html_url":"https://github.com/apache/openjpa/commit/62a8c5c32fabb111044748457b86357df962f74b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/62a8c5c32fabb111044748457b86357df962f74b/comments","author":null,"committer":null,"parents":[{"sha":"98802147f761d93873462aa6aa0038a8926ec421","url":"https://api.github.com/repos/apache/openjpa/commits/98802147f761d93873462aa6aa0038a8926ec421","html_url":"https://github.com/apache/openjpa/commit/98802147f761d93873462aa6aa0038a8926ec421"}],"stats":{"total":860,"additions":858,"deletions":2},"files":[{"sha":"f310f9449413bde0c790aca015a8a3f0cf291775","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/62a8c5c32fabb111044748457b86357df962f74b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/62a8c5c32fabb111044748457b86357df962f74b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=62a8c5c32fabb111044748457b86357df962f74b","patch":"@@ -24,6 +24,7 @@\n import java.util.List;\n import java.util.Map;\n \n+import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfigurationImpl;\n@@ -55,6 +56,7 @@\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.ApplicationIds;\n import org.apache.openjpa.util.ImplHelper;\n@@ -516,6 +518,23 @@ public void loadEagerJoin(OpenJPAStateManager sm, JDBCStore store,\n         JDBCFetchConfiguration fetch, Result res)\n         throws SQLException {\n         ClassMapping cls = field.getIndependentTypeMappings()[0];\n+\n+        // for inverseEager field\n+        FieldMapping mappedByFieldMapping = field.getMappedByMapping();\n+        PersistenceCapable mappedByValue = null;\n+\n+        if (mappedByFieldMapping != null) {\n+        \tValueMapping val = mappedByFieldMapping.getValueMapping();\n+        \tClassMetaData decMeta = val.getTypeMetaData();\n+        \t// this inverse field does not have corresponding classMapping\n+        \t// its value may be a collection/map etc.\n+        \tif (decMeta != null) {\n+        \t    mappedByValue = sm.getPersistenceCapable();\n+        \t    res.setMappedByFieldMapping(mappedByFieldMapping);\n+        \t    res.setMappedByValue(mappedByValue);\n+        \t}\n+        }\n+\n         sm.storeObject(field.getIndex(), res.load(cls, store, fetch,\n             eagerJoin(res.newJoins(), cls, false)));\n     }"},{"sha":"6e6f3edfead2b7735f5ef0ea71b66ba1d827a7f3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/62a8c5c32fabb111044748457b86357df962f74b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java","raw_url":"https://github.com/apache/openjpa/raw/62a8c5c32fabb111044748457b86357df962f74b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java?ref=62a8c5c32fabb111044748457b86357df962f74b","patch":"@@ -243,15 +243,15 @@ public void setBaseMapping(ClassMapping base) {\n     }\n \n     public FieldMapping getMappedByFieldMapping() {\n-        return (_gotEager) ? null : _mappedByFieldMapping;\n+        return _mappedByFieldMapping;\n     }\n \n     public void setMappedByFieldMapping(FieldMapping fieldMapping) {\n         _mappedByFieldMapping = fieldMapping;\n     }\n \n     public Object getMappedByValue() {\n-        return (_gotEager) ? null : _mappedByValue;\n+        return _mappedByValue;\n     }\n \n     public void setMappedByValue(Object mappedByValue) {"},{"sha":"e7a1f2117216a39df57c53b269f64bf8c415ccd7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Customer.java","status":"added","additions":122,"deletions":0,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/62a8c5c32fabb111044748457b86357df962f74b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Customer.java","raw_url":"https://github.com/apache/openjpa/raw/62a8c5c32fabb111044748457b86357df962f74b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Customer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Customer.java?ref=62a8c5c32fabb111044748457b86357df962f74b","patch":"@@ -0,0 +1,122 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import java.io.Serializable;\r\n+import java.util.Collection;\r\n+import java.util.ArrayList;\r\n+@Entity\r\n+public class Customer {\r\n+\r\n+    @Embeddable\r\n+    public static class CustomerKey implements Serializable {\r\n+        public String countryCode;\r\n+        public int id;\r\n+\r\n+        public CustomerKey(){}\r\n+\r\n+        public  CustomerKey(String cc, int id){\r\n+            countryCode=cc;\r\n+            this.id=id;\r\n+        }\r\n+\r\n+        public String toString() {\r\n+            return countryCode+\"/\"+id;\r\n+        }\r\n+        \r\n+        @Override\r\n+        public boolean equals(Object obj){\r\n+            if (obj==this) return true;\r\n+            if ( ! (obj instanceof CustomerKey) ) return false;\r\n+            CustomerKey key = (CustomerKey)obj;\r\n+            if (key.countryCode.equals(this.countryCode) && \r\n+                    key.id==this.id) return true;\r\n+            return false;\r\n+        }\r\n+\r\n+        @Override\r\n+        public int hashCode() {\r\n+            return this.countryCode.hashCode()\r\n+            ^ this.id;\r\n+        }\r\n+    }\r\n+\r\n+    public enum CreditRating { POOR, GOOD, EXCELLENT };\r\n+\r\n+    @EmbeddedId\r\n+    CustomerKey cid;\r\n+    @Column(length=30)\r\n+    @Basic(fetch=FetchType.LAZY)\r\n+    String name;\r\n+    @Enumerated\r\n+    @Basic(fetch=FetchType.LAZY)\r\n+    CreditRating creditRating;\r\n+    @Version\r\n+    long version;\r\n+\r\n+    @OneToMany(fetch=FetchType.LAZY, mappedBy=\"customer\")\r\n+    private Collection<Order> orders = new ArrayList<Order>();\r\n+\r\n+    public Customer() {}\r\n+\r\n+    public Customer(CustomerKey cid, String name, CreditRating rating){\r\n+        this.cid=cid;\r\n+        this.name=name;\r\n+        this.creditRating=rating;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public CreditRating getRating() {\r\n+        return creditRating;\r\n+    }\r\n+\r\n+    public void setRating(CreditRating rating) {\r\n+        this.creditRating = rating;\r\n+    }\r\n+\r\n+    public Collection<Order> getOrders() {\r\n+        return orders;\r\n+    }\r\n+    \r\n+    public void setOrders(Collection<Order> orders) {\r\n+        this.orders = orders;\r\n+    }\r\n+    \r\n+    public String toString() {\r\n+        return \"Customer:\"+cid+\" name:\"+name; \r\n+    }\r\n+\r\n+    public CustomerKey getCid() {\r\n+        return cid;\r\n+    }\r\n+\r\n+    public void setCid(CustomerKey cid) {\r\n+        this.cid = cid;\r\n+    }\r\n+}\r\n+\r"},{"sha":"b0d5c370cd046acbc091f4ac090043f6977cd2ba","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA1InverseEager.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/62a8c5c32fabb111044748457b86357df962f74b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA1InverseEager.java","raw_url":"https://github.com/apache/openjpa/raw/62a8c5c32fabb111044748457b86357df962f74b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA1InverseEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA1InverseEager.java?ref=62a8c5c32fabb111044748457b86357df962f74b","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.OneToMany;\r\n+\r\n+@Entity\r\n+@DiscriminatorValue(\"A1\")\r\n+public class EntityA1InverseEager extends EntityAInverseEager {\r\n+    private String name1;\r\n+\r\n+\t@OneToMany(fetch=FetchType.EAGER, mappedBy=\"entityA\")\r\n+\tprivate List<EntityBInverseEager> listB = new ArrayList<EntityBInverseEager>();\r\n+\t\r\n+\tpublic EntityA1InverseEager() {}\r\n+\t\r\n+\tpublic EntityA1InverseEager(String name) {\r\n+\t    super(name);\r\n+\t    this.name1 = name;\r\n+\t}\r\n+\r\n+\tpublic String getName1() {\r\n+        return name1;\r\n+    }\r\n+    \r\n+    public void setName1(String name1) {\r\n+        this.name1 = name1;\r\n+    }\r\n+}\r"},{"sha":"14b0c544599b1881d405977467a1082dbec499f6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA2InverseEager.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/62a8c5c32fabb111044748457b86357df962f74b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA2InverseEager.java","raw_url":"https://github.com/apache/openjpa/raw/62a8c5c32fabb111044748457b86357df962f74b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA2InverseEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA2InverseEager.java?ref=62a8c5c32fabb111044748457b86357df962f74b","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.OneToMany;\r\n+\r\n+@Entity\r\n+@DiscriminatorValue(\"A2\")\r\n+public class EntityA2InverseEager extends EntityAInverseEager {\r\n+    private String name2;\r\n+\r\n+\t@OneToMany(fetch=FetchType.EAGER, mappedBy=\"entityA\")\r\n+\tprivate List<EntityBInverseEager> listB = new ArrayList<EntityBInverseEager>();\r\n+\t\r\n+\tpublic EntityA2InverseEager() {}\r\n+\t\r\n+\tpublic EntityA2InverseEager(String name) {\r\n+\t    super(name);\r\n+\t    this.name2 = name;\r\n+\t}\r\n+\r\n+\tpublic String getName2() {\r\n+        return name2;\r\n+    }\r\n+    \r\n+    public void setName2(String name2) {\r\n+        this.name2 = name2;\r\n+    }\r\n+}\r"},{"sha":"3fac446dc892ee919b8fe16e6f078dc9bd392266","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityAInverseEager.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/62a8c5c32fabb111044748457b86357df962f74b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityAInverseEager.java","raw_url":"https://github.com/apache/openjpa/raw/62a8c5c32fabb111044748457b86357df962f74b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityAInverseEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityAInverseEager.java?ref=62a8c5c32fabb111044748457b86357df962f74b","patch":"@@ -0,0 +1,71 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.DiscriminatorColumn;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.OneToMany;\r\n+\r\n+@Entity\r\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n+@DiscriminatorColumn(name=\"TYPE\")\r\n+public class EntityAInverseEager  {\r\n+\t@GeneratedValue\r\n+\t@Id private int id;\r\n+    \r\n+    private String name;\r\n+\r\n+\t@OneToMany(fetch=FetchType.EAGER, mappedBy=\"entityA\")\r\n+\tprivate List<EntityBInverseEager> listB = new ArrayList<EntityBInverseEager>();\r\n+\t\r\n+\tpublic EntityAInverseEager() {}\r\n+\t\r\n+\tpublic EntityAInverseEager(String name) {\r\n+\t    this.name = name;\r\n+\t}\r\n+\t\r\n+\tpublic List<EntityBInverseEager> getListB() {\r\n+\t\treturn listB;\r\n+\t}\r\n+\t\r\n+\tpublic List addB(EntityBInverseEager entityB) {\r\n+\t\tlistB.add(entityB);\r\n+\t\treturn listB;\r\n+\t}\r\n+\t\r\n+\tpublic int getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\t\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+    \r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+}\r"},{"sha":"01c303f73f30e34afc332fae78806f24dbf747fd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityBInverseEager.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/62a8c5c32fabb111044748457b86357df962f74b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityBInverseEager.java","raw_url":"https://github.com/apache/openjpa/raw/62a8c5c32fabb111044748457b86357df962f74b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityBInverseEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityBInverseEager.java?ref=62a8c5c32fabb111044748457b86357df962f74b","patch":"@@ -0,0 +1,67 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToOne;\r\n+\r\n+@Entity\r\n+public class EntityBInverseEager  {\r\n+\t@GeneratedValue\r\n+\t@Id private int id;\r\n+    \r\n+    private String name;\r\n+\r\n+\t@ManyToOne(fetch=FetchType.EAGER, cascade=CascadeType.ALL)\r\n+\tprivate EntityAInverseEager entityA;\r\n+\t\r\n+    public EntityBInverseEager() {}\r\n+    \r\n+    public EntityBInverseEager(String name) {\r\n+        this.name = name;\r\n+    }\r\n+    \r\n+    public EntityAInverseEager getA() {\r\n+\t\treturn entityA;\r\n+\t}\r\n+\t\r\n+\tpublic void setA(EntityAInverseEager entityA) {\r\n+\t\tthis.entityA = entityA;\r\n+\t}\r\n+\t\r\n+    public int getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\t\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+    \r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+    \r\n+    \r\n+\t\r\n+}\r"},{"sha":"6ff39663590d80a1052f34e503044023df33670e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityCInverseEager.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/62a8c5c32fabb111044748457b86357df962f74b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityCInverseEager.java","raw_url":"https://github.com/apache/openjpa/raw/62a8c5c32fabb111044748457b86357df962f74b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityCInverseEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityCInverseEager.java?ref=62a8c5c32fabb111044748457b86357df962f74b","patch":"@@ -0,0 +1,88 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.OneToOne;\r\n+\r\n+@Entity\r\n+\r\n+public class EntityCInverseEager  {\r\n+\t@GeneratedValue\r\n+\t@Id private int id;\r\n+    \r\n+    private String name;\r\n+    \r\n+    private int age;\r\n+    \r\n+    private int balance;\r\n+    \r\n+\t@OneToOne(fetch=FetchType.EAGER, mappedBy=\"entityC\")\r\n+\tprivate EntityDInverseEager entityD = null;\r\n+\t\r\n+\tpublic EntityCInverseEager() {}\r\n+\t\r\n+\tpublic EntityCInverseEager(String name, int age, int balance) {\r\n+\t    this.name = name;\r\n+\t    this.age = age;\r\n+\t    this.balance = balance;\r\n+\t}\r\n+\t\r\n+\tpublic EntityDInverseEager getD() {\r\n+\t\treturn entityD;\r\n+\t}\r\n+\t\r\n+\tpublic void setD(EntityDInverseEager entityD) {\r\n+\t\tthis.entityD = entityD;\r\n+\t}\r\n+\t\r\n+\tpublic int getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\t\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+    \r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public int getAge() {\r\n+        return age;\r\n+    }\r\n+    \r\n+    public void setAge(int age) {\r\n+        this.age = age;\r\n+    }\r\n+\r\n+    public int getBalance() {\r\n+        return balance;\r\n+    }\r\n+    \r\n+    public void setBalance(int balance) {\r\n+        this.balance = balance;\r\n+    }\r\n+    \r\n+    \r\n+    \r\n+\r\n+}\r"},{"sha":"609fab0eec75518f43e7c7915ba9a54e7225ff21","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityDInverseEager.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/62a8c5c32fabb111044748457b86357df962f74b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityDInverseEager.java","raw_url":"https://github.com/apache/openjpa/raw/62a8c5c32fabb111044748457b86357df962f74b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityDInverseEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityDInverseEager.java?ref=62a8c5c32fabb111044748457b86357df962f74b","patch":"@@ -0,0 +1,98 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.OneToOne;\r\n+\r\n+@Entity\r\n+\r\n+public class EntityDInverseEager  {\r\n+\t@GeneratedValue\r\n+\t@Id private int id;\r\n+    \r\n+    private String name;\r\n+    \r\n+    private int loginCount;\r\n+    \r\n+    private int logoutCount;\r\n+    \r\n+    private String email;\r\n+    \r\n+\r\n+\t@OneToOne(fetch=FetchType.EAGER)\r\n+\tprivate EntityCInverseEager entityC = null;\r\n+\t\r\n+\tpublic EntityDInverseEager() {}\r\n+\t\r\n+\tpublic EntityDInverseEager(String name, String email, int loginCount, \r\n+\t    int logoutCount) {\r\n+\t    this.name = name;\r\n+\t    this.email = email;\r\n+\t    this.loginCount = loginCount;\r\n+\t    this.logoutCount = logoutCount;\r\n+    \r\n+\t}\r\n+\t\r\n+\tpublic EntityCInverseEager getC() {\r\n+\t\treturn entityC;\r\n+\t}\r\n+\t\r\n+\tpublic void setC(EntityCInverseEager entityC) {\r\n+\t\tthis.entityC = entityC;\r\n+\t}\r\n+\t\r\n+\tpublic int getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\t\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+    \r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public String getEmail() {\r\n+        return email;\r\n+    }\r\n+    \r\n+    public void setEmail(String email) {\r\n+        this.email = email;\r\n+    }\r\n+\r\n+    public int getLoginCount() {\r\n+        return loginCount;\r\n+    }\r\n+    \r\n+    public void setLoginCount(int loginCount) {\r\n+        this.loginCount = loginCount;\r\n+    }\r\n+\r\n+    public int getLogoutCount() {\r\n+        return logoutCount;\r\n+    }\r\n+    \r\n+    public void setLogoutCount(int logoutCount) {\r\n+        this.logoutCount = logoutCount;\r\n+    }}\r"},{"sha":"af40e86162531135bc25565067f15ae034eb7bd0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Order.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/62a8c5c32fabb111044748457b86357df962f74b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Order.java","raw_url":"https://github.com/apache/openjpa/raw/62a8c5c32fabb111044748457b86357df962f74b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Order.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Order.java?ref=62a8c5c32fabb111044748457b86357df962f74b","patch":"@@ -0,0 +1,87 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity\r\n+@Table(name=\"OrderTbl\")\r\n+public class Order {\r\n+    @Id \r\n+    @GeneratedValue\r\n+    int oid;\r\n+\r\n+    double amount;\r\n+    boolean delivered;\r\n+\r\n+    @ManyToOne (fetch=FetchType.EAGER)\r\n+    Customer customer;\r\n+\r\n+    @Version\r\n+    long version;\r\n+\r\n+    public Order(){}\r\n+\r\n+    public Order(  double amt, boolean delivered, Customer c){\r\n+        amount=amt;\r\n+        this.delivered=delivered;\r\n+        customer=c;\r\n+        if (c!=null) c.getOrders().add(this);\r\n+    }\r\n+\r\n+    public double getAmount() {\r\n+        return amount;\r\n+    }\r\n+    \r\n+    public void setAmount(double amount) {\r\n+        this.amount = amount;\r\n+    }\r\n+    \r\n+    public Customer getCustomer() {\r\n+        return customer;\r\n+    }\r\n+    \r\n+    public void setCustomer(Customer customer) {\r\n+        this.customer = customer;\r\n+    }\r\n+    \r\n+    public boolean isDelivered() {\r\n+        return delivered;\r\n+    }\r\n+    \r\n+    public void setDelivered(boolean delivered) {\r\n+        this.delivered = delivered;\r\n+    }\r\n+    \r\n+    public int getOid() {\r\n+        return oid;\r\n+    }\r\n+\r\n+    public String toString(){\r\n+        return \"Order:\"+oid+\" amount:\"+amount+\" delivered:\"+delivered+\" customer:\"+\r\n+        ( customer!=null ? customer.getCid()  :  -1 );\r\n+    }\r\n+}\r"},{"sha":"dc71f83aab3f25b1f9c2ec8edbd811c433b7d4a7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java","status":"added","additions":204,"deletions":0,"changes":204,"blob_url":"https://github.com/apache/openjpa/blob/62a8c5c32fabb111044748457b86357df962f74b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java","raw_url":"https://github.com/apache/openjpa/raw/62a8c5c32fabb111044748457b86357df962f74b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java?ref=62a8c5c32fabb111044748457b86357df962f74b","patch":"@@ -0,0 +1,204 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.Iterator;\r\n+import java.util.List;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+\r\n+import junit.textui.TestRunner;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n+\r\n+\r\n+public class TestInverseEagerSQL\r\n+    extends SQLListenerTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(Customer.class, Customer.CustomerKey.class, Order.class, \r\n+        \tEntityAInverseEager.class, EntityA1InverseEager.class, EntityA2InverseEager.class, \r\n+        \tEntityBInverseEager.class, EntityCInverseEager.class, EntityDInverseEager.class);\r\n+        \r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+\r\n+        Customer.CustomerKey ck = new Customer.CustomerKey(\"USA\", 1);\r\n+        Customer c = new Customer();\r\n+        c.setCid(ck);\r\n+        c.setName(\"customer1\");\r\n+        em.persist(c);\r\n+        \r\n+        for (int i = 0; i < 4; i++) {\r\n+            Order order = new Order();\r\n+            order.setCustomer(c);\r\n+            em.persist(order);\r\n+        }\r\n+\r\n+        EntityAInverseEager a = new EntityAInverseEager(\"a\");\r\n+        em.persist(a);\r\n+        \r\n+        EntityA1InverseEager a1 = new EntityA1InverseEager(\"a1\");\r\n+        em.persist(a1);\r\n+        \r\n+        EntityA2InverseEager a2 = new EntityA2InverseEager(\"a2\");\r\n+        em.persist(a2);\r\n+\r\n+        for (int i = 0; i < 4; i++) {\r\n+            EntityBInverseEager b = new EntityBInverseEager(\"b\" + i);\r\n+            a.addB(b);\r\n+            b.setA(a);\r\n+            em.persist(b);\r\n+        }\r\n+        \r\n+        for (int i = 4; i < 8; i++) {\r\n+            EntityBInverseEager b = new EntityBInverseEager(\"b\" + i);\r\n+            a1.addB(b);\r\n+            b.setA(a1);\r\n+            em.persist(b);\r\n+        }\r\n+\r\n+        for (int i = 8; i < 12; i++) {\r\n+            EntityBInverseEager b = new EntityBInverseEager(\"b\" + i);\r\n+            a2.addB(b);\r\n+            b.setA(a2);\r\n+            em.persist(b);\r\n+        }\r\n+        \r\n+        for (int i = 0; i < 4; i++) {\r\n+            EntityCInverseEager c1 = new EntityCInverseEager(\"c\"+i, i, i);\r\n+            em.persist(c1);\r\n+\r\n+            EntityDInverseEager d1 = new EntityDInverseEager(\"d\"+i, \"d\"+i, i, i);\r\n+            em.persist(d1);\r\n+\r\n+            c1.setD(d1);\r\n+            d1.setC(c1);\r\n+        }\r\n+        \r\n+        em.flush();\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testOneToManyInverseEagerQuery() {\r\n+        sql.clear();\r\n+\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        OpenJPAQuery q = em.createQuery(\"SELECT c FROM Customer c \");\r\n+        List<Customer> res = q.getResultList(); \r\n+\r\n+        assertEquals(1, res.size());\r\n+\r\n+        for (int i = 0; i < res.size(); i++) {\r\n+            Customer c = (Customer)res.get(i);\r\n+            Collection<Order> orders = c.getOrders();\r\n+            for (Iterator<Order> iter=orders.iterator(); iter.hasNext();) {\r\n+                Order order = (Order)iter.next();\r\n+                assertEquals(order.getCustomer(), c);\r\n+            }\r\n+        }\r\n+        \r\n+        assertEquals(2, sql.size());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testOneToOneInverseEagerQuery() {\r\n+        sql.clear();\r\n+\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        String query = \"select c FROM EntityCInverseEager c\";\r\n+        Query q = em.createQuery(query);\r\n+        List<EntityCInverseEager> res = q.getResultList();\r\n+        assertEquals(4, res.size());\r\n+\r\n+        for (int i = 0; i < res.size(); i++) {\r\n+            EntityCInverseEager c = (EntityCInverseEager)res.get(i);\r\n+            EntityDInverseEager d = c.getD();\r\n+            assertEquals(c, d.getC());\r\n+        }\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testOneToManyInheritanceQuery() {\r\n+        sql.clear();\r\n+\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        String query = \"select a FROM EntityA1InverseEager a\";\r\n+        Query q = em.createQuery(query);\r\n+        List list = q.getResultList();\r\n+        assertEquals(1, list.size());\r\n+        for (int i = 0; i < list.size(); i++) {\r\n+            EntityA1InverseEager a1 = (EntityA1InverseEager)list.get(i);\r\n+            Collection<EntityBInverseEager> listB = a1.getListB();\r\n+            assertEquals(4, listB.size());\r\n+            for (Iterator iter=listB.iterator(); iter.hasNext();) {\r\n+                EntityBInverseEager b = (EntityBInverseEager)iter.next();\r\n+                EntityAInverseEager a = b.getA();\r\n+                assertEquals(a1, a);\r\n+            }\r\n+        }\r\n+        assertEquals(3, sql.size());\r\n+        sql.clear();\r\n+\r\n+        query = \"select a FROM EntityA2InverseEager a\";\r\n+        q = em.createQuery(query);\r\n+        list = q.getResultList();\r\n+        assertEquals(1, list.size());\r\n+        for (int i = 0; i < list.size(); i++) {\r\n+            EntityA2InverseEager a2 = (EntityA2InverseEager)list.get(i);\r\n+            Collection listB = a2.getListB();\r\n+            assertEquals(4, listB.size());\r\n+            for (Iterator iter=listB.iterator(); iter.hasNext();) {\r\n+                EntityBInverseEager b = (EntityBInverseEager)iter.next();\r\n+                EntityAInverseEager a = b.getA();\r\n+                assertEquals(a2, a);\r\n+            }\r\n+        }\r\n+        assertEquals(3, sql.size());\r\n+        sql.clear();\r\n+        \r\n+        query = \"select a FROM EntityAInverseEager a\";\r\n+        q = em.createQuery(query);\r\n+        list = q.getResultList();\r\n+        assertEquals(3, list.size());\r\n+        for (int i = 0; i < list.size(); i++) {\r\n+            EntityAInverseEager a0 = (EntityAInverseEager)list.get(i);\r\n+            Collection listB = a0.getListB();\r\n+            assertEquals(4, listB.size());\r\n+            for (Iterator iter=listB.iterator(); iter.hasNext();) {\r\n+                EntityBInverseEager b = (EntityBInverseEager)iter.next();\r\n+                EntityAInverseEager a = b.getA();\r\n+                assertEquals(a0, a);\r\n+            }\r\n+        }\r\n+        \r\n+        assertEquals(2, sql.size());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public static void main(String[] args) {\r\n+        TestRunner.run(TestInverseEagerSQL.class);\r\n+    }\r\n+}\r\n+\r"}]}

