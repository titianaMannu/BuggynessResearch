{"sha":"62bc6c997c859f5b028df18e99c484b28864109b","node_id":"MDY6Q29tbWl0MjA2MzY0OjYyYmM2Yzk5N2M4NTlmNWIwMjhkZjE4ZTk5YzQ4NGIyODg2NDEwOWI=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-09-26T16:54:30Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-09-26T16:54:30Z"},"message":"Change default MaxFetchDepth to -1 (unlimited).  Also move the use of multiple\nconfiguration prefixes to ProductDerivations for simple static access.  Modify\nsome cases of looking for \"openjpa.\" prefixes to properties to properly look \nfor all configured prefixes instead.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@450114 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"32edaebf1787ee22919ddc61d072e4cd91925a41","url":"https://api.github.com/repos/apache/openjpa/git/trees/32edaebf1787ee22919ddc61d072e4cd91925a41"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/62bc6c997c859f5b028df18e99c484b28864109b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/62bc6c997c859f5b028df18e99c484b28864109b","html_url":"https://github.com/apache/openjpa/commit/62bc6c997c859f5b028df18e99c484b28864109b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/62bc6c997c859f5b028df18e99c484b28864109b/comments","author":null,"committer":null,"parents":[{"sha":"d3956a7d98811c749774afa8731c14a5330909b5","url":"https://api.github.com/repos/apache/openjpa/commits/d3956a7d98811c749774afa8731c14a5330909b5","html_url":"https://github.com/apache/openjpa/commit/d3956a7d98811c749774afa8731c14a5330909b5"}],"stats":{"total":325,"additions":182,"deletions":143},"files":[{"sha":"c85af3142370d8b74590e4d89b210a071a9cb9b4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfiguration.java?ref=62bc6c997c859f5b028df18e99c484b28864109b","patch":"@@ -241,7 +241,6 @@\n      * <li><code>parallel</code>: When querying for objects, also select for\n      * both 1-1 relations using joins and to-many relations using batched\n      * selects.</li>\n-     * </li>\n      * </ul>\n      */\n     public void setEagerFetchMode(String mode);"},{"sha":"8b9140d57e81ba3d9b2e2c3773a72947ca8f2496","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCConfigurationImpl.java?ref=62bc6c997c859f5b028df18e99c484b28864109b","patch":"@@ -865,9 +865,15 @@ public void close() {\n     }\n \n     protected boolean isInvalidProperty(String propName) {\n+        if (super.isInvalidProperty(propName))\n+            return true;\n+\n         // handle openjpa.jdbc.SomeMisspelledProperty, but not\n         // openjpa.someotherimplementation.SomeProperty\n-        return super.isInvalidProperty(propName)\n-            || propName.toLowerCase().startsWith(\"openjpa.jdbc\");\n+        String[] prefixes = ProductDerivations.getConfigurationPrefixes();\n+        for (int i = 0; i < prefixes.length; i++)\n+            if (propName.toLowerCase().startsWith(prefixes[i] + \".jdbc\"))\n+                return true; \n+        return false;\n     }\n }"},{"sha":"d9d5b6cff8da91a96e063363a77bb1cc36482291","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/JDBCProductDerivation.java?ref=62bc6c997c859f5b028df18e99c484b28864109b","patch":"@@ -39,8 +39,7 @@ public int getType() {\n     public boolean beforeConfigurationConstruct(ConfigurationProvider cp) {\n         // default to JDBC when no broker factory set\n         if (BrokerFactoryValue.get(cp) == null) {\n-            cp.addProperty(BrokerFactoryValue.getKey(cp),\n-                JDBCBrokerFactory.class.getName());\n+            BrokerFactoryValue.set(cp, JDBCBrokerFactory.class.getName());\n             return true;\n         }\n         return false;"},{"sha":"28aa8905eb5fe00d4231278f196e737619c84b91","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java?ref=62bc6c997c859f5b028df18e99c484b28864109b","patch":"@@ -930,7 +930,7 @@ public static boolean run(JDBCConfiguration conf, String[] args,\n         flags.dropTables = opts.removeBooleanProperty\n             (\"dropTables\", \"dt\", flags.dropTables);\n         flags.openjpaTables = opts.removeBooleanProperty\n-            (\"openjpaTables\", \"kt\", flags.openjpaTables);\n+            (\"openjpaTables\", \"ot\", flags.openjpaTables);\n         flags.dropSequences = opts.removeBooleanProperty\n             (\"dropSequences\", \"dsq\", flags.dropSequences);\n         flags.readSchema = opts.removeBooleanProperty"},{"sha":"0346959670299b6b46249a971e1bbd5b9ed1c751","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","raw_url":"https://github.com/apache/openjpa/raw/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java?ref=62bc6c997c859f5b028df18e99c484b28864109b","patch":"@@ -1376,7 +1376,7 @@ public static boolean run(JDBCConfiguration conf, String[] args,\n         flags.ignoreErrors = opts.removeBooleanProperty\n             (\"ignoreErrors\", \"i\", flags.ignoreErrors);\n         flags.openjpaTables = opts.removeBooleanProperty\n-            (\"openjpaTables\", \"kt\", flags.openjpaTables);\n+            (\"openjpaTables\", \"ot\", flags.openjpaTables);\n         flags.primaryKeys = opts.removeBooleanProperty\n             (\"primaryKeys\", \"pk\", flags.primaryKeys);\n         flags.foreignKeys = opts.removeBooleanProperty"},{"sha":"4f6e5a3d3af4b944bcd320d1d3cc2d9d648d45c3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java?ref=62bc6c997c859f5b028df18e99c484b28864109b","patch":"@@ -80,7 +80,7 @@\n     public String autoAssignSequenceName = null;\n \n     /**\n-     * Flag to use OpenJPA 3 style naming for auto assign sequence name and\n+     * Flag to use OpenJPA 0.3 style naming for auto assign sequence name and\n      * trigger name for backwards compatibility.\n      */\n     public boolean openjpa3GeneratedKeyNames = false;"},{"sha":"79ae9bb60ceba238afa5ec77ee9f2695483845a1","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties?ref=62bc6c997c859f5b028df18e99c484b28864109b","patch":"@@ -264,7 +264,7 @@ tool-usage: Usage: java org.apache.openjpa.jdbc.meta.MappingTool\\n\\\n \t\\t[-foreignKeys/-fk <true/t | false/f>]\\n\\\n \t\\t[-indexes/-ix <true/t | false/f>]\\n\\\n \t\\t[-dropTables/-dt <true/t | false/f>]\\n\\\n-\t\\t[-openjpaTables/-kt <true/t | false/f>]\\n\\\n+\t\\t[-openjpaTables/-ot <true/t | false/f>]\\n\\\n \t\\t[-dropSequences/-dsq <true/t | false/f>]\\n\\\n \t\\t[-sequences/-sq <true/t | false/f>]\\n\\\n \t\\t[-ignoreErrors/-i <true/t | false/f>]\\n\\"},{"sha":"db1703cc8b4908ddae1398a923c628b52479c51b","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/schema/localizer.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/schema/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/schema/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/schema/localizer.properties?ref=62bc6c997c859f5b028df18e99c484b28864109b","patch":"@@ -54,7 +54,7 @@ tool-usage: Usage: java org.apache.openjpa.jdbc.schema.SchemaTool\\n\\\n \t\\t[-file/-f <stdout | output file or resource>]\\n\\\n \t\\t[-ignoreErrors/-i <true/t | false/f>]\\n\\\n \t\\t[-dropTables/-dt <true/t | false/f>]\\n\\\n-\t\\t[-openjpaTables/-kt <true/t | false/f>]\\n\\\n+\t\\t[-openjpaTables/-ot <true/t | false/f>]\\n\\\n \t\\t[-dropSequences/-dsq <true/t | false/f>]\\n\\\n \t\\t[-sequences/-sq <true/t | false/f>]\\n\\\n \t\\t[-primaryKeys/-pk <true/t | false/f>]\\n\\"},{"sha":"170bd3607862b00ff9e78393a24c326b1818d01d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerFactoryValue.java","status":"modified","additions":8,"deletions":16,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerFactoryValue.java","raw_url":"https://github.com/apache/openjpa/raw/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerFactoryValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerFactoryValue.java?ref=62bc6c997c859f5b028df18e99c484b28864109b","patch":"@@ -23,6 +23,7 @@\n import org.apache.openjpa.kernel.BrokerFactory;\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n import org.apache.openjpa.lib.conf.PluginValue;\n+import org.apache.openjpa.lib.conf.ProductDerivations;\n \n /**\n  * Value type used to represent the {@link BrokerFactory}. This type is\n@@ -40,20 +41,10 @@\n     private static final List _aliases = new ArrayList();\n     private static final List _prefixes = new ArrayList(2);\n     static {\n-        _prefixes.add(\"openjpa\");\n         addDefaultAlias(\"abstractstore\",\n             AbstractStoreBrokerFactory.class.getName());\n     }\n-    \n-    /**\n-     * Add <code>prefix</code> to the list of prefixes under which configuration\n-     * properties may be scoped.\n-     */\n-    public static void addPropertyPrefix(String prefix) {\n-        if (!_prefixes.contains(prefix))\n-            _prefixes.add(prefix);\n-    }\n-    \n+\n     /**\n      * Add a mapping from <code>alias</code> to <code>cls</code> to the list\n      * of default aliases for new values created after this invocation.\n@@ -67,21 +58,22 @@ public static void addDefaultAlias(String alias, String cls) {\n      * Extract the value of this property if set in the given provider.\n      */\n     public static Object get(ConfigurationProvider cp) {\n+        String[] prefixes = ProductDerivations.getConfigurationPrefixes();\n         Map props = cp.getProperties();\n         Object bf;\n-        for (int i = 0; i < _prefixes.size (); i++) {\n-            bf = props.get(_prefixes.get(i) + \".\" + KEY);\n+        for (int i = 0; i < prefixes.length; i++) {\n+            bf = props.get(prefixes[i] + \".\" + KEY);\n             if (bf != null)\n                 return  bf;\n         }\n         return null;\n     }\n \n     /**\n-     * Return the key to use for this property.\n+     * Set the value of this property in the given provider.\n      */\n-    public static String getKey(ConfigurationProvider cp) {\n-        return _prefixes.get(0) + \".\" + KEY;\n+    public static void set(ConfigurationProvider cp, String value) {\n+        cp.addProperty(\"openjpa.\" + KEY, value);\n     }\n \n     public BrokerFactoryValue() {"},{"sha":"3c4eeea861dc02fbadbae655fd0204e0b09d7b1c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":2,"deletions":10,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=62bc6c997c859f5b028df18e99c484b28864109b","patch":"@@ -165,14 +165,6 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         super(false);\n         String[] aliases;\n \n-        // setup super's log factory plugin\n-        logFactoryPlugin.setProperty(\"Log\");\n-        logFactoryPlugin.setAlias(\"openjpa\", \n-            \"org.apache.openjpa.lib.log.LogFactoryImpl\");\n-        aliases = logFactoryPlugin.getAliases();\n-        logFactoryPlugin.setDefault(aliases[0]);\n-        logFactoryPlugin.setString(aliases[0]);\n-\n         classResolverPlugin = addPlugin(\"ClassResolver\", true);\n         aliases = new String[]{\n             \"default\", \"org.apache.openjpa.util.ClassResolverImpl\",\n@@ -401,8 +393,8 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         fetchBatchSize.set(-1);\n \n         maxFetchDepth = addInt(\"MaxFetchDepth\");\n-        maxFetchDepth.setDefault(\"1\");\n-        maxFetchDepth.set(1);\n+        maxFetchDepth.setDefault(\"-1\");\n+        maxFetchDepth.set(-1);\n \n         fetchGroups = addStringList(\"FetchGroups\");\n         fetchGroups.setDefault(\"default\");"},{"sha":"f36f5f1313b04840bcbbb3fe4fb7005c291fd499","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=62bc6c997c859f5b028df18e99c484b28864109b","patch":"@@ -3399,8 +3399,8 @@ private Seq getSequence(ClassMetaData meta, FieldMetaData fmd) {\n             default:\n                 // use store manager for native sequence\n                 if (fmd == null) {\n-                    // this will return a sequence even for app id classes, which\n-                    // is what we want for backwards-compatibility\n+                    // this will return a sequence even for app id classes, \n+                    // which is what we want for backwards-compatibility\n                     return _store.getDataStoreIdSequence(meta);\n                 }\n                 return _store.getValueSequence(fmd);"},{"sha":"78a8d8c83291258010a1a0a109e0eaa1752e4a11","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=62bc6c997c859f5b028df18e99c484b28864109b","patch":"@@ -297,8 +297,7 @@ public Extent getCandidateExtent() {\n                 _extent = _broker.newExtent(cls, _subclasses);\n                 _extent.setIgnoreChanges(_ignoreChanges);\n             } else if (_extent != null\n-                && _extent.getIgnoreChanges() != _ignoreChanges && cls != null)\n-            {\n+                && _extent.getIgnoreChanges() != _ignoreChanges && cls != null){\n                 _extent = _broker.newExtent(cls, _extent.hasSubclasses());\n                 _extent.setIgnoreChanges(_ignoreChanges);\n             }"},{"sha":"acfd42ee2521e297df54637d2b4c7b23645b2464","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/AbstractProductDerivation.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/AbstractProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/AbstractProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/AbstractProductDerivation.java?ref=62bc6c997c859f5b028df18e99c484b28864109b","patch":"@@ -27,6 +27,10 @@\n public abstract class AbstractProductDerivation\r\n     implements ProductDerivation {\r\n \r\n+    public String getConfigurationPrefix() {\r\n+        return null;\r\n+    }\r\n+\r\n     public ConfigurationProvider loadGlobals(ClassLoader loader)\r\n         throws Exception {\r\n         return null;\r"},{"sha":"03d302ad8e4d1b545b797a2f4fc34250b039d43d","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","status":"modified","additions":1,"deletions":10,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","raw_url":"https://github.com/apache/openjpa/raw/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java?ref=62bc6c997c859f5b028df18e99c484b28864109b","patch":"@@ -78,8 +78,7 @@\n     public String getProductName();\n     \n     /**\n-     * Set the product name.  The set name will automatically be added to\n-     * the property prefixes.\n+     * Set the product name.\n      */\n     public void setProductName(String name);\n \n@@ -160,14 +159,6 @@\n      */\n     public void fromProperties(Map map);\n \n-    /**\n-     * Add <code>prefix</code> to the list of prefixes to use\n-     * to identify valid configuration properties. \"openjpa\" and any\n-     * product name set with {@link #setProductName} will automatically\n-     * be added.\n-     */\n-    public void addPropertyPrefix(String prefix);\n-\n     /**\n      * Adds a listener for any property changes. The property events fired\n      * will <b>not</b> include the old value."},{"sha":"00f15493e733edbfdd00fe0af9eab01887014505","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":21,"deletions":51,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=62bc6c997c859f5b028df18e99c484b28864109b","patch":"@@ -108,7 +108,6 @@\n     private boolean _globals = false;\n     private String _auto = null;\n     private final List _vals = new ArrayList();\n-    private List _prefixes = new ArrayList(2);\n \n     // property listener helper\n     private PropertyChangeSupport _changeSupport = null;\n@@ -131,11 +130,12 @@ public ConfigurationImpl() {\n      * @param loadGlobals whether to attempt to load the global properties\n      */\n     public ConfigurationImpl(boolean loadGlobals) {\n-        setProductName(\"openjpa\"); // also adds as prop prefix\n+        setProductName(\"openjpa\");\n \n         logFactoryPlugin = addPlugin(\"Log\", true);\n         String[] aliases = new String[]{\n             \"true\", LogFactoryImpl.class.getName(),\n+            \"openjpa\", LogFactoryImpl.class.getName(),\n             \"commons\", \"org.apache.openjpa.lib.log.CommonsLogFactory\",\n             \"log4j\", \"org.apache.openjpa.lib.log.Log4JLogFactory\",\n             \"none\", NoneLogFactory.class.getName(),\n@@ -183,7 +183,6 @@ public String getProductName() {\n \n     public void setProductName(String name) {\n         _product = name;\n-        addPropertyPrefix(name);\n     }\n \n     public LogFactory getLogFactory() {\n@@ -307,8 +306,8 @@ public void valueChanged(Value val) {\n         // keep cached props up to date\n         if (_props != null) {\n             if (newString == null)\n-                remove(_props, val);\n-            else if (containsKey(_props, val)\n+                Configurations.removeProperty(val.getProperty(), _props);\n+            else if (Configurations.containsProperty(val.getProperty(), _props)\n                 || val.getDefault() == null\n                 || !val.getDefault().equals(newString))\n                 put(_props, val, newString);\n@@ -534,11 +533,6 @@ private String findLocalized(String key, boolean fatal, Class scope) {\n     // To/from maps\n     ////////////////\n \n-    public void addPropertyPrefix(String prefix) {\n-        if (!_prefixes.contains(prefix))\n-            _prefixes.add(prefix);\n-    }\n-\n     public Map toProperties(boolean storeDefaults) {\n         // clone properties before making any modifications; we need to keep\n         // the internal properties instance consistent to maintain equals and\n@@ -560,7 +554,8 @@ else if (_props instanceof Properties)\n                 // if key in existing properties, we already know value is up\n                 // to date\n                 val = (Value) _vals.get(i);\n-                if (_props != null && containsKey(_props, val))\n+                if (_props != null && Configurations.containsProperty\n+                    (val.getProperty(), _props))\n                     continue;\n \n                 str = val.getString();\n@@ -605,14 +600,13 @@ public void fromProperties(Map map) {\n                 ser &= o instanceof Serializable;\n                 val.setObject(o);\n             }\n-            remove(remaining, val);\n+            Configurations.removeProperty(val.getProperty(), remaining);\n         }\n         \n         // convention is to point product at a resource with the\n         // <prefix>.properties System property; remove that property so we\n         // we don't warn about it\n-        for (int i = 0; i < _prefixes.size(); i++)\n-            remaining.remove(_prefixes.get(i) + \".properties\");\n+        Configurations.removeProperty(\"properties\", remaining);\n \n         // now warn if there are any remaining properties that there\n         // is an unhandled prop\n@@ -637,39 +631,20 @@ public void fromProperties(Map map) {\n     private void put(Map map, Value val, Object o) {\n         Object key = val.getLoadKey();\n         if (key == null)\n-            key = _prefixes.get(0) + \".\" + val.getProperty();\n+            key = \"openjpa.\" + val.getProperty();\n         map.put(key, o);\n     }\n \n-    /**\n-     * Return whether <code>map</code> contains an entry for <code>val</code>.\n-     */\n-    private boolean containsKey(Map map, Value val) {\n-        for (int i = 0; i < _prefixes.size(); i++)\n-            if (map.containsKey(_prefixes.get(i) + \".\" + val.getProperty()))\n-                return true;\n-        return false;\n-    }\n-\n-    /**\n-     * Removes <code>val</code> from <code>map</code>. Use this method\n-     * instead of attempting to remove the value directly because this will\n-     * account for any duplicate-but-same-valued keys in the map.\n-     */\n-    private void remove(Map map, Value val) {\n-        for (int i = 0; i < _prefixes.size(); i++)\n-            map.remove(_prefixes.get(i) + \".\" + val.getProperty());\n-    }\n-\n     /**\n      * Look up the given value, testing all available prefixes.\n      */\n     private Object get(Map map, Value val, boolean setLoadKey) {\n+        String[] prefixes = ProductDerivations.getConfigurationPrefixes();\n         String firstKey = null;\n         String key;\n         Object o = null;\n-        for (int i = 0; i < _prefixes.size(); i++) {\n-            key = _prefixes.get(i) + \".\" + val.getProperty();\n+        for (int i = 0; i < prefixes.length; i++) {\n+            key = prefixes[i] + \".\" + val.getProperty();\n             if (firstKey == null) {\n                 o = map.get(key);\n                 if (o != null)\n@@ -712,11 +687,11 @@ private void warnInvalidProperty(String propName) {\n      * Return a comprehensive list of recognized map keys.\n      */\n     private Collection newPropertyList() {\n-        List l = new ArrayList(_vals.size() * _prefixes.size());\n+        String[] prefixes = ProductDerivations.getConfigurationPrefixes();\n+        List l = new ArrayList(_vals.size() * prefixes.length);\n         for (int i = 0; i < _vals.size(); i++) {\n-            for (int j = 0; j < _prefixes.size(); j++)\n-                l.add(_prefixes.get(j) + \".\" \n-                    + ((Value) _vals.get(i)).getProperty());\n+            for (int j = 0; j < prefixes.length; j++)\n+                l.add(prefixes[j] + \".\" + ((Value) _vals.get(i)).getProperty());\n         }\n         return l;\n     }\n@@ -729,12 +704,11 @@ protected boolean isInvalidProperty(String propName) {\n         // handle warnings for openjpa.SomeString, but not for\n         // openjpa.some.subpackage.SomeString, since it might be valid for some\n         // specific implementation of OpenJPA\n-        String prefix;\n-        for (int i = 0; i < _prefixes.size(); i++) {\n-            prefix = (String) _prefixes.get(i) + \".\";\n-            if (propName.toLowerCase().startsWith(prefix)\n-                && propName.length() > prefix.length()\n-                && propName.indexOf('.', prefix.length()) == -1)\n+        String[] prefixes = ProductDerivations.getConfigurationPrefixes();\n+        for (int i = 0; i < prefixes.length; i++) {\n+            if (propName.toLowerCase().startsWith(prefixes[i])\n+                && propName.length() > prefixes[i].length()\n+                && propName.indexOf('.', prefixes[i].length()) == -1)\n                 return true;\n         }\n         return false;\n@@ -861,7 +835,6 @@ public static String toXMLName(String propName) {\n     public void readExternal(ObjectInput in)\n         throws IOException, ClassNotFoundException {\n         fromProperties((Map) in.readObject());\n-        _prefixes = (List) in.readObject();\n         _globals = in.readBoolean();\n     }\n \n@@ -874,7 +847,6 @@ public void writeExternal(ObjectOutput out) throws IOException {\n             out.writeObject(_props);\n         else\n             out.writeObject(toProperties(false));\n-        out.writeObject(_prefixes);\n         out.writeBoolean(_globals);\n     }\n \n@@ -888,8 +860,6 @@ public Object clone() {\n                 (new Class[]{ boolean.class });\n             ConfigurationImpl clone = (ConfigurationImpl) cons.newInstance\n                 (new Object[]{ Boolean.FALSE });\n-            clone._prefixes.clear();\n-            clone._prefixes.addAll(_prefixes);\n             clone._globals = _globals;\n             clone.fromProperties(toProperties(true));\n             return clone;"},{"sha":"3c765b41bb935ba9123367ff66b43e54002424bd","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","status":"modified","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","raw_url":"https://github.com/apache/openjpa/raw/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java?ref=62bc6c997c859f5b028df18e99c484b28864109b","patch":"@@ -468,4 +468,53 @@ public static Object lookup(String name) {\n                 try { ctx.close(); } catch (Exception e) {}\n         }\n     }\n+\n+    /**\n+     * Test whether the map contains the given key, prefixed with any possible\n+     * configuration prefix.\n+     */\n+    public static boolean containsProperty(String key, Map props) {\n+        if (key == null || props == null)\n+            return false;\n+        String[] prefixes = ProductDerivations.getConfigurationPrefixes();\n+        for (int i = 0; i < prefixes.length; i++)\n+            if (props.containsKey(prefixes[i] + \".\" + key))\n+                return true;\n+        return false;\n+    }\n+\n+    /**\n+     * Get the property under the given key, prefixed with any possible\n+     * configuration prefix.\n+     */\n+    public static Object getProperty(String key, Map props) {\n+        if (key == null || props == null)\n+            return null;\n+        String[] prefixes = ProductDerivations.getConfigurationPrefixes();\n+        Object val;\n+        for (int i = 0; i < prefixes.length; i++) {\n+            val = props.get(prefixes[i] + \".\" + key);\n+            if (val != null)\n+                return val;\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Remove the property under the given key, prefixed with any possible\n+     * configuration prefix.\n+     */\n+    public static Object removeProperty(String key, Map props) {\n+        if (key == null || props == null)\n+            return null;\n+        String[] prefixes = ProductDerivations.getConfigurationPrefixes();\n+        Object val = null;\n+        Object cur;\n+        for (int i = 0; i < prefixes.length; i++) {\n+            cur = props.remove(prefixes[i] + \".\" + key);\n+            if (cur != null && val == null)\n+                val = cur;\n+        }\n+        return val;\n+    }\n }"},{"sha":"68f0b8d7d300f229ec1207ae6fbed94541a200eb","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivation.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivation.java?ref=62bc6c997c859f5b028df18e99c484b28864109b","patch":"@@ -40,6 +40,11 @@\n      */\n     public int getType();\n \n+    /**\n+     * Return the configuration prefix for properties of this product.\n+     */\n+    public String getConfigurationPrefix();\n+\n     /**\n      * Load globals into the returned ConfigurationProvider, or return null if \n      * no globals is found."},{"sha":"95c36bb2ba1ae95b0ee939404c209dbb243b9daa","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","raw_url":"https://github.com/apache/openjpa/raw/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java?ref=62bc6c997c859f5b028df18e99c484b28864109b","patch":"@@ -34,6 +34,7 @@\n public class ProductDerivations {\n \n     private static final ProductDerivation[] _derivations;\n+    private static final String[] _prefixes;\n     static {\n         Class[] pdcls = Services.getImplementorClasses(ProductDerivation.class,\n             ProductDerivation.class.getClassLoader());\n@@ -59,6 +60,24 @@\n         Collections.sort(derivations, new ProductDerivationComparator());\n         _derivations = (ProductDerivation[]) derivations.toArray\n             (new ProductDerivation[derivations.size()]);\n+\n+        List prefixes = new ArrayList(2);\n+        for (int i = 0; i < _derivations.length; i++) {\n+            if (_derivations[i].getConfigurationPrefix() != null\n+                && !\"openjpa\".equals(_derivations[i].getConfigurationPrefix()))\n+                prefixes.add(_derivations[i].getConfigurationPrefix());\n+        }\n+        _prefixes = new String[1 + prefixes.size()];\n+        _prefixes[0] = \"openjpa\";\n+        for (int i = 0; i < prefixes.size(); i++)\n+            _prefixes[i + 1] = (String) prefixes.get(i);\n+    }\n+\n+    /**\n+     * Return the recognized prefixes for configuration properties.\n+     */\n+    public static String[] getConfigurationPrefixes() {\n+        return _prefixes;\n     }\n \n     /**"},{"sha":"6ac77cb540c60b93e7f6eaf045d15ae52528ab94","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java","raw_url":"https://github.com/apache/openjpa/raw/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java?ref=62bc6c997c859f5b028df18e99c484b28864109b","patch":"@@ -69,8 +69,8 @@ public void testCreateEntityManager() {\n         // openjpa-facade test\n         assertTrue(em instanceof OpenJPAEntityManager);\n         OpenJPAEntityManager ojem = (OpenJPAEntityManager) em;\n-        ojem.getFetchPlan().setMaxFetchDepth(-1);\n-        assertEquals(-1, ojem.getFetchPlan().getMaxFetchDepth());\n+        ojem.getFetchPlan().setMaxFetchDepth(1);\n+        assertEquals(1, ojem.getFetchPlan().getMaxFetchDepth());\n         em.close();\n     }\n "},{"sha":"2f6cb5a36b14a1b2682d1e19fd6b6387e08b9f2a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","status":"modified","additions":29,"deletions":19,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java?ref=62bc6c997c859f5b028df18e99c484b28864109b","patch":"@@ -34,6 +34,8 @@\n import org.apache.openjpa.kernel.DelegatingBrokerFactory;\n import org.apache.openjpa.kernel.DelegatingFetchConfiguration;\n import org.apache.openjpa.kernel.FetchConfiguration;\n+import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.lib.conf.ProductDerivations;\n import org.apache.openjpa.lib.conf.Value;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.ImplHelper;\n@@ -145,42 +147,42 @@ else if (!props.isEmpty())\n             props = new HashMap(props);\n \n         OpenJPAConfiguration conf = getConfiguration();\n-        String user =\n-            (String) props.remove(\"openjpa.ConnectionUserName\");\n+        String user = (String) Configurations.removeProperty\n+            (\"ConnectionUserName\", props);\n         if (user == null)\n             user = conf.getConnectionUserName();\n-        String pass =\n-            (String) props.remove(\"openjpa.ConnectionPassword\");\n+        String pass = (String) Configurations.removeProperty\n+            (\"ConnectionPassword\", props);\n         if (pass == null)\n             pass = conf.getConnectionPassword();\n \n-        String str =\n-            (String) props.remove(\"openjpa.TransactionMode\");\n+        String str = (String) Configurations.removeProperty\n+            (\"TransactionMode\", props);\n         boolean managed;\n         if (str == null)\n             managed = conf.isTransactionModeManaged();\n         else {\n-            Value val = conf.getValue(\"openjpa.TransactionMode\");\n+            Value val = conf.getValue(\"TransactionMode\");\n             managed = Boolean.parseBoolean(val.unalias(str));\n         }\n \n-        Object obj = props.remove(\"openjpa.ConnectionRetainMode\");\n+        Object obj = Configurations.removeProperty(\"ConnectionRetainMode\", \n+            props);\n         int retainMode;\n         if (obj instanceof Number)\n             retainMode = ((Number) obj).intValue();\n-        else if (obj != null) {\n-            Value val =\n-                conf.getValue(\"openjpa.ConnectionRetainMode\");\n+        else if (obj == null)\n+            retainMode = conf.getConnectionRetainModeConstant();\n+        else {\n+            Value val = conf.getValue(\"ConnectionRetainMode\");\n             try {\n                 retainMode = Integer.parseInt(val.unalias((String) obj));\n             } catch (Exception e) {\n                 throw new ArgumentException(_loc.get(\"bad-em-prop\",\n                     \"openjpa.ConnectionRetainMode\", obj),\n-                    new Throwable[]{ e },\n-                    obj, true);\n+                    new Throwable[]{ e }, obj, true);\n             }\n-        } else\n-            retainMode = conf.getConnectionRetainModeConstant();\n+        }\n \n         Broker broker = _factory.newBroker(user, pass, managed, retainMode,\n             false);\n@@ -191,15 +193,23 @@ else if (obj != null) {\n         OpenJPAEntityManager em = newEntityManagerImpl(broker);\n \n         // allow setting of other bean properties of EM\n+        String[] prefixes = ProductDerivations.getConfigurationPrefixes();\n         List<RuntimeException> errs = null;\n         Method setter = null;\n-        String prop;\n+        String prop, prefix;\n         Object val;\n         for (Map.Entry entry : (Set<Map.Entry>) props.entrySet()) {\n             prop = (String) entry.getKey();\n-            if (!prop.startsWith(\"openjpa.\"))\n-                continue;\n-            prop = prop.substring(\"openjpa.\".length());\n+            prefix = null;\n+            for (int i = 0; i < prefixes.length; i++) {\n+                prefix = prefixes[i] + \".\";\n+                if (prop.startsWith(prefix))\n+                    break;\n+                prefix = null; \n+            } \n+            if (prefix == null)\n+                continue; \n+            prop = prop.substring(prefix.length());\n             try {\n                 setter = ImplHelper.getSetter(em.getClass(), prop);\n             } catch (OpenJPAException ke) {"},{"sha":"858c3f37131b4e4e9f3064724ba53ac0fe66b68d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java?ref=62bc6c997c859f5b028df18e99c484b28864109b","patch":"@@ -32,6 +32,7 @@\n import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n import org.apache.openjpa.conf.OpenJPAProductDerivation;\n import org.apache.openjpa.lib.conf.AbstractProductDerivation;\n+import org.apache.openjpa.lib.conf.ProductDerivations;\n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n import org.apache.openjpa.lib.conf.MapConfigurationProvider;\n@@ -180,7 +181,10 @@ public ConfigurationProvider load(File file, String anchor)\n     @Override\n     public ConfigurationProvider loadGlobals(ClassLoader loader)\n         throws IOException {\n-        String rsrc = System.getProperty(\"openjpa.properties\");\n+        String[] prefixes = ProductDerivations.getConfigurationPrefixes();\n+        String rsrc = null;\n+        for (int i = 0; i < prefixes.length && StringUtils.isEmpty(rsrc); i++)\n+           rsrc = System.getProperty(prefixes[i] + \".properties\"); \n         boolean explicit = !StringUtils.isEmpty(rsrc);\n         String anchor = null;\n         int idx = (!explicit) ? -1 : rsrc.lastIndexOf('#');"},{"sha":"ff78ba75fdb4cb53d55c1f777a22db7bdc86390e","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java?ref=62bc6c997c859f5b028df18e99c484b28864109b","patch":"@@ -50,8 +50,7 @@\n public class PersistenceProviderImpl\n     implements PersistenceProvider {\n \n-    static final String CLASS_TRANSFORMER_OPTIONS =\n-        \"openjpa.ClassTransformerOptions\";\n+    static final String CLASS_TRANSFORMER_OPTIONS = \"ClassTransformerOptions\";\n \n     /**\n      * Loads the entity manager specified by <code>name</code>, applying\n@@ -71,8 +70,6 @@ public EntityManagerFactory createEntityManagerFactory(String name,\n             if (cp == null)\n                 return null;\n \n-            if (m != null)\n-                cp.addProperties(m);\n             BrokerFactory factory = Bootstrap.newBrokerFactory(cp, null);\n             return OpenJPAPersistence.toEntityManagerFactory(factory);\n         } catch (Exception e) {\n@@ -97,9 +94,8 @@ public EntityManagerFactory createContainerEntityManagerFactory(\n             OpenJPAEntityManagerFactory emf = \n                 OpenJPAPersistence.toEntityManagerFactory(factory);\n             Properties p = pui.getProperties();\n-            String ctOpts = null;\n-            if (p != null)\n-                ctOpts = p.getProperty(CLASS_TRANSFORMER_OPTIONS);\n+            String ctOpts = (String) Configurations.getProperty\n+                (CLASS_TRANSFORMER_OPTIONS, p);\n             pui.addTransformer(new ClassTransformerImpl(emf.getConfiguration(),\n                 ctOpts, pui.getNewTempClassLoader()));\n             return emf;"},{"sha":"3439642b66e22f63b589166e8a83c81edbbd5d6c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","raw_url":"https://github.com/apache/openjpa/raw/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java?ref=62bc6c997c859f5b028df18e99c484b28864109b","patch":"@@ -403,7 +403,8 @@ public static Map toOpenJPAProperties(PersistenceUnitInfo info) {\n         }\n         if (!metaFactoryProps.isEmpty()) {\n             // set persistent class locations as properties of metadata factory\n-            String factory = (String) map.get(\"openjpa.MetaDataFactory\");\n+            String factory = (String) Configurations.getProperty\n+                (\"MetaDataFactory\", map);\n             if (factory == null)\n                 factory = Configurations.serializeProperties(metaFactoryProps);\n             else {\n@@ -417,7 +418,8 @@ public static Map toOpenJPAProperties(PersistenceUnitInfo info) {\n         }\n \n         // always record provider name for product derivations to access\n-        map.put(KEY_PROVIDER, info.getPersistenceProviderClassName());\n+        if (info.getPersistenceProviderClassName() != null)\n+            map.put(KEY_PROVIDER, info.getPersistenceProviderClassName());\n         return map;\n     }\n "},{"sha":"2fc6f91fbfd85c0cf726903ec10d3bf55280f754","filename":"openjpa-project/src/doc/manual/ref_guide_conf.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-project/src/doc/manual/ref_guide_conf.xml","raw_url":"https://github.com/apache/openjpa/raw/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-project/src/doc/manual/ref_guide_conf.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_conf.xml?ref=62bc6c997c859f5b028df18e99c484b28864109b","patch":"@@ -2120,11 +2120,11 @@ object-to-datastore mapping to use.\n MaxFetchDepth</literal>\n             </para>\n             <para>\n-<emphasis role=\"bold\">Default:</emphasis><literal>1</literal>\n+<emphasis role=\"bold\">Default:</emphasis><literal>-1</literal>\n             </para>\n             <para>\n <emphasis role=\"bold\">Description:</emphasis> The maximum depth of relations to\n-traverse when eager fetching. Use -1 for no limit. Defaults to 1.  See\n+traverse when eager fetching. Use -1 for no limit. Defaults to no limit.  See\n <xref linkend=\"ref_guide_perfpack_eager\"/> for details on eager fetching.\n             </para>\n         </section>"},{"sha":"408f8c50880d286c80a41230214819b3823f166e","filename":"openjpa-project/src/doc/manual/ref_guide_pc.xml","status":"modified","additions":11,"deletions":9,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-project/src/doc/manual/ref_guide_pc.xml","raw_url":"https://github.com/apache/openjpa/raw/62bc6c997c859f5b028df18e99c484b28864109b/openjpa-project/src/doc/manual/ref_guide_pc.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_pc.xml?ref=62bc6c997c859f5b028df18e99c484b28864109b","patch":"@@ -1828,15 +1828,17 @@ fetch group names.\n You can also set the system's default maximum fetch depth with the\n <link linkend=\"openjpa.MaxFetchDepth\"><literal>openjpa.MaxFetchDepth</literal>\n </link> configuration property.  The maximum fetch depth determines how \"deep\"\n-into the object graph to traverse when loading an instance.  The default maximum\n-depth is 1, meaning that OpenJPA will load at most the target instance and its\n-immediate relations.  By increasing the depth, you can allow OpenJPA to also\n-load relations of relations, to arbitrary depth.  A value of -1 symbolizes an\n-infinite maximum, telling OpenJPA to fetch configured relations until it reaches\n-the edges of the object graph.  Of course, which relation fields are loaded\n-depends on whether the fields are eager or lazy, and on the active fetch groups.\n-A fetch group member's recursion depth may also limit the fetch depth to\n-something less than the configured maximum.\n+into the object graph to traverse when loading an instance.  For example, with\n+a <literal>MaxFetchDepth</literal> of 1, OpenJPA will load at most the target \n+instance and its immediate relations.  With a <literal>MaxFetchDepth</literal>\n+of 2, OpenJPA may load the target instance, its immediate relations, and\n+the relations of those relations.  This works to arbitrary depth.  In fact,\n+the default <literal>MaxFetchDepth</literal> value is -1, which symbolizes \n+infinite depth.  Under this setting, OpenJPA will fetch configured relations \n+until it reaches the edges of the object graph.  Of course, which relation \n+fields are loaded depends on whether the fields are eager or lazy, and on the \n+active fetch groups.  A fetch group member's recursion depth may also limit \n+the fetch depth to something less than the configured maximum.\n             </para>\n             <para>\n OpenJPA's <classname>OpenJPAEntityManager</classname> and <classname>"}]}

