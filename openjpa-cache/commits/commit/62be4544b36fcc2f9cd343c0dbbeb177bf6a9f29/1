{"sha":"62be4544b36fcc2f9cd343c0dbbeb177bf6a9f29","node_id":"MDY6Q29tbWl0MjA2MzY0OjYyYmU0NTQ0YjM2ZmNjMmY5Y2QzNDNjMGRiYmViMTc3YmY2YTlmMjk=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-06-12T02:40:14Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2009-06-12T02:40:14Z"},"message":"OPENJPA-1135 Apply overrides to deferred embeddable attributes\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@783966 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d2dc29954be5c5129ff01e9abf09343506290b35","url":"https://api.github.com/repos/apache/openjpa/git/trees/d2dc29954be5c5129ff01e9abf09343506290b35"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/62be4544b36fcc2f9cd343c0dbbeb177bf6a9f29","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/62be4544b36fcc2f9cd343c0dbbeb177bf6a9f29","html_url":"https://github.com/apache/openjpa/commit/62be4544b36fcc2f9cd343c0dbbeb177bf6a9f29","comments_url":"https://api.github.com/repos/apache/openjpa/commits/62be4544b36fcc2f9cd343c0dbbeb177bf6a9f29/comments","author":null,"committer":null,"parents":[{"sha":"a972ec0de37dc65435718babd762cda3e24e823d","url":"https://api.github.com/repos/apache/openjpa/commits/a972ec0de37dc65435718babd762cda3e24e823d","html_url":"https://github.com/apache/openjpa/commit/a972ec0de37dc65435718babd762cda3e24e823d"}],"stats":{"total":540,"additions":489,"deletions":51},"files":[{"sha":"0c5dd2814cbe4148d34b76396bc598604cb0aa24","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/62be4544b36fcc2f9cd343c0dbbeb177bf6a9f29/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/62be4544b36fcc2f9cd343c0dbbeb177bf6a9f29/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java?ref=62be4544b36fcc2f9cd343c0dbbeb177bf6a9f29","patch":"@@ -525,6 +525,7 @@ protected void finish() {\n         if (_log != null && _log.isTraceEnabled())\n             _log.trace(_loc.get(\"end-parse\", getSourceName()));\n         _results = new ArrayList(_curResults);\n+        clearDeferredMetaData();\n     }\n \n     /**\n@@ -679,4 +680,7 @@ protected SAXException getException(Message msg, Throwable cause) {\n         e.initCause(cause);\n         return e;\n     }\n+\n+    protected void clearDeferredMetaData() {\n+    }\n }"},{"sha":"ee73ad1145d82c00b29b30a514625b86bc31c903","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","status":"modified","additions":68,"deletions":11,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/62be4544b36fcc2f9cd343c0dbbeb177bf6a9f29/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/62be4544b36fcc2f9cd343c0dbbeb177bf6a9f29/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java?ref=62be4544b36fcc2f9cd343c0dbbeb177bf6a9f29","patch":"@@ -1297,9 +1297,14 @@ private void parseAttributeOverrides(FieldMapping fm,\n                 parseColumns(efm, attr.column());\n         }\n     }\n-    \n+\n     public static FieldMapping getEmbeddedFieldMapping(FieldMapping fm,\n-            String attrName) {\n+        String attrName) {\n+        return getEmbeddedFieldMapping(fm, attrName, true);\n+    }\n+\n+    public static FieldMapping getEmbeddedFieldMapping(FieldMapping fm,\n+            String attrName, boolean mustExist) {\n         ClassMapping embed = null;\n         boolean isKey = false;\n         boolean isValue = false;\n@@ -1323,31 +1328,83 @@ else if (attrName != null && attrName.startsWith(\"value.\"))\n                     throw new MetaDataException(_loc.get(\"embed-override-name\",\n                         fm, attrName));\n                 if (isKey) \n-                    embed = getEmbeddedMapping(fm.getKeyMapping());\n+                    embed = getEmbeddedMapping(fm.getKeyMapping(), mustExist);\n                 else if (isValue)     \n-                    embed = getEmbeddedMapping(fm.getElementMapping());\n+                    embed = getEmbeddedMapping(fm.getElementMapping(), \n+                        mustExist);\n                 break;\n             default: // an embeddable\n                 if (isKey || isValue)\n                     throw new MetaDataException(_loc.get(\"embed-override-name\",\n                         fm, attrName));\n-                embed = getEmbeddedMapping(fm.getValueMapping());\n+                embed = getEmbeddedMapping(fm.getValueMapping(), mustExist);\n                 break;\n         }\n         \n-        if (embed == null) \n-            throw new MetaDataException(_loc.get(\"not-embedded\", fm));\n+        if (embed == null) {\n+            if (mustExist)\n+                throw new MetaDataException(_loc.get(\"not-embedded\", fm));\n+            return null;\n+        }\n         return getAttributeOverrideField(attrName, fm, embed);\n     }\n-    \n-    public static ClassMapping getEmbeddedMapping(ValueMapping val) {\n+\n+    public static Class<?> getEmbeddedClassType(FieldMapping fm,\n+        String attrName) {\n+        ValueMapping embed = null;\n+        boolean isKey = false;\n+        boolean isValue = false;\n+        if (attrName != null && attrName.startsWith(\"key.\"))\n+            isKey = true;\n+        else if (attrName != null && attrName.startsWith(\"value.\"))\n+            isValue = true;\n+        if (isKey || isValue)\n+            attrName = attrName.substring(attrName.indexOf(\".\")+1);\n+            \n+        int typeCode = fm.getValue().getDeclaredTypeCode();\n+        switch (typeCode) {\n+            case JavaTypes.COLLECTION : // a collection of embeddables\n+                if (isKey || isValue)\n+                    throw new MetaDataException(_loc.get(\"embed-override-name\",\n+                        fm, attrName));\n+                embed = fm.getElementMapping();\n+                break;\n+            case JavaTypes.MAP: // a map\n+                if (!isKey && !isValue)\n+                    throw new MetaDataException(_loc.get(\"embed-override-name\",\n+                        fm, attrName));\n+                if (isKey) \n+                    embed = fm.getKeyMapping();\n+                else if (isValue)     \n+                    embed = fm.getElementMapping();\n+                break;\n+            default: // an embeddable\n+                if (isKey || isValue)\n+                    throw new MetaDataException(_loc.get(\"embed-override-name\",\n+                        fm, attrName));\n+                embed = fm.getValueMapping();\n+                break;\n+        }\n+        \n+        if (embed == null) {\n+            throw new MetaDataException(_loc.get(\"not-embedded\", fm));\n+        }\n+        return embed.getDeclaredType();\n+    }\n+\n+    public static ClassMapping getEmbeddedMapping(ValueMapping val, boolean \n+        createNew) {\n         ClassMapping embed = val.getEmbeddedMapping();\n-        if (embed != null) \n+        if (embed != null || !createNew) \n             return embed;\n-        \n+\n         val.addEmbeddedMetaData();\n         return val.getEmbeddedMapping();\n+    }\n \n+    \n+    public static ClassMapping getEmbeddedMapping(ValueMapping val) {\n+        return getEmbeddedMapping(val, true);\n     }\n     \n     public static FieldMapping getAttributeOverrideField(String attrName,"},{"sha":"3db1125cc6ed6ff6184e08fa37eb1dadbe1fcf9d","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","status":"modified","additions":193,"deletions":18,"changes":211,"blob_url":"https://github.com/apache/openjpa/blob/62be4544b36fcc2f9cd343c0dbbeb177bf6a9f29/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/62be4544b36fcc2f9cd343c0dbbeb177bf6a9f29/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java?ref=62be4544b36fcc2f9cd343c0dbbeb177bf6a9f29","patch":"@@ -56,8 +56,11 @@\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n+import org.apache.openjpa.meta.MetaDataContext;\n+import org.apache.openjpa.meta.ValueMetaData;\n import org.apache.openjpa.persistence.XMLPersistenceMetaDataParser;\n import org.apache.openjpa.util.InternalException;\n+import org.apache.openjpa.util.MetaDataException;\n import org.xml.sax.Attributes;\n import org.xml.sax.Locator;\n import org.xml.sax.SAXException;\n@@ -123,6 +126,10 @@\n     private Column _discCol;\n     private int _resultIdx = 0;\n \n+    private final Map<Class<?>, ArrayList<DeferredEmbeddableOverrides>> \n+        _deferredMappings = new HashMap<Class<?>, \n+             ArrayList<DeferredEmbeddableOverrides>>();\n+\n     /**\n      * Constructor; supply configuration.\n      */\n@@ -655,9 +662,13 @@ protected void endFieldMapping(FieldMetaData field)\n      * Set unique for field.\n      */\n     private void setUnique(FieldMapping fm) {\n-        if (_unique.size() == 2) // i.e. TRUE & FALSE\n+        setUnique(fm, _unique);\n+    }\n+\n+    private void setUnique(FieldMapping fm, EnumSet<UniqueFlag> unique) {\n+        if (unique.size() == 2) // i.e. TRUE & FALSE\n             getLog().warn(_loc.get(\"inconsist-col-attrs\", fm));\n-        else if (_unique.contains(UniqueFlag.TRUE))\n+        else if (unique.contains(UniqueFlag.TRUE))\n             fm.getValueInfo().setUnique(new Unique());\n     }\n \n@@ -690,9 +701,23 @@ private void endAttributeOverride()\n         FieldMapping fm = null;\n         if (elem instanceof ClassMapping)\n             fm = getAttributeOverride((ClassMapping) elem);\n-        else\n-            fm = getAttributeOverrideForEmbeddable((FieldMapping) elem);\n-        if (_cols != null) {\n+        else {\n+            FieldMapping basefm = (FieldMapping) elem;\n+            \n+            fm = getAttributeOverrideForEmbeddable(basefm, _override, false);\n+            if (fm == null) {\n+                DeferredEmbeddableOverrides dfm = \n+                    getDeferredFieldMappingInfo(\n+                        AnnotationPersistenceMappingParser.\n+                        getEmbeddedClassType(basefm, _override),\n+                        basefm, _override, true);\n+                dfm._defCols = _cols;\n+                dfm._defTable = _colTable;\n+                dfm._attrName = _override;\n+                dfm._unique = _unique;\n+            }\n+        }\n+        if (fm != null && _cols != null) {\n             fm.getValueInfo().setColumns(_cols);\n             if (_colTable != null)\n                 fm.getMappingInfo().setTableName(_colTable);\n@@ -717,10 +742,11 @@ private FieldMapping getAttributeOverride(ClassMapping cm) {\n     /**\n      * Return the proper override.\n      */\n-    private FieldMapping getAttributeOverrideForEmbeddable(FieldMapping fm) \n+    private FieldMapping getAttributeOverrideForEmbeddable(FieldMapping fm, \n+        String attrName, boolean mustExist) \n     throws SAXException {\n         return AnnotationPersistenceMappingParser.getEmbeddedFieldMapping(fm, \n-            _override);\n+            attrName, mustExist);\n     }\n \n     /**\n@@ -747,14 +773,27 @@ private boolean startJoinTable(Attributes attrs)\n             Object elem = currentElement();\n             FieldMapping fm = null;\n             if (elem instanceof FieldMapping) {\n-                fm = (FieldMapping) elem;\n-                if (_override != null) \n-                    fm = getAttributeOverrideForEmbeddable(fm);\n+                fm = (FieldMapping) elem; \n+                if (_override != null) {\n+                    FieldMapping basefm = (FieldMapping) elem;\n+                    fm = getAttributeOverrideForEmbeddable(basefm, \n+                        _override, false);\n+                    if (fm == null) {\n+                        DeferredEmbeddableOverrides dfm = \n+                            getDeferredFieldMappingInfo(\n+                                AnnotationPersistenceMappingParser.\n+                                getEmbeddedClassType(basefm, _override),\n+                                basefm, _override, true);\n+                        dfm._defTable = table;\n+                        dfm._attrName = _override;\n+                    }\n+                }\n             } else if (elem instanceof ClassMapping) {\n                 ClassMapping cm = (ClassMapping) elem;\n                 fm = getAttributeOverride(cm);\n             }\n-            fm.getMappingInfo().setTableName(table);\n+            if (fm != null)\n+                fm.getMappingInfo().setTableName(table);\n         }\n         return true;\n     }\n@@ -767,17 +806,32 @@ private void endJoinTable() throws SAXException {\n         FieldMapping fm = null;\n         if (elem instanceof FieldMapping) {\n             fm = (FieldMapping) elem;\n-            if (_override != null)\n-                fm = getAttributeOverrideForEmbeddable(fm);\n+            if (_override != null) {\n+                FieldMapping basefm = (FieldMapping) elem;\n+                fm = getAttributeOverrideForEmbeddable(basefm, _override, \n+                    false);\n+                if (fm == null) {\n+                    DeferredEmbeddableOverrides dfm = \n+                        getDeferredFieldMappingInfo(\n+                            AnnotationPersistenceMappingParser.\n+                            getEmbeddedClassType(basefm, _override),\n+                            basefm, _override, true);\n+                    dfm._defCols = _cols;\n+                    dfm._defElemJoinCols = _joinCols;\n+                    dfm._attrName = _override;\n+                }\n+            }\n         } else if (elem instanceof ClassMapping){\n             ClassMapping cm = (ClassMapping) elem;\n             fm = getAttributeOverride(cm);\n         }\n \n-        if (_joinCols != null)\n-            fm.getMappingInfo().setColumns(_joinCols);\n-        if (_cols != null)\n-            fm.getElementMapping().getValueInfo().setColumns(_cols);\n+        if (fm != null) {\n+            if (_joinCols != null)\n+                fm.getMappingInfo().setColumns(_joinCols);\n+            if (_cols != null)\n+                fm.getElementMapping().getValueInfo().setColumns(_cols);\n+        }\n         clearColumnInfo();\n     }\n \n@@ -845,7 +899,7 @@ private boolean startColumn(Attributes attrs)\n             // a collection of basic types\n             // the column is in a separate table\n             if (fm.isElementCollection() &&\n-                fm.getElementMapping().getEmbeddedMapping() == null) {\n+                !fm.getElementMapping().isEmbedded()) {\n                 List list = fm.getElementMapping().getValueInfo().getColumns();\n                 if (list.size() == 0) {\n                     list = new ArrayList();\n@@ -1208,4 +1262,125 @@ private Column parseOrderColumn(Attributes attrs)\n         }\n         return col;\n     }\n+    \n+    /**\n+     * Process all deferred embeddable overrides for a given class.  \n+     * This should only occur after the embeddable is mapped.\n+     * \n+     * @param embedType  embeddable class \n+     * @param access class level access for embeddable\n+     * @throws SAXException \n+     */\n+    @Override\n+    protected void applyDeferredEmbeddableOverrides(Class<?> cls) \n+        throws SAXException {\n+        ArrayList<DeferredEmbeddableOverrides> defMappings = \n+            _deferredMappings.get(cls);\n+        if (defMappings == null)\n+            return;\n+        \n+        for (DeferredEmbeddableOverrides defMap : defMappings) {\n+            FieldMapping fm = (FieldMapping)defMap._fm;\n+            if (defMap == null)\n+                return;\n+            fm = getAttributeOverrideForEmbeddable(fm, defMap._attrName, true);\n+            // Apply column, table, and unique overrides\n+            if (defMap._defCols != null) {\n+                fm.getValueInfo().setColumns(defMap._defCols);\n+                if (defMap._defTable != null)\n+                    fm.getMappingInfo().setTableName(defMap._defTable);\n+                setUnique(fm, defMap._unique);\n+            }\n+            // Apply Join column and element join columns overrides overrides\n+            if (defMap._defJoinCols != null)\n+                fm.getMappingInfo().setColumns(defMap._defJoinCols);\n+            if (defMap._defElemJoinCols != null)\n+                fm.getElementMapping().getValueInfo().setColumns(\n+                    defMap._defElemJoinCols);\n+        }\n+        // Clean up after applying mappings\n+        defMappings.clear();\n+        _deferredMappings.remove(cls);\n+    }\n+\n+    /*\n+     * Defer overrides for the specified field mapping\n+     */\n+    private void deferEmbeddableOverrides(\n+        Class cls, DeferredEmbeddableOverrides defMap) {\n+        ArrayList<DeferredEmbeddableOverrides> defMappings = \n+            _deferredMappings.get(cls);\n+        if (defMappings == null) {\n+            defMappings = new ArrayList<DeferredEmbeddableOverrides>();\n+            _deferredMappings.put(cls, defMappings);\n+        }\n+        defMappings.add(defMap);\n+    }\n+    \n+    /*\n+     * Clean up any deferred mappings\n+     */\n+    @Override\n+    protected void clearDeferredMetaData() {\n+        super.clearDeferredMetaData();\n+        _deferredMappings.clear();\n+    }\n+    \n+    /*\n+     * Get embeddable overrides for the specified field mapping.  If create\n+     * is true, create a new override if one does not exist.\n+     */\n+    private DeferredEmbeddableOverrides \n+        getDeferredFieldMappingInfo(Class<?> cls, FieldMapping fm, \n+            String attrName, boolean create) {\n+\n+        ArrayList<DeferredEmbeddableOverrides> defMappings = \n+            _deferredMappings.get(cls);\n+        \n+        if (defMappings == null && create) {\n+            defMappings = new ArrayList<DeferredEmbeddableOverrides>();\n+            _deferredMappings.put(cls, defMappings);\n+        }\n+        DeferredEmbeddableOverrides dfm = \n+            findDeferredMapping(cls, fm, attrName);\n+\n+        if (dfm == null & create) {\n+            dfm = new DeferredEmbeddableOverrides(fm, attrName);\n+            deferEmbeddableOverrides(cls, dfm);\n+        }\n+        return dfm;            \n+    }\n+\n+    /*\n+     * Find deferred mappings for the given class, fm, and attr name\n+     */\n+    private DeferredEmbeddableOverrides findDeferredMapping(Class<?> cls, \n+        FieldMapping fm, String attrName) {\n+        ArrayList<DeferredEmbeddableOverrides> defMappings = \n+            _deferredMappings.get(cls);\n+        if (defMappings == null)\n+            return null;\n+        \n+        for (DeferredEmbeddableOverrides dfm : defMappings) {\n+            if (dfm != null && dfm._fm == fm && \n+                attrName.equals(dfm._attrName))\n+                return dfm;\n+        }\n+        return null;\n+    }\n+    \n+    // Inner class for storing override information\n+    class DeferredEmbeddableOverrides {\n+        DeferredEmbeddableOverrides(FieldMapping fm, String attrName) {\n+            _fm = fm;\n+            _attrName = attrName;\n+        }\n+        private FieldMapping _fm;\n+        private List<Column> _defCols;\n+        private List<Column> _defElemJoinCols;\n+        private List<Column> _defJoinCols;\n+        private String _defTable;\n+        private String _attrName;\n+        private EnumSet<UniqueFlag> _unique;\n+    }    \n }"},{"sha":"892302e7a5c87c08960d6f4d3b0ada92c98518c5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/BasicEmbedXML.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/62be4544b36fcc2f9cd343c0dbbeb177bf6a9f29/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/BasicEmbedXML.java","raw_url":"https://github.com/apache/openjpa/raw/62be4544b36fcc2f9cd343c0dbbeb177bf6a9f29/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/BasicEmbedXML.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/BasicEmbedXML.java?ref=62be4544b36fcc2f9cd343c0dbbeb177bf6a9f29","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.embed.attrOverrides;\n+\n+public class BasicEmbedXML {\n+\n+    private Integer intValue;\n+\n+    public BasicEmbedXML() {\n+    }\n+\n+    public BasicEmbedXML(int integerValue) {\n+        this.intValue = new Integer(integerValue);\n+    }\n+\n+    public Integer getIntegerValue() {\n+        return this.intValue;\n+    }\n+\n+    public void setNotIntegerValue(Integer intValue) {\n+        this.intValue = intValue;\n+    }\n+}"},{"sha":"d3e183daa97ca4874aa905b55b544489f93956e9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/BasicEntityXML.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/62be4544b36fcc2f9cd343c0dbbeb177bf6a9f29/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/BasicEntityXML.java","raw_url":"https://github.com/apache/openjpa/raw/62be4544b36fcc2f9cd343c0dbbeb177bf6a9f29/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/BasicEntityXML.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/BasicEntityXML.java?ref=62be4544b36fcc2f9cd343c0dbbeb177bf6a9f29","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.embed.attrOverrides;\n+\n+import java.util.List;\n+\n+public class BasicEntityXML {\n+\n+    private int id;\n+\n+    private List<BasicEmbedXML> listIntAttrOverEmbed;\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setListIntAttrOverEmbed(\n+        List<BasicEmbedXML> listIntAttrOverEmbed) {\n+        this.listIntAttrOverEmbed = listIntAttrOverEmbed;\n+    }\n+\n+    public List<BasicEmbedXML> getListIntAttrOverEmbed() {\n+        return listIntAttrOverEmbed;\n+    }\n+}"},{"sha":"fa9bf9ab911b2a81de0593dcb840255102a5c336","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/TestAttrOverridesXml.java","status":"modified","additions":68,"deletions":6,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/62be4544b36fcc2f9cd343c0dbbeb177bf6a9f29/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/TestAttrOverridesXml.java","raw_url":"https://github.com/apache/openjpa/raw/62be4544b36fcc2f9cd343c0dbbeb177bf6a9f29/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/TestAttrOverridesXml.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/TestAttrOverridesXml.java?ref=62be4544b36fcc2f9cd343c0dbbeb177bf6a9f29","patch":"@@ -18,24 +18,26 @@\n  */\n package org.apache.openjpa.persistence.embed.attrOverrides;\n \n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Random;\n \n import javax.persistence.EntityManager;\n import javax.persistence.EntityTransaction;\n import javax.persistence.Query;\n \n import junit.framework.Assert;\n \n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n import org.apache.openjpa.persistence.test.AllowFailure;\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n \n-@AllowFailure(message=\n-\t\"Multi-level embedding\" + \n-\t\"JPA 2.0 Access Style \" + \n-    \"XML Metadata \"         + \n-    \"Attribute Override \"   +  \n-    \" is not yet supported\")\n public class TestAttrOverridesXml extends SQLListenerTestCase {\n    \n     public int numPersons = 4;\n@@ -51,6 +53,12 @@ protected String getPersistenceUnitName() {\n         return \"embed-pu\";\n     }\n     \n+    @AllowFailure(message=\n+        \"Multi-level embedding\" + \n+        \"JPA 2.0 Access Style \" + \n+        \"XML Metadata \"         + \n+        \"Attribute Override \"   +  \n+        \" is not yet supported\")\n     public void testAttrOverride1() {\n         sql.clear();\n     \tcreateObj1();\n@@ -59,6 +67,31 @@ public void testAttrOverride1() {\n         assertAttrOverrides(\"CustomerXml1\");\n     }\n     \n+    /**\n+     * This test verifies that an embeddable column attribute override defined \n+     * in XML overrides the base column definition.\n+     */\n+    public void testBasicEmbedAttrOverride() {       \n+        OpenJPAEntityManagerSPI em = emf.createEntityManager();\n+        \n+        BasicEntityXML be = new BasicEntityXML();\n+        be.setId(new Random().nextInt());\n+        \n+        BasicEmbedXML bem = new BasicEmbedXML();\n+        bem.setNotIntegerValue(new Random().nextInt());\n+        ArrayList<BasicEmbedXML> al = new ArrayList<BasicEmbedXML>();\n+        al.add(bem);\n+        be.setListIntAttrOverEmbed(al);\n+        \n+        em.getTransaction().begin();\n+        em.persist(be);\n+        em.getTransaction().commit();\n+        \n+        assertTrue(verifyColumnOverride(em, \"listIntAttrOverEmbedColTable\", \n+            \"intValueAttributeOverride\"));\n+        em.close();\n+    }\n+    \n     public void createObj1() {\n         EntityManager em = emf.createEntityManager();\n         EntityTransaction tran = em.getTransaction();\n@@ -120,4 +153,33 @@ public void assertAttrOverrides(String tableName) {\n         if (!found)\n             fail();\n     }\n+\n+    private boolean verifyColumnOverride( \n+        OpenJPAEntityManagerSPI em, String tableName,\n+        String columnName) {\n+\n+        JDBCConfiguration conf = (JDBCConfiguration) \n+            em.getEntityManagerFactory().getConfiguration();\n+        DBDictionary dict = conf.getDBDictionaryInstance();\n+\n+        Connection conn = (Connection)em.getConnection();\n+        try {\n+            DatabaseMetaData dbmd = conn.getMetaData();\n+            // (meta, catalog, schemaName, tableName, conn)\n+            Column[] cols = dict.getColumns(dbmd, null, null, \n+                    tableName, columnName, conn);\n+            if (cols != null && cols.length == 1) {\n+                Column col = cols[0];\n+                String colName = col.getName();\n+                if (col.getTableName().equalsIgnoreCase(tableName) &&\n+                    colName.equalsIgnoreCase(columnName))\n+                    return true;\n+            }\n+        } catch (Throwable e) {\n+            fail(\"Unable to get column information.\");\n+        }\n+        return false;\n+    }\n+\n+\n }"},{"sha":"25eb072ab54b007436e24d6dfda7529c3bd1d685","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/embed/embed-orm.xml","status":"modified","additions":24,"deletions":1,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/62be4544b36fcc2f9cd343c0dbbeb177bf6a9f29/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/embed/embed-orm.xml","raw_url":"https://github.com/apache/openjpa/raw/62be4544b36fcc2f9cd343c0dbbeb177bf6a9f29/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/embed/embed-orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/embed/embed-orm.xml?ref=62be4544b36fcc2f9cd343c0dbbeb177bf6a9f29","patch":"@@ -184,6 +184,22 @@ version=\"2.0\">\n         </attributes>\n     </entity>\n \n+    <entity name=\"BasicEntityXML\"\n+        class=\"org.apache.openjpa.persistence.embed.attrOverrides.BasicEntityXML\">\n+        <attributes>\n+            <id name=\"id\" />\n+            <element-collection name=\"listIntAttrOverEmbed\" fetch=\"EAGER\">\n+                <order-column name=\"valueOrderColumn\" />\n+                <attribute-override name=\"intValue\">\n+                    <column name=\"intValueAttributeOverride\" />\n+                </attribute-override>\n+                <collection-table name=\"listIntAttrOverEmbedColTable\">\n+                    <join-column name=\"parent_id\" />\n+                </collection-table>\n+            </element-collection>\n+        </attributes>\n+    </entity>\n+\n     <embeddable \n         class=\"org.apache.openjpa.persistence.embed.attrOverrides.AddressXml\" \n         access=\"FIELD\">\n@@ -235,4 +251,11 @@ version=\"2.0\">\n \t\t</attributes>\n \t</embeddable>\n \n-</entity-mappings>\n+    <embeddable class=\"org.apache.openjpa.persistence.embed.attrOverrides.BasicEmbedXML\">\n+        <attributes>\n+            <basic name=\"intValue\">\n+                <column name=\"shouldNotExist\" />\n+            </basic>\n+        </attributes>\n+    </embeddable>\n+</entity-mappings>\n\\ No newline at end of file"},{"sha":"4fef99cf916dcc1dc346bf25382de2019f726686","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":48,"deletions":15,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/62be4544b36fcc2f9cd343c0dbbeb177bf6a9f29/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/62be4544b36fcc2f9cd343c0dbbeb177bf6a9f29/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=62be4544b36fcc2f9cd343c0dbbeb177bf6a9f29","patch":"@@ -1553,7 +1553,9 @@ private void endOrderBy()\n         FieldMetaData fmd = (FieldMetaData) currentElement();\n         String dec = currentText();\n         if (fmd.isElementCollection() &&\n-            fmd.getElement().getEmbeddedMetaData() != null) {\n+            fmd.getElement().getEmbeddedMetaData() != null ||\n+            isDeferredEmbeddable(fmd.getElement().getDeclaredType(), \n+                fmd.getElement())) {\n             if (dec.length() == 0 || dec.equals(\"ASC\") ||\n                 dec.equals(\"DESC\"))\n                 throw new MetaDataException(_loc.get(\n@@ -1895,34 +1897,58 @@ protected boolean startOrderColumn(Attributes attrs)\n \t}\n     \n     /**\n-     * Process all deferred embeddables for a given class.  This should only\n-     * happen after the access type of the embeddable is known.\n+     * Process all deferred embeddables and embeddable mapping overrides\n+     * for a given class.  This should only happen after the access type \n+     * of the embeddable is known.\n      * \n-     * @param embedType  embeddable class \n+     * @param embedType embeddable class \n      * @param access class level access for embeddable\n+     * @throws SAXException \n      */\n     protected void addDeferredEmbeddableMetaData(Class<?> embedType, \n-        int access) {\n+        int access) throws SAXException {\n         ArrayList<MetaDataContext> fmds = _embeddables.get(embedType);\n         if (fmds != null && fmds.size() > 0) {\n-            for (int i = fmds.size() -1 ; i >= 0; i--) {\n-                MetaDataContext md = fmds.get(i);\n+            for (MetaDataContext md : fmds) {\n                 if (md instanceof FieldMetaData) {\n-                    ((FieldMetaData)md).addEmbeddedMetaData(access);            \n+                    FieldMetaData fmd = (FieldMetaData)md;\n+                    fmd.addEmbeddedMetaData(access);\n                 }\n                 else if (md instanceof ValueMetaData) {\n-                    ((ValueMetaData)md).addEmbeddedMetaData(access);\n+                    ValueMetaData vmd = (ValueMetaData)md;\n+                    vmd.addEmbeddedMetaData(access);\n                 }\n-                fmds.remove(i);\n-            }\n-            // If all mds in the list were processed, remove the item\n-            // from the map.\n-            if (fmds.size() == 0) {\n-                _embeddables.remove(embedType);\n             }\n+            applyDeferredEmbeddableOverrides(embedType);\n+            // Clean up deferrals after they have been processed\n+            fmds.clear();\n+            _embeddables.remove(embedType);\n+        }\n+    }\n+\n+    /*\n+     * Clear any deferred metadata\n+     */\n+    @Override\n+    protected void clearDeferredMetaData() {\n+        _embeddables.clear();\n+    }\n+\n+    /*\n+     * Determines whether the embeddable type is deferred.\n+     */\n+    protected boolean isDeferredEmbeddable(Class<?> embedType, \n+        MetaDataContext fmd) {\n+        ArrayList<MetaDataContext> fmds = _embeddables.get(embedType);\n+        if (fmds != null) {\n+            return fmds.contains(fmd);\n         }\n+        return false;\n     }\n     \n+    /*\n+     * Add the fmd to the defer list for for the given embeddable type\n+     */\n     protected void deferEmbeddable(Class<?> embedType, MetaDataContext fmd) {\n         ArrayList<MetaDataContext> fmds = _embeddables.get(embedType);\n         if (fmds == null) {\n@@ -1931,4 +1957,11 @@ protected void deferEmbeddable(Class<?> embedType, MetaDataContext fmd) {\n         }\n         fmds.add(fmd);\n     }\n+    \n+    /*\n+     * Apply any deferred overrides.\n+     */\n+    protected void applyDeferredEmbeddableOverrides(Class<?> cls)\n+        throws SAXException {\n+    }\n }"}]}

