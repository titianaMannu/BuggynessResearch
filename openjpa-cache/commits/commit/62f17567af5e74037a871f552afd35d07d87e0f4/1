{"sha":"62f17567af5e74037a871f552afd35d07d87e0f4","node_id":"MDY6Q29tbWl0MjA2MzY0OjYyZjE3NTY3YWY1ZTc0MDM3YTg3MWY1NTJhZmQzNWQwN2Q4N2UwZjQ=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-09T19:32:15Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-09T19:32:15Z"},"message":"merge in r932206 from trunk by Pinaki\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@932559 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e66a232db780813ee2f2a5ebbd75043f5dd83628","url":"https://api.github.com/repos/apache/openjpa/git/trees/e66a232db780813ee2f2a5ebbd75043f5dd83628"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/62f17567af5e74037a871f552afd35d07d87e0f4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/62f17567af5e74037a871f552afd35d07d87e0f4","html_url":"https://github.com/apache/openjpa/commit/62f17567af5e74037a871f552afd35d07d87e0f4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/62f17567af5e74037a871f552afd35d07d87e0f4/comments","author":null,"committer":null,"parents":[{"sha":"b31c1a53c8ff017d171266d88eac5f6365fe57f7","url":"https://api.github.com/repos/apache/openjpa/commits/b31c1a53c8ff017d171266d88eac5f6365fe57f7","html_url":"https://github.com/apache/openjpa/commit/b31c1a53c8ff017d171266d88eac5f6365fe57f7"}],"stats":{"total":87,"additions":44,"deletions":43},"files":[{"sha":"6eeac5d0e32f936318e1c67b2ea321827e027fdc","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/Types.java","status":"modified","additions":44,"deletions":43,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/62f17567af5e74037a871f552afd35d07d87e0f4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/Types.java","raw_url":"https://github.com/apache/openjpa/raw/62f17567af5e74037a871f552afd35d07d87e0f4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/Types.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/Types.java?ref=62f17567af5e74037a871f552afd35d07d87e0f4","patch":"@@ -30,7 +30,11 @@\n \n /**\n  * Persistent Type according to JPA 2.0.\n- * \n+ * <br>\n+ * JPA 2.0 defines a type system for persistent objects to decorate a core Java type system\n+ * with persistence-relevant properties such as persistent identity, independently persistence\n+ * capable etc. \n+ * <br>\n  * Implemented as a thin adapter to OpenJPA metadata system. Mostly immutable.\n  * \n  * @author Pinaki Poddar\n@@ -62,6 +66,14 @@ public String toString() {\n         }\n     }\n \n+    /**\n+     * Basic non-relational types of a persistent attribute such as <code>long</code> or \n+     * <code>java.util.Date</code>.\n+     * \n+     * @author Pinaki Poddar\n+     *\n+     * @param <X> represented Java type.\n+     */\n     public static class Basic<X> extends BaseType<X> implements Type<X> {\n         public Basic(Class<X> cls) {\n             super(cls);\n@@ -73,45 +85,12 @@ public PersistenceType getPersistenceType() {\n     }\n \n     /**\n-     *  Instances of the type ManagedType represent entity, mapped \n-     *  superclass, and embeddable types.\n+     * Represents an abstract persistent type that has a persistent identity.\n      *\n-     *  @param <X> The represented type.\n+     * @author Pinaki Poddar\n+     * \n+     * @param <X>\n      */\n-//    public static abstract class Managed<X> extends AbstractManagedType<X> implements\n-//        ManagedType<X> {\n-        /**\n-         * Construct a managed type. The supplied metadata must be resolved i.e.\n-         * all its fields populated. Because this receiver will populate its\n-         * attributes corresponding to the available fields of the metadata.\n-         * \n-         */\n-//        public Managed(ClassMetaData meta, MetamodelImpl featureSelection) {\n-//            super(meta, featureSelection);\n-//        }\n-        \n-         /**\n-         *  Return the bindable type of the represented object.\n-         *  @return bindable type\n-         */ \n-//        public BindableType getBindableType() {\n-//            return BindableType.ENTITY_TYPE;\n-//        }\n-        \n-        /**\n-         * Return the Java type of the represented object.\n-         * If the bindable type of the object is PLURAL_ATTRIBUTE,\n-         * the Java element type is returned. If the bindable type is\n-         * SINGULAR_ATTRIBUTE or ENTITY_TYPE, the Java type of the\n-         * represented entity or attribute is returned.\n-         * @return Java type\n-         */\n-//        public Class<X> getBindableJavaType() {\n-//            throw new AbstractMethodError();\n-//        }\n-//\n-//    }\n-\n     public static abstract class Identifiable<X> extends AbstractManagedType<X> \n         implements IdentifiableType<X> {\n \n@@ -147,19 +126,20 @@ public boolean hasIdAttribute() {\n         }\n         \n         /**\n-         *  Whether or not the identifiable type has an id attribute.\n-         *  Returns true for a simple id or embedded id; returns false\n-         *  for an idclass.\n+         *  Whether or not the identifiable type uses an attribute to represents its persistent identity.\n+         *  Returns true for a simple or embedded identifier.\n+         *  Returns false for an classes that use separate identifier class for its persistent identity.\n+         *  \n          *  @return boolean indicating whether or not the identifiable\n-         *          type has a single id attribute\n+         *          type represents its persistent identity via a single identifier attribute.\n          */\n         public boolean hasSingleIdAttribute() {\n             return meta.getPrimaryKeyFields().length == 1;\n         }\n \n         /**\n          *  Return the type that represents the type of the id.\n-         *  @return type of id\n+         *  @return type of identifier\n          */\n         public Type<?> getIdType() {\n             Class<?> idType = hasSingleIdAttribute() \n@@ -168,6 +148,13 @@ public boolean hasSingleIdAttribute() {\n         }\n     }\n \n+    /**\n+     * An embedded, not independently identifiable type.\n+     * \n+     * @author Pinaki Poddar\n+     *\n+     * @param <X> the represented Java type. \n+     */\n     public static class Embeddable<X> extends AbstractManagedType<X> \n         implements EmbeddableType<X> {\n         public Embeddable(ClassMetaData meta, MetamodelImpl featureSelection) {\n@@ -179,6 +166,13 @@ public PersistenceType getPersistenceType() {\n         }\n     }\n \n+    /**\n+     * A abstract, independently identifiable persistent type.\n+     *  \n+     * @author Pinaki Poddar\n+     *\n+     * @param <X> the represented Java type. \n+     */\n     public static class MappedSuper<X> extends Identifiable<X> implements\n         MappedSuperclassType<X> {\n \n@@ -192,6 +186,13 @@ public PersistenceType getPersistenceType() {\n \n     }\n     \n+    /**\n+     * An entity type that is independently identifiable.\n+     * \n+     * @author Pinaki Poddar\n+     *\n+     * @param <X> the represented Java type. \n+     */\n     public static class Entity<X> extends Identifiable<X> \n         implements EntityType<X> {\n "}]}

