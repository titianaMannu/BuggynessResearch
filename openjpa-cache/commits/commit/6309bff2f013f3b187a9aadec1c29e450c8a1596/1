{"sha":"6309bff2f013f3b187a9aadec1c29e450c8a1596","node_id":"MDY6Q29tbWl0MjA2MzY0OjYzMDliZmYyZjAxM2YzYjE4N2E5YWFkZWMxYzI5ZTQ1MGM4YTE1OTY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-03-11T23:09:21Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-03-11T23:09:21Z"},"message":"OPENJPA-1787: setting eol-style (nit)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1080789 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fa2ef85f024e9f12e854e29cbc8464e1e4d9a259","url":"https://api.github.com/repos/apache/openjpa/git/trees/fa2ef85f024e9f12e854e29cbc8464e1e4d9a259"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6309bff2f013f3b187a9aadec1c29e450c8a1596","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6309bff2f013f3b187a9aadec1c29e450c8a1596","html_url":"https://github.com/apache/openjpa/commit/6309bff2f013f3b187a9aadec1c29e450c8a1596","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6309bff2f013f3b187a9aadec1c29e450c8a1596/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"6fdcebd67367fb1dc9d7d50362bfbce35a0b54ac","url":"https://api.github.com/repos/apache/openjpa/commits/6fdcebd67367fb1dc9d7d50362bfbce35a0b54ac","html_url":"https://github.com/apache/openjpa/commit/6fdcebd67367fb1dc9d7d50362bfbce35a0b54ac"}],"stats":{"total":452,"additions":226,"deletions":226},"files":[{"sha":"07f543fa8a9cff735615aaa16eae66324fb599b1","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestMerge.java","status":"modified","additions":226,"deletions":226,"changes":452,"blob_url":"https://github.com/apache/openjpa/blob/6309bff2f013f3b187a9aadec1c29e450c8a1596/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestMerge.java","raw_url":"https://github.com/apache/openjpa/raw/6309bff2f013f3b187a9aadec1c29e450c8a1596/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestMerge.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestMerge.java?ref=6309bff2f013f3b187a9aadec1c29e450c8a1596","patch":"@@ -1,226 +1,226 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.integration.validation;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.validation.ConstraintViolationException;\r\n-\r\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n-import org.apache.openjpa.lib.log.Log;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-import org.apache.openjpa.persistence.test.AbstractPersistenceTestCase;\r\n-\r\n-/**\r\n- * Tests the Bean Validation support when using the em.merge() \r\n- * operation.\r\n- *      \r\n- * @version $Rev$ $Date$\r\n- */\r\n-public class TestMerge extends AbstractPersistenceTestCase {\r\n-\r\n-    private static OpenJPAEntityManagerFactorySPI emf = null;\r\n-    \r\n-    @Override\r\n-    public void setUp() throws Exception {\r\n-        super.setUp();\r\n-        emf = (OpenJPAEntityManagerFactorySPI) \r\n-        OpenJPAPersistence.createEntityManagerFactory(\r\n-                \"ConstraintPU\",\r\n-                \"org/apache/openjpa/integration/validation/persistence.xml\");\r\n-    }\r\n-    \r\n-    @Override\r\n-    public void tearDown() throws Exception {\r\n-        closeEMF(emf);\r\n-        emf = null;\r\n-        super.tearDown();\r\n-    }\r\n-\r\n-    /**\r\n-     * Verifies constraint validation occurs on a \"new\" merged entity only after \r\n-     * the state of the persistent entity is properly set. \r\n-     */\r\n-    public void testMergeNew() {\r\n-        getLog().trace(\"testMergeNew() started\");\r\n-        \r\n-        // Part 1 - Create and persist a valid entity\r\n-        // create EM from default EMF\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        assertNotNull(em);\r\n-        try {\r\n-            // verify Validation Mode\r\n-            @SuppressWarnings(\"deprecation\")\r\n-            OpenJPAConfiguration conf = em.getConfiguration();\r\n-            assertNotNull(conf);\r\n-            assertTrue(\"ValidationMode\",\r\n-                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\r\n-\r\n-            Person p = createPerson(em);\r\n-            em.getTransaction().begin();\r\n-            p = em.merge(p);\r\n-            em.getTransaction().commit();\r\n-            getLog().trace(\"testMergeNew() Part 1 of 2 passed\");\r\n-        } catch (Exception e) {\r\n-            // unexpected\r\n-            getLog().trace(\"testMergeNew() Part 1 of 2 failed\");\r\n-            fail(\"Caught unexpected exception = \" + e);\r\n-        } finally {\r\n-            closeEM(em);\r\n-        }\r\n-        \r\n-        // Part 2 - Verify that merge throws a CVE when a constraint is not met.\r\n-        em = emf.createEntityManager();\r\n-        assertNotNull(em);        \r\n-        try {\r\n-            Person p = createPerson(em);\r\n-            em.getTransaction().begin();\r\n-            p.setLastName(null);  // Force a CVE\r\n-            p = em.merge(p);\r\n-            getLog().trace(\"testMergeNew() Part 2 of 2 failed\");\r\n-            fail(\"Expected a ConstraintViolationException\");\r\n-        } catch (ConstraintViolationException e) {\r\n-            // expected\r\n-            getLog().trace(\"Caught expected ConstraintViolationException = \" + e);\r\n-            getLog().trace(\"testMergeNew() Part 2 of 2 passed\");\r\n-        } finally {\r\n-            closeEM(em);\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Verifies constraint validation occurs on a \"new\" merged entity only after \r\n-     * the state of the persistent entity is properly set. \r\n-     */\r\n-    public void testMergeExisting() {\r\n-        getLog().trace(\"testMergeExisting() started\");\r\n-        \r\n-        // Part 1 - Create and persist a valid entity\r\n-        // create EM from default EMF\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        assertNotNull(em);\r\n-        try {\r\n-            // verify Validation Mode\r\n-            @SuppressWarnings(\"deprecation\")\r\n-            OpenJPAConfiguration conf = em.getConfiguration();\r\n-            assertNotNull(conf);\r\n-            assertTrue(\"ValidationMode\",\r\n-                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\r\n-\r\n-            // Create and persist a new entity\r\n-            Person p = createPerson(em);\r\n-            em.getTransaction().begin();\r\n-            em.persist(p);\r\n-            em.getTransaction().commit();\r\n-            em.clear();\r\n-\r\n-            // find the entity\r\n-            p = em.find(Person.class, p.getId());\r\n-            \r\n-            // modify the entity and merge\r\n-            em.getTransaction().begin();\r\n-            p.setFirstName(\"NewFirst\");\r\n-            // merge should not throw a CVE\r\n-            p = em.merge(p);\r\n-            em.getTransaction().commit();\r\n-            em.clear();\r\n-            p = em.find(Person.class, p.getId());\r\n-            assertEquals(\"NewFirst\", p.getFirstName());\r\n-            getLog().trace(\"testMergeExisting() Part 1 of 2 passed\");\r\n-        } catch (Exception e) {\r\n-            // unexpected\r\n-            getLog().trace(\"testMergeExisting() Part 1 of 2 failed\");\r\n-            fail(\"Caught unexpected exception = \" + e);\r\n-        } finally {\r\n-            closeEM(em);\r\n-        }\r\n-        \r\n-        // Part 2 - Verify that merge throws a CVE when a constraint is not met.\r\n-        em = emf.createEntityManager();\r\n-        assertNotNull(em);        \r\n-        try {\r\n-\r\n-            // Create and persist a new entity\r\n-            Person p = createPerson(em);\r\n-            em.getTransaction().begin();\r\n-            em.persist(p);\r\n-            em.getTransaction().commit();\r\n-            em.clear();\r\n-\r\n-            // find the entity\r\n-            p = em.find(Person.class, p.getId());\r\n-            // detach the entity\r\n-            em.detach(p);\r\n-            assertFalse(em.contains(p));\r\n-\r\n-            // Set name to an invalid value (contains a space) to force a CVE upon merge+update\r\n-            p.setFirstName(\"First Name\");\r\n-            em.getTransaction().begin();\r\n-            try {\r\n-                p = em.merge(p);\r\n-            } catch (Throwable t) {\r\n-                fail(\"Did not expect a CVE upon merge.\");\r\n-            }\r\n-            // Commit should throw a CVE\r\n-            em.getTransaction().commit();\r\n-            getLog().trace(\"testMergeExisting() Part 2 of 2 failed\");\r\n-            fail(\"Expected a ConstraintViolationException\");\r\n-        } catch (ConstraintViolationException e) {\r\n-            // expected\r\n-            getLog().trace(\"Caught expected ConstraintViolationException = \" + e);\r\n-            getLog().trace(\"testMergeExisting() Part 2 of 2 passed\");\r\n-        } finally {\r\n-            closeEM(em);\r\n-        }\r\n-    }\r\n-    \r\n-    \r\n-    private Person createPerson(EntityManager em) {\r\n-        Person p = new Person();\r\n-        p.setFirstName(\"First\");\r\n-        p.setLastName(\"Last\");\r\n-        p.setHomeAddress(createAddress(em));\r\n-        return p;\r\n-    }\r\n-\r\n-    private IAddress createAddress(EntityManager em) {\r\n-        Address addr = new Address();\r\n-        addr.setCity(\"City\");\r\n-        addr.setPhoneNumber(\"555-555-5555\");\r\n-        addr.setPostalCode(\"55555\");\r\n-        addr.setState(\"ST\");\r\n-        addr.setStreetAddress(\"Some Street\");\r\n-        if (!em.getTransaction().isActive()) {\r\n-            em.getTransaction().begin();\r\n-        }\r\n-        em.persist(addr);\r\n-        em.getTransaction().commit();\r\n-        return addr;\r\n-    }\r\n-\r\n-    /**\r\n-     * Internal convenience method for getting the OpenJPA logger\r\n-     * \r\n-     * @return\r\n-     */\r\n-    private Log getLog() {\r\n-        return emf.getConfiguration().getLog(\"Tests\");\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import javax.persistence.EntityManager;\n+import javax.validation.ConstraintViolationException;\n+\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.test.AbstractPersistenceTestCase;\n+\n+/**\n+ * Tests the Bean Validation support when using the em.merge() \n+ * operation.\n+ *      \n+ * @version $Rev$ $Date$\n+ */\n+public class TestMerge extends AbstractPersistenceTestCase {\n+\n+    private static OpenJPAEntityManagerFactorySPI emf = null;\n+    \n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        emf = (OpenJPAEntityManagerFactorySPI) \n+        OpenJPAPersistence.createEntityManagerFactory(\n+                \"ConstraintPU\",\n+                \"org/apache/openjpa/integration/validation/persistence.xml\");\n+    }\n+    \n+    @Override\n+    public void tearDown() throws Exception {\n+        closeEMF(emf);\n+        emf = null;\n+        super.tearDown();\n+    }\n+\n+    /**\n+     * Verifies constraint validation occurs on a \"new\" merged entity only after \n+     * the state of the persistent entity is properly set. \n+     */\n+    public void testMergeNew() {\n+        getLog().trace(\"testMergeNew() started\");\n+        \n+        // Part 1 - Create and persist a valid entity\n+        // create EM from default EMF\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            @SuppressWarnings(\"deprecation\")\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\n+\n+            Person p = createPerson(em);\n+            em.getTransaction().begin();\n+            p = em.merge(p);\n+            em.getTransaction().commit();\n+            getLog().trace(\"testMergeNew() Part 1 of 2 passed\");\n+        } catch (Exception e) {\n+            // unexpected\n+            getLog().trace(\"testMergeNew() Part 1 of 2 failed\");\n+            fail(\"Caught unexpected exception = \" + e);\n+        } finally {\n+            closeEM(em);\n+        }\n+        \n+        // Part 2 - Verify that merge throws a CVE when a constraint is not met.\n+        em = emf.createEntityManager();\n+        assertNotNull(em);        \n+        try {\n+            Person p = createPerson(em);\n+            em.getTransaction().begin();\n+            p.setLastName(null);  // Force a CVE\n+            p = em.merge(p);\n+            getLog().trace(\"testMergeNew() Part 2 of 2 failed\");\n+            fail(\"Expected a ConstraintViolationException\");\n+        } catch (ConstraintViolationException e) {\n+            // expected\n+            getLog().trace(\"Caught expected ConstraintViolationException = \" + e);\n+            getLog().trace(\"testMergeNew() Part 2 of 2 passed\");\n+        } finally {\n+            closeEM(em);\n+        }\n+    }\n+\n+    /**\n+     * Verifies constraint validation occurs on a \"new\" merged entity only after \n+     * the state of the persistent entity is properly set. \n+     */\n+    public void testMergeExisting() {\n+        getLog().trace(\"testMergeExisting() started\");\n+        \n+        // Part 1 - Create and persist a valid entity\n+        // create EM from default EMF\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        assertNotNull(em);\n+        try {\n+            // verify Validation Mode\n+            @SuppressWarnings(\"deprecation\")\n+            OpenJPAConfiguration conf = em.getConfiguration();\n+            assertNotNull(conf);\n+            assertTrue(\"ValidationMode\",\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\n+\n+            // Create and persist a new entity\n+            Person p = createPerson(em);\n+            em.getTransaction().begin();\n+            em.persist(p);\n+            em.getTransaction().commit();\n+            em.clear();\n+\n+            // find the entity\n+            p = em.find(Person.class, p.getId());\n+            \n+            // modify the entity and merge\n+            em.getTransaction().begin();\n+            p.setFirstName(\"NewFirst\");\n+            // merge should not throw a CVE\n+            p = em.merge(p);\n+            em.getTransaction().commit();\n+            em.clear();\n+            p = em.find(Person.class, p.getId());\n+            assertEquals(\"NewFirst\", p.getFirstName());\n+            getLog().trace(\"testMergeExisting() Part 1 of 2 passed\");\n+        } catch (Exception e) {\n+            // unexpected\n+            getLog().trace(\"testMergeExisting() Part 1 of 2 failed\");\n+            fail(\"Caught unexpected exception = \" + e);\n+        } finally {\n+            closeEM(em);\n+        }\n+        \n+        // Part 2 - Verify that merge throws a CVE when a constraint is not met.\n+        em = emf.createEntityManager();\n+        assertNotNull(em);        \n+        try {\n+\n+            // Create and persist a new entity\n+            Person p = createPerson(em);\n+            em.getTransaction().begin();\n+            em.persist(p);\n+            em.getTransaction().commit();\n+            em.clear();\n+\n+            // find the entity\n+            p = em.find(Person.class, p.getId());\n+            // detach the entity\n+            em.detach(p);\n+            assertFalse(em.contains(p));\n+\n+            // Set name to an invalid value (contains a space) to force a CVE upon merge+update\n+            p.setFirstName(\"First Name\");\n+            em.getTransaction().begin();\n+            try {\n+                p = em.merge(p);\n+            } catch (Throwable t) {\n+                fail(\"Did not expect a CVE upon merge.\");\n+            }\n+            // Commit should throw a CVE\n+            em.getTransaction().commit();\n+            getLog().trace(\"testMergeExisting() Part 2 of 2 failed\");\n+            fail(\"Expected a ConstraintViolationException\");\n+        } catch (ConstraintViolationException e) {\n+            // expected\n+            getLog().trace(\"Caught expected ConstraintViolationException = \" + e);\n+            getLog().trace(\"testMergeExisting() Part 2 of 2 passed\");\n+        } finally {\n+            closeEM(em);\n+        }\n+    }\n+    \n+    \n+    private Person createPerson(EntityManager em) {\n+        Person p = new Person();\n+        p.setFirstName(\"First\");\n+        p.setLastName(\"Last\");\n+        p.setHomeAddress(createAddress(em));\n+        return p;\n+    }\n+\n+    private IAddress createAddress(EntityManager em) {\n+        Address addr = new Address();\n+        addr.setCity(\"City\");\n+        addr.setPhoneNumber(\"555-555-5555\");\n+        addr.setPostalCode(\"55555\");\n+        addr.setState(\"ST\");\n+        addr.setStreetAddress(\"Some Street\");\n+        if (!em.getTransaction().isActive()) {\n+            em.getTransaction().begin();\n+        }\n+        em.persist(addr);\n+        em.getTransaction().commit();\n+        return addr;\n+    }\n+\n+    /**\n+     * Internal convenience method for getting the OpenJPA logger\n+     * \n+     * @return\n+     */\n+    private Log getLog() {\n+        return emf.getConfiguration().getLog(\"Tests\");\n+    }\n+}"}]}

