{"sha":"634bdc5c921382bbc0f5e5c90569b087f61138ba","node_id":"MDY6Q29tbWl0MjA2MzY0OjYzNGJkYzVjOTIxMzgyYmJjMGY1ZTVjOTA1NjliMDg3ZjYxMTM4YmE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-11-16T00:51:07Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-11-16T00:51:07Z"},"message":"OPENJPA-9\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@595508 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1fb149c059415144129c6669ffe86b1b9f737960","url":"https://api.github.com/repos/apache/openjpa/git/trees/1fb149c059415144129c6669ffe86b1b9f737960"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/634bdc5c921382bbc0f5e5c90569b087f61138ba","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/634bdc5c921382bbc0f5e5c90569b087f61138ba","html_url":"https://github.com/apache/openjpa/commit/634bdc5c921382bbc0f5e5c90569b087f61138ba","comments_url":"https://api.github.com/repos/apache/openjpa/commits/634bdc5c921382bbc0f5e5c90569b087f61138ba/comments","author":null,"committer":null,"parents":[{"sha":"4a8d0b798b2b292f9a8a5c234dd446b566cb7274","url":"https://api.github.com/repos/apache/openjpa/commits/4a8d0b798b2b292f9a8a5c234dd446b566cb7274","html_url":"https://github.com/apache/openjpa/commit/4a8d0b798b2b292f9a8a5c234dd446b566cb7274"}],"stats":{"total":787,"additions":687,"deletions":100},"files":[{"sha":"2182caae13d30694828ccda5f1d11156b9c58fde","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ClassTableJDBCSeq.java","status":"modified","additions":14,"deletions":8,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ClassTableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ClassTableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ClassTableJDBCSeq.java?ref=634bdc5c921382bbc0f5e5c90569b087f61138ba","patch":"@@ -168,14 +168,20 @@ private String getKey(ClassMapping mapping, boolean db) {\n      */\n     public static void main(String[] args) throws Exception {\n         Options opts = new Options();\n-        args = opts.setFromCmdLine(args);\n-        JDBCConfiguration conf = new JDBCConfigurationImpl();\n-        try {\n-            if (!run(conf, args, opts))\n-                System.out.println(_loc.get(\"clstable-seq-usage\"));\n-        } finally {\n-            conf.close();\n-        }\n+        final String[] arguments = opts.setFromCmdLine(args);\n+        boolean ret = Configurations.runAgainstAllAnchors(opts,\n+            new Configurations.Runnable() {\n+            public boolean run(Options opts) throws Exception {\n+                JDBCConfiguration conf = new JDBCConfigurationImpl();\n+                try {\n+                    return ClassTableJDBCSeq.run(conf, arguments, opts);\n+                } finally {\n+                    conf.close();\n+                }\n+            }\n+        });\n+        if (!ret)\n+            System.out.println(_loc.get(\"clstable-seq-usage\"));\n     }\n \n     /**"},{"sha":"776c6e9ddd725f3157fb5e1418beb1c3783786af","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","status":"modified","additions":14,"deletions":8,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/NativeJDBCSeq.java?ref=634bdc5c921382bbc0f5e5c90569b087f61138ba","patch":"@@ -315,14 +315,20 @@ private long getSequence(Connection conn)\n     public static void main(String[] args)\n         throws Exception {\n         Options opts = new Options();\n-        args = opts.setFromCmdLine(args);\n-        JDBCConfiguration conf = new JDBCConfigurationImpl();\n-        try {\n-            if (!run(conf, args, opts))\n-                System.out.println(_loc.get(\"native-seq-usage\"));\n-        } finally {\n-            conf.close();\n-        }\n+        final String[] arguments = opts.setFromCmdLine(args);\n+        boolean ret = Configurations.runAgainstAllAnchors(opts,\n+            new Configurations.Runnable() {\n+            public boolean run(Options opts) throws Exception {\n+                JDBCConfiguration conf = new JDBCConfigurationImpl();\n+                try {\n+                    return NativeJDBCSeq.run(conf, arguments, opts);\n+                } finally {\n+                    conf.close();\n+                }\n+            }\n+        });\n+        if (!ret)\n+            System.out.println(_loc.get(\"native-seq-usage\"));\n     }\n \n     /**"},{"sha":"238505a8f018c159d8acaf9ae120866ed5ea346d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","status":"modified","additions":14,"deletions":8,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java?ref=634bdc5c921382bbc0f5e5c90569b087f61138ba","patch":"@@ -614,14 +614,20 @@ public void dropTable()\n     public static void main(String[] args)\n         throws Exception {\n         Options opts = new Options();\n-        args = opts.setFromCmdLine(args);\n-        JDBCConfiguration conf = new JDBCConfigurationImpl();\n-        try {\n-            if (!run(conf, args, opts))\n-                System.out.println(_loc.get(\"seq-usage\"));\n-        } finally {\n-            conf.close();\n-        }\n+        final String[] arguments = opts.setFromCmdLine(args);\n+        boolean ret = Configurations.runAgainstAllAnchors(opts,\n+            new Configurations.Runnable() {\n+            public boolean run(Options opts) throws Exception {\n+                JDBCConfiguration conf = new JDBCConfigurationImpl();\n+                try {\n+                    return TableJDBCSeq.run(conf, arguments, opts);\n+                } finally {\n+                    conf.close();\n+                }\n+            }\n+        });\n+        if (!ret)\n+            System.out.println(_loc.get(\"seq-usage\"));\n     }\n \n     /**"},{"sha":"38d76d92ab0fd55d5b91de76a8f4debac5210ec5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ValueTableJDBCSeq.java","status":"modified","additions":14,"deletions":8,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ValueTableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ValueTableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ValueTableJDBCSeq.java?ref=634bdc5c921382bbc0f5e5c90569b087f61138ba","patch":"@@ -120,14 +120,20 @@ protected Object getPrimaryKey(ClassMapping mapping) {\n     public static void main(String[] args)\n         throws Exception {\n         Options opts = new Options();\n-        args = opts.setFromCmdLine(args);\n-        JDBCConfiguration conf = new JDBCConfigurationImpl();\n-        try {\n-            if (!run(conf, args, opts))\n-                System.out.println(_loc.get(\"clstable-seq-usage\"));\n-        } finally {\n-            conf.close();\n-        }\n+        final String[] arguments = opts.setFromCmdLine(args);\n+        boolean ret = Configurations.runAgainstAllAnchors(opts,\n+            new Configurations.Runnable() {\n+            public boolean run(Options opts) throws Exception {\n+                JDBCConfiguration conf = new JDBCConfigurationImpl();\n+                try {\n+                    return ValueTableJDBCSeq.run(conf, arguments, opts);\n+                } finally {\n+                    conf.close();\n+                }\n+            }\n+        });\n+        if (!ret)\n+            System.out.println(_loc.get(\"clstable-seq-usage\"));\n     }\n \n     /**"},{"sha":"91533e5488e32cd88bfe0c427f99b01198046daf","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","status":"modified","additions":15,"deletions":9,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java?ref=634bdc5c921382bbc0f5e5c90569b087f61138ba","patch":"@@ -912,17 +912,23 @@ private void drop(Class cls) {\n      * -f mypackage.orm -a export mypackage.jdo</code></li>\n      * </ul>\n      */\n-    public static void main(String[] args)\n+    public static void main(String[] arguments)\n         throws IOException, SQLException {\n         Options opts = new Options();\n-        args = opts.setFromCmdLine(args);\n-        JDBCConfiguration conf = new JDBCConfigurationImpl();\n-        try {\n-            if (!run(conf, args, opts))\n-                System.err.println(_loc.get(\"tool-usage\"));\n-        } finally {\n-            conf.close();\n-        }\n+        final String[] args = opts.setFromCmdLine(arguments);\n+        boolean ret = Configurations.runAgainstAllAnchors(opts,\n+            new Configurations.Runnable() {\n+            public boolean run(Options opts) throws IOException, SQLException {\n+                JDBCConfiguration conf = new JDBCConfigurationImpl();\n+                try {\n+                    return MappingTool.run(conf, args, opts);\n+                } finally {\n+                    conf.close();\n+                }\n+            }\n+        });\n+        if (!ret)\n+            System.err.println(_loc.get(\"tool-usage\"));\n     }\n \n     /**"},{"sha":"f0860efc9ad867c6b3aa07427f89839a99a9156d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","status":"modified","additions":14,"deletions":8,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java?ref=634bdc5c921382bbc0f5e5c90569b087f61138ba","patch":"@@ -1819,14 +1819,20 @@ public Object clone() {\n     public static void main(String[] args)\n         throws IOException, SQLException {\n         Options opts = new Options();\n-        args = opts.setFromCmdLine(args);\n-        JDBCConfiguration conf = new JDBCConfigurationImpl();\n-        try {\n-            if (!run(conf, args, opts))\n-                System.out.println(_loc.get(\"revtool-usage\"));\n-        } finally {\n-            conf.close();\n-        }\n+        final String[] arguments = opts.setFromCmdLine(args);\n+        boolean ret = Configurations.runAgainstAllAnchors(opts,\n+            new Configurations.Runnable() {\n+            public boolean run(Options opts) throws Exception {\n+                JDBCConfiguration conf = new JDBCConfigurationImpl();\n+                try {\n+                    return ReverseMappingTool.run(conf, arguments, opts);\n+                } finally {\n+                    conf.close();\n+                }\n+            }\n+        });\n+        if (!ret)\n+            System.out.println(_loc.get(\"revtool-usage\"));\n     }\n \n     /**"},{"sha":"3ea7dea1deac264736ad1217d6ffe538e7f94563","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","status":"modified","additions":14,"deletions":8,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","raw_url":"https://github.com/apache/openjpa/raw/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java?ref=634bdc5c921382bbc0f5e5c90569b087f61138ba","patch":"@@ -1333,14 +1333,20 @@ private void handleException(SQLException sql)\n     public static void main(String[] args)\n         throws IOException, SQLException {\n         Options opts = new Options();\n-        args = opts.setFromCmdLine(args);\n-        JDBCConfiguration conf = new JDBCConfigurationImpl();\n-        try {\n-            if (!run(conf, args, opts))\n-                System.out.println(_loc.get(\"tool-usage\"));\n-        } finally {\n-            conf.close();\n-        }\n+        final String[] arguments = opts.setFromCmdLine(args);\n+        boolean ret = Configurations.runAgainstAllAnchors(opts,\n+            new Configurations.Runnable() {\n+            public boolean run(Options opts) throws Exception {\n+                JDBCConfiguration conf = new JDBCConfigurationImpl();\n+                try {\n+                    return SchemaTool.run(conf, arguments, opts);\n+                } finally {\n+                    conf.close();\n+                }\n+            }\n+        });\n+        if (!ret)\n+            System.out.println(_loc.get(\"tool-usage\"));\n     }\n \n     /**"},{"sha":"53d33dc60cf3397e0c894626429c64888623f2b4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/TableSchemaFactory.java","status":"modified","additions":14,"deletions":8,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/TableSchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/TableSchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/TableSchemaFactory.java?ref=634bdc5c921382bbc0f5e5c90569b087f61138ba","patch":"@@ -449,14 +449,20 @@ private Connection getConnection()\n     public static void main(String[] args)\n         throws IOException, SQLException {\n         Options opts = new Options();\n-        args = opts.setFromCmdLine(args);\n-        JDBCConfiguration conf = new JDBCConfigurationImpl();\n-        try {\n-            if (!run(conf, args, opts))\n-                System.out.println(_loc.get(\"sch-usage\"));\n-        } finally {\n-            conf.close();\n-        }\n+        final String[] arguments = opts.setFromCmdLine(args);\n+        boolean ret = Configurations.runAgainstAllAnchors(opts,\n+            new Configurations.Runnable() {\n+            public boolean run(Options opts) throws Exception {\n+                JDBCConfiguration conf = new JDBCConfigurationImpl();\n+                try {\n+                    return TableSchemaFactory.run(conf, arguments, opts);\n+                } finally {\n+                    conf.close();\n+                }\n+            }\n+        });\n+        if (!ret)\n+            System.out.println(_loc.get(\"sch-usage\"));\n     }\n \n     /**"},{"sha":"274fde1d2dba7bae8345d27153708f492863db3f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","status":"modified","additions":16,"deletions":9,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","raw_url":"https://github.com/apache/openjpa/raw/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java?ref=634bdc5c921382bbc0f5e5c90569b087f61138ba","patch":"@@ -75,7 +75,7 @@\n     private static final String TOKENIZER_CUSTOM = \"Tokenizer\";\n     private static final String TOKENIZER_STD = \"StringTokenizer\";\n \n-    private static Localizer _loc = Localizer.forPackage\n+    private static final Localizer _loc = Localizer.forPackage\n         (ApplicationIdTool.class);\n \n     private final Log _log;\n@@ -1282,14 +1282,21 @@ private CodeFormat newCodeFormat() {\n     public static void main(String[] args)\n         throws IOException, ClassNotFoundException {\n         Options opts = new Options();\n-        args = opts.setFromCmdLine(args);\n-        OpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\n-        try {\n-            if (!run(conf, args, opts))\n-                System.err.println(_loc.get(\"appid-usage\"));\n-        } finally {\n-            conf.close();\n-        }\n+        final String[] arguments = opts.setFromCmdLine(args);\n+        boolean ret = Configurations.runAgainstAllAnchors(opts,\n+            new Configurations.Runnable() {\n+            public boolean run(Options opts)\n+                throws ClassNotFoundException, IOException {\n+                OpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\n+                try {\n+                    return ApplicationIdTool.run(conf, arguments, opts);\n+                } finally {\n+                    conf.close();\n+                }\n+            }\n+        });\n+        if (!ret)\n+            System.err.println(_loc.get(\"appid-usage\"));\n     }\n \n     /**"},{"sha":"e57b4acaee94d3fc93563261442febaee7626a28","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":28,"deletions":12,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=634bdc5c921382bbc0f5e5c90569b087f61138ba","patch":"@@ -4254,17 +4254,29 @@ private static void transferCodeAttributes(BCMethod from, BCMethod to) {\n      * not be enhanced. Thus, it is safe to invoke the enhancer on classes\n      * that are already enhanced.\n      */\n-    public static void main(String[] args)\n-        throws IOException {\n+    public static void main(String[] args) {\n         Options opts = new Options();\n         args = opts.setFromCmdLine(args);\n-        OpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\n-        try {\n-            if (!run(conf, args, opts))\n-                System.err.println(_loc.get(\"enhance-usage\"));\n-        } finally {\n-            conf.close();\n-        }\n+        if (!run(args, opts))\n+            System.err.println(_loc.get(\"enhance-usage\"));\n+    }\n+\n+    /**\n+     * Run the tool. Returns false if invalid options given. Runs against all\n+     * the persistence units defined in the resource to parse.\n+     */\n+    public static boolean run(final String[] args, Options opts) {\n+        return Configurations.runAgainstAllAnchors(opts,\n+            new Configurations.Runnable() {\n+            public boolean run(Options opts) throws IOException {\n+                OpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\n+                try {\n+                    return PCEnhancer.run(conf, args, opts);\n+                } finally {\n+                    conf.close();\n+                }\n+            }\n+        });\n     }\n \n     /**\n@@ -4287,8 +4299,12 @@ public static boolean run(OpenJPAConfiguration conf, String[] args,\n             (\"enforcePropertyRestrictions\", \"epr\",\n                 flags.enforcePropertyRestrictions);\n \n+        // for unit testing\n+        BytecodeWriter writer = (BytecodeWriter) opts.get(\n+            PCEnhancer.class.getName() + \"#bytecodeWriter\");\n+\n         Configurations.populateConfiguration(conf, opts);\n-        return run(conf, args, flags, null, null, null);\n+        return run(conf, args, flags, null, writer, null);\n     }\n \n     /**\n@@ -4312,7 +4328,7 @@ public static boolean run(OpenJPAConfiguration conf, String[] args,\n \n         Log log = conf.getLog(OpenJPAConfiguration.LOG_TOOL);\n         Collection classes;\n-        if (args.length == 0) {\n+        if (args == null || args.length == 0) {\n             log.info(_loc.get(\"running-all-classes\"));\n             classes = repos.getPersistentTypeNames(true, loader);\n             if (classes == null) {\n@@ -4327,7 +4343,7 @@ public static boolean run(OpenJPAConfiguration conf, String[] args,\n             for (int i = 0; i < args.length; i++)\n                 classes.addAll(Arrays.asList(cap.parseTypes(args[i])));\n         }\n-        \n+\n         Project project = new Project();\n         BCClass bc;\n         PCEnhancer enhancer;"},{"sha":"2b19b7dfc6153ed7195b7e7bbaaa1384bf558861","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataTool.java","status":"modified","additions":14,"deletions":8,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataTool.java","raw_url":"https://github.com/apache/openjpa/raw/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataTool.java?ref=634bdc5c921382bbc0f5e5c90569b087f61138ba","patch":"@@ -250,14 +250,20 @@ public void record() {\n     public static void main(String[] args)\n         throws IOException {\n         Options opts = new Options();\n-        args = opts.setFromCmdLine(args);\n-        OpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\n-        try {\n-            if (!run(conf, args, opts))\n-                System.err.println(_loc.get(\"tool-usage\"));\n-        } finally {\n-            conf.close();\n-        }\n+        final String[] arguments = opts.setFromCmdLine(args);\n+        boolean ret = Configurations.runAgainstAllAnchors(opts,\n+            new Configurations.Runnable() {\n+            public boolean run(Options opts) throws Exception {\n+                OpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\n+                try {\n+                    return MetaDataTool.run(conf, arguments, opts);\n+                } finally {\n+                    conf.close();\n+                }\n+            }\n+        });\n+        if (!ret)\n+            System.err.println(_loc.get(\"tool-usage\"));\n     }\n \n     /**"},{"sha":"4700dbe2ddb82d25da315fcfe959e4b2eefb4771","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/AbstractProductDerivation.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/AbstractProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/AbstractProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/AbstractProductDerivation.java?ref=634bdc5c921382bbc0f5e5c90569b087f61138ba","patch":"@@ -19,6 +19,8 @@\n package org.apache.openjpa.lib.conf;\n \n import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n \n /**\n  * Abstract no-op product derivation for easy extension.\n@@ -58,6 +60,18 @@ public ConfigurationProvider load(File file, String anchor)\n         return null;\n     }\n \n+    public String getDefaultResourceLocation() {\n+        return null;\n+    }\n+\n+    public List getAnchorsInFile(File file) throws Exception {\n+        return null;\n+    }\n+\n+    public List getAnchorsInResource(String resource) throws Exception {\n+        return null;\n+    }\n+\n     public boolean beforeConfigurationConstruct(ConfigurationProvider cp) {\n         return false;\n     }"},{"sha":"e7dd57b700b03be7bc36685df8d9ae201b6d7161","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","status":"modified","additions":71,"deletions":3,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","raw_url":"https://github.com/apache/openjpa/raw/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java?ref=634bdc5c921382bbc0f5e5c90569b087f61138ba","patch":"@@ -21,14 +21,15 @@\n import java.io.File;\n import java.security.AccessController;\n import java.security.PrivilegedActionException;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.Map;\n import java.util.MissingResourceException;\n import java.util.Properties;\n import java.util.TreeSet;\n-\n import javax.naming.Context;\n import javax.naming.InitialContext;\n import javax.naming.NamingException;\n@@ -43,7 +44,6 @@\n import org.apache.openjpa.lib.util.StringDistance;\n import org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap;\n import org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap;\n-\n import serp.util.Strings;\n \n /**\n@@ -57,7 +57,7 @@\n     private static final Localizer _loc = Localizer.forPackage\n         (Configurations.class);\n     \n-    private static ConcurrentReferenceHashMap _loaders = new \n+    private static final ConcurrentReferenceHashMap _loaders = new\n         ConcurrentReferenceHashMap(ConcurrentReferenceHashMap.WEAK, \n                 ConcurrentReferenceHashMap.HARD);\n \n@@ -277,6 +277,35 @@ private static ClassLoader findDerivedLoader(Configuration conf,\n         return loader;\n     }\n \n+    /**\n+     * Return a List<String> of all the fully-qualified anchors specified in the\n+     * properties location listed in <code>opts</code>. If no properties\n+     * location is listed in <code>opts</code>, this returns whatever the\n+     * product derivations can find in their default configurations.\n+     * If the properties location specified in <code>opts</code> already\n+     * contains an anchor spec, this returns that anchor. Note that in this\n+     * fully-qualified-input case, the logic involving product derivations\n+     * and resource parsing is short-circuited, so this method\n+     * should not be used as a means to test that a particular anchor is\n+     * defined in a given location by invoking with a fully-qualified anchor.\n+     *\n+     * This does not mutate <code>opts</code>.\n+     *\n+     * @since 1.1.0\n+     */\n+    public static List getFullyQualifiedAnchorsInPropertiesLocation(\n+        Options opts) {\n+        String props = opts.getProperty(\"properties\", \"p\", null);\n+        if (props != null) {\n+            int anchorPosition = props.indexOf(\"#\");\n+            if (anchorPosition > -1)\n+                return Arrays.asList(new String[] { props });\n+        }\n+\n+        return ProductDerivations.getFullyQualifiedAnchorsInPropertiesLocation(\n+            props);\n+    }\n+\n     /**\n      * Set the given {@link Configuration} instance from the command line\n      * options provided. All property names of the given configuration are\n@@ -630,4 +659,43 @@ public static Object removeProperty(String partialKey, Map props) {\n         return props.remove(ProductDerivations.getConfigurationKey(partialKey,\n             props));\n     }\n+\n+    /**\n+     * Runs <code>runnable</code> against all the anchors in the configuration\n+     * pointed to by <code>opts</code>. Each invocation gets a fresh clone of \n+     * <code>opts</code> with the <code>properties</code> option set\n+     * appropriately.\n+     *\n+     * @since 1.1.0\n+     */\n+    public static boolean runAgainstAllAnchors(Options opts,\n+        Configurations.Runnable runnable) {\n+        List anchors =\n+            Configurations.getFullyQualifiedAnchorsInPropertiesLocation(opts);\n+\n+        // We use 'properties' below; get rid of 'p' to avoid conflicts. This\n+        // relies on knowing what getFullyQualifiedAnchorsInPropertiesLocation\n+        // looks for.\n+        if (opts.containsKey(\"p\"))\n+            opts.remove(\"p\");\n+\n+        boolean ret = true;\n+        for (Iterator iter = anchors.iterator(); iter.hasNext(); ) {\n+            Options clonedOptions = (Options) opts.clone();\n+            clonedOptions.setProperty(\"properties\", iter.next().toString());\n+            try {\n+                ret &= runnable.run(clonedOptions);\n+            } catch (Exception e) {\n+                if (!(e instanceof RuntimeException))\n+                    throw new RuntimeException(e);\n+                else\n+                    throw (RuntimeException) e;\n+            }\n+        }\n+        return ret;\n+    }\n+\n+    public interface Runnable {\n+        public boolean run(Options opts) throws Exception;\n+    }\n }"},{"sha":"92ad60fbabf845e5b1ea556656390712e734a3c9","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivation.java","status":"modified","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivation.java?ref=634bdc5c921382bbc0f5e5c90569b087f61138ba","patch":"@@ -19,6 +19,8 @@\n package org.apache.openjpa.lib.conf;\n \n import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n \n /**\n  * Hooks for deriving products with additional functionality.\n@@ -90,6 +92,39 @@ public ConfigurationProvider load(String resource, String anchor,\n      */\n     public ConfigurationProvider load(File file, String anchor) \n         throws Exception;\n+\n+    /**\n+     * Return a string identifying the default resource location for this\n+     * product derivation, if one exists. If there is no default location,\n+     * returns <code>null</code>.\n+     *\n+     * @since 1.1.0\n+     */\n+    public String getDefaultResourceLocation();\n+\n+    /**\n+     * Return a List<String> of all the anchors defined in <code>file</code>.\n+     * The returned names are not fully-qualified, so must be used in\n+     * conjunction with <code>file</code> in calls\n+     * to {@link #load(java.io.File, String)}.\n+     *\n+     * Returns <code>null</code> or an empty list if no anchors could be found.\n+     *\n+     * @since 1.1.0\n+     */\n+    public List getAnchorsInFile(File file) throws IOException, Exception;\n+\n+    /**\n+     * Return a List<String> of all the anchors defined in\n+     * <code>resource</code>. The returned names are not\n+     * fully-qualified, so must be used in conjunction with\n+     * <code>resource</code> in calls to {@link #load(java.io.File, String)}.\n+     *\n+     * Returns <code>null</code> or an empty list if no anchors could be found.\n+     *\n+     * @since 1.1.0\n+     */\n+    public List getAnchorsInResource(String resource) throws Exception;\n     \n     /**\n      * Provides the instance with a callback to mutate the initial properties"},{"sha":"413e77f0a2b337c5f735ea0f7eaa6c65e9e332e1","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","status":"modified","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","raw_url":"https://github.com/apache/openjpa/raw/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java?ref=634bdc5c921382bbc0f5e5c90569b087f61138ba","patch":"@@ -22,8 +22,10 @@\n import java.security.AccessController;\n import java.security.PrivilegedActionException;\n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.Comparator;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import java.util.MissingResourceException;\n@@ -352,6 +354,66 @@ private static void reportErrors(StringBuffer errs, String resource) {\n             ProductDerivations.class.getName(), resource);\n     }\n \n+    /**\n+     * Return a List<String> of all the fully-qualified anchors specified in\n+     * <code>propertiesLocation</code>. The return values must be used in\n+     * conjunction with <code>propertiesLocation</code>. If there are no\n+     * product derivations or if no product derivations could find anchors,\n+     * this returns an empty list.\n+     *\n+     * @since 1.1.0\n+     */\n+    public static List getFullyQualifiedAnchorsInPropertiesLocation(\n+        final String propertiesLocation) {\n+        List fqAnchors = new ArrayList();\n+        StringBuffer errs = null;\n+        for (int i = _derivations.length - 1; i >= 0; i--) {\n+            try {\n+                if (propertiesLocation == null) {\n+                    String loc = _derivations[i].getDefaultResourceLocation();\n+                    addAll(fqAnchors, loc,\n+                        _derivations[i].getAnchorsInResource(loc));\n+                    continue;\n+                }\n+\n+                File f = new File(propertiesLocation);\n+                if (((Boolean) J2DoPrivHelper.isFileAction(f).run())\n+                    .booleanValue()) {\n+                    addAll(fqAnchors, propertiesLocation,\n+                        _derivations[i].getAnchorsInFile(f));\n+                } else {\n+                    f = new File(\"META-INF\" + File.separatorChar\n+                        + propertiesLocation);\n+                    if (((Boolean) J2DoPrivHelper.isFileAction(f).run())\n+                        .booleanValue()) {\n+                        addAll(fqAnchors, propertiesLocation,\n+                            _derivations[i].getAnchorsInFile(f));\n+                    } else {\n+                        addAll(fqAnchors, propertiesLocation,\n+                            _derivations[i].getAnchorsInResource(\n+                                propertiesLocation));\n+                    }\n+                }\n+            } catch (Throwable t) {\n+                errs = (errs == null) ? new StringBuffer() : errs.append(\"\\n\");\n+                errs.append(_derivations[i].getClass().getName() + \":\" + t);\n+            }\n+        }\n+        reportErrors(errs, propertiesLocation);\n+        return fqAnchors;\n+    }\n+\n+    private static void addAll(Collection collection, String base,\n+        Collection newMembers) {\n+        if (newMembers == null || collection == null)\n+            return;\n+        for (Iterator iter = newMembers.iterator(); iter.hasNext(); ) {\n+            String fqLoc = base + \"#\" + iter.next();\n+            if (!collection.contains(fqLoc))\n+                collection.add(fqLoc);\n+        }\n+    }\n+\n     /**\n      * Compare {@link ProductDerivation}s.\n      */"},{"sha":"10e79737357beee5ede9a3b76e7861256cb638e7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestEnhancementWithMultiplePUs.java","status":"added","additions":151,"deletions":0,"changes":151,"blob_url":"https://github.com/apache/openjpa/blob/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestEnhancementWithMultiplePUs.java","raw_url":"https://github.com/apache/openjpa/raw/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestEnhancementWithMultiplePUs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestEnhancementWithMultiplePUs.java?ref=634bdc5c921382bbc0f5e5c90569b087f61138ba","patch":"@@ -0,0 +1,151 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+import java.io.IOException;\r\n+import java.security.AccessController;\r\n+import java.util.ArrayList;\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\r\n+import org.apache.openjpa.lib.conf.Configurations;\r\n+import org.apache.openjpa.lib.util.BytecodeWriter;\r\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\r\n+import org.apache.openjpa.lib.util.Options;\r\n+import org.apache.openjpa.meta.MetaDataRepository;\r\n+import org.apache.openjpa.persistence.test.PersistenceTestCase;\r\n+import serp.bytecode.BCClass;\r\n+import serp.bytecode.Project;\r\n+\r\n+public class TestEnhancementWithMultiplePUs\r\n+    extends PersistenceTestCase {\r\n+\r\n+    public void testExplicitEnhancementWithClassNotInFirstPU()\r\n+        throws ClassNotFoundException {\r\n+        OpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\r\n+        Configurations.populateConfiguration(conf, new Options());\r\n+        MetaDataRepository repos = conf.getMetaDataRepositoryInstance();\r\n+        ClassLoader loader = (ClassLoader) AccessController\r\n+            .doPrivileged(J2DoPrivHelper.newTemporaryClassLoaderAction(\r\n+                getClass().getClassLoader()));\r\n+        Project project = new Project();\r\n+\r\n+        String className =\r\n+            \"org.apache.openjpa.enhance.UnenhancedBootstrapInstance\";\r\n+        BCClass bc = assertNotPC(loader, project, className);\r\n+\r\n+        PCEnhancer enhancer = new PCEnhancer(conf, bc, repos, loader);\r\n+\r\n+        assertEquals(PCEnhancer.ENHANCE_PC, enhancer.run());\r\n+        assertTrue(Arrays.asList(bc.getInterfaceNames()).contains(\r\n+            PersistenceCapable.class.getName()));\r\n+    }\r\n+\r\n+    private BCClass assertNotPC(ClassLoader loader, Project project,\r\n+        String className) {\r\n+        BCClass bc = project.loadClass(className, loader);\r\n+        assertFalse(className + \" must not be enhanced already; it was.\",\r\n+            Arrays.asList(bc.getInterfaceNames()).contains(\r\n+                PersistenceCapable.class.getName()));\r\n+        return bc;\r\n+    }\r\n+\r\n+    public void testEnhancementOfSecondPUWithClassNotInFirstPU()\r\n+        throws IOException {\r\n+        OpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\r\n+        Options opts = new Options();\r\n+        opts.setProperty(\"p\",\r\n+            \"META-INF/persistence.xml#second-persistence-unit\");\r\n+        Configurations.populateConfiguration(conf, opts);\r\n+        MetaDataRepository repos = conf.getMetaDataRepositoryInstance();\r\n+        ClassLoader loader = (ClassLoader) AccessController\r\n+            .doPrivileged(J2DoPrivHelper.newTemporaryClassLoaderAction(\r\n+                getClass().getClassLoader()));\r\n+        Project project = new Project();\r\n+\r\n+        // make sure that the class is not already enhanced for some reason\r\n+        String className =\r\n+            \"org.apache.openjpa.enhance.UnenhancedBootstrapInstance\";\r\n+        BCClass bc = assertNotPC(loader, project, className);\r\n+\r\n+        // build up a writer that just stores to a list so that we don't\r\n+        // mutate the disk.\r\n+        final List<String> written = new ArrayList<String>();\r\n+        BytecodeWriter writer = new BytecodeWriter() {\r\n+\r\n+            public void write(BCClass type) throws IOException {\r\n+                assertTrue(Arrays.asList(type.getInterfaceNames()).contains(\r\n+                    PersistenceCapable.class.getName()));\r\n+                written.add(type.getName());\r\n+            }\r\n+        };\r\n+\r\n+        PCEnhancer.run(conf, null, new PCEnhancer.Flags(), repos, writer,\r\n+            loader);\r\n+\r\n+        // ensure that we don't attempt to process classes listed in other PUs\r\n+        assertEquals(1, written.size());\r\n+\r\n+        // ensure that we do process the classes listed in the PU\r\n+        assertTrue(written.contains(className));\r\n+    }\r\n+\r\n+    public void testEnhancementOfAllPUsWithinAResource()\r\n+        throws IOException {\r\n+        OpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\r\n+        Options opts = new Options();\r\n+        opts.setProperty(\"p\", \"META-INF/persistence.xml\");\r\n+        Configurations.populateConfiguration(conf, opts);\r\n+        MetaDataRepository repos = conf.getMetaDataRepositoryInstance();\r\n+        ClassLoader loader = (ClassLoader) AccessController\r\n+            .doPrivileged(J2DoPrivHelper.newTemporaryClassLoaderAction(\r\n+                getClass().getClassLoader()));\r\n+        Project project = new Project();\r\n+\r\n+        // make sure that the classes is not already enhanced for some reason\r\n+        assertNotPC(loader, project,\r\n+            \"org.apache.openjpa.enhance.UnenhancedBootstrapInstance\");\r\n+        assertNotPC(loader, project,\r\n+            \"org.apache.openjpa.enhance.UnenhancedBootstrapInstance2\");\r\n+\r\n+        // build up a writer that just stores to a list so that we don't\r\n+        // mutate the disk.\r\n+        final List<String> written = new ArrayList<String>();\r\n+        BytecodeWriter writer = new BytecodeWriter() {\r\n+\r\n+            public void write(BCClass type) throws IOException {\r\n+                assertTrue(Arrays.asList(type.getInterfaceNames()).contains(\r\n+                    PersistenceCapable.class.getName()));\r\n+                written.add(type.getName());\r\n+            }\r\n+        };\r\n+\r\n+        opts = new Options();\r\n+        opts.put(PCEnhancer.class.getName() + \"#bytecodeWriter\", writer);\r\n+        PCEnhancer.run(null, opts);\r\n+\r\n+        // ensure that we do process the classes listed in the PUs\r\n+        assertTrue(written.contains(\r\n+            \"org.apache.openjpa.enhance.UnenhancedBootstrapInstance\"));\r\n+        assertTrue(written.contains(\r\n+            \"org.apache.openjpa.enhance.UnenhancedBootstrapInstance2\"));\r\n+    }\r\n+}\r"},{"sha":"95a0e4a5449b92b05b7bb88fcd18871f26a7906c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedBootstrapInstance.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedBootstrapInstance.java","raw_url":"https://github.com/apache/openjpa/raw/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedBootstrapInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedBootstrapInstance.java?ref=634bdc5c921382bbc0f5e5c90569b087f61138ba","patch":"@@ -0,0 +1,28 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+\r\n+@Entity\r\n+public class UnenhancedBootstrapInstance {\r\n+    @Id\r\n+    private int id;\r\n+}\r"},{"sha":"3db77b8570df437e7a74e30671f2f0e388fded05","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedBootstrapInstance2.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedBootstrapInstance2.java","raw_url":"https://github.com/apache/openjpa/raw/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedBootstrapInstance2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedBootstrapInstance2.java?ref=634bdc5c921382bbc0f5e5c90569b087f61138ba","patch":"@@ -0,0 +1,28 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+\r\n+@Entity\r\n+public class UnenhancedBootstrapInstance2 {\r\n+    @Id\r\n+    private int id;\r\n+}\r"},{"sha":"42d82ffc4dfd10bcc18dbf53da9a47ec3a703ca1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/lib/conf/TestAnchorParsing.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/lib/conf/TestAnchorParsing.java","raw_url":"https://github.com/apache/openjpa/raw/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/lib/conf/TestAnchorParsing.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/lib/conf/TestAnchorParsing.java?ref=634bdc5c921382bbc0f5e5c90569b087f61138ba","patch":"@@ -0,0 +1,63 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.lib.conf;\r\n+\r\n+import java.util.List;\r\n+\r\n+import junit.framework.TestCase;\r\n+import org.apache.openjpa.lib.util.Options;\r\n+\r\n+public class TestAnchorParsing extends TestCase {\r\n+\r\n+    public void testFQAnchor() {\r\n+        String fqLoc = \"META-INF/persistence.xml#test\";\r\n+        Options opts = new Options();\r\n+        opts.setProperty(\"p\", fqLoc);\r\n+        List locs =\r\n+            Configurations.getFullyQualifiedAnchorsInPropertiesLocation(opts);\r\n+        assertNotNull(locs);\r\n+        assertEquals(1, locs.size());\r\n+        assertEquals(fqLoc, locs.get(0));\r\n+    }\r\n+\r\n+    public void testNoResource() {\r\n+        allHelper(null);\r\n+    }\r\n+\r\n+    public void testNoAnchor() {\r\n+        allHelper(\"META-INF/persistence.xml\");\r\n+    }\r\n+\r\n+    private void allHelper(String resource) {\r\n+        Options opts = new Options();\r\n+        if (resource != null)\r\n+            opts.setProperty(\"p\", resource);\r\n+        List locs =\r\n+            Configurations.getFullyQualifiedAnchorsInPropertiesLocation(opts);\r\n+        assertNotNull(locs);\r\n+        // approximate so that if someone adds more units, this doesn't break\r\n+        assertTrue(locs.size() >= 4);\r\n+        assertTrue(locs.contains(\"META-INF/persistence.xml#test\"));\r\n+        assertTrue(locs.contains(\r\n+            \"META-INF/persistence.xml#second-persistence-unit\"));\r\n+        assertTrue(locs.contains(\r\n+            \"META-INF/persistence.xml#third-persistence-unit\"));\r\n+        assertTrue(locs.contains(\"META-INF/persistence.xml#invalid\"));\r\n+    }\r\n+}\r"},{"sha":"e78332ea2501a938552b7c300e5a52c1950bf0cc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","status":"modified","additions":16,"deletions":2,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java?ref=634bdc5c921382bbc0f5e5c90569b087f61138ba","patch":"@@ -52,10 +52,24 @@\n      * this list to tell the test framework to delete all table contents\n      * before running the tests.\n      *\n-     * @param props list of persistent types used in testing and/or \n+     * @param props list of persistent types used in testing and/or\n      * configuration values in the form key,value,key,value...\n      */\n     protected OpenJPAEntityManagerFactorySPI createEMF(Object... props) {\n+        return createNamedEMF(\"test\", props);\n+    }\n+\n+    /**\n+     * Create an entity manager factory for persistence unit <code>pu</code>.\n+     * Put {@link #CLEAR_TABLES} in\n+     * this list to tell the test framework to delete all table contents\n+     * before running the tests.\n+     *\n+     * @param props list of persistent types used in testing and/or\n+     * configuration values in the form key,value,key,value...\n+     */\n+    protected OpenJPAEntityManagerFactorySPI createNamedEMF(String pu,\n+        Object... props) {\n         Map map = new HashMap(System.getProperties());\n         List<Class> types = new ArrayList<Class>();\n         boolean prop = false;\n@@ -85,7 +99,7 @@ protected OpenJPAEntityManagerFactorySPI createEMF(Object... props) {\n         }\n \n         return (OpenJPAEntityManagerFactorySPI) Persistence.\n-            createEntityManagerFactory(\"test\", map);\n+            createEntityManagerFactory(pu, map);\n     }\n \n     public void tearDown() throws Exception {"},{"sha":"b37c42f4b46b0b8f1f5014c166b6f0bcb65b99da","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=634bdc5c921382bbc0f5e5c90569b087f61138ba","patch":"@@ -54,7 +54,15 @@\n                 value=\"buildSchema(ForeignKeys=true)\"/>\n         </properties>\n     </persistence-unit>\n-    \n+\n+    <persistence-unit name=\"second-persistence-unit\">\n+        <class>org.apache.openjpa.enhance.UnenhancedBootstrapInstance</class>\n+    </persistence-unit>\n+\n+    <persistence-unit name=\"third-persistence-unit\">\n+        <class>org.apache.openjpa.enhance.UnenhancedBootstrapInstance2</class>\n+    </persistence-unit>\n+\n     <persistence-unit name=\"invalid\">\n         <properties>\n             <property name=\"openjpa.ConnectionDriverName\""},{"sha":"b2ad85676d17123eff608e71c0fe8356cfa10ba1","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java?ref=634bdc5c921382bbc0f5e5c90569b087f61138ba","patch":"@@ -199,6 +199,33 @@ public ConfigurationProvider load(File file, String anchor)\n             parser.getResults(), anchor, null), null);\n     }\n \n+    @Override\n+    public String getDefaultResourceLocation() {\n+        return RSRC_DEFAULT;\n+    }\n+\n+    @Override\n+    public List getAnchorsInFile(File file) throws IOException {\n+        ConfigurationParser parser = new ConfigurationParser(null);\n+        parser.parse(file);\n+        return getUnitNames(parser);\n+    }\n+\n+    private List<String> getUnitNames(ConfigurationParser parser) {\n+        List<PersistenceUnitInfoImpl> units = parser.getResults();\n+        List<String> names = new ArrayList<String>();\n+        for (PersistenceUnitInfoImpl unit : units)\n+            names.add(unit.getPersistenceUnitName());\n+        return names;\n+    }\n+\n+    @Override\n+    public List getAnchorsInResource(String resource) throws Exception {\n+        ConfigurationParser parser = new ConfigurationParser(null);\n+        parser.parse(resource);\n+        return getUnitNames(parser);\n+    }\n+\n     @Override\n     public ConfigurationProvider loadGlobals(ClassLoader loader)\n         throws IOException {"},{"sha":"75234b4fef49f7b3ba1834f703b22f24842ad578","filename":"openjpa-project/src/doc/manual/ref_guide_conf.xml","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-project/src/doc/manual/ref_guide_conf.xml","raw_url":"https://github.com/apache/openjpa/raw/634bdc5c921382bbc0f5e5c90569b087f61138ba/openjpa-project/src/doc/manual/ref_guide_conf.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_conf.xml?ref=634bdc5c921382bbc0f5e5c90569b087f61138ba","patch":"@@ -167,6 +167,18 @@ META-INF/my-persistence.xml</filename>, you can use:\n                 </para>\n <programlisting>\n &lt;tool&gt; -p my-persistence.xml\n+</programlisting>\n+                <para>\n+If you want to run a tool against just one particular persistence unit in\n+a configuration file, you can do so by specifying an anchor along with the\n+resource. If you do not specify an anchor, the tools will run against all\n+the persistence units defined within the specified resource, or the default\n+resource if none is specified. If the persistence unit is defined within\n+the default resource location, then you can just specify the raw anchor itself:\n+                </para>\n+<programlisting>\n+&lt;tool&gt; -p my-persistence.xml#sales-persistence-unit\n+&lt;tool&gt; -p #invoice-persistence-unit\n </programlisting>\n             </listitem>\n             <listitem>"}]}

