{"sha":"635dd436cf12d83d40f73fa2b9ac77780e085de8","node_id":"MDY6Q29tbWl0MjA2MzY0OjYzNWRkNDM2Y2YxMmQ4M2Q0MGY3M2ZhMmI5YWM3Nzc4MGUwODVkZTg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-12-15T14:34:23Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-12-15T14:34:23Z"},"message":"[OPENJPA-2684] Adding support for JAR files via ZipStreamMetaDataIterator\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1774477 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"32601be2b133b401de12ee6cba2bf84e337a423b","url":"https://api.github.com/repos/apache/openjpa/git/trees/32601be2b133b401de12ee6cba2bf84e337a423b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/635dd436cf12d83d40f73fa2b9ac77780e085de8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/635dd436cf12d83d40f73fa2b9ac77780e085de8","html_url":"https://github.com/apache/openjpa/commit/635dd436cf12d83d40f73fa2b9ac77780e085de8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/635dd436cf12d83d40f73fa2b9ac77780e085de8/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"af8ea38f87a778401ca1c679f7087d3a0d5a52cc","url":"https://api.github.com/repos/apache/openjpa/commits/af8ea38f87a778401ca1c679f7087d3a0d5a52cc","html_url":"https://github.com/apache/openjpa/commit/af8ea38f87a778401ca1c679f7087d3a0d5a52cc"}],"stats":{"total":61,"additions":44,"deletions":17},"files":[{"sha":"f1ab7b4e9c4112e08861fc09eefd652522e351d6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","status":"modified","additions":44,"deletions":17,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/635dd436cf12d83d40f73fa2b9ac77780e085de8/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/635dd436cf12d83d40f73fa2b9ac77780e085de8/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java?ref=635dd436cf12d83d40f73fa2b9ac77780e085de8","patch":"@@ -66,7 +66,7 @@\n \n /**\n  * Base class for factory implementations built around XML metadata files\n- * in the common fomat.\n+ * in the common format.\n  *\n  * @author Abe White\n  * @since 0.4.0\n@@ -712,25 +712,52 @@ protected ClassMetaData getDefiningMetaData(QueryMetaData query,\n                         log.trace(_loc.get(\"scanning-vfs-url\", url));\n                     }\n \n-                    final URLConnection conn = url.openConnection();\n-                    final Object vfsContent = conn.getContent();\n                     final URL finalUrl = url;\n-                    File file = AccessController.doPrivileged(new PrivilegedAction<File>() {\n-                        @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n-                        public File run() {\n-                            try {\n-                                Class virtualFileClass = Class.forName(\"org.jboss.vfs.VirtualFile\");\n-                                Method getPhysicalFile = virtualFileClass.getDeclaredMethod(\"getPhysicalFile\");\n-                                return (File) getPhysicalFile.invoke(vfsContent);\n-                            } catch (Exception e) {\n-                                log.error(_loc.get(\"while-scanning-vfs-url\", finalUrl), e);\n+                    if (url.toString().endsWith(\".jar\")) {\n+                        ZipInputStream zis = AccessController.doPrivileged(new PrivilegedAction<ZipInputStream>() {\n+\n+                            @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+                            @Override\n+                            public ZipInputStream run() {\n+                                try {\n+                                    Class vfs = Class.forName(\"org.jboss.vfs.VFS\");\n+                                    Method getChild = vfs.getDeclaredMethod(\"getChild\", URL.class);\n+                                    Object jarFile = getChild.invoke(null, finalUrl);\n+\n+                                    Class virtualFileClass = Class.forName(\"org.jboss.vfs.VirtualFile\");\n+                                    Method openStream = virtualFileClass.getDeclaredMethod(\"openStream\");\n+                                    return (ZipInputStream) openStream.invoke(jarFile);\n+                                } catch (Exception e) {\n+                                    log.error(_loc.get(\"while-scanning-vfs-url\", finalUrl), e);\n+                                }\n+                                return null;\n                             }\n-                            return null;\n+                        });\n+                        if (zis != null) {\n+                            scan(new ZipStreamMetaDataIterator(zis, newMetaDataFilter()), cparser, names, true, url);\n                         }\n-                    });\n-                    if (file != null)\n-                        scan(new FileMetaDataIterator(file, newMetaDataFilter()), cparser, names, true, file);\n-\n+                    } else {\n+                        final URLConnection conn = url.openConnection();\n+                        final Object vfsContent = conn.getContent();\n+                        File file = AccessController.doPrivileged(new PrivilegedAction<File>() {\n+\n+                            @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+                            @Override\n+                            public File run() {\n+                                try {\n+                                    Class virtualFileClass = Class.forName(\"org.jboss.vfs.VirtualFile\");\n+                                    Method getPhysicalFile = virtualFileClass.getDeclaredMethod(\"getPhysicalFile\");\n+                                    return (File) getPhysicalFile.invoke(vfsContent);\n+                                } catch (Exception e) {\n+                                    log.error(_loc.get(\"while-scanning-vfs-url\", finalUrl), e);\n+                                }\n+                                return null;\n+                            }\n+                        });\n+                        if (file != null) {\n+                            scan(new FileMetaDataIterator(file, newMetaDataFilter()), cparser, names, true, file);\n+                        }\n+                    }\n                     continue;\n                 }\n                 if (\"jar\".equals(url.getProtocol())) {"}]}

