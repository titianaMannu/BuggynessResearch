{"sha":"63a24dc7bbd3a99be2d750b5e05303f78e48f6ce","node_id":"MDY6Q29tbWl0MjA2MzY0OjYzYTI0ZGM3YmJkM2E5OWJlMmQ3NTBiNWUwNTMwM2Y3OGU0OGY2Y2U=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-08-18T21:52:59Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-08-18T21:52:59Z"},"message":"OPENJPA-1769: Fix Broker.getObjectId(..) to work on detached Entities with no DetachedStateManager.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@986963 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9ef11d7805419a737dc6b5013ad596831bcc14fb","url":"https://api.github.com/repos/apache/openjpa/git/trees/9ef11d7805419a737dc6b5013ad596831bcc14fb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/63a24dc7bbd3a99be2d750b5e05303f78e48f6ce","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/63a24dc7bbd3a99be2d750b5e05303f78e48f6ce","html_url":"https://github.com/apache/openjpa/commit/63a24dc7bbd3a99be2d750b5e05303f78e48f6ce","comments_url":"https://api.github.com/repos/apache/openjpa/commits/63a24dc7bbd3a99be2d750b5e05303f78e48f6ce/comments","author":null,"committer":null,"parents":[{"sha":"5a8030a8026dd6ba77be8988478806e33c565be3","url":"https://api.github.com/repos/apache/openjpa/commits/5a8030a8026dd6ba77be8988478806e33c565be3","html_url":"https://github.com/apache/openjpa/commit/5a8030a8026dd6ba77be8988478806e33c565be3"}],"stats":{"total":73,"additions":70,"deletions":3},"files":[{"sha":"2fed54f5981a7088cdcf03fe0ef41750c6b185c7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":12,"deletions":3,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/63a24dc7bbd3a99be2d750b5e05303f78e48f6ce/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/63a24dc7bbd3a99be2d750b5e05303f78e48f6ce/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=63a24dc7bbd3a99be2d750b5e05303f78e48f6ce","patch":"@@ -4423,9 +4423,18 @@ public Object newInstance(Class cls) {\n \n     public Object getObjectId(Object obj) {\n         assertOpen();\n-        if (ImplHelper.isManageable(obj))\n-            return (ImplHelper.toPersistenceCapable(obj, _conf))\n-                .pcFetchObjectId();\n+        if (ImplHelper.isManageable(obj)) {\n+            PersistenceCapable pc = ImplHelper.toPersistenceCapable(obj, _conf);\n+            if (pc != null) {\n+                if (pc.pcGetStateManager() == null) {\n+                    MetaDataRepository repo = _conf.getMetaDataRepositoryInstance();\n+                    // If the statemanager is null the call to pcFetchObjectId always returns null. Create a new object\n+                    // id.\n+                    return ApplicationIds.create(pc, repo.getMetaData(pc.getClass(), null, true));\n+                }\n+                return pc.pcFetchObjectId();\n+            }\n+        }\n         return null;\n     }\n "},{"sha":"11db651532bd6c831eac4561e10c58b80cc1a12a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestBroker.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/63a24dc7bbd3a99be2d750b5e05303f78e48f6ce/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestBroker.java","raw_url":"https://github.com/apache/openjpa/raw/63a24dc7bbd3a99be2d750b5e05303f78e48f6ce/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestBroker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestBroker.java?ref=63a24dc7bbd3a99be2d750b5e05303f78e48f6ce","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.kernel;\n+\n+import org.apache.openjpa.jdbc.kernel.A;\n+import org.apache.openjpa.persistence.EntityManagerImpl;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestBroker extends SingleEMFTestCase {\n+    public void setUp() {\n+        super.setUp(A.class, CLEAR_TABLES);\n+    }\n+\n+    /**\n+     * This test asserts that the ObjectId obtained from the Broker is the same for the following cases: [ An Entity\n+     * that exists in the current persistence context, a detached Entity with a DetachedStateManager, and a detached\n+     * Entity with no DetachedStateManager]\n+     */\n+    public void testGetObjectId() {\n+        EntityManagerImpl em = (EntityManagerImpl) emf.createEntityManager();\n+        Broker broker = em.getBroker();\n+\n+        em.getTransaction().begin();\n+        A a = new A();\n+        em.persist(a);\n+        Object oidInPersistenceContext = broker.getObjectId(a);\n+        em.getTransaction().commit();\n+        em.clear();\n+        Object oidDetached = broker.getObjectId(a);\n+        em.close();\n+\n+        em = (EntityManagerImpl) emf.createEntityManager();\n+        broker = em.getBroker();\n+        A a2 = new A();\n+        a2.setId(a.getId());\n+\n+        Object oidDetachedNoSm = broker.getObjectId(a2);\n+\n+        assertTrue(oidInPersistenceContext.equals(oidDetached));\n+        assertTrue(oidDetached.equals(oidDetachedNoSm));\n+    }\n+}"}]}

