{"sha":"63c3748900811032ec5dc4e5e42d9745cfc53c4f","node_id":"MDY6Q29tbWl0MjA2MzY0OjYzYzM3NDg5MDA4MTEwMzJlYzVkYzRlNWU0MmQ5NzQ1Y2ZjNTNjNGY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-07T23:47:19Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-07T23:47:19Z"},"message":"OPENJPA-165\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@563702 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"52852cb09ffb717cda6ba8ba9bcd9b880e48e7f4","url":"https://api.github.com/repos/apache/openjpa/git/trees/52852cb09ffb717cda6ba8ba9bcd9b880e48e7f4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/63c3748900811032ec5dc4e5e42d9745cfc53c4f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/63c3748900811032ec5dc4e5e42d9745cfc53c4f","html_url":"https://github.com/apache/openjpa/commit/63c3748900811032ec5dc4e5e42d9745cfc53c4f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/63c3748900811032ec5dc4e5e42d9745cfc53c4f/comments","author":null,"committer":null,"parents":[{"sha":"86e47000db1e081076ed16ef2873bb71e6e93c70","url":"https://api.github.com/repos/apache/openjpa/commits/86e47000db1e081076ed16ef2873bb71e6e93c70","html_url":"https://github.com/apache/openjpa/commit/86e47000db1e081076ed16ef2873bb71e6e93c70"}],"stats":{"total":89,"additions":88,"deletions":1},"files":[{"sha":"397680d415c357fb64c5c22e7f08c24e6d7c8af3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryPagination.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/63c3748900811032ec5dc4e5e42d9745cfc53c4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryPagination.java","raw_url":"https://github.com/apache/openjpa/raw/63c3748900811032ec5dc4e5e42d9745cfc53c4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryPagination.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryPagination.java?ref=63c3748900811032ec5dc4e5e42d9745cfc53c4f","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test that query pagination works properly.\n+ */\n+public class TestQueryPagination\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(SimpleEntity.class, CLEAR_TABLES);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(new SimpleEntity(\"foo\", \"bar\" + 0));\n+        em.persist(new SimpleEntity(\"foo\", \"bar\" + 1));\n+        em.persist(new SimpleEntity(\"foo\", \"bar\" + 2));\n+        em.persist(new SimpleEntity(\"foo\", \"bar\" + 3));\n+        em.persist(new SimpleEntity(\"foo\", \"bar\" + 4));\n+        em.persist(new SimpleEntity(\"foo\", \"bar\" + 5));\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testFirstThenMax() {\n+        helper(true, 2, 3, 3);\n+    }\n+\n+    public void testMaxThenFirst() {\n+        helper(false, 2, 3, 3);\n+    }\n+\n+    public void testNoResultsFirstFirst() {\n+        helper(true, 10, 3, 0);\n+    }\n+\n+    public void testNoResultsFirstLast() {\n+        helper(false, 10, 3, 0);\n+    }\n+\n+    public void testAllResultsFirstFirst() {\n+        helper(true, 0, 10, 6);\n+    }\n+\n+    public void testAllResultsFirstLast() {\n+        helper(false, 0, 10, 6);\n+    }\n+\n+    private void helper(boolean firstFirst, int first, int max, int expected) {\n+        EntityManager em = emf.createEntityManager();\n+        Query q = em.createQuery(\"select e from simple e\");\n+        if (firstFirst)\n+            q.setFirstResult(first).setMaxResults(max);\n+        else\n+            q.setMaxResults(max).setFirstResult(first);\n+        assertEquals(expected, q.getResultList().size());\n+        em.close();\n+    }\n+}\n\\ No newline at end of file"},{"sha":"166c5eae04bd2dd23cf03761b9fa13d3246a0512","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/63c3748900811032ec5dc4e5e42d9745cfc53c4f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/63c3748900811032ec5dc4e5e42d9745cfc53c4f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=63c3748900811032ec5dc4e5e42d9745cfc53c4f","patch":"@@ -191,7 +191,13 @@ public int getFirstResult() {\n \n     public OpenJPAQuery setFirstResult(int startPosition) {\n         _em.assertNotCloseInvoked();\n-        _query.setRange(startPosition, _query.getEndRange());\n+        long end;\n+        if (_query.getEndRange() == Long.MAX_VALUE)\n+            end = Long.MAX_VALUE;\n+        else\n+            end = startPosition +\n+                (_query.getEndRange() - _query.getStartRange());\n+        _query.setRange(startPosition, end);\n         return this;\n     }\n "}]}

