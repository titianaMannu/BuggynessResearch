{"sha":"63c48992274fce84b2c08bf8bbe6df024736557c","node_id":"MDY6Q29tbWl0MjA2MzY0OjYzYzQ4OTkyMjc0ZmNlODRiMmMwOGJmOGJiZTZkZjAyNDczNjU1N2M=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-10T20:34:52Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-10T20:34:52Z"},"message":"OPENJPA-602: Avoid NPE when table-per-class inheritance staregy with an abstract root. See test cases for further details.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666314 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"48090ac043543b0f71cb630588299888f621af07","url":"https://api.github.com/repos/apache/openjpa/git/trees/48090ac043543b0f71cb630588299888f621af07"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/63c48992274fce84b2c08bf8bbe6df024736557c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/63c48992274fce84b2c08bf8bbe6df024736557c","html_url":"https://github.com/apache/openjpa/commit/63c48992274fce84b2c08bf8bbe6df024736557c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/63c48992274fce84b2c08bf8bbe6df024736557c/comments","author":null,"committer":null,"parents":[{"sha":"ddc42e807837f340306dbbf2e9f04255f8437539","url":"https://api.github.com/repos/apache/openjpa/commits/ddc42e807837f340306dbbf2e9f04255f8437539","html_url":"https://github.com/apache/openjpa/commit/ddc42e807837f340306dbbf2e9f04255f8437539"}],"stats":{"total":466,"additions":463,"deletions":3},"files":[{"sha":"7a3bec02fece2146ec986ca18ab01c0eb8880fe9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java?ref=63c48992274fce84b2c08bf8bbe6df024736557c","patch":"@@ -133,9 +133,16 @@ public void map(boolean adapt) {\n             elem.setJoinDirection(ValueMapping.JOIN_EXPECTED_INVERSE);\n             elem.setUseClassCriteria(criteria);\n \n-            field.setOrderColumn(finfo.getOrderColumn(field,\n-                mapped.getForeignKey().getTable(), adapt));\n-            field.setOrderColumnIO(finfo.getColumnIO());\n+            ForeignKey fk = mapped.getForeignKey();\n+            /** Foreign key may be null if declared type of the mapped field is \n+             * abstract and under table-per-class inheritance strategy will have\n+             * no mapped table.  \n+             */\n+            if (fk != null) {\n+            \tfield.setOrderColumn(finfo.getOrderColumn(field,\n+            \t\t\tfk.getTable(), adapt));\n+            \tfield.setOrderColumnIO(finfo.getColumnIO());\n+            }\n             return;\n         }\n "},{"sha":"a5f5622fabfef091f6dd90dea3f16c775a622324","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/BaseEntity.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/BaseEntity.java","raw_url":"https://github.com/apache/openjpa/raw/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/BaseEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/BaseEntity.java?ref=63c48992274fce84b2c08bf8bbe6df024736557c","patch":"@@ -0,0 +1,55 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n+\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.MappedSuperclass;\r\n+import javax.persistence.Version;\r\n+\r\n+/**\r\n+ * An abstract base entity class with auto-generated identty and version field.\r\n+ * Used for testing special case of table-per-class inheritance strategy when \r\n+ * the root of persistent inheritance hierarchy is abstract and itself \r\n+ * derives from an abstract MappedSuperClass (i.e. this class).\r\n+ * \r\n+ * For a more detailed description of the domain featureSelection to which this receiver\r\n+ * belongs\r\n+ * @see TestTablePerClassInheritanceWithAbstractRoot\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ * \r\n+ */\r\n+@MappedSuperclass\r\n+public abstract class BaseEntity {\r\n+\t@Id\r\n+\t@GeneratedValue\r\n+\tprivate long id;\r\n+\t\r\n+\t@Version\r\n+\tprivate long version;\r\n+\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic long getVersion() {\r\n+\t\treturn version;\r\n+\t}\r\n+}\r"},{"sha":"1572ffb0eedd6154eaa07d00662b6d221b209f71","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/EnglishParagraph.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/EnglishParagraph.java","raw_url":"https://github.com/apache/openjpa/raw/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/EnglishParagraph.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/EnglishParagraph.java?ref=63c48992274fce84b2c08bf8bbe6df024736557c","patch":"@@ -0,0 +1,45 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * A persistent class derived from an abstract persistent class and \r\n+ * using table-per-concrete-class inheritance strategy.\r\n+ * \r\n+ * For a more detailed description of the domain featureSelection to which this receiver\r\n+ * belongs\r\n+ * @see TestTablePerClassInheritanceWithAbstractRoot\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class EnglishParagraph extends Translatable {\r\n+\tprivate String content;\r\n+\r\n+\tpublic String getContent() {\r\n+\t\treturn content;\r\n+\t}\r\n+\r\n+\tpublic void setContent(String content) {\r\n+\t\tthis.content = content;\r\n+\t}\r\n+}\r"},{"sha":"16aba3f065fea0f0db965b6928854c89edaf366a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/FrenchParagraph.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/FrenchParagraph.java","raw_url":"https://github.com/apache/openjpa/raw/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/FrenchParagraph.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/FrenchParagraph.java?ref=63c48992274fce84b2c08bf8bbe6df024736557c","patch":"@@ -0,0 +1,45 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * A persistent class derived from an abstract persistent class and \r\n+ * using table-per-concrete-class inheritance strategy.\r\n+ * \r\n+ * For a more detailed description of the domain featureSelection to which this receiver\r\n+ * belongs\r\n+ * @see TestTablePerClassInheritanceWithAbstractRoot\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class FrenchParagraph extends Translatable {\r\n+\tprivate String content;\r\n+\r\n+\tpublic String getContent() {\r\n+\t\treturn content;\r\n+\t}\r\n+\r\n+\tpublic void setContent(String content) {\r\n+\t\tthis.content = content;\r\n+\t}\r\n+}\r"},{"sha":"8852f56e074fd0fa92985f3940fe38edd04d52af","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/GermanParagraph.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/GermanParagraph.java","raw_url":"https://github.com/apache/openjpa/raw/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/GermanParagraph.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/GermanParagraph.java?ref=63c48992274fce84b2c08bf8bbe6df024736557c","patch":"@@ -0,0 +1,45 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * A persistent class derived from an abstract persistent class and \r\n+ * using table-per-concrete-class inheritance strategy.\r\n+ * \r\n+ * For a more detailed description of the domain featureSelection to which this receiver\r\n+ * belongs\r\n+ * @see TestTablePerClassInheritanceWithAbstractRoot\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class GermanParagraph extends Translatable {\r\n+\tprivate String content;\r\n+\r\n+\tpublic String getContent() {\r\n+\t\treturn content;\r\n+\t}\r\n+\r\n+\tpublic void setContent(String content) {\r\n+\t\tthis.content = content;\r\n+\t}\r\n+}\r"},{"sha":"f9e25c4e8df19468eb5f1642e8d6fa20d764a02f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java","status":"added","additions":155,"deletions":0,"changes":155,"blob_url":"https://github.com/apache/openjpa/blob/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java","raw_url":"https://github.com/apache/openjpa/raw/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java?ref=63c48992274fce84b2c08bf8bbe6df024736557c","patch":"@@ -0,0 +1,155 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Tests a domain featureSelection with following characteristics:\r\n+ * a) A typical bidirectional ManyToOne/OneToMany relation \r\n+ *    EntityA references a single instance of EntityB\r\n+ *    EntityB references a collection of EntityA\r\n+ * b) EntityB itself is abstract \r\n+ * c) Many concrete subclasses of EntityB exist\r\n+ * d) EntityB uses TABLE_PER_CLASS inheritance strategy, hence no mapping table \r\n+ *    exists for EntityB itself.\r\n+ * e) Relation field in EntityA is declared as abstract type EntityB (for which\r\n+ * f) all the domain classes i.e. EntityA, EntityB and all its subclasses is\r\n+ *    derived from an abstract MappedSuperClass which holds primary key and\r\n+ *    version fields.\r\n+ *    \r\n+ *  The test addresses a reported error [1] in mapping the above domain featureSelection.\r\n+ *  The test verifies basic persist, query and delete operations on the domain\r\n+ *  featureSelection.\r\n+ *  \r\n+ *  [1] <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-602\"> OPENJPA-602</A>}\r\n+ *        \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+public class TestTablePerClassInheritanceWithAbstractRoot extends\r\n+\t\tSingleEMFTestCase {\r\n+\tClass[] UNJOINED_SUBCLASSES = {\r\n+\t\t\tEnglishParagraph.class, \r\n+\t\t\tFrenchParagraph.class, \r\n+\t\t\tGermanParagraph.class};\r\n+\t\r\n+    public void setUp() {\r\n+        setUp(CLEAR_TABLES, \r\n+        \t\t\"openjpa.Log\", \"SQL=TRACE\", \r\n+        \t\tTranslation.class, BaseEntity.class,\r\n+        \t\tEnglishParagraph.class, FrenchParagraph.class, \r\n+        \t\tGermanParagraph.class, Translatable.class);\r\n+    }\r\n+    \r\n+\tpublic void testConsistency() {\r\n+\t\tOpenJPAEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\t/**\r\n+\t\t * Aggregate query operations can not be performed on unjoined \r\n+\t\t * subclasses. Hence all concrete subclasses of abstract base\r\n+\t\t * class is counted separately to count all Translatable instances.\r\n+\t\t */\r\n+\t\tint nTranslatableBefore = count(UNJOINED_SUBCLASSES);\r\n+\t\tint nTranslationBefore = count(Translation.class);\r\n+\t\t\r\n+\t\tEnglishParagraph english = new EnglishParagraph();\r\n+\t\tFrenchParagraph french   = new FrenchParagraph();\r\n+\t\tGermanParagraph german   = new GermanParagraph();\r\n+\t\t\r\n+\t\tTranslation translation1 = new Translation(); \r\n+\t\tTranslation translation2 = new Translation(); \r\n+\t\tTranslation translation3 = new Translation(); \r\n+\t\tTranslation translation4 = new Translation(); \r\n+\t\t\r\n+\t\tenglish.setContent(\"Hello\");\r\n+\t\tfrench.setContent(\"Bon jour\");\r\n+\t\tgerman.setContent(\"Guten Tag\");\r\n+\r\n+\t\t\r\n+\t\ttranslation1.setTranslatable(english);\r\n+\t\ttranslation2.setTranslatable(english);\r\n+\t\ttranslation3.setTranslatable(french);\r\n+\t\ttranslation4.setTranslatable(german);\r\n+\t\t\r\n+\t\tenglish.addTranslation(translation1);\r\n+\t\tenglish.addTranslation(translation2);\r\n+\t\tfrench.addTranslation(translation3);\r\n+\t\tgerman.addTranslation(translation4);\r\n+\t\t\r\n+\t\tem.persist(translation1);\r\n+\t\tem.persist(translation2);\r\n+\t\tem.persist(translation3);\r\n+\t\tem.persist(translation4);\r\n+\t\tem.getTransaction().commit();\r\n+\t\t\r\n+\t\tem.clear();\r\n+\r\n+\t\tint nTranslatableAfter = count(UNJOINED_SUBCLASSES);\r\n+\t\tint nTranslationAfter  = count(Translation.class);\r\n+\t\t\r\n+\t\tassertEquals(nTranslatableBefore+3, nTranslatableAfter);\r\n+\t\tassertEquals(nTranslationBefore+4, nTranslationAfter);\r\n+\t\t\r\n+\t\t/**\r\n+\t\t * Verify that if A refers to B then A must be a member of the set \r\n+\t\t * referred by B\r\n+\t\t */\r\n+\t\tem.getTransaction().begin();\r\n+\t\tList<Translation> result = em.createQuery(\"SELECT p FROM Translation p\")\r\n+\t\t\t.getResultList();\r\n+\t\tassertTrue(!result.isEmpty());\r\n+\t\tfor (Translation translation : result) {\r\n+\t\t\tassertTrue(translation.getTranslatable()\r\n+\t\t\t\t\t.getTranslations().contains(translation));\r\n+\t\t}\r\n+\t\tem.getTransaction().rollback();\r\n+\t}\r\n+\t\r\n+\t\r\n+\tvoid linkConsistently(Translation translation, Translatable translatable) {\r\n+\t\ttranslatable.addTranslation(translation);\r\n+\t\ttranslation.setTranslatable(translatable);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Count the number of instances in the given class by aggregate JPQL query.\r\n+\t */\r\n+\tpublic int count(Class c) {\r\n+\t\tOpenJPAEntityManager em = emf.createEntityManager();\r\n+\t\treturn ((Number) em.createQuery(\"SELECT COUNT(p) FROM \" + \r\n+\t\t\t\tc.getSimpleName() + \" p\").getSingleResult()).intValue();\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Count total number of instances of all the given classes by separate JPQL\r\n+\t * aggregate query. Useful when a base class has unjoined subclasses.\r\n+\t */\r\n+\tpublic int count(Class... classes) {\r\n+\t\tint total = 0;\r\n+\t\tfor (Class c:classes) {\r\n+\t\t\ttotal += count(c);\r\n+\t\t}\r\n+\t\treturn total;\r\n+\t}\r\n+\t\r\n+}\r"},{"sha":"f995bfaedbc380301d58b946c703cf47d75c67ae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translatable.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translatable.java","raw_url":"https://github.com/apache/openjpa/raw/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translatable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translatable.java?ref=63c48992274fce84b2c08bf8bbe6df024736557c","patch":"@@ -0,0 +1,57 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.OneToMany;\r\n+\r\n+/**\r\n+ * An abstract persistent class used as root of inheritance hierarchy and \r\n+ * using table-per-concrete-class inheritance strategy.\r\n+ * \r\n+ * For a more detailed description of the domain featureSelection to which this receiver\r\n+ * belongs\r\n+ * @see TestTablePerClassInheritanceWithAbstractRoot\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+@Inheritance(strategy=InheritanceType.TABLE_PER_CLASS)\r\n+public abstract class Translatable extends BaseEntity {\r\n+\t@OneToMany(mappedBy=\"translatable\", cascade=CascadeType.PERSIST)\r\n+\tprivate Set<Translation> translations;\r\n+\t\r\n+\tpublic void addTranslation(Translation t) {\r\n+\t\tif (translations == null)\r\n+\t\t\ttranslations = new HashSet<Translation>();\r\n+\t\ttranslations.add(t);\r\n+\t}\r\n+\t\r\n+\tpublic Set<Translation> getTranslations() {\r\n+\t\treturn Collections.unmodifiableSet(translations);\r\n+\t}\r\n+}\r"},{"sha":"1b93a0390c2e8a357d4dde4b371463e54c6e6659","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translation.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translation.java","raw_url":"https://github.com/apache/openjpa/raw/63c48992274fce84b2c08bf8bbe6df024736557c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translation.java?ref=63c48992274fce84b2c08bf8bbe6df024736557c","patch":"@@ -0,0 +1,51 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name=\"TRANSLATIONS\")\r\n+/**\r\n+ * An persistent class that refers to a polymorphic uni-cardinality relation. \r\n+ * The polymorphic relation itself derives from an abstract class that uses\r\n+ * table-per-class inheritance strategy.\r\n+ *   \r\n+ * For a more detailed description of the domain featureSelection to which this receiver\r\n+ * belongs\r\n+ * @see TestTablePerClassInheritanceWithAbstractRoot\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+public class Translation extends BaseEntity {\r\n+\t@ManyToOne(cascade=CascadeType.PERSIST)\r\n+\tprivate Translatable translatable;\r\n+\r\n+\tpublic Translatable getTranslatable() {\r\n+\t\treturn translatable;\r\n+\t}\r\n+\r\n+\tpublic void setTranslatable(Translatable translatable) {\r\n+\t\tthis.translatable = translatable;\r\n+\t}\r\n+}\r"}]}

