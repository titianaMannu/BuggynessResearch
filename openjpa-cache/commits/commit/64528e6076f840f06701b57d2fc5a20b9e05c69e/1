{"sha":"64528e6076f840f06701b57d2fc5a20b9e05c69e","node_id":"MDY6Q29tbWl0MjA2MzY0OjY0NTI4ZTYwNzZmODQwZjA2NzAxYjU3ZDJmYzVhMjBiOWUwNWM2OWU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-02-02T23:52:58Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-02-02T23:52:58Z"},"message":"OPENJPA-1328:\nCheck cacheability in ClassMetaData instead of AbstractDataCache.\nBased on patch for 1.2.x by Jody Grassel\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@905842 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"939b2b169d09756f33a6c7ad269e93a92b2ff309","url":"https://api.github.com/repos/apache/openjpa/git/trees/939b2b169d09756f33a6c7ad269e93a92b2ff309"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/64528e6076f840f06701b57d2fc5a20b9e05c69e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/64528e6076f840f06701b57d2fc5a20b9e05c69e","html_url":"https://github.com/apache/openjpa/commit/64528e6076f840f06701b57d2fc5a20b9e05c69e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/64528e6076f840f06701b57d2fc5a20b9e05c69e/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"302530ec46de87bf1110833a7e7eabaed4d9ad7d","url":"https://api.github.com/repos/apache/openjpa/commits/302530ec46de87bf1110833a7e7eabaed4d9ad7d","html_url":"https://github.com/apache/openjpa/commit/302530ec46de87bf1110833a7e7eabaed4d9ad7d"}],"stats":{"total":147,"additions":96,"deletions":51},"files":[{"sha":"00d30264b636b43802f8bca285331d3ebb160ff6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","status":"modified","additions":0,"deletions":38,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/64528e6076f840f06701b57d2fc5a20b9e05c69e/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/64528e6076f840f06701b57d2fc5a20b9e05c69e/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java?ref=64528e6076f840f06701b57d2fc5a20b9e05c69e","patch":"@@ -489,42 +489,4 @@ public void setExcludedTypes(String types) {\n             StringUtils.isEmpty(types) ? null : new HashSet(Arrays\n                 .asList(Strings.split(types, \";\", 0)));\n     }\n-\n-    /**\n-     * Determine whether a provided class can be applied to this cache.\n-     * \n-     * <P>\n-     * The algorithm used to determine which types apply is as follows:\n-     * <UL>\n-     * <LI>If neither included nor excluded types are found all types will be\n-     * used.</LI>\n-     * <LI>If included types are specified and excluded types are not specified\n-     * <b>only</b> the included types will be used.</LI>\n-     * <LI>If included types are not specified and excluded types are specified\n-     * all types will be used <b>except</b> those which are explicitly excluded.\n-     * </LI>\n-     * <LI>If both included types and excluded types are specified then\n-     * <b>only</b> the included types will be used. If an included type is also\n-     * an excluded type the <b>excluded</b> setting will take precedence (ie \n-     * the type will not be used).</LI>\n-     * </UL>\n-     * \n-     * @param className\n-     *            A class which may be used by this plugin.\n-     * @return True if the type should be used, otherwise false.\n-     */\n-    public boolean isCacheableType(String classname) {\n-        boolean rval = true;\n-        if (_includedTypes != null && ! _includedTypes.isEmpty()) { \n-            if(!_includedTypes.contains(classname)) {\n-                rval = false;\n-            }\n-        }\n-        if (_excludedTypes != null && ! _excludedTypes.isEmpty()) { \n-            if(_excludedTypes.contains(classname)) {\n-                rval = false;\n-            }\n-        }\n-        return rval;\n-    }\n }"},{"sha":"449ceba0c07d9fa91a4f535026862ed5def84ffc","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":94,"deletions":13,"changes":107,"blob_url":"https://github.com/apache/openjpa/blob/64528e6076f840f06701b57d2fc5a20b9e05c69e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/64528e6076f840f06701b57d2fc5a20b9e05c69e/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=64528e6076f840f06701b57d2fc5a20b9e05c69e","patch":"@@ -37,7 +37,6 @@\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n-import org.apache.openjpa.datacache.AbstractDataCache;\n import org.apache.openjpa.datacache.DataCache;\n import org.apache.openjpa.enhance.PCRegistry;\n import org.apache.openjpa.enhance.Reflection;\n@@ -46,6 +45,7 @@\n import org.apache.openjpa.lib.meta.SourceTracker;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.lib.xml.Commentable;\n import org.apache.openjpa.util.BigDecimalId;\n import org.apache.openjpa.util.BigIntegerId;\n@@ -67,6 +67,8 @@\n import org.apache.openjpa.util.ImplHelper;\n import serp.util.Strings;\n \n+import org.apache.openjpa.lib.conf.Configurations;\n+\n /**\n  * Contains metadata about a persistent type.\n  * This metadata is available both at enhancement time and runtime.\n@@ -190,6 +192,8 @@\n     private FetchGroup[] _customFGs = null;\n     private boolean _intercepting = false;\n \n+    private Boolean _isCacheable = null; \n+\n     /**\n      * Constructor. Supply described type and repository.\n      */\n@@ -1342,7 +1346,7 @@ public String getDataCacheName() {\n             else {\n                 _cacheName = DataCache.NAME_DEFAULT;\n             }\n-            if(!isCacheable(_cacheName)) { \n+            if(!isCacheable()) { \n                _cacheName = null; \n             }\n         }\n@@ -2363,16 +2367,93 @@ public int compare(Object o1, Object o2) {\n      * \n      * @return true if the DataCache will accept this type, otherwise false.\n      */\n-    private boolean isCacheable(String candidateCacheName) {\n-        boolean rval = true;\n-        DataCache cache =\n-            getRepository().getConfiguration().getDataCacheManagerInstance()\n-                .getDataCache(candidateCacheName);\n-        if (cache != null && (cache instanceof AbstractDataCache)) {\n-            AbstractDataCache adc = (AbstractDataCache) cache;\n-            if (!adc.isCacheableType(getDescribedType().getName()))\n-                rval = false;\n-        }\n-        return rval;\n+    private boolean isCacheable() {\n+        if (_isCacheable != null) {\n+            return _isCacheable.booleanValue();\n+        }\n+        setIsCacheable(true, false);\n+        return _isCacheable.booleanValue();\n+    }\n+    \n+    /**\n+     * <p>\n+     * Set whether or not the class represented by this ClassMetaData object should be included in the datacache. The\n+     * arguments provided are *hints* as to whether the class should be included in the datacache, and can be overridden\n+     * by the configuration set in openjpa.Datacache.\n+     * </p>\n+     * \n+     * <p>\n+     * Rules for this determination are:\n+     * </p>\n+     * <ol>\n+     * <li>If the class shows up in the list of excluded types, it does not get cached, period.</li>\n+     * <li>If the class does not show up in the excluded types, but the included types field is set (ie, has at least\n+     * one class), then:\n+     * <ol>\n+     * <li>If the class is listed in the include list, then it gets cached</li>\n+     * <li>If the class is set as cacheable by the @Datacache annotation, it gets cached</li>\n+     * <li>If neither a or b are true, then the class does not get cached</li>\n+     * </ol>\n+     * </li>\n+     * <li>If neither the include or exclude lists are defined, then go along with the value passed into the argument,\n+     * which is either the default value (true) or whatever was set with the @Datacache annotation</li>\n+     * </ol>\n+     * \n+     * @param isCacheable\n+     *            Hint whether this class should be included in the datacache. Default behavior is yes, though the\n+     *            @Datacache annotation can specify if it should not be cached.\n+     * @param annotationOverride\n+     *            Whether this hint originated from the @Datacache annotation or whether this is the default \"yes\" hint.\n+     *            The origination of the hint influences the decision making process in rule #2b.\n+     * \n+     */\n+    public void setIsCacheable(boolean isCacheable, boolean annotationOverride) {\n+       Options dataCacheOptions = getDataCacheOptions();\n+       Set excludedTypes = extractDataCacheClassListing(dataCacheOptions.getProperty(\"ExcludedTypes\", null));\n+       Set types = extractDataCacheClassListing(dataCacheOptions.getProperty(\"Types\", null));\n+       \n+       String className = getDescribedType().getName();\n+       if (excludedTypes != null && excludedTypes.contains(className)) {\n+           // Rule #1\n+           _isCacheable = Boolean.FALSE;\n+       } else if (types != null) {\n+           // Rule #2\n+           if ((annotationOverride && isCacheable) || (types.contains(className))) {\n+               _isCacheable = Boolean.TRUE;\n+           } else {\n+               _isCacheable = Boolean.FALSE;\n+           }\n+       } else {\n+           // Rule #3\n+           _isCacheable = isCacheable ? Boolean.TRUE : Boolean.FALSE;\n+       }\n+    }\n+    \n+    /**\n+     * Extract all of the DataCache plugin options from the configuration\n+     * \n+     */\n+    private Options getDataCacheOptions() {\n+       String dataCacheConfig = getRepository().getConfiguration().getDataCache();\n+        Options dataCacheOptions = Configurations.parseProperties(Configurations.getProperties(dataCacheConfig));\n+        return dataCacheOptions;\n+    }\n+    \n+    /**\n+     * Tool to extract classes defined in the datacache include and exclude list into\n+     * individual entries in a Set.\n+     * \n+     */\n+    private final Set extractDataCacheClassListing(String classList) {\n+       if (classList == null || classList.length() == 0) {\n+           return null;\n+       }\n+       \n+       HashSet returnSet = new HashSet();\n+       String[] entries = classList.split(\";\");\n+       for (int index = 0; index < entries.length; index++) {\n+           returnSet.add(entries[index]);\n+       }\n+       return returnSet;\n     }\n }"},{"sha":"71581f48bdc7056066eb8847eac14eae5fdd6636","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/64528e6076f840f06701b57d2fc5a20b9e05c69e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/64528e6076f840f06701b57d2fc5a20b9e05c69e/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=64528e6076f840f06701b57d2fc5a20b9e05c69e","patch":"@@ -748,6 +748,8 @@ else if (cache.enabled())\n                 org.apache.openjpa.datacache.DataCache.NAME_DEFAULT);\n         else\n             meta.setDataCacheName(null);\n+        \n+        meta.setIsCacheable(cache.enabled(), true);\n     }\n \n     /**"}]}

