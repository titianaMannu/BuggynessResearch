{"sha":"64be0455c3a675b20662303b832d6e6efa25fb97","node_id":"MDY6Q29tbWl0MjA2MzY0OjY0YmUwNDU1YzNhNjc1YjIwNjYyMzAzYjgzMmQ2ZTZlZmEyNWZiOTc=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-02T23:09:13Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-02T23:09:13Z"},"message":"OPENJPA-1549: Optimize StateManagerImpl.proxyFields(..).\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@918245 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ab24580eb5ce27003061b4f3ff712162342449bd","url":"https://api.github.com/repos/apache/openjpa/git/trees/ab24580eb5ce27003061b4f3ff712162342449bd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/64be0455c3a675b20662303b832d6e6efa25fb97","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/64be0455c3a675b20662303b832d6e6efa25fb97","html_url":"https://github.com/apache/openjpa/commit/64be0455c3a675b20662303b832d6e6efa25fb97","comments_url":"https://api.github.com/repos/apache/openjpa/commits/64be0455c3a675b20662303b832d6e6efa25fb97/comments","author":null,"committer":null,"parents":[{"sha":"8248d81a683ff3a23cccfee3394e5784bdf14760","url":"https://api.github.com/repos/apache/openjpa/commits/8248d81a683ff3a23cccfee3394e5784bdf14760","html_url":"https://github.com/apache/openjpa/commit/8248d81a683ff3a23cccfee3394e5784bdf14760"}],"stats":{"total":64,"additions":58,"deletions":6},"files":[{"sha":"f85307f1c8f283a55742b6dad243c52609a137f6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/64be0455c3a675b20662303b832d6e6efa25fb97/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/64be0455c3a675b20662303b832d6e6efa25fb97/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=64be0455c3a675b20662303b832d6e6efa25fb97","patch":"@@ -2890,13 +2890,15 @@ void proxyFields(boolean reset, boolean replaceNull) {\n \n         lock();\n         try {\n-            for (int i = 0, len = _loaded.length(); i < len; i++) {\n-                if (_loaded.get(i)) {\n-                    provideField(_pc, _single, i);\n-                    if (_single.proxy(reset, replaceNull))\n-                        replaceField(_pc, _single, i);\n-                    else\n+            for (FieldMetaData fmd : _meta.getProxyFields()) {\n+                int index = fmd.getIndex();\n+                if (_loaded.get(index)) {\n+                    provideField(_pc, _single, index);\n+                    if (_single.proxy(reset, replaceNull)) {\n+                        replaceField(_pc, _single, index);\n+                    } else {\n                         _single.clear();\n+                    }\n                 }\n             }\n         } finally {"},{"sha":"75e394faf9f12cd38954c524570ede0ccab5bead","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/64be0455c3a675b20662303b832d6e6efa25fb97/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/64be0455c3a675b20662303b832d6e6efa25fb97/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=64be0455c3a675b20662303b832d6e6efa25fb97","patch":"@@ -23,11 +23,14 @@\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n import java.security.AccessController;\n+import java.sql.Timestamp;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Calendar;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Comparator;\n+import java.util.Date;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n@@ -64,6 +67,7 @@\n import org.apache.openjpa.util.MetaDataException;\n import org.apache.openjpa.util.ObjectId;\n import org.apache.openjpa.util.OpenJPAId;\n+import org.apache.openjpa.util.Proxy;\n import org.apache.openjpa.util.ShortId;\n import org.apache.openjpa.util.StringId;\n import org.apache.openjpa.util.UnsupportedException;\n@@ -207,6 +211,7 @@\n     private FieldMetaData[] _definedFields = null;\n     private FieldMetaData[] _listingFields = null;\n     private FieldMetaData[] _allListingFields = null;\n+    private FieldMetaData[] _allProxyFields = null;\n     private FetchGroup[] _fgs = null;\n     private FetchGroup[] _customFGs = null;\n     private boolean _intercepting = false;\n@@ -976,6 +981,39 @@ public boolean isAccessibleField(String field) {\n         return false;\n     }\n \n+    /**\n+     * Return all fields that are types that need to be wrappered by a proxy.\n+     * The types that need to be proxied are:\n+     * <p>\n+     *  <li>org.apache.openjpa.meta.JavaTypes.CALENDAR\n+     *  <li>org.apache.openjpa.meta.JavaTypes.COLLECTION\n+     *  <li>org.apache.openjpa.meta.JavaTypes.DATE\n+     *  <li>org.apache.openjpa.meta.JavaTypes.MAP\n+     *  <li>org.apache.openjpa.meta.JavaTypes.OBJECT\n+     */\n+    public FieldMetaData[] getProxyFields() {\n+        if (_allProxyFields == null) {\n+            // Make sure _allFields has been initialized\n+            if (_allFields == null) {\n+                getFields();\n+            }\n+            List<FieldMetaData> res = new ArrayList<FieldMetaData>();\n+            for (FieldMetaData fmd : _allFields) {\n+                switch (fmd.getDeclaredTypeCode()) {\n+                    case JavaTypes.CALENDAR:\n+                    case JavaTypes.COLLECTION:\n+                    case JavaTypes.DATE:\n+                    case JavaTypes.MAP:\n+                    case JavaTypes.OBJECT:\n+                        res.add(fmd);\n+                        break;\n+                }\n+            }\n+            _allProxyFields = res.toArray(new FieldMetaData[res.size()]);\n+        }\n+        return _allProxyFields;\n+    }\n+    \n     /**\n      * Return all field metadata, including superclass fields.\n      */\n@@ -1603,6 +1641,7 @@ protected void clearAllFieldCache() {\n         _allFields = null;\n         _allDFGFields = null;\n         _allPKFields = null;\n+        _allProxyFields = null;\n         _definedFields = null;\n         _listingFields = null;\n         _allListingFields = null;"},{"sha":"620fd14abb3c1b91c50de4afbb6e110fe1bfabd5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestClassMetaData.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/64be0455c3a675b20662303b832d6e6efa25fb97/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/64be0455c3a675b20662303b832d6e6efa25fb97/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestClassMetaData.java?ref=64be0455c3a675b20662303b832d6e6efa25fb97","patch":"@@ -88,6 +88,17 @@ public void testClassDefaults() {\n         assertTrue(_metaTest1.getRequiresExtent());\n     }\n \n+    public void testGetProxyFields(){\n+        FieldMetaData[] proxies = _metaTest3.getProxyFields();\n+        assertEquals(2, proxies.length);\n+        \n+        proxies = _metaTest1.getProxyFields();\n+        assertEquals(2, proxies.length);\n+        \n+        proxies = _metaTest5.getProxyFields();\n+        assertEquals(0, proxies.length);\n+\n+    }\n     /**\n      * Test non-persistent fields.\n      */"}]}

