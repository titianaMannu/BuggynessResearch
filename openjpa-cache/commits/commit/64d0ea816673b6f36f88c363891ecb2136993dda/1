{"sha":"64d0ea816673b6f36f88c363891ecb2136993dda","node_id":"MDY6Q29tbWl0MjA2MzY0OjY0ZDBlYTgxNjY3M2I2ZjM2Zjg4YzM2Mzg5MWVjYjIxMzY5OTNkZGE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-31T19:41:46Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-31T19:41:46Z"},"message":"OPENJPA-135, OPENJPA-420 Merge from ../branches/1.0.x. svn merge -c 617164\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@617200 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9c0516ae74017bd189d93260daac643bf7d04a1a","url":"https://api.github.com/repos/apache/openjpa/git/trees/9c0516ae74017bd189d93260daac643bf7d04a1a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/64d0ea816673b6f36f88c363891ecb2136993dda","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/64d0ea816673b6f36f88c363891ecb2136993dda","html_url":"https://github.com/apache/openjpa/commit/64d0ea816673b6f36f88c363891ecb2136993dda","comments_url":"https://api.github.com/repos/apache/openjpa/commits/64d0ea816673b6f36f88c363891ecb2136993dda/comments","author":null,"committer":null,"parents":[{"sha":"171dc5d46aeb2084b2fc2f92079033117b413ac4","url":"https://api.github.com/repos/apache/openjpa/commits/171dc5d46aeb2084b2fc2f92079033117b413ac4","html_url":"https://github.com/apache/openjpa/commit/171dc5d46aeb2084b2fc2f92079033117b413ac4"}],"stats":{"total":113,"additions":105,"deletions":8},"files":[{"sha":"9169395b8f8e429d3c27997d792434fce1504343","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/64d0ea816673b6f36f88c363891ecb2136993dda/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/64d0ea816673b6f36f88c363891ecb2136993dda/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=64d0ea816673b6f36f88c363891ecb2136993dda","patch":"@@ -395,6 +395,13 @@ private Expression evalSelectClause(QueryExpressions exps) {\n \n         JPQLNode selectNode = root();\n \n+        JPQLNode selectClause = selectNode.\n+            findChildByID(JJTSELECTCLAUSE, false);\n+        if (selectClause != null && selectClause.hasChildID(JJTDISTINCT))\n+            exps.distinct = exps.DISTINCT_TRUE | exps.DISTINCT_AUTO;\n+        else\n+            exps.distinct = exps.DISTINCT_FALSE;\n+\n         JPQLNode constructor = selectNode.findChildByID(JJTCONSTRUCTOR, true);\n         if (constructor != null) {\n             // build up the fully-qualified result class name by\n@@ -403,16 +410,8 @@ private Expression evalSelectClause(QueryExpressions exps) {\n             exps.resultClass = resolver.classForName(resultClassName, null);\n \n             // now assign the arguments to the select clause as the projections\n-            exps.distinct = exps.DISTINCT_FALSE;\n             return assignProjections(right(constructor), exps);\n         } else {\n-            JPQLNode selectClause = selectNode.\n-                findChildByID(JJTSELECTCLAUSE, false);\n-            if (selectClause != null && selectClause.hasChildID(JJTDISTINCT))\n-                exps.distinct = exps.DISTINCT_TRUE | exps.DISTINCT_AUTO;\n-            else\n-                exps.distinct = exps.DISTINCT_FALSE;\n-\n             // handle SELECT clauses\n             JPQLNode expNode = selectNode.\n                 findChildByID(JJTSELECTEXPRESSIONS, true);"},{"sha":"2f8bcb5625f7d20fffb0e17d8ec2a2b5ea39b20e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDistinctQueries.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/64d0ea816673b6f36f88c363891ecb2136993dda/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDistinctQueries.java","raw_url":"https://github.com/apache/openjpa/raw/64d0ea816673b6f36f88c363891ecb2136993dda/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDistinctQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDistinctQueries.java?ref=64d0ea816673b6f36f88c363891ecb2136993dda","patch":"@@ -0,0 +1,98 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n+import org.apache.openjpa.persistence.models.company.fetchlazy.ProductOrder;\r\n+import org.apache.openjpa.persistence.models.company.fetchlazy.LineItem;\r\n+import org.apache.openjpa.persistence.models.company.fetchlazy.Product;\r\n+import org.apache.openjpa.persistence.models.company.fetchlazy.Customer;\r\n+import org.apache.openjpa.persistence.models.company.fetchlazy.Address;\r\n+import org.apache.openjpa.persistence.models.company.fetchlazy.Company;\r\n+import org.apache.openjpa.persistence.models.company.fetchlazy.Employee;\r\n+import org.apache.openjpa.persistence.models.company.fetchlazy.PartTimeEmployee;\r\n+import org.apache.openjpa.persistence.models.company.fetchlazy.FullTimeEmployee;\r\n+import org.apache.openjpa.persistence.models.company.fetchlazy.Person;\r\n+\r\n+public class TestDistinctQueries extends SingleEMTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(Address.class, Company.class, Customer.class, Employee.class,\r\n+            FullTimeEmployee.class, LineItem.class, PartTimeEmployee.class,\r\n+            Person.class, Product.class, ProductOrder.class, CLEAR_TABLES);\r\n+\r\n+        ProductOrder order = new ProductOrder();\r\n+        LineItem item0 = new LineItem();\r\n+        LineItem item1 = new LineItem();\r\n+        LineItem item2 = new LineItem();\r\n+        order.getItems().add(item0);\r\n+        order.getItems().add(item1);\r\n+        order.getItems().add(item2);\r\n+\r\n+        em.getTransaction().begin();\r\n+        em.persist(order);\r\n+        em.persist(item0);\r\n+        em.persist(item1);\r\n+        em.persist(item2);\r\n+        em.getTransaction().commit();\r\n+    }\r\n+\r\n+    public void testDuplicateResultsInNonDistinctJoinFetchQuery() {\r\n+        List l = em.createQuery(\"select o from LAZ_ProductOrder o \" +\r\n+            \"left join fetch o.items\").getResultList();\r\n+        assertEquals(3, l.size());\r\n+    }\r\n+\r\n+    public void testDuplicateResultsInNonDistinctJoinQuery() {\r\n+        List l = em.createQuery(\"select o from LAZ_ProductOrder o \" +\r\n+            \"left join o.items item\").getResultList();\r\n+        assertEquals(3, l.size());\r\n+    }\r\n+\r\n+    public void testNoDuplicateResultsInDistinctQuery() {\r\n+        List l = em.createQuery(\"select distinct o from LAZ_ProductOrder o \" +\r\n+            \"left join o.items item\").getResultList();\r\n+        assertEquals(1, l.size());\r\n+    }\r\n+\r\n+    public void testDuplicateResultsInNonDistinctConstructorJoinQuery() {\r\n+        List l = em.createQuery(\"select new \" +\r\n+            \"org.apache.openjpa.persistence.query.TestDistinctQueries$Holder(\" +\r\n+            \"o.id) from LAZ_ProductOrder o \" +\r\n+            \"left join o.items item\").getResultList();\r\n+        assertEquals(3, l.size());\r\n+    }\r\n+\r\n+    public void testNoDuplicateResultsInDistinctConstructorQuery()\r\n+        throws NoSuchMethodException {\r\n+        List l = em.createQuery(\"select distinct new \" +\r\n+            \"org.apache.openjpa.persistence.query.TestDistinctQueries$Holder(\" +\r\n+            \"o.id) from LAZ_ProductOrder o \" +\r\n+            \"left join o.items item\").getResultList();\r\n+        assertEquals(1, l.size());\r\n+    }\r\n+\r\n+    public static class Holder {\r\n+        public Holder(long id) {\r\n+            // we don't actually do anything with the returned data\r\n+        }\r\n+    }\r\n+}\r"}]}

