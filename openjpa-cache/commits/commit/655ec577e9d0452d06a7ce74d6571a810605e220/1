{"sha":"655ec577e9d0452d06a7ce74d6571a810605e220","node_id":"MDY6Q29tbWl0MjA2MzY0OjY1NWVjNTc3ZTlkMDQ1MmQwNmE3Y2U3NGQ2NTcxYTgxMDYwNWUyMjA=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-07-31T22:54:25Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-07-31T22:54:25Z"},"message":"OPENJPA-1218:\nEvict subclasses automatically when called from JPA facade.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@799764 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"69c7c64080c02400543f69ae358accba2a7b1578","url":"https://api.github.com/repos/apache/openjpa/git/trees/69c7c64080c02400543f69ae358accba2a7b1578"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/655ec577e9d0452d06a7ce74d6571a810605e220","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/655ec577e9d0452d06a7ce74d6571a810605e220","html_url":"https://github.com/apache/openjpa/commit/655ec577e9d0452d06a7ce74d6571a810605e220","comments_url":"https://api.github.com/repos/apache/openjpa/commits/655ec577e9d0452d06a7ce74d6571a810605e220/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"ff932542e851f486df77726ee5ea2c9fe65a901a","url":"https://api.github.com/repos/apache/openjpa/commits/ff932542e851f486df77726ee5ea2c9fe65a901a","html_url":"https://github.com/apache/openjpa/commit/ff932542e851f486df77726ee5ea2c9fe65a901a"}],"stats":{"total":98,"additions":38,"deletions":60},"files":[{"sha":"31dc56ab71108f75dc0b9070d627ea6f3a4f21e9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentDataCache.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/655ec577e9d0452d06a7ce74d6571a810605e220/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/655ec577e9d0452d06a7ce74d6571a810605e220/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentDataCache.java?ref=655ec577e9d0452d06a7ce74d6571a810605e220","patch":"@@ -140,9 +140,10 @@ protected void removeAllInternal(Class<?> cls, boolean subs) {\n         _cache = newCacheMap(); \n         for (Object o : orig.values()) {\n             Class<?> curClass = ((DataCachePCData) o).getType();\n-            if (cls == curClass\n-                || (curClass != null && curClass.isAssignableFrom(cls))) {\n-                orig.remove(((DataCachePCData) o).getId());\n+            if (subs) {\n+                if (cls == curClass || (cls != null && cls.isAssignableFrom(curClass))) {\n+                    orig.remove(((DataCachePCData) o).getId());\n+                }\n             }\n         }\n         _cache.putAll(orig, false);"},{"sha":"58a5c0d9652824ce6329bc52e8e382627b1aec47","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPACache.java","status":"modified","additions":33,"deletions":56,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/655ec577e9d0452d06a7ce74d6571a810605e220/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPACache.java","raw_url":"https://github.com/apache/openjpa/raw/655ec577e9d0452d06a7ce74d6571a810605e220/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPACache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPACache.java?ref=655ec577e9d0452d06a7ce74d6571a810605e220","patch":"@@ -28,8 +28,7 @@\n public class TestJPACache extends SingleEMFTestCase {\n \n     public void setUp() {\n-        super.setUp(CachedPerson.class, CachedManager.class,\n-            CachedEmployee.class, \"openjpa.DataCache\", \"true\",\n+        super.setUp(CachedPerson.class, CachedManager.class, CachedEmployee.class, \"openjpa.DataCache\", \"true\",\n             \"openjpa.RemoteCommitProvider\", \"sjvm\");\n     }\n \n@@ -79,8 +78,7 @@ private void populate() {\n     }\n \n     /**\n-     * Ensure the cached returned by emf.getCache supports the JPA and OpenJPA\n-     * interfaces. Expected interfaces are\n+     * Ensure the cached returned by emf.getCache supports the JPA and OpenJPA interfaces. Expected interfaces are\n      * <ul>\n      * <li>javax.persistence.Cache</li>\n      * <li>org.apache.openjpa.persistence.StoreCache</li>\n@@ -94,8 +92,7 @@ public void testInterfacesReturned() {\n     }\n \n     /**\n-     * Ensure that an Entity is not inserted in the cache until the transaction\n-     * commits.\n+     * Ensure that an Entity is not inserted in the cache until the transaction commits.\n      */\n     public void testContains() {\n         EntityManager em = emf.createEntityManager();\n@@ -120,19 +117,13 @@ public void testContains() {\n     }\n \n     /**\n-     * Evict a single entity instance of type CachedPerson from the cache.\n-     * Testcase will fail if\n+     * Evict a single entity instance of type CachedPerson from the cache. Testcase will fail if\n      * <ul>\n-     * <li>CachedPerson id:10 and 11 are not in the cache when the test starts.\n-     * </li>\n-     * <li>CachedPerson id:1 <b>is</b> found in the cache when the test starts.\n-     * </li>\n-     * <li>CachedPerson id:10 is not found in the cache after evicting\n-     * CachedPerson id:11</li>\n-     * <li>CachedPerson id:11 is found in the cache after evicting CachedPerson\n-     * id:11</li>\n-     * <li>CachedPerson id:1 is found in the cache after evicting CachedPerson\n-     * id:11</li>\n+     * <li>CachedPerson id:10 and 11 are not in the cache when the test starts.</li>\n+     * <li>CachedPerson id:1 <b>is</b> found in the cache when the test starts.</li>\n+     * <li>CachedPerson id:10 is not found in the cache after evicting CachedPerson id:11</li>\n+     * <li>CachedPerson id:11 is found in the cache after evicting CachedPerson id:11</li>\n+     * <li>CachedPerson id:1 is found in the cache after evicting CachedPerson id:11</li>\n      * </ul>\n      */\n     public void testEvictInstance() {\n@@ -149,18 +140,13 @@ public void testEvictInstance() {\n     }\n \n     /**\n-     * Ensure that evict(Class cls) evicts only the specified class. This test\n-     * will fail if\n+     * Ensure that evict(Class cls) evicts the specified class and any subclasses. This test will fail if\n      * <ul>\n-     * <li>Any of the entites created in populate() are not found in the cache\n-     * before calling evict()</li>\n-     * <li>Any instance of CachedPerson from populate() is found in the cache\n-     * after calling evict(CachedPerson.class)</li>\n-     * <li>Any instance of CachedManager or CachedEmployee which previously\n-     * existed in the cache was evicted after calling evict(CachedPerson.class)\n-     * </li>\n+     * <li>Any of the entites created in populate() are not found in the cache before calling evict()</li>\n+     * <li>Any instance of CachedPerson from populate() is found in the cache after\n+     *   calling evict(CachedPerson.class)</li>\n+     * <li>Any instance of CachedManager or CachedEmployee is found in the cache after calling evict()</li>\n      * </ul>\n-     * \n      */\n     public void testEvictClass() {\n         populate();\n@@ -174,20 +160,18 @@ public void testEvictClass() {\n \n         assertNotInCache(CachedPerson.class, 10);\n         assertNotInCache(CachedPerson.class, 11);\n-        assertInCache(CachedEmployee.class, 13);\n-        assertInCache(CachedEmployee.class, 14);\n-        assertInCache(CachedManager.class, 12);\n+        assertNotInCache(CachedEmployee.class, 13);\n+        assertNotInCache(CachedEmployee.class, 14);\n+        assertNotInCache(CachedManager.class, 12);\n \n     }\n \n     /**\n-     * Ensure the cache is cleared after calling evictAll. This test will fail\n-     * if :\n+     * Ensure the cache is cleared after calling evictAll. This test will fail if :\n      * <ul>\n-     * <li>Any of the entities created in populate() are not found in the cache\n-     * </li>\n-     * <li>Any of the entities which were in the cache before calling evictAll()\n-     * are still in the cache after calling evictAll()</li>\n+     * <li>Any of the entities created in populate() are not found in the cache</li>\n+     * <li>Any of the entities which were in the cache before calling evictAll() are still in the cache after calling\n+     * evictAll()</li>\n      * </ul>\n      * \n      */\n@@ -213,8 +197,7 @@ public void testEvictAll() {\n     public void testContainsNullEntity() {\n         try {\n             emf.getCache().contains(null, 1);\n-            fail(\"Expected ArgumentException when calling  \"\n-                + \"contains(<null>, <nonNull>)\");\n+            fail(\"Expected ArgumentException when calling  \" + \"contains(<null>, <nonNull>)\");\n         } catch (ArgumentException ae) {\n             // normal\n         }\n@@ -223,8 +206,7 @@ public void testContainsNullEntity() {\n     public void testContainsNonEntityClass() {\n         try {\n             emf.getCache().contains(Object.class, 1);\n-            fail(\"Expected ArgumentException when calling \"\n-                + \"contains(<nonEntityClass>, <nonNull>\");\n+            fail(\"Expected ArgumentException when calling \" + \"contains(<nonEntityClass>, <nonNull>\");\n         } catch (ArgumentException ae) {\n             // expected exception\n         }\n@@ -245,8 +227,7 @@ public void testContainsInvalidPrimaryKeyType() {\n     public void testEvictNullInstance() {\n         try {\n             emf.getCache().evict(null, 1);\n-            fail(\"Expected ArgumentException when calling \"\n-                + \"evict(<null>, <id\");\n+            fail(\"Expected ArgumentException when calling \" + \"evict(<null>, <id\");\n         } catch (ArgumentException ae) {\n             // expected exception\n         }\n@@ -255,8 +236,7 @@ public void testEvictNullInstance() {\n     public void testEvictNonEntityInstance() {\n         try {\n             emf.getCache().evict(Object.class, 1);\n-            fail(\"Expected ArgumentException when calling \"\n-                + \"evict(<null>, <id\");\n+            fail(\"Expected ArgumentException when calling \" + \"evict(<null>, <id\");\n         } catch (ArgumentException ae) {\n             // expected exception\n         }\n@@ -286,39 +266,36 @@ public void testEvictNullClass() {\n     public void testEvictNonEntity() {\n         try {\n             emf.getCache().evict(Object.class);\n-            fail(\"Expected ArgumentException when calling \"\n-                + \"evict(<nonEntity>\");\n+            fail(\"Expected ArgumentException when calling \" + \"evict(<nonEntity>\");\n         } catch (ArgumentException ae) {\n             // expected exception\n         }\n     }\n \n     /**\n-     * Convenience method. Asserts that the class & primary key do exist in the\n-     * cache\n+     * Convenience method. Asserts that the class & primary key do exist in the cache\n      * \n      * @param cls\n      *            Entity class.\n      * @param primaryKey\n      *            PrimaryKey of the entity.\n      */\n-    private void assertInCache(Class<?> cls, int primaryKey) {\n-        assertTrue(\n-            \"Expected \" + cls + \":\" + primaryKey + \" to exist in cache \", emf\n-                .getCache().contains(cls, primaryKey));\n+    private void assertInCache(Class<?> cls, Object primaryKey) {\n+        assertTrue(String.format(\"%s:%s should exist in cache\", cls.toString(), primaryKey.toString()), emf.getCache()\n+            .contains(cls, primaryKey));\n     }\n \n     /**\n-     * Convenience method. Assert that the class and primary key do not exist in\n-     * the cache\n+     * Convenience method. Assert that the class and primary key do not exist in the cache\n      * \n      * @param cls\n      *            Entity class.\n      * @param primaryKey\n      *            PrimaryKey of the entity.\n      */\n     private void assertNotInCache(Class<?> cls, Object primaryKey) {\n-        assertFalse(emf.getCache().contains(cls, primaryKey));\n+        assertFalse(String.format(\"%s:%s should not exist in cache\", cls.toString(), primaryKey.toString()), emf\n+            .getCache().contains(cls, primaryKey));\n     }\n \n }"},{"sha":"89ea57e3c0d5ef63e1bed4a721c716219a832ac4","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCacheImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/655ec577e9d0452d06a7ce74d6571a810605e220/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCacheImpl.java","raw_url":"https://github.com/apache/openjpa/raw/655ec577e9d0452d06a7ce74d6571a810605e220/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCacheImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCacheImpl.java?ref=655ec577e9d0452d06a7ce74d6571a810605e220","patch":"@@ -164,7 +164,7 @@ public void evict(Class cls) {\n         // Check MetaData throws a consistent exception with evict(Class,\n         // Object)\n         if(getMetaData(cls) != null) {\n-            _cache.removeAll(cls, false);\n+            _cache.removeAll(cls, true);\n         }\n     }\n }"}]}

