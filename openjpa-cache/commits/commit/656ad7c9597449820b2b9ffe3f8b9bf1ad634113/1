{"sha":"656ad7c9597449820b2b9ffe3f8b9bf1ad634113","node_id":"MDY6Q29tbWl0MjA2MzY0OjY1NmFkN2M5NTk3NDQ5ODIwYjJiOWZmZTNmOGI5YmYxYWQ2MzQxMTM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-05-01T15:49:23Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-05-01T15:49:23Z"},"message":"OPENJPA-1045. L2 cache included / excluded types may be specified via configuration properties\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@770730 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b37e0d88cddbfec03621812291c765def708ed48","url":"https://api.github.com/repos/apache/openjpa/git/trees/b37e0d88cddbfec03621812291c765def708ed48"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/656ad7c9597449820b2b9ffe3f8b9bf1ad634113","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/656ad7c9597449820b2b9ffe3f8b9bf1ad634113","html_url":"https://github.com/apache/openjpa/commit/656ad7c9597449820b2b9ffe3f8b9bf1ad634113","comments_url":"https://api.github.com/repos/apache/openjpa/commits/656ad7c9597449820b2b9ffe3f8b9bf1ad634113/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"552868ab955adc2a44c4b468184e1e7d7569cd58","url":"https://api.github.com/repos/apache/openjpa/commits/552868ab955adc2a44c4b468184e1e7d7569cd58","html_url":"https://github.com/apache/openjpa/commit/552868ab955adc2a44c4b468184e1e7d7569cd58"}],"stats":{"total":572,"additions":569,"deletions":3},"files":[{"sha":"ce4770fdb6ecd3ed88c78e029f1b2ea0463caed1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","status":"modified","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/656ad7c9597449820b2b9ffe3f8b9bf1ad634113/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/656ad7c9597449820b2b9ffe3f8b9bf1ad634113/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java?ref=656ad7c9597449820b2b9ffe3f8b9bf1ad634113","patch":"@@ -19,13 +19,17 @@\n package org.apache.openjpa.datacache;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.BitSet;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.event.RemoteCommitEvent;\n import org.apache.openjpa.event.RemoteCommitListener;\n@@ -35,6 +39,8 @@\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.concurrent.AbstractConcurrentEventManager;\n \n+import serp.util.Strings;\n+\n /**\n  * Abstract {@link DataCache} implementation that provides various\n  * statistics, logging, and timeout functionality common across cache\n@@ -65,6 +71,9 @@\n     private String _name = null;\n     private boolean _closed = false;\n     private String _schedule = null;\n+    \n+    protected Set<String> _includedTypes;\n+    protected Set<String> _excludedTypes;\n \n     public String getName() {\n         return _name;\n@@ -452,4 +461,73 @@ public Map getAll(List keys) {\n             resultMap.put(keys.get(i), get(keys.get(i)));\n         return resultMap;\n     }\n+    \n+    public Set<String> getTypes() {\n+        return _includedTypes;\n+    }\n+    \n+    public Set<String> getExcludedTypes() {\n+        return _excludedTypes;\n+    }\n+\n+    public void setTypes(Set<String> types) {\n+        _includedTypes = types;\n+    }\n+\n+    public void setTypes(String types) {\n+        _includedTypes =\n+            StringUtils.isEmpty(types) ? null : new HashSet<String>(Arrays\n+                .asList(Strings.split(types, \";\", 0)));\n+    }\n+\n+    public void setExcludedTypes(Set<String> types) {\n+        _excludedTypes = types;\n+    }\n+\n+    public void setExcludedTypes(String types) {\n+        _excludedTypes =\n+            StringUtils.isEmpty(types) ? null : new HashSet<String>(Arrays\n+                .asList(Strings.split(types, \";\", 0)));\n+    }\n+\n+    /**\n+     * Determine whether a provided class can be applied to this cache.\n+     * \n+     * <P>\n+     * The algorithm used to determine which types apply is as follows:\n+     * <UL>\n+     * <LI>If neither included nor excluded types are found all types will be\n+     * used.</LI>\n+     * <LI>If included types are specified and excluded types are not specified\n+     * <b>only</b> the included types will be used.</LI>\n+     * <LI>If included types are not specified and excluded types are specified\n+     * all types will be used <b>except</b> those which are explicitly excluded.\n+     * </LI>\n+     * <LI>If both included types and excluded types are specified then\n+     * <b>only</b> the included types will be used. If an included type is also\n+     * an excluded type the <b>excluded</b> setting will take precedence (ie \n+     * the type will not be used).</LI>\n+     * </UL>\n+     * \n+     * @param className\n+     *            A class which may be used by this plugin.\n+     * @return True if the type should be used, otherwise false.\n+     */\n+    public boolean isCacheableType(String classname) {\n+        boolean rval = true;\n+        if(rval) { \n+            System.out.format(\"ABDC\");\n+        }\n+        if (_includedTypes != null && ! _includedTypes.isEmpty()) { \n+            if(!_includedTypes.contains(classname)) {\n+                rval = false;\n+            }\n+        }\n+        if (_excludedTypes != null && ! _excludedTypes.isEmpty()) { \n+            if(_excludedTypes.contains(classname)) {\n+                rval = false;\n+            }\n+        }\n+        return rval;\n+    }\n }"},{"sha":"202d4bdfc5c1718f5758a641c96d0b4b50ba53f5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":32,"deletions":3,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/656ad7c9597449820b2b9ffe3f8b9bf1ad634113/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/656ad7c9597449820b2b9ffe3f8b9bf1ad634113/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=656ad7c9597449820b2b9ffe3f8b9bf1ad634113","patch":"@@ -37,6 +37,7 @@\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.datacache.AbstractDataCache;\n import org.apache.openjpa.datacache.DataCache;\n import org.apache.openjpa.enhance.PCRegistry;\n import org.apache.openjpa.enhance.Reflection;\n@@ -1340,14 +1341,23 @@ private void resolveDefinedSuperclassFields() {\n     }\n \n     /**\n-     * The name of the datacache to use for this class, or null if none.\n+     * The name of the datacache to use for this class. If this class is not\n+     * eligible for caching based its annotation or the cache configuration\n+     * null will be returned.\n+     * \n+     * @return The cache name, or null if this type should not be cached.\n      */\n     public String getDataCacheName() {\n         if (DEFAULT_STRING.equals(_cacheName)) {\n-            if (_super != null)\n+            if (_super != null) {\n                 _cacheName = getPCSuperclassMetaData().getDataCacheName();\n-            else\n+            }\n+            else {\n                 _cacheName = DataCache.NAME_DEFAULT;\n+            }\n+            if(!isCacheable(_cacheName)) { \n+               _cacheName = null; \n+            }\n         }\n         return _cacheName;\n     }\n@@ -2393,4 +2403,23 @@ public void valueChanged(Value val) {\n     \t\t_cacheTimeout = Integer.MIN_VALUE;\n     \t}\n     }\n+\n+    /**\n+     * Determine whether this Type should be included in the DataCache (if one\n+     * is provided) based on the DataCache's configuration.\n+     * \n+     * @return true if the DataCache will accept this type, otherwise false.\n+     */\n+    private boolean isCacheable(String candidateCacheName) {\n+        boolean rval = true;\n+        DataCache cache =\n+            getRepository().getConfiguration().getDataCacheManagerInstance()\n+                .getDataCache(candidateCacheName);\n+        if (cache != null && (cache instanceof AbstractDataCache)) {\n+            AbstractDataCache adc = (AbstractDataCache) cache;\n+            if (!adc.isCacheableType(getDescribedType().getName()))\n+                rval = false;\n+        }\n+        return rval;\n+    }\n }"},{"sha":"0c96a738d17013e3267c7222623365dc92b5134d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/Item.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/656ad7c9597449820b2b9ffe3f8b9bf1ad634113/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/Item.java","raw_url":"https://github.com/apache/openjpa/raw/656ad7c9597449820b2b9ffe3f8b9bf1ad634113/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/Item.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/Item.java?ref=656ad7c9597449820b2b9ffe3f8b9bf1ad634113","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import javax.persistence.Version;\n+\n+@Entity\n+@Table(name=\"CACHE_EXC_ITEM\")\n+public class Item {\n+\n+    @Id\n+    private int id;\n+\n+    @Version\n+    private int version;\n+\n+    private String name;\n+\n+    private String type;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getType() {\n+        return type;\n+    }\n+\n+    public void setType(String type) {\n+        this.type = type;\n+    }\n+}"},{"sha":"8ef925649005c695d449ed399ab9d6242a47808b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/Order.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/656ad7c9597449820b2b9ffe3f8b9bf1ad634113/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/Order.java","raw_url":"https://github.com/apache/openjpa/raw/656ad7c9597449820b2b9ffe3f8b9bf1ad634113/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/Order.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/Order.java?ref=656ad7c9597449820b2b9ffe3f8b9bf1ad634113","patch":"@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import javax.persistence.Version;\n+\n+@Entity\n+@Table(name=\"CACHE_EXC_ORDR\")\n+public class Order {\n+\n+    @Id\n+    @GeneratedValue\n+    private int id;\n+\n+    @Version\n+    private int version;\n+\n+    private int quantity;\n+\n+    @OneToOne\n+    private Item item;\n+\n+    @ManyToOne\n+    private Purchase purchase;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public int getQuantity() {\n+        return quantity;\n+    }\n+\n+    public void setQuantity(int quantity) {\n+        this.quantity = quantity;\n+    }\n+\n+    public Item getItem() {\n+        return item;\n+    }\n+\n+    public void setItem(Item item) {\n+        this.item = item;\n+    }\n+\n+    public Purchase getPurchase() {\n+        return purchase;\n+    }\n+\n+    public void setPurchase(Purchase purchase) {\n+        this.purchase = purchase;\n+    }\n+}"},{"sha":"a028de59083985516fa2117d48fb530d95c0c216","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/Purchase.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/656ad7c9597449820b2b9ffe3f8b9bf1ad634113/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/Purchase.java","raw_url":"https://github.com/apache/openjpa/raw/656ad7c9597449820b2b9ffe3f8b9bf1ad634113/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/Purchase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/Purchase.java?ref=656ad7c9597449820b2b9ffe3f8b9bf1ad634113","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.Collection;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+import javax.persistence.Version;\n+\n+@Entity\n+@Table(name=\"CACHE_EXC_PURC\")\n+public class Purchase {\n+\n+    @Id\n+    @GeneratedValue\n+    private int id;\n+\n+    @Version\n+    private int version;\n+\n+    @OneToMany(mappedBy = \"purchase\", cascade = CascadeType.ALL)\n+    private Collection<Order> orders;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public Collection<Order> getOrders() {\n+        return orders;\n+    }\n+\n+    public void setOrders(Collection<Order> orders) {\n+        this.orders = orders;\n+    }\n+}"},{"sha":"d47d99fd668175fea8e5f7055233328cfe94f110","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java","status":"added","additions":233,"deletions":0,"changes":233,"blob_url":"https://github.com/apache/openjpa/blob/656ad7c9597449820b2b9ffe3f8b9bf1ad634113/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java","raw_url":"https://github.com/apache/openjpa/raw/656ad7c9597449820b2b9ffe3f8b9bf1ad634113/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java?ref=656ad7c9597449820b2b9ffe3f8b9bf1ad634113","patch":"@@ -0,0 +1,233 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.StoreCache;\n+import org.apache.openjpa.persistence.test.PersistenceTestCase;\n+\n+public class TestCacheExclusions extends PersistenceTestCase {\n+\n+    private OpenJPAEntityManagerFactorySPI emf = null;\n+\n+    private static String[] ITEM_NAMES =\n+        { \"Cup\", \"pen\", \"pencil\", \"phone\", \"laptop\", \"keyboard\", \"mouse\" };\n+    \n+    private static final String _tSep = \";\";\n+\n+    Item[] items = new Item[ITEM_NAMES.length];\n+    Order o1, o2;\n+    Purchase p;\n+\n+    public void populate() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        int n = 0;\n+        for (String s : ITEM_NAMES) {\n+            items[n] = new Item();\n+            items[n].setName(s);\n+            items[n].setId(n);\n+            em.persist(items[n++]);\n+        }\n+        p = new Purchase();\n+        p.setOrders(new ArrayList<Order>());\n+        o1 = new Order();\n+        o1.setItem(em.find(Item.class, 1));\n+        o1.setQuantity(2);\n+        o1.setPurchase(p);\n+        p.getOrders().add(o1);\n+\n+        o2 = new Order();\n+        o2.setItem(em.find(Item.class, 4));\n+        o2.setQuantity(23);\n+        o2.setPurchase(p);\n+        p.getOrders().add(o2);\n+\n+        em.persist(p);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void tearDown() throws Exception {\n+        if (emf != null) {\n+            EntityManager em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+\n+            for (ClassMapping mapping : ((ClassMapping[]) emf\n+                .getConfiguration().getMetaDataRepositoryInstance()\n+                .getMetaDatas())) {\n+                Query q =\n+                    em.createNativeQuery(\"DROP TABLE \"\n+                        + mapping.getTable().getName());\n+                q.executeUpdate();\n+            }\n+            em.getTransaction().commit();\n+            em.close();\n+            \n+            emf.close();\n+        }\n+        emf = null;\n+        super.tearDown();\n+    }\n+\n+    public void testCacheAll() {\n+        getEntityManagerFactoryCacheSettings(null, null);\n+        populate();\n+        StoreCache cache = emf.getStoreCache();\n+        assertCacheContents(cache, true, true, true);\n+    }\n+\n+    public void testCacheItems() {\n+        getEntityManagerFactoryCacheSettings(new Class[] { Item.class }, null);\n+        populate();\n+        StoreCache cache = emf.getStoreCache();\n+        assertCacheContents(cache, false, false, true);\n+    }\n+\n+    public void testCacheItemsAndPurchases() {\n+        getEntityManagerFactoryCacheSettings(new Class[] { Item.class,\n+            Purchase.class }, null);\n+        populate();\n+        StoreCache cache = emf.getStoreCache();\n+        assertCacheContents(cache, true, false, true);\n+    }\n+\n+    public void testCacheItemsAndOrders() {\n+        getEntityManagerFactoryCacheSettings(new Class[] { Item.class,\n+            Order.class }, null);\n+        populate();\n+        StoreCache cache = emf.getStoreCache();\n+        assertCacheContents(cache, false, true, true);\n+    }\n+\n+    public void testCachePurchasesAndOrders() {\n+        getEntityManagerFactoryCacheSettings(new Class[] { Purchase.class,\n+            Order.class }, null);\n+        populate();\n+        StoreCache cache = emf.getStoreCache();\n+        assertCacheContents(cache, true, true, false);\n+    }\n+\n+    public void testExcludePurchases() {\n+        getEntityManagerFactoryCacheSettings(null,\n+            new Class[] { Purchase.class });\n+        populate();\n+        StoreCache cache = emf.getStoreCache();\n+        assertCacheContents(cache, false, true, true);\n+    }\n+\n+    public void testExcludeOrders() {\n+        getEntityManagerFactoryCacheSettings(null, new Class[] { Order.class });\n+        populate();\n+        StoreCache cache = emf.getStoreCache();\n+        assertCacheContents(cache, true, false, true);\n+    }\n+\n+    public void testExcludeItems() {\n+        getEntityManagerFactoryCacheSettings(null, new Class[] { Item.class });\n+        populate();\n+        StoreCache cache = emf.getStoreCache();\n+        assertCacheContents(cache, true, true, false);\n+    }\n+\n+    public void testExcludeOrdersAndPurchases() {\n+        getEntityManagerFactoryCacheSettings(null, new Class[] { Order.class,\n+            Purchase.class });\n+        populate();\n+        StoreCache cache = emf.getStoreCache();\n+        assertCacheContents(cache, false, false, true);\n+    }\n+\n+    public void testIncludePurchaseItemExcludePurchase() {\n+        getEntityManagerFactoryCacheSettings(new Class[] { Purchase.class,\n+            Item.class }, new Class[] { Purchase.class });\n+        populate();\n+        StoreCache cache = emf.getStoreCache();\n+        assertCacheContents(cache, false, false, true);\n+    }\n+\n+    public OpenJPAEntityManagerFactorySPI getEntityManagerFactoryCacheSettings(\n+        Class<?>[] includedTypes, Class<?>[] excludedTypes) {\n+        StringBuilder includes = new StringBuilder();\n+        if (includedTypes != null && includedTypes.length > 0) {\n+            includes.append(\"Types=\");\n+            for (Class<?> c : includedTypes) {\n+                includes.append(c.getName());\n+                includes.append(_tSep);\n+            }\n+            includes.setLength(includes.length() - 1); // remove last semicolon\n+        }\n+        StringBuilder excludes = new StringBuilder();\n+        if (excludedTypes != null && excludedTypes.length > 0) {\n+            excludes.append(\"ExcludedTypes=\");\n+            for (Class<?> c : excludedTypes) {\n+                excludes.append(c.getName());\n+                excludes.append(_tSep);\n+            }\n+            excludes.setLength(excludes.length() - 1); // remove last semicolon\n+        }\n+        StringBuilder dataCacheSettings = new StringBuilder();\n+        dataCacheSettings.append(\"true\");\n+        if (includes.length() > 0 || excludes.length() > 0) {\n+            dataCacheSettings.append(\"(\");\n+            dataCacheSettings.append(includes);\n+            if (includes.length() > 0 && excludes.length() > 0) {\n+                dataCacheSettings.append(\",\");\n+            }\n+            dataCacheSettings.append(excludes);\n+            dataCacheSettings.append(\")\");\n+        }\n+        Map<String, String> props = new HashMap<String, String>();\n+        props.put(\"openjpa.DataCache\", dataCacheSettings.toString());\n+        props.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n+        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\"\n+            + Item.class.getName() + _tSep + Purchase.class.getName() + _tSep\n+            + Order.class.getName() + \")\");\n+        emf =\n+            (OpenJPAEntityManagerFactorySPI) javax.persistence.Persistence\n+                .createEntityManagerFactory(\"test\", props);\n+        return emf;\n+    }\n+\n+    public void assertCacheContents(StoreCache cache, boolean expectPurchase,\n+        boolean expectOrders, boolean expectItems) {\n+        assertEquals(\"Expected purchases to \" + (expectPurchase ? \"\" : \"not \")\n+            + \"exist in the cache\", expectPurchase, cache.contains(\n+            Purchase.class, p.getId()));\n+        assertEquals(\"Expected Orders to \" + (expectOrders ? \"\" : \"not \")\n+            + \"exist in the cache\", expectOrders, cache.contains(Order.class,\n+            o1.getId()));\n+        assertEquals(\"Expected Orders to \" + (expectOrders ? \"\" : \"not \")\n+            + \"exist in the cache\", expectOrders, cache.contains(Order.class,\n+            o2.getId()));\n+        for (int i = 0; i < ITEM_NAMES.length; i++) {\n+            assertEquals(\"Expected Items to \" + (expectItems ? \"\" : \"not \")\n+                + \"exist in the cache\", expectItems, cache.contains(Item.class,\n+                items[i].getId()));\n+        }\n+    }\n+}"}]}

