{"sha":"6577d2f166a07688870db4014961ec1f8b5b4ead","node_id":"MDY6Q29tbWl0MjA2MzY0OjY1NzdkMmYxNjZhMDc2ODg4NzBkYjQwMTQ5NjFlYzFmOGI1YjRlYWQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-07-14T07:43:04Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-07-14T07:43:04Z"},"message":"fixed some test failures to do with repackaging and build process changes\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@421825 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a9b2be9adb0ea139a428dfcf2f61a3f64a3bc67d","url":"https://api.github.com/repos/apache/openjpa/git/trees/a9b2be9adb0ea139a428dfcf2f61a3f64a3bc67d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6577d2f166a07688870db4014961ec1f8b5b4ead","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6577d2f166a07688870db4014961ec1f8b5b4ead","html_url":"https://github.com/apache/openjpa/commit/6577d2f166a07688870db4014961ec1f8b5b4ead","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6577d2f166a07688870db4014961ec1f8b5b4ead/comments","author":null,"committer":null,"parents":[{"sha":"1baedb7e8a81e33e731ade1bd35a13ae01683224","url":"https://api.github.com/repos/apache/openjpa/commits/1baedb7e8a81e33e731ade1bd35a13ae01683224","html_url":"https://github.com/apache/openjpa/commit/1baedb7e8a81e33e731ade1bd35a13ae01683224"}],"stats":{"total":100,"additions":38,"deletions":62},"files":[{"sha":"a9ca5502ade9f6e809a8cc4604af46b2abb6fa73","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/6577d2f166a07688870db4014961ec1f8b5b4ead/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","raw_url":"https://github.com/apache/openjpa/raw/6577d2f166a07688870db4014961ec1f8b5b4ead/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java?ref=6577d2f166a07688870db4014961ec1f8b5b4ead","patch":"@@ -36,8 +36,7 @@\n     public static final Date RELEASE_DATE = new Date(RELEASE_SECONDS * 1000);\n \n     public static final String VERSION_ID = VERSION_NUMBER;\n-    public static final String VENDOR_NAME =\n-        OpenJPAVersion.class.getPackage().getImplementationVendor();\n+    public static final String VENDOR_NAME = \"OpenJPA\";\n     public static final int MAJOR_RELEASE;\n     public static final int MINOR_RELEASE;\n     public static final int PATCH_RELEASE;"},{"sha":"367fec66ff17bfb3b38d11b6dcbcb78cef7d6c16","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","status":"modified","additions":33,"deletions":49,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/6577d2f166a07688870db4014961ec1f8b5b4ead/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","raw_url":"https://github.com/apache/openjpa/raw/6577d2f166a07688870db4014961ec1f8b5b4ead/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java?ref=6577d2f166a07688870db4014961ec1f8b5b4ead","patch":"@@ -19,18 +19,20 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.HashMap;\n import java.util.Iterator;\n+import java.util.Map;\n \n import org.apache.commons.lang.StringUtils;\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.kernel.BrokerFactory;\n+import org.apache.openjpa.kernel.DelegatingBrokerFactory;\n import org.apache.openjpa.kernel.FetchState;\n import org.apache.openjpa.kernel.LockManager;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.PCState;\n import org.apache.openjpa.kernel.StoreContext;\n import org.apache.openjpa.kernel.StoreManager;\n-import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Closeable;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.UUIDGenerator;\n@@ -39,7 +41,6 @@\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.SequenceMetaData;\n import org.apache.openjpa.meta.ValueStrategies;\n-import serp.util.Strings;\n \n /**\n  * Helper for OpenJPA back-ends.\n@@ -52,6 +53,7 @@\n \n     private static final Localizer _loc = Localizer.forPackage\n         (ImplHelper.class);\n+\tprivate static Map _facadeTypes = new HashMap ();\n \n     /**\n      * Return the getter method matching the given property name.\n@@ -178,53 +180,35 @@ private static Object generateValue(StoreContext ctx,\n      * wrap store-specific components without knowing about all possible\n      * back-ends.\n      *\n-     * @param conf configuration for runtime\n-     * @param openjpaCls class of OpenJPA component (e.g.\n-     * JDBCFetchConfiguration.class)\n-     * @param openjpaSuff suffix of OpenJPA component (e.g. \"FetchConfiguration\")\n-     * @param facadePkg the unqualified facade package name (e.g. \"jdo\")\n-     * @param facadeCls the generic facade interface's class (e.g.\n-     * FetchPlan.class)\n-     * @param facadeSuff the suffix to append to the store prefix to get\n-     * the implementation class name (e.g. \"FetchPlanImpl\")\n-     * or null to use the unqualified name of\n-     * <code>facadeCls</code>\n-     * @return the class formed by taking the top-most org.apache.openjpa.aaa package and\n-     * BBBStoreManager name prefix from <code>storeCls</code> and\n-     * combining them with the facade package ccc and suffix DDD to\n-     * get: org.apache.openjpa.ccc.aaa.BBBDDD\n+     * @param bf broker factory for which an implementation class\n+     * @param compType type of desired component (e.g. FetchPlan.class)\n+     * @return the class corresponding to the type in the store facade registry,\n+     * or <code>null</code> if no registry entry exists.\n      */\n-    public static Class getStoreFacadeType(OpenJPAConfiguration conf,\n-        Class openjpaCls, String openjpaSuff, String facadePkg, Class facadeCls,\n-        String facadeSuff) {\n-        String clsName = openjpaCls.getName();\n-        int dotIdx = clsName.lastIndexOf('.');\n-        int suffixIdx = clsName.indexOf(openjpaSuff, dotIdx + 1);\n-        if (!clsName.startsWith(\"org.apache.openjpa.\") || suffixIdx == -1)\n-            return null;\n-\n-        // extract 'xxx.' from org.apache.openjpa.xxx.yyy..., and XXX from XXXStoreManager\n-        String pkg = clsName.substring(5, clsName.indexOf('.', 5) + 1);\n-        String prefix = clsName.substring(dotIdx + 1, suffixIdx);\n-\n-        // suffix of impl class name\n-        if (facadeSuff == null)\n-            facadeSuff = Strings.getClassName(facadeCls);\n-\n-        clsName =\n-            \"org.apache.openjpa.\" + facadePkg + \".\" + pkg + prefix + facadeSuff;\n-        try {\n-            return Class.forName(clsName, true, facadeCls.getClassLoader());\n-        }\n-        catch (ClassNotFoundException ncfe) {\n-            Log log = conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n-            if (log.isTraceEnabled())\n-                log.trace(_loc.get(\"no-store-exts\", clsName));\n-            return null;\n-        }\n-        catch (Exception e) {\n-            throw new InternalException(e);\n-        }\n+    public static Class getStoreFacadeType(BrokerFactory bf, Class compType) {\n+    \t\n+    \tClass bfClass;\n+    \tif (bf instanceof DelegatingBrokerFactory)\n+    \t\tbfClass = ((DelegatingBrokerFactory) bf).getInnermostDelegate()\n+    \t\t\t.getClass();\n+    \telse\n+    \t\tbfClass = bf.getClass();\n+    \t\n+    \treturn (Class) _facadeTypes.get(storeFacadeKey(bfClass, compType));\n+    }\n+    \n+    /**\n+     * Add a facade type for the specified broker factory type and \n+     * component type.\n+     * @see #getStoreFacadeType\n+     */\n+    public static void addStoreFacadeType(Class bfClass, Class compType,\n+    \tClass facadeType) {\n+    \t_facadeTypes.put(storeFacadeKey(bfClass, compType), facadeType);\n+    }\n+    \n+    private static String storeFacadeKey(Class bfClass, Class compType) {\n+    \treturn bfClass.getName() + \":\" + compType.getName();\n     }\n \n     /**"},{"sha":"415b6da4a515c5ea24460358a3fa8009b27d8930","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","status":"modified","additions":4,"deletions":11,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/6577d2f166a07688870db4014961ec1f8b5b4ead/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/6577d2f166a07688870db4014961ec1f8b5b4ead/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java?ref=6577d2f166a07688870db4014961ec1f8b5b4ead","patch":"@@ -262,13 +262,7 @@ public boolean equals(Object other) {\n \n     /**\n      * Create a store-specific facade for the given fetch configuration.\n-     * The name of the facade class is formed by taking the top-most org.apache.openjpa.xxx\n-     * package and class name prefix from the fetch configuration class and\n-     * combining it as\n-     * <code>org.apache.openjpa.persistence.xxx.PrefixFetchConfiguration</code>.\n-     * The class must have a constructor that takes a\n-     * <code>FetchConfiguration</code> argument. If no facade class\n-     * exists, we use the default {@link FetchConfiguration}.\n+\t * If no facade class exists, we use the default {@link FetchPlan}.\n      */\n     FetchPlan toFetchPlan(FetchConfiguration fetch) {\n         if (fetch == null)\n@@ -282,12 +276,11 @@ FetchPlan toFetchPlan(FetchConfiguration fetch) {\n         _factory.lock();\n         try {\n             if (_plan == null) {\n-                Class cls = ImplHelper.getStoreFacadeType(_factory.\n-                    getConfiguration(), inner.getClass(), \"FetchConfiguration\",\n-                    \"persistence\", FetchPlan.class, null);\n+                Class cls = ImplHelper.getStoreFacadeType(_factory, \n+                \tFetchPlan.class);\n                 if (cls == null)\n                     cls = FetchPlan.class;\n-                _plan = cls.getConstructor(FetchConfiguration.class);\n+                _plan = cls.getConstructor(FetchPlan.class);\n             }\n             return _plan.newInstance(fetch);\n         }"}]}

