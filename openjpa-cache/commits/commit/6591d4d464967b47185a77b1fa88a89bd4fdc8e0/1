{"sha":"6591d4d464967b47185a77b1fa88a89bd4fdc8e0","node_id":"MDY6Q29tbWl0MjA2MzY0OjY1OTFkNGQ0NjQ5NjdiNDcxODVhNzdiMWZhODhhODliZDRmZGM4ZTA=","commit":{"author":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2015-02-27T01:44:09Z"},"committer":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2015-02-27T01:44:09Z"},"message":"OPENJPA-2557: FinderCache contains incorrectly cached query with a NULL for a Primary Key.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1662615 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fa9c763bce57364135ab71e5fb52ab906f2b0dfe","url":"https://api.github.com/repos/apache/openjpa/git/trees/fa9c763bce57364135ab71e5fb52ab906f2b0dfe"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6591d4d464967b47185a77b1fa88a89bd4fdc8e0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6591d4d464967b47185a77b1fa88a89bd4fdc8e0","html_url":"https://github.com/apache/openjpa/commit/6591d4d464967b47185a77b1fa88a89bd4fdc8e0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6591d4d464967b47185a77b1fa88a89bd4fdc8e0/comments","author":null,"committer":null,"parents":[{"sha":"8129fe685bb7788ee5cb192be39d80b0f097f01c","url":"https://api.github.com/repos/apache/openjpa/commits/8129fe685bb7788ee5cb192be39d80b0f097f01c","html_url":"https://github.com/apache/openjpa/commit/8129fe685bb7788ee5cb192be39d80b0f097f01c"}],"stats":{"total":401,"additions":400,"deletions":1},"files":[{"sha":"3cbc0f68e97102cecb752a2751902a8568810869","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderQueryImpl.java","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/6591d4d464967b47185a77b1fa88a89bd4fdc8e0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/6591d4d464967b47185a77b1fa88a89bd4fdc8e0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderQueryImpl.java?ref=6591d4d464967b47185a77b1fa88a89bd4fdc8e0","patch":"@@ -72,7 +72,17 @@ static FinderQueryImpl newFinder(ClassMapping mapping,\n             return null;\n         SQLBuffer buffer = impl.getSQL();\n         Column[] pkCols = mapping.getPrimaryKeyColumns();\n-        boolean canCache = pkCols.length == buffer.getParameters().size();\n+\n+        //OPENJPA-2557: Typically the number of pkCols (length) should match the number (size) of \n+        //parameters.  However, there are a few cases (e.g. when extra parameters are needed for\n+        //discriminator data) where the pkCols length may be different than the parameters.   \n+        //If we find the number of pkCols is equal to the number of parameters, we need to do\n+        //one last check to verify that the buffers columns match the pkCols exactly.\n+        boolean canCache = (pkCols.length == buffer.getParameters().size());\n+        for(int i=0; i < pkCols.length  && canCache; i++){\n+            canCache = canCache && buffer.getColumns().contains(pkCols[i]);            \n+        }\n+        \n         return (canCache)\n             ? new FinderQueryImpl(mapping, impl, buffer) : null;\n     }"},{"sha":"7aac91a5ba270485aba28437e84d8db666e65824","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/discrim/AbstractExtValue.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/6591d4d464967b47185a77b1fa88a89bd4fdc8e0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/discrim/AbstractExtValue.java","raw_url":"https://github.com/apache/openjpa/raw/6591d4d464967b47185a77b1fa88a89bd4fdc8e0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/discrim/AbstractExtValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/discrim/AbstractExtValue.java?ref=6591d4d464967b47185a77b1fa88a89bd4fdc8e0","patch":"@@ -0,0 +1,69 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.sqlcache.discrim;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.DiscriminatorColumn;\r\n+import javax.persistence.DiscriminatorType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+\r\n+@Entity\r\n+@DiscriminatorColumn(discriminatorType = DiscriminatorType.INTEGER, name = \"EXTDISCR\")\r\n+public class AbstractExtValue implements Serializable {\r\n+\r\n+    private static final long serialVersionUID = 7753311252101420833L;\r\n+    \r\n+    @Id\r\n+\tprivate String code;\r\n+\r\n+\tpublic String getCode() {\r\n+\t\treturn this.code;\r\n+\t}\r\n+\r\n+\tpublic void setCode(String code) {\r\n+\t\tthis.code = code;\r\n+\t}\r\n+\r\n+    @Override\r\n+    public int hashCode() {\r\n+        final int prime = 31;\r\n+        int result = 1;\r\n+        result = prime * result + ((code == null) ? 0 : code.hashCode());\r\n+        return result;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean equals(Object obj) {\r\n+        if (this == obj)\r\n+            return true;\r\n+        if (obj == null)\r\n+            return false;\r\n+        if (getClass() != obj.getClass())\r\n+            return false;\r\n+        AbstractExtValue other = (AbstractExtValue) obj;\r\n+        if (code == null) {\r\n+            if (other.code != null)\r\n+                return false;\r\n+        } else if (!code.equals(other.code))\r\n+            return false;\r\n+        return true;\r\n+    }\r\n+}\r"},{"sha":"7f189abb299e08821db4f58c68a6d9104ad1326b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/discrim/ComposedPK.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/6591d4d464967b47185a77b1fa88a89bd4fdc8e0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/discrim/ComposedPK.java","raw_url":"https://github.com/apache/openjpa/raw/6591d4d464967b47185a77b1fa88a89bd4fdc8e0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/discrim/ComposedPK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/discrim/ComposedPK.java?ref=6591d4d464967b47185a77b1fa88a89bd4fdc8e0","patch":"@@ -0,0 +1,88 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.sqlcache.discrim;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.Embeddable;\r\n+\r\n+@Embeddable\r\n+public class ComposedPK implements Serializable {\r\n+    \r\n+    private static final long serialVersionUID = -7415701271873221026L;\r\n+\r\n+    private Short field1;\r\n+\r\n+    private Integer field2;\r\n+    \r\n+    public ComposedPK(){}\r\n+\r\n+    public Short getField1() {\r\n+        return field1;\r\n+    }\r\n+\r\n+    public void setField1(Short field1) {\r\n+        this.field1 = field1;\r\n+    }\r\n+\r\n+    public Integer getField2() {\r\n+        return field2;\r\n+    }\r\n+\r\n+    public void setField2(Integer field2) {\r\n+        this.field2 = field2;\r\n+    }\r\n+\r\n+    public ComposedPK(Short field1, Integer field2) {\r\n+        this.field1 = field1;\r\n+        this.field2 = field2;\r\n+    }\r\n+\r\n+    @Override\r\n+    public int hashCode() {\r\n+        final int prime = 31;\r\n+        int result = 1;\r\n+        result = prime * result + ((field1 == null) ? 0 : field1.hashCode());\r\n+        result = prime * result + ((field2 == null) ? 0 : field2.hashCode());\r\n+        return result;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean equals(Object obj) {\r\n+        if (this == obj)\r\n+            return true;\r\n+        if (obj == null)\r\n+            return false;\r\n+        if (getClass() != obj.getClass())\r\n+            return false;\r\n+        ComposedPK other = (ComposedPK) obj;\r\n+        if (field1 == null) {\r\n+            if (other.field1 != null)\r\n+                return false;\r\n+        } else if (!field1.equals(other.field1))\r\n+            return false;\r\n+        if (field2 == null) {\r\n+            if (other.field2 != null)\r\n+                return false;\r\n+        } else if (!field2.equals(other.field2))\r\n+            return false;\r\n+        return true;\r\n+    }\r\n+    \r\n+}\r"},{"sha":"bccff7c5e9c63146f2795b240728548b6f332d57","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/discrim/ExtValue1.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/6591d4d464967b47185a77b1fa88a89bd4fdc8e0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/discrim/ExtValue1.java","raw_url":"https://github.com/apache/openjpa/raw/6591d4d464967b47185a77b1fa88a89bd4fdc8e0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/discrim/ExtValue1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/discrim/ExtValue1.java?ref=6591d4d464967b47185a77b1fa88a89bd4fdc8e0","patch":"@@ -0,0 +1,31 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.sqlcache.discrim;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+@DiscriminatorValue(\"9\")\r\n+public class ExtValue1 extends AbstractExtValue implements Serializable {\r\n+\r\n+    private static final long serialVersionUID = -6800461627353149172L;\r\n+}\r"},{"sha":"e54809ba4d464deda0ea8f217b040e57fd13050e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/discrim/TestFinderCacheWithNulls.java","status":"added","additions":113,"deletions":0,"changes":113,"blob_url":"https://github.com/apache/openjpa/blob/6591d4d464967b47185a77b1fa88a89bd4fdc8e0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/discrim/TestFinderCacheWithNulls.java","raw_url":"https://github.com/apache/openjpa/raw/6591d4d464967b47185a77b1fa88a89bd4fdc8e0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/discrim/TestFinderCacheWithNulls.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/discrim/TestFinderCacheWithNulls.java?ref=6591d4d464967b47185a77b1fa88a89bd4fdc8e0","patch":"@@ -0,0 +1,113 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.sqlcache.discrim;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.kernel.FetchConfiguration;\r\n+import org.apache.openjpa.kernel.FinderCache;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+\r\n+public class TestFinderCacheWithNulls extends SingleEMFTestCase {\r\n+    private FetchConfiguration fetchCfg;\r\n+    private FinderCache fndrCache;\r\n+    private ClassMapping clsMapping_UserData;\r\n+    private ClassMapping clsMapping_AbstractExtValue;\r\n+\r\n+    @Override\r\n+    public void setUp() throws Exception {\r\n+        super.setUp(AbstractExtValue.class, ComposedPK.class, ExtValue1.class, UserData.class);\r\n+    }\r\n+    \r\n+    public void test() {\r\n+\r\n+        init();\r\n+        initData();\r\n+        \r\n+        EntityManager em = this.emf.createEntityManager();\r\n+        \r\n+        assertNull(fndrCache.get(clsMapping_UserData, fetchCfg));\r\n+        \r\n+        UserData usrData=em.find(UserData.class, new ComposedPK(Short.valueOf(\"2\"), null));\r\n+        assertNull(usrData);\r\n+        //FinderCache should be empty.  That is, since the previous find contained a NULL,\r\n+        //the cache shouldn't not contain the finder SQL.  However, prior to OPENJPA-2557, \r\n+        //the finder cache contain the finder SQL with the NULL value.  With this \r\n+        //JIRA, the cache should not contain the finder.\r\n+        assertNull(fndrCache.get(clsMapping_UserData, fetchCfg));\r\n+        em.clear();\r\n+        \r\n+        usrData=em.find(UserData.class, new ComposedPK(Short.valueOf(\"2\"), 3));       \r\n+        //Prior to OPENJPA-2557, the UserData would not have been found because the previous \r\n+        //find with a NULL would have been cached.  \r\n+        assertNotNull(usrData);\r\n+        assertNull(fndrCache.get(clsMapping_UserData, fetchCfg));  \r\n+        em.clear();\r\n+\r\n+        ExtValue1 ev1 = em.find(ExtValue1.class, \"A\");       \r\n+        assertNotNull(ev1);\r\n+        assertNotNull(fndrCache.get(clsMapping_AbstractExtValue, fetchCfg));\r\n+        em.clear();\r\n+        \r\n+        fndrCache.invalidate(clsMapping_AbstractExtValue);\r\n+        assertNull(fndrCache.get(clsMapping_AbstractExtValue, fetchCfg));\r\n+\r\n+        AbstractExtValue aev = em.find(AbstractExtValue.class, \"A\");       \r\n+        assertNotNull(aev);\r\n+        assertNotNull(fndrCache.get(clsMapping_AbstractExtValue, fetchCfg));\r\n+\r\n+        em.close();\r\n+    }\r\n+    \r\n+    public void init(){\r\n+        EntityManager em = emf.createEntityManager();\r\n+        \r\n+        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();        \r\n+        clsMapping_UserData = conf.getMappingRepositoryInstance().getMapping(UserData.class, null, true);\r\n+        clsMapping_AbstractExtValue = conf.getMappingRepositoryInstance().\r\n+                                           getMapping(AbstractExtValue.class, null, true);\r\n+        \r\n+        fetchCfg = ((org.apache.openjpa.persistence.EntityManagerImpl) em).getBroker().getFetchConfiguration();\r\n+\r\n+        fndrCache = ((JDBCConfiguration) emf.getConfiguration()).getFinderCacheInstance();\r\n+        \r\n+        em.close();\r\n+    }\r\n+\r\n+    public void initData() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        \r\n+        ExtValue1 extValue1 = new ExtValue1();\r\n+        extValue1.setCode(\"A\");\r\n+        em.getTransaction().begin();\r\n+        em.persist(extValue1);\r\n+        em.flush();        \r\n+        \r\n+        ComposedPK pK = new ComposedPK((short) 2, 3);\r\n+        UserData userData = new UserData();\r\n+        userData.setPk(pK);\r\n+        userData.setExtValue(extValue1);\r\n+        em.persist(userData);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+}\r"},{"sha":"b199903da04901cb3248214a9d390a4d41602471","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/discrim/UserData.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/6591d4d464967b47185a77b1fa88a89bd4fdc8e0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/discrim/UserData.java","raw_url":"https://github.com/apache/openjpa/raw/6591d4d464967b47185a77b1fa88a89bd4fdc8e0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/discrim/UserData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/discrim/UserData.java?ref=6591d4d464967b47185a77b1fa88a89bd4fdc8e0","patch":"@@ -0,0 +1,88 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.sqlcache.discrim;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.EmbeddedId;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.JoinColumn;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name = \"TB1\")\r\n+public class UserData implements Serializable {\r\n+\r\n+    private static final long serialVersionUID = 158985341763605994L;\r\n+\r\n+    @EmbeddedId\r\n+    private ComposedPK pk;\r\n+\r\n+    @ManyToOne\r\n+    @JoinColumn(name = \"EXT_USR\", insertable = false, updatable = false)\r\n+    private ExtValue1 extValue;\r\n+\r\n+    public ExtValue1 getExtValue() {\r\n+        return extValue;\r\n+    }\r\n+\r\n+    public void setExtValue(ExtValue1 val) {\r\n+        this.extValue = val;\r\n+    }\r\n+\r\n+    public ComposedPK getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public void setPk(ComposedPK pk) {\r\n+        this.pk = pk;\r\n+    }\r\n+\r\n+    @Override\r\n+    public int hashCode() {\r\n+        final int prime = 31;\r\n+        int result = 1;\r\n+        result = prime * result + ((extValue == null) ? 0 : extValue.hashCode());\r\n+        result = prime * result + ((pk == null) ? 0 : pk.hashCode());\r\n+        return result;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean equals(Object obj) {\r\n+        if (this == obj)\r\n+            return true;\r\n+        if (obj == null)\r\n+            return false;\r\n+        if (getClass() != obj.getClass())\r\n+            return false;\r\n+        UserData other = (UserData) obj;\r\n+        if (extValue == null) {\r\n+            if (other.extValue != null)\r\n+                return false;\r\n+        } else if (!extValue.equals(other.extValue))\r\n+            return false;\r\n+        if (pk == null) {\r\n+            if (other.pk != null)\r\n+                return false;\r\n+        } else if (!pk.equals(other.pk))\r\n+            return false;\r\n+        return true;\r\n+    }\r\n+}\r"}]}

