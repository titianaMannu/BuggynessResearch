{"sha":"663fbe62e3bb6da5942464b9c524cbef7e2d186e","node_id":"MDY6Q29tbWl0MjA2MzY0OjY2M2ZiZTYyZTNiYjZkYTU5NDI0NjRiOWM1MjRjYmVmN2UyZDE4NmU=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-01-04T22:44:19Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-01-04T22:44:19Z"},"message":"Force a version check when merging an unchanged detached entity to ensure that\nwe don't blindly use stale state.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@492790 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"efb20dbd1d35f90aff8e482eee2f688f5141263f","url":"https://api.github.com/repos/apache/openjpa/git/trees/efb20dbd1d35f90aff8e482eee2f688f5141263f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/663fbe62e3bb6da5942464b9c524cbef7e2d186e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/663fbe62e3bb6da5942464b9c524cbef7e2d186e","html_url":"https://github.com/apache/openjpa/commit/663fbe62e3bb6da5942464b9c524cbef7e2d186e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/663fbe62e3bb6da5942464b9c524cbef7e2d186e/comments","author":null,"committer":null,"parents":[{"sha":"f5e4742f17b9926075f2867b47e6eafb3089f60a","url":"https://api.github.com/repos/apache/openjpa/commits/f5e4742f17b9926075f2867b47e6eafb3089f60a","html_url":"https://github.com/apache/openjpa/commit/f5e4742f17b9926075f2867b47e6eafb3089f60a"}],"stats":{"total":122,"additions":119,"deletions":3},"files":[{"sha":"770b86e41be7b24783b521f092f7b9df311d84d1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","status":"modified","additions":15,"deletions":3,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/663fbe62e3bb6da5942464b9c524cbef7e2d186e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/663fbe62e3bb6da5942464b9c524cbef7e2d186e/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java?ref=663fbe62e3bb6da5942464b9c524cbef7e2d186e","patch":"@@ -110,9 +110,9 @@ public Object attach(AttachManager manager, Object toAttach,\n         FieldMetaData[] fields = meta.getFields();\n         int restore = broker.getRestoreState();\n         if (_dirty.length() > 0) {\n-            BitSet load = (BitSet) _dirty.clone();\n+            BitSet load = new BitSet(fields.length);\n             for (int i = 0; i < fields.length; i++) {\n-                if (!load.get(i))\n+                if (!_dirty.get(i))\n                     continue;\n \n                 switch (fields[i].getDeclaredTypeCode()) {\n@@ -140,7 +140,8 @@ public Object attach(AttachManager manager, Object toAttach,\n             }\n             FetchConfiguration fc = broker.getFetchConfiguration();\n             sm.loadFields(load, fc, fc.getWriteLockLevel(), null, true);\n-        }\n+        }        \n+        Object origVersion = sm.getVersion();\n         sm.setVersion(_version);\n \n         BitSet loaded = sm.getLoaded();\n@@ -269,6 +270,17 @@ public Object attach(AttachManager manager, Object toAttach,\n             }\n         }\n         pc.pcReplaceStateManager(sm);\n+\n+        // if we were clean at least make sure a version check is done to\n+        // prevent using old state\n+        if (!sm.isVersionCheckRequired() && broker.isActive()\n+            && _version != origVersion && (origVersion == null \n+            || broker.getStoreManager().compareVersion(sm, _version, \n+            origVersion) != StoreManager.VERSION_SAME)) {\n+            broker.transactional(sm.getManagedInstance(), false, \n+                manager.getBehavior());\n+        }\n+\n         return sm.getManagedInstance();\n     }\n "},{"sha":"0b3da643b74fcc97ab0690e45e0b2c1b99ae6119","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestAttachWithNoChanges.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/663fbe62e3bb6da5942464b9c524cbef7e2d186e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestAttachWithNoChanges.java","raw_url":"https://github.com/apache/openjpa/raw/663fbe62e3bb6da5942464b9c524cbef7e2d186e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestAttachWithNoChanges.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestAttachWithNoChanges.java?ref=663fbe62e3bb6da5942464b9c524cbef7e2d186e","patch":"@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.detachment;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.OptimisticLockException;\n+import javax.persistence.Persistence;\n+\n+import junit.framework.TestCase;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Test that attaching an instance without having changed it still overwrites\n+ * any changes to the managed copy.\n+ *\n+ * @author Abe White\n+ */\n+public class TestAttachWithNoChanges\n+    extends TestCase {\n+\n+    private EntityManagerFactory emf;\n+\n+    public void setUp() {\n+        String types = DetachmentOneManyParent.class.getName() + \";\"\n+            + DetachmentOneManyChild.class.getName(); \n+        Map props = new HashMap();\n+        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" + types + \")\");\n+        emf = Persistence.createEntityManagerFactory(\"test\", props);\n+    }\n+\n+    public void tearDown() {\n+        if (emf == null)\n+            return;\n+        try {\n+            EntityManager em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            em.createQuery(\"delete from DetachmentOneManyChild\").\n+                executeUpdate();\n+            em.createQuery(\"delete from DetachmentOneManyParent\").\n+                executeUpdate();\n+            em.getTransaction().commit();\n+            em.close();\n+            emf.close();\n+        } catch (Exception e) {\n+        }\n+    }\n+    \n+    public void testAttachWithNoChangesChecksVersion() {\n+try {\n+        DetachmentOneManyChild e = new DetachmentOneManyChild();\n+        DetachmentOneManyParent p = new DetachmentOneManyParent();\n+        e.setName(\"orig\");\n+        p.addChild(e);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(p);\n+        em.persist(e);\n+        em.flush();\n+        em.clear();\n+        \n+        DetachmentOneManyChild changed = em.find(DetachmentOneManyChild.class,\n+            e.getId()); \n+        changed.setName(\"newname\");\n+        em.flush();\n+\n+        em.merge(e);\n+        try {\n+            em.flush();\n+            fail(\"Should not be able to flush old version over new.\");\n+        } catch (OptimisticLockException ole) {\n+            // expected\n+        } finally {\n+            if (em.getTransaction().isActive())\n+                em.getTransaction().rollback();\n+            em.close();\n+        }\n+} catch (RuntimeException re) {\n+re.printStackTrace();\n+throw re;\n+}\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestAttachWithNoChanges.class);\n+    }\n+}\n+"}]}

