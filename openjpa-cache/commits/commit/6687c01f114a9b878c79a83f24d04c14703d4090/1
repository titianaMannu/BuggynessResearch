{"sha":"6687c01f114a9b878c79a83f24d04c14703d4090","node_id":"MDY6Q29tbWl0MjA2MzY0OjY2ODdjMDFmMTE0YTliODc4Yzc5YTgzZjI0ZDA0YzE0NzAzZDQwOTA=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-31T08:56:46Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-31T08:56:46Z"},"message":"OPENJPA-258. Actually really fixing the issue this time.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@617073 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a63ee42903d7e79c20251cd6c5151e48d7ed80ff","url":"https://api.github.com/repos/apache/openjpa/git/trees/a63ee42903d7e79c20251cd6c5151e48d7ed80ff"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6687c01f114a9b878c79a83f24d04c14703d4090","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6687c01f114a9b878c79a83f24d04c14703d4090","html_url":"https://github.com/apache/openjpa/commit/6687c01f114a9b878c79a83f24d04c14703d4090","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6687c01f114a9b878c79a83f24d04c14703d4090/comments","author":null,"committer":null,"parents":[{"sha":"31b93870cf92663b5aae81378eb2bb301c49cf55","url":"https://api.github.com/repos/apache/openjpa/commits/31b93870cf92663b5aae81378eb2bb301c49cf55","html_url":"https://github.com/apache/openjpa/commit/31b93870cf92663b5aae81378eb2bb301c49cf55"}],"stats":{"total":84,"additions":65,"deletions":19},"files":[{"sha":"bd56b81fe832e401be8cb666dd4977e34647a1b4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/6687c01f114a9b878c79a83f24d04c14703d4090/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java","raw_url":"https://github.com/apache/openjpa/raw/6687c01f114a9b878c79a83f24d04c14703d4090/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java?ref=6687c01f114a9b878c79a83f24d04c14703d4090","patch":"@@ -30,11 +30,10 @@\n public class InheritanceComparator\n     implements Comparator, Serializable {\n \n-    private Class _base = Object.class;\n+    private Class _base = null;\n \n     /**\n-     * Set the least-derived type possible; defaults to\n-     * <code>Object.class</code>.\n+     * Set the least-derived type possible; defaults to <code>null</code>.\n      */\n     public void setBase(Class base) {\n         _base = base;\n@@ -75,10 +74,9 @@ public int compare(Object o1, Object o2) {\n                 return 1;\n             return c1.getName().compareTo(c2.getName());\n         }\n-        int diff = i1 - i2;\n-        if (diff < 0)\n+        if (i1 < i2)\n             return -1;\n-        else if (diff > 0)\n+        else if (i1 > i2)\n             return 1;\n         else\n             return 0;\n@@ -90,6 +88,8 @@ else if (diff > 0)\n     private int levels(Class to) {\n         if (to.isInterface())\n             return to.getInterfaces().length;\n+        if (_base == null)\n+            return 0;\n         for (int i = 0; to != null; i++, to = to.getSuperclass())\n             if (to == _base)\n                 return i;"},{"sha":"2062d3f5a29e56383b29c3158046a7332c9a1764","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/A.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6687c01f114a9b878c79a83f24d04c14703d4090/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/A.java","raw_url":"https://github.com/apache/openjpa/raw/6687c01f114a9b878c79a83f24d04c14703d4090/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/A.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/A.java?ref=6687c01f114a9b878c79a83f24d04c14703d4090","patch":"@@ -19,8 +19,10 @@\n package org.apache.openjpa.meta;\r\n \r\n import javax.persistence.Entity;\r\n+import javax.persistence.Table;\r\n \r\n @Entity\r\n+@Table(name=\"meta_A\")\r\n public class A extends AbstractThing {\r\n \r\n }\r"},{"sha":"7fb70373e8774865e9ded4846545ddca29fa65ef","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/AbstractThing.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6687c01f114a9b878c79a83f24d04c14703d4090/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/AbstractThing.java","raw_url":"https://github.com/apache/openjpa/raw/6687c01f114a9b878c79a83f24d04c14703d4090/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/AbstractThing.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/AbstractThing.java?ref=6687c01f114a9b878c79a83f24d04c14703d4090","patch":"@@ -35,7 +35,7 @@ public String getId() {\n         return id;\r\n     }\r\n \r\n-    void setId(final String id) {\r\n+    protected void setId(final String id) {\r\n         this.id = id;\r\n     }\r\n }\r"},{"sha":"e89ba24257197a83c4ed4b2088bb50b6ce8c4386","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/B.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6687c01f114a9b878c79a83f24d04c14703d4090/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/B.java","raw_url":"https://github.com/apache/openjpa/raw/6687c01f114a9b878c79a83f24d04c14703d4090/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/B.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/B.java?ref=6687c01f114a9b878c79a83f24d04c14703d4090","patch":"@@ -21,10 +21,12 @@\n import java.util.Set;\r\n import javax.persistence.Entity;\r\n import javax.persistence.OneToMany;\r\n+import javax.persistence.Table;\r\n \r\n import org.apache.openjpa.meta.C;\r\n \r\n @Entity\r\n+@Table(name=\"meta_B\")\r\n public class B extends AbstractThing {\r\n     private Set<C> cs;\r\n     private Set<A> as;\r"},{"sha":"83f99aaa1b39d60d559f663bcfa8a2f47e30b730","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/C.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6687c01f114a9b878c79a83f24d04c14703d4090/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/C.java","raw_url":"https://github.com/apache/openjpa/raw/6687c01f114a9b878c79a83f24d04c14703d4090/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/C.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/C.java?ref=6687c01f114a9b878c79a83f24d04c14703d4090","patch":"@@ -23,11 +23,13 @@\n import javax.persistence.ManyToOne;\r\n import javax.persistence.Column;\r\n import javax.persistence.Id;\r\n+import javax.persistence.Table;\r\n \r\n import org.apache.openjpa.meta.C.Identity;\r\n \r\n @Entity\r\n @IdClass(Identity.class)\r\n+@Table(name=\"meta_C\")\r\n public class C {\r\n     private A a;\r\n     private B b;\r"},{"sha":"257e66605475ad002cb7ee3a19603c2059b10bbd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java","status":"modified","additions":52,"deletions":12,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/6687c01f114a9b878c79a83f24d04c14703d4090/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java","raw_url":"https://github.com/apache/openjpa/raw/6687c01f114a9b878c79a83f24d04c14703d4090/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java?ref=6687c01f114a9b878c79a83f24d04c14703d4090","patch":"@@ -20,35 +20,75 @@\n \r\n import javax.persistence.EntityManagerFactory;\r\n \r\n-import junit.framework.TestCase;\r\n import org.apache.openjpa.persistence.test.PersistenceTestCase;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n \r\n public class TestMetaDataInheritanceComparator extends PersistenceTestCase {\r\n \r\n-    public void testMetaDataInheritanceComparator() {\r\n+    public void testInheritanceComparatorWithoutBase() {\r\n+        inheritanceComparatorHelper(false);\r\n+    }\r\n+\r\n+    public void testInheritanceComparatorWithBase() {\r\n+        inheritanceComparatorHelper(true);\r\n+    }\r\n+\r\n+    private void inheritanceComparatorHelper(boolean base) {\r\n+        InheritanceComparator comp = new InheritanceComparator();\r\n+        if (base)\r\n+            comp.setBase(AbstractThing.class);\r\n+\r\n+        assertEquals(-1, comp.compare(A.class, B.class));\r\n+        assertEquals(-1, comp.compare(B.class, C.class));\r\n+        assertTrue(comp.compare(A.class, C.class) < 0);\r\n+\r\n+        assertEquals(-1, comp.compare(AbstractThing.class, A.class));\r\n+        assertEquals(-1, comp.compare(AbstractThing.class, B.class));\r\n+        assertTrue(comp.compare(AbstractThing.class, C.class) < 0);\r\n+    }\r\n+\r\n+    public void testMetaDataInheritanceComparatorWithoutBase() {\r\n+        metaDataInheritanceComparatorHelper(false);\r\n+    }\r\n+\r\n+    public void testMetaDataInheritanceComparatorWithBase() {\r\n+        metaDataInheritanceComparatorHelper(true);\r\n+    }\r\n+\r\n+    private void metaDataInheritanceComparatorHelper(boolean base) {\r\n         InheritanceComparator comp = new MetaDataInheritanceComparator();\r\n-        comp.setBase(AbstractThing.class);\r\n+        if (base)\r\n+            comp.setBase(AbstractThing.class);\r\n \r\n         EntityManagerFactory emf = createEMF(A.class, B.class, C.class,\r\n             AbstractThing.class);\r\n \r\n         ClassMetaData a = JPAFacadeHelper.getMetaData(emf, A.class);\r\n         ClassMetaData b = JPAFacadeHelper.getMetaData(emf, B.class);\r\n         ClassMetaData c = JPAFacadeHelper.getMetaData(emf, C.class);\r\n+        ClassMetaData at = JPAFacadeHelper.getMetaData(emf,\r\n+            AbstractThing.class);\r\n+\r\n+        emf.close();\r\n \r\n         assertEquals(-1, comp.compare(a, b));\r\n         assertEquals(-1, comp.compare(b, c));\r\n-        assertEquals(-1, comp.compare(a, c));\r\n-    }\r\n+        assertTrue(comp.compare(a, c) < 0);\r\n \r\n-    public void testInheritanceComparator() {\r\n-        InheritanceComparator comp = new InheritanceComparator();\r\n-        comp.setBase(AbstractThing.class);\r\n+        assertEquals(1, comp.compare(b, a));\r\n+        assertEquals(1, comp.compare(c, b));\r\n+        assertTrue(comp.compare(c, a) > 0);\r\n \r\n-        assertEquals(-1, comp.compare(A.class, B.class));\r\n-        assertEquals(-1, comp.compare(B.class, C.class));\r\n-        assertEquals(-1, comp.compare(A.class, C.class));\r\n+        assertEquals(-1, comp.compare(at, a));\r\n+        assertEquals(-1, comp.compare(at, b));\r\n+        assertEquals(-1, comp.compare(at, c));\r\n+    }\r\n+\r\n+    public void testEndToEnd() {\r\n+        // make sure we can get things fully instantiated\r\n+        EntityManagerFactory emf = createEMF(A.class, B.class, C.class,\r\n+            AbstractThing.class);\r\n+        emf.createEntityManager().close();\r\n+        emf.close();\r\n     }\r\n }\r"}]}

