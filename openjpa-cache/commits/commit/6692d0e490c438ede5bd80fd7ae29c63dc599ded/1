{"sha":"6692d0e490c438ede5bd80fd7ae29c63dc599ded","node_id":"MDY6Q29tbWl0MjA2MzY0OjY2OTJkMGU0OTBjNDM4ZWRlNWJkODBmZDdhZTI5YzYzZGM1OTlkZWQ=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-01T15:47:09Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-10-01T15:47:09Z"},"message":"OPENJPA-370.  Committing Teresa's patch with a few minor updates (per my JIRA Issue remarks).\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@580995 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a8a77a5c0284a9fd19e5390d84bfdbda9f3f9091","url":"https://api.github.com/repos/apache/openjpa/git/trees/a8a77a5c0284a9fd19e5390d84bfdbda9f3f9091"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6692d0e490c438ede5bd80fd7ae29c63dc599ded","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6692d0e490c438ede5bd80fd7ae29c63dc599ded","html_url":"https://github.com/apache/openjpa/commit/6692d0e490c438ede5bd80fd7ae29c63dc599ded","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6692d0e490c438ede5bd80fd7ae29c63dc599ded/comments","author":null,"committer":null,"parents":[{"sha":"e75c7cb44654d329001a381f0ce96497e47406c3","url":"https://api.github.com/repos/apache/openjpa/commits/e75c7cb44654d329001a381f0ce96497e47406c3","html_url":"https://github.com/apache/openjpa/commit/e75c7cb44654d329001a381f0ce96497e47406c3"}],"stats":{"total":1107,"additions":1098,"deletions":9},"files":[{"sha":"d94604e14f9f1b29832639c0aa0d13e003e6e092","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/6692d0e490c438ede5bd80fd7ae29c63dc599ded/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/6692d0e490c438ede5bd80fd7ae29c63dc599ded/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java?ref=6692d0e490c438ede5bd80fd7ae29c63dc599ded","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.kernel;\n \n+import java.util.BitSet;\n import java.util.Collection;\n import java.util.Set;\n \n@@ -446,7 +447,15 @@ public int requiresFetch(FieldMetaData fmd) {\n             throw translate(re);\n         }\n     }\n-\n+    \n+    public BitSet requiresFetch(Set fgs, FieldMetaData[] fmds ){\n+        try {\n+            return _fetch.requiresFetch(fgs, fmds);\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+    \n     public boolean requiresLoad() {\n         try {\n             return _fetch.requiresLoad();"},{"sha":"40c00ca4ff1820dcd1ac2f3791d940e80863fa2c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/6692d0e490c438ede5bd80fd7ae29c63dc599ded/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/6692d0e490c438ede5bd80fd7ae29c63dc599ded/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java?ref=6692d0e490c438ede5bd80fd7ae29c63dc599ded","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.kernel;\n \n import java.io.Serializable;\n+import java.util.BitSet;\n import java.util.Collection;\n import java.util.Set;\n \n@@ -345,6 +346,18 @@\n      */\n     public int requiresFetch(FieldMetaData fm);\n \n+    /**\n+     * Affirms if the given fields require to be fetched in the context of\n+     * the given fetch group set.  Returns a BitSet that contains one of\n+     * {@link #FETCH_NONE}, {@link #FETCH_LOAD}, {@link FETCH_REF} for each\n+     * field.\n+     * \n+     * @param fgs fetch group set\n+     * @param fmds array of fields to be examined\n+     * @return BitSet that indicates whether fetches are required or not\n+     */\n+    public BitSet requiresFetch(Set fgs, FieldMetaData[] fmds );\n+    \n     /**\n      * Return false if we know that the object being fetched with this\n      * configuration does not require a load, because this configuration came"},{"sha":"17e0cc5d2cb64f91af57516245499cd8a0d0247d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","status":"modified","additions":75,"deletions":3,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/6692d0e490c438ede5bd80fd7ae29c63dc599ded/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/6692d0e490c438ede5bd80fd7ae29c63dc599ded/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java?ref=6692d0e490c438ede5bd80fd7ae29c63dc599ded","patch":"@@ -21,6 +21,7 @@\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.BitSet;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n@@ -92,6 +93,7 @@\n     private boolean _load = true;\n     private int _availableRecursion;\n     private int _availableDepth;\n+    private Map _lfgFields = null;\n \n     public FetchConfigurationImpl() {\n         this(null);\n@@ -510,6 +512,10 @@ public int requiresFetch(FieldMetaData fm) {\n         if (!includes(fm))\n             return FETCH_NONE;\n         \n+        return indirectFetch(fm);\n+    }\n+    \n+    private int indirectFetch(FieldMetaData fm){\n         Class type = getRelationType(fm);\n         if (type == null)\n             return FETCH_LOAD;\n@@ -529,6 +535,15 @@ public int requiresFetch(FieldMetaData fm) {\n             return FETCH_REF;\n         return FETCH_LOAD;\n     }\n+    \n+    public BitSet requiresFetch(Set fgs, FieldMetaData[] fmds) {\n+        BitSet fields = new BitSet(fgs.size());\n+        Iterator itr = fgs.iterator();\n+        while (itr.hasNext()) {\n+            fields = includes((FieldMetaData) itr.next(), fmds, fields);\n+        }\n+        return fields;\n+    }\n \n     public boolean requiresLoad() {\n         return _load;\n@@ -567,16 +582,73 @@ private boolean includes(FieldMetaData fmd) {\n             || hasField(fmd.getFullName(false)))\n             return true;\n         String[] fgs = fmd.getCustomFetchGroups();\n-        for (int i = 0; i < fgs.length; i++)\n+        for (int i = 0; i < fgs.length; i++){\n             if (hasFetchGroup(fgs[i]))\n                 return true;\n+        }\n         return false; \n     }\n \n+    private BitSet includes(FieldMetaData fmd, FieldMetaData[] fmds,\n+            BitSet fields) {\n+        if ((fmd.isInDefaultFetchGroup() && hasFetchGroup(FetchGroup.NAME_DEFAULT))\n+                || hasFetchGroup(FetchGroup.NAME_ALL)\n+                || hasField(fmd.getFullName(false))) {\n+            if (indirectFetch(fmd) != FETCH_NONE)\n+                fields.set(fmd.getIndex());\n+            return fields;\n+        }\n+        // now we need to see if this field associates with\n+        // any fetch groups\n+        String[] fgs = fmd.getCustomFetchGroups();\n+        for (int i = 0; i < fgs.length; i++) {\n+            if (hasFetchGroup(fgs[i])) {\n+                if (indirectFetch(fmd) != FETCH_NONE)\n+                    fields.set(fmd.getIndex());\n+                // check whether this field has a loadFetchGroup\n+                // if it has a LoadFetchGroup, then we need to get\n+                // all the fields that associate with this LoadFetchGroup\n+                String fg = fmd.getLoadFetchGroup();\n+                if (fg != null) {\n+                    BitSet fldIndex = getLoadFetchGroupFields(fg, fmds);\n+                    // merge the loadFetchGroup fields to the retuned fields.\n+                    if (fldIndex != null && !fldIndex.isEmpty()) {\n+                        for (int j = 0; j < fldIndex.length(); j++)\n+                            if (fldIndex.get(j))\n+                                fields.set(j);\n+                    }\n+                }\n+            }\n+        }\n+        return fields;\n+    }\n+    \n+    /**\n+     * Search the fields for this loadFetchGroup. It basically searches from\n+     * each field and check whether this field has the same fetchgroup. If it\n+     * has then this field is required to load.\n+     */\n+    private BitSet getLoadFetchGroupFields(String fg, FieldMetaData[] fmds) {\n+        BitSet rtnField = null;\n+        if (_lfgFields != null && _lfgFields.containsKey(fg))\n+           return (BitSet)_lfgFields.get(fg);\n+        for (int i = 0; i < fmds.length; i++) {\n+            if (fmds[i].isInFetchGroup(fg)){\n+                if (rtnField == null)\n+                    rtnField = new BitSet(fmds.length);\n+                rtnField.set(i);\n+            }\n+        }\n+        if (_lfgFields == null)\n+            _lfgFields = new HashMap(fmds.length);\n+        _lfgFields.put(fg,rtnField);\n+        return rtnField;\n+    }\n+    \n     /**\n-     * Return the available recursion depth via the given field for the\n+     * Return the available recursion depth via the given field for the \n      * given type.\n-     *\n+     * \n      * @param traverse whether we're traversing the field\n      */\n     private int getAvailableRecursionDepth(FieldMetaData fm, Class type, "},{"sha":"e86fb9262218f19aa60cb06a192bd67826f71ef9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":25,"deletions":5,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/6692d0e490c438ede5bd80fd7ae29c63dc599ded/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/6692d0e490c438ede5bd80fd7ae29c63dc599ded/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=6692d0e490c438ede5bd80fd7ae29c63dc599ded","patch":"@@ -427,18 +427,22 @@ private BitSet getUnloadedInternal(FetchConfiguration fetch, int mode,\n \n         BitSet fields = null;\n         FieldMetaData[] fmds = _meta.getFields();\n+        Set fgs = null;         \n         boolean load;\n+        \n         for (int i = 0; i < fmds.length; i++) {\n-            if (_loaded.get(i) || (exclude != null && exclude.get(i)))\n-                continue;\n+              if (exclude != null && exclude.get(i))\n+                  continue;\n \n             switch (mode) {\n                 case LOAD_SERIALIZE:\n                     load = !fmds[i].isTransient();\n                     break;\n-                case LOAD_FGS:\n-                    load = fetch == null || fetch.requiresFetch(fmds[i]) \n-                        != FetchConfiguration.FETCH_NONE;\n+                case LOAD_FGS:                  \n+                    load = false;\n+                    if (fgs == null)\n+                        fgs = new HashSet(fmds.length);\n+                    fgs.add(fmds[i]);\n                     break;\n                 default: // LOAD_ALL\n                     load = true;\n@@ -449,6 +453,22 @@ private BitSet getUnloadedInternal(FetchConfiguration fetch, int mode,\n                     fields = new BitSet(fmds.length);\n                 fields.set(i);\n             }\n+            // post process for the fetchGroup: if there is a\n+            // fetchgroup field, then go to the FetchConfiguration\n+            // to get the required fetch fields.\n+            if (fgs != null) {\n+                if (fields == null)\n+                    fields = new BitSet(fmds.length);\n+                BitSet fgFields = fetch.requiresFetch(fgs, fmds);\n+                // merge the fetchgroup required fields to the original\n+                // fields only the fields are not already loaded and\n+                // are not in the original fields.\n+                for (int j = 0; j < fgFields.length(); j++) {\n+                    if (fgFields.get(j) && !fields.get(j) && !_loaded.get(j))\n+                        fields.set(j);\n+                }\n+            }\n+\n         }\n         return fields;\n     }"},{"sha":"aa5d0b57b7fe2b17554c55847e0e8ec62127fd7a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGAddress.java","status":"added","additions":105,"deletions":0,"changes":105,"blob_url":"https://github.com/apache/openjpa/blob/6692d0e490c438ede5bd80fd7ae29c63dc599ded/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGAddress.java","raw_url":"https://github.com/apache/openjpa/raw/6692d0e490c438ede5bd80fd7ae29c63dc599ded/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGAddress.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGAddress.java?ref=6692d0e490c438ede5bd80fd7ae29c63dc599ded","patch":"@@ -0,0 +1,105 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.fetchgroups;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+\r\n+@Entity\r\n+public class FGAddress {\r\n+    @Id\r\n+    private int id;\r\n+\r\n+    @Basic\r\n+    private String street;\r\n+\r\n+    @Basic\r\n+    private String city;\r\n+\r\n+    @Basic\r\n+    private String state;\r\n+\r\n+    @Basic\r\n+    private int zip;\r\n+\r\n+    public FGAddress() {\r\n+\r\n+    }\r\n+\r\n+    public FGAddress(int id, String street, String city, String state, int zip) {\r\n+        this.id = id;\r\n+        this.street = street;\r\n+        this.city = city;\r\n+        this.state = state;\r\n+        this.zip = zip;\r\n+    }\r\n+\r\n+    public String getCity() {\r\n+        return city;\r\n+    }\r\n+\r\n+    public void setCity(String city) {\r\n+        this.city = city;\r\n+    }\r\n+\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getState() {\r\n+        return state;\r\n+    }\r\n+\r\n+    public void setState(String state) {\r\n+        this.state = state;\r\n+    }\r\n+\r\n+    public String getStreet() {\r\n+        return street;\r\n+    }\r\n+\r\n+    public void setStreet(String street) {\r\n+        this.street = street;\r\n+    }\r\n+\r\n+    public int getZip() {\r\n+        return zip;\r\n+    }\r\n+\r\n+    public void setZip(int zip) {\r\n+        this.zip = zip;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        StringBuffer sb = new StringBuffer();\r\n+        sb.append(\"FGAddress(id=\").append(this.id).append(\")\");\r\n+        sb.append(\": street=\").append(getStreet());\r\n+        sb.append(\": city=\").append(getCity());\r\n+        sb.append(\": state=\").append(getState());\r\n+        sb.append(\": zip=\").append(getZip());\r\n+\r\n+        return new String(sb);\r\n+    }\r\n+\r\n+}\r"},{"sha":"38bc351e099b206597c94f1ab7bd428088e6d493","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGDepartment.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/6692d0e490c438ede5bd80fd7ae29c63dc599ded/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGDepartment.java","raw_url":"https://github.com/apache/openjpa/raw/6692d0e490c438ede5bd80fd7ae29c63dc599ded/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGDepartment.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGDepartment.java?ref=6692d0e490c438ede5bd80fd7ae29c63dc599ded","patch":"@@ -0,0 +1,60 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.fetchgroups;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+\r\n+@Entity\r\n+public class FGDepartment {\r\n+    @Id\r\n+    private int id;\r\n+\r\n+    private String name;\r\n+\r\n+    public FGDepartment() {\r\n+\r\n+    }\r\n+\r\n+    public FGDepartment(int id, String name) {\r\n+        this.id = id;\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return new String(\"FGDepartment(id=\" + this.id + \")\");\r\n+    }\r\n+\r\n+}\r"},{"sha":"51457097fff526d5cd92b7a35e90f946438fc4e1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGEmployee.java","status":"added","additions":174,"deletions":0,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/6692d0e490c438ede5bd80fd7ae29c63dc599ded/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/6692d0e490c438ede5bd80fd7ae29c63dc599ded/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGEmployee.java?ref=6692d0e490c438ede5bd80fd7ae29c63dc599ded","patch":"@@ -0,0 +1,174 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.fetchgroups;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.DiscriminatorColumn;\r\n+import javax.persistence.DiscriminatorType;\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.OneToOne;\r\n+\r\n+import org.apache.openjpa.persistence.FetchAttribute;\r\n+import org.apache.openjpa.persistence.FetchGroup;\r\n+import org.apache.openjpa.persistence.FetchGroups;\r\n+import org.apache.openjpa.persistence.LoadFetchGroup;\r\n+\r\n+@Entity\r\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n+// Default inheritance strategy\r\n+@DiscriminatorColumn(name = \"EMP_TYPE\", discriminatorType = DiscriminatorType.INTEGER)\r\n+@DiscriminatorValue(\"0\")\r\n+@FetchGroups( {\r\n+        @FetchGroup(name = \"AddressFetchGroup\", attributes = { @FetchAttribute(name = \"address\") }),\r\n+        @FetchGroup(name = \"RatingFetchGroup\", attributes = { @FetchAttribute(name = \"rating\") }),\r\n+        @FetchGroup(name = \"ManagerFetchGroup1A\", attributes = { @FetchAttribute(name = \"manager\", recursionDepth = 1) }),\r\n+        @FetchGroup(name = \"ManagerFetchGroup1B\", attributes = { @FetchAttribute(name = \"manager\", recursionDepth = -1) }),\r\n+        @FetchGroup(name = \"ManagerFetchGroup2\", attributes = { @FetchAttribute(name = \"manager\", recursionDepth = 2) }),\r\n+        @FetchGroup(name = \"DescFetchGroup\", attributes = { @FetchAttribute(name = \"description\") }),\r\n+\r\n+        @FetchGroup(name = \"DepartmentFetchGroup\", attributes = { @FetchAttribute(name = \"dept\") }),\r\n+\r\n+        @FetchGroup(name = \"AggregateEmployeeFetchGroup1\", attributes = {\r\n+                @FetchAttribute(name = \"dept\"),\r\n+                @FetchAttribute(name = \"address\"),\r\n+                @FetchAttribute(name = \"manager\", recursionDepth = 1) }),\r\n+        @FetchGroup(name = \"AggregateEmployeeFetchGroup2\", fetchGroups = { \"AggregateEmployeeFetchGroup1\" }),\r\n+        @FetchGroup(name = \"AggregateEmployeeFetchGroup3\", fetchGroups = {\r\n+                \"DepartmentFetchGroup\", \"AddressFetchGroup\",\r\n+                \"ManagerFetchGroup1A\" }),\r\n+        @FetchGroup(name = \"AggregateEmployeeFetchGroup4\", attributes = {\r\n+                @FetchAttribute(name = \"dept\"),\r\n+                @FetchAttribute(name = \"address\") }, fetchGroups = { \"ManagerFetchGroup1A\" }) })\r\n+public class FGEmployee {\r\n+    @Id\r\n+    private int id;\r\n+\r\n+    private String lastName;\r\n+\r\n+    private String firstName;\r\n+\r\n+    @Basic(fetch = FetchType.LAZY)\r\n+    private String description;\r\n+\r\n+    @ManyToOne(fetch = FetchType.LAZY)\r\n+    private FGDepartment dept;\r\n+\r\n+    @OneToOne(fetch = FetchType.LAZY)\r\n+    private FGAddress address;\r\n+\r\n+    @ManyToOne(fetch = FetchType.LAZY)\r\n+    private FGManager manager;\r\n+\r\n+    @Basic(fetch = FetchType.LAZY)\r\n+    @LoadFetchGroup(\"AddressFetchGroup\")\r\n+    private String rating;\r\n+\r\n+    public FGEmployee() {\r\n+\r\n+    }\r\n+\r\n+    public FGEmployee(int id, String firstName, String lastName, String desc,\r\n+            FGDepartment dept, FGAddress address, FGManager manager,\r\n+            String rating) {\r\n+        this.id = id;\r\n+        this.lastName = lastName;\r\n+        this.firstName = firstName;\r\n+        this.description = desc;\r\n+        this.dept = dept;\r\n+        this.address = address;\r\n+        this.manager = manager;\r\n+        this.rating = rating;\r\n+    }\r\n+\r\n+    public FGAddress getAddress() {\r\n+        return address;\r\n+    }\r\n+\r\n+    public void setAddress(FGAddress address) {\r\n+        this.address = address;\r\n+    }\r\n+\r\n+    public FGDepartment getDept() {\r\n+        return dept;\r\n+    }\r\n+\r\n+    public void setDept(FGDepartment dept) {\r\n+        this.dept = dept;\r\n+    }\r\n+\r\n+    public String getDescription() {\r\n+        return description;\r\n+    }\r\n+\r\n+    public void setDescription(String desc) {\r\n+        this.description = desc;\r\n+    }\r\n+\r\n+    public String getFirstName() {\r\n+        return firstName;\r\n+    }\r\n+\r\n+    public void setFirstName(String firstName) {\r\n+        this.firstName = firstName;\r\n+    }\r\n+\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getLastName() {\r\n+        return lastName;\r\n+    }\r\n+\r\n+    public void setLastName(String lastName) {\r\n+        this.lastName = lastName;\r\n+    }\r\n+\r\n+    public FGManager getManager() {\r\n+        return manager;\r\n+    }\r\n+\r\n+    public void setManager(FGManager manager) {\r\n+        this.manager = manager;\r\n+    }\r\n+\r\n+    public String getRating() {\r\n+        return rating;\r\n+    }\r\n+\r\n+    public void setRating(String rating) {\r\n+        this.rating = rating;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return new String(this.getClass().getSimpleName() + \"(id=\" + this.id\r\n+                + \")\");\r\n+    }\r\n+\r\n+}\r"},{"sha":"8c69edf6945638494260287ecca0f5e1c3e790c8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGManager.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/6692d0e490c438ede5bd80fd7ae29c63dc599ded/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGManager.java","raw_url":"https://github.com/apache/openjpa/raw/6692d0e490c438ede5bd80fd7ae29c63dc599ded/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGManager.java?ref=6692d0e490c438ede5bd80fd7ae29c63dc599ded","patch":"@@ -0,0 +1,72 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.fetchgroups;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.OneToMany;\r\n+\r\n+import org.apache.openjpa.persistence.FetchAttribute;\r\n+import org.apache.openjpa.persistence.FetchGroup;\r\n+import org.apache.openjpa.persistence.FetchGroups;\r\n+\r\n+@Entity\r\n+@DiscriminatorValue(\"1\")\r\n+@FetchGroups( {\r\n+        @FetchGroup(name = \"MDataFetchGroup\", attributes = { @FetchAttribute(name = \"mData\") }),\r\n+        @FetchGroup(name = \"EmployeesFetchGroup\", attributes = { @FetchAttribute(name = \"employees\") }) })\r\n+public class FGManager extends FGEmployee {\r\n+    @OneToMany(mappedBy = \"manager\", fetch = FetchType.LAZY)\r\n+    Collection<FGEmployee> employees;\r\n+\r\n+    @Basic(fetch = FetchType.LAZY)\r\n+    private String mData;\r\n+\r\n+    public FGManager() {\r\n+        super();\r\n+        employees = new ArrayList<FGEmployee>();\r\n+    }\r\n+\r\n+    public FGManager(int id, String firstName, String lastName, String desc,\r\n+            FGDepartment dept, FGAddress address, FGManager manager,\r\n+            String rating, Collection<FGEmployee> employees, String mData) {\r\n+        super(id, firstName, lastName, desc, dept, address, manager, rating);\r\n+        this.employees = new ArrayList<FGEmployee>();\r\n+        this.employees.addAll(employees);\r\n+        this.mData = mData;\r\n+    }\r\n+\r\n+    public String getMData() {\r\n+        return mData;\r\n+    }\r\n+\r\n+    public void setMData(String data) {\r\n+        mData = data;\r\n+    }\r\n+\r\n+    public Collection<FGEmployee> getEmployees() {\r\n+        return employees;\r\n+    }\r\n+\r\n+}\r"},{"sha":"d0ff5a7aeec5832237b95146aba37b922a52291c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroup.java","status":"added","additions":564,"deletions":0,"changes":564,"blob_url":"https://github.com/apache/openjpa/blob/6692d0e490c438ede5bd80fd7ae29c63dc599ded/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroup.java","raw_url":"https://github.com/apache/openjpa/raw/6692d0e490c438ede5bd80fd7ae29c63dc599ded/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroup.java?ref=6692d0e490c438ede5bd80fd7ae29c63dc599ded","patch":"@@ -0,0 +1,564 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.fetchgroups;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.Iterator;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n+\r\n+public class TestFetchGroup extends SingleEMTestCase {\r\n+    public void setUp() {\r\n+        setUp(FGEmployee.class, FGDepartment.class, FGManager.class,\r\n+                FGAddress.class);\r\n+        EntityManager em = emf.createEntityManager();\r\n+        OpenJPAEntityManager oem = OpenJPAPersistence.cast(em);\r\n+\r\n+        // Populate database as denoted in Entity Data\r\n+        boolean errors = initializeDatabase(oem);\r\n+        assertFalse(errors);\r\n+    }\r\n+\r\n+    // Test no fetch group is added.\r\n+    public void testFetchGroup001() {\r\n+        // System.out.println(\"***********************************************\");\r\n+        // System.out.println(\"******** 001 ==> test no fetch group is added\r\n+        // thru API\");\r\n+        EntityManager em = emf.createEntityManager();\r\n+        OpenJPAEntityManager oem = OpenJPAPersistence.cast(em);\r\n+\r\n+        FGEmployee emp = findEmployee(oem, 1, false, null);\r\n+\r\n+        // Examine Employee(id=1).rating, data should be available\r\n+        // System.out.println(\"Assert Employee(id=1).rating should be null.\r\n+        // Result ==>\");\r\n+        assertNull(emp.getRating());\r\n+        // Examine Employee(id=1).description, data should NOT be available\r\n+        // System.out.println(\"Assert Employee(id=1).description is null. Result\r\n+        // ==>\");\r\n+        assertNull(emp.getDescription());\r\n+        // Examine Employee(id=1).address, data should not be available\r\n+        // System.out.println(\"Assert Employee(id=1).address is null\");\r\n+        assertNull(emp.getAddress());\r\n+        // Examine Employee(id=1).dept, data should NoTbe available\r\n+        // System.out.println(\"Assert Employee(id=1).dept is null \");\r\n+        assertNull(emp.getDept());\r\n+        // Examine Employee(id=1).manager, data should NOT be available.\r\n+        // System.out.println(\"Assert Employee(id=1).manager is null \");\r\n+        assertNull(emp.getManager());\r\n+\r\n+    }\r\n+\r\n+    // Test no fetch group is added and restFetchGroup is called.\r\n+    public void testFetchGroup002() {\r\n+        // System.out.println(\"***********************************************\");\r\n+        // System.out.println(\"*****************002 ==> test no fetch group is\r\n+        // added thru API and \");\r\n+        // System.out.println(\" resetFetchGroup is called.\");\r\n+        EntityManager em = emf.createEntityManager();\r\n+        OpenJPAEntityManager oem = OpenJPAPersistence.cast(em);\r\n+\r\n+        FGEmployee emp = findEmployee(oem, 1, true, null);\r\n+        // Examine Employee(id=1).rating, data should not be available\r\n+        // System.out.println(\"Assert Employee(id=1).rating is null.\");\r\n+        assertNull(emp.getRating());\r\n+        // Examine Employee(id=1).description, data should NOT be available\r\n+        // System.out.println(\"Assert Employee(id=1).description is null. Result\r\n+        // ==>\");\r\n+        assertNull(emp.getDescription());\r\n+        // Examine Employee(id=1).address, data should not be available\r\n+        // System.out.println(\"Assert Employee(id=1).address is null \");\r\n+        assertNull(emp.getAddress());\r\n+        // Examine Employee(id=1).dept, data should NoT be available\r\n+        // System.out.println(\"Assert Employee(id=1).dept is null \");\r\n+        assertNull(emp.getDept());\r\n+        // Examine Employee(id=1).manager, data should NOT be available.\r\n+        // System.out.println(\"Assert Employee(id=1).manager is null \");\r\n+        assertNull(emp.getManager());\r\n+\r\n+    }\r\n+\r\n+    // Test Rating fetch group is added and restFetchGroup is called.\r\n+    public void testFetchGroup003() {\r\n+        // System.out.println(\"***********************************************\");\r\n+        // System.out.println(\"****************003 ==> test RatingFetchGroup is\r\n+        // added thru API and \");\r\n+        // System.out.println(\" resetFetchGroup is called.\");\r\n+        EntityManager em = emf.createEntityManager();\r\n+        OpenJPAEntityManager oem = OpenJPAPersistence.cast(em);\r\n+\r\n+        String[] arr = { \"RatingFetchGroup\" };\r\n+        FGEmployee emp = findEmployee(oem, 1, true, arr);\r\n+        // Examine Employee(id=1).rating, data should be available\r\n+        // System.out.println(\"Assert Employee(id=1).rating is not null. Result\r\n+        // ==> \");\r\n+        assertNotNull(emp.getRating());\r\n+        // Examine Employee(id=1).description, data should NOT be available\r\n+        // System.out.println(\"Assert Employee(id=1).description is null. Result\r\n+        // ==>\");\r\n+        assertNull(emp.getDescription());\r\n+        // Examine Employee(id=1).address, data should be available\r\n+        // System.out.println(\"Assert Employee(id=1).address is not null because\r\n+        // of @LoadFetchGroup on Rating ==> \");\r\n+        assertNotNull(emp.getAddress());\r\n+        // Examine Employee(id=1).dept, data should NoTbe available\r\n+        // System.out.println(\"Assert Employee(id=1).dept is null = \");\r\n+        assertNull(emp.getDept());\r\n+        // Examine Employee(id=1).manager, data should NOT be available.\r\n+        // System.out.println(\"Assert Employee(id=1).manager is null =\");\r\n+        assertNull(emp.getManager());\r\n+        // em.getTransaction().commit();\r\n+\r\n+    }\r\n+\r\n+    // Test Address and Rating fetch groups are added and restFetchGroup is\r\n+    // called.\r\n+    public void testFetchGroup004() {\r\n+        // System.out.println(\"***********************************************\");\r\n+        // System.out.println(\"***************004 ==> test RatingFetchGroup and\r\n+        // AddressFetchGroup\" +\r\n+        // \"are added thru API and \" +\r\n+        // \"resetFetchGroup is called.\");\r\n+        EntityManager em = emf.createEntityManager();\r\n+        OpenJPAEntityManager oem = OpenJPAPersistence.cast(em);\r\n+\r\n+        String[] arr = { \"RatingFetchGroup\", \"AddressFetchGroup\" };\r\n+        FGEmployee emp = findEmployee(oem, 1, true, arr);\r\n+        // Examine Employee(id=1).rating, data should be available\r\n+        // System.out.println(\"Assert Employee(id=1).rating is not null. Result\r\n+        // ==> \");\r\n+        assertNotNull(emp.getRating());\r\n+        // Examine Employee(id=1).description, data should NOT be available\r\n+        // System.out.println(\"Assert Employee(id=1).description is null. Result\r\n+        // ==>\");\r\n+        assertNull(emp.getDescription());\r\n+        // Examine Employee(id=1).address, data should be available\r\n+        // System.out.println(\"Assert Employee(id=1).address is not null ==> \");\r\n+        assertNotNull(emp.getAddress());\r\n+        // Examine Employee(id=1).dept, data should NoTbe available\r\n+        // System.out.println(\"Assert Employee(id=1).dept is null = \");\r\n+        assertNull(emp.getDept());\r\n+        // Examine Employee(id=1).manager, data should NOT be available.\r\n+        // System.out.println(\"Assert Employee(id=1).manager is null =\");\r\n+        assertNull(emp.getManager());\r\n+\r\n+    }\r\n+\r\n+    // Test aggregateEmployeeFetchGroup2 only\r\n+    public void testFetchGroup005() {\r\n+        // System.out.println(\"***********************************************\");\r\n+        // System.out.println(\"***************005 ==> test\r\n+        // aggregateEmployeeFetchGroup2 only\");\r\n+        EntityManager em = emf.createEntityManager();\r\n+        OpenJPAEntityManager oem = OpenJPAPersistence.cast(em);\r\n+\r\n+        String[] arr = { \"AggregateEmployeeFetchGroup2\" };\r\n+        FGEmployee emp = findEmployee(oem, 1, true, arr);\r\n+        // Examine Employee(id=1).address, data should be available\r\n+\r\n+        // System.out.println(\"Assert Employee(id=1).address is not null \");\r\n+        assertNotNull(emp.getAddress());\r\n+        // Examine Employee(id=1).dept, data should NoTbe available\r\n+        // System.out.println(\"Assert Employee(id=1).dept is not null = \");\r\n+        assertNotNull(emp.getDept());\r\n+        // Examine Employee(id=1).manager, data should NOT be available.\r\n+        // System.out.println(\"Assert Employee(id=1).manager is not null =\");\r\n+        assertNotNull(emp.getManager());\r\n+\r\n+    }\r\n+\r\n+    public void testFetchGroup006() {\r\n+        // System.out.println(\"***********************************************\");\r\n+        // System.out.println(\"************006 ==> test\r\n+        // aggregateEmployeeFetchGroup1 and \"+\r\n+        // \" aggregateEmployeeFetchGroup2 - expect address, dept and manager are\r\n+        // not null\");\r\n+        EntityManager em = emf.createEntityManager();\r\n+        OpenJPAEntityManager oem = OpenJPAPersistence.cast(em);\r\n+        // em.getTransaction().begin();\r\n+\r\n+        String[] arr = { \"AggregateEmployeeFetchGroup1\",\r\n+                \"AggregateEmployeeFetchGroup2\" };\r\n+        FGEmployee emp = findEmployee(oem, 1, true, arr);\r\n+        // Examine Employee(id=1).address, data should be available\r\n+        // System.out.println(\"Assert Employee(id=1).address is not null \");\r\n+        assertNotNull(emp.getAddress());\r\n+        // Examine Employee(id=1).dept, data should NoTbe available\r\n+        // System.out.println(\"Assert Employee(id=1).dept is not null \");\r\n+        assertNotNull(emp.getDept());\r\n+        // Examine Employee(id=1).manager, data should NOT be available.\r\n+        // FGManager mgr = emp.getManager();\r\n+        // System.out.println(\"assert manager is not null\");\r\n+        assertNotNull(emp.getManager());\r\n+        assertNotNull(emp.getManager().getId());\r\n+        assertNotNull(emp.getManager().getFirstName());\r\n+\r\n+        // Verify that Manager(id=101).manager is not available, as the\r\n+        // recursion depth should have retrieved only the Employee and its\r\n+        // manager.\r\n+        // System.out.println(\"Verify that Manager(id=101).manager is no\r\n+        // available, as the recursion depth should have retrieved only the\r\n+        // Employee and its manager.\");\r\n+        // System.out.println(\"Assert Employee(id=1).manager.manager == null\r\n+        // ==>\"+ mgrMgr);\r\n+        assertNull(emp.getManager().getManager());\r\n+\r\n+        // System.out.println(\"Verify that Manager(id=201).manager is not\r\n+        // available, as the recursion depth should have retrieved only the\r\n+        // Employee and its manager.\");\r\n+        // assertNull(emp.getManager().getManager().getManager());\r\n+\r\n+    }\r\n+\r\n+    public void testFetchGroup007() {\r\n+        // System.out.println(\"***********************************************\");\r\n+        // System.out.println(\"***********007 ==> test one fetch group attribute\r\n+        // is associated\"+\r\n+        // \"multiple fetch groups\");\r\n+        EntityManager em = emf.createEntityManager();\r\n+        OpenJPAEntityManager oem = OpenJPAPersistence.cast(em);\r\n+\r\n+        String[] arr = { \"ManagerFetchGroup1A\" };\r\n+        FGEmployee emp = findEmployee(oem, 1, true, arr);\r\n+        // Examine Employee(id=1).address, data should be available\r\n+        // FGAddress addr = emp.getAddress();\r\n+        // System.out.println(\"Assert Employee(id=1).address is null \");\r\n+        assertNull(emp.getAddress());\r\n+        // Examine Employee(id=1).dept, data should NoTbe available\r\n+        // System.out.println(\"Assert Employee(id=1).dept is null\");\r\n+        assertNull(emp.getDept());\r\n+        // Examine Employee(id=1).manager, data should NOT be available.\r\n+        // FGManager mgr = emp.getManager();\r\n+\r\n+        // System.out.println(\"Assert manager is not null\");\r\n+        assertNotNull(emp.getManager());\r\n+        assertNotNull(emp.getManager().getId());\r\n+        assertNotNull(emp.getManager().getFirstName());\r\n+\r\n+        // Verify that Manager(id=101).manager is not available, as the\r\n+        // recursion depth should have retrieved only the Employee and its\r\n+        // manager.\r\n+        // System.out.println(\"Verify that Manager(id=101).manager is not\r\n+        // available, as the recursion depth should have retrieved only the\r\n+        // Employee and its manager.\");\r\n+        assertNull(emp.getManager().getManager());\r\n+\r\n+        // System.out.println(\"Verify that Manager(id=201).manager is not\r\n+        // available, as the recursion depth should have retrieved only the\r\n+        // Employee and its manager.\");\r\n+        // assertNull(emp.getManager().getManager().getManager());\r\n+\r\n+    }\r\n+\r\n+    public void testFetchGroup008() {\r\n+        // System.out.println(\"***********************************************\");\r\n+        // System.out.println(\"***********007 ==> test one fetch group attribute\r\n+        // is associated\"+\r\n+        // \"multiple fetch groups\");\r\n+        EntityManager em = emf.createEntityManager();\r\n+        OpenJPAEntityManager oem = OpenJPAPersistence.cast(em);\r\n+        OpenJPAEntityManager oem1 = OpenJPAPersistence.cast(em);\r\n+        Query q = oem1.createQuery(\"SELECT e FROM FGEmployee e WHERE e.id = 1\");\r\n+        OpenJPAQuery oq = (OpenJPAQuery) q;\r\n+        oem1.clear();\r\n+\r\n+        // use the default, address and description should be null\r\n+        FGEmployee emp = findEmployeeForQuery(oem, oq, 1, true, null, null);\r\n+        oem1.clear();\r\n+        assertNull(emp.getAddress());\r\n+        assertNull(emp.getDescription());\r\n+        assertNull(emp.getManager());\r\n+\r\n+        // add fetch fields to the fetch plan - address and description should\r\n+        // not be null\r\n+        String[] str = {\r\n+                \"org.apache.openjpa.persistence.query.FGEmployee.description\",\r\n+                \"org.apache.openjpa.persistence.query.FGEmployee.address\" };\r\n+        FGEmployee emp2 = findEmployeeForQuery(oem, oq, 1, true, str, null);\r\n+        oem1.clear();\r\n+        assertNotNull(emp2.getAddress());\r\n+        assertNotNull(emp2.getDescription());\r\n+        assertNull(emp2.getManager());\r\n+\r\n+        // remove fetch fields again - address and description should be null\r\n+        FGEmployee emp3 = findEmployeeForQuery(oem, oq, 1, false, null, str);\r\n+        oem1.clear();\r\n+        assertNull(emp3.getAddress());\r\n+        assertNull(emp3.getDescription());\r\n+        assertNull(emp3.getManager());\r\n+    }\r\n+\r\n+    private FGEmployee findEmployee(OpenJPAEntityManager oem, Object id,\r\n+            boolean reset, String[] fetchGroups) {\r\n+        oem.getTransaction().begin();\r\n+        // System.out.println(\"findEmployoee starts and check the fetchGroup\r\n+        // info:\");\r\n+        // int sz = oem.getFetchPlan().getFetchGroups().size();\r\n+        // String arr =\r\n+        // Arrays.toString(oem.getFetchPlan().getFetchGroups().toArray());\r\n+        // System.out.println(\"fetchGroup = \"+arr+ \" and fetch Group size\r\n+        // =\"+sz);\r\n+        // reset fetchGroup if necessary:\r\n+        if (reset) {\r\n+            oem.getFetchPlan().resetFetchGroups();\r\n+            // assertEquals(1, oem.getFetchPlan().getFetchGroups().size());\r\n+            // arr =\r\n+            // Arrays.toString(oem.getFetchPlan().getFetchGroups().toArray());\r\n+            // System.out.println(\"after resetFetchGroup, fetchGroup=\"+arr);\r\n+            // assertEquals(\"[default]\",arr);\r\n+        }\r\n+        if (fetchGroups != null) {\r\n+            // System.out.println(\"input fetchGroup = \"+fetchGroups);\r\n+            for (String fg : fetchGroups)\r\n+                oem.getFetchPlan().addFetchGroup(fg);\r\n+            // arr =\r\n+            // Arrays.toString(oem.getFetchPlan().getFetchGroups().toArray());\r\n+            // System.out.println(\"after addFetchGroup, fetchGroups = \"+arr);\r\n+        }\r\n+        // System.out.println(\"Finding Employee(id=1)...\");\r\n+        FGEmployee emp = oem.find(FGEmployee.class, id);\r\n+        // System.out.println(\"Employee found =\"+emp);\r\n+        oem.getTransaction().commit();\r\n+        // oem.clear();\r\n+        oem.close();\r\n+        return emp;\r\n+\r\n+    }\r\n+\r\n+    private static FGEmployee findEmployeeForQuery(OpenJPAEntityManager oem,\r\n+            OpenJPAQuery oq, Object id, boolean reset, String[] fetchGroups,\r\n+            String[] removes) {\r\n+        oem.getTransaction().begin();\r\n+        // reset fetchGroup if necessary:\r\n+        if (reset) {\r\n+            oem.getFetchPlan().resetFetchGroups();\r\n+            oq.getFetchPlan().resetFetchGroups();\r\n+        }\r\n+        if (fetchGroups != null) {\r\n+            for (String fg : fetchGroups)\r\n+                oq.getFetchPlan().addField(fg);\r\n+            // arr =\r\n+            // Arrays.toString(oq.getFetchPlan().getFetchGroups().toArray());\r\n+            // arr = Arrays.toString(oq.getFetchPlan().getFields().toArray());\r\n+            // System.out.println(\"after addFetchfields, fetch fields = \"+arr);\r\n+        }\r\n+        if (removes != null) {\r\n+            oq.getFetchPlan().removeFields(removes);\r\n+            // arr = Arrays.toString(oq.getFetchPlan().getFields().toArray());\r\n+            // System.out.println(\"after removeFetchGroup, fetch fields =\r\n+            // \"+arr);\r\n+        }\r\n+        // System.out.println(\"Finding Employee(id=1)...\");\r\n+        FGEmployee emp = (FGEmployee) oq.getSingleResult();\r\n+        oem.getTransaction().commit();\r\n+        oem.clear();\r\n+        // oem.close();\r\n+        return emp;\r\n+\r\n+    }\r\n+\r\n+    private static void cleanDatabase(EntityManager em) {\r\n+        // Clean out the database\r\n+        em.clear();\r\n+\r\n+        String entityNames[] = { \"FGEmployee\", \"FGAddress\", \"FGDepartment\" };\r\n+\r\n+        // System.out.println(\"Cleaning database.\");\r\n+        try {\r\n+            // System.out.println(\"Starting transaction...\");\r\n+            em.getTransaction().begin();\r\n+            // if (persistenceContextType == PERSISTENCECONTEXTTYPE_APPMGD)\r\n+            // em.joinTransaction();\r\n+\r\n+            for (int index = 0; index < entityNames.length; index++) {\r\n+                String query = \"SELECT a FROM \" + entityNames[index] + \" a\";\r\n+                List entityAList = em.createQuery(query).getResultList();\r\n+\r\n+                // Nothing returned, go to the next entity\r\n+                if (entityAList.size() == 0)\r\n+                    continue;\r\n+\r\n+                // System.out.println(\"Removing \" + entityNames[index] + \" data\r\n+                // from the database...\");\r\n+\r\n+                Iterator i = entityAList.iterator();\r\n+                while (i.hasNext()) {\r\n+                    Object entity = i.next();\r\n+                    // System.out.println(\"Removing entity \" + entity.toString()\r\n+                    // + \" ...\");\r\n+                    em.remove(entity);\r\n+                }\r\n+            }\r\n+\r\n+            // System.out.println(\"Committing transaction...\");\r\n+            em.getTransaction().commit();\r\n+        } catch (Throwable t) {\r\n+            System.out.println(\"Caught exception during db cleanup\" + t);\r\n+        } finally {\r\n+            try {\r\n+                if (em.getTransaction().isActive())\r\n+                    em.getTransaction().rollback();\r\n+            } catch (Throwable t) {\r\n+                System.out\r\n+                        .println(\"Caught exception transaction rollback in db cleanup failure recovery\"\r\n+                                + t);\r\n+                // throw t;\r\n+            }\r\n+        }\r\n+\r\n+        // System.out.println(\"Done cleaning database.\");\r\n+    }\r\n+\r\n+    private static boolean initializeDatabase(EntityManager em) {\r\n+        // Clean the database first\r\n+        cleanDatabase(em);\r\n+\r\n+        // System.out.println(\"Creating entities...\");\r\n+        boolean errors = false;\r\n+        try {\r\n+            // Persist all entities to the database\r\n+            // System.out.println(\"Starting transaction...\");\r\n+            em.getTransaction().begin();\r\n+            // if (persistenceContextType == PERSISTENCECONTEXTTYPE_APPMGD)\r\n+            // em.joinTransaction();\r\n+\r\n+            // Addreesses\r\n+            FGAddress[] addresses = new FGAddress[11];\r\n+            addresses[0] = new FGAddress(1, \"1010 29th Ave NW\", \"Rochester\",\r\n+                    \"MN\", 55901);\r\n+            addresses[1] = new FGAddress(2, \"2020 29th Ave NW\", \"Rochester\",\r\n+                    \"MN\", 55901);\r\n+            addresses[2] = new FGAddress(3, \"5000 Pilot Knob\", \"Rochester\",\r\n+                    \"MN\", 55902);\r\n+            addresses[3] = new FGAddress(4, \"8192 Galaxie Avenue\",\r\n+                    \"Apple Valley\", \"MN\", 55209);\r\n+            addresses[4] = new FGAddress(5, \"9100 Knight Drive\", \"Fargo\", \"ND\",\r\n+                    58202);\r\n+            addresses[5] = new FGAddress(6, \"312 Sioux Lane\", \"Bismarck\", \"ND\",\r\n+                    58102);\r\n+            addresses[6] = new FGAddress(7, \"5124 Grinch Circle\", \"Mason City\",\r\n+                    \"IA\", 24241);\r\n+            addresses[7] = new FGAddress(8, \"1201 Citrus Lane\", \"Raleigh\",\r\n+                    \"NC\", 12345);\r\n+            addresses[8] = new FGAddress(9, \"1501 Lemon Lane\", \"Raleigh\", \"NC\",\r\n+                    12345);\r\n+            addresses[9] = new FGAddress(10, \"2903 Orange Drive\", \"Raleigh\",\r\n+                    \"NC\", 12345);\r\n+            addresses[10] = new FGAddress(11, \"1511 Kiwi Circle\", \"Raleigh\",\r\n+                    \"NC\", 12345);\r\n+\r\n+            // System.out.println(\"Persisting Address entities...\");\r\n+            for (int index = 0; index < addresses.length; index++) {\r\n+                em.persist(addresses[index]);\r\n+            }\r\n+\r\n+            // Departments\r\n+            FGDepartment[] departments = new FGDepartment[7];\r\n+            for (int index = 0; index < 7; index++) {\r\n+                departments[index] = new FGDepartment(index + 1, \"Department \"\r\n+                        + (index + 1));\r\n+            }\r\n+\r\n+            // System.out.println(\"Persisting Department entities...\");\r\n+            for (int index = 0; index < departments.length; index++) {\r\n+                em.persist(departments[index]);\r\n+            }\r\n+\r\n+            // Managers\r\n+            Collection<FGEmployee> emptyCollection = new ArrayList<FGEmployee>();\r\n+            FGManager[] managers = new FGManager[6];\r\n+            managers[0] = new FGManager(301, \"Elric\", \"Scotch\",\r\n+                    \"Description MMM1\", departments[6], addresses[10],\r\n+                    (FGManager) null, \"Good\", emptyCollection, \"MData301\");\r\n+            managers[1] = new FGManager(202, \"Cedric\", \"Clue\",\r\n+                    \"Description MM2\", departments[5], addresses[9],\r\n+                    managers[0], \"Good\", emptyCollection, \"MData202\");\r\n+            managers[2] = new FGManager(201, \"Bill\", \"Editor\",\r\n+                    \"Description MM1\", departments[5], addresses[8],\r\n+                    managers[0], \"Good\", emptyCollection, \"MData201\");\r\n+            managers[3] = new FGManager(103, \"Sue\", \"Taylor\", \"Description M3\",\r\n+                    departments[4], addresses[8], managers[1], \"Good\",\r\n+                    emptyCollection, \"MData103\");\r\n+            managers[4] = new FGManager(102, \"Alfred\", \"Newmann\",\r\n+                    \"Description M2\", departments[3], addresses[7],\r\n+                    managers[2], \"Good\", emptyCollection, \"MData102\");\r\n+            managers[5] = new FGManager(101, \"Jim\", \"Mitternacht\",\r\n+                    \"Description M1\", departments[3], addresses[6],\r\n+                    managers[2], \"Good\", emptyCollection, \"MData101\");\r\n+\r\n+            // System.out.println(\"Persisting Manager entities...\");\r\n+            for (int index = 0; index < managers.length; index++) {\r\n+                em.persist(managers[index]);\r\n+            }\r\n+\r\n+            // Employees\r\n+            FGEmployee[] employees = new FGEmployee[8];\r\n+            employees[0] = new FGEmployee(1, \"John\", \"Doe\", \"Description 1\",\r\n+                    departments[0], addresses[0], managers[5], \"Good\");\r\n+            employees[1] = new FGEmployee(2, \"Jane\", \"Doe\", \"Description 2\",\r\n+                    departments[0], addresses[0], managers[5], \"Good\");\r\n+            employees[2] = new FGEmployee(3, \"Steve\", \"Martin\",\r\n+                    \"Description 3\", departments[0], addresses[1], managers[5],\r\n+                    \"Good\");\r\n+            employees[3] = new FGEmployee(4, \"Mark\", \"Scrabble\",\r\n+                    \"Description 4\", departments[1], addresses[2], managers[4],\r\n+                    \"Good\");\r\n+            employees[4] = new FGEmployee(5, \"Stacy\", \"Life\", \"Description 5\",\r\n+                    departments[1], addresses[3], managers[4], \"Good\");\r\n+            employees[5] = new FGEmployee(6, \"Alx\", \"Indigo\", \"Description 6\",\r\n+                    departments[2], addresses[5], managers[3], \"Good\");\r\n+            employees[6] = new FGEmployee(7, \"John\", \"Einstein\",\r\n+                    \"Description 7\", departments[2], addresses[5], managers[3],\r\n+                    \"Good\");\r\n+            employees[7] = new FGEmployee(8, \"Max\", \"Headroom\",\r\n+                    \"Description 7\", departments[5], addresses[3], managers[2],\r\n+                    \"Good\");\r\n+\r\n+            // System.out.println(\"Persisting Employee entities...\");\r\n+            for (int index = 0; index < employees.length; index++) {\r\n+                em.persist(employees[index]);\r\n+            }\r\n+\r\n+            // System.out.println(\"Committing transaction...\");\r\n+            em.getTransaction().commit();\r\n+        } catch (Throwable t) {\r\n+            // System.out.println(\"Caught exception during db populating\"+ t);\r\n+            errors = true;\r\n+        } finally {\r\n+            try {\r\n+                if (em.getTransaction().isActive())\r\n+                    em.getTransaction().rollback();\r\n+            } catch (Throwable t) {\r\n+                // System.out.println(\"Caught exception transaction rollback in\r\n+                // db population failure recovery\"+ t);\r\n+            }\r\n+        }\r\n+\r\n+        return errors;\r\n+    }\r\n+\r\n+} // end of TestFetchGroup\r"}]}

