{"sha":"67410de676d5a77588829e97edbe1e251839f99d","node_id":"MDY6Q29tbWl0MjA2MzY0OjY3NDEwZGU2NzZkNWE3NzU4ODgyOWU5N2VkYmUxZTI1MTgzOWY5OWQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-06-28T23:38:05Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-06-28T23:38:05Z"},"message":"removed unneeded class\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@417901 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5ce90692d5893100fcb775f6afd195231f0b78f4","url":"https://api.github.com/repos/apache/openjpa/git/trees/5ce90692d5893100fcb775f6afd195231f0b78f4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/67410de676d5a77588829e97edbe1e251839f99d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/67410de676d5a77588829e97edbe1e251839f99d","html_url":"https://github.com/apache/openjpa/commit/67410de676d5a77588829e97edbe1e251839f99d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/67410de676d5a77588829e97edbe1e251839f99d/comments","author":null,"committer":null,"parents":[{"sha":"46e7dbf647b3ae5653e242218f7723f0b0dd5e89","url":"https://api.github.com/repos/apache/openjpa/commits/46e7dbf647b3ae5653e242218f7723f0b0dd5e89","html_url":"https://github.com/apache/openjpa/commit/46e7dbf647b3ae5653e242218f7723f0b0dd5e89"}],"stats":{"total":162,"additions":0,"deletions":162},"files":[{"sha":"4691af30756b85f776a53bba5c759237099767d0","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/Duration.java","status":"removed","additions":0,"deletions":162,"changes":162,"blob_url":"https://github.com/apache/openjpa/blob/46e7dbf647b3ae5653e242218f7723f0b0dd5e89/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/Duration.java","raw_url":"https://github.com/apache/openjpa/raw/46e7dbf647b3ae5653e242218f7723f0b0dd5e89/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/Duration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/Duration.java?ref=46e7dbf647b3ae5653e242218f7723f0b0dd5e89","patch":"@@ -1,162 +0,0 @@\n-/*\n- * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.openjpa.lib.util;\n-\n-import java.lang.Exception;\n-import java.lang.System;\n-\n-\n-/*\n-        Millisecond (only) accuracy timer.\n-        Java 1.4 supposedly has sun.misc.Perf.\n-        Java 1.5 has System.nanoTime (JSR 166)\n-*/\n-public class Duration implements Cloneable {\n-    private String _name;\n-    private boolean _started;\n-    private boolean _running;\n-    private long _startTime; // millis\n-    private long _stopTime; // millis\n-\n-    // NYI clock time of day at start\n-    public Duration(String name) {\n-        _name = name;\n-        _started = false;\n-        _running = false;\n-    }\n-\n-    public String getName() {\n-        return _name;\n-    }\n-\n-    public synchronized void start() {\n-        if (_started) {\n-            throw new RuntimeException(\"Duration was already started.\");\n-        }\n-\n-        _startTime = System.currentTimeMillis();\n-        _started = true;\n-        _running = true;\n-    }\n-\n-    public synchronized void stop() {\n-        if (!_started) {\n-            throw new RuntimeException(\"Duration was never started.\");\n-        }\n-\n-        if (!_running) {\n-            throw new RuntimeException(\"Duration was already stopped.\");\n-        }\n-\n-        _stopTime = System.currentTimeMillis();\n-        _running = false;\n-    }\n-\n-    protected Object clone() throws CloneNotSupportedException {\n-        return super.clone();\n-    }\n-\n-    /*\n-            Returns a new Duration object from a currently running timer\n-            as a snapshot of this object.\n-            The returned timer is stopped, while this object continue on.\n-    */\n-    public synchronized Duration getCurrentDuration() {\n-        if (!_started) {\n-            throw new RuntimeException(\"Duration was never started.\");\n-        }\n-\n-        if (!_running) {\n-            throw new RuntimeException(\"Duration is not running.\");\n-        }\n-\n-        long now = System.currentTimeMillis();\n-        Duration currentDuration;\n-\n-        try {\n-            currentDuration = (Duration) this.clone();\n-        } catch (Exception e) {\n-            currentDuration = new Duration(\"\");\n-        }\n-\n-        currentDuration._stopTime = now;\n-        currentDuration._running = false;\n-\n-        return currentDuration;\n-    }\n-\n-    /* Obtain the duration that this timer has run (in seconds)        */\n-    public synchronized double getDurationAsSeconds() {\n-        if (!_started) {\n-            throw new RuntimeException(\"Duration was never started.\");\n-        }\n-\n-        if (_running) {\n-            // snapshot\n-            Duration snapshot = getCurrentDuration();\n-\n-            return (1000.0 * (snapshot._stopTime - snapshot._startTime));\n-        }\n-\n-        // Return a double value. Someday this class may make use of\n-        // higher precision timing services (e.g. java 1.5)\n-        return ((_stopTime - _startTime) / (double) 1000.0);\n-    }\n-\n-    public synchronized boolean isRunning() {\n-        return _running;\n-    }\n-\n-    public synchronized boolean wasStarted() {\n-        return _started;\n-    }\n-\n-    public String toString() {\n-        double time = 0.0;\n-        StringBuffer buf = new StringBuffer(256);\n-\n-        if (wasStarted()) {\n-            if (isRunning()) {\n-                Duration snapshot = getCurrentDuration();\n-                time = snapshot.getDurationAsSeconds();\n-            } else {\n-                time = getDurationAsSeconds();\n-            }\n-\n-            buf.append(\"Duration for '\" + _name + \"' is \" + time + \" (s).\");\n-        } else {\n-            buf.append(\"Duration for '\" + _name +\n-                \"' has not yet been started.\");\n-        }\n-\n-        return buf.toString();\n-    }\n-\n-    /* Example usage:\n-               public static void main (String[] args)\n-                    throws Exception\n-            {\n-                    Duration test = new Duration (\"hello, count to 1 million\");\n-                    System.out.println (test);\n-                    test.start ();\n-                    for (int i = 0; i < 1000000000; i++)\n-                            {\n-                            }\n-                    test.stop ();\n-                    System.out.println (test);\n-            }\n-            */\n-}"}]}

