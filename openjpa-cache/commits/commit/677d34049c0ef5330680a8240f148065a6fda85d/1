{"sha":"677d34049c0ef5330680a8240f148065a6fda85d","node_id":"MDY6Q29tbWl0MjA2MzY0OjY3N2QzNDA0OWMwZWY1MzMwNjgwYTgyNDBmMTQ4MDY1YTZmZGE4NWQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-11T17:53:07Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-11T17:53:07Z"},"message":"OPENJPA-1013: Refcator\n   1. Make implementaion non-public (mainly package scoped now)\n   2. Promote to interface for contracts as much as possible\n   3. Use more compact bridge pattern method signature\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813956 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"eaece3e9e26f7482f9e6a393ad9c51ad0b258ff4","url":"https://api.github.com/repos/apache/openjpa/git/trees/eaece3e9e26f7482f9e6a393ad9c51ad0b258ff4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/677d34049c0ef5330680a8240f148065a6fda85d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/677d34049c0ef5330680a8240f148065a6fda85d","html_url":"https://github.com/apache/openjpa/commit/677d34049c0ef5330680a8240f148065a6fda85d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/677d34049c0ef5330680a8240f148065a6fda85d/comments","author":null,"committer":null,"parents":[{"sha":"c534d29cb7b6163e1a7a8054ff7774f48a527a76","url":"https://api.github.com/repos/apache/openjpa/commits/c534d29cb7b6163e1a7a8054ff7774f48a527a76","html_url":"https://github.com/apache/openjpa/commit/c534d29cb7b6163e1a7a8054ff7774f48a527a76"}],"stats":{"total":549,"additions":279,"deletions":270},"files":[{"sha":"11788d2cfffd9e1836d55fd3516f51a5898408d7","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":3,"deletions":9,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=677d34049c0ef5330680a8240f148065a6fda85d","patch":"@@ -29,11 +29,9 @@\n import java.io.ObjectStreamClass;\n import java.lang.reflect.Array;\n import java.lang.reflect.Method;\n-import java.sql.Connection;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.EnumSet;\n-import java.util.HashMap;\n import java.util.IdentityHashMap;\n import java.util.Map;\n import java.util.Set;\n@@ -47,7 +45,6 @@\n import javax.persistence.TypedQuery;\n import javax.persistence.criteria.CriteriaQuery;\n import javax.persistence.criteria.ParameterExpression;\n-import javax.persistence.criteria.QueryBuilder;\n import javax.persistence.metamodel.Metamodel;\n \n import org.apache.commons.lang.StringUtils;\n@@ -80,14 +77,12 @@\n import org.apache.openjpa.meta.QueryMetaData;\n import org.apache.openjpa.meta.SequenceMetaData;\n import org.apache.openjpa.persistence.criteria.CriteriaBuilder;\n-import org.apache.openjpa.persistence.criteria.CriteriaExpressionVisitor;\n-import org.apache.openjpa.persistence.criteria.CriteriaQueryImpl;\n+import org.apache.openjpa.persistence.criteria.OpenJPACriteriaQuery;\n import org.apache.openjpa.persistence.validation.ValidationUtils;\n import org.apache.openjpa.util.Exceptions;\n import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.RuntimeExceptionTranslator;\n import org.apache.openjpa.util.UserException;\n-import org.apache.openjpa.util.WrappedException;\n \n import serp.util.Strings;\n \n@@ -1543,12 +1538,11 @@ public void detach(Object entity) {\n      * Compile to register the parameters in this query.\n      */\n     public <T> TypedQuery<T> createQuery(CriteriaQuery<T> criteriaQuery) {\n-        CriteriaQueryImpl<T> impl = (CriteriaQueryImpl<T>)criteriaQuery;\n-        impl.compile(); // important to collect parameters to be set on executable query\n+        ((OpenJPACriteriaQuery<T>)criteriaQuery).compile(); \n         \n         org.apache.openjpa.kernel.Query kernelQuery =_broker.newQuery(CriteriaBuilder.LANG_CRITERIA, criteriaQuery);\n         QueryImpl<T> facadeQuery = new QueryImpl<T>(this, _ret, kernelQuery);\n-        Set<ParameterExpression<?>> params = impl.getParameters();\n+        Set<ParameterExpression<?>> params = criteriaQuery.getParameters();\n         \n         for (ParameterExpression<?> param : params) {\n             facadeQuery.declareParameter(param, param);"},{"sha":"92b055cf1ff2beacca6ff4e87a776c6c15caf825","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CompoundSelections.java","status":"modified","additions":12,"deletions":9,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CompoundSelections.java","raw_url":"https://github.com/apache/openjpa/raw/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CompoundSelections.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CompoundSelections.java?ref=677d34049c0ef5330680a8240f148065a6fda85d","patch":"@@ -22,15 +22,12 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n-import java.util.concurrent.CopyOnWriteArrayList;\n \n-import javax.persistence.Tuple;\n import javax.persistence.TupleElement;\n import javax.persistence.criteria.CompoundSelection;\n import javax.persistence.criteria.Selection;\n \n import org.apache.openjpa.kernel.FillStrategy;\n-import org.apache.openjpa.kernel.ResultShape;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.persistence.TupleFactory;\n import org.apache.openjpa.persistence.TupleImpl;\n@@ -43,13 +40,13 @@\n  * @since 2.0.0\n  *\n  */\n-public class CompoundSelections {\n+class CompoundSelections {\n     private static Localizer _loc = Localizer.forPackage(CompoundSelections.class);\n     /**\n      * Gets the strategy to fill a given compound selection.\n      * \n      */\n-    public static <X> FillStrategy<X> getFillStrategy(Selection<X> s) {\n+    static <X> FillStrategy<X> getFillStrategy(Selection<X> s) {\n         if (s instanceof CompoundSelectionImpl) {\n             return ((CompoundSelectionImpl<X>)s).getFillStrategy();\n         } else {\n@@ -113,7 +110,7 @@ public StringBuilder asValue(AliasContext q) {\n      *\n      * @param <X> type must be an array\n      */\n-    public static class Array<X> extends CompoundSelectionImpl<X> {\n+    static class Array<X> extends CompoundSelectionImpl<X> {\n         public Array(Class<X> cls, Selection<?>... terms) {\n             super(cls, terms);\n             if (!cls.isArray()) {\n@@ -131,7 +128,7 @@ public Array(Class<X> cls, Selection<?>... terms) {\n      *\n      * @param <X> type of the constructed instance\n      */\n-    public static class NewInstance<X> extends CompoundSelectionImpl<X> {\n+    static class NewInstance<X> extends CompoundSelectionImpl<X> {\n         private FillStrategy.NewInstance<X> strategy;\n         public NewInstance(Class<X> cls, Selection<?>... selections) {\n             super(cls, selections);\n@@ -168,7 +165,7 @@ public StringBuilder asValue(AliasContext q) {\n      * A compound selection which is a Tuple composed of its component terms.\n      *\n      */\n-    public static class Tuple extends CompoundSelectionImpl<javax.persistence.Tuple> {\n+    static class Tuple extends CompoundSelectionImpl<javax.persistence.Tuple> {\n         public Tuple(final Selection<?>[] selections) {\n             super(javax.persistence.Tuple.class, selections);\n         }\n@@ -180,10 +177,16 @@ public Tuple(final Selection<?>[] selections) {\n         }\n     }\n \n-    public static class MultiSelection<T> extends CompoundSelectionImpl<T> {\n+    /**\n+     * A selection of terms that interprets its arguments based on target result type.\n+     *\n+     * @param <T> the target result type.\n+     */\n+    static class MultiSelection<T> extends CompoundSelectionImpl<T> {\n         public MultiSelection(Class<T> result, final Selection<?>[] selections) {\n             super(result, selections);\n         }\n+        \n         public FillStrategy<T> getFillStrategy() {\n             Class<?> resultClass = getJavaType();\n             List<Selection<?>> terms = getCompoundSelectionItems();"},{"sha":"10c29dd6c1f7008fc0e7110b06e3dbf55711ac6d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilder.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilder.java?ref=677d34049c0ef5330680a8240f148065a6fda85d","patch":"@@ -36,7 +36,6 @@\n import javax.persistence.criteria.Order;\n import javax.persistence.criteria.ParameterExpression;\n import javax.persistence.criteria.Predicate;\n-import javax.persistence.criteria.QueryBuilder;\n import javax.persistence.criteria.Selection;\n import javax.persistence.criteria.Subquery;\n import javax.persistence.metamodel.Attribute;\n@@ -498,12 +497,10 @@ public Predicate notLike(Expression<String> x, String pattern, char escapeChar)\n \n     public <Y> Expression<Y> nullif(Expression<Y> x, Expression<?> y) {\n         return new Expressions.Nullif(x, y);\n-\n     }\n \n     public <Y> Expression<Y> nullif(Expression<Y> x, Y y) {\n         return new Expressions.Nullif(x, y);\n-\n     }\n \n     public Predicate or(Predicate... restrictions) {\n@@ -688,7 +685,7 @@ public Predicate or(Expression<Boolean> x, Expression<Boolean> y) {\n     }\n \n     public Predicate isNotNull(Expression<?> x) {\n-        return new Expressions.IsNotNull((ExpressionImpl<?> )x);\n+        return new Expressions.IsNotNull((ExpressionImpl<?>)x);\n     }\n \n     public Predicate isNull(Expression<?> x) {"},{"sha":"817b90e2802aced2bc14cbf37d0ddbd30d050c74","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpression.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpression.java","raw_url":"https://github.com/apache/openjpa/raw/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpression.java?ref=677d34049c0ef5330680a8240f148065a6fda85d","patch":"@@ -24,7 +24,7 @@\n  * @author Pinaki Poddar\n  * @since 2.0.0\n  */\n-public interface CriteriaExpression  {\n+interface CriteriaExpression  {\n     /**\n      * Accept visit from the given visitor. The receiver is responsible \n      * to propagate the visitor to the constituent sub-nodes if any."},{"sha":"0d2e7a4b88849e94ee74dc6b748ff38fcc142b19","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java","status":"modified","additions":10,"deletions":14,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionBuilder.java?ref=677d34049c0ef5330680a8240f148065a6fda85d","patch":"@@ -51,7 +51,6 @@\n import org.apache.openjpa.persistence.meta.AbstractManagedType;\n import org.apache.openjpa.persistence.meta.Members;\n import org.apache.openjpa.persistence.meta.MetamodelImpl;\n-import org.apache.openjpa.persistence.meta.Types;\n \n /**\n  * Converts expressions of a CriteriaQuery to kernel Expression.\n@@ -62,25 +61,22 @@\n  * \n  * @since 2.0.0\n  */\n-public class CriteriaExpressionBuilder {\n+class CriteriaExpressionBuilder {\n     \n     public QueryExpressions getQueryExpressions(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n         QueryExpressions exps = new QueryExpressions();\n         exps.setContexts(q.getContexts());\n \n         evalAccessPaths(exps, factory, q);\n-        //exps.alias = null;      // String   \n+        exps.alias = null;      // String   \n         evalDistinct(exps, factory, q);\n         evalFetchJoin(exps, factory, q);\n         evalCrossJoinRoots(exps, factory, q);\n         evalFilter(exps, factory, q);\n-\n         evalGrouping(exps, factory, q);\n-        \n         evalOrderingAndProjection(exps, factory, q);\n-\n         exps.operation = QueryOperations.OP_SELECT;\n-        //exps.range = null; // Value[]\n+        exps.range = QueryExpressions.EMPTY_VALUES;\n         exps.resultClass = q.getResultType();\n         exps.shape = evalResultShape(q);\n         exps.parameterTypes = q.getParameterTypes();\n@@ -141,7 +137,7 @@ protected void evalOrderingAndProjection(QueryExpressions exps, ExpressionFactor\n         for (int i = 0; i < ordercount; i++) {\n             OrderImpl order = (OrderImpl)orders.get(i);\n             ExpressionImpl<?> expr = order.getExpression();\n-            Value val = Expressions.toValue(expr, factory, featureSelection, q);\n+            Value val = Expressions.toValue(expr, factory, q);\n             exps.ordering[i] = val;\n             String alias = expr.getAlias();\n             exps.orderingAliases[i] = alias;\n@@ -165,10 +161,10 @@ protected void evalGrouping(QueryExpressions exps, ExpressionFactory factory, Cr\n         exps.grouping = new Value[groupByCount];\n         for (int i = 0; i < groupByCount; i++) {\n             Expression<?> groupBy = groups.get(i);    \n-            exps.grouping[i] = Expressions.toValue((ExpressionImpl<?>)groupBy, factory, featureSelection, q);;\n+            exps.grouping[i] = Expressions.toValue((ExpressionImpl<?>)groupBy, factory, q);;\n         }\n \n-        exps.having = having == null ? null : having.toKernelExpression(factory, featureSelection, q);\n+        exps.having = having == null ? null : having.toKernelExpression(factory, q);\n     }\n \n     protected void evalDistinct(QueryExpressions exps, ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n@@ -203,7 +199,7 @@ protected void evalFilter(QueryExpressions exps, ExpressionFactory factory, Crit\n             for (Root<?> root : roots) {\n                 for (Join<?, ?> join : root.getJoins()) {\n                     filter = Expressions.and(factory, \n-                            ((ExpressionImpl<?>)join).toKernelExpression(factory, featureSelection, q), filter);\n+                            ((ExpressionImpl<?>)join).toKernelExpression(factory, q), filter);\n                 }\n                 ((RootImpl<?>)root).addToContext(factory, featureSelection, q);\n             }\n@@ -212,12 +208,12 @@ protected void evalFilter(QueryExpressions exps, ExpressionFactory factory, Crit\n             List<Join<?,?>> corrJoins = subQuery.getCorrelatedJoins();\n             for (int i = 0; corrJoins != null && i < corrJoins.size(); i++) {\n                 filter = Expressions.and(factory, ((ExpressionImpl<?>)corrJoins.get(i))\n-                        .toKernelExpression(factory, featureSelection, q), filter);\n+                        .toKernelExpression(factory, q), filter);\n             }\n         }\n         \n         if (where != null) {\n-            filter = Expressions.and(factory, where.toKernelExpression(factory, featureSelection, q), filter);\n+            filter = Expressions.and(factory, where.toKernelExpression(factory, q), filter);\n         }\n         if (filter == null) {\n             filter = factory.emptyExpression();\n@@ -274,7 +270,7 @@ private void getProjections(QueryExpressions exps, List<Selection<?>> selections\n                     clauses, factory, q, featureSelection, exp2Vals);\n             } else {\n                 Value val = (exp2Vals != null && exp2Vals.containsKey(s) \n-                        ? exp2Vals.get(s) : ((ExpressionImpl<?>)s).toValue(factory, featureSelection, q));\n+                        ? exp2Vals.get(s) : ((ExpressionImpl<?>)s).toValue(factory, q));\n                 String alias = s.getAlias();\n                 val.setAlias(alias);\n                 projections.add(val);"},{"sha":"b95255d3b4d6b4c88edbf3d641aaaff5716d6d00","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionVisitor.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionVisitor.java","raw_url":"https://github.com/apache/openjpa/raw/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionVisitor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpressionVisitor.java?ref=677d34049c0ef5330680a8240f148065a6fda85d","patch":"@@ -102,6 +102,5 @@ public void enter(CriteriaExpression expr) {\n                 query.registerParameter((ParameterExpressionImpl<?>)expr);\n             }\n         }\n-\n     }\n }"},{"sha":"0a4693de9e1bdfa87136501e548b6f7fe7d4dffd","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java?ref=677d34049c0ef5330680a8240f148065a6fda85d","patch":"@@ -65,7 +65,7 @@\n  *\n  * @since 2.0.0\n  */\n-public class CriteriaQueryImpl<T> implements OpenJPACriteriaQuery<T>, AliasContext {\n+class CriteriaQueryImpl<T> implements OpenJPACriteriaQuery<T>, AliasContext {\n     private static final Localizer _loc = Localizer.forPackage(CriteriaQueryImpl.class);\n     \n     private final MetamodelImpl  _model;\n@@ -618,13 +618,14 @@ void invalidateCompilation() {\n      * and, most importantly, collects all the parameters so that they can be bound to\n      * the executable query. \n      */\n-    public void compile() {\n+    public OpenJPACriteriaQuery<T> compile() {\n         if (_compiled)\n-            return;\n+            return this;\n         assertRoot();\n         assertSelection();\n         collectParameters(new CriteriaExpressionVisitor.ParameterVisitor(this));\n         _compiled = true;\n+        return this;\n     }\n     \n     private void collectParameters(CriteriaExpressionVisitor visitor) {"},{"sha":"c32b005c129c7f5e1271156937cd32286accbe1f","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ExpressionImpl.java","status":"modified","additions":20,"deletions":7,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ExpressionImpl.java","raw_url":"https://github.com/apache/openjpa/raw/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ExpressionImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ExpressionImpl.java?ref=677d34049c0ef5330680a8240f148065a6fda85d","patch":"@@ -26,17 +26,17 @@\n import javax.persistence.criteria.QueryBuilder.In;\n \n import org.apache.openjpa.kernel.exps.ExpressionFactory;\n-import org.apache.openjpa.persistence.meta.MetamodelImpl;\n \n /**\n  * Expression node for Criteria query.\n+ * Acts a bridge pattern to equivalent kernel representation.\n  * \n  * @param <X> the type of the value this expression represents.\n  * \n  * @author Pinaki Poddar\n  * @since 2.0.0\n  */\n-public abstract class ExpressionImpl<X> extends SelectionImpl<X> implements Expression<X> {\n+abstract class ExpressionImpl<X> extends SelectionImpl<X> implements Expression<X> {\n     /**\n      * @param cls the type of the evaluated result of the expression\n      */\n@@ -106,11 +106,24 @@ public Predicate isNull() {\n     \treturn new Expressions.IsNull(this);\n     }\n     \n-    abstract org.apache.openjpa.kernel.exps.Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection,\n-            CriteriaQueryImpl<?> q);\n+    //  ------------------------------------------------------------------------------------\n+    //  Contract for bridge pattern to convert to an equivalent kernel representation.\n+    //  ------------------------------------------------------------------------------------\n+    /**\n+     * Bridge contract to convert this facade expression to a kernel value.\n+     * @param factory creates the kernel expression\n+     * @param q the query definition context of this expression\n+     * @return an equivalent kernel value\n+     */\n+    abstract org.apache.openjpa.kernel.exps.Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q);\n     \n-    org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, MetamodelImpl featureSelection,\n-        CriteriaQueryImpl<?> q) {\n-        return factory.asExpression(toValue(factory, featureSelection, q));\n+    /**\n+     * Bridge contract to convert this facade expression to a kernel expression.\n+     * @param factory creates the kernel expression\n+     * @param q the query definition context of this expression\n+     * @return an equivalent kernel expression\n+     */\n+    org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+        return factory.asExpression(toValue(factory, q));\n     }\n }"},{"sha":"bd85fdde280fbd28c64d168ebffd0e137cfb9818","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","status":"modified","additions":135,"deletions":146,"changes":281,"blob_url":"https://github.com/apache/openjpa/blob/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","raw_url":"https://github.com/apache/openjpa/raw/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java?ref=677d34049c0ef5330680a8240f148065a6fda85d","patch":"@@ -39,7 +39,6 @@\n import org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.persistence.criteria.CriteriaExpressionVisitor.TraversalStyle;\n-import org.apache.openjpa.persistence.meta.MetamodelImpl;\n import org.apache.openjpa.persistence.meta.Types;\n \n /**\n@@ -53,7 +52,7 @@\n  * @since 2.0.0\n  *\n  */\n-public class Expressions {\n+class Expressions {\n     static final String OPEN_BRACE = \"(\";\n     static final String CLOSE_BRACE = \")\";\n     static final String COMMA = \",\";\n@@ -63,8 +62,8 @@\n      * using the given ExpressionFactory.\n      * Handles null expression.\n      */\n-     static Value toValue(ExpressionImpl<?> e, ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n-        return (e == null) ? factory.getNull() : e.toValue(factory, featureSelection, q);\n+     static Value toValue(ExpressionImpl<?> e, ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+        return (e == null) ? factory.getNull() : e.toValue(factory, q);\n     }\n      \n      static void setImplicitTypes(Value v1, Value v2, Class<?> expected, CriteriaQueryImpl<?> q) {\n@@ -281,8 +280,8 @@ public  Abs(Expression<X> x) {\n         }\n \n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n-            return factory.abs(Expressions.toValue(e, factory, featureSelection, q));\n+        public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+            return factory.abs(Expressions.toValue(e, factory, q));\n         }\n         \n         public StringBuilder asValue(AliasContext q) {\n@@ -303,8 +302,8 @@ public  Count(Expression<?> x, boolean distinct) {\n         }\n \n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n-            Value v = factory.count(Expressions.toValue(e, factory, featureSelection, q));\n+        public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+            Value v = factory.count(Expressions.toValue(e, factory, q));\n             return _distinct ? factory.distinct(v) : v;\n         }\n         \n@@ -321,8 +320,8 @@ public  Avg(Expression<?> x) {\n         }\n \n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n-            return factory.avg(Expressions.toValue(e, factory, featureSelection, q));\n+        public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+            return factory.avg(Expressions.toValue(e, factory, q));\n         }\n         \n         @Override\n@@ -337,8 +336,8 @@ public  Sqrt(Expression<? extends Number> x) {\n         }\n \n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n-            return factory.sqrt(Expressions.toValue(e, factory, featureSelection, q));\n+        public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+            return factory.sqrt(Expressions.toValue(e, factory, q));\n         }\n         \n         public StringBuilder asValue(AliasContext q) {\n@@ -352,8 +351,8 @@ public  Max(Expression<X> x) {\n         }\n \n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n-            return factory.max(Expressions.toValue(e, factory, featureSelection, q));\n+        public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+            return factory.max(Expressions.toValue(e, factory, q));\n         }\n         \n         public StringBuilder asValue(AliasContext q) {\n@@ -367,8 +366,8 @@ public  Min(Expression<X> x) {\n         }\n \n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n-            return factory.min(Expressions.toValue(e, factory, featureSelection, q));\n+        public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+            return factory.min(Expressions.toValue(e, factory, q));\n         }\n         \n         public StringBuilder asValue(AliasContext q) {\n@@ -386,8 +385,8 @@ public  Size(Collection<?> x) {\n         }\n \n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n-            Value val = Expressions.toValue(e, factory, featureSelection, q);\n+        public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+            Value val = Expressions.toValue(e, factory, q);\n             if (val instanceof Literal && ((Literal)val).getParseType() == Literal.TYPE_COLLECTION)\n                 return factory.newLiteral(((Collection)((Literal)val).getValue()).size(), \n                     Literal.TYPE_NUMBER);\n@@ -411,9 +410,9 @@ public  DatabaseFunction(String name, Class<T> resultType, Expression<?>... exps\n         }\n         \n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n+        public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n             return factory.newFunction(functionName, getJavaType(), \n-                new Expressions.ListArgument(resultType, args).toValue(factory, featureSelection, q));\n+                new Expressions.ListArgument(resultType, args).toValue(factory, q));\n         }\n         \n         public StringBuilder asValue(AliasContext q) {\n@@ -428,8 +427,8 @@ public Type(PathImpl<?, ?> path) {\n         }\n         \n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n-            return factory.type(Expressions.toValue(e, factory, featureSelection, q));\n+        public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+            return factory.type(Expressions.toValue(e, factory, q));\n         }\n         \n         @Override\n@@ -444,8 +443,8 @@ public Cast(Expression<?> x, Class<B> b) {\n         }\n \n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n-            return factory.cast(Expressions.toValue(e, factory, featureSelection, q), getJavaType());\n+        public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+            return factory.cast(Expressions.toValue(e, factory, q), getJavaType());\n         }\n         \n         @Override\n@@ -468,10 +467,10 @@ public Concat(String x, Expression<String> y) {\n         }\n         \n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n+        public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n             return factory.concat(\n-                Expressions.toValue(e1, factory, featureSelection, q), \n-                Expressions.toValue(e2, factory, featureSelection, q));\n+                Expressions.toValue(e1, factory, q), \n+                Expressions.toValue(e2, factory, q));\n         }\n         \n         @Override\n@@ -507,11 +506,11 @@ public Substring(Expression<String> s, Integer from, Integer len) {\n         }\n         \n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n+        public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n             return JPQLExpressionBuilder.convertSubstringArguments(factory, \n-                Expressions.toValue(e, factory, featureSelection, q), \n-                from == null ? null : from.toValue(factory, featureSelection, q), \n-                len == null ? null : len.toValue(factory, featureSelection, q));\n+                Expressions.toValue(e, factory, q), \n+                from == null ? null : from.toValue(factory, q), \n+                len == null ? null : len.toValue(factory, q));\n         }\n         \n         public void acceptVisit(CriteriaExpressionVisitor visitor) {\n@@ -554,10 +553,10 @@ public Locate(Expression<String> path, String pattern, int from) {\n         }\n \n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n-            Value locateSearch = path.toValue(factory, featureSelection, q);\n-            Value locateFromIndex = (from == null ? null : Expressions.toValue(from, factory, featureSelection, q));\n-            Value locatePath = Expressions.toValue(pattern, factory, featureSelection, q);\n+        public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+            Value locateSearch = path.toValue(factory, q);\n+            Value locateFromIndex = (from == null ? null : Expressions.toValue(from, factory, q));\n+            Value locatePath = Expressions.toValue(pattern, factory, q);\n             \n             return factory.add(factory.indexOf(locateSearch,\n                     locateFromIndex == null ? locatePath\n@@ -608,7 +607,7 @@ public Trim(Expression<String> x, Trimspec ts) {\n         }\n \n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n+        public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n             Boolean spec = null;\n             if (ts != null) {\n                 switch (ts) {\n@@ -618,8 +617,8 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n                 }\n             }\n             return factory.trim(\n-                Expressions.toValue(e1, factory, featureSelection, q), \n-                Expressions.toValue(e2, factory, featureSelection, q), spec);\n+                Expressions.toValue(e1, factory, q), \n+                Expressions.toValue(e2, factory, q), spec);\n         }\n         \n         @Override\n@@ -646,12 +645,12 @@ public Sum(Number x, Expression<? extends Number> y) {\n         }\n         \n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n+        public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n             return (e2 == null) \n-            ?   factory.sum(Expressions.toValue(e1, factory, featureSelection, q))\n+            ?   factory.sum(Expressions.toValue(e1, factory, q))\n             :   factory.add(\n-                   Expressions.toValue(e1, factory, featureSelection, q), \n-                   Expressions.toValue(e2, factory, featureSelection, q));\n+                   Expressions.toValue(e1, factory, q), \n+                   Expressions.toValue(e2, factory, q));\n         }\n         \n         @Override\n@@ -676,10 +675,10 @@ public Product(Number x, Expression<? extends Number> y) {\n         }\n         \n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n+        public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n             return factory.multiply(\n-                Expressions.toValue(e1, factory, featureSelection, q), \n-                Expressions.toValue(e2, factory, featureSelection, q));\n+                Expressions.toValue(e1, factory, q), \n+                Expressions.toValue(e2, factory, q));\n         }\n         \n         @Override\n@@ -702,10 +701,10 @@ public Diff(Number x, Expression<? extends Number> y) {\n         }\n         \n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n+        public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n             return factory.subtract(\n-                Expressions.toValue(e1, factory, featureSelection, q), \n-                Expressions.toValue(e2, factory, featureSelection, q));\n+                Expressions.toValue(e1, factory, q), \n+                Expressions.toValue(e2, factory, q));\n         }\n         \n         @Override\n@@ -729,10 +728,10 @@ public Quotient(Number x, Expression<? extends Number> y) {\n         }\n         \n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n+        public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n             return factory.divide(\n-                Expressions.toValue(e1, factory, featureSelection, q), \n-                Expressions.toValue(e2, factory, featureSelection, q));\n+                Expressions.toValue(e1, factory, q), \n+                Expressions.toValue(e2, factory, q));\n         }\n         \n         @Override\n@@ -753,10 +752,10 @@ public  Mod(Integer x, Expression<Integer> y) {\n         }\n \n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n+        public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n             return factory.mod(\n-                Expressions.toValue(e1, factory, featureSelection, q), \n-                Expressions.toValue(e2, factory, featureSelection, q));\n+                Expressions.toValue(e1, factory, q), \n+                Expressions.toValue(e2, factory, q));\n         }\n         \n         @Override\n@@ -771,7 +770,7 @@ public  CurrentDate() {\n         }\n \n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n+        public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n             return factory.getCurrentDate();\n         }\n         \n@@ -787,7 +786,7 @@ public  CurrentTime() {\n         }\n \n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n+        public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n             return factory.getCurrentTime();\n         }\n         \n@@ -803,7 +802,7 @@ public  CurrentTimestamp() {\n         }\n \n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n+        public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n             return factory.getCurrentTimestamp();\n         }\n         \n@@ -828,10 +827,9 @@ public PredicateImpl negate() {\n         }\n         \n         @Override\n-        org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, MetamodelImpl featureSelection, \n-            CriteriaQueryImpl<?> q) {\n-            Value val1 = Expressions.toValue(e1, factory, featureSelection, q);\n-            Value val2 = Expressions.toValue(e2, factory, featureSelection, q);\n+        org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, CriteriaQueryImpl<?> q){\n+            Value val1 = Expressions.toValue(e1, factory, q);\n+            Value val2 = Expressions.toValue(e2, factory, q);\n             Expressions.setImplicitTypes(val1, val2, e1.getJavaType(), q);\n             return factory.equal(val1, val2);\n         }\n@@ -857,10 +855,9 @@ public PredicateImpl negate() {\n         }\n         \n         @Override\n-        org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, MetamodelImpl featureSelection, \n-            CriteriaQueryImpl<?> q) {\n-            Value val1 = Expressions.toValue(e1, factory, featureSelection, q);\n-            Value val2 = Expressions.toValue(e2, factory, featureSelection, q);\n+        org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, CriteriaQueryImpl<?> q){\n+            Value val1 = Expressions.toValue(e1, factory, q);\n+            Value val2 = Expressions.toValue(e2, factory, q);\n             Expressions.setImplicitTypes(val1, val2, e1.getJavaType(), q);\n             return factory.notEqual(val1, val2);\n         }\n@@ -886,10 +883,9 @@ public PredicateImpl negate() {\n         }\n         \n         @Override\n-        org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, MetamodelImpl featureSelection, \n-            CriteriaQueryImpl<?> q) {\n-            Value val1 = Expressions.toValue(e1, factory, featureSelection, q);\n-            Value val2 = Expressions.toValue(e2, factory, featureSelection, q); \n+        org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, CriteriaQueryImpl<?> q){\n+            Value val1 = Expressions.toValue(e1, factory, q);\n+            Value val2 = Expressions.toValue(e2, factory, q); \n             Expressions.setImplicitTypes(val1, val2, e1.getJavaType(), q); \n             return factory.greaterThan(val1, val2);\n         }\n@@ -915,10 +911,9 @@ public PredicateImpl negate() {\n         }\n         \n         @Override\n-        org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, MetamodelImpl featureSelection, \n-            CriteriaQueryImpl<?> q) {\n-            Value val1 = Expressions.toValue(e1, factory, featureSelection, q);\n-            Value val2 = Expressions.toValue(e2, factory, featureSelection, q); \n+        org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, CriteriaQueryImpl<?> q){\n+            Value val1 = Expressions.toValue(e1, factory, q);\n+            Value val2 = Expressions.toValue(e2, factory, q); \n             Expressions.setImplicitTypes(val1, val2, e1.getJavaType(), q); \n             return factory.greaterThanEqual(val1, val2);\n         }\n@@ -944,10 +939,9 @@ public PredicateImpl negate() {\n         }\n         \n         @Override\n-        org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, MetamodelImpl featureSelection, \n-            CriteriaQueryImpl<?> q) {\n-            Value val1 = Expressions.toValue(e1, factory, featureSelection, q);\n-            Value val2 = Expressions.toValue(e2, factory, featureSelection, q); \n+        org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, CriteriaQueryImpl<?> q){\n+            Value val1 = Expressions.toValue(e1, factory, q);\n+            Value val2 = Expressions.toValue(e2, factory, q); \n             Expressions.setImplicitTypes(val1, val2, e1.getJavaType(), q); \n             return factory.lessThan(val1, val2);\n         }\n@@ -973,10 +967,9 @@ public PredicateImpl negate() {\n         }\n         \n         @Override\n-        org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, MetamodelImpl featureSelection, \n-            CriteriaQueryImpl<?> q) {\n-            Value val1 = Expressions.toValue(e1, factory, featureSelection, q);\n-            Value val2 = Expressions.toValue(e2, factory, featureSelection, q); \n+        org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, CriteriaQueryImpl<?> q){\n+            Value val1 = Expressions.toValue(e1, factory, q);\n+            Value val2 = Expressions.toValue(e2, factory, q); \n             Expressions.setImplicitTypes(val1, val2, e1.getJavaType(), q); \n             return factory.lessThanEqual(val1, val2);\n         }\n@@ -1022,11 +1015,11 @@ public Constant(X x) {\n         }\n         \n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n+        public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n             Object value = arg;\n             Class<?> literalClass = getJavaType();\n             if (arg instanceof ParameterExpressionImpl) {\n-                return ((ParameterExpressionImpl)arg).toValue(factory, featureSelection, q);\n+                return ((ParameterExpressionImpl)arg).toValue(factory, q);\n             }\n             int literalType = Literal.TYPE_UNKNOWN;\n             if (Number.class.isAssignableFrom(literalClass)) {\n@@ -1043,7 +1036,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n                 ClassMetaData can = ((Types.Entity<X>)q.getRoot().getModel()).meta;\n                 Class<?> candidate = can.getDescribedType();\n                 if (candidate.isAssignableFrom((Class)value)) {\n-                   lit.setMetaData(featureSelection.getRepository().getMetaData((Class<?>)value, null, true));\n+                   lit.setMetaData(q.getMetamodel().getRepository().getMetaData((Class<?>)value, null, true));\n                 } else {\n                     lit.setMetaData(can);\n                 }\n@@ -1094,14 +1087,13 @@ public PredicateImpl negate() {\n         }\n         \n         @Override\n-        Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n-            return Expressions.toValue(collection, factory, featureSelection, q);\n+        Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+            return Expressions.toValue(collection, factory, q);\n         }\n         \n         @Override\n-        org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, MetamodelImpl featureSelection, \n-            CriteriaQueryImpl<?> q) {\n-            Value val = Expressions.toValue(collection, factory, featureSelection, q);\n+        org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, CriteriaQueryImpl<?> q){\n+            Value val = Expressions.toValue(collection, factory, q);\n             return factory.isEmpty(val);\n         }\n         \n@@ -1129,14 +1121,13 @@ public PredicateImpl negate() {\n         }\n         \n         @Override\n-        Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n-            return Expressions.toValue(collection, factory, featureSelection, q);\n+        Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+            return Expressions.toValue(collection, factory, q);\n         }\n         \n         @Override\n-        org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, MetamodelImpl featureSelection, \n-            CriteriaQueryImpl<?> q) {\n-            Value val = Expressions.toValue(collection, factory, featureSelection, q);\n+        org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, CriteriaQueryImpl<?> q){\n+            Value val = Expressions.toValue(collection, factory, q);\n             // factory.isNotEmpty() not used to match JPQL\n             return factory.not(factory.isEmpty(val));\n         }\n@@ -1159,9 +1150,8 @@ public Index(Joins.List<?,?> e) {\n         }\n         \n         @Override\n-        public org.apache.openjpa.kernel.exps.Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, \n-            CriteriaQueryImpl<?> q) {\n-            Value v = Expressions.toValue(e, factory, featureSelection, q);\n+        public org.apache.openjpa.kernel.exps.Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+            Value v = Expressions.toValue(e, factory, q);\n             ClassMetaData meta = ((PathImpl<?,?>)e)._member.fmd.getElement().getTypeMetaData();\n             v.setMetaData(meta);\n             return factory.index(v);\n@@ -1189,10 +1179,10 @@ public IsMember(E element, Expression<?> collection) {\n         \n         @Override\n         public org.apache.openjpa.kernel.exps.Expression toKernelExpression(\n-            ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n+            ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n             org.apache.openjpa.kernel.exps.Expression contains = factory.contains(\n-                Expressions.toValue(collection, factory, featureSelection, q), \n-                Expressions.toValue(element, factory, featureSelection, q));\n+                Expressions.toValue(collection, factory, q), \n+                Expressions.toValue(element, factory, q));\n             return contains;\n         }\n         \n@@ -1245,14 +1235,14 @@ public Like(Expression<String> x, String pat,  Character esc) {\n \n         @Override\n         public org.apache.openjpa.kernel.exps.Expression toKernelExpression(\n-            ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n+            ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n             String escapeStr = escapeChar == null ? null :\n                 ((Character)((Literal)Expressions.toValue(\n-                    escapeChar, factory, featureSelection, q)).getValue()).toString();\n+                    escapeChar, factory, q)).getValue()).toString();\n             \n             return factory.matches(\n-                Expressions.toValue(str, factory, featureSelection, q), \n-                Expressions.toValue(pattern, factory, featureSelection, q), \n+                Expressions.toValue(str, factory, q), \n+                Expressions.toValue(pattern, factory, q), \n                 MATCH_SINGLECHAR, MATCH_MULTICHAR, escapeStr);\n         }\n         \n@@ -1285,11 +1275,11 @@ public Coalesce(Class<T> cls) {\n         \n         @Override\n         public org.apache.openjpa.kernel.exps.Value toValue(\n-            ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n+            ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n             Value[] vs = new Value[values.size()];\n             int i = 0;\n             for (Expression<?> e : values)\n-                vs[i++] = Expressions.toValue((ExpressionImpl<?>)e, factory, featureSelection, q);\n+                vs[i++] = Expressions.toValue((ExpressionImpl<?>)e, factory, q);\n             return factory.coalesceExpression(vs);\n         }\n         \n@@ -1320,9 +1310,9 @@ public Nullif(Expression<T> x, T y) {\n \n         @Override\n         public org.apache.openjpa.kernel.exps.Value toValue(\n-            ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n-            Value value1 = Expressions.toValue((ExpressionImpl<?>)val1, factory, featureSelection, q); \n-            Value value2 = Expressions.toValue((ExpressionImpl<?>)val2, factory, featureSelection, q); \n+            ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+            Value value1 = Expressions.toValue((ExpressionImpl<?>)val1, factory, q); \n+            Value value2 = Expressions.toValue((ExpressionImpl<?>)val2, factory, q); \n             return factory.nullIfExpression(value1, value2);\n         }\n         \n@@ -1350,9 +1340,9 @@ public PredicateImpl negate() {\n         \n         @Override\n         org.apache.openjpa.kernel.exps.Expression toKernelExpression(\n-            ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n+            ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n             return factory.equal(\n-                Expressions.toValue(e, factory, featureSelection, q), \n+                Expressions.toValue(e, factory, q), \n                 factory.getNull());\n         }\n         \n@@ -1381,9 +1371,9 @@ public PredicateImpl negate() {\n         \n         @Override\n         org.apache.openjpa.kernel.exps.Expression toKernelExpression(\n-            ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n+            ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n             return factory.notEqual(\n-                Expressions.toValue(e, factory, featureSelection, q), \n+                Expressions.toValue(e, factory, q), \n                 factory.getNull());\n         }\n         \n@@ -1432,15 +1422,15 @@ public PredicateImpl negate() {\n         \n         @Override\n         org.apache.openjpa.kernel.exps.Expression toKernelExpression(\n-            ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n+            ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n             org.apache.openjpa.kernel.exps.Expression inExpr = null;\n             if (_exps.size() == 1) {\n                 Expressions.Equal e = (Expressions.Equal)_exps.get(0);\n                 ExpressionImpl<?> e2 = e.e2;\n                 ExpressionImpl<?> e1 = e.e1;\n-                Value val2 = Expressions.toValue(e2, factory, featureSelection, q);\n+                Value val2 = Expressions.toValue(e2, factory, q);\n                 if (!(val2 instanceof Literal)) {\n-                    Value val1 = Expressions.toValue(e1, factory, featureSelection, q);\n+                    Value val1 = Expressions.toValue(e1, factory, q);\n                     Expressions.setImplicitTypes(val1, val2, e1.getJavaType(), q);\n                     inExpr = factory.contains(val2, val1);\n                     return isNegated() ? factory.not(inExpr) : inExpr;\n@@ -1452,10 +1442,10 @@ public PredicateImpl negate() {\n                     }\n                 }\n             } \n-            inExpr = super.toKernelExpression(factory, featureSelection, q); \n+            inExpr = super.toKernelExpression(factory, q); \n             IsNotNull notNull = new Expressions.IsNotNull(e);\n             \n-            return factory.and(inExpr, notNull.toKernelExpression(factory, featureSelection, q));\n+            return factory.and(inExpr, notNull.toKernelExpression(factory, q));\n         }\n         \n         public void acceptVisit(CriteriaExpressionVisitor visitor) {\n@@ -1503,17 +1493,17 @@ public Case(Class<T> cls) {\n \n         @Override\n         public org.apache.openjpa.kernel.exps.Value toValue(\n-            ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n+            ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n             int size = whens.size();\n             org.apache.openjpa.kernel.exps.Expression[] exps = new org.apache.openjpa.kernel.exps.Expression[size];\n             for (int i = 0; i < size; i++) {\n                 org.apache.openjpa.kernel.exps.Expression expr = \n-                    ((ExpressionImpl<?>)whens.get(i)).toKernelExpression(factory, featureSelection, q);\n-                Value action = Expressions.toValue((ExpressionImpl<?>)thens.get(i), factory, featureSelection, q);\n+                    ((ExpressionImpl<?>)whens.get(i)).toKernelExpression(factory, q);\n+                Value action = Expressions.toValue((ExpressionImpl<?>)thens.get(i), factory, q);\n                 exps[i] = factory.whenCondition(expr, action);\n             }\n \n-            Value other = Expressions.toValue((ExpressionImpl<?>)otherwise, factory, featureSelection, q);\n+            Value other = Expressions.toValue((ExpressionImpl<?>)otherwise, factory, q);\n             return factory.generalCaseExpression(exps, other);\n         }\n         \n@@ -1583,17 +1573,17 @@ public SimpleCase(Expression<C> expr) {\n \n         @Override\n         public org.apache.openjpa.kernel.exps.Value toValue(\n-                ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n-            Value caseOperandExpr = Expressions.toValue((ExpressionImpl<?>)caseOperand, factory, featureSelection, q);\n+                ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+            Value caseOperandExpr = Expressions.toValue((ExpressionImpl<?>)caseOperand, factory, q);\n             int size = whens.size();\n             org.apache.openjpa.kernel.exps.Expression[] exps = new org.apache.openjpa.kernel.exps.Expression[size];\n             for (int i = 0; i < size; i++) {\n-                Value when = Expressions.toValue((ExpressionImpl<C>)whens.get(i), factory, featureSelection, q);\n-                Value action = Expressions.toValue((ExpressionImpl<?>)thens.get(i), factory, featureSelection, q);\n+                Value when = Expressions.toValue((ExpressionImpl<C>)whens.get(i), factory, q);\n+                Value action = Expressions.toValue((ExpressionImpl<?>)thens.get(i), factory, q);\n                 exps[i] = factory.whenScalar(when, action);\n             }\n \n-            Value other = Expressions.toValue((ExpressionImpl<?>)otherwise, factory, featureSelection, q);\n+            Value other = Expressions.toValue((ExpressionImpl<?>)otherwise, factory, q);\n             return factory.simpleCaseExpression(caseOperandExpr, exps, other);\n         }\n         \n@@ -1626,8 +1616,8 @@ public Lower(Expression<String> x) {\n         }\n         \n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n-            return factory.toLowerCase(Expressions.toValue(e, factory, featureSelection, q));\n+        public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+            return factory.toLowerCase(Expressions.toValue(e, factory, q));\n         }\n         \n         @Override\n@@ -1642,8 +1632,8 @@ public Upper(Expression<String> x) {\n         }\n         \n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n-            return factory.toUpperCase(Expressions.toValue(e, factory, featureSelection, q));\n+        public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+            return factory.toUpperCase(Expressions.toValue(e, factory, q));\n         }\n         \n         @Override\n@@ -1658,8 +1648,8 @@ public Length(Expression<String> x) {\n         }\n         \n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n-            return factory.stringLength(Expressions.toValue(e, factory, featureSelection, q));\n+        public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+            return factory.stringLength(Expressions.toValue(e, factory, q));\n         }\n         \n         @Override\n@@ -1701,9 +1691,9 @@ public Exists(Subquery<X> x) {\n \n         @Override\n         org.apache.openjpa.kernel.exps.Expression toKernelExpression(\n-            ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n+            ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n             org.apache.openjpa.kernel.exps.Expression exists = \n-                factory.isNotEmpty(Expressions.toValue(e, factory, featureSelection, q));\n+                factory.isNotEmpty(Expressions.toValue(e, factory, q));\n             return exists;\n         }        \n         \n@@ -1719,9 +1709,8 @@ public All(Subquery<X> x) {\n         }\n         \n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection,\n-            CriteriaQueryImpl<?> q) {\n-            return factory.all(Expressions.toValue(e, factory, featureSelection, q));\n+        public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+            return factory.all(Expressions.toValue(e, factory, q));\n         }\n         \n         @Override\n@@ -1736,8 +1725,8 @@ public Any(Subquery<X> x) {\n         }\n         \n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n-            return factory.any(Expressions.toValue(e, factory, featureSelection, q));\n+        public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+            return factory.any(Expressions.toValue(e, factory, q));\n         }\n         \n         @Override\n@@ -1755,8 +1744,8 @@ public Not(Expression<Boolean> ne) {\n         \n         @Override\n         public org.apache.openjpa.kernel.exps.Expression toKernelExpression(\n-          ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n-            return factory.not(e.toKernelExpression(factory, featureSelection, q));\n+          ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+            return factory.not(e.toKernelExpression(factory, q));\n         }        \n         \n         public void acceptVisit(CriteriaExpressionVisitor visitor) {\n@@ -1778,8 +1767,8 @@ public CastAs(Class<Y> cast, ExpressionImpl<?> actual) {\n         \n         @Override\n         public org.apache.openjpa.kernel.exps.Value toValue(\n-          ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n-            org.apache.openjpa.kernel.exps.Value e = actual.toValue(factory, featureSelection, q);\n+          ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n+            org.apache.openjpa.kernel.exps.Value e = actual.toValue(factory, q);\n             e.setImplicitType(getJavaType());\n             return e;\n         }\n@@ -1808,11 +1797,11 @@ public ListArgument(Class<T> cls, ExpressionImpl<?>... args) {\n         \n         @Override\n         public org.apache.openjpa.kernel.exps.Arguments toValue(\n-          ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n+          ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n             org.apache.openjpa.kernel.exps.Value[] kvs = new org.apache.openjpa.kernel.exps.Value[_args.length];\n             int i = 0;\n             for (ExpressionImpl<?> arg : _args) {\n-                kvs[i++] = arg.toValue(factory, featureSelection, q);\n+                kvs[i++] = arg.toValue(factory, q);\n             }\n             org.apache.openjpa.kernel.exps.Arguments e = factory.newArgumentList(kvs);\n             e.setImplicitType(getJavaType());"},{"sha":"daf1df48cb9425d5aaf5b5c4c8614d07239dd89c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FetchPathImpl.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FetchPathImpl.java","raw_url":"https://github.com/apache/openjpa/raw/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FetchPathImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FetchPathImpl.java?ref=677d34049c0ef5330680a8240f148065a6fda85d","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.openjpa.persistence.criteria;\n \n-import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.Set;\n \n@@ -39,7 +38,7 @@\n  * @param <Z> type of parent\n  * @param <X> type of this\n  */\n-public class FetchPathImpl<Z,X> extends PathImpl<Z,X> implements Fetch<Z, X> {\n+class FetchPathImpl<Z,X> extends PathImpl<Z,X> implements Fetch<Z, X> {\n     protected Set<Fetch<?,?>> _fetches;\n     protected JoinType joinType;\n     "},{"sha":"bb3a08821b5095eba6e9cf3c647f2efa319277a8","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FromImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FromImpl.java","raw_url":"https://github.com/apache/openjpa/raw/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FromImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/FromImpl.java?ref=677d34049c0ef5330680a8240f148065a6fda85d","patch":"@@ -53,7 +53,7 @@\n  * @param <X> the type represented by this receiver \n  */\n \n-public class FromImpl<Z,X> extends PathImpl<Z,X> implements From<Z,X> {\n+class FromImpl<Z,X> extends PathImpl<Z,X> implements From<Z,X> {\n     private java.util.Set<Join<X, ?>> _joins;\n     private java.util.Set<Fetch<X, ?>> _fetches;\n     private Type<X> type;"},{"sha":"8d74b59944c0cc8f9b8aeb4b98be83dee4ad73dc","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Joins.java","status":"modified","additions":31,"deletions":33,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Joins.java","raw_url":"https://github.com/apache/openjpa/raw/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Joins.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Joins.java?ref=677d34049c0ef5330680a8240f148065a6fda85d","patch":"@@ -44,7 +44,6 @@\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.persistence.meta.AbstractManagedType;\n import org.apache.openjpa.persistence.meta.Members;\n-import org.apache.openjpa.persistence.meta.MetamodelImpl;\n import org.apache.openjpa.persistence.meta.Members.KeyAttributeImpl;\n import org.apache.openjpa.persistence.meta.Members.MapAttributeImpl;\n import org.apache.openjpa.persistence.meta.Members.Member;\n@@ -58,7 +57,7 @@\n  * @since 2.0.0\n  * \n  */\n-public abstract class Joins {\n+abstract class Joins {\n    \n     /**\n      * Join a single-valued attribute.\n@@ -67,7 +66,7 @@\n      * @param <Z> type from which joining\n      * @param <X> type of the attribute being joined\n      */\n-    public static class SingularJoin<Z,X> extends FromImpl<Z,X> implements Join<Z,X> {\n+    static class SingularJoin<Z,X> extends FromImpl<Z,X> implements Join<Z,X> {\n         private final JoinType joinType;\n         private boolean allowNull = false;\n         \n@@ -98,7 +97,7 @@ public JoinType getJoinType() {\n         }\n         \n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> c) {\n+        public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> c) {\n             ClassMetaData meta = _member.fmd.getDeclaredTypeMetaData();\n             org.apache.openjpa.kernel.exps.Path path = null;\n             SubqueryImpl<?> subquery = c.getDelegator();\n@@ -113,7 +112,7 @@ else if (parent.inSubquery(subquery)) {\n                 path.setSchemaAlias(c.getAlias(this));\n                 path.get(_member.fmd, allowNull); \n             } else {\n-                path = (org.apache.openjpa.kernel.exps.Path) _parent.toValue(factory, featureSelection, c);\n+                path = (org.apache.openjpa.kernel.exps.Path) _parent.toValue(factory, c);\n                 path.get(_member.fmd, allowNull);\n                 path.setMetaData(meta);\n                 path.setImplicitType(meta.getDescribedType());\n@@ -123,7 +122,7 @@ else if (parent.inSubquery(subquery)) {\n         \n         @Override\n         public org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, \n-            MetamodelImpl featureSelection, CriteriaQueryImpl<?> c) {\n+            CriteriaQueryImpl<?> c) {\n             ClassMetaData meta = _member.fmd.getDeclaredTypeMetaData();\n             org.apache.openjpa.kernel.exps.Path path = null;\n             SubqueryImpl<?> subquery = c.getDelegator();\n@@ -158,7 +157,7 @@ else if (parent.inSubquery(subquery)) {\n                     path.setMetaData(meta);\n                     path.get(_member.fmd, false);\n                 } else            \n-                    path = (org.apache.openjpa.kernel.exps.Path)toValue(factory, featureSelection, c);\n+                    path = (org.apache.openjpa.kernel.exps.Path)toValue(factory, c);\n                 \n                 Class<?> type = meta == null ? AbstractExpressionBuilder.TYPE_OBJECT : meta.getDescribedType();\n                 Value var = null;\n@@ -176,7 +175,7 @@ else if (parent.inSubquery(subquery)) {\n             if (getJoins() != null) {\n                 for (Join<?, ?> join1 : getJoins()) {\n                     filter = Expressions.and(factory, \n-                             ((FromImpl<?,?>)join1).toKernelExpression(factory, featureSelection, c), filter);\n+                             ((FromImpl<?,?>)join1).toKernelExpression(factory, c), filter);\n                 }\n             }\n             org.apache.openjpa.kernel.exps.Expression expr = Expressions.and(factory, join, filter);\n@@ -188,9 +187,9 @@ else if (parent.inSubquery(subquery)) {\n                 if (corrJoins != null && corrJoins.contains(_parent)) {\n                     Value var = getVariableForCorrPath(subquery, correlatedParentPath);\n                     parentPath = factory.newPath(var);\n-                } else \n-                    parentPath = (org.apache.openjpa.kernel.exps.Path)\n-                        correlatedParentPath.toValue(factory, featureSelection, c);\n+                } else {\n+                    parentPath = (org.apache.openjpa.kernel.exps.Path)correlatedParentPath.toValue(factory, c);\n+                }\n                 parentPath.get(_member.fmd, allowNull);\n                 parentPath.setSchemaAlias(c.getAlias(correlatedParentPath));\n                 if (c.ctx().getParent() != null && c.ctx().getVariable(parentPath.getSchemaAlias()) == null) \n@@ -269,7 +268,7 @@ public StringBuilder asVariable(AliasContext q) {\n      * @param E type of the element being joined to\n      * \n      */\n-    public static abstract class AbstractCollection<Z,C,E> extends FromImpl<Z,E> implements PluralJoin<Z, C, E> {\n+    static abstract class AbstractCollection<Z,C,E> extends FromImpl<Z,E> implements PluralJoin<Z, C, E> {\n         private final JoinType joinType;\n         private boolean allowNull = false;\n         \n@@ -309,7 +308,7 @@ public ClassMetaData getMemberClassMetaData() {\n          * Convert this path to a kernel path (value).\n          */\n         @Override\n-        public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> c) {\n+        public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> c) {\n             org.apache.openjpa.kernel.exps.Path path = null;\n             SubqueryImpl<?> subquery = c.getDelegator();\n             PathImpl<?,?> parent = getInnermostParentPath();\n@@ -323,7 +322,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n                 path.setMetaData(subQ.getMetaData());\n                 path.setSchemaAlias(c.getAlias(this));\n             } else {\n-                path = (org.apache.openjpa.kernel.exps.Path) _parent.toValue(factory, featureSelection, c);\n+                path = (org.apache.openjpa.kernel.exps.Path) _parent.toValue(factory, c);\n                 path.get(_member.fmd, allowNull);\n             }\n             return path;\n@@ -335,7 +334,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n          */\n         @Override\n         public org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, \n-            MetamodelImpl featureSelection, CriteriaQueryImpl<?> c) {\n+            CriteriaQueryImpl<?> c) {\n             ClassMetaData meta = getMemberClassMetaData(); \n             org.apache.openjpa.kernel.exps.Path path = null;\n             SubqueryImpl<?> subquery = c.getDelegator();\n@@ -374,7 +373,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n                     path.setMetaData(meta);\n                     path.get(_member.fmd, false);\n                 } else {           \n-                    path = (org.apache.openjpa.kernel.exps.Path)toValue(factory, featureSelection, c);\n+                    path = (org.apache.openjpa.kernel.exps.Path)toValue(factory, c);\n                 }\n                 Class<?> type = meta == null ? AbstractExpressionBuilder.TYPE_OBJECT : meta.getDescribedType(); \n                 if (bind) {\n@@ -386,7 +385,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n             if (getJoins() != null) {\n                 for (Join<?, ?> join1 : getJoins()) {\n                     filter = Expressions.and(factory, \n-                        ((FromImpl<?,?>)join1).toKernelExpression(factory, featureSelection, c), filter);\n+                        ((FromImpl<?,?>)join1).toKernelExpression(factory, c), filter);\n                 }\n             }\n             org.apache.openjpa.kernel.exps.Expression expr = Expressions.and(factory, join, filter);\n@@ -398,8 +397,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQue\n                     Value var = getVariableForCorrPath(subquery, correlatedParentPath);\n                     parentPath = factory.newPath(var);\n                 } else {\n-                    parentPath = (org.apache.openjpa.kernel.exps.Path)\n-                        correlatedParentPath.toValue(factory, featureSelection, c);\n+                    parentPath = (org.apache.openjpa.kernel.exps.Path) correlatedParentPath.toValue(factory, c);\n                 }\n                 parentPath.get(_member.fmd, allowNull);\n                 parentPath.setSchemaAlias(c.getAlias(correlatedParentPath));\n@@ -442,7 +440,7 @@ private Value getVariableForCorrPath(SubqueryImpl<?> subquery, PathImpl<?,?> pat\n      * @param <Z> the type from which being joined\n      * @param <E> the type of the the collection attribute elements\n      */\n-    public static class Collection<Z,E> extends AbstractCollection<Z,java.util.Collection<E>,E> \n+    static class Collection<Z,E> extends AbstractCollection<Z,java.util.Collection<E>,E> \n         implements CollectionJoin<Z,E>{\n         public Collection(FromImpl<?,Z> parent, Members.CollectionAttributeImpl<? super Z, E> member, JoinType jt) {\n             super(parent, member, jt);\n@@ -459,7 +457,7 @@ public Collection(FromImpl<?,Z> parent, Members.CollectionAttributeImpl<? super\n      * @param <Z> the type from which being joined\n      * @param <E> the type of the the set attribute elements\n      */\n-    public static class Set<Z,E> extends AbstractCollection<Z,java.util.Set<E>,E> \n+    static class Set<Z,E> extends AbstractCollection<Z,java.util.Set<E>,E> \n         implements SetJoin<Z,E> {\n         public Set(FromImpl<?,Z> parent, Members.SetAttributeImpl<? super Z, E> member, JoinType jt) {\n             super(parent, member, jt);\n@@ -477,7 +475,7 @@ public Set(FromImpl<?,Z> parent, Members.SetAttributeImpl<? super Z, E> member,\n      * @param <E> the type of the the list attribute elements\n      */\n     \n-    public static class List<Z,E> extends AbstractCollection<Z,java.util.List<E>,E> \n+    static class List<Z,E> extends AbstractCollection<Z,java.util.List<E>,E> \n         implements ListJoin<Z,E> {\n         \n         public List(FromImpl<?,Z> parent, Members.ListAttributeImpl<? super Z, E> member, JoinType jt) {\n@@ -501,7 +499,7 @@ public List(FromImpl<?,Z> parent, Members.ListAttributeImpl<? super Z, E> member\n      * @param <V> the type of the the map attribute values\n      */\n     \n-    public static class Map<Z,K,V> extends AbstractCollection<Z,java.util.Map<K,V>,V> \n+    static class Map<Z,K,V> extends AbstractCollection<Z,java.util.Map<K,V>,V> \n         implements MapJoin<Z,K,V> {\n         private KeyJoin<K,V> _keyJoin;\n         \n@@ -544,15 +542,15 @@ public Map(FromImpl<?,Z> parent, Members.MapAttributeImpl<? super Z, K,V> member\n                 \n         @Override\n         public org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, \n-            MetamodelImpl featureSelection, CriteriaQueryImpl<?> c) {\n+            CriteriaQueryImpl<?> c) {\n             return (_keyJoin == null) \n-                ? super.toKernelExpression(factory, featureSelection, c)\n-                : _keyJoin.toKernelExpression(factory, featureSelection, c);\n+                ? super.toKernelExpression(factory, c)\n+                : _keyJoin.toKernelExpression(factory, c);\n         }\n     }\n     \n        \n-   public static class MapKey<Z,K> extends PathImpl<Z,K> {\n+   static class MapKey<Z,K> extends PathImpl<Z,K> {\n        private final Map<?,K,?> map;\n        private final MapAttributeImpl<Z, K, ?> attr;\n        \n@@ -572,7 +570,7 @@ public MapKey(Map<Z,K,?> joinMap){\n         * \n         */\n        @Override\n-       public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> c) {\n+       public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> c) {\n            Value val = c.getRegisteredVariable(map);\n            org.apache.openjpa.kernel.exps.Path path = factory.newPath(val);\n            return factory.getKey(path);\n@@ -587,7 +585,7 @@ public StringBuilder asValue(AliasContext q) {\n        }\n    }\n        \n-   public static class MapEntry<K,V> extends ExpressionImpl<java.util.Map.Entry<K,V>> {\n+   static class MapEntry<K,V> extends ExpressionImpl<java.util.Map.Entry<K,V>> {\n        private final Map<?,K,V> map;\n        \n        public MapEntry(Map<?,K,V> joinMap){\n@@ -600,7 +598,7 @@ public MapEntry(Map<?,K,V> joinMap){\n         * \n         */\n        @Override\n-       public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> c) {\n+       public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> c) {\n            Value val = c.getRegisteredVariable(map);\n            org.apache.openjpa.kernel.exps.Path path = factory.newPath(val);\n            org.apache.openjpa.kernel.exps.Path var = factory.newPath(val);\n@@ -624,15 +622,15 @@ public StringBuilder asValue(AliasContext q) {\n     * @param <K> the type of the key of the original java.util.Map attribute \n     * @param <V> the type of the value of the original java.util.Map attribute\n     */\n-   public static class KeyJoin<K,V> extends Joins.Set<java.util.Map<K, V>, K> {\n+   static class KeyJoin<K,V> extends Joins.Set<java.util.Map<K, V>, K> {\n     public KeyJoin(FromImpl<?, java.util.Map<K, V>> parent, KeyAttributeImpl<? super java.util.Map<K, V>, K> member, \n             JoinType jt) {\n         super(parent, member, jt);\n     }\n     \n     @Override\n-    public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> c) {\n-        return factory.getKey(getParent().toValue(factory, featureSelection, c));\n+    public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> c) {\n+        return factory.getKey(getParent().toValue(factory, c));\n     }\n    }\n }"},{"sha":"1a1909f4c67f6effd4f23dd8802721fec556adee","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/OpenJPACriteriaQuery.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/OpenJPACriteriaQuery.java","raw_url":"https://github.com/apache/openjpa/raw/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/OpenJPACriteriaQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/OpenJPACriteriaQuery.java?ref=677d34049c0ef5330680a8240f148065a6fda85d","patch":"@@ -1,6 +1,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.metamodel.Metamodel;\n \n /**\n  * OpenJPA-specific extension to JPA 2.0 Criteria Query API.\n@@ -18,4 +19,11 @@\n      * @return a JPQL-like string.\n      */\n     public String toCQL();\n+    \n+    /**\n+     * Compile the query.\n+     * \n+     * @return the same instance compiled.\n+     */\n+    public OpenJPACriteriaQuery<T> compile();\n }"},{"sha":"0b044712f7df7086cddb59dc7ad39b1f3952d52c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/OrderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/OrderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/OrderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/OrderImpl.java?ref=677d34049c0ef5330680a8240f148065a6fda85d","patch":"@@ -27,7 +27,7 @@\n  * @author Pinaki Poddar\n  *\n  */\n-public class OrderImpl implements Order, CriteriaExpression {\n+class OrderImpl implements Order, CriteriaExpression {\n \tprivate boolean _ascending;\n \tprivate final ExpressionImpl<?> e;\n \t"},{"sha":"ff4ab54dcdb189a6d3f1b3fb18c56e11066f22e5","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java","raw_url":"https://github.com/apache/openjpa/raw/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ParameterExpressionImpl.java?ref=677d34049c0ef5330680a8240f148065a6fda85d","patch":"@@ -24,7 +24,6 @@\n \n import org.apache.openjpa.kernel.exps.ExpressionFactory;\n import org.apache.openjpa.kernel.exps.Value;\n-import org.apache.openjpa.persistence.meta.MetamodelImpl;\n import org.apache.openjpa.util.InternalException;\n \n /**\n@@ -39,7 +38,7 @@\n  * \n  * @param <T> the type of value held by this parameter.\n  */\n-public class ParameterExpressionImpl<T> extends ExpressionImpl<T> \n+class ParameterExpressionImpl<T> extends ExpressionImpl<T> \n     implements ParameterExpression<T> {\n     private String _name;\n     private int _index = 0; // index of the parameter as seen by the kernel, not position\n@@ -87,7 +86,7 @@ public String toString() {\n     }\n     \n     @Override\n-    public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n+    public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n         Class<?> clzz = getJavaType();\n         Object paramKey = _name == null ? _index : _name;\n         boolean isCollectionValued  = Collection.class.isAssignableFrom(clzz);"},{"sha":"d2478d1aebde063dca6d457bdd50f5bf76c7bdf1","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PathImpl.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PathImpl.java","raw_url":"https://github.com/apache/openjpa/raw/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PathImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PathImpl.java?ref=677d34049c0ef5330680a8240f148065a6fda85d","patch":"@@ -36,7 +36,6 @@\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.persistence.meta.Members;\n-import org.apache.openjpa.persistence.meta.MetamodelImpl;\n \n /**\n  * Represents a simple or compound attribute path from a \n@@ -54,7 +53,7 @@\n  * @param <Z> the type of the parent path \n  * @param <X> the type of this path\n  */\n-public class PathImpl<Z,X> extends ExpressionImpl<X> implements Path<X> {\n+class PathImpl<Z,X> extends ExpressionImpl<X> implements Path<X> {\n     protected final PathImpl<?,Z> _parent;\n     protected final Members.Member<? super Z,?> _member;\n     private boolean isEmbedded = false;\n@@ -151,7 +150,7 @@ public boolean isCorrelated() {\n      * Convert this path to a kernel path.\n      */\n     @Override\n-    public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection,  CriteriaQueryImpl<?> q) {\n+    public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n         if (q.isRegistered(this))\n             return q.getRegisteredValue(this);\n         org.apache.openjpa.kernel.exps.Path path = null;\n@@ -171,7 +170,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection,  CriteriaQu\n             path.setSchemaAlias(q.getAlias(_parent));\n             traversePath(_parent, path, _member.fmd);\n         } else if (_parent != null) {\n-            Value val = _parent.toValue(factory, featureSelection, q);\n+            Value val = _parent.toValue(factory, q);\n             if (val instanceof org.apache.openjpa.kernel.exps.Path) {\n                 path = (org.apache.openjpa.kernel.exps.Path)val;\n                 path.get(_member.fmd, allowNull);\n@@ -181,7 +180,7 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection,  CriteriaQu\n             }\n         } else if (_parent == null) {\n             path = factory.newPath();\n-            path.setMetaData(featureSelection.getRepository().getCachedMetaData(getJavaType()));\n+            path.setMetaData(q.getMetamodel().getRepository().getCachedMetaData(getJavaType()));\n         }\n         if (_member != null && !_member.isCollection()) {\n             path.setImplicitType(getJavaType());"},{"sha":"cfd51f996b3cd0b3da411c7481a66b923fd6aa54","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java","status":"modified","additions":26,"deletions":19,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java","raw_url":"https://github.com/apache/openjpa/raw/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java?ref=677d34049c0ef5330680a8240f148065a6fda85d","patch":"@@ -26,7 +26,6 @@\n import javax.persistence.criteria.Predicate;\n \n import org.apache.openjpa.kernel.exps.ExpressionFactory;\n-import org.apache.openjpa.persistence.meta.MetamodelImpl;\n \n /**\n  * Predicate is a expression that evaluates to true or false.\n@@ -39,9 +38,11 @@\n  * Negation of a Predicate creates a new Predicate.\n  * \n  * @author Pinaki Poddar\n- *\n+ * @author Fay Wang\n+ * \n+ * @since 2.0.0\n  */\n-public abstract class PredicateImpl extends ExpressionImpl<Boolean> implements Predicate {\n+abstract class PredicateImpl extends ExpressionImpl<Boolean> implements Predicate {\n     private static final ExpressionImpl<Integer> ONE  = new Expressions.Constant<Integer>(1);\n     public static final Predicate TRUE  = new Expressions.Equal(ONE,ONE);\n     public static final Predicate FALSE = new Expressions.NotEqual(ONE,ONE);\n@@ -51,14 +52,14 @@\n     private boolean _negated = false;\n \n     /**\n-     * A predicate no arguments representing AND operator.\n+     * An AND predicate with no arguments.\n      */\n     protected PredicateImpl() {\n         this(BooleanOperator.AND);\n     }\n     \n     /**\n-     * A predicate representing given operator.\n+     * A predicate with the given operator.\n      */\n     protected PredicateImpl(BooleanOperator op) {\n         super(Boolean.class);\n@@ -96,14 +97,20 @@ public final BooleanOperator getOperator() {\n         return _op;\n     }\n \n+    /**\n+     * Is this predicate created by negating another predicate?\n+     */\n     public final boolean isNegated() {\n         return _negated;\n     }\n \n     /**\n+     * Returns a new predicate as the negation of this predicate. \n+     * <br>\n+     * Note:\n      * Default negation creates a Not expression with this receiver as delegate.\n-     * Derived predicates can return the inverse expression such as NotEqual\n-     * for Equal or LessThan for GreaterThanEqual etc.\n+     * Derived predicates can return the inverse expression, if exists.\n+     * For example, NotEqual for Equal or LessThan for GreaterThanEqual etc.\n      */\n     public PredicateImpl negate() {\n         return new Expressions.Not(this).markNegated();\n@@ -115,45 +122,45 @@ protected PredicateImpl markNegated() {\n     }\n     \n     @Override\n-    org.apache.openjpa.kernel.exps.Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection,\n-        CriteriaQueryImpl<?> q) {\n+    org.apache.openjpa.kernel.exps.Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n         throw new AbstractMethodError(this.getClass().getName());\n     }\n     \n     @Override\n-    org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, MetamodelImpl featureSelection, \n-        CriteriaQueryImpl<?> q) {\n+    org.apache.openjpa.kernel.exps.Expression toKernelExpression(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n         if (_exps.isEmpty()) {\n             Predicate nil = _op == BooleanOperator.AND ? TRUE : FALSE;\n-            return ((PredicateImpl)nil).toKernelExpression(factory, featureSelection, q);\n+            return ((PredicateImpl)nil).toKernelExpression(factory, q);\n         }\n         if (_exps.size() == 1) {\n             Predicate e0 = _exps.get(0);\n             if (isNegated())\n                 e0 = e0.negate();\n-            return ((PredicateImpl)e0).toKernelExpression(factory, featureSelection, q);\n+            return ((PredicateImpl)e0).toKernelExpression(factory, q);\n         }\n         \n         ExpressionImpl<?> e1 = (ExpressionImpl<?>)_exps.get(0);\n         ExpressionImpl<?> e2 = (ExpressionImpl<?>)_exps.get(1);\n-        org.apache.openjpa.kernel.exps.Expression ke1 = e1.toKernelExpression(factory, featureSelection, q);\n-        org.apache.openjpa.kernel.exps.Expression ke2 = e2.toKernelExpression(factory, featureSelection, q);\n+        org.apache.openjpa.kernel.exps.Expression ke1 = e1.toKernelExpression(factory, q);\n+        org.apache.openjpa.kernel.exps.Expression ke2 = e2.toKernelExpression(factory, q);\n         org.apache.openjpa.kernel.exps.Expression result = _op == BooleanOperator.AND \n             ? factory.and(ke1,ke2) : factory.or(ke1, ke2);\n \n         for (int i = 2; i < _exps.size(); i++) {\n             PredicateImpl p = (PredicateImpl)_exps.get(i);\n             result = _op == BooleanOperator.AND \n-              ? factory.and(result, p.toKernelExpression(factory, featureSelection, q))\n-              : factory.or(result, p.toKernelExpression(factory,featureSelection,q));\n+              ? factory.and(result, p.toKernelExpression(factory, q))\n+              : factory.or(result, p.toKernelExpression(factory,q));\n         }\n         return _negated ? factory.not(result) : result;\n     }\n \n+    @Override\n     public void acceptVisit(CriteriaExpressionVisitor visitor) {\n         Expressions.acceptVisit(visitor, this, _exps.toArray(new Expression<?>[_exps.size()]));\n     }\n     \n+    @Override\n     public StringBuilder asValue(AliasContext q) {\n         boolean braces = _exps.size() > 1;\n         StringBuilder buffer =  Expressions.asValue(q, _exps.toArray(new Expression<?>[_exps.size()]), \" \" +_op + \" \");\n@@ -166,7 +173,7 @@ public StringBuilder asValue(AliasContext q) {\n      * Concrete AND predicate.\n      *\n      */\n-    public static class And extends PredicateImpl {\n+    static class And extends PredicateImpl {\n         public And(Expression<Boolean> x, Expression<Boolean> y) {\n             super(BooleanOperator.AND);\n             add(x).add(y);\n@@ -181,7 +188,7 @@ public And(Predicate...restrictions) {\n      * Concrete OR predicate.\n      *\n      */\n-    public static class Or extends PredicateImpl {\n+    static class Or extends PredicateImpl {\n         public Or(Expression<Boolean> x, Expression<Boolean> y) {\n             super(BooleanOperator.OR);\n             add(x).add(y);"},{"sha":"205470fba0c0bebfb878675164c77dc40163ca4c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/RootImpl.java","status":"modified","additions":9,"deletions":7,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/RootImpl.java","raw_url":"https://github.com/apache/openjpa/raw/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/RootImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/RootImpl.java?ref=677d34049c0ef5330680a8240f148065a6fda85d","patch":"@@ -34,11 +34,14 @@\n /**\n  * A root path without a parent.\n  * \n- * @author Pinaki Poddar\n- *\n  * @param <X> the type of the entity\n+ *\n+ * @author Pinaki Poddar\n+ * @author Fay Wang\n+ * \n+ * @since 2.0.0\n  */\n-public class RootImpl<X> extends FromImpl<X,X> implements Root<X> {\n+class RootImpl<X> extends FromImpl<X,X> implements Root<X> {\n     private final Types.Entity<X> _entity;\n         \n     public RootImpl(Types.Entity<X> type) {\n@@ -65,8 +68,7 @@ public void addToContext(ExpressionFactory factory, MetamodelImpl featureSelection, Criteri\n      * Convert this path to a kernel path value.\n      */\n     @Override\n-    public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, \n-        CriteriaQueryImpl<?> c) {\n+    public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> c) {\n         SubqueryImpl<?> subquery = c.getDelegator();\n         Path var = null;\n         Value val = null;\n@@ -92,8 +94,8 @@ public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection,\n      */\n     @Override\n     public org.apache.openjpa.kernel.exps.Expression toKernelExpression(\n-        ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> c) {\n-        Value path = toValue(factory, featureSelection, c);\n+        ExpressionFactory factory, CriteriaQueryImpl<?> c) {\n+        Value path = toValue(factory, c);\n         Value var = factory.newBoundVariable(c.getAlias(this), \n              _entity.meta.getDescribedType());\n         return factory.bindVariable(var, path);"},{"sha":"aab012b925558163a46577401c12e340e87a042f","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SelectionImpl.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SelectionImpl.java","raw_url":"https://github.com/apache/openjpa/raw/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SelectionImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SelectionImpl.java?ref=677d34049c0ef5330680a8240f148065a6fda85d","patch":"@@ -23,17 +23,20 @@\n import javax.persistence.criteria.Expression;\n import javax.persistence.criteria.Selection;\n \n+import org.apache.openjpa.kernel.exps.ExpressionFactory;\n import org.apache.openjpa.persistence.util.ReservedWords;\n \n /**\n  * An item selected in the projection clause of Criteria query.\n  * Base implementation for all concrete expressions.\n  * \n+ * @param <X> the type this term evaluates to\n+ * \n  * @author Pinaki Poddar\n  *\n- * @param <X>\n+ * @since 2.0.0\n  */\n-public abstract class SelectionImpl<X> implements Selection<X>, CriteriaExpression {\n+abstract class SelectionImpl<X> implements Selection<X>, CriteriaExpression {\n     private final Class<X> _cls;\n     private String _alias;\n     private Boolean _autoAliased; "},{"sha":"8638077631a894e4cb70779013010adbf7d4dc5b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/677d34049c0ef5330680a8240f148065a6fda85d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java?ref=677d34049c0ef5330680a8240f148065a6fda85d","patch":"@@ -54,12 +54,14 @@\n  * context of a parent query. A subquery delegates to a captive query for most\n  * of the operations but also maintains its own joins and correlated joins.\n  * \n+ * @param <T> the type selected by this subquery.\n+ * \n  * @author Pinaki Poddar\n  * @author Fay Wang\n  * \n- * @param <T> the type selected by this subquery.\n+ * @since 2.0.0\n  */\n-public class SubqueryImpl<T> extends ExpressionImpl<T> implements Subquery<T> {\n+class SubqueryImpl<T> extends ExpressionImpl<T> implements Subquery<T> {\n     private final AbstractQuery<?> _parent;\n     private final CriteriaQueryImpl<T> _delegate;\n     private final MetamodelImpl  _model;\n@@ -299,7 +301,7 @@ public boolean isCorrelated() {\n      * Convert this path to a kernel path value.\n      */\n     @Override\n-    public Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n+    public Value toValue(ExpressionFactory factory, CriteriaQueryImpl<?> q) {\n         final boolean subclasses = true;\n         CriteriaExpressionBuilder exprBuilder = new CriteriaExpressionBuilder();\n         String alias = q.getAlias(this);"}]}

