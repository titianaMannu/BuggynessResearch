{"sha":"68208302996c67f39d3db78498ea6b1e51be39d8","node_id":"MDY6Q29tbWl0MjA2MzY0OjY4MjA4MzAyOTk2YzY3ZjM5ZDNkYjc4NDk4ZWE2YjFlNTFiZTM5ZDg=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-07-16T22:37:52Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-07-16T22:37:52Z"},"message":"OPENJPA-1726: fix test case errors for Postgres\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@964966 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"de4c9179b0195d9084d7891eed67686d9a8190c6","url":"https://api.github.com/repos/apache/openjpa/git/trees/de4c9179b0195d9084d7891eed67686d9a8190c6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/68208302996c67f39d3db78498ea6b1e51be39d8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/68208302996c67f39d3db78498ea6b1e51be39d8","html_url":"https://github.com/apache/openjpa/commit/68208302996c67f39d3db78498ea6b1e51be39d8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/68208302996c67f39d3db78498ea6b1e51be39d8/comments","author":null,"committer":null,"parents":[{"sha":"64181e58adb7b0e78c0fdf89daa81f4050cfb9d6","url":"https://api.github.com/repos/apache/openjpa/commits/64181e58adb7b0e78c0fdf89daa81f4050cfb9d6","html_url":"https://github.com/apache/openjpa/commit/64181e58adb7b0e78c0fdf89daa81f4050cfb9d6"}],"stats":{"total":39,"additions":35,"deletions":4},"files":[{"sha":"447ba683ab464ff4905baa89ba426b4d21e7f10e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/results/TestTypedResults.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/68208302996c67f39d3db78498ea6b1e51be39d8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/results/TestTypedResults.java","raw_url":"https://github.com/apache/openjpa/raw/68208302996c67f39d3db78498ea6b1e51be39d8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/results/TestTypedResults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/results/TestTypedResults.java?ref=68208302996c67f39d3db78498ea6b1e51be39d8","patch":"@@ -35,6 +35,9 @@\n import javax.persistence.criteria.CriteriaBuilder;\n import javax.persistence.criteria.Root;\n \n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.PostgresDictionary;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n public class TestTypedResults extends SingleEMFTestCase {\n@@ -121,7 +124,12 @@ public void testTypedJPQLQuery() {\n         List<Order> typedCriteriaResults = typedCriteriaQuery.getResultList();\n         assertEquals(N_ORDERS / 2, typedCriteriaResults.size());\n \n-        Query nativeQ = em.createNativeQuery(\"SELECT * FROM CRIT_RES_ORD o WHERE (o.filled = 1)\", Order.class);\n+        \n+        DBDictionary dict = ((JDBCConfiguration)emf.getConfiguration()).getDBDictionaryInstance();\n+        String sql = \"SELECT * FROM CRIT_RES_ORD o WHERE (o.filled = 1)\";\n+        if (dict instanceof PostgresDictionary)\n+            sql = \"SELECT * FROM CRIT_RES_ORD o WHERE (o.filled = true)\";\n+        Query nativeQ = em.createNativeQuery(sql, Order.class);\n         // Don't suppress warnings.\n         List<Order> typedNativeResults = nativeQ.getResultList();\n         assertEquals(N_ORDERS / 2, typedNativeResults.size());"},{"sha":"99d6c1049a3c20e64bbb8ec14d4249733c9114c9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/RuntimeTest1.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/68208302996c67f39d3db78498ea6b1e51be39d8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/RuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/68208302996c67f39d3db78498ea6b1e51be39d8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/RuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/RuntimeTest1.java?ref=68208302996c67f39d3db78498ea6b1e51be39d8","patch":"@@ -31,13 +31,15 @@\n import javax.persistence.FetchType;\n import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n import javax.persistence.Temporal;\n import javax.persistence.TemporalType;\n \n /**\n  * Used in testing; should be enhanced.\n  */\n @Entity\n+@Table(name=\"DATART1\")\n @DiscriminatorValue(\"dataRt1\")\n public class RuntimeTest1\n     implements Serializable {"},{"sha":"aa2566b91bbf0ae54c033e81b95db8ebd55d2d94","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/68208302996c67f39d3db78498ea6b1e51be39d8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java","raw_url":"https://github.com/apache/openjpa/raw/68208302996c67f39d3db78498ea6b1e51be39d8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java?ref=68208302996c67f39d3db78498ea6b1e51be39d8","patch":"@@ -204,7 +204,12 @@ public void testSimpleCaseExpressions() {\n         rs = em.createQuery(query).getResultList();\n \n         result = (Object[]) rs.get(rs.size()-1);\n-        assertEquals(result[1], 1);\n+        \n+        if (result[1] instanceof String)\n+            assertEquals(result[1], \"true\");\n+        else    \n+            assertEquals(result[1], 1);\n+        \n \n         startTx(em);\n         String update = \"update CompUser c set c.creditRating = \" +"},{"sha":"8fc80ce2b5d87bc393bb9cf7b57d19c28271e6b1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJDBCEscapeDate.java","status":"modified","additions":18,"deletions":2,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/68208302996c67f39d3db78498ea6b1e51be39d8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJDBCEscapeDate.java","raw_url":"https://github.com/apache/openjpa/raw/68208302996c67f39d3db78498ea6b1e51be39d8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJDBCEscapeDate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJDBCEscapeDate.java?ref=68208302996c67f39d3db78498ea6b1e51be39d8","patch":"@@ -30,6 +30,7 @@\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.HSQLDictionary;\n+import org.apache.openjpa.jdbc.sql.PostgresDictionary;\n import org.apache.openjpa.jdbc.sql.SQLServerDictionary;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n@@ -75,13 +76,13 @@ public void testJDBCEscape() {\n                 // \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.123456'}\",\n                 \"select {t '00:00:00'}, a.empId from Employee a\",\n             };\n-        } else {\n+        } else if (dict instanceof PostgresDictionary) {\n             jpql = new String[] {\n                 \"select a from Employee a where a.hireDate >= {d '2009-08-25'}\",\n                 \"select a from Employee a where a.hireDate >= {d '2009-8-5'}\",\n                 \"select a from Employee a where a.hireTime >= {t '00:00:00'}\",\n                 \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00'}\",\n-                \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.'}\",\n+                //\"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.'}\",\n                 \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.1'}\",\n                 \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.12'}\",\n                 \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.123'}\",\n@@ -90,6 +91,21 @@ public void testJDBCEscape() {\n                 \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.123456'}\",\n                 \"select {t '00:00:00'}, a.empId from Employee a\",\n             };\n+        } else {\n+            jpql = new String[] {\n+                    \"select a from Employee a where a.hireDate >= {d '2009-08-25'}\",\n+                    \"select a from Employee a where a.hireDate >= {d '2009-8-5'}\",\n+                    \"select a from Employee a where a.hireTime >= {t '00:00:00'}\",\n+                    \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00'}\",\n+                    \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.'}\",\n+                    \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.1'}\",\n+                    \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.12'}\",\n+                    \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.123'}\",\n+                    \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.1234'}\",\n+                    \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.12345'}\",\n+                    \"select a from Employee a where a.hireTimestamp >= {ts '2009-08-25 00:00:00.123456'}\",\n+                    \"select {t '00:00:00'}, a.empId from Employee a\",\n+                };\n         }\n         \n "}]}

