{"sha":"68572a9197e1a668442ef463d193686c37c12c09","node_id":"MDY6Q29tbWl0MjA2MzY0OjY4NTcyYTkxOTdlMWE2Njg0NDJlZjQ2M2QxOTM2ODZjMzdjMTJjMDk=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-09-21T18:28:06Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-09-21T18:28:06Z"},"message":"Die in ProductDerivations.load() if given resource/file can't be parsed by any\nProductDerivations in the system.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@448625 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"14f864430d2decd568c18d0e51a18e5783621d77","url":"https://api.github.com/repos/apache/openjpa/git/trees/14f864430d2decd568c18d0e51a18e5783621d77"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/68572a9197e1a668442ef463d193686c37c12c09","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/68572a9197e1a668442ef463d193686c37c12c09","html_url":"https://github.com/apache/openjpa/commit/68572a9197e1a668442ef463d193686c37c12c09","comments_url":"https://api.github.com/repos/apache/openjpa/commits/68572a9197e1a668442ef463d193686c37c12c09/comments","author":null,"committer":null,"parents":[{"sha":"d85ea93d3a3db769f2b82c1ff27674ab1bd7c0ae","url":"https://api.github.com/repos/apache/openjpa/commits/d85ea93d3a3db769f2b82c1ff27674ab1bd7c0ae","html_url":"https://github.com/apache/openjpa/commit/d85ea93d3a3db769f2b82c1ff27674ab1bd7c0ae"}],"stats":{"total":51,"additions":27,"deletions":24},"files":[{"sha":"151f5c5bdab0191a19329b6e0e35c23a001c81c0","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/68572a9197e1a668442ef463d193686c37c12c09/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/68572a9197e1a668442ef463d193686c37c12c09/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=68572a9197e1a668442ef463d193686c37c12c09","patch":"@@ -751,7 +751,7 @@ protected boolean isInvalidProperty(String propName) {\n      */\n     public void setProperties(String resourceName) throws IOException {\n         ProductDerivations.load(resourceName, null, \n-                getClass().getClassLoader()).setInto(this);\n+            getClass().getClassLoader()).setInto(this);\n         _auto = resourceName;\n     }\n \n@@ -761,8 +761,8 @@ public void setProperties(String resourceName) throws IOException {\n      * <code>propertiesFile</code> value with the name of a file.\n      */\n     public void setPropertiesFile(File file) throws IOException {\n-        ProductDerivations.load(file, null, \n-                getClass().getClassLoader()).setInto(this);\n+        ProductDerivations.load(file, null, getClass().getClassLoader()).\n+            setInto(this);\n         _auto = file.toString();\n     }\n "},{"sha":"d97b228b16a19b4f3f4b1e6fc966060b42022f55","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/68572a9197e1a668442ef463d193686c37c12c09/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","raw_url":"https://github.com/apache/openjpa/raw/68572a9197e1a668442ef463d193686c37c12c09/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java?ref=68572a9197e1a668442ef463d193686c37c12c09","patch":"@@ -133,7 +133,8 @@ public static ConfigurationProvider load(String resource, String anchor,\n             }\n         }\n         reportErrors(errs, resource);\n-        return null;\n+        throw new MissingResourceException(resource, \n+            ProductDerivations.class.getName(), resource);\n     }\n \n     /**\n@@ -162,7 +163,8 @@ public static ConfigurationProvider load(File file, String anchor,\n             }\n         }\n         reportErrors(errs, file.getAbsolutePath());\n-        return null;\n+        throw new MissingResourceException(file.getAbsolutePath(), \n+            ProductDerivations.class.getName(), file.getAbsolutePath());\n     }\n    \n     /**"},{"sha":"bc11de25f0986d08285a0cd3ea7875410de8d1de","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","status":"modified","additions":20,"deletions":19,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/68572a9197e1a668442ef463d193686c37c12c09/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","raw_url":"https://github.com/apache/openjpa/raw/68572a9197e1a668442ef463d193686c37c12c09/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java?ref=68572a9197e1a668442ef463d193686c37c12c09","patch":"@@ -48,6 +48,8 @@\n public class PersistenceUnitInfoImpl\n     implements PersistenceUnitInfo, SourceTracker {\n \n+    public static final String KEY_PROVIDER = \"javax.persistence.provider\";\n+\n     private static final Localizer s_loc = Localizer.forPackage\n         (PersistenceUnitInfoImpl.class);\n \n@@ -181,8 +183,8 @@ public void addMappingFileName(String name) {\n     }\n \n     public List<URL> getJarFileUrls() {\n-        return (_jarFiles == null)\n-            ? (List<URL>) Collections.EMPTY_LIST : _jarFiles;\n+        return (_jarFiles == null) ? (List<URL>) Collections.EMPTY_LIST \n+            : _jarFiles;\n     }\n \n     public void addJarFile(URL jar) {\n@@ -215,8 +217,8 @@ public void addJarFileName(String name) {\n                 }\n             }\n         }\n-        throw new IllegalArgumentException(s_loc.get(\"bad-jar-name\", name)\n-            .getMessage());\n+        throw new IllegalArgumentException(s_loc.get(\"bad-jar-name\", name).\n+            getMessage());\n     }\n \n     public List<String> getManagedClassNames() {\n@@ -269,13 +271,13 @@ public void fromUserProperties(Map map) {\n         for (Object o : map.entrySet()) {\n             key = ((Map.Entry) o).getKey();\n             val = ((Map.Entry) o).getValue();\n-            if (\"javax.persistence.provider\".equals(key))\n+            if (KEY_PROVIDER.equals(key))\n                 setPersistenceProviderClassName((String) val);\n             else if (\"javax.persistence.transactionType\".equals(key)) {\n                 PersistenceUnitTransactionType ttype;\n                 if (val instanceof String)\n-                    ttype = Enum.valueOf\n-                        (PersistenceUnitTransactionType.class, (String) val);\n+                    ttype = Enum.valueOf(PersistenceUnitTransactionType.class, \n+                        (String) val);\n                 else\n                     ttype = (PersistenceUnitTransactionType) val;\n                 setTransactionType(ttype);\n@@ -320,11 +322,9 @@ public static Map toOpenJPAProperties(PersistenceUnitInfo info) {\n             map.put(\"openjpa.ConnectionFactoryMode\", \"managed\");\n             hasJta = true;\n         } else if (info instanceof PersistenceUnitInfoImpl\n-            && ((PersistenceUnitInfoImpl) info).getJtaDataSourceName() != null)\n-        {\n-            map.put(\"openjpa.ConnectionFactoryName\",\n-                ((PersistenceUnitInfoImpl)\n-                    info).getJtaDataSourceName());\n+            && ((PersistenceUnitInfoImpl) info).getJtaDataSourceName() != null){\n+            map.put(\"openjpa.ConnectionFactoryName\", ((PersistenceUnitInfoImpl)\n+                info).getJtaDataSourceName());\n             map.put(\"openjpa.ConnectionFactoryMode\", \"managed\");\n             hasJta = true;\n         }\n@@ -343,8 +343,7 @@ public static Map toOpenJPAProperties(PersistenceUnitInfo info) {\n             if (!hasJta)\n                 map.put(\"openjpa.ConnectionFactoryName\", nonJtaName);\n             else\n-                map.put(\"openjpa.ConnectionFactory2Name\",\n-                    nonJtaName);\n+                map.put(\"openjpa.ConnectionFactory2Name\", nonJtaName);\n         }\n \n         if (info.getClassLoader() != null)\n@@ -354,13 +353,13 @@ public static Map toOpenJPAProperties(PersistenceUnitInfo info) {\n         Properties props = info.getProperties();\n         if (props != null) {\n             map.putAll(props);\n-            // this isn't a real config property; remove it.\n+            // this isn't a real config property; remove it\n             map.remove(PersistenceProviderImpl.CLASS_TRANSFORMER_OPTIONS);\n         }\n \n         Properties metaFactoryProps = new Properties();\n-        if (info.getManagedClassNames() != null &&\n-            !info.getManagedClassNames().isEmpty()) {\n+        if (info.getManagedClassNames() != null \n+            && !info.getManagedClassNames().isEmpty()) {\n             StringBuffer types = new StringBuffer();\n             for (String type : info.getManagedClassNames()) {\n                 if (types.length() > 0)\n@@ -404,8 +403,7 @@ public static Map toOpenJPAProperties(PersistenceUnitInfo info) {\n         }\n         if (!metaFactoryProps.isEmpty()) {\n             // set persistent class locations as properties of metadata factory\n-            String factory =\n-                (String) map.get(\"openjpa.MetaDataFactory\");\n+            String factory = (String) map.get(\"openjpa.MetaDataFactory\");\n             if (factory == null)\n                 factory = Configurations.serializeProperties(metaFactoryProps);\n             else {\n@@ -417,6 +415,9 @@ public static Map toOpenJPAProperties(PersistenceUnitInfo info) {\n             }\n             map.put(\"openjpa.MetaDataFactory\", factory);\n         }\n+\n+        // always record provider name for product derivations to access\n+        map.put(KEY_PROVIDER, info.getPersistenceProviderClassName());\n         return map;\n     }\n "}]}

