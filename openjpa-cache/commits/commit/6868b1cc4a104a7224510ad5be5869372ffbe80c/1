{"sha":"6868b1cc4a104a7224510ad5be5869372ffbe80c","node_id":"MDY6Q29tbWl0MjA2MzY0OjY4NjhiMWNjNGExMDRhNzIyNDUxMGFkNWJlNTg2OTM3MmZmYmU4MGM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-27T22:02:34Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-27T22:02:34Z"},"message":"OPENJPA-340: UniqueConstraint supported via XML Descriptors\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@672406 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c65aebe3eeee2924de2dae5ceace7c7291ccc5dc","url":"https://api.github.com/repos/apache/openjpa/git/trees/c65aebe3eeee2924de2dae5ceace7c7291ccc5dc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6868b1cc4a104a7224510ad5be5869372ffbe80c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6868b1cc4a104a7224510ad5be5869372ffbe80c","html_url":"https://github.com/apache/openjpa/commit/6868b1cc4a104a7224510ad5be5869372ffbe80c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6868b1cc4a104a7224510ad5be5869372ffbe80c/comments","author":null,"committer":null,"parents":[{"sha":"ff4a96e707337123c3e94ba641b504101dd05c79","url":"https://api.github.com/repos/apache/openjpa/commits/ff4a96e707337123c3e94ba641b504101dd05c79","html_url":"https://github.com/apache/openjpa/commit/ff4a96e707337123c3e94ba641b504101dd05c79"}],"stats":{"total":470,"additions":414,"deletions":56},"files":[{"sha":"dae13ec743d6f888782cb4bfda85751b367d5c30","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/6868b1cc4a104a7224510ad5be5869372ffbe80c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/6868b1cc4a104a7224510ad5be5869372ffbe80c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java?ref=6868b1cc4a104a7224510ad5be5869372ffbe80c","patch":"@@ -20,6 +20,7 @@\n \n import java.io.File;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Iterator;\n@@ -212,9 +213,17 @@ public List getSecondaryTableJoinColumns(String tableName) {\n         }\n         return (cols == null) ? Collections.EMPTY_LIST : cols;\n     }\n+    \n+    /**\n+     * Adds a Secondary table of given name to this mapping. A secondary table \n+     * must be known before unique constraints are added to a Secondary table.\n+     */\n+    public void addSecondaryTable(String second) {\n+    \tsetSecondaryTableJoinColumns(second, null);\n+    }\n \n     /**\n-     * Declare the given class-level join.\n+     * Declare the given class-level join to the named (secondary) table.\n      */\n     public void setSecondaryTableJoinColumns(String tableName, List cols) {\n         if (cols == null)\n@@ -419,7 +428,7 @@ public void addUnique(String table, Unique unique) {\n         \t\t\tif (!table.containsColumn(columnName)) {\n         \t\t\t\tthrow new UserException(_loc.get(\"unique-missing-column\", \n                            new Object[]{cm, columnName, tableName, \n-        \t\t\t\t\t\ttable.getColumnNames()}));\n+        \t\t\t\t\t\tArrays.toString(table.getColumnNames())}));\n         \t\t\t}\n         \t\t\tColumn uniqueColumn = table.getColumn(columnName);\n         \t\t\tuniqueColumns[i] = uniqueColumn;"},{"sha":"9dd16ccaacb9efca6fe5f2012cda56529a0b2cd4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/6868b1cc4a104a7224510ad5be5869372ffbe80c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/6868b1cc4a104a7224510ad5be5869372ffbe80c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java?ref=6868b1cc4a104a7224510ad5be5869372ffbe80c","patch":"@@ -928,6 +928,11 @@ protected Unique createUnique(MetaDataContext context, String prefix,\n             deferred = false;\n         }\n         \n+        if (StringUtils.isEmpty(name)) {\n+        \tname = cols[0].getName();\n+        \tname = repos.getDBDictionary().getValidUniqueName(name, table);\n+        }\n+        \n         Unique unq = table.addUnique(name);\n         unq.setDeferred(deferred);\n         unq.setColumns(cols);"},{"sha":"f6e04300ac9d3f73ecbc1dd50611192d02c915a9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java","status":"modified","additions":56,"deletions":12,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/6868b1cc4a104a7224510ad5be5869372ffbe80c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java","raw_url":"https://github.com/apache/openjpa/raw/6868b1cc4a104a7224510ad5be5869372ffbe80c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java?ref=6868b1cc4a104a7224510ad5be5869372ffbe80c","patch":"@@ -24,48 +24,83 @@\n  * Represents a unique constraint. It can also represent a partial constraint.\n  *\n  * @author Abe White\n+ * @author Pinaki Poddar\n  */\n public class Unique\n     extends LocalConstraint {\n-\tprivate boolean _isAutoSetName = false;\n-    /**\n-     * Default constructor.\n+\tprivate boolean _autoNaming = false;\n+    \n+\t/**\n+     * Default constructor without a name.\n+     * Assumes that this constraint will set its own name automatically from\n+     * the names of the columns added to it.\n      */\n     public Unique() {\n-    \t_isAutoSetName = true;\n+    \t_autoNaming = true;\n     }\n \n     /**\n-     * Constructor.\n-     *\n+     * Construct with given name.\n+     * Assumes that this constraint will not set its own name.\n+     * \n      * @param name the name of the constraint, if any\n      * @param table the table of the constraint\n      */\n     public Unique(String name, Table table) {\n         super(name, table);\n+    \t_autoNaming = false;\n     }\n \n     public boolean isLogical() {\n         return false;\n     }\n     \n+    /**\n+     * Adds the given column. \n+     * The added column is set to non-nullable because a unique constraint\n+     * on the database requires that its constituent columns are NOT NULL. \n+     * @see Column#setNotNull(boolean)\n+     * If this instance is constructing its own name, then this method also\n+     * has the side effect of changing its own name by appending the newly \n+     * added column name to its own name. \n+     */\n     public void addColumn(Column col) {\n     \tsuper.addColumn(col);\n     \tcol.setNotNull(true);\n-    \tif (_isAutoSetName && getTable() == null) {\n-    \t\tString pre = StringUtils.isEmpty(getName()) ? \"UNQ\" : getName();\n-    \t\tsetName(pre + \"_\" + col.getName());\n-    \t\t_isAutoSetName = true;\n+    \tif (_autoNaming && getTable() == null) {\n+    \t\tString prefix = createPrefix();\n+    \t\tsetName(prefix + \"_\" + chop(col.getName(), 4));\n+    \t\t_autoNaming = true;\n     \t}\n     }\n     \n+    private String createPrefix() {\n+    \tString currentName = getName();\n+    \tif (StringUtils.isEmpty(currentName)) {\n+    \t\tString tname = getTableName();\n+    \t\tif (StringUtils.isEmpty(tname))\n+    \t\t\treturn \"UNQ\";\n+    \t\telse\n+    \t\t\treturn \"UNQ_\" + chop(tname, 3);\n+    \t}\n+    \treturn currentName;\n+    }\n+    \n+    private String chop(String name, int head) {\n+    \tif (StringUtils.isEmpty(name))\n+    \t\treturn name;\n+    \treturn name.substring(0, Math.min(Math.max(1,head), name.length()));\n+    }\n+    \n     /**\n      * Set the name of the constraint. This method cannot be called if the\n-     * constraint already belongs to a table.\n+     * constraint already belongs to a table. Calling this method also has the\n+     * side-effect of implying that the instance will not auto-generate its\n+     * name.\n      */\n     public void setName(String name) {\n         super.setName(name);\n-        _isAutoSetName = false;\n+        _autoNaming = false;\n     }\n \n \n@@ -76,4 +111,13 @@ public void setName(String name) {\n     public boolean equalsUnique(Unique unq) {\n         return equalsLocalConstraint(unq);\n     }\n+\n+    /*\n+     * Affirms if this instance is currently generating its own name. No \n+     * mutator because auto-naming is switched off as side-effect of user \n+     * calling setName() directly. \n+     */\n+\tpublic boolean isAutoNaming() {\n+\t\treturn _autoNaming;\n+\t}\n }"},{"sha":"dd3030ecf1c2b2e1fecba2a588860645e48ae7c4","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/6868b1cc4a104a7224510ad5be5869372ffbe80c/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/6868b1cc4a104a7224510ad5be5869372ffbe80c/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java?ref=6868b1cc4a104a7224510ad5be5869372ffbe80c","patch":"@@ -483,8 +483,10 @@ private void parseSecondaryTables(ClassMapping cm,\n                 joins = new ArrayList<Column>(table.pkJoinColumns().length);\n                 for (PrimaryKeyJoinColumn join : table.pkJoinColumns())\n                     joins.add(newColumn(join));\n-            } \n-            info.setSecondaryTableJoinColumns(name, joins);\n+                info.setSecondaryTableJoinColumns(name, joins);\n+            } else {\n+            \tinfo.addSecondaryTable(name);\n+            }\n             addUniqueConstraints(name, cm, info, table.uniqueConstraints());\n         }\n     }"},{"sha":"a63b407f1606e5a468a2465773cd626046452809","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","status":"modified","additions":16,"deletions":8,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/6868b1cc4a104a7224510ad5be5869372ffbe80c/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/6868b1cc4a104a7224510ad5be5869372ffbe80c/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java?ref=6868b1cc4a104a7224510ad5be5869372ffbe80c","patch":"@@ -39,6 +39,7 @@\n import org.apache.openjpa.jdbc.meta.ClassMappingInfo;\n import org.apache.openjpa.jdbc.meta.DiscriminatorMappingInfo;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMappingInfo;\n import org.apache.openjpa.jdbc.meta.MappingInfo;\n import org.apache.openjpa.jdbc.meta.MappingRepository;\n import org.apache.openjpa.jdbc.meta.QueryResultMapping;\n@@ -359,6 +360,8 @@ private boolean startSecondaryTable(Attributes attrs)\n         throws SAXException {\n         _secondaryTable = toTableName(attrs.getValue(\"schema\"),\n             attrs.getValue(\"name\"));\n+        ((ClassMapping)currentElement()).getMappingInfo()\n+        \t.addSecondaryTable(_secondaryTable);\n         return true;\n     }\n \n@@ -906,18 +909,23 @@ private void endUniqueConstraint() {\n         Unique unique = (Unique) popElement();\n         Object ctx = currentElement();\n         String tableName = \"?\";\n-        ClassMappingInfo info = null;\n         if (ctx instanceof ClassMapping) {\n-        \tinfo = ((ClassMapping) ctx).getMappingInfo();\n-        \ttableName = (_secondaryTable != null) ? info.getTableName() : _secondaryTable;\n+        \tClassMappingInfo info = ((ClassMapping) ctx).getMappingInfo();\n+        \ttableName = (_secondaryTable == null) \n+        \t\t? info.getTableName() : _secondaryTable;\n         \tinfo.addUnique(tableName, unique);\n         } else if (ctx instanceof FieldMapping) {// JoinTable\n-        \tinfo = ((FieldMapping)ctx).getDeclaringMapping().getMappingInfo();\n-        \ttableName = info.getTableName();\n-        \tinfo.addUnique(tableName, unique);\n+        \tFieldMappingInfo info = ((FieldMapping)ctx).getMappingInfo();\n+        \tinfo.addJoinTableUnique(unique);\n         } else if (ctx instanceof SequenceMapping) {\n-        \ttableName = ((SequenceMapping)ctx).getTable();\n-        \tunique.setTableName(tableName);\n+        \tSequenceMapping seq = (SequenceMapping)ctx;\n+        \tunique.setTableName(seq.getTable());\n+        \tColumn[] uniqueColumns = unique.getColumns();\n+        \tString[] columnNames = new String[uniqueColumns.length];\n+        \tint i = 0;\n+        \tfor (Column uniqueColumn : uniqueColumns)\n+        \t\tcolumnNames[i++] = uniqueColumn.getName();\n+        \tseq.setUniqueColumns(columnNames);\n         } else {\n         \tthrow new InternalException();\n         }"},{"sha":"b9aba608c6a2706573b6987e16a5dbc1bdcc0b00","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/SQLSniffer.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/6868b1cc4a104a7224510ad5be5869372ffbe80c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/SQLSniffer.java","raw_url":"https://github.com/apache/openjpa/raw/6868b1cc4a104a7224510ad5be5869372ffbe80c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/SQLSniffer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/SQLSniffer.java?ref=6868b1cc4a104a7224510ad5be5869372ffbe80c","patch":"@@ -0,0 +1,66 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc;\r\n+\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+\r\n+import org.apache.regexp.RE;\r\n+\r\n+/**\r\n+ * Utility class to verify whether a set of fragments appear in a list of\r\n+ * possible SQL statement.\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+public class SQLSniffer {\r\n+\t\r\n+\tprivate static Map<String, RE> cache = new HashMap<String, RE>();\r\n+\t/**\r\n+\t * Checks that the given set of regular expressions occur in at least one of\r\n+\t * the given input SQL.\r\n+\t */\r\n+\tpublic static boolean matches(List<String> SQLs, String...regexes) {\r\n+\t\tif (SQLs == null || regexes == null)\r\n+\t\t\treturn false;\r\n+\t\tfor (String sql : SQLs) {\r\n+\t\t\tboolean matched = true;\r\n+\t\t\tfor (String key : regexes) {\r\n+\t\t\t\tRE regex = getRegularExpression(key);\r\n+\t\t\t\tif (!regex.match(sql)) {\r\n+\t\t\t\t\tmatched = false;\r\n+\t\t\t\t\tbreak;\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t\tif (matched)\r\n+\t\t\t\treturn true;\r\n+\t\t}\r\n+\t\treturn false;\r\n+\t}\r\n+\t\r\n+\tprivate static RE getRegularExpression(String regex) {\r\n+\t\tif (cache.containsKey(regex)) \r\n+\t\t\treturn cache.get(regex);\r\n+\t\tRE re = new RE(regex);\r\n+\t\tcache.put(regex, re);\r\n+\t\treturn re;\r\n+\t}\r\n+}\r"},{"sha":"c8a7aa77d8a8cfad53842b6f482dfe033476bbda","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraint.java","status":"renamed","additions":31,"deletions":30,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/6868b1cc4a104a7224510ad5be5869372ffbe80c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraint.java","raw_url":"https://github.com/apache/openjpa/raw/6868b1cc4a104a7224510ad5be5869372ffbe80c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraint.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraint.java?ref=6868b1cc4a104a7224510ad5be5869372ffbe80c","patch":"@@ -23,12 +23,24 @@\n \r\n import javax.persistence.EntityManager;\r\n \r\n+import org.apache.openjpa.persistence.jdbc.SQLSniffer;\r\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n \r\n-public class TestUnique extends SQLListenerTestCase {\r\n+/**\r\n+ * Tests unique constraints specified via annotations for primary/secondary\r\n+ * table, sequence generator, join tables have been defined on database by\r\n+ * examining DDL statements.\r\n+ * \r\n+ * @see resources/org/apache/openjpa/persistence/jdbc/unique/orm.xml defines\r\n+ * the ORM mapping.\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+public class TestUniqueConstraint extends SQLListenerTestCase {\r\n     @Override\r\n     public void setUp(Object... props) {\r\n-    \tsuper.setUp(UniqueA.class, UniqueB.class);    \t\t\t    \r\n+    \tsuper.setUp(DROP_TABLES, UniqueA.class, UniqueB.class);    \t\t\t    \r\n     }\r\n     \r\n \tpublic void testMapping() {\r\n@@ -40,39 +52,28 @@ public void testMapping() {\n \t\t\r\n \t\tList<String> sqls = super.sql;\r\n \t\t\r\n-\t\tassertSQLFragnment(sqls, \"CREATE TABLE UNIQUE_A\", \r\n-\t\t\t\t\"UNIQUE (a1, a2)\", \r\n-\t\t\t\t\"UNIQUE (a3, a4)\");\r\n-\t\tassertSQLFragnment(sqls, \"CREATE TABLE UNIQUE_B\", \r\n-\t\t\t\t\"UNIQUE (b1, b2)\");\r\n-\t\tassertSQLFragnment(sqls, \"CREATE TABLE UNIQUE_SECONDARY\", \r\n-\t\t\t\t\"UNIQUE (sa1)\");\r\n-\t\tassertSQLFragnment(sqls, \"CREATE TABLE UNIQUE_GENERATOR\", \r\n-\t\t\t\t\"UNIQUE (GEN1, GEN2)\");\r\n-\t\tassertSQLFragnment(sqls, \"CREATE TABLE UNIQUE_JOINTABLE\", \r\n-\t\t\t\t\"UNIQUE (UNIQUEA_AID, BS_BID)\");\r\n-\t\t\r\n+\t\tassertSQLFragnments(sqls, \"CREATE TABLE UNIQUE_A\",\r\n+\t\t\t\t\"UNIQUE \\\\w*\\\\(a1, a2\\\\)\", \r\n+\t\t\t\t\"UNIQUE \\\\w*\\\\(a3, a4\\\\)\");\r\n+\t\tassertSQLFragnments(sqls, \"CREATE TABLE UNIQUE_B\",\r\n+\t\t\t\t\"UNIQUE \\\\w*\\\\(b1, b2\\\\)\");\r\n+\t\tassertSQLFragnments(sqls, \"CREATE TABLE UNIQUE_SECONDARY\",\r\n+\t\t\t\t\"UNIQUE \\\\w*\\\\(sa1\\\\)\");\r\n+\t\tassertSQLFragnments(sqls, \"CREATE TABLE UNIQUE_GENERATOR\",\r\n+\t\t\t\t\"UNIQUE \\\\w*\\\\(GEN1, GEN2\\\\)\");\r\n+\t\tassertSQLFragnments(sqls, \"CREATE TABLE UNIQUE_JOINTABLE\",\r\n+\t\t\t\t\"UNIQUE \\\\w*\\\\(FK_A, FK_B\\\\)\");\r\n \t}\r\n \t\r\n-\tvoid assertSQLFragnment(List<String> list, String...keys) {\r\n-\t\tfor (String sql : list) {\r\n-\t\t\tString SQL = sql.toUpperCase();\r\n-\t\t\tboolean matched = true;\r\n-\t\t\tfor (String key : keys) {\r\n-\t\t\t\tString KEY = key.toUpperCase();\r\n-\t\t\t\tif (SQL.indexOf(KEY) == -1) {\r\n-\t\t\t\t\tmatched = false;\r\n-\t\t\t\t\tbreak;\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n-\t\t\tif (matched)\r\n-\t\t\t\treturn;\r\n-\t\t}\r\n+\tvoid assertSQLFragnments(List<String> list, String... keys) {\r\n+\t\tif (SQLSniffer.matches(list, keys))\r\n+\t\t\treturn;\r\n \t\tint i = 0;\r\n \t\tfor (String sql : list) {\r\n \t\t\ti++;\r\n-\t\t\tSystem.out.println(\"\"+i+\":\"+sql);\r\n+\t\t\tSystem.out.println(\"\" + i + \":\" + sql);\r\n \t\t}\r\n-\t\tfail(\"None of the above SQL contains all keys \" + Arrays.toString(keys));\r\n+\t\tfail(\"None of the \" + sql.size() + \" SQL contains all keys \"\r\n+\t\t\t\t+ Arrays.toString(keys));\r\n \t}\r\n }\r","previous_filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUnique.java"},{"sha":"c4a1f684e39a38debbc447c7947792b09318fca5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraintWithXMLDescriptor.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/6868b1cc4a104a7224510ad5be5869372ffbe80c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraintWithXMLDescriptor.java","raw_url":"https://github.com/apache/openjpa/raw/6868b1cc4a104a7224510ad5be5869372ffbe80c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraintWithXMLDescriptor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraintWithXMLDescriptor.java?ref=6868b1cc4a104a7224510ad5be5869372ffbe80c","patch":"@@ -0,0 +1,86 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.unique;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.SQLSniffer;\r\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n+\r\n+/**\r\n+ * Tests unique constraints specified via XML Descriptor for primary/secondary\r\n+ * table, sequence generator, join tables have been defined on database by\r\n+ * examining DDL statements.\r\n+ * \r\n+ * @see resources/org/apache/openjpa/persistence/jdbc/unique/orm.xml \r\n+ * defines the ORM mapping. \r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+public class TestUniqueConstraintWithXMLDescriptor extends SQLListenerTestCase {\r\n+\t@Override\r\n+\tpublic void setUp(Object... props) {\r\n+\t\tsuper.setUp(DROP_TABLES, UniqueA.class, UniqueB.class);\r\n+\t}\r\n+\r\n+\tprotected String getPersistenceUnitName() {\r\n+\t\treturn \"test-unique-constraint\";\r\n+\t}\r\n+\r\n+\tpublic void testMapping() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tem.getTransaction().commit();\r\n+\t\tem.close();\r\n+\t\t// The above should trigger schema definition\r\n+\r\n+\t\tList<String> sqls = super.sql;\r\n+\t\tassertFalse(\"No SQL DDL registered\", sqls.isEmpty());\r\n+\r\n+\t\t// Following verification techniques is fragile as databases DDL\r\n+\t\t// syntax vary greatly on UNIQUE CONSTRAINT\r\n+\t\tassertSQLFragnments(sqls, \"CREATE TABLE UNIQUE_A_XML\",\r\n+\t\t\t\t\"UNIQUE \\\\w*\\\\(a1x, a2x\\\\)\", \r\n+\t\t\t\t\"UNIQUE \\\\w*\\\\(a3x, a4x\\\\)\");\r\n+\t\tassertSQLFragnments(sqls, \"CREATE TABLE UNIQUE_B_XML\",\r\n+\t\t\t\t\"UNIQUE \\\\w*\\\\(b1x, b2x\\\\)\");\r\n+\t\tassertSQLFragnments(sqls, \"CREATE TABLE UNIQUE_SECONDARY_XML\",\r\n+\t\t\t\t\"UNIQUE \\\\w*\\\\(sa1x\\\\)\");\r\n+\t\tassertSQLFragnments(sqls, \"CREATE TABLE UNIQUE_GENERATOR_XML\",\r\n+\t\t\t\t\"UNIQUE \\\\w*\\\\(GEN1_XML, GEN2_XML\\\\)\");\r\n+\t\tassertSQLFragnments(sqls, \"CREATE TABLE UNIQUE_JOINTABLE_XML\",\r\n+\t\t\t\t\"UNIQUE \\\\w*\\\\(FK_A_XML, FK_B_XML\\\\)\");\r\n+\t}\r\n+\r\n+\tvoid assertSQLFragnments(List<String> list, String... keys) {\r\n+\t\tif (SQLSniffer.matches(list, keys))\r\n+\t\t\treturn;\r\n+\t\tint i = 0;\r\n+\t\tfor (String sql : list) {\r\n+\t\t\ti++;\r\n+\t\t\tSystem.out.println(\"\" + i + \":\" + sql);\r\n+\t\t}\r\n+\t\tfail(\"None of the \" + sql.size() + \" SQL contains all keys \"\r\n+\t\t\t\t+ Arrays.toString(keys));\r\n+\t}\r\n+}\r"},{"sha":"aa28e0286f31d6640a29c8755b23963d8fea5050","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueA.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/6868b1cc4a104a7224510ad5be5869372ffbe80c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueA.java","raw_url":"https://github.com/apache/openjpa/raw/6868b1cc4a104a7224510ad5be5869372ffbe80c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueA.java?ref=6868b1cc4a104a7224510ad5be5869372ffbe80c","patch":"@@ -23,6 +23,7 @@\n import javax.persistence.Column;\r\n import javax.persistence.Entity;\r\n import javax.persistence.Id;\r\n+import javax.persistence.JoinColumn;\r\n import javax.persistence.JoinTable;\r\n import javax.persistence.ManyToMany;\r\n import javax.persistence.SecondaryTable;\r\n@@ -72,6 +73,8 @@\n \t\r\n \t@ManyToMany\r\n \t@JoinTable(name=\"UNIQUE_JOINTABLE\",\r\n-\t\t\tuniqueConstraints=@UniqueConstraint(columnNames={\"UNIQUEA_AID\",\"BS_BID\"}))\r\n+\t\t\tjoinColumns={@JoinColumn(name=\"FK_A\", nullable=false, referencedColumnName=\"aid\")},\r\n+\t\t\tinverseJoinColumns={@JoinColumn(name=\"FK_B\", nullable=false, referencedColumnName=\"bid\")},\r\n+\t\t\tuniqueConstraints=@UniqueConstraint(columnNames={\"FK_A\",\"FK_B\"}))\r\n \tprivate Collection<UniqueB> bs;\r\n }\r"},{"sha":"0a3709c831b590291b7317b75078f41295d17a56","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/6868b1cc4a104a7224510ad5be5869372ffbe80c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/6868b1cc4a104a7224510ad5be5869372ffbe80c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java?ref=6868b1cc4a104a7224510ad5be5869372ffbe80c","patch":"@@ -47,6 +47,7 @@\n      * database tables should be cleared.\n      */\n     protected static final Object CLEAR_TABLES = new Object();\n+    protected static final Object DROP_TABLES = new Object();\n \n     /**\n      * The {@link TestResult} instance for the current test run.\n@@ -95,6 +96,10 @@ protected OpenJPAEntityManagerFactorySPI createNamedEMF(String pu,\n                 map.put(\"openjpa.jdbc.SynchronizeMappings\",\n                     \"buildSchema(ForeignKeys=true,\" \n                     + \"SchemaAction='add,deleteTableContents')\");\n+            } else if (props[i] == DROP_TABLES) {\n+                map.put(\"openjpa.jdbc.SynchronizeMappings\",\n+                    \"buildSchema(ForeignKeys=true,\" \n+                    + \"SchemaAction='drop,add')\");\n             } else if (props[i] instanceof Class)\n                 types.add((Class) props[i]);\n             else if (props[i] != null)"},{"sha":"e23e21ec46608dac5f1315580a91d9cf33c872d5","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/6868b1cc4a104a7224510ad5be5869372ffbe80c/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/6868b1cc4a104a7224510ad5be5869372ffbe80c/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=6868b1cc4a104a7224510ad5be5869372ffbe80c","patch":"@@ -88,5 +88,12 @@\n             <property name=\"openjpa.jdbc.SynchronizeMappings\"\n                   value=\"buildSchema(ForeignKeys=true)\"/>\n         </properties>\n-    </persistence-unit>\n+    </persistence-unit>\r\n+    \r\n+    <persistence-unit name=\"test-unique-constraint\">\r\n+        <mapping-file>org/apache/openjpa/persistence/jdbc/unique/orm.xml</mapping-file>\r\n+        <class>org.apache.openjpa.persistence.jdbc.unique.UniqueA</class>\r\n+        <class>org.apache.openjpa.persistence.jdbc.unique.UniqueB</class>\r\n+    </persistence-unit>\r\n+    \n </persistence>"},{"sha":"cb410928e35800ccafa07e8eb116726a6645d4c6","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/unique/orm.xml","status":"added","additions":122,"deletions":0,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/6868b1cc4a104a7224510ad5be5869372ffbe80c/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/unique/orm.xml","raw_url":"https://github.com/apache/openjpa/raw/6868b1cc4a104a7224510ad5be5869372ffbe80c/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/unique/orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/unique/orm.xml?ref=6868b1cc4a104a7224510ad5be5869372ffbe80c","patch":"@@ -0,0 +1,122 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<!--\r\n+\tLicensed to the Apache Software Foundation (ASF) under one\r\n+\tor more contributor license agreements.  See the NOTICE file\r\n+\tdistributed with this work for additional information\r\n+\tregarding copyright ownership.  The ASF licenses this file\r\n+\tto you under the Apache License, Version 2.0 (the\r\n+\t\"License\"); you may not use this file except in compliance\r\n+\twith the License.  You may obtain a copy of the License at\r\n+\t\r\n+\thttp://www.apache.org/licenses/LICENSE-2.0\r\n+\t\r\n+\tUnless required by applicable law or agreed to in writing,\r\n+\tsoftware distributed under the License is distributed on an\r\n+\t\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+\tKIND, either express or implied.  See the License for the\r\n+\tspecific language governing permissions and limitations\r\n+\tunder the License.\r\n+-->\r\n+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm orm_1_0.xsd\"\r\n+\tversion=\"1.0\">\r\n+\t\r\n+\t<persistence-unit-metadata>\r\n+\t\t<xml-mapping-metadata-complete>\r\n+\t\t</xml-mapping-metadata-complete>\r\n+\t</persistence-unit-metadata>\r\n+\t\r\n+\t\r\n+\t<package>org.apache.openjpa.persistence.jdbc.unique</package>\r\n+\t<entity name=\"UniqueA\" class=\"UniqueA\">\r\n+\t\t<table name=\"UNIQUE_A_XML\">\r\n+\t\t\t<unique-constraint>\r\n+\t\t\t\t<column-name>a1x</column-name>\r\n+\t\t\t\t<column-name>a2x</column-name>\r\n+\t\t\t</unique-constraint>\r\n+\t\t\t<unique-constraint>\r\n+\t\t\t\t<column-name>a3x</column-name>\r\n+\t\t\t\t<column-name>a4x</column-name>\r\n+\t\t\t</unique-constraint>\r\n+\t\t</table>\r\n+\t\t<secondary-table name=\"UNIQUE_SECONDARY_XML\">\r\n+\t\t\t<unique-constraint>\r\n+\t\t\t\t<column-name>sa1x</column-name>\r\n+\t\t\t</unique-constraint>\r\n+\t\t</secondary-table>\r\n+\t\t<attributes>\r\n+\t\t\t<id name=\"aid\">\r\n+\t\t\t</id>\r\n+\t\t\t<basic name=\"a1\">\r\n+\t\t\t\t<column name=\"a1x\"/>\r\n+\t\t\t</basic>\r\n+\t\t\t<basic name=\"a2\">\r\n+\t\t\t\t<column name=\"a2x\"/>\r\n+\t\t\t</basic>\r\n+\t\t\t<basic name=\"a3\">\r\n+\t\t\t\t<column name=\"a3x\"/>\r\n+\t\t\t</basic>\r\n+\t\t\t<basic name=\"a4\">\r\n+\t\t\t\t<column name=\"a4x\"/>\r\n+\t\t\t</basic>\r\n+\t\t\t<basic name=\"a5\">\r\n+\t\t\t\t<column name=\"a5x\"/>\r\n+\t\t\t</basic>\r\n+\t\t\t<basic name=\"a6\">\r\n+\t\t\t\t<column name=\"a6x\"/>\r\n+\t\t\t</basic>\r\n+\t\t\t\r\n+\t\t\t<basic name=\"sa1\">\r\n+\t\t\t\t<column name=\"sa1x\" table=\"UNIQUE_SECONDARY_XML\" />\r\n+\t\t\t</basic>\r\n+\t\t\t<basic name=\"sa2\">\r\n+\t\t\t\t<column name=\"sa2x\" table=\"UNIQUE_SECONDARY_XML\" />\r\n+\t\t\t</basic>\r\n+\r\n+\t\t\t<many-to-many name=\"bs\">\r\n+\t\t\t\t<join-table name=\"UNIQUE_JOINTABLE_XML\">\r\n+\t\t\t\t\t<join-column name=\"FK_A_XML\" referenced-column-name=\"aid\" nullable=\"false\">\r\n+\t\t\t\t\t</join-column>\r\n+\t\t\t\t\t<inverse-join-column name=\"FK_B_XML\" referenced-column-name=\"bid\" nullable=\"false\">\r\n+\t\t\t\t\t</inverse-join-column>\r\n+\t\t\t\t\t<unique-constraint>\r\n+\t\t\t\t\t\t<column-name>FK_A_XML</column-name>\r\n+\t\t\t\t\t\t<column-name>FK_B_XML</column-name>\r\n+\t\t\t\t\t</unique-constraint>\r\n+\t\t\t\t</join-table>\r\n+\t\t\t</many-to-many>\r\n+\t\t</attributes>\r\n+\t</entity>\r\n+\r\n+\t<entity name=\"UniqueB\" class=\"UniqueB\">\r\n+\t\t<table name=\"UNIQUE_B_XML\">\r\n+\t\t\t<unique-constraint>\r\n+\t\t\t\t<column-name>b1x</column-name>\r\n+\t\t\t\t<column-name>b2x</column-name>\r\n+\t\t\t</unique-constraint>\r\n+\t\t</table>\r\n+\t\t<attributes>\r\n+\t\t\t<id name=\"bid\">\r\n+\t\t\t\t<generated-value strategy=\"TABLE\"\r\n+\t\t\t\t\tgenerator=\"testGeneratorXML\" />\r\n+\t\t\t\t<table-generator name=\"testGeneratorXML\"\r\n+\t\t\t\t\ttable=\"UNIQUE_GENERATOR_XML\" pk-column-name=\"GEN1_XML\"\r\n+\t\t\t\t\tvalue-column-name=\"GEN2_XML\">\r\n+\t\t\t\t\t<unique-constraint>\r\n+\t\t\t\t\t\t<column-name>GEN1_XML</column-name>\r\n+\t\t\t\t\t\t<column-name>GEN2_XML</column-name>\r\n+\t\t\t\t\t</unique-constraint>\r\n+\t\t\t\t</table-generator>\r\n+\t\t\t</id>\r\n+\t\t\t<basic name=\"b1\">\r\n+\t\t\t\t<column name=\"b1x\"/>\r\n+\t\t\t</basic>\r\n+\t\t\t<basic name=\"b2\">\r\n+\t\t\t\t<column name=\"b2x\"/>\r\n+\t\t\t</basic>\r\n+\t\t</attributes>\r\n+\t</entity>\r\n+</entity-mappings>\r\n+\r\n+\r"}]}

