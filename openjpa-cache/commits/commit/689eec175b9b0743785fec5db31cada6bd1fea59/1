{"sha":"689eec175b9b0743785fec5db31cada6bd1fea59","node_id":"MDY6Q29tbWl0MjA2MzY0OjY4OWVlYzE3NWI5YjA3NDM3ODVmZWM1ZGIzMWNhZGE2YmQxZmVhNTk=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-21T03:23:18Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-21T03:23:18Z"},"message":"OPENJPA-606 InformixDictionary default property setting incorrectly set. Also fixed SQL problems as described in the issue.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@658544 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2eb46a40e216d6fbfbfb118a344ba8d26552249f","url":"https://api.github.com/repos/apache/openjpa/git/trees/2eb46a40e216d6fbfbfb118a344ba8d26552249f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/689eec175b9b0743785fec5db31cada6bd1fea59","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/689eec175b9b0743785fec5db31cada6bd1fea59","html_url":"https://github.com/apache/openjpa/commit/689eec175b9b0743785fec5db31cada6bd1fea59","comments_url":"https://api.github.com/repos/apache/openjpa/commits/689eec175b9b0743785fec5db31cada6bd1fea59/comments","author":null,"committer":null,"parents":[{"sha":"99a69bef3315bc0434be8a54281b3f1802fbe6f8","url":"https://api.github.com/repos/apache/openjpa/commits/99a69bef3315bc0434be8a54281b3f1802fbe6f8","html_url":"https://github.com/apache/openjpa/commit/99a69bef3315bc0434be8a54281b3f1802fbe6f8"}],"stats":{"total":43,"additions":35,"deletions":8},"files":[{"sha":"2e687c0a4a01e25fcc9698fede50d723b1fa3aef","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Distinct.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/689eec175b9b0743785fec5db31cada6bd1fea59/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Distinct.java","raw_url":"https://github.com/apache/openjpa/raw/689eec175b9b0743785fec5db31cada6bd1fea59/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Distinct.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Distinct.java?ref=689eec175b9b0743785fec5db31cada6bd1fea59","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.jdbc.kernel.exps;\n \n+import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n \n /**\n@@ -40,4 +41,18 @@ public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n     protected String getOperator() {\n         return \"DISTINCT\";\n     }\n+    \n+\n+    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n+        SQLBuffer sql, int index) {\n+        if (sel.getConfiguration().getDBDictionaryInstance().platform.indexOf(\n+            \"Informix\") > -1) {\n+            sql.append(getOperator());\n+            sql.append(\" \");\n+            getValue().appendTo(sel, ctx, state, sql, 0);\n+            sql.addCastForParam(getOperator(), getValue());\n+        }\n+        else\n+            super.appendTo(sel, ctx, state, sql, index);\n+    }\n }"},{"sha":"7eca5e89b8656d1977c3c19844da279ea31e870c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","status":"modified","additions":20,"deletions":8,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/689eec175b9b0743785fec5db31cada6bd1fea59/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/689eec175b9b0743785fec5db31cada6bd1fea59/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java?ref=689eec175b9b0743785fec5db31cada6bd1fea59","patch":"@@ -28,12 +28,14 @@\n import java.util.Arrays;\n import java.util.Collection;\n \n+import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.schema.Index;\n import org.apache.openjpa.jdbc.schema.PrimaryKey;\n import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.lib.util.ReferenceHashSet;\n+import org.apache.openjpa.util.UnsupportedException;\n \n /**\n  * Dictionary for Informix database. Notable features:\n@@ -91,11 +93,6 @@ public InformixDictionary() {\n         supportsDeferredConstraints = false;\n         constraintNameMode = CONS_NAME_AFTER;\n \n-        maxTableNameLength = 18;\n-        maxColumnNameLength = 18;\n-        maxIndexNameLength = 18;\n-        maxConstraintNameLength = 18;\n-\n         // informix supports \"CLOB\" type, but any attempt to insert\n         // into them raises: \"java.sql.SQLException: Can't convert fromnull\"\n         useGetStringForClobs = true;\n@@ -109,7 +106,7 @@ public InformixDictionary() {\n         doubleTypeName = \"NUMERIC(32,20)\";\n         dateTypeName = \"DATE\";\n         timeTypeName = \"DATETIME HOUR TO SECOND\";\n-        timestampTypeName = \"DATETIME YEAR TO SECOND\";\n+        timestampTypeName = \"DATETIME YEAR TO FRACTION(3)\";\n         doubleTypeName = \"NUMERIC(32,20)\";\n         floatTypeName = \"REAL\";\n         bigintTypeName = \"NUMERIC(32,0)\";\n@@ -133,7 +130,17 @@ public InformixDictionary() {\n         // Informix doesn't support aliases in deletes if the table has an index\n         allowsAliasInBulkClause = false;\n         \n-        supportsSubselect = false;\n+        supportsTimestampNanos = false;\n+\n+        // Informix doesn't understand \"X CROSS JOIN Y\", but it does understand\n+        // the equivalent \"X JOIN Y ON 1 = 1\"\n+        crossJoinClause = \"JOIN\";\n+        requiresConditionForCrossJoin = true;\n+\n+        concatenateFunction = \"CONCAT({0},{1})\";\n+        nextSequenceQuery = \"SELECT {0}.NEXTVAL FROM SYSTABLES WHERE TABID=1\";\n+        supportsCorrelatedSubselect = false;\n+        swapSchemaAndCatalog = false;\n     }\n \n     public void connectedConfiguration(Connection conn)\n@@ -190,7 +197,7 @@ public void setBoolean(PreparedStatement stmnt, int idx, boolean val,\n         throws SQLException {\n         // informix actually requires that a boolean be set: it cannot\n         // handle a numeric argument\n-        stmnt.setBoolean(idx, val);\n+        stmnt.setString(idx, val ? \"t\" : \"f\");\n     }\n \n     public String[] getCreateTableSQL(Table table) {\n@@ -256,4 +263,9 @@ public Connection decorate(Connection conn)\n             }\n         return conn;\n     }\n+\n+    public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,\n+            FilterValue start) {\n+        throw new UnsupportedException();\n+    }\n }"}]}

