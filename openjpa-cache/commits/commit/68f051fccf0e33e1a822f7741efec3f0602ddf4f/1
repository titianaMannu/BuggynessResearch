{"sha":"68f051fccf0e33e1a822f7741efec3f0602ddf4f","node_id":"MDY6Q29tbWl0MjA2MzY0OjY4ZjA1MWZjY2YwZTMzZTFhODIyZjc3NDFlZmVjM2YwNjAyZGRmNGY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-31T13:52:50Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-07-31T13:52:50Z"},"message":"OPENJPA-670 committing patch provided by Jeremy Bauer\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@681370 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9e32b7daf744b299b393dde31cfc6cea64ce0ab6","url":"https://api.github.com/repos/apache/openjpa/git/trees/9e32b7daf744b299b393dde31cfc6cea64ce0ab6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/68f051fccf0e33e1a822f7741efec3f0602ddf4f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/68f051fccf0e33e1a822f7741efec3f0602ddf4f","html_url":"https://github.com/apache/openjpa/commit/68f051fccf0e33e1a822f7741efec3f0602ddf4f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/68f051fccf0e33e1a822f7741efec3f0602ddf4f/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"4af04f30d9a38628d5bfe88cb28219de61087f0c","url":"https://api.github.com/repos/apache/openjpa/commits/4af04f30d9a38628d5bfe88cb28219de61087f0c","html_url":"https://github.com/apache/openjpa/commit/4af04f30d9a38628d5bfe88cb28219de61087f0c"}],"stats":{"total":2066,"additions":2065,"deletions":1},"files":[{"sha":"bbd7ef52637c9fc04b9d1e00427ef8c4fd3642cf","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","status":"modified","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","raw_url":"https://github.com/apache/openjpa/raw/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java?ref=68f051fccf0e33e1a822f7741efec3f0602ddf4f","patch":"@@ -24,6 +24,7 @@\n import java.sql.Types;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n \n@@ -312,6 +313,20 @@ protected void prepareMapping(ClassMetaData meta) {\n         ClassMapping sup = mapping.getPCSuperclassMapping();\n         if (sup != null && (mapping.getResolve() & MODE_MAPPING) != 0)\n             return;\n+        \n+        // if this mapping is not for a managed interface, ensure that if \n+        // we have an inheritance hierarchy there is a default strategy\n+        // applied to the root class\n+        if (!mapping.getDescribedType().isInterface() &&\n+            !mapping.isEmbeddedOnly()) {\n+            // if an inheritance strategy has not been set on this mapping\n+            // determine if needs one and if so, set it\n+            if (!hasInheritanceStrategy(mapping)) {\n+                ClassMapping baseMapping = findBaseClassMapping(mapping); \n+                if (baseMapping != null)\n+                    setDefaultInheritanceStrategy(baseMapping);\n+            }            \n+        }\n \n         // define superclass fields after mapping class, so we can tell whether\n         // the class is mapped and needs to redefine abstract superclass fields\n@@ -1256,4 +1271,77 @@ public void endConfiguration()\n             ((Configurable) _schema).endConfiguration();\n         }            \n     }\n+    \n+    /**\n+     * Finds the base class mapping for the specified mapping.  Loads all\n+     * persistent types if necessary, since all persistent subclasses of this\n+     * mapping may not have been resolved before this method is called.\n+     */\n+    protected ClassMapping findBaseClassMapping(ClassMapping mapping) {        \n+        ClassMapping baseMapping = null;\n+        ClassMapping sup = mapping.getPCSuperclassMapping();\n+        if (sup == null) {\n+            // no superclass metadata was provided.  check to see if this class\n+            // has any persistent subclasses.\n+            if (mapping.getPCSubclasses().length > 0)\n+                baseMapping = mapping;\n+            else {\n+                // persistent subclasses may not have been resolved yet.  \n+                // run through the persistent types to see if any of them \n+                // or their superclass is a subclass of this class.\n+                Collection classes = loadPersistentTypes(false, \n+                        mapping.getEnvClassLoader());\n+                Class cls;\n+                for (Iterator itr = classes.iterator(); itr.hasNext();) {\n+                    cls = (Class) itr.next();\n+                    Class supcl = cls.getSuperclass();\n+                    while (supcl != null && \n+                           !supcl.getClass().equals(java.lang.Object.class)) {\n+                        if (!supcl.isInterface() &&\n+                            supcl.equals(mapping.getDescribedType())) {\n+                            baseMapping = mapping;    \n+                            break;\n+                        }\n+                        supcl = supcl.getSuperclass();\n+                    }\n+                    if (baseMapping != null) break;\n+                }\n+            }\n+        } else if (!sup.getDescribedType().isInterface()) {\n+            // if the superclass is not a managed interface, find the root\n+            // superclass and get its mapping info\n+            ClassMapping supcm = sup;\n+            while (supcm != null && \n+                    !supcm.getDescribedType().isInterface() &&\n+                    !supcm.isEmbeddedOnly()) {\n+                ClassMapping supcm2 = supcm.getPCSuperclassMapping();\n+                if (supcm2 == null)\n+                    baseMapping = supcm;\n+                supcm = supcm2;\n+            }\n+        }\n+        return baseMapping;\n+    }\n+   \n+    /**\n+     * If an inheritance strategy has not been set on this mapping, set it\n+     * to the default (flat).  This method should be called before strategies\n+     * are created for the specified mapping.\n+     */\n+    protected void setDefaultInheritanceStrategy(ClassMapping mapping) {\n+        ClassMappingInfo info = mapping.getMappingInfo();\n+        if (info != null && info.getHierarchyStrategy() == null)\n+            info.setHierarchyStrategy(FlatClassStrategy.ALIAS);        \n+    } \n+    \n+    /**\n+     * Determines whether an inhertance strategy has been set on the\n+     * specified mapping.\n+     */\n+    protected boolean hasInheritanceStrategy(ClassMapping mapping) {\n+        ClassMappingInfo info = mapping.getMappingInfo();\n+        if (info != null && info.getHierarchyStrategy() != null)\n+            return true;\n+        return false;        \n+    }\n }"},{"sha":"176c1a77ca52ce77a469cc956d65b5e70090e0a2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestDefaultInheritanceStrategy.java","status":"added","additions":622,"deletions":0,"changes":622,"blob_url":"https://github.com/apache/openjpa/blob/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestDefaultInheritanceStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestDefaultInheritanceStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestDefaultInheritanceStrategy.java?ref=68f051fccf0e33e1a822f7741efec3f0602ddf4f","patch":"@@ -0,0 +1,622 @@\n+package org.apache.openjpa.persistence.inheritance;\n+\n+import java.lang.reflect.Method;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.Discriminator;\n+import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.inheritance.entity.AbstractClass;\n+import org.apache.openjpa.persistence.inheritance.entity.BaseClass;\n+import org.apache.openjpa.persistence.inheritance.entity.BaseClass2;\n+import org.apache.openjpa.persistence.inheritance.entity.BaseClass3;\n+import org.apache.openjpa.persistence.inheritance.entity.BaseClass4;\n+import org.apache.openjpa.persistence.inheritance.entity.BaseClass5;\n+import org.apache.openjpa.persistence.inheritance.entity.BaseClass6;\n+import org.apache.openjpa.persistence.inheritance.entity.ManagedIface;\n+import org.apache.openjpa.persistence.inheritance.entity.ManagedIface2;\n+import org.apache.openjpa.persistence.inheritance.entity.MappedSuper;\n+import org.apache.openjpa.persistence.inheritance.entity.MidClass;\n+import org.apache.openjpa.persistence.inheritance.entity.MidClass2;\n+import org.apache.openjpa.persistence.inheritance.entity.MidClass3;\n+import org.apache.openjpa.persistence.inheritance.entity.SubclassA;\n+import org.apache.openjpa.persistence.inheritance.entity.SubclassB;\n+import org.apache.openjpa.persistence.inheritance.entity.SubclassC;\n+import org.apache.openjpa.persistence.inheritance.entity.SubclassD;\n+import org.apache.openjpa.persistence.inheritance.entity.SubclassE;\n+import org.apache.openjpa.persistence.inheritance.entity.ImplClassA;\n+import org.apache.openjpa.persistence.inheritance.entity.SubclassF;\n+import org.apache.openjpa.persistence.inheritance.entity.SubclassG;\n+import org.apache.openjpa.persistence.inheritance.entity.SubclassH;\n+import org.apache.openjpa.persistence.inheritance.entity.SubclassI;\n+import org.apache.openjpa.persistence.inheritance.entity.SubclassJ;\n+import org.apache.openjpa.persistence.inheritance.entity.SubclassK;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * This test verifies that OpenJPA uses a single-table inheritance\n+ * strategy and default discriminator column if no inheritance strategy \n+ * is defined.\n+ * \n+ * OpenJPA JIRA: {@link http://issues.apache.org/jira/browse/OPENJPA-670}\n+\n+ * @author Jeremy Bauer\n+ *\n+ */\n+public class TestDefaultInheritanceStrategy \n+    extends SingleEMFTestCase {\n+    \n+    public void setUp() {\n+        setUp(BaseClass.class, SubclassA.class, SubclassB.class,\n+            SubclassC.class, MappedSuper.class, SubclassD.class,\n+            BaseClass2.class, MidClass.class, SubclassE.class,\n+            ManagedIface.class, ImplClassA.class,\n+            ManagedIface2.class, BaseClass3.class, SubclassF.class,\n+            BaseClass4.class, SubclassG.class,\n+            BaseClass5.class, MidClass2.class, SubclassH.class,\n+            AbstractClass.class, SubclassI.class, SubclassJ.class,\n+            BaseClass6.class, SubclassK.class);\n+    }\n+\n+    private Class[] classArray(Class... classes) {\n+        return classes;\n+    }\n+    \n+    /**\n+     * This variation tests a default simple class hierarchy with no inheritance\n+     * or discriminator column annotations defined.  \n+     */\n+    public void testSimpleDefaultInheritance() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        // Create some entities\n+        SubclassA sca = new SubclassA();\n+        sca.setId(0);\n+        sca.setName(\"SubclassABaseClassName0\");\n+        sca.setClassAName(\"SubclassAName0\");\n+\n+        SubclassA sca2 = new SubclassA();\n+        sca2.setId(1);\n+        sca2.setName(\"SubclassABaseClassName1\");\n+        sca2.setClassAName(\"SubclassAName1\");\n+\n+        SubclassB scb = new SubclassB();\n+        scb.setId(2);\n+        scb.setName(\"SubclassBBaseClassName\");\n+        scb.setClassBName(\"SubclassBName\");\n+\n+        BaseClass b = new BaseClass();\n+        b.setName(\"BaseClassName\");\n+        b.setId(3);\n+\n+        em.getTransaction().begin();\n+        em.persist(sca);\n+        em.persist(sca2);\n+        em.persist(scb);\n+        em.persist(b);\n+        em.getTransaction().commit();\n+\n+        em.clear();\n+        \n+        verifyDtypeColumnEntriesAndMapping(em, \"BASECLASS\", 4, BaseClass.class);\n+                \n+        verifyInheritanceQueryResult(em, \"SubclassA\", \n+            classArray(SubclassA.class), 0, 1);\n+\n+        verifyInheritanceQueryResult(em, \"SubclassB\", \n+            classArray(SubclassB.class), 2);\n+\n+        verifyInheritanceQueryResult(em, \"BaseClass\", \n+            classArray(BaseClass.class), 0, 1, 2, 3);\n+        \n+        em.close();\n+    }\n+\n+    /**\n+     * This variation ensures that a mapped superclass does not cause the\n+     * production of a discriminator column.\n+     */\n+    public void testMappedSuperclass() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        // Add two entities, each extending the same mapped interface\n+        em.getTransaction().begin();\n+        SubclassC sc = new SubclassC();\n+        sc.setId(0);\n+        sc.setName(\"SubclassCMappedSuperName\");\n+        sc.setClassCName(\"SubclassCName\");\n+\n+        SubclassD sd = new SubclassD();\n+        sd.setId(1);\n+        sd.setName(\"SubclassDMappedSuperName\");\n+        sd.setClassDName(\"SubclassDName\");\n+        \n+        em.persist(sc);\n+        em.persist(sd);\n+        em.getTransaction().commit();\n+        \n+        em.clear();\n+                \n+        // The subclasses should not contain a discriminator column\n+        verifyNoDypeColumn(em, \"SubclassC\");\n+        verifyNoDypeColumn(em, \"SubclassD\");\n+\n+        // Query the subclass entities.  Make sure the counts are correct and\n+        // the result is castable to the mapped sc.\n+        verifyInheritanceQueryResult(em, \"SubclassC\", \n+                classArray(SubclassC.class, MappedSuper.class), 0);\n+\n+        verifyInheritanceQueryResult(em, \"SubclassD\", \n+                classArray(SubclassD.class, MappedSuper.class), 1);\n+                \n+        em.close();\n+    }\n+\n+    /**\n+     * This variation ensures that a 3-level inheritance hierarchy uses \n+     * a discriminator column at the root class level.\n+     */\n+    public void testTwoLevelInheritance() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        // Add two entities, each extending the same mapped interface\n+        em.getTransaction().begin();\n+        SubclassE sc = new SubclassE();\n+        sc.setId(0);\n+        sc.setName(\"SubclassEBaseClassName\");\n+        sc.setMidClassName(\"SubclassEMidClassName\");\n+        sc.setClassEName(\"SubclassCName\");\n+\n+        MidClass mc = new MidClass();\n+        mc.setId(1);\n+        mc.setName(\"MidClassBaseClassName\");\n+        mc.setMidClassName(\"MidClassName\");\n+\n+        BaseClass2 b2 = new BaseClass2();\n+        b2.setName(\"BaseClass2Name\");\n+        b2.setId(2);\n+        \n+        em.persist(sc);\n+        em.persist(mc);\n+        em.persist(b2);\n+        em.getTransaction().commit();\n+        \n+        em.clear();\n+\n+        // Verify that baseclass2 contains a discriminator column\n+        verifyDtypeColumnEntriesAndMapping(em, \"BASECLASS2\", 3, \n+                BaseClass2.class);\n+        \n+        // Verify that the subclass tables do not contain a discriminator column\n+        verifyNoDypeColumn(em, \"MidClass\");\n+        verifyNoDypeColumn(em, \"SubclassE\");\n+\n+        // Query the subclass tables.  Make sure the counts are correct and\n+        // the result is castable to the mapped sc.\n+        verifyInheritanceQueryResult(em, \"SubclassE\", \n+                classArray(SubclassE.class, MidClass.class, BaseClass2.class),\n+                0);\n+\n+        verifyInheritanceQueryResult(em, \"MidClass\", \n+                classArray(MidClass.class), 0, 1);\n+\n+        verifyInheritanceQueryResult(em, \"BaseClass2\", \n+                classArray(BaseClass2.class), 0, 1, 2);\n+\n+        em.close();\n+    }\n+\n+    /**\n+     * This variation verifies that an entity with a managed interface\n+     * does not use a discriminator column.\n+     */\n+    public void testManagedInterface() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+\n+        // Add some entities\n+        em.getTransaction().begin();\n+        ManagedIface mif = em.createInstance(ManagedIface.class);\n+        mif.setIntFieldSup(10);\n+                \n+        ImplClassA ica = new ImplClassA();\n+        ica.setImplClassAName(\"ImplClassAName\");\n+        ica.setIntFieldSup(11);\n+        \n+        em.persist(mif);\n+        em.persist(ica);        \n+        em.getTransaction().commit();\n+\n+        em.clear();\n+\n+        // Verify that the iface table does not contain a discriminator column\n+        verifyNoDypeColumn(em, \"ManagedIface\");\n+\n+        // Verify that the impl table does not contain a discriminator column\n+        verifyNoDypeColumn(em, \"ImplClassA\");\n+        \n+        // Query the subclass tables.  Make sure the counts are correct and\n+        // the result is castable to the entity and interface types.\n+        verifyInheritanceQueryResult(em, \"ImplClassA\", \n+                classArray(ImplClassA.class, ManagedIface.class), ica.getId());\n+\n+        // Query the interface2 table.  Make sure the count is correct and\n+        // the result is castable to the interface type.\n+        verifyInheritanceQueryResult(em, \"ManagedIface\", \n+                classArray(ManagedIface.class), mif.getId(),\n+                ica.getId());\n+        \n+        em.close();\n+    }\n+\n+    /**\n+     * This variation verifies that an entity with managed interface\n+     * and a superclass DOES use a discriminator column.\n+     */\n+    public void testManagedInterfaceAndBase() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+\n+        // Add some entities\n+        em.getTransaction().begin();\n+        ManagedIface2 mif2 = em.createInstance(ManagedIface2.class);\n+        mif2.setIntFieldSup(12);\n+                \n+        SubclassF scf = new SubclassF();\n+        scf.setClassFName(\"SubclassFName\");\n+        scf.setIntFieldSup(13);\n+\n+        BaseClass3 bc3 = new BaseClass3();\n+        bc3.setName(\"BaseClass3\");\n+\n+        em.persist(mif2);\n+        em.persist(scf);  \n+        em.persist(bc3);\n+        em.getTransaction().commit();\n+\n+        em.clear();\n+\n+        // Verify that the iface table does not contain a discriminator column\n+        verifyNoDypeColumn(em, \"ManagedIface2\");\n+\n+        // Verify that the subclass table does not contain a discriminator column\n+        verifyNoDypeColumn(em, \"SubclassF\");\n+\n+        // Verify that the base class does contain a discriminator column\n+        verifyDtypeColumnEntriesAndMapping(em, \"BASECLASS3\", 2, \n+            BaseClass3.class);\n+\n+        // Query the subclass table.  Make sure the counts are correct and\n+        // the result is castable to the entity and interface types.\n+        verifyInheritanceQueryResult(em, \"SubclassF\", \n+            classArray(SubclassF.class, ManagedIface2.class, BaseClass3.class),\n+            scf.getId());\n+        \n+        // Query the base class table.  Make sure the counts are correct and\n+        // the result is castable to the entity and interface types.\n+        verifyInheritanceQueryResult(em, \"BaseClass3\", \n+            classArray(BaseClass3.class),\n+            scf.getId(), bc3.getId());\n+\n+        // Query the interface2 table.  Make sure the count is correct and\n+        // the result is castable to the interface type.\n+        verifyInheritanceQueryResult(em, \"ManagedIface2\", \n+                classArray(ManagedIface2.class),\n+                scf.getId(), mif2.getId());        \n+        em.close();\n+    }\n+    \n+    /**\n+     * This variation tests a default simple class hierarchy with a inheritance\n+     * annotation defined on the subclass.  \n+     */\n+    public void testSubclassSpecifiedInheritance() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        // Create some entities\n+        SubclassG scg = new SubclassG();\n+        scg.setId(0);\n+        scg.setName(\"SubclassGBaseClass4Name\");\n+        scg.setClassGName(\"SubclassGName\");\n+\n+        BaseClass4 b = new BaseClass4();\n+        b.setName(\"BaseClass4Name\");\n+        b.setId(1);\n+\n+        em.getTransaction().begin();\n+        em.persist(scg);\n+        em.persist(b);\n+        em.getTransaction().commit();\n+\n+        em.clear();\n+        \n+        verifyDtypeColumnEntriesAndMapping(em, \"BASECLASS4\", 2, \n+            BaseClass4.class);\n+\n+        // Verify that the subclass table does not contain a discriminator column\n+        verifyNoDypeColumn(em, \"SubclassG\");\n+        \n+        // Run queries for each type. They should return only those values\n+        // which match their respective types.  This will not work for single\n+        // table inheritance unless a discriminator column is defined.\n+        verifyInheritanceQueryResult(em, \"SubclassG\", \n+            classArray(SubclassG.class, BaseClass4.class), 0);\n+\n+        verifyInheritanceQueryResult(em, \"BaseClass4\", \n+                classArray(BaseClass4.class), 0, 1);\n+        \n+        em.close();\n+    }    \n+    \n+    /**\n+     * This variation tests a default inheritance hierarchy with circular\n+     * relationships:\n+     *    BaseClass5 has rel to SubclassH\n+     *    MidClass2 extends BaseClass5 inherits rel to SubclassH\n+     *    SubClassH extends MidClass2 has rel to BaseClass5\n+     */    \n+    public void testCircularInheritedRelationships() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        // Create and persist some related & inherited entities\n+        SubclassH sch = new SubclassH();\n+        sch.setId(1);\n+        sch.setClassHName(\"SubclassHName\");\n+        sch.setName(\"SubclassHBaseClass5Name\");\n+        sch.setMidClass2Name(\"SubclassHMidClass2Name\");\n+    \n+        BaseClass5 bc5 = new BaseClass5();\n+        bc5.setId(2);\n+        bc5.setName(\"BaseClass5Name\");\n+        bc5.setSubclassh(sch);\n+        \n+        sch.setBaseclass5(bc5);\n+        \n+        MidClass2 mc2 = new MidClass2();\n+        mc2.setId(3);\n+        mc2.setMidClass2Name(\"MidClass2Name\");\n+        mc2.setName(\"MidClass2BaseClass5Name\");\n+        mc2.setSubclassh(sch);\n+        \n+        em.getTransaction().begin();\n+        em.persist(sch);\n+        em.persist(bc5);\n+        em.persist(mc2);\n+        em.getTransaction().commit();\n+        \n+        em.clear();\n+\n+        verifyDtypeColumnEntriesAndMapping(em, \"BASECLASS5\", 3, \n+                BaseClass5.class);\n+\n+        // Verify that the midclass table does not contain a discriminator column\n+        verifyNoDypeColumn(em, \"MidClass2\");\n+\n+        // Verify that the subclass table does not contain a discriminator column\n+        verifyNoDypeColumn(em, \"SubclassH\");\n+        \n+        // Run queries for each type. They should return only those values\n+        // which match their respective types.  This will not work for single\n+        // table inheritance unless a discriminator column is defined.\n+        verifyInheritanceQueryResult(em, \"SubclassH\", \n+            classArray(SubclassH.class, MidClass2.class, BaseClass5.class),\n+            1);\n+\n+        verifyInheritanceQueryResult(em, \"MidClass2\", \n+                classArray(MidClass2.class, BaseClass5.class),\n+                1, 3);\n+\n+        verifyInheritanceQueryResult(em, \"BaseClass5\", \n+                classArray(BaseClass5.class),\n+                1, 2, 3);\n+        \n+        em.clear();\n+        \n+        // Validate entity relationships\n+        sch = em.find(SubclassH.class, 1);\n+        assertEquals(sch.getName(),\"SubclassHBaseClass5Name\");\n+        assertEquals(sch.getMidClass2Name(), \"SubclassHMidClass2Name\");\n+        // SubclassH has relationship to BaseClass5\n+        assertEquals(sch.getBaseclass5().getId(), 2);\n+\n+        bc5 = em.find(BaseClass5.class, 3);\n+        assertEquals(bc5.getName(),\"MidClass2BaseClass5Name\");\n+        // BaseClass5 has relationship to SubclassH through MidClass2\n+        assertEquals(bc5.getSubclassh().getId(), 1);        \n+        \n+        bc5 = em.find(BaseClass5.class, 2);\n+        assertEquals(bc5.getName(),\"BaseClass5Name\");\n+        // BaseClass5 has relationship to SubclassH\n+        assertEquals(bc5.getSubclassh().getId(), 1);        \n+\n+        mc2 = em.find(MidClass2.class, 3);\n+        assertEquals(mc2.getName(),\"MidClass2BaseClass5Name\");\n+        assertEquals(mc2.getMidClass2Name(), \"MidClass2Name\");\n+        // MidClass2 has relationship to SubclassH\n+        assertEquals(bc5.getSubclassh().getId(), 1);        \n+\n+        em.close();\n+    }\n+    \n+    /**\n+     * This variation verifies default inheritance with an abstract\n+     * entity.\n+     */\n+    public void testAbstractEntityInheritance() {\n+        EntityManager em = emf.createEntityManager();\n+       \n+        SubclassI sci = new SubclassI();\n+        sci.setId(1);\n+        sci.setClassIName(\"SubclassIName\");\n+        sci.setName(\"SubclassIBaseClassName\");\n+        \n+        SubclassJ scj = new SubclassJ();\n+        scj.setId(2);\n+        scj.setClassJName(\"SubclassJName\");\n+        scj.setName(\"SubclassJBaseClassName\");\n+        \n+        em.getTransaction().begin();\n+        em.persist(sci);\n+        em.persist(scj);    \n+        em.getTransaction().commit();\n+        \n+        em.clear();\n+\n+        verifyDtypeColumnEntriesAndMapping(em, \"ABSTRACTCLASS\", 2, \n+                AbstractClass.class);\n+\n+        // Verify that the midclass table does not contain a discriminator column\n+        verifyNoDypeColumn(em, \"SubclassI\");\n+\n+        // Verify that the subclass table does not contain a discriminator column\n+        verifyNoDypeColumn(em, \"SubclassJ\");        \n+        \n+        // Run queries for each type. They should return only those values\n+        // which match their respective types.  This will not work for single\n+        // table inheritance unless a discriminator column is defined.\n+        verifyInheritanceQueryResult(em, \"AbstractClass\", \n+            classArray(AbstractClass.class), 1, 2);\n+\n+        verifyInheritanceQueryResult(em, \"SubclassI\", \n+                classArray(AbstractClass.class, SubclassI.class), 1);\n+\n+        verifyInheritanceQueryResult(em, \"SubclassJ\", \n+                classArray(AbstractClass.class, SubclassJ.class), 2);        \n+        \n+        em.close();\n+    }\n+    \n+    /**\n+     * This variation verifies that default inheritance is used when\n+     * there is a non-entity superclass in the mix:\n+     *   non-entity MidClass3 extends BaseClass6\n+     *   SubClassJ extends MidClass3\n+     */\n+    public void testMidNonEntityInheritance() {\n+        EntityManager em = emf.createEntityManager();\n+        \n+        SubclassK sck = new SubclassK();\n+        sck.setId(1);\n+        sck.setClassKName(\"SubclassKName\");\n+        sck.setMidClass3Name(\"SubclassKMidClass3Name\");\n+        sck.setName(\"SubclassKBaseClass6Name\");\n+                \n+        BaseClass6 bk6 = new BaseClass6();\n+        bk6.setId(3);\n+        bk6.setName(\"BaseClass6Name\");\n+        \n+        em.getTransaction().begin();\n+        em.persist(sck);\n+        em.persist(bk6);\n+        em.getTransaction().commit();\n+        \n+        em.clear();\n+        \n+        verifyDtypeColumnEntriesAndMapping(em, \"BASECLASS6\", 2, \n+                BaseClass6.class);\n+\n+        // Verify that the subclass table does not contain a discriminator column\n+        verifyNoDypeColumn(em, \"SubclassK\");           \n+\n+        // Run queries for each type. They should return only those values\n+        // which match their respective types.  This will not work for single\n+        // table inheritance unless a discriminator column is defined.\n+        verifyInheritanceQueryResult(em, \"BaseClass6\", \n+            classArray(BaseClass6.class), 1, 3);\n+\n+        verifyInheritanceQueryResult(em, \"SubclassK\", \n+                classArray(BaseClass6.class, MidClass3.class, SubclassK.class),\n+                1);        \n+\n+        em.close();        \n+    }\n+\n+    /**\n+     * Verifies that a table contains the specified number of entries\n+     * in its DTYPE (default discriminator) column.\n+     * @param em  Entity nanager\n+     * @param table  Name of the table to query\n+     * @param entries  Expected column entry count\n+     * @param baseClass Class mapping to verify\n+     */\n+    private void verifyDtypeColumnEntriesAndMapping(EntityManager em, \n+        String table, int entries, Class baseClass) {\n+        try {\n+            Query qry = em.createNativeQuery(\"SELECT DTYPE FROM \" + table);\n+            List vals = qry.getResultList();\n+            assertTrue(\"Query should have returned \" + entries + \" values\", \n+                vals.size() == entries);\n+        }\n+        catch (Exception e) {\n+            fail(\"Exception querying DTYPE column: \" + e.getMessage());\n+        }        \n+        \n+        // Check the discriminator column of the class mapping.  \n+        ClassMapping cm = getMapping(baseClass);\n+        Discriminator d = cm.getDiscriminator();\n+        Column[] cols = d.getColumns();\n+        assertTrue(\"Discriminator should use DTYPE column\", \n+            (cols != null && cols.length == 1 && \n+            cols[0].getName().equals(\"DTYPE\"))); \n+    }\n+\n+    /**\n+     * Verifies that a table does not contain a DTYPE column.\n+     * @param em  Entity manager\n+     * @param table Name of the table to query\n+     */\n+    private void verifyNoDypeColumn(EntityManager em, String table) {\n+        try {\n+            Query qry = em.createNativeQuery(\"SELECT DTYPE FROM \" + table);\n+            qry.getResultList();\n+            fail(\"Expected exception.  DTYPE column should not exist on \" + \n+                table);\n+        }\n+        catch (Exception e) {\n+            // Expected exception\n+        }        \n+    }    \n+\n+    /**\n+     * Verifies the resulting entity count and expected entity ids from a \n+     * simple entity query.  This method requires a \"getId\" method on the\n+     * entity type in order to work properly.\n+     * \n+     * @param em entity manager\n+     * @param entity entity name\n+     * @param entityType entity class\n+     * @param expectedValues variable list of expected integral id values.\n+     */\n+    private void verifyInheritanceQueryResult(EntityManager em, String entity,\n+        Class[] types, int... expectedValues) {\n+        Query qry = em.createQuery(\"SELECT e FROM \" + entity + \" e\");\n+        List col = qry.getResultList();\n+        assertTrue(\"Query should return \" + expectedValues.length + \" entities\",\n+            col.size() == expectedValues.length);\n+        int count = 0;\n+        for (int i = 0; i < col.size(); i++) {\n+            Object ent = col.get(i);\n+            // If a list of supers or interfaces is provided, make sure\n+            // the returned type is an instance of those types\n+            if (types != null) {\n+                for (int j = 0; j < types.length; j++ )\n+                    assertTrue(types[j].isInstance(ent));\n+            }\n+            int id = -1;\n+            try {\n+                Method mth = ent.getClass().getMethod(\"getId\", (Class[])null);\n+                id = (Integer)mth.invoke(ent, (Object[])null);\n+            } catch (Exception e) {\n+                fail(\"Caught unexepcted exception getting entity id: \" \n+                    + e.getMessage());\n+            }\n+            for (int j = 0; j < expectedValues.length; j++)\n+                if (expectedValues[j] == id)                   \n+                    count++;\n+        }\n+        assertTrue(\"Returned expected entities\", \n+                count == expectedValues.length);\n+    }    \n+}"},{"sha":"3679142e502bda0492a304613bc26dc6b27935e4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/AbstractClass.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/AbstractClass.java","raw_url":"https://github.com/apache/openjpa/raw/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/AbstractClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/AbstractClass.java?ref=68f051fccf0e33e1a822f7741efec3f0602ddf4f","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+@Entity\n+public abstract class AbstractClass {\n+\n+    @Id\n+    private int id;\n+        \n+    @Basic\n+    private String name;\n+    \n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    abstract public void setVersion(int version);\n+\n+    abstract public int getVersion();\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public String toString() {\n+        return \"Id=\" + id + \n+               \";Name=\" + name;\n+    }\n+}"},{"sha":"e89862fe749acd5c2fefacf13ecee986ba5fe5b3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass.java","raw_url":"https://github.com/apache/openjpa/raw/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass.java?ref=68f051fccf0e33e1a822f7741efec3f0602ddf4f","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class BaseClass {\n+\n+    @Id\n+    private int id;\n+    \n+    @Version\n+    private int version;\n+    \n+    @Basic\n+    private String name;\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public String toString() {\n+        return \"Id=\" + id + \n+               \";Version=\" + version +\n+               \";Name=\" + name;\n+    }\n+\n+}"},{"sha":"459167fbf30f502eedbcdd9f1f4f002d7a44abd8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass2.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass2.java","raw_url":"https://github.com/apache/openjpa/raw/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass2.java?ref=68f051fccf0e33e1a822f7741efec3f0602ddf4f","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class BaseClass2 {\n+\n+    @Id\n+    private int id;\n+    \n+    @Version\n+    private int version;\n+    \n+    @Basic\n+    private String name;\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public String toString() {\n+        return \"Id=\" + id + \n+               \";Version=\" + version +\n+               \";Name=\" + name;\n+    }\n+\n+}"},{"sha":"4e9c81975d607d324032c24127be8c9d8c69af34","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass3.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass3.java","raw_url":"https://github.com/apache/openjpa/raw/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass3.java?ref=68f051fccf0e33e1a822f7741efec3f0602ddf4f","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class BaseClass3 {\n+\n+    @Id @GeneratedValue\n+    private int id;\n+    \n+    @Version\n+    private int version;\n+    \n+    @Basic\n+    private String name;\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public String toString() {\n+        return \"Id=\" + id + \n+               \";Version=\" + version +\n+               \";Name=\" + name;\n+    }\n+\n+}"},{"sha":"f070cc635ad658c28105da656ec758dd692a2ac0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass4.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass4.java","raw_url":"https://github.com/apache/openjpa/raw/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass4.java?ref=68f051fccf0e33e1a822f7741efec3f0602ddf4f","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class BaseClass4 {\n+\n+    @Id\n+    private int id;\n+    \n+    @Version\n+    private int version;\n+    \n+    @Basic\n+    private String name;\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public String toString() {\n+        return \"Id=\" + id + \n+               \";Version=\" + version +\n+               \";Name=\" + name;\n+    }\n+\n+}"},{"sha":"651ac4ab20cb279c3566d6109a6d127913ee1634","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass5.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass5.java","raw_url":"https://github.com/apache/openjpa/raw/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass5.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass5.java?ref=68f051fccf0e33e1a822f7741efec3f0602ddf4f","patch":"@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class BaseClass5 {\n+\n+    @Id\n+    private int id;\n+    \n+    @Version\n+    private int version;\n+    \n+    @Basic\n+    private String name;\n+    \n+    @OneToOne\n+    private SubclassH subclassh;\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public String toString() {\n+        return \"Id=\" + id + \n+               \";Version=\" + version +\n+               \";Name=\" + name;\n+    }\n+\n+    public void setSubclassh(SubclassH subclassh) {\n+        this.subclassh = subclassh;\n+    }\n+\n+    public SubclassH getSubclassh() {\n+        return subclassh;\n+    }\n+\n+}"},{"sha":"1c3267b79399012f3ea0a05282debfdcaaa428d9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass6.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass6.java","raw_url":"https://github.com/apache/openjpa/raw/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass6.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/BaseClass6.java?ref=68f051fccf0e33e1a822f7741efec3f0602ddf4f","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class BaseClass6 {\n+\n+    @Id\n+    private int id;\n+        \n+    @Basic\n+    private String name;\n+    \n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public String toString() {\n+        return \"Id=\" + id + \n+               \";Name=\" + name;\n+    }\n+}"},{"sha":"2a9928dd02e0777da24769392829ee28b29cf70d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ImplClassA.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ImplClassA.java","raw_url":"https://github.com/apache/openjpa/raw/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ImplClassA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ImplClassA.java?ref=68f051fccf0e33e1a822f7741efec3f0602ddf4f","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class ImplClassA implements ManagedIface {\n+\n+    @Basic\n+    private String implClassAName;\n+    \n+    @Id \n+    @GeneratedValue\n+    private int id;\n+    \n+    @Basic\n+    private int intFieldSup;\n+    \n+    public void setImplClassAName(String implClassAName) {\n+        this.implClassAName = implClassAName;\n+    }\n+\n+    public String getImplClassAName() {\n+        return implClassAName;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";implClassAName=\" + implClassAName + \n+            \";intFieldSup=\" + intFieldSup;\n+    }\n+\n+    public int getId() {\n+        return this.id;\n+    }\n+\n+    public int getIntFieldSup() {\n+        return intFieldSup;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public void setIntFieldSup(int i) {\n+        this.intFieldSup = i;\n+    }\n+}"},{"sha":"ca73892d8dd77d943ac65491c238b7e4bc899374","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ManagedIface.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ManagedIface.java","raw_url":"https://github.com/apache/openjpa/raw/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ManagedIface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ManagedIface.java?ref=68f051fccf0e33e1a822f7741efec3f0602ddf4f","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+import org.apache.openjpa.persistence.ManagedInterface;\n+\n+@ManagedInterface\n+@Entity\n+public interface ManagedIface {\n+    @Id @GeneratedValue\n+    public int getId();\n+    public void setId(int id);\n+\n+    public int getIntFieldSup();\n+    public void setIntFieldSup(int i);\n+}"},{"sha":"029fbbbd5f70a66081cdd1dd045c45b2ef883207","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ManagedIface2.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ManagedIface2.java","raw_url":"https://github.com/apache/openjpa/raw/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ManagedIface2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ManagedIface2.java?ref=68f051fccf0e33e1a822f7741efec3f0602ddf4f","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+import org.apache.openjpa.persistence.ManagedInterface;\n+\n+@ManagedInterface\n+@Entity\n+public interface ManagedIface2 {\n+    @Id @GeneratedValue\n+    public int getId();\n+    public void setId(int id);\n+\n+    public int getIntFieldSup();\n+    public void setIntFieldSup(int i);\n+}"},{"sha":"3cd30dfdf2626ae3c4d840e653a512d34b0d9ed6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MappedSuper.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MappedSuper.java","raw_url":"https://github.com/apache/openjpa/raw/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MappedSuper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MappedSuper.java?ref=68f051fccf0e33e1a822f7741efec3f0602ddf4f","patch":"@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Id;\n+import javax.persistence.MappedSuperclass;\n+\n+@MappedSuperclass\n+public class MappedSuper {\n+\n+    @Id\n+    private int id;\n+    \n+    @Basic\n+    private String name;\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public String toString() {\n+        return \"Id=\" + id + \n+               \";Name=\" + name;\n+    }\n+\n+}"},{"sha":"4ef32d951b5f096030ef1ca78d515a5a0b7b1b1f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass.java","raw_url":"https://github.com/apache/openjpa/raw/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass.java?ref=68f051fccf0e33e1a822f7741efec3f0602ddf4f","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class MidClass extends BaseClass2 {\n+\n+    @Basic\n+    private String midClassName;\n+\n+    public void setMidClassName(String midClassName) {\n+        this.midClassName = midClassName;\n+    }\n+\n+    public String getMidClassName() {\n+        return midClassName;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";midClassName=\" + midClassName;\n+    }\n+}"},{"sha":"8edfcd685e341c0748b1a52a401678726550404b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass2.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass2.java","raw_url":"https://github.com/apache/openjpa/raw/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass2.java?ref=68f051fccf0e33e1a822f7741efec3f0602ddf4f","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class MidClass2 extends BaseClass5 {\n+\n+    @Basic\n+    private String midClass2Name;\n+\n+    public void setMidClass2Name(String midClass2Name) {\n+        this.midClass2Name = midClass2Name;\n+    }\n+\n+    public String getMidClass2Name() {\n+        return midClass2Name;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";midClass2Name=\" + midClass2Name;\n+    }\n+}"},{"sha":"7153a301999255252466d208bcfdd285905619f8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass3.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass3.java","raw_url":"https://github.com/apache/openjpa/raw/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/MidClass3.java?ref=68f051fccf0e33e1a822f7741efec3f0602ddf4f","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+public class MidClass3 extends BaseClass6 {\n+\n+    private String midClass3Name;\n+\n+    public void setMidClass3Name(String midClass3Name) {\n+        this.midClass3Name = midClass3Name;\n+    }\n+\n+    public String getMidClass2Name() {\n+        return midClass3Name;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";midClass3Name=\" + midClass3Name;\n+    }\n+}"},{"sha":"2ea9f30c17b775d294b84e0291cb230bb60be5d4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassA.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassA.java","raw_url":"https://github.com/apache/openjpa/raw/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassA.java?ref=68f051fccf0e33e1a822f7741efec3f0602ddf4f","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class SubclassA extends BaseClass {\n+\n+    @Basic\n+    private String classAName;\n+\n+    public void setClassAName(String classAName) {\n+        this.classAName = classAName;\n+    }\n+\n+    public String getClassAName() {\n+        return classAName;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";classAName=\" + classAName;\n+    }\n+}"},{"sha":"831a36097cc023bd8c8eb4a11036361820138311","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassB.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassB.java","raw_url":"https://github.com/apache/openjpa/raw/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassB.java?ref=68f051fccf0e33e1a822f7741efec3f0602ddf4f","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class SubclassB extends BaseClass {\n+    \n+    @Basic\n+    private String classBName;\n+\n+    public void setClassBName(String classBName) {\n+        this.classBName = classBName;\n+    }\n+\n+    public String getClassBName() {\n+        return classBName;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";classBName=\" + classBName;\n+    }\n+\n+}"},{"sha":"ce7425489113b529eee892b5a96c56df8dfea1d7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassC.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassC.java","raw_url":"https://github.com/apache/openjpa/raw/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassC.java?ref=68f051fccf0e33e1a822f7741efec3f0602ddf4f","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class SubclassC extends MappedSuper {\n+\n+    @Basic\n+    private String classCName;\n+\n+    public void setClassCName(String classCName) {\n+        this.classCName = classCName;\n+    }\n+\n+    public String getClassAName() {\n+        return classCName;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";classCName=\" + classCName;\n+    }\n+    \n+}"},{"sha":"7ac96510a8d435b87925249508ac71ad175f8217","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassD.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassD.java","raw_url":"https://github.com/apache/openjpa/raw/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassD.java?ref=68f051fccf0e33e1a822f7741efec3f0602ddf4f","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class SubclassD extends MappedSuper {\n+\n+    @Basic\n+    private String classDName;\n+\n+    public void setClassDName(String classDName) {\n+        this.classDName = classDName;\n+    }\n+\n+    public String getClassDName() {\n+        return classDName;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";classDName=\" + classDName;\n+    }\n+    \n+}"},{"sha":"3dcdfbd699a1959458aa7510c6ce57f5d89c7b14","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassE.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassE.java","raw_url":"https://github.com/apache/openjpa/raw/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassE.java?ref=68f051fccf0e33e1a822f7741efec3f0602ddf4f","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class SubclassE extends MidClass {\n+\n+    @Basic\n+    private String classEName;\n+\n+    public void setClassEName(String classEName) {\n+        this.classEName = classEName;\n+    }\n+\n+    public String getClassEName() {\n+        return classEName;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";classEName=\" + classEName;\n+    }\n+}"},{"sha":"21515281a6d6f2e260e48fa4e472b007a87632d7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassF.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassF.java","raw_url":"https://github.com/apache/openjpa/raw/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassF.java?ref=68f051fccf0e33e1a822f7741efec3f0602ddf4f","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class SubclassF extends BaseClass3 implements ManagedIface2  {\n+\n+    @Basic\n+    private String classFName;\n+        \n+    @Basic\n+    private int intFieldSup;\n+    \n+    public void setClassFName(String classFName) {\n+        this.classFName = classFName;\n+    }\n+\n+    public String getClassFName() {\n+        return classFName;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";classFName=\" + classFName + \n+            \";intFieldSup=\" + intFieldSup;\n+    }\n+\n+    public int getIntFieldSup() {\n+        return intFieldSup;\n+    }\n+\n+    public void setIntFieldSup(int i) {\n+        this.intFieldSup = i;\n+    }\n+}"},{"sha":"936dc9993556dd42d2319fb8fa01c5057bf8dc2f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassG.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassG.java","raw_url":"https://github.com/apache/openjpa/raw/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassG.java?ref=68f051fccf0e33e1a822f7741efec3f0602ddf4f","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.Inheritance;\n+\n+@Entity\n+@Inheritance\n+public class SubclassG extends BaseClass4 {\n+\n+    @Basic\n+    private String classGName;\n+        \n+    @Basic\n+    private int intFieldSup;\n+    \n+    public void setClassGName(String classGName) {\n+        this.classGName = classGName;\n+    }\n+\n+    public String getClassGName() {\n+        return classGName;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";classGName=\" + classGName + \n+            \";intFieldSup=\" + intFieldSup;\n+    }\n+\n+    public int getIntFieldSup() {\n+        return intFieldSup;\n+    }\n+\n+    public void setIntFieldSup(int i) {\n+        this.intFieldSup = i;\n+    }\n+\n+}"},{"sha":"a72cc144759a468f5a5bb7b84e7e133448d00dfd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassH.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassH.java","raw_url":"https://github.com/apache/openjpa/raw/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassH.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassH.java?ref=68f051fccf0e33e1a822f7741efec3f0602ddf4f","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.OneToOne;\n+\n+@Entity\n+public class SubclassH extends MidClass2 {\n+\n+    @Basic\n+    private String classHName;\n+        \n+    @Basic\n+    private int intFieldSup;\n+    \n+    @OneToOne\n+    private BaseClass5 baseclass5;\n+    \n+    public void setClassHName(String classHName) {\n+        this.classHName = classHName;\n+    }\n+\n+    public String getClassHName() {\n+        return classHName;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";classHName=\" + classHName + \n+            \";intFieldSup=\" + intFieldSup;\n+    }\n+\n+    public int getIntFieldSup() {\n+        return intFieldSup;\n+    }\n+\n+    public void setIntFieldSup(int i) {\n+        this.intFieldSup = i;\n+    }\n+\n+    public void setBaseclass5(BaseClass5 baseclass5) {\n+        this.baseclass5 = baseclass5;\n+    }\n+\n+    public BaseClass5 getBaseclass5() {\n+        return baseclass5;\n+    }\n+\n+}"},{"sha":"e46280a5907b19266cba513393f4b0aa85bc0865","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassI.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassI.java","raw_url":"https://github.com/apache/openjpa/raw/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassI.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassI.java?ref=68f051fccf0e33e1a822f7741efec3f0602ddf4f","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class SubclassI extends AbstractClass {\n+\n+    @Basic\n+    private String classIName;\n+   \n+    @Version\n+    private int version;\n+            \n+    public void setClassIName(String classIName) {\n+        this.classIName = classIName;\n+    }\n+\n+    public String getClassIName() {\n+        return classIName;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";classIName=\" + classIName + \n+        \";Version=\" + version;\n+    }\n+    \n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+}"},{"sha":"bbc398a141946c41f1c125b4b692123f9dbd4c70","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassJ.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassJ.java","raw_url":"https://github.com/apache/openjpa/raw/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassJ.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassJ.java?ref=68f051fccf0e33e1a822f7741efec3f0602ddf4f","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class SubclassJ extends AbstractClass {\n+\n+    @Basic\n+    private String classJName;\n+   \n+    @Version\n+    private int version;\n+            \n+    public void setClassJName(String classJName) {\n+        this.classJName = classJName;\n+    }\n+\n+    public String getClassJName() {\n+        return classJName;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";classJName=\" + classJName + \n+        \";Version=\" + version;\n+    }\n+    \n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+}"},{"sha":"ffe5986fcfbad8021d22f4f0c6ce1586b511448e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassK.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassK.java","raw_url":"https://github.com/apache/openjpa/raw/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SubclassK.java?ref=68f051fccf0e33e1a822f7741efec3f0602ddf4f","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class SubclassK extends MidClass3 {\n+\n+    @Basic\n+    private String classKName;\n+               \n+    public void setClassKName(String classKName) {\n+        this.classKName = classKName;\n+    }\n+\n+    public String getClassKName() {\n+        return classKName;\n+    }\n+    \n+    public String toString() {\n+        return super.toString() + \";classKName=\" + classKName; \n+    }    \n+}"},{"sha":"2c52402a3b25489e99d72b78509f4504872af08d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","status":"modified","additions":46,"deletions":1,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/68f051fccf0e33e1a822f7741efec3f0602ddf4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java?ref=68f051fccf0e33e1a822f7741efec3f0602ddf4f","patch":"@@ -226,7 +226,8 @@ private void clear(EntityManagerFactory emf, boolean closeEMs,\n         em.getTransaction().begin();\n         for (ClassMetaData meta : types) {\n             if (!meta.isMapped() || meta.isEmbeddedOnly() \n-                || Modifier.isAbstract(meta.getDescribedType().getModifiers()))\n+                || Modifier.isAbstract(meta.getDescribedType().getModifiers())\n+                    && !isBaseManagedInterface(meta, types))\n                 continue;\n             em.createQuery(\"DELETE FROM \" + meta.getTypeAlias() + \" o\").\n                 executeUpdate();\n@@ -242,6 +243,50 @@ protected String entityName(EntityManagerFactory emf, Class c) {\n         ClassMetaData meta = JPAFacadeHelper.getMetaData(emf, c);\n         return (meta == null) ? null : meta.getTypeAlias();\n     }\n+    \n+    \n+    /**\n+     * Determines if the class assocated with the provided metadata is\n+     * a managed interface and does not extend another managed interface.\n+     * @param meta class metadata for the class to examine\n+     * @param types array of class meta data for persistent types\n+     * @return true if the cmd is for an interface and the interface does not\n+     * extend another managed interface\n+     */\n+    private boolean isBaseManagedInterface(ClassMetaData meta, \n+        ClassMetaData... types) {\n+        \n+        if (Modifier.isInterface(meta.getDescribedType().getModifiers()) &&\n+            !isExtendedManagedInterface(meta, types))\n+            return true;\n+        return false;\n+    }\n+\n+    /**\n+     * Determines if the class assocated with the provided metadata is\n+     * an interface and if it extends another managed interface. \n+     * @param meta class metadata for the class to examine\n+     * @param types array of class meta data for persistent types\n+     * @return true if the cmd is for an interface and the interface extends\n+     * another managed interface\n+     */\n+    private boolean isExtendedManagedInterface(ClassMetaData meta, \n+        ClassMetaData... types) {\n+        \n+        if (!Modifier.isInterface(meta.getDescribedType().getModifiers()))\n+            return false;\n+\n+        // Run through the interface this class extends.  If any of them\n+        // are managed/have class metadata, return true.\n+        Class[] ifaces = meta.getDescribedType().getInterfaces();\n+        for (int i = 0; ifaces != null && i < ifaces.length; i++) {\n+            for (ClassMetaData meta2 : types) {\n+                if (ifaces[i].equals(meta2.getDescribedType()))\n+                    return true;\n+            }            \n+        }\n+        return false;\n+    }\n \n     public static void assertNotEquals(Object o1, Object o2) {\n         if (o1 == o2)"}]}

