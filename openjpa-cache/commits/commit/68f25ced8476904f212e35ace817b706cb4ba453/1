{"sha":"68f25ced8476904f212e35ace817b706cb4ba453","node_id":"MDY6Q29tbWl0MjA2MzY0OjY4ZjI1Y2VkODQ3NjkwNGYyMTJlMzVhY2U4MTdiNzA2Y2I0YmE0NTM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-14T03:27:26Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-14T03:27:26Z"},"message":"OPENJPA-551 Support Range Query\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@627645 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a77ee90252904f7d7cb5fa029254fb3fd1dfb43e","url":"https://api.github.com/repos/apache/openjpa/git/trees/a77ee90252904f7d7cb5fa029254fb3fd1dfb43e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/68f25ced8476904f212e35ace817b706cb4ba453","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/68f25ced8476904f212e35ace817b706cb4ba453","html_url":"https://github.com/apache/openjpa/commit/68f25ced8476904f212e35ace817b706cb4ba453","comments_url":"https://api.github.com/repos/apache/openjpa/commits/68f25ced8476904f212e35ace817b706cb4ba453/comments","author":null,"committer":null,"parents":[{"sha":"763fd3e5a3fb2c4fb634b238610ab02000c5a822","url":"https://api.github.com/repos/apache/openjpa/commits/763fd3e5a3fb2c4fb634b238610ab02000c5a822","html_url":"https://github.com/apache/openjpa/commit/763fd3e5a3fb2c4fb634b238610ab02000c5a822"}],"stats":{"total":38,"additions":32,"deletions":6},"files":[{"sha":"d625427827c43a3f4f9cfa5b911d25f050da5919","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java","status":"modified","additions":13,"deletions":5,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/68f25ced8476904f212e35ace817b706cb4ba453/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/68f25ced8476904f212e35ace817b706cb4ba453/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java?ref=68f25ced8476904f212e35ace817b706cb4ba453","patch":"@@ -34,6 +34,7 @@\n import org.apache.openjpa.kernel.StoreQuery;\r\n import org.apache.openjpa.kernel.exps.ExpressionParser;\r\n import org.apache.openjpa.lib.rop.MergedResultObjectProvider;\r\n+import org.apache.openjpa.lib.rop.RangeResultObjectProvider;\r\n import org.apache.openjpa.lib.rop.ResultObjectProvider;\r\n import org.apache.openjpa.meta.ClassMetaData;\r\n import org.apache.openjpa.util.StoreException;\r\n@@ -135,16 +136,23 @@ public ResultObjectProvider executeQuery(StoreQuery q,\n         \tboolean[] ascending = getAscending(q);\r\n         \tboolean isAscending = ascending.length > 0;\r\n         \tboolean isUnique    = q.getContext().isUnique();\r\n+        \tboolean hasRange    = q.getContext().getEndRange() != Long.MAX_VALUE;\r\n+        \tResultObjectProvider result = null;\r\n         \tif (isUnique) {\r\n-        \t    return new UniqueResultObjectProvider(tmp, q, \r\n+        \t    result = new UniqueResultObjectProvider(tmp, q, \r\n         \t            getQueryExpressions());\r\n-        \t}\r\n-        \tif (isAscending) {\r\n-        \t    return new OrderingMergedResultObjectProvider(tmp, ascending, \r\n+        \t} else if (isAscending) {\r\n+        \t    result = new OrderingMergedResultObjectProvider(tmp, ascending, \r\n                   (Executor[])executors.toArray(new Executor[executors.size()]),\r\n                   q, params);\r\n+        \t} else {\r\n+        \t    result = new MergedResultObjectProvider(tmp);\r\n         \t}\r\n-        \treturn new MergedResultObjectProvider(tmp);\r\n+        \tif (hasRange)\r\n+        \t    result = new RangeResultObjectProvider(result, \r\n+        \t            q.getContext().getStartRange(), \r\n+        \t            q.getContext().getEndRange());\r\n+        \treturn result;\r\n         }\r\n         \r\n         public Number executeDelete(StoreQuery q, Object[] params) {\r"},{"sha":"36d24df8e880bf15b51e9bae3a02d2426b7eb858","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java","status":"modified","additions":19,"deletions":1,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/68f25ced8476904f212e35ace817b706cb4ba453/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java","raw_url":"https://github.com/apache/openjpa/raw/68f25ced8476904f212e35ace817b706cb4ba453/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java?ref=68f25ced8476904f212e35ace817b706cb4ba453","patch":"@@ -31,7 +31,7 @@ public void setUp() throws Exception {\n         EntityManager em = emf.createEntityManager();\r\n         em.getTransaction().begin();\r\n         long id = System.currentTimeMillis();\r\n-        for (int i=0;i<0;i++) {\r\n+        for (int i=0;i<10;i++) {\r\n             PObject pc = new PObject(id++);\r\n             pc.setValue(i);\r\n             em.persist(pc);\r\n@@ -65,6 +65,24 @@ public void testAggregateQuery() {\n         for (Object r:result)\r\n             System.err.println(r);\r\n     }\r\n+    \r\n+    public void testSetMaxResult() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        int limit = 3;\r\n+        em.getTransaction().begin();\r\n+        List result = em.createQuery(\"SELECT p.value,p FROM PObject p ORDER BY p.value ASC\")\r\n+            .setMaxResults(limit).getResultList();\r\n+        int i = 0;\r\n+        for (Object row:result) {\r\n+            Object[] line = (Object[])row;\r\n+            int value = ((Integer)line[0]).intValue();\r\n+            PObject pc = (PObject)line[1];\r\n+            System.err.println(++i + \".\" + SlicePersistence.getSlice(pc) + \":\" + pc.getId() + \",\" + pc.getValue());\r\n+        }\r\n+        em.getTransaction().rollback();\r\n+        assertEquals(limit, result.size());\r\n+    }\r\n+    \r\n     protected String getPersistenceUnitName() {\r\n         return \"ordering\";\r\n     }\r"}]}

