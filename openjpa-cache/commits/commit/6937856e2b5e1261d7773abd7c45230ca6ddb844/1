{"sha":"6937856e2b5e1261d7773abd7c45230ca6ddb844","node_id":"MDY6Q29tbWl0MjA2MzY0OjY5Mzc4NTZlMmI1ZTEyNjFkNzc3M2FiZDdjNDUyMzBjYTZkZGI4NDQ=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-10-11T00:16:53Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-10-11T00:16:53Z"},"message":"Optimize queries of the form \"select e from ... where e.rel.id = :x\" to not join\nacross \"rel\" for std fk->pk joins. \n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@462646 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dffb17bec753cbdba89dbc0dd17b8e205e9fd2da","url":"https://api.github.com/repos/apache/openjpa/git/trees/dffb17bec753cbdba89dbc0dd17b8e205e9fd2da"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6937856e2b5e1261d7773abd7c45230ca6ddb844","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6937856e2b5e1261d7773abd7c45230ca6ddb844","html_url":"https://github.com/apache/openjpa/commit/6937856e2b5e1261d7773abd7c45230ca6ddb844","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6937856e2b5e1261d7773abd7c45230ca6ddb844/comments","author":null,"committer":null,"parents":[{"sha":"f27898f28082a42624d7dd5c7768523ef6b16f61","url":"https://api.github.com/repos/apache/openjpa/commits/f27898f28082a42624d7dd5c7768523ef6b16f61","html_url":"https://github.com/apache/openjpa/commit/f27898f28082a42624d7dd5c7768523ef6b16f61"}],"stats":{"total":234,"additions":221,"deletions":13},"files":[{"sha":"420c0eccbf9f39a876bdda370104ab22e5657bcc","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","status":"modified","additions":60,"deletions":12,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/6937856e2b5e1261d7773abd7c45230ca6ddb844/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","raw_url":"https://github.com/apache/openjpa/raw/6937856e2b5e1261d7773abd7c45230ca6ddb844/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java?ref=6937856e2b5e1261d7773abd7c45230ca6ddb844","patch":"@@ -27,6 +27,7 @@\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.schema.Schemas;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.Result;\n@@ -352,6 +353,7 @@ public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n         Action action;\n         Variable var;\n         Iterator itr = (_actions == null) ? null : _actions.iterator();\n+        FieldMapping field;\n         while (itr != null && itr.hasNext()) {\n             action = (Action) itr.next();\n \n@@ -369,16 +371,26 @@ else if (action.op == Action.UNBOUND_VAR) {\n                     rel.getTable());\n             } else {\n                 // move past the previous field, if any\n-                if (pstate.field != null)\n+                field = (FieldMapping) action.data;\n+                if (pstate.field != null) {\n+                    // if this is the second-to-last field and the last is\n+                    // the related field this field joins to, no need to\n+                    // traverse: just use this field's fk columns\n+                    if (!itr.hasNext() && (flags & JOIN_REL) == 0\n+                        && isJoinedField(pstate.field, key, field)) {\n+                        pstate.cmpfield = field;\n+                        break;\n+                    }\n                     rel = traverseField(pstate, key, forceOuter, false);\n+                }\n \n                 // mark if the next traversal should go through\n                 // the key rather than value\n                 key = action.op == Action.GET_KEY;\n                 forceOuter |= action.op == Action.GET_OUTER;\n \n                 // get mapping for the current field\n-                pstate.field = (FieldMapping) action.data;\n+                pstate.field = field;\n                 owner = pstate.field.getDefiningMapping();\n                 if (pstate.field.getManagement() \n                     != FieldMapping.MANAGE_PERSISTENT)\n@@ -420,15 +432,50 @@ else if (action.op == Action.UNBOUND_VAR) {\n         return pstate;\n     }\n \n+    /**\n+     * Return whether the given source field joins to the given target field.\n+     */\n+    private static boolean isJoinedField(FieldMapping src, boolean key, \n+        FieldMapping target) {\n+        ValueMapping vm;\n+        switch (src.getTypeCode()) {\n+            case JavaTypes.ARRAY:\n+            case JavaTypes.COLLECTION:\n+                vm = src.getElementMapping();\n+                break;\n+            case JavaTypes.MAP:\n+                vm = (key) ? src.getKeyMapping() : src.getElementMapping();\n+                break;\n+            default:\n+                vm = src;\n+        }\n+        if (vm.getJoinDirection() != ValueMapping.JOIN_FORWARD)\n+            return false;\n+        ForeignKey fk = vm.getForeignKey();\n+        if (fk == null)\n+            return false; \n+        \n+        // foreign key must join to target columns\n+        Column[] rels = fk.getColumns();\n+        Column[] pks = target.getColumns(); \n+        if (rels.length != pks.length)\n+            return false;\n+        for (int i = 0; i < rels.length; i++)\n+            if (fk.getPrimaryKeyColumn(rels[i]) != pks[i])\n+                return false;\n+        return true;\n+    }\n+\n     /**\n      * Expression state.\n      */\n     private static class PathExpState\n         extends ExpState {\n \n-        private FieldMapping field = null;\n-        private Column[] cols = null;\n-        private boolean joinedRel = false;\n+        public FieldMapping field = null;\n+        public FieldMapping cmpfield = null;\n+        public Column[] cols = null;\n+        public boolean joinedRel = false;\n \n         public PathExpState(Joins joins) {\n             super(joins);\n@@ -483,15 +530,16 @@ private void joinRelation(PathExpState pstate, boolean key,\n     public Object toDataStoreValue(Select sel, ExpContext ctx, ExpState state, \n         Object val) {\n         PathExpState pstate = (PathExpState) state;\n-        if (pstate.field != null) {\n+        FieldMapping field = (pstate.cmpfield != null) ? pstate.cmpfield \n+            : pstate.field;\n+        if (field != null) {\n             if (_key)\n-                return pstate.field.toKeyDataStoreValue(val, ctx.store);\n-            if (pstate.field.getElement().getDeclaredTypeCode() \n-                != JavaTypes.OBJECT)\n-                return pstate.field.toDataStoreValue(val, ctx.store);\n+                return field.toKeyDataStoreValue(val, ctx.store);\n+            if (field.getElement().getDeclaredTypeCode() != JavaTypes.OBJECT)\n+                return field.toDataStoreValue(val, ctx.store);\n \n-            val = pstate.field.getExternalValue(val, ctx.store.getContext());\n-            return pstate.field.toDataStoreValue(val, ctx.store);\n+            val = field.getExternalValue(val, ctx.store.getContext());\n+            return field.toDataStoreValue(val, ctx.store);\n         }\n         return _class.toDataStoreValue(val, _class.getPrimaryKeyColumns(),\n             ctx.store);"},{"sha":"3eaef989425a990473abf2bc8f632f0a8327032c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationStrategies.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6937856e2b5e1261d7773abd7c45230ca6ddb844/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationStrategies.java","raw_url":"https://github.com/apache/openjpa/raw/6937856e2b5e1261d7773abd7c45230ca6ddb844/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationStrategies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationStrategies.java?ref=6937856e2b5e1261d7773abd7c45230ca6ddb844","patch":"@@ -74,7 +74,7 @@ public static MetaDataException uninversable(ValueMapping vm) {\n     public static Object toDataStoreValue(ValueMapping vm, Object val,\n         JDBCStore store) {\n         ClassMapping rel;\n-        if (val == null || val.getClass() == vm.getType())\n+        if (val == null || val.getClass() == vm.getType()) \n             rel = vm.getTypeMapping(); // common case\n         else\n             rel = vm.getMappingRepository().getMapping(val.getClass(),"},{"sha":"8486c99885ced8cc772f6b6fb2f33cebb5d72ea5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntity.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/6937856e2b5e1261d7773abd7c45230ca6ddb844/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntity.java","raw_url":"https://github.com/apache/openjpa/raw/6937856e2b5e1261d7773abd7c45230ca6ddb844/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntity.java?ref=6937856e2b5e1261d7773abd7c45230ca6ddb844","patch":"@@ -0,0 +1,59 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity\r\n+public class ManyOneEntity {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    private long id;\r\n+\r\n+    private String name;\r\n+\r\n+    @ManyToOne(cascade=CascadeType.ALL)\r\n+    private ManyOneEntity rel;\r\n+\r\n+    @Version\r\n+    private Integer optLock;\r\n+\r\n+    public long getId() { \r\n+        return id; \r\n+    }\r\n+\r\n+    public ManyOneEntity getRel() {\r\n+        return rel; \r\n+    }\r\n+\r\n+    public void setRel(ManyOneEntity rel) {\r\n+        this.rel = rel;\r\n+    }\r\n+\r\n+    public String getName() { \r\n+        return name; \r\n+    }\r\n+\r\n+    public void setName(String name) { \r\n+        this.name = name; \r\n+    }\r\n+}\r"},{"sha":"40e308d838032a0f8ab6c3bac0c5fc139b8b4d6c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryIdOfRelationDoesNotJoin.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/apache/openjpa/blob/6937856e2b5e1261d7773abd7c45230ca6ddb844/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryIdOfRelationDoesNotJoin.java","raw_url":"https://github.com/apache/openjpa/raw/6937856e2b5e1261d7773abd7c45230ca6ddb844/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryIdOfRelationDoesNotJoin.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryIdOfRelationDoesNotJoin.java?ref=6937856e2b5e1261d7773abd7c45230ca6ddb844","patch":"@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n+import javax.persistence.Query;\n+\n+import junit.framework.TestCase;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Test that querying the id of a related many-one (or one-one) does not create\n+ * a join across the tables.\n+ *\n+ * @author Abe White\n+ */\n+public class TestQueryIdOfRelationDoesNotJoin\n+    extends TestCase {\n+\n+    private EntityManagerFactory emf;\n+    private long e3Id;\n+\n+    public void setUp() {\n+        Map props = new HashMap();\n+        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" \n+            + ManyOneEntity.class.getName() + \")\");\n+        emf = Persistence.createEntityManagerFactory(\"test\", props);\n+\n+        ManyOneEntity e1 = new ManyOneEntity();\n+        e1.setName(\"e1\"); \n+        ManyOneEntity e2 = new ManyOneEntity();\n+        e2.setName(\"e2\"); \n+        ManyOneEntity e3 = new ManyOneEntity();\n+        e3.setName(\"e3\"); \n+        e1.setRel(e3);\n+        e2.setRel(e1);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(e1);\n+        em.getTransaction().commit();\n+        e3Id = e3.getId();\n+\n+        // we intentionally create an orphaned reference on e1.rel\n+        em.getTransaction().begin();\n+        em.remove(e3);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void tearDown() {\n+        if (emf == null)\n+            return;\n+        try {\n+            EntityManager em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            em.createQuery(\"delete from ManyOneEntity\").executeUpdate();\n+            em.getTransaction().commit();\n+            em.close();\n+            emf.close();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void testQuery() {\n+        EntityManager em = emf.createEntityManager();\n+        Query q = em.createQuery(\"select e from ManyOneEntity e \"\n+            + \"where e.rel.id = :id\").setParameter(\"id\", e3Id);\n+        List res = q.getResultList();\n+        assertEquals(1, res.size());\n+\n+        ManyOneEntity e = (ManyOneEntity) res.get(0);\n+        assertEquals(\"e1\", e.getName());\n+        assertNull(e.getRel());\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestQueryIdOfRelationDoesNotJoin.class);\n+    }\n+}\n+"}]}

