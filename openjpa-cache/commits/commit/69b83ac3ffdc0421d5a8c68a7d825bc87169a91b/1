{"sha":"69b83ac3ffdc0421d5a8c68a7d825bc87169a91b","node_id":"MDY6Q29tbWl0MjA2MzY0OjY5YjgzYWMzZmZkYzA0MjFkNWE4YzY4YTdkODI1YmM4NzE2OWE5MWI=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-08-18T00:17:30Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-08-18T00:17:30Z"},"message":"When a query projects and groups on a relation field, make sure to group on\nthe same columns we select.  Added Select.groupBy(ClassMapping, ...) API.\nImplemented by temporarily putting target Select into \"group mode\" -- in which \nall select() calls are instead routed to groupBy() calls -- and invoking the \nsame JDBCStoreManager.select() logic we use for the \nSelect.select(ClassMapping...) call.  Having the Select \"fake out\" its callers\nby translating select() calls into groupBy() calls isn't necessarily pretty, \nbut it allows us to re-use all our existing select logic (not just in \nJDBCStoreManager, but in all the class, field, discriminator, version, etc \nmapping strategies) rather than creating duplicate logic in parallel groupBy() \nmethods in all these components.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@432444 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8708893e61e5a3b9f2155ebab75c26bfd90d18a9","url":"https://api.github.com/repos/apache/openjpa/git/trees/8708893e61e5a3b9f2155ebab75c26bfd90d18a9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b","html_url":"https://github.com/apache/openjpa/commit/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/comments","author":null,"committer":null,"parents":[{"sha":"2ccc2426791f4846704098e8564753faad665442","url":"https://api.github.com/repos/apache/openjpa/commits/2ccc2426791f4846704098e8564753faad665442","html_url":"https://github.com/apache/openjpa/commit/2ccc2426791f4846704098e8564753faad665442"}],"stats":{"total":276,"additions":168,"deletions":108},"files":[{"sha":"48281ec26f1556ff6b5e5a86e320cf30e45d2ba0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":18,"deletions":15,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=69b83ac3ffdc0421d5a8c68a7d825bc87169a91b","patch":"@@ -83,8 +83,8 @@\n public class JDBCStoreManager \n     implements StoreManager, JDBCStore {\n \n-    private static final Localizer _loc = Localizer\n-        .forPackage(JDBCStoreManager.class);\n+    private static final Localizer _loc = Localizer.forPackage\n+        (JDBCStoreManager.class);\n \n     private StoreContext _ctx = null;\n     private JDBCConfiguration _conf = null;\n@@ -922,8 +922,8 @@ private FieldMapping createEagerSelects(Select sel, ClassMapping mapping,\n                 continue;\n \n             // try to select with join first\n-            jtype = (fms[i].getNullValue() == fms[i].NULL_EXCEPTION) ? sel.EAGER_INNER\n-                : sel.EAGER_OUTER;\n+            jtype = (fms[i].getNullValue() == fms[i].NULL_EXCEPTION) \n+                ? sel.EAGER_INNER : sel.EAGER_OUTER;\n             if (mode != fetch.EAGER_PARALLEL && !fms[i].isEagerSelectToMany()\n                 && fms[i].supportsSelect(sel, jtype, sm, this, fetch) > 0\n                 && sel.eagerClone(fms[i], jtype, false, 1) != null)\n@@ -936,12 +936,14 @@ private FieldMapping createEagerSelects(Select sel, ClassMapping mapping,\n             // to use a to-many join also.  currently we limit eager\n             // outer joins to non-LRS, non-ranged selects that don't already\n             // have an eager to-many join\n-            if ((hasJoin || mode == fetch.EAGER_JOIN || (mode == fetch.DEFAULT && sm != null))\n+            if ((hasJoin || mode == fetch.EAGER_JOIN \n+                || (mode == fetch.DEFAULT && sm != null))\n                 && fms[i].isEagerSelectToMany()\n                 && !inEagerJoin\n                 && !sel.hasEagerJoin(true)\n                 && (!sel.getAutoDistinct() || (!sel.isLRS()\n-                    && sel.getStartIndex() == 0 && sel.getEndIndex() == Long.MAX_VALUE))\n+                && sel.getStartIndex() == 0 \n+                && sel.getEndIndex() == Long.MAX_VALUE))\n                 && fms[i].supportsSelect(sel, jtype, sm, this, fetch) > 0) {\n                 if (sel.eagerClone(fms[i], jtype, true, 1) != null)\n                     eagerToMany = fms[i];\n@@ -952,9 +954,9 @@ private FieldMapping createEagerSelects(Select sel, ClassMapping mapping,\n             // finally, try parallel\n             if (eager == fetch.EAGER_PARALLEL\n                 && (sels = fms[i].supportsSelect(sel, sel.EAGER_PARALLEL, sm,\n-                    this, fetch)) != 0)\n-                sel.eagerClone(fms[i], Select.EAGER_PARALLEL, fms[i]\n-                    .isEagerSelectToMany(), sels);\n+                this, fetch)) != 0)\n+                sel.eagerClone(fms[i], Select.EAGER_PARALLEL, \n+                    fms[i].isEagerSelectToMany(), sels);\n         }\n         return eagerToMany;\n     }\n@@ -993,8 +995,8 @@ private int selectBaseMappings(Select sel, ClassMapping mapping,\n         boolean ident, boolean joined) {\n         ClassMapping parent = mapping.getJoinablePCSuperclassMapping();\n         if (parent == null && !mapping.isMapped())\n-            throw new InvalidStateException(_loc.get(\"virtual-mapping\", mapping\n-                .getDescribedType()));\n+            throw new InvalidStateException(_loc.get(\"virtual-mapping\", mapping.\n+                getDescribedType()));\n \n         int seld = -1;\n         int pseld = -1;\n@@ -1011,9 +1013,9 @@ private int selectBaseMappings(Select sel, ClassMapping mapping,\n             }\n \n             // if no instance or not initialized and not exact oid, select type\n-            if ((sm == null || (sm.getPCState() == PCState.TRANSIENT && (!(sm\n-                .getObjectId() instanceof OpenJPAId) || ((OpenJPAId) sm\n-                .getObjectId()).hasSubclasses())))\n+            if ((sm == null || (sm.getPCState() == PCState.TRANSIENT \n+                && (!(sm.getObjectId() instanceof OpenJPAId) \n+                || ((OpenJPAId) sm.getObjectId()).hasSubclasses())))\n                 && mapping.getDiscriminator().select(sel, orig))\n                 seld = 1;\n \n@@ -1346,7 +1348,8 @@ protected ResultSet executeQuery(String sql, boolean wrap)\n      */\n     private class CancelPreparedStatement extends DelegatingPreparedStatement {\n \n-        public CancelPreparedStatement(PreparedStatement stmnt, Connection conn) {\n+        public CancelPreparedStatement(PreparedStatement stmnt, \n+            Connection conn) {\n             super(stmnt, conn);\n         }\n "},{"sha":"76c145f548fa6914fb64ae869e663f9f671f660c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Aggregate.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Aggregate.java","raw_url":"https://github.com/apache/openjpa/raw/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Aggregate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Aggregate.java?ref=69b83ac3ffdc0421d5a8c68a7d825bc87169a91b","patch":"@@ -121,7 +121,7 @@ public void selectColumns(Select sel, JDBCStore store, Object[] params,\n \n     public void groupBy(Select sel, JDBCStore store, Object[] params,\n         JDBCFetchConfiguration fetch) {\n-        sel.groupBy(newSQLBuffer(sel, store, params, fetch), false);\n+        sel.groupBy(newSQLBuffer(sel, store, params, fetch));\n     }\n \n     public void orderBy(Select sel, JDBCStore store, Object[] params,"},{"sha":"6a7ac0a051a379b6cde271c8ca2de234e021c569","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Concat.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Concat.java","raw_url":"https://github.com/apache/openjpa/raw/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Concat.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Concat.java?ref=69b83ac3ffdc0421d5a8c68a7d825bc87169a91b","patch":"@@ -113,7 +113,7 @@ public void selectColumns(Select sel, JDBCStore store,\n \n     public void groupBy(Select sel, JDBCStore store, Object[] params,\n         JDBCFetchConfiguration fetch) {\n-        sel.groupBy(newSQLBuffer(sel, store, params, fetch), false);\n+        sel.groupBy(newSQLBuffer(sel, store, params, fetch));\n     }\n \n     public void orderBy(Select sel, JDBCStore store, Object[] params,"},{"sha":"061a884123741f0d3f028c329fcb33ee0ba67b0f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Const.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Const.java","raw_url":"https://github.com/apache/openjpa/raw/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Const.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Const.java?ref=69b83ac3ffdc0421d5a8c68a7d825bc87169a91b","patch":"@@ -135,7 +135,7 @@ public void selectColumns(Select sel, JDBCStore store,\n \n     public void groupBy(Select sel, JDBCStore store, Object[] params,\n         JDBCFetchConfiguration fetch) {\n-        sel.groupBy(newSQLBuffer(sel, store, params, fetch), false);\n+        sel.groupBy(newSQLBuffer(sel, store, params, fetch));\n     }\n \n     public void orderBy(Select sel, JDBCStore store, Object[] params,"},{"sha":"3bcaa2a7f41ca7ab1d547e59a055bec27e3d4143","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Extension.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Extension.java","raw_url":"https://github.com/apache/openjpa/raw/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Extension.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Extension.java?ref=69b83ac3ffdc0421d5a8c68a7d825bc87169a91b","patch":"@@ -135,7 +135,7 @@ public void selectColumns(Select sel, JDBCStore store,\n \n     public void groupBy(Select sel, JDBCStore store, Object[] params,\n         JDBCFetchConfiguration fetch) {\n-        sel.groupBy(newSQLBuffer(sel, store, params, fetch), false);\n+        sel.groupBy(newSQLBuffer(sel, store, params, fetch));\n     }\n \n     public void orderBy(Select sel, JDBCStore store, Object[] params,"},{"sha":"e1f90d997313c0931feeb07e6e9dc81bbb4e4b39","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IndexOf.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IndexOf.java","raw_url":"https://github.com/apache/openjpa/raw/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IndexOf.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IndexOf.java?ref=69b83ac3ffdc0421d5a8c68a7d825bc87169a91b","patch":"@@ -99,7 +99,7 @@ public void selectColumns(Select sel, JDBCStore store,\n \n     public void groupBy(Select sel, JDBCStore store, Object[] params,\n         JDBCFetchConfiguration fetch) {\n-        sel.groupBy(newSQLBuffer(sel, store, params, fetch), false);\n+        sel.groupBy(newSQLBuffer(sel, store, params, fetch));\n     }\n \n     public void orderBy(Select sel, JDBCStore store, Object[] params,"},{"sha":"84ccc889cbab834dc261dea5a69ae3630b9611e8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Math.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Math.java","raw_url":"https://github.com/apache/openjpa/raw/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Math.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Math.java?ref=69b83ac3ffdc0421d5a8c68a7d825bc87169a91b","patch":"@@ -110,7 +110,7 @@ public void selectColumns(Select sel, JDBCStore store,\n \n     public void groupBy(Select sel, JDBCStore store, Object[] params,\n         JDBCFetchConfiguration fetch) {\n-        sel.groupBy(newSQLBuffer(sel, store, params, fetch), false);\n+        sel.groupBy(newSQLBuffer(sel, store, params, fetch));\n     }\n \n     public void orderBy(Select sel, JDBCStore store, Object[] params,"},{"sha":"7fe01d06439800c6151e68c265489d992d1251b2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","raw_url":"https://github.com/apache/openjpa/raw/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java?ref=69b83ac3ffdc0421d5a8c68a7d825bc87169a91b","patch":"@@ -502,7 +502,14 @@ else if (pks)\n \n     public void groupBy(Select sel, JDBCStore store, Object[] params,\n         JDBCFetchConfiguration fetch) {\n-        sel.groupBy(getColumns(), sel.outer(_joins), false);\n+        ClassMapping mapping = getClassMapping();\n+        if (mapping == null || !_joinedRel)\n+            sel.groupBy(getColumns(), sel.outer(_joins));\n+        else {\n+            int subs = (_type == UNBOUND_VAR) ? sel.SUBS_JOINABLE\n+                : sel.SUBS_ANY_JOINABLE;\n+            sel.groupBy(mapping, subs, store, fetch, sel.outer(_joins));\n+        }\n     }\n \n     public void orderBy(Select sel, JDBCStore store, Object[] params,"},{"sha":"3451851ef0e93f81024c2a76d2488bcee859f6ba","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","status":"modified","additions":9,"deletions":11,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","raw_url":"https://github.com/apache/openjpa/raw/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java?ref=69b83ac3ffdc0421d5a8c68a7d825bc87169a91b","patch":"@@ -233,7 +233,6 @@ private void initializeJoins(Select sel, JDBCStore store,\n             // this ensures that we have all our joins cached\n             if (resultVal instanceof PCPath)\n                 ((PCPath) resultVal).joinRelation();\n-\n             joins = sel.and(joins, resultVal.getJoins());\n         }\n \n@@ -242,6 +241,11 @@ private void initializeJoins(Select sel, JDBCStore store,\n         for (int i = 0; i < exps.grouping.length; i++) {\n             groupVal = (Val) exps.grouping[i];\n             groupVal.initialize(sel, store, false);\n+\n+            // have to join through to related type for pc object groupings;\n+            // this ensures that we have all our joins cached\n+            if (groupVal instanceof PCPath)\n+                ((PCPath) groupVal).joinRelation();\n             joins = sel.and(joins, groupVal.getJoins());\n         }\n \n@@ -313,21 +317,15 @@ public void select(JDBCStore store, ClassMapping mapping,\n                 val.select(sel, store, params, pks, fetch);\n             }\n \n-            // make sure grouping and having columns are selected since it\n-            // is required by most DBs.  put them last so they don't affect\n-            // result processing\n+            // make sure having columns are selected since it is required by \n+            // some DBs.  put them last so they don't affect result processing\n             if (exps.having != null && inner != null)\n                 ((Exp) exps.having).selectColumns(inner, store, params, true,\n                     fetch);\n-            for (int i = 0; i < exps.grouping.length; i++) {\n-                val = (Val) exps.grouping[i];\n-                if (inner != null)\n-                    val.selectColumns(inner, store, params, true, fetch);\n-                val.select(sel, store, params, true, fetch);\n-            }\n         }\n \n-        // select order data last so it doesn't affect result processing\n+        // select ordering columns, since it is required by some DBs.  put them\n+        // last so they don't affect result processing\n         for (int i = 0; i < exps.ordering.length; i++) {\n             val = (Val) exps.ordering[i];\n             if (inner != null)"},{"sha":"c937e243b4c49f59e29c55ef4f82de066b9ce69f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringFunction.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringFunction.java","raw_url":"https://github.com/apache/openjpa/raw/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringFunction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringFunction.java?ref=69b83ac3ffdc0421d5a8c68a7d825bc87169a91b","patch":"@@ -87,7 +87,7 @@ public void selectColumns(Select sel, JDBCStore store,\n \n     public void groupBy(Select sel, JDBCStore store, Object[] params,\n         JDBCFetchConfiguration fetch) {\n-        sel.groupBy(newSQLBuffer(sel, store, params, fetch), false);\n+        sel.groupBy(newSQLBuffer(sel, store, params, fetch));\n     }\n \n     public void orderBy(Select sel, JDBCStore store, Object[] params,"},{"sha":"e73a7311f89de38639488ec439457e64a16baf17","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SubQ.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SubQ.java","raw_url":"https://github.com/apache/openjpa/raw/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SubQ.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SubQ.java?ref=69b83ac3ffdc0421d5a8c68a7d825bc87169a91b","patch":"@@ -133,7 +133,7 @@ public void selectColumns(Select sel, JDBCStore store,\n \n     public void groupBy(Select sel, JDBCStore store, Object[] params,\n         JDBCFetchConfiguration fetch) {\n-        sel.groupBy(newSQLBuffer(sel, store, params, fetch), false);\n+        sel.groupBy(newSQLBuffer(sel, store, params, fetch));\n     }\n \n     public void orderBy(Select sel, JDBCStore store, Object[] params,"},{"sha":"f1393321528e4c9c63ba9353b015ce4d90fed362","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Substring.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Substring.java","raw_url":"https://github.com/apache/openjpa/raw/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Substring.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Substring.java?ref=69b83ac3ffdc0421d5a8c68a7d825bc87169a91b","patch":"@@ -95,7 +95,7 @@ public void selectColumns(Select sel, JDBCStore store,\n \n     public void groupBy(Select sel, JDBCStore store, Object[] params,\n         JDBCFetchConfiguration fetch) {\n-        sel.groupBy(newSQLBuffer(sel, store, params, fetch), false);\n+        sel.groupBy(newSQLBuffer(sel, store, params, fetch));\n     }\n \n     public void orderBy(Select sel, JDBCStore store, Object[] params,"},{"sha":"424cfc67e378dd8026c2b10a6677bea7e0531e30","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java","raw_url":"https://github.com/apache/openjpa/raw/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java?ref=69b83ac3ffdc0421d5a8c68a7d825bc87169a91b","patch":"@@ -109,7 +109,7 @@ public void selectColumns(Select sel, JDBCStore store,\n \n     public void groupBy(Select sel, JDBCStore store, Object[] params,\n         JDBCFetchConfiguration fetch) {\n-        sel.groupBy(newSQLBuffer(sel, store, params, fetch), false);\n+        sel.groupBy(newSQLBuffer(sel, store, params, fetch));\n     }\n \n     public void orderBy(Select sel, JDBCStore store, Object[] params,"},{"sha":"3294a8c8546c3ef7f8b2efde0e49d1303f473bc9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","raw_url":"https://github.com/apache/openjpa/raw/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java?ref=69b83ac3ffdc0421d5a8c68a7d825bc87169a91b","patch":"@@ -99,7 +99,7 @@ public void selectColumns(Select sel, JDBCStore store,\n \n     public void groupBy(Select sel, JDBCStore store, Object[] params,\n         JDBCFetchConfiguration fetch) {\n-        sel.groupBy(newSQLBuffer(sel, store, params, fetch), false);\n+        sel.groupBy(newSQLBuffer(sel, store, params, fetch));\n     }\n \n     public void orderBy(Select sel, JDBCStore store, Object[] params,"},{"sha":"81d92afccc9a6e9c7eee07290f558ecbffbc58a8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","status":"modified","additions":26,"deletions":16,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","raw_url":"https://github.com/apache/openjpa/raw/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java?ref=69b83ac3ffdc0421d5a8c68a7d825bc87169a91b","patch":"@@ -745,36 +745,46 @@ public void having(String sql, Joins joins) {\n             sel.having(sql, joins);\n         }\n \n-        public boolean groupBy(SQLBuffer sql, boolean select) {\n-            return sel.groupBy(sql, null, select);\n+        public void groupBy(SQLBuffer sql) {\n+            sel.groupBy(sql);\n         }\n \n-        public boolean groupBy(SQLBuffer sql, Joins joins, boolean select) {\n-            return sel.groupBy(sql, joins, select);\n+        public void groupBy(SQLBuffer sql, Joins joins) {\n+            sel.groupBy(sql, joins);\n         }\n \n-        public boolean groupBy(String sql, boolean select) {\n-            return sel.groupBy(sql, null, select);\n+        public void groupBy(String sql) {\n+            sel.groupBy(sql);\n         }\n \n-        public boolean groupBy(String sql, Joins joins, boolean select) {\n-            return sel.groupBy(sql, joins, select);\n+        public void groupBy(String sql, Joins joins) {\n+            sel.groupBy(sql, joins);\n         }\n \n-        public boolean groupBy(Column col, boolean select) {\n-            return sel.groupBy(col, null, select);\n+        public void groupBy(Column col) {\n+            sel.groupBy(col);\n         }\n \n-        public boolean groupBy(Column col, Joins joins, boolean select) {\n-            return sel.groupBy(col, joins, select);\n+        public void groupBy(Column col, Joins joins) {\n+            sel.groupBy(col, joins);\n         }\n \n-        public int groupBy(Column[] cols, boolean select) {\n-            return sel.groupBy(cols, null, select);\n+        public void groupBy(Column[] cols) {\n+            sel.groupBy(cols);\n         }\n \n-        public int groupBy(Column[] cols, Joins joins, boolean select) {\n-            return sel.groupBy(cols, joins, select);\n+        public void groupBy(Column[] cols, Joins joins) {\n+            sel.groupBy(cols, joins);\n+        }\n+\n+        public void groupBy(ClassMapping mapping, int subclasses, \n+            JDBCStore store, JDBCFetchConfiguration fetch) {\n+            sel.groupBy(mapping, subclasses, store, fetch);\n+        }\n+\n+        public void groupBy(ClassMapping mapping, int subclasses, \n+            JDBCStore store, JDBCFetchConfiguration fetch, Joins joins) {\n+            sel.groupBy(mapping, subclasses, store, fetch, joins);\n         }\n \n         public SelectExecutor whereClone(int sels) {"},{"sha":"3b2eeed30abb77608cdb938b91f0e56f5e7c9d83","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","status":"modified","additions":22,"deletions":16,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","raw_url":"https://github.com/apache/openjpa/raw/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java?ref=69b83ac3ffdc0421d5a8c68a7d825bc87169a91b","patch":"@@ -561,51 +561,57 @@ public void whereForeignKey(ForeignKey fk, Object oid,\n \n     /**\n      * Group by the given column.\n-     * Optionally selects grouping data if not already selected.\n      */\n-    public boolean groupBy(Column col, boolean sel);\n+    public void groupBy(Column col);\n \n     /**\n      * Group by the given column.\n-     * Optionally selects grouping data if not already selected.\n      */\n-    public boolean groupBy(Column col, Joins joins, boolean sel);\n+    public void groupBy(Column col, Joins joins);\n \n     /**\n      * Group by the given columns.\n-     * Optionally selects grouping data if not already selected.\n      */\n-    public int groupBy(Column[] cols, boolean sel);\n+    public void groupBy(Column[] cols);\n \n     /**\n      * Group by the given columns.\n-     * Optionally selects grouping data if not already selected.\n      */\n-    public int groupBy(Column[] cols, Joins joins, boolean sel);\n+    public void groupBy(Column[] cols, Joins joins);\n \n     /**\n      * Add a GROUP BY clause.\n-     * Optionally selects grouping data if not already selected.\n      */\n-    public boolean groupBy(SQLBuffer sql, boolean sel);\n+    public void groupBy(SQLBuffer sql);\n \n     /**\n      * Add a GROUP BY clause.\n-     * Optionally selects grouping data if not already selected.\n      */\n-    public boolean groupBy(SQLBuffer sql, Joins joins, boolean sel);\n+    public void groupBy(SQLBuffer sql, Joins joins);\n \n     /**\n      * Add a GROUP BY clause.\n-     * Optionally selects grouping data if not already selected.\n      */\n-    public boolean groupBy(String sql, boolean sel);\n+    public void groupBy(String sql);\n \n     /**\n      * Add a GROUP BY clause.\n-     * Optionally selects grouping data if not already selected.\n      */\n-    public boolean groupBy(String sql, Joins joins, boolean sel);\n+    public void groupBy(String sql, Joins joins);\n+\n+    /**\n+     * Group by the columns of the given mapping, possibly including subclasses.\n+     * Assumes EAGER_NONE.\n+     */\n+    public void groupBy(ClassMapping mapping, int subclasses, JDBCStore store, \n+        JDBCFetchConfiguration fetch);\n+\n+    /**\n+     * Group by the columns of the given mapping, possibly including subclasses.\n+     * Assumes EAGER_NONE.\n+     */\n+    public void groupBy(ClassMapping mapping, int subclasses, JDBCStore store, \n+        JDBCFetchConfiguration fetch, Joins joins);\n \n     /**\n      * Return a SELECT with the same joins and where conditions as this one."},{"sha":"d6ea918e18b30a47b4bacf7ad1e7c199cd6bf77b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":74,"deletions":38,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/69b83ac3ffdc0421d5a8c68a7d825bc87169a91b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=69b83ac3ffdc0421d5a8c68a7d825bc87169a91b","patch":"@@ -37,6 +37,7 @@\n \n import org.apache.commons.collections.iterators.EmptyIterator;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.kernel.EagerFetchModes;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCLockManager;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n@@ -79,6 +80,7 @@\n     private static final int EAGER_TO_ONE = 2 << 9;\n     private static final int EAGER_TO_MANY = 2 << 10;\n     private static final int RECORD_ORDERED = 2 << 11;\n+    private static final int GROUPING = 2 << 12;\n \n     private static final String[] TABLE_ALIASES = new String[16];\n     private static final String[] ORDER_ALIASES = new String[16];\n@@ -588,7 +590,10 @@ public boolean select(SQLBuffer sql, Object id) {\n     }\n \n     public boolean select(SQLBuffer sql, Object id, Joins joins) {\n-        return select((Object) sql, id, joins);\n+        if (!isGrouping())\n+            return select((Object) sql, id, joins);\n+        groupBy(sql, joins);\n+        return false;\n     }\n \n     /**\n@@ -627,7 +632,10 @@ public boolean select(String sql, Object id) {\n     }\n \n     public boolean select(String sql, Object id, Joins joins) {\n-        return select((Object) sql, id, joins);\n+        if (!isGrouping())\n+            return select((Object) sql, id, joins);\n+        groupBy(sql, joins);\n+        return true;\n     }\n \n     public void selectPlaceholder(String sql) {\n@@ -658,7 +666,10 @@ public boolean select(Column col) {\n     }\n \n     public boolean select(Column col, Joins joins) {\n-        return select(col, getJoins(joins, true), false);\n+        if (!isGrouping())\n+            return select(col, getJoins(joins, true), false);\n+        groupBy(col, joins);\n+        return false;\n     }\n \n     public int select(Column[] cols) {\n@@ -668,6 +679,10 @@ public int select(Column[] cols) {\n     public int select(Column[] cols, Joins joins) {\n         if (cols == null || cols.length == 0)\n             return 0;\n+        if (isGrouping()) {\n+            groupBy(cols, joins);\n+            return 0;\n+        }\n         PathJoins pj = getJoins(joins, true);\n         int seld = 0;\n         for (int i = 0; i < cols.length; i++)\n@@ -758,7 +773,10 @@ public boolean selectIdentifier(Column col) {\n     }\n \n     public boolean selectIdentifier(Column col, Joins joins) {\n-        return select(col, getJoins(joins, true), true);\n+        if (!isGrouping())\n+            return select(col, getJoins(joins, true), true);\n+        groupBy(col, joins);\n+        return false;\n     }\n \n     public int selectIdentifier(Column[] cols) {\n@@ -768,6 +786,10 @@ public int selectIdentifier(Column[] cols) {\n     public int selectIdentifier(Column[] cols, Joins joins) {\n         if (cols == null || cols.length == 0)\n             return 0;\n+        if (isGrouping()) {\n+            groupBy(cols, joins);\n+            return 0;\n+        }\n         PathJoins pj = getJoins(joins, true);\n         int seld = 0;\n         for (int i = 0; i < cols.length; i++)\n@@ -814,8 +836,13 @@ private int primaryKeyOperation(ClassMapping mapping, boolean sel,\n             return primaryKeyOperation(sup, sel, asc, joins, aliasOrder);\n         }\n \n-        PathJoins pj = getJoins(joins, false);\n         Column[] cols = mapping.getPrimaryKeyColumns();\n+        if (isGrouping()) {\n+            groupBy(cols, joins);\n+            return 0;\n+        }\n+\n+        PathJoins pj = getJoins(joins, false);\n         int seld = 0;\n         for (int i = 0; i < cols.length; i++)\n             if (columnOperation(cols[i], sel, asc, pj, aliasOrder))\n@@ -1285,84 +1312,93 @@ else if (!_having.isEmpty())\n         _having.append(sql);\n     }\n \n-    public boolean groupBy(SQLBuffer sql, boolean sel) {\n-        return groupBy(sql, (Joins) null, sel);\n+    public void groupBy(SQLBuffer sql) {\n+        groupBy(sql, (Joins) null);\n     }\n \n-    public boolean groupBy(SQLBuffer sql, Joins joins, boolean sel) {\n+    public void groupBy(SQLBuffer sql, Joins joins) {\n         getJoins(joins, true);\n         if (_grouping == null)\n             _grouping = new SQLBuffer(_dict);\n         else\n             _grouping.append(\", \");\n         _grouping.append(sql);\n-\n-        if (!sel)\n-            return false;\n-        int idx = _selects.indexOfAlias(sql);\n-        if (idx != -1)\n-            return false;\n-        _selects.setAlias(nullId(), sql, false);\n-        return true;\n     }\n \n-    public boolean groupBy(String sql, boolean sel) {\n-        return groupBy(sql, (Joins) null, sel);\n+    public void groupBy(String sql) {\n+        groupBy(sql, (Joins) null);\n     }\n \n-    public boolean groupBy(String sql, Joins joins, boolean sel) {\n+    public void groupBy(String sql, Joins joins) {\n         getJoins(joins, true);\n         if (_grouping == null)\n             _grouping = new SQLBuffer(_dict);\n         else\n             _grouping.append(\", \");\n         _grouping.append(sql);\n-\n-        if (!sel)\n-            return false;\n-        int idx = _selects.indexOfAlias(sql);\n-        if (idx != -1)\n-            return false;\n-        _selects.setAlias(nullId(), sql, false);\n-        return true;\n     }\n \n-    public boolean groupBy(Column col, boolean sel) {\n-        return groupBy(col, null, sel);\n+    public void groupBy(Column col) {\n+        groupBy(col, null);\n     }\n \n-    public boolean groupBy(Column col, Joins joins, boolean sel) {\n+    public void groupBy(Column col, Joins joins) {\n         if (_grouping == null)\n             _grouping = new SQLBuffer(_dict);\n         else\n             _grouping.append(\", \");\n \n         PathJoins pj = getJoins(joins, true);\n         _grouping.append(getColumnAlias(col, pj));\n-        return sel && select(col, pj, false);\n     }\n \n-    public int groupBy(Column[] cols, boolean sel) {\n-        return groupBy(cols, null, sel);\n+    public void groupBy(Column[] cols) {\n+        groupBy(cols, null);\n     }\n \n-    public int groupBy(Column[] cols, Joins joins, boolean sel) {\n+    public void groupBy(Column[] cols, Joins joins) {\n         if (_grouping == null)\n             _grouping = new SQLBuffer(_dict);\n         else\n             _grouping.append(\", \");\n \n         PathJoins pj = getJoins(joins, true);\n-        int seld = 0;\n         for (int i = 0; i < cols.length; i++) {\n             if (i > 0)\n                 _grouping.append(\", \");\n             _grouping.append(getColumnAlias(cols[i], pj));\n+        }\n+    }\n \n-            if (sel && select(cols[i], pj, false))\n-                seld |= 2 << i;\n+    public void groupBy(ClassMapping mapping, int subclasses, JDBCStore store,\n+        JDBCFetchConfiguration fetch) {\n+        groupBy(mapping, subclasses, store, fetch, null);\n+    }\n+\n+    public void groupBy(ClassMapping mapping, int subclasses, JDBCStore store,\n+        JDBCFetchConfiguration fetch, Joins joins) {\n+        // we implement this by putting ourselves into grouping mode, where\n+        // all select invocations are re-routed to group-by invocations instead.\n+        // this allows us to utilize the same select APIs of the store manager\n+        // and all the mapping strategies, rather than having to create \n+        // equivalent APIs and duplicate logic for grouping\n+        boolean wasGrouping = isGrouping();\n+        _flags |= GROUPING;\n+        try {\n+            select(mapping, subclasses, store, fetch, \n+                EagerFetchModes.EAGER_NONE, joins);\n+        } finally {\n+            if (!wasGrouping)\n+                _flags &= ~GROUPING;\n         }\n-        return seld;\n+    }\n+\n+    /**\n+     * Whether we're in group mode, where any select is changed to a group-by\n+     * call.\n+     */\n+    boolean isGrouping() {\n+        return (_flags & GROUPING) != 0;\n     }\n \n     /**"}]}

