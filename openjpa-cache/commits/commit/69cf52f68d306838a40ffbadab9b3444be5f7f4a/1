{"sha":"69cf52f68d306838a40ffbadab9b3444be5f7f4a","node_id":"MDY6Q29tbWl0MjA2MzY0OjY5Y2Y1MmY2OGQzMDY4MzhhNDBmZmJhZGFiOWIzNDQ0YmU1ZjdmNGE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-09-01T19:48:09Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-09-01T19:48:09Z"},"message":"OPENJPA-1279: \nAdding testcases and fixing cache exclusion logic in DataCacheStoreManager\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@810197 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"139bfa9689a96eb70f7acbc04d0de37fa1121d79","url":"https://api.github.com/repos/apache/openjpa/git/trees/139bfa9689a96eb70f7acbc04d0de37fa1121d79"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/69cf52f68d306838a40ffbadab9b3444be5f7f4a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/69cf52f68d306838a40ffbadab9b3444be5f7f4a","html_url":"https://github.com/apache/openjpa/commit/69cf52f68d306838a40ffbadab9b3444be5f7f4a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/69cf52f68d306838a40ffbadab9b3444be5f7f4a/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"e6ccbb0c0d88be3f36ea97f1f9ec9debcc5fc4e5","url":"https://api.github.com/repos/apache/openjpa/commits/e6ccbb0c0d88be3f36ea97f1f9ec9debcc5fc4e5","html_url":"https://github.com/apache/openjpa/commit/e6ccbb0c0d88be3f36ea97f1f9ec9debcc5fc4e5"}],"stats":{"total":239,"additions":229,"deletions":10},"files":[{"sha":"8ace12ade6f3ebee1a8744470b2fc471c4b8bdd4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/69cf52f68d306838a40ffbadab9b3444be5f7f4a/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/69cf52f68d306838a40ffbadab9b3444be5f7f4a/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=69cf52f68d306838a40ffbadab9b3444be5f7f4a","patch":"@@ -336,9 +336,9 @@ public boolean syncVersion(OpenJPAStateManager sm, Object edata) {\n     public boolean initialize(OpenJPAStateManager sm, PCState state, FetchConfiguration fetch, Object edata) {\n         boolean rval; \n         DataCache cache = sm.getMetaData().getDataCache();\n+        boolean updateCache = _ctx.getCacheStoreMode() != DataCacheStoreMode.BYPASS && _ctx.getPopulateDataCache();\n         if (cache == null || sm.isEmbedded() || _ctx.getCacheRetrieveMode() == DataCacheRetrieveMode.BYPASS\n             || _ctx.getCacheStoreMode() == DataCacheStoreMode.REFRESH) {\n-            // save the return value and return later in case we need to update the cache)\n             rval = super.initialize(sm, state, fetch, edata);\n         }\n \n@@ -349,18 +349,17 @@ public boolean initialize(OpenJPAStateManager sm, PCState state, FetchConfigurat\n                 //### addressed for bug 511\n                 sm.initialize(data.getType(), state);\n                 data.load(sm, fetch, edata);\n-                return true;\n+                // no need to update the cache. \n+                updateCache = false;\n+                rval = true;\n+            } else {\n+                // initialize from store manager\n+                rval = super.initialize(sm, state, fetch, edata);\n             }\n-\n-            // initialize from store manager\n-            if (!super.initialize(sm, state, fetch, edata)) {\n-                return false;\n-            }\n-            rval = true; // same as rval = super.initialize(...)\n         }\n \n-        // update the cache if configured appropriately. \n-        if (_ctx.getCacheStoreMode() == DataCacheStoreMode.REFRESH && _ctx.getPopulateDataCache()) {\n+        if (cache != null && (rval && updateCache)) {\n+            // update cache if the result came from the database and configured to store or refresh the cache.\n             cacheStateManager(cache, sm);\n         }\n         return rval;"},{"sha":"79c56196830259ce479dd7350273de993dd8fbac","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/AbstractCacheModeTestCase.java","status":"modified","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/69cf52f68d306838a40ffbadab9b3444be5f7f4a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/AbstractCacheModeTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/69cf52f68d306838a40ffbadab9b3444be5f7f4a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/AbstractCacheModeTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/AbstractCacheModeTestCase.java?ref=69cf52f68d306838a40ffbadab9b3444be5f7f4a","patch":"@@ -25,6 +25,7 @@\n import javax.persistence.CacheStoreMode;\n import javax.persistence.EntityManager;\n \n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.lib.jdbc.AbstractJDBCListener;\n import org.apache.openjpa.lib.jdbc.JDBCEvent;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n@@ -393,4 +394,53 @@ public void testStoreModeRefreshRefresh() {\n             entityManagerStoreModeTest(CacheStoreMode.REFRESH, CacheStoreMode.REFRESH, true, true, 1);\n         }\n     }\n+    \n+    public void testResultsFromQueryAreInCache() { \n+        // clear cache\n+        getEntityManagerFactory().getStoreCache().evictAll();\n+        getEntityManagerFactory().getQueryResultCache().evictAll();\n+\n+        EntityManager em = getEntityManagerFactory().createEntityManager();\n+        String query; \n+        for(Class<?> cls : persistentTypes) {\n+            query = \"Select e from \" + getAlias(cls) + \" e\";\n+            List<?> res = em.createQuery(query).getResultList();\n+            assertNotNull(String.format(\"Expected to find some results when running query %s\",query), res);\n+            assertTrue(String.format(\"Expected more than 0 results running query %s\",query),res.size() != 0 ) ;\n+        }\n+        for(Class<?> cls : getExpectedInCache()) { \n+            assertCached(getEntityManagerFactory().getCache(), cls, 1, true);\n+        }\n+        \n+        for(Class<?> cls : getExpectedNotInCache()) { \n+            assertCached(getEntityManagerFactory().getCache(), cls, 1, false);\n+        }\n+        em.close();\n+    }\n+    \n+    public void testResultsFromFindAreInCache() { \n+        // clear cache\n+        getEntityManagerFactory().getStoreCache().evictAll();\n+        getEntityManagerFactory().getQueryResultCache().evictAll();\n+\n+        EntityManager em = getEntityManagerFactory().createEntityManager();\n+        for(Class<?> cls : persistentTypes) {\n+            assertNotNull(String.format(\"Expected to find %s::%d from database or from cache\", cls, 1),em.find(cls, 1));\n+        }\n+        for(Class<?> cls : getExpectedInCache()) { \n+            assertCached(getEntityManagerFactory().getCache(), cls, 1, true);\n+        }\n+        \n+        for(Class<?> cls : getExpectedNotInCache()) { \n+            assertCached(getEntityManagerFactory().getCache(), cls, 1, false);\n+        }\n+        em.close();\n+    }\n+    \n+    private String getAlias(Class<?> cls) {\n+        ClassMapping mapping =\n+            (ClassMapping) getEntityManagerFactory().getConfiguration().getMetaDataRepositoryInstance().getMetaData(\n+                cls, null, true);\n+        return mapping.getTypeAlias();\n+    }\n }"},{"sha":"d8b73f76ff7b442f1f0de8b7ed2452d508110004","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeEmpty.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/69cf52f68d306838a40ffbadab9b3444be5f7f4a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeEmpty.java","raw_url":"https://github.com/apache/openjpa/raw/69cf52f68d306838a40ffbadab9b3444be5f7f4a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeEmpty.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeEmpty.java?ref=69cf52f68d306838a40ffbadab9b3444be5f7f4a","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.Cache;\n+\n+import org.apache.openjpa.lib.jdbc.JDBCListener;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+\n+public class TestCacheModeEmpty extends AbstractCacheModeTestCase {\n+    private static OpenJPAEntityManagerFactorySPI emf = null;\n+    private static Cache cache = null;\n+    private static List<String> sql = new ArrayList<String>();\n+    private static JDBCListener listener;\n+    \n+    private static Class<?>[] expectedInCache = persistentTypes;\n+    private static Class<?>[] expectedNotInCache = {};\n+\n+    @Override\n+    public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n+        if (emf == null) {\n+            emf = createEntityManagerFactory(\"cache-mode-empty\");\n+            assertNotNull(emf);\n+            cache = emf.getCache();\n+            assertNotNull(cache);\n+        }\n+        return emf;\n+    }\n+\n+    public JDBCListener getListener() {\n+        if (listener == null) {\n+            listener = new Listener();\n+        }\n+        return listener;\n+    }\n+    \n+    public List<String> getSql() { \n+        return sql;\n+    }\n+    \n+    public void testCacheables() {\n+        assertCacheables(cache, true);\n+    }\n+\n+    public void testUncacheables() {\n+        assertUncacheables(cache, true);\n+    }\n+\n+    public void testUnspecified() {\n+        assertUnspecified(cache, true);\n+    }\n+\n+    @Override\n+    protected Class<?>[] getExpectedInCache() {\n+        return expectedInCache;\n+    }\n+\n+    @Override\n+    protected Class<?>[] getExpectedNotInCache() {\n+        return expectedNotInCache;\n+    }\n+}"},{"sha":"d1df5e31c589e9feefb0b928015003396a982047","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeUnspecified.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/69cf52f68d306838a40ffbadab9b3444be5f7f4a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeUnspecified.java","raw_url":"https://github.com/apache/openjpa/raw/69cf52f68d306838a40ffbadab9b3444be5f7f4a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeUnspecified.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeUnspecified.java?ref=69cf52f68d306838a40ffbadab9b3444be5f7f4a","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.Cache;\n+\n+import org.apache.openjpa.lib.jdbc.JDBCListener;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+\n+public class TestCacheModeUnspecified extends AbstractCacheModeTestCase {\n+    private static OpenJPAEntityManagerFactorySPI emf = null;\n+    private static Cache cache = null;\n+    private static List<String> sql = new ArrayList<String>();\n+    private static JDBCListener listener;\n+    \n+    private static Class<?>[] expectedInCache = persistentTypes;\n+    private static Class<?>[] expectedNotInCache = {};\n+\n+    @Override\n+    public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n+        if (emf == null) {\n+            emf = createEntityManagerFactory(\"cache-mode-unspecified\");\n+            assertNotNull(emf);\n+            cache = emf.getCache();\n+            assertNotNull(cache);\n+        }\n+        return emf;\n+    }\n+\n+    public JDBCListener getListener() {\n+        if (listener == null) {\n+            listener = new Listener();\n+        }\n+        return listener;\n+    }\n+    \n+    public List<String> getSql() { \n+        return sql;\n+    }\n+    \n+    public void testCacheables() {\n+        assertCacheables(cache, true);\n+    }\n+\n+    public void testUncacheables() {\n+        assertUncacheables(cache, true);\n+    }\n+\n+    public void testUnspecified() {\n+        assertUnspecified(cache, true);\n+    }\n+\n+    @Override\n+    protected Class<?>[] getExpectedInCache() {\n+        return expectedInCache;\n+    }\n+\n+    @Override\n+    protected Class<?>[] getExpectedNotInCache() {\n+        return expectedNotInCache;\n+    }\n+}"},{"sha":"31ed90c0994b42d81508872ac706b08546062c45","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/caching-persistence.xml","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/69cf52f68d306838a40ffbadab9b3444be5f7f4a/openjpa-persistence-jdbc/src/test/resources/META-INF/caching-persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/69cf52f68d306838a40ffbadab9b3444be5f7f4a/openjpa-persistence-jdbc/src/test/resources/META-INF/caching-persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/caching-persistence.xml?ref=69cf52f68d306838a40ffbadab9b3444be5f7f4a","patch":"@@ -67,4 +67,12 @@\n             <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema(ForeignKeys=true)\" />\n         </properties>\n     </persistence-unit>\n+        <persistence-unit name=\"cache-mode-empty\">\n+        <mapping-file>META-INF/caching-orm.xml</mapping-file>\n+        <properties>\n+            <!-- Connection info is passed in via system properties -->\n+            <!-- Cache configuration ie openjpa.DataCache is passed in at EMF initialization -->\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema(ForeignKeys=true)\" />\n+        </properties>\n+    </persistence-unit>\n </persistence>"}]}

