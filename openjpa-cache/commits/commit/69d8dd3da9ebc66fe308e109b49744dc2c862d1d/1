{"sha":"69d8dd3da9ebc66fe308e109b49744dc2c862d1d","node_id":"MDY6Q29tbWl0MjA2MzY0OjY5ZDhkZDNkYTllYmM2NmZlMzA4ZTEwOWI0OTc0NGRjMmM4NjJkMWQ=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-10-04T23:43:51Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-10-04T23:43:51Z"},"message":"Enable caching of embedded instances by datacache.  Fix bugs in \nDataCachePCDataGenerator.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@453066 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5d13ac8aa0dba95036b7d4a7b77884b1b0aaa3a4","url":"https://api.github.com/repos/apache/openjpa/git/trees/5d13ac8aa0dba95036b7d4a7b77884b1b0aaa3a4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/69d8dd3da9ebc66fe308e109b49744dc2c862d1d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/69d8dd3da9ebc66fe308e109b49744dc2c862d1d","html_url":"https://github.com/apache/openjpa/commit/69d8dd3da9ebc66fe308e109b49744dc2c862d1d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/69d8dd3da9ebc66fe308e109b49744dc2c862d1d/comments","author":null,"committer":null,"parents":[{"sha":"d0bca27ecda3ec2021c614b6746fe3d36bcfefd8","url":"https://api.github.com/repos/apache/openjpa/commits/d0bca27ecda3ec2021c614b6746fe3d36bcfefd8","html_url":"https://github.com/apache/openjpa/commit/d0bca27ecda3ec2021c614b6746fe3d36bcfefd8"}],"stats":{"total":50,"additions":35,"deletions":15},"files":[{"sha":"5da7db4d99f93f23da175a52d6297a7ed9899b6f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataGenerator.java","status":"modified","additions":31,"deletions":11,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/69d8dd3da9ebc66fe308e109b49744dc2c862d1d/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/69d8dd3da9ebc66fe308e109b49744dc2c862d1d/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataGenerator.java?ref=69d8dd3da9ebc66fe308e109b49744dc2c862d1d","patch":"@@ -24,6 +24,8 @@\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.enhance.PCDataGenerator;\n import org.apache.openjpa.kernel.AbstractPCData;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.kernel.StoreContext;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n@@ -72,14 +74,15 @@ protected void finish(DynamicPCData data, ClassMetaData meta) {\n     protected void decorate(BCClass bc, ClassMetaData meta) {\n         enhanceToData(bc);\n         enhanceToNestedData(bc);\n-        replaceToEmbeddedData(bc);\n+        replaceNewEmbeddedPCData(bc);\n         addSynchronization(bc);\n         addTimeout(bc);\n     }\n \n     private void enhanceToData(BCClass bc) {\n         BCMethod meth = bc.declareMethod(\"toData\", Object.class,\n-            new Class []{ FieldMetaData.class, Object.class });\n+            new Class []{ FieldMetaData.class, Object.class, \n+            StoreContext.class });\n         Code code = meth.getCode(true);\n         // if (fmd.isLRS ()))\n         // \t\treturn NULL;\n@@ -89,20 +92,23 @@ private void enhanceToData(BCClass bc) {\n         JumpInstruction ifins = code.ifeq();\n         code.getstatic().setField(AbstractPCData.class, \"NULL\", Object.class);\n         code.areturn();\n-        // super.toData (fmd, val);\n+        // super.toData (fmd, val, ctx);\n         ifins.setTarget(code.aload().setThis());\n         code.aload().setParam(0);\n         code.aload().setParam(1);\n+        code.aload().setParam(2);\n         code.invokespecial().setMethod(AbstractPCData.class, \"toData\",\n-            Object.class, new Class[]{ FieldMetaData.class, Object.class });\n+            Object.class, new Class[]{ FieldMetaData.class, Object.class,\n+            StoreContext.class });\n         code.areturn();\n         code.calculateMaxStack();\n         code.calculateMaxLocals();\n     }\n \n     private void enhanceToNestedData(BCClass bc) {\n         BCMethod meth = bc.declareMethod(\"toNestedData\", Object.class,\n-            new Class []{ ValueMetaData.class, Object.class });\n+            new Class []{ ValueMetaData.class, Object.class, \n+            StoreContext.class });\n         Code code = meth.getCode(true);\n \n         // if (val == null)\n@@ -122,7 +128,7 @@ private void enhanceToNestedData(BCClass bc) {\n         // if (type != JavaTypes.COLLECTION &&\n         // \t   type != JavaTypes.MAP &&\n         // \t   type != JavaTypes.ARRAY)\n-        // \t   return super.toNestedData (type, val, embedded);\n+        // \t   return super.toNestedData(type, val, ctx);\n         // \telse\n         // \t\treturn NULL;\n         Collection jumps = new ArrayList(3);\n@@ -138,8 +144,10 @@ private void enhanceToNestedData(BCClass bc) {\n         code.aload().setThis();\n         code.aload().setParam(0);\n         code.aload().setParam(1);\n+        code.aload().setParam(2);\n         code.invokespecial().setMethod(AbstractPCData.class, \"toNestedData\",\n-            Object.class, new Class[]{ ValueMetaData.class, Object.class });\n+            Object.class, new Class[]{ ValueMetaData.class, Object.class,\n+            StoreContext.class });\n         code.areturn();\n         setTarget(code.getstatic().setField\n             (AbstractPCData.class, \"NULL\", Object.class), jumps);\n@@ -148,12 +156,24 @@ private void enhanceToNestedData(BCClass bc) {\n         code.calculateMaxLocals();\n     }\n \n-    private void replaceToEmbeddedData(BCClass bc) {\n-        BCMethod meth = bc.declareMethod(\"toEmbeddedData\", Object.class,\n-            new Class[]{ Object.class });\n+    private void replaceNewEmbeddedPCData(BCClass bc) {\n+        BCMethod meth = bc.declareMethod(\"newEmbeddedPCData\", \n+            AbstractPCData.class, new Class[]{ OpenJPAStateManager.class });\n         Code code = meth.getCode(true);\n-        code.getstatic().setField(AbstractPCData.class, \"NULL\", Object.class);\n+\n+        // return new DataCachePCDataImpl(sm.getObjectId(), sm.getMetaData());\n+        code.anew().setType(DataCachePCDataImpl.class);\n+        code.dup();\n+        code.aload().setParam(0);\n+        code.invokeinterface().setMethod(OpenJPAStateManager.class, \"getId\", \n+            Object.class, null);\n+        code.aload().setParam(0);\n+        code.invokeinterface().setMethod(OpenJPAStateManager.class, \n+            \"getMetaData\", ClassMetaData.class, null);\n+        code.invokespecial().setMethod(DataCachePCDataImpl.class, \"<init>\",\n+            void.class, new Class[] { Object.class, ClassMetaData.class });\n         code.areturn();\n+\n         code.calculateMaxLocals();\n         code.calculateMaxStack();\n     }"},{"sha":"0d2207f1aa43b6d5c57c87d0a70b798b91d16a2f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/69d8dd3da9ebc66fe308e109b49744dc2c862d1d/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataImpl.java","raw_url":"https://github.com/apache/openjpa/raw/69d8dd3da9ebc66fe308e109b49744dc2c862d1d/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataImpl.java?ref=69d8dd3da9ebc66fe308e109b49744dc2c862d1d","patch":"@@ -18,6 +18,7 @@\n import java.util.BitSet;\n \n import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.kernel.AbstractPCData;\n import org.apache.openjpa.kernel.PCData;\n import org.apache.openjpa.kernel.PCDataImpl;\n import org.apache.openjpa.kernel.StoreContext;\n@@ -138,8 +139,7 @@ protected Object toNestedData(ValueMetaData vmd, Object val,\n         }\n     }\n \n-    protected Object toEmbeddedData(Object val) {\n-        // don't try to cache embedded pcs until we do some testing\n-        return NULL;\n+    public AbstractPCData newEmbeddedPCData(OpenJPAStateManager sm) {\n+        return new DataCachePCDataImpl(sm.getId(), sm.getMetaData());\n     }\n }"},{"sha":"e192b76a8fa142299808029199e519fd6b59d418","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCData.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/69d8dd3da9ebc66fe308e109b49744dc2c862d1d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCData.java","raw_url":"https://github.com/apache/openjpa/raw/69d8dd3da9ebc66fe308e109b49744dc2c862d1d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCData.java?ref=69d8dd3da9ebc66fe308e109b49744dc2c862d1d","patch":"@@ -100,5 +100,5 @@ public void load(OpenJPAStateManager sm, BitSet fields,\n     /**\n      * Whether the given field index has stored data.\n      */\n-    public boolean isLoaded (int i);\n+    public boolean isLoaded(int i);\n }"}]}

