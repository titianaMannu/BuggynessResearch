{"sha":"6a26ae253154f94e39fbc686f636d8fb4a47d08c","node_id":"MDY6Q29tbWl0MjA2MzY0OjZhMjZhZTI1MzE1NGY5NGUzOWZiYzY4NmY2MzZkOGZiNGE0N2QwOGM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-29T18:26:15Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-29T18:26:15Z"},"message":"OPENJPA-399 committing Teresa's patch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@589788 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8c6e71cd2c43793bf0f05e49b8fe2a5b03535a46","url":"https://api.github.com/repos/apache/openjpa/git/trees/8c6e71cd2c43793bf0f05e49b8fe2a5b03535a46"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6a26ae253154f94e39fbc686f636d8fb4a47d08c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6a26ae253154f94e39fbc686f636d8fb4a47d08c","html_url":"https://github.com/apache/openjpa/commit/6a26ae253154f94e39fbc686f636d8fb4a47d08c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6a26ae253154f94e39fbc686f636d8fb4a47d08c/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"2f2e39991d5c6485183d03c3d1051f4fb5ce0ee9","url":"https://api.github.com/repos/apache/openjpa/commits/2f2e39991d5c6485183d03c3d1051f4fb5ce0ee9","html_url":"https://github.com/apache/openjpa/commit/2f2e39991d5c6485183d03c3d1051f4fb5ce0ee9"}],"stats":{"total":40,"additions":33,"deletions":7},"files":[{"sha":"25b2bd67b1f5b7a2ff0c838708803c217eb715ff","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/6a26ae253154f94e39fbc686f636d8fb4a47d08c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/6a26ae253154f94e39fbc686f636d8fb4a47d08c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java?ref=6a26ae253154f94e39fbc686f636d8fb4a47d08c","patch":"@@ -235,16 +235,15 @@ public void addSchema(ClassMapping mapping, SchemaGroup group) {\n                 schema = group.addSchema(schemaName);\n             \n             schema.importTable(_pkColumn.getTable());\n-            // build the index for the sequence tables\n-            // the index name will the fully qualified table name +_IDX\n-            Table tab = schema.getTable(_table); \n-            Index idx = tab.addIndex(tab.getFullName()+\"_IDX\");\n-            idx.setUnique(true);\n             // we need to reset the table name in the column with the\n             // fully qualified name for matching the table name from the\n             // Column.\n-            _pkColumn.resetTableName(schemaName+\".\"+_pkColumn.getTableName());\n-            idx.addColumn(_pkColumn);       \n+            _pkColumn.resetTableName(schemaName + \".\"\n+                    + _pkColumn.getTableName());\n+            // some databases require to create an index for the sequence table\n+            _conf.getDBDictionaryInstance().createIndexIfNecessary(schema,\n+                    _table, _pkColumn);\n+         \n         }\n     }\n "},{"sha":"ec9ea34afc0abb1d6637df85977d50839331d080","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/6a26ae253154f94e39fbc686f636d8fb4a47d08c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/6a26ae253154f94e39fbc686f636d8fb4a47d08c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=6a26ae253154f94e39fbc686f636d8fb4a47d08c","patch":"@@ -31,12 +31,17 @@\n import org.apache.openjpa.jdbc.kernel.exps.Lit;\r\n import org.apache.openjpa.jdbc.kernel.exps.Param;\r\n import org.apache.openjpa.jdbc.kernel.exps.Val;\r\n+import org.apache.openjpa.jdbc.schema.Column;\r\n+import org.apache.openjpa.jdbc.schema.Index;\r\n+import org.apache.openjpa.jdbc.schema.Schema;\r\n import org.apache.openjpa.jdbc.schema.Sequence;\r\n+import org.apache.openjpa.jdbc.schema.Table;\r\n import org.apache.openjpa.kernel.Filters;\r\n import org.apache.openjpa.lib.util.Localizer;\r\n import org.apache.openjpa.meta.JavaTypes;\r\n import org.apache.openjpa.util.OpenJPAException;\r\n import org.apache.openjpa.util.UnsupportedException;\r\n+\r\n import serp.util.Strings;\r\n \r\n /**\r\n@@ -771,4 +776,19 @@ public void appendCast(SQLBuffer buf, FilterValue val, int type) {\n             }\r\n         }\r\n     }\r\n+\r\n+    /**\r\n+     * Create an index if necessary for some database tables\r\n+     */\r\n+    public void createIndexIfNecessary(Schema schema, String table,\r\n+            Column pkColumn) {\r\n+        if (isDB2ZOSV8xOrLater()) {\r\n+            // build the index for the sequence tables\r\n+            // the index name will the fully qualified table name + _IDX\r\n+            Table tab = schema.getTable(table);\r\n+            Index idx = tab.addIndex(tab.getFullName() + \"_IDX\");\r\n+            idx.setUnique(true);\r\n+            idx.addColumn(pkColumn);\r\n+        }\r\n+    }\r\n }\r"},{"sha":"9981eb7c6ca40b1c8d644d070bb9ba69de8e6890","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/6a26ae253154f94e39fbc686f636d8fb4a47d08c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/6a26ae253154f94e39fbc686f636d8fb4a47d08c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=6a26ae253154f94e39fbc686f636d8fb4a47d08c","patch":"@@ -4108,4 +4108,11 @@ protected long copy(Reader reader, Writer writer) throws IOException {\n     public String getCastFunction(Val val, String func) {\n         return func;\n     }\n+    \n+    /**\n+     * Create an index if necessary for some database tables\n+     */\n+    public void createIndexIfNecessary(Schema schema, String table,\n+            Column pkColumn) {\n+    }\n }"}]}

