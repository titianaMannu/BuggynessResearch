{"sha":"6a47c4c03328689d1133c1a46c1f5d20b56549b9","node_id":"MDY6Q29tbWl0MjA2MzY0OjZhNDdjNGMwMzMyODY4OWQxMTMzYzFhNDZjMWY1ZDIwYjU2NTQ5Yjk=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2021-03-30T22:29:51Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2021-03-30T22:29:51Z"},"message":"OPENJPA-1303 ColumnDefIdentifierRule did not use invalidColumnWordSet","tree":{"sha":"f81c2fe534fb03e4fd2918c9e89a7a464497b04c","url":"https://api.github.com/repos/apache/openjpa/git/trees/f81c2fe534fb03e4fd2918c9e89a7a464497b04c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6a47c4c03328689d1133c1a46c1f5d20b56549b9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6a47c4c03328689d1133c1a46c1f5d20b56549b9","html_url":"https://github.com/apache/openjpa/commit/6a47c4c03328689d1133c1a46c1f5d20b56549b9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6a47c4c03328689d1133c1a46c1f5d20b56549b9/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"80a16896f1ec27c388dca12df7fadd5a30e49530","url":"https://api.github.com/repos/apache/openjpa/commits/80a16896f1ec27c388dca12df7fadd5a30e49530","html_url":"https://github.com/apache/openjpa/commit/80a16896f1ec27c388dca12df7fadd5a30e49530"}],"stats":{"total":42,"additions":20,"deletions":22},"files":[{"sha":"65916593a92943c8ffd5b8e8f4584c0323e93ace","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/ColumnDefIdentifierRule.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/6a47c4c03328689d1133c1a46c1f5d20b56549b9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/ColumnDefIdentifierRule.java","raw_url":"https://github.com/apache/openjpa/raw/6a47c4c03328689d1133c1a46c1f5d20b56549b9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/ColumnDefIdentifierRule.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/identifier/ColumnDefIdentifierRule.java?ref=6a47c4c03328689d1133c1a46c1f5d20b56549b9","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.openjpa.jdbc.identifier;\n \n+import java.util.Set;\n+\n import org.apache.openjpa.jdbc.identifier.DBIdentifier.DBIdentifierType;\n \n /**\n@@ -30,9 +32,8 @@\n  */\n public class ColumnDefIdentifierRule extends DBIdentifierRule {\n \n-    public ColumnDefIdentifierRule() {\n-        super();\n-        setName(DBIdentifierType.COLUMN_DEFINITION.toString());\n+    public ColumnDefIdentifierRule(Set<String> reservedWords) {\n+        super(DBIdentifierType.COLUMN, reservedWords);\n         // Disable auto delimiting of column definition.\n         setCanDelimit(false);\n     }"},{"sha":"5d732307e7d4f81d0a8b9f37af085d1926dc7661","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":14,"deletions":13,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/6a47c4c03328689d1133c1a46c1f5d20b56549b9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/6a47c4c03328689d1133c1a46c1f5d20b56549b9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=6a47c4c03328689d1133c1a46c1f5d20b56549b9","patch":"@@ -516,9 +516,21 @@ public DBDictionary() {\n             \"TINYINT\",\n         }));\n \n+        // initialize the set of reserved SQL92 words from resource\n+        reservedWordSet.addAll(loadFromResource(\"sql-keywords.rsrc\"));\n+\n         selectWordSet.add(\"SELECT\");\n     }\n \n+    private Collection<String> loadFromResource(String resourcename) {\n+        try (InputStream in = DBDictionary.class.getResourceAsStream(resourcename)) {\n+            String keywords = new BufferedReader(new InputStreamReader(in)).readLine();\n+            return Arrays.asList(StringUtil.split(keywords, \",\", 0));\n+        } catch (IOException ioe) {\n+            throw new GeneralException(ioe);\n+        }\n+    }\n+\n     /**\n      * This method is called when the dictionary first sees any connection.\n      * It is used to initialize dictionary metadata if needed. If you\n@@ -598,7 +610,7 @@ protected void configureNamingRules() {\n         // Disable delimiting of column definition.  DB platforms are very\n         // picky about delimiters in column definitions. Base column types\n         // do not require delimiters and will cause failures if delimited.\n-        DBIdentifierRule cdRule = new ColumnDefIdentifierRule();\n+        DBIdentifierRule cdRule = new ColumnDefIdentifierRule(invalidColumnWordSet);\n         cdRule.setCanDelimit(false);\n         namingRules.put(cdRule.getName(), cdRule);\n     }\n@@ -5026,17 +5038,6 @@ public void startConfiguration() {\n \n     @Override\n     public void endConfiguration() {\n-        // initialize the set of reserved SQL92 words from resource\n-        InputStream in = DBDictionary.class.getResourceAsStream(\"sql-keywords.rsrc\");\n-        try {\n-            String keywords = new BufferedReader(new InputStreamReader(in)).readLine();\n-            reservedWordSet.addAll(Arrays.asList(StringUtil.split(keywords, \",\", 0)));\n-        } catch (IOException ioe) {\n-            throw new GeneralException(ioe);\n-        } finally {\n-            try { in.close(); } catch (IOException e) {}\n-        }\n-\n         // add additional reserved words set by user\n         if (reservedWords != null)\n             reservedWordSet.addAll(Arrays.asList(StringUtil.split(reservedWords.toUpperCase(Locale.ENGLISH), \",\", 0)));\n@@ -5061,7 +5062,7 @@ public void endConfiguration() {\n             selectWordSet.addAll(Arrays.asList(StringUtil.split(selectWords.toUpperCase(Locale.ENGLISH), \",\", 0)));\n \n         if (invalidColumnWordSet.isEmpty()) {\n-            invalidColumnWordSet.addAll(reservedWordSet);\n+            invalidColumnWordSet.addAll(loadFromResource(\"sql-invalid-column-names.rsrc\"));\n         }\n \n         // initialize the error codes"},{"sha":"c50ccb126e4cadd6183c214843bf75ba77bbefd3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/6a47c4c03328689d1133c1a46c1f5d20b56549b9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/6a47c4c03328689d1133c1a46c1f5d20b56549b9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java?ref=6a47c4c03328689d1133c1a46c1f5d20b56549b9","patch":"@@ -81,11 +81,6 @@ public SQLServerDictionary() {\n         timeWithZoneTypeName = \"TIME\";\n         timestampWithZoneTypeName = \"DATETIMEOFFSET\";\n \n-        // MS SQL Server uses those types for BLOBs\n-        blobTypeName = \"VARBINARY(MAX)\";\n-        longVarbinaryTypeName = \"VARBINARY(MAX)\";\n-\n-\n         indexPhysicalForeignKeys = true; // MS-SQLServer does not automatically create an index for a foreign key so we will\n     }\n "},{"sha":"22adb5764f114d4b253d4a684d30697d1fa4d70d","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-invalid-column-names.rsrc","status":"added","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/6a47c4c03328689d1133c1a46c1f5d20b56549b9/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-invalid-column-names.rsrc","raw_url":"https://github.com/apache/openjpa/raw/6a47c4c03328689d1133c1a46c1f5d20b56549b9/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-invalid-column-names.rsrc","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/sql-invalid-column-names.rsrc?ref=6a47c4c03328689d1133c1a46c1f5d20b56549b9","patch":"@@ -0,0 +1 @@\n+ACCESS,ADD,ALL,ALTER,AND,ANY,AS,ASC,AUDIT,BETWEEN,BY,CHAR,CHECK,COLUMN,COMMENT,CREATE,DATE,DECIMAL,DEFAULT,DELETE,DESC,DISTINCT,DROP,ELSE,EXISTS,FLOAT,FOR,FROM,GROUP,HAVING,IDENTIFIED,IN,INCREMENT,INDEX,INSERT,INTEGER,INTO,LIKE,LOCK,LONG,MINUS,NOT,NULL,NUMBER,OR,ORDER,SELECT,SESSION,SET,SIZE,SMALLINT,TABLE,THEN,TO,UNION,UNIQUE,UPDATE,USER,VALUES,VARCHAR,VIEW,WHERE,WITH\n\\ No newline at end of file"},{"sha":"e440a3b2d012d5a0ab87b9c03cf1cfe7f98ee622","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/dynamicschema/TestDynamicSchemas.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6a47c4c03328689d1133c1a46c1f5d20b56549b9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/dynamicschema/TestDynamicSchemas.java","raw_url":"https://github.com/apache/openjpa/raw/6a47c4c03328689d1133c1a46c1f5d20b56549b9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/dynamicschema/TestDynamicSchemas.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/dynamicschema/TestDynamicSchemas.java?ref=6a47c4c03328689d1133c1a46c1f5d20b56549b9","patch":"@@ -232,7 +232,7 @@ private void validateColumnNames(Table table, DBDictionary dict) {\n         for (Column column : columns) {\n             assertTrue(column.getName().length() > 0);\n             assertTrue(column.getName().length() <= dict.maxColumnNameLength);\n-            assertFalse(dict.getInvalidColumnWordSet().\n+            assertFalse(\"Column\" + column.getName(), dict.getInvalidColumnWordSet().\n                 contains(column.getName().toUpperCase()));\n         }\n     }"}]}

