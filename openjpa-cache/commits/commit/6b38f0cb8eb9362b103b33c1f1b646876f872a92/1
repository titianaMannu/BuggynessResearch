{"sha":"6b38f0cb8eb9362b103b33c1f1b646876f872a92","node_id":"MDY6Q29tbWl0MjA2MzY0OjZiMzhmMGNiOGViOTM2MmIxMDNiMzNjMWYxYjY0Njg3NmY4NzJhOTI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-06-09T23:04:48Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-06-09T23:04:48Z"},"message":"OPENJPA-1678: delete tests which write to log files\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@953182 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d45682ca596055bc0af9c9638707cd6ef9f2b9bb","url":"https://api.github.com/repos/apache/openjpa/git/trees/d45682ca596055bc0af9c9638707cd6ef9f2b9bb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6b38f0cb8eb9362b103b33c1f1b646876f872a92","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6b38f0cb8eb9362b103b33c1f1b646876f872a92","html_url":"https://github.com/apache/openjpa/commit/6b38f0cb8eb9362b103b33c1f1b646876f872a92","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6b38f0cb8eb9362b103b33c1f1b646876f872a92/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"323ebee840e6274e3023ce20417c13dc738c6d2d","url":"https://api.github.com/repos/apache/openjpa/commits/323ebee840e6274e3023ce20417c13dc738c6d2d","html_url":"https://github.com/apache/openjpa/commit/323ebee840e6274e3023ce20417c13dc738c6d2d"}],"stats":{"total":75,"additions":0,"deletions":75},"files":[{"sha":"9267d7d3b9b4030d0ba60e3458ff3610350bd74c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestParameterLogging.java","status":"modified","additions":0,"deletions":75,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/6b38f0cb8eb9362b103b33c1f1b646876f872a92/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestParameterLogging.java","raw_url":"https://github.com/apache/openjpa/raw/6b38f0cb8eb9362b103b33c1f1b646876f872a92/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestParameterLogging.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestParameterLogging.java?ref=6b38f0cb8eb9362b103b33c1f1b646876f872a92","patch":"@@ -107,79 +107,4 @@ public void testParamsEnabledByConfig() {\n             nested = nested.getCause();\n         }\n     }\n-\n-    /*\n-     * If the EMF is created with PrintParameters=false and trace is enabled for SQL the parameter values will not be\n-     * logged in exception text.\n-     */\n-    public void testParamsDisbledWithLogging() throws Exception {\n-        RollbackException e =\n-            getRollbackException(PObject.class, CLEAR_TABLES, \"openjpa.ConnectionFactoryProperties\",\n-                \"PrintParameters=false\", \"openjpa.Log\", \"SQL=TRACE,File=temp.txt\");\n-        assertFalse(Pattern.matches(_regex, e.toString()));\n-        Throwable nested = e.getCause();\n-        assertNotNull(nested); // should be at least one nested exception\n-        while (nested != null) {\n-            if (Pattern.matches(\".*INSERT.*\", nested.toString())) {\n-                // only check if the message contains the insert statement.\n-                assertFalse(Pattern.matches(_regex, nested.toString()));\n-            }\n-            nested = nested.getCause();\n-        }\n-        checkAndDeleteLogFile(\"temp.txt\", false);\n-    }\n-\n-    /*\n-     * If the EMF is created with PrintParameters=false and trace is enabled for SQL the parameter values will not be\n-     * logged in exception text.\n-     */\n-    public void testParamsEnabledWithLogging() throws Exception {\n-        RollbackException e =\n-            getRollbackException(PObject.class, CLEAR_TABLES, \"openjpa.ConnectionFactoryProperties\",\n-                \"PrintParameters=true\", \"openjpa.Log\", \"SQL=TRACE,File=temp.txt\");\n-        assertFalse(Pattern.matches(_regex, e.toString()));\n-        Throwable nested = e.getCause();\n-        assertNotNull(nested); // should be at least one nested exception\n-        while (nested != null) {\n-            if (Pattern.matches(\".*INSERT.*\", nested.toString())) {\n-                // only check if the message contains the insert statement.\n-                assertTrue(Pattern.matches(_regex, nested.toString()));\n-            }\n-            nested = nested.getCause();\n-        }\n-        checkAndDeleteLogFile(\"temp.txt\", true);\n-    }\n-\n-    private void checkAndDeleteLogFile(String filename, boolean containsParams) throws Exception {\n-        File f = null;\n-        FileReader fr = null;\n-        BufferedReader br = null;\n-        try {\n-            f = new File(filename);\n-            fr = new FileReader(f);\n-            br = new BufferedReader(fr);\n-\n-            String s = br.readLine();\n-            while (s != null) {\n-                if (Pattern.matches(\".*INSERT.*\", s)) {\n-                    if (containsParams) {\n-                        assertTrue(Pattern.matches(_regex, s));\n-                    } else {\n-                        assertFalse(Pattern.matches(_regex, s));\n-                    }\n-                }\n-                s = br.readLine();\n-            }\n-        } finally {\n-            if (br != null) {\n-                br.close();\n-            }\n-            if (fr != null) {\n-                fr.close();\n-            }\n-            if (f != null) {\n-                f.delete();\n-            }\n-        }\n-    }\n }"}]}

