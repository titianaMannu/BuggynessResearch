{"sha":"6b40e7268302db484c11e3d69324f4e3fd12819e","node_id":"MDY6Q29tbWl0MjA2MzY0OjZiNDBlNzI2ODMwMmRiNDg0YzExZTNkNjkzMjRmNGUzZmQxMjgxOWU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-03-16T22:36:50Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-03-16T22:36:50Z"},"message":"OPENJPA-981: replicate parent-child relation across slices and not only to root slice\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@755031 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4ed9d6ac9a7676793e135b8fcfc632b6a9e6e72c","url":"https://api.github.com/repos/apache/openjpa/git/trees/4ed9d6ac9a7676793e135b8fcfc632b6a9e6e72c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6b40e7268302db484c11e3d69324f4e3fd12819e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6b40e7268302db484c11e3d69324f4e3fd12819e","html_url":"https://github.com/apache/openjpa/commit/6b40e7268302db484c11e3d69324f4e3fd12819e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6b40e7268302db484c11e3d69324f4e3fd12819e/comments","author":null,"committer":null,"parents":[{"sha":"29a2d30a8a3af9ee28cf132f59732f3b061d0964","url":"https://api.github.com/repos/apache/openjpa/commits/29a2d30a8a3af9ee28cf132f59732f3b061d0964","html_url":"https://github.com/apache/openjpa/commit/29a2d30a8a3af9ee28cf132f59732f3b061d0964"}],"stats":{"total":252,"additions":251,"deletions":1},"files":[{"sha":"61b1ce069953c14a1f38f947b5604d6b98676780","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBrokerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6b40e7268302db484c11e3d69324f4e3fd12819e/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/6b40e7268302db484c11e3d69324f4e3fd12819e/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBrokerImpl.java?ref=6b40e7268302db484c11e3d69324f4e3fd12819e","patch":"@@ -69,7 +69,7 @@ public OpenJPAStateManager persist(Object pc, Object id, boolean explicit,\n \t\t\tOpCallbacks call) {\r\n \t\tOpenJPAStateManager sm = getStateManager(pc);\r\n \t\tSliceInfo info = null;\r\n-\t\tboolean replicated = SliceImplHelper.isReplicated(sm);\r\n+\t\tboolean replicated = SliceImplHelper.isReplicated(pc, getConfiguration());\r\n \t\tif (getOperatingSet().isEmpty()\t&& !SliceImplHelper.isSliceAssigned(sm)) {\r\n \t\t\tinfo = SliceImplHelper.getSlicesByPolicy(pc, getConfiguration(), \r\n \t\t\t\tthis);\r"},{"sha":"006681d70e25e6e0a2bb89526feacee520e7987a","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/ReplicatedChild.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/6b40e7268302db484c11e3d69324f4e3fd12819e/openjpa-slice/src/test/java/org/apache/openjpa/slice/ReplicatedChild.java","raw_url":"https://github.com/apache/openjpa/raw/6b40e7268302db484c11e3d69324f4e3fd12819e/openjpa-slice/src/test/java/org/apache/openjpa/slice/ReplicatedChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/ReplicatedChild.java?ref=6b40e7268302db484c11e3d69324f4e3fd12819e","patch":"@@ -0,0 +1,52 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.slice;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToOne;\r\n+\r\n+import org.apache.openjpa.persistence.Replicated;\r\n+\r\n+@Entity\r\n+@Replicated\r\n+public class ReplicatedChild {\r\n+    @Id \r\n+    private String name;\r\n+    \r\n+    @ManyToOne\r\n+    private ReplicatedParent parent;\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+    \r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+    \r\n+    public ReplicatedParent getParent() {\r\n+        return parent;\r\n+    }\r\n+    \r\n+    void setParent(ReplicatedParent parent) {\r\n+        this.parent = parent;\r\n+    }\r\n+\r\n+}\r"},{"sha":"9ba912f0fb5fc9483e4b9cd8739ad4b50fad41a9","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/ReplicatedParent.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/6b40e7268302db484c11e3d69324f4e3fd12819e/openjpa-slice/src/test/java/org/apache/openjpa/slice/ReplicatedParent.java","raw_url":"https://github.com/apache/openjpa/raw/6b40e7268302db484c11e3d69324f4e3fd12819e/openjpa-slice/src/test/java/org/apache/openjpa/slice/ReplicatedParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/ReplicatedParent.java?ref=6b40e7268302db484c11e3d69324f4e3fd12819e","patch":"@@ -0,0 +1,55 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.slice;\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import org.apache.openjpa.persistence.Replicated;\r\n+\r\n+@Entity\r\n+@Replicated\r\n+public class ReplicatedParent {\r\n+    @Id \r\n+    private String name;\r\n+    \r\n+    @OneToMany(mappedBy=\"parent\", cascade=CascadeType.ALL)\r\n+    private Set<ReplicatedChild> children;\r\n+    \r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+    \r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+    \r\n+    public Set<ReplicatedChild> getChildren() {\r\n+        return children;\r\n+    }\r\n+    \r\n+    public void addChild(ReplicatedChild child) {\r\n+        if (children == null)\r\n+            children = new HashSet<ReplicatedChild>();\r\n+        children.add(child);\r\n+        child.setParent(this);\r\n+    }\r\n+}\r"},{"sha":"665d5acd557ad6401737f17cc6674014db4981c1","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/TestReplication.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/6b40e7268302db484c11e3d69324f4e3fd12819e/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestReplication.java","raw_url":"https://github.com/apache/openjpa/raw/6b40e7268302db484c11e3d69324f4e3fd12819e/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestReplication.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestReplication.java?ref=6b40e7268302db484c11e3d69324f4e3fd12819e","patch":"@@ -0,0 +1,118 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.slice;\r\n+\r\n+import java.util.Set;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+/**\r\n+ * Tests that parent-child relation both @Repliated are stored in all replicated\r\n+ * slices.\r\n+ * \r\n+ * <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-981\">OPENJPA-981</A>\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+public class TestReplication extends SingleEMFTestCase {\r\n+    private static int CHILD_COUNT = 3;\r\n+\r\n+    public void setUp() {\r\n+        super.setUp(CLEAR_TABLES);\r\n+        createData();\r\n+    }\r\n+\r\n+    protected String getPersistenceUnitName() {\r\n+        return \"replication\";\r\n+    }\r\n+    \r\n+    void createData() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        ReplicatedParent parent = new ReplicatedParent();\r\n+        parent.setName(\"parent\");\r\n+        for (int i = 0; i < CHILD_COUNT; i++) {\r\n+            ReplicatedChild child = new ReplicatedChild();\r\n+            child.setName(\"child-\" + i);\r\n+            parent.addChild(child);\r\n+        }\r\n+        em.persist(parent);\r\n+        em.getTransaction().commit();\r\n+        em.clear();\r\n+    }\r\n+    \r\n+    public void testPersistInReplicatedSlices() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+\r\n+        String jpql = \"select p from ReplicatedParent p where p.name=:name\";\r\n+        ReplicatedParent pOne = (ReplicatedParent) em.createQuery(jpql)\r\n+            .setParameter(\"name\", \"parent\")\r\n+            .setHint(SlicePersistence.HINT_TARGET, \"One\")\r\n+            .getSingleResult();\r\n+        assertNotNull(pOne);\r\n+\r\n+        assertEquals(\"[One, Two]\", SlicePersistence.getSlice(pOne));\r\n+\r\n+        ReplicatedParent pTwo = (ReplicatedParent) em.createQuery(jpql)\r\n+            .setParameter(\"name\", \"parent\")\r\n+            .setHint(SlicePersistence.HINT_TARGET, \"Two\")\r\n+            .getSingleResult();\r\n+        assertNotNull(pTwo);\r\n+        assertEquals(\"[One, Two]\", SlicePersistence.getSlice(pTwo));\r\n+\r\n+        jpql = \"select p from ReplicatedChild p where p.name=:name\";\r\n+        ReplicatedChild cOne = (ReplicatedChild) em.createQuery(jpql)\r\n+            .setParameter(\"name\", \"child-0\")\r\n+            .setHint(SlicePersistence.HINT_TARGET, \"One\")\r\n+            .getSingleResult();\r\n+        assertNotNull(cOne);\r\n+        ReplicatedChild cTwo = (ReplicatedChild) em.createQuery(jpql)\r\n+            .setParameter(\"name\", \"child-0\")\r\n+            .setHint(SlicePersistence.HINT_TARGET, \"Two\")\r\n+            .getSingleResult();\r\n+        assertNotNull(cTwo);\r\n+    }\r\n+    \r\n+    public void testQuery() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        String jpql = \"select p from ReplicatedParent p where p.name=:name\";\r\n+        ReplicatedParent parent = (ReplicatedParent) em.createQuery(jpql)\r\n+            .setParameter(\"name\", \"parent\")\r\n+            .setHint(SlicePersistence.HINT_TARGET, \"One\")\r\n+            .getSingleResult();\r\n+        assertNotNull(parent);\r\n+        Set<ReplicatedChild> children = parent.getChildren();\r\n+        assertNotNull(children);\r\n+        assertEquals(CHILD_COUNT, children.size());\r\n+    }\r\n+    \r\n+    public void testAggregateQuery() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        String jpql = \"select count(p) from ReplicatedParent p\";\r\n+        long pCount = (Long) em.createQuery(jpql).getSingleResult();\r\n+        assertEquals(1, pCount);\r\n+        \r\n+        jpql = \"select count(p) from ReplicatedChild p\";\r\n+        long cCount = (Long) em.createQuery(jpql).getSingleResult();\r\n+        assertEquals(CHILD_COUNT, cCount);\r\n+    }\r\n+    \r\n+}\r"},{"sha":"82480deccd757677360fa6fda7d9d2bdc8ed9553","filename":"openjpa-slice/src/test/resources/META-INF/persistence.xml","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/6b40e7268302db484c11e3d69324f4e3fd12819e/openjpa-slice/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/6b40e7268302db484c11e3d69324f4e3fd12819e/openjpa-slice/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/resources/META-INF/persistence.xml?ref=6b40e7268302db484c11e3d69324f4e3fd12819e","patch":"@@ -151,4 +151,29 @@\n       </properties>\r\n    </persistence-unit>\r\n    \r\n+   <persistence-unit name=\"replication\">\r\n+   \t  <class>org.apache.openjpa.slice.ReplicatedParent</class>\r\n+   \t  <class>org.apache.openjpa.slice.ReplicatedChild</class>\r\n+   \t  \r\n+      <properties>\r\n+         <property name=\"openjpa.BrokerFactory\" value=\"slice\"/>\r\n+         <property name=\"openjpa.ConnectionDriverName\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\r\n+\r\n+         <property name=\"openjpa.slice.Names\" value=\"One,Two\"/>\r\n+         <property name=\"openjpa.slice.DistributionPolicy\" value=\"org.apache.openjpa.slice.policy.UserDistributionPolicy\"/>\r\n+         \r\n+         <property name=\"openjpa.ConnectionUserName\" value=\"\"/>\r\n+         <property name=\"openjpa.ConnectionPassword\" value=\"\"/>\r\n+         \r\n+         <property name=\"openjpa.slice.One.ConnectionURL\" value=\"jdbc:derby:target/database/openjpa-slice1;create=true\"/>\r\n+         <property name=\"openjpa.slice.Two.ConnectionURL\" value=\"jdbc:derby:target/database/openjpa-slice2;create=true\"/>\r\n+         \r\n+         <property name=\"openjpa.Multithreaded\" value=\"false\"/>\r\n+         <property name=\"openjpa.Log\" value=\"DefaultLevel=INFO, Enhance=TRACE, SQL=TRACE\"/>\r\n+         <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"refresh\"/>\r\n+         <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\r\n+         <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"supported\"/>\r\n+      </properties>\r\n+   </persistence-unit>\r\n+   \r\n </persistence>\r"}]}

