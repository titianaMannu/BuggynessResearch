{"sha":"6ba6ce4e7ea01b1c7d73bcfd01ff0d9bca8d4863","node_id":"MDY6Q29tbWl0MjA2MzY0OjZiYTZjZTRlN2VhMDFiMWM3ZDczYmNmZDAxZmYwZDliY2E4ZDQ4NjM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-22T01:33:40Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-22T01:33:40Z"},"message":"OpenJPA used to rely on being able to implicitly specify a value for a @GeneratedValue field when using an IDENTITY generation strategy. Now that we do not allow that behavior, OpenJPA was failing to generate IDs properly in some cases. Fixed.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.0@568363 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"efe453a17d37f5f8b93f55b5aa8fc8e3bc11290f","url":"https://api.github.com/repos/apache/openjpa/git/trees/efe453a17d37f5f8b93f55b5aa8fc8e3bc11290f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6ba6ce4e7ea01b1c7d73bcfd01ff0d9bca8d4863","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6ba6ce4e7ea01b1c7d73bcfd01ff0d9bca8d4863","html_url":"https://github.com/apache/openjpa/commit/6ba6ce4e7ea01b1c7d73bcfd01ff0d9bca8d4863","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6ba6ce4e7ea01b1c7d73bcfd01ff0d9bca8d4863/comments","author":null,"committer":null,"parents":[{"sha":"ff13fe7b6ad33457aff4302606b22b3b2b43d76d","url":"https://api.github.com/repos/apache/openjpa/commits/ff13fe7b6ad33457aff4302606b22b3b2b43d76d","html_url":"https://github.com/apache/openjpa/commit/ff13fe7b6ad33457aff4302606b22b3b2b43d76d"}],"stats":{"total":200,"additions":200,"deletions":0},"files":[{"sha":"a01899ea30c207740dfcec25303716ed18953c6c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/6ba6ce4e7ea01b1c7d73bcfd01ff0d9bca8d4863/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/6ba6ce4e7ea01b1c7d73bcfd01ff0d9bca8d4863/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedStatementManagerImpl.java?ref=6ba6ce4e7ea01b1c7d73bcfd01ff0d9bca8d4863","patch":"@@ -32,8 +32,10 @@\n import org.apache.openjpa.jdbc.sql.SQLExceptions;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.ApplicationIds;\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.OptimisticException;\n+import org.apache.openjpa.meta.ClassMetaData;\n \n /**\n  * Basic prepared statement manager implementation.\n@@ -119,6 +121,8 @@ else if (row.getAction() == Row.ACTION_INSERT)\n                 mapping.assertJoinable(autoAssign[i]).setAutoAssignedValue(sm,\n                     _store, autoAssign[i], val);\n             }\n+            sm.setObjectId(\n+                ApplicationIds.create(sm.getPersistenceCapable(), mapping));\n         }\n     }\n "},{"sha":"489d2a52dae4f62ffe9a4b1163c15e93d28dbe14","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestDataCachingAndUnenhancedPropertyAccess.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/6ba6ce4e7ea01b1c7d73bcfd01ff0d9bca8d4863/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestDataCachingAndUnenhancedPropertyAccess.java","raw_url":"https://github.com/apache/openjpa/raw/6ba6ce4e7ea01b1c7d73bcfd01ff0d9bca8d4863/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestDataCachingAndUnenhancedPropertyAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestDataCachingAndUnenhancedPropertyAccess.java?ref=6ba6ce4e7ea01b1c7d73bcfd01ff0d9bca8d4863","patch":"@@ -0,0 +1,55 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+import java.util.List;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+public class TestDataCachingAndUnenhancedPropertyAccess\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    @Override\r\n+    public void setUp() {\r\n+        setUp(UnenhancedIdentityIdPropertyAccess.class, CLEAR_TABLES,\r\n+            \"openjpa.DataCache\", \"true\",\r\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n+    }\r\n+\r\n+    public void testSimpleDataCacheOperation() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.persist(new UnenhancedIdentityIdPropertyAccess());\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testAccessIdBeforeCommit() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        UnenhancedIdentityIdPropertyAccess o =\r\n+            new UnenhancedIdentityIdPropertyAccess();\r\n+        em.persist(o);\r\n+        em.getObjectId(o);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"c1088af9870b7ebe6916ca3d015438a38d2b14f8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedIdentityIdPropertyAccess.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/6ba6ce4e7ea01b1c7d73bcfd01ff0d9bca8d4863/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedIdentityIdPropertyAccess.java","raw_url":"https://github.com/apache/openjpa/raw/6ba6ce4e7ea01b1c7d73bcfd01ff0d9bca8d4863/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedIdentityIdPropertyAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedIdentityIdPropertyAccess.java?ref=6ba6ce4e7ea01b1c7d73bcfd01ff0d9bca8d4863","patch":"@@ -0,0 +1,55 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.PrePersist;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+\r\n+@Entity\r\n+public class UnenhancedIdentityIdPropertyAccess {\r\n+\r\n+    private int id;\r\n+    private String stringField;\r\n+\r\n+    public UnenhancedIdentityIdPropertyAccess() {\r\n+    }\r\n+\r\n+    @Id\r\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+}\r"},{"sha":"245915e7089fedf149012a3396ec7633c4b4e63c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/IdentityIdClass.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/6ba6ce4e7ea01b1c7d73bcfd01ff0d9bca8d4863/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/IdentityIdClass.java","raw_url":"https://github.com/apache/openjpa/raw/6ba6ce4e7ea01b1c7d73bcfd01ff0d9bca8d4863/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/IdentityIdClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/IdentityIdClass.java?ref=6ba6ce4e7ea01b1c7d73bcfd01ff0d9bca8d4863","patch":"@@ -0,0 +1,33 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+\r\n+@Entity\r\n+public class IdentityIdClass {\r\n+    @Id\r\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n+    private int id;\r\n+\r\n+    private String stringField;\r\n+}\r"},{"sha":"cc1484690e826382654577884e5445338654eadf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestAutoIncrementAndDataCaching.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/6ba6ce4e7ea01b1c7d73bcfd01ff0d9bca8d4863/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestAutoIncrementAndDataCaching.java","raw_url":"https://github.com/apache/openjpa/raw/6ba6ce4e7ea01b1c7d73bcfd01ff0d9bca8d4863/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestAutoIncrementAndDataCaching.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestAutoIncrementAndDataCaching.java?ref=6ba6ce4e7ea01b1c7d73bcfd01ff0d9bca8d4863","patch":"@@ -0,0 +1,53 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+public class TestAutoIncrementAndDataCaching\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    @Override\r\n+    public void setUp() {\r\n+        setUp(IdentityIdClass.class, CLEAR_TABLES,\r\n+            \"openjpa.DataCache\", \"true\",\r\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n+    }\r\n+\r\n+    public void testSimpleDataCacheOperation() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.persist(new IdentityIdClass());\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testAccessIdBeforeCommit() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        IdentityIdClass o = new IdentityIdClass();\r\n+        em.persist(o);\r\n+        em.getObjectId(o);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+}\n\\ No newline at end of file"}]}

