{"sha":"6c2e3e2d03e22f0d0f9ffc4a35aef186f1070928","node_id":"MDY6Q29tbWl0MjA2MzY0OjZjMmUzZTJkMDNlMjJmMGQwZjlmZmM0YTM1YWVmMTg2ZjEwNzA5Mjg=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-12T21:45:51Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-12T21:45:51Z"},"message":"OPENJPA-1189:\nTry delimited table names if we can't find a match for non-delimited names\nSubmitted by : Dianne Richards\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@803720 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"41c540f9c88090456b844384d9f662dd1e50a9b5","url":"https://api.github.com/repos/apache/openjpa/git/trees/41c540f9c88090456b844384d9f662dd1e50a9b5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6c2e3e2d03e22f0d0f9ffc4a35aef186f1070928","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6c2e3e2d03e22f0d0f9ffc4a35aef186f1070928","html_url":"https://github.com/apache/openjpa/commit/6c2e3e2d03e22f0d0f9ffc4a35aef186f1070928","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6c2e3e2d03e22f0d0f9ffc4a35aef186f1070928/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"a445c1c4bdce6da2493a448459a6ea890ac6273f","url":"https://api.github.com/repos/apache/openjpa/commits/a445c1c4bdce6da2493a448459a6ea890ac6273f","html_url":"https://github.com/apache/openjpa/commit/a445c1c4bdce6da2493a448459a6ea890ac6273f"}],"stats":{"total":176,"additions":94,"deletions":82},"files":[{"sha":"f472b8cfbc4ebe91f56279ee14eec8dcbac23840","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/6c2e3e2d03e22f0d0f9ffc4a35aef186f1070928/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/6c2e3e2d03e22f0d0f9ffc4a35aef186f1070928/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java?ref=6c2e3e2d03e22f0d0f9ffc4a35aef186f1070928","patch":"@@ -404,11 +404,11 @@ private void buildTable() {\n             }\n     \t\tUnique u = table.addUnique(uniqueName);\n     \t\tfor (String columnName : _uniqueColumnNames) {\n-    \t\t\tif (!table.containsColumn(columnName))\n+    \t\t\tif (!table.containsColumn(columnName, _conf.getDBDictionaryInstance()))\n                     throw new UserException(_loc.get(\"unique-missing-column\",\n                             columnName, table.getName(),\n                             table.getColumnNames()));\n-    \t\t\tColumn col = table.getColumn(columnName);\n+    \t\t\tColumn col = table.getColumn(columnName, _conf.getDBDictionaryInstance());\n     \t\t\tu.addColumn(col);\n     \t\t}\n         }"},{"sha":"464c7c6f168276ddd7fb1e0f5ed9b9d1ff955fc8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/6c2e3e2d03e22f0d0f9ffc4a35aef186f1070928/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/6c2e3e2d03e22f0d0f9ffc4a35aef186f1070928/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DynamicSchemaFactory.java?ref=6c2e3e2d03e22f0d0f9ffc4a35aef186f1070928","patch":"@@ -119,10 +119,14 @@ public DynamicTable(String name, Schema schema) {\n         }\n \n         public Column getColumn(String name) {\n+            return getColumn(name, null);\n+        }\n+\n+        public Column getColumn(String name, DBDictionary dict) {\n             if (name == null)\n                 return null;\n \n-            Column col = super.getColumn(name);\n+            Column col = super.getColumn(name, dict);\n             if (col != null)\n                 return col;\n "},{"sha":"7b002c8c139b1e440ff7b083135aac301d56a13f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/6c2e3e2d03e22f0d0f9ffc4a35aef186f1070928/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java","raw_url":"https://github.com/apache/openjpa/raw/6c2e3e2d03e22f0d0f9ffc4a35aef186f1070928/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/ForeignKey.java?ref=6c2e3e2d03e22f0d0f9ffc4a35aef186f1070928","patch":"@@ -769,9 +769,9 @@ public String loadNameFromDB(DBDictionary dbdict, Connection conn) {\n                     fkTemp.setDeleteAction(fks[i].getDeleteAction());\n                 }\n                 if( ! fkTemp.containsColumn(\n-                    localtable.getColumn(fks[i].getColumnName())))\n-                fkTemp.join(localtable.getColumn(fks[i].getColumnName()), \n-                    pkTable.getColumn(fks[i].getPrimaryKeyColumnName()));\n+                    localtable.getColumn(fks[i].getColumnName(), dbdict)))\n+                fkTemp.join(localtable.getColumn(fks[i].getColumnName(), dbdict), \n+                    pkTable.getColumn(fks[i].getPrimaryKeyColumnName(), dbdict));\n                 if( equalsForeignKey(fkTemp))\n                 {\n                     if(addFK)"},{"sha":"1ea48c32b82ab9b61bf949ac9017535a94b72511","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","status":"modified","additions":7,"deletions":12,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/6c2e3e2d03e22f0d0f9ffc4a35aef186f1070928/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/6c2e3e2d03e22f0d0f9ffc4a35aef186f1070928/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java?ref=6c2e3e2d03e22f0d0f9ffc4a35aef186f1070928","patch":"@@ -527,13 +527,8 @@ public void generateTables(String schemaName, String tableName,\n             if (_log.isTraceEnabled())\n                 _log.trace(_loc.get(\"gen-column\", cols[i].getName(), table));\n \n-            if (table.getColumn(cols[i].getName()) == null) {\n-                // It's possible that the original column name was delimited,\n-                // so delimit it and try again\n-                String delimCol = _dict.addDelimiters(cols[i].getName());\n-                if (table.getColumn(delimCol) == null) {\n-                    table.importColumn(cols[i]);\n-                }\n+            if (table.getColumn(cols[i].getName(), _dict) == null) {\n+                table.importColumn(cols[i]);\n             }\n         }\n     }\n@@ -630,7 +625,7 @@ public void generatePrimaryKeys(String schemaName, String tableName,\n             pk = table.getPrimaryKey();\n             if (pk == null)\n                 pk = table.addPrimaryKey(name);\n-            pk.addColumn(table.getColumn(colName));\n+            pk.addColumn(table.getColumn(colName, _dict));\n         }\n     }\n \n@@ -692,7 +687,7 @@ public void generateIndexes(String schemaName, String tableName,\n                 continue;\n \n             colName = idxs[i].getColumnName();\n-            if (table.getColumn(colName) == null)\n+            if (table.getColumn(colName, _dict) == null)\n                 continue;\n \n             if (_log.isTraceEnabled())\n@@ -704,7 +699,7 @@ public void generateIndexes(String schemaName, String tableName,\n                 idx = table.addIndex(name);\n                 idx.setUnique(idxs[i].isUnique());\n             }\n-            idx.addColumn(table.getColumn(colName));\n+            idx.addColumn(table.getColumn(colName, _dict));\n         }\n     }\n \n@@ -804,13 +799,13 @@ public void generateForeignKeys(String schemaName, String tableName,\n \n             if (invalids == null || !invalids.contains(fk)) {\n                 try {\n-                    Column fkCol = table.getColumn(fkColName);\n+                    Column fkCol = table.getColumn(fkColName, _dict);\n                     if (fkCol == null) {\n                         throw new IllegalArgumentException(_loc.get(\n                             \"no-column\", fkColName, table.getName())\n                             .getMessage());\n                     }\n-                    fk.join(fkCol, pkTable.getColumn(pkColName));\n+                    fk.join(fkCol, pkTable.getColumn(pkColName, _dict));\n                 } catch (IllegalArgumentException iae) {\n                     if (_log.isWarnEnabled())\n                         _log.warn(_loc.get(\"bad-join\", iae.toString()));"},{"sha":"c3c364a806e92e1b9591fdee80704b56b9ad9200","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/6c2e3e2d03e22f0d0f9ffc4a35aef186f1070928/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","raw_url":"https://github.com/apache/openjpa/raw/6c2e3e2d03e22f0d0f9ffc4a35aef186f1070928/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java?ref=6c2e3e2d03e22f0d0f9ffc4a35aef186f1070928","patch":"@@ -486,7 +486,7 @@ private void add(SchemaGroup db, SchemaGroup repos)\n                             colName = colName.substring(1, colName.length()-1);\n                             delimCol = true;\n                         }\n-                        col = dbTable.getColumn(colName);\n+                        col = dbTable.getColumn(colName, _dict);\n                         if (col == null) {\n                             if (addColumn(cols[k]))\n                                 dbTable.importColumn(cols[k]);\n@@ -724,7 +724,7 @@ private void retain(SchemaGroup db, SchemaGroup repos, boolean tables,\n                 reposTable = repos.findTable(tabs[j]);\n                 if (reposTable != null) {\n                     for (int k = 0; k < cols.length; k++) {\n-                        col = reposTable.getColumn(cols[k].getName());\n+                        col = reposTable.getColumn(cols[k].getName(), _dict);\n                         if (col == null || !cols[k].equalsColumn(col)) {\n                             if (tabs[j].getColumns().length == 1)\n                                 drops.add(tabs[j]);\n@@ -797,7 +797,7 @@ private void drop(SchemaGroup db, SchemaGroup repos)\n \n                 dbCols = dbTable.getColumns();\n                 for (int k = 0; k < dbCols.length; k++)\n-                    if (tabs[j].getColumn(dbCols[k].getName()) == null)\n+                    if (tabs[j].getColumn(dbCols[k].getName(), _dict) == null)\n                         continue tables;\n \n                 drops.add(tabs[j]);\n@@ -869,7 +869,7 @@ private void drop(SchemaGroup db, SchemaGroup repos)\n                 for (int k = 0; k < cols.length; k++) {\n                     col = null;\n                     if (dbTable != null)\n-                        col = dbTable.getColumn(cols[k].getName());\n+                        col = dbTable.getColumn(cols[k].getName(), _dict);\n                     if (dbTable == null || col == null)\n                         continue;\n "},{"sha":"eb2012ef82e6669277e1a4817df8e0257d318920","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","status":"modified","additions":54,"deletions":3,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/6c2e3e2d03e22f0d0f9ffc4a35aef186f1070928/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","raw_url":"https://github.com/apache/openjpa/raw/6c2e3e2d03e22f0d0f9ffc4a35aef186f1070928/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java?ref=6c2e3e2d03e22f0d0f9ffc4a35aef186f1070928","patch":"@@ -27,6 +27,7 @@\n import java.util.LinkedHashMap;\n \n import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.lib.meta.SourceTracker;\n \n /**\n@@ -272,9 +273,30 @@ public String getResourceName() {\n      * Return the column with the given name, or null if none.\n      */\n     public Column getColumn(String name) {\n+        return getColumn(name, null);\n+    }\n+\n+    /**\n+     * Return the column with the given name, or null if none.\n+     * @param dict the current database dictionary or null.\n+     */\n+    public Column getColumn(String name, DBDictionary dict) {\n         if (name == null || _colMap == null)\n             return null;\n-        return (Column) _colMap.get(name.toUpperCase());\n+        Column col = (Column)_colMap.get(name.toUpperCase());\n+        if (col == null) {\n+            String delim = null;\n+            if (dict != null) {\n+                delim = dict.getDelimiter();\n+            }\n+            else {\n+                delim = \"\\\"\";\n+            }\n+            String delimName = delim + name + delim;\n+            col = (Column) _colMap.get(delimName.toUpperCase());\n+        }\n+        \n+        return col;\n     }\n     \n     /**\n@@ -284,8 +306,37 @@ public Column getColumn(String name) {\n      * for dynamic table implementation.\n      */\n     public boolean containsColumn(String name) {\n-        return name != null && _colMap != null \n-            && _colMap.containsKey(name.toUpperCase());\n+        return containsColumn(name, null);\n+    }\n+\n+    /**\n+     * Affirms if this table contains the column of the given name without any \n+     * side-effect. \n+     * @param dict the current database dictionary or null.\n+     * @see Table#getColumn(String) can have side-effect of creating a column\n+     * for dynamic table implementation.\n+     */\n+    public boolean containsColumn(String name, DBDictionary dict) {\n+        if (name == null || _colMap == null) {\n+            return false;\n+        }\n+        if (_colMap.containsKey(name.toUpperCase())) {\n+            return true;\n+        }\n+        \n+        String delim = null;\n+        if (dict != null) {\n+            delim = dict.getDelimiter();\n+        }\n+        else {\n+            delim = \"\\\"\";\n+        }\n+        String delimName = delim + name + delim;\n+        if (_colMap.containsKey(delimName.toUpperCase())) {\n+            return true;\n+        }\n+        \n+        return false;\n     }\n \n     /**"},{"sha":"6d5e6280658bdc4dd40c10f108d9579f9911f700","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaParser.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/6c2e3e2d03e22f0d0f9ffc4a35aef186f1070928/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaParser.java","raw_url":"https://github.com/apache/openjpa/raw/6c2e3e2d03e22f0d0f9ffc4a35aef186f1070928/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/XMLSchemaParser.java?ref=6c2e3e2d03e22f0d0f9ffc4a35aef186f1070928","patch":"@@ -189,7 +189,7 @@ private void resolvePrimaryKeys() {\n             pkInfo = (PrimaryKeyInfo) itr.next();\n             for (Iterator cols = pkInfo.cols.iterator(); cols.hasNext();) {\n                 colName = (String) cols.next();\n-                col = pkInfo.pk.getTable().getColumn(colName);\n+                col = pkInfo.pk.getTable().getColumn(colName, _dict);\n                 if (col == null)\n                     throwUserException(_loc.get(\"pk-resolve\", new Object[]\n                         { colName, pkInfo.pk.getTable() }));\n@@ -210,7 +210,7 @@ private void resolveIndexes() {\n             indexInfo = (IndexInfo) itr.next();\n             for (Iterator cols = indexInfo.cols.iterator(); cols.hasNext();) {\n                 colName = (String) cols.next();\n-                col = indexInfo.index.getTable().getColumn(colName);\n+                col = indexInfo.index.getTable().getColumn(colName, _dict);\n                 if (col == null)\n                     throwUserException(_loc.get(\"index-resolve\", new Object[]\n                         { indexInfo.index, colName,\n@@ -250,13 +250,13 @@ private void resolveForeignKeys() {\n             pks = fkInfo.pks.iterator();\n             for (cols = fkInfo.cols.iterator(); cols.hasNext();) {\n                 colName = (String) cols.next();\n-                col = fkInfo.fk.getTable().getColumn(colName);\n+                col = fkInfo.fk.getTable().getColumn(colName, _dict);\n                 if (col == null)\n                     throwUserException(_loc.get(\"fk-nocol\",\n                         fkInfo.fk, colName, fkInfo.fk.getTable()));\n \n                 pkColName = (String) pks.next();\n-                pkCol = toTable.getColumn(pkColName);\n+                pkCol = toTable.getColumn(pkColName, _dict);\n                 if (pkCol == null)\n                     throwUserException(_loc.get(\"fk-nopkcol\", new Object[]\n                         { fkInfo.fk, pkColName, toTable,\n@@ -269,7 +269,7 @@ private void resolveForeignKeys() {\n             cols = fkInfo.constCols.iterator();\n             for (Iterator vals = fkInfo.consts.iterator(); vals.hasNext();) {\n                 colName = (String) cols.next();\n-                col = fkInfo.fk.getTable().getColumn(colName);\n+                col = fkInfo.fk.getTable().getColumn(colName, _dict);\n                 if (col == null)\n                     throwUserException(_loc.get(\"fk-nocol\",\n                         fkInfo.fk, colName, fkInfo.fk.getTable()));\n@@ -280,7 +280,7 @@ private void resolveForeignKeys() {\n             pks = fkInfo.constColsPK.iterator();\n             for (Iterator vals = fkInfo.constsPK.iterator(); vals.hasNext();) {\n                 pkColName = (String) pks.next();\n-                pkCol = toTable.getColumn(pkColName);\n+                pkCol = toTable.getColumn(pkColName, _dict);\n                 if (pkCol == null)\n                     throwUserException(_loc.get(\"fk-nopkcol\", new Object[]\n                         { fkInfo.fk, pkColName, toTable,\n@@ -303,7 +303,7 @@ private void resolveUniques() {\n             unqInfo = (UniqueInfo) itr.next();\n             for (Iterator cols = unqInfo.cols.iterator(); cols.hasNext();) {\n                 colName = (String) cols.next();\n-                col = unqInfo.unq.getTable().getColumn(colName);\n+                col = unqInfo.unq.getTable().getColumn(colName, _dict);\n                 if (col == null)\n                     throwUserException(_loc.get(\"unq-resolve\", new Object[]\n                         { unqInfo.unq, colName, unqInfo.unq.getTable() }));"},{"sha":"8d160cbdf6e6323a1fe1e1e6a55e1764ad26b9d8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/TestManualDelimId.java","status":"modified","additions":12,"deletions":50,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/6c2e3e2d03e22f0d0f9ffc4a35aef186f1070928/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/TestManualDelimId.java","raw_url":"https://github.com/apache/openjpa/raw/6c2e3e2d03e22f0d0f9ffc4a35aef186f1070928/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/TestManualDelimId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/delimited/identifiers/TestManualDelimId.java?ref=6c2e3e2d03e22f0d0f9ffc4a35aef186f1070928","patch":"@@ -18,26 +18,16 @@\n  */\n package org.apache.openjpa.persistence.delimited.identifiers;\n \n-import java.sql.Connection;\n-import java.sql.DatabaseMetaData;\n-import java.sql.SQLException;\n import java.util.List;\n-import java.util.Set;\n \n import javax.persistence.Query;\n \n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n-import org.apache.openjpa.jdbc.schema.Column;\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n \n public class TestManualDelimId extends SQLListenerTestCase {\n     OpenJPAEntityManager em;\n-    int id = 0;\n     EntityF entityF;\n-    JDBCConfiguration conf;\n-    DBDictionary dict;\n     \n     @Override\n     public void setUp() throws Exception {\n@@ -48,14 +38,9 @@ public void setUp() throws Exception {\n         \n         em = emf.createEntityManager();\n         assertNotNull(em);\n-        \n-        conf = (JDBCConfiguration) emf.getConfiguration();\n-        dict = conf.getDBDictionaryInstance();\n     }\n \n-    // TODO: remove parameter\n-    public void createEntityF(int id) {\n-//        entityF = new EntityF(id, \"fName\");\n+    public void createEntityF() {\n         entityF = new EntityF(\"fName\");\n         entityF.setNonDelimName(\"fNonDelimName\");\n         entityF.setSecName(\"sec name\");\n@@ -69,40 +54,8 @@ public void createEntityF(int id) {\n         entityF.addDelimCollectionMap(\"yyy\", \"zzz\");\n     }\n     \n-//     TODO: temp - test on multiple DBs\n-//    public void testDBCapability() {\n-//        Connection conn = (Connection)em.getConnection();\n-//        try {\n-//            DatabaseMetaData meta = conn.getMetaData();\n-//            System.out.println(\"LC - \" + \n-//                meta.storesLowerCaseIdentifiers());\n-//            System.out.println(\"LCQ - \" + \n-//                meta.storesLowerCaseQuotedIdentifiers());\n-//            System.out.println(\"MC - \" + \n-//                meta.storesMixedCaseIdentifiers());\n-//            System.out.println(\"MCQ - \" + \n-//                meta.storesMixedCaseQuotedIdentifiers());\n-//            System.out.println(\"UC - \" + \n-//                meta.storesUpperCaseIdentifiers());\n-//            System.out.println(\"UCQ - \" + \n-//                meta.storesUpperCaseQuotedIdentifiers());\n-//            System.out.println(\"\");\n-//            System.out.println(\"db product name - \" + \n-//                meta.getDatabaseProductName());\n-//            System.out.println(\"db product version - \" + \n-//                meta.getDatabaseProductVersion());\n-//            System.out.println(\"driver name - \" + \n-//                meta.getDriverName());\n-//            System.out.println(\"driver version - \" + \n-//                meta.getDriverVersion());\n-//        } catch (SQLException e) {\n-//            e.printStackTrace();\n-//        }\n-//    } \n-    \n     public void testCreateF() {\n-        id++;\n-        createEntityF(id);\n+        createEntityF();\n         \n         em.getTransaction().begin();\n         em.persist(entityF);\n@@ -111,7 +64,16 @@ public void testCreateF() {\n         runQueries();\n         \n     }\n-\n+    \n+    // Run a second time to re-create a situation that initially caused a problem when running this\n+    // test consecutive times.\n+    public void testCreateF2() {\n+        createEntityF();\n+        \n+        em.getTransaction().begin();\n+        em.persist(entityF);\n+        em.getTransaction().commit();\n+    }\n     \n     private void runQueries() {\n         em.clear();"}]}

