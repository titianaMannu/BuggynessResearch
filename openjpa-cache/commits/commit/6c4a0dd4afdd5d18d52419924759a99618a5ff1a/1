{"sha":"6c4a0dd4afdd5d18d52419924759a99618a5ff1a","node_id":"MDY6Q29tbWl0MjA2MzY0OjZjNGEwZGQ0YWZkZDVkMThkNTI0MTk5MjQ3NTlhOTk2MThhNWZmMWE=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-12-22T22:11:06Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-12-22T22:11:06Z"},"message":"Fix bug in XML metadata serialization order of properties.  Add target-entity \nto serialized properties when appropriate.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@489778 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0425458a888e513fa02a1c427ded79a50bb598b7","url":"https://api.github.com/repos/apache/openjpa/git/trees/0425458a888e513fa02a1c427ded79a50bb598b7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6c4a0dd4afdd5d18d52419924759a99618a5ff1a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6c4a0dd4afdd5d18d52419924759a99618a5ff1a","html_url":"https://github.com/apache/openjpa/commit/6c4a0dd4afdd5d18d52419924759a99618a5ff1a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6c4a0dd4afdd5d18d52419924759a99618a5ff1a/comments","author":null,"committer":null,"parents":[{"sha":"8264feb2d63bbdd6a681cdc634ba781be7af0fac","url":"https://api.github.com/repos/apache/openjpa/commits/8264feb2d63bbdd6a681cdc634ba781be7af0fac","html_url":"https://github.com/apache/openjpa/commit/8264feb2d63bbdd6a681cdc634ba781be7af0fac"}],"stats":{"total":64,"additions":52,"deletions":12},"files":[{"sha":"8c0edd7b20ebe65785cb552c995389f0be5a0c99","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataSerializer.java","status":"modified","additions":52,"deletions":12,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/6c4a0dd4afdd5d18d52419924759a99618a5ff1a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/6c4a0dd4afdd5d18d52419924759a99618a5ff1a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataSerializer.java?ref=6c4a0dd4afdd5d18d52419924759a99618a5ff1a","patch":"@@ -16,6 +16,9 @@\n package org.apache.openjpa.persistence;\n \n import java.io.File;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -28,13 +31,13 @@\n import java.util.Properties;\n \n import org.apache.commons.lang.StringUtils;\n-import org.xml.sax.SAXException;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.kernel.QueryLanguages;\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.meta.CFMetaDataSerializer;\n import org.apache.openjpa.lib.meta.SourceTracker;\n+import org.apache.openjpa.lib.util.JavaVersions;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n@@ -47,6 +50,7 @@\n import org.apache.openjpa.meta.SequenceMetaData;\n import org.apache.openjpa.meta.ValueMetaData;\n import org.apache.openjpa.util.InternalException;\n+import org.xml.sax.SAXException;\n import serp.util.Strings;\n \n /**\n@@ -1113,6 +1117,7 @@ private void addOneToManyAttributes(FieldMetaData fmd)\n         throws SAXException {\n         if (fmd.isInDefaultFetchGroup())\n             addAttribute(\"fetch\", \"EAGER\");\n+        addTargetEntityAttribute(fmd);\n     }\n \n     /**\n@@ -1122,6 +1127,36 @@ private void addManyToManyAttributes(FieldMetaData fmd)\n         throws SAXException {\n         if (fmd.isInDefaultFetchGroup())\n             addAttribute(\"fetch\", \"EAGER\");\n+        addTargetEntityAttribute(fmd);\n+    }\n+\n+    /**\n+     * Add a target-entity attribute to collection and map fields that do\n+     * not use generics.\n+     */\n+    private void addTargetEntityAttribute(FieldMetaData fmd) \n+        throws SAXException {\n+        Member member = fmd.getBackingMember();\n+        Class[] types;\n+        if (member instanceof Field)\n+            types = JavaVersions.getParameterizedTypes((Field) member);\n+        else if (member instanceof Method)\n+            types = JavaVersions.getParameterizedTypes((Method) member);\n+        else\n+            types = new Class[0];\n+\n+        switch (fmd.getDeclaredTypeCode()) {\n+            case JavaTypes.COLLECTION:\n+                if (types.length != 1)\n+                    addAttribute(\"target-entity\", fmd.getElement().\n+                        getDeclaredType().getName());\n+                break;\n+            case JavaTypes.MAP:\n+                if (types.length != 2)\n+                    addAttribute(\"target-entity\", fmd.getElement().\n+                        getDeclaredType().getName());\n+                break;\n+        }\n     }\n \n     /**\n@@ -1378,8 +1413,6 @@ private int compare(SequenceMetaData o1, SequenceMetaData o2) {\n         public int compare(Object o1, Object o2) {\n             FieldMetaData fmd1 = (FieldMetaData) o1;\n             FieldMetaData fmd2 = (FieldMetaData) o2;\n-            if (fmd1.getListingIndex() != fmd2.getListingIndex())\n-                return fmd1.getListingIndex() - fmd2.getListingIndex();\n             if (fmd1.isPrimaryKey()) {\n                 if (fmd2.isPrimaryKey())\n                     return fmd1.compareTo(fmd2);\n@@ -1388,18 +1421,25 @@ public int compare(Object o1, Object o2) {\n             if (fmd2.isPrimaryKey())\n                 return 1;\n \n-            PersistenceStrategy st1 = fmd1.isVersion() ? null :\n-                getStrategy(fmd1);\n-            PersistenceStrategy st2 = fmd2.isVersion() ? null :\n-                getStrategy(fmd2);\n             if (fmd1.isVersion()) {\n                 if (fmd2.isVersion())\n-                    return fmd1.compareTo (fmd2);\n-\t\t\t\treturn st2 == PersistenceStrategy.BASIC ? 1 : -1;\n+                    return compareListingOrder(fmd1, fmd2);\n+\t\t\t\treturn getStrategy(fmd2) == PersistenceStrategy.BASIC ? 1 : -1;\n \t\t\t}\n-\t\t\tif (fmd2.isVersion ())\n-\t\t\t\treturn st1 == PersistenceStrategy.BASIC ? -1 : 1;\n-\t\t\treturn st1.compareTo (st2);\n+\t\t\tif (fmd2.isVersion())\n+\t\t\t\treturn getStrategy(fmd1) == PersistenceStrategy.BASIC ? -1 : 1;\n+\n+\t\t\tint stcmp = getStrategy(fmd1).compareTo(getStrategy(fmd2));\n+            if (stcmp != 0)\n+                return stcmp;\n+            return compareListingOrder(fmd1, fmd2);\n+        }\n+\n+        private int compareListingOrder(FieldMetaData fmd1, FieldMetaData fmd2){\n+            int lcmp = fmd1.getListingIndex() - fmd2.getListingIndex();\n+            if (lcmp != 0)\n+                return lcmp;\n+            return fmd1.compareTo(fmd2);\n \t\t}\n \t}\n }"}]}

