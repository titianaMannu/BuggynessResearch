{"sha":"6ccd59c32bb3c3415ed527792a381052cf4b281f","node_id":"MDY6Q29tbWl0MjA2MzY0OjZjY2Q1OWMzMmJiM2MzNDE1ZWQ1Mjc3OTJhMzgxMDUyY2Y0YjI4MWY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-04-09T18:55:31Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-04-09T18:55:31Z"},"message":"OPENJPA-1662: Add openjpa. prefix to Annotation Processor -A options\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@932544 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0c8e7863bf8d035aff9180ceaeab4c293b55db28","url":"https://api.github.com/repos/apache/openjpa/git/trees/0c8e7863bf8d035aff9180ceaeab4c293b55db28"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6ccd59c32bb3c3415ed527792a381052cf4b281f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6ccd59c32bb3c3415ed527792a381052cf4b281f","html_url":"https://github.com/apache/openjpa/commit/6ccd59c32bb3c3415ed527792a381052cf4b281f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6ccd59c32bb3c3415ed527792a381052cf4b281f/comments","author":null,"committer":null,"parents":[{"sha":"aa0ba9078288d45b5daa0e448849b35662f82bc5","url":"https://api.github.com/repos/apache/openjpa/commits/aa0ba9078288d45b5daa0e448849b35662f82bc5","html_url":"https://github.com/apache/openjpa/commit/aa0ba9078288d45b5daa0e448849b35662f82bc5"}],"stats":{"total":56,"additions":39,"deletions":17},"files":[{"sha":"3936356800701d70dc5bc7bd49984d7fd564e17d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java","status":"modified","additions":35,"deletions":12,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/6ccd59c32bb3c3415ed527792a381052cf4b281f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java","raw_url":"https://github.com/apache/openjpa/raw/6ccd59c32bb3c3415ed527792a381052cf4b281f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AnnotationProcessor6.java?ref=6ccd59c32bb3c3415ed527792a381052cf4b281f","patch":"@@ -30,6 +30,7 @@\n import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n \n import javax.annotation.Generated;\n@@ -45,6 +46,7 @@\n import javax.lang.featureSelection.type.TypeMirror;\n import javax.lang.featureSelection.util.Elements;\n import javax.persistence.metamodel.StaticMetamodel;\n+import javax.tools.Diagnostic;\n import javax.tools.JavaCompiler;\n import javax.tools.JavaFileObject;\n import javax.tools.StandardJavaFileManager;\n@@ -56,6 +58,8 @@\n import org.apache.openjpa.persistence.PersistenceMetaDataFactory;\n import org.apache.openjpa.persistence.util.SourceCode;\n \n+import com.sun.tools.javac.util.JCDiagnostic.DiagnosticType;\n+\n /**\n  * Annotation processing tool generates source code for a meta-featureSelection class given \n  * the annotated source code of persistent entity.\n@@ -70,7 +74,9 @@\n  * <code>$ javac -classpath path/to/openjpa-all.jar -Aopenjpa.generated=true mypackage/MyEntity.java</code><br>\n  * will generate source code for canonical meta-featureSelection class <code>mypackage.MyEntity_.java</code>.\n  * <p>\n- * The Annotation Processor also recognizes the following options (none of them are mandatory):<br>\n+ * The Annotation Processor also recognizes the following options (none of them are mandatory).\n+ * Each of the following option key can also be prefixed with <code>openjpa.</code> to distinguish if multiple \n+ * annotation processors are active during compilation:<br>\n  * <TABLE border=\"1\">\n  * <TR><TD>-Alog={log level}<TD>The logging level. Default is <code>WARN</code>. Permissible values are \n  *     <code>TRACE</code>, <code>INFO</code>, <code>WARN</code> or <code> ERROR</code>.\n@@ -96,6 +102,7 @@\n  * to the package structure.  \n  * </TABLE>\n  * <br>\n+ *\n  * @author Pinaki Poddar\n  * \n  * @since 2.0.0\n@@ -105,7 +112,13 @@\n     \"javax.persistence.Entity\",\n     \"javax.persistence.Embeddable\", \n     \"javax.persistence.MappedSuperclass\" })\n-@SupportedOptions( { \"log\", \"out\", \"source\", \"naming\", \"header\", \"openjpa.generate\" })\n+@SupportedOptions({ \"openjpa.log\", \"log\", \n+                     \"openjpa.out\", \"out\", \n+                     \"openjpa.source\", \"source\",\n+                     \"openjpa.naming\", \"naming\",\n+                     \"openjpa.header\", \"header\",\n+                     \"openjpa.generate\"\n+                  })\n @SupportedSourceVersion(RELEASE_6)\n \n public class AnnotationProcessor6 extends AbstractProcessor {\n@@ -194,11 +207,11 @@ private TypeCategory toMetaModelTypeCategory(TypeMirror mirror,\n     @Override\n     public synchronized void init(ProcessingEnvironment processingEnv) {\n         super.init(processingEnv);\n-        active = \"true\".equalsIgnoreCase(processingEnv.getOptions().get(\"openjpa.generate\"));\n+        active = \"true\".equalsIgnoreCase(getOptionValue(\"openjpa.generate\"));\n         if (!active)\n             return;\n-        logger = new CompileTimeLogger(processingEnv);\n-        logger.info(_loc.get(\"mmg-tool-banner\"));\n+        processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE, _loc.get(\"mmg-tool-banner\").toString());\n+        logger = new CompileTimeLogger(processingEnv, getOptionValue(\"openjpa.log\", \"log\"));\n         setSourceVersion();\n         setFileManager();\n         setNamingPolicy();\n@@ -211,9 +224,7 @@ public synchronized void init(ProcessingEnvironment processingEnv) {\n      */\n     @Override\n     public boolean process(Set<? extends TypeElement> annos, RoundEnvironment roundEnv) {\n-        if (!active)\n-            return false;\n-        if (!roundEnv.processingOver()) {\n+        if (active && !roundEnv.processingOver()) {\n             Set<? extends Element> elements = roundEnv.getRootElements();\n             for (Element e : elements) {\n                 process((TypeElement) e);\n@@ -322,7 +333,7 @@ private void comment(SourceCode source) {\n      * n must be a integer. Default or wrong specification returns 6.\n      */\n     private void setSourceVersion() {\n-        String version = processingEnv.getOptions().get(\"source\");\n+        String version = getOptionValue(\"openjpa.source\", \"source\");\n         if (version != null) {\n             try {\n                 generatedSourceVersion = Integer.parseInt(version);\n@@ -336,7 +347,7 @@ private void setSourceVersion() {\n     }\n     \n     private void setNamingPolicy() {\n-        String policy = processingEnv.getOptions().get(\"naming\");\n+        String policy = getOptionValue(\"openjpa.naming\",\"naming\");\n         if (policy != null) {\n             try {\n                 factory = (MetaDataFactory)Class.forName(policy).newInstance();\n@@ -350,7 +361,7 @@ private void setNamingPolicy() {\n     }\n     \n     private void setHeader() {\n-        String headerOption = processingEnv.getOptions().get(\"header\");\n+        String headerOption = getOptionValue(\"openjpa.header\", \"header\");\n         if (headerOption == null) {\n             return;\n         }\n@@ -369,7 +380,7 @@ private void setHeader() {\n     private void setFileManager() {\n         JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n         fileManager = compiler.getStandardFileManager(null, null, null);\n-        String outDir = processingEnv.getOptions().get(\"out\");\n+        String outDir = getOptionValue(\"openjpa.out\", \"out\");\n         if (outDir != null)\n            isUserSpecifiedOutputLocation = setSourceOutputDirectory(new File(outDir));\n     }\n@@ -416,6 +427,18 @@ boolean setSourceOutputDirectory(File outDir) {\n         }\n     }\n     \n+    /**\n+     * Get the value for the given keys, whoever matches first, in the current available options.\n+     */\n+    private String getOptionValue(String... keys) {\n+        Map<String,String> options = processingEnv.getOptions();\n+        for (String key : keys) {\n+            if (options.containsKey(key))\n+                return options.get(key);\n+        }\n+        return null;\n+    }\n+    \n     /**\n      * An utility class to determine the source file corresponding to a {@link TypeElement}.\n      * The utility uses Sun JDK internal API (com.sun.tools.*) and hence works reflectively"},{"sha":"60e3a2a24ec2a3b045a4d14a1a720dc010be7708","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/CompileTimeLogger.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/6ccd59c32bb3c3415ed527792a381052cf4b281f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/CompileTimeLogger.java","raw_url":"https://github.com/apache/openjpa/raw/6ccd59c32bb3c3415ed527792a381052cf4b281f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/CompileTimeLogger.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/CompileTimeLogger.java?ref=6ccd59c32bb3c3415ed527792a381052cf4b281f","patch":"@@ -34,16 +34,14 @@\n  */\n public class CompileTimeLogger {\n     private static enum Level {TRACE, INFO, WARN, ERROR};\n-    private static Localizer _loc = Localizer.forPackage(\n-            CompileTimeLogger.class);\n+    private static Localizer _loc = Localizer.forPackage(CompileTimeLogger.class);\n     private static Level DEFAULT_LEVEL = Level.WARN;\n     private int logLevel;\n     private Messager messager;\n     \n-    public CompileTimeLogger(ProcessingEnvironment env) {\n+    public CompileTimeLogger(ProcessingEnvironment env, String level) {\n         messager = env.getMessager();\n         \n-        String level = env.getOptions().get(\"log\");\n         if (level == null) {\n             logLevel = DEFAULT_LEVEL.ordinal();\n             return;"},{"sha":"1bd83842618647222a90ce8814b07b13be641b46","filename":"openjpa-project/src/doc/manual/jpa_overview_criteria.xml","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/6ccd59c32bb3c3415ed527792a381052cf4b281f/openjpa-project/src/doc/manual/jpa_overview_criteria.xml","raw_url":"https://github.com/apache/openjpa/raw/6ccd59c32bb3c3415ed527792a381052cf4b281f/openjpa-project/src/doc/manual/jpa_overview_criteria.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_criteria.xml?ref=6ccd59c32bb3c3415ed527792a381052cf4b281f","patch":"@@ -177,7 +177,8 @@ will generate source code for canonical meta-featureSelection class <code>mypackage.MyEntit\n       \n       <para>\n The Annotation Processor recognizes the following options specified in the command-line with <code>-A</code> \n-(none of them are mandatory):\n+(none of them are mandatory). Each of the following option key can also be prefixed with <code>openjpa.</code> \n+to distinguish if multiple annotation processors are active during compilation.\n     <itemizedlist>\n         <listitem>\n \t\t\t<para>"}]}

