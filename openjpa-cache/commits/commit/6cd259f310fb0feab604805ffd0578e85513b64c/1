{"sha":"6cd259f310fb0feab604805ffd0578e85513b64c","node_id":"MDY6Q29tbWl0MjA2MzY0OjZjZDI1OWYzMTBmYjBmZWFiNjA0ODA1ZmZkMDU3OGU4NTUxM2I2NGM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-08-16T17:59:57Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-08-16T17:59:57Z"},"message":"OPENJPA-143\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@566788 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c9bce16709ce5c5a6ed0335b2bbd7b9bfe13671d","url":"https://api.github.com/repos/apache/openjpa/git/trees/c9bce16709ce5c5a6ed0335b2bbd7b9bfe13671d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6cd259f310fb0feab604805ffd0578e85513b64c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6cd259f310fb0feab604805ffd0578e85513b64c","html_url":"https://github.com/apache/openjpa/commit/6cd259f310fb0feab604805ffd0578e85513b64c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6cd259f310fb0feab604805ffd0578e85513b64c/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"8d1dacad825e9ec3115596170b0cc13b2d2278b3","url":"https://api.github.com/repos/apache/openjpa/commits/8d1dacad825e9ec3115596170b0cc13b2d2278b3","html_url":"https://github.com/apache/openjpa/commit/8d1dacad825e9ec3115596170b0cc13b2d2278b3"}],"stats":{"total":604,"additions":568,"deletions":36},"files":[{"sha":"5a41b30ff44c39a00e4523d4e4d89bab657b03db","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Discriminator.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Discriminator.java","raw_url":"https://github.com/apache/openjpa/raw/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Discriminator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Discriminator.java?ref=6cd259f310fb0feab604805ffd0578e85513b64c","patch":"@@ -33,6 +33,7 @@\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.MetaDataContext;\n import org.apache.openjpa.meta.MetaDataModes;\n import org.apache.openjpa.meta.MetaDataRepository;\n@@ -64,6 +65,8 @@\n     private Index _idx = null;\n     private boolean _subsLoaded = false;\n     private Object _value = null;\n+    \n+    private int _javaType = -1; \n \n     /**\n      * Constructor. Supply owning mapping.\n@@ -413,4 +416,21 @@ private DiscriminatorStrategy assertStrategy() {\n     public String toString() {\n         return _mapping + \"<discriminator>\";\n     }\n+    \n+    public void setJavaType(int javaType) {\n+        _javaType = javaType;\n+    }\n+    \n+    public int getJavaType() {\n+        if (_javaType == -1) {\n+            ClassMapping superMapping = _mapping.getPCSuperclassMapping();\n+\n+            if (superMapping != null && \n+                superMapping.getDiscriminator() != null) {\n+                _javaType = superMapping.getDiscriminator().getJavaType();\n+            }\n+        }\n+\n+        return _javaType;\n+    }\n }"},{"sha":"86ba6c5ead4bc7a39ed6a17e290bf4a581d09b40","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorMappingInfo.java","status":"modified","additions":14,"deletions":20,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorMappingInfo.java?ref=6cd259f310fb0feab604805ffd0578e85513b64c","patch":"@@ -20,6 +20,7 @@\n \n import java.lang.reflect.Modifier;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.meta.strats.NoneDiscriminatorStrategy;\n import org.apache.openjpa.jdbc.meta.strats.SuperclassDiscriminatorStrategy;\n import org.apache.openjpa.jdbc.meta.strats.ValueMapDiscriminatorStrategy;\n@@ -28,6 +29,7 @@\n import org.apache.openjpa.jdbc.schema.SchemaGroup;\n import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.MetaDataException;\n \n /**\n@@ -45,7 +47,7 @@\n         (DiscriminatorMappingInfo.class);\n \n     private String _value = null;\n-\n+    \n     /**\n      * Raw discriminator value string.\n      */\n@@ -66,28 +68,20 @@ public void setValue(String value) {\n     public Object getValue(Discriminator discrim, boolean adapt) {\n         if (discrim.getValue() != null)\n             return discrim.getValue();\n-        if (_value == null)\n+        if (StringUtils.isEmpty(_value)) {\n             return discrim.getMappingRepository().getMappingDefaults().\n                 getDiscriminatorValue(discrim, adapt);\n-\n-        if (_value.length() > 0 && (_value.charAt(0) == '-' \n-            || Character.isDigit(_value.charAt(0)))) {\n-            try {\n-                if (_value.indexOf('.') == -1)\n-                    return new Integer(_value);\n-                return new Double(_value);\n-            } catch (RuntimeException re) {\n-                throw new MetaDataException(_loc.get(\"bad-discrim-value\",\n-                    discrim.getClassMapping(), _value));\n-            }\n         }\n-        if (\"null\".equalsIgnoreCase(_value))\n-            return Discriminator.NULL;\n-\n-        // strip quotes\n-        if (_value.length() > 0 && _value.charAt(0) == '\\'')\n-            return _value.substring(1, _value.length() - 1);\n-        return _value;\n+        \n+        switch(discrim.getJavaType()) { \n+            case JavaTypes.INT:\n+                return Integer.valueOf(_value);\n+            case JavaTypes.CHAR:\n+               return Character.valueOf(_value.charAt(_value.indexOf('\\'')+1));\n+            case JavaTypes.STRING:\n+            default: \n+                return _value;\n+        }\n     }\n \n     /**"},{"sha":"decd977b2f8f09164aee00a1bdc322da1e3923e9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","status":"modified","additions":35,"deletions":2,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","raw_url":"https://github.com/apache/openjpa/raw/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java?ref=6cd259f310fb0feab604805ffd0578e85513b64c","patch":"@@ -455,14 +455,47 @@ public Object getStrategy(ValueMapping vm, Class type, boolean adapt) {\n         return null;\n     }\n \n+    /**\n+     * Provides a default value for the given Discriminator. \n+     * \n+     * <P>\n+     * The type of the object returned relies on the javaType field being set on \n+     * the Discriminator which is provided.\n+     * <TABLE border=\"2\"> \n+     * <TH>JavaType\n+     * <TH>Default value\n+     * <TBODY>\n+     * <TR><TD>{@link JavaTypes.INT}<TD> The hashcode of the entity name</TR>\n+     * <TR><TD>{@link JavaTypes.CHAR}<TD>The first character of the entity name \n+     * </TR>\n+     * <TR><TD>{@link JavaTypes.STRING}<TD>The entity name</TR>\n+     * </TBODY>\n+     * </TABLE>\n+     * \n+     * @param disc The discriminator that needs a default value\n+     * @param adapt \n+     * \n+     * @return A new object containing the generated Discriminator value.\n+     */\n     public Object getDiscriminatorValue(Discriminator disc, boolean adapt) {\n         if (!adapt && !defaultMissingInfo())\n             return null;\n \n         // WARNING: CHANGING THIS WILL INVALIDATE EXISTING DATA IF DEFAULTING\n         // MISSING MAPPING INFO\n-        return Strings.getClassName(disc.getClassMapping().\n-            getDescribedType());\n+        \n+        String alias = Strings.getClassName(disc.getClassMapping()\n+                .getTypeAlias());\n+        \n+        switch (disc.getJavaType()) {\n+            case JavaTypes.INT:\n+                return new Integer(alias.hashCode());\n+            case JavaTypes.CHAR:\n+                return new Character(alias.charAt(0)); \n+            case JavaTypes.STRING:\n+            default:\n+                return alias;\n+        }\n     }\n \n     public String getTableName(ClassMapping cls, Schema schema) {"},{"sha":"85033705947c1bc83232911c4a287e0da511433a","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java?ref=6cd259f310fb0feab604805ffd0578e85513b64c","patch":"@@ -20,6 +20,7 @@\n \n import java.lang.annotation.Annotation;\n import java.lang.reflect.AnnotatedElement;\n+import java.lang.reflect.Modifier;\n import java.sql.Types;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -57,6 +58,7 @@\n import org.apache.openjpa.jdbc.kernel.EagerFetchModes;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.ClassMappingInfo;\n+import org.apache.openjpa.jdbc.meta.Discriminator;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.MappingInfo;\n import org.apache.openjpa.jdbc.meta.MappingRepository;\n@@ -262,6 +264,12 @@ protected void parseClassMappingAnnotations(ClassMetaData meta) {\n                 case DISCRIM_VAL:\n                     cm.getDiscriminator().getMappingInfo().setValue\n                         (((DiscriminatorValue) anno).value());\n+                    if (Modifier.isAbstract(cm.getDescribedType().\n+                            getModifiers()) && getLog().isInfoEnabled()) {\n+                        getLog().info(\n+                            _loc.get(\"discriminator-on-abstract-class\", cm\n+                                    .getDescribedType().getName()));\n+                    }\n                     break;\n                 case INHERITANCE:\n                     parseInheritance(cm, (Inheritance) anno);\n@@ -525,18 +533,22 @@ private void parseDiscriminatorColumn(ClassMapping cm,\n             col.setName(dcol.name());\n         if (!StringUtils.isEmpty(dcol.columnDefinition()))\n             col.setTypeName(dcol.columnDefinition());\n+        Discriminator discrim = cm.getDiscriminator();\n         switch (dcol.discriminatorType()) {\n             case CHAR:\n                 col.setJavaType(JavaTypes.CHAR);\n+                discrim.setJavaType(JavaTypes.CHAR);\n                 break;\n             case INTEGER:\n                 col.setJavaType(JavaTypes.INT);\n                 if (dcol.length() != 31)\n                     col.setSize(dcol.length());\n+                discrim.setJavaType(JavaTypes.INT);\n                 break;\n             default:\n                 col.setJavaType(JavaTypes.STRING);\n                 col.setSize(dcol.length());\n+                discrim.setJavaType(JavaTypes.STRING);\n         }\n         cm.getDiscriminator().getMappingInfo().setColumns\n             (Arrays.asList(new Column[]{ col }));"},{"sha":"6b8c132ce26ebecf3d3d235a3a11736ed09aad93","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","status":"modified","additions":32,"deletions":14,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java?ref=6cd259f310fb0feab604805ffd0578e85513b64c","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.persistence.jdbc;\n \n+import java.lang.reflect.Modifier;\n import java.sql.Types;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -197,6 +198,7 @@ protected Object startClassMappingElement(String name, Attributes attrs)\n                 ret = startSecondaryTable(attrs);\n                 break;\n             case DISCRIM_COL:\n+                parseDiscriminatorColumn(attrs);\n                 _discCol = parseColumn(attrs);\n                 ret = true;\n                 break;\n@@ -314,20 +316,21 @@ protected void endClassMapping(ClassMetaData meta)\n             cm.getMappingInfo().setColumns(_supJoinCols);\n \n         if (_discCol != null) {\n-            DiscriminatorMappingInfo dinfo = cm.getDiscriminator().\n-                getMappingInfo();\n-            if (_discType != null) {\n-                switch (_discType) {\n-                    case CHAR:\n-                        _discCol.setJavaType(JavaTypes.CHAR);\n-                        break;\n-                    case INTEGER:\n-                        _discCol.setJavaType(JavaTypes.INT);\n-                        break;\n-                    default:\n-                        _discCol.setJavaType(JavaTypes.STRING);\n-                        break;\n-                }\n+            DiscriminatorMappingInfo dinfo = cm.getDiscriminator()\n+                    .getMappingInfo();\n+            switch (_discType) {\n+                case CHAR:\n+                    _discCol.setJavaType(JavaTypes.CHAR);\n+                    cm.getDiscriminator().setJavaType(JavaTypes.CHAR);\n+                    break;\n+                case INTEGER:\n+                    _discCol.setJavaType(JavaTypes.INT);\n+                    cm.getDiscriminator().setJavaType(JavaTypes.INT);\n+                    break;\n+                default:\n+                    _discCol.setJavaType(JavaTypes.STRING);\n+                    cm.getDiscriminator().setJavaType(JavaTypes.STRING);\n+                    break;\n             }\n             dinfo.setColumns(Arrays.asList(new Column[]{ _discCol }));\n         }\n@@ -439,6 +442,13 @@ private void endDiscriminatorValue() {\n \n         ClassMapping cm = (ClassMapping) currentElement();\n         cm.getDiscriminator().getMappingInfo().setValue(val);\n+\n+        if (Modifier.isAbstract(cm.getDescribedType().getModifiers())\n+                && getLog().isInfoEnabled()) {\n+            getLog().info(\n+                    _loc.get(\"discriminator-on-abstract-class\", cm\n+                            .getDescribedType().getName()));\n+        }\n     }\n \n     /**\n@@ -916,4 +926,12 @@ private boolean endColumnName() {\n \t\tTRUE,\n \t\tFALSE\n \t}\n+\t\n+\tprivate void parseDiscriminatorColumn(Attributes attrs) { \n+\t    String val = attrs.getValue(\"discriminator-type\");\n+        if (val != null) {\n+            _discType = Enum.valueOf(DiscriminatorType.class, val);\n+        }\n+            \n+\t}\n }"},{"sha":"fbf606b21b88adab0f8d4d6f7b0be685d3e89736","filename":"openjpa-persistence-jdbc/src/main/resources/org/apache/openjpa/persistence/jdbc/localizer.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-persistence-jdbc/src/main/resources/org/apache/openjpa/persistence/jdbc/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-persistence-jdbc/src/main/resources/org/apache/openjpa/persistence/jdbc/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/resources/org/apache/openjpa/persistence/jdbc/localizer.properties?ref=6cd259f310fb0feab604805ffd0578e85513b64c","patch":"@@ -48,3 +48,7 @@ not-embedded: Attempt to declare mapping overrides on non-embedded field \"{0}\".\n no-gen-table: No generated table found at \"{0}\".\n empty-unique-column: A unique constraint \"{0}\" specified in mapping of class  \\\n     \"{1}\" includes an empty column.\n+discriminator-on-abstract-class: A discriminator value has been specified for \\\n+\tthe abstract class \"{0}\". The discriminator will never be used and may be \\\n+\tsafely removed.\n+    \n\\ No newline at end of file"},{"sha":"5dd5ff754770136ada31b86fd29186a1bbc6aa60","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/CharAbstractEntity.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/CharAbstractEntity.java","raw_url":"https://github.com/apache/openjpa/raw/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/CharAbstractEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/CharAbstractEntity.java?ref=6cd259f310fb0feab604805ffd0578e85513b64c","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.discriminator;\n+\n+import javax.persistence.Column;\n+import javax.persistence.DiscriminatorColumn;\n+import javax.persistence.DiscriminatorType;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+\n+@Entity\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\n+@DiscriminatorColumn(name=\"DISC_COL\", discriminatorType=DiscriminatorType.CHAR)\n+public abstract class CharAbstractEntity {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    @Column(length=16)\n+    private String name;\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"163ef3f6d2e53ff2bf930e2ebbc737f4749c941f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/CharLeafEntity.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/CharLeafEntity.java","raw_url":"https://github.com/apache/openjpa/raw/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/CharLeafEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/CharLeafEntity.java?ref=6cd259f310fb0feab604805ffd0578e85513b64c","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.discriminator;\n+\n+import javax.persistence.Entity;\n+\n+@Entity(name=\"chrLeaf\")\n+public class CharLeafEntity\n+    extends CharRootEntity {\n+\n+    private int subInt;\n+\n+    public int getSubInt() {\n+        return subInt;\n+    }\n+\n+    public void setSubInt(int subInt) {\n+        this.subInt = subInt;\n+    }\n+}"},{"sha":"a179a116a09d7b6d289f425c6c31314bb790cdd8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/CharRootEntity.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/CharRootEntity.java","raw_url":"https://github.com/apache/openjpa/raw/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/CharRootEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/CharRootEntity.java?ref=6cd259f310fb0feab604805ffd0578e85513b64c","patch":"@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.discriminator;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+\n+@Entity\n+@DiscriminatorValue(\"R\")\n+public class CharRootEntity extends CharAbstractEntity {\n+}"},{"sha":"3b866f530362ed195d44c569293e382fdd4095f4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/IntegerAbstractEntity.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/IntegerAbstractEntity.java","raw_url":"https://github.com/apache/openjpa/raw/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/IntegerAbstractEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/IntegerAbstractEntity.java?ref=6cd259f310fb0feab604805ffd0578e85513b64c","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.discriminator;\n+\n+import javax.persistence.Column;\n+import javax.persistence.DiscriminatorColumn;\n+import javax.persistence.DiscriminatorType;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+\n+@Entity\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n+@DiscriminatorColumn(name = \"DISC_COL\", \n+        discriminatorType = DiscriminatorType.INTEGER)\n+public abstract class IntegerAbstractEntity {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    @Column(length=16)\n+    private String name;\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"f88ef703751a7d2661b3a0a375ddef871eaf67c5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/IntegerLeafEntity.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/IntegerLeafEntity.java","raw_url":"https://github.com/apache/openjpa/raw/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/IntegerLeafEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/IntegerLeafEntity.java?ref=6cd259f310fb0feab604805ffd0578e85513b64c","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.discriminator;\n+\n+import javax.persistence.Entity;\n+\n+@Entity(name=\"intLeaf\")\n+public class IntegerLeafEntity\n+    extends IntegerRootEntity {\n+\n+    private int subInt;\n+\n+    public int getSubInt() {\n+        return subInt;\n+    }\n+\n+    public void setSubInt(int subInt) {\n+        this.subInt = subInt;\n+    }\n+}"},{"sha":"2d3a58d7a0a07691000f9cefdf0db25ef27c1264","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/IntegerRootEntity.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/IntegerRootEntity.java","raw_url":"https://github.com/apache/openjpa/raw/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/IntegerRootEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/IntegerRootEntity.java?ref=6cd259f310fb0feab604805ffd0578e85513b64c","patch":"@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.discriminator;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+\n+@Entity\n+@DiscriminatorValue(\"10101\")\n+public class IntegerRootEntity extends IntegerAbstractEntity {\n+\n+}"},{"sha":"b4d20f105c0926be9096e04aec7ebe65c36fe3af","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/StringAbstractEntity.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/StringAbstractEntity.java","raw_url":"https://github.com/apache/openjpa/raw/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/StringAbstractEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/StringAbstractEntity.java?ref=6cd259f310fb0feab604805ffd0578e85513b64c","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.discriminator;\n+\n+import javax.persistence.Column;\n+import javax.persistence.DiscriminatorColumn;\n+import javax.persistence.DiscriminatorType;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+\n+@Entity\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n+@DiscriminatorColumn(name = \"DISC_COL\", \n+        discriminatorType = DiscriminatorType.STRING)\n+public abstract class StringAbstractEntity {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    @Column(length = 16)\n+    private String name;\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"e233559192cbcf8b8ed66101cee47036a3c79d0a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/StringLeafEntity.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/StringLeafEntity.java","raw_url":"https://github.com/apache/openjpa/raw/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/StringLeafEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/StringLeafEntity.java?ref=6cd259f310fb0feab604805ffd0578e85513b64c","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.discriminator;\n+\n+import javax.persistence.Entity;\n+\n+@Entity(name=\"strLeaf\")\n+public class StringLeafEntity\n+    extends StringRootEntity {\n+\n+    private int subInt;\n+\n+    public int getSubInt() {\n+        return subInt;\n+    }\n+\n+    public void setSubInt(int subInt) {\n+        this.subInt = subInt;\n+    }\n+}"},{"sha":"153f4e63a68c1125e081f066b56b03b7d58cddb9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/StringRootEntity.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/StringRootEntity.java","raw_url":"https://github.com/apache/openjpa/raw/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/StringRootEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/StringRootEntity.java?ref=6cd259f310fb0feab604805ffd0578e85513b64c","patch":"@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.discriminator;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+\n+@Entity\n+@DiscriminatorValue(\"StringRoot\")\n+public class StringRootEntity extends StringAbstractEntity {\n+}"},{"sha":"65f407eabc4de2fa503d40d7c07a8b384f1f9b17","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/TestDiscriminatorTypes.java","status":"added","additions":100,"deletions":0,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/TestDiscriminatorTypes.java","raw_url":"https://github.com/apache/openjpa/raw/6cd259f310fb0feab604805ffd0578e85513b64c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/TestDiscriminatorTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/TestDiscriminatorTypes.java?ref=6cd259f310fb0feab604805ffd0578e85513b64c","patch":"@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.discriminator;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.Discriminator;\n+import org.apache.openjpa.meta.JavaTypes;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestDiscriminatorTypes extends SingleEMFTestCase {\n+\n+    protected void setUp() {\n+        super.setUp(CharAbstractEntity.class, CharLeafEntity.class,\n+                CharRootEntity.class, IntegerAbstractEntity.class,\n+                IntegerLeafEntity.class, IntegerRootEntity.class,\n+                StringAbstractEntity.class, StringLeafEntity.class,\n+                StringRootEntity.class);\n+    }\n+\n+    public void testCharDiscriminators() {\n+        EntityManager em = emf.createEntityManager(); // load types\n+\n+        Discriminator discrim = getMapping(\"CharAbstractEntity\")\n+                .getDiscriminator();\n+        assertEquals(new Character('C'), discrim.getValue()); // Generated\n+        assertEquals(JavaTypes.CHAR, discrim.getJavaType());\n+\n+        discrim = getMapping(\"chrLeaf\").getDiscriminator();\n+        assertEquals(new Character('c'), discrim.getValue());\n+        assertEquals(JavaTypes.CHAR, discrim.getJavaType());\n+\n+        discrim = getMapping(\"CharRootEntity\").getDiscriminator();\n+        assertEquals(new Character('R'), discrim.getValue());\n+        assertEquals(JavaTypes.CHAR, discrim.getJavaType());\n+\n+        em.close();\n+    }\n+\n+    public void testIntDiscriminators() {\n+        EntityManager em = emf.createEntityManager(); // load the types\n+\n+        Discriminator discrim = getMapping(\"IntegerAbstractEntity\")\n+                .getDiscriminator();\n+        assertEquals(new Integer(\"IntegerAbstractEntity\".hashCode()), discrim\n+                .getValue()); // Generated value\n+        assertEquals(JavaTypes.INT, discrim.getJavaType());\n+\n+        discrim = getMapping(\"intLeaf\").getDiscriminator();\n+        assertEquals(new Integer(\"intLeaf\".hashCode()), discrim.getValue());\n+        assertEquals(JavaTypes.INT, discrim.getJavaType());\n+\n+        discrim = getMapping(\"IntegerRootEntity\").getDiscriminator();\n+        assertEquals(new Integer(10101), discrim.getValue());\n+        assertEquals(JavaTypes.INT, discrim.getJavaType());\n+\n+        em.close();\n+    }\n+\n+    public void testStringDiscriminators() {\n+        EntityManager em = emf.createEntityManager(); // load the types\n+        Discriminator discrim = getMapping(\"StringAbstractEntity\")\n+                .getDiscriminator();\n+        assertEquals(\"StringAbstractEntity\", discrim.getValue()); // Generated\n+        assertEquals(JavaTypes.STRING, discrim.getJavaType());\n+\n+        discrim = getMapping(\"strLeaf\").getDiscriminator();\n+        assertEquals(\"strLeaf\", discrim.getValue());\n+        assertEquals(JavaTypes.STRING, discrim.getJavaType());\n+\n+        discrim = getMapping(\"StringRootEntity\").getDiscriminator();\n+        assertEquals(\"StringRoot\", discrim.getValue());\n+        assertEquals(JavaTypes.STRING, discrim.getJavaType());\n+        em.close();\n+    }\n+\n+    private ClassMapping getMapping(String name) {\n+        return (ClassMapping) OpenJPAPersistence.cast(emf).getConfiguration()\n+                .getMetaDataRepositoryInstance().getMetaData(name,\n+                        getClass().getClassLoader(), true);\n+    }\n+}"}]}

