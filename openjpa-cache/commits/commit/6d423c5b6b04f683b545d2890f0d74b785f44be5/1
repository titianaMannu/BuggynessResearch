{"sha":"6d423c5b6b04f683b545d2890f0d74b785f44be5","node_id":"MDY6Q29tbWl0MjA2MzY0OjZkNDIzYzViNmIwNGY2ODNiNTQ1ZDI4OTBmMGQ3NGI3ODVmNDRiZTU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-11-05T15:57:26Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-11-05T15:57:26Z"},"message":"OPENJPA-1874: handle Oracle XMLType columns with @Lob annotation\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1031648 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8f58698a4eb177e99bb8698131b108c8d800ad95","url":"https://api.github.com/repos/apache/openjpa/git/trees/8f58698a4eb177e99bb8698131b108c8d800ad95"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6d423c5b6b04f683b545d2890f0d74b785f44be5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6d423c5b6b04f683b545d2890f0d74b785f44be5","html_url":"https://github.com/apache/openjpa/commit/6d423c5b6b04f683b545d2890f0d74b785f44be5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6d423c5b6b04f683b545d2890f0d74b785f44be5/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"ad98d444e1f43922ac61a25ae57bd7ccddfc6178","url":"https://api.github.com/repos/apache/openjpa/commits/ad98d444e1f43922ac61a25ae57bd7ccddfc6178","html_url":"https://github.com/apache/openjpa/commit/ad98d444e1f43922ac61a25ae57bd7ccddfc6178"}],"stats":{"total":218,"additions":218,"deletions":0},"files":[{"sha":"1b25cf71ddbd39dd4f61b127022f4d8eb373dd1b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/6d423c5b6b04f683b545d2890f0d74b785f44be5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","raw_url":"https://github.com/apache/openjpa/raw/6d423c5b6b04f683b545d2890f0d74b785f44be5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java?ref=6d423c5b6b04f683b545d2890f0d74b785f44be5","patch":"@@ -717,10 +717,13 @@ public boolean isCompatible(int type, String typeName, int size,\n                     case Types.CHAR:\n                     case Types.LONGVARCHAR:\n                     case Types.VARCHAR:\n+                    case Types.CLOB:\n+                    case Types.BLOB:\n                         return true;\n                      default:\n                          return false;\n                 }\n+                \n             default:\n                 return type == getType();\n         }"},{"sha":"fd0b2d4ad90046202a55eab81793779fa17e42b7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/oracle/TestOracleXmlColumn.java","status":"added","additions":149,"deletions":0,"changes":149,"blob_url":"https://github.com/apache/openjpa/blob/6d423c5b6b04f683b545d2890f0d74b785f44be5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/oracle/TestOracleXmlColumn.java","raw_url":"https://github.com/apache/openjpa/raw/6d423c5b6b04f683b545d2890f0d74b785f44be5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/oracle/TestOracleXmlColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/oracle/TestOracleXmlColumn.java?ref=6d423c5b6b04f683b545d2890f0d74b785f44be5","patch":"@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.oracle;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityTransaction;\n+import javax.sql.DataSource;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.OracleDictionary;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.test.PersistenceTestCase;\n+\n+public class TestOracleXmlColumn extends PersistenceTestCase {\n+\n+    private static String xmlData =\n+        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> \"\n+            + \"<project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" \" +\n+            \t\t\"xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" \" +\n+            \t\t\"xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 \" +\n+            \t\t\"http://maven.apache.org/maven-v4_0_0.xsd\\\">\"\n+            + \"</project>\";\n+\n+    private boolean skipTest(DBDictionary dict) {\n+        return !(dict instanceof OracleDictionary);\n+    }\n+\n+    public void setUp() throws SQLException {\n+        OpenJPAEntityManagerFactorySPI emf = createEMF();\n+\n+        JDBCConfiguration conf = ((JDBCConfiguration) emf.getConfiguration());\n+        DBDictionary dict = conf.getDBDictionaryInstance();\n+\n+        if (skipTest(dict)) {\n+            emf.close();\n+            return;\n+        }\n+\n+        // the mapping tool doesn't handle creating XML columns that map to strings\n+        // build table manually\n+        Connection con = ((DataSource) conf.getConnectionFactory()).getConnection();\n+        Statement stmt = con.createStatement();\n+        String ddl = \"DROP TABLE XmlColEntity\";\n+        try { \n+            stmt.execute(ddl);\n+            con.commit();\n+        } catch (SQLException se) {\n+            // assume the table did not exist.\n+            con.rollback();\n+        }\n+\n+        ddl =\n+            \"CREATE TABLE XmlColEntity (ID NUMBER NOT NULL, XMLCOLUMN \" + dict.xmlTypeName\n+                + \", VERSION NUMBER, PRIMARY KEY (ID))\";\n+        stmt.execute(ddl);\n+        String insertSql = \"INSERT into XmlColEntity (ID, XMLCOLUMN, VERSION) VALUES (42, '\" + xmlData + \"', 1)\";\n+        stmt.execute(insertSql);\n+        con.commit();\n+\n+        stmt.close();\n+        con.close();\n+        emf.close();\n+    }\n+\n+    public void testCrudXmlColumn() throws SQLException {\n+        // This test will fail with Oracle JDBC driver version 11.2.0.1.0.\n+        // It passes with 10.2.0.1.0 (maybe others).\n+        OpenJPAEntityManagerFactorySPI emf =\n+            createEMF(XmlColEntity.class,\n+                \"openjpa.jdbc.SchemaFactory\", \"native\", \n+                \"openjpa.jdbc.SynchronizeMappings\",  \"\");\n+\n+        JDBCConfiguration conf = ((JDBCConfiguration) emf.getConfiguration());\n+        DBDictionary dict = conf.getDBDictionaryInstance();\n+\n+        if (skipTest(dict)) {\n+            emf.close();\n+            return;\n+        }\n+\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+\n+        XmlColEntity xce = new XmlColEntity();\n+        xce.setId(1);\n+        xce.setXmlColumn(xmlData);\n+\n+        tran.begin();\n+        em.persist(xce);\n+        tran.commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        xce = em.find(XmlColEntity.class, 1);\n+        assertNotNull(xce);\n+        assertEquals(xmlData, xce.getXmlColumn());\n+\n+        em.close();\n+        emf.close();\n+    }\n+    \n+    public void testExistingColumn() throws SQLException {\n+        // This test will fail with Oracle JDBC driver version 11.2.0.1.0.\n+        // It passes with 10.2.0.1.0 (maybe others).\n+        OpenJPAEntityManagerFactorySPI emf =\n+            createEMF(XmlColEntity.class,\n+                \"openjpa.jdbc.SchemaFactory\", \"native\", \n+                \"openjpa.jdbc.SynchronizeMappings\",  \"\");\n+\n+        JDBCConfiguration conf = ((JDBCConfiguration) emf.getConfiguration());\n+        DBDictionary dict = conf.getDBDictionaryInstance();\n+\n+        if (skipTest(dict)) {\n+            emf.close();\n+            return;\n+        }\n+\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+\n+        XmlColEntity xce = em.find(XmlColEntity.class, 42); \n+        assertNotNull(xce);\n+        assertNotNull(xce.getXmlColumn());\n+        assertEquals(xmlData, xce.getXmlColumn());\n+        em.close();\n+        emf.close();\n+    }\n+}"},{"sha":"06273d26fe7f05864049552c897aba4bd6c58c33","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/oracle/XmlColEntity.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/6d423c5b6b04f683b545d2890f0d74b785f44be5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/oracle/XmlColEntity.java","raw_url":"https://github.com/apache/openjpa/raw/6d423c5b6b04f683b545d2890f0d74b785f44be5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/oracle/XmlColEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/oracle/XmlColEntity.java?ref=6d423c5b6b04f683b545d2890f0d74b785f44be5","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.jdbc.oracle;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Lob;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class XmlColEntity {\n+\n+    @Id\n+    @Column(name = \"ID\")\n+    private int id;\n+\n+    @Version\n+    @Column(name = \"VERSION\")\n+    private int version;\n+\n+    @Lob @Basic\n+    @Column(name = \"XMLCOLUMN\")\n+    private String xmlColumn;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }  \n+    \n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public String getXmlColumn() {\n+        return xmlColumn;\n+    }\n+\n+    public void setXmlColumn(String xmlColumn) {\n+        this.xmlColumn = xmlColumn;\n+    }\n+}"}]}

