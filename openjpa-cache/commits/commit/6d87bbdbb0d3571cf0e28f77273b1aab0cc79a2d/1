{"sha":"6d87bbdbb0d3571cf0e28f77273b1aab0cc79a2d","node_id":"MDY6Q29tbWl0MjA2MzY0OjZkODdiYmRiYjBkMzU3MWNmMGUyOGY3NzI3M2IxYWFiMGNjNzlhMmQ=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-03-16T16:32:14Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-03-16T16:32:14Z"},"message":"OPENJPA-1562 Committing code and test updates contributed by Dianne Richards.  Refresh after remove was not throwing exception dictated by spec.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@923849 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"105289a063ba55faae078c301d41b2acb0b13571","url":"https://api.github.com/repos/apache/openjpa/git/trees/105289a063ba55faae078c301d41b2acb0b13571"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6d87bbdbb0d3571cf0e28f77273b1aab0cc79a2d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6d87bbdbb0d3571cf0e28f77273b1aab0cc79a2d","html_url":"https://github.com/apache/openjpa/commit/6d87bbdbb0d3571cf0e28f77273b1aab0cc79a2d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6d87bbdbb0d3571cf0e28f77273b1aab0cc79a2d/comments","author":null,"committer":null,"parents":[{"sha":"845f9b50187f2a14ceb3826561945edb8742988e","url":"https://api.github.com/repos/apache/openjpa/commits/845f9b50187f2a14ceb3826561945edb8742988e","html_url":"https://github.com/apache/openjpa/commit/845f9b50187f2a14ceb3826561945edb8742988e"}],"stats":{"total":49,"additions":35,"deletions":14},"files":[{"sha":"632a32abc0fc02f014f6cd68f33320646bc9199b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestRefresh.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/6d87bbdbb0d3571cf0e28f77273b1aab0cc79a2d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestRefresh.java","raw_url":"https://github.com/apache/openjpa/raw/6d87bbdbb0d3571cf0e28f77273b1aab0cc79a2d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestRefresh.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestRefresh.java?ref=6d87bbdbb0d3571cf0e28f77273b1aab0cc79a2d","patch":"@@ -116,6 +116,23 @@ public void testCacheStoreModeSetting() {\n         assertEquals(mode, CacheStoreMode.USE);\n     }\n     \n+    public void testRefreshAfterRemove() {\n+        try {\n+            em.getTransaction().begin();\n+            Item item = new Item();\n+            item.setItemData(\"Test Data\");\n+            em.persist(item);\n+            em.flush();\n+            em.remove(item);\n+            em.flush();\n+            em.refresh(item);\n+            em.getTransaction().commit();\n+            fail(\"Did not catch expected IllegalArgumentException for refresh() of removed entity\");\n+        } catch (IllegalArgumentException e) {\n+            // Expected exception\n+        }\n+    }\n+    \n     \n     void assertCached(Class<?> cls, Object oid) {\n         assertTrue(cls + \":\" + oid + \" should be in L2 cache, but not\", emf.getCache().contains(cls, oid));"},{"sha":"f599e4bf195802f7ae9ed82697fade22363818bd","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerRefreshException.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/6d87bbdbb0d3571cf0e28f77273b1aab0cc79a2d/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerRefreshException.java","raw_url":"https://github.com/apache/openjpa/raw/6d87bbdbb0d3571cf0e28f77273b1aab0cc79a2d/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerRefreshException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestMixedLockManagerRefreshException.java?ref=6d87bbdbb0d3571cf0e28f77273b1aab0cc79a2d","patch":"@@ -255,28 +255,28 @@ public void testRefreshIllegalArgrumentExceptions() {\n             {Act.Remove},\n \n             {Act.Refresh, 1, LockModeType.NONE },\n-            {Act.TestException},\n+            {Act.TestException, 1, IllegalArgumentException.class },\n       \n             {Act.Refresh, 1, LockModeType.READ },\n-            {Act.TestException},\n+            {Act.TestException, 1, IllegalArgumentException.class },\n \n             {Act.Refresh, 1, LockModeType.WRITE },\n-            {Act.TestException},\n+            {Act.TestException, 1, IllegalArgumentException.class },\n \n             {Act.Refresh, 1, LockModeType.OPTIMISTIC },\n-            {Act.TestException},\n+            {Act.TestException, 1, IllegalArgumentException.class },\n \n             {Act.Refresh, 1, LockModeType.OPTIMISTIC_FORCE_INCREMENT },\n-            {Act.TestException},\n+            {Act.TestException, 1, IllegalArgumentException.class },\n \n             {Act.Refresh, 1, LockModeType.PESSIMISTIC_READ },\n-            {Act.TestException},\n+            {Act.TestException, 1, IllegalArgumentException.class },\n \n             {Act.Refresh, 1, LockModeType.PESSIMISTIC_WRITE },\n-            {Act.TestException},\n+            {Act.TestException, 1, IllegalArgumentException.class },\n \n             {Act.Refresh, 1, LockModeType.PESSIMISTIC_FORCE_INCREMENT },\n-            {Act.TestException},\n+            {Act.TestException, 1, IllegalArgumentException.class },\n             \n             {Act.RollbackTx},\n         };"},{"sha":"24a2d205c976a7a521ed022743eb8e7ea165cf75","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":10,"deletions":6,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/6d87bbdbb0d3571cf0e28f77273b1aab0cc79a2d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/6d87bbdbb0d3571cf0e28f77273b1aab0cc79a2d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=6d87bbdbb0d3571cf0e28f77273b1aab0cc79a2d","patch":"@@ -101,6 +101,10 @@\n \n     private static final Localizer _loc = Localizer.forPackage(EntityManagerImpl.class);\n     private static final Object[] EMPTY_OBJECTS = new Object[0];\n+    \n+    private static final String GET_LOCK_MODE = \"getLockMode\";\n+    private static final String LOCK = \"lock\";\n+    private static final String REFRESH = \"refresh\";\n \n     private DelegatingBroker _broker;\n     private EntityManagerFactoryImpl _emf;\n@@ -742,7 +746,7 @@ public void refresh(Object entity, Map<String, Object> properties) {\n \n     public void refresh(Object entity, LockModeType mode, Map<String, Object> properties) {\n         assertNotCloseInvoked();\n-        assertValidAttchedEntity(\"refresh\", entity);\n+        assertValidAttchedEntity(REFRESH, entity);\n \n         _broker.assertWriteOperation();\n         configureCurrentFetchPlan(pushFetchPlan(), properties, mode, true);\n@@ -1144,7 +1148,7 @@ public Object getDelegate() {\n     public LockModeType getLockMode(Object entity) {\n         assertNotCloseInvoked();\n         _broker.assertActiveTransaction();\n-        assertValidAttchedEntity(\"getLockMode\", entity);\n+        assertValidAttchedEntity(GET_LOCK_MODE, entity);\n         return MixedLockLevelsHelper.fromLockLevel(\n             _broker.getLockLevel(entity));\n     }\n@@ -1155,13 +1159,13 @@ public void lock(Object entity, LockModeType mode) {\n \n     public void lock(Object entity) {\n         assertNotCloseInvoked();\n-        assertValidAttchedEntity(\"lock\", entity);\n+        assertValidAttchedEntity(LOCK, entity);\n         _broker.lock(entity, this);\n     }\n \n     public void lock(Object entity, LockModeType mode, int timeout) {\n         assertNotCloseInvoked();\n-        assertValidAttchedEntity(\"lock\", entity);\n+        assertValidAttchedEntity(LOCK, entity);\n \n         configureCurrentFetchPlan(pushFetchPlan(), null, mode, false);\n         try {\n@@ -1173,7 +1177,7 @@ public void lock(Object entity, LockModeType mode, int timeout) {\n \n     public void lock(Object entity, LockModeType mode, Map<String, Object> properties) {\n         assertNotCloseInvoked();\n-        assertValidAttchedEntity(\"lock\", entity);\n+        assertValidAttchedEntity(LOCK, entity);\n         _broker.assertActiveTransaction();\n         configureCurrentCacheModes(getFetchPlan(), properties);\n         configureCurrentFetchPlan(pushFetchPlan(), properties, mode, false);\n@@ -1341,7 +1345,7 @@ protected void assertNotCloseInvoked() {\n      */\n     void assertValidAttchedEntity(String call, Object entity) {\n         OpenJPAStateManager sm = _broker.getStateManager(entity);\n-        if (sm == null || !sm.isPersistent() || sm.isDetached()) {\n+        if (sm == null || !sm.isPersistent() || sm.isDetached() || (call.equals(REFRESH) && sm.isDeleted())) {\n             throw new IllegalArgumentException(_loc.get(\"invalid_entity_argument\", \n                 call, entity == null ? \"null\" : Exceptions.toString(entity)).getMessage());\n         }"}]}

