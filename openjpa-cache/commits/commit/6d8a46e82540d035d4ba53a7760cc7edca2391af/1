{"sha":"6d8a46e82540d035d4ba53a7760cc7edca2391af","node_id":"MDY6Q29tbWl0MjA2MzY0OjZkOGE0NmU4MjU0MGQwMzVkNGJhNTNhNzc2MGNjN2VkY2EyMzkxYWY=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2014-02-20T16:33:30Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2014-02-20T16:33:30Z"},"message":"OPENJPA-2441: Remove usage of NullSafeConcurrentHashMap. Patch contributed by Dalia Abo Sheasha.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1570261 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f607a6fd923aa4d99cc59d41181a57fc41241aea","url":"https://api.github.com/repos/apache/openjpa/git/trees/f607a6fd923aa4d99cc59d41181a57fc41241aea"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6d8a46e82540d035d4ba53a7760cc7edca2391af","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6d8a46e82540d035d4ba53a7760cc7edca2391af","html_url":"https://github.com/apache/openjpa/commit/6d8a46e82540d035d4ba53a7760cc7edca2391af","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6d8a46e82540d035d4ba53a7760cc7edca2391af/comments","author":null,"committer":null,"parents":[{"sha":"f01f7c47216056a1fbe13272b6aea282618da7ac","url":"https://api.github.com/repos/apache/openjpa/commits/f01f7c47216056a1fbe13272b6aea282618da7ac","html_url":"https://github.com/apache/openjpa/commit/f01f7c47216056a1fbe13272b6aea282618da7ac"}],"stats":{"total":470,"additions":108,"deletions":362},"files":[{"sha":"56324d27fb076b28e4dbf05715239049065ea9ab","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractQueryCache.java","status":"modified","additions":22,"deletions":6,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/6d8a46e82540d035d4ba53a7760cc7edca2391af/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/6d8a46e82540d035d4ba53a7760cc7edca2391af/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractQueryCache.java?ref=6d8a46e82540d035d4ba53a7760cc7edca2391af","patch":"@@ -40,9 +40,10 @@\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.ReferenceMap;\n import org.apache.openjpa.lib.util.concurrent.AbstractConcurrentEventManager;\n+import org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap;\n import org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashSet;\n-import org.apache.openjpa.lib.util.concurrent.SizedConcurrentHashMap;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.util.Id;\n@@ -480,11 +481,27 @@ public int count() {\n         \n         private long[] astat = new long[ARRAY_SIZE];\n         private long[] stat  = new long[ARRAY_SIZE];\n-        private Map<T, long[]> stats  = new SizedConcurrentHashMap(FIXED_SIZE, LOAD_FACTOR, CONCURRENCY);\n-        private Map<T, long[]> astats = new SizedConcurrentHashMap(FIXED_SIZE, LOAD_FACTOR, CONCURRENCY);\n+        private Map<T, long[]> stats;\n+        private Map<T, long[]> astats;\n         private Date start = new Date();\n         private Date since = start;\n-        \n+\n+        public Default() {\n+            initializeMaps();\n+        }\n+\n+        private void initializeMaps() {\n+            ConcurrentReferenceHashMap statsMap =\n+                new ConcurrentReferenceHashMap(ReferenceMap.HARD, ReferenceMap.HARD, CONCURRENCY, LOAD_FACTOR);\n+            statsMap.setMaxSize(FIXED_SIZE);\n+            stats = statsMap;\n+\n+            ConcurrentReferenceHashMap aStatsMap =\n+                new ConcurrentReferenceHashMap(ReferenceMap.HARD, ReferenceMap.HARD, CONCURRENCY, LOAD_FACTOR);\n+            aStatsMap.setMaxSize(FIXED_SIZE);\n+            astats = aStatsMap;\n+        }\n+\n         public Set<T> keys() {\n             return stats.keySet();\n         }\n@@ -552,8 +569,7 @@ public synchronized void reset() {\n         public synchronized void clear() {\n            astat = new long[ARRAY_SIZE];\n            stat  = new long[ARRAY_SIZE];\n-           stats = new SizedConcurrentHashMap(FIXED_SIZE, LOAD_FACTOR, CONCURRENCY);\n-           astats = new SizedConcurrentHashMap(FIXED_SIZE, LOAD_FACTOR, CONCURRENCY);\n+           initializeMaps();\n            start  = new Date();\n            since  = start;\n         }"},{"sha":"40eec08aa83f0d9eda26a03e6738a2c24e5ea890","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryStatistics.java","status":"modified","additions":21,"deletions":5,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/6d8a46e82540d035d4ba53a7760cc7edca2391af/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryStatistics.java","raw_url":"https://github.com/apache/openjpa/raw/6d8a46e82540d035d4ba53a7760cc7edca2391af/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryStatistics.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryStatistics.java?ref=6d8a46e82540d035d4ba53a7760cc7edca2391af","patch":"@@ -25,7 +25,8 @@\n import java.util.Map;\n import java.util.Set;\n \n-import org.apache.openjpa.lib.util.concurrent.SizedConcurrentHashMap;\n+import org.apache.openjpa.lib.util.ReferenceMap;\n+import org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap;\n \n /**\n  * Records query execution statistics.\n@@ -153,11 +154,27 @@\n         \n \t\tprivate long[] astat = new long[ARRAY_SIZE];\n \t\tprivate long[] stat  = new long[ARRAY_SIZE];\n-\t\tprivate Map<T, long[]> stats  = new SizedConcurrentHashMap(FIXED_SIZE, LOAD_FACTOR, CONCURRENCY);\n-\t\tprivate Map<T, long[]> astats = new SizedConcurrentHashMap(FIXED_SIZE, LOAD_FACTOR, CONCURRENCY);\n+\t\tprivate Map<T, long[]> stats;\n+\t\tprivate Map<T, long[]> astats;\n \t\tprivate Date start = new Date();\n \t\tprivate Date since = start;\n \t\t\n+\t\tpublic Default() {\n+            initializeMaps();\n+        }\n+\n+        private void initializeMaps() {\n+            ConcurrentReferenceHashMap statsMap =\n+                new ConcurrentReferenceHashMap(ReferenceMap.HARD, ReferenceMap.HARD, CONCURRENCY, LOAD_FACTOR);\n+            statsMap.setMaxSize(FIXED_SIZE);\n+            stats = statsMap;\n+\n+            ConcurrentReferenceHashMap aStatsMap =\n+                new ConcurrentReferenceHashMap(ReferenceMap.HARD, ReferenceMap.HARD, CONCURRENCY, LOAD_FACTOR);\n+            aStatsMap.setMaxSize(FIXED_SIZE);\n+            astats = aStatsMap;\n+        }\n+        \n \t\tpublic Set<T> keys() {\n \t\t    return stats.keySet();\n \t\t}\n@@ -216,8 +233,7 @@ public synchronized void reset() {\n \t    public synchronized void clear() {\n \t       astat = new long[ARRAY_SIZE];\n \t       stat  = new long[ARRAY_SIZE];\n-\t       stats = new SizedConcurrentHashMap(FIXED_SIZE, LOAD_FACTOR, CONCURRENCY);\n-\t       astats = new SizedConcurrentHashMap(FIXED_SIZE, LOAD_FACTOR, CONCURRENCY);\n+\t       initializeMaps();\n \t       start  = new Date();\n \t       since  = start;\n \t    }"},{"sha":"e71c91dbae8e6270cd25c305c5177ee3036d82b5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","status":"modified","additions":19,"deletions":18,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/6d8a46e82540d035d4ba53a7760cc7edca2391af/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/6d8a46e82540d035d4ba53a7760cc7edca2391af/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java?ref=6d8a46e82540d035d4ba53a7760cc7edca2391af","patch":"@@ -56,8 +56,8 @@\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n-import org.apache.openjpa.lib.util.concurrent.NullSafeConcurrentHashMap;\n \n+import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n import serp.bytecode.BCClass;\n@@ -94,8 +94,8 @@\n         _stdMaps.put(SortedMap.class, TreeMap.class);\n     }\n \n-    private final Set _unproxyable = new HashSet();\n-    private final Map _proxies = new NullSafeConcurrentHashMap();\n+    private final Set<String> _unproxyable = new HashSet<String>();\n+    private final Map<Class<?>, Proxy> _proxies = new ConcurrentHashMap<Class<?>, Proxy>();\n     private boolean _trackChanges = true;\n     private boolean _assertType = false;\n     private boolean _delayedCollectionLoading = false;\n@@ -453,31 +453,32 @@ private ProxyCalendar getFactoryProxyCalendar(Class type) {\n      * Return the cached factory proxy for the given bean type.\n      */\n     private ProxyBean getFactoryProxyBean(Object orig) {\n-        final Class type = orig.getClass();\n+        final Class<?> type = orig.getClass();\n         if (isUnproxyable(type))\n             return null;\n \n         // we don't lock here; ok if two proxies get generated for same type\n         ProxyBean proxy = (ProxyBean) _proxies.get(type);\n-        if (proxy == null && !_proxies.containsKey(type)) {\n-            ClassLoader l = GeneratedClasses.getMostDerivedLoader(type,\n-                ProxyBean.class);\n-            Class pcls = loadBuildTimeProxy(type, l);\n+        if (proxy == null) {\n+            ClassLoader l = GeneratedClasses.getMostDerivedLoader(type, ProxyBean.class);\n+            Class<?> pcls = loadBuildTimeProxy(type, l);\n             if (pcls == null) {\n-                // TODO Move this to J2DOPrivHelper? \n-                BCClass bc = AccessController\n-                    .doPrivileged(new PrivilegedAction<BCClass>() {\n-                        public BCClass run() {\n-                            return generateProxyBeanBytecode(type, true);\n-                        }\n-                    });\n+                // TODO Move this to J2DOPrivHelper?\n+                BCClass bc = AccessController.doPrivileged(new PrivilegedAction<BCClass>() {\n+                    public BCClass run() {\n+                        return generateProxyBeanBytecode(type, true);\n+                    }\n+                });\n                 if (bc != null)\n                     pcls = GeneratedClasses.loadBCClass(bc, l);\n             }\n             if (pcls != null)\n-                proxy = (ProxyBean) instantiateProxy(pcls,\n-                    findCopyConstructor(type), new Object[] {orig});\n-            _proxies.put(type, proxy);\n+                proxy = (ProxyBean) instantiateProxy(pcls, findCopyConstructor(type), new Object[] { orig });\n+            if (proxy == null) {\n+                _unproxyable.add(type.getName());\n+            } else {\n+                _proxies.put(type, proxy);\n+            }\n         }\n         return proxy;\n     }"},{"sha":"7d27eada0bb683a78f0c97d304688effbf734397","filename":"openjpa-kernel/src/test/java/org/apache/openjpa/util/TestProxyManager.java","status":"modified","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/6d8a46e82540d035d4ba53a7760cc7edca2391af/openjpa-kernel/src/test/java/org/apache/openjpa/util/TestProxyManager.java","raw_url":"https://github.com/apache/openjpa/raw/6d8a46e82540d035d4ba53a7760cc7edca2391af/openjpa-kernel/src/test/java/org/apache/openjpa/util/TestProxyManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/test/java/org/apache/openjpa/util/TestProxyManager.java?ref=6d8a46e82540d035d4ba53a7760cc7edca2391af","patch":"@@ -740,8 +740,35 @@ public void testNonproxyableBean() {\n         NonproxyableBean orig = new NonproxyableBean(1);\n         populate(orig);\n         assertNull(_mgr.copyCustom(orig));\n+        assertNull(_mgr.copyCustom(orig));\n         assertNull(_mgr.newCustomProxy(orig, true));\n     }\n+    \n+    public void testIsUnproxyable() {\n+        CustomBean validBean = new CustomBean();\n+        populate(validBean);\n+        assertNotNull(_mgr.copyCustom(validBean));\n+        assertNotNull(_mgr.newCustomProxy(validBean, true));\n+        assertFalse(_mgr.isUnproxyable(CustomBean.class));\n+        \n+        NonproxyableBean bean1 = new NonproxyableBean(1);\n+        populate(bean1);\n+        \n+        NonproxyableBean2 bean2 = new NonproxyableBean2();\n+        populate(bean2);\n+\n+        assertFalse(_mgr.isUnproxyable(NonproxyableBean.class));\n+        assertNull(_mgr.copyCustom(bean1));\n+        assertTrue(_mgr.isUnproxyable(NonproxyableBean.class));\n+        assertNull(_mgr.newCustomProxy(bean1, true));\n+        assertTrue(_mgr.isUnproxyable(NonproxyableBean.class));\n+        \n+        assertFalse(_mgr.isUnproxyable(NonproxyableBean2.class));\n+        assertNull(_mgr.newCustomProxy(bean2, true));\n+        assertTrue(_mgr.isUnproxyable(NonproxyableBean2.class));\n+        assertNull(_mgr.copyCustom(bean2));\n+        assertTrue(_mgr.isUnproxyable(NonproxyableBean2.class));\n+    }\n \n     /**\n      * Assert that the given beans are exactly the same.\n@@ -948,6 +975,13 @@ public NonproxyableBean(long x) {\n         }\n     }\n \n+    /**\n+     * Used to non-proxyable custom bean handling.\n+     */\n+    public class NonproxyableBean2 extends CustomBean {\n+        // class is not static\n+    }\n+\n     /**\n      * Used to test custom calendar handling.\n      */"},{"sha":"611b15fb2448816270069d50f70dc6cb5b6937e3","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/NullSafeConcurrentHashMap.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/6d8a46e82540d035d4ba53a7760cc7edca2391af/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/NullSafeConcurrentHashMap.java","raw_url":"https://github.com/apache/openjpa/raw/6d8a46e82540d035d4ba53a7760cc7edca2391af/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/NullSafeConcurrentHashMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/NullSafeConcurrentHashMap.java?ref=6d8a46e82540d035d4ba53a7760cc7edca2391af","patch":"@@ -31,12 +31,15 @@\n import org.apache.commons.collections.set.MapBackedSet;\n \n /**\n- * A subclass of {@link ConcurrentHashMap} that allows null keys and values.\n- * In exchange, it weakens the contract of {@link #putIfAbsent} and the other\n- * concurrent methods added in {@link #ConcurrentHashMap}.\n- *\n+ * A subclass of {@link ConcurrentHashMap} that allows null keys and values. In exchange, it weakens the contract of\n+ * {@link #putIfAbsent} and the other concurrent methods added in {@link #ConcurrentHashMap}.\n+ * \n  * @since 1.1.0\n+ * @deprecated In Java 8, java.util.ConcurrentHashMap received an overhauled and this extension was not updated. This\n+ *             class will fail to compile on Java 8. If it is compiled at a lower level and run on Java 8 it will not\n+ *             work properly. For more information: https://issues.apache.org/jira/browse/OPENJPA-2441\n  */\n+@Deprecated\n public class NullSafeConcurrentHashMap extends ConcurrentHashMap {\n \n     private enum Markers {"},{"sha":"f3e141f5cd6a6073cf57e05714dbd53c35115db0","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/SizedConcurrentHashMap.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/6d8a46e82540d035d4ba53a7760cc7edca2391af/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/SizedConcurrentHashMap.java","raw_url":"https://github.com/apache/openjpa/raw/6d8a46e82540d035d4ba53a7760cc7edca2391af/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/SizedConcurrentHashMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/SizedConcurrentHashMap.java?ref=6d8a46e82540d035d4ba53a7760cc7edca2391af","patch":"@@ -28,9 +28,13 @@\n \n /**\n  * An implementation of {@link SizedMap} that uses JDK1.5 concurrency primitives\n- *\n+ * \n  * @since 1.1.0\n+ * @deprecated In Java 8, java.util.ConcurrentHashMap received an overhauled and this extension was not updated. This\n+ *             class will fail to compile on Java 8. If it is compiled at a lower level and run on Java 8 it will not\n+ *             work properly. For more information: https://issues.apache.org/jira/browse/OPENJPA-2441\n  */\n+@Deprecated\n public class SizedConcurrentHashMap\n     extends NullSafeConcurrentHashMap\n     implements SizedMap, ConcurrentMap, Serializable {"},{"sha":"58e8100ea3e76f75b1b5fd013f2745c79d7d1433","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestConcurrentMap.java","status":"removed","additions":0,"deletions":149,"changes":149,"blob_url":"https://github.com/apache/openjpa/blob/f01f7c47216056a1fbe13272b6aea282618da7ac/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestConcurrentMap.java","raw_url":"https://github.com/apache/openjpa/raw/f01f7c47216056a1fbe13272b6aea282618da7ac/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestConcurrentMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestConcurrentMap.java?ref=f01f7c47216056a1fbe13272b6aea282618da7ac","patch":"@@ -1,149 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.lib.util.concurrent;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.TreeSet;\n-\n-import org.apache.openjpa.lib.util.ReferenceMap;\n-import org.apache.openjpa.lib.test.AbstractTestCase;\n-\n-/**\n- * Tests the methods of {@link ConcurrentMap}.\n- *\n- * @author Abe White\n- */\n-public class TestConcurrentMap extends AbstractTestCase {\n-\n-    private static final int ENTRIES = 333;\n-    private static final int SLEEP = 3;\n-\n-    private ConcurrentMap[] _maps = new ConcurrentMap[]{\n-        new SizedConcurrentHashMap(ENTRIES, .75f, 16), \n-        new ConcurrentReferenceHashMap(ReferenceMap.HARD, ReferenceMap.HARD), };\n-\n-    public void setUp() throws Exception {\n-        super.setUp();\n-        for (int i = 0; i < ENTRIES; i++) {\n-            for (int j = 0; j < _maps.length; j++) {\n-                int key = j * ENTRIES + i;\n-                _maps[j].put(new Integer(key), \"v\" + key);\n-            }\n-        }\n-        for (int i = 0; i < _maps.length; i++)\n-            assertEquals(ENTRIES, _maps[i].size());\n-    }\n-\n-    public void testRemoveRandom() {\n-        Set keys = new TreeSet();\n-        for (int i = 0; i < ENTRIES; i++)\n-            for (int j = 0; j < _maps.length; j++)\n-                assertTrue(removeRandom(_maps[j], keys));\n-        postRemoveTest(keys);\n-    }\n-\n-    private static boolean removeRandom(ConcurrentMap map, Set keys) {\n-        Map.Entry rem = map.removeRandom();\n-        return rem != null && rem.getValue().equals(\"v\" + rem.getKey())\n-            && keys.add(rem.getKey());\n-    }\n-\n-    private void postRemoveTest(Set keys) {\n-        for (int i = 0; i < _maps.length; i++) {\n-            assertTrue(_maps[i].isEmpty());\n-            assertTrue(!_maps[i].containsKey(new Integer(ENTRIES * i + i)));\n-        }\n-        assertEquals(keys.toString(), ENTRIES * _maps.length, keys.size());\n-    }\n-\n-    public synchronized void testRemoveRandomThreaded()\n-        throws InterruptedException {\n-        Set keys = Collections.synchronizedSet(new TreeSet());\n-        RemoveRandomRunnable[] runs =\n-            new RemoveRandomRunnable[ENTRIES * _maps.length];\n-        for (int i = 0; i < ENTRIES; i++)\n-            for (int j = 0; j < _maps.length; j++)\n-                runs[j * ENTRIES + i] = new RemoveRandomRunnable\n-                    (_maps[j], keys);\n-        for (int i = 0; i < runs.length; i++)\n-            new Thread(runs[i]).start();\n-        Thread.currentThread().sleep(SLEEP * ENTRIES * _maps.length);\n-        for (int i = 0; i < runs.length; i++) {\n-            assertTrue(String.valueOf(i), !runs[i].error);\n-            if (runs[i].interrupted)\n-                throw new InterruptedException(String.valueOf(i));\n-        }\n-        postRemoveTest(keys);\n-    }\n-\n-    public void testIterate() {\n-        iterationTest(false);\n-    }\n-\n-    private List iterationTest(boolean random) {\n-        Set keys = new TreeSet();\n-        List ordered = new ArrayList(200);\n-        for (int i = 0; i < _maps.length; i++) {\n-            Iterator itr = (random) ? _maps[i].randomEntryIterator()\n-                : _maps[i].entrySet().iterator();\n-            while (itr.hasNext()) {\n-                Map.Entry entry = (Map.Entry) itr.next();\n-                assertEquals(\"v\" + entry.getKey(), entry.getValue());\n-                assertTrue(keys + \":: \" + _maps[i].getClass() + \"::\"\n-                    + entry.getKey() + \"::\" + entry.getValue(),\n-                    keys.add(entry.getKey()));\n-                ordered.add(entry.getKey());\n-            }\n-        }\n-        assertEquals(keys.toString(), ENTRIES * _maps.length, keys.size());\n-        return ordered;\n-    }\n-\n-    public void testRandomIterate() {\n-        iterationTest(true);\n-    }\n-\n-    private static class RemoveRandomRunnable implements Runnable {\n-\n-        public boolean error = false;\n-        public boolean interrupted = false;\n-\n-        private final ConcurrentMap _map;\n-        private final Set _keys;\n-\n-        public RemoveRandomRunnable(ConcurrentMap map, Set keys) {\n-            _map = map;\n-            _keys = keys;\n-        }\n-\n-        public synchronized void run() {\n-            try {\n-                Thread.currentThread().sleep((long) (Math.random() * SLEEP));\n-            } catch (InterruptedException ie) {\n-                interrupted = true;\n-            }\n-            error = !removeRandom(_map, _keys);\n-        }\n-    }\n-}"},{"sha":"a39620107e864578a1cdb44e391b902778e5b1ea","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestNullSafeConcurrentHashMap.java","status":"removed","additions":0,"deletions":179,"changes":179,"blob_url":"https://github.com/apache/openjpa/blob/f01f7c47216056a1fbe13272b6aea282618da7ac/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestNullSafeConcurrentHashMap.java","raw_url":"https://github.com/apache/openjpa/raw/f01f7c47216056a1fbe13272b6aea282618da7ac/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestNullSafeConcurrentHashMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestNullSafeConcurrentHashMap.java?ref=f01f7c47216056a1fbe13272b6aea282618da7ac","patch":"@@ -1,179 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.openjpa.lib.util.concurrent;\n-\n-import java.io.IOException;\n-import java.util.Set;\n-import java.util.Collection;\n-import java.util.Map;\n-import java.util.HashMap;\n-import java.util.Map.Entry;\n-\n-import org.apache.openjpa.lib.test.AbstractTestCase;\n-\n-public class TestNullSafeConcurrentHashMap extends AbstractTestCase {\n-\n-    private NullSafeConcurrentHashMap newMap() {\n-        return new NullSafeConcurrentHashMap();\n-    }\n-\n-    public void testRemoveRandomIsNotTotallyDeterministic() {\n-        removeHelper(false);\n-    }\n-\n-    public void testRandomIteratorIsNotTotallyDeterministic() {\n-        removeHelper(true);\n-    }\n-\n-    private void removeHelper(boolean iter) {\n-        Map<String,Integer> removedCounts = new HashMap();\n-        for (int i = 0; i < 1000; i++) {\n-            NullSafeConcurrentHashMap m = new NullSafeConcurrentHashMap();\n-            m.put(\"a\", \"A\");\n-            m.put(\"b\", \"B\");\n-            m.put(\"c\", \"C\");\n-            m.put(\"d\", \"D\");\n-            m.put(\"e\", \"E\");\n-            m.put(\"f\", \"F\");\n-            m.put(\"g\", \"G\");\n-\n-            String removed;\n-            if (iter) {\n-                removed = (String) m.removeRandom().getKey();\n-            } else {\n-                removed = (String) ((Entry) m.randomEntryIterator().next())\n-                    .getKey();\n-                m.remove(removed);\n-            }\n-\n-            Integer count = removedCounts.get(removed);\n-            if (count == null)\n-                removedCounts.put(removed, 1);\n-            else\n-                removedCounts.put(removed, count.intValue() + 1);\n-        }\n-\n-        // assume that over 1000 runs, every element should be removed at\n-        // least once, and no element should be removed more than 30% of\n-        // the time\n-        assertEquals(7, removedCounts.size());\n-        for (Entry<String,Integer> entry : removedCounts.entrySet()) {\n-            if (entry.getValue() == 0)\n-                fail(\"element \" + entry.getKey() + \" was never removed\");\n-            if (entry.getValue() > 500)\n-                fail(\"element \" + entry.getKey() + \" was removed \"\n-                    + entry.getValue() + \" times; this is greater than the \"\n-                    + \"threshold of 500.\");\n-        }\n-    }\n-\n-    public void testNullKeys() throws ClassNotFoundException, IOException {\n-        helper(null, \"value 0\", \"value 1\", \"value 2\");\n-    }\n-\n-    private void helper(Object key, Object value0,\n-        Object value1, Object value2)\n-        throws IOException, ClassNotFoundException {\n-\n-        NullSafeConcurrentHashMap m = newMap();\n-\n-        // initial put\n-        m.put(key, value0);\n-\n-        // get etc.\n-        assertEquals(value0, m.get(key));\n-        assertTrue(m.containsKey(key));\n-        assertTrue(m.containsValue(value0));\n-\n-        // keySet\n-        Set keys = m.keySet();\n-        assertTrue(keys.contains(key));\n-        assertEquals(1, keys.size());\n-        assertEquals(key, keys.iterator().next());\n-\n-        // entrySet\n-        Set entries = m.entrySet();\n-        Entry e = (Entry) entries.iterator().next();\n-        assertEquals(key, e.getKey());\n-        assertEquals(value0, e.getValue());\n-\n-        // values\n-        Collection values = m.values();\n-        assertEquals(1, values.size());\n-        assertEquals(value0, values.iterator().next());\n-\n-        // serializability\n-        assertEquals(m, roundtrip(m, true));\n-\n-        // put\n-        assertEquals(value0, m.put(key, value1));\n-\n-        // remove\n-        assertEquals(value1, m.put(key, value1));\n-        assertEquals(value1, m.remove(key));\n-        m.put(key, value1);\n-\n-        // ConcurrentMap stuff\n-        assertFalse(m.remove(\"invalid key\", value0));\n-        assertTrue(m.remove(key, value1));\n-        assertNull(m.putIfAbsent(key, value0)); // null == prev unset\n-\n-        // value0 might be null; can't disambiguate from above in OpenJPA\n-        // interpretation\n-        assertEquals(value0, m.putIfAbsent(key, \"invalid value\"));\n-\n-        // replace\n-        assertEquals(value0, m.replace(key, value1));\n-        assertTrue(m.replace(key, value1, value2));\n-\n-        // putAll. Note that ConcurrentHashMap happens to delegate to put()\n-        // from within putAll() calls. This test should help ensure that we\n-        // find out if that changes.\n-        m = newMap();\n-        Map putAllArg = new HashMap();\n-        putAllArg.put(key, value0);\n-        putAllArg.put(\"another key\", value1);\n-        m.putAll(putAllArg);\n-        assertEquals(value0, m.get(key));\n-        assertEquals(value1, m.get(\"another key\"));\n-    }\n-\n-    public void testNullValues() throws ClassNotFoundException, IOException {\n-        nullValsHelper(\"foo\");\n-    }\n-\n-    private void nullValsHelper(Object key)\n-        throws IOException, ClassNotFoundException {\n-        helper(key, null, null, null);\n-        helper(key, \"bar\", \"baz\", \"quux\");\n-\n-        helper(key, \"bar\", \"baz\", null);\n-        helper(key, null, \"baz\", \"quux\");\n-        helper(key, \"bar\", null, \"quux\");\n-\n-        helper(key, \"bar\", null, null);\n-        helper(key, null, \"baz\", null);\n-        helper(key, null, null, \"quux\");\n-    }\n-\n-    public void testNullKeysAndValues()\n-        throws ClassNotFoundException, IOException {\n-        nullValsHelper(null);\n-    }\n-}"}]}

