{"sha":"6d8a5879847076701ea01abd98b004d0e1836530","node_id":"MDY6Q29tbWl0MjA2MzY0OjZkOGE1ODc5ODQ3MDc2NzAxZWEwMWFiZDk4YjAwNGQwZTE4MzY1MzA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-01T23:59:11Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-01T23:59:11Z"},"message":"OPENJPA-550: Correct example usage\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@681909 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cdd074b2ec1c8c9b22dfbfd0875376a57036d27e","url":"https://api.github.com/repos/apache/openjpa/git/trees/cdd074b2ec1c8c9b22dfbfd0875376a57036d27e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6d8a5879847076701ea01abd98b004d0e1836530","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6d8a5879847076701ea01abd98b004d0e1836530","html_url":"https://github.com/apache/openjpa/commit/6d8a5879847076701ea01abd98b004d0e1836530","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6d8a5879847076701ea01abd98b004d0e1836530/comments","author":null,"committer":null,"parents":[{"sha":"bea15fff475ba4235b54925602b3ba7c53189cbf","url":"https://api.github.com/repos/apache/openjpa/commits/bea15fff475ba4235b54925602b3ba7c53189cbf","html_url":"https://github.com/apache/openjpa/commit/bea15fff475ba4235b54925602b3ba7c53189cbf"}],"stats":{"total":44,"additions":24,"deletions":20},"files":[{"sha":"a4d0b4d0166f32b7526f42040e7de874ed634e4e","filename":"openjpa-project/src/doc/manual/jpa_overview_arch.xml","status":"modified","additions":24,"deletions":20,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/6d8a5879847076701ea01abd98b004d0e1836530/openjpa-project/src/doc/manual/jpa_overview_arch.xml","raw_url":"https://github.com/apache/openjpa/raw/6d8a5879847076701ea01abd98b004d0e1836530/openjpa-project/src/doc/manual/jpa_overview_arch.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_arch.xml?ref=6d8a5879847076701ea01abd98b004d0e1836530","patch":"@@ -195,33 +195,37 @@ container.\n             Interaction of Interfaces Outside Container\n         </title>\n <programlisting>\n-// get an EntityManagerFactory using the Persistence class; typically \n-// the factory is cached for easy repeated use\n-EntityManagerFactory factory = Persistence.createEntityManagerFactory(null);\n+  // get an EntityManagerFactory using the Persistence class\r\n+  // It is not recommended to obtain a factory often, as construction of a\r\n+  // factory is a costly operation. Typically you will like to cache  \n+  // a factory and then refer it for repeated use\n+  EntityManagerFactory factory = Persistence.createEntityManagerFactory(null);\n \n-// get an EntityManager from the factory\n-EntityManager em = factory.createEntityManager(PersistenceContextType.EXTENDED);\n+  // get an EntityManager from the factory\n+  EntityManager em = factory.createEntityManager();\n \n-// updates take place within transactions\n-EntityTransaction tx = em.getTransaction();\n-tx.begin();\n+  // Begin a transaction\n+  em.getTransaction().begin();\n \n-// query for all employees who work in our research division\n-// and put in over 40 hours a week average\n-Query query = em.createQuery(\"select e from Employee e where \"\n-    + \"e.division.name = 'Research' AND e.avgHours &gt; 40\");\n-List results = query.getResultList ();\n+  // query for all employees who work in our research division\n+  // and put in over 40 hours a week average\n+  Query query = em.createQuery(\"SELECT e \" +\r\n+                               \"  FROM Employee e \" +\r\n+                               \" WHERE e.division.name = 'Research' \" +\r\n+                               \"   AND e.avgHours &gt; 40\");\n+  List results = query.getResultList ();\n \n-// give all those hard-working employees a raise\n-for (Object res : results) {\n+  // give all those hard-working employees a raise\n+  for (Object res : results) {\n     Employee emp = (Employee) res;\n     emp.setSalary(emp.getSalary() * 1.1);\n-}\n+  }\n \n-// commit the updates and free resources\n-tx.commit();\n-em.close();\n-factory.close();\n+  // commit will detect all updated entities and save them in database\n+  em.getTransaction().commit();\r\n+\r\n+  // free the resources\n+  em.close();\n </programlisting>\n     </example>\n     <para>"}]}

