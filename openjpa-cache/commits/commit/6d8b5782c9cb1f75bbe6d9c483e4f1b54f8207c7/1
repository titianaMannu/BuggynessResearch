{"sha":"6d8b5782c9cb1f75bbe6d9c483e4f1b54f8207c7","node_id":"MDY6Q29tbWl0MjA2MzY0OjZkOGI1NzgyYzljYjFmNzViYmU2ZDljNDgzZTRmMWI1NGY4MjA3Yzc=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-07-22T21:54:40Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-07-22T21:54:40Z"},"message":"OPENJPA-1738: Prepared query does not handle collection-valued parameter of persistence-capable objects\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@966870 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2d674101d5e5dedc6dae65ca8326e497e1679a40","url":"https://api.github.com/repos/apache/openjpa/git/trees/2d674101d5e5dedc6dae65ca8326e497e1679a40"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6d8b5782c9cb1f75bbe6d9c483e4f1b54f8207c7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6d8b5782c9cb1f75bbe6d9c483e4f1b54f8207c7","html_url":"https://github.com/apache/openjpa/commit/6d8b5782c9cb1f75bbe6d9c483e4f1b54f8207c7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6d8b5782c9cb1f75bbe6d9c483e4f1b54f8207c7/comments","author":null,"committer":null,"parents":[{"sha":"459dddcd5946f45baf0a74bc1dfafd795a6d1494","url":"https://api.github.com/repos/apache/openjpa/commits/459dddcd5946f45baf0a74bc1dfafd795a6d1494","html_url":"https://github.com/apache/openjpa/commit/459dddcd5946f45baf0a74bc1dfafd795a6d1494"}],"stats":{"total":379,"additions":375,"deletions":4},"files":[{"sha":"6abb66fe6c5b1c4d048974bd933a9a0c347287eb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/6d8b5782c9cb1f75bbe6d9c483e4f1b54f8207c7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/6d8b5782c9cb1f75bbe6d9c483e4f1b54f8207c7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java?ref=6d8b5782c9cb1f75bbe6d9c483e4f1b54f8207c7","patch":"@@ -331,7 +331,7 @@ private boolean isUsingFieldStrategy(QueryExpressions exp) {\n                 setPersistenceCapableParameter(result, val, indices, broker);\n             } else if (val instanceof Collection) {\n                 setCollectionValuedParameter(result, (Collection)val, indices, \n-                    key);\n+                    key, broker);\n             } else {\n                 for (int j : indices) {\n                     if (val instanceof Enum) {\n@@ -386,7 +386,7 @@ private void setPersistenceCapableParameter(Map<Integer,Object> result,\n     }\n     \n     private void setCollectionValuedParameter(Map<Integer,Object> result, \n-        Collection values, int[] indices, Object param) {\n+        Collection values, int[] indices, Object param, Broker broker) {\n         int n = values.size();\n         Object[] array = values.toArray();\n         if (n > indices.length || indices.length%n != 0) {\n@@ -395,7 +395,11 @@ private void setCollectionValuedParameter(Map<Integer,Object> result,\n         }\n         int k = 0;\n         for (int j : indices) {\n-            result.put(j, array[k%n]);\n+            Object val = array[k%n];\n+            if (ImplHelper.isManageable(val))\n+                setPersistenceCapableParameter(result, val, indices, broker);\n+            else\n+                result.put(j, val);\n             k++;\n         }\n         "},{"sha":"59ce5b3a12aa7b33667215c78ad12de38a720bd0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Child.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/6d8b5782c9cb1f75bbe6d9c483e4f1b54f8207c7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Child.java","raw_url":"https://github.com/apache/openjpa/raw/6d8b5782c9cb1f75bbe6d9c483e4f1b54f8207c7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Child.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Child.java?ref=6d8b5782c9cb1f75bbe6d9c483e4f1b54f8207c7","patch":"@@ -0,0 +1,73 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.sqlcache;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Table;\r\n+\r\n+/**\r\n+ * Child in a bidirectional parent-child relationship.\r\n+ * \r\n+ * Notes:\r\n+ * a) there is no mutator for id because it is generated by JPA provider.\r\n+ * \r\n+ */\r\n+@Entity\r\n+@Table(name=\"zchild\")\r\n+public class Child {\r\n+\t@Id\r\n+\t@GeneratedValue\r\n+\tprivate String id;\r\n+\t\r\n+\tprivate String name;\r\n+\r\n+\t@ManyToOne(fetch=FetchType.LAZY)\r\n+\tprivate Parent parent;\r\n+\r\n+\t/**\r\n+\t * Restrict access to constructor for Parent to create the Child.\r\n+\t */\r\n+\tpublic Child() {\r\n+\t\t\r\n+\t}\r\n+\t\r\n+\tpublic String getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String city) {\r\n+\t\tthis.name = city;\r\n+\t}\r\n+\r\n+\tpublic Parent getParent() {\r\n+\t\treturn parent;\r\n+\t}\r\n+\r\n+\tvoid setParent(Parent owner) {\r\n+\t\tthis.parent = owner;\r\n+\t}\r\n+}\r"},{"sha":"c1f61432c6d97dedbf2fec0fa8679647ad5dfaef","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Parent.java","status":"added","additions":119,"deletions":0,"changes":119,"blob_url":"https://github.com/apache/openjpa/blob/6d8b5782c9cb1f75bbe6d9c483e4f1b54f8207c7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Parent.java","raw_url":"https://github.com/apache/openjpa/raw/6d8b5782c9cb1f75bbe6d9c483e4f1b54f8207c7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Parent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Parent.java?ref=6d8b5782c9cb1f75bbe6d9c483e4f1b54f8207c7","patch":"@@ -0,0 +1,119 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.sqlcache;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.IdClass;\r\n+import javax.persistence.JoinColumn;\r\n+import javax.persistence.OneToMany;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Table;\r\n+\r\n+/**\r\n+ * Parent in a bidirectional parent-child relationship.\r\n+ * \r\n+ * Note:\r\n+ * a) there is no mutator for id because it is generated by JPA provider.\r\n+ * \r\n+ */\r\n+@Entity\r\n+@IdClass(ParentId.class)\r\n+@Table(name=\"zparent\")\r\n+public class Parent {\r\n+\t@Id\r\n+\tprivate long id;\r\n+\t@Id\r\n+\tprivate String name;\r\n+    @Id\r\n+    @OneToOne(cascade = CascadeType.ALL)\r\n+    @JoinColumn(name=\"addrid\")\r\n+    private Address addrId;\r\n+\t\r\n+\t/**\r\n+     * This field is mapped by the child. The child's table will hold a foreign\r\n+     * key linking to the primary key of this Parent's table. In JPA\r\n+     * terminology, that makes the Child the owner of this bi-directional\r\n+     * relationship.\r\n+\t */\r\n+\t@OneToMany(mappedBy=\"parent\", cascade = CascadeType.ALL)\r\n+\tprivate Collection<Child> children;\r\n+\r\n+\r\n+    public long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+    public void setAddrId(Address addr) {\r\n+        this.addrId = addr;\r\n+    }\r\n+\r\n+    public Address getAddrId() {\r\n+        return addrId;\r\n+    }\r\n+\r\n+    public Collection<Child> getChildren() {\r\n+\t\treturn children;\r\n+\t}\r\n+\r\n+\t/**\r\n+     * Creates and adds a child to this receiver. Creating child via the parent\r\n+     * is the preferred pattern to ensure referential integrity of domain featureSelection.\r\n+\t */\r\n+\tpublic Child newChild(String name) {\r\n+\t\tChild child = new Child();\r\n+\t\tchild.setName(name);\r\n+\t\tchild.setParent(this);\r\n+\t\tif (children == null)\r\n+\t\t\tchildren = new ArrayList<Child>();\r\n+\t\tchildren.add(child);\r\n+\t\treturn child;\r\n+\t}\r\n+\t\r\n+\tpublic boolean removeChild(Child child) {\r\n+\t\treturn children != null && children.remove(child);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+     * Unsafe way of adding a child. Does not warranty referential integrity.\r\n+     * The caller has to ensure bi-directionality of parent-child relation is \r\n+\t * consistent.\r\n+\t */\r\n+\tpublic void add(Child child) {\r\n+\t\tif (children == null)\r\n+\t\t\tchildren = new ArrayList<Child>();\r\n+\t\tchildren.add(child);\r\n+\t}\r\n+}\r"},{"sha":"0cbbb7807e7665495fd81137b23db4af5ad41573","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/ParentId.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/6d8b5782c9cb1f75bbe6d9c483e4f1b54f8207c7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/ParentId.java","raw_url":"https://github.com/apache/openjpa/raw/6d8b5782c9cb1f75bbe6d9c483e4f1b54f8207c7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/ParentId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/ParentId.java?ref=6d8b5782c9cb1f75bbe6d9c483e4f1b54f8207c7","patch":"@@ -0,0 +1,83 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.sqlcache;\r\n+\r\n+public class ParentId implements java.io.Serializable {\r\n+    private static final long serialVersionUID = 4262907482129342511L;\r\n+    \r\n+    private long id;\r\n+    private String name;\r\n+    private long addrId;\r\n+    \r\n+    private Integer hashcode = null;\r\n+    \r\n+    public ParentId() {        \r\n+    }\r\n+\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setiId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+    \r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public long getAddrId() {\r\n+        return addrId;\r\n+    }\r\n+\r\n+    public void setAddrId(long addrId) {\r\n+        this.addrId = addrId;\r\n+    }\r\n+\r\n+    public boolean equals(Object o) {\r\n+        if (o == this) {\r\n+            return true;\r\n+        }\r\n+            \r\n+        if (o instanceof ParentId) {\r\n+            ParentId oId = (ParentId) o;\r\n+            if (    oId.id == this.id && \r\n+                    oId.name.equals(this.name) &&\r\n+                    oId.addrId == this.addrId) {\r\n+                return true;\r\n+            }\r\n+        }\r\n+        \r\n+        return false;\r\n+    }\r\n+    \r\n+    public int hashCode() {\r\n+        if (hashcode == null) {\r\n+            String hashStr = this.id + \":\" + this.name + \":\" + this.addrId;\r\n+            hashcode = hashStr.hashCode();\r\n+        }\r\n+        return hashcode.intValue();\r\n+    }\r\n+    \r\n+}\r"},{"sha":"b7a60cb52a8ed0d8940bcbb2c6f9863432b0cc5d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","status":"modified","additions":91,"deletions":1,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/6d8b5782c9cb1f75bbe6d9c483e4f1b54f8207c7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/6d8b5782c9cb1f75bbe6d9c483e4f1b54f8207c7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java?ref=6d8b5782c9cb1f75bbe6d9c483e4f1b54f8207c7","patch":"@@ -204,7 +204,23 @@ void createTestData() {\n         em.persist(o1);\n         em.persist(o2);\n         \n-        \n+        for (int i = 1; i < 10; i++) {\n+            Parent parent = new Parent();\n+            parent.setId(i);\n+            parent.setName(new String(\"Parent \"+i));\n+            Address addr = new Address();\n+            addr.setCity(\"Address \"+i+i);\n+            parent.setAddrId(addr);\n+            em.persist(addr);\n+            for (int j = 1; j < 5; j++) {\n+                Child child = new Child();\n+                child.setName(\"Child \"+i+j);\n+                child.setParent(parent);\n+                parent.add(child);\n+            }\n+            em.persist(parent);\n+        }\n+\n         em.getTransaction().commit();\n \t}\n \n@@ -213,6 +229,80 @@ public void tearDown() throws Exception {\n \t        em.close();\n \t\tsuper.tearDown();\n \t}\n+\n+    public void testCollectionValuedParameterOfEntities() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String jpql1 = \"select d from Department d where d.name in ('Marketing', 'Sales') order by d.name\";\n+        String jpql2 = \"select d from Department d where d.name in ('Engineering', 'Marketing') order by d.name\";\n+        \n+        List<Department> param1 = (List<Department>) em.createQuery(jpql1).getResultList();\n+        List<Department> param2 = (List<Department>) em.createQuery(jpql2).getResultList();\n+        em.clear();\n+        \n+        String jpql = \"select e from Employee e where e.department in :param\";\n+        \n+        List<Employee> rs1 = em.createQuery(jpql).setParameter(\"param\", param1).getResultList();\n+\n+        for (int i = 0; i < rs1.size(); i++) {\n+            Employee e = (Employee) rs1.get(i);\n+            assertFalse(e.getDepartment().getName().equals(\"Engineering\"));\n+        }\n+        \n+        List<Employee> rs2 = (List<Employee>) em.createQuery(jpql).setParameter(\"param\", param2).getResultList();\n+        for (int i = 0; i < rs2.size(); i++) {\n+            Employee e = (Employee) rs2.get(i);\n+            assertFalse(e.getDepartment().getName().equals(\"Sales\"));\n+        }\n+\n+        em.clear();\n+        String jpql3 = \"select e from Employee e where e.department in (:p1, :p2, :p3)\";\n+        Query query = em.createQuery(jpql3);\n+        query.setParameter(\"p1\", param1.get(0));\n+        query.setParameter(\"p2\", param1.get(1));\n+        query.setParameter(\"p3\", param1.get(2));\n+        List<Employee> rs3 = query.getResultList();\n+        for (int i = 0; i < rs3.size(); i++) {\n+            Employee e = (Employee) rs3.get(i);\n+            assertTrue(e.getDepartment().getName().equals(\"Marketing\"));\n+        }\n+\n+        em.clear();\n+        query = em.createQuery(jpql3);\n+        query.setParameter(\"p1\", param2.get(0));\n+        query.setParameter(\"p2\", param2.get(1));\n+        query.setParameter(\"p3\", param2.get(2));\n+        List<Employee> rs4 = query.getResultList();\n+        for (int i = 0; i < rs4.size(); i++) {\n+            Employee e = (Employee) rs4.get(i);\n+            assertTrue(e.getDepartment().getName().equals(\"Engineering\"));\n+        }\n+\n+        em.clear();\n+        String jpql4 = \"select p from Parent p where p.id < 3\";\n+        String jpql5 = \"select p from Parent p where p.id > 6\";\n+        List<Parent> parm1 = em.createQuery(jpql4).getResultList();\n+        List<Parent> parm2 = em.createQuery(jpql5).getResultList();\n+        \n+        em.clear();\n+        String jpql6 = \"select c from Child c where c.parent in ?1\";\n+        Query qry = em.createQuery(jpql6);\n+        qry.setParameter(1, parm1);\n+        List<Child> c1 = qry.getResultList();\n+        for (int i = 0; i < c1.size(); i++) {\n+            Child child = (Child) c1.get(i);\n+            assertTrue(child.getParent().getId() < 3);\n+        }\n+        \n+        em.clear();\n+        qry = em.createQuery(jpql6);\n+        qry.setParameter(1, parm2);\n+        List<Child> c2 = qry.getResultList();\n+        for (int i = 0; i < c2.size(); i++) {\n+            Child child = (Child) c2.get(i);\n+            assertTrue(child.getParent().getId() > 6);\n+        }\n+        \n+    }\n     \n     public void testRepeatedParameterInSubqueryInDifferentOrderSubQLast() {\n         OpenJPAEntityManager em = emf.createEntityManager();"},{"sha":"ab9527ccf7a2a3de5631d25689de488b0f91383c","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6d8b5782c9cb1f75bbe6d9c483e4f1b54f8207c7/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/6d8b5782c9cb1f75bbe6d9c483e4f1b54f8207c7/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=6d8b5782c9cb1f75bbe6d9c483e4f1b54f8207c7","patch":"@@ -208,6 +208,8 @@\n \t\t<class>org.apache.openjpa.persistence.jdbc.sqlcache.Person</class>\n \t\t<class>org.apache.openjpa.persistence.jdbc.sqlcache.Singer</class>\n         <class>org.apache.openjpa.persistence.jdbc.sqlcache.OrderJPA</class>\n+        <class>org.apache.openjpa.persistence.jdbc.sqlcache.Parent</class>\n+        <class>org.apache.openjpa.persistence.jdbc.sqlcache.Child</class>\n \t\t\n \t\t<properties>\n \t\t  <property name=\"openjpa.jdbc.QuerySQLCache\""}]}

