{"sha":"6db4db7f512e67b7ea1e3aeb124a4e0343df79d8","node_id":"MDY6Q29tbWl0MjA2MzY0OjZkYjRkYjdmNTEyZTY3YjdlYTFlM2FlYjEyNGE0ZTAzNDNkZjc5ZDg=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2021-04-01T19:59:36Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2021-04-01T19:59:36Z"},"message":"OPENJPA-2851 fix CURRENT_DATE with LocalDate and LocalDateTime","tree":{"sha":"cd0a93d69624e7f7fa464dd3ae38753e534e3c2a","url":"https://api.github.com/repos/apache/openjpa/git/trees/cd0a93d69624e7f7fa464dd3ae38753e534e3c2a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6db4db7f512e67b7ea1e3aeb124a4e0343df79d8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6db4db7f512e67b7ea1e3aeb124a4e0343df79d8","html_url":"https://github.com/apache/openjpa/commit/6db4db7f512e67b7ea1e3aeb124a4e0343df79d8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6db4db7f512e67b7ea1e3aeb124a4e0343df79d8/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"2a3fc7386182ce7e4a6ace5b8f5a926766e53041","url":"https://api.github.com/repos/apache/openjpa/commits/2a3fc7386182ce7e4a6ace5b8f5a926766e53041","html_url":"https://github.com/apache/openjpa/commit/2a3fc7386182ce7e4a6ace5b8f5a926766e53041"}],"stats":{"total":212,"additions":131,"deletions":81},"files":[{"sha":"ac6091fca68a7c5b6893c43bd422486d3125e477","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/6db4db7f512e67b7ea1e3aeb124a4e0343df79d8/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","raw_url":"https://github.com/apache/openjpa/raw/6db4db7f512e67b7ea1e3aeb124a4e0343df79d8/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java?ref=6db4db7f512e67b7ea1e3aeb124a4e0343df79d8","patch":"@@ -1074,7 +1074,12 @@ public static boolean isTemporalType(Class<?> c) {\n             && (Date.class.isAssignableFrom(c)\n              || Time.class.isAssignableFrom(c)\n              || Timestamp.class.isAssignableFrom(c)\n-             || Calendar.class.isAssignableFrom(c));\n+             || Calendar.class.isAssignableFrom(c)\n+             || LocalDate.class.isAssignableFrom(c)\n+             || LocalDateTime.class.isAssignableFrom(c)\n+             || LocalTime.class.isAssignableFrom(c)\n+             || OffsetTime.class.isAssignableFrom(c)\n+             || OffsetDateTime.class.isAssignableFrom(c));\n     }\n \n     public static Object getDefaultForNull(Class<?> nType) {"},{"sha":"94eac1182e6d6d81eeb5b8172f19aca0be7cfa8d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestJava8TimeTypes.java","status":"modified","additions":125,"deletions":80,"changes":205,"blob_url":"https://github.com/apache/openjpa/blob/6db4db7f512e67b7ea1e3aeb124a4e0343df79d8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestJava8TimeTypes.java","raw_url":"https://github.com/apache/openjpa/raw/6db4db7f512e67b7ea1e3aeb124a4e0343df79d8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestJava8TimeTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestJava8TimeTypes.java?ref=6db4db7f512e67b7ea1e3aeb124a4e0343df79d8","patch":"@@ -29,7 +29,6 @@\n import java.time.LocalTime;\n import java.time.OffsetDateTime;\n import java.time.OffsetTime;\n-import java.time.ZoneId;\n import java.time.ZoneOffset;\n import java.util.Date;\n import java.util.List;\n@@ -42,30 +41,33 @@\n     private static String VAL_LOCAL_TIME = \"04:57:15\";\n     private static String VAL_LOCAL_DATETIME = \"2019-01-01T01:00:00\";\n \n+    private Java8TimeTypes insertedEntity = new Java8TimeTypes();\n \n     @Override\n     public void setUp() {\n         setUp(CLEAR_TABLES, Java8TimeTypes.class);\n-    }\n \n-    public void testJava8Types() {\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n-        Java8TimeTypes e = new Java8TimeTypes();\n-        e.setId(1);\n-        e.setOldDateField(new Date());\n-        e.setLocalTimeField(LocalTime.parse(VAL_LOCAL_TIME));\n-        e.setLocalDateField(LocalDate.parse(VAL_LOCAL_DATE));\n-        e.setLocalDateTimeField(LocalDateTime.parse(VAL_LOCAL_DATETIME));\n-        e.setOffsetTimeField(e.getLocalTimeField().atOffset(ZoneOffset.ofHours(-9)));\n-        e.setOffsetDateTimeField(e.getLocalDateTimeField().atOffset(ZoneOffset.ofHours(-9)));\n-\n-        em.persist(e);\n+        \n+        insertedEntity.setId(1);\n+        insertedEntity.setOldDateField(new Date());\n+        insertedEntity.setLocalTimeField(LocalTime.parse(VAL_LOCAL_TIME));\n+        insertedEntity.setLocalDateField(LocalDate.parse(VAL_LOCAL_DATE));\n+        insertedEntity.setLocalDateTimeField(LocalDateTime.parse(VAL_LOCAL_DATETIME));\n+        insertedEntity.setOffsetTimeField(insertedEntity.getLocalTimeField().atOffset(ZoneOffset.ofHours(-9)));\n+        insertedEntity.setOffsetDateTimeField(insertedEntity.getLocalDateTimeField().atOffset(ZoneOffset.ofHours(-9)));\n+\n+        em.persist(insertedEntity);\n         em.getTransaction().commit();\n         em.close();\n \n+    }\n+\n+    public void testReadJava8Types() {\n+\n         // now read it back.\n-        em = emf.createEntityManager();\n+        EntityManager em = emf.createEntityManager();\n         Java8TimeTypes eRead = em.find(Java8TimeTypes.class, 1);\n \n         assertEquals(LocalTime.parse(VAL_LOCAL_TIME), eRead.getLocalTimeField());\n@@ -75,80 +77,123 @@ public void testJava8Types() {\n \n         // Many databases do not support WITH TIMEZONE syntax.\n         // Thus we can only portably ensure tha the same instant is used at least.\n-        assertEquals(Instant.from(e.getOffsetDateTimeField()),\n+        assertEquals(Instant.from(insertedEntity.getOffsetDateTimeField()),\n                 Instant.from(eRead.getOffsetDateTimeField()));\n \n-        assertEquals(e.getOffsetTimeField().withOffsetSameInstant(eRead.getOffsetTimeField().getOffset()),\n+        assertEquals(insertedEntity.getOffsetTimeField().withOffsetSameInstant(eRead.getOffsetTimeField().getOffset()),\n                 eRead.getOffsetTimeField());\n-\n+        em.close();\n+    }\n+    \n         // we've got reports from various functions not properly working with Java8 Dates.\n+    public void testReadLocalDate() {\n+        EntityManager em = emf.createEntityManager();\n+        final TypedQuery<LocalDate> qry = em.createQuery(\"select t.localDateField from Java8TimeTypes AS t\", LocalDate.class);\n+        final LocalDate date = qry.getSingleResult();\n+        assertNotNull(date);\n+        em.close();\n+    }\n+\n+    // max function\n+    public void testMaxLocalDate() {\n+        EntityManager em = emf.createEntityManager();\n+        final TypedQuery<LocalDate> qry = em.createQuery(\"select max(t.localDateField) from Java8TimeTypes AS t\", LocalDate.class);\n+        final LocalDate max = qry.getSingleResult();\n+        assertEquals(LocalDate.parse(VAL_LOCAL_DATE), max);\n+        em.close();\n+    }\n+\n+    public void testMaxLocalDateTime() {\n+        EntityManager em = emf.createEntityManager();\n+        final TypedQuery<LocalDateTime> qry = em.createQuery(\"select max(t.localDateTimeField) from Java8TimeTypes AS t\", LocalDateTime.class);\n+        final LocalDateTime max = qry.getSingleResult();\n+        assertEquals(LocalDateTime.parse(VAL_LOCAL_DATETIME), max);\n+        em.close();\n+    }\n+\n+    public void testMaxLocalTime() {\n+        EntityManager em = emf.createEntityManager();\n+        final TypedQuery<LocalTime> qry = em.createQuery(\"select max(t.localTimeField) from Java8TimeTypes AS t\", LocalTime.class);\n+        final LocalTime max = qry.getSingleResult();\n+        assertEquals(LocalTime.parse(VAL_LOCAL_TIME), max);\n+        em.close();\n+    }\n+\n+    public void testMaxOffsetTime() {\n+        EntityManager em = emf.createEntityManager();\n+        final TypedQuery<OffsetTime> qry = em.createQuery(\"select max(t.offsetTimeField) from Java8TimeTypes AS t\", OffsetTime.class);\n+        final OffsetTime max = qry.getSingleResult();\n+        assertEquals(insertedEntity.getOffsetTimeField().withOffsetSameInstant(insertedEntity.getOffsetTimeField().getOffset()),\n+                max.withOffsetSameInstant(insertedEntity.getOffsetTimeField().getOffset()));\n+        em.close();\n+    }\n \n-        {\n-            final TypedQuery<LocalDate> qry = em.createQuery(\"select t.localDateField from Java8TimeTypes AS t\", LocalDate.class);\n-            final LocalDate date = qry.getSingleResult();\n-            assertNotNull(date);\n-        }\n-\n-        // max function\n-        {\n-            final TypedQuery<LocalDate> qry = em.createQuery(\"select max(t.localDateField) from Java8TimeTypes AS t\", LocalDate.class);\n-            final LocalDate max = qry.getSingleResult();\n-            assertEquals(LocalDate.parse(VAL_LOCAL_DATE), max);\n-        }\n-        {\n-            final TypedQuery<LocalDateTime> qry = em.createQuery(\"select max(t.localDateTimeField) from Java8TimeTypes AS t\", LocalDateTime.class);\n-            final LocalDateTime max = qry.getSingleResult();\n-            assertEquals(LocalDateTime.parse(VAL_LOCAL_DATETIME), max);\n-        }\n-        {\n-            final TypedQuery<LocalTime> qry = em.createQuery(\"select max(t.localTimeField) from Java8TimeTypes AS t\", LocalTime.class);\n-            final LocalTime max = qry.getSingleResult();\n-            assertEquals(LocalTime.parse(VAL_LOCAL_TIME), max);\n-        }\n-        {\n-            final TypedQuery<OffsetTime> qry = em.createQuery(\"select max(t.offsetTimeField) from Java8TimeTypes AS t\", OffsetTime.class);\n-            final OffsetTime max = qry.getSingleResult();\n-            assertEquals(e.getOffsetTimeField().withOffsetSameInstant(eRead.getOffsetTimeField().getOffset()),\n-                    max.withOffsetSameInstant(eRead.getOffsetTimeField().getOffset()));\n-        }\n-        {\n-            final TypedQuery<OffsetDateTime> qry = em.createQuery(\"select max(t.offsetDateTimeField) from Java8TimeTypes AS t\", OffsetDateTime.class);\n-            final OffsetDateTime max = qry.getSingleResult();\n-            assertEquals(Instant.from(e.getOffsetDateTimeField()),\n-                    Instant.from(max));\n-        }\n-\n-        // min function\n-        {\n-            final TypedQuery<LocalDate> qry = em.createQuery(\"select min(t.localDateField) from Java8TimeTypes AS t\", LocalDate.class);\n-            final LocalDate min = qry.getSingleResult();\n-            assertEquals(LocalDate.parse(VAL_LOCAL_DATE), min);\n-        }\n-        {\n-            final TypedQuery<LocalDateTime> qry = em.createQuery(\"select min(t.localDateTimeField) from Java8TimeTypes AS t\", LocalDateTime.class);\n-            final LocalDateTime min = qry.getSingleResult();\n-            assertEquals(LocalDateTime.parse(VAL_LOCAL_DATETIME), min);\n-        }\n-        {\n-            final TypedQuery<LocalTime> qry = em.createQuery(\"select min(t.localTimeField) from Java8TimeTypes AS t\", LocalTime.class);\n-            final LocalTime min = qry.getSingleResult();\n-            assertEquals(LocalTime.parse(VAL_LOCAL_TIME), min);\n-        }\n-        {\n-            final TypedQuery<OffsetTime> qry = em.createQuery(\"select min(t.offsetTimeField) from Java8TimeTypes AS t\", OffsetTime.class);\n-            final OffsetTime min = qry.getSingleResult();\n-            assertEquals(e.getOffsetTimeField().withOffsetSameInstant(eRead.getOffsetTimeField().getOffset()),\n-                    min.withOffsetSameInstant(eRead.getOffsetTimeField().getOffset()));\n-        }\n-        {\n-            final TypedQuery<OffsetDateTime> qry = em.createQuery(\"select min(t.offsetDateTimeField) from Java8TimeTypes AS t\", OffsetDateTime.class);\n-            final OffsetDateTime min = qry.getSingleResult();\n-            assertEquals(Instant.from(e.getOffsetDateTimeField()),\n-                    Instant.from(min));\n-        }\n+    public void testMaxOffsetDateTime() {\n+        EntityManager em = emf.createEntityManager();\n+        final TypedQuery<OffsetDateTime> qry = em.createQuery(\"select max(t.offsetDateTimeField) from Java8TimeTypes AS t\", OffsetDateTime.class);\n+        final OffsetDateTime max = qry.getSingleResult();\n+        assertEquals(Instant.from(insertedEntity.getOffsetDateTimeField()),\n+                Instant.from(max));\n+        em.close();\n+    }\n+\n+    // min function\n+    public void testMinLocalDate() {\n+        EntityManager em = emf.createEntityManager();\n+        final TypedQuery<LocalDate> qry = em.createQuery(\"select min(t.localDateField) from Java8TimeTypes AS t\", LocalDate.class);\n+        final LocalDate min = qry.getSingleResult();\n+        assertEquals(LocalDate.parse(VAL_LOCAL_DATE), min);\n+    }\n+\n+    public void testMinLocalDateTime() {\n+        EntityManager em = emf.createEntityManager();\n+        final TypedQuery<LocalDateTime> qry = em.createQuery(\"select min(t.localDateTimeField) from Java8TimeTypes AS t\", LocalDateTime.class);\n+        final LocalDateTime min = qry.getSingleResult();\n+        assertEquals(LocalDateTime.parse(VAL_LOCAL_DATETIME), min);\n+        em.close();\n+    }\n+\n+    public void testMinLocalTime() {\n+        EntityManager em = emf.createEntityManager();\n+        final TypedQuery<LocalTime> qry = em.createQuery(\"select min(t.localTimeField) from Java8TimeTypes AS t\", LocalTime.class);\n+        final LocalTime min = qry.getSingleResult();\n+        assertEquals(LocalTime.parse(VAL_LOCAL_TIME), min);\n+        em.close();\n+    }\n \n+    public void testMinOffsetTime() {\n+        EntityManager em = emf.createEntityManager();\n+        final TypedQuery<OffsetTime> qry = em.createQuery(\"select min(t.offsetTimeField) from Java8TimeTypes AS t\", OffsetTime.class);\n+        final OffsetTime min = qry.getSingleResult();\n+        assertEquals(insertedEntity.getOffsetTimeField().withOffsetSameInstant(insertedEntity.getOffsetTimeField().getOffset()),\n+                min.withOffsetSameInstant(insertedEntity.getOffsetTimeField().getOffset()));\n+        em.close();\n     }\n \n+    public void testMinOffsetDateTime() {\n+        EntityManager em = emf.createEntityManager();\n+        final TypedQuery<OffsetDateTime> qry = em.createQuery(\"select min(t.offsetDateTimeField) from Java8TimeTypes AS t\", OffsetDateTime.class);\n+        final OffsetDateTime min = qry.getSingleResult();\n+        assertEquals(Instant.from(insertedEntity.getOffsetDateTimeField()),\n+                Instant.from(min));\n+        em.close();\n+    }\n \n+    public void testCurrentDateLocalDate() {\n+        EntityManager em = emf.createEntityManager();\n+        final TypedQuery<Java8TimeTypes> qry = em.createQuery(\"select j from Java8TimeTypes AS j where j.localDateField < CURRENT_DATE\", Java8TimeTypes.class);\n+        final List<Java8TimeTypes> times = qry.getResultList();\n+        assertNotNull(times);\n+        assertTrue(!times.isEmpty());\n+        em.close();\n+    }\n+    public void testCurrentDateLocalDateTime() {\n+        EntityManager em = emf.createEntityManager();\n+        final TypedQuery<Java8TimeTypes> qry = em.createQuery(\"select j from Java8TimeTypes AS j where j.localDateTimeField < CURRENT_DATE\", Java8TimeTypes.class);\n+        final List<Java8TimeTypes> times = qry.getResultList();\n+        assertNotNull(times);\n+        assertTrue(!times.isEmpty());\n+        em.close();\n+    }\n \n }"}]}

