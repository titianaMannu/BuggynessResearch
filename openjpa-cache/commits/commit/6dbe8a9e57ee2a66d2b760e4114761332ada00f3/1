{"sha":"6dbe8a9e57ee2a66d2b760e4114761332ada00f3","node_id":"MDY6Q29tbWl0MjA2MzY0OjZkYmU4YTllNTdlZTJhNjZkMmI3NjBlNDExNDc2MTMzMmFkYTAwZjM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-10T10:11:50Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-10T10:11:50Z"},"message":"OPENJPA-692: Bi-directional mapping with JoinTable\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@684442 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"06dc8d9b6525a92f72995b333fc89b958456a2aa","url":"https://api.github.com/repos/apache/openjpa/git/trees/06dc8d9b6525a92f72995b333fc89b958456a2aa"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6dbe8a9e57ee2a66d2b760e4114761332ada00f3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6dbe8a9e57ee2a66d2b760e4114761332ada00f3","html_url":"https://github.com/apache/openjpa/commit/6dbe8a9e57ee2a66d2b760e4114761332ada00f3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6dbe8a9e57ee2a66d2b760e4114761332ada00f3/comments","author":null,"committer":null,"parents":[{"sha":"ffa2851f892bb81549e395235e9be7ef06046f09","url":"https://api.github.com/repos/apache/openjpa/commits/ffa2851f892bb81549e395235e9be7ef06046f09","html_url":"https://github.com/apache/openjpa/commit/ffa2851f892bb81549e395235e9be7ef06046f09"}],"stats":{"total":66,"additions":66,"deletions":0},"files":[{"sha":"906c55fc788e949328361d8bc25a7749d39ab95b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/6dbe8a9e57ee2a66d2b760e4114761332ada00f3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/6dbe8a9e57ee2a66d2b760e4114761332ada00f3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java?ref=6dbe8a9e57ee2a66d2b760e4114761332ada00f3","patch":"@@ -45,6 +45,7 @@\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.strats.VerticalClassStrategy;\n import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n@@ -590,6 +591,8 @@ private Table getTable(FieldMapping fm, Table table) {\n             else if (table != columns[i].getTable())\n                 return INVALID;\n         }\n+        if (fm.isBidirectionalJoinTableMappingOwner())\n+        \treturn INVALID;\n         return table;\n     }\n "},{"sha":"72095a826168ff4db59f3de711c577342224f621","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","status":"modified","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/6dbe8a9e57ee2a66d2b760e4114761332ada00f3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","raw_url":"https://github.com/apache/openjpa/raw/6dbe8a9e57ee2a66d2b760e4114761332ada00f3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java?ref=6dbe8a9e57ee2a66d2b760e4114761332ada00f3","patch":"@@ -44,6 +44,7 @@\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.MetaDataException;\n+import org.apache.tools.ant.taskdefs.condition.IsReference;\n \n /**\n  * Specialization of metadata for relational databases.\n@@ -71,6 +72,7 @@\n     private boolean _outer = false;\n     private int _fetchMode = Integer.MAX_VALUE;\n     private Unique[] _joinTableUniques; // Unique constraints on JoinTable\n+    private Boolean _bidirectionalJoinTableOwner = null;\n     \n     /**\n      * Constructor.\n@@ -1047,4 +1049,46 @@ public void mapConstraints(String name, boolean adapt) {\n     public void copyMappingInfo(ValueMapping vm) {\n         _val.copyMappingInfo(vm);\n     }\n+    \n+    /**\n+     * Affirms if this field is the owning side of a bidirectional relation\n+     * with a join table. Evaluated only once and the result cached for \n+     * subsequent call. Hence must be called after resolution.\n+     */\n+    public boolean isBidirectionalJoinTableMappingOwner() {\n+    \tif (_bidirectionalJoinTableOwner != null)\n+    \t\treturn _bidirectionalJoinTableOwner.booleanValue();\n+    \t\n+    \t_bidirectionalJoinTableOwner = false;\n+        ForeignKey fk = getForeignKey();\n+        if (fk != null) \n+        \treturn false;\n+        ForeignKey jfk = getJoinForeignKey();\n+        if (jfk == null) \n+        \treturn false;\n+        FieldMapping mappedBy = getValueMappedByMapping();\n+        if (mappedBy != null) \n+        \treturn false;\n+        ValueMapping elem = getElementMapping();\n+        if (elem == null) \n+        \treturn false;\n+        ClassMapping relType = elem.getDeclaredTypeMapping();\n+        if (relType == null) \n+        \treturn false;\n+        FieldMetaData[] relFmds = relType.getFields();\n+        for (int i=0; i<relFmds.length;i++) {\n+            if (relFmds[i].getDeclaredTypeMetaData() == getDeclaringMapping()) {\n+                FieldMapping rfm = (FieldMapping)relFmds[i];\n+        \t\tForeignKey rjfk = rfm.getJoinForeignKey();\n+        \t\tif (rjfk == null) \n+        \t\t    continue;\n+        \t\tif (rjfk.getTable() == jfk.getTable()\n+        \t\t && jfk.getTable().getColumns().length \n+        \t\t == jfk.getColumns().length + rjfk.getColumns().length) {\n+        \t\t\t_bidirectionalJoinTableOwner = true;\n+        \t\t}\n+        \t}\n+        }\n+        return _bidirectionalJoinTableOwner.booleanValue();\n+    }\n }"},{"sha":"99ee96362d31258e04124d8ceff0a6afd4840d87","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationCollectionTableFieldStrategy.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/6dbe8a9e57ee2a66d2b760e4114761332ada00f3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationCollectionTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/6dbe8a9e57ee2a66d2b760e4114761332ada00f3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationCollectionTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationCollectionTableFieldStrategy.java?ref=6dbe8a9e57ee2a66d2b760e4114761332ada00f3","patch":"@@ -29,6 +29,7 @@\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.Result;\n+import org.apache.openjpa.jdbc.sql.RowManager;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.lib.util.Localizer;\n@@ -93,4 +94,22 @@ public void map(boolean adapt) {\n             throw new MetaDataException(_loc.get(\"not-coll\", field));\n         super.map(adapt);\n     }\n+    \n+    public void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n+        throws SQLException {\n+    \tif (!field.isBidirectionalJoinTableMappingOwner())\n+    \t\tsuper.insert(sm, store, rm);\n+    }\n+    \n+    public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n+        throws SQLException {\n+    \tif (!field.isBidirectionalJoinTableMappingOwner())\n+    \t\tsuper.update(sm, store, rm);\n+    }\n+    \n+    public void delete(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n+        throws SQLException {\n+    \tif (!field.isBidirectionalJoinTableMappingOwner())\n+    \t\tsuper.delete(sm, store, rm);\n+    }\n }"}]}

