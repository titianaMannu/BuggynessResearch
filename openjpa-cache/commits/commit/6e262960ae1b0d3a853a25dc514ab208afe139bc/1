{"sha":"6e262960ae1b0d3a853a25dc514ab208afe139bc","node_id":"MDY6Q29tbWl0MjA2MzY0OjZlMjYyOTYwYWUxYjBkM2E4NTNhMjVkYzUxNGFiMjA4YWZlMTM5YmM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2006-08-23T23:45:42Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2006-08-23T23:45:42Z"},"message":"MappingTool modified to ignore persistence-aware classes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@434251 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b2932b67f31bb2c7af3e57b2807063ddf05cdaf4","url":"https://api.github.com/repos/apache/openjpa/git/trees/b2932b67f31bb2c7af3e57b2807063ddf05cdaf4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6e262960ae1b0d3a853a25dc514ab208afe139bc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6e262960ae1b0d3a853a25dc514ab208afe139bc","html_url":"https://github.com/apache/openjpa/commit/6e262960ae1b0d3a853a25dc514ab208afe139bc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6e262960ae1b0d3a853a25dc514ab208afe139bc/comments","author":null,"committer":null,"parents":[{"sha":"3aaa66ee7fe41ab26559c4593cb75a832e09229e","url":"https://api.github.com/repos/apache/openjpa/commits/3aaa66ee7fe41ab26559c4593cb75a832e09229e","html_url":"https://github.com/apache/openjpa/commit/3aaa66ee7fe41ab26559c4593cb75a832e09229e"}],"stats":{"total":58,"additions":38,"deletions":20},"files":[{"sha":"e7c561dcdefe12092422b143f85f727515637c62","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","status":"modified","additions":36,"deletions":20,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/6e262960ae1b0d3a853a25dc514ab208afe139bc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/6e262960ae1b0d3a853a25dc514ab208afe139bc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java?ref=6e262960ae1b0d3a853a25dc514ab208afe139bc","patch":"@@ -51,14 +51,7 @@\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.lib.util.Services;\n-import org.apache.openjpa.meta.ClassMetaData;\n-import org.apache.openjpa.meta.FieldMetaData;\n-import org.apache.openjpa.meta.JavaTypes;\n-import org.apache.openjpa.meta.MetaDataFactory;\n-import org.apache.openjpa.meta.MetaDataModes;\n-import org.apache.openjpa.meta.QueryMetaData;\n-import org.apache.openjpa.meta.SequenceMetaData;\n-import org.apache.openjpa.meta.ValueStrategies;\n+import org.apache.openjpa.meta.*;\n import org.apache.openjpa.util.GeneralException;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.MetaDataException;\n@@ -643,9 +636,7 @@ private void add(Class cls) {\n \n         _flush = true;\n         _flushSchema = true;\n-        MappingRepository repos = getRepository();\n-        repos.setStrategyInstaller(new MappingStrategyInstaller(repos));\n-        repos.getMapping(cls, null, true);\n+        getMapping(cls);\n     }\n \n     /**\n@@ -682,9 +673,7 @@ private void refresh(Class cls) {\n \n         _flush = true;\n         _flushSchema = true;\n-        MappingRepository repos = getRepository();\n-        repos.setStrategyInstaller(new RefreshStrategyInstaller(repos));\n-        repos.getMapping(cls, null, true);\n+        getMapping(cls);\n     }\n \n     /**\n@@ -696,9 +685,7 @@ private void validate(Class cls) {\n \n         _flushSchema = !SCHEMA_ACTION_NONE.equals(_schemaAction)\n             && !SchemaTool.ACTION_ADD.equals(_schemaAction);\n-        MappingRepository repos = getRepository();\n-        repos.setStrategyInstaller(new RuntimeStrategyInstaller(repos));\n-        repos.getMapping(cls, null, true);\n+        getMapping(cls);\n     }\n \n     /**\n@@ -709,9 +696,8 @@ private void buildSchema(Class cls) {\n             return;\n \n         _flushSchema = true;\n-        MappingRepository repos = getRepository();\n-        repos.setStrategyInstaller(new RuntimeStrategyInstaller(repos));\n-        repos.getMapping(cls, null, true);\n+        if (!getMapping(cls))\n+        \treturn;\n \n         // set any logical pks to non-logical so they get flushed\n         Schema[] schemas = _schema.getSchemas();\n@@ -731,6 +717,33 @@ private void buildSchema(Class cls) {\n         }\n     }\n \n+    /**\n+     * Gets mapping for the given class. \n+     * If the repository does not contain metadata for the class and raises\n+     * a non-fatal exception on lookup, the exception is swallowed with a\n+     * warning message, as the class is likely to be a persistence-aware class.\n+     * \n+     * @param cls a class to be mapped\n+     * \n+     * @return true if the mapping of the class is found, false otherwise.\n+     */\n+    boolean getMapping(Class cls) {\n+    \tMappingRepository repos = getRepository();\n+    \trepos.setStrategyInstaller(new RuntimeStrategyInstaller(repos));\n+    \ttry {\n+    \t\trepos.getMapping(cls, null, true);\n+    \t} catch (MetaDataException mex) {\n+    \t\tif (!mex.isFatal()) {\n+    \t\t\tif (_log != null && _log.isWarnEnabled()) {\n+    \t\t\t\t_log.warn(_loc.get(\"no-mapping-aware\",cls));\n+    \t\t\t}\n+    \t\t\treturn false;\n+    \t\t} else {\n+    \t\t\tthrow mex;\n+    \t\t}\n+    \t}\n+    \treturn true;\n+    }\n     /**\n      * Drop mapping for given class.\n      */\n@@ -980,6 +993,9 @@ public static boolean run(JDBCConfiguration conf, String[] args,\n                 parsed = classParser.parseTypes(args[i]);\n                 classes.addAll(Arrays.asList(parsed));\n             }\n+            PersistenceAwareClass[] pawares = conf.getMappingRepositoryInstance().getPersistenceAwareClasses();\n+            for (int i=0; i<pawares.length; i++)\n+            \tclasses.remove(pawares[i].getDescribedType());\n         }\n \n         Class[] act = (Class[]) classes.toArray(new Class[classes.size()]);"},{"sha":"098c68f73647453392050892c424e5da36c9010f","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6e262960ae1b0d3a853a25dc514ab208afe139bc/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/6e262960ae1b0d3a853a25dc514ab208afe139bc/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties?ref=6e262960ae1b0d3a853a25dc514ab208afe139bc","patch":"@@ -9,6 +9,8 @@ no-equiv-field: Cannot use \"{0}\" as the mapped-by value for a field in \"{1}\".  \\\n bad-equiv-field: Cannot use \"{0}\" as the mapped-by value for a field in \"{1}\". \\\n \tThe target-field \"{2}\" for column \"{3}\" is mapped to multiple columns.\n no-mapping: No mapping information found for type \"{0}\".\n+no-mapping-aware: No mapping information found for type \"{0}\". Assuming to be \\\n+\tpersistence-aware.\n bad-mapped-by: Collection field \"{0}\" declares that it is mapped by \"{1}\", but \\\n \tthis is not a valid inverse relation.\n no-targetfield: Some of the columns on \"{0}\" are missing target field \\"}]}

