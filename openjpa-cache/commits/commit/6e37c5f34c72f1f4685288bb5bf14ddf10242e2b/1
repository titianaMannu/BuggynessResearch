{"sha":"6e37c5f34c72f1f4685288bb5bf14ddf10242e2b","node_id":"MDY6Q29tbWl0MjA2MzY0OjZlMzdjNWYzNGM3MmYxZjQ2ODUyODhiYjViZjE0ZGRmMTAyNDJlMmI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-13T19:29:48Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-13T19:29:48Z"},"message":"Use decorator pattern for Criteria Query tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@835961 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ae8b4cdfd13d476ca408d7cd89981dafffbbd85e","url":"https://api.github.com/repos/apache/openjpa/git/trees/ae8b4cdfd13d476ca408d7cd89981dafffbbd85e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6e37c5f34c72f1f4685288bb5bf14ddf10242e2b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6e37c5f34c72f1f4685288bb5bf14ddf10242e2b","html_url":"https://github.com/apache/openjpa/commit/6e37c5f34c72f1f4685288bb5bf14ddf10242e2b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6e37c5f34c72f1f4685288bb5bf14ddf10242e2b/comments","author":null,"committer":null,"parents":[{"sha":"6e630e827ea2a257b2277c5589532b3b3b2e7fea","url":"https://api.github.com/repos/apache/openjpa/commits/6e630e827ea2a257b2277c5589532b3b3b2e7fea","html_url":"https://github.com/apache/openjpa/commit/6e630e827ea2a257b2277c5589532b3b3b2e7fea"}],"stats":{"total":215,"additions":179,"deletions":36},"files":[{"sha":"aa268b75ed196b935e921b14b57b78763e17396c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestDateStringConversion.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/6e37c5f34c72f1f4685288bb5bf14ddf10242e2b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestDateStringConversion.java","raw_url":"https://github.com/apache/openjpa/raw/6e37c5f34c72f1f4685288bb5bf14ddf10242e2b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestDateStringConversion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestDateStringConversion.java?ref=6e37c5f34c72f1f4685288bb5bf14ddf10242e2b","patch":"@@ -23,6 +23,7 @@\n import java.sql.Timestamp;\n import java.util.List;\n \n+import javax.persistence.Query;\n import javax.persistence.criteria.CriteriaQuery;\n import javax.persistence.criteria.Root;\n \n@@ -103,7 +104,7 @@ public void testDateStringAsParameter() {\n         \n         Date earlier = new Date(now - 1000);\n         \n-        String dateString = createJDBCEscapeString(earlier);\n+        final String dateString = createJDBCEscapeString(earlier);\n         String jpql = \"select d from Dependent d where d.endDate >= :dateString ORDER BY d.endDate\";\n         CriteriaQuery<Dependent> c = cb.createQuery(Dependent.class);\n         Root<Dependent> d = c.from(Dependent.class);\n@@ -112,7 +113,12 @@ public void testDateStringAsParameter() {\n                 .as(Date.class)));\n         c.orderBy(cb.asc(d.get(Dependent_.endDate)));\n         \n-        assertEquivalence(c, jpql, new String[]{\"dateString\"}, new Object[]{dateString});\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"dateString\", dateString);\n+            }\n+        }, c, jpql);\n+\n     }\n     \n     String createJDBCEscapeString(Object time) {"},{"sha":"31d40d621d1cd5f0ad7eb095f854051a293dafb1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEmbeddableCriteria.java","status":"modified","additions":82,"deletions":16,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/6e37c5f34c72f1f4685288bb5bf14ddf10242e2b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEmbeddableCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/6e37c5f34c72f1f4685288bb5bf14ddf10242e2b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEmbeddableCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestEmbeddableCriteria.java?ref=6e37c5f34c72f1f4685288bb5bf14ddf10242e2b","patch":"@@ -23,6 +23,7 @@\n import java.util.Set;\n \n import javax.persistence.Parameter;\n+import javax.persistence.Query;\n import javax.persistence.Tuple;\n import javax.persistence.criteria.CriteriaQuery;\n import javax.persistence.criteria.Expression;\n@@ -1158,7 +1159,11 @@ public void testEmbeddableQuery84() {\n         q.multiselect(e, e.get(Embed_Embed_.intVal1), e.get(Embed_Embed_.embed).get(Embed_.intVal2));\n         ParameterExpression<Embed_Embed> param1 = cb.parameter(Embed_Embed.class, \"embed2\");\n         q.where(cb.isMember(param1, a.get(EntityA_Coll_Embed_Embed_.embeds)));\n-        assertEquivalence(q, jpql, new String[]{\"embed2\"}, new Object[]{new Embed_Embed()});\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"embed2\", new Embed_Embed());\n+            }\n+        }, q, jpql);\n     }\n     \n     @AllowFailure(message=\"JPQL parse error\")\n@@ -1172,7 +1177,12 @@ public void testEmbeddableQuery85() {\n         q.multiselect(e, e.get(Embed_Embed_.intVal1), e.get(Embed_Embed_.embed).get(Embed_.intVal2));\n         ParameterExpression<Embed_Embed> param1 = cb.parameter(Embed_Embed.class, \"embed2\");\n         q.where(cb.isMember(param1, a.get(EntityA_Coll_Embed_Embed_.embeds)));\n-        assertEquivalence(q, jpql, new String[]{\"embed2\"}, new Object[]{new Embed_Embed()});\n+        \n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"embed2\", new Embed_Embed());\n+            }\n+        }, q, jpql);\n     }\n     \n     @AllowFailure(message=\"JPQL parse error\")\n@@ -1186,7 +1196,11 @@ public void testEmbeddableQuery86() {\n         q.multiselect(e, e.get(Embed_Embed_.intVal1), e.get(Embed_Embed_.embed).get(Embed_.intVal2));\n         Parameter<Embed_Embed> param1 = cb.parameter(Embed_Embed.class);\n         //q.where(cb.equal(param1, e));\n-        assertEquivalence(q, jpql, new String[]{\"embed2\"}, new Object[]{new Embed_Embed()});\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"embed2\", new Embed_Embed());\n+            }\n+        }, q, jpql);\n     }\n \n     public void testEmbeddableQuery87() {\n@@ -1489,7 +1503,11 @@ public void testEmbeddableQuery111() {\n         ParameterExpression<String> param1 = cb.parameter(String.class, \"image\");\n         q.where(cb.equal(param1, cb.any(sq)));\n         q.orderBy(cb.asc(i));\n-        assertEquivalence(q, jpql, new String[]{\"image\"}, new String[]{\"my photo\"});\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"image\", \"my photo\");\n+            }\n+        }, q, jpql);\n     }\n     \n     public void testEmbeddableQuery112() {\n@@ -1505,7 +1523,11 @@ public void testEmbeddableQuery112() {\n         ParameterExpression<String> param1 = cb.parameter(String.class, \"image\");\n         q.where(cb.equal(param1, cb.any(sq)));\n         q.orderBy(cb.asc(i));\n-        assertEquivalence(q, jpql, new String[]{\"image\"}, new String[]{\"my photo\"});\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"image\", \"my photo\");\n+            }\n+        }, q, jpql);\n     }\n     \n     public void testEmbeddableQuery113() {\n@@ -1522,7 +1544,11 @@ public void testEmbeddableQuery113() {\n         sq.where(cb.equal(param1, e.key()));\n         q.where(cb.exists(sq));\n         q.orderBy(cb.asc(i));\n-        assertEquivalence(q, jpql, new String[]{\"image\"}, new String[]{\"my photo\"});\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"image\", \"my photo\");\n+            }\n+        }, q, jpql);\n     }\n      \n     public void testEmbeddableQuery114() {\n@@ -1538,7 +1564,11 @@ public void testEmbeddableQuery114() {\n         ParameterExpression<String> param1 = cb.parameter(String.class, \"image\");\n         q.where(cb.equal(param1, cb.any(sq)));\n         q.orderBy(cb.asc(i));\n-        assertEquivalence(q, jpql, new String[]{\"image\"}, new String[]{\"my photo\"});\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"image\", \"my photo\");\n+            }\n+        }, q, jpql);\n     }\n     \n     public void testEmbeddableQuery115() {\n@@ -1555,7 +1585,11 @@ public void testEmbeddableQuery115() {\n         sq.where(cb.equal(param1, e.key()));\n         q.where(cb.exists(sq));\n         q.orderBy(cb.asc(i));\n-        assertEquivalence(q, jpql, new String[]{\"image\"}, new String[]{\"my photo\"});\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"image\", \"my photo\");\n+            }\n+        }, q, jpql);\n     }\n     \n     public void testEmbeddableQuery116() {\n@@ -1571,7 +1605,11 @@ public void testEmbeddableQuery116() {\n         ParameterExpression<String> param1 = cb.parameter(String.class, \"image\");\n         q.where(cb.equal(param1, cb.any(sq)));\n         q.orderBy(cb.asc(i));\n-        assertEquivalence(q, jpql, new String[]{\"image\"}, new String[]{\"my photo\"});\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"image\", \"my photo\");\n+            }\n+        }, q, jpql);\n     }\n     \n     public void testEmbeddableQuery117() {\n@@ -1588,7 +1626,11 @@ public void testEmbeddableQuery117() {\n         sq.where(cb.equal(param1, e.key()));\n         q.where(cb.exists(sq));\n         q.orderBy(cb.asc(i));\n-        assertEquivalence(q, jpql, new String[]{\"image\"}, new String[]{\"my photo\"});\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"image\", \"my photo\");\n+            }\n+        }, q, jpql);\n     }\n     \n     public void testEmbeddableQuery118() {\n@@ -1621,7 +1663,11 @@ public void testEmbeddableQuery121() {\n         sq.where(cb.equal(d.value().get(VicePresident_.id), 1));\n         q.where(cb.equal(param1, sq));\n         q.orderBy(cb.asc(c));\n-        assertEquivalence(q, jpql, new String[]{\"division\"}, new Object[]{new Division()});\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"division\", new Division());\n+            }\n+        }, q, jpql);\n     }\n     \n     public void testEmbeddableQuery122() {\n@@ -1638,7 +1684,11 @@ public void testEmbeddableQuery122() {\n         sq.select(d.key());\n         q.where(cb.exists(sq));\n         q.orderBy(cb.asc(c));\n-        assertEquivalence(q, jpql, new String[]{\"division\"}, new Object[]{new Division()});\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"division\", new Division());\n+            }\n+        }, q, jpql);\n     }\n     \n     public void testEmbeddableQuery123() {\n@@ -1655,7 +1705,11 @@ public void testEmbeddableQuery123() {\n         sq.where(cb.equal(d.key(), param1));\n         q.where(cb.exists(sq));\n         q.orderBy(cb.asc(c));\n-        assertEquivalence(q, jpql, new String[]{\"division\"}, new Object[]{new Division()});\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"division\", new Division());\n+            }\n+        }, q, jpql);\n     }\n     \n     public void testEmbeddableQuery124() {\n@@ -1672,7 +1726,11 @@ public void testEmbeddableQuery124() {\n         sq.where(cb.equal(d.value().get(VicePresident_.id), 3));\n         q.where(cb.equal(param1, sq));\n         q.orderBy(cb.asc(c));\n-        assertEquivalence(q, jpql, new String[]{\"division\"}, new Object[]{new Division()});\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"division\", new Division());\n+            }\n+        }, q, jpql);\n     }\n     \n     public void testEmbeddableQuery125() {\n@@ -1689,7 +1747,11 @@ public void testEmbeddableQuery125() {\n         sq.select(d.key());\n         q.where(cb.exists(sq));\n         q.orderBy(cb.asc(c));\n-        assertEquivalence(q, jpql, new String[]{\"k\"}, new Object[]{new Division()});\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"k\", new Division());\n+            }\n+        }, q, jpql);\n     }\n     \n     public void testEmbeddableQuery126() {\n@@ -1706,7 +1768,11 @@ public void testEmbeddableQuery126() {\n         sq.select(d.value());\n         q.where(cb.exists(sq));\n         q.orderBy(cb.asc(c));\n-        assertEquivalence(q, jpql, new String[]{\"k\"}, new Object[]{new Division()});\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"k\", new Division());\n+            }\n+        }, q, jpql);\n     }\n \n     public void testEmbeddableQuery127() {"},{"sha":"c31675cdb0d664940bf5a846bd686e5f367c75bd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java","status":"modified","additions":10,"deletions":4,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/6e37c5f34c72f1f4685288bb5bf14ddf10242e2b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java","raw_url":"https://github.com/apache/openjpa/raw/6e37c5f34c72f1f4685288bb5bf14ddf10242e2b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java?ref=6e37c5f34c72f1f4685288bb5bf14ddf10242e2b","patch":"@@ -34,6 +34,9 @@\n import javax.persistence.criteria.SetJoin;\n import javax.persistence.criteria.Subquery;\n \n+import org.apache.openjpa.persistence.criteria.AbstractCriteriaTestCase.QueryDecorator;\n+import org.apache.openjpa.persistence.embed.Division;\n+\n /**\n  * Tests type-strict version of Criteria API.\n  * \n@@ -1499,10 +1502,13 @@ public void testSubSelectMaxDateRange() {\n         Predicate p4 = cb.lessThan(d.get(Dependent_.id).get(DependentId_.effDate), maxDate);\n         \n         q.where(cb.and(cb.and(cb.and(p1, p2), p3), p4));\n-        \n-        assertEquivalence(q, jpql, \n-            new String[]{\"empid\", \"minDate\", \"maxDate\"}, \n-            new Object[]{101L, new Date(100), new Date(100000)});\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"empid\",   101L);\n+                q.setParameter(\"minDate\", new Date(100));\n+                q.setParameter(\"maxDate\", new Date(100000));\n+            }\n+        }, q, jpql);\n     }\n     \n     public void testCorrelatedNestedSubquery1() {"},{"sha":"5f1ae16d19a16cc3873a1edeff33bffee49b6524","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestMetaModelTypesafeCriteria.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/6e37c5f34c72f1f4685288bb5bf14ddf10242e2b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestMetaModelTypesafeCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/6e37c5f34c72f1f4685288bb5bf14ddf10242e2b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestMetaModelTypesafeCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestMetaModelTypesafeCriteria.java?ref=6e37c5f34c72f1f4685288bb5bf14ddf10242e2b","patch":"@@ -22,6 +22,7 @@\n import java.util.List;\n \n import javax.persistence.Parameter;\n+import javax.persistence.Query;\n import javax.persistence.Tuple;\n import javax.persistence.criteria.CriteriaQuery;\n import javax.persistence.criteria.Expression;\n@@ -334,7 +335,11 @@ public void testParameters() {\n         q.multiselect(c).where(cb.equal(\n             c.get(customer_.getSingularAttribute(\"status\", Integer.class)), param));\n \n-        assertEquivalence(q, jpql, new String[] { \"stat\" }, new Object[] { 1 });\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"stat\", 1);\n+            }\n+        }, q, jpql);\n     }\n \n     public void testKeyExpressionInSelectList() {"},{"sha":"3a106471e7c25ffec13eba251c08dc7eeaca7f83","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestStringCriteria.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/6e37c5f34c72f1f4685288bb5bf14ddf10242e2b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestStringCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/6e37c5f34c72f1f4685288bb5bf14ddf10242e2b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestStringCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestStringCriteria.java?ref=6e37c5f34c72f1f4685288bb5bf14ddf10242e2b","patch":"@@ -21,6 +21,7 @@\n import java.math.BigDecimal;\n import java.util.Collection;\n \n+import javax.persistence.Query;\n import javax.persistence.Tuple;\n import javax.persistence.criteria.CriteriaQuery;\n import javax.persistence.criteria.Expression;\n@@ -34,6 +35,7 @@\n import javax.persistence.criteria.SetJoin;\n import javax.persistence.criteria.Subquery;\n \n+import org.apache.openjpa.persistence.criteria.AbstractCriteriaTestCase.QueryDecorator;\n import org.apache.openjpa.persistence.test.AllowFailure;\n \n public class TestStringCriteria extends CriteriaTest {\n@@ -215,7 +217,11 @@ public void testParameters() {\n         param.alias(\"stat\");\n         q.select(c).where(cb.equal(c.get(\"status\"), param));\n \n-        assertEquivalence(q, jpql, new String[] { \"stat\" }, new Object[] { 1 });\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"stat\", 1);\n+            }\n+        }, q, jpql);\n     }\n \n     public void testSelectList() {"},{"sha":"c7e32a86614b3d45a8b5754f0407ba41ccd04e26","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypeSafeCondExpression.java","status":"modified","additions":18,"deletions":4,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/6e37c5f34c72f1f4685288bb5bf14ddf10242e2b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypeSafeCondExpression.java","raw_url":"https://github.com/apache/openjpa/raw/6e37c5f34c72f1f4685288bb5bf14ddf10242e2b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypeSafeCondExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypeSafeCondExpression.java?ref=6e37c5f34c72f1f4685288bb5bf14ddf10242e2b","patch":"@@ -37,13 +37,15 @@\n package org.apache.openjpa.persistence.criteria;\n \n import javax.persistence.Parameter;\n+import javax.persistence.Query;\n import javax.persistence.Tuple;\n import javax.persistence.criteria.CriteriaQuery;\n import javax.persistence.criteria.Expression;\n import javax.persistence.criteria.ParameterExpression;\n import javax.persistence.criteria.Root;\n import javax.persistence.criteria.Subquery;\n \n+import org.apache.openjpa.persistence.criteria.AbstractCriteriaTestCase.QueryDecorator;\n import org.apache.openjpa.persistence.test.DatabasePlatform;\n \n /**\n@@ -163,7 +165,11 @@ public void testLikeWithEscapeCharacter() {\n         cq.where(cb.like(c.get(CompUser_.name), param, '|'));\n         cq.select(c.get(CompUser_.name));\n         \n-        assertEquivalence(cq, query, new String[]{\"name\"}, new Object[] {\"%|_%\"});\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"name\", \"%|_%\");\n+            }\n+        }, cq, query);\n     }\n \n     public void testNullExpression() {\n@@ -501,8 +507,12 @@ public void testTypeExpression1() {\n         cq.where(e.type().in(param1, param2));\n         cq.orderBy(cb.asc(e.get(CompUser_.name)));\n         \n-        assertEquivalence(cq, jpql, new String[]{\"a\",\"b\"}, \n-             new Class[]{MaleUser.class,FemaleUser.class});\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"a\", MaleUser.class);\n+                q.setParameter(\"b\", FemaleUser.class);\n+            }\n+        }, cq, jpql);\n     }\n \n     public void testTypeExpression2() {\n@@ -516,7 +526,11 @@ public void testTypeExpression2() {\n         q.multiselect(e.type());\n         q.where(cb.equal(e.type(), param1).not());\n         \n-        assertEquivalence(q, query, new String[]{\"t\"}, new Class[]{MaleUser.class});\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"t\", MaleUser.class);\n+            }\n+        }, q, query);\n     }\n \n     public void testTypeExpression3() {"},{"sha":"62b408d48789a4afecf6ff51ceefb19af00cf132","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","status":"modified","additions":48,"deletions":8,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/6e37c5f34c72f1f4685288bb5bf14ddf10242e2b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/6e37c5f34c72f1f4685288bb5bf14ddf10242e2b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java?ref=6e37c5f34c72f1f4685288bb5bf14ddf10242e2b","patch":"@@ -25,6 +25,7 @@\n import java.util.Map;\n \n import javax.persistence.Parameter;\n+import javax.persistence.Query;\n import javax.persistence.Tuple;\n import javax.persistence.criteria.CriteriaQuery;\n import javax.persistence.criteria.Expression;\n@@ -33,6 +34,7 @@\n import javax.persistence.criteria.ListJoin;\n import javax.persistence.criteria.MapJoin;\n import javax.persistence.criteria.ParameterExpression;\n+import javax.persistence.criteria.Path;\n import javax.persistence.criteria.Root;\n import javax.persistence.criteria.Selection;\n import javax.persistence.criteria.SetJoin;\n@@ -539,7 +541,11 @@ public void testParameters1() {\n         Parameter<Integer> param = cb.parameter(Integer.class, \"stat\");\n         q.select(c).where(cb.equal(c.get(Customer_.status), param));\n \n-        assertEquivalence(q, jpql, new String[] { \"stat\" }, new Object[] { 1 });\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"stat\", 1);\n+            }\n+        }, q, jpql);\n     }\n     \n     public void testParameters2() {\n@@ -552,8 +558,12 @@ public void testParameters2() {\n         q.select(c).where(cb.and(cb.equal(c.get(Customer_.status), param1), \n                 cb.equal(c.get(Customer_.name), param2)));\n \n-        assertEquivalence(q, jpql, new String[] { \"stat\", \"name\" },\n-                new Object[] { 1, \"test\" });\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"stat\", 1);\n+                q.setParameter(\"name\", \"test\");\n+            }\n+        }, q, jpql);\n     }\n     \n     public void testParameters3() {\n@@ -564,7 +574,11 @@ public void testParameters3() {\n         Parameter<Integer> param = cb.parameter(Integer.class, \"stat\");\n         q.select(c).where(cb.equal(c.get(Customer_.status), param));\n         \n-        assertEquivalence(q, jpql, new String[]{\"stat\"}, new Object[] { 1 });\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"stat\", 1);\n+            }\n+        }, q, jpql);\n     }\n     \n     public void testParameters4() {\n@@ -576,8 +590,12 @@ public void testParameters4() {\n         Parameter<String> param2 = cb.parameter(String.class, \"name\");\n         q.select(c).where(cb.and(cb.equal(c.get(Customer_.status), param1), \n                 cb.equal(c.get(Customer_.name), param2)));\n-        assertEquivalence(q, jpql, new String[]{\"stat\", \"name\"},\n-                new Object[] { 1, \"test\" });\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"stat\", 1);\n+                q.setParameter(\"name\", \"test\");\n+            }\n+        }, q, jpql);\n     }\n     \n     public void testParameters5() {\n@@ -588,10 +606,14 @@ public void testParameters5() {\n         ParameterExpression<List> param1 = cb.parameter(List.class, \"coll\");\n         q.where(c.get(Customer_.status).in(param1));\n         q.select(c);\n-        List vals = new ArrayList();\n+        final List vals = new ArrayList();\n         vals.add(1);\n         vals.add(2);\n-        assertEquivalence(q, jpql, new String[] {\"coll\"}, new Object[] {vals});\n+        assertEquivalence(new QueryDecorator() {\n+            public void decorate(Query q) {\n+                q.setParameter(\"coll\", vals);\n+            }\n+        }, q, jpql);\n     }\n     \n     public void testSelectList1() {\n@@ -1333,5 +1355,23 @@ public void testInvalidParameterName() {\n         } catch (IllegalArgumentException e) {\n         }\n     }\n+    \n+    public void testGroupByOnMaxResult() {\n+        String jpql = \"SELECT c.address.country, count(c) from Customer c GROUP BY c.address.country \" +\n+                      \"HAVING COUNT(c.address.country)>3\";\n+        \n+        CriteriaQuery<Object[]> c = cb.createQuery(Object[].class);\n+        Root<Customer> customer = c.from(Customer.class);\n+        Path<String> country = customer.get(Customer_.address).get(Address_.country);\n+        c.multiselect(country, cb.count(customer))\n+         .groupBy(country)\n+         .having(cb.gt(cb.count(country), 3));\n+        \n+        assertEquivalence(new QueryDecorator(){\n+            public void decorate(Query q) {\n+                q.setMaxResults(20);\n+            }\n+        }, c, jpql);\n+    }\n \n }"}]}

