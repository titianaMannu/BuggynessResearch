{"sha":"6e630e827ea2a257b2277c5589532b3b3b2e7fea","node_id":"MDY6Q29tbWl0MjA2MzY0OjZlNjMwZTgyN2VhMmEyNTdiMjI3N2M1NTg5NTMyYjNiM2IyZTdmZWE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-13T06:32:43Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-13T06:32:43Z"},"message":"OPENJPA-1386: Support field types that can hide each other\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@835756 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c45c6d865169fa8c9bca4c6ecd486700167c08f5","url":"https://api.github.com/repos/apache/openjpa/git/trees/c45c6d865169fa8c9bca4c6ecd486700167c08f5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6e630e827ea2a257b2277c5589532b3b3b2e7fea","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6e630e827ea2a257b2277c5589532b3b3b2e7fea","html_url":"https://github.com/apache/openjpa/commit/6e630e827ea2a257b2277c5589532b3b3b2e7fea","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6e630e827ea2a257b2277c5589532b3b3b2e7fea/comments","author":null,"committer":null,"parents":[{"sha":"6ae4adf687ac9194fa66b4f82ccf07413b0262e3","url":"https://api.github.com/repos/apache/openjpa/commits/6ae4adf687ac9194fa66b4f82ccf07413b0262e3","html_url":"https://github.com/apache/openjpa/commit/6ae4adf687ac9194fa66b4f82ccf07413b0262e3"}],"stats":{"total":30,"additions":28,"deletions":2},"files":[{"sha":"00be12c179f270b3d745e9f346b202e87535ad2e","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/util/SourceCode.java","status":"modified","additions":28,"deletions":2,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/6e630e827ea2a257b2277c5589532b3b3b2e7fea/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/util/SourceCode.java","raw_url":"https://github.com/apache/openjpa/raw/6e630e827ea2a257b2277c5589532b3b3b2e7fea/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/util/SourceCode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/util/SourceCode.java?ref=6e630e827ea2a257b2277c5589532b3b3b2e7fea","patch":"@@ -99,6 +99,12 @@ boolean addImport(ClassName name) {\n \t\tString pkgName = name.getPackageName();\n \t\tif (\"java.lang\".equals(pkgName))\n \t\t\treturn false;\n+\t\tfor (Import i : imports) {\n+\t\t    if (i.getClassName().hides(name)) {\n+\t\t        i.getClassName().useFullName();\n+\t\t        name.useFullName();\n+\t\t    }\n+\t\t}\n \t\treturn imports.add(new Import(name));\n \t}\n \t\n@@ -584,6 +590,8 @@ public int compareTo(Import other) {\n \t\t}\n \t\t\n \t\tpublic void write(PrintWriter out, int tab) {\n+\t\t    if (name.usingFullName())\n+\t\t        return;\n \t\t    String pkg = name.getPackageName();\n \t\t    if (pkg.length() == 0 || pkg.equals(getPackage().name))\n \t\t        return;\n@@ -597,6 +605,10 @@ public boolean equals(Object other) {\n \t\t\t}\n \t\t\treturn false;\n \t\t}\n+\t\t\n+\t\tClassName getClassName() {\n+\t\t    return name;\n+\t\t}\n \t}\n \t\n \t/**\n@@ -729,6 +741,7 @@ public void write(PrintWriter out, int tab) {\n         public final String simpleName;\n         public final String pkgName;\n         private String  arrayMarker = BLANK;\n+        private boolean useFullName = false;\n         \n \t    ClassName(String name) {\n \t    \twhile (isArray(name)) {\n@@ -769,10 +782,10 @@ public String getPackageName() {\n \t    }\n \t    \n \t    /**\n-\t     * Gets the simple name of this receiver.\n+\t     * Gets the full or simple name of this receiver based on useFullName flag.\n \t     */\n \t    public String toString() {\n-\t        return getSimpleName();\n+\t        return (useFullName ? fullName : simpleName) + arrayMarker;\n \t    }\n \t    \n \t    /**\n@@ -806,6 +819,19 @@ String getComponentName(String name) {\n \t    \t\tname.substring(0, name.length()-\"[]\".length());\n \t    }\n \t    \n+\t    boolean hides(ClassName other) {\n+\t        return this.getSimpleName().equals(other.getSimpleName())\n+\t            && !this.fullName.equals(other.fullName);\n+\t    }\n+\t    \n+\t    void useFullName() {\n+\t        useFullName = true;\n+\t    }\n+\t    \n+\t    boolean usingFullName() {\n+\t        return useFullName;\n+\t    }\n+\t    \n \t}\n \t\n \tstatic {"}]}

