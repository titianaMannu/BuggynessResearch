{"sha":"6f0a7f67da77101bd7bf2d82ee518e40485b279f","node_id":"MDY6Q29tbWl0MjA2MzY0OjZmMGE3ZjY3ZGE3NzEwMWJkN2JmMmQ4MmVlNTE4ZTQwNDg1YjI3OWY=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2006-08-22T01:50:43Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2006-08-22T01:50:43Z"},"message":"Added expression-level support for Map.get in queries\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@433460 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6bfc93bc93928eaf7b35231c1e7b267c64401230","url":"https://api.github.com/repos/apache/openjpa/git/trees/6bfc93bc93928eaf7b35231c1e7b267c64401230"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6f0a7f67da77101bd7bf2d82ee518e40485b279f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6f0a7f67da77101bd7bf2d82ee518e40485b279f","html_url":"https://github.com/apache/openjpa/commit/6f0a7f67da77101bd7bf2d82ee518e40485b279f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6f0a7f67da77101bd7bf2d82ee518e40485b279f/comments","author":null,"committer":null,"parents":[{"sha":"d5bb522c34f07740b5a89ecae4c51ede74fbe51b","url":"https://api.github.com/repos/apache/openjpa/commits/d5bb522c34f07740b5a89ecae4c51ede74fbe51b","html_url":"https://github.com/apache/openjpa/commit/d5bb522c34f07740b5a89ecae4c51ede74fbe51b"}],"stats":{"total":319,"additions":304,"deletions":15},"files":[{"sha":"8a91d753eebe7b8721c310d334916ab9784d7c2b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetMapValue.java","status":"added","additions":213,"deletions":0,"changes":213,"blob_url":"https://github.com/apache/openjpa/blob/6f0a7f67da77101bd7bf2d82ee518e40485b279f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetMapValue.java","raw_url":"https://github.com/apache/openjpa/raw/6f0a7f67da77101bd7bf2d82ee518e40485b279f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetMapValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetMapValue.java?ref=6f0a7f67da77101bd7bf2d82ee518e40485b279f","patch":"@@ -0,0 +1,213 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.jdbc.kernel.exps;\n+\n+import java.sql.SQLException;\n+\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n+import org.apache.openjpa.jdbc.kernel.JDBCStore;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n+import org.apache.openjpa.jdbc.meta.strats.ContainerFieldStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.LRSMapFieldStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.RelationStrategies;\n+import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.schema.ForeignKey;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.Joins;\n+import org.apache.openjpa.jdbc.sql.Result;\n+import org.apache.openjpa.jdbc.sql.SQLBuffer;\n+import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.kernel.Filters;\n+import org.apache.openjpa.meta.ClassMetaData;\n+\n+/**\n+ * Returns the value of the given map's key.\n+ *\n+ * @author Marc Prud'hommeaux\n+ */\n+class GetMapValue\n+    extends AbstractVal {\n+    private final Val _map;\n+    private final Val _key;\n+    private Joins _joins = null;\n+    private ClassMetaData _meta = null;\n+    private Class _cast = null;\n+\n+    /**\n+     * Constructor. Provide the map and key to operate on.\n+     */\n+    public GetMapValue(Val map, Val key) {\n+        _map = map;\n+        _key = key;\n+    }\n+\n+    public ClassMetaData getMetaData() {\n+        return _meta;\n+    }\n+\n+    public void setMetaData(ClassMetaData meta) {\n+        _meta = meta;\n+    }\n+\n+    public boolean isVariable() {\n+        return false;\n+    }\n+\n+    public Class getType() {\n+        if (_cast != null)\n+            return _cast;\n+\n+        return _map.getType();\n+    }\n+\n+    public void setImplicitType(Class type) {\n+        _cast = type;\n+    }\n+\n+    public void initialize(Select sel, JDBCStore store, boolean nullTest) {\n+        _map.initialize(sel, store, false);\n+        _key.initialize(sel, store, false);\n+        _joins = sel.and(_map.getJoins(), _key.getJoins());\n+    }\n+\n+    public Joins getJoins() {\n+        return _joins;\n+    }\n+\n+    public Object toDataStoreValue(Object val, JDBCStore store) {\n+        return _map.toDataStoreValue(val, store);\n+    }\n+\n+\n+    public void select(Select sel, JDBCStore store, Object[] params,\n+        boolean pks, JDBCFetchConfiguration fetch) {\n+        sel.select(newSQLBuffer(sel, store, params, fetch), this);\n+    }\n+\n+    public void selectColumns(Select sel, JDBCStore store,\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n+        _map.selectColumns(sel, store, params, true, fetch);\n+        _key.selectColumns(sel, store, params, true, fetch);\n+    }\n+\n+    public void groupBy(Select sel, JDBCStore store, Object[] params,\n+        JDBCFetchConfiguration fetch) {\n+        sel.groupBy(newSQLBuffer(sel, store, params, fetch));\n+    }\n+\n+    public void orderBy(Select sel, JDBCStore store, Object[] params,\n+        boolean asc, JDBCFetchConfiguration fetch) {\n+        sel.orderBy(newSQLBuffer(sel, store, params, fetch), asc, false);\n+    }\n+\n+    private SQLBuffer newSQLBuffer(Select sel, JDBCStore store,\n+        Object[] params, JDBCFetchConfiguration fetch) {\n+        calculateValue(sel, store, params, null, fetch);\n+        SQLBuffer buf = new SQLBuffer(store.getDBDictionary());\n+        appendTo(buf, 0, sel, store, params, fetch);\n+        clearParameters();\n+        return buf;\n+    }\n+\n+    public Object load(Result res, JDBCStore store,\n+        JDBCFetchConfiguration fetch)\n+        throws SQLException {\n+        return Filters.convert(res.getObject(this,\n+            JavaSQLTypes.JDBC_DEFAULT, null), getType());\n+    }\n+\n+    public void calculateValue(Select sel, JDBCStore store,\n+        Object[] params, Val other, JDBCFetchConfiguration fetch) {\n+        _map.calculateValue(sel, store, params, null, fetch);\n+        _key.calculateValue(sel, store, params, null, fetch);\n+    }\n+\n+    public void clearParameters() {\n+        _map.clearParameters();\n+        _key.clearParameters();\n+    }\n+\n+    public int length() {\n+        return 1;\n+    }\n+\n+    public void appendTo(SQLBuffer sql, int index, Select sel,\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n+        if (!(_map instanceof PCPath))\n+            throw new UnsupportedOperationException();\n+\n+        if (!(_key instanceof Const))\n+            throw new UnsupportedOperationException();\n+\n+        PCPath map = (PCPath) _map;\n+        Object key = ((Const) _key).getValue();\n+\n+        FieldMapping field = map.getFieldMapping();\n+\n+        if (!(field.getStrategy() instanceof LRSMapFieldStrategy))\n+            throw new UnsupportedOperationException();\n+\n+        LRSMapFieldStrategy strat = (LRSMapFieldStrategy) field.getStrategy();\n+\n+        ClassMapping[] clss = strat.getIndependentValueMappings(true);\n+        if (clss != null && clss.length > 1)\n+            throw RelationStrategies.unjoinable(field);\n+\n+        ClassMapping cls = (clss.length == 0) ? null : clss[0];\n+        ForeignKey fk = strat.getJoinForeignKey(cls);\n+        DBDictionary dict = store.getDBDictionary();\n+        SQLBuffer sub = new SQLBuffer(dict);\n+\n+        // manually create a subselect for the Map's value\n+        sub.append(\"(SELECT \");\n+        Column[] values = field.getElementMapping().getColumns();\n+        for (int i = 0; i < values.length; i++) {\n+            if (i > 0)\n+                sub.append(\", \");\n+            sub.append(values[i].getFullName());\n+        }\n+\n+        sub.append(\" FROM \").append(values[0].getTable().getFullName()).\n+            append(\" WHERE \");\n+\n+        // add in the joins\n+        ContainerFieldStrategy.appendUnaliasedJoin(sub, sel, null,\n+            dict, field, fk);\n+\n+        sub.append(\" AND \");\n+\n+        key = strat.toKeyDataStoreValue(key, store);\n+        Column[] cols = strat.getKeyColumns(cls);\n+        Object[] vals = (cols.length == 1) ? null : (Object[]) key;\n+\n+        for (int i = 0; i < cols.length; i++) {\n+            sub.append(cols[i].getFullName());\n+\n+            if (vals == null)\n+                sub.append((key == null) ? \" IS \" : \" = \").\n+                    appendValue(key, cols[i]);\n+            else\n+                sub.append((vals[i] == null) ? \" IS \" : \" = \").\n+                    appendValue(vals[i], cols[i]);\n+        }\n+\n+        sub.append(\")\");\n+\n+        sql.append(sub);\n+    }\n+}"},{"sha":"c60f1aeda625be1fcd5de6b11d18ea42208d2d2f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","status":"modified","additions":18,"deletions":14,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/6f0a7f67da77101bd7bf2d82ee518e40485b279f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","raw_url":"https://github.com/apache/openjpa/raw/6f0a7f67da77101bd7bf2d82ee518e40485b279f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java?ref=6f0a7f67da77101bd7bf2d82ee518e40485b279f","patch":"@@ -172,24 +172,24 @@ public Expression isNotEmpty(Value val) {\n         return new IsNotEmptyExpression((Val) val);\n     }\n \n-    public Expression contains(Value v1, Value v2) {\n-        if (v1 instanceof Const)\n-            return new InExpression((Val) v2, (Const) v1);\n-        if (v1 instanceof SubQ)\n-            return new InSubQExpression((Val) v2, (SubQ) v1);\n-        return new ContainsExpression((Val) v1, (Val) v2);\n+    public Expression contains(Value map, Value arg) {\n+        if (map instanceof Const)\n+            return new InExpression((Val) arg, (Const) map);\n+        if (map instanceof SubQ)\n+            return new InSubQExpression((Val) arg, (SubQ) map);\n+        return new ContainsExpression((Val) map, (Val) arg);\n     }\n \n-    public Expression containsKey(Value v1, Value v2) {\n-        if (v1 instanceof Const)\n-            return new InKeyExpression((Val) v2, (Const) v1);\n-        return new ContainsKeyExpression((Val) v1, (Val) v2);\n+    public Expression containsKey(Value map, Value arg) {\n+        if (map instanceof Const)\n+            return new InKeyExpression((Val) arg, (Const) map);\n+        return new ContainsKeyExpression((Val) map, (Val) arg);\n     }\n \n-    public Expression containsValue(Value v1, Value v2) {\n-        if (v1 instanceof Const)\n-            return new InValueExpression((Val) v2, (Const) v1);\n-        return new ContainsExpression((Val) v1, (Val) v2);\n+    public Expression containsValue(Value map, Value arg) {\n+        if (map instanceof Const)\n+            return new InValueExpression((Val) arg, (Const) map);\n+        return new ContainsExpression((Val) map, (Val) arg);\n     }\n \n     public Expression isInstance(Value val, Class c) {\n@@ -442,4 +442,8 @@ public Value getObjectId(Value val) {\n             return new ConstGetObjectId((Const) val);\n         return new GetObjectId((PCPath) val);\n     }\n+\n+    public Value getMapValue(Value map, Value arg) {\n+        return new GetMapValue((Val) map, (Val) arg);\n+    }\n }"},{"sha":"925442e5483b2d11b6d054aa99cd45d592fc13fb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ContainerFieldStrategy.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/6f0a7f67da77101bd7bf2d82ee518e40485b279f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ContainerFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/6f0a7f67da77101bd7bf2d82ee518e40485b279f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ContainerFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ContainerFieldStrategy.java?ref=6f0a7f67da77101bd7bf2d82ee518e40485b279f","patch":"@@ -93,6 +93,13 @@ protected static void appendJoinCount(SQLBuffer sql, Select sel,\n         String fullTable = dict.getFullName(fk.getTable(), false);\n         sql.append(\"(SELECT COUNT(*) FROM \").append(fullTable).\n             append(\" WHERE \");\n+        appendUnaliasedJoin(sql, sel, joins, dict, field, fk);\n+        sql.append(\")\");\n+    }\n+\n+    public static void appendUnaliasedJoin(SQLBuffer sql, Select sel,\n+        Joins joins, DBDictionary dict, FieldMapping field, ForeignKey fk) {\n+        String fullTable = dict.getFullName(fk.getTable(), false);\n \n         Column[] cols = fk.getColumns();\n         Column[] pks = fk.getPrimaryKeyColumns();\n@@ -119,6 +126,5 @@ protected static void appendJoinCount(SQLBuffer sql, Select sel,\n             sql.append(sel.getColumnAlias(pks[i], joins)).append(\" = \").\n                 appendValue(fk.getPrimaryKeyConstant(pks[i]), pks[i]);\n         }\n-        sql.append(\")\");\n     }\n }"},{"sha":"65908ae0d7b734e177fece3e997d4d7b68c75f2f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionFactory.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/6f0a7f67da77101bd7bf2d82ee518e40485b279f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionFactory.java","raw_url":"https://github.com/apache/openjpa/raw/6f0a7f67da77101bd7bf2d82ee518e40485b279f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionFactory.java?ref=6f0a7f67da77101bd7bf2d82ee518e40485b279f","patch":"@@ -91,6 +91,11 @@\n      */\n     public Expression containsValue(Value map, Value arg);\n \n+    /**\n+     * Return an expression representing the given condition.\n+     */\n+    public Value getMapValue(Value map, Value arg);\n+\n     /**\n      * Return whether the first value is an instance of the given class.\n      */"},{"sha":"30f6aac513f67744979256d37f77982e55d5ddad","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/GetMapValue.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/6f0a7f67da77101bd7bf2d82ee518e40485b279f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/GetMapValue.java","raw_url":"https://github.com/apache/openjpa/raw/6f0a7f67da77101bd7bf2d82ee518e40485b279f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/GetMapValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/GetMapValue.java?ref=6f0a7f67da77101bd7bf2d82ee518e40485b279f","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.kernel.exps;\n+\n+import java.util.Map;\n+\n+import org.apache.openjpa.kernel.StoreContext;\n+\n+/**\n+ * Returns the value of the specified key in a Map.\n+ *\n+ * @author Marc Prud'hommeaux\n+ */\n+class GetMapValue\n+    extends Val {\n+\n+    private final Val _map;\n+    private final Val _arg;\n+\n+    /**\n+     * Constructor. Provide value to upper-case.\n+     */\n+    public GetMapValue(Val map, Val arg) {\n+        _map = map;\n+        _arg = arg;\n+    }\n+\n+    public boolean isVariable() {\n+        return false;\n+    }\n+\n+    public Class getType() {\n+        return Object.class;\n+    }\n+\n+    public void setImplicitType(Class type) {\n+    }\n+\n+    protected Object eval(Object candidate, Object orig,\n+        StoreContext ctx, Object[] params) {\n+        return ((Map) _map.eval(candidate, orig, ctx, params)).\n+            get(_arg.eval(candidate, orig, ctx, params));\n+    }\n+}"},{"sha":"1042b5c67d0884873a16a5220f73a6c4060ad0b3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/InMemoryExpressionFactory.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/6f0a7f67da77101bd7bf2d82ee518e40485b279f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/InMemoryExpressionFactory.java","raw_url":"https://github.com/apache/openjpa/raw/6f0a7f67da77101bd7bf2d82ee518e40485b279f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/InMemoryExpressionFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/InMemoryExpressionFactory.java?ref=6f0a7f67da77101bd7bf2d82ee518e40485b279f","patch":"@@ -405,6 +405,10 @@ public Expression containsValue(Value v1, Value v2) {\n         return new ContainsValueExpression((Val) v1, (Val) v2);\n     }\n \n+    public Value getMapValue(Value map, Value arg) {\n+        return new GetMapValue((Val) map, (Val) arg);\n+    }\n+\n     public Expression isInstance(Value v1, Class c) {\n         return new InstanceofExpression((Val) v1, c);\n     }"}]}

