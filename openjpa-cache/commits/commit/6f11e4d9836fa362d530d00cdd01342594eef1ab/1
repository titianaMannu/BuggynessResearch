{"sha":"6f11e4d9836fa362d530d00cdd01342594eef1ab","node_id":"MDY6Q29tbWl0MjA2MzY0OjZmMTFlNGQ5ODM2ZmEzNjJkNTMwZDAwY2RkMDEzNDI1OTRlZWYxYWI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-12T04:14:55Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-12T04:14:55Z"},"message":"OPENJPA-1381: Ignore cached target query when lock mode is set\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@835220 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c810b47e3603ba589361b9970ae0bb19e72151f1","url":"https://api.github.com/repos/apache/openjpa/git/trees/c810b47e3603ba589361b9970ae0bb19e72151f1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6f11e4d9836fa362d530d00cdd01342594eef1ab","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6f11e4d9836fa362d530d00cdd01342594eef1ab","html_url":"https://github.com/apache/openjpa/commit/6f11e4d9836fa362d530d00cdd01342594eef1ab","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6f11e4d9836fa362d530d00cdd01342594eef1ab/comments","author":null,"committer":null,"parents":[{"sha":"4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0","url":"https://api.github.com/repos/apache/openjpa/commits/4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0","html_url":"https://github.com/apache/openjpa/commit/4991e6bdc22bdda1ac5d8bee44f9f3e73d94a2d0"}],"stats":{"total":34,"additions":33,"deletions":1},"files":[{"sha":"3098ef4fc79377614d4cd6a83b69dec95af75db2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/6f11e4d9836fa362d530d00cdd01342594eef1ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/6f11e4d9836fa362d530d00cdd01342594eef1ab/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java?ref=6f11e4d9836fa362d530d00cdd01342594eef1ab","patch":"@@ -26,6 +26,7 @@\n import java.util.Properties;\n \n import javax.persistence.EntityManager;\n+import javax.persistence.LockModeType;\n import javax.persistence.Query;\n \n import junit.framework.TestCase;\n@@ -738,6 +739,24 @@ public void testQueryWithUserDefinedAndInternalParamtersInSubquery() {\n         }\n     }\n     \n+    public void testPreparedQueryIgnoredWhenLockModeIsSet() {\n+        String jpql = \"select p from Author p\";\n+        EntityManager em = emf.createEntityManager();\n+        \n+        Query q1 = em.createQuery(jpql);\n+        assertEquals(JPQLParser.LANG_JPQL, OpenJPAPersistence.cast(q1).getLanguage());\n+        List<Author> authors1 = q1.getResultList();\n+        \n+        // do the same thing again, this time query should be cached\n+        em.getTransaction().begin();\n+        Query q2 = em.createQuery(jpql);\n+        assertEquals(QueryLanguages.LANG_PREPARED_SQL, OpenJPAPersistence.cast(q2).getLanguage());\n+        q2.setLockMode(LockModeType.OPTIMISTIC);\n+        assertEquals(JPQLParser.LANG_JPQL, OpenJPAPersistence.cast(q2).getLanguage());\n+        List<Author> authors2 = q2.getResultList();\n+        em.getTransaction().rollback();\n+    }\n+    \n     \n     PreparedQueryCache getPreparedQueryCache() {\n         return emf.getConfiguration().getQuerySQLCacheInstance();"},{"sha":"d0c653af868c76c3484e62b5401bf6122c8155fc","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/6f11e4d9836fa362d530d00cdd01342594eef1ab/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/6f11e4d9836fa362d530d00cdd01342594eef1ab/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=6f11e4d9836fa362d530d00cdd01342594eef1ab","patch":"@@ -372,8 +372,12 @@ public boolean isNative() {\n \t\treturn QueryLanguages.LANG_SQL.equals(getLanguage());\n \t}\n \n+\t/**\n+\t * Asserts that this query is a JPQL or Criteria Query.\n+\t */\n \tvoid assertJPQLOrCriteriaQuery() {\n-        if (!(JPQLParser.LANG_JPQL.equals(getLanguage()) || CriteriaBuilderImpl.LANG_CRITERIA.equals(getLanguage()))) {\n+        String language = getLanguage();\n+        if (!(JPQLParser.LANG_JPQL.equals(language) || CriteriaBuilderImpl.LANG_CRITERIA.equals(language))) {\n             throw new IllegalStateException(_loc.get(\"not-jpql-or-criteria-query\").getMessage());\n         }\n \t}\n@@ -392,7 +396,16 @@ public LockModeType getLockMode() {\n         return _fetch.getReadLockMode();\n     }\n \n+    /**\n+     * Sets lock mode on the given query.\n+     * If the target query has been prepared and cached, then ignores the cached version.\n+     * @see #ignorePreparedQuery()\n+     */\n     public TypedQuery<X> setLockMode(LockModeType lockMode) {\n+        String language = getLanguage();\n+        if (QueryLanguages.LANG_PREPARED_SQL.equals(language)) {\n+            ignorePreparedQuery();\n+        }\n         assertJPQLOrCriteriaQuery();\n        _fetch.setReadLockMode(lockMode);\n        return this;"}]}

