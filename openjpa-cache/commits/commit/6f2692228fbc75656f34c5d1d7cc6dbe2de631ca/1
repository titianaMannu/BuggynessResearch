{"sha":"6f2692228fbc75656f34c5d1d7cc6dbe2de631ca","node_id":"MDY6Q29tbWl0MjA2MzY0OjZmMjY5MjIyOGZiYzc1NjU2ZjM0YzVkMWQ3Y2M2ZGJlMmRlNjMxY2E=","commit":{"author":{"name":"Romain Manni-Bucau","email":"rmannibucau@gmail.com","date":"2020-10-27T14:43:24Z"},"committer":{"name":"Romain Manni-Bucau","email":"rmannibucau@gmail.com","date":"2020-10-27T14:43:24Z"},"message":"[OPENJPA-2834] invalid properties cache when a propery changes","tree":{"sha":"dc626c03813ff42ca870a1166007ff2251dcc0e4","url":"https://api.github.com/repos/apache/openjpa/git/trees/dc626c03813ff42ca870a1166007ff2251dcc0e4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6f2692228fbc75656f34c5d1d7cc6dbe2de631ca","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6f2692228fbc75656f34c5d1d7cc6dbe2de631ca","html_url":"https://github.com/apache/openjpa/commit/6f2692228fbc75656f34c5d1d7cc6dbe2de631ca","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6f2692228fbc75656f34c5d1d7cc6dbe2de631ca/comments","author":{"login":"rmannibucau","id":1249546,"node_id":"MDQ6VXNlcjEyNDk1NDY=","avatar_url":"https://avatars.githubusercontent.com/u/1249546?v=4","gravatar_id":"","url":"https://api.github.com/users/rmannibucau","html_url":"https://github.com/rmannibucau","followers_url":"https://api.github.com/users/rmannibucau/followers","following_url":"https://api.github.com/users/rmannibucau/following{/other_user}","gists_url":"https://api.github.com/users/rmannibucau/gists{/gist_id}","starred_url":"https://api.github.com/users/rmannibucau/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmannibucau/subscriptions","organizations_url":"https://api.github.com/users/rmannibucau/orgs","repos_url":"https://api.github.com/users/rmannibucau/repos","events_url":"https://api.github.com/users/rmannibucau/events{/privacy}","received_events_url":"https://api.github.com/users/rmannibucau/received_events","type":"User","site_admin":false},"committer":{"login":"rmannibucau","id":1249546,"node_id":"MDQ6VXNlcjEyNDk1NDY=","avatar_url":"https://avatars.githubusercontent.com/u/1249546?v=4","gravatar_id":"","url":"https://api.github.com/users/rmannibucau","html_url":"https://github.com/rmannibucau","followers_url":"https://api.github.com/users/rmannibucau/followers","following_url":"https://api.github.com/users/rmannibucau/following{/other_user}","gists_url":"https://api.github.com/users/rmannibucau/gists{/gist_id}","starred_url":"https://api.github.com/users/rmannibucau/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmannibucau/subscriptions","organizations_url":"https://api.github.com/users/rmannibucau/orgs","repos_url":"https://api.github.com/users/rmannibucau/repos","events_url":"https://api.github.com/users/rmannibucau/events{/privacy}","received_events_url":"https://api.github.com/users/rmannibucau/received_events","type":"User","site_admin":false},"parents":[{"sha":"548e00f9191b2ae47fb130ed432908c86511f85c","url":"https://api.github.com/repos/apache/openjpa/commits/548e00f9191b2ae47fb130ed432908c86511f85c","html_url":"https://github.com/apache/openjpa/commit/548e00f9191b2ae47fb130ed432908c86511f85c"}],"stats":{"total":23,"additions":23,"deletions":0},"files":[{"sha":"6c4d551d91012801e2f596271c784a53f4c8cc82","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/6f2692228fbc75656f34c5d1d7cc6dbe2de631ca/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/6f2692228fbc75656f34c5d1d7cc6dbe2de631ca/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=6f2692228fbc75656f34c5d1d7cc6dbe2de631ca","patch":"@@ -262,6 +262,7 @@ public boolean getMultithreaded() {\n     public void setMultithreaded(boolean multithreaded) {\n         assertNotCloseInvoked();\n         _broker.setMultithreaded(multithreaded);\n+        properties = null;\n     }\n \n     @Override\n@@ -273,6 +274,7 @@ public boolean getIgnoreChanges() {\n     public void setIgnoreChanges(boolean val) {\n         assertNotCloseInvoked();\n         _broker.setIgnoreChanges(val);\n+        properties = null;\n     }\n \n     @Override\n@@ -284,6 +286,7 @@ public boolean getNontransactionalRead() {\n     public void setNontransactionalRead(boolean val) {\n         assertNotCloseInvoked();\n         _broker.setNontransactionalRead(val);\n+        properties = null;\n     }\n \n     @Override\n@@ -295,6 +298,7 @@ public boolean getNontransactionalWrite() {\n     public void setNontransactionalWrite(boolean val) {\n         assertNotCloseInvoked();\n         _broker.setNontransactionalWrite(val);\n+        properties = null;\n     }\n \n     @Override\n@@ -306,6 +310,7 @@ public boolean getOptimistic() {\n     public void setOptimistic(boolean val) {\n         assertNotCloseInvoked();\n         _broker.setOptimistic(val);\n+        properties = null;\n     }\n \n     @Override\n@@ -317,12 +322,14 @@ public RestoreStateType getRestoreState() {\n     public void setRestoreState(RestoreStateType val) {\n         assertNotCloseInvoked();\n         _broker.setRestoreState(val.toKernelConstant());\n+        properties = null;\n     }\n \n     @Override\n     public void setRestoreState(int restore) {\n         assertNotCloseInvoked();\n         _broker.setRestoreState(restore);\n+        properties = null;\n     }\n \n     @Override\n@@ -334,6 +341,7 @@ public boolean getRetainState() {\n     public void setRetainState(boolean val) {\n         assertNotCloseInvoked();\n         _broker.setRetainState(val);\n+        properties = null;\n     }\n \n     @Override\n@@ -345,12 +353,14 @@ public AutoClearType getAutoClear() {\n     public void setAutoClear(AutoClearType val) {\n         assertNotCloseInvoked();\n         _broker.setAutoClear(val.toKernelConstant());\n+        properties = null;\n     }\n \n     @Override\n     public void setAutoClear(int autoClear) {\n         assertNotCloseInvoked();\n         _broker.setAutoClear(autoClear);\n+        properties = null;\n     }\n \n     @Override\n@@ -362,12 +372,14 @@ public DetachStateType getDetachState() {\n     public void setDetachState(DetachStateType type) {\n         assertNotCloseInvoked();\n         _broker.setDetachState(type.toKernelConstant());\n+        properties = null;\n     }\n \n     @Override\n     public void setDetachState(int detach) {\n         assertNotCloseInvoked();\n         _broker.setDetachState(detach);\n+        properties = null;\n     }\n \n     @Override\n@@ -379,30 +391,35 @@ public void setDetachState(int detach) {\n     public void setAutoDetach(AutoDetachType flag) {\n         assertNotCloseInvoked();\n         _broker.setAutoDetach(AutoDetachType.fromEnumSet(EnumSet.of(flag)));\n+        properties = null;\n     }\n \n     @Override\n     public void setAutoDetach(EnumSet<AutoDetachType> flags) {\n         assertNotCloseInvoked();\n         _broker.setAutoDetach(AutoDetachType.fromEnumSet(flags));\n+        properties = null;\n     }\n \n     @Override\n     public void setAutoDetach(int autoDetachFlags) {\n         assertNotCloseInvoked();\n         _broker.setAutoDetach(autoDetachFlags);\n+        properties = null;\n     }\n \n     @Override\n     public void setAutoDetach(AutoDetachType value, boolean on) {\n         assertNotCloseInvoked();\n         _broker.setAutoDetach(AutoDetachType.fromEnumSet(EnumSet.of(value)),on);\n+        properties = null;\n     }\n \n     @Override\n     public void setAutoDetach(int flag, boolean on) {\n         assertNotCloseInvoked();\n         _broker.setAutoDetach(flag, on);\n+        properties = null;\n     }\n \n     @Override\n@@ -414,6 +431,7 @@ public boolean getEvictFromStoreCache() {\n     public void setEvictFromStoreCache(boolean evict) {\n         assertNotCloseInvoked();\n         _broker.setEvictFromDataCache(evict);\n+        properties = null;\n     }\n \n     @Override\n@@ -425,6 +443,7 @@ public boolean getPopulateStoreCache() {\n     public void setPopulateStoreCache(boolean cache) {\n         assertNotCloseInvoked();\n         _broker.setPopulateDataCache(cache);\n+        properties = null;\n     }\n \n     @Override\n@@ -436,6 +455,7 @@ public boolean isTrackChangesByType() {\n     public void setTrackChangesByType(boolean trackByType) {\n         assertNotCloseInvoked();\n         _broker.setTrackChangesByType(trackByType);\n+        properties = null;\n     }\n \n     @Override\n@@ -1349,6 +1369,7 @@ public void setFlushMode(FlushModeType flushMode) {\n         _broker.assertOpen();\n         _broker.getFetchConfiguration().setFlushBeforeQueries\n             (toFlushBeforeQueries(flushMode));\n+        properties = null;\n     }\n \n     @Override\n@@ -2150,13 +2171,15 @@ private boolean setKernelProperty(Object target, String original, Object value)\n             kType  = setter.getParameterTypes()[0];\n             kValue = convertUserValue(original, value, kType);\n             Reflection.set(target, setter, kValue);\n+            properties = null;\n             return true;\n         } else {\n             Field field = Reflection.findField(target.getClass(), beanProp, false);\n             if (field != null) {\n                 kType  = field.getType();\n                 kValue = convertUserValue(original, value, kType);\n                 Reflection.set(target, field, kValue);\n+                properties = null;\n                 return true;\n             }\n         }"}]}

