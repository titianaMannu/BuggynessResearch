{"sha":"6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42","node_id":"MDY6Q29tbWl0MjA2MzY0OjZmYTMyNzE5YjlkYTdiMjQ5ZDhmYWFhMmY4OWMxZWZmOGY0YTdkNDI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-10T02:26:31Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-10T02:26:31Z"},"message":"OPENJPA-1334: Separate distribution policy from DataCacheManager.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@908322 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"74158eb7fd3dfe5cc35a301cde2c98bafb8492c9","url":"https://api.github.com/repos/apache/openjpa/git/trees/74158eb7fd3dfe5cc35a301cde2c98bafb8492c9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42","html_url":"https://github.com/apache/openjpa/commit/6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42/comments","author":null,"committer":null,"parents":[{"sha":"ad3cf2c68210d3ad53f71fdc3a5f9a543d12b748","url":"https://api.github.com/repos/apache/openjpa/commits/ad3cf2c68210d3ad53f71fdc3a5f9a543d12b748","html_url":"https://github.com/apache/openjpa/commit/ad3cf2c68210d3ad53f71fdc3a5f9a543d12b748"}],"stats":{"total":320,"additions":208,"deletions":112},"files":[{"sha":"139aee5c3f23be334f3321ee595ac4ade0d6797e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42","patch":"@@ -23,6 +23,7 @@\n import java.util.Map;\n \n import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.datacache.CacheDistributionPolicy;\n import org.apache.openjpa.datacache.ConcurrentDataCache;\n import org.apache.openjpa.datacache.ConcurrentQueryCache;\n import org.apache.openjpa.datacache.DataCacheManager;\n@@ -93,6 +94,7 @@\n     public BrokerValue brokerPlugin;\n     public ObjectValue dataCachePlugin;\n     public ObjectValue dataCacheManagerPlugin;\n+    public ObjectValue cacheDistributionPolicyPlugin;\n     public IntValue dataCacheTimeout;\n     public ObjectValue queryCachePlugin;\n     public BooleanValue dynamicDataStructs;\n@@ -229,6 +231,15 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         dataCacheManagerPlugin.setString(aliases[0]);\n         dataCacheManagerPlugin.setInstantiatingGetter(\"getDataCacheManager\");\n \n+        cacheDistributionPolicyPlugin = addPlugin(\"CacheDistributionPolicy\", true);\n+        aliases = new String[] {\n+                \"default\",    \"org.apache.openjpa.datacache.DefaultCacheDistributionPolicy\",\n+                \"type-based\", \"org.apache.openjpa.datacache.TypeBasedCacheDistributionPolicy\"};\n+        cacheDistributionPolicyPlugin.setAliases(aliases);\n+        cacheDistributionPolicyPlugin.setDefault(aliases[0]);\n+        cacheDistributionPolicyPlugin.setString(aliases[0]);\n+        cacheDistributionPolicyPlugin.setInstantiatingGetter(\"getCacheDistributionPolicy\");\n+        \n         dataCachePlugin = addPlugin(\"DataCache\", false);\n         aliases = new String[] { \n             \"false\", null, \n@@ -1694,5 +1705,27 @@ public void setDataCacheMode(String mode) {\n     public String getDataCacheMode() {\n         return dataCacheMode.getString();\n     }\n+    \n+\n+    public String getCacheDistributionPolicy() {\n+        return cacheDistributionPolicyPlugin.getString();\n+    }\n+\n+    public CacheDistributionPolicy getCacheDistributionPolicyInstance() {\n+        CacheDistributionPolicy policy = (CacheDistributionPolicy) cacheDistributionPolicyPlugin.get();\n+        if (policy == null) {\n+            policy =  (CacheDistributionPolicy) \n+                cacheDistributionPolicyPlugin.instantiate(CacheDistributionPolicy.class, this);\n+        }\n+        return policy;\n+    }\n+\n+    public void setCacheDistributionPolicy(String policyPlugin) {\n+        cacheDistributionPolicyPlugin.setString(policyPlugin);\n+    }\n+\n+    public void setCacheDistributionPolicyInstance(CacheDistributionPolicy policy) {\n+        cacheDistributionPolicyPlugin.set(policy);\n+    }\n }\n "},{"sha":"0f722e2c7c1b1518dbf3ab80630a4ecb64d606ad","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/CacheDistributionPolicy.java","status":"modified","additions":24,"deletions":20,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/CacheDistributionPolicy.java","raw_url":"https://github.com/apache/openjpa/raw/6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/CacheDistributionPolicy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/CacheDistributionPolicy.java?ref=6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42","patch":"@@ -19,38 +19,42 @@\n package org.apache.openjpa.datacache;\n \n import org.apache.openjpa.kernel.OpenJPAStateManager;\n-import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.lib.conf.Configurable;\n \n /**\n- * A policy determines the name of the cache where a given entity state will be cached.\n+ * A policy determines whether a given entity should be cached and if true, in which named partition of the\n+ * cache.\n+ * <br>\n+ * This policy is activated for each instance if and only if the cache settings specified in metadata \n+ * such as JPA specification defined {@link Cacheable @Cacheable} annotation or OpenJPA specific\n+ * {@link org.apache.openjpa.persistence.DataCache @DataCache} annotation or configuration property \n+ * such as <code>javax.persistence.sharedCache.mode</code> determined the type of the instance being cachable.\n+ * <br> \n+ * For example, a specific policy will never be active for when <code>javax.persistence.sharedCache.mode</code> \n+ * is set to <code>NONE</code>. \n+ * <br>\n+ * Distribution Policies are configurable. So a specific policy can be configured as\n+ * <pre>\n+ *  &lt;property name=\"openjpa.CacheDistributionPolicy\" value=\"com.acme.FooPolicy(param1='xyz',param2=true)\"/&gt;\n+ * </pre>\n+ * where <code>com.acme.FooPolicy</code> is an implementation of this interface and defines bean style setter and\n+ * getter methods for String property <code>param1</code> and boolean property <code>param2</code>. \n  * \n  * @author Pinaki Poddar\n  * \n  * @since 2.0.0\n  *\n  */\n-public interface CacheDistributionPolicy {\n+public interface CacheDistributionPolicy extends Configurable {\n     /**\n      * Selects the name of the cache where the given managed proxy object state be cached.\n      * \n-     * @param sm the managed proxy object to be cached\n-     * @param context the context of invocation. No specific semantics is \n-     * attributed currently. Can be null.\n+     * @param sm the managed proxy object to be cached. The actual managed instance can be accessed from the proxy\n+     * instance simply as <code>sm.getManagedInstance()</code>.\n+     * \n+     * @param context the context of invocation. No specific semantics is attributed currently. Can be null.\n      *  \n-     * @return name of the cache or null if the managed instance need not be cached.\n+     * @return name of the cache or null, implying that that the instance should not be cached.\n      */\n     String selectCache(OpenJPAStateManager sm, Object context);\n-    \n-    /**\n-     * A default implementation that selects the cache by the type of the given\n-     * managed instance.\n-     * \n-     * @see ClassMetaData#getDataCacheName()\n-     *\n-     */\n-    public static class Default implements CacheDistributionPolicy {\n-        public String selectCache(OpenJPAStateManager sm, Object context) {\n-            return sm.getMetaData().getDataCacheName();\n-        }\n-    }\n }"},{"sha":"679cf1446b13ccf648e5e517d3f924b5a109a544","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManager.java","status":"modified","additions":6,"deletions":18,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManager.java","raw_url":"https://github.com/apache/openjpa/raw/6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManager.java?ref=6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42","patch":"@@ -20,12 +20,16 @@\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.ObjectValue;\n \n /**\n- * Manages the system's data and query caches. You can\n- * retrieve the data cache manager from the {@link OpenJPAConfiguration}.\n+ * Manages the system's data and query caches. You can retrieve the data cache manager from the \n+ * {@link OpenJPAConfiguration#getDataCacheManagerInstance()}.\n  * <br>\n+ * Manages zero or more individual {@link DataCache caches} or partitions. Each individual partition\n+ * is identified by a string-based identifier.\n+ *  \n  * Decides eligibility to cache for managed types.\n  * \n  *\n@@ -95,22 +99,6 @@ public void initialize(OpenJPAConfiguration conf, ObjectValue dataCache,\n      */\n     public CacheDistributionPolicy getDistributionPolicy();\n     \n-    /**\n-     * Set the types that are explicitly excluded from being cached.\n-     * \n-     * @param typeNames semicolon separated fully qualified class names.\n-     * @since 2.0.0\n-     */\n-    public void setExcludedTypes(String typeNames);\n-    \n-    /**\n-     * Set the types that are explicitly included to be cached.\n-     * \n-     * @param typeNames semicolon separated fully qualified class names.\n-     * @since 2.0.0\n-     */\n-    public void setIncludedTypes(String typeNames);\n-\n     /**\n      * Close all caches.\n      */"},{"sha":"b9dacad8401b4c932b1ef02b49835c2f5d6f3182","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java","status":"modified","additions":6,"deletions":72,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java?ref=6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42","patch":"@@ -27,6 +27,7 @@\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.enhance.PCDataGenerator;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.conf.ObjectValue;\n import org.apache.openjpa.lib.util.Closeable;\n import org.apache.openjpa.meta.ClassMetaData;\n@@ -51,9 +52,7 @@\n     private QueryCache _queryCache = null;\n     private DataCachePCDataGenerator _pcGenerator = null;\n     private DataCacheScheduler _scheduler = null;\n-    private CacheDistributionPolicy _policy = new CacheDistributionPolicy.Default();\n-    private Set<String> _excludedTypes;\n-    private Set<String> _includedTypes;\n+    private CacheDistributionPolicy _policy = new DefaultCacheDistributionPolicy();\n \n     public void initialize(OpenJPAConfiguration conf, ObjectValue dataCache, ObjectValue queryCache) {\n         _conf = conf;\n@@ -65,6 +64,8 @@ public void initialize(OpenJPAConfiguration conf, ObjectValue dataCache, ObjectV\n         if (conf.getDynamicDataStructs())\n             _pcGenerator = new DataCachePCDataGenerator(conf);\n         _scheduler = new DataCacheScheduler(conf);\n+        \n+        _policy = conf.getCacheDistributionPolicyInstance();\n \n         _cache.initialize(this);\n         _queryCache = (QueryCache) queryCache.instantiate(QueryCache.class, conf);\n@@ -132,23 +133,13 @@ public CacheDistributionPolicy getDistributionPolicy() {\n         return _policy;\n     }\n     \n-    /**\n-     * Sets the instance-based cache distribution policy. \n-     */\n-    public void setDistributionPolicy(CacheDistributionPolicy policy) {\n-        _policy = policy;\n-    }\n-    \n     /**\n      * Affirms if the given type is eligible for cache.\n      */\n     public boolean isCachable(ClassMetaData meta) {\n-        Boolean isCachable = isCacheableByPlugin(meta);\n+        Boolean isCachable = isCacheableByMode(meta);\n         if (isCachable == null) {\n-            isCachable = isCacheableByMode(meta);\n-            if (isCachable == null) {\n-                isCachable = isCacheableByType(meta);\n-            }\n+           isCachable = isCacheableByType(meta);\n         }\n         return isCachable;\n     }\n@@ -180,61 +171,4 @@ private Boolean isCacheableByMode(ClassMetaData meta) {\n     private Boolean isCacheableByType(ClassMetaData meta) {\n         return meta.getDataCacheName() != null;\n     }\n-    \n-    /**\n-     * Is the given type cacheable by excludeTypes/includeTypes plug-in properties.\n-     *  \n-     * @param meta the given type\n-     * @return TRUE or FALSE if the type has appeared in the plug-in property.\n-     * null otherwise.\n-     */\n-    private Boolean isCacheableByPlugin(ClassMetaData meta) {\n-        String className = meta.getDescribedType().getName();\n-        if (_excludedTypes != null && _excludedTypes.contains(className)) {  \n-            return Boolean.FALSE;\n-        } \n-        if (_includedTypes != null && _includedTypes.contains(className)) {\n-            return Boolean.TRUE;\n-        }\n-        return null;\n-    }\n-\n-    /**\n-     * Gets the excluded types, if configured.\n-     */\n-    public Set<String> getExcludedTypes() {\n-        return _excludedTypes;\n-    }\n-    \n-    /**\n-     * Sets excluded types from a semicolon separated list of type names.\n-     */\n-    public void setExcludedTypes(String types) {\n-        _excludedTypes = parseNames(types);\n-    }\n-\n-    /**\n-     * Gets the included types, if configured.\n-     */\n-    public Set<String> getIncludedTypes() {\n-        return _excludedTypes;\n-    }\n-    \n-    /**\n-     * Sets included types from a semicolon separated list of type names.\n-     */\n-    public void setIncludedTypes(String types) {\n-        _includedTypes = parseNames(types);\n-    }\n-    \n-    private Set<String> parseNames(String types) {\n-        if (StringUtils.isEmpty(types))\n-            return Collections.emptySet();\n-        String[] names = Strings.split(types, \";\", 0);\n-        Set<String> set = new HashSet<String>();\n-        set.addAll(Arrays.asList(names));\n-        \n-        return  Collections.unmodifiableSet(set);\n-    }\n-\n }"},{"sha":"769368bbd42f876d64bbea9cf6652fafc0096461","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DefaultCacheDistributionPolicy.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DefaultCacheDistributionPolicy.java","raw_url":"https://github.com/apache/openjpa/raw/6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DefaultCacheDistributionPolicy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DefaultCacheDistributionPolicy.java?ref=6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42","patch":"@@ -0,0 +1,29 @@\n+package org.apache.openjpa.datacache;\n+\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.meta.ClassMetaData;\n+\n+/**\n+ * A default implementation that selects the cache by the type of the given managed instance.\n+ * The name of the cache is determined by {@link ClassMetaData#getDataCacheName() name as specified} by\n+ * the metadata. \n+ * \n+ * @see ClassMetaData#getDataCacheName()\n+ *\n+ */\n+public class DefaultCacheDistributionPolicy implements CacheDistributionPolicy {\n+    public String selectCache(OpenJPAStateManager sm, Object context) {\n+        return sm.getMetaData().getDataCacheName();\n+        \n+    }\n+\n+    public void endConfiguration() {\n+    }\n+\n+    public void setConfiguration(Configuration conf) {\n+    }\n+\n+    public void startConfiguration() {\n+    }\n+}"},{"sha":"d88958002ce63bceeca3f530a8085259e3e7ca3f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/TypeBasedCacheDistributionPolicy.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/TypeBasedCacheDistributionPolicy.java","raw_url":"https://github.com/apache/openjpa/raw/6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/TypeBasedCacheDistributionPolicy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/TypeBasedCacheDistributionPolicy.java?ref=6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42","patch":"@@ -0,0 +1,104 @@\n+package org.apache.openjpa.datacache;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.meta.ClassMetaData;\n+\n+import serp.util.Strings;\n+\n+/**\n+ * A cache distribution policy based on the type of the managed objects.\n+ * <br>\n+ * The policy is configured by specifying list of included or excluded types.\n+ * The lists are specified as fully-qualified persistence class names separated by semicolon.\n+ * <br>\n+ * The policy checks for the given instance by its type whether the class name appears in\n+ * exclusion or inclusion lists. If the class name appears in exclusion list then the\n+ * instance is not cached. Otherwise If the class name appears in inclusion list but not in\n+ * exclusion list, then the instance is cached.\n+ *  \n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class TypeBasedCacheDistributionPolicy extends DefaultCacheDistributionPolicy \n+    implements CacheDistributionPolicy {\n+    private Set<String> _excludedTypes;\n+    private Set<String> _includedTypes;\n+    \n+    \n+    /**\n+     * Gets the excluded types, if configured.\n+     */\n+    public Set<String> getExcludedTypes() {\n+        return _excludedTypes;\n+    }\n+    \n+    /**\n+     * Sets excluded types from a semicolon separated list of type names.\n+     */\n+    public void setExcludedTypes(String types) {\n+        _excludedTypes = parseNames(types);\n+    }\n+\n+    /**\n+     * Gets the included types, if configured.\n+     */\n+    public Set<String> getIncludedTypes() {\n+        return _includedTypes;\n+    }\n+    \n+    /**\n+     * Sets included types from a semicolon separated list of type names.\n+     */\n+    public void setIncludedTypes(String types) {\n+        _includedTypes = parseNames(types);\n+    }\n+    \n+    private Set<String> parseNames(String types) {\n+        if (StringUtils.isEmpty(types))\n+            return Collections.emptySet();\n+        String[] names = Strings.split(types, \";\", 0);\n+        Set<String> set = new HashSet<String>();\n+        set.addAll(Arrays.asList(names));\n+        \n+        return  Collections.unmodifiableSet(set);\n+    }\n+\n+    /**\n+     * Is the given type cacheable by excludeTypes/includeTypes plug-in properties.\n+     *  \n+     * @param meta the given type\n+     * @return TRUE or FALSE if the type has appeared in the plug-in property.\n+     * null otherwise.\n+     */\n+    private Boolean isCacheableByPlugin(ClassMetaData meta) {\n+        String className = meta.getDescribedType().getName();\n+        if (_excludedTypes != null && _excludedTypes.contains(className)) {  \n+            return Boolean.FALSE;\n+        } \n+        if (_includedTypes != null && _includedTypes.contains(className)) {\n+            return Boolean.TRUE;\n+        }\n+        return null;\n+    }\n+    \n+\n+    \n+    \n+    @Override\n+    public String selectCache(OpenJPAStateManager sm, Object context) {\n+        Boolean result = isCacheableByPlugin(sm.getMetaData());\n+        if (result == null) { // this policy does not know, ask the super class\n+            return super.selectCache(sm, context);\n+        } else if (Boolean.FALSE.equals(result)) { // must be excluded\n+            return null;\n+        } \n+        String name = sm.getMetaData().getDataCacheName();\n+        return name == null ? DataCache.NAME_DEFAULT : name;\n+    }\n+}"},{"sha":"c8cc876a176f9fd1039b43dbcda7b3812fce816b","filename":"openjpa-project/src/doc/manual/ref_guide_caching.xml","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42/openjpa-project/src/doc/manual/ref_guide_caching.xml","raw_url":"https://github.com/apache/openjpa/raw/6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42/openjpa-project/src/doc/manual/ref_guide_caching.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_caching.xml?ref=6fa32719b9da7b249d8faaa2f89c1eff8f4a7d42","patch":"@@ -150,10 +150,14 @@ openjpa.RemoteCommitProvider</literal></link> property to <literal>sjvm\n &lt;property name=\"openjpa.RemoteCommitProvider\" value=\"sjvm\"/&gt;\n </programlisting>\n             </example>\n+\n+<section id=\"ref_guide_cache_distribution\">\n+   <title>\"Distributing instanes across cache partitions\"</title>\n             <para>\n+            \n OpenJPA also supports a partitioned cache configuration where the cached\n instances can be distributed across partitions by a application-defined\n-policy. Each partition is a data cache by itself, identified by its name and can\n+policy. Each partition behaves as a data cache by itself, identified by its name and can\n configured individually. The distribution policy \n determines the specific partition that stores the state of a managed instance.\n The default distribution policy distributes the instances by their type\n@@ -169,7 +173,7 @@ as follows:\n                     Partitioned Data Cache\n                 </title>\n <programlisting>\n-&lt;property name=\"openjpa.DataCacheManager\" value=\"DistributionPolicy=org.acme.foo.DistributionPolicy\"/&gt;\n+&lt;property name=\"openjpa.CacheDistributionPolicy\" value=\"org.acme.foo.DistributionPolicy\"/&gt;\n &lt;property name=\"openjpa.DataCache\" value=\"partitioned(PartitionType=concurrent,partitions=\n                 '(name=a,cacheSize=100),(name=b,cacheSize=200)')\"/&gt;\n </programlisting>"}]}

