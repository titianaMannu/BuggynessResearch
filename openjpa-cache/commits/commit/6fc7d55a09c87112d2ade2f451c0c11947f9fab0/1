{"sha":"6fc7d55a09c87112d2ade2f451c0c11947f9fab0","node_id":"MDY6Q29tbWl0MjA2MzY0OjZmYzdkNTVhMDljODcxMTJkMmFkZTJmNDUxYzBjMTE5NDdmOWZhYjA=","commit":{"author":{"name":"Jody Grassel","email":"jgrassel@apache.org","date":"2011-05-06T20:22:23Z"},"committer":{"name":"Jody Grassel","email":"jgrassel@apache.org","date":"2011-05-06T20:22:23Z"},"message":"OPENJPA-1993: Deadlock Potential with XML ORM Processing\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1100363 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a5feea89a599871d6072ca01c4725be5a21314ad","url":"https://api.github.com/repos/apache/openjpa/git/trees/a5feea89a599871d6072ca01c4725be5a21314ad"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6fc7d55a09c87112d2ade2f451c0c11947f9fab0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6fc7d55a09c87112d2ade2f451c0c11947f9fab0","html_url":"https://github.com/apache/openjpa/commit/6fc7d55a09c87112d2ade2f451c0c11947f9fab0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6fc7d55a09c87112d2ade2f451c0c11947f9fab0/comments","author":null,"committer":null,"parents":[{"sha":"c00af8d5e8f94f466d198aae565928a3ccc79cd8","url":"https://api.github.com/repos/apache/openjpa/commits/c00af8d5e8f94f466d198aae565928a3ccc79cd8","html_url":"https://github.com/apache/openjpa/commit/c00af8d5e8f94f466d198aae565928a3ccc79cd8"}],"stats":{"total":119,"additions":91,"deletions":28},"files":[{"sha":"820b4886bb6985c6cd71434f7930fac648ac1194","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/6fc7d55a09c87112d2ade2f451c0c11947f9fab0/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","raw_url":"https://github.com/apache/openjpa/raw/6fc7d55a09c87112d2ade2f451c0c11947f9fab0/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java?ref=6fc7d55a09c87112d2ade2f451c0c11947f9fab0","patch":"@@ -67,6 +67,7 @@\n     private boolean _reloadOnDetach = false;\n     private boolean _ignoreDetachedStateFieldForProxySerialization = false;\n     private boolean _checkDatabaseForCascadePersistToDetachedEntity = false;\n+    private boolean _overrideContextClassloader = true;\n     \n     /**\n      * Whether to require exact identity value types when creating object\n@@ -558,4 +559,22 @@ public boolean getCheckDatabaseForCascadePersistToDetachedEntity(){\n     public void setCheckDatabaseForCascadePersistToDetachedEntity(boolean b){\n         _checkDatabaseForCascadePersistToDetachedEntity = b;\n     }\n+\n+    /**\n+     * Whether to temporally override the thread's Context Classloader when processing\n+     * ORM XML documents to avoid deadlock potential with certain Classloader hierarchy\n+     * configurations.  Defaults to false.\n+     */\n+    public boolean getOverrideContextClassloader() {\n+        return _overrideContextClassloader;\n+    }\n+\n+    /**\n+     * Whether to temporally override the thread's Context Classloader when processing\n+     * ORM XML documents to avoid deadlock potential with certain Classloader hierarchy\n+     * configurations.  Defaults to false.\n+     */\n+    public void setOverrideContextClassloader(boolean overrideContextClassloader) {\n+        _overrideContextClassloader = overrideContextClassloader;\n+    }\n }"},{"sha":"b8469c4f859b663963cd5f5e90c1513f7267de2f","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","status":"modified","additions":62,"deletions":28,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/6fc7d55a09c87112d2ade2f451c0c11947f9fab0/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/6fc7d55a09c87112d2ade2f451c0c11947f9fab0/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java?ref=6fc7d55a09c87112d2ade2f451c0c11947f9fab0","patch":"@@ -107,6 +107,16 @@\n     private int _ignore = Integer.MAX_VALUE;\n \n     private boolean _parsing = false;\n+    \n+    private boolean _overrideContextClassloader = false;\n+    \n+    public boolean getOverrideContextClassloader() {\n+        return _overrideContextClassloader;\n+    }\n+\n+    public void setOverrideContextClassloader(boolean overrideCCL) {\n+        _overrideContextClassloader = overrideCCL;\n+    }\n \n     /*\n      * Whether the parser is currently parsing.\n@@ -366,36 +376,60 @@ protected void parseNewResource(Reader xml, String sourceName)\n         try {\n             setParsing(true);\n             _sourceName = sourceName;\n-            SAXParser parser = XMLFactory.getSAXParser(validating, true);\n-            Object schema = null;\n-            if (validating) {\n-                schema = schemaSource;\n-                if (schema == null && getDocType() != null)\n-                    xml = new DocTypeReader(xml, getDocType());\n-            }\n+            \n+            SAXParser parser = null;\n+            ClassLoader oldLoader = null;\n+            \n+            try {\n+                if (_overrideContextClassloader == true) {\n+                    oldLoader = (ClassLoader) AccessController.doPrivileged(\n+                        J2DoPrivHelper.getContextClassLoaderAction());\n+                    AccessController.doPrivileged(J2DoPrivHelper.setContextClassLoaderAction(\n+                        XMLMetaDataParser.class.getClassLoader()));\n+                }\n+                \n+                parser = XMLFactory.getSAXParser(validating, true);\n+                Object schema = null;\n+                if (validating) {\n+                    schema = schemaSource;\n+                    if (schema == null && getDocType() != null)\n+                        xml = new DocTypeReader(xml, getDocType());\n+                }\n \n-            if (_parseComments || _lh != null)\n-                parser.setProperty\n-                    (\"http://xml.org/sax/properties/lexical-handler\", this);\n-\n-            if (schema != null) {\n-                parser.setProperty\n-                    (\"http://java.sun.com/xml/jaxp/properties/schemaLanguage\",\n-                        \"http://www.w3.org/2001/XMLSchema\");\n-                parser.setProperty\n-                    (\"http://java.sun.com/xml/jaxp/properties/schemaSource\",\n-                        schema);\n-            }\n+                if (_parseComments || _lh != null)\n+                    parser.setProperty\n+                        (\"http://xml.org/sax/properties/lexical-handler\", this);\n+\n+                if (schema != null) {\n+                    parser.setProperty\n+                        (\"http://java.sun.com/xml/jaxp/properties/schemaLanguage\",\n+                            \"http://www.w3.org/2001/XMLSchema\");\n+                    parser.setProperty\n+                        (\"http://java.sun.com/xml/jaxp/properties/schemaSource\",\n+                            schema);\n+                }\n \n-            InputSource is = new InputSource(xml);\n-            if (_systemId && sourceName != null)\n-                is.setSystemId(sourceName);\n-            parser.parse(is, this);\n-            finish();\n-        } catch (SAXException se) {\n-            IOException ioe = new IOException(se.toString());\n-            ioe.initCause(se);\n-            throw ioe;\n+                InputSource is = new InputSource(xml);\n+                if (_systemId && sourceName != null)\n+                    is.setSystemId(sourceName);\n+                parser.parse(is, this);\n+                finish();\n+            } catch (SAXException se) {\n+                IOException ioe = new IOException(se.toString());\n+                ioe.initCause(se);\n+                throw ioe;\n+            } finally {\n+                if (_overrideContextClassloader == true && oldLoader != null) {\n+                    // Restore the old ContextClassloader\n+                    try {\n+                        AccessController.doPrivileged(J2DoPrivHelper.setContextClassLoaderAction(oldLoader));\n+                    } catch (Throwable t) {\n+                        if (_log != null && _log.isTraceEnabled()) {\n+                            _log.trace(_loc.get(\"restore-contextclassloader-failed\"));\n+                        }\n+                    }\n+                }\n+            }\n         } finally {\n             reset();\n         }"},{"sha":"8b1550f0c41c457b522add08b3e228feb89d82e0","filename":"openjpa-lib/src/main/resources/org/apache/openjpa/lib/meta/localizer.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6fc7d55a09c87112d2ade2f451c0c11947f9fab0/openjpa-lib/src/main/resources/org/apache/openjpa/lib/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/6fc7d55a09c87112d2ade2f451c0c11947f9fab0/openjpa-lib/src/main/resources/org/apache/openjpa/lib/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/resources/org/apache/openjpa/lib/meta/localizer.properties?ref=6fc7d55a09c87112d2ade2f451c0c11947f9fab0","patch":"@@ -25,6 +25,8 @@ cant-diff-elems: Unable to differentiate between given package and class \\\n \telements for class arg parsing.  No element can be a complete prefix of \\\n \tanother.\n class-arg: Error extracting class information from \"{0}\".\n+restore-contextclassloader-failed: An error occurred restoring the Thread's \\\n+    context classloader.\n parse-error: An error was encountered while parsing element \"{0}\".  Make sure \\\n \tthe metadata file is correctly formatted.\n no-file: No source file found for \"{0}\"."},{"sha":"38c49139cbdc9c74489ebc163cd3ba88219dca8a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/6fc7d55a09c87112d2ade2f451c0c11947f9fab0/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/6fc7d55a09c87112d2ade2f451c0c11947f9fab0/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=6fc7d55a09c87112d2ade2f451c0c11947f9fab0","patch":"@@ -280,6 +280,14 @@ public void setRepository(MetaDataRepository repos) {\n         if (repos != null\n             && (repos.getValidate() & MetaDataRepository.VALIDATE_RUNTIME) != 0)\n             setParseComments(false);\n+        \n+        if (repos != null) {\n+            // Determine if the Thread Context Classloader needs to be temporally overridden to the Classloader\n+            // that loaded the OpenJPA classes, to avoid a potential deadlock issue with the way Xerces\n+            // handles parsers and classloaders.\n+            this.setOverrideContextClassloader(repos.getConfiguration().getCompatibilityInstance().\n+                getOverrideContextClassloader());\n+        }\n     }\n \n     /**"}]}

