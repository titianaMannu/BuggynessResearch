{"sha":"6fdcebd67367fb1dc9d7d50362bfbce35a0b54ac","node_id":"MDY6Q29tbWl0MjA2MzY0OjZmZGNlYmQ2NzM2N2ZiMWRjOWQ3ZDUwMzYyYmZiY2UzNWEwYjU0YWM=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2011-03-11T20:29:50Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2011-03-11T20:29:50Z"},"message":"OPENJPA-1787 Updated \"new entity\" merge path through AttachManager and BrokerImpl to refrain from firing a pre-persist event before the state of the merged entity is copied to the new entity.  Test cases based upon code provided by Oliver Ringel.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1080751 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ace768e4fda4da8590bec5955e5fa5cbf31c3c9b","url":"https://api.github.com/repos/apache/openjpa/git/trees/ace768e4fda4da8590bec5955e5fa5cbf31c3c9b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/6fdcebd67367fb1dc9d7d50362bfbce35a0b54ac","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/6fdcebd67367fb1dc9d7d50362bfbce35a0b54ac","html_url":"https://github.com/apache/openjpa/commit/6fdcebd67367fb1dc9d7d50362bfbce35a0b54ac","comments_url":"https://api.github.com/repos/apache/openjpa/commits/6fdcebd67367fb1dc9d7d50362bfbce35a0b54ac/comments","author":null,"committer":null,"parents":[{"sha":"2dbbe70692adfb38d05ce040768db02ff65fbc16","url":"https://api.github.com/repos/apache/openjpa/commits/2dbbe70692adfb38d05ce040768db02ff65fbc16","html_url":"https://github.com/apache/openjpa/commit/2dbbe70692adfb38d05ce040768db02ff65fbc16"}],"stats":{"total":252,"additions":246,"deletions":6},"files":[{"sha":"653a557a34962875273e0fd1ef1649efedda5821","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestMerge.java","status":"added","additions":226,"deletions":0,"changes":226,"blob_url":"https://github.com/apache/openjpa/blob/6fdcebd67367fb1dc9d7d50362bfbce35a0b54ac/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestMerge.java","raw_url":"https://github.com/apache/openjpa/raw/6fdcebd67367fb1dc9d7d50362bfbce35a0b54ac/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestMerge.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestMerge.java?ref=6fdcebd67367fb1dc9d7d50362bfbce35a0b54ac","patch":"@@ -0,0 +1,226 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.integration.validation;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.validation.ConstraintViolationException;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.lib.log.Log;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.persistence.test.AbstractPersistenceTestCase;\r\n+\r\n+/**\r\n+ * Tests the Bean Validation support when using the em.merge() \r\n+ * operation.\r\n+ *      \r\n+ * @version $Rev$ $Date$\r\n+ */\r\n+public class TestMerge extends AbstractPersistenceTestCase {\r\n+\r\n+    private static OpenJPAEntityManagerFactorySPI emf = null;\r\n+    \r\n+    @Override\r\n+    public void setUp() throws Exception {\r\n+        super.setUp();\r\n+        emf = (OpenJPAEntityManagerFactorySPI) \r\n+        OpenJPAPersistence.createEntityManagerFactory(\r\n+                \"ConstraintPU\",\r\n+                \"org/apache/openjpa/integration/validation/persistence.xml\");\r\n+    }\r\n+    \r\n+    @Override\r\n+    public void tearDown() throws Exception {\r\n+        closeEMF(emf);\r\n+        emf = null;\r\n+        super.tearDown();\r\n+    }\r\n+\r\n+    /**\r\n+     * Verifies constraint validation occurs on a \"new\" merged entity only after \r\n+     * the state of the persistent entity is properly set. \r\n+     */\r\n+    public void testMergeNew() {\r\n+        getLog().trace(\"testMergeNew() started\");\r\n+        \r\n+        // Part 1 - Create and persist a valid entity\r\n+        // create EM from default EMF\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        assertNotNull(em);\r\n+        try {\r\n+            // verify Validation Mode\r\n+            @SuppressWarnings(\"deprecation\")\r\n+            OpenJPAConfiguration conf = em.getConfiguration();\r\n+            assertNotNull(conf);\r\n+            assertTrue(\"ValidationMode\",\r\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\r\n+\r\n+            Person p = createPerson(em);\r\n+            em.getTransaction().begin();\r\n+            p = em.merge(p);\r\n+            em.getTransaction().commit();\r\n+            getLog().trace(\"testMergeNew() Part 1 of 2 passed\");\r\n+        } catch (Exception e) {\r\n+            // unexpected\r\n+            getLog().trace(\"testMergeNew() Part 1 of 2 failed\");\r\n+            fail(\"Caught unexpected exception = \" + e);\r\n+        } finally {\r\n+            closeEM(em);\r\n+        }\r\n+        \r\n+        // Part 2 - Verify that merge throws a CVE when a constraint is not met.\r\n+        em = emf.createEntityManager();\r\n+        assertNotNull(em);        \r\n+        try {\r\n+            Person p = createPerson(em);\r\n+            em.getTransaction().begin();\r\n+            p.setLastName(null);  // Force a CVE\r\n+            p = em.merge(p);\r\n+            getLog().trace(\"testMergeNew() Part 2 of 2 failed\");\r\n+            fail(\"Expected a ConstraintViolationException\");\r\n+        } catch (ConstraintViolationException e) {\r\n+            // expected\r\n+            getLog().trace(\"Caught expected ConstraintViolationException = \" + e);\r\n+            getLog().trace(\"testMergeNew() Part 2 of 2 passed\");\r\n+        } finally {\r\n+            closeEM(em);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Verifies constraint validation occurs on a \"new\" merged entity only after \r\n+     * the state of the persistent entity is properly set. \r\n+     */\r\n+    public void testMergeExisting() {\r\n+        getLog().trace(\"testMergeExisting() started\");\r\n+        \r\n+        // Part 1 - Create and persist a valid entity\r\n+        // create EM from default EMF\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        assertNotNull(em);\r\n+        try {\r\n+            // verify Validation Mode\r\n+            @SuppressWarnings(\"deprecation\")\r\n+            OpenJPAConfiguration conf = em.getConfiguration();\r\n+            assertNotNull(conf);\r\n+            assertTrue(\"ValidationMode\",\r\n+                conf.getValidationMode().equalsIgnoreCase(\"AUTO\"));\r\n+\r\n+            // Create and persist a new entity\r\n+            Person p = createPerson(em);\r\n+            em.getTransaction().begin();\r\n+            em.persist(p);\r\n+            em.getTransaction().commit();\r\n+            em.clear();\r\n+\r\n+            // find the entity\r\n+            p = em.find(Person.class, p.getId());\r\n+            \r\n+            // modify the entity and merge\r\n+            em.getTransaction().begin();\r\n+            p.setFirstName(\"NewFirst\");\r\n+            // merge should not throw a CVE\r\n+            p = em.merge(p);\r\n+            em.getTransaction().commit();\r\n+            em.clear();\r\n+            p = em.find(Person.class, p.getId());\r\n+            assertEquals(\"NewFirst\", p.getFirstName());\r\n+            getLog().trace(\"testMergeExisting() Part 1 of 2 passed\");\r\n+        } catch (Exception e) {\r\n+            // unexpected\r\n+            getLog().trace(\"testMergeExisting() Part 1 of 2 failed\");\r\n+            fail(\"Caught unexpected exception = \" + e);\r\n+        } finally {\r\n+            closeEM(em);\r\n+        }\r\n+        \r\n+        // Part 2 - Verify that merge throws a CVE when a constraint is not met.\r\n+        em = emf.createEntityManager();\r\n+        assertNotNull(em);        \r\n+        try {\r\n+\r\n+            // Create and persist a new entity\r\n+            Person p = createPerson(em);\r\n+            em.getTransaction().begin();\r\n+            em.persist(p);\r\n+            em.getTransaction().commit();\r\n+            em.clear();\r\n+\r\n+            // find the entity\r\n+            p = em.find(Person.class, p.getId());\r\n+            // detach the entity\r\n+            em.detach(p);\r\n+            assertFalse(em.contains(p));\r\n+\r\n+            // Set name to an invalid value (contains a space) to force a CVE upon merge+update\r\n+            p.setFirstName(\"First Name\");\r\n+            em.getTransaction().begin();\r\n+            try {\r\n+                p = em.merge(p);\r\n+            } catch (Throwable t) {\r\n+                fail(\"Did not expect a CVE upon merge.\");\r\n+            }\r\n+            // Commit should throw a CVE\r\n+            em.getTransaction().commit();\r\n+            getLog().trace(\"testMergeExisting() Part 2 of 2 failed\");\r\n+            fail(\"Expected a ConstraintViolationException\");\r\n+        } catch (ConstraintViolationException e) {\r\n+            // expected\r\n+            getLog().trace(\"Caught expected ConstraintViolationException = \" + e);\r\n+            getLog().trace(\"testMergeExisting() Part 2 of 2 passed\");\r\n+        } finally {\r\n+            closeEM(em);\r\n+        }\r\n+    }\r\n+    \r\n+    \r\n+    private Person createPerson(EntityManager em) {\r\n+        Person p = new Person();\r\n+        p.setFirstName(\"First\");\r\n+        p.setLastName(\"Last\");\r\n+        p.setHomeAddress(createAddress(em));\r\n+        return p;\r\n+    }\r\n+\r\n+    private IAddress createAddress(EntityManager em) {\r\n+        Address addr = new Address();\r\n+        addr.setCity(\"City\");\r\n+        addr.setPhoneNumber(\"555-555-5555\");\r\n+        addr.setPostalCode(\"55555\");\r\n+        addr.setState(\"ST\");\r\n+        addr.setStreetAddress(\"Some Street\");\r\n+        if (!em.getTransaction().isActive()) {\r\n+            em.getTransaction().begin();\r\n+        }\r\n+        em.persist(addr);\r\n+        em.getTransaction().commit();\r\n+        return addr;\r\n+    }\r\n+\r\n+    /**\r\n+     * Internal convenience method for getting the OpenJPA logger\r\n+     * \r\n+     * @return\r\n+     */\r\n+    private Log getLog() {\r\n+        return emf.getConfiguration().getLog(\"Tests\");\r\n+    }\r\n+}\r"},{"sha":"6f32be5c26b3996aa670804e5bb3664e38462151","filename":"openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/persistence.xml","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/6fdcebd67367fb1dc9d7d50362bfbce35a0b54ac/openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/6fdcebd67367fb1dc9d7d50362bfbce35a0b54ac/openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/persistence.xml?ref=6fdcebd67367fb1dc9d7d50362bfbce35a0b54ac","patch":"@@ -153,7 +153,8 @@\n         <class>org.apache.openjpa.integration.validation.ConstraintPattern</class>\n         <class>org.apache.openjpa.integration.validation.Person</class>\n         <class>org.apache.openjpa.integration.validation.Address</class> \n-        <class>org.apache.openjpa.integration.validation.Book</class>       \n+        <class>org.apache.openjpa.integration.validation.Book</class>\n+        <class>org.apache.openjpa.integration.validation.Publisher</class>\n         <validation-mode>AUTO</validation-mode>\n         <properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\" "},{"sha":"e7655a22ea560a423b7858375826c2b110af45d8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/6fdcebd67367fb1dc9d7d50362bfbce35a0b54ac/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/6fdcebd67367fb1dc9d7d50362bfbce35a0b54ac/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java?ref=6fdcebd67367fb1dc9d7d50362bfbce35a0b54ac","patch":"@@ -93,7 +93,7 @@ else if (appId == null)\n             newInstance = pc.pcNewInstance(null, appId, false);\n \n         return (StateManagerImpl) manager.getBroker().persist\n-            (newInstance, appId, explicit, manager.getBehavior());\n+            (newInstance, appId, explicit, manager.getBehavior(), !manager.getCopyNew());\n     }\n \n     /**"},{"sha":"25497287cfef31dac3d0a9acf4d7d297d46d74b0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":17,"deletions":4,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/6fdcebd67367fb1dc9d7d50362bfbce35a0b54ac/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/6fdcebd67367fb1dc9d7d50362bfbce35a0b54ac/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=6fdcebd67367fb1dc9d7d50362bfbce35a0b54ac","patch":"@@ -2468,7 +2468,7 @@ public void persistAll(Collection objs, boolean explicit,\n                 try {\n                 \tif(obj == null)\n                 \t\tcontinue;\n-                    persistInternal(obj, null, explicit, call);\n+                    persistInternal(obj, null, explicit, call, true);\n                 } catch (UserException ue) {\n                     exceps = add(exceps, ue);\n                 }\n@@ -2534,14 +2534,24 @@ public void persist(Object obj, boolean explicit, OpCallbacks call) {\n      */\n     public OpenJPAStateManager persist(Object obj, Object id, boolean explicit,\n         OpCallbacks call) {\n+        return persist(obj, id, explicit, call, true);\n+    }\n+\n+    /**\n+     * Persist the given object.  Indicate whether this was an explicit persist\n+     * (PNEW) or a provisonal persist (PNEWPROVISIONAL).\n+     * See {@link Broker} for details on this method.\n+     */\n+    public OpenJPAStateManager persist(Object obj, Object id, boolean explicit,\n+        OpCallbacks call, boolean fireEvent) {\n         if (obj == null)\n             return null;\n \n         beginOperation(true);\n         try {\n             assertWriteOperation();\n \n-            return persistInternal(obj, id, explicit, call);\n+            return persistInternal(obj, id, explicit, call, fireEvent);\n         } catch (OpenJPAException ke) {\n             throw ke;\n         } catch (RuntimeException re) {\n@@ -2551,7 +2561,8 @@ public OpenJPAStateManager persist(Object obj, Object id, boolean explicit,\n         }\n     }\n \n-    private OpenJPAStateManager persistInternal(Object obj, Object id, boolean explicit, OpCallbacks call) {\n+    private OpenJPAStateManager persistInternal(Object obj, Object id, boolean explicit, OpCallbacks call, \n+        boolean fireEvent) {\n         StateManagerImpl sm = getStateManagerImpl(obj, true);\n         if (!_operating.add(obj)) {\n             return sm;\n@@ -2603,7 +2614,9 @@ private OpenJPAStateManager persistInternal(Object obj, Object id, boolean expli\n         }\n \n         ClassMetaData meta = _repo.getMetaData(obj.getClass(), _loader, true);\n-        fireLifecycleEvent(obj, null, meta, LifecycleEvent.BEFORE_PERSIST);\n+        if (fireEvent) {\n+            fireLifecycleEvent(obj, null, meta, LifecycleEvent.BEFORE_PERSIST);\n+        }\n \n         // create id for instance\n         if (id == null) {"}]}

