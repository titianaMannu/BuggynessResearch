{"sha":"702a9c66162c1a3e48f90a5c225c56ac71c2f9e8","node_id":"MDY6Q29tbWl0MjA2MzY0OjcwMmE5YzY2MTYyYzFhM2U0OGY5MGE1YzIyNWM1NmFjNzFjMmY5ZTg=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-08T20:45:07Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-08T20:45:07Z"},"message":"fix test case problem for MySQL (microseconds are not stored in the MySQL Temporal column)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@812689 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ac47453e12a500e8196219f29c71b333ed5f8792","url":"https://api.github.com/repos/apache/openjpa/git/trees/ac47453e12a500e8196219f29c71b333ed5f8792"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/702a9c66162c1a3e48f90a5c225c56ac71c2f9e8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/702a9c66162c1a3e48f90a5c225c56ac71c2f9e8","html_url":"https://github.com/apache/openjpa/commit/702a9c66162c1a3e48f90a5c225c56ac71c2f9e8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/702a9c66162c1a3e48f90a5c225c56ac71c2f9e8/comments","author":null,"committer":null,"parents":[{"sha":"45f79b59afd5f6becc77ec00be47f30de99316a7","url":"https://api.github.com/repos/apache/openjpa/commits/45f79b59afd5f6becc77ec00be47f30de99316a7","html_url":"https://github.com/apache/openjpa/commit/45f79b59afd5f6becc77ec00be47f30de99316a7"}],"stats":{"total":48,"additions":38,"deletions":10},"files":[{"sha":"e75aa0baeecc51fe0fcc7a032976dfd5f1fdbe0f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/Employee.java","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/702a9c66162c1a3e48f90a5c225c56ac71c2f9e8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/702a9c66162c1a3e48f90a5c225c56ac71c2f9e8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/Employee.java?ref=702a9c66162c1a3e48f90a5c225c56ac71c2f9e8","patch":"@@ -78,4 +78,26 @@ public boolean equals(Object o) {\n         }\n         return true;\n     }    \n+\n+    /*\n+     * The following change is for the comparison of Date object. In MySQL, \n+     * \"microseconds cannot be stored into a column of any temporal data type. \n+     * Any microseconds part is discarded. \" (http://dev.mysql.com/doc/refman/5.1/en/datetime.html). \n+     * As a result, when the value retrieved from the database will be different from the \n+     * original value in the memory for the loss of microsecond. The fix is to call toString \n+     * (which will strip the microseconds0 on the Date object and compare the String values.\n+     */\n+    \n+    public static Employee findEmpl(Map<EmployeePK, Employee> map, EmployeePK key) {\n+        String name = key.getName();\n+        String bDateStr = key.getBDay().toString();\n+        Set<EmployeePK> keys = map.keySet();\n+        for (EmployeePK thisKey : keys) {\n+           if (name.equals(thisKey.getName()) && \n+               bDateStr.equals(thisKey.getBDay().toString())) {\n+               return map.get(thisKey);\n+           }\n+        }\n+        return null;\n+    }\n }"},{"sha":"aed9bdd40fcf9ebbfd697b4357bc4864e5c61a55","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/EmployeePK.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/702a9c66162c1a3e48f90a5c225c56ac71c2f9e8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/EmployeePK.java","raw_url":"https://github.com/apache/openjpa/raw/702a9c66162c1a3e48f90a5c225c56ac71c2f9e8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/EmployeePK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/EmployeePK.java?ref=702a9c66162c1a3e48f90a5c225c56ac71c2f9e8","patch":"@@ -49,7 +49,7 @@ public boolean equals(Object o) {\n             return false;\n         EmployeePK pk = (EmployeePK) o;\n         if (pk.name.equals(name) &&\n-            pk.bDay.equals(bDay))\n+            pk.bDay.toString().equals(bDay.toString()))\n             return true;    \n         return false;\n     }"},{"sha":"e69dedf507a441c9aa12d77e475f38d4227323f1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/PhoneNumber.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/702a9c66162c1a3e48f90a5c225c56ac71c2f9e8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/PhoneNumber.java","raw_url":"https://github.com/apache/openjpa/raw/702a9c66162c1a3e48f90a5c225c56ac71c2f9e8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/PhoneNumber.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/PhoneNumber.java?ref=702a9c66162c1a3e48f90a5c225c56ac71c2f9e8","patch":"@@ -70,11 +70,15 @@ public boolean equals(Object o) {\n             (Collection<Map.Entry<EmployeePK, Employee>>) emps.entrySet();\n         for (Map.Entry<EmployeePK, Employee> entry : entries) {\n             EmployeePK key = entry.getKey();\n-            Employee e0 = map.get(key);\n-            Employee e = emps.get(key);\n+            Employee e0 = Employee.findEmpl(map, key);\n+            Employee e = Employee.findEmpl(emps, key);\n+            if ((e == null && e0 != null) || (e != null && e0 == null))\n+                return false;\n             if (!e.getEmpPK().equals(e0.getEmpPK()))\n                 return false;\n         }\n         return true;\n     }    \n+    \n+    \n }"},{"sha":"63641ff1a731cbcf852664d39e052a935b77f864","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/TestMany2ManyMapEx10.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/702a9c66162c1a3e48f90a5c225c56ac71c2f9e8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/TestMany2ManyMapEx10.java","raw_url":"https://github.com/apache/openjpa/raw/702a9c66162c1a3e48f90a5c225c56ac71c2f9e8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/TestMany2ManyMapEx10.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/TestMany2ManyMapEx10.java?ref=702a9c66162c1a3e48f90a5c225c56ac71c2f9e8","patch":"@@ -46,8 +46,8 @@\n     public List<EmployeePK> empPKs = new ArrayList<EmployeePK>();\n     public List<PhonePK> phonePKs = new ArrayList<PhonePK>();\n \n-    public Map<EmployeePK, Employee> empMap = \n-        new HashMap<EmployeePK, Employee>();\n+    public Map<String, Employee> empMap = \n+        new HashMap<String, Employee>();\n     public Map<PhonePK, PhoneNumber> phoneMap = \n         new HashMap<PhonePK, PhoneNumber>();\n \n@@ -190,7 +190,7 @@ public void createObj() {\n         EntityTransaction tran = em.getTransaction();\n         for (int i = 0; i < numEmployees; i++) {\n             Employee e = createEmployee(em, empId++);\n-            empMap.put(e.getEmpPK(), e);\n+            empMap.put(e.getEmpPK().getName(), e);\n         }\n         tran.begin();\n         em.flush();\n@@ -200,7 +200,8 @@ public void createObj() {\n \n     public Employee createEmployee(EntityManager em, int id) {\n         Employee e = new Employee();\n-        EmployeePK empPK = new EmployeePK(\"e\" + id, new Date());\n+        Date bDay = new Date(System.currentTimeMillis() - 1000000);\n+        EmployeePK empPK = new EmployeePK(\"e\" + id, bDay);\n         empPKs.add(empPK);\n         e.setEmpPK(empPK);\n         e.setSalary(1000);\n@@ -264,7 +265,7 @@ public void queryEmployee() throws Exception {\n \n     public void assertEmployee(Employee e) throws Exception {\n         EmployeePK empPK = e.getEmpPK();\n-        Employee e0 = empMap.get(empPK);\n+        Employee e0 = empMap.get(empPK.getName());\n         Map<PhonePK, PhoneNumber> phones = e.getPhoneNumbers();\n         Map<PhonePK, PhoneNumber> phones0 = e0.getPhoneNumbers();\n         Assert.assertEquals(phones0.size(), phones.size());\n@@ -300,7 +301,8 @@ public void checkEmpMap(Map<EmployeePK, Employee> es0,\n         for (Map.Entry<EmployeePK, Employee> entry0 : entrySets0) {\n             EmployeePK key0 = entry0.getKey();\n             Employee e0 = entry0.getValue();\n-            Employee e = es.get(key0);\n+            //Employee e = es.get(key0);\n+            Employee e = Employee.findEmpl(es, key0);\n             if (!e0.equals(e))\n                 throw new Exception(\"Assertion failure\");\n         }"},{"sha":"e4b2ee16538466032210e267fe619ee15c2f98e8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestMultipleEntityProjection.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/702a9c66162c1a3e48f90a5c225c56ac71c2f9e8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestMultipleEntityProjection.java","raw_url":"https://github.com/apache/openjpa/raw/702a9c66162c1a3e48f90a5c225c56ac71c2f9e8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestMultipleEntityProjection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestMultipleEntityProjection.java?ref=702a9c66162c1a3e48f90a5c225c56ac71c2f9e8","patch":"@@ -85,7 +85,7 @@ void createData() {\n \t\t\t\t} catch (ParseException e) {\n \t\t\t\t\tmag.setDatePublished(null);\n \t\t\t\t}\n-                mag.setTsPublished(new Timestamp(System.currentTimeMillis()));\n+                mag.setTsPublished(new Timestamp(System.currentTimeMillis() - 100000));\n \t\t\t\t\n \t\t\t\tem.persist(pub);\n \t\t\t}"}]}

