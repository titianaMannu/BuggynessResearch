{"sha":"70518a3685fd93cb67e8591f4f48e2545c005bbd","node_id":"MDY6Q29tbWl0MjA2MzY0OjcwNTE4YTM2ODVmZDkzY2I2N2U4NTkxZjRmNDhlMjU0NWMwMDViYmQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-08T16:38:20Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-12-08T16:38:20Z"},"message":"Print class loader when metadata processing fails\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@888476 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1e986f5d92b8a5ec3370c154b36d19644a0d7e75","url":"https://api.github.com/repos/apache/openjpa/git/trees/1e986f5d92b8a5ec3370c154b36d19644a0d7e75"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/70518a3685fd93cb67e8591f4f48e2545c005bbd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/70518a3685fd93cb67e8591f4f48e2545c005bbd","html_url":"https://github.com/apache/openjpa/commit/70518a3685fd93cb67e8591f4f48e2545c005bbd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/70518a3685fd93cb67e8591f4f48e2545c005bbd/comments","author":null,"committer":null,"parents":[{"sha":"89fe979f492fbe2c2be57b6d899e2f53f736dafa","url":"https://api.github.com/repos/apache/openjpa/commits/89fe979f492fbe2c2be57b6d899e2f53f736dafa","html_url":"https://github.com/apache/openjpa/commit/89fe979f492fbe2c2be57b6d899e2f53f736dafa"}],"stats":{"total":19,"additions":12,"deletions":7},"files":[{"sha":"5f1445202b2f1c7af47ea50e70ecc2f26a38440e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":11,"deletions":6,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/70518a3685fd93cb67e8591f4f48e2545c005bbd/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/70518a3685fd93cb67e8591f4f48e2545c005bbd/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=70518a3685fd93cb67e8591f4f48e2545c005bbd","patch":"@@ -401,7 +401,7 @@ public ClassMetaData getMetaData(Class cls, ClassLoader envLoader, boolean mustE\n \n             // if cls is a generated interface, use the user interface\n             // to locate metadata\n-            if (cls != null && _implGen.isImplType(cls))\n+            if (cls != null && _implGen != null && _implGen.isImplType(cls))\n                 cls = _implGen.toManagedInterface(cls);\n \n             ClassMetaData meta = getMetaDataInternal(cls, envLoader);\n@@ -1473,9 +1473,9 @@ public void clear() {\n         } catch (Exception e) {\n             if ((_validate & VALIDATE_RUNTIME) != 0) {\n                 if (_log.isWarnEnabled())\n-                    _log.warn(_loc.get(\"bad-discover-class\", name));\n+                    _log.warn(_loc.get(\"bad-discover-class\", name, loader));\n             } else if (_log.isInfoEnabled())\n-                _log.info(_loc.get(\"bad-discover-class\", name));\n+                _log.info(_loc.get(\"bad-discover-class\", name, loader));\n             if (_log.isTraceEnabled())\n                 _log.trace(e);\n         } catch (NoSuchMethodError nsme) {\n@@ -1487,9 +1487,9 @@ public void clear() {\n             // probably just means that the class is not yet enhanced.\n             if ((_validate & VALIDATE_RUNTIME) != 0) {\n                 if (_log.isWarnEnabled())\n-                    _log.warn(_loc.get(\"bad-discover-class\", name));\n+                    _log.warn(_loc.get(\"bad-discover-class\", name, loader));\n             } else if (_log.isInfoEnabled())\n-                _log.info(_loc.get(\"bad-discover-class\", name));\n+                _log.info(_loc.get(\"bad-discover-class\", name, loader));\n             if (_log.isTraceEnabled())\n                 _log.trace(nsme);\n         }\n@@ -1657,9 +1657,14 @@ private void processRegisteredClass(Class<?> cls) {\n      * \n      */\n     void registerAlias(Class<?> cls) {\n+        registerAlias(PCRegistry.getTypeAlias(cls), cls);\n+    }\n+    \n+    public void registerAlias(String alias, Class<?> cls) {\n+        if (alias == null)\n+            return;\n         try {\n             lock();\n-            String alias = PCRegistry.getTypeAlias(cls);\n             if (alias != null) {\n                 List<Class<?>> classes = _aliases.get(alias);\n                 if (classes == null)"},{"sha":"bdc362abbd1ceb7878a6b4eff418a4ad0a0fc7c4","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/70518a3685fd93cb67e8591f4f48e2545c005bbd/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/70518a3685fd93cb67e8591f4f48e2545c005bbd/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties?ref=70518a3685fd93cb67e8591f4f48e2545c005bbd","patch":"@@ -54,7 +54,7 @@ declare-non-interface: Cannot declare type \"{0}\" on \"{1}\" as it is \\\n unmanaged-sup-field: Superclass field \"{0}\" is mapped in the metadata for \\\n \tsubclass \"{1}\", but is not a persistent field.\n bad-discover-class: The class \"{0}\" listed in the openjpa.MetaDataFactory \\\n-\tconfiguration property could not be loaded; ignoring.\n+\tconfiguration property could not be loaded by {1}; ignoring.\n bad-lrs-concrete: Large result set fields must be of type java.util.Collection \\\n \tor java.util.Map.  No concrete classes or other interfaces are allowed. \\\n \tRemove the \"lrs\" extension from field \"{0}\" or change it to one of \\"}]}

