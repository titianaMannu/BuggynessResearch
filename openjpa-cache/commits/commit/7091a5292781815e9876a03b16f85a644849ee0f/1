{"sha":"7091a5292781815e9876a03b16f85a644849ee0f","node_id":"MDY6Q29tbWl0MjA2MzY0OjcwOTFhNTI5Mjc4MTgxNWU5ODc2YTAzYjE2Zjg1YTY0NDg0OWVlMGY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-26T17:23:33Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-26T17:23:33Z"},"message":"OPENJPA-1076 Testcases for PersistenceProviderResolver contributed by Dianne Richards.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@903328 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0f9782f6935833b0628c39c11ce99a54e1caac6b","url":"https://api.github.com/repos/apache/openjpa/git/trees/0f9782f6935833b0628c39c11ce99a54e1caac6b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7091a5292781815e9876a03b16f85a644849ee0f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7091a5292781815e9876a03b16f85a644849ee0f","html_url":"https://github.com/apache/openjpa/commit/7091a5292781815e9876a03b16f85a644849ee0f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7091a5292781815e9876a03b16f85a644849ee0f/comments","author":null,"committer":null,"parents":[{"sha":"f25dda05b5fe59f2478755f49b4772461c24a6af","url":"https://api.github.com/repos/apache/openjpa/commits/f25dda05b5fe59f2478755f49b4772461c24a6af","html_url":"https://github.com/apache/openjpa/commit/f25dda05b5fe59f2478755f49b4772461c24a6af"}],"stats":{"total":356,"additions":356,"deletions":0},"files":[{"sha":"99e97c3679ce15eef896504f09b2247baea12f46","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/DummyPersistenceProviderResolver.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/7091a5292781815e9876a03b16f85a644849ee0f/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/DummyPersistenceProviderResolver.java","raw_url":"https://github.com/apache/openjpa/raw/7091a5292781815e9876a03b16f85a644849ee0f/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/DummyPersistenceProviderResolver.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/DummyPersistenceProviderResolver.java?ref=7091a5292781815e9876a03b16f85a644849ee0f","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.persistence.provider;\n+\n+import java.util.List;\n+\n+import javax.persistence.spi.PersistenceProvider;\n+import javax.persistence.spi.PersistenceProviderResolver;\n+\n+public class DummyPersistenceProviderResolver implements\n+    PersistenceProviderResolver {\n+\n+    public void clearCachedProviders() {\n+    }\n+\n+    public List<PersistenceProvider> getPersistenceProviders() {\n+        return null;\n+    }\n+\n+}"},{"sha":"dd71fdddd8e43c0eb260c9814fd1373fd4057793","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/DummyProvider1.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/7091a5292781815e9876a03b16f85a644849ee0f/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/DummyProvider1.java","raw_url":"https://github.com/apache/openjpa/raw/7091a5292781815e9876a03b16f85a644849ee0f/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/DummyProvider1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/DummyProvider1.java?ref=7091a5292781815e9876a03b16f85a644849ee0f","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.persistence.provider;\n+\n+import java.util.Map;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.spi.PersistenceProvider;\n+import javax.persistence.spi.PersistenceUnitInfo;\n+import javax.persistence.spi.ProviderUtil;\n+\n+public class DummyProvider1 implements PersistenceProvider {\n+\n+    public EntityManagerFactory createContainerEntityManagerFactory(\n+        PersistenceUnitInfo persistenceunitinfo, Map map) {\n+        return null;\n+    }\n+\n+    public EntityManagerFactory createEntityManagerFactory(String s, Map map) {\n+        return null;\n+    }\n+\n+    public ProviderUtil getProviderUtil() {\n+        return null;\n+    }\n+\n+}"},{"sha":"3e2daf42de66a183c3e6a2484cf04bd444934e23","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/DummyProvider2.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/7091a5292781815e9876a03b16f85a644849ee0f/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/DummyProvider2.java","raw_url":"https://github.com/apache/openjpa/raw/7091a5292781815e9876a03b16f85a644849ee0f/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/DummyProvider2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/DummyProvider2.java?ref=7091a5292781815e9876a03b16f85a644849ee0f","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.persistence.provider;\n+\n+import java.util.Map;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.spi.PersistenceProvider;\n+import javax.persistence.spi.PersistenceUnitInfo;\n+import javax.persistence.spi.ProviderUtil;\n+\n+public class DummyProvider2 implements PersistenceProvider {\n+\n+    public EntityManagerFactory createContainerEntityManagerFactory(\n+        PersistenceUnitInfo persistenceunitinfo, Map map) {\n+        return null;\n+    }\n+\n+    public EntityManagerFactory createEntityManagerFactory(String s, Map map) {\n+        return null;\n+    }\n+\n+    public ProviderUtil getProviderUtil() {\n+        return null;\n+    }\n+\n+}"},{"sha":"b7d815784f7313f967ad94911d42652b1ab7ea19","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/TestPersistenceProviderResolver.java","status":"added","additions":234,"deletions":0,"changes":234,"blob_url":"https://github.com/apache/openjpa/blob/7091a5292781815e9876a03b16f85a644849ee0f/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/TestPersistenceProviderResolver.java","raw_url":"https://github.com/apache/openjpa/raw/7091a5292781815e9876a03b16f85a644849ee0f/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/TestPersistenceProviderResolver.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/persistence/provider/TestPersistenceProviderResolver.java?ref=7091a5292781815e9876a03b16f85a644849ee0f","patch":"@@ -0,0 +1,234 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.persistence.provider;\n+\n+import java.io.BufferedInputStream;\n+import java.io.BufferedOutputStream;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.security.AccessController;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarOutputStream;\n+\n+import javax.persistence.spi.PersistenceProvider;\n+import javax.persistence.spi.PersistenceProviderResolver;\n+import javax.persistence.spi.PersistenceProviderResolverHolder;\n+\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+\n+import junit.framework.TestCase;\n+\n+public class TestPersistenceProviderResolver extends TestCase {\n+    File persistenceProviderFile;\n+    File targetJar1;\n+    File targetJar2;\n+    URL classesDirUrl;\n+    String currentDir;\n+    String openjpaProvider = \"org.apache.openjpa.persistence.PersistenceProviderImpl\";\n+    String dummyProvider1 = \"org.apache.openjpa.integration.persistence.provider.DummyProvider1\";\n+    String dummyProvider2 = \"org.apache.openjpa.integration.persistence.provider.DummyProvider2\";\n+    DummyPersistenceProviderResolver dummyResolver = new DummyPersistenceProviderResolver();\n+    \n+    ClassLoader originalLoader = null;\n+    TempUrlLoader tempLoader = null;\n+    \n+    public void setUp() throws Exception {\n+        super.setUp();\n+        \n+        currentDir = System.getProperty(\"user.dir\");\n+        \n+        targetJar1 = new File(currentDir + File.separator + \"target\" + \n+            File.separator + \n+            \"TestPersistenceProviderResolver1.jar\");\n+        targetJar2 = new File(currentDir + File.separator + \"target\" + \n+            File.separator + \n+            \"TestPersistenceProviderResolver2.jar\");\n+        \n+        deleteTargetJars();\n+        \n+        File classesDir = new File(currentDir + File.separator + \"target\" +\n+            File.separator + \"test-classes\" + File.separator);\n+        classesDirUrl = classesDir.toURI().toURL();\n+        \n+        originalLoader = (URLClassLoader)Thread.currentThread().getContextClassLoader();\n+    }\n+    \n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+        // Restore the original classloader, in case there was an exception\n+        Thread.currentThread().setContextClassLoader(originalLoader);\n+    }\n+    \n+    public void testDefault() {\n+        List<String> providerNames = new LinkedList<String>();\n+        providerNames.add(openjpaProvider);\n+        checkProviders(providerNames);\n+    }\n+    \n+    \n+    public void testDefaultMultipleJars() throws Exception {\n+        String[] contents = new String[]{dummyProvider1};\n+        buildFile(\"testPersistenceProviderResolver1\", contents);\n+        buildTargetJar(targetJar1);\n+        tempLoader = new TempUrlLoader(new URL[]{targetJar1.toURI().toURL(), classesDirUrl}\n+            ,originalLoader);\n+        AccessController.doPrivileged(J2DoPrivHelper\n+            .setContextClassLoaderAction(tempLoader));\n+        \n+        List<String> providerNames = new LinkedList<String>();\n+        providerNames.add(openjpaProvider);\n+        providerNames.add(dummyProvider1);\n+        checkProviders(providerNames);\n+        \n+        AccessController.doPrivileged(J2DoPrivHelper\n+            .setContextClassLoaderAction(originalLoader));\n+    }\n+    \n+    public void testDefaultMultipleProviders() throws Exception {\n+        String[] contents = new String[]{dummyProvider1, dummyProvider2};\n+        buildFile(\"testPersistenceProviderResolver2\", contents);\n+        buildTargetJar(targetJar2);\n+        tempLoader = new TempUrlLoader(new URL[]{targetJar2.toURI().toURL(), classesDirUrl}\n+            ,originalLoader); \n+        \n+        AccessController.doPrivileged(J2DoPrivHelper\n+            .setContextClassLoaderAction(tempLoader));\n+        \n+        List<String> providerNames = new LinkedList<String>();\n+        providerNames.add(openjpaProvider);\n+        providerNames.add(dummyProvider1);\n+        providerNames.add(dummyProvider2);\n+        checkProviders(providerNames);\n+        \n+        \n+        AccessController.doPrivileged(J2DoPrivHelper\n+            .setContextClassLoaderAction(originalLoader));\n+    }\n+    \n+    public void testClearCachedProviders() {\n+        PersistenceProviderResolver resolver = \n+            PersistenceProviderResolverHolder.getPersistenceProviderResolver();\n+        List<PersistenceProvider> providers = resolver.getPersistenceProviders();\n+        assertNotNull(providers);\n+        resolver.clearCachedProviders();\n+        \n+        List<String> providerNames = new LinkedList<String>();\n+        providerNames.add(openjpaProvider);\n+        checkProviders(providerNames);\n+    }\n+    \n+    public void testNonDefaultResolver() {\n+        PersistenceProviderResolver originalResolver =\n+            PersistenceProviderResolverHolder.getPersistenceProviderResolver();\n+        PersistenceProviderResolverHolder.setPersistenceProviderResolver(dummyResolver);\n+        PersistenceProviderResolver retrievedResolver = \n+            PersistenceProviderResolverHolder.getPersistenceProviderResolver();\n+        assertTrue(retrievedResolver instanceof DummyPersistenceProviderResolver);\n+        \n+        PersistenceProviderResolverHolder.setPersistenceProviderResolver(originalResolver);\n+    }\n+    \n+    \n+    private void deleteTargetJars() {\n+        if (targetJar1.exists()) {\n+            targetJar1.delete();\n+        }\n+        if (targetJar2.exists()) {\n+            targetJar2.delete();\n+        }\n+    }\n+    \n+    private void buildFile(String dir, String[] contents) throws Exception {\n+        File servicesDir = new File(currentDir + File.separator + \"target\" + File.separator\n+            + \"test-classes\" + File.separator + dir + File.separator + \"META-INF\" + File.separator\n+            + \"services\");\n+        servicesDir.mkdirs();\n+        assertTrue(servicesDir.exists());\n+        persistenceProviderFile = new File(servicesDir, \"javax.persistence.spi.PersistenceProvider\");\n+        if (persistenceProviderFile.exists()) {\n+            persistenceProviderFile.delete();\n+        }\n+        try {\n+            persistenceProviderFile.createNewFile();\n+            BufferedWriter bw = new BufferedWriter(new FileWriter(persistenceProviderFile));\n+            for (String line : contents) {\n+                bw.write(line);\n+                bw.newLine();\n+            }\n+            \n+            bw.flush();\n+            bw.close();\n+        } catch (IOException e) {\n+            System.out.println(\"Problem writing to file: \" + persistenceProviderFile.getAbsolutePath());\n+            throw e;\n+        }\n+        assertTrue(persistenceProviderFile.exists());\n+    }\n+    \n+    \n+    private void buildTargetJar(File targetJar) throws Exception {\n+        JarOutputStream out = new JarOutputStream(\n+            new BufferedOutputStream(new FileOutputStream(targetJar)));\n+        \n+        BufferedInputStream in = \n+            new BufferedInputStream(new FileInputStream(persistenceProviderFile));\n+\n+        out.putNextEntry(new JarEntry(\"META-INF/\"));\n+        out.putNextEntry(new JarEntry(\"META-INF/services/\"));\n+        out.putNextEntry(new JarEntry(\"META-INF/services/javax.persistence.spi.PersistenceProvider\"));\n+        //write the file to the jar\n+        byte[] buf = new byte[1024];\n+        int i;\n+        while ((i = in.read(buf)) != -1) {\n+          out.write(buf, 0, i);\n+        }\n+        \n+        out.close();\n+        in.close();        \n+    }\n+    \n+    private void checkProviders(List<String> providerNames) {\n+        PersistenceProviderResolver resolver = \n+            PersistenceProviderResolverHolder.getPersistenceProviderResolver();\n+        List<PersistenceProvider> providers = resolver.getPersistenceProviders();\n+        assertNotNull(providers);\n+        assertFalse(providers.isEmpty());\n+        for (PersistenceProvider provider : providers) {\n+            String providerName = provider.getClass().getName();\n+            if (providerNames.contains(providerName)) {\n+                providerNames.remove(providerName);\n+            }\n+        }\n+        assertTrue(providerNames.isEmpty());\n+    }\n+    \n+    class TempUrlLoader extends URLClassLoader {\n+        public TempUrlLoader(URL[] urls, ClassLoader parent) {\n+            super(urls,parent);\n+        }\n+    }\n+}"}]}

