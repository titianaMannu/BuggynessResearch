{"sha":"70fc46f93eab6364e8062cc857ae27dafbc3449f","node_id":"MDY6Q29tbWl0MjA2MzY0OjcwZmM0NmY5M2VhYjYzNjRlODA2MmNjODU3YWUyN2RhZmJjMzQ0OWY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-12T06:35:31Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-12T06:35:31Z"},"message":"OPENJPA-459: Bulk update using a join instead of a subselect\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@835257 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e0035dd40bae54b45f818c1fe8b30306b5c6fdfe","url":"https://api.github.com/repos/apache/openjpa/git/trees/e0035dd40bae54b45f818c1fe8b30306b5c6fdfe"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/70fc46f93eab6364e8062cc857ae27dafbc3449f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/70fc46f93eab6364e8062cc857ae27dafbc3449f","html_url":"https://github.com/apache/openjpa/commit/70fc46f93eab6364e8062cc857ae27dafbc3449f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/70fc46f93eab6364e8062cc857ae27dafbc3449f/comments","author":null,"committer":null,"parents":[{"sha":"6f11e4d9836fa362d530d00cdd01342594eef1ab","url":"https://api.github.com/repos/apache/openjpa/commits/6f11e4d9836fa362d530d00cdd01342594eef1ab","html_url":"https://github.com/apache/openjpa/commit/6f11e4d9836fa362d530d00cdd01342594eef1ab"}],"stats":{"total":83,"additions":82,"deletions":1},"files":[{"sha":"48b888913ff70e9800123822c6fd7dc2f203ec1b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/70fc46f93eab6364e8062cc857ae27dafbc3449f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/70fc46f93eab6364e8062cc857ae27dafbc3449f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=70fc46f93eab6364e8062cc857ae27dafbc3449f","patch":"@@ -1986,7 +1986,8 @@ protected SQLBuffer toBulkOperation(ClassMapping mapping, Select sel,\n         // (SELECT 1 FROM TABLE t0 WHERE t0.ID = TABLE.ID); also, some\n         // databases do not allow aliases in delete statements, which\n         // also causes us to use a subselect\n-        if (sel.getTableAliases().size() == 1 && supportsSubselect\n+        Set<String> selectedTables = getSelectTableAliases(sel);\n+        if (selectedTables.size() == 1 && supportsSubselect\n             && allowsAliasInBulkClause) {\n             SQLBuffer from;\n             if (sel.getFromSelect() != null)\n@@ -2068,6 +2069,16 @@ protected SQLBuffer toBulkOperation(ClassMapping mapping, Select sel,\n         }\n         return sql;\n     }\n+    \n+    Set<String> getSelectTableAliases(Select sel) {\n+        Set<String> result = new HashSet<String>();\n+        List<String> selects = sel.getIdentifierAliases();\n+        for (String s : selects) {\n+            String tableAlias = s.substring(0, s.indexOf('.'));\n+            result.add(tableAlias);\n+        }\n+        return result;\n+    }\n \n     protected SQLBuffer getDeleteTargets(Select sel) {\n       SQLBuffer deleteTargets = new SQLBuffer(this);"},{"sha":"e1645c9f2201380cc968d7d7056786ea5ca69483","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestUpdateWithSubSelect.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/70fc46f93eab6364e8062cc857ae27dafbc3449f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestUpdateWithSubSelect.java","raw_url":"https://github.com/apache/openjpa/raw/70fc46f93eab6364e8062cc857ae27dafbc3449f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestUpdateWithSubSelect.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestUpdateWithSubSelect.java?ref=70fc46f93eab6364e8062cc857ae27dafbc3449f","patch":"@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.kernel;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.persistence.jdbc.sqlcache.Address;\n+import org.apache.openjpa.persistence.jdbc.sqlcache.Person;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+/**\n+ * Tests bulk update with join instead of subselect.\n+ * Reported in <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-459\">OPENJPA-459</A>\n+ * that update in MySQL fails when the UPDATE SQL included a SubSelect because of\n+ * limitation mentioned in <A HREF=\"http://lists.mysql.com/mysql/185623\">MySQL forum</A>.\n+ * <br>\n+ * The solution is {@link DBDictionary#toBulkOperation()} modified to accommodate\n+ * scenarios that selects from a single table but may involve joins of multiple tables.\n+ *  \n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class TestUpdateWithSubSelect extends SQLListenerTestCase {\n+\n+    public void setUp() throws Exception {\n+        super.setUp(CLEAR_TABLES, Person.class, Address.class);\n+        DBDictionary dict = ((JDBCConfiguration)emf.getConfiguration()).getDBDictionaryInstance();\n+        setTestsDisabled(!dict.supportsSubselect || !dict.allowsAliasInBulkClause);\n+        getLog().trace(this + \" is disabled because \" + dict.getClass().getSimpleName() + \n+          \" either both or one of supportsSubselect and allowsAliasInBulkClause is false\");\n+    }\n+    \n+    /**\n+     * Tests that a bulk update issues a single SQL and that uses a join. \n+     */\n+    public void testUpdateBySubSelect() {\n+        String jpql = \"UPDATE Person p SET p.age = :age WHERE p.address.city = :city\";\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        sql.clear();\n+        em.createQuery(jpql)\n+          .setParameter(\"age\", (short)25)\n+          .setParameter(\"city\", \"SFO\")\n+          .executeUpdate();\n+        em.getTransaction().commit();\n+        assertEquals(1,sql.size());\n+        String sqlString = sql.get(0).toUpperCase().trim();\n+        assertTrue(sqlString.startsWith(\"UPDATE\"));\n+        assertTrue(sqlString.indexOf(\"JOIN\") != -1);\n+    }\n+\n+}"}]}

