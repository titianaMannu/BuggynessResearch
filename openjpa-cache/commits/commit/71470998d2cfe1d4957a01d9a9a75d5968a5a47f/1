{"sha":"71470998d2cfe1d4957a01d9a9a75d5968a5a47f","node_id":"MDY6Q29tbWl0MjA2MzY0OjcxNDcwOTk4ZDJjZmUxZDQ5NTdhMDFkOWE5YTc1ZDU5NjhhNWE0N2Y=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-30T23:42:32Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-30T23:42:32Z"},"message":"OPENJPA-251, OPENJPA-329. I was not able to reproduce OPENJPA-251, but this logic should avoid the issue. I did not build a direct reproducer for OPENJPA-329, but I believe that the unit test covers the use case identified by that issue.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@616961 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0b1acdf589bddcad32d6be6d185f52dbb77498b4","url":"https://api.github.com/repos/apache/openjpa/git/trees/0b1acdf589bddcad32d6be6d185f52dbb77498b4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/71470998d2cfe1d4957a01d9a9a75d5968a5a47f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/71470998d2cfe1d4957a01d9a9a75d5968a5a47f","html_url":"https://github.com/apache/openjpa/commit/71470998d2cfe1d4957a01d9a9a75d5968a5a47f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/71470998d2cfe1d4957a01d9a9a75d5968a5a47f/comments","author":null,"committer":null,"parents":[{"sha":"200016ad61204f9b1da6d7c3475bf1ec234720ec","url":"https://api.github.com/repos/apache/openjpa/commits/200016ad61204f9b1da6d7c3475bf1ec234720ec","html_url":"https://github.com/apache/openjpa/commit/200016ad61204f9b1da6d7c3475bf1ec234720ec"}],"stats":{"total":147,"additions":140,"deletions":7},"files":[{"sha":"1254cd79c1104191ef829d37bf290d375182b8eb","filename":"openjpa-kernel-5/src/test/java/org/apache/openjpa/enhance/TestGetDeclaredMethod.java","status":"added","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/apache/openjpa/blob/71470998d2cfe1d4957a01d9a9a75d5968a5a47f/openjpa-kernel-5/src/test/java/org/apache/openjpa/enhance/TestGetDeclaredMethod.java","raw_url":"https://github.com/apache/openjpa/raw/71470998d2cfe1d4957a01d9a9a75d5968a5a47f/openjpa-kernel-5/src/test/java/org/apache/openjpa/enhance/TestGetDeclaredMethod.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/src/test/java/org/apache/openjpa/enhance/TestGetDeclaredMethod.java?ref=71470998d2cfe1d4957a01d9a9a75d5968a5a47f","patch":"@@ -0,0 +1,93 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+import java.lang.reflect.Method;\r\n+import java.util.List;\r\n+import java.util.ArrayList;\r\n+\r\n+import junit.framework.TestCase;\r\n+\r\n+/**\r\n+ * Tests that {@link Reflection#getDeclaredMethod(Class, String, Class)}\r\n+ * returns the most-derived class's method when called from a type hierarchy.\r\n+ * See OPENJPA-251.\r\n+ */\r\n+public class TestGetDeclaredMethod extends TestCase {\r\n+\r\n+    public void testGetDeclaredMethod() {\r\n+        Method meth =\r\n+            Reflection.getDeclaredMethod(Impl.class, \"getObject\", null);\r\n+        assertEquals(Impl.class, meth.getDeclaringClass());\r\n+        assertEquals(String.class, meth.getReturnType());\r\n+    }\r\n+\r\n+    public void testMostDerived() throws NoSuchMethodException {\r\n+        Method impl = Impl.class.getDeclaredMethod(\"getObject\", null);\r\n+        Method iface = Iface.class.getDeclaredMethod(\"getObject\", null);\r\n+        Method other = Other.class.getDeclaredMethod(\"getObject\", null);\r\n+        assertEquals(Impl.class, Reflection.mostDerived(impl, iface)\r\n+            .getDeclaringClass());\r\n+        assertEquals(Impl.class, Reflection.mostDerived(iface, impl)\r\n+            .getDeclaringClass());\r\n+        try {\r\n+            Reflection.mostDerived(iface, other);\r\n+            fail(\"'iface' and 'other' are not from related types\");\r\n+        } catch (IllegalArgumentException e) {\r\n+            // expected\r\n+        }\r\n+    }\r\n+\r\n+    public void testGenerics() throws NoSuchMethodException {\r\n+        List<Method> meths = new ArrayList<Method>();\r\n+        for (Method meth : GenericsImpl.class.getDeclaredMethods()) {\r\n+            if (\"getObject\".equals(meth.getName()))\r\n+                meths.add(meth);\r\n+        }\r\n+        assertEquals(2, meths.size());\r\n+        assertEquals(String.class, Reflection.mostDerived(meths.get(0),\r\n+            meths.get(1)).getReturnType());\r\n+    }\r\n+    \r\n+    interface Iface {\r\n+        Object getObject();\r\n+    }\r\n+\r\n+    static class Impl implements Iface {\r\n+        public String getObject() {\r\n+            return \"string\";\r\n+        }\r\n+    }\r\n+\r\n+    static class Other {\r\n+        public String getObject() {\r\n+            return \"other\";\r\n+        }\r\n+    }\r\n+\r\n+    interface GenericsIface<T> {\r\n+        public T getObject();\r\n+    }\r\n+\r\n+    static class GenericsImpl implements GenericsIface {\r\n+        public String getObject() {\r\n+            return null;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"bd8996873458f0bd3db944aa85be774b224ab229","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","status":"modified","additions":42,"deletions":7,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/71470998d2cfe1d4957a01d9a9a75d5968a5a47f/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","raw_url":"https://github.com/apache/openjpa/raw/71470998d2cfe1d4957a01d9a9a75d5968a5a47f/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java?ref=71470998d2cfe1d4957a01d9a9a75d5968a5a47f","patch":"@@ -112,27 +112,62 @@ public static Method findSetter(Class cls, String prop, Class param,\n      * Invokes <code>cls.getDeclaredMethods()</code>, and returns the method\n      * that matches the <code>name</code> and <code>param</code> arguments.\n      * Avoids the exception thrown by <code>Class.getDeclaredMethod()</code>\n-     * for performance reasons. <code>param</code> may be null.\n+     * for performance reasons. <code>param</code> may be null. Additionally,\n+     * if there are multiple methods with different return types, this will\n+     * return the method defined in the least-derived class.\n      *\n      * @since 0.9.8\n      */\n-    private static Method getDeclaredMethod(Class cls, String name,\n+    static Method getDeclaredMethod(Class cls, String name,\n         Class param) {\n         Method[] methods = (Method[]) AccessController.doPrivileged(\n             J2DoPrivHelper.getDeclaredMethodsAction(cls));\n+        Method candidate = null;\n         for (int i = 0 ; i < methods.length; i++) {\n     \t    if (name.equals(methods[i].getName())) {\n                 Class[] methodParams = methods[i].getParameterTypes();\n                 if (param == null && methodParams.length == 0)\n-                    return methods[i];\n-                if (param != null && methodParams.length == 1\n+                    candidate = mostDerived(methods[i], candidate);\n+                else if (param != null && methodParams.length == 1\n                     && param.equals(methodParams[0]))\n-                    return methods[i];\n+                    candidate = mostDerived(methods[i], candidate);\n             }\n         }\n-        return null;\n+        return candidate;\n+    }\n+\n+    static Method mostDerived(Method meth1, Method meth2) {\n+        if (meth1 == null)\n+            return meth2;\n+        if (meth2 == null)\n+            return meth1;\n+        \n+        Class cls2 = meth2.getDeclaringClass();\n+        Class cls1 = meth1.getDeclaringClass();\n+\n+        if (cls1.equals(cls2)) {\n+            Class ret1 = meth1.getReturnType();\n+            Class ret2 = meth2.getReturnType();\n+            if (ret1.isAssignableFrom(ret2))\n+                return meth2;\n+            else if (ret2.isAssignableFrom(ret1))\n+                return meth1;\n+            else\n+                throw new IllegalArgumentException(\n+                    _loc.get(\"most-derived-unrelated-same-type\", meth1, meth2)\n+                        .getMessage());\n+        } else {\n+            if (cls1.isAssignableFrom(cls2))\n+                return meth2;\n+            else if (cls2.isAssignableFrom(cls1))\n+                return meth1;\n+            else\n+                throw new IllegalArgumentException(\n+                    _loc.get(\"most-derived-unrelated\", meth1, meth2)\n+                        .getMessage());\n+        }\n     }\n-    \n+\n     /**\n      * Return the field with the given name, optionally throwing an exception\n      * if none."},{"sha":"83d4dbb9608cc12b6a02fa9c03346e3798e0e774","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/71470998d2cfe1d4957a01d9a9a75d5968a5a47f/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/71470998d2cfe1d4957a01d9a9a75d5968a5a47f/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties?ref=71470998d2cfe1d4957a01d9a9a75d5968a5a47f","patch":"@@ -199,3 +199,8 @@ unspecified-unenhanced-types: One or more of the types in {0} have relations \\\n     to other unenhanced types that were not specified. These unspecified types \\\n     are: {1}\n enhance-error: An error occurred while enhancing {0}. Exception message: {1}\n+most-derived-unrelated: Methods \"{0}\" and \"{1}\" are defined in types that do \\\n+    not have an interface or superclass inheritance relationship.\n+most-derived-unrelated-same-type: Methods \"{0}\" and \"{1}\" are defined in the same \\\n+    type, but the method return types do not have an interface or superclass \\\n+    inheritance relationship."}]}

