{"sha":"71519b08080107dae13867c760f224a2cde54b5b","node_id":"MDY6Q29tbWl0MjA2MzY0OjcxNTE5YjA4MDgwMTA3ZGFlMTM4NjdjNzYwZjIyNGEyY2RlNTRiNWI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-13T01:58:49Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-13T01:58:49Z"},"message":"OPENJPA-610: Restored refresh() behavior for clean/new instances.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@667312 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9727ede5a4aeedcda0a9f7220ff1a3611092bb1d","url":"https://api.github.com/repos/apache/openjpa/git/trees/9727ede5a4aeedcda0a9f7220ff1a3611092bb1d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/71519b08080107dae13867c760f224a2cde54b5b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/71519b08080107dae13867c760f224a2cde54b5b","html_url":"https://github.com/apache/openjpa/commit/71519b08080107dae13867c760f224a2cde54b5b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/71519b08080107dae13867c760f224a2cde54b5b/comments","author":null,"committer":null,"parents":[{"sha":"514a4bb907c5e6bbab34a758008240347ef11830","url":"https://api.github.com/repos/apache/openjpa/commits/514a4bb907c5e6bbab34a758008240347ef11830","html_url":"https://github.com/apache/openjpa/commit/514a4bb907c5e6bbab34a758008240347ef11830"}],"stats":{"total":181,"additions":124,"deletions":57},"files":[{"sha":"96d3596e92e5d6b4b3b87ad5b312813b09284022","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":50,"deletions":9,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/71519b08080107dae13867c760f224a2cde54b5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/71519b08080107dae13867c760f224a2cde54b5b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=71519b08080107dae13867c760f224a2cde54b5b","patch":"@@ -2733,7 +2733,7 @@ OpenJPAStateManager copy(OpenJPAStateManager copy, PCState state) {\n             endOperation();\r\n         }\r\n     }\r\n-\r\n+    \r\n     public void refreshAll(Collection objs, OpCallbacks call) {\r\n         if (objs == null || objs.isEmpty())\r\n             return;\r\n@@ -2742,10 +2742,14 @@ public void refreshAll(Collection objs, OpCallbacks call) {\n         try {\r\n             assertNontransactionalRead();\r\n \r\n-            for (Iterator itr = objs.iterator(); itr.hasNext();) {\r\n+            for (Iterator itr = objs.iterator(); itr.hasNext();) \r\n                 gatherCascadeRefresh(itr.next(), call);\r\n-            }\r\n-            refreshInternal(_operating, call);\r\n+            if (_operating.isEmpty())\r\n+            \treturn;\r\n+            if (_operating.size() == 1)\r\n+            \trefreshInternal(_operating.iterator().next(), call);\r\n+            else\r\n+            \trefreshInternal(_operating, call);\r\n         } finally {\r\n             endOperation();\r\n         }\r\n@@ -2760,7 +2764,12 @@ public void refresh(Object obj, OpCallbacks call) {\n             assertNontransactionalRead();\r\n \r\n             gatherCascadeRefresh(obj, call);\r\n-            refreshInternal(_operating, call);\r\n+            if (_operating.isEmpty())\r\n+            \treturn;\r\n+            if (_operating.size() == 1)\r\n+            \trefreshInternal(_operating.iterator().next(), call);\r\n+            else\r\n+            \trefreshInternal(_operating, call);\r\n         } finally {\r\n             endOperation();\r\n         }\r\n@@ -2797,7 +2806,7 @@ protected void refreshInternal(Collection objs, OpCallbacks call) {\n         List exceps = null;\r\n         try {\r\n             // collect instances that need a refresh\r\n-            Collection load = new ArrayList(objs.size());\r\n+            Collection load = null;\r\n             StateManagerImpl sm;\r\n             Object obj;\r\n             for (Iterator itr = objs.iterator(); itr.hasNext();) {\r\n@@ -2812,9 +2821,11 @@ protected void refreshInternal(Collection objs, OpCallbacks call) {\n                         continue;\r\n \r\n                     if (sm != null) {\r\n-                        if (sm.isDetached()) {\r\n+                        if (sm.isDetached()) \r\n                             throw newDetachedException(obj, \"refresh\");\r\n-                        } else if (sm.beforeRefresh(true)) {\r\n+                        else if (sm.beforeRefresh(true)) {\r\n+                        \tif (load == null)\r\n+                        \t\tload = new ArrayList(objs.size());\r\n                             load.add(sm);\r\n                         }\r\n                     } else if (assertPersistenceCapable(obj).pcIsDetached()\r\n@@ -2826,7 +2837,7 @@ protected void refreshInternal(Collection objs, OpCallbacks call) {\n             }\r\n \r\n             // refresh all\r\n-            if (!load.isEmpty()) {\r\n+            if (load != null) {\r\n                 Collection failed = _store.loadAll(load, null,\r\n                     StoreManager.FORCE_LOAD_REFRESH, _fc, null);\r\n                 if (failed != null && !failed.isEmpty())\r\n@@ -2868,6 +2879,36 @@ protected void refreshInternal(Collection objs, OpCallbacks call) {\n         throwNestedExceptions(exceps, false);\r\n     }\r\n \r\n+    /**\r\n+     * Optimization for single-object refresh.\r\n+     */\r\n+    protected void refreshInternal(Object obj, OpCallbacks call) {\r\n+        try {\r\n+            StateManagerImpl sm = getStateManagerImpl(obj, true);\r\n+            if ((processArgument(OpCallbacks.OP_REFRESH, obj, sm, call)\r\n+                & OpCallbacks.ACT_RUN) == 0)\r\n+                return;\r\n+\r\n+            if (sm != null) {\r\n+                if (sm.isDetached())\r\n+                    throw newDetachedException(obj, \"refresh\");\r\n+                else if (sm.beforeRefresh(false)) {\r\n+                    sm.load(_fc, StateManagerImpl.LOAD_FGS, null, null, false);\r\n+                    sm.afterRefresh();\r\n+                }\r\n+                fireLifecycleEvent(sm.getManagedInstance(), null,\r\n+                    sm.getMetaData(), LifecycleEvent.AFTER_REFRESH);\r\n+            } else if (assertPersistenceCapable(obj).pcIsDetached()\r\n+                == Boolean.TRUE)\r\n+                throw newDetachedException(obj, \"refresh\");\r\n+        } catch (OpenJPAException ke) {\r\n+            throw ke;\r\n+        } catch (RuntimeException re) {\r\n+            throw new GeneralException(re);\r\n+        }\r\n+    }\r\n+    \r\n+    \r\n     public void retrieveAll(Collection objs, boolean dfgOnly,\r\n         OpCallbacks call) {\r\n         if (objs == null || objs.isEmpty())\r"},{"sha":"a2b151193c7143cf1a728bb2d950d95ef4db903a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java","status":"modified","additions":74,"deletions":48,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/71519b08080107dae13867c760f224a2cde54b5b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java","raw_url":"https://github.com/apache/openjpa/raw/71519b08080107dae13867c760f224a2cde54b5b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java?ref=71519b08080107dae13867c760f224a2cde54b5b","patch":"@@ -19,10 +19,10 @@\n package org.apache.openjpa.persistence.datacache;\r\n \r\n import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityNotFoundException;\r\n import javax.persistence.LockModeType;\r\n \r\n import org.apache.openjpa.persistence.EntityManagerImpl;\r\n+import org.apache.openjpa.persistence.EntityNotFoundException;\r\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n import org.apache.openjpa.persistence.StoreCache;\r\n@@ -54,7 +54,10 @@\n \tprivate static final boolean WITH_DATACACHE = true;\r\n \tprivate static final boolean CONSISTENT = true;\r\n \tprivate static final boolean DIRTY = true;\r\n+\tprivate static final boolean REFRESH_FROM_DATACACHE = true;\r\n \tprivate static final LockModeType NOLOCK = null;\r\n+\tprivate static final Class ENTITY_NOT_FOUND_ERROR = EntityNotFoundException.class;\r\n+\tprivate static final Class NO_ERROR = null;\r\n \r\n \tprivate static final String MARKER_DATACACHE = \"in DataCache\";\r\n \tprivate static final String MARKER_DATABASE  = \"in Database\";\r\n@@ -356,68 +359,66 @@ public void verifyRefresh(boolean useDataCache, LockModeType lock,\n \tString getExpectedMarker(boolean useDataCache, LockModeType lock, \r\n \t\t\tboolean makeDirtyBeforeRefresh) {\r\n \t\tif (useDataCache) {\r\n-//\t\t\treturn (lock != null && makeDirtyBeforeRefresh)\r\n \t\t\treturn (lock != null) ? MARKER_DATABASE : MARKER_DATACACHE; \r\n \t\t} else {\r\n-//\t\t\treturn (makeDirtyBeforeRefresh) ? MARKER_DATABASE : MARKER_CACHE;\r\n \t\t\treturn MARKER_DATABASE;\r\n \t\t}\r\n \t}\r\n \t\r\n \tpublic void testDirtyRefreshWithNoLockHitsDatabase() {\r\n-\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, DIRTY, false, MARKER_DATABASE);\r\n+\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n \t}\r\n \t\r\n \tpublic void testDirtyRefreshWithNoLockHitsDataCache() {\r\n-\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, DIRTY, true, MARKER_DATACACHE);\r\n+\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n \t}\r\n \t\r\n-\tpublic void testCleanRefreshWithNoLockHitsDatabase() {\r\n-\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, !DIRTY, false, MARKER_DATABASE);\r\n+\tpublic void testCleanRefreshWithNoLockDoesNotHitDatabase() {\r\n+\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n \t}\r\n \t\r\n \tpublic void testCleanRefreshWithNoLockHitsDataCache() {\r\n-\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, !DIRTY, true, MARKER_DATACACHE);\r\n+\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, !DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n \t}\r\n \t\r\n \tpublic void testDirtyRefreshWithReadLockHitsDatabase() {\r\n-\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, DIRTY, true, MARKER_DATABASE);\r\n-\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, DIRTY, false, MARKER_DATABASE);\r\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n \t}\r\n \t\r\n-\tpublic void testCleanRefreshWithReadLockHitsDatabase() {\r\n-\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, !DIRTY, true, MARKER_DATABASE);\r\n-\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, !DIRTY, false, MARKER_DATABASE);\r\n+\tpublic void testCleanRefreshWithReadLockDoesNotHitDatabase() {\r\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, !DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n \t}\r\n \t\r\n \tpublic void testDirtyRefreshWithWriteLockHitsDatabase() {\r\n-\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, DIRTY, true, MARKER_DATABASE);\r\n-\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, DIRTY, false, MARKER_DATABASE);\r\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n \t}\r\n \t\r\n-\tpublic void testCleanRefreshWithWriteLockHitsDatabase() {\r\n-\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, !DIRTY, true, MARKER_DATABASE);\r\n-\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, !DIRTY, false, MARKER_DATABASE);\r\n+\tpublic void testCleanRefreshWithWriteLockDoesNotHitDatabase() {\r\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, !DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n \t}\r\n \t\r\n \tpublic void testDirtyRefreshWithoutDataCacheAlwaysHitsDatabase() {\r\n-\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, DIRTY, true, MARKER_DATABASE);\r\n-\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, DIRTY, true, MARKER_DATABASE);\r\n-\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, DIRTY, true, MARKER_DATABASE);\r\n+\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n \t\t\r\n-\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, DIRTY, false, MARKER_DATABASE);\r\n-\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, DIRTY, false, MARKER_DATABASE);\r\n-\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, DIRTY, false, MARKER_DATABASE);\r\n+\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n \t}\r\n \t\r\n-\tpublic void testCleanRefreshWithoutDataCacheAlwaysHitsDatabase() {\r\n-\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, !DIRTY, true, MARKER_DATABASE);\r\n-\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, !DIRTY, true, MARKER_DATABASE);\r\n-\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, !DIRTY, true, MARKER_DATABASE);\r\n+\tpublic void testCleanRefreshWithoutDataCacheDoesNotHitDatabase() {\r\n+\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, !DIRTY, REFRESH_FROM_DATACACHE, MARKER_CACHE);\r\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, !DIRTY, REFRESH_FROM_DATACACHE,  MARKER_CACHE);\r\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, !DIRTY, REFRESH_FROM_DATACACHE,  MARKER_CACHE);\r\n \t\t\r\n-\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, !DIRTY, false, MARKER_DATABASE);\r\n-\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, !DIRTY, false, MARKER_DATABASE);\r\n-\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, !DIRTY, false, MARKER_DATABASE);\r\n+\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_CACHE);\r\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_CACHE);\r\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_CACHE);\r\n \t}\r\n \t\r\n \t/**\r\n@@ -430,7 +431,7 @@ public void testCleanRefreshWithoutDataCacheAlwaysHitsDatabase() {\n \t * @param lock\r\n \t */\r\n \tpublic void verifyDeleteDetectionOnRefresh(boolean useDataCache, \r\n-\t\t\tLockModeType lock) {\r\n+\t\t\tboolean dirty, LockModeType lock, Class expectedExceptionType) {\r\n \t\tOpenJPAEntityManagerFactorySPI emf = (useDataCache)\r\n \t\t\t? emfWithDataCache : emfWithoutDataCache;\r\n \t\t\t\r\n@@ -465,34 +466,59 @@ public void verifyDeleteDetectionOnRefresh(boolean useDataCache,\n \t\t *   \r\n \t\t */\r\n \t\tem.getTransaction().begin();\r\n-\t\tif (lock != null)\r\n-\t\t\tem.getFetchPlan().setReadLockMode(lock);\r\n+\t\tem.getFetchPlan().setReadLockMode(lock);\r\n+\t\tif (dirty) \r\n+\t\t\tpc.setName(\"Dirty Name\");\r\n \t\ttry {\r\n \t\t\tem.refresh(pc);\r\n-\t\t\tfail(\"expected EntityNotFoundException for PObject:\" + oid);\r\n-\t\t} catch (EntityNotFoundException ex) {\r\n-\t\t\t// we are good\r\n+\t\t\tif (expectedExceptionType != null) {\r\n+\t\t\t\tfail(\"expected \" + expectedExceptionType.getSimpleName() + \r\n+\t\t\t\t\t\t\" for PObject:\" + oid);\r\n+\t\t\t}\r\n \t\t} catch (Exception ex) {\r\n-\t\t\tex.printStackTrace();\r\n-\t\t\tfail(\"expected EntityNotFoundException for PObject:\" + oid);\r\n+\t\t\tboolean expectedException = expectedExceptionType != null &&\r\n+\t\t\t    expectedExceptionType.isAssignableFrom(ex.getClass());\r\n+\t\t\tif (!expectedException) {\r\n+\t\t\t\tex.printStackTrace();\r\n+\t\t\t\tString error = (expectedExceptionType == null) \r\n+\t\t\t\t\t? \"no exception\" : expectedExceptionType.getName();\r\n+\t\t\t\tfail(\"expected \" + error + \" for PObject:\" + oid);\r\n+\t\t\t}\r\n \t\t} finally {\r\n \t\t\tem.getTransaction().rollback();\r\n \t\t}\r\n \t}\r\n \r\n-\tpublic void testDeleteIsDetectedOnRefreshWithLockWithActiveDataCache() {\r\n-\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, LockModeType.READ);\r\n-\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, LockModeType.WRITE);\r\n+\tpublic void testDeleteIsNotDetectedOnCleanRefreshWithoutLockWithDataCache() {\r\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, !DIRTY, NOLOCK, NO_ERROR);\r\n \t}\r\n \t\r\n-\tpublic void testDeleteIsNotDetectedOnRefreshWithNoLockWithActiveDataCache() {\r\n-\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, NOLOCK);\r\n+\tpublic void testDeleteIsDetectedOnCleanRefreshWithLockWithDataCache() {\r\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, !DIRTY, LockModeType.READ, ENTITY_NOT_FOUND_ERROR);\r\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, !DIRTY, LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\r\n+\t}\r\n+\r\n+\tpublic void testDeleteIsNotDetectedOnDirtyRefreshWithoutLockWithDataCache() {\r\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, NOLOCK, NO_ERROR);\t\r\n+\t}\r\n+\t\r\n+\tpublic void testDeleteIsDetectedOnDirtyRefreshWithLockWithDataCache() {\r\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, LockModeType.READ, ENTITY_NOT_FOUND_ERROR);\r\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\r\n+\t}\r\n+\t\r\n+\tpublic void testDeleteIsDetectedOnDirtyRefreshWitDataCache() {\r\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, LockModeType.READ, ENTITY_NOT_FOUND_ERROR);\r\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\r\n+\t}\r\n+\t\r\n+\tpublic void testDeleteIsDetectedOnCleanRefreshWithoutLockWithoutDataCache() {\r\n+\t\tverifyDeleteDetectionOnRefresh(!WITH_DATACACHE, !DIRTY, NOLOCK, ENTITY_NOT_FOUND_ERROR);\r\n \t}\r\n \t\r\n-\tpublic void testDeleteIsDetectedOnRefreshAlwaysWithoutDataCache() {\r\n-\t\tverifyDeleteDetectionOnRefresh(!WITH_DATACACHE, NOLOCK);\r\n-\t\tverifyDeleteDetectionOnRefresh(!WITH_DATACACHE, LockModeType.READ);\r\n-\t\tverifyDeleteDetectionOnRefresh(!WITH_DATACACHE, LockModeType.WRITE);\r\n+\tpublic void testDeleteIsDetectedOnCleanRefreshWithLockWithoutDataCache() {\r\n+\t\tverifyDeleteDetectionOnRefresh(!WITH_DATACACHE, !DIRTY, LockModeType.READ, ENTITY_NOT_FOUND_ERROR);\r\n+\t\tverifyDeleteDetectionOnRefresh(!WITH_DATACACHE, !DIRTY, LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\r\n \t}\r\n \r\n }\r"}]}

