{"sha":"716cf61d4edc4732c59c2ab44a7e28bed33423aa","node_id":"MDY6Q29tbWl0MjA2MzY0OjcxNmNmNjFkNGVkYzQ3MzJjNTljMmFiNDRhN2UyOGJlZDMzNDIzYWE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-04-01T15:07:58Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-04-01T15:07:58Z"},"message":"OPENJPA-975. Based on patch from B.J. Reed and Jody Grassel\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@760911 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9708dcf8e17d245dbff12ce2479754cac4071e5e","url":"https://api.github.com/repos/apache/openjpa/git/trees/9708dcf8e17d245dbff12ce2479754cac4071e5e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/716cf61d4edc4732c59c2ab44a7e28bed33423aa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/716cf61d4edc4732c59c2ab44a7e28bed33423aa","html_url":"https://github.com/apache/openjpa/commit/716cf61d4edc4732c59c2ab44a7e28bed33423aa","comments_url":"https://api.github.com/repos/apache/openjpa/commits/716cf61d4edc4732c59c2ab44a7e28bed33423aa/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"f47b3e3c1c77370b2fb44de71def59cfd92a7f3c","url":"https://api.github.com/repos/apache/openjpa/commits/f47b3e3c1c77370b2fb44de71def59cfd92a7f3c","html_url":"https://github.com/apache/openjpa/commit/f47b3e3c1c77370b2fb44de71def59cfd92a7f3c"}],"stats":{"total":212,"additions":209,"deletions":3},"files":[{"sha":"cc11ae6e1c246e197e4ee3dd1d406b0166c06d3e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/716cf61d4edc4732c59c2ab44a7e28bed33423aa/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","raw_url":"https://github.com/apache/openjpa/raw/716cf61d4edc4732c59c2ab44a7e28bed33423aa/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java?ref=716cf61d4edc4732c59c2ab44a7e28bed33423aa","patch":"@@ -215,9 +215,12 @@ public Expression matches(Value v1, Value v2,\n         String single, String multi, String esc) {\n         if (!(v2 instanceof Const))\n             throw new UserException(_loc.get(\"const-only\", \"matches\"));\n-        return new MatchesExpression((Val) v1, (Const) v2, single, multi,\n-            esc != null ? esc : _type.getMappingRepository().\n-                getDBDictionary().searchStringEscape);\n+        if (esc == null && _type.getMappingRepository().\n+                getDBDictionary().requiresSearchStringEscapeForLike == true) { \n+            esc = _type.getMappingRepository().\n+                getDBDictionary().searchStringEscape;\n+        }        \n+        return new MatchesExpression((Val) v1, (Const) v2, single, multi, esc);\n     }\n \n     public Subquery newSubquery(ClassMetaData candidate, boolean subs,"},{"sha":"f05e85f1fbc33b2118cb94fa8dfaa7d38490efb8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/716cf61d4edc4732c59c2ab44a7e28bed33423aa/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/716cf61d4edc4732c59c2ab44a7e28bed33423aa/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=716cf61d4edc4732c59c2ab44a7e28bed33423aa","patch":"@@ -208,6 +208,7 @@\n     public boolean requiresAliasForSubselect = false;\n     public boolean allowsAliasInBulkClause = true;\n     public boolean supportsMultipleNontransactionalResultSets = true;\n+    public boolean requiresSearchStringEscapeForLike = true;\n     public String searchStringEscape = \"\\\\\";\n     public boolean requiresCastForMathFunctions = false;\n     public boolean requiresCastForComparisons = false;"},{"sha":"0e3b55e619fbf0decaf80b8d08bf73c75c0f096a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Employee.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/716cf61d4edc4732c59c2ab44a7e28bed33423aa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/716cf61d4edc4732c59c2ab44a7e28bed33423aa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Employee.java?ref=716cf61d4edc4732c59c2ab44a7e28bed33423aa","patch":"@@ -20,8 +20,16 @@\n \n import javax.persistence.Entity;\n import javax.persistence.Id;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n import javax.persistence.Table;\n \n+@NamedQueries( { \n+    @NamedQuery(name = \"Employee.findByName\", \n+        query = \"Select e from Employee e where e.name LIKE :name\") ,\n+    @NamedQuery(name = \"Employee.findByNameEscaped\", \n+        query = \"Select e from Employee e where e.name LIKE :name ESCAPE '\\\\'\")\n+    })\n @Entity\n @Table(name=\"SUBQ_EMPLOYEE\")\n public class Employee {"},{"sha":"c7b3595ea67cb6e3c4c5be4aabb9d5592974be7c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryEscapeCharacters.java","status":"added","additions":156,"deletions":0,"changes":156,"blob_url":"https://github.com/apache/openjpa/blob/716cf61d4edc4732c59c2ab44a7e28bed33423aa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryEscapeCharacters.java","raw_url":"https://github.com/apache/openjpa/raw/716cf61d4edc4732c59c2ab44a7e28bed33423aa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryEscapeCharacters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryEscapeCharacters.java?ref=716cf61d4edc4732c59c2ab44a7e28bed33423aa","patch":"@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestQueryEscapeCharacters\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(Employee.class, CLEAR_TABLES);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        Employee e = new Employee();\n+        e.setName(\"Mike Dick\");\n+        e.setEmpId(1);\n+        em.persist(e);\n+\n+        e = new Employee();\n+        e.setName(\"Mike Jones\");\n+        e.setEmpId(2);\n+        em.persist(e);\n+\n+        e = new Employee();\n+        e.setName(\"Mike Smith\");\n+        e.setEmpId(3);\n+        em.persist(e);\n+        \n+        e = new Employee();\n+        e.setName(\"M%ke Smith\");\n+        e.setEmpId(4);\n+        em.persist(e);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void tearDown() throws Exception {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.createQuery(\"Delete from Employee\").executeUpdate();\n+        em.getTransaction().commit();\n+        em.close();\n+        super.tearDown();\n+    }\n+    \n+    public void testNormalQuery() {\n+        performFind (\"Employee.findByName\", \"%Dick\", 1);\n+    }\n+\n+    public void testMultiResultQuery() {\n+        performFind (\"Employee.findByName\", \"Mike%\", 3);\n+    }\n+\n+    public void testEscapedQuery() {\n+        performFind (\"Employee.findByNameEscaped\", \n+                \"M\\\\%%\", 1);\n+    }\n+\n+    public void testDoubleEscapedQuery() {\n+        performFind (\"Employee.findByName\", \"\\\\\\\\\", 0);\n+    }\n+\n+    public void testWrongEscape() {\n+        performFind (\"Employee.findByName\", \"M|%%\", 0);\n+    }\n+\n+    public void testDoubleSlashQuery() {\n+        // get the Dictionary and check the alwaysAddSearchString flag\n+        OpenJPAEntityManagerFactorySPI ojpaEmf = \n+            (OpenJPAEntityManagerFactorySPI) emf;\n+        JDBCConfiguration conf = (JDBCConfiguration)ojpaEmf.getConfiguration();\n+        \n+        if (conf.getDBDictionaryInstance().\n+                requiresSearchStringEscapeForLike == true) {\n+            return;\n+        }\n+\n+        performFind (\"Employee.findByName\", \"\\\\\", 0);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testDifferentEscapeCharacter () {\n+        OpenJPAEntityManagerFactorySPI ojpaEmf = \n+            (OpenJPAEntityManagerFactorySPI) emf;\n+        JDBCConfiguration conf = (JDBCConfiguration)ojpaEmf.getConfiguration();\n+\n+        // Would be nice to just pass a map to the createEntityManager, but\n+        // seems like it would be too much trouble to get the proper DB type\n+        // and then build the string for the map.\n+        conf.getDBDictionaryInstance().requiresSearchStringEscapeForLike = true;\n+        conf.getDBDictionaryInstance().searchStringEscape = \"|\";\n+        EntityManager em = emf.createEntityManager();\n+\n+        Query q = em.createNamedQuery(\"Employee.findByName\");\n+        q.setParameter(\"name\", \"M|%%\");\n+        List<Employee> emps = (List<Employee>) q.getResultList();\n+        assertEquals(1, emps.size());\n+\n+        String unnamedQuery =\n+            \"Select e from Employee e where e.name LIKE :name\";\n+\n+        q = em.createQuery(unnamedQuery);\n+        q.setParameter(\"name\", \"M|%%\");\n+        emps = (List<Employee>) q.getResultList();\n+        assertEquals(1, emps.size());\n+        em.close();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private void performFind (String namedQuery, String parameter,\n+            int expected) {\n+        EntityManager em = emf.createEntityManager();\n+\n+        Query q = em.createNamedQuery(namedQuery);\n+        q.setParameter(\"name\", parameter);\n+        List<Employee> emps = (List<Employee>) q.getResultList();\n+        assertEquals(expected, emps.size());\n+\n+        String unnamedQuery =\n+            \"Select e from Employee e where e.name LIKE :name\";\n+        if (namedQuery.equals(\"Employee.findByNameEscaped\")) {\n+            unnamedQuery =\n+                \"Select e from Employee e where e.name LIKE :name ESCAPE '\\\\'\";\n+        }\n+        q = em.createQuery(unnamedQuery);\n+        q.setParameter(\"name\", parameter);\n+        emps = (List<Employee>) q.getResultList();\n+        assertEquals(expected, emps.size());\n+        em.close();\n+    }\n+}"},{"sha":"b81c285a364f16327b643c03bd2b6511f6e820bd","filename":"openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","status":"modified","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/716cf61d4edc4732c59c2ab44a7e28bed33423aa/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","raw_url":"https://github.com/apache/openjpa/raw/716cf61d4edc4732c59c2ab44a7e28bed33423aa/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml?ref=716cf61d4edc4732c59c2ab44a7e28bed33423aa","patch":"@@ -2400,6 +2400,44 @@ sequence value. May use a placeholder of <literal>{0}</literal> for the variable\n sequence name. Defaults to a database-appropriate value.\n                     </para>\n                 </listitem>\n+                <listitem id=\"DBDictionary.RequiresSearchStringEscapeForLike\">\n+                    <para>\n+                    <indexterm>\n+                        <primary>\n+                            SQL\n+                        </primary>\n+                        <secondary>\n+                            RequiresSearchStringEscapeForLike\n+                        </secondary>\n+                    </indexterm>\n+<literal>RequiresSearchStringEscapeForLike</literal>:\n+When true, the database requires an escape string for queries that use\n+<literal>LIKE</literal>.  The escape string can be specified using\n+<literal>searchStringEscape</literal>.  Defaults to <literal>true</literal>.\n+                    </para>\n+                </listitem>\n+                <listitem id=\"DBDictionary.SearchStringEscape\">\n+                    <para>\n+                    <indexterm>\n+                        <primary>\n+                            SQL\n+                        </primary>\n+                        <secondary>\n+                            SearchStringEscape\n+                        </secondary>\n+                    </indexterm>\n+<literal>SearchStringEscape</literal>: \n+The default escape character used when generating SQL <literal>LIKE</literal>\n+clauses.  The escape character is used to escape the wildcard meaning of the \n+<literal>_</literal> and <literal>%</literal> characters.\n+Note: since JPQL provides the ability to define the escape character in\n+the query, this setting is primarily used when translating other query\n+languages, such as JDOQL.  To not use any escape character, set the\n+<literal>RequiresSearchStringEscapeForLike</literal> property to\n+<literal>false</literal>.  Defaults to <literal>\"\\\\\"</literal> (a single backslash\n+in Java speak).\n+                    </para>\n+                </listitem>                \n             </itemizedlist>\n         </section>\n         <section id=\"ref_guide_dbsetup_dbsupport_mysql\">"}]}

