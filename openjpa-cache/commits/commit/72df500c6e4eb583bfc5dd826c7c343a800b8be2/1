{"sha":"72df500c6e4eb583bfc5dd826c7c343a800b8be2","node_id":"MDY6Q29tbWl0MjA2MzY0OjcyZGY1MDBjNmU0ZWI1ODNiZmM1ZGQ4MjZjN2MzNDNhODAwYjhiZTI=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-22T07:39:21Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-05-22T07:39:21Z"},"message":"OPENJPA-574 Cached object in DataCache not evicted due to StatementBatching not reporting OptimisticException \nHandle  (-2) updateCount returned from Batching for Oracle.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@659030 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9c304df9b3ecd3309cc55ea4a29708530498a4ee","url":"https://api.github.com/repos/apache/openjpa/git/trees/9c304df9b3ecd3309cc55ea4a29708530498a4ee"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/72df500c6e4eb583bfc5dd826c7c343a800b8be2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/72df500c6e4eb583bfc5dd826c7c343a800b8be2","html_url":"https://github.com/apache/openjpa/commit/72df500c6e4eb583bfc5dd826c7c343a800b8be2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/72df500c6e4eb583bfc5dd826c7c343a800b8be2/comments","author":null,"committer":null,"parents":[{"sha":"8a56c75597fbc4d7ff1291e1a7ab9947053b6180","url":"https://api.github.com/repos/apache/openjpa/commits/8a56c75597fbc4d7ff1291e1a7ab9947053b6180","html_url":"https://github.com/apache/openjpa/commit/8a56c75597fbc4d7ff1291e1a7ab9947053b6180"}],"stats":{"total":41,"additions":34,"deletions":7},"files":[{"sha":"de2d388ced9ca83765956784ca436fa0a2c04f31","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java","status":"modified","additions":33,"deletions":7,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/72df500c6e4eb583bfc5dd826c7c343a800b8be2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/72df500c6e4eb583bfc5dd826c7c343a800b8be2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/BatchingPreparedStatementManagerImpl.java?ref=72df500c6e4eb583bfc5dd826c7c343a800b8be2","patch":"@@ -171,7 +171,7 @@ protected void flushBatch() {\n                             } else {\n                                 // reach the batchLimit, execute the batch\n                                 int[] rtn = executeBatch(ps);\n-                                checkUpdateCount(rtn, batchedRowsBaseIndex);\n+                                checkUpdateCount(rtn, batchedRowsBaseIndex, ps);\n \n                                 batchedRowsBaseIndex += _batchLimit;\n \n@@ -185,7 +185,7 @@ protected void flushBatch() {\n                     }\n                     // end of the loop, execute the batch\n                     int[] rtn = executeBatch(ps);\n-                    checkUpdateCount(rtn, batchedRowsBaseIndex);\n+                    checkUpdateCount(rtn, batchedRowsBaseIndex, ps);\n                 }\n             } catch (SQLException se) {\n                 SQLException sqex = se.getNextException();\n@@ -227,9 +227,22 @@ else if (row.getAction() == Row.ACTION_INSERT)\n     /*\n      * Process executeBatch function array of return counts.\n      */\n-    private void checkUpdateCount(int[] count, int batchedRowsBaseIndex)\n+    private void checkUpdateCount(int[] count, int batchedRowsBaseIndex,\n+        PreparedStatement ps)\n         throws SQLException {\n+        // value in int[] count  returned from executeBatch: \n+        //               Update          Delete        Insert\n+        // ===============================================================\n+        //               OK / Error      OK / Error    OK / Error\n+        // DB2LUW         1 / 0           1 / 0         1 / SQLException\n+        // DB2/ZOS        1 / 0           1 / 0        -2 / SQLException\n+        // Oracle        -2 / -2         -2 / -2       -2 / SQLException\n         int cnt = 0;\n+        int updateSuccessCnt = ps.getUpdateCount();\n+        if (_log.isTraceEnabled() &&\n+            _dict.platform.indexOf(\"Oracle\") > -1)\n+            _log.trace(_loc.get(\"batch_update_success_count\",\n+                    updateSuccessCnt));\n         Object failed = null;\n         List batchedRows = getBatchedRows();\n         for (int i = 0; i < count.length; i++) {\n@@ -247,10 +260,23 @@ else if (row.getAction() == Row.ACTION_INSERT)\n                         row.getSQL(_dict)).getMessage());\n                 break;\n             case Statement.SUCCESS_NO_INFO: // -2\n-                if (row.getAction() == Row.ACTION_UPDATE ||\n-                    row.getAction() == Row.ACTION_DELETE)\n-                    _exceptions.add(new OptimisticException(failed));\n-                else if (_log.isTraceEnabled())\n+                if (_dict.platform.indexOf(\"Oracle\") > -1 &&\n+                    updateSuccessCnt != count.length) {\n+                    // Oracle batching specifics:\n+                    // treat update/delete of SUCCESS_NO_INFO as failed case\n+                    // because:\n+                    // 1. transaction should be rolled back.\n+                    // 2. if DataCache is enabled, objects in\n+                    //    cache should be removed.\n+                    if (failed != null)\n+                        _exceptions.add(new OptimisticException(failed));\n+                    else if (row.getAction() == Row.ACTION_INSERT)\n+                        throw new SQLException(_loc.get(\n+                            \"update-failed-no-failed-obj\",\n+                            String.valueOf(count[i]), \n+                            row.getSQL(_dict)).getMessage());\n+                }\n+                if (_log.isTraceEnabled())\n                     _log.trace(_loc.get(\"batch_update_info\",\n                         String.valueOf(cnt), \n                         row.getSQL(_dict)).getMessage());"},{"sha":"6604f9d176edbae044ceeb7bc5743a32dc5ade96","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/72df500c6e4eb583bfc5dd826c7c343a800b8be2/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/72df500c6e4eb583bfc5dd826c7c343a800b8be2/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties?ref=72df500c6e4eb583bfc5dd826c7c343a800b8be2","patch":"@@ -115,3 +115,4 @@ batch_update_info: ExecuteBatch command returns update count {0} for \\\n \tstatement {1}.\n cache-hit: SQL Cache hit with key: {0} in {1}\n cache-missed: SQL Cache missed with key: {0} in {1}    \n+batch_update_success_count: ExecuteBatch command returns update success count {0}\n\\ No newline at end of file"}]}

