{"sha":"72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2","node_id":"MDY6Q29tbWl0MjA2MzY0OjcyZjJjYjg1MTZlZTExYWNjYmI0Y2RhMWVkN2M2ZDg0NzliNzllZTI=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-16T22:13:26Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-16T22:13:26Z"},"message":"OPENJPA-1253: allow JoinColumn in conjunction with OneToMany annotation\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@815988 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5f1a43bc411b89d6665face76116b25c9b2ea5ad","url":"https://api.github.com/repos/apache/openjpa/git/trees/5f1a43bc411b89d6665face76116b25c9b2ea5ad"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2","html_url":"https://github.com/apache/openjpa/commit/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2/comments","author":null,"committer":null,"parents":[{"sha":"eb5bccdd493119854909f333bf16301488c93897","url":"https://api.github.com/repos/apache/openjpa/commits/eb5bccdd493119854909f333bf16301488c93897","html_url":"https://github.com/apache/openjpa/commit/eb5bccdd493119854909f333bf16301488c93897"}],"stats":{"total":235,"additions":228,"deletions":7},"files":[{"sha":"2ecf6e030dadf29dc764ab57e5a1e30a423a5313","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2","patch":"@@ -26,6 +26,7 @@\n import java.util.Map;\n import java.util.Set;\n \n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.enhance.ReflectingPersistenceCapable;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n@@ -133,6 +134,28 @@ public void map(boolean adapt) {\n \n             field.setUseClassCriteria(criteria);\n             return;\n+        } else { // this could be the owner in a bi-directional relation\n+            OpenJPAConfiguration conf = field.getRepository().getConfiguration();\n+            boolean isJoinColumnAllowedForToManyRelation = field.getRepository().\n+                getMetaDataFactory().getDefaults().isJoinColumnAllowedForToManyRelation(conf);\n+            if (isJoinColumnAllowedForToManyRelation) { \n+                ClassMapping inverse = field.getValueMapping().getTypeMapping();\n+                FieldMapping[] fmds = inverse.getFieldMappings();\n+                for (int i = 0; i < fmds.length; i++) {\n+                    if (field == fmds[i].getMappedByMapping()) {\n+                        int typeCode = fmds[i].getDeclaredTypeCode(); \n+                        if (typeCode == JavaTypes.ARRAY ||\n+                            typeCode == JavaTypes.COLLECTION ||\n+                            typeCode == JavaTypes.MAP) {\n+                            // this is a bi-directional oneToMany relation                         \n+                            ValueMappingInfo info = field.getValueInfo();\n+                            if (info.getColumns().size() == 0) \n+                                info.setColumns(fmds[i].getValueInfo().getColumns());\n+                        }\n+                        break;\n+                    }\n+                }\n+            }\n         }\n \n         // this is necessary to support openjpa 3 mappings, which didn't"},{"sha":"e0662be49b02e80f7703fa26babba525180a8377","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java?ref=72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2","patch":"@@ -22,6 +22,7 @@\n import java.util.Collection;\n import java.util.Iterator;\n \n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n@@ -106,7 +107,12 @@ protected Joins joinElementRelation(Joins joins, ClassMapping elem) {\n     }\n \n     public void map(boolean adapt) {\n-        field.getValueInfo().assertNoSchemaComponents(field, !adapt);\n+        OpenJPAConfiguration conf = field.getRepository().getConfiguration();\n+        boolean isJoinColumnAllowedForToManyRelation = field.getRepository().\n+            getMetaDataFactory().getDefaults().isJoinColumnAllowedForToManyRelation(conf);\n+        if (!isJoinColumnAllowedForToManyRelation) \n+            field.getValueInfo().assertNoSchemaComponents(field, !adapt);\n+        \n         field.getKeyMapping().getValueInfo().assertNoSchemaComponents\n             (field.getKey(), !adapt);\n "},{"sha":"5dd5691aaa3e058449f44745d8dd3809606737d2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","status":"modified","additions":29,"deletions":4,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","raw_url":"https://github.com/apache/openjpa/raw/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java?ref=72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2","patch":"@@ -63,6 +63,7 @@\n     private boolean _autoOff = true;\n     private boolean _superclassDiscriminatorStrategyByDefault = true;\n     private boolean _isAbstractMappingUniDirectional = false;\n+    private boolean _isJoinColumnAllowedForToManyRelation = false;\n     \n     /**\n      * Whether to require exact identity value types when creating object\n@@ -425,7 +426,7 @@ public void setPrivatePersistentProperties(boolean privateProps) {\n      * Whether OpenJPA allows bi-directional relationship in the MappedSuperclass.\n      * Prior to OpenJPA 2.0, the bi-directional relationship in the MappedSuperclass,\n      * is not blocked. This is contrary to the JPA specification, which states that \n-     * Persistent relationships defined by a mapped superclass must be\n+     * persistent relationships defined by a mapped superclass must be\n      * unidirectional.\n      * \n      * @param isAbstractMappingUniDirectional true if relationship defined in the \n@@ -441,14 +442,38 @@ public void setAbstractMappingUniDirectional(boolean isAbstractMappingUniDirecti\n      * Whether OpenJPA allows bi-directional relationship in the MappedSuperclass.\n      * Prior to OpenJPA 2.0, the bi-directional relationship in the MappedSuperclass,\n      * is not blocked. This is contrary to the JPA specification, which states that \n-     * Persistent relationships defined by a mapped superclass must be\n-     * unidirectional. The default value is true.\n+     * persistent relationships defined by a mapped superclass must be\n+     * unidirectional. The default value is false.\n      * \n      * @since 2.0.0\n      */\n     public boolean isAbstractMappingUniDirectional() {\n         return _isAbstractMappingUniDirectional;\n     }\n+    \n+    /**\n+     * Whether OpenJPA allows JoinColumn annotation in conjunction with \n+     * OneToMany annotation.\n+     * Prior to OpenJPA 2.0, the JoinColumn annotation is not allowed for \n+     * is OneToMany relation. JPA 2.0 spec relaxes this restriction.\n+     * \n+     * @param isJoinColumnAllowedForToManyRelation true if JoinColumn is \n+     *        allowed for OneToMany relation\n+     * @since 2.0.0\n+     */\n+    public void setJoinColumnAllowedForToManyRelation(boolean isJoinColumnAllowedForToManyRelation) {\n+        _isJoinColumnAllowedForToManyRelation = isJoinColumnAllowedForToManyRelation;\n+    }\n \n+    /**\n+     * Whether OpenJPA allows JoinColumn annotation in conjunction with \n+     * OneToMany annotation.\n+     * Prior to OpenJPA 2.0, the JoinColumn annotation is not allowed for \n+     * is OneToMany relation. JPA 2.0 spec relaxes this restriction. The\n+     * default value is false.\n+     * @since 2.0.0\n+     */\n+    public boolean isJoinColumnAllowedForToManyRelation() {\n+        return _isJoinColumnAllowedForToManyRelation;\n+    }\n }\n-"},{"sha":"7408bf034e648fe6b65a0a8b87392a20407fc9fc","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java?ref=72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2","patch":"@@ -110,8 +110,15 @@ public Member getMemberByProperty(ClassMetaData meta, String attribute,\n     /**\n      * Whether the relationship in MappedSuper class must be\n      * uni-directional.  \n-     * @return 2.0.0\n+     * @since 2.0.0\n      */\n     public boolean isAbstractMappingUniDirectional(OpenJPAConfiguration conf);\n+    \n+    /**\n+     * Whether the JoinColumn annotation is allowed in conjunction with toMany\n+     * relation.  \n+     * @since 2.0.0\n+     */\n+    public boolean isJoinColumnAllowedForToManyRelation(OpenJPAConfiguration conf);\n \n }"},{"sha":"7d62739b670e1347c2f6ceeae3d2bd51955454c2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java?ref=72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2","patch":"@@ -160,6 +160,11 @@ public boolean isMetaClass(Class<?> c) {\n     }\n \n     public boolean isAbstractMappingUniDirectional(OpenJPAConfiguration conf) {\n-        return true;\n+        return false;\n     }\n+    \n+    public boolean isJoinColumnAllowedForToManyRelation(OpenJPAConfiguration conf) {\n+        return false;\n+    }\n+    \n }"},{"sha":"a4eccf31af1b04c13ba10658b6ed75c66480e320","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_FK.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_FK.java","raw_url":"https://github.com/apache/openjpa/raw/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_FK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Bi_1ToM_FK.java?ref=72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.compat;\n+\n+import java.util.List;\n+\n+import javax.persistence.*;\n+\n+\n+@Entity\n+public class Bi_1ToM_FK {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @OneToMany(mappedBy=\"bi1mfk\")\n+    @JoinColumn(name=\"Bi1MFK_ColA\")\n+    private List<EntityC> entityAs = null;\n+    \n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public List<EntityC> getEntityAs() { \n+        return entityAs; \n+    }\n+\n+    public void setEntityAs(List<EntityC> entityAs) { \n+        this.entityAs = entityAs; \n+    }\n+}"},{"sha":"6810f6c136809b9cc3052a4de18e39dcc8352c54","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC.java","raw_url":"https://github.com/apache/openjpa/raw/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC.java?ref=72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.compat;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"JnCol_C\")\n+public class EntityC {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+    \n+    @ManyToOne\n+    Bi_1ToM_FK bi1mfk;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public void setBi1mfk(Bi_1ToM_FK bi1mfk) {\n+        this.bi1mfk = bi1mfk;\n+    }\n+    \n+    public Bi_1ToM_FK getBi1mfk() {\n+        return bi1mfk;\n+    }\n+}"},{"sha":"94461fc6882da4d0f0a48313e1da427faeb7b5a8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","raw_url":"https://github.com/apache/openjpa/raw/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java?ref=72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2","patch":"@@ -113,4 +113,25 @@ public void testMappedSuperClass() {\n             emf.close();\n         }\n     }\n+\n+    /*\n+     * Per JPA 2.0, JoinColumn annotation is allowed on OneToMany relations.\n+     */\n+    public void testJoinColumnOnToManyRelation() {\n+        OpenJPAEntityManagerFactorySPI emf =\n+            (OpenJPAEntityManagerFactorySPI)OpenJPAPersistence.\n+                createEntityManagerFactory(\"persistence_2_0\",\n+                    \"org/apache/openjpa/persistence/compat/\" +\n+                    \"persistence_2_0.xml\");\n+        try {\n+            EntityManager em = emf.createEntityManager();\n+            // trigger table creation\n+            em.getTransaction().begin();\n+            em.getTransaction().commit();\n+            em.close();\n+            emf.close();\n+        } catch (Exception e) {\n+            fail(\"JoinColumn annotation fails to be with OneToMany relation\");\n+        }\n+    }\n }"},{"sha":"240299acd81d416740e4942617287d794d9ee7e2","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/compat/persistence_2_0.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/compat/persistence_2_0.xml","raw_url":"https://github.com/apache/openjpa/raw/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/compat/persistence_2_0.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/compat/persistence_2_0.xml?ref=72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2","patch":"@@ -26,7 +26,9 @@\n     <persistence-unit name=\"persistence_2_0\" transaction-type=\"RESOURCE_LOCAL\">\n \t<class>org.apache.openjpa.persistence.compat.EntityA</class>\n \t<class>org.apache.openjpa.persistence.compat.EntityB</class>\n+\t<class>org.apache.openjpa.persistence.compat.EntityC</class>\n \t<class>org.apache.openjpa.persistence.compat.MappedSuper</class>\n+\t<class>org.apache.openjpa.persistence.compat.Bi_1ToM_FK</class>\n     \n     </persistence-unit>\n </persistence>\n\\ No newline at end of file"},{"sha":"0716c50f21e5fc8b196f24cf2dac3a545fd9f836","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java?ref=72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2","patch":"@@ -132,6 +132,7 @@\n     protected GetterFilter getterFilter = new GetterFilter();\n     protected SetterFilter setterFilter = new SetterFilter();\n     private Boolean _isAbstractMappingUniDirectional = null;\n+    private Boolean _isJoinColumnAllowedForToManyRelation = null;\n     \n     public PersistenceMetaDataDefaults() {\n         setCallbackMode(CALLBACK_RETHROW | CALLBACK_ROLLBACK |\n@@ -872,4 +873,15 @@ public boolean isAbstractMappingUniDirectional(OpenJPAConfiguration conf) {\n     public void setAbstractMappingUniDirectional(OpenJPAConfiguration conf) {\n         _isAbstractMappingUniDirectional = conf.getCompatibilityInstance().isAbstractMappingUniDirectional();\n     }\n+    \n+    public boolean isJoinColumnAllowedForToManyRelation(OpenJPAConfiguration conf) {\n+        if (_isJoinColumnAllowedForToManyRelation == null)\n+            setJoinColumnAllowedForToManyRelation(conf);\n+        return _isJoinColumnAllowedForToManyRelation;\n+    }\n+    \n+    public void setJoinColumnAllowedForToManyRelation(OpenJPAConfiguration conf) {\n+        _isJoinColumnAllowedForToManyRelation = conf.getCompatibilityInstance().\n+            isJoinColumnAllowedForToManyRelation();\n+    }\n }"},{"sha":"0153e708e1cd2ab1b36eddc8008e1cef09e379c1","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java?ref=72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2","patch":"@@ -186,6 +186,7 @@ public boolean afterSpecificationSet(Configuration c) {\n             conf.validationMode.set(String.valueOf(ValidationMode.NONE));\n         } else {\n             compatibility.setAbstractMappingUniDirectional(true);\n+            compatibility.setJoinColumnAllowedForToManyRelation(true);\n         }\n         return true;\n     }"}]}

