{"sha":"72f7b6b963a533542eeaddaac629481db62ca277","node_id":"MDY6Q29tbWl0MjA2MzY0OjcyZjdiNmI5NjNhNTMzNTQyZWVhZGRhYWM2Mjk0ODFkYjYyY2EyNzc=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-09-14T00:05:16Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-09-14T00:05:16Z"},"message":"Query fixes.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@443170 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"aa083b48df1c837eff097af115a311adab07d122","url":"https://api.github.com/repos/apache/openjpa/git/trees/aa083b48df1c837eff097af115a311adab07d122"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/72f7b6b963a533542eeaddaac629481db62ca277","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/72f7b6b963a533542eeaddaac629481db62ca277","html_url":"https://github.com/apache/openjpa/commit/72f7b6b963a533542eeaddaac629481db62ca277","comments_url":"https://api.github.com/repos/apache/openjpa/commits/72f7b6b963a533542eeaddaac629481db62ca277/comments","author":null,"committer":null,"parents":[{"sha":"913e54c93c2b03adadfb505ce4374c5de3f8818e","url":"https://api.github.com/repos/apache/openjpa/commits/913e54c93c2b03adadfb505ce4374c5de3f8818e","html_url":"https://github.com/apache/openjpa/commit/913e54c93c2b03adadfb505ce4374c5de3f8818e"}],"stats":{"total":24,"additions":14,"deletions":10},"files":[{"sha":"4225e55da11712462931fe43c31f320f9db9c33c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/72f7b6b963a533542eeaddaac629481db62ca277/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","raw_url":"https://github.com/apache/openjpa/raw/72f7b6b963a533542eeaddaac629481db62ca277/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java?ref=72f7b6b963a533542eeaddaac629481db62ca277","patch":"@@ -245,6 +245,13 @@ else if (pstate.joinedRel\n             : _class.getPrimaryKeyColumns();\n     }\n \n+    public boolean isVariable() {\n+        if (_actions == null)\n+            return false;\n+        Action action = (Action) _actions.getLast();\n+        return action.op == Action.UNBOUND_VAR || action.op == Action.VAR; \n+    }\n+\n     public void get(FieldMetaData field, boolean nullTraversal) {\n         if (_actions == null)\n             _actions = new LinkedList();"},{"sha":"8c2b2dcdea7f37fb5826c4c8270ea77e7a93e7b3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/72f7b6b963a533542eeaddaac629481db62ca277/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/72f7b6b963a533542eeaddaac629481db62ca277/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java?ref=72f7b6b963a533542eeaddaac629481db62ca277","patch":"@@ -660,8 +660,8 @@ private static ClassMapping getMapping(MappingRepository repos, Class cls,\n         ClassMapping mapping = repos.getMapping(cls, null, false);\n         if (mapping != null)\n             return mapping;\n-        if (!validate || cls.isInterface() || \n-            repos.getPersistenceAware(cls) != null)\n+        if (!validate || cls.isInterface() \n+            || repos.getPersistenceAware(cls) != null)\n             return null;\n         throw new MetaDataException(_loc.get(\"no-meta\", cls));\n     }"},{"sha":"8031cf989d9e9ae83851a8300b47e6fcc884f788","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/72f7b6b963a533542eeaddaac629481db62ca277/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/72f7b6b963a533542eeaddaac629481db62ca277/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java?ref=72f7b6b963a533542eeaddaac629481db62ca277","patch":"@@ -299,6 +299,10 @@ private QueryExpressions assertQueryExpression() {\n          * Throw proper exception if given value is a collection/map/array.\n          */\n         protected void assertNotContainer(Value val, StoreQuery q) {\n+            // variables represent container elements, not the container itself\n+            if (val.isVariable())\n+                return;\n+\n             Class type;\n             if (val instanceof Path) {\n                 FieldMetaData fmd = ((Path) val).last();"},{"sha":"3a013e5f5c9d077f55fd1c3f50917be61cf2e425","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/72f7b6b963a533542eeaddaac629481db62ca277/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/72f7b6b963a533542eeaddaac629481db62ca277/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=72f7b6b963a533542eeaddaac629481db62ca277","patch":"@@ -1358,7 +1358,7 @@ private Value getValue(JPQLNode node, int handleVar) {\n         // determind how to evauate a variabe\n         if (!val.isVariable())\n             return val;\n-        else if (handleVar == VAR_PATH)\n+        else if (handleVar == VAR_PATH && !(val instanceof Path))\n             return newPath(val, val.getMetaData());\n         else if (handleVar == VAR_ERROR)\n             throw parseException(EX_USER, \"unexpected-var\","},{"sha":"ae7c325df0fa17f7a8d91a40d7f05a07c5ed1bef","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/72f7b6b963a533542eeaddaac629481db62ca277/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/72f7b6b963a533542eeaddaac629481db62ca277/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=72f7b6b963a533542eeaddaac629481db62ca277","patch":"@@ -92,11 +92,6 @@\n     private static final Localizer _loc = Localizer.forPackage\n         (MetaDataRepository.class);\n \n-    // number of metadatas that have been registered thus far. This does not\n-    // include dynamically-generated subclasses; it is just the count of\n-    // user-created metadatas that were registered.\n-    private int _count = 0;\n-\n     // system sequence\n     private SequenceMetaData _sysSeq = null;\n \n@@ -742,7 +737,6 @@ public ClassMetaData addMetaData(Class cls, int access) {\n             if (_pawares.containsKey(cls))\n                 throw new MetaDataException(_loc.get(\"pc-and-aware\", cls));\n             _metas.put(cls, meta);\n-            _count++;\n         }\n         return meta;\n     }\n@@ -863,7 +857,6 @@ public synchronized boolean removeMetaData(Class cls) {\n             Class impl = (Class) _ifaces.remove(cls);\n             if (impl != null)\n                 _metas.remove(impl);\n-            _count--;\n             return true;\n         }\n         return false;"}]}

