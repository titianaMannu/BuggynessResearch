{"sha":"731649a2c91d5bdfcc572c7e2c43e5ae6c3458dd","node_id":"MDY6Q29tbWl0MjA2MzY0OjczMTY0OWEyYzkxZDViZGZjYzU3MmM3ZTJjNDNlNWFlNmMzNDU4ZGQ=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2014-02-05T23:12:37Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2014-02-05T23:12:37Z"},"message":"OPENJPA-2472: Fix concurrency bug in ClassMetaData. Patch contributed by Dalia Abo Sheasha.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1564989 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e564be625eb02b2f352c9f06729e43971318b3d0","url":"https://api.github.com/repos/apache/openjpa/git/trees/e564be625eb02b2f352c9f06729e43971318b3d0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/731649a2c91d5bdfcc572c7e2c43e5ae6c3458dd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/731649a2c91d5bdfcc572c7e2c43e5ae6c3458dd","html_url":"https://github.com/apache/openjpa/commit/731649a2c91d5bdfcc572c7e2c43e5ae6c3458dd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/731649a2c91d5bdfcc572c7e2c43e5ae6c3458dd/comments","author":null,"committer":null,"parents":[{"sha":"e21bcdfaa9be7b9d2592f5b5021c29bb8dd32955","url":"https://api.github.com/repos/apache/openjpa/commits/e21bcdfaa9be7b9d2592f5b5021c29bb8dd32955","html_url":"https://github.com/apache/openjpa/commit/e21bcdfaa9be7b9d2592f5b5021c29bb8dd32955"}],"stats":{"total":17,"additions":10,"deletions":7},"files":[{"sha":"a89abe1353f3e825ff057a2e380684c0fa6b208f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":10,"deletions":7,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/731649a2c91d5bdfcc572c7e2c43e5ae6c3458dd/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/731649a2c91d5bdfcc572c7e2c43e5ae6c3458dd/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=731649a2c91d5bdfcc572c7e2c43e5ae6c3458dd","patch":"@@ -2692,19 +2692,20 @@ public boolean hasAbstractPKField() {\n \n         // Default to false, set to true only if this type is abstract and\n         // declares a PKField.\n-        _hasAbstractPKField = Boolean.FALSE;\n+        Boolean temp = Boolean.FALSE;\n \n         if (isAbstract() == true) {\n             FieldMetaData[] declaredFields = getDeclaredFields();\n             if (declaredFields != null && declaredFields.length != 0) {\n                 for (FieldMetaData fmd : declaredFields) {\n                     if (fmd.isPrimaryKey()) {\n-                        _hasAbstractPKField = Boolean.TRUE;\n+                        temp = Boolean.TRUE;\n                         break;\n                     }\n                 }\n             }\n         }\n+        _hasAbstractPKField = temp;\n \n         return _hasAbstractPKField.booleanValue();\n     }\n@@ -2726,7 +2727,7 @@ public boolean hasPKFieldsFromAbstractClass() {\n         }\n \n         // Default to FALSE, until proven true.\n-        _hasPKFieldsFromAbstractClass = Boolean.FALSE;\n+        Boolean temp = Boolean.FALSE;\n \n         FieldMetaData[] pkFields = getPrimaryKeyFields();\n         for (FieldMetaData fmd : pkFields) {\n@@ -2741,11 +2742,12 @@ public boolean hasPKFieldsFromAbstractClass() {\n                     }\n                 }\n                 if (cmd == fmdDMDA) {\n-                    _hasPKFieldsFromAbstractClass = Boolean.TRUE;\n+                    temp = Boolean.TRUE;\n                     break;\n                 }\n             }\n         }\n+        _hasPKFieldsFromAbstractClass = temp;\n \n         return _hasPKFieldsFromAbstractClass.booleanValue();\n     }\n@@ -2783,10 +2785,11 @@ public String getSourceName(){\n                 }\n             }\n             int idsSize = ids.size();\n-            _pkAndNonPersistentManagedFmdIndexes = new int[idsSize];\n-            for(int i = 0; i<idsSize; i++){\n-                _pkAndNonPersistentManagedFmdIndexes[i] = ids.get(i).intValue();\n+            int[] temp = new int[idsSize];\n+            for (int i = 0; i < idsSize; i++) {\n+                temp[i] = ids.get(i).intValue();\n             }\n+            _pkAndNonPersistentManagedFmdIndexes = temp;\n         }\n         return _pkAndNonPersistentManagedFmdIndexes;\n     }"}]}

