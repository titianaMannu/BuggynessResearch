{"sha":"73d4992a2f9898a84a252d258e0ef176b939964b","node_id":"MDY6Q29tbWl0MjA2MzY0OjczZDQ5OTJhMmY5ODk4YTg0YTI1MmQyNThlMGVmMTc2YjkzOTk2NGI=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-05T16:32:37Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-05T16:32:37Z"},"message":"OPENJPA-1545: Refactored detach code out of BrokerImpl.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@919475 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5b1b3fcb56eb7de37dbc9091188eff2d41a2d710","url":"https://api.github.com/repos/apache/openjpa/git/trees/5b1b3fcb56eb7de37dbc9091188eff2d41a2d710"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/73d4992a2f9898a84a252d258e0ef176b939964b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/73d4992a2f9898a84a252d258e0ef176b939964b","html_url":"https://github.com/apache/openjpa/commit/73d4992a2f9898a84a252d258e0ef176b939964b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/73d4992a2f9898a84a252d258e0ef176b939964b/comments","author":null,"committer":null,"parents":[{"sha":"0bd96d988008081c0ee99df148cfd0f29a9668d1","url":"https://api.github.com/repos/apache/openjpa/commits/0bd96d988008081c0ee99df148cfd0f29a9668d1","html_url":"https://github.com/apache/openjpa/commit/0bd96d988008081c0ee99df148cfd0f29a9668d1"}],"stats":{"total":131,"additions":113,"deletions":18},"files":[{"sha":"9a13f81ebfd1871b2bcf05e8cf5a6e589f8c0627","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":6,"deletions":18,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/73d4992a2f9898a84a252d258e0ef176b939964b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/73d4992a2f9898a84a252d258e0ef176b939964b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=73d4992a2f9898a84a252d258e0ef176b939964b","patch":"@@ -68,6 +68,7 @@\n import org.apache.openjpa.lib.util.ReferenceMap;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.meta.SequenceMetaData;\n import org.apache.openjpa.meta.ValueMetaData;\n@@ -85,6 +86,7 @@\n import org.apache.openjpa.util.ObjectNotFoundException;\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.OptimisticException;\n+import org.apache.openjpa.util.Proxy;\n import org.apache.openjpa.util.RuntimeExceptionTranslator;\n import org.apache.openjpa.util.StoreException;\n import org.apache.openjpa.util.UnsupportedException;\n@@ -245,6 +247,8 @@\n     private LifecycleEventManager _lifeEventManager = null;\n     private int _lifeCallbackMode = 0;\n \n+    private DetachManagerLite _dmLite = new DetachManagerLite();\n+    \n     private transient boolean _initializeWasInvoked = false;\n     private transient boolean _fromWriteBehindCallback = false;\n     private LinkedList<FetchConfiguration> _fcs;\n@@ -3316,7 +3320,7 @@ private void detachAllInternal(OpCallbacks call) {\n             if (!sm.isPersistent())\n                 itr.remove();\n             else if (!sm.getMetaData().isDetachable()) {\n-                sm.release(true);\n+                sm.release(true); \n                 itr.remove();\n             }\n         }\n@@ -3349,23 +3353,7 @@ private void detachAllInternalLite() {\n         if (_transAdditions != null) {\n             _transAdditions.clear();\n         }\n-\n-        // Detach all.\n-        TransferFieldManager fm = new TransferFieldManager();\n-        for (StateManagerImpl s : states) {\n-            ClassMetaData cmd = s.getMetaData();\n-            if (s.isPersistent() && cmd.isDetachable()) {\n-                //Clean up an fields that are LargeResultSets.\n-                for (FieldMetaData fmd : cmd.getLrsFields()) {\n-                    int index = fmd.getIndex();\n-                    fm.storeObjectField(index, null);\n-                    s.replaceField(s.getPersistenceCapable(), fm, index);\n-                    fm.clear();\n-                }\n-                s.unproxyFields();\n-                s.getPersistenceCapable().pcReplaceStateManager(null);\n-            }\n-        }\n+        _dmLite.detachAll(states);\n     }\n     public Object attach(Object obj, boolean copyNew, OpCallbacks call) {\n         if (obj == null)"},{"sha":"f5180cf78fbae478edf88662f155c57c3db441be","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManagerLite.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/apache/openjpa/blob/73d4992a2f9898a84a252d258e0ef176b939964b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManagerLite.java","raw_url":"https://github.com/apache/openjpa/raw/73d4992a2f9898a84a252d258e0ef176b939964b/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManagerLite.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManagerLite.java?ref=73d4992a2f9898a84a252d258e0ef176b939964b","patch":"@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.kernel;\n+\n+import java.util.Collection;\n+\n+import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.util.Proxy;\n+\n+/**\n+ * \n+ *\n+ */\n+public class DetachManagerLite {\n+    final TransferFieldManager _fm;\n+\n+    public DetachManagerLite() {\n+        _fm = new TransferFieldManager();\n+    }\n+\n+    /**\n+     * This method will detach all provided StateManagers in place.\n+     * \n+     * @param states\n+     *            The StateManagers to be detached.\n+     */\n+    public void detachAll(Collection<StateManagerImpl> states) {\n+        for (StateManagerImpl sm : states) {\n+            ClassMetaData cmd = sm.getMetaData();\n+            if (sm.isPersistent() && cmd.isDetachable()) {\n+                PersistenceCapable pc = sm.getPersistenceCapable();\n+                // Detach proxy fields.\n+                for (FieldMetaData fmd : cmd.getProxyFields()) {\n+                    detachProxyField(fmd, pc, sm);\n+                }\n+                pc.pcReplaceStateManager(null);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Detach the provided proxy field.\n+     * \n+     * @param fmd\n+     *            The field to be detached.\n+     * @param pc\n+     *            The PersistenceCapable that the field belongs to.\n+     * @param sm\n+     *            The StateManagerImpl that the PersistenceCapable belongs to.\n+     */\n+    private void detachProxyField(FieldMetaData fmd, PersistenceCapable pc, StateManagerImpl sm) {\n+        int fieldIndex = fmd.getIndex();\n+        if (fmd.isLRS() == true) {\n+            // need to null out LRS fields.\n+            nullField(fieldIndex, pc, sm);\n+        } else {\n+            Object o = sm.fetchObject(fieldIndex);\n+            if (o instanceof Proxy) {\n+                // Get unproxied object and replace\n+                Proxy proxy = (Proxy) o;\n+                Object unproxied = proxy.copy(proxy);\n+                _fm.storeObjectField(fieldIndex, unproxied);\n+                sm.replaceField(pc, _fm, fieldIndex);\n+                _fm.clear();\n+                // clean up old proxy\n+                proxy.setOwner(null, -1);\n+                if (proxy.getChangeTracker() != null) {\n+                    proxy.getChangeTracker().stopTracking();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Private worker method that replaces the value at fieldIndex in sm with null.\n+     * \n+     * @param fieldIndex\n+     *            The index of the field to be nulled out.\n+     * @param pc\n+     *            The PersistenceCapable that the field belongs to.\n+     * @param sm\n+     *            The StateManagerImpl that the PersistenceCapable belongs to.\n+     */\n+    private void nullField(int fieldIndex, PersistenceCapable pc, StateManagerImpl sm) {\n+        _fm.storeObjectField(fieldIndex, null);\n+        sm.replaceField(pc, _fm, fieldIndex);\n+        _fm.clear();\n+    }\n+}"}]}

