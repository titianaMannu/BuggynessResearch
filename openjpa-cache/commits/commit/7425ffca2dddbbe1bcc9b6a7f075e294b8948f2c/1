{"sha":"7425ffca2dddbbe1bcc9b6a7f075e294b8948f2c","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc0MjVmZmNhMmRkZGJiZTFiY2M5YjZhN2YwNzVlMjk0Yjg5NDhmMmM=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-04-22T16:12:50Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-04-22T16:12:50Z"},"message":"OPENJPA-1613 Per JPA spec, OpenJPA should take the @Transient annotation into account when making a default access determination.  This commit includes test code contributed by Simon Droscher.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@936930 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5f88cfb10e6475dd8ef3ad43b0825287b927f521","url":"https://api.github.com/repos/apache/openjpa/git/trees/5f88cfb10e6475dd8ef3ad43b0825287b927f521"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7425ffca2dddbbe1bcc9b6a7f075e294b8948f2c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7425ffca2dddbbe1bcc9b6a7f075e294b8948f2c","html_url":"https://github.com/apache/openjpa/commit/7425ffca2dddbbe1bcc9b6a7f075e294b8948f2c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7425ffca2dddbbe1bcc9b6a7f075e294b8948f2c/comments","author":null,"committer":null,"parents":[{"sha":"4ad9478ffab43c6f5aaa6def4b2074fb009bb2f9","url":"https://api.github.com/repos/apache/openjpa/commits/4ad9478ffab43c6f5aaa6def4b2074fb009bb2f9","html_url":"https://github.com/apache/openjpa/commit/4ad9478ffab43c6f5aaa6def4b2074fb009bb2f9"}],"stats":{"total":278,"additions":265,"deletions":13},"files":[{"sha":"2b0d4462c0cf4dadc3990e42147ee183ff705bd7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/RestrictedMetaDataRepository.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/7425ffca2dddbbe1bcc9b6a7f075e294b8948f2c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/RestrictedMetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/7425ffca2dddbbe1bcc9b6a7f075e294b8948f2c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/RestrictedMetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/RestrictedMetaDataRepository.java?ref=7425ffca2dddbbe1bcc9b6a7f075e294b8948f2c","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.enhance;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.StringTokenizer;\n+\n+import org.apache.openjpa.meta.MetaDataRepository;\n+\n+/**\n+ * A simple metadata repository wrapper which removes selected types\n+ * from the set of names returned by getPersistentTypeNames. \n+ * This MDR provides a simple method to skip extraneous and more important, \n+ * purposefully erroneous classes during enhancement.  This \n+ * especially useful in the case where all pu's are enhanced generically,\n+ * automatically picking up all entities in the classpath.\n+ */\n+@SuppressWarnings(\"serial\")\n+public class RestrictedMetaDataRepository extends MetaDataRepository {\n+\n+    private Set<String> _excludedTypes = new HashSet<String>();\n+    \n+    public String getExcludedTypes() {\n+        return _excludedTypes.toString();\n+    }\n+    \n+    public void setExcludedTypes(String types) {\n+        StringTokenizer strTok = new StringTokenizer(types,\",\");\n+        while (strTok.hasMoreTokens()) {\n+            _excludedTypes.add(strTok.nextToken());\n+        }\n+    }\n+    \n+    public Set<String> getPersistentTypeNames(boolean devpath, ClassLoader envLoader) {\n+        Set<String> types = super.getPersistentTypeNames(devpath, envLoader);\n+        String[] typeArray = types.toArray(new String[types.size()]);\n+        for (String type : typeArray) {\n+            if(_excludedTypes.contains(type)) {\n+                types.remove(type);\n+            }\n+        }\n+        return types;\n+    }\n+}"},{"sha":"892673fb88d90b219af25fed923fe4ad017d8284","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestEnhancementWithMultiplePUs.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7425ffca2dddbbe1bcc9b6a7f075e294b8948f2c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestEnhancementWithMultiplePUs.java","raw_url":"https://github.com/apache/openjpa/raw/7425ffca2dddbbe1bcc9b6a7f075e294b8948f2c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestEnhancementWithMultiplePUs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestEnhancementWithMultiplePUs.java?ref=7425ffca2dddbbe1bcc9b6a7f075e294b8948f2c","patch":"@@ -140,6 +140,14 @@ public void write(BCClass type) throws IOException {\n         };\n \n         opts = new Options();\n+        // Use a restricted mdr.  This mdr will not hand out metadata for excluded\n+        // types.  These are types that have known issues and should not be enhanced.\n+        // This test tries to enhance all persistent types in the classpath and that\n+        // can be problematic for tests which include entities that this test should\n+        // not attempt to enhance.\n+        opts.setProperty(\"MetaDataRepository\", \n+            \"org.apache.openjpa.enhance.RestrictedMetaDataRepository(excludedTypes=\" +\n+            \"org.apache.openjpa.persistence.jdbc.annotations.UnenhancedMixedAccess)\");\n         opts.put(PCEnhancer.class.getName() + \"#bytecodeWriter\", writer);\n         PCEnhancer.run(null, opts);\n "},{"sha":"b302bf70f17c85aaca6eda406a9528fb1209325e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/ImplicitFieldAccessBase.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7425ffca2dddbbe1bcc9b6a7f075e294b8948f2c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/ImplicitFieldAccessBase.java","raw_url":"https://github.com/apache/openjpa/raw/7425ffca2dddbbe1bcc9b6a7f075e294b8948f2c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/ImplicitFieldAccessBase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/ImplicitFieldAccessBase.java?ref=7425ffca2dddbbe1bcc9b6a7f075e294b8948f2c","patch":"@@ -28,7 +28,7 @@\n import javax.persistence.ManyToMany;\n import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n-import javax.persistence.Transient;\n+// import javax.persistence.Transient;\n \n /**\n  * Domain classes used by meta-featureSelection testing.\n@@ -139,8 +139,10 @@ public void setMapRelationKeyBasic(Map<Integer, ExplicitFieldAccess> map) {\n \t/** This method is annotated but transient to verify that placement of\n \t * annotation does not confuse the determination of implicit access\n \t * style of this class.\n+\t * OPENJPA-1613 - per spec and OpenJPA 1.x behavior, the Transient annotation\n+\t * is now taken into consideration when making a default access determination.\n \t * */\n-\t@Transient\n+\t//\t@Transient\n \tpublic int getTransient() {\n \t\treturn 42;\n \t}"},{"sha":"23204a23d1db3d22643eae107a00bf3f984ef3e2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/AbstractSuperclass.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/7425ffca2dddbbe1bcc9b6a7f075e294b8948f2c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/AbstractSuperclass.java","raw_url":"https://github.com/apache/openjpa/raw/7425ffca2dddbbe1bcc9b6a7f075e294b8948f2c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/AbstractSuperclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/AbstractSuperclass.java?ref=7425ffca2dddbbe1bcc9b6a7f075e294b8948f2c","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import javax.persistence.MappedSuperclass;\n+import javax.persistence.Transient;\n+\n+@MappedSuperclass\n+public abstract class AbstractSuperclass {\n+\n+    private String someProperty;\n+\n+    @Transient\n+    public String getSomeProperty() {\n+        return someProperty;\n+    }\n+\n+    public void setSomeProperty(String prop) {\n+        this.someProperty = prop;\n+    }\n+}\n+"},{"sha":"f03d1ed8a31c56a09a51cc7210184004a30b11b9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/SubclassPerson.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/7425ffca2dddbbe1bcc9b6a7f075e294b8948f2c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/SubclassPerson.java","raw_url":"https://github.com/apache/openjpa/raw/7425ffca2dddbbe1bcc9b6a7f075e294b8948f2c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/SubclassPerson.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/SubclassPerson.java?ref=7425ffca2dddbbe1bcc9b6a7f075e294b8948f2c","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import javax.persistence.Basic;\n+import javax.persistence.Column;\n+\n+@Entity\n+@Table(name=\"PERSON_SIMPLE\")\n+public class SubclassPerson extends AbstractSuperclass {\n+    private int id;\n+    private String forename;\n+    private String surname;\n+\n+    @Id\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    @Basic\n+    @Column(name = \"FORENAME\")\n+    public String getForename() {\n+        return forename;\n+    }\n+\n+    public void setForename(String forename) {\n+        this.forename = forename;\n+    }\n+\n+    @Basic\n+    @Column(name = \"SURNAME\")\n+    public String getSurname() {\n+        return surname;\n+    }\n+\n+    public void setSurname(String surname) {\n+        this.surname = surname;\n+    }\n+}"},{"sha":"d0d72511e9ad22ebdc70fcee47fa5925ec993ef1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestSubclassOfAbstractSuperclass.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/7425ffca2dddbbe1bcc9b6a7f075e294b8948f2c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestSubclassOfAbstractSuperclass.java","raw_url":"https://github.com/apache/openjpa/raw/7425ffca2dddbbe1bcc9b6a7f075e294b8948f2c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestSubclassOfAbstractSuperclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestSubclassOfAbstractSuperclass.java?ref=7425ffca2dddbbe1bcc9b6a7f075e294b8948f2c","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityTransaction;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test persisting a class which has an abstract superclass.\n+ */\n+public class TestSubclassOfAbstractSuperclass\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(SubclassPerson.class);\n+    }\n+\n+    public void testPersist() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(new SubclassPerson());\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestPersistence.class);\n+    }\n+}\n+"},{"sha":"e62e3981ee64bec9138229ac42b1a83585319db0","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","status":"modified","additions":38,"deletions":11,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/7425ffca2dddbbe1bcc9b6a7f075e294b8948f2c/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/7425ffca2dddbbe1bcc9b6a7f075e294b8948f2c/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java?ref=7425ffca2dddbbe1bcc9b6a7f075e294b8948f2c","patch":"@@ -127,7 +127,7 @@\n \n     protected MemberFilter fieldFilter = new MemberFilter(Field.class);\n     protected MemberFilter methodFilter = new MemberFilter(Method.class);\n-    protected TransientFilter nonTransientFilter = new TransientFilter();\n+    protected TransientFilter nonTransientFilter = new TransientFilter(false);\n     protected AnnotatedFilter annotatedFilter = new AnnotatedFilter();\n     protected GetterFilter getterFilter = new GetterFilter();\n     protected SetterFilter setterFilter = new SetterFilter();\n@@ -344,7 +344,8 @@ private int determineAccessType(ClassMetaData meta) {\n     \t}\n     \tif (sup != null && !AccessCode.isUnknown(sup))\n     \t\treturn sup.getAccessType();\n-    \t\n+\n+        trace(meta, _loc.get(\"access-default\", meta, AccessCode.toClassString(getDefaultAccessType())));\n         return getDefaultAccessType();\n     }\n     \n@@ -364,7 +365,7 @@ private int determineImplicitAccessType(Class<?> cls, OpenJPAConfiguration\n                 getDeclaredFieldsAction(cls));\n \t\tMethod[] methods = AccessController.doPrivileged(\n \t\t\t\tJ2DoPrivHelper.getDeclaredMethodsAction(cls));\n-        List<Field> fields = filter(allFields, nonTransientFilter);\n+        List<Field> fields = filter(allFields, new TransientFilter(true));\n         /*\n          * OpenJPA 1.x permitted private properties to be persistent.  This is\n          * contrary to the JPA 1.0 specification, which states that persistent\n@@ -374,15 +375,14 @@ private int determineImplicitAccessType(Class<?> cls, OpenJPAConfiguration\n          */\n         getterFilter.setIncludePrivate(\n             conf.getCompatibilityInstance().getPrivatePersistentProperties());\n-        List<Method> getters = filter(methods, getterFilter, \n-        \t\tnonTransientFilter);\n+        List<Method> getters = filter(methods, getterFilter);\n         if (fields.isEmpty() && getters.isEmpty())\n         \treturn AccessCode.EMPTY;\n         \n         fields = filter(fields, annotatedFilter);\n         getters = filter(getters, annotatedFilter);\n         \n-\t\tList<Method> setters = filter(methods, setterFilter);\n+        List<Method> setters = filter(methods, setterFilter);\n         getters =  matchGetterAndSetter(getters, setters);\n         \n         boolean mixed = !fields.isEmpty() && !getters.isEmpty();\n@@ -477,13 +477,24 @@ private int determineExplicitAccessType(Class<?> cls) {\n     \t\tMethod[] publicMethods = AccessController.doPrivileged(\n               J2DoPrivHelper.getDeclaredMethodsAction(meta.getDescribedType()));\n         \n-    \t\tList<Method> getters = filter(publicMethods, methodFilter, \n+            /*\n+             * OpenJPA 1.x permitted private accessor properties to be persistent.  This is\n+             * contrary to the JPA 1.0 specification, which states that persistent\n+             * properties must be public or protected. OpenJPA 2.0+ will adhere\n+             * to the specification by default, but provides a compatibility\n+             * option to provide pre-2.0 behavior.\n+             */\n+            getterFilter.setIncludePrivate(\n+                meta.getRepository().getConfiguration().getCompatibilityInstance().getPrivatePersistentProperties());\n+\n+            List<Method> getters = filter(publicMethods, methodFilter, \n                 getterFilter, \n                 ignoreTransient ? null : nonTransientFilter, \n         \t\tunknown || isProperty ? null : annotatedFilter, \n                 explicit ? (isProperty ? null : propertyAccessFilter) : null);\n-    \t\tList<Method> setters = filter(publicMethods, setterFilter);\n-    \t\treturn getters = matchGetterAndSetter(getters, setters);\n+            \n+            List<Method> setters = filter(publicMethods, setterFilter);\n+            return getters = matchGetterAndSetter(getters, setters);\n     \t}\n         \n     \treturn Collections.EMPTY_LIST;\n@@ -553,7 +564,13 @@ void warn(ClassMetaData meta, Localizer.Message message) {\n \t\t.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n     \tlog.warn(message.toString());\n     }\n-    \n+\n+    void trace(ClassMetaData meta, Localizer.Message message) {\n+        Log log = meta.getRepository().getConfiguration()\n+        .getLog(OpenJPAConfiguration.LOG_RUNTIME);\n+        log.trace(message.toString());\n+    }\n+\n     @Override\n     protected List<String> getFieldAccessNames(ClassMetaData meta) {\n     \treturn toNames(getPersistentFields(meta, false));\n@@ -839,10 +856,20 @@ public boolean includes(AnnotatedElement obj) {\n     }\n \n     /**\n-     * Selects all non-transient element.\n+     * Selects non-transient elements.  Selectively will examine only the \n+     * transient field modifier.\n      */\n     static class TransientFilter implements InclusiveFilter<AnnotatedElement> {\n+        final boolean modifierOnly;\n+        \n+        public TransientFilter(boolean modOnly) {\n+            modifierOnly = modOnly;\n+        }\n+        \n         public boolean includes(AnnotatedElement obj) {\n+            if (modifierOnly) {\n+                return !Modifier.isTransient(((Member)obj).getModifiers());\n+            }\n         \treturn !obj.isAnnotationPresent(Transient.class) && \n         \t       !Modifier.isTransient(((Member)obj).getModifiers());\n         }"},{"sha":"9755b4e4ee60c884879a0294f669cc433c5aac87","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7425ffca2dddbbe1bcc9b6a7f075e294b8948f2c/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/7425ffca2dddbbe1bcc9b6a7f075e294b8948f2c/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties?ref=7425ffca2dddbbe1bcc9b6a7f075e294b8948f2c","patch":"@@ -25,6 +25,9 @@ access-none: Property \"{1}\" in class \"{0}\" is not annotated an instance field \\\n access-unknown: Access style for \"{0}\" can not be determined.\n access-no-property: No field or getter method for attribute \"{1}\" can be found \\\n \tin \"{0}\".\n+access-default: Access style for \"{0}\" can not be determined.  The default \"{1}\" will be used. \\\n+    If this access style is not correct, specify the correct style explicitly on the \\\n+    persistent type or within the mapping file.\n close-invoked: You have closed the EntityManager, though the persistence \\\n     context will remain active until the current transaction commits.\n no-managed-trans: There is no managed transaction in progress to sync this \\\n@@ -232,3 +235,4 @@ cache-retrieve-override: The setting of CacheRetrieveMode.USE is ignored and set\n null-detach: Can not detach null entity\n override-named-query-lock-mode: Encountered a read lock level less than LockModeType.READ when processing the \\\n NamedQuery {0} \"{1}\" in class \"{2}\". Setting query lock level to LockModeType.READ.\n+access-default: Access style for \"{0}\" can not be determined.  The default access of level of \"{1}\" will be used."}]}

