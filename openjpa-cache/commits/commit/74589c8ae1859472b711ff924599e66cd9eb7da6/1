{"sha":"74589c8ae1859472b711ff924599e66cd9eb7da6","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc0NTg5YzhhZTE4NTk0NzJiNzExZmY5MjQ1OTllNjZjZDllYjdkYTY=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-12-13T00:16:33Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-12-13T00:16:33Z"},"message":"Use most derived available classloader when loading plugins so that we can \nload application classes when the application uses a derived loader.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@486424 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"13743a0bc42c80b8f04a1d421a48664a7a2d88ca","url":"https://api.github.com/repos/apache/openjpa/git/trees/13743a0bc42c80b8f04a1d421a48664a7a2d88ca"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/74589c8ae1859472b711ff924599e66cd9eb7da6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/74589c8ae1859472b711ff924599e66cd9eb7da6","html_url":"https://github.com/apache/openjpa/commit/74589c8ae1859472b711ff924599e66cd9eb7da6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/74589c8ae1859472b711ff924599e66cd9eb7da6/comments","author":null,"committer":null,"parents":[{"sha":"0ffb985316140a49fb1e0c868e97f57d7f6c9ace","url":"https://api.github.com/repos/apache/openjpa/commits/0ffb985316140a49fb1e0c868e97f57d7f6c9ace","html_url":"https://github.com/apache/openjpa/commit/0ffb985316140a49fb1e0c868e97f57d7f6c9ace"}],"stats":{"total":38,"additions":35,"deletions":3},"files":[{"sha":"10ec4bba2ef540f41dce4ba26ffe681d5caa5a6c","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","status":"modified","additions":35,"deletions":3,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/74589c8ae1859472b711ff924599e66cd9eb7da6/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","raw_url":"https://github.com/apache/openjpa/raw/74589c8ae1859472b711ff924599e66cd9eb7da6/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java?ref=74589c8ae1859472b711ff924599e66cd9eb7da6","patch":"@@ -127,12 +127,10 @@ static Object newInstance(String clsName, Value val, Configuration conf,\n         ClassLoader loader, boolean fatal) {\n         if (StringUtils.isEmpty(clsName))\n             return null;\n-        if (loader == null && conf != null)\n-            loader = conf.getClass().getClassLoader();\n \n         Class cls = null;\n         try {\n-            cls = Strings.toClass(clsName, loader);\n+            cls = Strings.toClass(clsName, findDerivedLoader(conf, loader));\n         } catch (RuntimeException re) {\n             if (val != null)\n                 re = getCreateException(clsName, val, re);\n@@ -158,6 +156,40 @@ static Object newInstance(String clsName, Value val, Configuration conf,\n         }\n     }\n \n+    /**\n+     * Attempt to find a derived loader that delegates to our target loader.\n+     * This allows application loaders that delegate appropriately for known\n+     * classes first crack at class names.\n+     */\n+    private static ClassLoader findDerivedLoader(Configuration conf,\n+        ClassLoader loader) {\n+        // we always prefer the thread loader, because it's the only thing we\n+        // can access that isn't bound to the OpenJPA classloader, unless\n+        // the conf object is of a custom class\n+        ClassLoader ctxLoader = Thread.currentThread().getContextClassLoader();\n+        if (loader == null) {\n+            if (ctxLoader != null)\n+                return ctxLoader;\n+            if (conf != null)\n+                return conf.getClass().getClassLoader();\n+            return Configurations.class.getClassLoader();\n+        }\n+\n+        for (ClassLoader parent = ctxLoader; parent != null; \n+            parent = parent.getParent()) {\n+            if (parent == loader)\n+                return ctxLoader;\n+        }\n+        if (conf != null) {\n+            for (ClassLoader parent = conf.getClass().getClassLoader(); \n+                parent != null; parent = parent.getParent()) {\n+                if (parent == loader)\n+                    return conf.getClass().getClassLoader();\n+            }\n+        }\n+        return loader;\n+    }\n+\n     /**\n      * Set the given {@link Configuration} instance from the command line\n      * options provided. All property names of the given configuration are"}]}

