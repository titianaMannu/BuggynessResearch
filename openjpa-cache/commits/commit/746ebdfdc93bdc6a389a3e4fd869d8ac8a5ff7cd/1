{"sha":"746ebdfdc93bdc6a389a3e4fd869d8ac8a5ff7cd","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc0NmViZGZkYzkzYmRjNmEzODlhM2U0ZmQ4NjlkOGFjOGE1ZmY3Y2Q=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-08-24T19:05:51Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-08-24T19:05:51Z"},"message":"Slightly cleaner and in some cases more efficient exclusion of \npersistence-aware types from mapping tool actions.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@434473 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3d9ca4c3b3983edae2e6b97acb875ccba1e00c6c","url":"https://api.github.com/repos/apache/openjpa/git/trees/3d9ca4c3b3983edae2e6b97acb875ccba1e00c6c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/746ebdfdc93bdc6a389a3e4fd869d8ac8a5ff7cd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/746ebdfdc93bdc6a389a3e4fd869d8ac8a5ff7cd","html_url":"https://github.com/apache/openjpa/commit/746ebdfdc93bdc6a389a3e4fd869d8ac8a5ff7cd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/746ebdfdc93bdc6a389a3e4fd869d8ac8a5ff7cd/comments","author":null,"committer":null,"parents":[{"sha":"8fbfa8aeccd40d57dff2929d5993f0b441ccf834","url":"https://api.github.com/repos/apache/openjpa/commits/8fbfa8aeccd40d57dff2929d5993f0b441ccf834","html_url":"https://github.com/apache/openjpa/commit/8fbfa8aeccd40d57dff2929d5993f0b441ccf834"}],"stats":{"total":82,"additions":37,"deletions":45},"files":[{"sha":"38241ded8f68df1e3ee0918c8e7094fe945d601e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","status":"modified","additions":36,"deletions":43,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/746ebdfdc93bdc6a389a3e4fd869d8ac8a5ff7cd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/746ebdfdc93bdc6a389a3e4fd869d8ac8a5ff7cd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java?ref=746ebdfdc93bdc6a389a3e4fd869d8ac8a5ff7cd","patch":"@@ -641,11 +641,28 @@ private void add(Class cls) {\n         if (cls == null)\n             return;\n \n-        _flush = true;\n-        _flushSchema = true;\n         MappingRepository repos = getRepository();\n         repos.setStrategyInstaller(new MappingStrategyInstaller(repos));\n-        getMapping(repos, cls);\n+        if (getMapping(repos, cls, true) != null) {\n+            _flush = true;\n+            _flushSchema = true;\n+        }\n+    }\n+\n+    /**\n+     * Return the mapping for the given type, or null if the type is\n+     * persistence-aware.\n+     */\n+    private static ClassMapping getMapping(MappingRepository repos, Class cls,\n+        boolean validate) {\n+        // this will parse all possible metadata rsrcs looking for cls, so\n+        // will detect if p-aware\n+        ClassMapping mapping = repos.getMapping(cls, null, false);\n+        if (mapping != null)\n+            return mapping;\n+        if (!validate || repos.getPersistenceAware(cls) != null)\n+            return null;\n+        throw new MetaDataException(_loc.get(\"no-meta\", cls));\n     }\n \n     /**\n@@ -680,11 +697,12 @@ private void refresh(Class cls) {\n         if (cls == null)\n             return;\n \n-        _flush = true;\n-        _flushSchema = true;\n         MappingRepository repos = getRepository();\n         repos.setStrategyInstaller(new RefreshStrategyInstaller(repos));\n-        getMapping(repos, cls);\n+        if (getMapping(repos, cls, true) != null) {\n+            _flush = true;\n+            _flushSchema = true;\n+        }\n     }\n \n     /**\n@@ -694,11 +712,11 @@ private void validate(Class cls) {\n         if (cls == null)\n             return;\n \n-        _flushSchema = !SCHEMA_ACTION_NONE.equals(_schemaAction)\n-            && !SchemaTool.ACTION_ADD.equals(_schemaAction);\n         MappingRepository repos = getRepository();\n         repos.setStrategyInstaller(new RuntimeStrategyInstaller(repos));\n-        getMapping(repos, cls);\n+        if (getMapping(repos, cls, true) != null)\n+            _flushSchema = !SCHEMA_ACTION_NONE.equals(_schemaAction)\n+                && !SchemaTool.ACTION_ADD.equals(_schemaAction);\n     }\n \n     /**\n@@ -708,13 +726,13 @@ private void buildSchema(Class cls) {\n         if (cls == null)\n             return;\n \n-        _flushSchema = true;\n         MappingRepository repos = getRepository();\n         repos.setStrategyInstaller(new RuntimeStrategyInstaller(repos));\n-        if (!getMapping(repos, cls))\n-        \treturn;\n+        if (getMapping(repos, cls, true) == null)\n+            return;\n \n         // set any logical pks to non-logical so they get flushed\n+        _flushSchema = true;\n         Schema[] schemas = _schema.getSchemas();\n         Table[] tables;\n         Column[] cols;\n@@ -732,31 +750,6 @@ private void buildSchema(Class cls) {\n         }\n     }\n \n-    /**\n-     * Gets mapping for the given class. \n-     * If the repository does not contain metadata for the class and raises\n-     * a non-fatal exception on lookup, the exception is swallowed with a\n-     * warning message, as the class is likely to be a persistence-aware class.\n-     * \n-     * @param cls a class to be mapped\n-     * \n-     * @return true if the mapping of the class is found, false otherwise.\n-     */\n-    boolean getMapping(MappingRepository repos, Class cls) {\n-    \ttry {\n-    \t\trepos.getMapping(cls, null, true);\n-    \t} catch (MetaDataException mex) {\n-    \t\tif (!mex.isFatal()) {\n-\t\t\t\tif (_log != null && _log.isWarnEnabled()) {\n-\t\t\t\t\t_log.warn(_loc.get(\"no-mapping-aware\",cls));\n-\t\t\t\t}\n-\t\t\t\treturn false;\n-    \t\t} else {\n-    \t\t\tthrow mex;\n-    \t\t}\n-\t    }\n-    \treturn true;\n-    }\n     /**\n      * Drop mapping for given class.\n      */\n@@ -792,10 +785,10 @@ private void drop(Class cls) {\n     ////////\n \n     /**\n-     * Usage: java org.apache.openjpa.jdbc.meta.MappingTool [option]* [-action/-a\n-     * &lt;refresh | add | buildSchema | drop | validate | import | export&gt;]\n-     * &lt;class name | .java file | .class file | .jdo file&gt;*\n-     *  Where the following options are recognized.\n+     * Usage: java org.apache.openjpa.jdbc.meta.MappingTool [option]* \n+     * [-action/-a &lt;refresh | add | buildSchema | drop | validate | import \n+     * | export&gt;] &lt;class name | .java file | .class file | .jdo file&gt;*\n+     * Where the following options are recognized.\n      * <ul>\n      * <li><i>-properties/-p &lt;properties file or resource&gt;</i>: The\n      * path or resource name of a OpenJPA properties file containing\n@@ -828,8 +821,8 @@ private void drop(Class cls) {\n      * same-named option in the {@link SchemaTool}.</li>\n      * <li><i>-dropSequences/-dsq &lt;true/t | false/f&gt;</i>: Corresponds\n      * to the same-named option in the {@link SchemaTool}.</li>\n-     * <li><i>-openjpaTables/-kt &lt;true/t | false/f&gt;</i>: Corresponds to the\n-     * same-named option in the {@link SchemaTool}.</li>\n+     * <li><i>-openjpaTables/-kt &lt;true/t | false/f&gt;</i>: Corresponds to\n+     * the same-named option in the {@link SchemaTool}.</li>\n      * <li><i>-ignoreErrors/-i &lt;true/t | false/f&gt;</i>: Corresponds to the\n      * same-named option in the {@link SchemaTool}.</li>\n      * <li><i>-readSchema/-rs &lt;true/t | false/f&gt;</i>: Set this to true"},{"sha":"a1407463e92ed11b32391b9b5f60ae7eb2ff5dc2","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/746ebdfdc93bdc6a389a3e4fd869d8ac8a5ff7cd/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/746ebdfdc93bdc6a389a3e4fd869d8ac8a5ff7cd/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties?ref=746ebdfdc93bdc6a389a3e4fd869d8ac8a5ff7cd","patch":"@@ -9,8 +9,6 @@ no-equiv-field: Cannot use \"{0}\" as the mapped-by value for a field in \"{1}\".  \\\n bad-equiv-field: Cannot use \"{0}\" as the mapped-by value for a field in \"{1}\". \\\n \tThe target-field \"{2}\" for column \"{3}\" is mapped to multiple columns.\n no-mapping: No mapping information found for type \"{0}\".\n-no-mapping-aware: No mapping information found for type \"{0}\". Assuming to be \\\n-\tpersistence-aware.\n bad-mapped-by: Collection field \"{0}\" declares that it is mapped by \"{1}\", but \\\n \tthis is not a valid inverse relation.\n no-targetfield: Some of the columns on \"{0}\" are missing target field \\\n@@ -290,6 +288,7 @@ bad-drop: Some of the following mappings may not have been dropped: {0}. \\\n \tUndropped mappings will not affect the system.\n no-drop-meta: The schema for type \"{0}\" may not be dropped, because its \\\n \tmapping could not be parsed.\n+no-meta: Type \"{0}\" does not have persistence metadata.\n bad-bk-file: Could not create a backup file for \"{0}\".\n running-all-classes: No targets were given.  Running on all classes listed in \\\n \tyour configuration, or all persistent classes in the classpath if no \\"}]}

