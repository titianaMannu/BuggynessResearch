{"sha":"7522db86fdbb787f68368ef13d3cc7fbd47d065f","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc1MjJkYjg2ZmRiYjc4N2Y2ODM2OGVmMTNkM2NjN2ZiZDQ3ZDA2NWY=","commit":{"author":{"name":"Stephen Kim","email":"skim@apache.org","date":"2006-09-27T06:46:15Z"},"committer":{"name":"Stephen Kim","email":"skim@apache.org","date":"2006-09-27T06:46:15Z"},"message":"boot provisional changes for now.  I think I'm missing a huge hole with hashing\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@450350 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"82160a352442d727ae871ac2b74643cff11cb959","url":"https://api.github.com/repos/apache/openjpa/git/trees/82160a352442d727ae871ac2b74643cff11cb959"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7522db86fdbb787f68368ef13d3cc7fbd47d065f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7522db86fdbb787f68368ef13d3cc7fbd47d065f","html_url":"https://github.com/apache/openjpa/commit/7522db86fdbb787f68368ef13d3cc7fbd47d065f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7522db86fdbb787f68368ef13d3cc7fbd47d065f/comments","author":null,"committer":null,"parents":[{"sha":"c6537ccba6e8735d08c658249bbe763fcb145316","url":"https://api.github.com/repos/apache/openjpa/commits/c6537ccba6e8735d08c658249bbe763fcb145316","html_url":"https://github.com/apache/openjpa/commit/c6537ccba6e8735d08c658249bbe763fcb145316"}],"stats":{"total":225,"additions":38,"deletions":187},"files":[{"sha":"1a3caa419cbbf002efeb950a6c98d1459f055d47","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7522db86fdbb787f68368ef13d3cc7fbd47d065f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/7522db86fdbb787f68368ef13d3cc7fbd47d065f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java?ref=7522db86fdbb787f68368ef13d3cc7fbd47d065f","patch":"@@ -627,10 +627,6 @@ public boolean isFlushedDirty() {\n             return isFlushed();\n         }\n \n-        public boolean isProvisional() {\n-            return _owner.isProvisional();\n-        }\n-\n         public BitSet getLoaded() {\n             // consider everything loaded\n             if (_full == null) {"},{"sha":"085d120b0e9caff7cc0ca1eed3729072415953e8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/7522db86fdbb787f68368ef13d3cc7fbd47d065f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java","raw_url":"https://github.com/apache/openjpa/raw/7522db86fdbb787f68368ef13d3cc7fbd47d065f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java?ref=7522db86fdbb787f68368ef13d3cc7fbd47d065f","patch":"@@ -94,7 +94,7 @@ public Object attach(Object pc) {\n \n         CallbackException excep = null;\n         try {\n-            return attach(pc, null, null, null, true);\n+            return attach(pc, null, null, null);\n         } catch (CallbackException ce) {\n             excep = ce;\n             return null; // won't be reached as the exceps will be rethrown\n@@ -122,7 +122,7 @@ public Object attach(Object pc) {\n             int i = 0;\n             for (Iterator itr = instances.iterator(); itr.hasNext(); i++) {\n                 try {\n-                    attached[i] = attach(itr.next(), null, null, null, true);\n+                    attached[i] = attach(itr.next(), null, null, null);\n                 } catch (OpenJPAException ke) {\n                     // track exceptions and optimistic failed objects\n                     if (opt && !(ke instanceof OptimisticException))\n@@ -212,10 +212,9 @@ private void throwExceptions(List exceps, List failed, boolean opt) {\n      * @param into the instance we're attaching into\n      * @param owner state manager for <code>into</code>\n      * @param ownerMeta the field we traversed to find <code>toAttach</code>\n-     * @param explicit whether to make new instances explicitly persistent\n      */\n     Object attach(Object toAttach, PersistenceCapable into,\n-        OpenJPAStateManager owner, ValueMetaData ownerMeta, boolean explicit) {\n+        OpenJPAStateManager owner, ValueMetaData ownerMeta) {\n         if (toAttach == null)\n             return null;\n \n@@ -234,7 +233,7 @@ Object attach(Object toAttach, PersistenceCapable into,\n             getMetaDataRepositoryInstance().getMetaData(toAttach.getClass(),\n             _broker.getClassLoader(), true);\n         return getStrategy(toAttach).attach(this, toAttach, meta, into,\n-            owner, ownerMeta, explicit);\n+            owner, ownerMeta);\n     }\n \n     /**"},{"sha":"32b24fa82cf7d18660ef539cdfb1690ad392aee5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","status":"modified","additions":10,"deletions":14,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/7522db86fdbb787f68368ef13d3cc7fbd47d065f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/7522db86fdbb787f68368ef13d3cc7fbd47d065f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java?ref=7522db86fdbb787f68368ef13d3cc7fbd47d065f","patch":"@@ -55,11 +55,10 @@\n      * @param into instance we're attaching into\n      * @param owner state manager for <code>into</code>\n      * @param ownerMeta field we traversed to find <code>toAttach</code>\n-     * @param explicit whether to make new instances explicitly persistent\n      */\n     public abstract Object attach(AttachManager manager,\n         Object toAttach, ClassMetaData meta, PersistenceCapable into,\n-        OpenJPAStateManager owner, ValueMetaData ownerMeta, boolean explicit);\n+        OpenJPAStateManager owner, ValueMetaData ownerMeta);\n \n     /**\n      * Return the identity of the given detached instance.\n@@ -74,12 +73,10 @@ protected abstract void provideField(Object toAttach, StateManagerImpl sm,\n         int field);\n \n     /**\n-     * Return a PNew/PNewProvisional managed object for the given detached \n-     * instance.\n+     * Return a PNew managed object for the given detached instance.\n      */\n     protected StateManagerImpl persist(AttachManager manager,\n-        PersistenceCapable pc, ClassMetaData meta, Object appId, \n-        boolean explicit) {\n+        PersistenceCapable pc, ClassMetaData meta, Object appId) {\n         PersistenceCapable newInstance;\n         if (!manager.getCopyNew())\n             newInstance = pc;\n@@ -89,7 +86,7 @@ else if (appId == null) // datastore identity\n             newInstance = pc.pcNewInstance(null, appId, false);\n \n         return (StateManagerImpl) manager.getBroker().persist\n-            (newInstance, appId, explicit, manager.getBehavior());\n+            (newInstance, appId, manager.getBehavior());\n     }\n \n     /**\n@@ -194,7 +191,7 @@ protected boolean attachField(AttachManager manager, Object toAttach,\n                             manager.getDetachedObjectId(frmpc))) {\n                             intopc = null;\n                         }\n-                        frmpc = manager.attach(frmpc, intopc, sm, fmd, false);\n+                        frmpc = manager.attach(frmpc, intopc, sm, fmd);\n                     }\n                     if (frmpc != topc)\n                         sm.settingObjectField(into, i, topc, frmpc, set);\n@@ -323,7 +320,7 @@ protected Collection attachCollection(AttachManager manager,\n             if (vmd.getCascadeAttach() == ValueMetaData.CASCADE_NONE)\n                 elem = getReference(manager, itr.next(), sm, vmd);\n             else\n-                elem = manager.attach(itr.next(), null, sm, vmd, false);\n+                elem = manager.attach(itr.next(), null, sm, vmd);\n             coll.add(elem);\n         }\n         return coll;\n@@ -435,13 +432,13 @@ protected Map attachMap(AttachManager manager, Map orig,\n                 if (keymd.getCascadeAttach() == ValueMetaData.CASCADE_NONE)\n                     key = getReference(manager, key, sm, keymd);\n                 else\n-                    key = manager.attach(key, null, sm, keymd, false);\n+                    key = manager.attach(key, null, sm, keymd);\n                 val = entry.getValue();\n                 if (valmd.isDeclaredTypePC()) {\n                     if (valmd.getCascadeAttach() == ValueMetaData.CASCADE_NONE)\n                         val = getReference(manager, val, sm, valmd);\n                     else\n-                        val = manager.attach(val, null, sm, valmd, false);\n+                        val = manager.attach(val, null, sm, valmd);\n                 }\n                 map.put(key, val);\n             }\n@@ -452,8 +449,7 @@ protected Map attachMap(AttachManager manager, Map orig,\n                 if (valmd.getCascadeAttach() == ValueMetaData.CASCADE_NONE)\n                     val = getReference(manager, entry.getValue(), sm, valmd);\n                 else\n-                    val = manager.attach(entry.getValue(), null, sm, valmd, \n-                        false);\n+                    val = manager.attach(entry.getValue(), null, sm, valmd);\n                 entry.setValue(val);\n             }\n         }\n@@ -483,7 +479,7 @@ private Object replaceArray(AttachManager manager, Object frma,\n                 if (vmd.getCascadeAttach() == ValueMetaData.CASCADE_NONE)\n                     elem = getReference(manager, elem, sm, vmd);\n                 else\n-                    elem = manager.attach(elem, null, sm, vmd, false);\n+                    elem = manager.attach(elem, null, sm, vmd);\n             }\n             diff = diff || !equals(elem, Array.get(toa, i), pc);\n             Array.set(newa, i, elem);"},{"sha":"f36f5f1313b04840bcbbb3fe4fb7005c291fd499","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":7,"deletions":37,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/7522db86fdbb787f68368ef13d3cc7fbd47d065f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/7522db86fdbb787f68368ef13d3cc7fbd47d065f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=7522db86fdbb787f68368ef13d3cc7fbd47d065f","patch":"@@ -2152,25 +2152,7 @@ protected void endTransaction(int status) {\n     // Object lifecycle\n     ////////////////////\n \n-    public void persist(Object obj, OpCallbacks call) {\n-        persist(obj, null, true, call);\n-    }\n-\n-    public OpenJPAStateManager persist(Object obj, Object id,\n-        OpCallbacks call) {\n-        return persist(obj, id, true, call);\n-    }\n-\n     public void persistAll(Collection objs, OpCallbacks call) {\n-        persistAll(objs, true, call);\n-    }\n-\n-    /**\n-     * Persist the given objects.  Indicate whether this was an explicit persist\n-     * (PNEW) or a provisonal persist (PNEWPROVISIONAL).\n-     */\n-    public void persistAll(Collection objs, boolean explicit, \n-        OpCallbacks call) {\n         if (objs.isEmpty())\n             return;\n \n@@ -2181,7 +2163,7 @@ public void persistAll(Collection objs, boolean explicit,\n \n             for (Iterator itr = objs.iterator(); itr.hasNext();) {\n                 try {\n-                    persist(itr.next(), explicit, call);\n+                    persist(itr.next(), call);\n                 } catch (UserException ue) {\n                     exceps = add(exceps, ue);\n                 }\n@@ -2230,20 +2212,11 @@ private void throwNestedExceptions(List exceps, boolean datastore) {\n         throw err.setNestedThrowables(t).setFatal(fatal);\n     }\n \n-    /**\n-     * Persist the given object.  Indicate whether this was an explicit persist\n-     * (PNEW) or a provisonal persist (PNEWPROVISIONAL)\n-     */\n-    public void persist(Object obj, boolean explicit, OpCallbacks call) {\n-        persist(obj, null, explicit, call);\n+    public void persist(Object obj, OpCallbacks call) {\n+        persist(obj, null, call);\n     }\n \n-    /**\n-     * Persist the given object.  Indicate whether this was an explicit persist\n-     * (PNEW) or a provisonal persist (PNEWPROVISIONAL).\n-     * See {@link Broker} for details on this method.\n-     */\n-    public OpenJPAStateManager persist(Object obj, Object id, boolean explicit,\n+    public OpenJPAStateManager persist(Object obj, Object id,\n         OpCallbacks call) {\n         if (obj == null)\n             return null;\n@@ -2326,12 +2299,9 @@ else if (meta.getIdentityType() == ClassMetaData.ID_UNKNOWN)\n \n             // create new sm\n             sm = new StateManagerImpl(id, meta, this);\n-            if ((_flags & FLAG_ACTIVE) != 0) {\n-                if (explicit)\n-                    sm.initialize(pc, PCState.PNEW);\n-                else\n-                    sm.initialize(pc, PCState.PNEWPROVISIONAL);\n-            } else\n+            if ((_flags & FLAG_ACTIVE) != 0)\n+                sm.initialize(pc, PCState.PNEW);\n+            else\n                 sm.initialize(pc, PCState.PNONTRANSNEW);\n             if ((action & OpCallbacks.ACT_CASCADE) != 0)\n                 sm.cascadePersist(call);"},{"sha":"6f3a6a627c7b98373219c63e8393598491d4bf0d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateAttachStrategy.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/7522db86fdbb787f68368ef13d3cc7fbd47d065f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateAttachStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/7522db86fdbb787f68368ef13d3cc7fbd47d065f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateAttachStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateAttachStrategy.java?ref=7522db86fdbb787f68368ef13d3cc7fbd47d065f","patch":"@@ -70,7 +70,7 @@ protected void provideField(Object toAttach, StateManagerImpl sm,\n \n     public Object attach(AttachManager manager, Object toAttach,\n         ClassMetaData meta, PersistenceCapable into, OpenJPAStateManager owner,\n-        ValueMetaData ownerMeta, boolean explicit) {\n+        ValueMetaData ownerMeta) {\n         BrokerImpl broker = manager.getBroker();\n         PersistenceCapable pc = (PersistenceCapable) toAttach;\n \n@@ -94,8 +94,7 @@ public Object attach(AttachManager manager, Object toAttach,\n             sm = (StateManagerImpl) broker.embed(into, null, owner, ownerMeta);\n             into = sm.getPersistenceCapable();\n         } else if (state == null) {\n-            sm = persist(manager, pc, meta, ApplicationIds.create(pc, meta),\n-                explicit);\n+            sm = persist(manager, pc, meta, ApplicationIds.create(pc, meta));\n             into = sm.getPersistenceCapable();\n         } else if (!embedded && into == null) {\n             Object id = getDetachedObjectId(manager, pc);\n@@ -118,7 +117,7 @@ public Object attach(AttachManager manager, Object toAttach,\n                 // the transaction was rolled back; the danger is that\n                 // the instance was made persistent, detached, committed,\n                 // and then deleted, but this is an uncommon case\n-                sm = persist(manager, pc, meta, id, explicit);\n+                sm = persist(manager, pc, meta, id);\n                 into = sm.getPersistenceCapable();\n \n                 // nullify the state, since the new instance won't have one\n@@ -145,7 +144,7 @@ public Object attach(AttachManager manager, Object toAttach,\n                 // only attach fields in the FG of the detached instance; new\n                 // instances get all their fields attached\n                 if (fields == null || fields.get(i))\n-                    attachField(manager, pc, sm, fmds[i], false);\n+                    attachField(manager, pc, sm, fmds[i], true);\n             }\n         }\n         finally {"},{"sha":"7f6f0141cd68885cf51d192049536679538afb0c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","status":"modified","additions":2,"deletions":7,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/7522db86fdbb787f68368ef13d3cc7fbd47d065f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/7522db86fdbb787f68368ef13d3cc7fbd47d065f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java?ref=7522db86fdbb787f68368ef13d3cc7fbd47d065f","patch":"@@ -87,7 +87,7 @@ public DetachedStateManager(PersistenceCapable pc, OpenJPAStateManager sm,\n \n     public Object attach(AttachManager manager, Object toAttach,\n         ClassMetaData meta, PersistenceCapable into, OpenJPAStateManager owner,\n-        ValueMetaData ownerMeta, boolean explicit) {\n+        ValueMetaData ownerMeta) {\n         BrokerImpl broker = manager.getBroker();\n         StateManagerImpl sm = null;\n         if (_embedded) {\n@@ -225,8 +225,7 @@ public Object attach(AttachManager manager, Object toAttach,\n                         PersistenceCapable toPC = null;\n                         if (objval != null && fields[i].isEmbeddedPC())\n                             toPC = (PersistenceCapable) objval;\n-                        objval = manager.attach(objval, toPC, sm, fields[i],\n-                            false);\n+                        objval = manager.attach(objval, toPC, sm, fields[i]);\n                     }\n                     if (_dirty.get(i))\n                         sm.settingObjectField(pc, i, (!loaded.get(i)) ? null\n@@ -689,10 +688,6 @@ public boolean isFlushedDirty() {\n         throw new UnsupportedOperationException();\n     }\n \n-    public boolean isProvisional() {\n-        throw new UnsupportedOperationException();\n-    }\n-\n     public BitSet getLoaded() {\n         return _loaded;\n     }"},{"sha":"c2d03750cbbb6870c23198478cce5e7ad7a163ff","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7522db86fdbb787f68368ef13d3cc7fbd47d065f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/7522db86fdbb787f68368ef13d3cc7fbd47d065f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java?ref=7522db86fdbb787f68368ef13d3cc7fbd47d065f","patch":"@@ -101,10 +101,6 @@ public boolean isFlushedDirty() {\n         return false;\n     }\n \n-    public boolean isProvisional() {\n-        return false;\n-    }\n-\n     public BitSet getLoaded() {\n         throw new UnsupportedOperationException();\n     }"},{"sha":"a12370a223314eb2570e15beb9147d95b4e72c72","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7522db86fdbb787f68368ef13d3cc7fbd47d065f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/7522db86fdbb787f68368ef13d3cc7fbd47d065f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java?ref=7522db86fdbb787f68368ef13d3cc7fbd47d065f","patch":"@@ -317,10 +317,6 @@ public boolean isFlushedDirty() {\n         return false;\n     }\n \n-    public boolean isProvisional() {\n-        return false;\n-    }\n-\n     public BitSet getLoaded() {\n         throw new UnsupportedOperationException();\n     }"},{"sha":"3a8adf8c75ecb08b0b819f746005e8c057d65b03","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPAStateManager.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/7522db86fdbb787f68368ef13d3cc7fbd47d065f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPAStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/7522db86fdbb787f68368ef13d3cc7fbd47d065f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPAStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPAStateManager.java?ref=7522db86fdbb787f68368ef13d3cc7fbd47d065f","patch":"@@ -120,11 +120,6 @@\n      */\n     public boolean isFlushedDirty();\n \n-    /**\n-     * Return whether this object is provisionally persistent.\n-     */\n-    public boolean isProvisional();\n-\n     /**\n      * Return a read-only mask of the indexes of all loaded fields.\n      */"},{"sha":"1bb48bcd94dbafdca53d0c4515f1608999c64aed","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCState.java","status":"modified","additions":0,"deletions":24,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/7522db86fdbb787f68368ef13d3cc7fbd47d065f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCState.java","raw_url":"https://github.com/apache/openjpa/raw/7522db86fdbb787f68368ef13d3cc7fbd47d065f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCState.java?ref=7522db86fdbb787f68368ef13d3cc7fbd47d065f","patch":"@@ -62,11 +62,6 @@\n      */\n     public static final PCState PNEWDELETED = new PNewDeletedState();\n \n-    /**\n-     * Persistent-New-Provisional\n-     */\n-    public static final PCState PNEWPROVISIONAL = new PNewProvisionalState();\n-\n     /**\n      * Persistent-Nontransactinoal\n      */\n@@ -233,14 +228,6 @@ PCState delete(StateManagerImpl context) {\n         return this;\n     }\n \n-    /**\n-     * Return the state to transition to after making no longer provisional. \n-     * The context is not given because no actions should be taken.\n-     */\n-    PCState nonprovisional() {\n-        return this;\n-    }\n-\n     /**\n      * Perform any actions necesssary and return the proper lifecycle state\n      * on a call to {@link StoreContext#nontransactional} with the given\n@@ -415,15 +402,6 @@ boolean isPendingTransactional() {\n         return false;\n     }\n \n-    /**\n-     * Return whether this is a state that will become transient\n-     * at the end of the next transaction.\n-     * Returns <code>false</code> by default.\n-     */\n-    boolean isProvisional() {\n-        return false;\n-    }\n-\n     /**\n      * Whether this state requires a version check when being flushed, \n      * assuming the system is configured for version checks.\n@@ -452,8 +430,6 @@ protected Object readResolve()\n             return PDELETED;\n         if (this instanceof PNewDeletedState)\n             return PNEWDELETED;\n-        if (this instanceof PNewProvisionalState)\n-            return PNEWPROVISIONAL;\n         if (this instanceof PNonTransState)\n             return PNONTRANS;\n         if (this instanceof PNonTransDirtyState)"},{"sha":"4a9aded0996ef60357e63f5f7ef4202b1cb69b25","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewProvisionalState.java","status":"removed","additions":0,"deletions":48,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/c6537ccba6e8735d08c658249bbe763fcb145316/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewProvisionalState.java","raw_url":"https://github.com/apache/openjpa/raw/c6537ccba6e8735d08c658249bbe763fcb145316/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewProvisionalState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewProvisionalState.java?ref=c6537ccba6e8735d08c658249bbe763fcb145316","patch":"@@ -1,48 +0,0 @@\n-/*\n- * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.openjpa.kernel;\n-\n-/**\n- * Lifecycle state.\n- * Represents an instance that was made persistent via reachability within the\n- * current\ttransaction.\n- *\n- * @author Steve Kim\n- * @author: Abe White\n- */\n-class PNewProvisionalState\n-    extends PNewState {\n-\n-    PCState persist(StateManagerImpl context) {\n-        return PNEW;\n-    }\n-\n-    PCState nonprovisional() {\n-        return PNEW;\n-    }\n-\n-    PCState commit(StateManagerImpl context) {\n-        return TRANSIENT;\n-    }\n-\n-    PCState commitRetain(StateManagerImpl context) {\n-        return TRANSIENT;\n-    }\n-\n-    boolean isProvisional() {\n-        return true;\n-    }\n-}"},{"sha":"a576703809bfa6831a88dd4304257533fdcfdf1f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","status":"modified","additions":7,"deletions":11,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/7522db86fdbb787f68368ef13d3cc7fbd47d065f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","raw_url":"https://github.com/apache/openjpa/raw/7522db86fdbb787f68368ef13d3cc7fbd47d065f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java?ref=7522db86fdbb787f68368ef13d3cc7fbd47d065f","patch":"@@ -250,22 +250,21 @@ public void persist(OpCallbacks call) {\n             case JavaTypes.PC_UNTYPED:\n                 if (!_broker.isDetachedNew() && _broker.isDetached(objval))\n                     return; // allow but ignore\n-                _broker.persist(objval, false, call);\n+                _broker.persist(objval, call);\n                 break;\n             case JavaTypes.ARRAY:\n-                _broker.persistAll(Arrays.asList((Object[]) objval), false, \n-                    call);\n+                _broker.persistAll(Arrays.asList((Object[]) objval), call);\n                 break;\n             case JavaTypes.COLLECTION:\n-                _broker.persistAll((Collection) objval, false, call);\n+                _broker.persistAll((Collection) objval, call);\n                 break;\n             case JavaTypes.MAP:\n                 if (fmd.getKey().getCascadePersist()\n                     == ValueMetaData.CASCADE_IMMEDIATE)\n-                    _broker.persistAll(((Map) objval).keySet(), false, call);\n+                    _broker.persistAll(((Map) objval).keySet(), call);\n                 if (fmd.getElement().getCascadePersist()\n                     == ValueMetaData.CASCADE_IMMEDIATE)\n-                    _broker.persistAll(((Map) objval).values(), false, call);\n+                    _broker.persistAll(((Map) objval).values(), call);\n                 break;\n         }\n     }\n@@ -468,9 +467,7 @@ public boolean preFlush(OpCallbacks call) {\n             return false;\n \n         // perform pers-by-reach and dependent refs\n-        boolean ret = false;\n-        if (!_sm.isProvisional())\n-            ret = preFlush(fmd, call);\n+        boolean ret = preFlush(fmd, call);\n \n         // manage inverses\n         InverseManager manager = _broker.getInverseManager();\n@@ -743,7 +740,7 @@ private void preFlushPC(ValueMetaData vmd, Object obj, OpCallbacks call) {\n                         Exceptions.toString(_sm.getManagedInstance()))).\n                     setFailedObject(obj);\n         } else\n-            sm = _broker.persist(obj, null, true, call);\n+            sm = _broker.persist(obj, null, call);\n \n         if (sm != null) {\n             // if deleted and not managed inverse, die\n@@ -753,7 +750,6 @@ private void preFlushPC(ValueMetaData vmd, Object obj, OpCallbacks call) {\n                     Exceptions.toString(obj), vmd,\n                     Exceptions.toString(_sm.getManagedInstance()))).\n                     setFailedObject(obj);\n-            ((StateManagerImpl) sm).nonprovisional();\n             ((StateManagerImpl) sm).setDereferencedDependent(false, true);\n         }\n     }"},{"sha":"8336ad73a14258d81042c61c0e46feeaa8fe6764","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":0,"deletions":14,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/7522db86fdbb787f68368ef13d3cc7fbd47d065f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/7522db86fdbb787f68368ef13d3cc7fbd47d065f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=7522db86fdbb787f68368ef13d3cc7fbd47d065f","patch":"@@ -993,16 +993,6 @@ void transactional() {\n         setPCState(_state.transactional(this));\n     }\n \n-    /**\n-     * Delegates to the current state.\n-     *\n-     * @see PCState#nonprovisional\n-     * @see Broker#nonprovisional\n-     */\n-    void nonprovisional() {\n-        setPCState(_state.nonprovisional());\n-    }\n-\n     /**\n      * Delegates to the current state.\n      *\n@@ -1262,10 +1252,6 @@ public boolean isPendingTransactional() {\n         return _state.isPendingTransactional();\n     }\n \n-    public boolean isProvisional() {\n-        return _state.isProvisional();\n-    }\n-\n     public boolean isPersistent() {\n         return _state.isPersistent();\n     }"},{"sha":"acb91eb0f4a33ee21e97abe4752c5c745b590c46","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/7522db86fdbb787f68368ef13d3cc7fbd47d065f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/7522db86fdbb787f68368ef13d3cc7fbd47d065f/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java?ref=7522db86fdbb787f68368ef13d3cc7fbd47d065f","patch":"@@ -59,7 +59,7 @@ protected void provideField(Object toAttach, StateManagerImpl sm,\n \n     public Object attach(AttachManager manager, Object toAttach,\n         ClassMetaData meta, PersistenceCapable into, OpenJPAStateManager owner,\n-        ValueMetaData ownerMeta, boolean explicit) {\n+        ValueMetaData ownerMeta) {\n         BrokerImpl broker = manager.getBroker();\n         PersistenceCapable pc = (PersistenceCapable) toAttach;\n \n@@ -82,8 +82,7 @@ public Object attach(AttachManager manager, Object toAttach,\n             sm = (StateManagerImpl) broker.embed(into, null, owner, ownerMeta);\n             into = sm.getPersistenceCapable();\n         } else if (isNew) {\n-            sm = persist(manager, pc, meta, ApplicationIds.create(pc, meta),\n-                explicit);\n+            sm = persist(manager, pc, meta, ApplicationIds.create(pc, meta));\n             into = sm.getPersistenceCapable();\n         } else if (!embedded && into == null) {\n             Object id = getDetachedObjectId(manager, toAttach);\n@@ -236,8 +235,8 @@ private Object attachInPlace(AttachManager manager, StateManagerImpl sm,\n         PersistenceCapable intoPC = (into == null) ? null\n             : into.getPersistenceCapable();\n         if (vmd.isEmbedded())\n-            return manager.attach(pc, intoPC, sm, vmd, false);\n-        return manager.attach(pc, intoPC, null, null, false);\n+            return manager.attach(pc, intoPC, sm, vmd);\n+        return manager.attach(pc, intoPC, null, null);\n     }\n \n     /**"}]}

