{"sha":"754eb8d60c03222e6d6c5adb9ebe1b17cbfe38e1","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc1NGViOGQ2MGMwMzIyMmU2ZDZjNWFkYjllYmUxYjE3Y2JmZTM4ZTE=","commit":{"author":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-02-06T00:51:34Z"},"committer":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2008-02-06T00:51:34Z"},"message":"Allow EntityManagerFactory objects to be serialized and deserialized successfully.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@618844 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4d59eecd1c86c30dff4c530b30f926e9b39b1a42","url":"https://api.github.com/repos/apache/openjpa/git/trees/4d59eecd1c86c30dff4c530b30f926e9b39b1a42"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/754eb8d60c03222e6d6c5adb9ebe1b17cbfe38e1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/754eb8d60c03222e6d6c5adb9ebe1b17cbfe38e1","html_url":"https://github.com/apache/openjpa/commit/754eb8d60c03222e6d6c5adb9ebe1b17cbfe38e1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/754eb8d60c03222e6d6c5adb9ebe1b17cbfe38e1/comments","author":null,"committer":null,"parents":[{"sha":"3f439edc57637940063ce9c72a1c528587e165ff","url":"https://api.github.com/repos/apache/openjpa/commits/3f439edc57637940063ce9c72a1c528587e165ff","html_url":"https://github.com/apache/openjpa/commit/3f439edc57637940063ce9c72a1c528587e165ff"}],"stats":{"total":95,"additions":49,"deletions":46},"files":[{"sha":"7cf0bbe19111d6824c08a81223b265363dfb8b2b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":14,"deletions":4,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/754eb8d60c03222e6d6c5adb9ebe1b17cbfe38e1/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/754eb8d60c03222e6d6c5adb9ebe1b17cbfe38e1/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=754eb8d60c03222e6d6c5adb9ebe1b17cbfe38e1","patch":"@@ -144,8 +144,7 @@ public static AbstractBrokerFactory getPooledFactoryForKey(Object key) {\n      */\n     protected AbstractBrokerFactory(OpenJPAConfiguration config) {\n         _conf = config;\n-        _pcClassLoaders = new ConcurrentReferenceHashSet(\n-            ConcurrentReferenceHashSet.WEAK);\n+        getPcClassLoaders();\n     }\n \n     /**\n@@ -284,13 +283,13 @@ private void loadPersistentTypes(ClassLoader envLoader) {\n                     if (needsSub(cls))\n                         toRedefine.add(cls);\n                 }\n-                _pcClassLoaders.add(loader);\n+                getPcClassLoaders().add(loader);\n                 _pcClassNames = c;\n             }\n             _persistentTypesLoaded = true;\n         } else {\n             // reload with this loader\n-            if (_pcClassLoaders.add(loader)) {\n+            if (getPcClassLoaders().add(loader)) {\n                 for (Iterator itr = _pcClassNames.iterator(); itr.hasNext();) {\n                     try {\n                         Class cls =\n@@ -815,4 +814,15 @@ public void afterCompletion(int status) {\n             _transactional.remove (_trans);\n \t\t}\n \t}\n+    \n+    /**\n+     * Method insures that deserialized EMF has this reference re-instantiated\n+     */\n+    private Collection getPcClassLoaders() {\n+       if (_pcClassLoaders == null)\n+         _pcClassLoaders = new ConcurrentReferenceHashSet(\n+             ConcurrentReferenceHashSet.WEAK);\n+          \n+       return _pcClassLoaders;\n+    }\n }"},{"sha":"d5c68378506e53b9fff0d09f71b507a5f6d3dcfb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestSerializedFactory.java","status":"modified","additions":35,"deletions":42,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/754eb8d60c03222e6d6c5adb9ebe1b17cbfe38e1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestSerializedFactory.java","raw_url":"https://github.com/apache/openjpa/raw/754eb8d60c03222e6d6c5adb9ebe1b17cbfe38e1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestSerializedFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestSerializedFactory.java?ref=754eb8d60c03222e6d6c5adb9ebe1b17cbfe38e1","patch":"@@ -30,71 +30,64 @@\n \n /**\n  * Tests that a EntityManagerFactory can be used after serialization.\n- *\n+ * \n  * @author David Ezzio\n  */\n-public class TestSerializedFactory\n-    extends SingleEMFTestCase {\n+public class TestSerializedFactory extends SingleEMFTestCase {\n \n     public void setUp() {\n         setUp(AllFieldTypes.class);\n     }\n \n     /**\n-     * This test case assumes that OpenJPA creates EMF objects that are \n-     * instances of the Serializable interface.  If this changes, the test\n-     * logic has to change.\n+     * This test case assumes that OpenJPA creates EMF objects that are\n+     * instances of the Serializable interface. If this changes, the test logic\n+     * has to change.\n      * <p>\n-     * Currently, although the EMF objects implement Serializable, they\n-     * do not successfully pass through serialization.  Once they do \n-     * (assuming they should), the catch block in the test and the\n-     * fail method invocation can be removed.\n+     * Currently, although the EMF objects implement Serializable, they do not\n+     * successfully pass through serialization. Once they do (assuming they\n+     * should), the catch block in the test and the fail method invocation can\n+     * be removed.\n      */\n     public void testSerializedEntityManagerFactory() throws Exception {\n-        // correct the logic if and when EMFs do not implement \n+        // correct the logic if and when EMFs do not implement\n         // the serializable interface\n-        assertTrue(\"EntityManagerFactory object is not serializable\", \n+        assertTrue(\"EntityManagerFactory object is not serializable\",\n                 emf instanceof Serializable);\n \n         // serialize and deserialize the entity manager factory\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ObjectOutputStream oos = new ObjectOutputStream(baos);\n         oos.writeObject(emf);\n         EntityManagerFactory emf2 = \n-            (EntityManagerFactory) new ObjectInputStream(\n-            new ByteArrayInputStream(baos.toByteArray())).readObject();\n+                (EntityManagerFactory) new ObjectInputStream(\n+                new ByteArrayInputStream(baos.toByteArray())).readObject();\n+\n+        // use the deserialized entity manager factory\n+        assertTrue(\"The deserialized entity manager factory is not open\",\n+                emf2.isOpen());\n+        EntityManager em = emf2.createEntityManager();\n+        assertTrue(\"The newly created entity manager is not open\", \n+                em.isOpen());\n+\n+        // exercise the entity manager produced from the deserialized EMF\n+        em.getTransaction().begin();\n+        em.persist(new AllFieldTypes());\n+        em.getTransaction().commit();\n \n-        try {\n-            // use the deserialized entity manager factory\n-            assertTrue(\"The deserialized entity manager factory is not open\",\n-                    emf2.isOpen());\n-            EntityManager em = emf2.createEntityManager();\n-            assertTrue(\"The newly created entity manager is not open\", \n-                    em.isOpen());\n-    \n-            // exercise the entity manager produced from the deserialized EMF\n-            em.getTransaction().begin();\n-            em.persist(new AllFieldTypes());\n-            em.getTransaction().commit();\n-            \n-            // close the extra resources\n-            em.close();\n-            assertFalse(\"The entity manager is not closed\", em.isOpen());\n+        // close the extra resources\n+        em.close();\n+        assertFalse(\"The entity manager is not closed\", em.isOpen());\n+        \n+        // clean up any committed records, etc.\n+        clear(emf2);\n+        if (emf2.isOpen())\n             emf2.close();\n-            assertFalse(\"The entity manager factory is not closed\", \n-                    emf2.isOpen());\n-            \n-            // Correct the logic when EMF's are supposed to serialize\n-            fail(\"This test is expected to fail until the issue of \" +\n-                    \"serializing an EMF is settled\");\n-         }\n-         catch (Exception e) {\n-            // failure is currently expected\n-         }\n+        assertFalse(\"The entity manager factory is not closed\", \n+                emf2.isOpen());\n     }\n-    \n+\n     public static void main(String[] args) {\n         TestRunner.run(TestSerializedFactory.class);\n     }\n }\n-"}]}

