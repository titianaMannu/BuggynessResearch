{"sha":"75999ad5d93b73d6d363364c99caac2c5e104877","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc1OTk5YWQ1ZDkzYjczZDZkMzYzMzY0Yzk5Y2FhYzJjNWUxMDQ4Nzc=","commit":{"author":{"name":"Maxim Solodovnik","email":"solomax666@gmail.com","date":"2019-03-22T05:21:32Z"},"committer":{"name":"Maxim Solodovnik","email":"solomax666@gmail.com","date":"2019-03-22T05:21:32Z"},"message":"[OPENJPA-2780] reverse customizer adds @Enumerated annotation as expected","tree":{"sha":"4ac815717fc42a4f0cbb206e732e4f04302b5ddd","url":"https://api.github.com/repos/apache/openjpa/git/trees/4ac815717fc42a4f0cbb206e732e4f04302b5ddd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/75999ad5d93b73d6d363364c99caac2c5e104877","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/75999ad5d93b73d6d363364c99caac2c5e104877","html_url":"https://github.com/apache/openjpa/commit/75999ad5d93b73d6d363364c99caac2c5e104877","comments_url":"https://api.github.com/repos/apache/openjpa/commits/75999ad5d93b73d6d363364c99caac2c5e104877/comments","author":{"login":"solomax","id":3870591,"node_id":"MDQ6VXNlcjM4NzA1OTE=","avatar_url":"https://avatars.githubusercontent.com/u/3870591?v=4","gravatar_id":"","url":"https://api.github.com/users/solomax","html_url":"https://github.com/solomax","followers_url":"https://api.github.com/users/solomax/followers","following_url":"https://api.github.com/users/solomax/following{/other_user}","gists_url":"https://api.github.com/users/solomax/gists{/gist_id}","starred_url":"https://api.github.com/users/solomax/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomax/subscriptions","organizations_url":"https://api.github.com/users/solomax/orgs","repos_url":"https://api.github.com/users/solomax/repos","events_url":"https://api.github.com/users/solomax/events{/privacy}","received_events_url":"https://api.github.com/users/solomax/received_events","type":"User","site_admin":false},"committer":{"login":"solomax","id":3870591,"node_id":"MDQ6VXNlcjM4NzA1OTE=","avatar_url":"https://avatars.githubusercontent.com/u/3870591?v=4","gravatar_id":"","url":"https://api.github.com/users/solomax","html_url":"https://github.com/solomax","followers_url":"https://api.github.com/users/solomax/followers","following_url":"https://api.github.com/users/solomax/following{/other_user}","gists_url":"https://api.github.com/users/solomax/gists{/gist_id}","starred_url":"https://api.github.com/users/solomax/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/solomax/subscriptions","organizations_url":"https://api.github.com/users/solomax/orgs","repos_url":"https://api.github.com/users/solomax/repos","events_url":"https://api.github.com/users/solomax/events{/privacy}","received_events_url":"https://api.github.com/users/solomax/received_events","type":"User","site_admin":false},"parents":[{"sha":"cb20dd6b95a07fe87bf46a2c33580322d0b11cd0","url":"https://api.github.com/repos/apache/openjpa/commits/cb20dd6b95a07fe87bf46a2c33580322d0b11cd0","html_url":"https://github.com/apache/openjpa/commit/cb20dd6b95a07fe87bf46a2c33580322d0b11cd0"}],"stats":{"total":227,"additions":211,"deletions":16},"files":[{"sha":"5043ad49c0acc6fdd99a66a5b52bba6c6607c84b","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingSerializer.java","status":"modified","additions":26,"deletions":16,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/75999ad5d93b73d6d363364c99caac2c5e104877/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/75999ad5d93b73d6d363364c99caac2c5e104877/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingSerializer.java?ref=75999ad5d93b73d6d363364c99caac2c5e104877","patch":"@@ -267,7 +267,7 @@ private void serializeTable(String table, String defaultName,\n         AnnotationBuilder ab) {\n         List<Column> cols = null;\n         if (secondaryInfo != null)\n-            cols = (List<Column>) secondaryInfo.getSecondaryTableJoinColumns\n+            cols = secondaryInfo.getSecondaryTableJoinColumns\n                 (table);\n \n         boolean print = (cols != null && cols.size() > 0) ||\n@@ -322,11 +322,11 @@ protected boolean serializeAttributeOverride(FieldMetaData fmd,\n             return true;\n \n         ValueMappingInfo info = field.getValueInfo();\n-        List<Column> cols = (List<Column>) info.getColumns();\n+        List<Column> cols = info.getColumns();\n         if (cols == null || cols.size() == 0)\n             return false;\n         ValueMappingInfo info2 = field2.getValueInfo();\n-        List<Column> cols2 = (List<Column>) info2.getColumns();\n+        List<Column> cols2 = info2.getColumns();\n         if (cols2 == null || cols2.size() != cols.size())\n             return true;\n         if (cols.size() != 1)\n@@ -467,7 +467,7 @@ protected void serializeFieldMappingContent(FieldMetaData fmd,\n      * Determine if the field is a lob.\n      */\n     private boolean isLob(FieldMapping field) {\n-        for (Column col : (List<Column>) field.getValueInfo().getColumns())\n+        for (Column col : field.getValueInfo().getColumns())\n             if (col.getType() == Types.BLOB || col.getType() == Types.CLOB)\n                 return true;\n         return false;\n@@ -479,14 +479,17 @@ private boolean isLob(FieldMapping field) {\n     private TemporalType getTemporal(FieldMapping field) {\n         if (field.getDeclaredTypeCode() != JavaTypes.DATE\n             && field.getDeclaredTypeCode() != JavaTypes.CALENDAR)\n+        {\n             return null;\n+        }\n \n         DBDictionary dict = ((JDBCConfiguration) getConfiguration())\n             .getDBDictionaryInstance();\n         int def = dict.getJDBCType(field.getTypeCode(), false);\n-        for (Column col : (List<Column>) field.getValueInfo().getColumns()) {\n-            if (col.getType() == def)\n+        for (Column col : field.getValueInfo().getColumns()) {\n+            if (col.getType() == def) {\n                 continue;\n+            }\n             switch (col.getType()) {\n                 case Types.DATE:\n                     return TemporalType.DATE;\n@@ -503,10 +506,14 @@ private TemporalType getTemporal(FieldMapping field) {\n      * Return enum type for the field.\n      */\n     protected EnumType getEnumType(FieldMapping field) {\n-        if (field.getDeclaredTypeCode() != JavaTypes.OBJECT)\n+        if (field.getDeclaredTypeCode() != JavaTypes.OBJECT\n+                && field.getDeclaredTypeCode() != JavaTypes.ENUM)\n+        {\n             return null;\n-        if (!(field.getHandler() instanceof EnumValueHandler))\n+        }\n+        if (!(field.getHandler() instanceof EnumValueHandler)) {\n             return null;\n+        }\n         return ((EnumValueHandler) field.getHandler()).getStoreOrdinal()\n             ? EnumType.ORDINAL : EnumType.STRING;\n     }\n@@ -516,24 +523,27 @@ protected EnumType getEnumType(FieldMapping field) {\n      */\n     private void serializeColumns(MappingInfo info, ColType type,\n         String secondary, AnnotationBuilder ab, Object meta) {\n-        List<Column> cols = (List<Column>) info.getColumns();\n-        if (cols == null)\n+        List<Column> cols = info.getColumns();\n+        if (cols == null) {\n             return;\n+        }\n         AnnotationBuilder abContainer = ab;\n         if (cols.size() > 1) {\n-            Class grpType = type.getColumnGroupAnnotationType();\n+            Class<? extends Annotation> grpType = type.getColumnGroupAnnotationType();\n             if (null != grpType) {\n                 AnnotationBuilder abGrp = newAnnotationBuilder(grpType);\n-                if (null == ab)\n+                if (null == ab) {\n                     addAnnotation(abGrp, meta);\n-                else\n+                } else {\n                     ab.add(null, abGrp);\n+                }\n                 abContainer = abGrp;\n             }\n         }\n-        for (Column col : cols)\n+        for (Column col : cols) {\n             serializeColumn(col, type, secondary,\n                 info.getUnique() != null, abContainer, meta);\n+        }\n     }\n \n     /**\n@@ -637,7 +647,7 @@ protected int type(Object o) {\n      */\n     private List<QueryResultMapping> getQueryResultMappings(ClassMetaData cm) {\n         if (_results == null || _results.isEmpty())\n-            return (List<QueryResultMapping>) Collections.EMPTY_LIST;\n+            return Collections.EMPTY_LIST;\n \n         List<QueryResultMapping> result = null;\n         for (int i = 0; i < _results.size(); i++) {\n@@ -779,7 +789,7 @@ protected void serializeSequence(SequenceMetaData meta) {\n     protected class MappingSerializationComparator\n         extends SerializationComparator {\n \n-        \n+\n         private static final long serialVersionUID = 1L;\n \n         @Override"},{"sha":"14b2e3aaa8db2effe173297db88f21253aa9b967","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira2780/Jira2780Enum.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/75999ad5d93b73d6d363364c99caac2c5e104877/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira2780/Jira2780Enum.java","raw_url":"https://github.com/apache/openjpa/raw/75999ad5d93b73d6d363364c99caac2c5e104877/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira2780/Jira2780Enum.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira2780/Jira2780Enum.java?ref=75999ad5d93b73d6d363364c99caac2c5e104877","patch":"@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright © NORD/LB Norddeutsche Landesbank Girozentrale, Hannover - Alle Rechte vorbehalten -\n+ */\n+package org.apache.openjpa.jira2780;\n+\n+public enum Jira2780Enum {\n+    A, B, C;\n+}"},{"sha":"c87c23c62da8a21cd8d79481c3982bf56db95fa8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira2780/Jira2780ReverseCustomizer.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/75999ad5d93b73d6d363364c99caac2c5e104877/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira2780/Jira2780ReverseCustomizer.java","raw_url":"https://github.com/apache/openjpa/raw/75999ad5d93b73d6d363364c99caac2c5e104877/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira2780/Jira2780ReverseCustomizer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira2780/Jira2780ReverseCustomizer.java?ref=75999ad5d93b73d6d363364c99caac2c5e104877","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Copyright © NORD/LB Norddeutsche Landesbank Girozentrale, Hannover - Alle Rechte vorbehalten -\n+ */\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.jira2780;\n+\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.jdbc.meta.PropertiesReverseCustomizer;\n+import org.apache.openjpa.jdbc.meta.strats.EnumValueHandler;\n+\n+public class Jira2780ReverseCustomizer extends PropertiesReverseCustomizer {\n+    @Override\n+    public void customize(FieldMapping field) {\n+        super.customize(field);\n+        if (field.getDeclaredType().isEnum()) {\n+            EnumValueHandler enumValueHandler = new EnumValueHandler();\n+            enumValueHandler.setStoreOrdinal(false);\n+            field.setHandler(enumValueHandler);\n+            // As a work-around for the error, we can set the type code to\n+            // OBJECT to generate the @Enumerated annotation.\n+            // field.setDeclaredTypeCode(JavaTypes.OBJECT);\n+        }\n+    }\n+}"},{"sha":"cfeefd944244cd2246b3792ae584f93b291a0b97","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira2780/TestJira2780ReverseCustomizer.java","status":"added","additions":113,"deletions":0,"changes":113,"blob_url":"https://github.com/apache/openjpa/blob/75999ad5d93b73d6d363364c99caac2c5e104877/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira2780/TestJira2780ReverseCustomizer.java","raw_url":"https://github.com/apache/openjpa/raw/75999ad5d93b73d6d363364c99caac2c5e104877/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira2780/TestJira2780ReverseCustomizer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jira2780/TestJira2780ReverseCustomizer.java?ref=75999ad5d93b73d6d363364c99caac2c5e104877","patch":"@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.jira2780;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.util.Properties;\n+import java.util.Scanner;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.meta.ReverseMappingTool;\n+import org.apache.openjpa.lib.util.Files;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Tests the added useSchemaElement functionality of the\n+ * ReverseMappingTool and CodeGenerator classes.\n+ *\n+ * @author Austin Dorenkamp (ajdorenk)\n+ */\n+public class TestJira2780ReverseCustomizer extends SingleEMFTestCase {\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        File f = new File(\"target/orm.xml\");\n+\n+        // Make sure to clean up orm.xml from a prior run\n+        if (f.exists()) {\n+            assertTrue(f.delete());\n+        }\n+        setSupportedDatabases(org.apache.openjpa.jdbc.sql.DerbyDictionary.class);\n+    }\n+\n+    @Override\n+    public String getPersistenceUnitName(){\n+        return \"rev-mapping-jira2780-pu\";\n+    }\n+\n+    public void testGettersAndSetters() throws Exception {\n+\n+        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\n+\n+        EntityManager em = emf.createEntityManager();\n+\n+        em.getTransaction().begin();\n+\n+        Query q = em.createNativeQuery(\"CREATE TABLE JIRA2780.ABC (ID INTEGER PRIMARY KEY, TEST_ENUM VARCHAR(1))\");\n+        try {\n+            q.executeUpdate();\n+            em.getTransaction().commit();\n+        } catch (Throwable t) {\n+            em.getTransaction().rollback();\n+            System.out.println(t.toString());\n+        }\n+\n+        final String clsName = \"Abc\";\n+        ReverseMappingTool.Flags flags = new ReverseMappingTool.Flags();\n+        flags.metaDataLevel = \"none\";\n+        flags.generateAnnotations = true;\n+        flags.packageName = getClass().getPackage().getName();\n+        flags.directory = Files.getFile(\"./target\", null);\n+        flags.customizer = new Jira2780ReverseCustomizer();\n+        Properties customProps = new Properties();\n+        customProps.put(flags.packageName + \".\" + clsName + \".testEnum.type\"\n+            , Jira2780Enum.class.getName());\n+        flags.customizer.setConfiguration(customProps);\n+        ReverseMappingTool.run(conf, new String[0], flags, null);\n+\n+        /* Now that the tool has been run, we will test it by reading the generated files */\n+        File abc = new File(Files.getPackageFile(flags.directory, flags.packageName, false)\n+            , clsName + \".java\");\n+        String currLine = null, prevLine;\n+        try (Scanner inFile = new Scanner(abc)) {\n+            while (inFile.hasNextLine()) {\n+                prevLine = currLine;\n+                currLine = inFile.nextLine();\n+                if (currLine.isEmpty() || !currLine.contains(\"Jira2780Enum testEnum\")) {\n+                    continue;\n+                }\n+                if (prevLine.contains(\"@Enumerated(EnumType.STRING)\")) {\n+                    break;\n+                } else {\n+                    fail(\"@Enumerated annotation has not been injected\");\n+                }\n+            }\n+        } catch (FileNotFoundException e) {\n+            fail(clsName + \".java not generated under ./target by ReverseMappingTool\");\n+        }\n+\n+        // Delete file to clean up workspace\n+        assertTrue(abc.delete());\n+    }\n+}"},{"sha":"a3073fa15de23992819167ba45899a413ef32531","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/75999ad5d93b73d6d363364c99caac2c5e104877/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/75999ad5d93b73d6d363364c99caac2c5e104877/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=75999ad5d93b73d6d363364c99caac2c5e104877","patch":"@@ -487,6 +487,11 @@\n \t\t\t<property name=\"openjpa.jdbc.Schemas\" value=\"USCHEMA.USCHANTBL\"/>\n \t\t</properties>\n \t</persistence-unit>\n+\t<persistence-unit name=\"rev-mapping-jira2780-pu\">\n+\t\t<properties>\n+\t\t\t<property name=\"openjpa.jdbc.Schemas\" value=\"JIRA2780.ABC\"/>\n+\t\t</properties>\n+\t</persistence-unit>\n \n     <persistence-unit name=\"puDefault\" transaction-type=\"RESOURCE_LOCAL\">\n         <mapping-file>META-INF/pudefaults-orm.xml</mapping-file>"}]}

