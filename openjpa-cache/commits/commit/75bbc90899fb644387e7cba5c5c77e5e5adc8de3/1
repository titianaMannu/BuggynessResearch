{"sha":"75bbc90899fb644387e7cba5c5c77e5e5adc8de3","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc1YmJjOTA4OTlmYjY0NDM4N2U3Y2JhNWM1Yzc3ZTVlNWFkYzhkZTM=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-10-19T16:14:51Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-10-19T16:14:51Z"},"message":"OPENJPA-1837: fix the MaxEmbeddedLobFieldStrategy when there is limitation of max lob size and when the field is in an embeddable which is contained in an element collection. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1024306 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d8dfe5baec2c17cc596e2dc5c60caea94403f0bc","url":"https://api.github.com/repos/apache/openjpa/git/trees/d8dfe5baec2c17cc596e2dc5c60caea94403f0bc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/75bbc90899fb644387e7cba5c5c77e5e5adc8de3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/75bbc90899fb644387e7cba5c5c77e5e5adc8de3","html_url":"https://github.com/apache/openjpa/commit/75bbc90899fb644387e7cba5c5c77e5e5adc8de3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/75bbc90899fb644387e7cba5c5c77e5e5adc8de3/comments","author":null,"committer":null,"parents":[{"sha":"e1a98596895737e6864e21e97d96796887bae6a9","url":"https://api.github.com/repos/apache/openjpa/commits/e1a98596895737e6864e21e97d96796887bae6a9","html_url":"https://github.com/apache/openjpa/commit/e1a98596895737e6864e21e97d96796887bae6a9"}],"stats":{"total":116,"additions":96,"deletions":20},"files":[{"sha":"74200beb9982f9e05aa728b036ebf1d2d14484bd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","status":"modified","additions":28,"deletions":4,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/75bbc90899fb644387e7cba5c5c77e5e5adc8de3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","raw_url":"https://github.com/apache/openjpa/raw/75bbc90899fb644387e7cba5c5c77e5e5adc8de3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java?ref=75bbc90899fb644387e7cba5c5c77e5e5adc8de3","patch":"@@ -842,8 +842,14 @@ protected FieldStrategy defaultStrategy(FieldMapping field,\n         }\n \n         if (field.isSerialized()) {\n-            if (_dict.maxEmbeddedBlobSize != -1)\n+            if (_dict.maxEmbeddedBlobSize != -1) {\n+                handler = defaultHandler(field, adapting);\n+                if (handler != null) {\n+                    if (installHandlers)\n+                        field.setHandler(handler);\n+                }\n                 return new MaxEmbeddedBlobFieldStrategy();\n+            }\n         } else {\n             // check for mapped strategy\n             Object strat = mappedStrategy(field, field.getType(), adapting);\n@@ -859,18 +865,36 @@ protected FieldStrategy defaultStrategy(FieldMapping field,\n         // check for known field strategies\n         if (!field.isSerialized() && (field.getType() == byte[].class\n             || field.getType() == Byte[].class)) {\n-            if (_dict.maxEmbeddedBlobSize != -1)\n+            if (_dict.maxEmbeddedBlobSize != -1) {\n+                handler = defaultHandler(field, adapting);\n+                if (handler != null) {\n+                    if (installHandlers)\n+                        field.setHandler(handler);\n+                }\n                 return new MaxEmbeddedByteArrayFieldStrategy();\n+            }\n         } else if (!field.isSerialized()\n             && (field.getType() == char[].class\n             || field.getType() == Character[].class)) {\n-            if (_dict.maxEmbeddedClobSize != -1 && isClob(field, false))\n+            if (_dict.maxEmbeddedClobSize != -1 && isClob(field, false)) {\n+                handler = defaultHandler(field, adapting);\n+                if (handler != null) {\n+                    if (installHandlers)\n+                        field.setHandler(handler);\n+                }\n                 return new MaxEmbeddedCharArrayFieldStrategy();\n+            }\n         } else if (!field.isSerialized()) {\n             FieldStrategy strat = defaultTypeStrategy(field, installHandlers,\n                 adapting);\n-            if (strat != null)\n+            if (strat != null) {\n+                handler = defaultHandler(field, adapting);\n+                if (handler != null) {\n+                    if (installHandlers)\n+                        field.setHandler(handler);\n+                }\n                 return strat;\n+            }\n         }\n \n         // check for default handler"},{"sha":"993fb1f29f1c9d471aaeebb97b4d0d0123dd5b52","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/75bbc90899fb644387e7cba5c5c77e5e5adc8de3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/75bbc90899fb644387e7cba5c5c77e5e5adc8de3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java?ref=75bbc90899fb644387e7cba5c5c77e5e5adc8de3","patch":"@@ -180,7 +180,7 @@ protected int toDataStoreValue1(OpenJPAStateManager em, ValueMapping vm,\n             if (ecols.length == 0)\n                 continue;\n \n-            cval = (em == null) ? null : em.fetch(i);\n+            cval = (em == null) ? null : getValue(embed, em, i);\n             cval = embed.toEmbeddedDataStoreValue(cval, store);\n             if (cols.length == 1) {\n                 // rvals is empty\n@@ -196,6 +196,13 @@ protected int toDataStoreValue1(OpenJPAStateManager em, ValueMapping vm,\n         }\n         return idx;\n     }\n+    \n+    private Object getValue(Embeddable embed, OpenJPAStateManager sm, int idx) {\n+        if (embed instanceof MaxEmbeddedLobFieldStrategy) {\n+            return ((MaxEmbeddedLobFieldStrategy)embed).getValue(sm);\n+        }\n+        return sm.fetch(idx);\n+    }\n \n     /**\n      * Helper to convert a datastore value to its object equivalent."},{"sha":"38766fd22fabdac4bf18f958c456280804c10630","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/75bbc90899fb644387e7cba5c5c77e5e5adc8de3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/75bbc90899fb644387e7cba5c5c77e5e5adc8de3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java?ref=75bbc90899fb644387e7cba5c5c77e5e5adc8de3","patch":"@@ -60,11 +60,11 @@\n     private static final Localizer _loc = Localizer.forPackage\n         (HandlerFieldStrategy.class);\n \n-    private Column[] _cols = null;\n-    private ColumnIO _io = null;\n-    private Object[] _args = null;\n-    private boolean _load = false;\n-    private boolean _lob = false;\n+    protected Column[] _cols = null;\n+    protected ColumnIO _io = null;\n+    protected Object[] _args = null;\n+    protected boolean _load = false;\n+    protected boolean _lob = false;\n \n     public void map(boolean adapt) {\n         if (field.getHandler() == null)"},{"sha":"875a38fbc1b1ebff5c8aa1bf44a48c224c615702","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedBlobFieldStrategy.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/75bbc90899fb644387e7cba5c5c77e5e5adc8de3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedBlobFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/75bbc90899fb644387e7cba5c5c77e5e5adc8de3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedBlobFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedBlobFieldStrategy.java?ref=75bbc90899fb644387e7cba5c5c77e5e5adc8de3","patch":"@@ -105,4 +105,13 @@ public void initialize() {\n         _maxSize = dict.maxEmbeddedBlobSize;\n         field.setUsesImplData(Boolean.TRUE);\n     }\n+    \n+    protected Object getValue(OpenJPAStateManager sm) {\n+        byte[] b = (byte[]) sm.getImplData(field.getIndex());\n+        if (b == null || (b.length > _maxSize && !field.getColumns()[0].isNotNull()))\n+            return null;\n+        sm.setImplData(field.getIndex(), null);\n+        DBDictionary.SerializedData dat = new DBDictionary.SerializedData(b);\n+        return dat;\n+    }    \n }"},{"sha":"5b22f0f1c0839e6680447583a504cff65e5ff47c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedByteArrayFieldStrategy.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/75bbc90899fb644387e7cba5c5c77e5e5adc8de3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedByteArrayFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/75bbc90899fb644387e7cba5c5c77e5e5adc8de3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedByteArrayFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedByteArrayFieldStrategy.java?ref=75bbc90899fb644387e7cba5c5c77e5e5adc8de3","patch":"@@ -56,9 +56,8 @@ protected int getExpectedJavaType() {\n \n     protected void update(OpenJPAStateManager sm, Row row)\n         throws SQLException {\n-        byte[] b = PrimitiveWrapperArrays.toByteArray(sm.fetchObject\n-            (field.getIndex()));\n-        if (b == null || (b.length > _maxSize && !field.getColumns()[0].isNotNull()))\n+        byte[] b = (byte[]) getValue(sm);\n+         if (b == null)\n             row.setBytes(field.getColumns()[0], null);\n         else\n             row.setBytes(field.getColumns()[0], b);\n@@ -94,4 +93,12 @@ public void initialize() {\n         DBDictionary dict = field.getMappingRepository().getDBDictionary();\n         _maxSize = dict.maxEmbeddedBlobSize;\n     }\n+    \n+    protected Object getValue(OpenJPAStateManager sm) {\n+        byte[] b = PrimitiveWrapperArrays.toByteArray(sm.fetchObject\n+                (field.getIndex()));\n+        if (b == null || (b.length > _maxSize && !field.getColumns()[0].isNotNull()))\n+            return null;\n+        return b;\n+    }    \n }"},{"sha":"129d5deaae150dd06dcc2c8ff6f165dc0c402676","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedCharArrayFieldStrategy.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/75bbc90899fb644387e7cba5c5c77e5e5adc8de3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedCharArrayFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/75bbc90899fb644387e7cba5c5c77e5e5adc8de3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedCharArrayFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedCharArrayFieldStrategy.java?ref=75bbc90899fb644387e7cba5c5c77e5e5adc8de3","patch":"@@ -111,4 +111,13 @@ public void initialize() {\n         DBDictionary dict = field.getMappingRepository().getDBDictionary();\n         _maxSize = dict.maxEmbeddedClobSize;\n     }\n+    \n+    protected Object getValue(OpenJPAStateManager sm) {\n+        char[] c = PrimitiveWrapperArrays.\n+        toCharArray(sm.fetchObject(field.getIndex()));\n+        if (c == null || c.length > _maxSize)\n+            return null;\n+        else\n+            return c;\n+    }\n }"},{"sha":"1764d10634fbea4691d8d6491f320cb072bd5a29","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedClobFieldStrategy.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/75bbc90899fb644387e7cba5c5c77e5e5adc8de3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedClobFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/75bbc90899fb644387e7cba5c5c77e5e5adc8de3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedClobFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedClobFieldStrategy.java?ref=75bbc90899fb644387e7cba5c5c77e5e5adc8de3","patch":"@@ -52,8 +52,8 @@ protected int getExpectedJavaType() {\n \n     protected void update(OpenJPAStateManager sm, Row row)\n         throws SQLException {\n-        String s = sm.fetchString(field.getIndex());\n-        if (s == null || (s.length() > _maxSize && !field.getColumns()[0].isNotNull()))\n+        String s = (String) getValue(sm);\n+        if (s == null)\n             row.setNull(field.getColumns()[0], true);\n         else\n             row.setString(field.getColumns()[0], s);\n@@ -81,4 +81,12 @@ public void initialize() {\n         DBDictionary dict = field.getMappingRepository().getDBDictionary();\n         _maxSize = dict.maxEmbeddedClobSize;\n     }\n+    \n+    protected Object getValue(OpenJPAStateManager sm) {\n+        String s = sm.fetchString(field.getIndex());\n+        if (s == null || (s.length() > _maxSize && !field.getColumns()[0].isNotNull())) {\n+            return null;\n+        }\n+        return s;\n+    }    \n }"},{"sha":"0bc8426aee8691b6dcda40849e0609eb2d79eb35","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedLobFieldStrategy.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/75bbc90899fb644387e7cba5c5c77e5e5adc8de3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedLobFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/75bbc90899fb644387e7cba5c5c77e5e5adc8de3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedLobFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedLobFieldStrategy.java?ref=75bbc90899fb644387e7cba5c5c77e5e5adc8de3","patch":"@@ -46,7 +46,7 @@\n  * @since 0.4.0\n  */\n abstract class MaxEmbeddedLobFieldStrategy\n-    extends AbstractFieldStrategy {\n+    extends HandlerFieldStrategy {\n \n     /**\n      * Return the expected type of the field from {@link JavaTypes} or\n@@ -95,11 +95,13 @@ public void map(boolean adapt) {\n         tmpCol.setIdentifier(fieldName);\n         tmpCol.setJavaType(getExpectedJavaType());\n         tmpCol.setSize(-1);\n-        Column[] cols = vinfo.getColumns(field, fieldName,\n+        _cols = vinfo.getColumns(field, fieldName,\n             new Column[]{ tmpCol }, field.getTable(), adapt);\n-\n-        field.setColumns(cols);\n-        field.setColumnIO(vinfo.getColumnIO());\n+        _io = vinfo.getColumnIO();\n+        if (_io == null)\n+            _io = field.getColumnIO();\n+        field.setColumns(_cols);\n+        field.setColumnIO(_io);\n         field.mapConstraints(fieldName, adapt);\n         field.mapPrimaryKey(adapt);\n     }\n@@ -266,4 +268,6 @@ public void where(OpenJPAStateManager sm, JDBCStore store, RowManager rm,\n         Object prevValue)\n         throws SQLException {\n     }\n+    \n+    protected abstract Object getValue(OpenJPAStateManager sm);\n }"},{"sha":"ff97c61dee71ff90e48f78138bbf2412792923c7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedOwner.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/75bbc90899fb644387e7cba5c5c77e5e5adc8de3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedOwner.java","raw_url":"https://github.com/apache/openjpa/raw/75bbc90899fb644387e7cba5c5c77e5e5adc8de3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedOwner.java?ref=75bbc90899fb644387e7cba5c5c77e5e5adc8de3","patch":"@@ -86,4 +86,8 @@ public EmbedValue getEmbed() {\n     public Set<EmbedValue> getEmbedCollection() {\n         return embedCollection;\n     }\n+\n+    public void setEmbedCollection(Set<EmbedValue> embedCollection) {\n+        this.embedCollection = embedCollection;\n+    }\n }"},{"sha":"d35826c1db3c7a81086d1a7c010caec1b32ab595","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEJBEmbedded.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/75bbc90899fb644387e7cba5c5c77e5e5adc8de3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEJBEmbedded.java","raw_url":"https://github.com/apache/openjpa/raw/75bbc90899fb644387e7cba5c5c77e5e5adc8de3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEJBEmbedded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEJBEmbedded.java?ref=75bbc90899fb644387e7cba5c5c77e5e5adc8de3","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.persistence.jdbc.annotations;\n \n import java.sql.Types;\n+import java.util.HashSet;\n import java.util.Set;\n \n import javax.persistence.EntityManager;\n@@ -70,6 +71,9 @@ public void testEmbedded() {\n         embed.setBlob(\"foobar\".getBytes());\n         embed.setOwner(owner);\n         owner.setEmbed(embed);\n+        Set<EmbedValue> embedVals = new HashSet<EmbedValue>();\n+        embedVals.add(embed);\n+        owner.setEmbedCollection(embedVals);\n         em.persist(owner);\n         int pk = owner.getPk();\n         em.getTransaction().commit();"}]}

