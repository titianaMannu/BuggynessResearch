{"sha":"75f3a174a46540cdcf3509396f7c82febcfd6c2f","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc1ZjNhMTc0YTQ2NTQwY2RjZjM1MDkzOTZmN2M4MmZlYmNmZDZjMmY=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-11-08T05:03:29Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-11-08T05:03:29Z"},"message":"OPENJPA-1377 - convert property value to upper-case before converting to its corresponding enum type.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@833826 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"450b122e703d6be79692cedc8da9a6d1b1326fe4","url":"https://api.github.com/repos/apache/openjpa/git/trees/450b122e703d6be79692cedc8da9a6d1b1326fe4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/75f3a174a46540cdcf3509396f7c82febcfd6c2f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/75f3a174a46540cdcf3509396f7c82febcfd6c2f","html_url":"https://github.com/apache/openjpa/commit/75f3a174a46540cdcf3509396f7c82febcfd6c2f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/75f3a174a46540cdcf3509396f7c82febcfd6c2f/comments","author":null,"committer":null,"parents":[{"sha":"3e83d5d15b2095330d21739e1244db9b52a1a9b3","url":"https://api.github.com/repos/apache/openjpa/commits/3e83d5d15b2095330d21739e1244db9b52a1a9b3","html_url":"https://github.com/apache/openjpa/commit/3e83d5d15b2095330d21739e1244db9b52a1a9b3"}],"stats":{"total":10,"additions":5,"deletions":5},"files":[{"sha":"2f36b05adba6ea1af64ec5c714fe07fa3f58a474","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAProperties.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/75f3a174a46540cdcf3509396f7c82febcfd6c2f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAProperties.java","raw_url":"https://github.com/apache/openjpa/raw/75f3a174a46540cdcf3509396f7c82febcfd6c2f/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAProperties.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAProperties.java?ref=75f3a174a46540cdcf3509396f7c82febcfd6c2f","patch":"@@ -129,9 +129,9 @@ public static String getBeanProperty(String key) {\n         if (JPAProperties.isValidKey(key)) {\n             // works because enum values are identical String\n             if (value instanceof CacheRetrieveMode) {\n-                return (T)DataCacheRetrieveMode.valueOf(value.toString());\n+                return (T)DataCacheRetrieveMode.valueOf(value.toString().trim().toUpperCase());\n             } else if (value instanceof CacheStoreMode) {\n-                return (T)DataCacheStoreMode.valueOf(value.toString());\n+                return (T)DataCacheStoreMode.valueOf(value.toString().trim().toUpperCase());\n             }\n         }\n         return (T)value;\n@@ -148,9 +148,9 @@ public static Object convertToUserValue(String key, Object value) {\n         if (JPAProperties.isValidKey(key)) {\n             // works because enum values are identical String\n             if (value instanceof DataCacheRetrieveMode) {\n-                return CacheRetrieveMode.valueOf(value.toString());\n+                return CacheRetrieveMode.valueOf(value.toString().trim().toUpperCase());\n             } else if (value instanceof DataCacheStoreMode) {\n-                return CacheStoreMode.valueOf(value.toString());\n+                return CacheStoreMode.valueOf(value.toString().trim().toUpperCase());\n             }\n         }\n         return value;\n@@ -202,7 +202,7 @@ public static Object convertToUserValue(String key, Object value) {\n         if (type.isInstance(val))\n             return (E)val;\n         if (val instanceof String) {\n-            return Enum.valueOf(type, val.toString());\n+            return Enum.valueOf(type, val.toString().trim().toUpperCase());\n         }\n         if (values != null && values.length > 0 && val instanceof Number) {\n             return values[((Number)val).intValue()];"}]}

