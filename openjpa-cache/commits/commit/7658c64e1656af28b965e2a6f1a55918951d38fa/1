{"sha":"7658c64e1656af28b965e2a6f1a55918951d38fa","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc2NThjNjRlMTY1NmFmMjhiOTY1ZTJhNmYxYTU1OTE4OTUxZDM4ZmE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-03T21:10:19Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-03T21:10:19Z"},"message":"OPENJPA-1163:\nForgot new classes in previous commit (testcase and entity). \nSubmitted By : Ravi Palacherla\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@800566 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"45adeb45ba366d6f58060b23e3cb41bdf28c16a7","url":"https://api.github.com/repos/apache/openjpa/git/trees/45adeb45ba366d6f58060b23e3cb41bdf28c16a7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7658c64e1656af28b965e2a6f1a55918951d38fa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7658c64e1656af28b965e2a6f1a55918951d38fa","html_url":"https://github.com/apache/openjpa/commit/7658c64e1656af28b965e2a6f1a55918951d38fa","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7658c64e1656af28b965e2a6f1a55918951d38fa/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"5232b727949d00add9cb61e153cbbcdc9e13c769","url":"https://api.github.com/repos/apache/openjpa/commits/5232b727949d00add9cb61e153cbbcdc9e13c769","html_url":"https://github.com/apache/openjpa/commit/5232b727949d00add9cb61e153cbbcdc9e13c769"}],"stats":{"total":217,"additions":217,"deletions":0},"files":[{"sha":"1990c6fc1cf788101c0f67fba06d6c38c7e61db2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/A.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/7658c64e1656af28b965e2a6f1a55918951d38fa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/A.java","raw_url":"https://github.com/apache/openjpa/raw/7658c64e1656af28b965e2a6f1a55918951d38fa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/A.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/A.java?ref=7658c64e1656af28b965e2a6f1a55918951d38fa","patch":"@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Set;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.jdbc.*;\n+import org.apache.openjpa.persistence.*;\n+\n+@Entity\n+@Table(name = \"JPA_A\")\n+public class A {\n+\n+    @Id\n+    @Column(name = \"ID\", nullable = false)\n+    private int id;\n+\n+    @Column(name = \"NAME\")\n+    private String name;\n+    \n+    @Column(name = \"AGE\")\n+    private int age;\n+    \n+    @PersistentMap(keyType = String.class,\n+        elementType = String.class)\n+    @ContainerTable(name=\"JPA_A_MAPS_C\",\n+         joinColumns = @XJoinColumn(name = \"MAP_ID\"))\n+    @KeyColumn(name=\"MAP_KEY\")\n+    @ElementColumn(name=\"MAP_VALUE\")\n+    private Map<String,String> map = new HashMap<String,String>();\n+\n+    public A() {\n+    }\n+\n+    \n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    \n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    \n+    public int getAge() {\n+        return age;\n+    }\n+\n+    public void setAge(int age) {\n+        this.age = age;\n+    }\n+    \n+    public Map<String,String> getMap() {\n+        return this.map;\n+    }\n+\n+    public void setMap(Map<String,String> map) {\n+        this.map = map;\n+    }\n+\n+}"},{"sha":"cadfaa6fe76135371990b66d87fc9e1cdb7a147a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestCollectionTracking.java","status":"added","additions":127,"deletions":0,"changes":127,"blob_url":"https://github.com/apache/openjpa/blob/7658c64e1656af28b965e2a6f1a55918951d38fa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestCollectionTracking.java","raw_url":"https://github.com/apache/openjpa/raw/7658c64e1656af28b965e2a6f1a55918951d38fa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestCollectionTracking.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestCollectionTracking.java?ref=7658c64e1656af28b965e2a6f1a55918951d38fa","patch":"@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.jdbc.kernel;\n+\n+import java.util.*;\n+import javax.persistence.*;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestCollectionTracking extends SingleEMFTestCase {\n+\n+    private JDBCConfiguration _conf;\n+\n+    public void setUp() {\n+        super.setUp(A.class,\"openjpa.Compatibility\",\"autoOff=false\");\n+    }\n+\n+    public void testCollectTracking() {\n+        int initialValue = 10, changedAge = 40;\n+        String changedName = \"changed Name\";\n+\n+        int incrementValue = 3;\n+        modifyA(initialValue, incrementValue, changedAge, changedName);\n+        assertA(initialValue, incrementValue, changedAge, changedName);\n+\n+        incrementValue = 8;\n+        modifyA(initialValue, incrementValue, changedAge, changedName);\n+        assertA(initialValue, incrementValue, changedAge, changedName);\n+    }\n+\n+    private void assertA(int initialValue, int incrementValue, int changedAge,\n+        String changedName) {\n+        EntityManager em3 = emf.createEntityManager();\n+        Query query3 =\n+            em3.createQuery(\"select emp from A as emp where emp.id = :id\")\n+                .setParameter(\"id\", 1);\n+        A changedA = (A) query3.getSingleResult();\n+        assertEquals(changedAge,changedA.getAge());\n+        assertEquals(changedName,changedA.getName());\n+        assertEquals(initialValue + incrementValue,changedA.getMap().size());\n+        em3.close();\n+    }\n+\n+    private void modifyA(int initialvalue, int num, int changedAge,\n+        String changedName) {\n+\n+        clearTables();\n+\n+        EntityManager em1 = emf.createEntityManager();\n+        EntityManager em2 = emf.createEntityManager();\n+\n+        /** EM1 create A */\n+        em1.getTransaction().begin();\n+        A newA = new A();\n+        newA.setId(1);\n+        newA.setAge(30);\n+        newA.setName(\"Initial\");\n+        for (int i = 0; i < initialvalue; i++) {\n+            newA.getMap().put(\"key:\" + i, \"value:\" + i);\n+        }\n+        em1.persist(newA);\n+        em1.getTransaction().commit();\n+\n+        /* Start em1 transaction setting age to 40 */\n+        em1.getTransaction().begin();\n+        em1.merge(newA);\n+        newA.setAge(changedAge);\n+        Iterator it = newA.getMap().entrySet().iterator();\n+        for (int i = 0; i < num; i++) {\n+            it.next();\n+            it.remove();\n+        }\n+\n+        for (int i = initialvalue; i < initialvalue + num; i++) {\n+            newA.getMap().put(\"key:\" + i, \"value:\" + i);\n+        }\n+\n+        /* Start em2 transaction setting name to Changed */\n+        em2.getTransaction().begin();\n+        Query query2 =\n+            em2.createQuery(\"select emp from A as emp where emp.id = :id\")\n+                .setParameter(\"id\", 1);\n+        A result2 = (A) query2.getSingleResult();\n+        result2.setName(changedName);\n+        for (int i = initialvalue + num; i < initialvalue + num + num; i++) {\n+            result2.getMap().put(\"key:\" + i, \"value:\" + i);\n+        }\n+        em2.getTransaction().commit();\n+        em1.getTransaction().commit();\n+\n+        em2.close();\n+        em1.close();\n+    }\n+\n+    private void clearTables() {\n+\n+        EntityManager em1 = emf.createEntityManager();\n+        em1.getTransaction().begin();\n+        Query query = em1.createNativeQuery(\"delete from JPA_A\");\n+        query.executeUpdate();\n+        query = em1.createNativeQuery(\"delete from JPA_A_MAPS_C\");\n+        query.executeUpdate();\n+        em1.getTransaction().commit();\n+        em1.close();\n+    }\n+\n+    public void tearDown() throws Exception {\n+        // avoids super class to delete all records\n+    }\n+\n+}"}]}

