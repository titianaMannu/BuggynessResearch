{"sha":"76d184c106b6e4e191549412f0d7513b82b950da","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc2ZDE4NGMxMDZiNmU0ZTE5MTU0OTQxMmYwZDc1MTNiODJiOTUwZGE=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-03T19:20:57Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-03-03T19:20:57Z"},"message":"OPENJPA-1545: Adding new faster way to auto detach the entire persistence context. Committing code changes, test, and doc.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@918643 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dd49f4faebd041021b1512c8e65232e905c81320","url":"https://api.github.com/repos/apache/openjpa/git/trees/dd49f4faebd041021b1512c8e65232e905c81320"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/76d184c106b6e4e191549412f0d7513b82b950da","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/76d184c106b6e4e191549412f0d7513b82b950da","html_url":"https://github.com/apache/openjpa/commit/76d184c106b6e4e191549412f0d7513b82b950da","comments_url":"https://api.github.com/repos/apache/openjpa/commits/76d184c106b6e4e191549412f0d7513b82b950da/comments","author":null,"committer":null,"parents":[{"sha":"e9f305f700478876aa71dcda3f9163a74c981c02","url":"https://api.github.com/repos/apache/openjpa/commits/e9f305f700478876aa71dcda3f9163a74c981c02","html_url":"https://github.com/apache/openjpa/commit/e9f305f700478876aa71dcda3f9163a74c981c02"}],"stats":{"total":169,"additions":167,"deletions":2},"files":[{"sha":"be1352060f3fa6aaa240b1e2a65d5dc17ae1d275","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/DetachOptions.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/76d184c106b6e4e191549412f0d7513b82b950da/openjpa-kernel/src/main/java/org/apache/openjpa/conf/DetachOptions.java","raw_url":"https://github.com/apache/openjpa/raw/76d184c106b6e4e191549412f0d7513b82b950da/openjpa-kernel/src/main/java/org/apache/openjpa/conf/DetachOptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/DetachOptions.java?ref=76d184c106b6e4e191549412f0d7513b82b950da","patch":"@@ -33,6 +33,8 @@\n     private boolean _transient = true;\n     private boolean _manager = true;\n     private boolean _access = true;\n+    \n+    private boolean _liteAutoDetach = false;\n \n     /**\n      * The {@link DetachState} constant.\n@@ -124,6 +126,22 @@ public boolean getAccessUnloaded() {\n     public void setAccessUnloaded(boolean val) {\n         _access = val;\n     }\n+    \n+    /**\n+     * Whether to use lite detachment when auto detaching. This setting only applies when\n+     * DetachState is set to loaded.\n+     */\n+    public void setLiteAutoDetach(boolean b) {\n+        _liteAutoDetach = b;\n+    }\n+\n+    /**\n+     * Whether to use lite detachment when auto detaching. This setting only applies when\n+     * DetachState is set to loaded.\n+     */\n+    public boolean getLiteAutoDetach() {\n+        return (getDetachState() & DETACH_LOADED) == 1 && _liteAutoDetach;\n+    }\n \n     /**\n      * Detach loaded state."},{"sha":"afc0c72a69f3a7bd10e98bcfa116cfcd3512474c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/76d184c106b6e4e191549412f0d7513b82b950da/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/76d184c106b6e4e191549412f0d7513b82b950da/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=76d184c106b6e4e191549412f0d7513b82b950da","patch":"@@ -3305,6 +3305,10 @@ public void detachAll(OpCallbacks call, boolean flush) {\n     }\n \n     private void detachAllInternal(OpCallbacks call) {\n+        if(_conf.getDetachStateInstance().getLiteAutoDetach() == true){\n+            detachAllInternalLite();\n+            return;\n+        }\n         Collection<StateManagerImpl> states = getManagedStates();\n         StateManagerImpl sm;\n         for (Iterator<StateManagerImpl> itr = states.iterator(); itr.hasNext();) {\n@@ -3334,6 +3338,35 @@ else if (!sm.getMetaData().isDetachable()) {\n         }\n     }\n \n+    private void detachAllInternalLite() {\n+        Collection<StateManagerImpl> states = getManagedStates();\n+        // TODO : should I call clear on old cache first? perhaps a memory leak?\n+        // Clear out all persistence context caches.\n+        _cache = new ManagedCache(this);\n+        if (_transCache != null) {\n+            _transCache.clear();\n+        }\n+        if (_transAdditions != null) {\n+            _transAdditions.clear();\n+        }\n+\n+        // Detach all.\n+        TransferFieldManager fm = new TransferFieldManager();\n+        for (StateManagerImpl s : states) {\n+            ClassMetaData cmd = s.getMetaData();\n+            if (s.isPersistent() && cmd.isDetachable()) {\n+                //Clean up an fields that are LargeResultSets.\n+                for (FieldMetaData fmd : cmd.getLrsFields()) {\n+                    int index = fmd.getIndex();\n+                    fm.storeObjectField(index, null);\n+                    s.replaceField(s.getPersistenceCapable(), fm, index);\n+                    fm.clear();\n+                }\n+                s.unproxyFields();\n+                s.getPersistenceCapable().pcReplaceStateManager(null);\n+            }\n+        }\n+    }\n     public Object attach(Object obj, boolean copyNew, OpCallbacks call) {\n         if (obj == null)\n             return null;"},{"sha":"5933c4a97aab5fc6afd0179437236b8644e69fc6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/76d184c106b6e4e191549412f0d7513b82b950da/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/76d184c106b6e4e191549412f0d7513b82b950da/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=76d184c106b6e4e191549412f0d7513b82b950da","patch":"@@ -212,6 +212,7 @@\n     private FieldMetaData[] _listingFields = null;\n     private FieldMetaData[] _allListingFields = null;\n     private FieldMetaData[] _allProxyFields = null;\n+    private FieldMetaData[] _allLrsFields = null;\n     private FetchGroup[] _fgs = null;\n     private FetchGroup[] _customFGs = null;\n     private boolean _intercepting = false;\n@@ -1014,6 +1015,26 @@ public boolean isAccessibleField(String field) {\n         return _allProxyFields;\n     }\n     \n+    /**\n+     * Return all large result set fields. Will never return null.\n+     */\n+    public FieldMetaData[] getLrsFields() {\n+        if (_allLrsFields == null) {\n+            // Make sure _allFields has been initialized\n+            if (_allFields == null) {\n+                getFields();\n+            }\n+            List<FieldMetaData> res = new ArrayList<FieldMetaData>();\n+            for (FieldMetaData fmd : _allFields) {\n+                if(fmd.isLRS()==true){\n+                    res.add(fmd);\n+                }\n+            }\n+            _allLrsFields = res.toArray(new FieldMetaData[res.size()]);\n+        }\n+        return _allLrsFields;\n+    }\n+    \n     /**\n      * Return all field metadata, including superclass fields.\n      */\n@@ -1262,6 +1283,7 @@ public FieldMetaData addDeclaredField(String name, Class<?> type) {\n         FieldMetaData fmd = _repos.newFieldMetaData(name, type, this);\n         clearFieldCache();\n         _fieldMap.put(name, fmd);\n+\n         return fmd;\n     }\n \n@@ -1642,6 +1664,7 @@ protected void clearAllFieldCache() {\n         _allDFGFields = null;\n         _allPKFields = null;\n         _allProxyFields = null;\n+        _allLrsFields = null;\n         _definedFields = null;\n         _listingFields = null;\n         _allListingFields = null;"},{"sha":"e568f436bc883a6790e9ad3bd2fe5f1fbbea4f6d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetach.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/76d184c106b6e4e191549412f0d7513b82b950da/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetach.java","raw_url":"https://github.com/apache/openjpa/raw/76d184c106b6e4e191549412f0d7513b82b950da/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetach.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetach.java?ref=76d184c106b6e4e191549412f0d7513b82b950da","patch":"@@ -51,8 +51,8 @@\n  *\n  */\n public class TestDetach extends SingleEMFTestCase {\n-    private OpenJPAEntityManager em;\n-    private DMCustomer root;\n+    OpenJPAEntityManager em;\n+    DMCustomer root;\n     \n     public void setUp() {\n         super.setUp(DMCustomer.class, DMCustomerInventory.class, DMItem.class,"},{"sha":"99dc6d5c3b3c81011bdd50af5519f55201d685d5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachLite.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/76d184c106b6e4e191549412f0d7513b82b950da/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachLite.java","raw_url":"https://github.com/apache/openjpa/raw/76d184c106b6e4e191549412f0d7513b82b950da/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachLite.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachLite.java?ref=76d184c106b6e4e191549412f0d7513b82b950da","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.detachment;\n+\n+import org.apache.openjpa.conf.Compatibility;\n+import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.persistence.detachment.featureSelection.DMCustomer;\n+import org.apache.openjpa.persistence.detachment.featureSelection.DMCustomerInventory;\n+import org.apache.openjpa.persistence.detachment.featureSelection.DMItem;\n+\n+public class TestDetachLite extends TestDetach {\n+    public void setUp() {\n+        super.setUp(\n+            \"openjpa.DetachState\", \"loaded(LiteAutoDetach=true)\", \n+            DMCustomer.class, DMCustomerInventory.class, DMItem.class, \n+            CLEAR_TABLES\n+            );\n+\n+        Compatibility compat = emf.getConfiguration().getCompatibilityInstance();\n+        compat.setCopyOnDetach(false);\n+        compat.setFlushBeforeDetach(false);\n+        em = emf.createEntityManager();\n+        root = createData();\n+    }\n+\n+    public void testCloseDetach() {\n+        root = em.merge(root);\n+        PersistenceCapable pc = (PersistenceCapable) root;\n+        assertFalse(pc.pcIsDetached());\n+        em.close();\n+        assertTrue(pc.pcIsDetached());\n+        // Make sure everything is detached and we can still use the Entity\n+        for (DMCustomerInventory c : root.getCustomerInventories()) {\n+            pc = (PersistenceCapable) c;\n+            assertTrue(pc.pcIsDetached());\n+            pc = (PersistenceCapable) c.getItem();\n+            assertTrue(pc.pcIsDetached());\n+\n+        }\n+    }\n+}"},{"sha":"b46deb4ce3badc5cc071d09bcefb6fe3f7fc7308","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomer.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/76d184c106b6e4e191549412f0d7513b82b950da/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomer.java","raw_url":"https://github.com/apache/openjpa/raw/76d184c106b6e4e191549412f0d7513b82b950da/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomer.java?ref=76d184c106b6e4e191549412f0d7513b82b950da","patch":"@@ -26,6 +26,7 @@\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n import javax.persistence.OneToMany;\n+import javax.persistence.Version;\n \n @Entity \n public class DMCustomer {\n@@ -35,6 +36,8 @@\n     private String firstName;    \n     private String lastName;    \n \n+    @Version int version;\n+    \n     @OneToMany(mappedBy=\"customer\", \n             fetch=FetchType.EAGER,\n             cascade=CascadeType.ALL)"},{"sha":"cb3dd8c58d10a9c685b00cc7555b21b061659ff9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomerInventory.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/76d184c106b6e4e191549412f0d7513b82b950da/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomerInventory.java","raw_url":"https://github.com/apache/openjpa/raw/76d184c106b6e4e191549412f0d7513b82b950da/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomerInventory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMCustomerInventory.java?ref=76d184c106b6e4e191549412f0d7513b82b950da","patch":"@@ -23,6 +23,7 @@\n import javax.persistence.Id;\n import javax.persistence.JoinColumn;\n import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n \n @Entity\n public class DMCustomerInventory  {\n@@ -37,6 +38,8 @@\n     @ManyToOne(cascade=MERGE)\n     @JoinColumn(name=\"CI_CUSTOMERID\")\n     private DMCustomer customer;\n+    \n+    @Version int version;\n \n     public DMCustomerInventory() {\n     }"},{"sha":"ba22b9d553c878e0d0c56bb52c2600bb8752c643","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMItem.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/76d184c106b6e4e191549412f0d7513b82b950da/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMItem.java","raw_url":"https://github.com/apache/openjpa/raw/76d184c106b6e4e191549412f0d7513b82b950da/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMItem.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/featureSelection/DMItem.java?ref=76d184c106b6e4e191549412f0d7513b82b950da","patch":"@@ -20,12 +20,15 @@\n \n import javax.persistence.Entity;\n import javax.persistence.Id;\n+import javax.persistence.Version;\n \n @Entity\n public class DMItem {\n     private static long idCounter = System.currentTimeMillis();\t\n     @Id private long id = idCounter++;\n \n+    @Version int version;\n+    \n     private String name;\n     private double price;\n "},{"sha":"9d7bc8c00567b62614691af55a10df7bec0d1a98","filename":"openjpa-project/src/doc/manual/ref_guide_remote.xml","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/76d184c106b6e4e191549412f0d7513b82b950da/openjpa-project/src/doc/manual/ref_guide_remote.xml","raw_url":"https://github.com/apache/openjpa/raw/76d184c106b6e4e191549412f0d7513b82b950da/openjpa-project/src/doc/manual/ref_guide_remote.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_remote.xml?ref=76d184c106b6e4e191549412f0d7513b82b950da","patch":"@@ -327,6 +327,31 @@ whenever an unloaded field is accessed. This option is only available when you\n use detached state managers, as determined by the settings above.\n                     </para>\n                 </listitem>\n+                <listitem>                    \n+                    <para>\n+<literal>LiteAutoDetach</literal>: <emphasis role=\"bold\">This option is ONLY valid for the <literal>loaded</literal> \n+DetachState setting.</emphasis> Detach all fields and relations as described by the loaded \n+property when an explicit detach is requested or when a \n+single Entity is being detached as part of serialization. When the entire \n+persistence context is being auto-detached(@See openjpa.AutoDetach), \n+the minimal amount of work will be completed to disassociate all Entities from \n+the persistence context. <emphasis role=\"bold\">It is highly recommended that all Entities have a \n+@Version field when using this property</emphasis>. In addition, care needs to be taken \n+when this value is set to true as the following caveats apply: \n+            <itemizedlist>\n+                <listitem>\n+                    <para>\n+A relationship from a managed Entity to an unmanaged Entity which was detached by the lite detach setting will not be persisted.                                       \n+                    </para>       \n+                </listitem>\n+                <listitem>\n+                    <para>\n+When merging a detached Entity back into the persistence context any lazily loaded fields that were marked to null when detached will not be persisted.                                       \n+                    </para>       \n+                </listitem>                \n+            </itemizedlist>\n+                    </para>\n+                </listitem>\n             </itemizedlist>\n             <example id=\"ref_guide_detach_graph_confex\">\n                 <title>"}]}

