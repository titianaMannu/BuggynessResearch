{"sha":"774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc3NGU3YjViOGMzYTA3ZWYwMWZkZWI1ZDM4ZjFjNGJiNTlkZGE5YjA=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-06T14:49:52Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-06T14:49:52Z"},"message":"OPENJPA-274, OPENJPA-275. Improved our bulk update support to automatically increment version counters as necessary if an UPDATE query does not maintain the version fields itself. Also fixed a bug with all queries involving version fields by changing FieldMappings representing version fields to return their owning ClassMapping's Version's columns from a getColumns() call.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@553912 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7d9c65b95647d154d39544a41a42217191b152de","url":"https://api.github.com/repos/apache/openjpa/git/trees/7d9c65b95647d154d39544a41a42217191b152de"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0","html_url":"https://github.com/apache/openjpa/commit/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0/comments","author":null,"committer":null,"parents":[{"sha":"d99571342fcb93179e63b217749bfac60ef85fe9","url":"https://api.github.com/repos/apache/openjpa/commits/d99571342fcb93179e63b217749bfac60ef85fe9","html_url":"https://github.com/apache/openjpa/commit/d99571342fcb93179e63b217749bfac60ef85fe9"}],"stats":{"total":212,"additions":204,"deletions":8},"files":[{"sha":"b21290ff40ffd2a50db051b65b8b915c4f280c05","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java?ref=774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0","patch":"@@ -28,6 +28,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Iterator;\n \n import org.apache.openjpa.event.LifecycleEventManager;\n import org.apache.openjpa.jdbc.kernel.exps.ExpContext;\n@@ -62,6 +63,7 @@\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.ValueMetaData;\n+import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.util.UserException;\n import serp.util.Numbers;\n \n@@ -437,7 +439,11 @@ private Number executeBulkOperation(Executor ex, ClassMetaData base,\n         // we cannot execute a bulk delete statement when have mappings in\n         // multiple tables, so indicate we want to use in-memory with null\n         ClassMapping[] mappings = (ClassMapping[]) metas;\n+\n+        // specification of the \"updates\" map indicates that this is\n+        // an update query; otherwise, this is a delete statement\n         boolean isUpdate = updates != null && updates.size() > 0;\n+\n         for (int i = 0; i < mappings.length; i++) {\n             if (!isSingleTableMapping(mappings[i], subclasses) && !isUpdate)\n                 return null;\n@@ -471,13 +477,11 @@ private Number executeBulkOperation(Executor ex, ClassMetaData base,\n                 subclasses, exps[i], state[i], \n                 JDBCFetchConfiguration.EAGER_NONE);\n \n-            // specification of the \"udpates\" map indicates that this is\n-            // an update query; otherwise, this is a delete statement\n             // The bulk operation will return null to indicate that the database\n             // does not support the request bulk delete operation; in\n             // this case, we need to perform the query in-memory and\n             // manually delete the instances\n-            if (updates == null)\n+            if (!isUpdate)\n                 sql[i] = dict.toDelete(mappings[i], sel, params);\n             else\n                 sql[i] = dict.toUpdate(mappings[i], sel, _store, params,"},{"sha":"14b0f3c564764ccfe4855cccecb19f84f27753c4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","raw_url":"https://github.com/apache/openjpa/raw/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java?ref=774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0","patch":"@@ -918,7 +918,14 @@ public FieldMapping getValueMappedByMapping() {\n     }\n \n     public Column[] getColumns() {\n-        return _val.getColumns();\n+        // pcl: 6 July 2007: this seems a bit hacky, but if the mapping is a\n+        // version, it will have a NoneFieldMapping (since the version strategy\n+        // for the class takes care of it's mapping), and NoneFieldStrategies\n+        // do not have columns.\n+        if (isVersion())\n+            return getDeclaringMapping().getVersion().getColumns();\n+        else\n+            return _val.getColumns();\n     }\n \n     public void setColumns(Column[] cols) {"},{"sha":"3c07fc2fb88ca91d59f0e21103d11e897cf79dd4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/QueryResultMapping.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/QueryResultMapping.java","raw_url":"https://github.com/apache/openjpa/raw/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/QueryResultMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/QueryResultMapping.java?ref=774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0","patch":"@@ -413,8 +413,6 @@ private void resolveMapping(String path, Object id) {\n                     throw new MetaDataException(_loc.get(\"untraversable-path\",\n                         QueryResultMapping.this, _candidate, path));\n                 Column[] cols = last.getColumns();\n-                if (last.isVersion())\n-                    cols = candidate.getVersion().getColumns();\n                 assertSingleColumn(cols, path);\n                 Column col = cols[0];\n                 "},{"sha":"3086daa5a678dd034a5c95b2c662eb6e95999774","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java","raw_url":"https://github.com/apache/openjpa/raw/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java?ref=774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.jdbc.meta;\n \n import java.sql.SQLException;\n+import java.util.Map;\n \n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.schema.Column;\n@@ -365,4 +366,14 @@ private VersionStrategy assertStrategy() {\n     public String toString() {\n         return _mapping + \"<version>\";\n     }\n+\n+    /**\n+     * @return a Map<Column,String> specifying how to update each version\n+     * column in this instance during a bulk update.\n+     *\n+     * @since 1.0.0\n+     */\n+    public Map getBulkUpdateValues() {\n+        return _strategy.getBulkUpdateValues();\n+    }\n }"},{"sha":"60c80c2f151c6b378cbe2134f4f6c2132895527d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java?ref=774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0","patch":"@@ -19,10 +19,12 @@\n package org.apache.openjpa.jdbc.meta;\n \n import java.sql.SQLException;\n+import java.util.Map;\n \n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.Select;\n+import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.StoreManager;\n \n@@ -74,4 +76,12 @@ public boolean checkVersion(OpenJPAStateManager sm, JDBCStore store,\n      * @see StoreManager#compareVersion\n      */\n     public int compareVersion(Object v1, Object v2);\n+\n+    /**\n+     * @return a Map<Column,String> specifying how to update each version\n+     * column during a bulk update.\n+     *\n+     * @since 1.0.0\n+     */\n+    public Map getBulkUpdateValues();\n }"},{"sha":"58bf9ad75f4750617c3c9ffd7bd0fcea930ea9a0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractVersionStrategy.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractVersionStrategy.java?ref=774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0","patch":"@@ -19,6 +19,8 @@\n package org.apache.openjpa.jdbc.meta.strats;\n \n import java.sql.SQLException;\n+import java.util.Map;\n+import java.util.Collections;\n \n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n@@ -67,4 +69,8 @@ public boolean checkVersion(OpenJPAStateManager sm, JDBCStore store,\n     public int compareVersion(Object v1, Object v2) {\n         return StoreManager.VERSION_SAME;\n     }\n+\n+    public Map getBulkUpdateValues() {\n+        return Collections.EMPTY_MAP;\n+    }\n }"},{"sha":"2f2d8e22448c00003eb3a22259e6a63eb3a834d0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NumberVersionStrategy.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NumberVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NumberVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NumberVersionStrategy.java?ref=774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0","patch":"@@ -18,7 +18,11 @@\n  */\n package org.apache.openjpa.jdbc.meta.strats;\n \n+import java.util.Map;\n+import java.util.HashMap;\n+\n import org.apache.openjpa.meta.JavaTypes;\n+import org.apache.openjpa.jdbc.schema.Column;\n import serp.util.Numbers;\n \n /**\n@@ -60,4 +64,12 @@ protected Object nextVersion(Object version) {\n             return _initial;\n         return Numbers.valueOf(((Number) version).intValue() + 1);\n     }\n+\n+    public Map getBulkUpdateValues() {\n+        Column[] cols = vers.getColumns();\n+        Map map = new HashMap(cols.length);\n+        for (int i = 0; i < cols.length; i++)\n+            map.put(cols[i], cols[i].getName() + \" + 1\");\n+        return map;\n+    }\n }"},{"sha":"b73e77bb81217f7c4012f38ddf31576c7313ba64","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SuperclassVersionStrategy.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SuperclassVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SuperclassVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/SuperclassVersionStrategy.java?ref=774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.jdbc.meta.strats;\n \n import java.sql.SQLException;\n+import java.util.Map;\n \n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n@@ -48,4 +49,9 @@ public int compareVersion(Object v1, Object v2) {\n         return vers.getClassMapping().getPCSuperclassMapping().getVersion().\n             compareVersion(v1, v2);\n     }\n+\n+    public Map getBulkUpdateValues() {\n+        return vers.getClassMapping().getPCSuperclassMapping().getVersion()\n+            .getBulkUpdateValues();\n+    }\n }"},{"sha":"ed91d13a68a7a4456c393aa41dcb25059e989248","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/TimestampVersionStrategy.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/TimestampVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/TimestampVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/TimestampVersionStrategy.java?ref=774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0","patch":"@@ -19,8 +19,12 @@\n package org.apache.openjpa.jdbc.meta.strats;\n \n import java.sql.Timestamp;\n+import java.util.Map;\n+import java.util.HashMap;\n+import java.util.Date;\n \n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n+import org.apache.openjpa.jdbc.schema.Column;\n \n /**\n  * Uses a timestamp for optimistic versioning.\n@@ -43,4 +47,13 @@ protected int getJavaType() {\n     protected Object nextVersion(Object version) {\n         return new Timestamp(System.currentTimeMillis());\n     }\n+\n+    public Map getBulkUpdateValues() {\n+        Column[] cols = vers.getColumns();\n+        Map map = new HashMap(cols.length);\n+        Date d = new Date();\n+        for (int i = 0; i < cols.length; i++)\n+            map.put(cols[i], d);\n+        return map;\n+    }\n }"},{"sha":"e894987d360727895c9c6851b0b11ab9f04179b4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":29,"deletions":2,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0","patch":"@@ -58,6 +58,7 @@\n import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n+import java.util.HashMap;\n import javax.sql.DataSource;\n \n import org.apache.commons.lang.StringUtils;\n@@ -1883,12 +1884,23 @@ protected void appendUpdates(Select sel, JDBCStore store, SQLBuffer sql,\n         sql.append(\" SET \");\n         ExpContext ctx = new ExpContext(store, params, \n             store.getFetchConfiguration());\n+\n+        // If the updates map contains any version fields, assume that the\n+        // optimistic lock version data is being handled properly by the\n+        // caller. Otherwise, give the version indicator an opportunity to\n+        // add more update clauses as needed.\n+        boolean augmentUpdates = true;\n+\n         for (Iterator i = updateParams.entrySet().iterator(); i.hasNext();) {\n             Map.Entry next = (Map.Entry) i.next();\n-            FieldMetaData fmd = (FieldMetaData) next.getKey();\n+            FieldMapping fmd = (FieldMapping) next.getKey();\n+\n+            if (fmd.isVersion())\n+                augmentUpdates = false;\n+\n             Val val = (Val) next.getValue();\n \n-            Column col = ((FieldMapping) fmd).getColumns()[0];\n+            Column col = fmd.getColumns()[0];\n             sql.append(col.getName());\n             sql.append(\" = \");\n \n@@ -1904,6 +1916,21 @@ protected void appendUpdates(Select sel, JDBCStore store, SQLBuffer sql,\n             if (i.hasNext())\n                 sql.append(\", \");\n         }\n+\n+        if (augmentUpdates) {\n+            ClassMapping meta =\n+                ((FieldMapping) updateParams.keySet().iterator().next())\n+                    .getDeclaringMapping();\n+            Map updates = meta.getVersion().getBulkUpdateValues();\n+            for (Iterator iter = updates.entrySet().iterator();\n+                iter.hasNext(); ) {\n+                Map.Entry e = (Map.Entry) iter.next();\n+                Column col = (Column) e.getKey();\n+                String val = (String) e.getValue();\n+                sql.append(\", \").append(col.getName())\n+                    .append(\" = \").append(val);\n+            }\n+        }\n     }\n     \n     /**"},{"sha":"20092367bcadbc959c7fcca8e2f4f0c0cf0e84a5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OptimisticLockInstance.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OptimisticLockInstance.java","raw_url":"https://github.com/apache/openjpa/raw/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OptimisticLockInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OptimisticLockInstance.java?ref=774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0","patch":"@@ -35,6 +35,7 @@\n     private int oplock;\r\n \r\n     private String str;\r\n+    private int intField;\r\n \r\n     protected OptimisticLockInstance() { }\r\n \r"},{"sha":"4d702a0117e596ecb98d7d7b84d6a8e1731b0676","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkUpdatesAndVersionColumn.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/apache/openjpa/blob/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkUpdatesAndVersionColumn.java","raw_url":"https://github.com/apache/openjpa/raw/774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkUpdatesAndVersionColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkUpdatesAndVersionColumn.java?ref=774e7b5b8c3a07ef01fdeb5d38f1c4bb59dda9b0","patch":"@@ -0,0 +1,101 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.datacache;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.LockModeType;\r\n+import javax.persistence.OptimisticLockException;\r\n+import javax.persistence.RollbackException;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n+\r\n+public class TestBulkUpdatesAndVersionColumn\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() throws Exception {\r\n+        setUp(\"openjpa.DataCache\", \"true\",\r\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\",\r\n+            \"openjpa.Log\", \"SQL=TRACE\",\r\n+            OptimisticLockInstance.class, CLEAR_TABLES);\r\n+\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        OptimisticLockInstance pc = new OptimisticLockInstance(\"foo\");\r\n+        em.persist(pc);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testSelectOnOplockField() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.createQuery(\"select o from OptimisticLockInstance o \"\r\n+            + \"where o.oplock = 0\").getResultList();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testOplockFieldMapping() {\r\n+        ClassMapping cm = (ClassMapping) OpenJPAPersistence.getMetaData(\r\n+            emf, OptimisticLockInstance.class);\r\n+        FieldMapping fm = cm.getFieldMapping(\"oplock\");\r\n+        assertEquals(1, fm.getColumns().length);\r\n+    }\r\n+\r\n+    public void testBulkUpdateWithManualVersionIncrement() {\r\n+        bulkUpdateHelper(true);\r\n+    }\r\n+\r\n+    public void testBulkUpdateWithoutManualVersionIncrement() {\r\n+        bulkUpdateHelper(false);\r\n+    }\r\n+\r\n+    private void bulkUpdateHelper(boolean incrementVersionField) {\r\n+        EntityManager em = emf.createEntityManager();\r\n+\r\n+        em.getTransaction().begin();\r\n+        OptimisticLockInstance oli = (OptimisticLockInstance) em.createQuery(\r\n+            \"SELECT o FROM OptimisticLockInstance o WHERE o.str = 'foo'\")\r\n+            .getSingleResult();\r\n+        assertNotNull(oli);\r\n+        em.lock(oli, LockModeType.READ);\r\n+\r\n+        EntityManager em2 = emf.createEntityManager();\r\n+        em2.getTransaction().begin();\r\n+        em2.createQuery(\"UPDATE OptimisticLockInstance o SET o.str = 'foo', \"\r\n+            + \"o.intField = o.intField + 1\"\r\n+            + (incrementVersionField ? \", o.oplock = o.oplock + 1 \" : \"\")\r\n+            + \"WHERE o.str = 'foo'\")\r\n+            .executeUpdate();\r\n+        em2.getTransaction().commit();\r\n+        em2.close();\r\n+\r\n+        try {\r\n+            em.getTransaction().commit();\r\n+            fail(\"transaction should have failed\");\r\n+        } catch (RollbackException re) {\r\n+            assertTrue(\"nested exception must be an oplock exception\",\r\n+                re.getCause() instanceof OptimisticLockException);\r\n+        } finally {\r\n+            em.close();\r\n+        }\r\n+    }\r\n+}\r"}]}

