{"sha":"778ab2a393ad53356f5b24f059f45f56e48e4dd4","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc3OGFiMmEzOTNhZDUzMzU2ZjViMjRmMDU5ZjQ1ZjU2ZTQ4ZTRkZDQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-20T21:32:54Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-20T21:32:54Z"},"message":"OPENJPA-317. Changed OpenJPA published API pre-1.0. Reduced the scope of the dependencies in OpenJPAEntityManager and the other published interfaces; converted JDK1.4-style symbolic constant usage to new enums; changed some method names for clarity and consistency; removed old javax.resource dependencies; updated @published and @nojavadoc tags. The published interfaces should now only reference other published interfaces in method signatures, and it should be possible to build javadoc for just the published interfaces.\n\nRemoved getDelegate() calls from the published interfaces, as they expose internals. They are still available on the impl classes themselves, or the SPI ifaces when available.\n\nAdded covariant return types to JDBCFetchPlan.\n\nChanged BrokerFactoryListener interface to not encode event types in the listener signature.\n\nMoved some methods from OpenJPAPersistence to JPAFacadeHelper.\n\nWe will need to grow these published interfaces to provide access to some things in the internal interfaces. However, these interfaces will remain stable moving forward within the constraints of the OpenJPA deprecation policies.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567838 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"597c6a9c4610816f77d26f43f947197086baa33e","url":"https://api.github.com/repos/apache/openjpa/git/trees/597c6a9c4610816f77d26f43f947197086baa33e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/778ab2a393ad53356f5b24f059f45f56e48e4dd4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/778ab2a393ad53356f5b24f059f45f56e48e4dd4","html_url":"https://github.com/apache/openjpa/commit/778ab2a393ad53356f5b24f059f45f56e48e4dd4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/778ab2a393ad53356f5b24f059f45f56e48e4dd4/comments","author":null,"committer":null,"parents":[{"sha":"62f09afea9eaef64c213d888c50e457445d5635b","url":"https://api.github.com/repos/apache/openjpa/commits/62f09afea9eaef64c213d888c50e457445d5635b","html_url":"https://github.com/apache/openjpa/commit/62f09afea9eaef64c213d888c50e457445d5635b"}],"stats":{"total":3259,"additions":2191,"deletions":1068},"files":[{"sha":"6bbb5baf92f409e508609c7e60517d64dff467ef","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -231,7 +231,7 @@ private void updateCaches() {\n         // if we were in largeTransaction mode, then we have recorded\n         // the classes of updated/deleted objects and these now need to be\n         // evicted\n-        if (_ctx.isLargeTransaction()) {\n+        if (_ctx.isTrackChangesByType()) {\n             evictTypes(_ctx.getDeletedTypes());\n             evictTypes(_ctx.getUpdatedTypes());\n         }\n@@ -551,7 +551,7 @@ public Collection flush(Collection states) {\n         }\n \n         // if large transaction mode don't record individual changes\n-        if (_ctx.isLargeTransaction())\n+        if (_ctx.isTrackChangesByType())\n             return exceps;\n \n         OpenJPAStateManager sm;"},{"sha":"f26d5602ed7f7718e321715044ea61829ac9e137","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -109,7 +109,7 @@ private List checkCache(QueryKey qk) {\n         if (qk == null)\n             return null;\n         FetchConfiguration fetch = getContext().getFetchConfiguration();\n-        if (!fetch.getQueryCache())\n+        if (!fetch.getEnlistInQueryCache())\n             return null;\n         if (fetch.getReadLockLevel() > LockLevels.LOCK_NONE)\n             return null;"},{"sha":"3786a551c44162f7a8638237aee81e68d958e4d6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryEvent.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryEvent.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryEvent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryEvent.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -30,7 +30,11 @@\n public class BrokerFactoryEvent\r\n     extends EventObject {\r\n \r\n-    public final static int BROKER_FACTORY_CREATED = 0;\r\n+    /**\r\n+     * Fired after a {@link BrokerFactory} has been fully created.\r\n+     * This happens after the factory has been made read-only.\r\n+     */\r\n+    public static final int BROKER_FACTORY_CREATED = 0;\r\n \r\n     private int eventType;\r\n \r"},{"sha":"925d079398a3a31ba16ab24455c722632c04f555","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryEventManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryEventManager.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -44,7 +44,7 @@ public BrokerFactoryEventManager(Configuration conf) {\n     protected void fireEvent(Object event, Object listener) {\r\n         try {\r\n             BrokerFactoryEvent e = (BrokerFactoryEvent) event;\r\n-            ((BrokerFactoryListener) listener).afterBrokerFactoryCreate(e);\r\n+            ((BrokerFactoryListener) listener).eventFired(e);\r\n         } catch (Exception e) {\r\n             _conf.getLog(OpenJPAConfiguration.LOG_RUNTIME).warn(\r\n                 _loc.get(\"broker-factory-listener-exception\"), e);\r"},{"sha":"12ba15dc639e0da141570874ce330641bb505ab6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryListener.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryListener.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/BrokerFactoryListener.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -31,5 +31,5 @@\n      * Invoked after a {@link BrokerFactory} has been fully created.\r\n      * This happens after the factory has been made read-only.\r\n      */\r\n-    public void afterBrokerFactoryCreate(BrokerFactoryEvent event);\r\n+    public void eventFired(BrokerFactoryEvent event);\r\n }\r"},{"sha":"3168a6b6aa71e54c4b4400dfbb1b1a75c2efe179","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitEventManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitEventManager.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -168,7 +168,7 @@ private RemoteCommitEvent createRemoteCommitEvent(TransactionEvent event) {\n         Collection updates = null;\n         Collection deletes = null;\n \n-        if (broker.isLargeTransaction()) {\n+        if (broker.isTrackChangesByType()) {\n             payload = RemoteCommitEvent.PAYLOAD_EXTENTS;\n             addClassNames = toClassNames(event.getPersistedTypes());\n             updates = toClassNames(event.getUpdatedTypes());"},{"sha":"33922086357cfe86e1fe79401136c2988b6afd73","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -19,8 +19,6 @@\n package org.apache.openjpa.kernel;\n \n import java.util.Collection;\n-import javax.resource.cci.Connection;\n-import javax.resource.cci.LocalTransaction;\n import javax.transaction.Synchronization;\n \n import org.apache.openjpa.ee.ManagedRuntime;\n@@ -41,8 +39,7 @@\n  * @author Abe White\n  */\n public interface Broker\n-    extends Synchronization, Connection, LocalTransaction,\n-    javax.resource.spi.LocalTransaction, Closeable, StoreContext,\n+    extends Synchronization, Closeable, StoreContext,\n     ConnectionRetainModes, DetachState, LockLevels,\n     RestoreState, AutoClear, AutoDetach, CallbackModes {\n "},{"sha":"f81f6609526a647e36a38b8f5a02006165f1ce29","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":6,"deletions":143,"changes":149,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -33,16 +33,6 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import javax.resource.NotSupportedException;\n-import javax.resource.ResourceException;\n-import javax.resource.cci.Connection;\n-import javax.resource.cci.ConnectionMetaData;\n-import javax.resource.cci.Interaction;\n-import javax.resource.cci.InteractionSpec;\n-import javax.resource.cci.LocalTransaction;\n-import javax.resource.cci.Record;\n-import javax.resource.cci.ResourceWarning;\n-import javax.resource.cci.ResultSetInfo;\n import javax.transaction.Status;\n import javax.transaction.Synchronization;\n \n@@ -160,7 +150,6 @@\n     private ManagedRuntime _runtime = null;\n     private LockManager _lm = null;\n     private InverseManager _im = null;\n-    private JCAHelper _jca = null;\n     private ReentrantLock _lock = null;\n     private OpCallbacks _call = null;\n     private RuntimeExceptionTranslator _extrans = null;\n@@ -231,7 +220,8 @@\n     private int _lifeCallbackMode = 0;\n \n     private boolean _initializeWasInvoked = false;\n-    \n+    private static final Object[] EMPTY_OBJECTS = new Object[0];\n+\n     /**\n      * Set the persistence manager's authentication. This is the first\n      * method called after construction.\n@@ -261,7 +251,6 @@ public void initialize(AbstractBrokerFactory factory,\n         _initializeWasInvoked = true;\n         _loader = (ClassLoader) AccessController.doPrivileged(\n             J2DoPrivHelper.getContextClassLoaderAction());\n-        _jca = new JCAHelper();\n         _conf = factory.getConfiguration();\n         _compat = _conf.getCompatibilityInstance();\n         _factory = factory;\n@@ -324,30 +313,6 @@ protected Map newManagedObjectCache() {\n         return new ReferenceHashMap(ReferenceMap.HARD, ReferenceMap.SOFT);\n     }\n \n-    //////////////////////////////////////////\n-    // Implementation of Connection interface\n-    //////////////////////////////////////////\n-\n-    public ConnectionMetaData getMetaData()\n-        throws ResourceException {\n-        return _jca;\n-    }\n-\n-    public Interaction createInteraction()\n-        throws ResourceException {\n-        return _jca;\n-    }\n-\n-    public LocalTransaction getLocalTransaction()\n-        throws ResourceException {\n-        return this;\n-    }\n-\n-    public ResultSetInfo getResultSetInfo()\n-        throws ResourceException {\n-        return _jca;\n-    }\n-\n     //////////////////////////////////\n     // Implementation of StoreContext\n     //////////////////////////////////\n@@ -585,11 +550,11 @@ public void setPopulateDataCache(boolean cache) {\n         _populateDataCache = cache;\n     }\n \n-    public boolean isLargeTransaction() {\n+    public boolean isTrackChangesByType() {\n         return _largeTransaction;\n     }\n \n-    public void setLargeTransaction(boolean largeTransaction) {\n+    public void setTrackChangesByType(boolean largeTransaction) {\n         assertOpen();\n         _largeTransaction = largeTransaction;\n     }\n@@ -3116,7 +3081,7 @@ public Object detach(Object obj, OpCallbacks call) {\n         if (objs == null)\n             return null;\n         if (objs.isEmpty())\n-            return new Object[0];\n+            return EMPTY_OBJECTS;\n         if (call == null)\n             call = _call;\n \n@@ -3203,7 +3168,7 @@ public Object attach(Object obj, boolean copyNew, OpCallbacks call) {\n         if (objs == null)\n             return null;\n         if (objs.isEmpty())\n-            return new Object[0];\n+            return EMPTY_OBJECTS;\n \n         beginOperation(true);\n         try {\n@@ -4898,106 +4863,4 @@ public void remove() {\n             };\n         }\n     }\n-\n-    /**\n-     * Helper class to implement JCA interfaces. This is placed in a\n-     * separate class so that its methods do not interfere with the\n-     * persistence manager APIs.\n-     */\n-    private class JCAHelper\n-        implements Interaction, ResultSetInfo, ConnectionMetaData {\n-        ///////////////////////////////////////////\n-        // Implementation of Interaction interface\n-        ///////////////////////////////////////////\n-\n-        public void clearWarnings() {\n-        }\n-\n-        public Record execute(InteractionSpec spec, Record input)\n-            throws ResourceException {\n-            throw new NotSupportedException(\"execute\");\n-        }\n-\n-        public boolean execute(InteractionSpec spec, Record input,\n-            Record output)\n-            throws ResourceException {\n-            throw new NotSupportedException(\"execute\");\n-        }\n-\n-        public Connection getConnection() {\n-            return BrokerImpl.this;\n-        }\n-\n-        public ResourceWarning getWarnings() {\n-            return null;\n-        }\n-\n-        public void close() {\n-        }\n-\n-        /////////////////////////////////////////////\n-        // Implementation of ResultSetInfo interface\n-        /////////////////////////////////////////////\n-\n-        public boolean deletesAreDetected(int type) {\n-            return true;\n-        }\n-\n-        public boolean insertsAreDetected(int type) {\n-            return true;\n-        }\n-\n-        public boolean othersDeletesAreVisible(int type) {\n-            return true;\n-        }\n-\n-        public boolean othersInsertsAreVisible(int type) {\n-            return true;\n-        }\n-\n-        public boolean othersUpdatesAreVisible(int type) {\n-            return true;\n-        }\n-\n-        public boolean ownDeletesAreVisible(int type) {\n-            return true;\n-        }\n-\n-        public boolean ownInsertsAreVisible(int type) {\n-            return true;\n-        }\n-\n-        public boolean ownUpdatesAreVisible(int type) {\n-            return true;\n-        }\n-\n-        public boolean supportsResultSetType(int type) {\n-            return true;\n-        }\n-\n-        public boolean supportsResultTypeConcurrency(int type,\n-            int concurrency) {\n-            return true;\n-        }\n-\n-        public boolean updatesAreDetected(int type) {\n-            return true;\n-        }\n-\n-        ///////////////////////////////////////////////////\n-        // Implementation of ConnectionMetaData interface\n-        ///////////////////////////////////////////////////\n-\n-        public String getEISProductName() {\n-            return _conf.getConnectionDriverName();\n-        }\n-\n-        public String getEISProductVersion() {\n-            return \"\";\n-        }\n-\n-        public String getUserName() {\n-            return _user;\n-        }\n-    }\n }"},{"sha":"4142670916b9834835468a44bcef88977eae1a5f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","status":"modified","additions":4,"deletions":45,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -21,11 +21,6 @@\n import java.util.BitSet;\n import java.util.Collection;\n import java.util.Iterator;\n-import javax.resource.ResourceException;\n-import javax.resource.cci.ConnectionMetaData;\n-import javax.resource.cci.Interaction;\n-import javax.resource.cci.LocalTransaction;\n-import javax.resource.cci.ResultSetInfo;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.ee.ManagedRuntime;\n@@ -749,17 +744,17 @@ public void setPopulateDataCache(boolean cache) {\n         }\n     }\n \n-    public boolean isLargeTransaction() {\n+    public boolean isTrackChangesByType() {\n         try {\n-            return _broker.isLargeTransaction();\n+            return _broker.isTrackChangesByType();\n         } catch (RuntimeException re) {\n             throw translate(re);\n         }\n     }\n \n-    public void setLargeTransaction(boolean largeTransaction) {\n+    public void setTrackChangesByType(boolean largeTransaction) {\n         try {\n-            _broker.setLargeTransaction(largeTransaction);\n+            _broker.setTrackChangesByType(largeTransaction);\n         } catch (RuntimeException re) {\n             throw translate(re);\n         }\n@@ -1358,42 +1353,6 @@ public void afterCompletion(int status) {\n         }\n     }\n \n-    //////////////////////////////////////////\n-    // Implementation of Connection interface\n-    //////////////////////////////////////////\n-\n-    public ConnectionMetaData getMetaData()\n-        throws ResourceException {\n-        try {\n-            return _broker.getMetaData();\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-    public Interaction createInteraction()\n-        throws ResourceException {\n-        try {\n-            return _broker.createInteraction();\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n-    public LocalTransaction getLocalTransaction()\n-        throws ResourceException {\n-        return this;\n-    }\n-\n-    public ResultSetInfo getResultSetInfo()\n-        throws ResourceException {\n-        try {\n-            return _broker.getResultSetInfo();\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n     public Object newInstance(Class cls) {\n         try {\n             return _broker.newInstance(cls);"},{"sha":"6c391d6203c3c49bd4fbb326942d4f8f42e7434f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -183,17 +183,17 @@ public FetchConfiguration setRootClasses(Collection roots) {\n         }\n     }\n \n-    public boolean getQueryCache() {\n+    public boolean getEnlistInQueryCache() {\n         try {\n-            return _fetch.getQueryCache();\n+            return _fetch.getEnlistInQueryCache();\n         } catch (RuntimeException re) {\n             throw translate(re);\n         }\n     }\n \n-    public FetchConfiguration setQueryCache(boolean cache) {\n+    public FetchConfiguration setEnlistInQueryCache(boolean cache) {\n         try {\n-            _fetch.setQueryCache(cache);\n+            _fetch.setEnlistInQueryCache(cache);\n             return this;\n         } catch (RuntimeException re) {\n             throw translate(re);"},{"sha":"7ad6d5871bb3aca9fbf41f813885cf8dae6de4ed","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -129,14 +129,14 @@\n      * returns <code>false</code>, query caching will not be used\n      * even if the datacache plugin is installed.\n      */\n-    public boolean getQueryCache();\n+    public boolean getEnlistInQueryCache();\n \n     /**\n      * Control whether or not query caching is enabled. This has no effect\n      * if the datacache plugin is not installed, or if the query cache size\n      * is set to zero.\n      */\n-    public FetchConfiguration setQueryCache(boolean cache);\n+    public FetchConfiguration setEnlistInQueryCache(boolean cache);\n \n     /**\n      * The query automatic flush configuration."},{"sha":"5b4ef2ca600df7539183dcaf05a36e1090a03725","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -150,7 +150,7 @@ protected FetchConfigurationImpl newInstance(ConfigurationState state) {\n     public void copy(FetchConfiguration fetch) {\n         setFetchBatchSize(fetch.getFetchBatchSize());\n         setMaxFetchDepth(fetch.getMaxFetchDepth());\n-        setQueryCache(fetch.getQueryCache());\n+        setEnlistInQueryCache(fetch.getEnlistInQueryCache());\n         setFlushBeforeQueries(fetch.getFlushBeforeQueries());\n         setLockTimeout(fetch.getLockTimeout());\n         clearFetchGroups();\n@@ -191,11 +191,11 @@ public FetchConfiguration setMaxFetchDepth(int depth) {\n         return this;\n     }\n \n-    public boolean getQueryCache() {\n+    public boolean getEnlistInQueryCache() {\n         return _state.queryCache;\n     }\n \n-    public FetchConfiguration setQueryCache(boolean cache) {\n+    public FetchConfiguration setEnlistInQueryCache(boolean cache) {\n         _state.queryCache = cache;\n         return this;\n     }"},{"sha":"05353b4b9371793bc566effa4b66f79a03a7ea02","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","status":"modified","additions":14,"deletions":11,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -120,7 +120,7 @@\n      * @param oids the oids of the objects to return\n      * @return the objects that were looked up, in the same order as the oids\n      * parameter\n-     * @see #find(Object,boolean,call)\n+     * @see #find(Object,boolean,FindCallbacks)\n      */\n     public Object[] findAll(Collection oids, boolean validate,\n         FindCallbacks call);\n@@ -373,25 +373,28 @@ public void transactionalAll(Collection objs, boolean updateVersion,\n \n     /**\n      * Whether memory usage is reduced during this transaction at the expense\n-     * of possibly more aggressive data cache evictions.\n+     * of tracking changes at the type level instead of the instance level,\n+     * resulting in more aggressive cache invalidation.\n      *\n-     * @since 0.3.4\n+     * @since 1.0.0\n      */\n-    public boolean isLargeTransaction();\n+    public boolean isTrackChangesByType();\n \n     /**\n      * If a large number of objects will be created, modified, or deleted\n      * during this transaction setting this option to true will reduce memory\n-     * usage if you perform periodic flushes. Upon transaction commit the\n-     * data cache will have to more aggressively flush objects. The store cache\n-     * will have to flush instances of objects for each class of object\n-     * modified during the transaction. A side benefit of large transaction\n-     * mode is that smaller update messages can be used for\n+     * usage if you perform periodic flushes by tracking changes at the type\n+     * level instead of the instance level, resulting in more aggressive cache\n+     * invalidation. Upon transaction commit the data cache will have to\n+     * more aggressively flush objects. The store cache will have to flush\n+     * instances of objects for each class of object modified during the\n+     * transaction. A side benefit of large transaction mode is that smaller\n+     * update messages can be used for\n      * {@link org.apache.openjpa.event.RemoteCommitEvent}s. Defaults to false.\n      *\n-     * @since 0.3.4\n+     * @since 1.0.0\n      */\n-    public void setLargeTransaction(boolean largeTransaction);\n+    public void setTrackChangesByType(boolean largeTransaction);\n \n     /**\n      * Whether this context is using managed transactions."},{"sha":"302e4bd0327faf80c68e6c5ba514b2fb998a55a8","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ClassCriteria.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ClassCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ClassCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ClassCriteria.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -30,6 +30,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"b00a2edb0ec6ccfc2ab82b5e224a75482752b190","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Columns.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Columns.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Columns.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Columns.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -30,6 +30,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"de329a2132804a42caf28f573b1e87b10e797ec1","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ContainerTable.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ContainerTable.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ContainerTable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ContainerTable.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -29,6 +29,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"7967b9196f2bf6fd544142437582ec2e1c174a77","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/DataStoreIdColumn.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/DataStoreIdColumn.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/DataStoreIdColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/DataStoreIdColumn.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -28,6 +28,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ TYPE })\n @Retention(RUNTIME)"},{"sha":"54e1dc7542ca2aa07421135faadf84e2075f6c4f","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/DiscriminatorStrategy.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/DiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/DiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/DiscriminatorStrategy.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -28,6 +28,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ TYPE })\n @Retention(RUNTIME)"},{"sha":"bd05a3d989acf5cb49cd4f1809ead35ff627dc7c","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/EagerFetchMode.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/EagerFetchMode.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/EagerFetchMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/EagerFetchMode.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -29,6 +29,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"71fe1d7b4b1fb30b15528aadb608ad9088c177e6","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/EagerFetchType.java","status":"modified","additions":32,"deletions":3,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/EagerFetchType.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/EagerFetchType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/EagerFetchType.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -18,14 +18,43 @@\n  */\n package org.apache.openjpa.persistence.jdbc;\n \n+import org.apache.openjpa.jdbc.kernel.EagerFetchModes;\n+\n /**\n  * Type of fetching to employ.\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n public enum EagerFetchType {\n+    NONE(EagerFetchModes.EAGER_NONE),\n+    JOIN(EagerFetchModes.EAGER_JOIN),\n+    PARALLEL(EagerFetchModes.EAGER_PARALLEL);\n+\n+    private final int eagerFetchConstant;\n+\n+    private EagerFetchType(int value) {\n+        eagerFetchConstant = value;\n+    }\n+\n+    int toKernelConstant() {\n+        return eagerFetchConstant;\n+    }\n+\n+    static EagerFetchType fromKernelConstant(int kernelConstant) {\n+        switch (kernelConstant) {\n+            case EagerFetchModes.EAGER_NONE:\n+                return NONE;\n+\n+            case EagerFetchModes.EAGER_JOIN:\n+                return JOIN;\n+\n+            case EagerFetchModes.EAGER_PARALLEL:\n+                return PARALLEL;\n \n-    NONE,\n-    JOIN,\n-    PARALLEL };\n+            default:\n+                throw new IllegalArgumentException(kernelConstant + \"\");\n+        }\n+    }\n+}"},{"sha":"8ff92b8d769b04756b8507ee532e517039ab8a91","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementClassCriteria.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementClassCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementClassCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementClassCriteria.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -30,6 +30,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"031019d92fdd4fa0e2618410e40bc53dcf7c731a","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementForeignKey.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementForeignKey.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementForeignKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementForeignKey.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -29,6 +29,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"e4f4357761e9e3600e4caf178bfbd0ca0e1447c8","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementIndex.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementIndex.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementIndex.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementIndex.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -29,6 +29,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"d46a67cd1cb6983a0edf007131cd560a6321fb9c","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementJoinColumn.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementJoinColumn.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementJoinColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementJoinColumn.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -29,6 +29,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"ab497d37e0f522c7f4837bc5ce83afb581020336","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementJoinColumns.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementJoinColumns.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementJoinColumns.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementJoinColumns.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -30,6 +30,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"3ddac657049ed2867e1b79d349c9a3f90acf5dc3","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementNonpolymorphic.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementNonpolymorphic.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementNonpolymorphic.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementNonpolymorphic.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -30,6 +30,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"4ccfb7c94d0ce3cac9c1df1149204e739ed4bb50","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/EmbeddedMapping.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/EmbeddedMapping.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/EmbeddedMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/EmbeddedMapping.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -29,6 +29,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"5cc2d674cf6057e663eb66d91a65a42668cef6a1","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ForeignKey.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ForeignKey.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ForeignKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ForeignKey.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -28,6 +28,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ TYPE, METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"21c579f3d7fcf961ce6a368394922f3c8671615d","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ForeignKeyAction.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ForeignKeyAction.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ForeignKeyAction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ForeignKeyAction.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -23,10 +23,11 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n public enum ForeignKeyAction {\n-\n     RESTRICT,\n     CASCADE,\n     NULL,\n-    DEFAULT };\n+    DEFAULT\n+};"},{"sha":"0e6a7560d0c10fc9deb1f668a62a96b154ff76fb","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Index.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Index.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Index.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Index.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -29,6 +29,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"9c110167ddb19ccf51673b6bb82f50442d842158","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/IsolationLevel.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/IsolationLevel.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/IsolationLevel.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/IsolationLevel.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -26,6 +26,7 @@\n  * Isolation levels for use in {@link JDBCFetchPlan#setIsolation}.\n  *\n  * @since 0.9.7\n+ * @published\n  */\n public enum IsolationLevel {\n     DEFAULT(-1),\n@@ -41,11 +42,11 @@ private IsolationLevel(int connectionConstant) {\n         _connectionConstant = connectionConstant;\n     }\n \n-    protected int getConnectionConstant() {\n+    public int getConnectionConstant() {\n         return _connectionConstant;\n     }\n \n-    protected static IsolationLevel fromConnectionConstant(int constant) {\n+    public static IsolationLevel fromConnectionConstant(int constant) {\n         switch(constant) {\n             case -1:\n             case JDBCFetchConfiguration.DEFAULT:"},{"sha":"7538f993e50aa7c7cd43e6a2682cea4979f1b5d9","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java","status":"modified","additions":44,"deletions":28,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -18,8 +18,9 @@\n  */\n package org.apache.openjpa.persistence.jdbc;\n \n-import org.apache.openjpa.jdbc.kernel.EagerFetchModes;\n-import org.apache.openjpa.jdbc.kernel.LRSSizes;\n+import java.util.Collection;\n+import javax.persistence.LockModeType;\n+\n import org.apache.openjpa.jdbc.sql.JoinSyntaxes;\n import org.apache.openjpa.persistence.FetchPlan;\n \n@@ -32,35 +33,27 @@\n  * @published\n  */\n public interface JDBCFetchPlan\n-    extends FetchPlan, EagerFetchModes, LRSSizes, JoinSyntaxes {\n+    extends FetchPlan {\n \n     /**\n      * Eager fetch mode in loading relations.\n-     * \n-     * @see EagerFetchModes\n      */\n-    public int getEagerFetchMode();\n+    public EagerFetchType getEagerFetchMode();\n \n     /**\n      * Eager fetch mode in loading relations.\n-     * \n-     * @see EagerFetchModes\n      */\n-    public JDBCFetchPlan setEagerFetchMode(int mode);\n+    public JDBCFetchPlan setEagerFetchMode(EagerFetchType type);\n \n     /**\n      * Eager fetch mode in loading subclasses.\n-     * \n-     * @see EagerFetchModes\n      */\n-    public int getSubclassFetchMode();\n+    public EagerFetchType getSubclassFetchMode();\n \n     /**\n      * Eager fetch mode in loading subclasses.\n-     * \n-     * @see EagerFetchModes\n      */\n-    public JDBCFetchPlan setSubclassFetchMode(int mode);\n+    public JDBCFetchPlan setSubclassFetchMode(EagerFetchType type);\n \n     /**\n      * Type of JDBC result set to use for query results.\n@@ -84,39 +77,31 @@\n     public int getFetchDirection();\n \n     /**\n-     * Result set fetch direction.\n+     * Result set fetch direction. // ##### what to do here?\n      * \n      * @see java.sql.ResultSet\n      */\n     public JDBCFetchPlan setFetchDirection(int direction);\n \n     /**\n      * How to determine the size of a large result set.\n-     * \n-     * @see LRSSizes\n      */\n-    public int getLRSSize();\n+    public LRSSizeType getLRSSize();\n \n     /**\n      * How to determine the size of a large result set.\n-     * \n-     * @see LRSSizes\n      */\n-    public JDBCFetchPlan setLRSSize(int lrsSize);\n+    public JDBCFetchPlan setLRSSize(LRSSizeType lrsSize);\n \n     /**\n      * SQL join syntax.\n-     *\n-     * @see JoinSyntaxes\n      */\n-    public int getJoinSyntax();\n+    public JoinSyntaxType getJoinSyntax();\n \n     /**\n      * SQL join syntax.\n-     *\n-     * @see JoinSyntaxes\n      */\n-    public JDBCFetchPlan setJoinSyntax(int syntax);\n+    public JDBCFetchPlan setJoinSyntax(JoinSyntaxType syntax);\n \n     /**\n      * The isolation level for queries issued to the database. This overrides\n@@ -135,4 +120,35 @@\n      * @since 0.9.7\n      */\n     public JDBCFetchPlan setIsolation(IsolationLevel level);\n+\n+\n+    // covariant type support for return vals\n+\n+    public JDBCFetchPlan addFetchGroup(String group);\n+    public JDBCFetchPlan addFetchGroups(Collection groups);\n+    public JDBCFetchPlan addFetchGroups(String... groups);\n+    public JDBCFetchPlan addField(Class cls, String field);\n+    public JDBCFetchPlan addField(String field);\n+    public JDBCFetchPlan addFields(Class cls, Collection fields);\n+    public JDBCFetchPlan addFields(Class cls, String... fields);\n+    public JDBCFetchPlan addFields(Collection fields);\n+    public JDBCFetchPlan addFields(String... fields);\n+    public JDBCFetchPlan clearFetchGroups();\n+    public JDBCFetchPlan clearFields();\n+    public JDBCFetchPlan removeFetchGroup(String group);\n+    public JDBCFetchPlan removeFetchGroups(Collection groups);\n+    public JDBCFetchPlan removeFetchGroups(String... groups);\n+    public JDBCFetchPlan removeField(Class cls, String field);\n+    public JDBCFetchPlan removeField(String field);\n+    public JDBCFetchPlan removeFields(Class cls, Collection fields);\n+    public JDBCFetchPlan removeFields(Class cls, String... fields);\n+    public JDBCFetchPlan removeFields(String... fields);\n+    public JDBCFetchPlan removeFields(Collection fields);\n+    public JDBCFetchPlan resetFetchGroups();\n+    public JDBCFetchPlan setEnlistInQueryResultCache(boolean cache);\n+    public JDBCFetchPlan setFetchBatchSize(int fetchBatchSize);\n+    public JDBCFetchPlan setLockTimeout(int timeout);\n+    public JDBCFetchPlan setMaxFetchDepth(int depth);\n+    public JDBCFetchPlan setReadLockMode(LockModeType mode);\n+    public JDBCFetchPlan setWriteLockMode(LockModeType mode);\n }"},{"sha":"f139bff02ed103a4acd0be9c8f19f6ecaac9e7a1","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java","status":"modified","additions":156,"deletions":18,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -18,6 +18,9 @@\n  */\n package org.apache.openjpa.persistence.jdbc;\n \n+import java.util.Collection;\n+import javax.persistence.LockModeType;\n+\n import org.apache.openjpa.jdbc.kernel.DelegatingJDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.kernel.DelegatingFetchConfiguration;\n@@ -45,28 +48,28 @@ public JDBCFetchPlanImpl(FetchConfiguration fetch) {\n     }\n \n     @Override\n-    protected DelegatingFetchConfiguration newDelegatingFetchConfiguration\n-        (FetchConfiguration fetch) {\n+    protected DelegatingFetchConfiguration newDelegatingFetchConfiguration(\n+        FetchConfiguration fetch) {\n         _fetch = new DelegatingJDBCFetchConfiguration((JDBCFetchConfiguration)\n             fetch, PersistenceExceptions.TRANSLATOR);\n         return _fetch;\n     }\n \n-    public int getEagerFetchMode() {\n-        return _fetch.getEagerFetchMode();\n+    public EagerFetchType getEagerFetchMode() {\n+        return EagerFetchType.fromKernelConstant(_fetch.getEagerFetchMode());\n     }\n \n-    public JDBCFetchPlanImpl setEagerFetchMode(int mode) {\n-        _fetch.setEagerFetchMode(mode);\n+    public JDBCFetchPlanImpl setEagerFetchMode(EagerFetchType type) {\n+        _fetch.setEagerFetchMode(type.toKernelConstant());\n         return this;\n     }\n \n-    public int getSubclassFetchMode() {\n-        return _fetch.getSubclassFetchMode();\n+    public EagerFetchType getSubclassFetchMode() {\n+        return EagerFetchType.fromKernelConstant(_fetch.getSubclassFetchMode());\n     }\n \n-    public JDBCFetchPlanImpl setSubclassFetchMode(int mode) {\n-        _fetch.setSubclassFetchMode(mode);\n+    public JDBCFetchPlanImpl setSubclassFetchMode(EagerFetchType type) {\n+        _fetch.setSubclassFetchMode(type.toKernelConstant());\n         return this;\n     }\n \n@@ -88,21 +91,21 @@ public JDBCFetchPlanImpl setFetchDirection(int direction) {\n         return this;\n     }\n \n-    public int getLRSSize() {\n-        return _fetch.getLRSSize();\n+    public LRSSizeType getLRSSize() {\n+        return LRSSizeType.fromKernelConstant(_fetch.getLRSSize());\n     }\n \n-    public JDBCFetchPlanImpl setLRSSize(int lrsSize) {\n-        _fetch.setLRSSize(lrsSize);\n+    public JDBCFetchPlanImpl setLRSSize(LRSSizeType lrsSize) {\n+        _fetch.setLRSSize(lrsSize.toKernelConstant());\n         return this;\n     }\n \n-    public int getJoinSyntax() {\n-        return _fetch.getJoinSyntax();\n+    public JoinSyntaxType getJoinSyntax() {\n+        return JoinSyntaxType.fromKernelConstant(_fetch.getJoinSyntax());\n     }\n \n-    public JDBCFetchPlanImpl setJoinSyntax(int syntax) {\n-        _fetch.setJoinSyntax(syntax);\n+    public JDBCFetchPlanImpl setJoinSyntax(JoinSyntaxType syntax) {\n+        _fetch.setJoinSyntax(syntax.toKernelConstant());\n         return this;\n     }\n \n@@ -114,4 +117,139 @@ public JDBCFetchPlan setIsolation(IsolationLevel level) {\n         _fetch.setIsolation(level.getConnectionConstant());\n         return this;\n     }\n+\n+    @Override\n+    public JDBCFetchPlan addFetchGroup(String group) {\n+        return (JDBCFetchPlan) super.addFetchGroup(group);\n+    }\n+\n+    @Override\n+    public JDBCFetchPlan addFetchGroups(Collection groups) {\n+        return (JDBCFetchPlan) super.addFetchGroups(groups);\n+    }\n+\n+    @Override\n+    public JDBCFetchPlan addFetchGroups(String... groups) {\n+        return (JDBCFetchPlan) super.addFetchGroups(groups);\n+    }\n+\n+    @Override\n+    public JDBCFetchPlan addField(Class cls, String field) {\n+        return (JDBCFetchPlan) super.addField(cls, field);\n+    }\n+\n+    @Override\n+    public JDBCFetchPlan addField(String field) {\n+        return (JDBCFetchPlan) super.addField(field);\n+    }\n+\n+    @Override\n+    public JDBCFetchPlan addFields(Class cls, Collection fields) {\n+        return (JDBCFetchPlan) super.addFields(cls, fields);\n+    }\n+\n+    @Override\n+    public JDBCFetchPlan addFields(Class cls, String... fields) {\n+        return (JDBCFetchPlan) super.addFields(cls, fields);\n+    }\n+\n+    @Override\n+    public JDBCFetchPlan addFields(Collection fields) {\n+        return (JDBCFetchPlan) super.addFields(fields);\n+    }\n+\n+    @Override\n+    public JDBCFetchPlan addFields(String... fields) {\n+        return (JDBCFetchPlan) super.addFields(fields);\n+    }\n+\n+    @Override\n+    public JDBCFetchPlan clearFetchGroups() {\n+        return (JDBCFetchPlan) super.clearFetchGroups();\n+    }\n+\n+    @Override\n+    public JDBCFetchPlan clearFields() {\n+        return (JDBCFetchPlan) super.clearFields();\n+    }\n+\n+    @Override\n+    public JDBCFetchPlan removeFetchGroup(String group) {\n+        return (JDBCFetchPlan) super.removeFetchGroup(group);\n+    }\n+\n+    @Override\n+    public JDBCFetchPlan removeFetchGroups(Collection groups) {\n+        return (JDBCFetchPlan) super.removeFetchGroups(groups);\n+    }\n+\n+    @Override\n+    public JDBCFetchPlan removeFetchGroups(String... groups) {\n+        return (JDBCFetchPlan) super.removeFetchGroups(groups);\n+    }\n+\n+    @Override\n+    public JDBCFetchPlan removeField(Class cls, String field) {\n+        return (JDBCFetchPlan) super.removeField(cls, field);\n+    }\n+\n+    @Override\n+    public JDBCFetchPlan removeField(String field) {\n+        return (JDBCFetchPlan) super.removeField(field);\n+    }\n+\n+    @Override\n+    public JDBCFetchPlan removeFields(Class cls, Collection fields) {\n+        return (JDBCFetchPlan) super.removeFields(cls, fields);\n+    }\n+\n+    @Override\n+    public JDBCFetchPlan removeFields(Class cls, String... fields) {\n+        return (JDBCFetchPlan) super.removeFields(cls, fields);\n+    }\n+\n+    @Override\n+    public JDBCFetchPlan removeFields(Collection fields) {\n+        return (JDBCFetchPlan) super.removeFields(fields);\n+    }\n+\n+    @Override\n+    public JDBCFetchPlan removeFields(String... fields) {\n+        return (JDBCFetchPlan) super.removeFields(fields);\n+    }\n+\n+    @Override\n+    public JDBCFetchPlan resetFetchGroups() {\n+        return (JDBCFetchPlan) super.resetFetchGroups();\n+    }\n+\n+    @Override\n+    public JDBCFetchPlan setEnlistInQueryResultCache(boolean cache) {\n+        return (JDBCFetchPlan) super.setEnlistInQueryResultCache(cache);\n+    }\n+\n+    @Override\n+    public JDBCFetchPlan setFetchBatchSize(int fetchBatchSize) {\n+        return (JDBCFetchPlan) super.setFetchBatchSize(fetchBatchSize);\n+    }\n+\n+    @Override\n+    public JDBCFetchPlan setLockTimeout(int timeout) {\n+        return (JDBCFetchPlan) super.setLockTimeout(timeout);\n+    }\n+\n+    @Override\n+    public JDBCFetchPlan setMaxFetchDepth(int depth) {\n+        return (JDBCFetchPlan) super.setMaxFetchDepth(depth);\n+    }\n+\n+    @Override\n+    public JDBCFetchPlan setReadLockMode(LockModeType mode) {\n+        return (JDBCFetchPlan) super.setReadLockMode(mode);\n+    }\n+\n+    @Override\n+    public JDBCFetchPlan setWriteLockMode(LockModeType mode) {\n+        return (JDBCFetchPlan) super.setWriteLockMode(mode);\n+    }\n }"},{"sha":"b30a712a81e27bad4f240a348fa3abc80cf74f3e","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JoinSyntaxType.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JoinSyntaxType.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JoinSyntaxType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JoinSyntaxType.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc;\n+\n+import org.apache.openjpa.jdbc.sql.JoinSyntaxes;\n+\n+/**\n+ * Type of join syntax to use.\n+ *\n+ * @since 1.0.0\n+ * @published\n+ */\n+public enum JoinSyntaxType {\n+    SQL92(JoinSyntaxes.SYNTAX_SQL92),\n+    TRADITIONAL(JoinSyntaxes.SYNTAX_TRADITIONAL),\n+    DATABASE(JoinSyntaxes.SYNTAX_DATABASE);\n+\n+    private final int joinSyntaxConstant;\n+\n+    private JoinSyntaxType(int value) {\n+        joinSyntaxConstant = value;\n+    }\n+\n+    int toKernelConstant() {\n+        return joinSyntaxConstant;\n+    }\n+\n+    static JoinSyntaxType fromKernelConstant(int kernelConstant) {\n+        switch (kernelConstant) {\n+            case JoinSyntaxes.SYNTAX_SQL92:\n+                return SQL92;\n+\n+            case JoinSyntaxes.SYNTAX_TRADITIONAL:\n+                return TRADITIONAL;\n+\n+            case JoinSyntaxes.SYNTAX_DATABASE:\n+                return DATABASE;\n+\n+            default:\n+                throw new IllegalArgumentException(kernelConstant + \"\");\n+        }\n+    }\n+}\n\\ No newline at end of file"},{"sha":"4194d4bf53d539a251cc751f6750cd0cd59ed8f6","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/LRSSizeType.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/LRSSizeType.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/LRSSizeType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/LRSSizeType.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc;\n+\n+import org.apache.openjpa.jdbc.kernel.LRSSizes;\n+\n+/**\n+ * Algorithm to use for computing the size of an LRS relation.\n+ *\n+ * @since 1.0.0\n+ * @published\n+ */\n+public enum LRSSizeType {\n+    UNKNOWN(LRSSizes.SIZE_UNKNOWN),\n+    LAST(LRSSizes.SIZE_LAST),\n+    QUERY(LRSSizes.SIZE_QUERY);\n+\n+    private final int lrsConstant;\n+\n+    private LRSSizeType(int value) {\n+        lrsConstant = value;\n+    }\n+\n+    int toKernelConstant() {\n+        return lrsConstant;\n+    }\n+\n+    static LRSSizeType fromKernelConstant(int kernelConstant) {\n+        switch (kernelConstant) {\n+            case LRSSizes.SIZE_UNKNOWN:\n+                return UNKNOWN;\n+\n+            case LRSSizes.SIZE_LAST:\n+                return LAST;\n+\n+            case LRSSizes.SIZE_QUERY:\n+                return QUERY;\n+\n+            default:\n+                throw new IllegalArgumentException(kernelConstant + \"\");\n+        }\n+    }\n+}\n\\ No newline at end of file"},{"sha":"58ca6eb33e472a334912101d6d40133c1af1feee","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/MappingOverride.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/MappingOverride.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/MappingOverride.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/MappingOverride.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -29,6 +29,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ TYPE })\n @Retention(RUNTIME)"},{"sha":"429ac5c0930af0d3f1c5650f76f0685bd28d399a","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/MappingOverrides.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/MappingOverrides.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/MappingOverrides.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/MappingOverrides.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -28,6 +28,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ TYPE })\n @Retention(RUNTIME)"},{"sha":"cac6e66446376e97da2391060dfbf537a076c961","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Nonpolymorphic.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Nonpolymorphic.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Nonpolymorphic.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Nonpolymorphic.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -29,6 +29,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"0477fda9bf09608e0f82d3fbe1cad0b52825f1b4","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/NonpolymorphicType.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/NonpolymorphicType.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/NonpolymorphicType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/NonpolymorphicType.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -23,9 +23,10 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n public enum NonpolymorphicType {\n-\n     EXACT,\n     JOINABLE,\n-    FALSE };\n+    FALSE\n+};"},{"sha":"f11321b6e9e728e30680ee161fa9e6ab3342da5d","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/OrderColumn.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/OrderColumn.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/OrderColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/OrderColumn.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -29,6 +29,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"26ad7b2fe5cfb9ed0547a4bc667e1a69e9e17bc4","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Strategy.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Strategy.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Strategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Strategy.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -28,6 +28,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ TYPE, METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"563868582716b59d0cc0523fef5376a8762cff94","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/SubclassFetchMode.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/SubclassFetchMode.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/SubclassFetchMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/SubclassFetchMode.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -28,6 +28,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ TYPE })\n @Retention(RUNTIME)"},{"sha":"44e6aa730e57118ab5d70a26a4b6f5ec1c771da5","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Unique.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Unique.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Unique.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Unique.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -29,6 +29,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"e9df6b20504a88d2aae3ba3b0fd02868119b57ec","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/VersionColumn.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/VersionColumn.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/VersionColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/VersionColumn.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -28,6 +28,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ TYPE })\n @Retention(RUNTIME)"},{"sha":"5e0adca6e39f4c3ef23b79d9b6edd98a250a79da","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/VersionColumns.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/VersionColumns.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/VersionColumns.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/VersionColumns.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -28,6 +28,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ TYPE })\n @Retention(RUNTIME)"},{"sha":"2d3f33b9b1ff2509bef3d0530a7410dbcff7a01f","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/VersionStrategy.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/VersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/VersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/VersionStrategy.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -28,6 +28,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ TYPE })\n @Retention(RUNTIME)"},{"sha":"bd3b4cc598c108e9d43851de5badc045a7c8f7f5","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XJoinColumn.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XJoinColumn.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XJoinColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XJoinColumn.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -29,6 +29,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"ad5af98034abb27b54153f85d5185bcf7634b2ce","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XJoinColumns.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XJoinColumns.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XJoinColumns.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XJoinColumns.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -29,6 +29,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"46095d25e532456bae5c722453b325768e44262f","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XSecondaryTable.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XSecondaryTable.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XSecondaryTable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XSecondaryTable.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -29,6 +29,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ TYPE })\n @Retention(RUNTIME)"},{"sha":"574a9f81dc8920f53c4227fbb4680bb086c33aaf","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XSecondaryTables.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XSecondaryTables.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XSecondaryTables.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XSecondaryTables.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -28,6 +28,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ TYPE })\n @Retention(RUNTIME)"},{"sha":"be286370956150940dd2e0b60666f5f0d7cec0fc","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XTable.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XTable.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XTable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XTable.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -28,6 +28,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ TYPE })\n @Retention(RUNTIME)"},{"sha":"7c8170d75abc105515cdccef6af94b8a4d2da942","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestAutoDetachProperty.java","status":"modified","additions":9,"deletions":7,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestAutoDetachProperty.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestAutoDetachProperty.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestAutoDetachProperty.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -24,7 +24,6 @@\n \n import junit.framework.*;\n \n-import org.apache.openjpa.kernel.AutoDetach;\n import org.apache.openjpa.persistence.*;\n \n public class TestAutoDetachProperty extends TestCase {\n@@ -63,17 +62,20 @@ public void testIsAutoDetachingOnNonTxRead() {\n     }\n \n     private boolean isAutoDetachingOnClose() {\n-        int autoDetachFlags = OpenJPAPersistence.cast(em).getAutoDetach();\n-        return (autoDetachFlags & AutoDetach.DETACH_CLOSE) > 0;\n+        EnumSet<AutoDetachType> autoDetachFlags =\n+            OpenJPAPersistence.cast(em).getAutoDetach();\n+        return autoDetachFlags.contains(AutoDetachType.CLOSE);\n     }\n \n     private boolean isAutoDetachingOnCommit() {\n-        int autoDetachFlags = OpenJPAPersistence.cast(em).getAutoDetach();\n-        return (autoDetachFlags & AutoDetach.DETACH_COMMIT) > 0;\n+        EnumSet<AutoDetachType> autoDetachFlags =\n+            OpenJPAPersistence.cast(em).getAutoDetach();\n+        return autoDetachFlags.contains(AutoDetachType.COMMIT);\n     }\n \n     private boolean isAutoDetachingOnNonTxRead() {\n-        int autoDetachFlags = OpenJPAPersistence.cast(em).getAutoDetach();\n-        return (autoDetachFlags & AutoDetach.DETACH_NONTXREAD) > 0;\n+        EnumSet<AutoDetachType> autoDetachFlags =\n+            OpenJPAPersistence.cast(em).getAutoDetach();\n+        return autoDetachFlags.contains(AutoDetachType.NON_TRANSACTIONAL_READ);\n     }\n }"},{"sha":"066cc24560691f1678f3c839a7e973929be27a45","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestDynamicConfiguration.java","status":"modified","additions":6,"deletions":18,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestDynamicConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestDynamicConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestDynamicConfiguration.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -18,12 +18,10 @@\n  */\r\n package org.apache.openjpa.conf;\r\n \r\n-import javax.persistence.Persistence;\r\n-import org.apache.openjpa.persistence.test.*;\r\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n import org.apache.openjpa.lib.conf.Value;\r\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n \r\n /**\r\n  * Tests dynamic modification of configuration property.\r\n@@ -32,13 +30,13 @@\n  *\r\n  */\r\n public class TestDynamicConfiguration extends SingleEMFTestCase {\r\n-\t\r\n-\tpublic void testConfigurationIsEqualByValueAndHashCode() {\r\n-\t\tOpenJPAEntityManagerFactory emf1 = createEMF();\r\n+\r\n+    public void testConfigurationIsEqualByValueAndHashCode() {\r\n+\t\tOpenJPAEntityManagerFactorySPI emf1 = createEMF();\r\n \t\tassertNotNull(emf1);\r\n \t\tOpenJPAConfiguration conf1 = emf1.getConfiguration();\r\n \t\t\r\n-\t\tOpenJPAEntityManagerFactory emf2 = createEMF();\r\n+\t\tOpenJPAEntityManagerFactorySPI emf2 = createEMF();\r\n \t\tassertNotNull(emf2);\r\n \t\tOpenJPAConfiguration conf2 = emf2.getConfiguration();\r\n \t\t\r\n@@ -51,17 +49,13 @@ public void testConfigurationIsEqualByValueAndHashCode() {\n \t}\r\n \t\r\n \tpublic void testConfigurationIsReadOnlyAfterFirstConstruction() {\r\n-\t\tOpenJPAEntityManagerFactory emf = createEMF();\r\n-\t\tassertNotNull(emf);\r\n \t\tOpenJPAConfiguration conf = emf.getConfiguration();\r\n \t\tassertFalse(conf.isReadOnly());\r\n \t\temf.createEntityManager();\r\n \t\tassertTrue(conf.isReadOnly());\r\n \t}\r\n \t\r\n \tpublic void testDynamicValuesCanNotBeChangedDirectly() {\r\n-\t\tOpenJPAEntityManagerFactory emf = createEMF();\r\n-\t\tassertNotNull(emf);\r\n \t\temf.createEntityManager();\r\n \t\tOpenJPAConfiguration conf = emf.getConfiguration();\r\n \t\t\r\n@@ -80,8 +74,6 @@ public void testDynamicValuesCanNotBeChangedDirectly() {\n \t}\r\n \t\r\n \tpublic void testDynamicValuesCanBeChanged() {\r\n-\t\tOpenJPAEntityManagerFactory emf = createEMF();\r\n-\t\tassertNotNull(emf);\r\n \t\tOpenJPAConfiguration conf = emf.getConfiguration();\r\n \t\t\r\n \t\tValue[] dynamicValues = conf.getDynamicValues();\r\n@@ -96,8 +88,6 @@ public void testDynamicValuesCanBeChanged() {\n \t}\r\n \r\n \tpublic void testDynamicValuesAreCorrectlySet() {\r\n-\t\tOpenJPAEntityManagerFactory emf = createEMF();\r\n-\t\tassertNotNull(emf);\r\n \t\tOpenJPAConfiguration conf = emf.getConfiguration();\r\n \t\t\r\n \t\tValue[] dynamicValues = conf.getDynamicValues();\r\n@@ -106,8 +96,6 @@ public void testDynamicValuesAreCorrectlySet() {\n \t}\r\n \t\r\n \tpublic void testDynamicChangeDoesNotChangeHashCode() {\r\n-\t\tOpenJPAEntityManagerFactory emf = createEMF();\r\n-\t\tassertNotNull(emf);\r\n \t\tOpenJPAConfiguration conf1 = emf.getConfiguration();\r\n \t\t\r\n \t\tint oldValue = conf1.getLockTimeout();\r"},{"sha":"cbd7e644162c2b4e4247886c5ba11a2001011d21","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/AbstractUnenhancedClassTest.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/AbstractUnenhancedClassTest.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/AbstractUnenhancedClassTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/AbstractUnenhancedClassTest.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -29,7 +29,7 @@\n \r\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n import org.apache.openjpa.meta.ClassMetaData;\r\n import org.apache.openjpa.util.ImplHelper;\r\n@@ -68,7 +68,7 @@ private UnenhancedType newInstance(boolean sub) {\n     }\r\n \r\n     public void testMetaData() {\r\n-        ClassMetaData meta = OpenJPAPersistence.getMetaData(emf,\r\n+        ClassMetaData meta = JPAFacadeHelper.getMetaData(emf,\r\n             getUnenhancedClass());\r\n         assertEquals(ClassRedefiner.canRedefineClasses(),\r\n             meta.isIntercepting());\r\n@@ -567,18 +567,18 @@ private void listenerHelper(boolean userDefined, boolean sub)\n     }\r\n \r\n     public void testGetMetaDataOfSubtype() {\r\n-        ClassMetaData meta = OpenJPAPersistence.getMetaData(emf,\r\n+        ClassMetaData meta = JPAFacadeHelper.getMetaData(emf,\r\n             getUnenhancedClass());\r\n         List<Class> subs =  ManagedClassSubclasser.prepareUnenhancedClasses(\r\n             emf.getConfiguration(),\r\n             Collections.singleton(getUnenhancedClass()), null);\r\n-        assertSame(meta, OpenJPAPersistence.getMetaData(emf, subs.get(0)));\r\n+        assertSame(meta, JPAFacadeHelper.getMetaData(emf, subs.get(0)));\r\n \r\n-        meta = OpenJPAPersistence.getMetaData(emf, getUnenhancedSubclass());\r\n+        meta = JPAFacadeHelper.getMetaData(emf, getUnenhancedSubclass());\r\n         subs =  ManagedClassSubclasser.prepareUnenhancedClasses(\r\n             emf.getConfiguration(),\r\n             Collections.singleton(getUnenhancedSubclass()), null);\r\n-        assertSame(meta, OpenJPAPersistence.getMetaData(emf, subs.get(0)));\r\n+        assertSame(meta, JPAFacadeHelper.getMetaData(emf, subs.get(0)));\r\n     }\r\n \r\n     private class ListenerImpl\r"},{"sha":"3c9c0c5839067f0a34a4e58dda29a1059e27ae2c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/event/TestSJVMRemoteCommitProvider.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/event/TestSJVMRemoteCommitProvider.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/event/TestSJVMRemoteCommitProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/event/TestSJVMRemoteCommitProvider.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -24,14 +24,15 @@\n import javax.persistence.Persistence;\r\n \r\n import org.apache.openjpa.persistence.test.PersistenceTestCase;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n \r\n public class TestSJVMRemoteCommitProvider\r\n     extends PersistenceTestCase {\r\n \r\n-    private OpenJPAEntityManagerFactory emf1;\r\n-    private OpenJPAEntityManagerFactory emf2;\r\n+    private OpenJPAEntityManagerFactorySPI emf1;\r\n+    private OpenJPAEntityManagerFactorySPI emf2;\r\n     private ListenerImpl listen1;\r\n     private ListenerImpl listen2;\r\n \r\n@@ -40,23 +41,23 @@ public void setUp() {\n         sjvm1.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n         // set this to differentiate emf1 from the other emf below\r\n         sjvm1.put(\"openjpa.DetachState\", \"true\");\r\n-        emf1 = OpenJPAPersistence.cast(\r\n+        emf1 = (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(\r\n             Persistence.createEntityManagerFactory(\"test\", sjvm1));\r\n         emf1.getConfiguration().getRemoteCommitEventManager().addListener(\r\n             listen1 = new ListenerImpl());\r\n \r\n         Map sjvm2 = new HashMap();\r\n         sjvm2.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n         sjvm2.put(\"openjpa.DetachState\", \"false\"); // differentiate from above\r\n-        emf2 = OpenJPAPersistence.cast(\r\n+        emf2 = (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(\r\n             Persistence.createEntityManagerFactory(\"test\", sjvm2));\r\n         emf2.getConfiguration().getRemoteCommitEventManager().addListener(\r\n             listen2 = new ListenerImpl());\r\n     }\r\n \r\n     public void testSJVMRemoteCommitProvider() {\r\n-        assertNotSame(OpenJPAPersistence.toBrokerFactory(emf1),\r\n-            OpenJPAPersistence.toBrokerFactory(emf2));\r\n+        assertNotSame(JPAFacadeHelper.toBrokerFactory(emf1),\r\n+            JPAFacadeHelper.toBrokerFactory(emf2));\r\n         \r\n         emf1.getConfiguration().getRemoteCommitEventManager()\r\n             .getRemoteCommitProvider().broadcast(\r\n@@ -82,4 +83,4 @@ public void afterCommit(RemoteCommitEvent event) {\n         public void close() {\r\n         }\r\n     }\r\n-}\n\\ No newline at end of file\n+}\r"},{"sha":"cea8c4c8827d843380141a016ed6716287258b4b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingToolAutoDelete.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingToolAutoDelete.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingToolAutoDelete.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingToolAutoDelete.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -28,8 +28,8 @@\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.schema.SchemaTool;\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.simple.AllFieldTypes;\n \n import junit.framework.TestCase;\n@@ -39,13 +39,13 @@\n     extends TestCase {\n \n     private JDBCConfiguration _conf;\n-    private OpenJPAEntityManagerFactory emf;\n+    private OpenJPAEntityManagerFactorySPI emf;\n \n     public void setUp() {\n         Map props = new HashMap(System.getProperties());\n         props.put(\"openjpa.MetaDataFactory\",\n             \"jpa(Types=\" + AllFieldTypes.class.getName() + \")\");\n-        emf = OpenJPAPersistence.cast( \n+        emf = (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast( \n             Persistence.createEntityManagerFactory(\"test\", props));\n         _conf = (JDBCConfiguration) emf.getConfiguration();\n         "},{"sha":"6e29e04baf1aca91e352a56e920b79bdc7584911","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingToolTemporal.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingToolTemporal.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingToolTemporal.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingToolTemporal.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -22,6 +22,7 @@\n import java.sql.SQLException;\n \n import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.simple.TemporalFieldTypes;\n import org.apache.openjpa.persistence.test.SingleEMTestCase;\n \n@@ -32,7 +33,8 @@ public void setUp() {\n     }\n \n     public void testMappingToolTemporal() throws IOException, SQLException {\n-        ClassMapping mapping = (ClassMapping) OpenJPAPersistence.cast(emf)\n+        ClassMapping mapping = (ClassMapping)\n+            ((OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(emf))\n                 .getConfiguration().getMetaDataRepositoryInstance()\n                 .getMetaData(\"TemporalFieldTypes\", getClass().getClassLoader(),\n                         true);"},{"sha":"2f3928574e6e5984e25bbeb009c4f5e5ee966e3b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestBrokerFactoryEventManager.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestBrokerFactoryEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestBrokerFactoryEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestBrokerFactoryEventManager.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -24,14 +24,15 @@\n import org.apache.openjpa.event.BrokerFactoryListener;\r\n import org.apache.openjpa.event.BrokerFactoryEvent;\r\n import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n \r\n public class TestBrokerFactoryEventManager\r\n     extends TestCase {\r\n \r\n     public void testCreateEvent() {\r\n-        OpenJPAEntityManagerFactory emf = OpenJPAPersistence.cast(\r\n-            Persistence.createEntityManagerFactory(\"test\"));\r\n+        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI)\r\n+            OpenJPAPersistence.cast(\r\n+                Persistence.createEntityManagerFactory(\"test\"));\r\n         ListenerImpl listener = new ListenerImpl();\r\n         emf.getConfiguration().getBrokerFactoryEventManager()\r\n             .addListener(listener);\r\n@@ -44,8 +45,10 @@ public void testCreateEvent() {\n \r\n         boolean createEventReceived = false;\r\n \r\n-        public void afterBrokerFactoryCreate(BrokerFactoryEvent event) {\r\n-            createEventReceived = true;\r\n+        public void eventFired(BrokerFactoryEvent event) {\r\n+            if (event.getEventType()\r\n+                == BrokerFactoryEvent.BROKER_FACTORY_CREATED)\r\n+                createEventReceived = true;\r\n         }\r\n     }\r\n }\r"},{"sha":"3f24bda849b6940cc9c42b8dfc55f9e570646100","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestBrokerFactoryListenerRegistry.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestBrokerFactoryListenerRegistry.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestBrokerFactoryListenerRegistry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestBrokerFactoryListenerRegistry.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -22,6 +22,7 @@\n \r\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n import org.apache.openjpa.event.AbstractLifecycleListener;\r\n import org.apache.openjpa.event.AbstractTransactionListener;\r\n@@ -35,13 +36,13 @@\n     private int beginCount = 0;\r\n \r\n     @Override\r\n-    protected void setUp() {\r\n+    public void setUp() {\r\n         super.setUp(AllFieldTypes.class);\r\n     }\r\n \r\n     @Override\r\n-    protected OpenJPAEntityManagerFactory createEMF(Object... props) {\r\n-        OpenJPAEntityManagerFactory emf = super.createEMF(props);\r\n+    protected OpenJPAEntityManagerFactorySPI createEMF(Object... props) {\r\n+        OpenJPAEntityManagerFactorySPI emf = super.createEMF(props);\r\n         emf.addLifecycleListener(new AbstractLifecycleListener() {\r\n             @Override\r\n             public void beforePersist(LifecycleEvent event) {\r"},{"sha":"e65e356565a431ebfc9a3c486422a10398cab984","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestQueryCompilationCache.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestQueryCompilationCache.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestQueryCompilationCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestQueryCompilationCache.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -26,9 +26,9 @@\n import org.apache.openjpa.kernel.QueryImpl.Compilation;\n import org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.ParsedJPQL;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.openjpa.persistence.OpenJPAQuery;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.simple.NamedEntity;\n \n import junit.framework.TestCase;\n@@ -41,8 +41,9 @@ public void testDynamicJPQLWithNamedEntity() {\n         Map props = new HashMap(System.getProperties());\n         props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" \n             + NamedEntity.class.getName() + \")\");\n-        OpenJPAEntityManagerFactory emf = OpenJPAPersistence.cast(\n-            Persistence.createEntityManagerFactory(\"test\", props));\n+        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI)\n+            OpenJPAPersistence.cast(\n+                Persistence.createEntityManagerFactory(\"test\", props));\n \n         Map cache = emf.getConfiguration().getQueryCompilationCacheInstance();\n         cache.clear();"},{"sha":"36d938fe332de80636d2b053e3383395e8196271","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestArrayFieldsInDataCache.java","status":"modified","additions":11,"deletions":8,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestArrayFieldsInDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestArrayFieldsInDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestArrayFieldsInDataCache.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -18,14 +18,15 @@\n  */\n package org.apache.openjpa.persistence.datacache;\n \n-import java.util.Map;\n import java.util.Arrays;\n import javax.persistence.EntityManager;\n \n import org.apache.openjpa.datacache.DataCache;\n import org.apache.openjpa.kernel.PCData;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.StoreCacheImpl;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n import org.apache.openjpa.persistence.simple.AllFieldTypes;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n@@ -54,17 +55,18 @@ public void setUp() {\n         // get the external and internal forms of the ID for cache\n         // interrogation and data validation\n         jpaOid = OpenJPAPersistence.cast(em).getObjectId(aft);\n-        internalOid = OpenJPAPersistence.toBroker(em).getObjectId(aft);\n+        internalOid = JPAFacadeHelper.toBroker(em).getObjectId(aft);\n \n         em.close();\n     }\n \n     public void testArrayOfStrings() {\n         // check that the data cache contains an efficient representation\n-        DataCache cache = OpenJPAPersistence.cast(emf).getStoreCache()\n-            .getDelegate();\n+        StoreCacheImpl storeCache = (StoreCacheImpl)\n+            OpenJPAPersistence.cast(emf).getStoreCache();\n+        DataCache cache = storeCache.getDelegate();\n         PCData data = cache.get(internalOid);\n-        ClassMetaData meta = OpenJPAPersistence.getMetaData(emf,\n+        ClassMetaData meta = JPAFacadeHelper.getMetaData(emf,\n             AllFieldTypes.class);\n         Object cachedFieldData =\n             data.getData(meta.getField(\"arrayOfStrings\").getIndex());\n@@ -82,10 +84,11 @@ public void testArrayOfStrings() {\n \n     public void testArrayOfInts() {\n         // check that the data cache contains an efficient representation\n-        DataCache cache = OpenJPAPersistence.cast(emf).getStoreCache()\n-            .getDelegate();\n+        StoreCacheImpl storeCache = (StoreCacheImpl)\n+            OpenJPAPersistence.cast(emf).getStoreCache();\n+        DataCache cache = storeCache.getDelegate();\n         PCData data = cache.get(internalOid);\n-        ClassMetaData meta = OpenJPAPersistence.getMetaData(emf,\n+        ClassMetaData meta = JPAFacadeHelper.getMetaData(emf,\n             AllFieldTypes.class);\n         Object cachedFieldData =\n             data.getData(meta.getField(\"arrayOfInts\").getIndex());"},{"sha":"cd32e1bec84ef355da6c3947bb275765857638ed","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkUpdatesAndVersionColumn.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkUpdatesAndVersionColumn.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkUpdatesAndVersionColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkUpdatesAndVersionColumn.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -24,7 +24,7 @@\n import javax.persistence.RollbackException;\r\n \r\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n@@ -54,7 +54,7 @@ public void testSelectOnOplockField() {\n     }\r\n \r\n     public void testOplockFieldMapping() {\r\n-        ClassMapping cm = (ClassMapping) OpenJPAPersistence.getMetaData(\r\n+        ClassMapping cm = (ClassMapping) JPAFacadeHelper.getMetaData(\r\n             emf, OptimisticLockInstance.class);\r\n         FieldMapping fm = cm.getFieldMapping(\"oplock\");\r\n         assertEquals(1, fm.getColumns().length);\r"},{"sha":"1d3c842a21b9e92e5974bee677914eba6e52272e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheOptimisticLockRecovery.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheOptimisticLockRecovery.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheOptimisticLockRecovery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheOptimisticLockRecovery.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -27,6 +27,8 @@\n import javax.sql.DataSource;\r\n \r\n import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n import org.apache.openjpa.event.RemoteCommitListener;\r\n import org.apache.openjpa.event.RemoteCommitEvent;\r\n@@ -78,8 +80,8 @@ public void testOptimisticLockRecovery()\n         em = emf.createEntityManager();\r\n         em.getTransaction().begin();\r\n         OptimisticLockInstance oli = em.find(OptimisticLockInstance.class, pk);\r\n-        Object oid = OpenJPAPersistence.toOpenJPAObjectId(\r\n-            OpenJPAPersistence.getMetaData(oli),\r\n+        Object oid = JPAFacadeHelper.toOpenJPAObjectId(\r\n+            JPAFacadeHelper.getMetaData(oli),\r\n             OpenJPAPersistence.cast(em).getObjectId(oli));\r\n         int firstOpLockValue = oli.getOpLock();\r\n         em.lock(oli, LockModeType.READ);\r\n@@ -88,8 +90,9 @@ public void testOptimisticLockRecovery()\n         // via direct SQL in a separate transaction\r\n         int secondOpLockValue = firstOpLockValue + 1;\r\n \r\n-        DataSource ds = (DataSource) OpenJPAPersistence.cast(em)\r\n-            .getEntityManagerFactory().getConfiguration()\r\n+        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI)\r\n+            OpenJPAPersistence.cast(em).getEntityManagerFactory();\r\n+        DataSource ds = (DataSource) emf.getConfiguration()\r\n             .getConnectionFactory();\r\n         Connection c = ds.getConnection();\r\n         c.setAutoCommit(false);\r\n@@ -120,7 +123,7 @@ public void testOptimisticLockRecovery()\n         // assert that the oplock column is set to the one that\r\n         // happened in the out-of-band transaction\r\n         em.close();\r\n-        em = emf.createEntityManager();\r\n+        em = this.emf.createEntityManager();\r\n         oli = em.find(OptimisticLockInstance.class, pk);\r\n \r\n         // If this fails, then the data cache has the wrong value.\r"},{"sha":"827c086a3ebc0eda7fbdeedc01b27548485efd85","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachmentOneMany.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachmentOneMany.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachmentOneMany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachmentOneMany.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -21,8 +21,8 @@\n import javax.persistence.EntityManager;\n \n import junit.textui.TestRunner;\n-import org.apache.openjpa.kernel.AutoDetach;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.AutoDetachType;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n /**\n@@ -41,7 +41,8 @@ public void testDetachment() {\n         long id = createParentAndChildren();\n     \n         EntityManager em = emf.createEntityManager();\n-        OpenJPAPersistence.cast(em).setAutoDetach(AutoDetach.DETACH_NONTXREAD);\n+        OpenJPAPersistence.cast(em).setAutoDetach(\n+            AutoDetachType.NON_TRANSACTIONAL_READ);\n         DetachmentOneManyParent parent = em.find(DetachmentOneManyParent.class,\n             id);\n         assertNotNull(parent);\n@@ -53,7 +54,8 @@ public void testFetchWithDetach() {\n         long id = createParentAndChildren();\n      \n         EntityManager em = emf.createEntityManager();\n-        OpenJPAPersistence.cast(em).setAutoDetach(AutoDetach.DETACH_NONTXREAD);\n+        OpenJPAPersistence.cast(em).setAutoDetach(\n+            AutoDetachType.NON_TRANSACTIONAL_READ);\n         DetachmentOneManyParent parent = em.find(DetachmentOneManyParent.class,\n             id);\n         assertNotNull(parent);\n@@ -74,7 +76,8 @@ public void testFetchWithDetachForToOneRelationship() {\n         long id = createParentAndChildren();\n         \n         EntityManager em = emf.createEntityManager();\n-        OpenJPAPersistence.cast(em).setAutoDetach(AutoDetach.DETACH_NONTXREAD);\n+        OpenJPAPersistence.cast(em).setAutoDetach(\n+            AutoDetachType.NON_TRANSACTIONAL_READ);\n         DetachmentOneManyParent parent = em.find(DetachmentOneManyParent.class,\n             id);\n         assertNotNull(parent);"},{"sha":"4b07d2abedec15d57cc2f175a14bd6da6687a2a8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/TestDiscriminatorTypes.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/TestDiscriminatorTypes.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/TestDiscriminatorTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/discriminator/TestDiscriminatorTypes.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -23,7 +23,6 @@\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.Discriminator;\n import org.apache.openjpa.meta.JavaTypes;\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n public class TestDiscriminatorTypes extends SingleEMFTestCase {\n@@ -93,7 +92,7 @@ public void testStringDiscriminators() {\n     }\n \n     private ClassMapping getMapping(String name) {\n-        return (ClassMapping) OpenJPAPersistence.cast(emf).getConfiguration()\n+        return (ClassMapping) emf.getConfiguration()\n                 .getMetaDataRepositoryInstance().getMetaData(name,\n                         getClass().getClassLoader(), true);\n     }"},{"sha":"488fc1987f07f6c2d3852ec299b03e4a40be3c17","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestPersistentMapTableConfiguration.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestPersistentMapTableConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestPersistentMapTableConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestPersistentMapTableConfiguration.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -18,11 +18,9 @@\n  */\r\n package org.apache.openjpa.persistence.fields;\r\n \r\n-import javax.persistence.EntityManager;\r\n-\r\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n \r\n public class TestPersistentMapTableConfiguration\r\n@@ -33,7 +31,7 @@ public void setUp() {\n     }\r\n \r\n     public void testPersistentMapMetaData() {\r\n-        ClassMapping cm = (ClassMapping) OpenJPAPersistence.getMetaData(emf,\r\n+        ClassMapping cm = (ClassMapping) JPAFacadeHelper.getMetaData(emf,\r\n             NonstandardMappingEntity.class);\r\n         assertEquals(\"NONSTD_MAPPING_MAP\",\r\n             cm.getFieldMapping(\"map\").getTable().getName());\r"},{"sha":"341480b091bd6ec3f7496546928479b5a2b0788c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -22,10 +22,9 @@\n \n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n import org.apache.openjpa.persistence.simple.AllFieldTypes;\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.OpenJPAQuery;\n import org.apache.openjpa.persistence.InvalidStateException;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.DB2Dictionary;\n import org.apache.openjpa.jdbc.sql.HSQLDictionary;\n@@ -54,8 +53,7 @@ public void testIsolationOverrideViaStringHint() {\n \n     public void testIsolationLevelOverride(boolean useHintsAndQueries,\n         boolean useStringHints) {\n-        OpenJPAEntityManager em =\n-            OpenJPAPersistence.cast(emf.createEntityManager());\n+        OpenJPAEntityManagerSPI em = emf.createEntityManager();\n         DBDictionary dict = ((JDBCConfiguration) em.getConfiguration())\n             .getDBDictionaryInstance();\n "},{"sha":"f218d5582ff0b22d7cb2d7596ea4c03477d02107","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestJDBCEnumToKernelConstantMappings.java","status":"added","additions":119,"deletions":0,"changes":119,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestJDBCEnumToKernelConstantMappings.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestJDBCEnumToKernelConstantMappings.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestJDBCEnumToKernelConstantMappings.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -0,0 +1,119 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc;\r\n+\r\n+import junit.framework.TestCase;\r\n+import org.apache.openjpa.jdbc.kernel.EagerFetchModes;\r\n+import org.apache.openjpa.jdbc.kernel.LRSSizes;\r\n+import org.apache.openjpa.jdbc.sql.JoinSyntaxes;\r\n+\r\n+public class TestJDBCEnumToKernelConstantMappings\r\n+    extends TestCase {\r\n+\r\n+    public void testEagerFetchModes() {\r\n+        assertEquals(EagerFetchModes.EAGER_NONE,\r\n+            EagerFetchType.NONE.toKernelConstant());\r\n+        assertEquals(EagerFetchType.NONE,\r\n+            EagerFetchType.fromKernelConstant(\r\n+                EagerFetchModes.EAGER_NONE));\r\n+        assertEquals(EagerFetchType.NONE.toKernelConstant(),\r\n+            EagerFetchType.NONE.ordinal());\r\n+\r\n+        assertEquals(EagerFetchModes.EAGER_JOIN,\r\n+            EagerFetchType.JOIN.toKernelConstant());\r\n+        assertEquals(EagerFetchType.JOIN,\r\n+            EagerFetchType.fromKernelConstant(\r\n+                EagerFetchModes.EAGER_JOIN));\r\n+        assertEquals(EagerFetchType.JOIN.toKernelConstant(),\r\n+            EagerFetchType.JOIN.ordinal());\r\n+\r\n+        assertEquals(EagerFetchModes.EAGER_PARALLEL,\r\n+            EagerFetchType.PARALLEL.toKernelConstant());\r\n+        assertEquals(EagerFetchType.PARALLEL,\r\n+            EagerFetchType.fromKernelConstant(\r\n+                EagerFetchModes.EAGER_PARALLEL));\r\n+        assertEquals(EagerFetchType.PARALLEL.toKernelConstant(),\r\n+            EagerFetchType.PARALLEL.ordinal());\r\n+\r\n+        assertEquals(getConstantCount(EagerFetchModes.class),\r\n+            EagerFetchType.values().length);\r\n+    }\r\n+\r\n+    public void testLRSSizeType() {\r\n+        assertEquals(LRSSizes.SIZE_UNKNOWN,\r\n+            LRSSizeType.UNKNOWN.toKernelConstant());\r\n+        assertEquals(LRSSizeType.UNKNOWN,\r\n+            LRSSizeType.fromKernelConstant(\r\n+                LRSSizes.SIZE_UNKNOWN));\r\n+        assertEquals(LRSSizeType.UNKNOWN.toKernelConstant(),\r\n+            LRSSizeType.UNKNOWN.ordinal());\r\n+\r\n+        assertEquals(LRSSizes.SIZE_LAST,\r\n+            LRSSizeType.LAST.toKernelConstant());\r\n+        assertEquals(LRSSizeType.LAST,\r\n+            LRSSizeType.fromKernelConstant(\r\n+                LRSSizes.SIZE_LAST));\r\n+        assertEquals(LRSSizeType.LAST.toKernelConstant(),\r\n+            LRSSizeType.LAST.ordinal());\r\n+\r\n+        assertEquals(LRSSizes.SIZE_QUERY,\r\n+            LRSSizeType.QUERY.toKernelConstant());\r\n+        assertEquals(LRSSizeType.QUERY,\r\n+            LRSSizeType.fromKernelConstant(\r\n+                LRSSizes.SIZE_QUERY));\r\n+        assertEquals(LRSSizeType.QUERY.toKernelConstant(),\r\n+            LRSSizeType.QUERY.ordinal());\r\n+\r\n+        assertEquals(getConstantCount(LRSSizes.class),\r\n+            LRSSizeType.values().length);\r\n+    }\r\n+\r\n+    public void testJoinSyntaxType() {\r\n+        assertEquals(JoinSyntaxes.SYNTAX_SQL92,\r\n+            JoinSyntaxType.SQL92.toKernelConstant());\r\n+        assertEquals(JoinSyntaxType.SQL92,\r\n+            JoinSyntaxType.fromKernelConstant(\r\n+                JoinSyntaxes.SYNTAX_SQL92));\r\n+        assertEquals(JoinSyntaxType.SQL92.toKernelConstant(),\r\n+            JoinSyntaxType.SQL92.ordinal());\r\n+\r\n+        assertEquals(JoinSyntaxes.SYNTAX_TRADITIONAL,\r\n+            JoinSyntaxType.TRADITIONAL.toKernelConstant());\r\n+        assertEquals(JoinSyntaxType.TRADITIONAL,\r\n+            JoinSyntaxType.fromKernelConstant(\r\n+                JoinSyntaxes.SYNTAX_TRADITIONAL));\r\n+        assertEquals(JoinSyntaxType.TRADITIONAL.toKernelConstant(),\r\n+            JoinSyntaxType.TRADITIONAL.ordinal());\r\n+\r\n+        assertEquals(JoinSyntaxes.SYNTAX_DATABASE,\r\n+            JoinSyntaxType.DATABASE.toKernelConstant());\r\n+        assertEquals(JoinSyntaxType.DATABASE,\r\n+            JoinSyntaxType.fromKernelConstant(\r\n+                JoinSyntaxes.SYNTAX_DATABASE));\r\n+        assertEquals(JoinSyntaxType.DATABASE.toKernelConstant(),\r\n+            JoinSyntaxType.DATABASE.ordinal());\r\n+\r\n+        assertEquals(getConstantCount(JoinSyntaxes.class),\r\n+            JoinSyntaxType.values().length);\r\n+    }\r\n+\r\n+    private int getConstantCount(Class cls) {\r\n+        return cls.getDeclaredFields().length;\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"4b41d585ee558b99d66e2136146ce06893f4441d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestOptimizeForClause.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestOptimizeForClause.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestOptimizeForClause.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestOptimizeForClause.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -26,6 +26,7 @@\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n import org.apache.openjpa.persistence.OpenJPAQuery;\r\n import org.apache.openjpa.persistence.InvalidStateException;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n import org.apache.openjpa.jdbc.sql.DB2Dictionary;\r\n import org.apache.openjpa.jdbc.sql.HSQLDictionary;\r\n@@ -50,8 +51,7 @@ public void testOptimizeForClauseViaQueryHint() {\n     }\r\n     public void testOptimizeForClause(boolean hint,\r\n         boolean find, boolean queryHint) {\r\n-        OpenJPAEntityManager em =\r\n-            OpenJPAPersistence.cast(emf.createEntityManager());\r\n+        OpenJPAEntityManagerSPI em = emf.createEntityManager();\r\n         DBDictionary dict = ((JDBCConfiguration) em.getConfiguration())\r\n             .getDBDictionaryInstance();\r\n \r"},{"sha":"2c1bb4e681f254eafc71eac3eb42be3c45c5bd20","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -18,14 +18,12 @@\n  */\n package org.apache.openjpa.persistence.jdbc;\n \n-import javax.persistence.EntityManager;\n import javax.persistence.LockModeType;\n \n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n import org.apache.openjpa.persistence.simple.AllFieldTypes;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n-import org.apache.openjpa.persistence.FetchPlan;\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n import org.apache.openjpa.jdbc.sql.DB2Dictionary;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.HSQLDictionary;\n@@ -42,7 +40,7 @@ public void setUp() {\n     }\n \n     public void testSelectForUpdateOverride() {\n-        OpenJPAEntityManager em =\n+        OpenJPAEntityManagerSPI em = (OpenJPAEntityManagerSPI)\n             OpenJPAPersistence.cast(emf.createEntityManager());\n         DBDictionary dict = ((JDBCConfiguration) em.getConfiguration())\n             .getDBDictionaryInstance();"},{"sha":"772ded79f219158f10d56ab13945a287357b9df1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestTableNamesDefaultToEntityNames.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestTableNamesDefaultToEntityNames.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestTableNamesDefaultToEntityNames.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestTableNamesDefaultToEntityNames.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -19,7 +19,7 @@\n package org.apache.openjpa.persistence.simple;\n \n import org.apache.openjpa.jdbc.meta.ClassMapping;\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n public class TestTableNamesDefaultToEntityNames\n@@ -30,7 +30,7 @@ public void setUp() {\n     }\n \n     public void testEntityNames() {\n-        ClassMapping cm = (ClassMapping) OpenJPAPersistence.getMetaData(\n+        ClassMapping cm = (ClassMapping) JPAFacadeHelper.getMetaData(\n             emf, NamedEntity.class);\n         assertEquals(\"named\", cm.getTable().getName());\n     }"},{"sha":"6fa8161df6e4dbb2a2b5de735ec38b0d59b3d46a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -32,8 +32,8 @@\n import org.apache.openjpa.kernel.AbstractBrokerFactory;\n import org.apache.openjpa.kernel.Broker;\n import org.apache.openjpa.meta.ClassMetaData;\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n \n /**\n  * Base test class providing persistence utilities.\n@@ -55,7 +55,7 @@\n      * @param props list of persistent types used in testing and/or \n      * configuration values in the form key,value,key,value...\n      */\n-    protected OpenJPAEntityManagerFactory createEMF(Object... props) {\n+    protected OpenJPAEntityManagerFactorySPI createEMF(Object... props) {\n         Map map = new HashMap(System.getProperties());\n         List<Class> types = new ArrayList<Class>();\n         boolean prop = false;\n@@ -84,7 +84,7 @@ protected OpenJPAEntityManagerFactory createEMF(Object... props) {\n                 \"jpa(Types=\" + buf.toString() + \")\");\n         }\n \n-        return (OpenJPAEntityManagerFactory) Persistence.\n+        return (OpenJPAEntityManagerFactorySPI) Persistence.\n             createEntityManagerFactory(\"test\", map);\n     }\n \n@@ -97,12 +97,12 @@ protected boolean closeEMF(EntityManagerFactory emf) {\n         if (!emf.isOpen())\n             return false;\n \n-        for (Iterator iter = ((AbstractBrokerFactory) OpenJPAPersistence\n+        for (Iterator iter = ((AbstractBrokerFactory) JPAFacadeHelper\n             .toBrokerFactory(emf)).getOpenBrokers().iterator();\n             iter.hasNext(); ) {\n             Broker b = (Broker) iter.next();\n             if (b != null && !b.isClosed()) {\n-                EntityManager em = OpenJPAPersistence.toEntityManager(b);\n+                EntityManager em = JPAFacadeHelper.toEntityManager(b);\n                 if (em.getTransaction().isActive())\n                     em.getTransaction().rollback();\n                 em.close();\n@@ -122,7 +122,7 @@ protected void clear(EntityManagerFactory emf, Class... types) {\n \n         List<ClassMetaData> metas = new ArrayList<ClassMetaData>(types.length);\n         for (Class c : types) {\n-            ClassMetaData meta = OpenJPAPersistence.getMetaData(emf, c);\n+            ClassMetaData meta = JPAFacadeHelper.getMetaData(emf, c);\n             if (meta != null)\n                 metas.add(meta);\n         }\n@@ -136,7 +136,7 @@ protected void clear(EntityManagerFactory emf, Class... types) {\n     protected void clear(EntityManagerFactory emf) {\n         if (emf == null)\n             return;\n-        clear(emf, ((OpenJPAEntityManagerFactory) emf).getConfiguration().\n+        clear(emf, ((OpenJPAEntityManagerFactorySPI) emf).getConfiguration().\n             getMetaDataRepositoryInstance().getMetaDatas());\n     }\n \n@@ -164,7 +164,7 @@ private void clear(EntityManagerFactory emf, ClassMetaData... types) {\n      * Return the entity name for the given type.   \n      */\n     protected String entityName(EntityManagerFactory emf, Class c) {\n-        ClassMetaData meta = OpenJPAPersistence.getMetaData(emf, c);\n+        ClassMetaData meta = JPAFacadeHelper.getMetaData(emf, c);\n         return (meta == null) ? null : meta.getTypeAlias();\n     }\n }"},{"sha":"c2a29ffb2de2ba25cd0ceb4df33af9555cd10f2e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","status":"modified","additions":11,"deletions":7,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -18,17 +18,21 @@\n  */\n package org.apache.openjpa.persistence.test;\n \n-import java.util.Map;\n-import java.util.HashMap;\n-import javax.persistence.Persistence;\n-\n-import junit.framework.TestCase;\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n \n public abstract class SingleEMFTestCase\n     extends PersistenceTestCase {\n \n-    protected OpenJPAEntityManagerFactory emf;\n+    protected OpenJPAEntityManagerFactorySPI emf;\n+\n+    /**\n+     * Call {@link #setUp(Object...)} with no arguments so that the emf\n+     * set-up happens even if <code>setUp()</code> is not called from the\n+     * subclass.\n+     */\n+    protected void setUp() {\n+        setUp(new Object[0]);\n+    }\n \n     /**\n      * Initialize entity manager factory. Put {@link #CLEAR_TABLES} in"},{"sha":"7d69f1304e403d7533d6f6a336d0d85ff25bb3c6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -35,6 +35,8 @@\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n import org.apache.openjpa.persistence.xmlmapping.xmlbindings.myaddress.*;\n import org.apache.openjpa.persistence.xmlmapping.entities.*;\n@@ -52,7 +54,7 @@\n     private boolean enabled = false;\n \n     public void setUp() {\n-        OpenJPAEntityManagerFactory emf = createEMF();\n+        OpenJPAEntityManagerFactorySPI emf = createEMF();\n         DBDictionary dict = ((JDBCConfiguration) emf.getConfiguration())\n             .getDBDictionaryInstance();\n \n@@ -79,8 +81,7 @@ public void testXMLCustomerOrder() {\n         if (!enabled)\n             return;\n \n-        OpenJPAEntityManager em =\n-            OpenJPAPersistence.cast(emf.createEntityManager());\n+        OpenJPAEntityManagerSPI em = emf.createEntityManager();\n         DBDictionary dict = ((JDBCConfiguration) em.getConfiguration())\n             .getDBDictionaryInstance();\n "},{"sha":"884acfeeb1d3b029e3612a7515bde34305132fb0","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationBuilder.java","status":"modified","additions":37,"deletions":37,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationBuilder.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -33,6 +33,7 @@\n  *\n  * @author Gokhan Ergul\n  * @since 1.0.0\n+ * @nojavadoc\n  */\n public class AnnotationBuilder {\n \n@@ -155,46 +156,45 @@ public String toString() {\n         return sb.toString();\n     }\n \n-}\n+    class AnnotationEntry {\n \n-class AnnotationEntry {\n+        String key;\n+        Object value;\n \n-    String key;\n-    Object value;\n-\n-    AnnotationEntry(String key, Object value) {\n-        this.key = key;\n-        this.value = value;\n-    }\n+        AnnotationEntry(String key, Object value) {\n+            this.key = key;\n+            this.value = value;\n+        }\n \n-    @SuppressWarnings(\"unchecked\")\n-    void toString(StringBuilder sb) {\n-        if (null != key)\n-            sb.append(key).append(\"=\");\n-\n-        List.class.getTypeParameters();\n-        if (value instanceof List) {\n-            sb.append(\"{\");\n-            List<AnnotationBuilder> l = (List<AnnotationBuilder>) value;\n-            for (Iterator<AnnotationBuilder> i = l.iterator(); i.hasNext();) {\n-                AnnotationBuilder ab =  i.next();\n-                sb.append(ab.toString());\n-                if (i.hasNext())\n-                    sb.append(\", \");\n+        @SuppressWarnings(\"unchecked\")\n+        void toString(StringBuilder sb) {\n+            if (null != key)\n+                sb.append(key).append(\"=\");\n+\n+            List.class.getTypeParameters();\n+            if (value instanceof List) {\n+                sb.append(\"{\");\n+                List<AnnotationBuilder> l = (List<AnnotationBuilder>) value;\n+                for (Iterator<AnnotationBuilder> i = l.iterator(); i.hasNext();) {\n+                    AnnotationBuilder ab =  i.next();\n+                    sb.append(ab.toString());\n+                    if (i.hasNext())\n+                        sb.append(\", \");\n+                }\n+                sb.append(\"}\");\n+            } else if (value instanceof Class) {\n+                String cls = ((Class) value).getName().replace('$', '.');\n+                sb.append(cls).append(\".class\");\n+            } else if (value instanceof String) {\n+                sb.append('\"').append(value).append('\"');\n+            } else if (value instanceof Enum) {\n+                sb.append(AnnotationBuilder.enumToString((Enum) value));\n+            } else if (value instanceof EnumSet) {\n+                sb.append(AnnotationBuilder.enumSetToString((EnumSet) value));\n+            } else {\n+                sb.append(value);\n             }\n-            sb.append(\"}\");\n-        } else if (value instanceof Class) {\n-            String cls = ((Class) value).getName().replace('$', '.');\n-            sb.append(cls).append(\".class\");\n-        } else if (value instanceof String) {\n-            sb.append('\"').append(value).append('\"');\n-        } else if (value instanceof Enum) {\n-            sb.append(AnnotationBuilder.enumToString((Enum) value));\n-        } else if (value instanceof EnumSet) {\n-            sb.append(AnnotationBuilder.enumSetToString((EnumSet) value));\n-        } else {\n-            sb.append(value);\n         }\n-    }\n \n-}\n+    }\n+}\n\\ No newline at end of file"},{"sha":"92e6989a5643c0e26d8ebfdfea30c4518e404215","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoClearType.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoClearType.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoClearType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoClearType.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -0,0 +1,56 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence;\r\n+\r\n+import org.apache.openjpa.kernel.AutoClear;\r\n+\r\n+/**\r\n+ * The possible settings for the auto-clear behavior of an\r\n+ * {@link OpenJPAEntityManager}.\r\n+ *\r\n+ * @since 1.0.0\r\n+ * @published\r\n+ */\r\n+public enum AutoClearType {\r\n+    DATASTORE(AutoClear.CLEAR_DATASTORE),\r\n+    ALL(AutoClear.CLEAR_ALL);\r\n+\r\n+    private final int autoClearConstant;\r\n+\r\n+    private AutoClearType(int value) {\r\n+        autoClearConstant = value;\r\n+    }\r\n+\r\n+    int toKernelConstant() {\r\n+        return autoClearConstant;\r\n+    }\r\n+\r\n+    static AutoClearType fromKernelConstant(int kernelConstant) {\r\n+        switch (kernelConstant) {\r\n+            case AutoClear.CLEAR_DATASTORE:\r\n+                return DATASTORE;\r\n+\r\n+            case AutoClear.CLEAR_ALL:\r\n+                return ALL;\r\n+\r\n+            default:\r\n+                throw new IllegalArgumentException(kernelConstant + \"\");\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"a4c9d843ff6d739b64797746dafdadfe7b097e1b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoDetachType.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoDetachType.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoDetachType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoDetachType.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -0,0 +1,63 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence;\r\n+\r\n+import java.util.EnumSet;\r\n+\r\n+import org.apache.openjpa.kernel.AutoDetach;\r\n+\r\n+/**\r\n+ * The possible settings for the auto-detach behavior of an\r\n+ * {@link OpenJPAEntityManager}.\r\n+ *\r\n+ * @since 1.0.0\r\n+ * @published\r\n+ */\r\n+public enum AutoDetachType {\r\n+    CLOSE(AutoDetach.DETACH_CLOSE),\r\n+    COMMIT(AutoDetach.DETACH_COMMIT),\r\n+    NON_TRANSACTIONAL_READ(AutoDetach.DETACH_NONTXREAD),\r\n+    ROLLBACK(AutoDetach.DETACH_ROLLBACK);\r\n+\r\n+    private final int autoDetachConstant;\r\n+\r\n+    private AutoDetachType(int value) {\r\n+        autoDetachConstant = value;\r\n+    }\r\n+\r\n+    public static EnumSet<AutoDetachType> toEnumSet(int autoDetach) {\r\n+        EnumSet<AutoDetachType> types = EnumSet.noneOf(AutoDetachType.class);\r\n+        if ((autoDetach & AutoDetach.DETACH_CLOSE) != 0)\r\n+            types.add(CLOSE);\r\n+        if ((autoDetach & AutoDetach.DETACH_COMMIT) != 0)\r\n+            types.add(COMMIT);\r\n+        if ((autoDetach & AutoDetach.DETACH_NONTXREAD) != 0)\r\n+            types.add(NON_TRANSACTIONAL_READ);\r\n+        if ((autoDetach & AutoDetach.DETACH_ROLLBACK) != 0)\r\n+            types.add(ROLLBACK);\r\n+        return types;\r\n+    }\r\n+\r\n+    public static int fromEnumSet(EnumSet<AutoDetachType> types) {\r\n+        int autoDetach = 0;\r\n+        for (AutoDetachType type : types)\r\n+            autoDetach |= type.autoDetachConstant;\r\n+        return autoDetach;\r\n+    }\r\n+}\r"},{"sha":"8f636b266eb1319aa64974fa5c815affd8adfbfd","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/CallbackType.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/CallbackType.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/CallbackType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/CallbackType.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -0,0 +1,66 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence;\r\n+\r\n+import java.util.EnumSet;\r\n+\r\n+import org.apache.openjpa.event.CallbackModes;\r\n+\r\n+/**\r\n+ * The possible settings for the callback behavior of an\r\n+ * {@link OpenJPAEntityManager}.\r\n+ *\r\n+ * @since 1.0.0\r\n+ * @published\r\n+ */\r\n+public enum CallbackType {\r\n+    FAIL_FAST(CallbackModes.CALLBACK_FAIL_FAST),\r\n+    IGNORE(CallbackModes.CALLBACK_IGNORE),\r\n+    LOG(CallbackModes.CALLBACK_LOG),\r\n+    RETHROW(CallbackModes.CALLBACK_RETHROW),\r\n+    ROLLBACK(CallbackModes.CALLBACK_ROLLBACK);\r\n+\r\n+    private final int callbackMode;\r\n+\r\n+    private CallbackType(int value) {\r\n+        callbackMode = value;\r\n+    }\r\n+\r\n+    public static EnumSet<CallbackType> toEnumSet(int callback) {\r\n+        EnumSet<CallbackType> types = EnumSet.noneOf(CallbackType.class);\r\n+        if ((callback & CallbackModes.CALLBACK_FAIL_FAST) != 0)\r\n+            types.add(FAIL_FAST);\r\n+        if ((callback & CallbackModes.CALLBACK_IGNORE) != 0)\r\n+            types.add(IGNORE);\r\n+        if ((callback & CallbackModes.CALLBACK_LOG) != 0)\r\n+            types.add(LOG);\r\n+        if ((callback & CallbackModes.CALLBACK_RETHROW) != 0)\r\n+            types.add(RETHROW);\r\n+        if ((callback & CallbackModes.CALLBACK_ROLLBACK) != 0)\r\n+            types.add(ROLLBACK);\r\n+        return types;\r\n+    }\r\n+\r\n+    public static int fromEnumSet(EnumSet<CallbackType> types) {\r\n+        int callback = 0;\r\n+        for (CallbackType type : types)\r\n+            callback |= type.callbackMode;\r\n+        return callback;\r\n+    }\r\n+}\r"},{"sha":"9336f148bb834c2142df6a952084248609366a15","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConnectionRetainType.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConnectionRetainType.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConnectionRetainType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConnectionRetainType.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -0,0 +1,60 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence;\r\n+\r\n+import org.apache.openjpa.kernel.ConnectionRetainModes;\r\n+\r\n+/**\r\n+ * The possible values for use when configuring the connection retain\r\n+ * behavior for an {@link OpenJPAEntityManager}.\r\n+ *\r\n+ * @since 1.0.0\r\n+ * @published\r\n+ */\r\n+public enum ConnectionRetainType {\r\n+    ON_DEMAND(ConnectionRetainModes.CONN_RETAIN_DEMAND),\r\n+    TRANSACTION(ConnectionRetainModes.CONN_RETAIN_TRANS),\r\n+    ALWAYS(ConnectionRetainModes.CONN_RETAIN_ALWAYS);\r\n+\r\n+    private final int connectionRetainConstant;\r\n+\r\n+    private ConnectionRetainType(int value) {\r\n+        connectionRetainConstant = value;\r\n+    }\r\n+\r\n+    int toKernelConstant() {\r\n+        return connectionRetainConstant;\r\n+    }\r\n+\r\n+    static ConnectionRetainType fromKernelConstant(int kernelConstant) {\r\n+        switch (kernelConstant) {\r\n+            case ConnectionRetainModes.CONN_RETAIN_DEMAND:\r\n+                return ON_DEMAND;\r\n+\r\n+            case ConnectionRetainModes.CONN_RETAIN_ALWAYS:\r\n+                return ALWAYS;\r\n+\r\n+            case ConnectionRetainModes.CONN_RETAIN_TRANS:\r\n+                return TRANSACTION;\r\n+\r\n+            default:\r\n+                throw new IllegalArgumentException(kernelConstant + \"\");\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"e08a8f46d0cbbb7b4b2fb600a306872bf0c24d32","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DataCache.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DataCache.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DataCache.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -28,6 +28,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ TYPE })\n @Retention(RUNTIME)"},{"sha":"6b1e5110746dd314c978b0836739efc27d768e68","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DataStoreId.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DataStoreId.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DataStoreId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DataStoreId.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -29,6 +29,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ TYPE })\n @Retention(RUNTIME)"},{"sha":"2a9734f6402f6b59c941e7d3df553699d933320b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Dependent.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Dependent.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Dependent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Dependent.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -29,6 +29,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"01e8003480e38babcc97311bb14156b262a4469b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachStateType.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachStateType.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachStateType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachStateType.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -0,0 +1,60 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence;\r\n+\r\n+import org.apache.openjpa.kernel.DetachState;\r\n+\r\n+/**\r\n+ * The possible settings for the detachment behavior of an\r\n+ * {@link OpenJPAEntityManager}.\r\n+ *\r\n+ * @since 1.0.0\r\n+ * @published\r\n+ */\r\n+public enum DetachStateType {\r\n+    FETCH_GROUPS(DetachState.DETACH_FETCH_GROUPS),\r\n+    LOADED(DetachState.DETACH_LOADED),\r\n+    ALL(DetachState.DETACH_ALL);\r\n+\r\n+    private final int detachStateConstant;\r\n+\r\n+    private DetachStateType(int value) {\r\n+        detachStateConstant = value;\r\n+    }\r\n+\r\n+    int toKernelConstant() {\r\n+        return detachStateConstant;\r\n+    }\r\n+\r\n+    static DetachStateType fromKernelConstant(int kernelConstant) {\r\n+        switch (kernelConstant) {\r\n+            case DetachState.DETACH_FETCH_GROUPS:\r\n+                return FETCH_GROUPS;\r\n+\r\n+            case DetachState.DETACH_LOADED:\r\n+                return LOADED;\r\n+\r\n+            case DetachState.DETACH_ALL:\r\n+                return ALL;\r\n+\r\n+            default:\r\n+                throw new IllegalArgumentException(kernelConstant + \"\");\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"20787f347cef6e666e61bec68129246f27debf10","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachedState.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachedState.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachedState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachedState.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -29,6 +29,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ TYPE, FIELD })\n @Retention(RUNTIME)"},{"sha":"9b087d524b368b5915136bdf7026eba042e4f348","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ElementDependent.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ElementDependent.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ElementDependent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ElementDependent.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -29,6 +29,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"94ef5a69f1188d9f9e462e015193e9f7ddf13e9b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ElementType.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ElementType.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ElementType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ElementType.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -30,6 +30,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"9a716d8b6bda96cc44ca21d6caaf0f9f45d4bfdc","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","status":"modified","additions":10,"deletions":9,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -42,6 +42,7 @@\n import org.apache.openjpa.lib.conf.ProductDerivations;\n import org.apache.openjpa.lib.conf.Value;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.Closeable;\n import org.apache.openjpa.util.OpenJPAException;\n import serp.util.Strings;\n \n@@ -53,7 +54,8 @@\n  * @nojavadoc\n  */\n public class EntityManagerFactoryImpl\n-    implements OpenJPAEntityManagerFactory {\n+    implements OpenJPAEntityManagerFactory, OpenJPAEntityManagerFactorySPI,\n+    Closeable {\n \n     private static final Localizer _loc = Localizer.forPackage\n         (EntityManagerFactoryImpl.class);\n@@ -139,11 +141,11 @@ public QueryResultCache getQueryResultCache() {\n         }\n     }\n \n-    public OpenJPAEntityManager createEntityManager() {\n+    public OpenJPAEntityManagerSPI createEntityManager() {\n         return createEntityManager(null);\n     }\n \n-    public OpenJPAEntityManager createEntityManager(Map props) {\n+    public OpenJPAEntityManagerSPI createEntityManager(Map props) {\n         if (props == null)\n             props = Collections.EMPTY_MAP;\n         else if (!props.isEmpty())\n@@ -195,12 +197,12 @@ else if (obj == null)\n         broker.setAutoDetach(AutoDetach.DETACH_ROLLBACK, true);\n         \n         broker.setDetachedNew(false);\n-        OpenJPAEntityManager em = newEntityManagerImpl(broker);\n+        OpenJPAEntityManagerSPI em = newEntityManagerImpl(broker);\n \n         // allow setting of other bean properties of EM\n         String[] prefixes = ProductDerivations.getConfigurationPrefixes();\n         List<RuntimeException> errs = null;\n-        Method setter = null;\n+        Method setter;\n         String prop, prefix;\n         Object val;\n         for (Map.Entry entry : (Set<Map.Entry>) props.entrySet()) {\n@@ -251,7 +253,7 @@ else if (obj == null)\n             if (errs.size() == 1)\n                 throw errs.get(0);\n             throw new ArgumentException(_loc.get(\"bad-em-props\"),\n-                (Throwable[]) errs.toArray(new Throwable[errs.size()]),\n+                errs.toArray(new Throwable[errs.size()]),\n                 null, true);\n         }\n         return em;\n@@ -308,9 +310,8 @@ FetchPlan toFetchPlan(Broker broker, FetchConfiguration fetch) {\n         if (fetch == null)\n             return null;\n \n-        FetchConfiguration inner = fetch;\n-        if (inner instanceof DelegatingFetchConfiguration)\n-            inner = ((DelegatingFetchConfiguration) inner).\n+        if (fetch instanceof DelegatingFetchConfiguration)\n+            fetch = ((DelegatingFetchConfiguration) fetch).\n                 getInnermostDelegate();\n \n         try {"},{"sha":"ee6cea1f692681d4f83662d20aa8509492bf9f24","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":62,"deletions":63,"changes":125,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -21,16 +21,11 @@\n import java.lang.reflect.Array;\r\n import java.util.Arrays;\r\n import java.util.Collection;\r\n+import java.util.EnumSet;\r\n import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityTransaction;\r\n import javax.persistence.FlushModeType;\r\n import javax.persistence.LockModeType;\r\n import javax.persistence.Query;\r\n-import javax.resource.ResourceException;\r\n-import javax.resource.cci.ConnectionMetaData;\r\n-import javax.resource.cci.Interaction;\r\n-import javax.resource.cci.LocalTransaction;\r\n-import javax.resource.cci.ResultSetInfo;\r\n \r\n import org.apache.commons.lang.StringUtils;\r\n import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n@@ -46,6 +41,7 @@\n import org.apache.openjpa.kernel.Seq;\r\n import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n import org.apache.openjpa.lib.util.Localizer;\r\n+import org.apache.openjpa.lib.util.Closeable;\r\n import org.apache.openjpa.meta.ClassMetaData;\r\n import org.apache.openjpa.meta.FieldMetaData;\r\n import org.apache.openjpa.meta.QueryMetaData;\r\n@@ -63,14 +59,16 @@\n  * @nojavadoc\r\n  */\r\n public class EntityManagerImpl\r\n-    implements OpenJPAEntityManager, FindCallbacks, OpCallbacks {\r\n+    implements OpenJPAEntityManagerSPI,\r\n+    FindCallbacks, OpCallbacks, Closeable, OpenJPAEntityTransaction {\r\n \r\n     private static final Localizer _loc = Localizer.forPackage\r\n         (EntityManagerImpl.class);\r\n \r\n     private final DelegatingBroker _broker;\r\n     private final EntityManagerFactoryImpl _emf;\r\n     private FetchPlan _fetch = null;\r\n+    private static final Object[] EMPTY_OBJECTS = new Object[0];\r\n \r\n     /**\r\n      * Constructor; supply factory and delegate.\r\n@@ -91,27 +89,6 @@ public Broker getBroker() {\n         return _broker.getDelegate();\r\n     }\r\n \r\n-    public ConnectionMetaData getMetaData()\r\n-        throws ResourceException {\r\n-        return _broker.getMetaData();\r\n-    }\r\n-\r\n-    public Interaction createInteraction()\r\n-        throws ResourceException {\r\n-        assertNotCloseInvoked();\r\n-        return _broker.createInteraction();\r\n-    }\r\n-\r\n-    public LocalTransaction getLocalTransaction()\r\n-        throws ResourceException {\r\n-        return this;\r\n-    }\r\n-\r\n-    public ResultSetInfo getResultSetInfo()\r\n-        throws ResourceException {\r\n-        return _broker.getResultSetInfo();\r\n-    }\r\n-\r\n     public OpenJPAEntityManagerFactory getEntityManagerFactory() {\r\n         return _emf;\r\n     }\r\n@@ -133,8 +110,9 @@ public FetchPlan getFetchPlan() {\n         }\r\n     }\r\n \r\n-    public int getConnectionRetainMode() {\r\n-        return _broker.getConnectionRetainMode();\r\n+    public ConnectionRetainType getConnectionRetainMode() {\r\n+        return ConnectionRetainType.fromKernelConstant(\r\n+            _broker.getConnectionRetainMode());\r\n     }\r\n \r\n     public boolean isManaged() {\r\n@@ -211,13 +189,13 @@ public void setOptimistic(boolean val) {\n         _broker.setOptimistic(val);\r\n     }\r\n \r\n-    public int getRestoreState() {\r\n-        return _broker.getRestoreState();\r\n+    public RestoreStateType getRestoreState() {\r\n+        return RestoreStateType.fromKernelConstant(_broker.getRestoreState());\r\n     }\r\n \r\n-    public void setRestoreState(int val) {\r\n+    public void setRestoreState(RestoreStateType val) {\r\n         assertNotCloseInvoked();\r\n-        _broker.setRestoreState(val);\r\n+        _broker.setRestoreState(val.toKernelConstant());\r\n     }\r\n \r\n     public boolean getRetainState() {\r\n@@ -229,31 +207,36 @@ public void setRetainState(boolean val) {\n         _broker.setRetainState(val);\r\n     }\r\n \r\n-    public int getAutoClear() {\r\n-        return _broker.getAutoClear();\r\n+    public AutoClearType getAutoClear() {\r\n+        return AutoClearType.fromKernelConstant(_broker.getAutoClear());\r\n     }\r\n \r\n-    public void setAutoClear(int val) {\r\n+    public void setAutoClear(AutoClearType val) {\r\n         assertNotCloseInvoked();\r\n-        _broker.setAutoClear(val);\r\n+        _broker.setAutoClear(val.toKernelConstant());\r\n     }\r\n \r\n-    public int getDetachState() {\r\n-        return _broker.getDetachState();\r\n+    public DetachStateType getDetachState() {\r\n+        return DetachStateType.fromKernelConstant(_broker.getDetachState());\r\n     }\r\n \r\n-    public void setDetachState(int mode) {\r\n+    public void setDetachState(DetachStateType type) {\r\n         assertNotCloseInvoked();\r\n-        _broker.setDetachState(mode);\r\n+        _broker.setDetachState(type.toKernelConstant());\r\n     }\r\n \r\n-    public int getAutoDetach() {\r\n-        return _broker.getAutoDetach();\r\n+    public EnumSet<AutoDetachType> getAutoDetach() {\r\n+        return AutoDetachType.toEnumSet(_broker.getAutoDetach());\r\n     }\r\n \r\n-    public void setAutoDetach(int flags) {\r\n+    public void setAutoDetach(AutoDetachType flag) {\r\n         assertNotCloseInvoked();\r\n-        _broker.setAutoDetach(flags);\r\n+        _broker.setAutoDetach(AutoDetachType.fromEnumSet(EnumSet.of(flag)));\r\n+    }\r\n+\r\n+    public void setAutoDetach(EnumSet<AutoDetachType> flags) {\r\n+        assertNotCloseInvoked();\r\n+        _broker.setAutoDetach(AutoDetachType.fromEnumSet(flags));\r\n     }\r\n \r\n     public void setAutoDetach(int flag, boolean on) {\r\n@@ -279,13 +262,13 @@ public void setPopulateStoreCache(boolean cache) {\n         _broker.setPopulateDataCache(cache);\r\n     }\r\n \r\n-    public boolean isLargeTransaction() {\r\n-        return _broker.isLargeTransaction();\r\n+    public boolean isTrackChangesByType() {\r\n+        return _broker.isTrackChangesByType();\r\n     }\r\n \r\n-    public void setLargeTransaction(boolean largeTransaction) {\r\n+    public void setTrackChangesByType(boolean trackByType) {\r\n         assertNotCloseInvoked();\r\n-        _broker.setLargeTransaction(largeTransaction);\r\n+        _broker.setTrackChangesByType(trackByType);\r\n     }\r\n \r\n     public Object getUserObject(Object key) {\r\n@@ -307,13 +290,21 @@ public void removeTransactionListener(Object listener) {\n         _broker.removeTransactionListener(listener);\r\n     }\r\n \r\n-    public int getTransactionListenerCallbackMode() {\r\n-        return _broker.getTransactionListenerCallbackMode();\r\n+    public EnumSet<CallbackType> getTransactionListenerCallbackMode() {\r\n+        return CallbackType.toEnumSet(\r\n+            _broker.getTransactionListenerCallbackMode());\r\n     }\r\n \r\n-    public void setTransactionListenerCallbackMode(int mode) {\r\n+    public void setTransactionListenerCallbackMode(CallbackType type) {\r\n         assertNotCloseInvoked();\r\n-        _broker.setTransactionListenerCallbackMode(mode);\r\n+        _broker.setTransactionListenerCallbackMode(\r\n+            CallbackType.fromEnumSet(EnumSet.of(type)));\r\n+    }\r\n+\r\n+    public void setTransactionListenerCallbackMode(EnumSet<CallbackType> types){\r\n+        assertNotCloseInvoked();\r\n+        _broker.setTransactionListenerCallbackMode(\r\n+            CallbackType.fromEnumSet(types));\r\n     }\r\n \r\n     public void addLifecycleListener(Object listener, Class... classes) {\r\n@@ -326,13 +317,21 @@ public void removeLifecycleListener(Object listener) {\n         _broker.removeLifecycleListener(listener);\r\n     }\r\n \r\n-    public int getLifecycleListenerCallbackMode() {\r\n-        return _broker.getLifecycleListenerCallbackMode();\r\n+    public EnumSet<CallbackType> getLifecycleListenerCallbackMode() {\r\n+        return CallbackType.toEnumSet(\r\n+            _broker.getLifecycleListenerCallbackMode());\r\n+    }\r\n+\r\n+    public void setLifecycleListenerCallbackMode(CallbackType type) {\r\n+        assertNotCloseInvoked();\r\n+        _broker.setLifecycleListenerCallbackMode(\r\n+            CallbackType.fromEnumSet(EnumSet.of(type)));\r\n     }\r\n \r\n-    public void setLifecycleListenerCallbackMode(int mode) {\r\n+    public void setLifecycleListenerCallbackMode(EnumSet<CallbackType> types) {\r\n         assertNotCloseInvoked();\r\n-        _broker.setLifecycleListenerCallbackMode(mode);\r\n+        _broker.setLifecycleListenerCallbackMode(\r\n+            CallbackType.fromEnumSet(types));\r\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r\n@@ -382,11 +381,11 @@ public Class getObjectIdClass(Class cls) {\n         assertNotCloseInvoked();\r\n         if (cls == null)\r\n             return null;\r\n-        return OpenJPAPersistence.fromOpenJPAObjectIdClass\r\n+        return JPAFacadeHelper.fromOpenJPAObjectIdClass\r\n                 (_broker.getObjectIdType(cls));\r\n     }\r\n \r\n-    public EntityTransaction getTransaction() {\r\n+    public OpenJPAEntityTransaction getTransaction() {\r\n         if (_broker.isManaged())\r\n             throw new InvalidStateException(_loc.get(\"get-managed-trans\"),\r\n                 null, null, false);\r\n@@ -640,7 +639,7 @@ public void evictAll(Class cls) {\n \r\n     public void evictAll(Extent extent) {\r\n         assertNotCloseInvoked();\r\n-        _broker.evictAll(extent.getDelegate(), this);\r\n+        _broker.evictAll(((ExtentImpl) extent).getDelegate(), this);\r\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r\n@@ -667,7 +666,7 @@ public Collection detachAll(Collection entities) {\n \r\n     public Object[] mergeAll(Object... entities) {\r\n         if (entities.length == 0)\r\n-            return new Object[0];\r\n+            return EMPTY_OBJECTS;\r\n         return mergeAll(Arrays.asList(entities)).toArray();\r\n     }\r\n \r\n@@ -1019,7 +1018,7 @@ public void dirty(Object o, String field) {\n \r\n     public Object getObjectId(Object o) {\r\n         assertNotCloseInvoked();\r\n-        return OpenJPAPersistence.fromOpenJPAObjectId(_broker.getObjectId(o));\r\n+        return JPAFacadeHelper.fromOpenJPAObjectId(_broker.getObjectId(o));\r\n     }\r\n \r\n     public boolean isDirty(Object o) {\r"},{"sha":"68d7bc14a1e1307a14d33f6de39a720d5ac9673d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Extent.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Extent.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Extent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Extent.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -30,11 +30,6 @@\n public interface Extent<T>\n     extends Iterable<T> {\n \n-    /**\n-     * Delegate.\n-     */\n-    public org.apache.openjpa.kernel.Extent getDelegate();\n-\n     /**\n      * The extent's element type.\n      */"},{"sha":"37f044d78321df9e4e0dd67ae9fa783361b4e924","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ExtentImpl.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ExtentImpl.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ExtentImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ExtentImpl.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -47,6 +47,9 @@ public ExtentImpl(EntityManagerImpl em,\n             PersistenceExceptions.getRollbackTranslator(em));\n     }\n \n+    /**\n+     * Delegate.\n+     */\n     public org.apache.openjpa.kernel.Extent getDelegate() {\n         return _extent.getDelegate();\n     }"},{"sha":"4baa36b2d3b4b54c88b84edf3df16de2731e0ca8","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ExternalValues.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ExternalValues.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ExternalValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ExternalValues.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -31,6 +31,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"a47f7cd587ad462687f88ba033ad1fe3238761ef","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Externalizer.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Externalizer.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Externalizer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Externalizer.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -30,6 +30,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"70cf96894607be2f9d25f2fc32d0c4caf82872b5","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Factory.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Factory.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Factory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Factory.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -30,6 +30,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"81964d552dd255e2d7f6291b38f65c92f9ae1bca","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchAttribute.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchAttribute.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchAttribute.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchAttribute.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -27,6 +27,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({})\n @Retention(RUNTIME)"},{"sha":"87ebb5c73a3274be02a4b8fa55045680a5f0b12a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchGroup.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchGroup.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchGroup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchGroup.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -28,6 +28,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ TYPE })\n @Retention(RUNTIME)"},{"sha":"da0eb8430a9e68542907a4230016ecfb804011a2","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchGroups.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchGroups.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchGroups.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchGroups.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -28,6 +28,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ TYPE })\n @Retention(RUNTIME)"},{"sha":"a3d6418a81625ca1a2fd9479ef22605efe37f119","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlan.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlan.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlan.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlan.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -55,11 +55,6 @@\n      */\n     public static final int DEFAULT = FetchConfiguration.DEFAULT;\n \n-    /**\n-     * Delegate.\n-     */\n-    public FetchConfiguration getDelegate();\n-\n     /**\n      * The maximum fetch depth when loading an object.\n      */\n@@ -90,15 +85,19 @@\n      * will not be enabled. If this\n      * returns <code>false</code>, query caching will not be used\n      * even if the datacache plugin is installed.\n+     *\n+     * @since 1.0.0\n      */\n-    public boolean getQueryResultCache();\n+    public boolean isEnlistInQueryResultCache();\n \n     /**\n      * Control whether or not query caching is enabled. This has no effect\n      * if the datacache plugin is not installed, or if the query cache size\n      * is set to zero.\n+     *\n+     * @since 1.0.0\n      */\n-    public FetchPlan setQueryResultCache(boolean cache);\n+    public FetchPlan setEnlistInQueryResultCache(boolean cache);\n \n     /**\n      * Returns the names of the fetch groups that this component will use"},{"sha":"dd0f5469e87b3fdf3e514559f1b38d8a3c4a3da2","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlanImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlanImpl.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlanImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlanImpl.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -82,12 +82,12 @@ public FetchPlan setFetchBatchSize(int fetchBatchSize) {\n         return this;\n     }\n \n-    public boolean getQueryResultCache() {\n-        return _fetch.getQueryCache();\n+    public boolean isEnlistInQueryResultCache() {\n+        return _fetch.getEnlistInQueryCache();\n     }\n \n-    public FetchPlan setQueryResultCache(boolean cache) {\n-        _fetch.setQueryCache(cache);\n+    public FetchPlan setEnlistInQueryResultCache(boolean cache) {\n+        _fetch.setEnlistInQueryCache(cache);\n         return this;\n     }\n "},{"sha":"05c87c7e6f5c1432045ee79cad7a82615c21d414","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Generator.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Generator.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Generator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Generator.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -32,11 +32,6 @@\n     public static final String UUID_HEX = \"uuid-hex\";\n     public static final String UUID_STRING = \"uuid-string\";\n \n-    /**\n-     * Delegate.\n-     */\n-    public Seq getDelegate();\n-\n     /**\n      * The sequence name.\n      */"},{"sha":"656074f4a17cba6a05185c71aae3aa9309b34761","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/GeneratorImpl.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/GeneratorImpl.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/GeneratorImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/GeneratorImpl.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -49,6 +49,9 @@ public GeneratorImpl(Seq seq, String name, StoreContext ctx,\n         _meta = meta;\n     }\n \n+    /**\n+     * Delegate.\n+     */\n     public Seq getDelegate() {\n         return _seq.getDelegate();\n     }"},{"sha":"6c6018de60b98a564000ecefd356230488d1f3c0","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/InverseLogical.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/InverseLogical.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/InverseLogical.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/InverseLogical.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -29,6 +29,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"2ccb875ffe7559671d1780d9bf5692067c16b69a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java","status":"added","additions":307,"deletions":0,"changes":307,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -0,0 +1,307 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.Iterator;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.BrokerFactory;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.util.ByteId;\r\n+import org.apache.openjpa.util.CharId;\r\n+import org.apache.openjpa.util.DoubleId;\r\n+import org.apache.openjpa.util.FloatId;\r\n+import org.apache.openjpa.util.Id;\r\n+import org.apache.openjpa.util.ImplHelper;\r\n+import org.apache.openjpa.util.IntId;\r\n+import org.apache.openjpa.util.LongId;\r\n+import org.apache.openjpa.util.ObjectId;\r\n+import org.apache.openjpa.util.OpenJPAId;\r\n+import org.apache.openjpa.util.ShortId;\r\n+import org.apache.openjpa.util.StringId;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+\r\n+/**\r\n+ * Helper class for switching between OpenJPA's JPA facade and the underlying\r\n+ * Broker kernel.\r\n+ *\r\n+ * @since 1.0.0\r\n+ * @nojavadoc\r\n+ */\r\n+public class JPAFacadeHelper {\r\n+\r\n+    public static final String EM_KEY =\r\n+        \"org.apache.openjpa.persistence.EntityManager\";\r\n+    public static final String EMF_KEY =\r\n+        \"org.apache.openjpa.persistence.EntityManagerFactory\";\r\n+\r\n+    private static final Localizer _loc =\r\n+        Localizer.forPackage(JPAFacadeHelper.class);\r\n+\r\n+    public static OpenJPAEntityManagerFactory toEntityManagerFactory(\r\n+        BrokerFactory factory) {\r\n+        if (factory == null)\r\n+            return null;\r\n+\r\n+        factory.lock();\r\n+        try {\r\n+            OpenJPAEntityManagerFactory emf = (OpenJPAEntityManagerFactory)\r\n+                factory.getUserObject(EMF_KEY);\r\n+            if (emf == null) {\r\n+                emf = EntityManagerFactoryValue.newFactory(factory);\r\n+                factory.putUserObject(EMF_KEY, emf);\r\n+            }\r\n+            return emf;\r\n+        } catch (Exception e) {\r\n+            throw PersistenceExceptions.toPersistenceException(e);\r\n+        } finally {\r\n+            factory.unlock();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the underlying broker factory for the given persistence manager\r\n+     * factory facade.\r\n+     */\r\n+    public static BrokerFactory toBrokerFactory(EntityManagerFactory emf) {\r\n+        if (emf == null)\r\n+            return null;\r\n+        if (!(emf instanceof EntityManagerFactoryImpl)) {\r\n+            Class c = emf.getClass();\r\n+            try {\r\n+                // either cast here may fail\r\n+                emf = (EntityManagerFactoryImpl) ((OpenJPAEntityManagerFactory)\r\n+                    emf).getUserObject(EMF_KEY);\r\n+            } catch (ClassCastException cce) {\r\n+                throw new ArgumentException(_loc.get(\r\n+                    \"cant-convert-brokerfactory\", c), null, null, false);\r\n+            }\r\n+        }\r\n+        return ((EntityManagerFactoryImpl) emf).getBrokerFactory();\r\n+    }\r\n+\r\n+    /**\r\n+     * Return a persistence manager facade to the given broker retaining\r\n+     * previously associated persistence context type.\r\n+     */\r\n+    public static OpenJPAEntityManager toEntityManager(Broker broker) {\r\n+        if (broker == null)\r\n+            return null;\r\n+\r\n+        broker.lock();\r\n+        try {\r\n+            OpenJPAEntityManager em = (OpenJPAEntityManager)\r\n+                broker.getUserObject(EM_KEY);\r\n+            if (em == null) {\r\n+                EntityManagerFactoryImpl emf = (EntityManagerFactoryImpl)\r\n+                    toEntityManagerFactory(broker.getBrokerFactory());\r\n+                em = emf.newEntityManagerImpl(broker);\r\n+                broker.putUserObject(EM_KEY, em);\r\n+            }\r\n+            return em;\r\n+        } catch (Exception e) {\r\n+            throw PersistenceExceptions.toPersistenceException(e);\r\n+        } finally {\r\n+            broker.unlock();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the underlying broker for the given entity manager facade.\r\n+     */\r\n+    public static Broker toBroker(EntityManager em) {\r\n+        if (em == null)\r\n+            return null;\r\n+        if (!(em instanceof EntityManagerImpl)) {\r\n+            Class c = em.getClass();\r\n+            try {\r\n+                // either cast here may fail\r\n+                em = (EntityManagerImpl) ((OpenJPAEntityManager) em).\r\n+                    getUserObject(EM_KEY);\r\n+            } catch (ClassCastException cce) {\r\n+                throw new ArgumentException(_loc.get(\"cant-convert-broker\", c),\r\n+                    null, null, false);\r\n+            }\r\n+        }\r\n+        return ((EntityManagerImpl) em).getBroker();\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns the {@link org.apache.openjpa.meta.ClassMetaData} associated with the\r\n+     * persistent object <code>o</code>.\r\n+     */\r\n+    public static ClassMetaData getMetaData(Object o) {\r\n+        if (o == null)\r\n+            return null;\r\n+        EntityManager em = OpenJPAPersistence.getEntityManager(o);\r\n+        return (em == null) ? null : getMetaData(em,\r\n+            ImplHelper.getManagedInstance(o).getClass());\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns the {@link org.apache.openjpa.meta.ClassMetaData} associated\r\n+     * with the persistent type <code>cls</code>.\r\n+     */\r\n+    public static ClassMetaData getMetaData(EntityManager em, Class cls) {\r\n+        if (em == null)\r\n+            throw new NullPointerException(\"em == null\");\r\n+\r\n+        OpenJPAEntityManagerSPI kem = (OpenJPAEntityManagerSPI)\r\n+            OpenJPAPersistence.cast(em);\r\n+        try {\r\n+            return kem.getConfiguration().getMetaDataRepositoryInstance().\r\n+                getMetaData(cls, kem.getClassLoader(), false);\r\n+        } catch (Exception e) {\r\n+            throw PersistenceExceptions.toPersistenceException(e);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns the {@link org.apache.openjpa.meta.ClassMetaData} associated\r\n+     * with the persistent type <code>cls</code>.\r\n+     */\r\n+    public static ClassMetaData getMetaData(EntityManagerFactory emf,\r\n+        Class cls) {\r\n+        if (emf == null)\r\n+            throw new NullPointerException(\"emf == null\");\r\n+\r\n+        OpenJPAEntityManagerFactorySPI emfSPI =\r\n+            (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(emf);\r\n+        try {\r\n+            return emfSPI.getConfiguration().getMetaDataRepositoryInstance().\r\n+                getMetaData(cls, null, false);\r\n+        } catch (Exception e) {\r\n+            throw PersistenceExceptions.toPersistenceException(e);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Translate from a OpenJPA identity object to a Persistence one.\r\n+     */\r\n+    public static Object fromOpenJPAObjectId(Object oid) {\r\n+        if (oid instanceof OpenJPAId)\r\n+            return ((OpenJPAId) oid).getIdObject();\r\n+        return oid;\r\n+    }\r\n+\r\n+    /**\r\n+     * Translate from a Persistence identity object to a OpenJPA one.\r\n+     */\r\n+    public static Object toOpenJPAObjectId(ClassMetaData meta, Object oid) {\r\n+        if (oid == null || meta == null)\r\n+            return null;\r\n+\r\n+        Class cls = meta.getDescribedType();\r\n+        if (meta.getIdentityType() == ClassMetaData.ID_DATASTORE)\r\n+            return new Id(cls, ((Number) oid).longValue());\r\n+\r\n+        if (oid instanceof Byte)\r\n+            return new ByteId(cls, (Byte) oid);\r\n+        if (oid instanceof Character)\r\n+            return new CharId(cls, (Character) oid);\r\n+        if (oid instanceof Double)\r\n+            return new DoubleId(cls, (Double) oid);\r\n+        if (oid instanceof Float)\r\n+            return new FloatId(cls, (Float) oid);\r\n+        if (oid instanceof Integer)\r\n+            return new IntId(cls, (Integer) oid);\r\n+        if (oid instanceof Long)\r\n+            return new LongId(cls, (Long) oid);\r\n+        if (oid instanceof Short)\r\n+            return new ShortId(cls, (Short) oid);\r\n+        if (oid instanceof String)\r\n+            return new StringId(cls, (String) oid);\r\n+        return new ObjectId(cls, oid);\r\n+    }\r\n+\r\n+    /**\r\n+     * Return an array of OpenJPA oids for the given native oid array.\r\n+     */\r\n+    public static Object[] toOpenJPAObjectIds(ClassMetaData meta,\r\n+        Object... oids) {\r\n+        if (oids == null || oids.length == 0)\r\n+            return oids;\r\n+\r\n+        // since the class if fixed for all oids, we can tell if we have to\r\n+        // translate the array based on whether the first oid needs translating\r\n+        Object oid = toOpenJPAObjectId(meta, oids[0]);\r\n+        if (oid == oids[0])\r\n+            return oids;\r\n+\r\n+        Object[] copy = new Object[oids.length];\r\n+        copy[0] = oid;\r\n+        for (int i = 1; i < oids.length; i++)\r\n+            copy[i] = toOpenJPAObjectId(meta, oids[i]);\r\n+        return copy;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return a collection of OpenJPA oids for the given native oid collection.\r\n+     */\r\n+    public static Collection toOpenJPAObjectIds(ClassMetaData meta,\r\n+        Collection oids) {\r\n+        if (oids == null || oids.isEmpty())\r\n+            return oids;\r\n+\r\n+        // since the class if fixed for all oids, we can tell if we have to\r\n+        // translate the array based on whether the first oid needs translating\r\n+        Iterator itr = oids.iterator();\r\n+        Object orig = itr.next();\r\n+        Object oid = toOpenJPAObjectId(meta, orig);\r\n+        if (oid == orig)\r\n+            return oids;\r\n+\r\n+        Collection copy = new ArrayList(oids.size());\r\n+        copy.add(oid);\r\n+        while (itr.hasNext())\r\n+            copy.add(toOpenJPAObjectId(meta, itr.next()));\r\n+        return copy;\r\n+    }\r\n+\r\n+    /**\r\n+     * Translate from a OpenJPA identity class to a native one.\r\n+     */\r\n+    public static Class fromOpenJPAObjectIdClass(Class oidClass) {\r\n+        if (oidClass == null)\r\n+            return null;\r\n+        if (oidClass == Id.class)\r\n+            return Long.class;\r\n+        if (oidClass == ByteId.class)\r\n+            return Byte.class;\r\n+        if (oidClass == CharId.class)\r\n+            return Character.class;\r\n+        if (oidClass == DoubleId.class)\r\n+            return Double.class;\r\n+        if (oidClass == FloatId.class)\r\n+            return Float.class;\r\n+        if (oidClass == IntId.class)\r\n+            return Integer.class;\r\n+        if (oidClass == LongId.class)\r\n+            return Long.class;\r\n+        if (oidClass == ShortId.class)\r\n+            return Short.class;\r\n+        if (oidClass == StringId.class)\r\n+\t\t\treturn String.class;\r\n+\t\treturn oidClass;\r\n+\t}\r\n+}\r"},{"sha":"954696be345ca903d0629a42b2ed55b45ee19149","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/KeyDependent.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/KeyDependent.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/KeyDependent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/KeyDependent.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -29,6 +29,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"2b0f6f3236d0e40ab162c93d3761d33b9c1ef48c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/KeyType.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/KeyType.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/KeyType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/KeyType.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -30,6 +30,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"ded64a0edd82dd10743bb97e50363f7bfbf66865","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LRS.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LRS.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LRS.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LRS.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -29,6 +29,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"2d1918e5360f9225a074588337ebc37270ef41fd","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LoadFetchGroup.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LoadFetchGroup.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LoadFetchGroup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LoadFetchGroup.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -28,6 +28,8 @@\n  * Fetch group loaded when the annotated field/property is loaded. \n  *\n  * @author Pinaki Poddar\n+ * @since 1.0.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"054cc535c68788014bac8f28f93f464210e6dcc4","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java","status":"modified","additions":34,"deletions":156,"changes":190,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -19,21 +19,11 @@\n package org.apache.openjpa.persistence;\n \n import java.util.Collection;\n+import java.util.EnumSet;\n import javax.persistence.EntityManager;\n-import javax.persistence.EntityTransaction;\n import javax.persistence.LockModeType;\n import javax.persistence.Query;\n \n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n-import org.apache.openjpa.ee.ManagedRuntime;\n-import org.apache.openjpa.event.CallbackModes;\n-import org.apache.openjpa.kernel.AutoClear;\n-import org.apache.openjpa.kernel.AutoDetach;\n-import org.apache.openjpa.kernel.ConnectionRetainModes;\n-import org.apache.openjpa.kernel.DetachState;\n-import org.apache.openjpa.kernel.RestoreState;\n-import org.apache.openjpa.lib.util.Closeable;\n-\n /**\n  * Interface implemented by OpenJPA entity managers.\n  *\n@@ -42,21 +32,15 @@\n  * @published\n  */\n public interface OpenJPAEntityManager\n-    extends EntityManager, EntityTransaction, javax.resource.cci.Connection,\n-    javax.resource.cci.LocalTransaction, javax.resource.spi.LocalTransaction,\n-    Closeable, ConnectionRetainModes, DetachState, RestoreState, AutoDetach,\n-    AutoClear, CallbackModes {\n+    extends EntityManager {\n+\n+    // ##### covariant types?\n \n     /**\n      * Return the factory that produced this entity manager.\n      */\n     public OpenJPAEntityManagerFactory getEntityManagerFactory();\n \n-    /**\n-     * Return the configuration associated with this entity manager.\n-     */\n-    public OpenJPAConfiguration getConfiguration();\n-\n     /**\n      * Return the (mutable) fetch plan for loading objects from this\n      * entity manager.\n@@ -65,21 +49,14 @@\n \n     /**\n      * Return the connection retain mode for this entity manager.\n-     *\n-     * @see ConnectionRetainModes\n      */\n-    public int getConnectionRetainMode();\n+    public ConnectionRetainType getConnectionRetainMode();\n \n     /**\n      * Whether this entity manager is using managed transactions.\n      */\n     public boolean isManaged();\n \n-    /**\n-     * Return the managed runtime in use.\n-     */\n-    public ManagedRuntime getManagedRuntime();\n-\n     /**\n      * Whether to check for a global transaction upon every managed,\n      * non-transactional operation. Defaults to false.\n@@ -164,17 +141,13 @@\n \n     /**\n      * Whether to restore an object's original state on rollback.\n-     *\n-     * @see RestoreState\n      */\n-    public int getRestoreState();\n+    public RestoreStateType getRestoreState();\n \n     /**\n      * Whether to restore an object's original state on rollback.\n-     *\n-     * @see RestoreState\n      */\n-    public void setRestoreState(int restore);\n+    public void setRestoreState(RestoreStateType restoreType);\n \n     /**\n      * Whether objects retain their persistent state on transaction commit.\n@@ -189,47 +162,47 @@\n     /**\n      * Detach mode constant to determine which fields are part of the\n      * detached graph.\n-     *\n-     * @see DetachState\n      */\n-    public int getDetachState();\n+    public DetachStateType getDetachState();\n \n     /**\n      * Detach mode constant to determine which fields are part of the\n      * detached graph.\n-     *\n-     * @see DetachState\n      */\n-    public void setDetachState(int mode);\n+    public void setDetachState(DetachStateType type);\n \n     /**\n      * Whether to clear state when entering a transaction.\n-     *\n-     * @see AutoClear\n      */\n-    public int getAutoClear();\n+    public AutoClearType getAutoClear();\n \n     /**\n      * Whether to clear state when entering a transaction.\n-     *\n-     * @see AutoClear\n      */\n-    public void setAutoClear(int clear);\n+    public void setAutoClear(AutoClearType clearType);\n \n     /**\n-     * Bit flags marked in {@link AutoDetach} which indicate when persistent\n+     * {@link AutoDetachType} values which indicate when persistent\n      * managed objects should be automatically detached in-place.\n      */\n-    public int getAutoDetach();\n+    public EnumSet<AutoDetachType> getAutoDetach();\n \n     /**\n-     * Bit flags marked in {@link AutoDetach} which indicate when persistent\n+     * {@link AutoDetachType} values which indicate when persistent\n      * managed objects should be automatically detached in-place.\n+     * The current value is replaced in its entirety.\n      */\n-    public void setAutoDetach(int flags);\n+    public void setAutoDetach(AutoDetachType value);\n \n     /**\n-     * Bit flags marked in {@link AutoDetach} which indicate when persistent\n+     * {@link AutoDetachType} values which indicate when persistent\n+     * managed objects should be automatically detached in-place.\n+     * The current value is replaced in its entirety.\n+     */\n+    public void setAutoDetach(EnumSet<AutoDetachType> values);\n+\n+    /**\n+     * Bit flags marked in {@link AutoDetachType} which indicate when persistent\n      * managed objects should be automatically detached in-place.\n      */\n     public void setAutoDetach(int flag, boolean on);\n@@ -264,20 +237,23 @@\n \n     /**\n      * Whether memory usage is reduced during this transaction at the expense\n-     * of possibly more aggressive data cache evictions.\n+     * of tracking changes at the type level instead of the instance level,\n+     * resulting in more aggressive cache invalidation.\n      *\n-     * @since 0.3.4\n+     * @since 1.0.0\n      */\n-    public boolean isLargeTransaction();\n+    public boolean isTrackChangesByType();\n \n     /**\n      * If a large number of objects will be created, modified, or deleted\n      * during this transaction setting this option to true will reduce memory\n-     * usage if you perform periodic flushes.\n+     * usage if you perform periodic flushes by tracking changes at the type\n+     * level instead of the instance level, resulting in more aggressive cache\n+     * invalidation.\n      *\n-     * @since 0.3.4\n+     * @since 1.0.0\n      */\n-    public void setLargeTransaction(boolean largeTransaction);\n+    public void setTrackChangesByType(boolean largeTransaction);\n \n     /**\n      * Put the specified key-value pair into the map of user objects. Use\n@@ -290,56 +266,6 @@\n      */\n     public Object getUserObject(Object key);\n \n-    //////////\n-    // Events\n-    //////////\n-\n-    /**\n-     * Register a listener for transaction-related events.\n-     */\n-    public void addTransactionListener(Object listener);\n-\n-    /**\n-     * Remove a listener for transaction-related events.\n-     */\n-    public void removeTransactionListener(Object listener);\n-\n-    /**\n-     * The {@link CallbackModes} flags for handling transaction listener\n-     * exceptions.\n-     */\n-    public int getTransactionListenerCallbackMode();\n-\n-    /**\n-     * The {@link CallbackModes} flags for handling transaction listener\n-     * exceptions.\n-     */\n-    public void setTransactionListenerCallbackMode(int callbackMode);\n-\n-    /**\n-     * Register a listener for lifecycle-related events on the specified\n-     * classes. If the classes are null, all events will be propagated to\n-     * the listener.\n-     */\n-    public void addLifecycleListener(Object listener, Class... classes);\n-\n-    /**\n-     * Remove a listener for lifecycle-related events.\n-     */\n-    public void removeLifecycleListener(Object listener);\n-\n-    /**\n-     * The {@link CallbackModes} flags for handling lifecycle listener\n-     * exceptions.\n-     */\n-    public int getLifecycleListenerCallbackMode();\n-\n-    /**\n-     * The {@link CallbackModes} flags for handling lifecycle listener\n-     * exceptions.\n-     */\n-    public void setLifecycleListenerCallbackMode(int callbackMode);\n-\n     ///////////\n     // Lookups\n     ///////////\n@@ -383,55 +309,7 @@\n     // Transactions\n     ////////////////\n \n-    /**\n-     * Issue a commit and then start a new transaction. This is identical to:\n-     * <pre> manager.commit (); manager.begin ();\n-     * </pre> except that the entity manager's internal atomic lock is utilized,\n-     * so this method can be safely executed from multiple threads.\n-     *\n-     * @see #commit()\n-     * @see #begin()\n-     */\n-    public void commitAndResume();\n-\n-    /**\n-     * Issue a rollback and then start a new transaction. This is identical to:\n-     * <pre> manager.rollback (); manager.begin ();\n-     * </pre> except that the entity manager's internal atomic lock is utilized,\n-     * so this method can be safely executed from multiple threads.\n-     *\n-     * @see #rollback()\n-     * @see #begin()\n-     */\n-    public void rollbackAndResume();\n-\n-    /**\n-     * Mark the current transaction for rollback.\n-     */\n-    public void setRollbackOnly();\n-\n-    /**\n-     * Mark the current transaction for rollback with the specified cause\n-     * of the rollback.\n-     *\n-     * @since 0.9.7\n-     */\n-    public void setRollbackOnly(Throwable cause);\n-\n-    /** \n-     * Returns the Throwable that caused the transaction to be\n-     * marked for rollback. \n-     *  \n-     * @return the Throwable, or null if none was given\n-     *\n-     * @since 0.9.7\n-     */\n-    public Throwable getRollbackCause();\n-\n-    /**\n-     * Return whether the current transaction has been marked for rollback.\n-     */\n-    public boolean getRollbackOnly();\n+    public OpenJPAEntityTransaction getTransaction();\n \n     /**\n      * Set a transactional savepoint where operations after this savepoint"},{"sha":"4f01dc32b6c257bffc148fa81e5544e28b03bc57","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactory.java","status":"modified","additions":1,"deletions":46,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactory.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -23,10 +23,6 @@\n import java.util.Properties;\n import javax.persistence.EntityManagerFactory;\n \n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n-import org.apache.openjpa.kernel.ConnectionRetainModes;\n-import org.apache.openjpa.lib.util.Closeable;\n-\n /**\n  * Interface implemented by OpenJPA entity manager factories.\n  *\n@@ -35,13 +31,7 @@\n  * @published\n  */\n public interface OpenJPAEntityManagerFactory\n-    extends EntityManagerFactory, ConnectionRetainModes, Closeable,\n-    Serializable {\n-\n-    /**\n-     * Return the configuration for this factory.\n-     */\n-    public OpenJPAConfiguration getConfiguration();\n+    extends EntityManagerFactory, Serializable {\n \n     /**\n      * Return properties describing this runtime.\n@@ -88,39 +78,4 @@\n      * </ul>\n      */\n     public OpenJPAEntityManager createEntityManager(Map props);\n-\n-    /**\n-     * Register a listener for lifecycle-related events on the specified\n-     * classes. If the classes are null, all events will be propagated to\n-     * the listener. The listener will be passed on to all new entity\n-     * managers. See the <code>org.apache.openjpa.event</code> package for\n-     * listener types.\n-     *\n-     * @since 0.3.3\n-     */\n-    public void addLifecycleListener(Object listener, Class... classes);\n-\n-    /**\n-     * Remove a listener for lifecycle-related events.\n-     *\n-     * @since 0.3.3\n-     */\n-    public void removeLifecycleListener (Object listener);\n-\n-    /**\n-     * Register a listener for transaction-related events on the specified\n-     * classes. The listener will be passed on to all new entity\n-     * managers. See the <code>org.apache.openjpa.event</code> package for\n-     * listener types.\n-     *\n-     * @since 1.0.0\n-     */\n-    public void addTransactionListener(Object listener);\n-\n-    /**\n-     * Remove a listener for transaction-related events.\n-     *\n-     * @since 1.0.0\n-     */\n-    public void removeTransactionListener (Object listener);\n }"},{"sha":"38b7f288af138935523abf3c546a0d38b68ed83a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactorySPI.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactorySPI.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactorySPI.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactorySPI.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -0,0 +1,71 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence;\r\n+\r\n+import java.util.Map;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+\r\n+public interface OpenJPAEntityManagerFactorySPI\r\n+    extends OpenJPAEntityManagerFactory {\r\n+\r\n+    /**\r\n+     * Register a listener for lifecycle-related events on the specified\r\n+     * classes. If the classes are null, all events will be propagated to\r\n+     * the listener. The listener will be passed on to all new entity\r\n+     * managers. See the <code>org.apache.openjpa.event</code> package for\r\n+     * listener types.\r\n+     *\r\n+     * @since 0.3.3\r\n+     */\r\n+    public void addLifecycleListener(Object listener, Class... classes);\r\n+\r\n+    /**\r\n+     * Remove a listener for lifecycle-related events.\r\n+     *\r\n+     * @since 0.3.3\r\n+     */\r\n+    public void removeLifecycleListener (Object listener);\r\n+\r\n+    /**\r\n+     * Register a listener for transaction-related events on the specified\r\n+     * classes. The listener will be passed on to all new entity\r\n+     * managers. See the <code>org.apache.openjpa.event</code> package for\r\n+     * listener types.\r\n+     *\r\n+     * @since 1.0.0\r\n+     */\r\n+    public void addTransactionListener(Object listener);\r\n+\r\n+    /**\r\n+     * Remove a listener for transaction-related events.\r\n+     *\r\n+     * @since 1.0.0\r\n+     */\r\n+    public void removeTransactionListener (Object listener);\r\n+\r\n+    /**\r\n+     * Return the configuration for this factory.\r\n+     */\r\n+    public OpenJPAConfiguration getConfiguration();\r\n+\r\n+    public OpenJPAEntityManagerSPI createEntityManager();\r\n+\r\n+    public OpenJPAEntityManagerSPI createEntityManager(Map props);\r\n+}\r"},{"sha":"519ddca9767429a5fd351ad1462c6c2d5376dc6c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerSPI.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerSPI.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerSPI.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerSPI.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -0,0 +1,104 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence;\r\n+\r\n+import java.util.EnumSet;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.ee.ManagedRuntime;\r\n+\r\n+public interface OpenJPAEntityManagerSPI\r\n+    extends OpenJPAEntityManager {\r\n+\r\n+    /**\r\n+     * Return the configuration associated with this entity manager.\r\n+     */\r\n+    public OpenJPAConfiguration getConfiguration();\r\n+\r\n+    /**\r\n+     * Return the managed runtime in use.\r\n+     */\r\n+    public ManagedRuntime getManagedRuntime();\r\n+\r\n+    //////////\r\n+    // Events\r\n+    //////////\r\n+\r\n+    /**\r\n+     * Register a listener for transaction-related events.\r\n+     */\r\n+    public void addTransactionListener(Object listener);\r\n+\r\n+    /**\r\n+     * Remove a listener for transaction-related events.\r\n+     */\r\n+    public void removeTransactionListener(Object listener);\r\n+\r\n+    /**\r\n+     * The {@link CallbackType} flags for handling transaction listener\r\n+     * exceptions.\r\n+     */\r\n+    public EnumSet<CallbackType> getTransactionListenerCallbackMode();\r\n+\r\n+    /**\r\n+     * The {@link CallbackType} flag for handling transaction listener\r\n+     * exceptions.\r\n+     */\r\n+    // ##### check for overwrite behavior; javadoc\r\n+    public void setTransactionListenerCallbackMode(CallbackType type);\r\n+\r\n+    /**\r\n+     * The {@link CallbackType} flags for handling transaction listener\r\n+     * exceptions.\r\n+     */\r\n+    // ##### check for overwrite behavior; javadoc\r\n+    public void setTransactionListenerCallbackMode(EnumSet<CallbackType> types);\r\n+\r\n+    /**\r\n+     * Register a listener for lifecycle-related events on the specified\r\n+     * classes. If the classes are null, all events will be propagated to\r\n+     * the listener.\r\n+     */\r\n+    public void addLifecycleListener(Object listener, Class... classes);\r\n+\r\n+    /**\r\n+     * Remove a listener for lifecycle-related events.\r\n+     */\r\n+    public void removeLifecycleListener(Object listener);\r\n+\r\n+    /**\r\n+     * The {@link CallbackType} flags for handling lifecycle listener\r\n+     * exceptions.\r\n+     */\r\n+    public EnumSet<CallbackType> getLifecycleListenerCallbackMode();\r\n+\r\n+    /**\r\n+     * The {@link CallbackType} flag for handling lifecycle listener\r\n+     * exceptions.\r\n+     */\r\n+    // ##### check for overwrite behavior; javadoc\r\n+    public void setLifecycleListenerCallbackMode(CallbackType type);\r\n+\r\n+    /**\r\n+     * The {@link CallbackType} flags for handling lifecycle listener\r\n+     * exceptions.\r\n+     */\r\n+    // ##### check for overwrite behavior; javadoc\r\n+    public void setLifecycleListenerCallbackMode(EnumSet<CallbackType> types);\r\n+}\r"},{"sha":"87f905b0949d6e7d27fdb57ff3b364e03ea9c259","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityTransaction.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityTransaction.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityTransaction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityTransaction.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -0,0 +1,71 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence;\r\n+\r\n+import javax.persistence.EntityTransaction;\r\n+\r\n+/**\r\n+ * Extension of the JPA {@link EntityTransaction} interface.\r\n+ *\r\n+ * @since 1.0.0\r\n+ * @published\r\n+ */\r\n+public interface OpenJPAEntityTransaction\r\n+    extends EntityTransaction {\r\n+\r\n+    /**\r\n+     * Issue a commit and then start a new transaction. This is identical to:\r\n+     * <pre> manager.commit (); manager.begin ();\r\n+     * </pre> except that the entity manager's internal atomic lock is utilized,\r\n+     * so this method can be safely executed from multiple threads.\r\n+     *\r\n+     * @see javax.persistence.EntityTransaction#commit()\r\n+     * @see javax.persistence.EntityTransaction#begin()\r\n+     */\r\n+    public void commitAndResume();\r\n+\r\n+    /**\r\n+     * Issue a rollback and then start a new transaction. This is identical to:\r\n+     * <pre> manager.rollback (); manager.begin ();\r\n+     * </pre> except that the entity manager's internal atomic lock is utilized,\r\n+     * so this method can be safely executed from multiple threads.\r\n+     *\r\n+     * @see javax.persistence.EntityTransaction#rollback()\r\n+     * @see javax.persistence.EntityTransaction#begin()\r\n+     */\r\n+    public void rollbackAndResume();\r\n+\r\n+    /**\r\n+     * Mark the current transaction for rollback with the specified cause\r\n+     * of the rollback.\r\n+     *\r\n+     * @since 0.9.7\r\n+     */\r\n+    public void setRollbackOnly(Throwable cause);\r\n+\r\n+    /**\r\n+     * Returns the Throwable that caused the transaction to be\r\n+     * marked for rollback.\r\n+     *\r\n+     * @return the Throwable, or null if none was given\r\n+     *\r\n+     * @since 0.9.7\r\n+     */\r\n+    public Throwable getRollbackCause();\r\n+}\r"},{"sha":"c4c4167b1fec9864d8374540f5b357656ea3505b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java","status":"modified","additions":7,"deletions":286,"changes":293,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -18,147 +18,34 @@\n  */\n package org.apache.openjpa.persistence;\n \n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Iterator;\n import java.util.Map;\n import javax.naming.Context;\n import javax.naming.InitialContext;\n import javax.naming.NamingException;\n import javax.persistence.EntityManager;\n import javax.persistence.EntityManagerFactory;\n-import javax.persistence.Persistence;\n import javax.persistence.Query;\n import javax.rmi.PortableRemoteObject;\n \n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.kernel.Bootstrap;\n import org.apache.openjpa.kernel.Broker;\n-import org.apache.openjpa.kernel.BrokerFactory;\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.meta.ClassMetaData;\n-import org.apache.openjpa.util.ByteId;\n-import org.apache.openjpa.util.CharId;\n-import org.apache.openjpa.util.DoubleId;\n-import org.apache.openjpa.util.FloatId;\n-import org.apache.openjpa.util.Id;\n import org.apache.openjpa.util.ImplHelper;\n-import org.apache.openjpa.util.IntId;\n-import org.apache.openjpa.util.LongId;\n-import org.apache.openjpa.util.ObjectId;\n-import org.apache.openjpa.util.OpenJPAId;\n-import org.apache.openjpa.util.ShortId;\n-import org.apache.openjpa.util.StringId;\n \n /**\n- * Static helper method for JPA users, including switching\n- * between OpenJPA native and Java Persistence APIs.\n+ * Static helper methods for JPA users.\n  *\n  * @author Abe White\n  * @published\n  * @since 0.4.0\n  */\n-public class OpenJPAPersistence\n-    extends Persistence {\n-\n-    public static final String EM_KEY =\n-        \"org.apache.openjpa.persistence.EntityManager\";\n-    public static final String EMF_KEY =\n-        \"org.apache.openjpa.persistence.EntityManagerFactory\";\n+public class OpenJPAPersistence {\n \n     private static final Localizer _loc =\n         Localizer.forPackage(OpenJPAPersistence.class);\n \n-    \n-    public static OpenJPAEntityManagerFactory toEntityManagerFactory\n-       (BrokerFactory factory) {\n-        if (factory == null)\n-            return null;\n-\n-        factory.lock();\n-        try {\n-            OpenJPAEntityManagerFactory emf = (OpenJPAEntityManagerFactory)\n-                factory.getUserObject(EMF_KEY);\n-            if (emf == null) {\n-                emf = EntityManagerFactoryValue.newFactory(factory);\n-                factory.putUserObject(EMF_KEY, emf);\n-            }\n-            return emf;\n-        } catch (Exception e) {\n-            throw PersistenceExceptions.toPersistenceException(e);\n-        } finally {\n-            factory.unlock();\n-        }\n-    }\n-    \n-    /**\n-     * Return the underlying broker factory for the given persistence manager\n-     * factory facade.\n-     */\n-    public static BrokerFactory toBrokerFactory(EntityManagerFactory emf) {\n-        if (emf == null)\n-            return null;\n-        if (!(emf instanceof EntityManagerFactoryImpl)) {\n-            Class c = emf.getClass();\n-            try {\n-                // either cast here may fail\n-                emf = (EntityManagerFactoryImpl) ((OpenJPAEntityManagerFactory)\n-                    emf).getUserObject(EMF_KEY);\n-            } catch (ClassCastException cce) {\n-                throw new ArgumentException(_loc.get\n-                    (\"cant-convert-brokerfactory\", c), null, null, false);\n-            }\n-        }\n-        return ((EntityManagerFactoryImpl) emf).getBrokerFactory();\n-    }\n-\n-    /**\n-     * Return a persistence manager facade to the given broker retaining\n-     * previously associated persistence context type.\n-     */\n-    public static OpenJPAEntityManager toEntityManager(Broker broker) {\n-        if (broker == null)\n-            return null;\n-\n-        broker.lock();\n-        try {\n-            OpenJPAEntityManager em = (OpenJPAEntityManager)\n-                broker.getUserObject(EM_KEY);\n-            if (em == null) {\n-                EntityManagerFactoryImpl emf = (EntityManagerFactoryImpl)\n-                    toEntityManagerFactory(broker.getBrokerFactory());\n-                em = emf.newEntityManagerImpl(broker);\n-                broker.putUserObject(EM_KEY, em);\n-            }\n-            return em;\n-        } catch (Exception e) {\n-            throw PersistenceExceptions.toPersistenceException(e);\n-        } finally {\n-            broker.unlock();\n-        }\n-    }\n-\n-    /**\n-     * Return the underlying broker for the given entity manager facade.\n-     */\n-    public static Broker toBroker(EntityManager em) {\n-        if (em == null)\n-            return null;\n-        if (!(em instanceof EntityManagerImpl)) {\n-            Class c = em.getClass();\n-            try {\n-                // either cast here may fail\n-                em = (EntityManagerImpl) ((OpenJPAEntityManager) em).\n-                    getUserObject(EM_KEY);\n-            } catch (ClassCastException cce) {\n-                throw new ArgumentException(_loc.get(\"cant-convert-broker\", c),\n-                    null, null, false);\n-            }\n-        }\n-        return ((EntityManagerImpl) em).getBroker();\n-    }\n-\n     /**\n      * Return the OpenJPA facade to the given entity manager factory.\n      */\n@@ -201,7 +88,8 @@ public static OpenJPAEntityManagerFactory getEntityManagerFactory(Map map) {\n         ConfigurationProvider cp = new PersistenceProductDerivation.\n             ConfigurationProviderImpl(map);\n         try {\n-            return toEntityManagerFactory(Bootstrap.getBrokerFactory(cp, null));\n+            return JPAFacadeHelper.toEntityManagerFactory(\n+                Bootstrap.getBrokerFactory(cp, null));\n         } catch (Exception e) {\n             throw PersistenceExceptions.toPersistenceException(e);\n         }\n@@ -276,61 +164,15 @@ public static OpenJPAEntityManager getEntityManager(Object o) {\n             if (ImplHelper.isManageable(o)) {\n                 PersistenceCapable pc = ImplHelper.toPersistenceCapable(o, null);\n                 if (pc != null)\n-                    return toEntityManager((Broker) pc.pcGetGenericContext());\n+                    return JPAFacadeHelper.toEntityManager(\n+                        (Broker) pc.pcGetGenericContext());\n             }\n             return null;\n         } catch (Exception e) {\n             throw PersistenceExceptions.toPersistenceException(e);\n         }\n     }\n \n-    /**\n-     * Returns the {@link ClassMetaData} associated with the\n-     * persistent object <code>o</code>.\n-     */\n-    public static ClassMetaData getMetaData(Object o) {\n-        if (o == null)\n-            return null;\n-        EntityManager em = getEntityManager(o);\n-        return (em == null) ? null : getMetaData(em,\n-            ImplHelper.getManagedInstance(o).getClass());\n-    }\n-\n-    /**\n-     * Returns the {@link ClassMetaData} associated with the\n-     * persistent type <code>cls</code>.\n-     */\n-    public static ClassMetaData getMetaData(EntityManager em, Class cls) {\n-        if (em == null)\n-            throw new NullPointerException(\"em == null\");\n-\n-        OpenJPAEntityManager kem = cast(em);\n-        try {\n-            return kem.getConfiguration().getMetaDataRepositoryInstance().\n-                getMetaData(cls, kem.getClassLoader(), false);\n-        } catch (Exception e) {\n-            throw PersistenceExceptions.toPersistenceException(e);\n-        }\n-    }\n-\n-    /**\n-     * Returns the {@link ClassMetaData} associated with the\n-     * persistent type <code>cls</code>.\n-     */\n-    public static ClassMetaData getMetaData(EntityManagerFactory emf,\n-        Class cls) {\n-        if (emf == null)\n-            throw new NullPointerException(\"emf == null\");\n-\n-        OpenJPAEntityManagerFactory kemf = cast(emf);\n-        try {\n-            return kemf.getConfiguration().getMetaDataRepositoryInstance().\n-                getMetaData(cls, null, false);\n-        } catch (Exception e) {\n-            throw PersistenceExceptions.toPersistenceException(e);\n-        }\n-    }\n-\n     /**\n      * Close the given resource. The resource can be an extent iterator,\n      * query result, large result set relation, or any closeable OpenJPA\n@@ -347,132 +189,11 @@ public static void close(Object o) {\n     /**\n      * Returns true if the specified class is an entity or embeddable type.\n      */\n-    public static boolean isManagedType(EntityManager em, Class cls) {\n-        try {\n-            return ImplHelper.isManagedType(cls);\n-        } catch (Exception e) {\n-            throw PersistenceExceptions.toPersistenceException(e);\n-        }\n-    }\n-\n-    /**\n-     * Returns true if the specified class is an entity or embeddable type.\n-     */\n-    public static boolean isManagedType(EntityManagerFactory emf, Class cls) {\n+    public static boolean isManagedType(Class cls) {\n         try {\n             return ImplHelper.isManagedType(cls);\n         } catch (Exception e) {\n             throw PersistenceExceptions.toPersistenceException(e);\n         }\n     }\n-\n-    /**\n-     * Translate from a OpenJPA identity object to a Persistence one.\n-     */\n-    public static Object fromOpenJPAObjectId(Object oid) {\n-        if (oid instanceof OpenJPAId)\n-            return ((OpenJPAId) oid).getIdObject();\n-        return oid;\n-    }\n-\n-    /**\n-     * Translate from a Persistence identity object to a OpenJPA one.\n-     */\n-    public static Object toOpenJPAObjectId(ClassMetaData meta, Object oid) {\n-        if (oid == null || meta == null)\n-            return null;\n-\n-        Class cls = meta.getDescribedType();\n-        if (meta.getIdentityType() == ClassMetaData.ID_DATASTORE)\n-            return new Id(cls, ((Number) oid).longValue());\n-\n-        if (oid instanceof Byte)\n-            return new ByteId(cls, (Byte) oid);\n-        if (oid instanceof Character)\n-            return new CharId(cls, (Character) oid);\n-        if (oid instanceof Double)\n-            return new DoubleId(cls, (Double) oid);\n-        if (oid instanceof Float)\n-            return new FloatId(cls, (Float) oid);\n-        if (oid instanceof Integer)\n-            return new IntId(cls, (Integer) oid);\n-        if (oid instanceof Long)\n-            return new LongId(cls, (Long) oid);\n-        if (oid instanceof Short)\n-            return new ShortId(cls, (Short) oid);\n-        if (oid instanceof String)\n-            return new StringId(cls, (String) oid);\n-        return new ObjectId(cls, oid);\n-    }\n-\n-    /**\n-     * Return an array of OpenJPA oids for the given native oid array.\n-     */\n-    public static Object[] toOpenJPAObjectIds(ClassMetaData meta,\n-        Object... oids) {\n-        if (oids == null || oids.length == 0)\n-            return oids;\n-\n-        // since the class if fixed for all oids, we can tell if we have to\n-        // translate the array based on whether the first oid needs translating\n-        Object oid = toOpenJPAObjectId(meta, oids[0]);\n-        if (oid == oids[0])\n-            return oids;\n-\n-        Object[] copy = new Object[oids.length];\n-        copy[0] = oid;\n-        for (int i = 1; i < oids.length; i++)\n-            copy[i] = toOpenJPAObjectId(meta, oids[i]);\n-        return copy;\n-    }\n-\n-    /**\n-     * Return a collection of OpenJPA oids for the given native oid collection.\n-     */\n-    public static Collection toOpenJPAObjectIds(ClassMetaData meta,\n-        Collection oids) {\n-        if (oids == null || oids.isEmpty())\n-            return oids;\n-\n-        // since the class if fixed for all oids, we can tell if we have to\n-        // translate the array based on whether the first oid needs translating\n-        Iterator itr = oids.iterator();\n-        Object orig = itr.next();\n-        Object oid = toOpenJPAObjectId(meta, orig);\n-        if (oid == orig)\n-            return oids;\n-\n-        Collection copy = new ArrayList(oids.size());\n-        copy.add(oid);\n-        while (itr.hasNext())\n-            copy.add(toOpenJPAObjectId(meta, itr.next()));\n-        return copy;\n-    }\n-\n-    /**\n-     * Translate from a OpenJPA identity class to a native one.\n-     */\n-    public static Class fromOpenJPAObjectIdClass(Class oidClass) {\n-        if (oidClass == null)\n-            return null;\n-        if (oidClass == Id.class)\n-            return Long.class;\n-        if (oidClass == ByteId.class)\n-            return Byte.class;\n-        if (oidClass == CharId.class)\n-            return Character.class;\n-        if (oidClass == DoubleId.class)\n-            return Double.class;\n-        if (oidClass == FloatId.class)\n-            return Float.class;\n-        if (oidClass == IntId.class)\n-            return Integer.class;\n-        if (oidClass == LongId.class)\n-            return Long.class;\n-        if (oidClass == ShortId.class)\n-            return Short.class;\n-        if (oidClass == StringId.class)\n-\t\t\treturn String.class;\n-\t\treturn oidClass;\n-\t}\n }"},{"sha":"9c4f4abfc4fe6d417f6d2f3976901d24016b85c6","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuery.java","status":"modified","additions":3,"deletions":27,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuery.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuery.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -26,11 +26,7 @@\n import javax.persistence.Query;\n import javax.persistence.TemporalType;\n \n-import org.apache.openjpa.kernel.QueryFlushModes;\n import org.apache.openjpa.kernel.QueryHints;\n-import org.apache.openjpa.kernel.QueryOperations;\n-import org.apache.openjpa.kernel.exps.AggregateListener;\n-import org.apache.openjpa.kernel.exps.FilterListener;\n \n /**\n  * Interface implemented by OpenJPA queries.\n@@ -40,10 +36,10 @@\n  * @published\n  */\n public interface OpenJPAQuery\n-    extends Query, QueryOperations, QueryFlushModes, QueryHints {\n+    extends Query, QueryHints {\n \n     /**\n-     * The owning entity manage.\n+     * The owning entity manager.\n      */\n     public OpenJPAEntityManager getEntityManager();\n \n@@ -55,7 +51,7 @@\n     /**\n      * Query operation type.\n      */\n-    public int getOperation();\n+    public QueryOperationType getOperation();\n \n     /**\n      * Fetch plan for controlling the loading of results.\n@@ -77,26 +73,6 @@\n      */\n     public OpenJPAQuery setIgnoreChanges(boolean ignore);\n \n-    /**\n-     * Register a filter listener for the query.\n-     */\n-    public OpenJPAQuery addFilterListener(FilterListener listener);\n-\n-    /**\n-     * Remove a filter listener from the query.\n-     */\n-    public OpenJPAQuery removeFilterListener(FilterListener listener);\n-\n-    /**\n-     * Register an aggregate listener for the query.\n-     */\n-    public OpenJPAQuery addAggregateListener(AggregateListener listener);\n-\n-    /**\n-     * Remove an aggregate listener from the query.\n-     */\n-    public OpenJPAQuery removeAggregateListener(AggregateListener listener);\n-\n     /**\n      * Return the candidate collection, or <code>null</code> if an\n      * extent was specified instead of a collection."},{"sha":"997259def9ce821e69d0ffaa1e69048b537d85c9","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuerySPI.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuerySPI.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuerySPI.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuerySPI.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -0,0 +1,46 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence;\r\n+\r\n+import org.apache.openjpa.kernel.exps.FilterListener;\r\n+import org.apache.openjpa.kernel.exps.AggregateListener;\r\n+\r\n+public interface OpenJPAQuerySPI\r\n+    extends OpenJPAQuery {\r\n+\r\n+    /**\r\n+     * Register a filter listener for the query.\r\n+     */\r\n+    public OpenJPAQuery addFilterListener(FilterListener listener);\r\n+\r\n+    /**\r\n+     * Remove a filter listener from the query.\r\n+     */\r\n+    public OpenJPAQuery removeFilterListener(FilterListener listener);\r\n+\r\n+    /**\r\n+     * Register an aggregate listener for the query.\r\n+     */\r\n+    public OpenJPAQuery addAggregateListener(AggregateListener listener);\r\n+\r\n+    /**\r\n+     * Remove an aggregate listener from the query.\r\n+     */\r\n+    public OpenJPAQuery removeAggregateListener(AggregateListener listener);\r\n+}\r"},{"sha":"9f895fc838d680930a94cef64514a07eeea3266d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -63,8 +63,8 @@ public RuntimeException translate(RuntimeException re) {\n                     && !throwing) {\n                     try {\n                         throwing = true;\n-                        if (em.isOpen() && em.isActive())\n-                            em.setRollbackOnly(re);\n+                        if (em.isOpen() && ((EntityManagerImpl) em).isActive())\n+                            ((EntityManagerImpl) em).setRollbackOnly(re);\n                     } finally {\n                         // handle re-entrancy\n                         throwing = false;\n@@ -243,8 +243,8 @@ private static Object getFailedObject(OpenJPAException ke) {\n         if (o == null)\n             return null;\n         if (o instanceof Broker)\n-            return OpenJPAPersistence.toEntityManager((Broker) o);\n-        return OpenJPAPersistence.fromOpenJPAObjectId(o);\n+            return JPAFacadeHelper.toEntityManager((Broker) o);\n+        return JPAFacadeHelper.fromOpenJPAObjectId(o);\n     }\n \n     /**"},{"sha":"277d7cf6d5e1b8d9c950937de1070ceae37fa402","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -24,7 +24,6 @@\n import java.util.Map;\n import javax.persistence.EntityManager;\n import javax.persistence.EntityManagerFactory;\n-import javax.persistence.Persistence;\n import javax.persistence.spi.ClassTransformer;\n import javax.persistence.spi.PersistenceProvider;\n import javax.persistence.spi.PersistenceUnitInfo;\n@@ -47,7 +46,8 @@\n  * Bootstrapping class that allows the creation of a stand-alone\n  * {@link EntityManager}.\n  *\n- * @see Persistence#createEntityManagerFactory(String,Map)\n+ * @see javax.persistence.Persistence#createEntityManagerFactory(String,Map)\n+ * @published\n  */\n public class PersistenceProviderImpl\n     implements PersistenceProvider {\n@@ -76,7 +76,7 @@ public EntityManagerFactory createEntityManagerFactory(String name,\n                 return null;\n \n             BrokerFactory factory = Bootstrap.newBrokerFactory(cp, null);\n-            return OpenJPAPersistence.toEntityManagerFactory(factory);\n+            return JPAFacadeHelper.toEntityManagerFactory(factory);\n         } catch (Exception e) {\n             throw PersistenceExceptions.toPersistenceException(e);\n         }\n@@ -122,7 +122,7 @@ public EntityManagerFactory createContainerEntityManagerFactory(\n                     OpenJPAConfiguration.LOG_RUNTIME).warn(\n                         _loc.get(\"transformer-registration-error\", pui),\n                         transformerException);\n-            return OpenJPAPersistence.toEntityManagerFactory(factory);\n+            return JPAFacadeHelper.toEntityManagerFactory(factory);\n         } catch (Exception e) {\n             throw PersistenceExceptions.toPersistenceException(e);\n         }"},{"sha":"c75264be87a6f15dd8262b9bdc6a28f1acdd5acf","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Persistent.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Persistent.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Persistent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Persistent.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -31,6 +31,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"568f68887ba4b3ee2f52ce1d444466b66f11df2c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistentCollection.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistentCollection.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistentCollection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistentCollection.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -33,6 +33,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"fcd266d6264c35045d3cbc8cc67cd30245bb95ed","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistentMap.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistentMap.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistentMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistentMap.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -31,6 +31,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"6e7c3c1736d6c87a7ad74213a9fa2e9ac778eec8","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":12,"deletions":11,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -38,6 +38,7 @@\n import org.apache.openjpa.kernel.DelegatingQuery;\n import org.apache.openjpa.kernel.DelegatingResultList;\n import org.apache.openjpa.kernel.Filters;\n+import org.apache.openjpa.kernel.QueryOperations;\n import org.apache.openjpa.kernel.exps.AggregateListener;\n import org.apache.openjpa.kernel.exps.FilterListener;\n import org.apache.openjpa.lib.rop.ResultList;\n@@ -52,7 +53,7 @@\n  * @nojavadoc\n  */\n public class QueryImpl\n-    implements OpenJPAQuery, Serializable {\n+    implements OpenJPAQuerySPI, Serializable {\n \n     private static final Object[] EMPTY_ARRAY = new Object[0];\n \n@@ -91,8 +92,8 @@ public String getLanguage() {\n         return _query.getLanguage();\n     }\n \n-    public int getOperation() {\n-        return _query.getOperation();\n+    public QueryOperationType getOperation() {\n+        return QueryOperationType.fromKernelConstant(_query.getOperation());\n     }\n \n     public FetchPlan getFetchPlan() {\n@@ -167,7 +168,7 @@ public Class getResultClass() {\n \n     public OpenJPAQuery setResultClass(Class cls) {\n         _em.assertNotCloseInvoked();\n-        if (OpenJPAPersistence.isManagedType(_em, cls))\n+        if (OpenJPAPersistence.isManagedType(cls))\n             _query.setCandidateType(cls, true);\n         else\n             _query.setResultType(cls);\n@@ -222,7 +223,7 @@ public OpenJPAQuery compile() {\n     }\n \n     private Object execute() {\n-        if (_query.getOperation() != OP_SELECT)\n+        if (_query.getOperation() != QueryOperations.OP_SELECT)\n             throw new InvalidStateException(_loc.get(\"not-select-query\",\n                 _query.getQueryString()), null, null, false);\n \n@@ -303,15 +304,15 @@ public Object getSingleResult() {\n \n     public int executeUpdate() {\n         _em.assertNotCloseInvoked();\n-        if (_query.getOperation() == OP_DELETE) {\n+        if (_query.getOperation() == QueryOperations.OP_DELETE) {\n             // handle which types of parameters we are using, if any\n             if (_positional != null)\n                 return asInt(_query.deleteAll(_positional.toArray()));\n             if (_named != null)\n                 return asInt(_query.deleteAll(_named));\n             return asInt(_query.deleteAll());\n         }\n-        if (_query.getOperation() == OP_UPDATE) {\n+        if (_query.getOperation() == QueryOperations.OP_UPDATE) {\n             // handle which types of parameters we are using, if any\n             if (_positional != null)\n                 return asInt(_query.updateAll(_positional.toArray()));\n@@ -415,12 +416,12 @@ private void hintToSetter(FetchPlan fetchPlan, String k, Object value) {\n \n     public OpenJPAQuery setParameter(int position, Calendar value,\n         TemporalType t) {\n-        return setParameter(position, (Object) value);\n+        return setParameter(position, value);\n     }\n \n     public OpenJPAQuery setParameter(int position, Date value,\n         TemporalType type) {\n-        return setParameter(position, (Object) value);\n+        return setParameter(position, value);\n     }\n \n     public OpenJPAQuery setParameter(int position, Object value) {\n@@ -456,12 +457,12 @@ public OpenJPAQuery setParameter(int position, Object value) {\n \n     public OpenJPAQuery setParameter(String name, Calendar value,\n         TemporalType t) {\n-        return setParameter(name, (Object) value);\n+        return setParameter(name, value);\n     }\n \n     public OpenJPAQuery setParameter(String name, Date value,\n         TemporalType type) {\n-        return setParameter(name, (Object) value);\n+        return setParameter(name, value);\n     }\n \n     public OpenJPAQuery setParameter(String name, Object value) {"},{"sha":"5ff4163ca857cb49fa089ac7e1d5ef74badd9252","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryOperationType.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryOperationType.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryOperationType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryOperationType.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -0,0 +1,59 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence;\r\n+\r\n+import org.apache.openjpa.kernel.QueryOperations;\r\n+\r\n+/**\r\n+ * The possible operations that a query can perform.\r\n+ *\r\n+ * @since 1.0.0\r\n+ * @published\r\n+ */\r\n+public enum QueryOperationType {\r\n+    SELECT(QueryOperations.OP_SELECT),\r\n+    DELETE(QueryOperations.OP_DELETE),\r\n+    UPDATE(QueryOperations.OP_UPDATE);\r\n+\r\n+    private final int queryOperationConstant;\r\n+\r\n+    private QueryOperationType(int value) {\r\n+        queryOperationConstant = value;\r\n+    }\r\n+\r\n+    int toKernelConstant() {\r\n+        return queryOperationConstant;\r\n+    }\r\n+\r\n+    static QueryOperationType fromKernelConstant(int kernelConstant) {\r\n+        switch (kernelConstant) {\r\n+            case QueryOperations.OP_SELECT:\r\n+                return SELECT;\r\n+\r\n+            case QueryOperations.OP_UPDATE:\r\n+                return UPDATE;\r\n+\r\n+            case QueryOperations.OP_DELETE:\r\n+                return DELETE;\r\n+\r\n+            default:\r\n+                throw new IllegalArgumentException(kernelConstant + \"\");\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"2cb172dadc305a601f800bdb73a7a80cb0b4909d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryResultCache.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryResultCache.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryResultCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryResultCache.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -31,11 +31,6 @@\n  */\n public interface QueryResultCache {\n \n-    /**\n-     * Delegate.\n-     */\n-    public QueryCache getDelegate();\n-\n     /**\n      * Pin the given query's result to the cache.\n      */"},{"sha":"11fa908c2aa4b32acf1ad57151a695ec1f88441e","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryResultCacheImpl.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryResultCacheImpl.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryResultCacheImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryResultCacheImpl.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -46,6 +46,9 @@ public QueryResultCacheImpl(QueryCache cache) {\n             PersistenceExceptions.TRANSLATOR);\n     }\n \n+    /**\n+     * Delegate.\n+     */\n     public QueryCache getDelegate() {\n         return _cache.getDelegate();\n     }"},{"sha":"873b5889ac405c5726d56dac1a736110ac181fff","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ReadOnly.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ReadOnly.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ReadOnly.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ReadOnly.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -29,6 +29,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"12c0dd51853469598406ac0742184b6726d588c2","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/RestoreStateType.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/RestoreStateType.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/RestoreStateType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/RestoreStateType.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -0,0 +1,60 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence;\r\n+\r\n+import org.apache.openjpa.kernel.RestoreState;\r\n+\r\n+/**\r\n+ * The possible settings for the restore behavior after transaction rollback\r\n+ * of an {@link OpenJPAEntityManager}.\r\n+ *\r\n+ * @since 1.0.0\r\n+ * @published\r\n+ */\r\n+public enum RestoreStateType {\r\n+    NONE(RestoreState.RESTORE_NONE),\r\n+    IMMUTABLE(RestoreState.RESTORE_IMMUTABLE),\r\n+    ALL(RestoreState.RESTORE_ALL);\r\n+\r\n+    private final int restoreStateConstant;\r\n+\r\n+    private RestoreStateType(int value) {\r\n+        restoreStateConstant = value;\r\n+    }\r\n+\r\n+    int toKernelConstant() {\r\n+        return restoreStateConstant;\r\n+    }\r\n+\r\n+    static RestoreStateType fromKernelConstant(int kernelConstant) {\r\n+        switch (kernelConstant) {\r\n+            case RestoreState.RESTORE_NONE:\r\n+                return NONE;\r\n+\r\n+            case RestoreState.RESTORE_IMMUTABLE:\r\n+                return IMMUTABLE;\r\n+\r\n+            case RestoreState.RESTORE_ALL:\r\n+                return ALL;\r\n+\r\n+            default:\r\n+                throw new IllegalArgumentException(kernelConstant + \"\");\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"5692350bdbf58c59c0ca56f6dafdc82294210048","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCache.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCache.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCache.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -33,11 +33,6 @@\n \n     public static final String NAME_DEFAULT = DataCache.NAME_DEFAULT;\n \n-    /**\n-     * Delegate.\n-     */\n-    public DataCache getDelegate();\n-\n     /**\n      * Whether the cache contains data for the given oid.\n      */"},{"sha":"31b0f45f49d8aa28c953d6642ed7fc41a6aa3d4a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCacheImpl.java","status":"modified","additions":11,"deletions":8,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCacheImpl.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCacheImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCacheImpl.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -50,13 +50,16 @@ public StoreCacheImpl(EntityManagerFactoryImpl emf, DataCache cache) {\n             PersistenceExceptions.TRANSLATOR);\n     }\n \n+    /**\n+     * Delegate.\n+     */\n     public DataCache getDelegate() {\n         return _cache.getDelegate();\n     }\n \n     public boolean contains(Class cls, Object oid) {\n         return _cache.getDelegate() != null && _cache.contains\n-            (OpenJPAPersistence.toOpenJPAObjectId(getMetaData(cls), oid));\n+            (JPAFacadeHelper.toOpenJPAObjectId(getMetaData(cls), oid));\n     }\n \n     public boolean containsAll(Class cls, Object... oids) {\n@@ -67,7 +70,7 @@ public boolean containsAll(Class cls, Collection oids) {\n         if (_cache.getDelegate() == null)\n             return oids.isEmpty();\n \n-        BitSet set = _cache.containsAll(OpenJPAPersistence.toOpenJPAObjectIds\n+        BitSet set = _cache.containsAll(JPAFacadeHelper.toOpenJPAObjectIds\n             (getMetaData(cls), oids));\n         for (int i = 0; i < oids.size(); i++)\n             if (!set.get(i))\n@@ -77,7 +80,7 @@ public boolean containsAll(Class cls, Collection oids) {\n \n     public void pin(Class cls, Object oid) {\n         if (_cache.getDelegate() != null)\n-            _cache.pin(OpenJPAPersistence.toOpenJPAObjectId(getMetaData(cls), \n+            _cache.pin(JPAFacadeHelper.toOpenJPAObjectId(getMetaData(cls),\n                 oid));\n     }\n \n@@ -87,13 +90,13 @@ public void pinAll(Class cls, Object... oids) {\n \n     public void pinAll(Class cls, Collection oids) {\n         if (_cache.getDelegate() != null)\n-            _cache.pinAll(OpenJPAPersistence.toOpenJPAObjectIds\n+            _cache.pinAll(JPAFacadeHelper.toOpenJPAObjectIds\n                 (getMetaData(cls), oids));\n     }\n \n     public void unpin(Class cls, Object oid) {\n         if (_cache.getDelegate() != null)\n-            _cache.unpin(OpenJPAPersistence.toOpenJPAObjectId(getMetaData(cls),\n+            _cache.unpin(JPAFacadeHelper.toOpenJPAObjectId(getMetaData(cls),\n                 oid));\n     }\n \n@@ -103,13 +106,13 @@ public void unpinAll(Class cls, Object... oids) {\n \n     public void unpinAll(Class cls, Collection oids) {\n         if (_cache.getDelegate() != null)\n-            _cache.unpinAll(OpenJPAPersistence.toOpenJPAObjectIds\n+            _cache.unpinAll(JPAFacadeHelper.toOpenJPAObjectIds\n                 (getMetaData(cls), oids));\n     }\n \n     public void evict(Class cls, Object oid) {\n         if (_cache.getDelegate() != null)\n-            _cache.remove(OpenJPAPersistence.toOpenJPAObjectId(getMetaData(cls),\n+            _cache.remove(JPAFacadeHelper.toOpenJPAObjectId(getMetaData(cls),\n                 oid));\n     }\n \n@@ -119,7 +122,7 @@ public void evictAll(Class cls, Object... oids) {\n \n     public void evictAll(Class cls, Collection oids) {\n         if (_cache.getDelegate() != null)\n-            _cache.removeAll(OpenJPAPersistence.toOpenJPAObjectIds\n+            _cache.removeAll(JPAFacadeHelper.toOpenJPAObjectIds\n                 (getMetaData(cls), oids));\n     }\n "},{"sha":"7307cdba25376ba3e1e8544f5190fa46a6a34d82","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Type.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Type.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Type.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Type.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -30,6 +30,7 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n @Target({ METHOD, FIELD })\n @Retention(RUNTIME)"},{"sha":"4638c6ebc2b249cbf21826f99b51268ab6d96c0c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/UpdateAction.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/UpdateAction.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/UpdateAction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/UpdateAction.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -23,8 +23,9 @@\n  *\n  * @author Abe White\n  * @since 0.4.0\n+ * @published\n  */\n public enum UpdateAction {\n-\n     IGNORE,\n-    RESTRICT };\n+    RESTRICT\n+}"},{"sha":"9e42c5de4961b30ed03dea88e3871fa225bc1e65","filename":"openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestEnumToKernelConstantMappings.java","status":"added","additions":270,"deletions":0,"changes":270,"blob_url":"https://github.com/apache/openjpa/blob/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestEnumToKernelConstantMappings.java","raw_url":"https://github.com/apache/openjpa/raw/778ab2a393ad53356f5b24f059f45f56e48e4dd4/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestEnumToKernelConstantMappings.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestEnumToKernelConstantMappings.java?ref=778ab2a393ad53356f5b24f059f45f56e48e4dd4","patch":"@@ -0,0 +1,270 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence;\r\n+\r\n+import java.util.EnumSet;\r\n+\r\n+import junit.framework.TestCase;\r\n+import org.apache.openjpa.kernel.ConnectionRetainModes;\r\n+import org.apache.openjpa.kernel.DetachState;\r\n+import org.apache.openjpa.kernel.RestoreState;\r\n+import org.apache.openjpa.kernel.AutoClear;\r\n+import org.apache.openjpa.kernel.AutoDetach;\r\n+import org.apache.openjpa.kernel.QueryOperations;\r\n+import org.apache.openjpa.event.CallbackModes;\r\n+\r\n+public class TestEnumToKernelConstantMappings\r\n+    extends TestCase {\r\n+\r\n+    public void testConnectionRetainModes() {\r\n+        assertEquals(ConnectionRetainModes.CONN_RETAIN_ALWAYS,\r\n+            ConnectionRetainType.ALWAYS.toKernelConstant());\r\n+        assertEquals(ConnectionRetainType.ALWAYS,\r\n+            ConnectionRetainType.fromKernelConstant(\r\n+                ConnectionRetainModes.CONN_RETAIN_ALWAYS));\r\n+        assertEquals(ConnectionRetainType.ALWAYS.toKernelConstant(),\r\n+            ConnectionRetainType.ALWAYS.ordinal());\r\n+\r\n+        assertEquals(ConnectionRetainModes.CONN_RETAIN_DEMAND,\r\n+            ConnectionRetainType.ON_DEMAND.toKernelConstant());\r\n+        assertEquals(ConnectionRetainType.ON_DEMAND,\r\n+            ConnectionRetainType.fromKernelConstant(\r\n+                ConnectionRetainModes.CONN_RETAIN_DEMAND));\r\n+        assertEquals(ConnectionRetainType.ON_DEMAND.toKernelConstant(),\r\n+            ConnectionRetainType.ON_DEMAND.ordinal());\r\n+\r\n+        assertEquals(ConnectionRetainModes.CONN_RETAIN_TRANS,\r\n+            ConnectionRetainType.TRANSACTION.toKernelConstant());\r\n+        assertEquals(ConnectionRetainType.TRANSACTION,\r\n+            ConnectionRetainType.fromKernelConstant(\r\n+                ConnectionRetainModes.CONN_RETAIN_TRANS));\r\n+        assertEquals(ConnectionRetainType.TRANSACTION.toKernelConstant(),\r\n+            ConnectionRetainType.TRANSACTION.ordinal());\r\n+\r\n+        assertEquals(getConstantCount(ConnectionRetainModes.class),\r\n+            ConnectionRetainType.values().length);\r\n+    }\r\n+\r\n+    public void testDetachState() {\r\n+        assertEquals(DetachState.DETACH_ALL,\r\n+            DetachStateType.ALL.toKernelConstant());\r\n+        assertEquals(DetachStateType.ALL,\r\n+            DetachStateType.fromKernelConstant(DetachState.DETACH_ALL));\r\n+        assertEquals(DetachStateType.ALL.toKernelConstant(),\r\n+            DetachStateType.ALL.ordinal());\r\n+\r\n+        assertEquals(DetachState.DETACH_FETCH_GROUPS,\r\n+            DetachStateType.FETCH_GROUPS.toKernelConstant());\r\n+        assertEquals(DetachStateType.FETCH_GROUPS,\r\n+            DetachStateType.fromKernelConstant(\r\n+                DetachState.DETACH_FETCH_GROUPS));\r\n+        assertEquals(DetachStateType.FETCH_GROUPS.toKernelConstant(),\r\n+            DetachStateType.FETCH_GROUPS.ordinal());\r\n+\r\n+        assertEquals(DetachState.DETACH_LOADED,\r\n+            DetachStateType.LOADED.toKernelConstant());\r\n+        assertEquals(DetachStateType.LOADED,\r\n+            DetachStateType.fromKernelConstant(DetachState.DETACH_LOADED));\r\n+        assertEquals(DetachStateType.LOADED.toKernelConstant(),\r\n+            DetachStateType.LOADED.ordinal());\r\n+\r\n+        // subtract 1 for DetachState.DETACH_FGS, which is deprecated\r\n+        assertEquals(getConstantCount(DetachState.class) - 1,\r\n+            DetachStateType.values().length);\r\n+    }\r\n+\r\n+    public void testRestoreState() {\r\n+        assertEquals(RestoreState.RESTORE_ALL,\r\n+            RestoreStateType.ALL.toKernelConstant());\r\n+        assertEquals(RestoreStateType.ALL,\r\n+            RestoreStateType.fromKernelConstant(RestoreState.RESTORE_ALL));\r\n+        assertEquals(RestoreStateType.ALL.toKernelConstant(),\r\n+            RestoreStateType.ALL.ordinal());\r\n+\r\n+        assertEquals(RestoreState.RESTORE_IMMUTABLE,\r\n+            RestoreStateType.IMMUTABLE.toKernelConstant());\r\n+        assertEquals(RestoreStateType.IMMUTABLE,\r\n+            RestoreStateType.fromKernelConstant(\r\n+                RestoreState.RESTORE_IMMUTABLE));\r\n+        assertEquals(RestoreStateType.IMMUTABLE.toKernelConstant(),\r\n+            RestoreStateType.IMMUTABLE.ordinal());\r\n+\r\n+        assertEquals(RestoreState.RESTORE_NONE,\r\n+            RestoreStateType.NONE.toKernelConstant());\r\n+        assertEquals(RestoreStateType.NONE,\r\n+            RestoreStateType.fromKernelConstant(RestoreState.RESTORE_NONE));\r\n+        assertEquals(RestoreStateType.NONE.toKernelConstant(),\r\n+            RestoreStateType.NONE.ordinal());\r\n+\r\n+        assertEquals(getConstantCount(RestoreState.class),\r\n+            RestoreStateType.values().length);\r\n+    }\r\n+\r\n+    public void testAutoClear() {\r\n+        assertEquals(AutoClear.CLEAR_ALL, AutoClearType.ALL.toKernelConstant());\r\n+        assertEquals(AutoClearType.ALL,\r\n+            AutoClearType.fromKernelConstant(AutoClear.CLEAR_ALL));\r\n+        assertEquals(AutoClearType.ALL.toKernelConstant(),\r\n+            AutoClearType.ALL.ordinal());\r\n+\r\n+        assertEquals(AutoClear.CLEAR_DATASTORE,\r\n+            AutoClearType.DATASTORE.toKernelConstant());\r\n+        assertEquals(AutoClearType.DATASTORE,\r\n+            AutoClearType.fromKernelConstant(AutoClear.CLEAR_DATASTORE));\r\n+        assertEquals(AutoClearType.DATASTORE.toKernelConstant(),\r\n+            AutoClearType.DATASTORE.ordinal());\r\n+\r\n+        assertEquals(getConstantCount(AutoClear.class),\r\n+            AutoClearType.values().length);\r\n+    }\r\n+\r\n+    public void testAutoDetach() {\r\n+        assertEquals(getConstantCount(AutoDetach.class),\r\n+            AutoDetachType.values().length);\r\n+\r\n+        assertEquals(EnumSet.of(AutoDetachType.CLOSE),\r\n+            AutoDetachType.toEnumSet(AutoDetach.DETACH_CLOSE));\r\n+        assertEquals(AutoDetach.DETACH_CLOSE,\r\n+            AutoDetachType.fromEnumSet(EnumSet.of(AutoDetachType.CLOSE)));\r\n+\r\n+        assertEquals(EnumSet.of(AutoDetachType.COMMIT),\r\n+            AutoDetachType.toEnumSet(AutoDetach.DETACH_COMMIT));\r\n+        assertEquals(AutoDetach.DETACH_COMMIT,\r\n+            AutoDetachType.fromEnumSet(EnumSet.of(AutoDetachType.COMMIT)));\r\n+\r\n+        assertEquals(EnumSet.of(AutoDetachType.NON_TRANSACTIONAL_READ),\r\n+            AutoDetachType.toEnumSet(AutoDetach.DETACH_NONTXREAD));\r\n+        assertEquals(AutoDetach.DETACH_NONTXREAD,\r\n+            AutoDetachType.fromEnumSet(\r\n+                EnumSet.of(AutoDetachType.NON_TRANSACTIONAL_READ)));\r\n+\r\n+        assertEquals(EnumSet.of(AutoDetachType.ROLLBACK),\r\n+            AutoDetachType.toEnumSet(AutoDetach.DETACH_ROLLBACK));\r\n+        assertEquals(AutoDetach.DETACH_ROLLBACK,\r\n+            AutoDetachType.fromEnumSet(EnumSet.of(AutoDetachType.ROLLBACK)));\r\n+\r\n+\r\n+        assertEquals(EnumSet.of(AutoDetachType.CLOSE, AutoDetachType.COMMIT),\r\n+            AutoDetachType.toEnumSet(\r\n+                AutoDetach.DETACH_CLOSE | AutoDetach.DETACH_COMMIT));\r\n+        assertEquals(AutoDetach.DETACH_ROLLBACK | AutoDetach.DETACH_CLOSE,\r\n+            AutoDetachType.fromEnumSet(\r\n+                EnumSet.of(AutoDetachType.ROLLBACK, AutoDetachType.CLOSE)));\r\n+\r\n+\r\n+        assertEquals(EnumSet.allOf(AutoDetachType.class),\r\n+            AutoDetachType.toEnumSet(\r\n+                AutoDetach.DETACH_CLOSE\r\n+                    | AutoDetach.DETACH_COMMIT\r\n+                    | AutoDetach.DETACH_NONTXREAD\r\n+                    | AutoDetach.DETACH_ROLLBACK));\r\n+        assertEquals(AutoDetach.DETACH_CLOSE\r\n+                    | AutoDetach.DETACH_COMMIT\r\n+                    | AutoDetach.DETACH_NONTXREAD\r\n+                    | AutoDetach.DETACH_ROLLBACK,\r\n+            AutoDetachType.fromEnumSet(EnumSet.allOf(AutoDetachType.class)));\r\n+    }\r\n+\r\n+    public void testCallbackMode() {\r\n+        assertEquals(getConstantCount(CallbackModes.class),\r\n+            CallbackType.values().length);\r\n+\r\n+        assertEquals(EnumSet.of(CallbackType.FAIL_FAST),\r\n+            CallbackType.toEnumSet(CallbackModes.CALLBACK_FAIL_FAST));\r\n+        assertEquals(CallbackModes.CALLBACK_FAIL_FAST,\r\n+            CallbackType.fromEnumSet(EnumSet.of(CallbackType.FAIL_FAST)));\r\n+\r\n+        assertEquals(EnumSet.of(CallbackType.IGNORE),\r\n+            CallbackType.toEnumSet(CallbackModes.CALLBACK_IGNORE));\r\n+        assertEquals(CallbackModes.CALLBACK_IGNORE,\r\n+            CallbackType.fromEnumSet(EnumSet.of(CallbackType.IGNORE)));\r\n+\r\n+        assertEquals(EnumSet.of(CallbackType.LOG),\r\n+            CallbackType.toEnumSet(CallbackModes.CALLBACK_LOG));\r\n+        assertEquals(CallbackModes.CALLBACK_LOG,\r\n+            CallbackType.fromEnumSet(EnumSet.of(CallbackType.LOG)));\r\n+\r\n+        assertEquals(EnumSet.of(CallbackType.RETHROW),\r\n+            CallbackType.toEnumSet(CallbackModes.CALLBACK_RETHROW));\r\n+        assertEquals(CallbackModes.CALLBACK_RETHROW,\r\n+            CallbackType.fromEnumSet(EnumSet.of(CallbackType.RETHROW)));\r\n+\r\n+        assertEquals(EnumSet.of(CallbackType.ROLLBACK),\r\n+            CallbackType.toEnumSet(CallbackModes.CALLBACK_ROLLBACK));\r\n+        assertEquals(CallbackModes.CALLBACK_ROLLBACK,\r\n+            CallbackType.fromEnumSet(EnumSet.of(CallbackType.ROLLBACK)));\r\n+\r\n+\r\n+        assertEquals(EnumSet.of(CallbackType.ROLLBACK, CallbackType.IGNORE),\r\n+            CallbackType.toEnumSet(CallbackModes.CALLBACK_ROLLBACK\r\n+                | CallbackModes.CALLBACK_IGNORE));\r\n+        assertEquals(\r\n+            CallbackModes.CALLBACK_ROLLBACK | CallbackModes.CALLBACK_IGNORE,\r\n+            CallbackType.fromEnumSet(\r\n+                EnumSet.of(CallbackType.ROLLBACK, CallbackType.IGNORE)));\r\n+\r\n+\r\n+        assertEquals(EnumSet.allOf(CallbackType.class),\r\n+            CallbackType.toEnumSet(\r\n+                CallbackModes.CALLBACK_FAIL_FAST\r\n+                    | CallbackModes.CALLBACK_IGNORE\r\n+                    | CallbackModes.CALLBACK_LOG\r\n+                    | CallbackModes.CALLBACK_RETHROW\r\n+                    | CallbackModes.CALLBACK_ROLLBACK));\r\n+        assertEquals(CallbackModes.CALLBACK_FAIL_FAST\r\n+                    | CallbackModes.CALLBACK_IGNORE\r\n+                    | CallbackModes.CALLBACK_LOG\r\n+                    | CallbackModes.CALLBACK_RETHROW\r\n+                    | CallbackModes.CALLBACK_ROLLBACK,\r\n+            CallbackType.fromEnumSet(EnumSet.allOf(CallbackType.class)));\r\n+    }\r\n+\r\n+    public void testQueryOperationTypes() {\r\n+        assertEquals(QueryOperations.OP_SELECT,\r\n+            QueryOperationType.SELECT.toKernelConstant());\r\n+        assertEquals(QueryOperationType.SELECT,\r\n+            QueryOperationType.fromKernelConstant(\r\n+                QueryOperations.OP_SELECT));\r\n+        assertEquals(QueryOperationType.SELECT.toKernelConstant(),\r\n+            QueryOperationType.SELECT.ordinal() + 1);\r\n+\r\n+        assertEquals(QueryOperations.OP_UPDATE,\r\n+            QueryOperationType.UPDATE.toKernelConstant());\r\n+        assertEquals(QueryOperationType.UPDATE,\r\n+            QueryOperationType.fromKernelConstant(\r\n+                QueryOperations.OP_UPDATE));\r\n+        assertEquals(QueryOperationType.UPDATE.toKernelConstant(),\r\n+            QueryOperationType.UPDATE.ordinal() + 1);\r\n+\r\n+        assertEquals(QueryOperations.OP_DELETE,\r\n+            QueryOperationType.DELETE.toKernelConstant());\r\n+        assertEquals(QueryOperationType.DELETE,\r\n+            QueryOperationType.fromKernelConstant(\r\n+                QueryOperations.OP_DELETE));\r\n+        assertEquals(QueryOperationType.DELETE.toKernelConstant(),\r\n+            QueryOperationType.DELETE.ordinal() + 1);\r\n+\r\n+        assertEquals(getConstantCount(QueryOperations.class),\r\n+            QueryOperationType.values().length);\r\n+    }\r\n+\r\n+    private int getConstantCount(Class cls) {\r\n+        return cls.getDeclaredFields().length;\r\n+    }\r\n+}\r"}]}

