{"sha":"77ebb866c172a3d69b6da31ec90b434336f82ea7","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc3ZWJiODY2YzE3MmEzZDY5YjZkYTMxZWM5MGI0MzQzMzZmODJlYTc=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-02-18T23:27:25Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-02-18T23:27:25Z"},"message":"Reverting OPENJPA-838 and OPENJPA-917 for additional testing.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@745691 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bd63866e9d48ba4db0d7d1b72b68e73eb5d589fb","url":"https://api.github.com/repos/apache/openjpa/git/trees/bd63866e9d48ba4db0d7d1b72b68e73eb5d589fb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/77ebb866c172a3d69b6da31ec90b434336f82ea7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/77ebb866c172a3d69b6da31ec90b434336f82ea7","html_url":"https://github.com/apache/openjpa/commit/77ebb866c172a3d69b6da31ec90b434336f82ea7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/77ebb866c172a3d69b6da31ec90b434336f82ea7/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"371c106193b47a48424032cb74113560d3731dc7","url":"https://api.github.com/repos/apache/openjpa/commits/371c106193b47a48424032cb74113560d3731dc7","html_url":"https://github.com/apache/openjpa/commit/371c106193b47a48424032cb74113560d3731dc7"}],"stats":{"total":350,"additions":115,"deletions":235},"files":[{"sha":"cf2e26a1cc91a6b2e6c60540013cfee64599c094","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","status":"modified","additions":98,"deletions":10,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/77ebb866c172a3d69b6da31ec90b434336f82ea7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/77ebb866c172a3d69b6da31ec90b434336f82ea7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java?ref=77ebb866c172a3d69b6da31ec90b434336f82ea7","patch":"@@ -26,20 +26,26 @@\n import java.util.Map;\n \n import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfigurationImpl;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n+import org.apache.openjpa.jdbc.kernel.JDBCStoreManager;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.FieldStrategy;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.sql.Joins;\n+import org.apache.openjpa.jdbc.sql.LogicalUnion;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.jdbc.sql.SelectExecutor;\n+import org.apache.openjpa.jdbc.sql.SelectImpl;\n import org.apache.openjpa.jdbc.sql.Union;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n@@ -520,19 +526,86 @@ public void load(final OpenJPAStateManager sm, final JDBCStore store,\n             return;\n         }\n \n+        //cache union for field here\n         // select data for this sm\n+        boolean found = true;\n         final ClassMapping[] elems = getIndependentElementMappings(true);\n         final Joins[] resJoins = new Joins[Math.max(1, elems.length)];\n-        Union union = store.getSQLFactory().newUnion\n-            (Math.max(1, elems.length));\n-        union.select(new Union.Selector() {\n-            public void select(Select sel, int idx) {\n-                ClassMapping elem = (elems.length == 0) ? null : elems[idx];\n-                resJoins[idx] = selectAll(sel, elem, sm, store, fetch,\n-                    JDBCFetchConfiguration.EAGER_PARALLEL);\n+        List parmList = null;\n+        Union union = null;\n+        SelectImpl sel = null;\n+        Map<JDBCStoreManager.SelectKey, Object[]> storeCollectionUnionCache = null;\n+        JDBCStoreManager.SelectKey selKey = null;\n+        if (!((JDBCStoreManager)store).isQuerySQLCacheOn() || elems.length > 1)\n+            union = newUnion(sm, store, fetch, elems, resJoins);\n+        else {\n+            parmList = new ArrayList();\n+            JDBCFetchConfiguration fetchClone = new JDBCFetchConfigurationImpl();\n+            fetchClone.copy(fetch);\n+           \n+            // to specify the type so that no cast is needed\n+            storeCollectionUnionCache = ((JDBCStoreManager)store).\n+                getCacheMapFromQuerySQLCache(StoreCollectionFieldStrategy.class);\n+            selKey = \n+                new JDBCStoreManager.SelectKey(null, field, fetchClone);\n+            Object[] objs = storeCollectionUnionCache.get(selKey);\n+            if (objs != null) {\n+                union = (Union) objs[0];\n+                resJoins[0] = (Joins) objs[1];\n             }\n-        });\n-\n+            else {\n+                synchronized(storeCollectionUnionCache) {\n+                    objs = storeCollectionUnionCache.get(selKey);\n+                    if (objs == null) {\n+                        // select data for this sm\n+                        union = newUnion(sm, store, fetch, elems, resJoins);\n+                        found = false;\n+                    } else {\n+                        union = (Union) objs[0];\n+                        resJoins[0] = (Joins) objs[1];\n+                    }\n+\n+                    sel = ((LogicalUnion.UnionSelect)union.getSelects()[0]).\n+                        getDelegate();\n+                    if (sel.getSQL() == null) {\n+                    \t((SelectImpl)sel).setSQL(store, fetch);\n+                        found = false;\n+                    }\n+\n+                    // only cache the union when elems length is 1 for now\n+                    if (!found) { \n+                        Object[] objs1 = new Object[2];\n+                        objs1[0] = union;\n+                        objs1[1] = resJoins[0];\n+                        ((JDBCStoreManager)store).addToSqlCache(\n+                            storeCollectionUnionCache, selKey, objs1);\n+                     }\n+                }\n+            }\n+            \n+            Log log = store.getConfiguration().\n+                getLog(JDBCConfiguration.LOG_JDBC);\n+            if (log.isTraceEnabled()) {\n+                if (found)\n+                    log.trace(_loc.get(\"cache-hit\", field, this.getClass()));\n+                else\n+                    log.trace(_loc.get(\"cache-missed\", field, this.getClass())); \n+            }\n+            \n+            ClassMapping mapping = field.getDefiningMapping();\n+            Object oid = sm.getObjectId();\n+            Column[] cols = mapping.getPrimaryKeyColumns();\n+            if (sel == null)\n+                sel = ((LogicalUnion.UnionSelect)union.getSelects()[0]).\n+                getDelegate();\n+\n+            sel.wherePrimaryKey(mapping, cols, cols, oid, store, \n+                \tnull, null, parmList);\n+            List nonFKParams = sel.getSQL().getNonFKParameters();\n+            if (nonFKParams != null && nonFKParams.size() > 0) \n+                parmList.addAll(nonFKParams);\n+        }\n+        \n         // create proxy\n         Object coll;\n         ChangeTracker ct = null;\n@@ -545,7 +618,7 @@ public void select(Select sel, int idx) {\n         }\n \n         // load values\n-        Result res = union.execute(store, fetch);\n+        Result res = union.execute(store, fetch, parmList);\n         try {\n             int seq = -1;\n             while (res.next()) {\n@@ -569,6 +642,21 @@ public void select(Select sel, int idx) {\n             sm.storeObject(field.getIndex(), coll);\n     }\n \n+    protected Union newUnion(final OpenJPAStateManager sm, final JDBCStore store,\n+        final JDBCFetchConfiguration fetch, final ClassMapping[] elems,\n+        final Joins[] resJoins) {\n+        Union union = store.getSQLFactory().newUnion\n+        (Math.max(1, elems.length));\n+        union.select(new Union.Selector() {\n+            public void select(Select sel, int idx) {\n+                ClassMapping elem = (elems.length == 0) ? null : elems[idx];\n+                resJoins[idx] = selectAll(sel, elem, sm, store, fetch,\n+                        JDBCFetchConfiguration.EAGER_PARALLEL);\n+            }\n+        });\n+        return union;\n+    }\n+    \n     /**\n      * Select data for loading, starting in field table.\n      */"},{"sha":"4b5537afed6f6b72b16323c9f247b0b5a71d012e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/77ebb866c172a3d69b6da31ec90b434336f82ea7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","raw_url":"https://github.com/apache/openjpa/raw/77ebb866c172a3d69b6da31ec90b434336f82ea7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java?ref=77ebb866c172a3d69b6da31ec90b434336f82ea7","patch":"@@ -56,6 +56,7 @@\n     private List _subsels = null;\n     private List _params = null;\n     private List _cols = null;\n+    private List _nonFKParams = null;\n \n     /**\n      * Default constructor.\n@@ -146,6 +147,11 @@ else if (_cols != null)\n                         _cols.add(paramIndex, null);\n             }\n         }\n+        if (buf._nonFKParams != null) {\n+            if (_nonFKParams == null)\n+                _nonFKParams = new ArrayList();\n+            _nonFKParams.addAll(buf._nonFKParams);\n+        }\n     }\n \n     public SQLBuffer append(Table table) {\n@@ -265,6 +271,11 @@ else if (o instanceof Raw)\n                 if (isFK)\n                     break;\n             }\n+            if (!isFK) {\n+                if (_nonFKParams == null)\n+                    _nonFKParams = new ArrayList();\n+                _nonFKParams.add(o);                \n+            }\n         }\n         return this;\n     }\n@@ -388,6 +399,9 @@ public List getParameters() {\n         return (_params == null) ? Collections.EMPTY_LIST : _params;\n     }\n \n+    public List getNonFKParameters() {\n+        return (_nonFKParams == null) ? Collections.EMPTY_LIST : _nonFKParams;\n+    }\n     /**\n      * Return the SQL for this buffer.\n      */"},{"sha":"ba0cce7f3b0b7b513446fc4956f5847759c0832b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Invoice.java","status":"removed","additions":0,"deletions":80,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/371c106193b47a48424032cb74113560d3731dc7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Invoice.java","raw_url":"https://github.com/apache/openjpa/raw/371c106193b47a48424032cb74113560d3731dc7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Invoice.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Invoice.java?ref=371c106193b47a48424032cb74113560d3731dc7","patch":"@@ -1,80 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-package org.apache.openjpa.persistence.jdbc.query.cache;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import javax.persistence.*;\n-/**\n- * @version $Revision$ $Date$\n- */\n-@Entity\n-@IdClass(InvoiceKey.class)\n-public class Invoice {\n-\n-    @Id\n-    private int id;\n-    @Id\n-    private String brandName;\n-    \n-    private double price;\n-\n-    @OneToMany(cascade={CascadeType.ALL})\n-    private List<LineItem> lineItems = new ArrayList<LineItem>();\n-\n-    public Invoice() {\n-    }\n-\n-    public Invoice(int id, String brandName, double price) {\n-        this.id = id;\n-        this.brandName = brandName;\n-        this.price = price;\n-    }\n-\n-    public int getId() {\n-        return id;\n-    }\n-\n-    public void setId(int id) {\n-        this.id = id;\n-    }\n-\n-    public String getBrandName() {\n-        return brandName;\n-    }\n-\n-    public void setBrandName(String brandName) {\n-        this.brandName = brandName;\n-    }\n-\n-    public double getPrice() {\n-        return price;\n-    }\n-\n-    public void setPrice(double price) {\n-        this.price = price;\n-    }\n-\n-    public List<LineItem> getLineItems() {\n-        return lineItems;\n-    }\n-\n-    public void setLineItems(List<LineItem> lineItems) {\n-        this.lineItems = lineItems;\n-    }\n-}"},{"sha":"0d49deb27a0bb235b9b4444b8037b24fa171a822","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/InvoiceKey.java","status":"removed","additions":0,"deletions":54,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/371c106193b47a48424032cb74113560d3731dc7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/InvoiceKey.java","raw_url":"https://github.com/apache/openjpa/raw/371c106193b47a48424032cb74113560d3731dc7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/InvoiceKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/InvoiceKey.java?ref=371c106193b47a48424032cb74113560d3731dc7","patch":"@@ -1,54 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-package org.apache.openjpa.persistence.jdbc.query.cache;\n-\n-/**\n- * @version $Revision$ $Date$\n- */\n-public class InvoiceKey {\n-\n-    private int id;\n-    private String brandName;\n-\n-    public InvoiceKey() {\n-    }\n-\n-    public InvoiceKey(int id, String brandName) {\n-        this.id = id;\n-        this.brandName = brandName;\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) return true;\n-        if (o == null || getClass() != o.getClass()) return false;\n-\n-        InvoiceKey invoiceKey = (InvoiceKey) o;\n-\n-        if (id != invoiceKey.id) return false;\n-        if (!brandName.equals(invoiceKey.brandName)) return false;\n-\n-        return true;\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        int result = id;\n-        result = 31 * result + brandName.hashCode();\n-        return result;\n-    }\n-}"},{"sha":"e3c6fff092c6330432be1713af7bd33e2531170f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/LineItem.java","status":"removed","additions":0,"deletions":65,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/371c106193b47a48424032cb74113560d3731dc7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/LineItem.java","raw_url":"https://github.com/apache/openjpa/raw/371c106193b47a48424032cb74113560d3731dc7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/LineItem.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/LineItem.java?ref=371c106193b47a48424032cb74113560d3731dc7","patch":"@@ -1,65 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-package org.apache.openjpa.persistence.jdbc.query.cache;\n-import javax.persistence.*;\n-\n-/**\n- * @version $Revision$ $Date$\n- */\n-@Entity\n-public class LineItem {\n-\n-    @Id\n-    private String id;\n-    private int quantity;\n-    \n-    @ManyToOne\n-    private Invoice invoice;\n-\n-    public LineItem() {\n-    }\n-\n-    public LineItem(String id, int quantity) {\n-        this.id = id;\n-        this.quantity = quantity;\n-    }\n-\n-    public String getId() {\n-        return id;\n-    }\n-\n-    public void setId(String id) {\n-        this.id = id;\n-    }\n-\n-    public int getQuantity() {\n-        return quantity;\n-    }\n-\n-    public void setQuantity(int quantity) {\n-        this.quantity = quantity;\n-    }\n-\n-    public Invoice getInvoice() {\n-        return invoice;\n-    }\n-\n-    public void setInvoice(Invoice invoice) {\n-        this.invoice = invoice;\n-    }\n-}\n-"},{"sha":"43e3ea8c69662842a0269c8d3861ed82849af5a7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java","status":"modified","additions":3,"deletions":26,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/77ebb866c172a3d69b6da31ec90b434336f82ea7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java","raw_url":"https://github.com/apache/openjpa/raw/77ebb866c172a3d69b6da31ec90b434336f82ea7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java?ref=77ebb866c172a3d69b6da31ec90b434336f82ea7","patch":"@@ -18,10 +18,10 @@\n  */\r\n package org.apache.openjpa.persistence.jdbc.query.cache;\r\n \r\n-import java.util.List;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n \r\n import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityTransaction;\r\n import javax.persistence.Query;\r\n \r\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n@@ -45,21 +45,18 @@\n  * \r\n  * @author Pinaki Poddar\r\n  * @author Vikram Bhatia\r\n- * @author David Blevins\r\n+ * \r\n  */\r\n public class TestNonPrimaryKeyQueryParameters extends SQLListenerTestCase {\r\n \tprivate static final int FULLTIME_EMPLOYEE_COUNT = 3;\r\n \tprivate static final int PARTTIME_EMPLOYEE_COUNT = 2;\r\n-    private static final int LINEITEM_PER_INVOICE = 1;\r\n \tprivate static final String DEPT_NAME = \"ENGINEERING\";\r\n \r\n \tpublic void setUp() {\r\n \t\tsuper.setUp(CLEAR_TABLES, Department.class, Employee.class,\r\n \t\t\t\tFullTimeEmployee.class, PartTimeEmployee.class,\r\n-\t\t\t\tInvoice.class, LineItem.class,\r\n \t\t\t\t\"openjpa.jdbc.QuerySQLCache\", \"true\");\r\n \t\tcreateDepartment(DEPT_NAME);\r\n-\t\tcreateInvoice();\r\n \t\tsql.clear();\r\n \t}\r\n \r\n@@ -106,10 +103,6 @@ public void testFind() {\n \t\t\t\t.size());\r\n \r\n \t\tassertSQL(\".* AND t0.TYPE = .*\");\r\n-\t\t\r\n-        Invoice invoice = em.find(Invoice.class, new InvoiceKey(1, \"Red\"));\r\n-        List<LineItem> list = invoice.getLineItems();\r\n-        assertEquals(LINEITEM_PER_INVOICE, list.size());\r\n \t\tem.close();\r\n \t}\r\n \r\n@@ -161,20 +154,4 @@ private void createDepartment(String deptName) {\n \t\tem.close();\r\n \r\n \t}\r\n-\t\r\n-    private void createInvoice() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        tran.begin();\r\n-        Invoice invoice = new Invoice(1, \"Red\", 1.30);\r\n-        for (int i = 1;  i <= LINEITEM_PER_INVOICE; i++) {\r\n-            LineItem item = new LineItem(String.valueOf(i), 10);\r\n-            item.setInvoice(invoice);\r\n-            invoice.getLineItems().add(item);\r\n-            em.persist(invoice);\r\n-        }\r\n-        em.flush();\r\n-        tran.commit();\r\n-        em.close();        \r\n-    }\t\r\n }\r"}]}

