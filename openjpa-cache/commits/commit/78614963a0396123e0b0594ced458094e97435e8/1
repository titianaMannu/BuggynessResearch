{"sha":"78614963a0396123e0b0594ced458094e97435e8","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc4NjE0OTYzYTAzOTYxMjNlMGIwNTk0Y2VkNDU4MDk0ZTk3NDM1ZTg=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-05-01T19:00:23Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-05-01T19:00:23Z"},"message":"OPENJPA-1634: Process JAXB metadata when preloading the MetaDataRepository.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@940093 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"857e584180206a178bd3f5d0a4ae44ee6b1131fe","url":"https://api.github.com/repos/apache/openjpa/git/trees/857e584180206a178bd3f5d0a4ae44ee6b1131fe"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/78614963a0396123e0b0594ced458094e97435e8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/78614963a0396123e0b0594ced458094e97435e8","html_url":"https://github.com/apache/openjpa/commit/78614963a0396123e0b0594ced458094e97435e8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/78614963a0396123e0b0594ced458094e97435e8/comments","author":null,"committer":null,"parents":[{"sha":"62bed3cf3dd4fcc758034fd814d72efef2ba48a5","url":"https://api.github.com/repos/apache/openjpa/commits/62bed3cf3dd4fcc758034fd814d72efef2ba48a5","html_url":"https://github.com/apache/openjpa/commit/62bed3cf3dd4fcc758034fd814d72efef2ba48a5"}],"stats":{"total":148,"additions":92,"deletions":56},"files":[{"sha":"11cd74b03ce8069d28294d07fdf5016f827c1692","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/78614963a0396123e0b0594ced458094e97435e8/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/78614963a0396123e0b0594ced458094e97435e8/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java?ref=78614963a0396123e0b0594ced458094e97435e8","patch":"@@ -312,7 +312,7 @@ protected Value traversePath(Path path, String field, boolean pcOnly,\n         }\n         else {\n             // xmlsupport xpath\n-            XMLMetaData xmlmeta = fmd.getRepository().getXMLMetaData(fmd);\n+            XMLMetaData xmlmeta = fmd.getRepository().getXMLMetaData(fmd.getDeclaredType());\n             if (xmlmeta != null) {\n                 path.get(fmd, xmlmeta);\n                 return path;"},{"sha":"06b14bc0421a6e08610c578f944570e7bd0f20b5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/DelegatingMetaDataFactory.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/78614963a0396123e0b0594ced458094e97435e8/openjpa-kernel/src/main/java/org/apache/openjpa/meta/DelegatingMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/78614963a0396123e0b0594ced458094e97435e8/openjpa-kernel/src/main/java/org/apache/openjpa/meta/DelegatingMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/DelegatingMetaDataFactory.java?ref=78614963a0396123e0b0594ced458094e97435e8","patch":"@@ -123,8 +123,8 @@ public void addFieldExtensionKeys(Collection exts) {\n         _delegate.addFieldExtensionKeys(exts);\n     }\n \n-    public void loadXMLMetaData(FieldMetaData fmd) {\n-        _delegate.loadXMLMetaData(fmd);\n+    public void loadXMLMetaData(Class<?> cls) {\n+        _delegate.loadXMLMetaData(cls);\n     }\n     \n     public String getMetaModelClassName(String managedClassName) {"},{"sha":"5c5c0466f82c3696e4c870ddf2508e3f553ad857","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/78614963a0396123e0b0594ced458094e97435e8/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/78614963a0396123e0b0594ced458094e97435e8/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataFactory.java?ref=78614963a0396123e0b0594ced458094e97435e8","patch":"@@ -151,7 +151,7 @@ public boolean store(ClassMetaData[] metas, QueryMetaData[] queries,\n      * Load XMLClassMetadata for the given class. Loaded\n      * metadata should be added directly to the repository.\n      */\n-    public void loadXMLMetaData(FieldMetaData fmd);\n+    public void loadXMLMetaData(Class<?> cls);\n     \n     /**\n      * Gets the name of the meta-featureSelection class for the given fully-qualified"},{"sha":"a8f9146f57713549b69887e4c31ea68483e9c19d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":24,"deletions":11,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/78614963a0396123e0b0594ced458094e97435e8/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/78614963a0396123e0b0594ced458094e97435e8/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=78614963a0396123e0b0594ced458094e97435e8","patch":"@@ -332,7 +332,18 @@ public synchronized void preload() {\n             }\n         }\n         resolveAll(multi);\n-\n+        \n+        // Preload XML MetaData\n+        for (Class<?> cls : loaded) {\n+            ClassMetaData cmd = getCachedMetaData(cls);\n+            if (cmd != null) {\n+                getXMLMetaData(cls);\n+                for (FieldMetaData fmd : cmd.getFields()) {\n+                    getXMLMetaData(fmd.getDeclaredType());\n+                }\n+            }\n+        }\n+        \n         // Hook in this class as a listener and process registered classes list to populate _aliases\n         // list.\n         PCRegistry.addRegisterClassListener(this);\n@@ -2344,25 +2355,27 @@ public boolean equals(Object obj) {\n      * @param fmd\n      * @return XML metadata\n      */\n-    public XMLMetaData getXMLMetaData(FieldMetaData fmd) {\n+    public XMLMetaData getXMLMetaData(Class<?> cls) {\n         if (_locking) {\n             synchronized (this) {\n-                return getXMLMetaDataInternal(fmd);\n+                return getXMLMetaDataInternal(cls);\n             }\n         } else {\n-            return getXMLMetaDataInternal(fmd);\n+            return getXMLMetaDataInternal(cls);\n         }\n     }\n     \n-    private XMLMetaData getXMLMetaDataInternal(FieldMetaData fmd) {\n-        Class<?> cls = fmd.getDeclaredType();\n+    private XMLMetaData getXMLMetaDataInternal(Class<?> cls) {\n+        if (cls == null) {\n+            return null;\n+        }\n         // check if cached before\n         XMLMetaData xmlmeta = _xmlmetas.get(cls);\n         if (xmlmeta != null)\n             return xmlmeta;\n \n         // load JAXB XML metadata\n-        _factory.loadXMLMetaData(fmd);\n+        _factory.loadXMLMetaData(cls);\n \n         xmlmeta = (XMLClassMetaData) _xmlmetas.get(cls);\n \n@@ -2376,8 +2389,8 @@ private XMLMetaData getXMLMetaDataInternal(FieldMetaData fmd) {\n      * @param access\n      *            the access type to use in populating metadata\n      */\n-    public XMLClassMetaData addXMLMetaData(Class<?> type, String name) {\n-        XMLClassMetaData meta = newXMLClassMetaData(type, name);\n+    public XMLClassMetaData addXMLClassMetaData(Class<?> type) {\n+        XMLClassMetaData meta = newXMLClassMetaData(type);\n         if(_locking){\n             synchronized(this){\n                 _xmlmetas.put(type, meta);                \n@@ -2402,8 +2415,8 @@ public XMLMetaData getCachedXMLMetaData(Class<?> cls) {\n      * @param name\n      * @return a XMLClassMetaData\n      */\n-    protected XMLClassMetaData newXMLClassMetaData(Class<?> type, String name) {\n-        return new XMLClassMetaData(type, name);\n+    protected XMLClassMetaData newXMLClassMetaData(Class<?> type) {\n+        return new XMLClassMetaData(type);\n     }\n \n     /**"},{"sha":"5a831bc2a1be3433f23cfe2a7018af890dd8508b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/78614963a0396123e0b0594ced458094e97435e8/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/78614963a0396123e0b0594ced458094e97435e8/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java?ref=78614963a0396123e0b0594ced458094e97435e8","patch":"@@ -144,7 +144,7 @@ public Member getMemberByProperty(ClassMetaData meta, String property,\n         return null;\n     }\n     \n-    public void loadXMLMetaData(FieldMetaData fmd) {\n+    public void loadXMLMetaData(Class<?> cls) {\n     }\n \n     public String getMetaModelClassName(String managedClassName) {"},{"sha":"f053a972a626afcd69319f4b2a1a3766bf021d8f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetaDataRepository.java","status":"modified","additions":52,"deletions":27,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/78614963a0396123e0b0594ced458094e97435e8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/78614963a0396123e0b0594ced458094e97435e8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestMetaDataRepository.java?ref=78614963a0396123e0b0594ced458094e97435e8","patch":"@@ -18,50 +18,75 @@\n  */\n package org.apache.openjpa.persistence.meta;\n \n-import java.security.AccessController;\n import java.util.Collection;\n \n-import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.meta.QueryMetaData;\n+import org.apache.openjpa.meta.XMLMetaData;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.test.AbstractPersistenceTestCase;\n+import org.apache.openjpa.persistence.xmlmapping.entities.Customer;\n+import org.apache.openjpa.persistence.xmlmapping.entities.EAddress;\n+import org.apache.openjpa.persistence.xmlmapping.entities.Order;\n+import org.apache.openjpa.persistence.xmlmapping.xmlbindings.myaddress.Address;\n \n public class TestMetaDataRepository extends AbstractPersistenceTestCase {\n-    private final String PU_NAME = \"mdr-pu\";\n+\tprivate final String PU_NAME = \"mdr-pu\";\n \n-    @Override\n-    public void setUp() throws Exception {\n-        super.setUp();\n+\t@Override\n+\tpublic void setUp() throws Exception {\n+\t\tsuper.setUp();\n+\t}\n \n-    }\n+\t/**\n+\t * This method ensures that some of the basic MetaData is properly\n+\t * registered after creating an EMF.\n+\t */\n+\tpublic void testPreloadBasic() {\n+\t\tOpenJPAEntityManagerFactorySPI emf = null;\n+\t\ttry {\n+\t\t\temf = createNamedEMF(PU_NAME, \"openjpa.MetaDataRepository\",\n+\t\t\t\t\t\"Preload=true\");\n+\t\t\tMetaDataRepository mdr = emf.getConfiguration()\n+\t\t\t\t\t.getMetaDataRepositoryInstance();\n+\n+\t\t\t// Check that there is cached metadata in the repo\n+\t\t\tClassMetaData metadata = mdr.getCachedMetaData(MdrTestEntity.class);\n+\t\t\tassertNotNull(metadata);\n+\n+\t\t\t// Make sure that there is an alias registered\n+\t\t\t// int numEntities =\n+\t\t\t// mdr.getPersistentTypeNames(false,\n+\t\t\t// AccessController.doPrivileged(J2DoPrivHelper.getContextClassLoaderAction())).size();\n+\t\t\tCollection<String> aliases = mdr.getAliasNames();\n+\t\t\tassertTrue(aliases.contains(\"MdrTestEntity\"));\n+\n+\t\t\t// assertTrue(aliases.size() == numEntities);\n \n-    /**\n-     * This method ensures that some of the basic MetaData is properly registered after creating an\n-     * EMF.\n-     */\n-    public void testPreloadBasic() {\n+\t\t\tQueryMetaData query = mdr.getCachedQueryMetaData(\n+\t\t\t\t\tMdrTestEntity.class, \"query\");\n+\t\t\tassertNotNull(query);\n+\t\t} finally {\n+\t\t\tif (emf != null) {\n+\t\t\t\temf.close();\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic void testXmlMappingPreload() {\n         OpenJPAEntityManagerFactorySPI emf = null;\n         try {\n-            emf = createNamedEMF(PU_NAME, \"openjpa.MetaDataRepository\", \"Preload=true\");\n+            emf =\n+                createNamedEMF(\"test\", \"openjpa.MetaDataRepository\", \"Preload=true\", Customer.class,\n+                    Customer.CustomerKey.class, Order.class, EAddress.class);\n             MetaDataRepository mdr = emf.getConfiguration().getMetaDataRepositoryInstance();\n \n-            // Check that there is cached metadata in the repo\n-            ClassMetaData metadata = mdr.getCachedMetaData(MdrTestEntity.class);\n-            assertNotNull(metadata);\n-\n-            // Make sure that there is an alias registered\n-//            int numEntities =\n-//                mdr.getPersistentTypeNames(false,\n-//                    AccessController.doPrivileged(J2DoPrivHelper.getContextClassLoaderAction())).size();\n-            Collection<String> aliases = mdr.getAliasNames();\n-            assertTrue(aliases.contains(\"MdrTestEntity\"));\n-\n-//            assertTrue(aliases.size() == numEntities);\n+            assertNotNull(mdr.getCachedXMLMetaData(Address.class));\n+            assertNull(mdr.getCachedXMLMetaData(Order.class));\n+            \n \n-            QueryMetaData query = mdr.getCachedQueryMetaData(MdrTestEntity.class, \"query\");\n-            assertNotNull(query);\n         } finally {\n             if (emf != null) {\n                 emf.close();"},{"sha":"e838b70f459f954899eb4ab2b729339bbd048372","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","status":"modified","additions":9,"deletions":11,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/78614963a0396123e0b0594ced458094e97435e8/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/78614963a0396123e0b0594ced458094e97435e8/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java?ref=78614963a0396123e0b0594ced458094e97435e8","patch":"@@ -145,20 +145,19 @@ public void clear() {\n     }\n \n     /**\n-     * Parse persistence metadata for the given field metadata. If the MetaData(/Mapping)Repository\n-     * is using locking, that lock MUST be held prior to calling this method.\n+     * Parse persistence metadata for the given field metadata. This parser/class is NOT threadsafe! The caller of \n+     * this method needs to insure that the MetaData(/Mapping)Repository is locked prior to calling this method.\n      */\n-    public synchronized void parse(FieldMetaData fmd) {\n-        Class<?> cls = fmd.getDeclaredType();\n+    public synchronized void parse(Class<?> cls) {\n         if (_log.isTraceEnabled())\n             _log.trace(_loc.get(\"parse-class\", cls.getName()));\n-        parseXMLClassAnnotations(cls, fmd);\n+        parseXMLClassAnnotations(cls);\n     }\n \n     /**\n      * Read annotations for the current type.\n      */\n-    private XMLMetaData parseXMLClassAnnotations(Class<?> cls, FieldMetaData fmd) {\n+    private XMLMetaData parseXMLClassAnnotations(Class<?> cls) {\n         // check immediately whether the class has JAXB XML annotations\n         if (cls == null || xmlTypeClass == null\n             || !((AccessController.doPrivileged(J2DoPrivHelper\n@@ -169,19 +168,19 @@ private XMLMetaData parseXMLClassAnnotations(Class<?> cls, FieldMetaData fmd) {\n             return null;\n \n         // find / create metadata\n-        XMLMetaData meta = getXMLMetaData(cls, fmd);\n+        XMLMetaData meta = getXMLMetaData(cls);\n         \n         return meta;\n     }\n \n     /**\n      * Find or create xml metadata for the current type. \n      */\n-    private XMLMetaData getXMLMetaData(Class<?> cls, FieldMetaData fmd) {\n+    private XMLMetaData getXMLMetaData(Class<?> cls) {\n         XMLMetaData meta = getRepository().getCachedXMLMetaData(cls);\n         if (meta == null) {\n             // if not in cache, create metadata\n-            meta = getRepository().addXMLMetaData(cls, fmd.getName());\n+            meta = getRepository().addXMLClassMetaData(cls);\n             parseXmlRootElement(cls, meta);\n             populateFromReflection(cls, meta);\n         }\n@@ -238,8 +237,7 @@ private void populateFromReflection(Class cls, XMLMetaData meta) {\n                     if ((AccessController.doPrivileged(J2DoPrivHelper\n                         .isAnnotationPresentAction(((Field) member).getType(),\n                             xmlTypeClass))).booleanValue()) {\n-                        field = _repos.addXMLMetaData(((Field) member).getType()\n-                            , member.getName());\n+                        field = _repos.addXMLClassMetaData(((Field) member).getType());\n                         parseXmlRootElement(((Field) member).getType(), field);\n                         populateFromReflection(((Field) member).getType()\n                             , field);"},{"sha":"8e2f4ad5f2145c5ce0b16c15891caca5062c1485","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/78614963a0396123e0b0594ced458094e97435e8/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/78614963a0396123e0b0594ced458094e97435e8/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java?ref=78614963a0396123e0b0594ced458094e97435e8","patch":"@@ -573,10 +573,10 @@ protected AnnotationPersistenceXMLMetaDataParser newXMLAnnotationParser() {\n             (repos.getConfiguration());\n     }\n \n-    public void loadXMLMetaData(FieldMetaData fmd) {\n+    public void loadXMLMetaData(Class<?> cls) {\n         AnnotationPersistenceXMLMetaDataParser parser\n             = getXMLAnnotationParser();\n-        parser.parse(fmd);\n+        parser.parse(cls);\n     }\n     \n     private static String UNDERSCORE = \"_\";"}]}

