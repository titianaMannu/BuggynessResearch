{"sha":"787b57a486877f695c55c54f7709428df18e64d9","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc4N2I1N2E0ODY4NzdmNjk1YzU1YzU0Zjc3MDk0MjhkZjE4ZTY0ZDk=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-12-14T21:26:02Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-12-14T21:26:02Z"},"message":"OPENJPA-9 Use the same criteria for resolving the configuration file for the purposes of listing all the anchors as we do for actually parsing the file itself. Fixes the problem where specifing the property \"persistence.xml\" was not actually resolving /META-INF/persistence.xml in order to obtain the list of anchors.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@604300 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5b97a32dbc962294b61853e02256bb53152dd85a","url":"https://api.github.com/repos/apache/openjpa/git/trees/5b97a32dbc962294b61853e02256bb53152dd85a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/787b57a486877f695c55c54f7709428df18e64d9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/787b57a486877f695c55c54f7709428df18e64d9","html_url":"https://github.com/apache/openjpa/commit/787b57a486877f695c55c54f7709428df18e64d9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/787b57a486877f695c55c54f7709428df18e64d9/comments","author":null,"committer":null,"parents":[{"sha":"485372b3f66bff883a422b3de8966279a57589de","url":"https://api.github.com/repos/apache/openjpa/commits/485372b3f66bff883a422b3de8966279a57589de","html_url":"https://github.com/apache/openjpa/commit/485372b3f66bff883a422b3de8966279a57589de"}],"stats":{"total":52,"additions":34,"deletions":18},"files":[{"sha":"c3a535c45a3328e32982b79d8d09fad55efe1e10","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","status":"modified","additions":34,"deletions":18,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/787b57a486877f695c55c54f7709428df18e64d9/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/787b57a486877f695c55c54f7709428df18e64d9/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java?ref=787b57a486877f695c55c54f7709428df18e64d9","patch":"@@ -228,7 +228,14 @@ public List getAnchorsInFile(File file) throws IOException {\n     public List getAnchorsInResource(String resource) throws Exception {\n         ConfigurationParser parser = new ConfigurationParser(null);\n         try {\n-            parser.parse(resource);\n+            ClassLoader loader = (ClassLoader) AccessController.doPrivileged(\n+                J2DoPrivHelper.getContextClassLoaderAction());\n+            List<URL> urls = getResourceURLs(resource, loader);\n+            if (urls != null) {\n+                for (URL url : urls) {\n+                    parser.parse(url);\n+                }\n+            }\n             return getUnitNames(parser);\n         } catch (IOException e) {\n             // not all configuration files are XML; return null if unparsable\n@@ -273,6 +280,27 @@ public ConfigurationProvider loadDefaults(ClassLoader loader)\n         return null;\n     }\n \n+    private static List<URL> getResourceURLs(String rsrc, ClassLoader loader)\n+        throws IOException {\n+        Enumeration<URL> urls = null;\n+        try {\n+            urls = (Enumeration) AccessController.doPrivileged(\n+                J2DoPrivHelper.getResourcesAction(loader, rsrc)); \n+            if (!urls.hasMoreElements()) {\n+                if (!rsrc.startsWith(\"META-INF\"))\n+                    urls = (Enumeration) AccessController.doPrivileged(\n+                        J2DoPrivHelper.getResourcesAction(\n+                            loader, \"META-INF/\" + rsrc)); \n+                if (!urls.hasMoreElements())\n+                    return null;\n+            }\n+        } catch (PrivilegedActionException pae) {\n+            throw (IOException) pae.getException();\n+        }\n+\n+        return Collections.list(urls);\n+    }\n+\n     /**\n      * Looks through the resources at <code>rsrc</code> for a configuration\n      * file that matches <code>name</code> (or an unnamed one if\n@@ -290,21 +318,9 @@ private Boolean load(ConfigurationProviderImpl cp, String rsrc,\n             loader = (ClassLoader) AccessController.doPrivileged(\n                 J2DoPrivHelper.getContextClassLoaderAction());\n \n-        Enumeration<URL> urls = null;\n-        try {\n-            urls = (Enumeration) AccessController.doPrivileged(\n-                J2DoPrivHelper.getResourcesAction(loader, rsrc)); \n-            if (!urls.hasMoreElements()) {\n-                if (!rsrc.startsWith(\"META-INF\"))\n-                    urls = (Enumeration) AccessController.doPrivileged(\n-                        J2DoPrivHelper.getResourcesAction(\n-                            loader, \"META-INF/\" + rsrc)); \n-                if (!urls.hasMoreElements())\n-                    return null;\n-            }\n-        } catch (PrivilegedActionException pae) {\n-            throw (IOException) pae.getException();\n-        }\n+        List<URL> urls = getResourceURLs(rsrc, loader);\n+        if (urls == null || urls.size() == 0)\n+            return null;\n \n         ConfigurationParser parser = new ConfigurationParser(m);\n         PersistenceUnitInfoImpl pinfo = parseResources(parser, urls, name, \n@@ -335,11 +351,11 @@ private Boolean load(ConfigurationProviderImpl cp, String rsrc,\n      * no name given (preferring an unnamed OpenJPA unit to a named one).\n      */\n     private PersistenceUnitInfoImpl parseResources(ConfigurationParser parser,\n-        Enumeration<URL> urls, String name, ClassLoader loader)\n+        List<URL> urls, String name, ClassLoader loader)\n         throws IOException {\n         List<PersistenceUnitInfoImpl> pinfos = \n             new ArrayList<PersistenceUnitInfoImpl>();\n-        for (URL url : Collections.list(urls)) {\n+        for (URL url : urls) {\n             parser.parse(url);\n             pinfos.addAll((List<PersistenceUnitInfoImpl>) parser.getResults());\n         }"}]}

