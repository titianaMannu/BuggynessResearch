{"sha":"78e258706ddda8eee2bfb6b71b673e33aa29d59f","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc4ZTI1ODcwNmRkZGE4ZWVlMmJmYjZiNzFiNjczZTMzYWEyOWQ1OWY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-05T20:01:12Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-02-05T20:01:12Z"},"message":"revert OPENJPA-401 in 1.0.x - shouldn't add a new flag in a service stream.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@618762 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5b187a9f2a2d1a3de2806b2790d02e7543479e08","url":"https://api.github.com/repos/apache/openjpa/git/trees/5b187a9f2a2d1a3de2806b2790d02e7543479e08"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/78e258706ddda8eee2bfb6b71b673e33aa29d59f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/78e258706ddda8eee2bfb6b71b673e33aa29d59f","html_url":"https://github.com/apache/openjpa/commit/78e258706ddda8eee2bfb6b71b673e33aa29d59f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/78e258706ddda8eee2bfb6b71b673e33aa29d59f/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"304117261f29f94fb4b34fc21c4b82933f0f7a67","url":"https://api.github.com/repos/apache/openjpa/commits/304117261f29f94fb4b34fc21c4b82933f0f7a67","html_url":"https://github.com/apache/openjpa/commit/304117261f29f94fb4b34fc21c4b82933f0f7a67"}],"stats":{"total":37,"additions":8,"deletions":29},"files":[{"sha":"0c9e9509229df8b0b72f7e2255b26aac319849db","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java","status":"modified","additions":8,"deletions":29,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/78e258706ddda8eee2bfb6b71b673e33aa29d59f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java","raw_url":"https://github.com/apache/openjpa/raw/78e258706ddda8eee2bfb6b71b673e33aa29d59f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java?ref=78e258706ddda8eee2bfb6b71b673e33aa29d59f","patch":"@@ -49,7 +49,6 @@\n  * <li><code>file</code></li>\n  * <li><code>schemaFile</code></li>\n  * <li><code>sqlFile</code></li>\n- * <li><code>tmpClassLoader</code></li>\n  * </ul> Of these arguments, only <code>action</code> is required.\n  */\n public class MappingToolTask\n@@ -62,7 +61,6 @@\n     protected String file = null;\n     protected String schemaFile = null;\n     protected String sqlFile = null;\n-    protected boolean tmpClassLoader = true;\n \n     /**\n      * Set the enumerated MappingTool action type.\n@@ -177,28 +175,22 @@ protected void executeOn(String[] files)\n         throws Exception {\n         if (MappingTool.ACTION_IMPORT.equals(flags.action))\n             assertFiles(files);\n-        ClassLoader toolLoader = (ClassLoader) AccessController\n-                .doPrivileged(J2DoPrivHelper\n-                        .getClassLoaderAction(MappingTool.class));\n-        ClassLoader loader = toolLoader;\n-        MultiLoaderClassResolver resolver = new MultiLoaderClassResolver();\n-\n-        if (tmpClassLoader) {\n-            loader = (ClassLoader) AccessController.doPrivileged(J2DoPrivHelper\n-\n-            .newTemporaryClassLoaderAction(getClassLoader()));\n-            resolver.addClassLoader(loader);\n-        }\n-        resolver.addClassLoader(toolLoader);\n \n+        ClassLoader loader =\n+            (ClassLoader) AccessController.doPrivileged(J2DoPrivHelper\n+                    .newTemporaryClassLoaderAction(getClassLoader()));\n+        \n         if (flags.meta && MappingTool.ACTION_ADD.equals(flags.action))\n             flags.metaDataFile = Files.getFile(file, loader);\n         else\n             flags.mappingWriter = Files.getWriter(file, loader);\n-        \n         flags.schemaWriter = Files.getWriter(schemaFile, loader);\n         flags.sqlWriter = Files.getWriter(sqlFile, loader);\n \n+        MultiLoaderClassResolver resolver = new MultiLoaderClassResolver();\n+        resolver.addClassLoader((ClassLoader) AccessController.doPrivileged(\n+            J2DoPrivHelper.getClassLoaderAction(MappingTool.class)));\n+        resolver.addClassLoader(loader);\n         JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\n         conf.setClassResolver(resolver);\n         \n@@ -226,18 +218,5 @@ protected void executeOn(String[] files)\n             return actions;\n         }\n     }\n-\n-    /**\n-     * <P>\n-     * Set whether a temporary ClassLoader should be used by the MappingTool.\n-     * The default value is true\n-     * </P>\n-     * \n-     * @param tmpClassLoader\n-     *            Whether the temporary ClassLoader should be used.\n-     */\n-    public void setTmpClassLoader(boolean tmpClassLoader) {\n-        this.tmpClassLoader = tmpClassLoader;\n-    }\n }\n "}]}

