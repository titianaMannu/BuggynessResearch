{"sha":"794305c2f1372a70cff0071ec71cc70b9ca9f78e","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc5NDMwNWMyZjEzNzJhNzBjZmYwMDcxZWM3MWNjNzBiOWNhOWY3OGU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-05-30T18:10:50Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-05-30T18:10:50Z"},"message":"git-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@661800 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"67f5ab478d17fddcd2329ab6a458a1c77ca107b1","url":"https://api.github.com/repos/apache/openjpa/git/trees/67f5ab478d17fddcd2329ab6a458a1c77ca107b1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/794305c2f1372a70cff0071ec71cc70b9ca9f78e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/794305c2f1372a70cff0071ec71cc70b9ca9f78e","html_url":"https://github.com/apache/openjpa/commit/794305c2f1372a70cff0071ec71cc70b9ca9f78e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/794305c2f1372a70cff0071ec71cc70b9ca9f78e/comments","author":null,"committer":null,"parents":[{"sha":"89b296fd544c25a36d0abb11f6cd0b6333542068","url":"https://api.github.com/repos/apache/openjpa/commits/89b296fd544c25a36d0abb11f6cd0b6333542068","html_url":"https://github.com/apache/openjpa/commit/89b296fd544c25a36d0abb11f6cd0b6333542068"}],"stats":{"total":112,"additions":94,"deletions":18},"files":[{"sha":"4488a3ba7b34db74f38a58da32e983d33de18dc0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","status":"modified","additions":32,"deletions":1,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/794305c2f1372a70cff0071ec71cc70b9ca9f78e/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/794305c2f1372a70cff0071ec71cc70b9ca9f78e/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java?ref=794305c2f1372a70cff0071ec71cc70b9ca9f78e","patch":"@@ -29,6 +29,7 @@\n import org.apache.openjpa.event.RemoteCommitProvider;\n import org.apache.openjpa.kernel.AutoClear;\n import org.apache.openjpa.kernel.AutoDetach;\n+import org.apache.openjpa.kernel.Broker;\n import org.apache.openjpa.kernel.BrokerFactory;\n import org.apache.openjpa.kernel.BrokerImpl;\n import org.apache.openjpa.kernel.ConnectionRetainModes;\n@@ -330,7 +331,37 @@\n      * @since 0.2.5\n      */\n     public void setDataCacheTimeout(Integer timeout);\n-\n+    \n+    /**\n+     * Gets whether entity state is to be refreshed from {@link DataCache}.\n+     * The entities are never refreshed from DataCache if lock is being applied \n+     * (e.g. in a pessimistic transaction) and hence this setting only refers \n+     * to behavior when not locking.\n+     * \n+     * @since 1.1.1\n+     */\n+    public boolean getRefreshFromDataCache();\n+    \n+    /**\n+     * Sets whether entity state is to be refreshed from {@link DataCache}.\n+     * The entities are never refreshed from DataCache if lock is being applied \n+     * (e.g. in a pessimistic transaction) and hence this setting only refers \n+     * to behavior when not locking.\n+     * \n+     * @since 1.1.\n+     */\n+    public void setRefreshFromDataCache(boolean refreshFromDataCache);\n+    \n+    /**\n+     * Sets whether entity state is to be refreshed from {@link DataCache}.\n+     * The entities are never refreshed from DataCache if lock is being applied \n+     * (e.g. in a pessimistic transaction) and hence this setting only refers \n+     * to behavior when not locking.\n+     * \n+     * @since 1.1.1\n+     */\n+    public void setRefreshFromDataCache(Boolean refreshFromDataCache);\n+    \n     /**\n      * The plugin to use for level-2 data store query caching.\n      *"},{"sha":"e7fd3d2e45cdf978bf08e6dde38d69f794e68023","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":21,"deletions":1,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/794305c2f1372a70cff0071ec71cc70b9ca9f78e/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/794305c2f1372a70cff0071ec71cc70b9ca9f78e/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=794305c2f1372a70cff0071ec71cc70b9ca9f78e","patch":"@@ -122,6 +122,7 @@\n     public BooleanValue ignoreChanges;\n     public BooleanValue nontransactionalRead;\n     public BooleanValue nontransactionalWrite;\n+    public BooleanValue refreshFromDataCache;\n     public BooleanValue multithreaded;\n     public StringValue mapping;\n     public PluginValue metaFactoryPlugin;\n@@ -222,7 +223,12 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         queryCachePlugin.setAliases(aliases);\n         queryCachePlugin.setDefault(aliases[0]);\n         queryCachePlugin.setString(aliases[0]);\n-\n+        \n+        refreshFromDataCache = addBoolean(\"RefreshFromDataCache\");\n+        refreshFromDataCache.setDefault(\"false\");\n+        refreshFromDataCache.set(false);\n+        refreshFromDataCache.setDynamic(true);\n+        \n         dynamicDataStructs = addBoolean(\"DynamicDataStructs\");\n         dynamicDataStructs.setDefault(\"false\");\n         dynamicDataStructs.set(false);\n@@ -644,6 +650,20 @@ public void setQueryCache(String queryCache) {\n     public String getQueryCache() {\n         return queryCachePlugin.getString();\n     }\n+    \n+    public boolean getRefreshFromDataCache() {\n+    \treturn refreshFromDataCache.get();\n+    }\n+    \n+    public void setRefreshFromDataCache(boolean flag) {\n+    \trefreshFromDataCache.set(flag);\n+    }\n+    \n+    public void setRefreshFromDataCache(Boolean flag) {\n+    \tif (flag != null) {\n+    \t\trefreshFromDataCache.set(flag.booleanValue());\n+    \t}\n+    }\n \n     public boolean getDynamicDataStructs() {\n         return dynamicDataStructs.get();"},{"sha":"999129ec113b6141c6b2690d9b2c0d5098d84d9a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/794305c2f1372a70cff0071ec71cc70b9ca9f78e/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/794305c2f1372a70cff0071ec71cc70b9ca9f78e/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=794305c2f1372a70cff0071ec71cc70b9ca9f78e","patch":"@@ -423,8 +423,12 @@ public boolean load(OpenJPAStateManager sm, BitSet fields,\n \n     public Collection loadAll(Collection sms, PCState state, int load,\n     \t\tFetchConfiguration fetch, Object edata) {\n-        if (load == StoreManager.FORCE_LOAD_REFRESH || isLocking(fetch))\n-            return super.loadAll(sms, state, load, fetch, edata);\n+    \tif (isLocking(fetch) || \n+    \t   (!isLocking(fetch) &&\n+    \t\t(load == StoreManager.FORCE_LOAD_REFRESH)\n+    \t\t&& !_ctx.getConfiguration().getRefreshFromDataCache())) {\n+    \t       return super.loadAll(sms, state, load, fetch, edata);\n+    \t}\n \n         Map unloaded = null;\n         List smList = null;"},{"sha":"e791df985b926ee878ca19222870550b24f8239c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java","status":"modified","additions":35,"deletions":14,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/794305c2f1372a70cff0071ec71cc70b9ca9f78e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java","raw_url":"https://github.com/apache/openjpa/raw/794305c2f1372a70cff0071ec71cc70b9ca9f78e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java?ref=794305c2f1372a70cff0071ec71cc70b9ca9f78e","patch":"@@ -286,10 +286,11 @@ public void testInconsitentBidirectionalRelationIsNotPreservedWithoutDataCache()\n \r\n \t */\r\n \tpublic void verifyRefresh(boolean useDataCache, LockModeType lock, \r\n-\t\t\tboolean makeDirtyBeforeRefresh, String expected) {\r\n+\t\t\tboolean makeDirtyBeforeRefresh, boolean refreshFromDataCache, \r\n+\t\t\tString expected) {\r\n \t\tOpenJPAEntityManagerFactorySPI emf = (useDataCache)\r\n \t\t\t? emfWithDataCache : emfWithoutDataCache;\r\n-\t\t\t\r\n+\t\temf.getConfiguration().setRefreshFromDataCache(refreshFromDataCache);\r\n \t\tOpenJPAEntityManagerSPI em = emf.createEntityManager();\r\n         \r\n \t\tem.getTransaction().begin();\r\n@@ -364,39 +365,59 @@ String getExpectedMarker(boolean useDataCache, LockModeType lock,\n \t}\r\n \t\r\n \tpublic void testDirtyRefreshWithNoLockHitsDatabase() {\r\n-\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, DIRTY, MARKER_DATABASE);\r\n+\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, DIRTY, false, MARKER_DATABASE);\r\n+\t}\r\n+\t\r\n+\tpublic void testDirtyRefreshWithNoLockHitsDataCache() {\r\n+\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, DIRTY, true, MARKER_DATACACHE);\r\n \t}\r\n \t\r\n \tpublic void testCleanRefreshWithNoLockHitsDatabase() {\r\n-\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, !DIRTY, MARKER_DATABASE);\r\n+\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, !DIRTY, false, MARKER_DATABASE);\r\n+\t}\r\n+\t\r\n+\tpublic void testCleanRefreshWithNoLockHitsDataCache() {\r\n+\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, !DIRTY, true, MARKER_DATACACHE);\r\n \t}\r\n \t\r\n \tpublic void testDirtyRefreshWithReadLockHitsDatabase() {\r\n-\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, DIRTY, MARKER_DATABASE);\r\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, DIRTY, true, MARKER_DATABASE);\r\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, DIRTY, false, MARKER_DATABASE);\r\n \t}\r\n \t\r\n \tpublic void testCleanRefreshWithReadLockHitsDatabase() {\r\n-\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, !DIRTY, MARKER_DATABASE);\r\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, !DIRTY, true, MARKER_DATABASE);\r\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, !DIRTY, false, MARKER_DATABASE);\r\n \t}\r\n \t\r\n \tpublic void testDirtyRefreshWithWriteLockHitsDatabase() {\r\n-\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, DIRTY, MARKER_DATABASE);\r\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, DIRTY, true, MARKER_DATABASE);\r\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, DIRTY, false, MARKER_DATABASE);\r\n \t}\r\n \t\r\n \tpublic void testCleanRefreshWithWriteLockHitsDatabase() {\r\n-\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, !DIRTY, MARKER_DATABASE);\r\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, !DIRTY, true, MARKER_DATABASE);\r\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, !DIRTY, false, MARKER_DATABASE);\r\n \t}\r\n \t\r\n \tpublic void testDirtyRefreshWithoutDataCacheAlwaysHitsDatabase() {\r\n-\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, DIRTY, MARKER_DATABASE);\r\n-\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, DIRTY, MARKER_DATABASE);\r\n-\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, DIRTY, MARKER_DATABASE);\r\n+\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, DIRTY, true, MARKER_DATABASE);\r\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, DIRTY, true, MARKER_DATABASE);\r\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, DIRTY, true, MARKER_DATABASE);\r\n+\t\t\r\n+\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, DIRTY, false, MARKER_DATABASE);\r\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, DIRTY, false, MARKER_DATABASE);\r\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, DIRTY, false, MARKER_DATABASE);\r\n \t}\r\n \t\r\n \tpublic void testCleanRefreshWithoutDataCacheAlwaysHitsDatabase() {\r\n-\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, !DIRTY, MARKER_DATABASE);\r\n-\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, !DIRTY, MARKER_DATABASE);\r\n-\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, !DIRTY, MARKER_DATABASE);\r\n+\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, !DIRTY, true, MARKER_DATABASE);\r\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, !DIRTY, true, MARKER_DATABASE);\r\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, !DIRTY, true, MARKER_DATABASE);\r\n+\t\t\r\n+\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, !DIRTY, false, MARKER_DATABASE);\r\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, !DIRTY, false, MARKER_DATABASE);\r\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, !DIRTY, false, MARKER_DATABASE);\r\n \t}\r\n \t\r\n \t/**\r"}]}

