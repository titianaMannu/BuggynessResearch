{"sha":"79a4b76fdf0038f2460f6a5c828ab1e04ddf67ae","node_id":"MDY6Q29tbWl0MjA2MzY0Ojc5YTRiNzZmZGYwMDM4ZjI0NjBmNmE1YzgyOGFiMWUwNGRkZjY3YWU=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-10-15T23:35:42Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-10-15T23:35:42Z"},"message":"OPENJPA-1352: fix instantiation of proxyCollection/Map for Arrays.asList\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@825700 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"11dd0324825368663f2dddbb7fc13953a29d0c76","url":"https://api.github.com/repos/apache/openjpa/git/trees/11dd0324825368663f2dddbb7fc13953a29d0c76"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/79a4b76fdf0038f2460f6a5c828ab1e04ddf67ae","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/79a4b76fdf0038f2460f6a5c828ab1e04ddf67ae","html_url":"https://github.com/apache/openjpa/commit/79a4b76fdf0038f2460f6a5c828ab1e04ddf67ae","comments_url":"https://api.github.com/repos/apache/openjpa/commits/79a4b76fdf0038f2460f6a5c828ab1e04ddf67ae/comments","author":null,"committer":null,"parents":[{"sha":"65d2ea8b1922cae9f68dddbdcd1e8e1212a62ba4","url":"https://api.github.com/repos/apache/openjpa/commits/65d2ea8b1922cae9f68dddbdcd1e8e1212a62ba4","html_url":"https://github.com/apache/openjpa/commit/65d2ea8b1922cae9f68dddbdcd1e8e1212a62ba4"}],"stats":{"total":108,"additions":96,"deletions":12},"files":[{"sha":"515b93510c38f7decad1c422aa0138927ecc32d2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","status":"modified","additions":38,"deletions":5,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/79a4b76fdf0038f2460f6a5c828ab1e04ddf67ae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/79a4b76fdf0038f2460f6a5c828ab1e04ddf67ae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java?ref=79a4b76fdf0038f2460f6a5c828ab1e04ddf67ae","patch":"@@ -32,7 +32,6 @@\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.ValueMetaData;\n-import org.apache.openjpa.util.Exceptions;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.UserException;\n \n@@ -318,7 +317,7 @@ private void replaceCollection(AttachManager manager, Collection frmc,\n      */\n     protected Collection attachCollection(AttachManager manager,\n         Collection orig, OpenJPAStateManager sm, FieldMetaData fmd) {\n-        Collection coll = copyCollection(manager, orig, fmd);\n+        Collection coll = copyCollection(manager, orig, fmd, sm);\n         ValueMetaData vmd = fmd.getElement();\n         if (!vmd.isDeclaredTypePC())\n             return coll;\n@@ -346,6 +345,40 @@ private Collection copyCollection(AttachManager manager, Collection orig,\n             throw new UserException(_loc.get(\"not-copyable\", fmd));\n         return coll;\n     }\n+    \n+    /**\n+     * Copies the given collection.\n+     */\n+    private Collection copyCollection(AttachManager manager, Collection orig,\n+        FieldMetaData fmd, OpenJPAStateManager sm) {\n+        if (orig == null)\n+            throw new UserException(_loc.get(\"not-copyable\", fmd));\n+        try {\n+            return copyCollection(manager, orig, fmd);\n+        } catch (Exception e) {\n+            Collection coll = (Collection) sm.newFieldProxy(fmd.getIndex());\n+            coll.addAll(orig);\n+            return coll;\n+        }\n+    }\n+\n+    /**\n+     * Copies the given map.\n+     */\n+    private Map copyMap(AttachManager manager, Map orig,\n+        FieldMetaData fmd, OpenJPAStateManager sm) {\n+        if (orig == null)\n+            throw new UserException(_loc.get(\"not-copyable\", fmd));\n+        try {\n+            return manager.getProxyManager().copyMap(orig);\n+        } catch (Exception e) {\n+            Map map = (Map) sm.newFieldProxy(fmd.getIndex());\n+            Set keys = orig.keySet();\n+            for (Object key : keys) \n+                map.put(key, orig.get(key));\n+            return map;\n+        }\n+    }\n \n     /**\n      * Returns an attached version of the <code>frml</code>\n@@ -366,7 +399,7 @@ private Collection replaceList(AttachManager manager, Collection frml,\n                 // if there's an incompatibility, just return a copy of frml\n                 // (it's already copied if we attached it)\n                 if (!equals(frmi.next(), toi.next(), pc))\n-                    return (pc) ? frml : copyCollection(manager, frml, fmd);\n+                    return (pc) ? frml : copyCollection(manager, frml, fmd, sm);\n             }\n \n             // just add the extra elements in frml to tol and return tol\n@@ -376,7 +409,7 @@ private Collection replaceList(AttachManager manager, Collection frml,\n         }\n \n         // the lists are different; just make sure frml is copied and return it\n-        return (pc) ? frml : copyCollection(manager, frml, fmd);\n+        return (pc) ? frml : copyCollection(manager, frml, fmd, sm);\n     }\n \n     /**\n@@ -421,7 +454,7 @@ private void replaceMap(AttachManager manager, Map frmm, Map tom,\n      */\n     protected Map attachMap(AttachManager manager, Map orig,\n         OpenJPAStateManager sm, FieldMetaData fmd) {\n-        Map map = manager.getProxyManager().copyMap(orig);\n+        Map map = copyMap(manager, orig, fmd, sm);\n         if (map == null)\n             throw new UserException(_loc.get(\"not-copyable\", fmd));\n "},{"sha":"309d87fef34b4924a684ae52bde0c231a7dc3649","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","status":"modified","additions":14,"deletions":7,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/79a4b76fdf0038f2460f6a5c828ab1e04ddf67ae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","raw_url":"https://github.com/apache/openjpa/raw/79a4b76fdf0038f2460f6a5c828ab1e04ddf67ae/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java?ref=79a4b76fdf0038f2460f6a5c828ab1e04ddf67ae","patch":"@@ -810,11 +810,15 @@ private void embed(ValueMetaData vmd, Object[] arr) {\n     private Collection embed(ValueMetaData vmd, Collection orig) {\n         // we have to copy to get a collection of the right type and size,\n         // though we immediately clear it\n-        Collection coll = getProxyManager().copyCollection(orig);\n-        if (coll == null)\n+        if (orig == null)\n             throw new UserException(_loc.get(\"not-copyable\",\n                 vmd.getFieldMetaData()));\n-\n+        Collection coll = null;\n+        try {\n+            coll = getProxyManager().copyCollection(orig);\n+        } catch (Exception e) {\n+            coll = (Collection) _sm.newFieldProxy(vmd.getFieldMetaData().getIndex());\n+        }\n         coll.clear();\n         for (Iterator itr = orig.iterator(); itr.hasNext();)\n             coll.add(embed(vmd, itr.next()));\n@@ -832,12 +836,15 @@ private Map embed(FieldMetaData fmd, Map orig, boolean keyEmbed,\n         // if we have to replace keys, we need to copy the map; otherwise\n         // we can mutate the values directly\n         if (keyEmbed) {\n+            if (orig == null)\n+                throw new UserException(_loc.get(\"not-copyable\", fmd));\n             // we have to copy to get a collection of the right type and size,\n             // though we immediately clear it\n-            map = getProxyManager().copyMap(orig);\n-            if (map == null)\n-                throw new UserException(_loc.get(\"not-copyable\", fmd));\n-\n+            try {\n+                map = getProxyManager().copyMap(orig);\n+            } catch (Exception e) {\n+                map = (Map) _sm.newFieldProxy(fmd.getIndex());\n+            }\n             map.clear();\n             Object key, val;\n             for (Iterator itr = orig.entrySet().iterator(); itr.hasNext();) {"},{"sha":"7427b1f02a6868667d8f3075d1a3c15c58c083f3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Coll_Embed_Embed.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/79a4b76fdf0038f2460f6a5c828ab1e04ddf67ae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Coll_Embed_Embed.java","raw_url":"https://github.com/apache/openjpa/raw/79a4b76fdf0038f2460f6a5c828ab1e04ddf67ae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Coll_Embed_Embed.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Coll_Embed_Embed.java?ref=79a4b76fdf0038f2460f6a5c828ab1e04ddf67ae","patch":"@@ -74,6 +74,10 @@ public void setName(String name) {\n         return embeds;\n     }\n     \n+    public void setEmbeds(List<Embed_Embed> embeds) {\n+        this.embeds = embeds;\n+    }\n+\n     public void addEmbed(Embed_Embed embed) {\n         embeds.add(embed);\n     }"},{"sha":"5ff915c0ce5f9d1335e24fdf46755e5b53fab211","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","status":"modified","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/79a4b76fdf0038f2460f6a5c828ab1e04ddf67ae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","raw_url":"https://github.com/apache/openjpa/raw/79a4b76fdf0038f2460f6a5c828ab1e04ddf67ae/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java?ref=79a4b76fdf0038f2460f6a5c828ab1e04ddf67ae","patch":"@@ -21,6 +21,7 @@\n import java.io.IOException;\n import java.sql.SQLException;\n import java.sql.Timestamp;\n+import java.util.Arrays;\n import java.util.Calendar;\n import java.util.Collection;\n import java.util.Date;\n@@ -2916,5 +2917,44 @@ public void queryEntityA_Embed_Complex(EntityManager em) {\n             em.close();\n         }\n     }\n+\n+    /*\n+     * EntityA_Embed_Complex routines\n+     */\n+    public void testEmbeddableCollUsingArraysAsList() {\n+        getLog().trace(\"testEmbeddableCollUsingArraysAsList() - entered\");\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        Embed_Embed[] embedArray = new Embed_Embed[5];\n+        for (int i = 1; i < 5; i++) {\n+          embedArray[i] = new Embed_Embed();\n+          embedArray[i].setIntVal1(i);\n+        }\n+        \n+        List embedList = Arrays.asList(embedArray);\n+        EntityA_Coll_Embed_Embed a1 = new EntityA_Coll_Embed_Embed();\n+        a1.setId(1);\n+        a1.setAge(1);\n+        a1.setName(\"name\" + 1);\n+        a1.setEmbeds(embedList);\n+        \n+        em.persist(a1);\n+        tran.begin();\n+        em.flush();\n+        tran.commit();\n+\n+        //update\n+        tran.begin();\n+        Embed_Embed embed1 = new Embed_Embed();\n+        embed1.setIntVal1(100);\n+        a1.addEmbed(embed1);\n+        tran.commit();\n+        em.clear();\n+        \n+        //find\n+        EntityA_Coll_Embed_Embed findA = em.find(EntityA_Coll_Embed_Embed.class, 1);\n+        assertEquals(6, findA.getEmbeds().size());\n+        em.close();\n+    }\n     \n }"}]}

