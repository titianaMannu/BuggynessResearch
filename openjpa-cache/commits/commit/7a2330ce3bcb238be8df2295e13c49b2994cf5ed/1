{"sha":"7a2330ce3bcb238be8df2295e13c49b2994cf5ed","node_id":"MDY6Q29tbWl0MjA2MzY0OjdhMjMzMGNlM2JjYjIzOGJlOGRmMjI5NWUxM2M0OWIyOTk0Y2Y1ZWQ=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-02-14T17:53:13Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-02-14T17:53:13Z"},"message":"Compare Configuration instances on their full properties, including defaults.\nAlso serialize the full properties because product derivations aren't re-run\non deserialize, so we need to know the complete defaults, etc.  We still track\nthe user-given properties separately so they can be used in factory pooling.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@507643 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2d54bdae68261538cb22c23db27c88d049911206","url":"https://api.github.com/repos/apache/openjpa/git/trees/2d54bdae68261538cb22c23db27c88d049911206"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7a2330ce3bcb238be8df2295e13c49b2994cf5ed","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7a2330ce3bcb238be8df2295e13c49b2994cf5ed","html_url":"https://github.com/apache/openjpa/commit/7a2330ce3bcb238be8df2295e13c49b2994cf5ed","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7a2330ce3bcb238be8df2295e13c49b2994cf5ed/comments","author":null,"committer":null,"parents":[{"sha":"611932c86bbb6368de2e48069144cb9b7b28e3a6","url":"https://api.github.com/repos/apache/openjpa/commits/611932c86bbb6368de2e48069144cb9b7b28e3a6","html_url":"https://github.com/apache/openjpa/commit/611932c86bbb6368de2e48069144cb9b7b28e3a6"}],"stats":{"total":104,"additions":58,"deletions":46},"files":[{"sha":"5775e3bda49c9897276f6364f8ebf45cf6a1ef83","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7a2330ce3bcb238be8df2295e13c49b2994cf5ed/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/7a2330ce3bcb238be8df2295e13c49b2994cf5ed/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=7a2330ce3bcb238be8df2295e13c49b2994cf5ed","patch":"@@ -58,8 +58,7 @@\n         (AbstractBrokerFactory.class);\n \n     // static mapping of configurations to pooled broker factories\n-    private static final Map _pool = Collections.synchronizedMap\n-        (new HashMap());\n+    private static final Map _pool = Collections.synchronizedMap(new HashMap());\n \n     // configuration\n     private final OpenJPAConfiguration _conf;\n@@ -95,6 +94,11 @@ public static AbstractBrokerFactory getPooledFactory(\n         return (AbstractBrokerFactory) _pool.get(toPoolKey(conf));\n     }\n \n+    /**\n+     * Return an internal factory pool key for the given configuration.\n+     * We use the conf properties as given by the user because that is what's\n+     * passed to {@link #getPooledFactory} when looking for an existing factory.\n+     */\n     private static Map toPoolKey(OpenJPAConfiguration conf) {\n         return conf.toProperties(false);\n     }"},{"sha":"c81edeb8547bfcc68f774fcd791b79fea948a5da","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":52,"deletions":44,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/7a2330ce3bcb238be8df2295e13c49b2994cf5ed/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/7a2330ce3bcb238be8df2295e13c49b2994cf5ed/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=7a2330ce3bcb238be8df2295e13c49b2994cf5ed","patch":"@@ -107,6 +107,7 @@\n     private String _product = null;\n     private boolean _readOnly = false;\n     private Map _props = null;\n+    private Map _fullProps = null;\n     private boolean _globals = false;\n     private String _auto = null;\n     private final List _vals = new ArrayList();\n@@ -310,7 +311,7 @@ public void removePropertyChangeListener(PropertyChangeListener listener) {\n     }\n \n     public void valueChanged(Value val) {\n-        if (_changeSupport == null && _props == null)\n+        if (_changeSupport == null && _props == null && _fullProps == null)\n             return;\n \n         String newString = val.getString();\n@@ -319,12 +320,15 @@ public void valueChanged(Value val) {\n                 newString);\n \n         // keep cached props up to date\n-        if (_props != null) {\n-            if (newString == null)\n-                Configurations.removeProperty(val.getProperty(), _props);\n-            else if (Configurations.containsProperty(val.getProperty(), _props)\n-                || val.getDefault() == null\n+        if (newString == null) {\n+            Configurations.removeProperty(val.getProperty(), _props);\n+            Configurations.removeProperty(val.getProperty(), _fullProps);\n+        } else { \n+            put(_fullProps, val, newString); \n+            if (_props != null && _props != _fullProps \n+                && (val.getDefault() == null \n                 || !val.getDefault().equals(newString))\n+                || Configurations.containsProperty(val.getProperty(), _props))\n                 put(_props, val, newString);\n         }\n     }\n@@ -566,33 +570,30 @@ public Map toProperties(boolean storeDefaults) {\n         // clone properties before making any modifications; we need to keep\n         // the internal properties instance consistent to maintain equals and\n         // hashcode contracts\n+        Map map = (storeDefaults) ? _fullProps : _props;\n         Map clone;\n-        if (_props == null)\n+        if (map == null)\n             clone = new HashMap();\n-        else if (_props instanceof Properties)\n-            clone = (Map) ((Properties) _props).clone();\n+        else if (map instanceof Properties)\n+            clone = (Map) ((Properties) map).clone();\n         else\n-            clone = new HashMap(_props);\n+            clone = new HashMap(map);\n \n-        // if no existing properties or the properties should contain entries\n-        // with default values, add values to properties\n-        if (_props == null || storeDefaults) {\n+        if (map == null) {\n             Value val;\n             String str;\n             for (int i = 0; i < _vals.size(); i++) {\n-                // if key in existing properties, we already know value is up\n-                // to date\n                 val = (Value) _vals.get(i);\n-                if (_props != null && Configurations.containsProperty\n-                    (val.getProperty(), _props))\n-                    continue;\n-\n                 str = val.getString();\n                 if (str != null && (storeDefaults\n                     || !str.equals(val.getDefault())))\n                     put(clone, val, str);\n             }\n-            if (_props == null)\n+            if (storeDefaults) {\n+                _fullProps = new HashMap(clone);\n+                if (_props == null)\n+                    _props = _fullProps;\n+            } else\n                 _props = new HashMap(clone);\n         }\n         return clone;\n@@ -605,15 +606,13 @@ public void fromProperties(Map map) {\n \n         // if the only previous call was to load defaults, forget them.\n         // this way we preserve the original formatting of the user's props\n-        // instead of the defaults.  this is important for caching on\n-        // configuration objects\n+        // instead of the defaults.\n         if (_globals) {\n             _props = null;\n             _globals = false;\n         }\n \n         Map remaining = new HashMap(map);\n-        boolean ser = true;\n         Value val;\n         Object o;\n         for (int i = 0; i < _vals.size(); i++) {\n@@ -625,10 +624,8 @@ public void fromProperties(Map map) {\n             if (o instanceof String) {\n                 if (!StringUtils.equals((String) o, val.getString()))\n                     val.setString((String) o);\n-            } else {\n-                ser &= o instanceof Serializable;\n+            } else\n                 val.setObject(o);\n-            }\n             Configurations.removeProperty(val.getProperty(), remaining);\n         }\n         \n@@ -639,16 +636,15 @@ public void fromProperties(Map map) {\n         \n         // now warn if there are any remaining properties that there\n         // is an unhandled prop\n-        Map.Entry entry;\n-        for (Iterator itr = remaining.entrySet().iterator(); itr.hasNext();) {\n-            entry = (Map.Entry) itr.next();\n-            if (entry.getKey() != null)\n-                warnInvalidProperty((String) entry.getKey());\n-            ser &= entry.getValue() instanceof Serializable;\n+        String key;\n+        for (Iterator itr = remaining.keySet().iterator(); itr.hasNext();) {\n+            key = (String) itr.next();\n+            if (key != null)\n+                warnInvalidProperty(key);\n         }\n \n-        // cache properties\n-        if (_props == null && ser)\n+        // cache user-formatted properties\n+        if (_props == null || _props == _fullProps)\n             _props = map;\n     }\n \n@@ -658,6 +654,8 @@ public void fromProperties(Map map) {\n      * this will account for the property prefix.\n      */\n     private void put(Map map, Value val, Object o) {\n+        if (map == null)\n+            return;\n         Object key = val.getLoadKey();\n         if (key == null)\n             key = \"openjpa.\" + val.getProperty();\n@@ -668,6 +666,8 @@ private void put(Map map, Value val, Object o) {\n      * Look up the given value, testing all available prefixes.\n      */\n     private Object get(Map map, Value val, boolean setLoadKey) {\n+        if (map == null)\n+            return null;\n         String key = ProductDerivations.getConfigurationKey(\n             val.getProperty(), map);\n         if (map.containsKey(key) && setLoadKey)\n@@ -791,8 +791,9 @@ public boolean equals(Object other) {\n \n         // compare properties\n         ConfigurationImpl conf = (ConfigurationImpl) other;\n-        Map p1 = (_props == null) ? toProperties(false) : _props;\n-        Map p2 = (conf._props == null) ? conf.toProperties(false) : conf._props;\n+        Map p1 = (_fullProps == null) ? toProperties(true) : _fullProps;\n+        Map p2 = (conf._fullProps == null) ? conf.toProperties(true) \n+            : conf._fullProps;\n         return p1.equals(p2);\n     }\n \n@@ -801,9 +802,9 @@ public boolean equals(Object other) {\n      * {@link #toProperties}.\n      */\n     public int hashCode() {\n-        if (_props != null)\n-            return _props.hashCode();\n-        return toProperties(false).hashCode();\n+        if (_fullProps != null)\n+            return _fullProps.hashCode();\n+        return toProperties(true).hashCode();\n     }\n \n     /**\n@@ -849,7 +850,11 @@ public static String toXMLName(String propName) {\n      */\n     public void readExternal(ObjectInput in)\n         throws IOException, ClassNotFoundException {\n-        fromProperties((Map) in.readObject());\n+        Map fullProps = (Map) in.readObject();\n+        Map props = (Map) in.readObject();\n+        fromProperties(fullProps);\n+        _fullProps = fullProps;\n+        _props = props;\n         _globals = in.readBoolean();\n     }\n \n@@ -858,10 +863,11 @@ public void readExternal(ObjectInput in)\n      * the properties returned by {@link #toProperties}.\n      */\n     public void writeExternal(ObjectOutput out) throws IOException {\n-        if (_props != null)\n-            out.writeObject(_props);\n+        if (_fullProps != null)\n+            out.writeObject(_fullProps);\n         else\n-            out.writeObject(toProperties(false));\n+            out.writeObject(toProperties(true));\n+        out.writeObject(_props);\n         out.writeBoolean(_globals);\n     }\n \n@@ -876,7 +882,9 @@ public Object clone() {\n             ConfigurationImpl clone = (ConfigurationImpl) cons.newInstance\n                 (new Object[]{ Boolean.FALSE });\n             clone._globals = _globals;\n-            clone.fromProperties(toProperties(true));\n+            Map map = new HashMap(toProperties(true));\n+            clone.fromProperties(map);\n+            clone._fullProps = map;\n             return clone;\n         } catch (RuntimeException re) {\n             throw re;"}]}

