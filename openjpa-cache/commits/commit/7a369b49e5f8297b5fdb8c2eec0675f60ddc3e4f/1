{"sha":"7a369b49e5f8297b5fdb8c2eec0675f60ddc3e4f","node_id":"MDY6Q29tbWl0MjA2MzY0OjdhMzY5YjQ5ZTVmODI5N2I1ZmRiOGMyZWVjMDY3NWY2MGRkYzNlNGY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-06-15T21:44:35Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-06-15T21:44:35Z"},"message":"OPENJPA-1678: add printParameters property to prevent SQL parameter values from being logged in exceptions or trace\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@955062 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"260532ca55c5d1d9d05cf0c2ed593ed22868e77a","url":"https://api.github.com/repos/apache/openjpa/git/trees/260532ca55c5d1d9d05cf0c2ed593ed22868e77a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7a369b49e5f8297b5fdb8c2eec0675f60ddc3e4f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7a369b49e5f8297b5fdb8c2eec0675f60ddc3e4f","html_url":"https://github.com/apache/openjpa/commit/7a369b49e5f8297b5fdb8c2eec0675f60ddc3e4f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7a369b49e5f8297b5fdb8c2eec0675f60ddc3e4f/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"f90ea1c74395952718fc070048c3560d8f5c32f5","url":"https://api.github.com/repos/apache/openjpa/commits/f90ea1c74395952718fc070048c3560d8f5c32f5","html_url":"https://github.com/apache/openjpa/commit/f90ea1c74395952718fc070048c3560d8f5c32f5"}],"stats":{"total":193,"additions":192,"deletions":1},"files":[{"sha":"42d08d0e1ba505812e1f9199dcd7954f915b47ef","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","status":"modified","additions":22,"deletions":1,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/7a369b49e5f8297b5fdb8c2eec0675f60ddc3e4f/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","raw_url":"https://github.com/apache/openjpa/raw/7a369b49e5f8297b5fdb8c2eec0675f60ddc3e4f/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java?ref=7a369b49e5f8297b5fdb8c2eec0675f60ddc3e4f","patch":"@@ -84,6 +84,7 @@\n     private int _warningAction = WARN_IGNORE;\n     private SQLWarningHandler _warningHandler;\n     private boolean _trackParameters = true;\n+    private boolean _printParameters = false;\n \n     /**\n      * If set to <code>true</code>, pretty-print SQL by running it\n@@ -141,6 +142,21 @@ public boolean getTrackParameters() {\n         return _trackParameters;\n     }\n \n+    /**\n+     * <p>\n+     * Whether parameter values will be printed in exception messages or in trace. This is different from\n+     * trackParameters which controls whether OpenJPA will track parameters internally (visible while debugging and used\n+     * in batching).\n+     * </p>\n+     */\n+    public boolean getPrintParameters() {\n+        return _printParameters;\n+    }\n+\n+    public void setPrintParameters(boolean printParameters) {\n+        _printParameters = printParameters;\n+    }\n+\n     /**\n      * What to do with SQL warnings.\n      */\n@@ -1129,7 +1145,12 @@ protected void appendInfo(StringBuffer buf) {\n                 if (_params != null && !_params.isEmpty()) {\n                     paramBuf = new StringBuffer();\n                     for (Iterator itr = _params.iterator(); itr.hasNext();) {\n-                        paramBuf.append(itr.next());\n+                        if(_printParameters) { \n+                            paramBuf.append(itr.next());\n+                        } else {\n+                            paramBuf.append(\"?\");\n+                            itr.next();\n+                        }\n                         if (itr.hasNext())\n                             paramBuf.append(\", \");\n                     }"},{"sha":"01ce72aefe5fdd32148bd048ad8687bb315470d7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/7a369b49e5f8297b5fdb8c2eec0675f60ddc3e4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java","raw_url":"https://github.com/apache/openjpa/raw/7a369b49e5f8297b5fdb8c2eec0675f60ddc3e4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java?ref=7a369b49e5f8297b5fdb8c2eec0675f60ddc3e4f","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.exception;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+/**\n+ * A Simple entity for testing. Has a version field for testing optimistic\n+ * concurrent usage.\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+public class PObject {\n+\t@Id\n+\tprivate long id;\n+\tprivate String name;\n+\t@Version\n+\tprivate int version;\n+\t\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\t\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\t\n+\tpublic void setId(long id) {\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic long getId() {\n+\t\treturn id;\n+\t}\n+\t\n+\tpublic int getVersion() {\n+\t\treturn version;\n+\t}\n+}"},{"sha":"9267d7d3b9b4030d0ba60e3458ff3610350bd74c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestParameterLogging.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/7a369b49e5f8297b5fdb8c2eec0675f60ddc3e4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestParameterLogging.java","raw_url":"https://github.com/apache/openjpa/raw/7a369b49e5f8297b5fdb8c2eec0675f60ddc3e4f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestParameterLogging.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestParameterLogging.java?ref=7a369b49e5f8297b5fdb8c2eec0675f60ddc3e4f","patch":"@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.exception;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.util.regex.Pattern;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.EntityTransaction;\n+import javax.persistence.RollbackException;\n+\n+import org.apache.openjpa.persistence.test.PersistenceTestCase;\n+\n+public class TestParameterLogging extends PersistenceTestCase {\n+\n+    String _regex = \".*params=.*1,.*]\";\n+\n+    /*\n+     * Persist the same row twice in the same transaction - will throw an exception with the failing SQL statement\n+     */\n+    private RollbackException getRollbackException(Object... props) {\n+        EntityManagerFactory emf = createEMF(props);\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+\n+        PObject p1, p2;\n+        p1 = new PObject();\n+        p2 = new PObject();\n+\n+        p1.setId(1);\n+        p2.setId(1);\n+\n+        try {\n+            tran.begin();\n+            em.persist(p1);\n+            em.persist(p2);\n+            tran.commit();\n+            em.close();\n+            fail(\"Expected a RollbackException\");\n+            return null;\n+        } catch (RollbackException re) {\n+            return re;\n+        } finally {\n+            if (tran.isActive()) {\n+                tran.rollback();\n+            }\n+            if (em.isOpen()) {\n+                em.close();\n+            }\n+            if (emf.isOpen()) {\n+                emf.close();\n+            }\n+        }\n+    }\n+\n+    /*\n+     * Ensure that parameter values are not included in exception text by default.\n+     */\n+    public void testNoParamsByDefault() {\n+        RollbackException e = getRollbackException(PObject.class, CLEAR_TABLES);\n+\n+        assertFalse(Pattern.matches(_regex, e.toString()));\n+        Throwable nested = e.getCause();\n+        while (nested != null) {\n+            if (Pattern.matches(\".*INSERT.*\", nested.toString())) {\n+                // only check if the message contains the insert statement.\n+                assertFalse(Pattern.matches(_regex, nested.toString()));\n+            }\n+            nested = nested.getCause();\n+        }\n+    }\n+\n+    /*\n+     * If the EMF is created with PrintParameters=true the parameter values will be logged in exception text.\n+     */\n+    public void testParamsEnabledByConfig() {\n+        RollbackException e =\n+            getRollbackException(PObject.class, CLEAR_TABLES, \"openjpa.ConnectionFactoryProperties\",\n+                \"PrintParameters=true\");\n+        assertFalse(Pattern.matches(_regex, e.toString()));\n+        Throwable nested = e.getCause();\n+        assertNotNull(nested); // expecting at least one nested exception.\n+        while (nested != null) {\n+            if (Pattern.matches(\".*INSERT.*\", nested.toString())) {\n+                // only check if the message contains the insert statement.\n+                assertTrue(Pattern.matches(_regex, nested.toString()));\n+            }\n+            nested = nested.getCause();\n+        }\n+    }\n+}"}]}

