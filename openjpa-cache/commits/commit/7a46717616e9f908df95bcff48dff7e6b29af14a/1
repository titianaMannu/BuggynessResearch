{"sha":"7a46717616e9f908df95bcff48dff7e6b29af14a","node_id":"MDY6Q29tbWl0MjA2MzY0OjdhNDY3MTc2MTZlOWY5MDhkZjk1YmNmZjQ4ZGZmN2U2YjI5YWYxNGE=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-10-21T22:45:36Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2009-10-21T22:45:36Z"},"message":"OPENJPA-859: Restructured testcase. Minor formatting change.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@828242 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"601df4b34e2b2153f3e4ebc9b6f992bc074c12d1","url":"https://api.github.com/repos/apache/openjpa/git/trees/601df4b34e2b2153f3e4ebc9b6f992bc074c12d1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7a46717616e9f908df95bcff48dff7e6b29af14a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7a46717616e9f908df95bcff48dff7e6b29af14a","html_url":"https://github.com/apache/openjpa/commit/7a46717616e9f908df95bcff48dff7e6b29af14a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7a46717616e9f908df95bcff48dff7e6b29af14a/comments","author":null,"committer":null,"parents":[{"sha":"721c6ce21193757def7294b3bf725baf0c558057","url":"https://api.github.com/repos/apache/openjpa/commits/721c6ce21193757def7294b3bf725baf0c558057","html_url":"https://github.com/apache/openjpa/commit/721c6ce21193757def7294b3bf725baf0c558057"}],"stats":{"total":48,"additions":26,"deletions":22},"files":[{"sha":"8324789b7e0f5b5e715b618dc5c9cd59f2f69ba8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestMixedMappingLocation.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/7a46717616e9f908df95bcff48dff7e6b29af14a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestMixedMappingLocation.java","raw_url":"https://github.com/apache/openjpa/raw/7a46717616e9f908df95bcff48dff7e6b29af14a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestMixedMappingLocation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/TestMixedMappingLocation.java?ref=7a46717616e9f908df95bcff48dff7e6b29af14a","patch":"@@ -18,20 +18,17 @@\n  */\n package org.apache.openjpa.persistence;\n \n-import javax.persistence.Entity;\n-\n import org.apache.openjpa.persistence.entity.MixedMappingLocation;\n import org.apache.openjpa.persistence.entity.MixedMappingLocationEmbeddedId;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n // org.apache.openjpa.persistence.TestMixedMappingLocation\n-@Entity\n public class TestMixedMappingLocation extends SingleEMFTestCase {\n \n-    @Override\n     protected String getPersistenceUnitName() {\n-        return \"test_parsing\";\n+        return \"xml-persistence-unit\";\n     }\n+    \n     public void setUp() {\n         setUp(DROP_TABLES,MixedMappingLocationEmbeddedId.class, MixedMappingLocation.class);\n     }"},{"sha":"3d33c522a5c5e687603933eb76bd5a39a371797e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entity/MixedMappingLocationEmbeddedId.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/7a46717616e9f908df95bcff48dff7e6b29af14a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entity/MixedMappingLocationEmbeddedId.java","raw_url":"https://github.com/apache/openjpa/raw/7a46717616e9f908df95bcff48dff7e6b29af14a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entity/MixedMappingLocationEmbeddedId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entity/MixedMappingLocationEmbeddedId.java?ref=7a46717616e9f908df95bcff48dff7e6b29af14a","patch":"@@ -31,6 +31,8 @@\n     @Basic\n     private String country;\n \n+    private String basic10;\n+    \n     public MixedMappingLocationEmbeddedId() {\n         // TODO Auto-generated constructor stub\n     }"},{"sha":"f3152c46b57a6327bd05f968d6ca8fff1bac5047","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7a46717616e9f908df95bcff48dff7e6b29af14a/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/7a46717616e9f908df95bcff48dff7e6b29af14a/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=7a46717616e9f908df95bcff48dff7e6b29af14a","patch":"@@ -20,7 +20,6 @@\n <persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n     version=\"1.0\">\n-\n     <persistence-unit name=\"xml-persistence-unit\">\n         <description>\n             This needs to be listed because the OpenJPA test framework\n@@ -53,6 +52,7 @@\n         <mapping-file>org/apache/openjpa/persistence/embed/embed-assoc-over-orm.xml</mapping-file>\n         <mapping-file>org/apache/openjpa/persistence/detach/detach-orm.xml</mapping-file>\n         <mapping-file>org/apache/openjpa/persistence/enhance/identity/mapsId-orm.xml</mapping-file>\n+        <mapping-file>org/apache/openjpa/persistence/entity/orm.xml</mapping-file>\n         <properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\"\n                 value=\"buildSchema(ForeignKeys=true)\"/>\n@@ -256,12 +256,6 @@\n         <class>org.apache.openjpa.persistence.meta.MdrTestEntity</class>\n     </persistence-unit>    \n     \n-    <persistence-unit name=\"test_parsing\">\n-\t\t<mapping-file>org/apache/openjpa/persistence/entity/orm.xml</mapping-file>\n-\t\t<class>org.apache.openjpa.persistence.entity.MixedMappingLocation</class>\n-\t\t<class>org.apache.openjpa.persistence.entity.MixedMappingLocationEmbeddedId</class>\t\t\t\n-\t</persistence-unit>  \n-\n     <persistence-unit name=\"mapsId-pu\">\n         <mapping-file>org/apache/openjpa/persistence/enhance/identity/mapsId-orm.xml</mapping-file>\n         <class>org.apache.openjpa.persistence.enhance.identity.Employee1Xml</class>"},{"sha":"bb433f1004427ca071e63bfe7e765feb908b7f31","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/entity/orm.xml","status":"renamed","additions":14,"deletions":3,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/7a46717616e9f908df95bcff48dff7e6b29af14a/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/entity/orm.xml","raw_url":"https://github.com/apache/openjpa/raw/7a46717616e9f908df95bcff48dff7e6b29af14a/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/entity/orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/entity/orm.xml?ref=7a46717616e9f908df95bcff48dff7e6b29af14a","patch":"@@ -17,14 +17,25 @@ regarding copyright ownership.  The ASF licenses this file\n  specific language governing permissions and limitations\n under the License.\n -->\n-<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\" version=\"1.0\">\n-    <entity class=\"org.apache.openjpa.persistence.entity.MixedMappingLocation\">\n+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm orm_2_0.xsd\"\n+    version=\"2.0\">\n+    <package>org.apache.openjpa.persistence.entity</package>\n+    <entity name=\"MixedMappingLocation\" class=\"MixedMappingLocation\">\n \t\t<attributes>\n \t\t\t<embedded-id name=\"id\"></embedded-id>\n \t\t\t<basic name=\"basic1\">\n \t\t\t\t<column name=\"basic1_override\" length=\"100\"/>\n \t\t\t</basic>         \n \t\t</attributes>\n     </entity>\n-    <embeddable class=\"org.apache.openjpa.persistence.entity.MixedMappingLocationEmbeddedId\"></embeddable>\n+    <embeddable class=\"MixedMappingLocationEmbeddedId\">\n+    <attributes>\n+\t\t<basic name=\"basic10\">\n+\t\t\t<column name=\"basic10_override\" length=\"100\"/>\n+\t\t</basic>\n+\t\t</attributes>         \n+\t\t</embeddable>\n+\t\t\n </entity-mappings>","previous_filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/orm.xml"},{"sha":"a98ca5f00a3503664c9c08c0f4648b96874f25a4","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/7a46717616e9f908df95bcff48dff7e6b29af14a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/7a46717616e9f908df95bcff48dff7e6b29af14a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=7a46717616e9f908df95bcff48dff7e6b29af14a","patch":"@@ -497,14 +497,14 @@ private ClassMetaData parseClassAnnotations() {\n         // setup defaults (ie: Basic fields).\n         ClassMetaData m = getRepository().getCachedMetaData(_cls);\n         if (m == null) {\n-        if (!(AccessController.doPrivileged(J2DoPrivHelper.isAnnotationPresentAction(_cls, Entity.class)))\n-                .booleanValue()\n-                && !(AccessController.doPrivileged(J2DoPrivHelper.isAnnotationPresentAction(_cls, Embeddable.class)))\n+            if (!(AccessController.doPrivileged(J2DoPrivHelper.isAnnotationPresentAction(_cls, Entity.class)))\n                     .booleanValue()\n-                && !(AccessController.doPrivileged(J2DoPrivHelper.isAnnotationPresentAction(_cls,\n-                    MappedSuperclass.class))).booleanValue())\n-                return null;\n-        }\n+                    && !(AccessController.doPrivileged(J2DoPrivHelper.isAnnotationPresentAction(_cls, Embeddable.class)))\n+                        .booleanValue()\n+                    && !(AccessController.doPrivileged(J2DoPrivHelper.isAnnotationPresentAction(_cls,\n+                        MappedSuperclass.class))).booleanValue())\n+                    return null;\n+            }\n         // find / create metadata\n         ClassMetaData meta = (m == null) ? getMetaData() : m;\n         if (meta == null)"}]}

