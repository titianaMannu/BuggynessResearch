{"sha":"7aad95a75b06f5620fb4d9ac9b50e1a8149d0e19","node_id":"MDY6Q29tbWl0MjA2MzY0OjdhYWQ5NWE3NWIwNmY1NjIwZmI0ZDlhYzliNTBlMWE4MTQ5ZDBlMTk=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-30T04:46:42Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-01-30T04:46:42Z"},"message":"OPENJPA-1485: null collection value can still be treated as loaded.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@904728 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9a7b66379bdcc090cf2954ea5355ac10556cc1d1","url":"https://api.github.com/repos/apache/openjpa/git/trees/9a7b66379bdcc090cf2954ea5355ac10556cc1d1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7aad95a75b06f5620fb4d9ac9b50e1a8149d0e19","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7aad95a75b06f5620fb4d9ac9b50e1a8149d0e19","html_url":"https://github.com/apache/openjpa/commit/7aad95a75b06f5620fb4d9ac9b50e1a8149d0e19","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7aad95a75b06f5620fb4d9ac9b50e1a8149d0e19/comments","author":null,"committer":null,"parents":[{"sha":"1000f39d355943c8bfc31322f5a26ffd5a2a1d53","url":"https://api.github.com/repos/apache/openjpa/commits/1000f39d355943c8bfc31322f5a26ffd5a2a1d53","html_url":"https://github.com/apache/openjpa/commit/1000f39d355943c8bfc31322f5a26ffd5a2a1d53"}],"stats":{"total":61,"additions":17,"deletions":44},"files":[{"sha":"bf56296935994575efad19a4dcfa4d9a5bfa8090","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/TestPersistenceUnitUtil.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/7aad95a75b06f5620fb4d9ac9b50e1a8149d0e19/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/TestPersistenceUnitUtil.java","raw_url":"https://github.com/apache/openjpa/raw/7aad95a75b06f5620fb4d9ac9b50e1a8149d0e19/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/TestPersistenceUnitUtil.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/util/TestPersistenceUnitUtil.java?ref=7aad95a75b06f5620fb4d9ac9b50e1a8149d0e19","patch":"@@ -347,11 +347,11 @@ public void testSetNullLazyRelationship() {\n             // Still loaded after commit\n             assertTrue(puu.isLoaded(ote2, \"toManyLazy\"));\n             \n-            // Set to null - no longer loaded per spec.\n+            // Set to null - still loaded per spec.\n             em.getTransaction().begin();\n             ote2.setToManyLazy(null);\n-            // Considered unloaded before commit\n-            assertFalse(puu.isLoaded(ote2, \"toManyLazy\"));\n+            // Considered loaded before commit\n+            assertTrue(puu.isLoaded(ote2, \"toManyLazy\"));\n             em.getTransaction().commit();\n             //Loaded after commit\n             assertTrue(puu.isLoaded(ote2, \"toManyLazy\"));\n@@ -377,14 +377,14 @@ public void testSetNullEagerRelationship() {\n             em.getTransaction().commit();\n             em.clear();\n             ote = em.find(OneToEntity.class, ote.getId());\n-            // Field is eater and is immediately loaded by the application\n+            // Field is eager and is immediately loaded by the application\n             assertTrue(puu.isLoaded(ote, \"toManyEager\"));\n             \n             OneToEntity ote2 = new OneToEntity();\n             em.getTransaction().begin();\n             em.persist(ote2);\n-            // Field is null by default and not considered loaded.\n-            assertFalse(puu.isLoaded(ote2, \"toManyEager\"));\n+            // Field is null by default, but after persist, it is treated as loaded.\n+            assertTrue(puu.isLoaded(ote2, \"toManyEager\"));\n             em.getTransaction().commit();\n             // Field gets set to loaded upon commit\n             assertTrue(puu.isLoaded(ote2, \"toManyEager\"));\n@@ -407,13 +407,13 @@ public void testSetNullEagerRelationship() {\n             // Still loaded after commit\n             assertTrue(puu.isLoaded(ote2, \"toManyEager\"));\n             \n-            // Set to null - no longer loaded per spec.\n+            // Set to null - still loaded per spec.\n             em.getTransaction().begin();\n             ote2.setToManyEager(null);\n-            // Entity is considered unloaded before commit\n-            assertFalse(puu.isLoaded(ote2));\n-            // Attribute is considered unloaded before commit\n-            assertFalse(puu.isLoaded(ote2, \"toManyEager\"));\n+            // Entity is considered loaded before commit\n+            assertTrue(puu.isLoaded(ote2));\n+            // Attribute is considered loaded before commit\n+            assertTrue(puu.isLoaded(ote2, \"toManyEager\"));\n             em.getTransaction().commit();\n             //Loaded after commit\n             assertTrue(puu.isLoaded(ote2, \"toManyEager\"));"},{"sha":"1acf3685cda203c8d52cac7d63be480640e1884d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistenceUtil.java","status":"modified","additions":6,"deletions":33,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/7aad95a75b06f5620fb4d9ac9b50e1a8149d0e19/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistenceUtil.java","raw_url":"https://github.com/apache/openjpa/raw/7aad95a75b06f5620fb4d9ac9b50e1a8149d0e19/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistenceUtil.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistenceUtil.java?ref=7aad95a75b06f5620fb4d9ac9b50e1a8149d0e19","patch":"@@ -151,11 +151,6 @@ private static LoadState isLoaded(OpenJPAStateManager sm, String attr,\n                 if(!loadSet.get(fmd.getIndex())) {\n                     return LoadState.NOT_LOADED;\n                 }\n-                // If a collected valued attribute and it has been modified, \n-                // make sure it isn't null\n-                if (isCollectionSetToNull(sm, fmd)) {\n-                    return LoadState.NOT_LOADED;\n-                }\n             }\n             FieldMetaData[] fmds = sm.getMetaData().getFields();\n             // Check load state of all persistent eager fetch attributes\n@@ -185,28 +180,6 @@ private static boolean requiresFetch(OpenJPAStateManager sm, FieldMetaData fmd)\n         return fmd.isInDefaultFetchGroup();\n     }\n \n-    /*\n-     * Returns true if the field is a collection type and it was explicitly\n-     * set to null.\n-     */\n-    private static boolean isCollectionSetToNull(OpenJPAStateManager sm, FieldMetaData fmd) {\n-        BitSet dirtySet = sm.getDirty();\n-        if (dirtySet.get(fmd.getIndex()) && isCollectionType(fmd.getDeclaredTypeCode())) { \n-            Object field = sm.fetchField(fmd.getIndex(), false);\n-            if (field == null) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-    \n-    \n-    private static boolean isCollectionType(int type) {\n-        return (type == JavaTypes.COLLECTION ||\n-                type == JavaTypes.MAP ||\n-                type == JavaTypes.ARRAY);\n-    }\n-\n     private static HashSet<OpenJPAStateManager> addToLoadSet(\n         HashSet<OpenJPAStateManager> pcs, OpenJPAStateManager sm) {\n         if (pcs == null) {\n@@ -236,14 +209,14 @@ private static boolean isLoadedField(OpenJPAStateManager sm,\n         // If a collection type, determine if it is loaded\n         switch (fmd.getDeclaredTypeCode()) {\n             case JavaTypes.COLLECTION:   \n-                return !isCollectionSetToNull(sm, fmd) && \n-                    isLoadedCollection(sm, fmd.getElement(),(Collection<?>)field, pcs);\n+                return isLoadedCollection(sm, fmd.getElement(), \n+                    (Collection<?>)field, pcs);\n             case JavaTypes.MAP:\n-                return !isCollectionSetToNull(sm, fmd) &&\n-                    isLoadedMap(sm, fmd, (Map<?,?>)field, pcs);\n+                return isLoadedMap(sm, fmd, \n+                    (Map<?,?>)field, pcs);\n             case JavaTypes.ARRAY:\n-                return !isCollectionSetToNull(sm, fmd) &&\n-                    isLoadedArray(sm, fmd.getElement(), (Object[])field, pcs);\n+                return isLoadedArray(sm, fmd.getElement(), \n+                    (Object[])field, pcs);\n         }\n         // If other PC type, determine if it is loaded\n         if (ofsm != null && fmd.isDeclaredTypePC()) {"}]}

