{"sha":"7ac8321f27ecea79ded5cfa8a7e20c6656c2e90d","node_id":"MDY6Q29tbWl0MjA2MzY0OjdhYzgzMjFmMjdlY2VhNzlkZWQ1Y2ZhOGE3ZTIwYzY2NTZjMmU5MGQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-13T20:46:40Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-06-13T20:46:40Z"},"message":"OPENJPA-209,OPENJPA-210: Test for projection query with duplicate result\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@667647 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"223b503ed05cb0f1adcac5e5f44cc4737966fe0a","url":"https://api.github.com/repos/apache/openjpa/git/trees/223b503ed05cb0f1adcac5e5f44cc4737966fe0a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7ac8321f27ecea79ded5cfa8a7e20c6656c2e90d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7ac8321f27ecea79ded5cfa8a7e20c6656c2e90d","html_url":"https://github.com/apache/openjpa/commit/7ac8321f27ecea79ded5cfa8a7e20c6656c2e90d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7ac8321f27ecea79ded5cfa8a7e20c6656c2e90d/comments","author":null,"committer":null,"parents":[{"sha":"71519b08080107dae13867c760f224a2cde54b5b","url":"https://api.github.com/repos/apache/openjpa/commits/71519b08080107dae13867c760f224a2cde54b5b","html_url":"https://github.com/apache/openjpa/commit/71519b08080107dae13867c760f224a2cde54b5b"}],"stats":{"total":244,"additions":244,"deletions":0},"files":[{"sha":"afd66df2ba2442d014827e5d31d987fce5566d85","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwned.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/7ac8321f27ecea79ded5cfa8a7e20c6656c2e90d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwned.java","raw_url":"https://github.com/apache/openjpa/raw/7ac8321f27ecea79ded5cfa8a7e20c6656c2e90d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwned.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwned.java?ref=7ac8321f27ecea79ded5cfa8a7e20c6656c2e90d","patch":"@@ -0,0 +1,61 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Version;\r\n+\r\n+/**\r\n+ * Entity which is traget of a unidirectional one-to-one relation.\r\n+ * \r\n+ * Used in\r\n+ * @see org.apache.openjpa.persistence.query.TestProjectionQueryWithIdenticalResult\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class UnidirectionalOneToOneOwned {\r\n+\t@Id\r\n+\t@GeneratedValue\r\n+\tprivate long id;\r\n+\t\r\n+\tprivate String marker;\r\n+\t\r\n+\t@Version\r\n+\tprivate int version;\r\n+\t\r\n+\tpublic String getMarker() {\r\n+\t\treturn marker;\r\n+\t}\r\n+\r\n+\tpublic void setMarker(String marker) {\r\n+\t\tthis.marker = marker;\r\n+\t}\r\n+\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic int getVersion() {\r\n+\t\treturn version;\r\n+\t}\r\n+}\r"},{"sha":"bb45cdab4034bf5cc2c0cba566ca6487d7e32fe7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwner.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/7ac8321f27ecea79ded5cfa8a7e20c6656c2e90d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwner.java","raw_url":"https://github.com/apache/openjpa/raw/7ac8321f27ecea79ded5cfa8a7e20c6656c2e90d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwner.java?ref=7ac8321f27ecea79ded5cfa8a7e20c6656c2e90d","patch":"@@ -0,0 +1,74 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.common.apps;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Version;\r\n+\r\n+/**\r\n+ * Persistent entity with unidirectional one-to-one relation.\r\n+ * \r\n+ * Used in\r\n+ * @see org.apache.openjpa.persistence.query.TestProjectionQueryWithIdenticalResult\r\n+ *  \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class UnidirectionalOneToOneOwner {\r\n+\t@Id\r\n+\t@GeneratedValue\r\n+\tprivate long id;\r\n+\t\r\n+\tprivate String marker;\r\n+\t\r\n+\t@Version\r\n+\tprivate int version;\r\n+\t\r\n+\t@OneToOne(cascade=CascadeType.ALL)\r\n+\tprivate UnidirectionalOneToOneOwned owned;\r\n+\r\n+\tpublic String getMarker() {\r\n+\t\treturn marker;\r\n+\t}\r\n+\r\n+\tpublic void setMarker(String marker) {\r\n+\t\tthis.marker = marker;\r\n+\t}\r\n+\r\n+\tpublic UnidirectionalOneToOneOwned getOwned() {\r\n+\t\treturn owned;\r\n+\t}\r\n+\r\n+\tpublic void setOwned(UnidirectionalOneToOneOwned owned) {\r\n+\t\tthis.owned = owned;\r\n+\t}\r\n+\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic int getVersion() {\r\n+\t\treturn version;\r\n+\t}\r\n+}\r"},{"sha":"c305aeeb4424cb7ae4f4f81104b55fc5af28c065","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestProjectionQueryWithIdenticalResult.java","status":"added","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/apache/openjpa/blob/7ac8321f27ecea79ded5cfa8a7e20c6656c2e90d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestProjectionQueryWithIdenticalResult.java","raw_url":"https://github.com/apache/openjpa/raw/7ac8321f27ecea79ded5cfa8a7e20c6656c2e90d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestProjectionQueryWithIdenticalResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestProjectionQueryWithIdenticalResult.java?ref=7ac8321f27ecea79ded5cfa8a7e20c6656c2e90d","patch":"@@ -0,0 +1,109 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.UnidirectionalOneToOneOwned;\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.UnidirectionalOneToOneOwner;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+\r\n+/**\r\n+ * The query uses projection and result contains the same instance once as\r\n+ * a direct projection and again as a fetch group of the other projection.\r\n+ * Does the query return two separate instances or one identical instance?\r\n+ * \r\n+ * Originally reported as two different failures:\r\n+ * <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-209\">OPENJPA-209</A>\r\n+ * <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-210\">OPENJPA-210</A> \r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ */\r\n+public class TestProjectionQueryWithIdenticalResult extends SingleEMFTestCase {\r\n+\tprivate static boolean USE_TXN = true; \r\n+    public void setUp() {\r\n+        setUp(CLEAR_TABLES,\r\n+        \t  UnidirectionalOneToOneOwned.class, \r\n+        \t  UnidirectionalOneToOneOwner.class);\r\n+\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        UnidirectionalOneToOneOwner owner = new UnidirectionalOneToOneOwner();\r\n+        owner.setMarker(\"Owner\");\r\n+        UnidirectionalOneToOneOwned owned = new UnidirectionalOneToOneOwned();\r\n+        owned.setMarker(\"Owned\");\r\n+        owner.setOwned(owned);\r\n+        em.persist(owner);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+    \r\n+\tpublic void testDuplicateResultInProjection1() {\r\n+\t\tString jpql = \"SELECT p.owned, p FROM UnidirectionalOneToOneOwner p\";\r\n+\t\tList<Object[]> result = executeQuery(jpql, USE_TXN);\r\n+\t\tfor (Object[] row : result) {\r\n+\t\t\tassertTrue(row[0] instanceof UnidirectionalOneToOneOwned);\r\n+\t\t\tassertTrue(row[1] instanceof UnidirectionalOneToOneOwner);\r\n+\t\t\tassertTrue(((UnidirectionalOneToOneOwner)row[1]).getOwned() == row[0]);\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\tpublic void testDuplicateResultInProjection2() {\r\n+\t\tString jpql = \"SELECT p, p.owned FROM UnidirectionalOneToOneOwner p\";\r\n+\t\tList<Object[]> result = executeQuery(jpql, USE_TXN);\r\n+\t\tfor (Object[] row : result) {\r\n+\t\t\tassertTrue(row[1] instanceof UnidirectionalOneToOneOwned);\r\n+\t\t\tassertTrue(row[0] instanceof UnidirectionalOneToOneOwner);\r\n+\t\t\tassertTrue(((UnidirectionalOneToOneOwner)row[0]).getOwned() == row[1]);\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\tpublic void testDuplicateResultInProjection3() {\r\n+\t\tString jpql = \"SELECT p, q FROM UnidirectionalOneToOneOwner p, \" +\r\n+\t\t\t\t\t\t\"UnidirectionalOneToOneOwned q WHERE p.owned = q\";\r\n+\t\tList<Object[]> result = executeQuery(jpql, USE_TXN);\r\n+\t\tfor (Object[] row : result) {\r\n+\t\t\tassertTrue(row[0] instanceof UnidirectionalOneToOneOwner);\r\n+\t\t\tassertTrue(row[1] instanceof UnidirectionalOneToOneOwned);\r\n+\t\t\tassertTrue(((UnidirectionalOneToOneOwner)row[0]).getOwned() == row[1]);\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\tpublic void testDuplicateResultInProjection4() {\r\n+\t\tString jpql = \"SELECT q, p FROM UnidirectionalOneToOneOwner p, \" +\r\n+\t\t\t\t\t    \"UnidirectionalOneToOneOwned q WHERE p.owned = q\";\r\n+\t\tList<Object[]> result = executeQuery(jpql, USE_TXN);\r\n+\t\tfor (Object[] row : result) {\r\n+\t\t\tassertTrue(row[0] instanceof UnidirectionalOneToOneOwned);\r\n+\t\t\tassertTrue(row[1] instanceof UnidirectionalOneToOneOwner);\r\n+\t\t\tassertTrue(((UnidirectionalOneToOneOwner)row[1]).getOwned() == row[0]);\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\tprivate List executeQuery(String jpql, boolean useTxn) {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tList result = em.createQuery(jpql).getResultList();\r\n+\t\tem.getTransaction().rollback();\r\n+\t\treturn result;\r\n+\t}\r\n+}\r"}]}

