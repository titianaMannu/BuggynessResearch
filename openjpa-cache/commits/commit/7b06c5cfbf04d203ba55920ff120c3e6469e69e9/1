{"sha":"7b06c5cfbf04d203ba55920ff120c3e6469e69e9","node_id":"MDY6Q29tbWl0MjA2MzY0OjdiMDZjNWNmYmYwNGQyMDNiYTU1OTIwZmYxMjBjM2U2NDY5ZTY5ZTk=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-06-10T18:15:01Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-06-10T18:15:01Z"},"message":"OPENJPA-932 - Enable test case to be Java 2 security compliance.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@783440 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7395a31372402698b4890338b9646c482221f645","url":"https://api.github.com/repos/apache/openjpa/git/trees/7395a31372402698b4890338b9646c482221f645"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7b06c5cfbf04d203ba55920ff120c3e6469e69e9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7b06c5cfbf04d203ba55920ff120c3e6469e69e9","html_url":"https://github.com/apache/openjpa/commit/7b06c5cfbf04d203ba55920ff120c3e6469e69e9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7b06c5cfbf04d203ba55920ff120c3e6469e69e9/comments","author":null,"committer":null,"parents":[{"sha":"9c0f517f555b71c65cd1b331a0349ec45debcda7","url":"https://api.github.com/repos/apache/openjpa/commits/9c0f517f555b71c65cd1b331a0349ec45debcda7","html_url":"https://github.com/apache/openjpa/commit/9c0f517f555b71c65cd1b331a0349ec45debcda7"}],"stats":{"total":56,"additions":50,"deletions":6},"files":[{"sha":"a5bc4014babe53d774237a3cf2cb402087f59ceb","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","status":"modified","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/7b06c5cfbf04d203ba55920ff120c3e6469e69e9/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","raw_url":"https://github.com/apache/openjpa/raw/7b06c5cfbf04d203ba55920ff120c3e6469e69e9/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java?ref=7b06c5cfbf04d203ba55920ff120c3e6469e69e9","patch":"@@ -69,6 +69,7 @@\n  * <li>ClassLoader.getResource\n  * <li>ClassLoader.getResources\n  * <li>ClassLoader.getSystemClassLoader\n+ * <li>File.deleteOnExit\n  * <li>File.delete\n  * <li>File.exists\n  * <li>File.getAbsoluteFile\n@@ -90,6 +91,7 @@\n  * <li>Socket.accept\n  * <li>System.getProperty\n  * <li>Thread.getContextClassLoader\n+ * <li>Thread.setContextClassLoader\n  * <li>Thread new\n  * <li>TemporaryClassLoader new\n  * <li>URL.openStream\n@@ -474,6 +476,22 @@ public Boolean run() {\n         };\n     }\n \n+    /**\n+     * Return a PrivilegeAction object for f.deleteOnExit().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"delete\";'\n+     */\n+    public static final PrivilegedAction<Boolean> deleteOnExitAction(\n+        final File f) {\n+        return new PrivilegedAction<Boolean>() {\n+            public Boolean run() {\n+                f.deleteOnExit();\n+                return Boolean.TRUE;\n+            }\n+        };\n+    }\n+\n     /**\n      * Return a PrivilegeAction object for f.getAbsoluteFile().\n      * \n@@ -826,6 +844,25 @@ public ClassLoader run() {\n         };\n     }\n \n+    /**\n+     * Return a PrivilegeAction object for Thread.currentThread\n+     *   .setContextClassLoader().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"setContextClassLoader\";'\n+     *   \n+     * @return ClassLoader\n+     */\n+    public static final PrivilegedAction<Boolean> \n+            setContextClassLoaderAction(final ClassLoader loader) {\n+        return new PrivilegedAction<Boolean>() {\n+            public Boolean run() {\n+                Thread.currentThread().setContextClassLoader(loader);\n+                return Boolean.TRUE;\n+            }\n+        };\n+    }\n+\n     /**\n      * Return a PrivilegedAction object for new Thread().\n      * "},{"sha":"bf726baca7c3a543e67e0e6ef63fbca8f2a010c0","filename":"openjpa-persistence-jdbc/src/test/resources/j2.security.test.policy","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/7b06c5cfbf04d203ba55920ff120c3e6469e69e9/openjpa-persistence-jdbc/src/test/resources/j2.security.test.policy","raw_url":"https://github.com/apache/openjpa/raw/7b06c5cfbf04d203ba55920ff120c3e6469e69e9/openjpa-persistence-jdbc/src/test/resources/j2.security.test.policy","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/j2.security.test.policy?ref=7b06c5cfbf04d203ba55920ff120c3e6469e69e9","patch":"@@ -29,11 +29,12 @@ grant CodeBase \"file:///${user.home}/.m2/repository/org/apache/derby/derby/-\" {\n \n grant CodeBase \"file:///${test.basedir}/-\" {\n \n-    permission java.io.FilePermission           \"<<ALL FILES>>\",    \"read,write\";\n+    permission java.io.FilePermission           \"<<ALL FILES>>\",    \"read,write,delete\";\n     permission java.io.SerializablePermission                       \"enableSubstitution\";\n     permission java.lang.RuntimePermission                          \"accessDeclaredMembers\";\n     permission java.lang.RuntimePermission                          \"createClassLoader\";\n     permission java.lang.RuntimePermission                          \"getClassLoader\";\n+    permission java.lang.RuntimePermission                          \"setContextClassLoader\";\n     permission java.lang.RuntimePermission                          \"setIO\";\n     permission java.lang.reflect.ReflectPermission                  \"suppressAccessChecks\";\n     permission java.util.PropertyPermission     \"*\",                \"read,write\";"},{"sha":"23774969eb7e25c653441b26d8142ad7c1e32a51","filename":"openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestPersistenceProductDerivation.java","status":"modified","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/7b06c5cfbf04d203ba55920ff120c3e6469e69e9/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestPersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/7b06c5cfbf04d203ba55920ff120c3e6469e69e9/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestPersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestPersistenceProductDerivation.java?ref=7b06c5cfbf04d203ba55920ff120c3e6469e69e9","patch":"@@ -25,11 +25,14 @@\n import java.io.FileOutputStream;\n import java.net.URL;\n import java.net.URLClassLoader;\n+import java.security.AccessController;\n import java.util.Arrays;\n import java.util.List;\n import java.util.jar.JarEntry;\n import java.util.jar.JarOutputStream;\n \n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+\n import junit.framework.TestCase;\n \n public class TestPersistenceProductDerivation extends TestCase {\n@@ -57,16 +60,17 @@ protected void setUp() throws Exception {\n             \"TestPersistenceProductDerivation_generated_\" +\n             System.currentTimeMillis() + \".jar\");\n         \n-        targetFile.deleteOnExit();        \n+        AccessController.doPrivileged(J2DoPrivHelper\n+            .deleteOnExitAction(targetFile));\n         buildJar(sourceFile,targetFile);\n         \n         // Hold a reference to the current classloader so we can cleanup\n         // when we're done.\n         originalLoader = Thread.currentThread().getContextClassLoader();\n         tempLoader = new TempUrlLoader(new URL[]{targetFile.toURI().toURL()}\n             ,originalLoader);        \n-        Thread.currentThread().setContextClassLoader(tempLoader);\n-            \n+        AccessController.doPrivileged(J2DoPrivHelper\n+            .setContextClassLoaderAction(tempLoader));\n     }\n     \n     protected void tearDown() throws Exception {\n@@ -77,8 +81,10 @@ protected void tearDown() throws Exception {\n         // For whatever reason, this file won't ever delete. I searched around\n         // and found numerous documented problems with deleting files. Perhaps\n         // sometime in the future this problem will be fixed. For now it doesn't\n-        // really matter since we generate a new file every time.       \n-        if(targetFile.delete()==false){\n+        // really matter since we generate a new file every time.\n+        boolean deleted = AccessController.doPrivileged(J2DoPrivHelper\n+            .deleteAction(targetFile));\n+        if(deleted==false){\n             System.out.println(\"The file \" + targetFile + \" wasn't deleted.\");\n         }\n     }"}]}

