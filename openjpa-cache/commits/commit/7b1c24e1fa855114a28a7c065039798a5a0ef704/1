{"sha":"7b1c24e1fa855114a28a7c065039798a5a0ef704","node_id":"MDY6Q29tbWl0MjA2MzY0OjdiMWMyNGUxZmE4NTUxMTRhMjhhN2MwNjUwMzk3OThhNWEwZWY3MDQ=","commit":{"author":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2015-04-14T18:59:29Z"},"committer":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2015-04-14T18:59:29Z"},"message":"OPENJPA-2571: Criteria Builder query generates extra alias when using multiselect.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1673513 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0c801d6609072ae38482545982f729d3b542be28","url":"https://api.github.com/repos/apache/openjpa/git/trees/0c801d6609072ae38482545982f729d3b542be28"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7b1c24e1fa855114a28a7c065039798a5a0ef704","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7b1c24e1fa855114a28a7c065039798a5a0ef704","html_url":"https://github.com/apache/openjpa/commit/7b1c24e1fa855114a28a7c065039798a5a0ef704","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7b1c24e1fa855114a28a7c065039798a5a0ef704/comments","author":null,"committer":null,"parents":[{"sha":"9d4c78dfffb9a0dfd73298a9bf3a0dabe10d9153","url":"https://api.github.com/repos/apache/openjpa/commits/9d4c78dfffb9a0dfd73298a9bf3a0dabe10d9153","html_url":"https://github.com/apache/openjpa/commit/9d4c78dfffb9a0dfd73298a9bf3a0dabe10d9153"}],"stats":{"total":1070,"additions":1069,"deletions":1},"files":[{"sha":"cf9d108236733c879679b4d1d01c428b3cf30b83","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/7b1c24e1fa855114a28a7c065039798a5a0ef704/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/7b1c24e1fa855114a28a7c065039798a5a0ef704/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=7b1c24e1fa855114a28a7c065039798a5a0ef704","patch":"@@ -2896,7 +2896,20 @@ public Joins crossJoin(Table localTable, Table foreignTable) {\n                 if (this.var != null) {\n                     this.append(this.var);\n                 } else if (this.path == null && this.correlatedVar != null && _sel._dict.isImplicitJoin()) {\n-                    this.append(this.correlatedVar);\n+                    String str = this.var;\n+                    for(Object o : _sel._parent._aliases.keySet()){\n+                        if (o instanceof Key) {\n+                            Key k = (Key) o;\n+                            if (this.correlatedVar.equals(k._path)) {\n+                                str = this.correlatedVar;\n+                                break;\n+                            }\n+                        }else if (o.equals(this.correlatedVar)){\n+                            str = this.correlatedVar;\n+                            break;\n+                        }\n+                    }\n+                    this.append(str);\n                 }\n                 this.var = null;\n                 _outer = false;"},{"sha":"26fc335403a2d75dfba100e8394ea65ce8057bac","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/multiselect/DimDay.java","status":"added","additions":452,"deletions":0,"changes":452,"blob_url":"https://github.com/apache/openjpa/blob/7b1c24e1fa855114a28a7c065039798a5a0ef704/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/multiselect/DimDay.java","raw_url":"https://github.com/apache/openjpa/raw/7b1c24e1fa855114a28a7c065039798a5a0ef704/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/multiselect/DimDay.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/multiselect/DimDay.java?ref=7b1c24e1fa855114a28a7c065039798a5a0ef704","patch":"@@ -0,0 +1,452 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.criteria.multiselect;\r\n+\r\n+import java.util.Date;\r\n+\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name=\"T_DIM_DAY\")\r\n+public class DimDay {\r\n+\t\r\n+\t@Id\r\n+\t@Column(name=\"DAY_KY\")\r\n+\tprivate Long key;\r\n+\t\r\n+\t@Column(name=\"DAY_DT\")\r\n+\tprivate Date date;\r\n+\t\r\n+\t@Column(name = \"DAY_FULL_NM\")\r\n+\tprivate String dayFullName;\r\n+\t\r\n+\t@Column(name = \"QTR_FULL_NM\")\r\n+\tprivate String qtrFullName;\r\n+\t\r\n+\t@Column(name = \"MNTH_FULL_NM\")\r\n+\tprivate String monthFullName;\r\n+\r\n+\t@Column(name = \"MNTH_SHRT_NM\")\r\n+\tprivate String monthName;\r\n+\t\r\n+\t@Column(name = \"YR_NBR\") \r\n+\tprivate String year;\r\n+\t\r\n+\t@Column(name = \"QTR_IN_YR_NBR\") \r\n+\tprivate int quarterInYearNumber;\r\n+\t\r\n+\t@Column(name = \"YR_CD\") \r\n+\tprivate String yearCode;\r\n+\t\r\n+\t@Column(name = \"QTR_CD\") \r\n+\tprivate String quarterCode;\r\n+\t\r\n+\t@Column(name = \"MNTH_CD\") \r\n+\tprivate String monthCode;\r\n+\t\r\n+\t@Column(name = \"MNTH_IN_YR_NBR\")\r\n+\tprivate Long monthInYearNumber;\r\n+\t\r\n+\t@Column(name=\"CUR_MNTH_IND\")\r\n+\tprivate Long currentMonthInd;\r\n+\t\r\n+\t@Column(name=\"CUR_QTR_IND\")\r\n+\tprivate Long currentQtrInd;\r\n+\t\r\n+\t@Column(name=\"CUR_YR_IND\")\r\n+\tprivate Long currentYearInd;\r\n+\r\n+\t@Column(name=\"PREV_MNTH_IND\")\r\n+\tprivate Long prevMonthInd;\r\n+\t\r\n+\t@Column(name=\"PREV_QTR_IND\")\r\n+\tprivate Long prevQtrInd;\r\n+\t\r\n+\t@Column(name=\"PREV_YR_IND\")\r\n+\tprivate Long prevYearInd;\r\n+\t\r\n+\t@Column(name=\"CUR_MNTH_IN_PREV_YR_IND\")\r\n+\tprivate Long currentMonthVsPrevYearInd;\r\n+\t\r\n+\t@Column(name=\"CUR_QTR_IN_PREV_YR_IND\")\r\n+\tprivate Long currentQtrVsPrevYearInd;\r\n+\t\r\n+\t@Column(name=\"WK_IN_YR_NBR\")\r\n+\tprivate Long weekInYear;\r\n+\t\r\n+\t@Column(name=\"WK_IN_YR_FULL_NM\")\r\n+\tprivate String weekInYearFullNm;\r\n+\t\r\n+\t@Column(name = \"DAY_IN_WK_NBR\")\r\n+\tprivate Long dayInWeek;\r\n+\r\n+\t@Column(name = \"DAY_IN_MNTH_NBR\")\r\n+\tprivate Long dayInMonth;\r\n+\t\r\n+\t@Column(name = \"DAY_IN_QTR_NBR\")\r\n+\tprivate Long dayInQuarter;\r\n+\t\r\n+\t@Column(name = \"DAY_IN_YR_NBR\")\r\n+\tprivate Long dayInYear;\r\n+\t\r\n+\t@Column(name=\"EOM_IND\")\r\n+\tprivate Long eomInd; \r\n+\t\r\n+\t@Column(name=\"EOQ_IND\")\r\n+\tprivate Long eoqInd;\r\n+\t\r\n+\t@Column(name=\"EOY_IND\")\r\n+\tprivate Long eoyInd; \r\n+\t\r\n+\t@Column(name = \"ROLL_13_MNTH_IND\")\r\n+\tprivate Long roll13MonthInd;\r\n+\t\r\n+\t@Column(name = \"ROLL_4_YRS_IND\")\r\n+\tprivate Long roll4YearsInd;\r\n+\t\r\n+\t@Column(name = \"ROLL_5_QTRS_IND\")\r\n+\tprivate Long roll5QuartersInd;\r\n+\t\r\n+\t@Column(name=\"MNTH_STRT_DAY_KY\")\r\n+\tprivate Long monthStrtDate;\r\n+\t\r\n+\t@Column(name=\"MNTH_END_DAY_KY\")\r\n+\tprivate Long monthEndDate;\r\n+\t\r\n+\t@Column(name=\"QTR_STRT_DAY_KY\")\r\n+\tprivate Long quarterStrtDate;\r\n+\t\r\n+\t@Column(name=\"QTR_END_DAY_KY\")\r\n+\tprivate Long quarterEndDate;\r\n+\t\r\n+\t@Column(name = \"YR_STRT_DAY_KY\")\r\n+\tprivate Long yearStrtDate;\r\n+\t\r\n+\t@Column(name = \"YR_END_DAY_KY\")\r\n+\tprivate Long yearEndDate;\r\n+\t\r\n+\tpublic Long getKey() {\r\n+\t\treturn key;\r\n+\t}\r\n+\r\n+\tpublic void setKey(Long key) {\r\n+\t\tthis.key = key;\r\n+\t}\r\n+\r\n+\tpublic Date getDate() {\r\n+\t\treturn date;\r\n+\t}\r\n+\r\n+\tpublic void setDate(Date date) {\r\n+\t\tthis.date = date;\r\n+\t}\r\n+\r\n+\tpublic String getDayFullName() {\r\n+\t\treturn dayFullName;\r\n+\t}\r\n+\r\n+\tpublic void setDayFullName(String dayFullName) {\r\n+\t\tthis.dayFullName = dayFullName;\r\n+\t}\r\n+\r\n+\tpublic String getQtrFullName() {\r\n+\t\treturn qtrFullName;\r\n+\t}\r\n+\r\n+\tpublic void setQtrFullName(String qtrFullName) {\r\n+\t\tthis.qtrFullName = qtrFullName;\r\n+\t}\r\n+\r\n+\tpublic String getMonthName() {\r\n+\t\treturn monthName;\r\n+\t}\r\n+\r\n+\tpublic void setMonthFullName(String monthName) {\r\n+\t\tthis.monthName = monthName;\r\n+\t}\r\n+\r\n+\tpublic String getYear() {\r\n+\t\treturn year;\r\n+\t}\r\n+\r\n+\tpublic void setYear(String year) {\r\n+\t\tthis.year = year;\r\n+\t}\r\n+\r\n+\tpublic Long getCurrentMonthInd() {\r\n+\t\treturn currentMonthInd;\r\n+\t}\r\n+\r\n+\tpublic void setCurrentMonthInd(Long currentMonthInd) {\r\n+\t\tthis.currentMonthInd = currentMonthInd;\r\n+\t}\r\n+\r\n+\tpublic Long getCurrentQtrInd() {\r\n+\t\treturn currentQtrInd;\r\n+\t}\r\n+\r\n+\tpublic void setCurrentQtrInd(Long currentQtrInd) {\r\n+\t\tthis.currentQtrInd = currentQtrInd;\r\n+\t}\r\n+\r\n+\tpublic Long getCurrentYearInd() {\r\n+\t\treturn currentYearInd;\r\n+\t}\r\n+\r\n+\tpublic void setCurrentYearInd(Long currentYearInd) {\r\n+\t\tthis.currentYearInd = currentYearInd;\r\n+\t}\r\n+\r\n+\tpublic Long getPrevQtrInd() {\r\n+\t\treturn prevQtrInd;\r\n+\t}\r\n+\r\n+\tpublic void setPrevQtrInd(Long prevQtrInd) {\r\n+\t\tthis.prevQtrInd = prevQtrInd;\r\n+\t}\r\n+\r\n+\tpublic Long getPrevYearInd() {\r\n+\t\treturn prevYearInd;\r\n+\t}\r\n+\r\n+\tpublic void setPrevYearInd(Long prevYearInd) {\r\n+\t\tthis.prevYearInd = prevYearInd;\r\n+\t}\r\n+\r\n+\tpublic Long getCurrentMonthVsPrevYearInd() {\r\n+\t\treturn currentMonthVsPrevYearInd;\r\n+\t}\r\n+\r\n+\tpublic void setCurrentMonthVsPrevYearInd(Long currentMonthVsPrevYearInd) {\r\n+\t\tthis.currentMonthVsPrevYearInd = currentMonthVsPrevYearInd;\r\n+\t}\r\n+\r\n+\tpublic Long getCurrentQtrVsPrevYearInd() {\r\n+\t\treturn currentQtrVsPrevYearInd;\r\n+\t}\r\n+\r\n+\tpublic void setCurrentQtrVsPrevYearInd(Long currentQtrVsPrevYearInd) {\r\n+\t\tthis.currentQtrVsPrevYearInd = currentQtrVsPrevYearInd;\r\n+\t}\r\n+\r\n+\tpublic Long getPrevMonthInd() {\r\n+\t\treturn prevMonthInd;\r\n+\t}\r\n+\r\n+\tpublic void setPrevMonthInd(Long prevMonthInd) {\r\n+\t\tthis.prevMonthInd = prevMonthInd;\r\n+\t}\r\n+\r\n+\tpublic Long getWeekInYear() {\r\n+\t\treturn weekInYear;\r\n+\t}\r\n+\r\n+\tpublic void setWeekInYear(Long weekInYear) {\r\n+\t\tthis.weekInYear = weekInYear;\r\n+\t}\r\n+\r\n+\tpublic void setMonthName(String monthName) {\r\n+\t\tthis.monthName = monthName;\r\n+\t}\r\n+\r\n+\tpublic Long getEomInd() {\r\n+\t\treturn eomInd;\r\n+\t}\r\n+\r\n+\tpublic void setEomInd(Long eomInd) {\r\n+\t\tthis.eomInd = eomInd;\r\n+\t}\r\n+\r\n+\tpublic String getYearCode() {\r\n+\t\treturn yearCode;\r\n+\t}\r\n+\r\n+\tpublic void setYearCode(String yearCode) {\r\n+\t\tthis.yearCode = yearCode;\r\n+\t}\r\n+\r\n+\tpublic String getQuarterCode() {\r\n+\t\treturn quarterCode;\r\n+\t}\r\n+\r\n+\tpublic void setQuarterCode(String quarterCode) {\r\n+\t\tthis.quarterCode = quarterCode;\r\n+\t}\r\n+\r\n+\tpublic String getMonthCode() {\r\n+\t\treturn monthCode;\r\n+\t}\r\n+\r\n+\tpublic void setMonthCode(String monthCode) {\r\n+\t\tthis.monthCode = monthCode;\r\n+\t}\r\n+\r\n+\tpublic String getMonthFullName() {\r\n+\t\treturn monthFullName;\r\n+\t}\r\n+\r\n+\tpublic String getWeekInYearFullNm() {\r\n+\t\treturn weekInYearFullNm;\r\n+\t}\r\n+\r\n+\tpublic void setWeekInYearFullNm(String weekInYearFullNm) {\r\n+\t\tthis.weekInYearFullNm = weekInYearFullNm;\r\n+\t}\r\n+\r\n+\tpublic Long getMonthInYearNumber() {\r\n+\t\treturn monthInYearNumber;\r\n+\t}\r\n+\r\n+\tpublic void setMonthInYearNumber(Long monthInYearNumber) {\r\n+\t\tthis.monthInYearNumber = monthInYearNumber;\r\n+\t}\r\n+\r\n+\tpublic int getQuarterInYearNumber() {\r\n+\t\treturn quarterInYearNumber;\r\n+\t}\r\n+\r\n+\tpublic void setQuarterInYearNumber(int quarterInYearNumber) {\r\n+\t\tthis.quarterInYearNumber = quarterInYearNumber;\r\n+\t}\r\n+\r\n+\tpublic Long getRoll13MonthInd() {\r\n+\t\treturn roll13MonthInd;\r\n+\t}\r\n+\r\n+\tpublic void setRoll13MonthInd(Long roll13MonthInd) {\r\n+\t\tthis.roll13MonthInd = roll13MonthInd;\r\n+\t}\r\n+\r\n+\tpublic Long getRoll4YearsInd() {\r\n+\t\treturn roll4YearsInd;\r\n+\t}\r\n+\r\n+\tpublic void setRoll4YearsInd(Long roll4YearsInd) {\r\n+\t\tthis.roll4YearsInd = roll4YearsInd;\r\n+\t}\r\n+\r\n+\tpublic Long getRoll5QuartersInd() {\r\n+\t\treturn roll5QuartersInd;\r\n+\t}\r\n+\r\n+\tpublic void setRoll5QuartersInd(Long roll5QuartersInd) {\r\n+\t\tthis.roll5QuartersInd = roll5QuartersInd;\r\n+\t}\r\n+\r\n+\tpublic Long getDayInMonth() {\r\n+\t\treturn dayInMonth;\r\n+\t}\r\n+\r\n+\tpublic void setDayInMonth(Long dayInMonth) {\r\n+\t\tthis.dayInMonth = dayInMonth;\r\n+\t}\r\n+\r\n+\tpublic Long getDayInQuarter() {\r\n+\t\treturn dayInQuarter;\r\n+\t}\r\n+\r\n+\tpublic void setDayInQuarter(Long dayInQuarter) {\r\n+\t\tthis.dayInQuarter = dayInQuarter;\r\n+\t}\r\n+\r\n+\tpublic Long getDayInYear() {\r\n+\t\treturn dayInYear;\r\n+\t}\r\n+\r\n+\tpublic void setDayInYear(Long dayInYear) {\r\n+\t\tthis.dayInYear = dayInYear;\r\n+\t}\r\n+\r\n+\tpublic Long getEoqInd() {\r\n+\t\treturn eoqInd;\r\n+\t}\r\n+\r\n+\tpublic void setEoqInd(Long eoqInd) {\r\n+\t\tthis.eoqInd = eoqInd;\r\n+\t}\r\n+\r\n+\tpublic Long getEoyInd() {\r\n+\t\treturn eoyInd;\r\n+\t}\r\n+\r\n+\tpublic void setEoyInd(Long eoyInd) {\r\n+\t\tthis.eoyInd = eoyInd;\r\n+\t}\r\n+\r\n+\tpublic Long getMonthStrtDate() {\r\n+\t\treturn monthStrtDate;\r\n+\t}\r\n+\r\n+\tpublic void setMonthStrtDate(Long monthStrtDate) {\r\n+\t\tthis.monthStrtDate = monthStrtDate;\r\n+\t}\r\n+\r\n+\tpublic Long getMonthEndDate() {\r\n+\t\treturn monthEndDate;\r\n+\t}\r\n+\r\n+\tpublic void setMonthEndDate(Long monthEndDate) {\r\n+\t\tthis.monthEndDate = monthEndDate;\r\n+\t}\r\n+\r\n+\tpublic Long getQuarterStrtDate() {\r\n+\t\treturn quarterStrtDate;\r\n+\t}\r\n+\r\n+\tpublic void setQuarterStrtDate(Long quarterStrtDate) {\r\n+\t\tthis.quarterStrtDate = quarterStrtDate;\r\n+\t}\r\n+\r\n+\tpublic Long getQuarterEndDate() {\r\n+\t\treturn quarterEndDate;\r\n+\t}\r\n+\r\n+\tpublic void setQuarterEndDate(Long quarterEndDate) {\r\n+\t\tthis.quarterEndDate = quarterEndDate;\r\n+\t}\r\n+\r\n+\tpublic Long getYearStrtDate() {\r\n+\t\treturn yearStrtDate;\r\n+\t}\r\n+\r\n+\tpublic void setYearStrtDate(Long yearStrtDate) {\r\n+\t\tthis.yearStrtDate = yearStrtDate;\r\n+\t}\r\n+\r\n+\tpublic Long getYearEndDate() {\r\n+\t\treturn yearEndDate;\r\n+\t}\r\n+\r\n+\tpublic void setYearEndDate(Long yearEndDate) {\r\n+\t\tthis.yearEndDate = yearEndDate;\r\n+\t}\r\n+\r\n+\tpublic Long getDayInWeek() {\r\n+\t\treturn dayInWeek;\r\n+\t}\r\n+\r\n+\tpublic void setDayInWeek(Long dayInWeek) {\r\n+\t\tthis.dayInWeek = dayInWeek;\r\n+\t}\r\n+\r\n+\r\n+}\r"},{"sha":"a6156aab8a90ac571f9cef647c52cb61b7c53b77","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/multiselect/DimDay_.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/7b1c24e1fa855114a28a7c065039798a5a0ef704/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/multiselect/DimDay_.java","raw_url":"https://github.com/apache/openjpa/raw/7b1c24e1fa855114a28a7c065039798a5a0ef704/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/multiselect/DimDay_.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/multiselect/DimDay_.java?ref=7b1c24e1fa855114a28a7c065039798a5a0ef704","patch":"@@ -0,0 +1,70 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.criteria.multiselect;\r\n+\r\n+import java.lang.Integer;\r\n+import java.lang.Long;\r\n+import java.lang.String;\r\n+import java.util.Date;\r\n+import javax.persistence.metamodel.SingularAttribute;\r\n+\r\n+@javax.persistence.metamodel.StaticMetamodel\r\n+(value=DimDay.class)\r\n+@javax.annotation.Generated\r\n+(value=\"org.apache.openjpa.persistence.meta.AnnotationProcessor6\",date=\"Mon Feb 23 16:53:34 MST 2015\")\r\n+public class DimDay_ {\r\n+    public static volatile SingularAttribute<DimDay,Long> currentMonthInd;\r\n+    public static volatile SingularAttribute<DimDay,Long> currentMonthVsPrevYearInd;\r\n+    public static volatile SingularAttribute<DimDay,Long> currentQtrInd;\r\n+    public static volatile SingularAttribute<DimDay,Long> currentQtrVsPrevYearInd;\r\n+    public static volatile SingularAttribute<DimDay,Long> currentYearInd;\r\n+    public static volatile SingularAttribute<DimDay,Date> date;\r\n+    public static volatile SingularAttribute<DimDay,String> dayFullName;\r\n+    public static volatile SingularAttribute<DimDay,Long> dayInMonth;\r\n+    public static volatile SingularAttribute<DimDay,Long> dayInQuarter;\r\n+    public static volatile SingularAttribute<DimDay,Long> dayInWeek;\r\n+    public static volatile SingularAttribute<DimDay,Long> dayInYear;\r\n+    public static volatile SingularAttribute<DimDay,Long> eomInd;\r\n+    public static volatile SingularAttribute<DimDay,Long> eoqInd;\r\n+    public static volatile SingularAttribute<DimDay,Long> eoyInd;\r\n+    public static volatile SingularAttribute<DimDay,Long> key;\r\n+    public static volatile SingularAttribute<DimDay,String> monthCode;\r\n+    public static volatile SingularAttribute<DimDay,Long> monthEndDate;\r\n+    public static volatile SingularAttribute<DimDay,String> monthFullName;\r\n+    public static volatile SingularAttribute<DimDay,Long> monthInYearNumber;\r\n+    public static volatile SingularAttribute<DimDay,String> monthName;\r\n+    public static volatile SingularAttribute<DimDay,Long> monthStrtDate;\r\n+    public static volatile SingularAttribute<DimDay,Long> prevMonthInd;\r\n+    public static volatile SingularAttribute<DimDay,Long> prevQtrInd;\r\n+    public static volatile SingularAttribute<DimDay,Long> prevYearInd;\r\n+    public static volatile SingularAttribute<DimDay,String> qtrFullName;\r\n+    public static volatile SingularAttribute<DimDay,String> quarterCode;\r\n+    public static volatile SingularAttribute<DimDay,Long> quarterEndDate;\r\n+    public static volatile SingularAttribute<DimDay,Integer> quarterInYearNumber;\r\n+    public static volatile SingularAttribute<DimDay,Long> quarterStrtDate;\r\n+    public static volatile SingularAttribute<DimDay,Long> roll13MonthInd;\r\n+    public static volatile SingularAttribute<DimDay,Long> roll4YearsInd;\r\n+    public static volatile SingularAttribute<DimDay,Long> roll5QuartersInd;\r\n+    public static volatile SingularAttribute<DimDay,Long> weekInYear;\r\n+    public static volatile SingularAttribute<DimDay,String> weekInYearFullNm;\r\n+    public static volatile SingularAttribute<DimDay,String> year;\r\n+    public static volatile SingularAttribute<DimDay,String> yearCode;\r\n+    public static volatile SingularAttribute<DimDay,Long> yearEndDate;\r\n+    public static volatile SingularAttribute<DimDay,Long> yearStrtDate;\r\n+}\r"},{"sha":"d84d3e62bf7b38e00c4cfc669a3c9a67c0b8e756","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/multiselect/FactWorkAssignment.java","status":"added","additions":308,"deletions":0,"changes":308,"blob_url":"https://github.com/apache/openjpa/blob/7b1c24e1fa855114a28a7c065039798a5a0ef704/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/multiselect/FactWorkAssignment.java","raw_url":"https://github.com/apache/openjpa/raw/7b1c24e1fa855114a28a7c065039798a5a0ef704/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/multiselect/FactWorkAssignment.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/multiselect/FactWorkAssignment.java?ref=7b1c24e1fa855114a28a7c065039798a5a0ef704","patch":"@@ -0,0 +1,308 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.criteria.multiselect;\r\n+\r\n+import java.util.Date;\r\n+\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name = \"T_FACT_WORK_ASGNMT\")\r\n+public class FactWorkAssignment {\r\n+\t@Id\r\n+\t@Column(name = \"CLNT_OBJ_ID\")\r\n+\tprivate String orgOID;\r\n+\t\r\n+\t@Column(name = \"rec_eff_strt_dt\")\r\n+\tprivate Date effStartDt;\r\n+\t\r\n+\t@Column(name = \"rec_eff_end_dt\")\r\n+\tprivate Date effEndDt;\r\n+\t\r\n+\t\r\n+\t@Column(name = \"rec_eff_strt_day_ky\")\r\n+\tprivate Long effectiveStartDate;\r\n+\t\r\n+\t@Column(name = \"rec_eff_end_day_ky\")\r\n+\tprivate Long effectiveEndDate;\r\n+\t\r\n+\t@Column(name = \"pers_ky\")\r\n+\tprivate Long personKey;\r\n+\t\r\n+\t@Column(name = \"pers_obj_id\")\r\n+\tprivate String personObjId;\r\n+\t\r\n+\t@Column(name = \"prmry_work_asgnmt_ind\")\r\n+\tprivate int primary;\r\n+\r\n+\t@Column(name = \"empl_cnt\")\r\n+\tprivate int employeeCount;\r\n+\t\r\n+\t@Column(name = \"work_asgnmt_stus_cd\")\r\n+\tprivate String statusCode;\r\n+\t\r\n+\t@Column(name=\"WORK_ASGNMT_STUS_DSC\")\r\n+\tprivate String statusDesc;\t\r\n+\t\r\n+\t@Column(name=\"WORK_ASGNMT_NBR\")\r\n+\tprivate String workAssgnmntNbr;\t\r\n+\r\n+\t@Column(name = \"work_loc_ky\")\r\n+\tprivate Long workLocationKey;\r\n+\t\r\n+\t@Column(name = \"hr_orgn_ky\")\r\n+\tprivate Long hrOrgKey;\r\n+\t\r\n+\t@Column(name = \"PAYRL_ORGN_KY\")\r\n+\tprivate Long payrollOrgKey;\r\n+\t\t\r\n+\t@Column(name = \"job_ky\")\r\n+\tprivate Long jobKey;\r\n+\r\n+\t@Column(name = \"PERS_PRFL_ATTR_KY\")\r\n+\tprivate Long personProfileKey;\r\n+\t\r\n+\t@Column(name = \"mngr_ky\")\r\n+\tprivate Long managerKey;\r\n+\r\n+\t@Column(name = \"PAY_GRP_KY\")\r\n+\tprivate Long paygroupKey;\r\n+\r\n+\t@Column(name = \"SAL_PLAN_KY\")\r\n+\tprivate Long salPlanKey;\r\n+\t\r\n+\t@Column(name = \"COMPA_RT\")\r\n+\tprivate Double compaRt;\r\n+\t\r\n+\t@Column(name=\"CLK_NBR\")\r\n+\tprivate String clockNumber;\r\n+\t\r\n+\t@Column(name=\"DATA_CNTL_NBR\")\r\n+\tprivate String dataCntrlNumber;\r\n+\t\r\n+\t@Column(name=\"SEC_CLR_CD\")\r\n+\tprivate String secClrCd;\r\n+\t\r\n+\t@Column(name = \"CUR_REC_IND\")\r\n+\tprivate boolean currentRecord;\r\n+\t\r\n+\tpublic Long getSalPlanKey() {\r\n+\t\treturn salPlanKey;\r\n+\t}\r\n+\r\n+\tpublic void setSalPlanKey(Long salPlanKey) {\r\n+\t\tthis.salPlanKey = salPlanKey;\r\n+\t}\r\n+\r\n+\tpublic Long getManagerKey() {\r\n+\t\treturn managerKey;\r\n+\t}\r\n+\r\n+\tpublic void setManagerKey(Long managerKey) {\r\n+\t\tthis.managerKey = managerKey;\r\n+\t}\r\n+\r\n+\tpublic Long getPersonProfileKey() {\r\n+\t\treturn personProfileKey;\r\n+\t}\r\n+\r\n+\tpublic void setPersonProfileKey(Long personProfileKey) {\r\n+\t\tthis.personProfileKey = personProfileKey;\r\n+\t}\r\n+\r\n+\tpublic int getPrimary() {\r\n+\t\treturn primary;\r\n+\t}\r\n+\r\n+\tpublic void setPrimary(int primary) {\r\n+\t\tthis.primary = primary;\r\n+\t}\r\n+\r\n+\tpublic int getEmployeeCount() {\r\n+\t\treturn employeeCount;\r\n+\t}\r\n+\r\n+\tpublic void setEmployeeCount(int employeeCount) {\r\n+\t\tthis.employeeCount = employeeCount;\r\n+\t}\r\n+\r\n+\tpublic String getStatusCode() {\r\n+\t\treturn statusCode;\r\n+\t}\r\n+\r\n+\tpublic void setStatusCode(String statusCode) {\r\n+\t\tthis.statusCode = statusCode;\r\n+\t}\r\n+\t\r\n+\tpublic String getStatusDesc() {\r\n+\t\treturn statusDesc;\r\n+\t}\r\n+\r\n+\tpublic void setStatusDesc(String statusDesc) {\r\n+\t\tthis.statusDesc = statusDesc;\r\n+\t}\r\n+\r\n+\tpublic Long getWorkLocationKey() {\r\n+\t\treturn workLocationKey;\r\n+\t}\r\n+\r\n+\tpublic void setWorkLocationKey(Long workLocationKey) {\r\n+\t\tthis.workLocationKey = workLocationKey;\r\n+\t}\r\n+\r\n+\tpublic Long getHrOrgKey() {\r\n+\t\treturn hrOrgKey;\r\n+\t}\r\n+\r\n+\tpublic void setHrOrgKey(Long hrOrgKey) {\r\n+\t\tthis.hrOrgKey = hrOrgKey;\r\n+\t}\r\n+\r\n+\tpublic Long getJobKey() {\r\n+\t\treturn jobKey;\r\n+\t}\r\n+\r\n+\tpublic void setJobKey(Long jobKey) {\r\n+\t\tthis.jobKey = jobKey;\r\n+\t}\r\n+\r\n+\tpublic Long getPayrollOrgKey() {\r\n+\t\treturn payrollOrgKey;\r\n+\t}\r\n+\r\n+\tpublic void setPayrollOrgKey(Long payrollOrgKey) {\r\n+\t\tthis.payrollOrgKey = payrollOrgKey;\r\n+\t}\r\n+\r\n+\tpublic Double getCompaRt() {\r\n+\t\treturn compaRt;\r\n+\t}\r\n+\r\n+\tpublic void setCompaRt(Double compaRt) {\r\n+\t\tthis.compaRt = compaRt;\r\n+\t}\r\n+\r\n+\tpublic Long getPaygroupKey() {\r\n+\t\treturn paygroupKey;\r\n+\t}\r\n+\r\n+\tpublic void setPaygroupKey(Long paygroupKey) {\r\n+\t\tthis.paygroupKey = paygroupKey;\r\n+\t}\r\n+\r\n+\tpublic String getClockNumber() {\r\n+\t\treturn clockNumber;\r\n+\t}\r\n+\r\n+\tpublic void setClockNumber(String clockNumber) {\r\n+\t\tthis.clockNumber = clockNumber;\r\n+\t}\r\n+\r\n+\tpublic String getDataCntrlNumber() {\r\n+\t\treturn dataCntrlNumber;\r\n+\t}\r\n+\r\n+\tpublic void setDataCntrlNumber(String dataCntrlNumber) {\r\n+\t\tthis.dataCntrlNumber = dataCntrlNumber;\r\n+\t}\r\n+\r\n+\tpublic String getSecClrCd() {\r\n+\t\treturn secClrCd;\r\n+\t}\r\n+\r\n+\tpublic void setSecClrCd(String secClrCd) {\r\n+\t\tthis.secClrCd = secClrCd;\r\n+\t}\r\n+\r\n+\tpublic boolean isCurrentRecord() {\r\n+\t\treturn currentRecord;\r\n+\t}\r\n+\r\n+\tpublic void setCurrentRecord(boolean currentRecord) {\r\n+\t\tthis.currentRecord = currentRecord;\r\n+\t}\r\n+\r\n+\tpublic String getWorkAssgnmntNbr() {\r\n+\t\treturn workAssgnmntNbr;\r\n+\t}\r\n+\r\n+\tpublic void setWorkAssgnmntNbr(String workAssgnmntNbr) {\r\n+\t\tthis.workAssgnmntNbr = workAssgnmntNbr;\r\n+\t}\r\n+\r\n+\tpublic String getOrgOID() {\r\n+\t\treturn orgOID;\r\n+\t}\r\n+\r\n+\tpublic void setOrgOID(String orgOID) {\r\n+\t\tthis.orgOID = orgOID;\r\n+\t}\r\n+\r\n+\tpublic Long getEffectiveStartDate() {\r\n+\t\treturn effectiveStartDate;\r\n+\t}\r\n+\r\n+\tpublic void setEffectiveStartDate(Long effectiveStartDate) {\r\n+\t\tthis.effectiveStartDate = effectiveStartDate;\r\n+\t}\r\n+\r\n+\tpublic Long getEffectiveEndDate() {\r\n+\t\treturn effectiveEndDate;\r\n+\t}\r\n+\r\n+\tpublic void setEffectiveEndDate(Long effectiveEndDate) {\r\n+\t\tthis.effectiveEndDate = effectiveEndDate;\r\n+\t}\r\n+\r\n+\tpublic Long getPersonKey() {\r\n+\t\treturn personKey;\r\n+\t}\r\n+\r\n+\tpublic void setPersonKey(Long personKey) {\r\n+\t\tthis.personKey = personKey;\r\n+\t}\r\n+\r\n+\tpublic String getPersonObjId() {\r\n+\t\treturn personObjId;\r\n+\t}\r\n+\r\n+\tpublic void setPersonObjId(String personObjId) {\r\n+\t\tthis.personObjId = personObjId;\r\n+\t}\r\n+\r\n+\tpublic Date getEffStartDt() {\r\n+\t\treturn effStartDt;\r\n+\t}\r\n+\r\n+\tpublic void setEffStartDt(Date effStartDt) {\r\n+\t\tthis.effStartDt = effStartDt;\r\n+\t}\r\n+\r\n+\tpublic Date getEffEndDt() {\r\n+\t\treturn effEndDt;\r\n+\t}\r\n+\r\n+\tpublic void setEffEndDt(Date effEndDt) {\r\n+\t\tthis.effEndDt = effEndDt;\r\n+\t}\r\n+\t\r\n+}\r"},{"sha":"8ded3fe3cf34ee3c55751b84b9ddc4bf01f97f6d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/multiselect/FactWorkAssignment_.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/7b1c24e1fa855114a28a7c065039798a5a0ef704/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/multiselect/FactWorkAssignment_.java","raw_url":"https://github.com/apache/openjpa/raw/7b1c24e1fa855114a28a7c065039798a5a0ef704/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/multiselect/FactWorkAssignment_.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/multiselect/FactWorkAssignment_.java?ref=7b1c24e1fa855114a28a7c065039798a5a0ef704","patch":"@@ -0,0 +1,59 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.criteria.multiselect;\r\n+\r\n+import java.lang.Boolean;\r\n+import java.lang.Double;\r\n+import java.lang.Integer;\r\n+import java.lang.Long;\r\n+import java.lang.String;\r\n+import java.util.Date;\r\n+import javax.persistence.metamodel.SingularAttribute;\r\n+\r\n+@javax.persistence.metamodel.StaticMetamodel\r\n+(value=FactWorkAssignment.class)\r\n+@javax.annotation.Generated\r\n+(value=\"org.apache.openjpa.persistence.meta.AnnotationProcessor6\",date=\"Mon Feb 23 16:16:50 MST 2015\")\r\n+public class FactWorkAssignment_ {\r\n+    public static volatile SingularAttribute<FactWorkAssignment,String> clockNumber;\r\n+    public static volatile SingularAttribute<FactWorkAssignment,Double> compaRt;\r\n+    public static volatile SingularAttribute<FactWorkAssignment,Boolean> currentRecord;\r\n+    public static volatile SingularAttribute<FactWorkAssignment,String> dataCntrlNumber;\r\n+    public static volatile SingularAttribute<FactWorkAssignment,Date> effEndDt;\r\n+    public static volatile SingularAttribute<FactWorkAssignment,Date> effStartDt;\r\n+    public static volatile SingularAttribute<FactWorkAssignment,Long> effectiveEndDate;\r\n+    public static volatile SingularAttribute<FactWorkAssignment,Long> effectiveStartDate;\r\n+    public static volatile SingularAttribute<FactWorkAssignment,Integer> employeeCount;\r\n+    public static volatile SingularAttribute<FactWorkAssignment,Long> hrOrgKey;\r\n+    public static volatile SingularAttribute<FactWorkAssignment,Long> jobKey;\r\n+    public static volatile SingularAttribute<FactWorkAssignment,Long> managerKey;\r\n+    public static volatile SingularAttribute<FactWorkAssignment,String> orgOID;\r\n+    public static volatile SingularAttribute<FactWorkAssignment,Long> paygroupKey;\r\n+    public static volatile SingularAttribute<FactWorkAssignment,Long> payrollOrgKey;\r\n+    public static volatile SingularAttribute<FactWorkAssignment,Long> personKey;\r\n+    public static volatile SingularAttribute<FactWorkAssignment,String> personObjId;\r\n+    public static volatile SingularAttribute<FactWorkAssignment,Long> personProfileKey;\r\n+    public static volatile SingularAttribute<FactWorkAssignment,Integer> primary;\r\n+    public static volatile SingularAttribute<FactWorkAssignment,Long> salPlanKey;\r\n+    public static volatile SingularAttribute<FactWorkAssignment,String> secClrCd;\r\n+    public static volatile SingularAttribute<FactWorkAssignment,String> statusCode;\r\n+    public static volatile SingularAttribute<FactWorkAssignment,String> statusDesc;\r\n+    public static volatile SingularAttribute<FactWorkAssignment,String> workAssgnmntNbr;\r\n+    public static volatile SingularAttribute<FactWorkAssignment,Long> workLocationKey;\r\n+}\r"},{"sha":"aad71f04f587da1483570cab9d2f7a257d326b4c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/multiselect/TestCriteriaMultiselectAliasing.java","status":"added","additions":166,"deletions":0,"changes":166,"blob_url":"https://github.com/apache/openjpa/blob/7b1c24e1fa855114a28a7c065039798a5a0ef704/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/multiselect/TestCriteriaMultiselectAliasing.java","raw_url":"https://github.com/apache/openjpa/raw/7b1c24e1fa855114a28a7c065039798a5a0ef704/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/multiselect/TestCriteriaMultiselectAliasing.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/multiselect/TestCriteriaMultiselectAliasing.java?ref=7b1c24e1fa855114a28a7c065039798a5a0ef704","patch":"@@ -0,0 +1,166 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.criteria.multiselect;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Tuple;\r\n+import javax.persistence.criteria.CriteriaBuilder;\r\n+import javax.persistence.criteria.CriteriaQuery;\r\n+import javax.persistence.criteria.Expression;\r\n+import javax.persistence.criteria.Predicate;\r\n+import javax.persistence.criteria.Root;\r\n+import javax.persistence.criteria.Selection;\r\n+import javax.persistence.criteria.Subquery;\r\n+\r\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n+\r\n+public class TestCriteriaMultiselectAliasing extends SQLListenerTestCase {\r\n+    CriteriaQuery<Tuple> critQuery;\r\n+    String critQueryString;\r\n+\r\n+    String doCB = System.getProperty(\"doCB\");\r\n+    \r\n+    @Override\r\n+    public void setUp() throws Exception {\r\n+        // Only run on Oracle....the asserts at this time look for SQL specific to the\r\n+        // way things are generated for Oracle.\r\n+        setSupportedDatabases(\r\n+            org.apache.openjpa.jdbc.sql.OracleDictionary.class);\r\n+        if (isTestsDisabled()) {\r\n+            return;\r\n+        }\r\n+\r\n+        super.setUp(DimDay.class, FactWorkAssignment.class\r\n+            ,\"openjpa.Log\",\"SQL=TRACE,Tests=TRACE\", \"openjpa.ConnectionFactoryProperties\",\r\n+            \"PrintParameters=true, PrettyPrint=true, PrettyPrintLineLength=72\"\r\n+            );\r\n+        \r\n+        critQuery = createCriteriaBuilder();\r\n+        critQueryString = critQuery.toString();\r\n+        System.out.println(\"critQueryString = \" + critQueryString);\r\n+    }\r\n+\r\n+    public void test (){\r\n+        if (\"true\".equals(doCB)){\r\n+            this.ttestCriteriaQuery();\r\n+        }\r\n+        else{\r\n+            this.ttestGeneratedCriteriaQueryString();\r\n+        }\r\n+        \r\n+    }\r\n+    /**\r\n+     * This method produce wrong query like (note the extra T_DIM_DAY t3):\r\n+     * SELECT t0.empl_cnt FROM\r\n+     * T_FACT_WORK_ASGNMT t0, T_DIM_DAY t1, T_DIM_DAY t3 \r\n+     * WHERE (t0.CLNT_OBJ_ID = ? AND t1.ROLL_13_MNTH_IND = ? AND t0.pers_obj_id IN (\r\n+     *     SELECT t2.pers_obj_id FROM T_FACT_WORK_ASGNMT t2 WHERE (t2.CLNT_OBJ_ID = ? AND\r\n+     *     t3.MNTH_STRT_DAY_KY >= ?))) \r\n+     * [params=(String) dummy1, (int) 1, (String) dummy1, (long) 20150201]\r\n+     * \r\n+     * The correct query should be:\r\n+     * SELECT t0.empl_cnt FROM\r\n+     * T_FACT_WORK_ASGNMT t0, T_DIM_DAY t1 \r\n+     * WHERE (t0.CLNT_OBJ_ID = ? AND t1.ROLL_13_MNTH_IND = ? AND t0.pers_obj_id IN (\r\n+     *     SELECT t2.pers_obj_id FROM T_FACT_WORK_ASGNMT t2 WHERE (t2.CLNT_OBJ_ID = ? AND\r\n+     *     t3.MNTH_STRT_DAY_KY >= ?))) \r\n+     * [params=(String) dummy1, (int) 1, (String) dummy1, (long) 20150201]\r\n+     * \r\n+     */\r\n+    public void ttestCriteriaQuery() {\r\n+        EntityManager em = emf.createEntityManager();     \r\n+        resetSQL();\r\n+        em.createQuery(critQuery).getResultList();\r\n+        assertNotSQL(\".*T_DIM_DAY t3.*\");\r\n+        assertSQL(\".*T_DIM_DAY t1.*\");        \r\n+        em.close();\r\n+    }\r\n+\r\n+    /** \r\n+     * If we execute just the string generated by Criteria Builder, we \r\n+     * do not see an extra alias.  We see:\r\n+     * SELECT t0.empl_cnt FROM T_FACT_WORK_ASGNMT t0, T_DIM_DAY t1 \r\n+     * WHERE (t0.CLNT_OBJ_ID = ? AND t1.ROLL_13_MNTH_IND = ? AND \r\n+     *   t0.pers_obj_id IN (SELECT t2.pers_obj_id FROM \r\n+     *   T_FACT_WORK_ASGNMT t2 WHERE (t2.CLNT_OBJ_ID = ? AND \r\n+     *   t1.MNTH_STRT_DAY_KY = ?))) \r\n+     */\r\n+    public void ttestGeneratedCriteriaQueryString(){\r\n+        if (!\"true\".equals(doCB)){\r\n+        EntityManager em = emf.createEntityManager();\r\n+        System.out.println(\"NOT doing CB\");\r\n+        resetSQL();\r\n+        em.createQuery(critQueryString).getResultList();\r\n+        assertNotSQL(\".*T_DIM_DAY t3.*\");\r\n+        assertSQL(\".*T_DIM_DAY t1.*\");\r\n+        em.close();\r\n+        }\r\n+    }\r\n+    \r\n+    public CriteriaQuery<Tuple> createCriteriaBuilder(){\r\n+            EntityManager em = emf.createEntityManager();\r\n+            \r\n+            List<Predicate> predicates = new ArrayList<Predicate>();\r\n+            CriteriaBuilder cb = em.getCriteriaBuilder();\r\n+            CriteriaQuery<Tuple> cq = cb.createTupleQuery();\r\n+            Root<DimDay> day = cq.from(DimDay.class);   \r\n+\r\n+            Root<FactWorkAssignment> wa =  cq.from(FactWorkAssignment.class);\r\n+            \r\n+            predicates.add(cb.equal(wa.get(FactWorkAssignment_.orgOID), \"dummy1\"));\r\n+            predicates.add(cb.equal(day.get(DimDay_.roll13MonthInd), 1));\r\n+            \r\n+            Subquery<String> subQuery = cq.subquery(String.class);\r\n+\r\n+            Root<FactWorkAssignment> wa1 = subQuery.from(FactWorkAssignment.class);\r\n+\r\n+            subQuery.select(wa1.get(FactWorkAssignment_.personObjId));\r\n+            List<Predicate> subQueryPredicates = new ArrayList<Predicate>();\r\n+            subQueryPredicates.add(cb.equal(wa1.get(FactWorkAssignment_.orgOID), \"dummy1\"));\r\n+\r\n+            //Removing this seem to \"fix\" the issue....I think the fact that we use 'day' from \r\n+            //the 'outer' query has an affect....is it OK to use 'day' from the outer query??   I'm \r\n+            //assuming so since 'testGeneratedCriteriaQueryString' generates the expected SQL. \r\n+//            subQueryPredicates.add(cb.greaterThanOrEqualTo(day.get(DimDay_.monthStrtDate), new Long(20150201L)));\r\n+            subQueryPredicates.add(cb.equal(day.get(DimDay_.monthStrtDate), new Long(20150201L)));\r\n+            \r\n+            //Doing this places the 'T_DIM_DAY t3' in the 'inner'/sub query.  Is this the proper solution??  Or just a\r\n+            //hacky work around?  \r\n+            //Root<DimDay> day2 =  subQuery.from(DimDay.class);\r\n+            //subQueryPredicates.add(cb.greaterThanOrEqualTo(day2.get(DimDay_.monthStrtDate), new Long(20150201L)));\r\n+            \r\n+            subQuery.where(subQueryPredicates.toArray(new Predicate[] {}));\r\n+\r\n+            Predicate predicate = wa.get(FactWorkAssignment_.personObjId).in(subQuery);\r\n+            \r\n+            predicates.add(predicate);\r\n+            \r\n+            List<Selection<?>> selections = new ArrayList<Selection<?>>();\r\n+            \r\n+            Expression<Integer> expHC = wa.get(FactWorkAssignment_.employeeCount);\r\n+            selections.add(expHC);\r\n+\r\n+            cq.multiselect(selections).where(predicates.toArray(new Predicate[] {}));\r\n+            \r\n+            return cq;\r\n+        }\r\n+}\r"}]}

