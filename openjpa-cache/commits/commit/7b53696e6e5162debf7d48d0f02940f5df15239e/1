{"sha":"7b53696e6e5162debf7d48d0f02940f5df15239e","node_id":"MDY6Q29tbWl0MjA2MzY0OjdiNTM2OTZlNmU1MTYyZGViZjdkNDhkMGYwMjk0MGY1ZGYxNTIzOWU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-15T19:35:16Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-01-15T19:35:16Z"},"message":"OPENJPA-1464: Reparameterize with enum-valued parameters.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@899780 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f3b185f17fe869db9bb8689810d17df6a987c587","url":"https://api.github.com/repos/apache/openjpa/git/trees/f3b185f17fe869db9bb8689810d17df6a987c587"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7b53696e6e5162debf7d48d0f02940f5df15239e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7b53696e6e5162debf7d48d0f02940f5df15239e","html_url":"https://github.com/apache/openjpa/commit/7b53696e6e5162debf7d48d0f02940f5df15239e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7b53696e6e5162debf7d48d0f02940f5df15239e/comments","author":null,"committer":null,"parents":[{"sha":"8e0e9cfbd2bd8616d6a30d3100cf609145d2342f","url":"https://api.github.com/repos/apache/openjpa/commits/8e0e9cfbd2bd8616d6a30d3100cf609145d2342f","html_url":"https://github.com/apache/openjpa/commit/8e0e9cfbd2bd8616d6a30d3100cf609145d2342f"}],"stats":{"total":53,"additions":52,"deletions":1},"files":[{"sha":"8e569600150feef2a07710f7dba1430b7f311e12","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/7b53696e6e5162debf7d48d0f02940f5df15239e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/7b53696e6e5162debf7d48d0f02940f5df15239e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryImpl.java?ref=7b53696e6e5162debf7d48d0f02940f5df15239e","patch":"@@ -271,8 +271,16 @@ private SelectImpl extractImplementation(SelectExecutor selector) {\n                 setCollectionValuedParameter(result, (Collection)val, indices, \n                     key);\n             } else {\n-                for (int j : indices)\n+                for (int j : indices) {\n+                    if (val instanceof Enum) {\n+                        if (_template.get(j) instanceof Integer) {\n+                            val = ((Enum)val).ordinal();\n+                        } else {\n+                            val = ((Enum)val).name();\n+                        }\n+                    } \n                     result.put(j, val);\n+                }\n             }\n         }\n         return result;"},{"sha":"517db4b1e9114803b4505bec90a328f8ec15ff19","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Employee.java","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/7b53696e6e5162debf7d48d0f02940f5df15239e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/7b53696e6e5162debf7d48d0f02940f5df15239e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Employee.java?ref=7b53696e6e5162debf7d48d0f02940f5df15239e","patch":"@@ -24,6 +24,8 @@\n @Table(name=\"EMPLOYEE_PQC\")\n \n public class Employee {\n+    public enum Category {PERMANENT, CONTRACTOR, TEMP};\n+    \n \t@Id\n \t@GeneratedValue\n \tprivate long id;\n@@ -37,6 +39,11 @@\n \tprivate Address address;\n \t\n \tprivate boolean isManager;\n+\t\n+\tprivate Category status;\n+\t\n+\t@Enumerated(EnumType.ORDINAL)\n+\tprivate Category hireStatus;\n \n \tpublic boolean isManager() {\n         return isManager;\n@@ -73,5 +80,21 @@ public void setAddress(Address address) {\n \tpublic long getId() {\n \t\treturn id;\n \t}\n+\t\n+    public Category getHireStatus() {\n+        return hireStatus;\n+    }\n+    \n+    public Category setHireStatus(Category status) {\n+        return hireStatus;\n+    }\n+    \n+    public Category getCurrentStatus() {\n+        return status;\n+    }\n+    \n+    public Category getCurrentStatus(Category status) {\n+        return status;\n+    }\n \n }"},{"sha":"b50d836dea563bbb0f259962b7da555b3968fa72","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/7b53696e6e5162debf7d48d0f02940f5df15239e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/7b53696e6e5162debf7d48d0f02940f5df15239e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java?ref=7b53696e6e5162debf7d48d0f02940f5df15239e","patch":"@@ -28,6 +28,7 @@\n import javax.persistence.EntityManager;\n import javax.persistence.LockModeType;\n import javax.persistence.Query;\n+import javax.persistence.TypedQuery;\n \n import junit.framework.TestCase;\n \n@@ -44,6 +45,7 @@\n import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.openjpa.persistence.OpenJPAQuery;\n+import org.apache.openjpa.persistence.jdbc.sqlcache.Employee.Category;\n \n /**\n  * Tests correctness and performance of queries with and without Prepared Query Cacheing.\n@@ -760,6 +762,24 @@ public void testPreparedQueryIgnoredWhenLockModeIsSet() {\n         em.getTransaction().rollback();\n     }\n     \n+    public void testEnumParameter() {\n+        String jpql = \"select e from Employee e where e.status=:current and e.hireStatus=:hire\";\n+        EntityManager em = emf.createEntityManager();\n+        \n+        TypedQuery<Employee> q1 = em.createQuery(jpql, Employee.class);\n+        assertEquals(JPQLParser.LANG_JPQL, OpenJPAPersistence.cast(q1).getLanguage());\n+        List<Employee> emps = q1.setParameter(\"current\", Category.PERMANENT)\n+                                .setParameter(\"hire\", Category.CONTRACTOR).getResultList();\n+        \n+        // do the same thing again, this time query should be cached\n+        em.getTransaction().begin();\n+        TypedQuery<Employee> q2 = em.createQuery(jpql, Employee.class);\n+        assertEquals(QueryLanguages.LANG_PREPARED_SQL, OpenJPAPersistence.cast(q2).getLanguage());\n+        List<Employee> emps2 = q2.setParameter(\"current\", Category.PERMANENT)\n+                            .setParameter(\"hire\", Category.CONTRACTOR).getResultList();\n+        em.getTransaction().rollback();\n+    }\n+    \n     \n     PreparedQueryCache getPreparedQueryCache() {\n         return emf.getConfiguration().getQuerySQLCacheInstance();"}]}

