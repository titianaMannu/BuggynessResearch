{"sha":"7b6c11a6cd8987e33b3f0cd5c77a16798471acf6","node_id":"MDY6Q29tbWl0MjA2MzY0OjdiNmMxMWE2Y2Q4OTg3ZTMzYjNmMGNkNWM3N2ExNjc5ODQ3MWFjZjY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-18T17:23:06Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-02-18T17:23:06Z"},"message":"OPENJPA-924: Remove logging from FinderCache -- such low-level details seem to confuse rather to inform the user.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@911496 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"64d88571a1d913c64f45699cd6a6c9013db2d3cf","url":"https://api.github.com/repos/apache/openjpa/git/trees/64d88571a1d913c64f45699cd6a6c9013db2d3cf"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7b6c11a6cd8987e33b3f0cd5c77a16798471acf6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7b6c11a6cd8987e33b3f0cd5c77a16798471acf6","html_url":"https://github.com/apache/openjpa/commit/7b6c11a6cd8987e33b3f0cd5c77a16798471acf6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7b6c11a6cd8987e33b3f0cd5c77a16798471acf6/comments","author":null,"committer":null,"parents":[{"sha":"fe2c9295f430082c84a541215cd8c14e1e1f6f14","url":"https://api.github.com/repos/apache/openjpa/commits/fe2c9295f430082c84a541215cd8c14e1e1f6f14","html_url":"https://github.com/apache/openjpa/commit/fe2c9295f430082c84a541215cd8c14e1e1f6f14"}],"stats":{"total":90,"additions":22,"deletions":68},"files":[{"sha":"98bb6d4137bd3714ff2593e04a3e7d0eab455c91","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderCacheImpl.java","status":"modified","additions":22,"deletions":64,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/7b6c11a6cd8987e33b3f0cd5c77a16798471acf6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderCacheImpl.java","raw_url":"https://github.com/apache/openjpa/raw/7b6c11a6cd8987e33b3f0cd5c77a16798471acf6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderCacheImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/FinderCacheImpl.java?ref=7b6c11a6cd8987e33b3f0cd5c77a16798471acf6","patch":"@@ -29,7 +29,6 @@\n import java.util.concurrent.locks.ReentrantLock;\n \n import org.apache.commons.lang.StringUtils;\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.SelectExecutor;\n@@ -39,8 +38,6 @@\n import org.apache.openjpa.kernel.QueryHints;\n import org.apache.openjpa.kernel.QueryStatistics;\n import org.apache.openjpa.lib.conf.Configuration;\n-import org.apache.openjpa.lib.log.Log;\n-import org.apache.openjpa.lib.util.Localizer;\n \n /**\n  * Implementation of FinderCache for JDBC.\n@@ -55,20 +52,15 @@\n     private static final String PATTERN_SEPARATOR = \"\\\\;\";\n     private static final String EXLUDED_BY_USER = \"Excluded by user\";\n      \n-    private final Map<ClassMapping, \n-        FinderQuery<ClassMapping, SelectExecutor, Result>> _delegate;\n+    private final Map<ClassMapping, FinderQuery<ClassMapping, SelectExecutor, Result>> _delegate;\n     // Key: class name Value: Reason why excluded\n     private final Map<String, String> _uncachables;\n     private List<String> _exclusionPatterns;\n     private QueryStatistics<ClassMapping> _stats;\n     private ReentrantLock _lock = new ReentrantLock();\n-    private Log _log;\n-    private Localizer _loc = Localizer.forPackage(FinderCacheImpl.class);\n-\n     \n     public FinderCacheImpl() {\n-        _delegate = new HashMap<ClassMapping, \n-            FinderQuery<ClassMapping, SelectExecutor, Result>>();\n+        _delegate = new HashMap<ClassMapping, FinderQuery<ClassMapping, SelectExecutor, Result>>();\n         _uncachables = new HashMap<String, String>();\n         _stats = new QueryStatistics.Default<ClassMapping>();\n     }\n@@ -82,9 +74,10 @@ public FinderCacheImpl() {\n         lock();\n         try {\n             Map<String, String> view = new TreeMap<String, String>();\n-            for (ClassMapping mapping : _delegate.keySet())\n+            for (ClassMapping mapping : _delegate.keySet()) {\n                 view.put(mapping.getDescribedType().getName(), \n                     _delegate.get(mapping).getQueryString());\n+            }\n             return view;\n         } finally {\n             unlock();\n@@ -110,16 +103,18 @@ public FinderCacheImpl() {\n      */\n     public FinderQuery<ClassMapping,SelectExecutor,Result> \n         get(ClassMapping mapping, FetchConfiguration fetch) {\n-        if (fetch.getReadLockLevel() != 0)\n+        if (fetch.getReadLockLevel() != 0) {\n             return null;\n+        }\n         boolean ignore = isHinted(fetch, QueryHints.HINT_IGNORE_FINDER);\n         boolean invalidate = isHinted(fetch, QueryHints.HINT_INVALIDATE_FINDER);\n-        if (invalidate)\n+        if (invalidate) {\n             invalidate(mapping);\n-        if (ignore)\n+        }\n+        if (ignore) {\n             return null;\n-        FinderQuery<ClassMapping, SelectExecutor, Result> result = \n-            _delegate.get(mapping);\n+        }\n+        FinderQuery<ClassMapping, SelectExecutor, Result> result = _delegate.get(mapping);\n         _stats.recordExecution(mapping);\n         return result;\n     }\n@@ -145,8 +140,9 @@ public FinderCacheImpl() {\n        (ClassMapping mapping, SelectExecutor select, FetchConfiguration fetch) {\n         lock();\n         try {\n-            if (fetch.getReadLockLevel() != 0)\n+            if (fetch.getReadLockLevel() != 0) {\n                 return null;\n+            }\n             boolean recache = isHinted(fetch, QueryHints.HINT_RECACHE_FINDER);\n             if (isExcluded(mapping)) {\n                 return recache ? put(mapping, select) : null;\n@@ -167,18 +163,11 @@ public FinderCacheImpl() {\n      * some Select are not cached), then the mapping is marked invalid.\n      *  \n     */\n-    private FinderQuery<ClassMapping, SelectExecutor, Result> put\n-       (ClassMapping mapping, SelectExecutor select) {\n-        FinderQuery<ClassMapping, SelectExecutor, Result> finder = \n-            FinderQueryImpl.newFinder(mapping, select);\n+    private FinderQuery<ClassMapping, SelectExecutor, Result> put(ClassMapping mapping, SelectExecutor select) {\n+        FinderQuery<ClassMapping, SelectExecutor, Result> finder = FinderQueryImpl.newFinder(mapping, select);\n         if (finder != null) {\n             _delegate.put(mapping, finder);\n-            if (_log != null && _log.isTraceEnabled())\n-                _log.trace(_loc.get(\"finder-cached\", mapping, \n-                    finder.getQueryString())); \n         } else {\n-            if (_log != null && _log.isWarnEnabled())\n-                _log.warn(_loc.get(\"finder-not-cachable\", mapping));\n             invalidate(mapping);\n         }\n         return finder;\n@@ -188,8 +177,7 @@ public FinderCacheImpl() {\n      * Affirms if the given mapping is excluded from being cached.\n      */\n     public boolean isExcluded(ClassMapping mapping) {\n-        return mapping != null && \n-            isExcluded(mapping.getDescribedType().getName());\n+        return mapping != null && isExcluded(mapping.getDescribedType().getName());\n     }\n \n     /**\n@@ -214,10 +202,6 @@ public void addExclusionPattern(String pattern) {\n             _exclusionPatterns.add(pattern);\n             Collection<ClassMapping> invalidMappings = getMatchedKeys(pattern, \n                     _delegate.keySet());\n-            if (!invalidMappings.isEmpty() \n-                && _log != null && _log.isInfoEnabled())\n-                _log.info(_loc.get(\"finder-add-pattern\", pattern, \n-                    invalidMappings.size(), invalidMappings));\n             for (ClassMapping invalidMapping : invalidMappings)\n                 markUncachable(invalidMapping, pattern);\n         } finally {\n@@ -237,9 +221,6 @@ public void removeExclusionPattern(String pattern) {\n             _exclusionPatterns.remove(pattern);\n             Collection<String> reborns = getMatchedKeys(pattern, \n                 _uncachables.keySet());\n-            if (!reborns.isEmpty() && _log != null && _log.isInfoEnabled())\n-                _log.info(_loc.get(\"finder-remove-pattern\", pattern, \n-                    reborns.size(), reborns));\n             for (String rebornKey : reborns)\n                 _uncachables.remove(rebornKey);\n         } finally {\n@@ -262,8 +243,7 @@ private String getMatchedExclusionPattern(String id) {\n     /**\n      * Gets the elements of the given set that match the given pattern. \n      */\n-    private Collection<ClassMapping> getMatchedKeys(String pattern, \n-            Set<ClassMapping> set) {\n+    private Collection<ClassMapping> getMatchedKeys(String pattern, Set<ClassMapping> set) {\n         List<ClassMapping> result = new ArrayList<ClassMapping>();\n         for (ClassMapping entry : set) {\n             if (matches(pattern, entry)) {\n@@ -276,8 +256,7 @@ private String getMatchedExclusionPattern(String id) {\n     /**\n      * Gets the elements of the given list which match the given pattern. \n      */\n-    private Collection<String> getMatchedKeys(String pattern, \n-            Collection<String> coll) {\n+    private Collection<String> getMatchedKeys(String pattern, Collection<String> coll) {\n         List<String> result = new ArrayList<String>();\n         for (String key : coll) {\n             if (matches(pattern, key)) {\n@@ -299,58 +278,39 @@ boolean matches(String pattern, String target) {\n     public boolean invalidate(ClassMapping mapping) {\n         lock();\n         try {\n-            if (_log.isTraceEnabled())\n-                _log.trace(_loc.get(\"finder-invalidate\", mapping));\n             return _delegate.remove(mapping) != null;\n         } finally {\n             unlock();\n         }\n     }\n \n-    public FinderQuery<ClassMapping, SelectExecutor, Result> markUncachable(\n-        ClassMapping mapping) {\n+    public FinderQuery<ClassMapping, SelectExecutor, Result> markUncachable(ClassMapping mapping) {\n         return markUncachable(mapping.getDescribedType().getName());\n     }\n \n-    public FinderQuery<ClassMapping, SelectExecutor, Result> markUncachable(\n-        String id) {\n+    public FinderQuery<ClassMapping, SelectExecutor, Result> markUncachable(String id) {\n         return markUncachable(id, EXLUDED_BY_USER);\n     }\n     \n-    private FinderQuery<ClassMapping, SelectExecutor, Result> markUncachable(\n-        String cls, String reason) {\n+    private FinderQuery<ClassMapping, SelectExecutor, Result> markUncachable(String cls, String reason) {\n         lock();\n         try {\n             boolean excludedByUser = _uncachables.get(cls) == EXLUDED_BY_USER;\n             if (!excludedByUser)\n                 _uncachables.put(cls, reason);\n-            if (_log != null && _log.isInfoEnabled()) {\n-                if (excludedByUser) \n-                    _log.info(_loc.get(\"finder-uncache-strong\", cls));\n-                else \n-                    _log.info(_loc.get(\"finder-uncache-weak\", cls, \n-                        reason));\n-            }\n             return _delegate.remove(searchMappingByName(cls));\n         } finally {\n             unlock();\n         }\n     }\n     \n-    private FinderQuery<ClassMapping, SelectExecutor, Result> markUncachable(\n-        ClassMapping mapping, String reason) {\n+    private FinderQuery<ClassMapping, SelectExecutor, Result> markUncachable(ClassMapping mapping, String reason) {\n         lock();\n         try {\n             String cls = mapping.getDescribedType().getName();\n             boolean excludedByUser = _uncachables.get(cls) == EXLUDED_BY_USER;\n             if (!excludedByUser)\n                 _uncachables.put(cls, reason);\n-            if (_log != null && _log.isInfoEnabled()) {\n-                if (excludedByUser) \n-                    _log.info(_loc.get(\"finder-uncache-strong\", cls));\n-                else \n-                    _log.info(_loc.get(\"finder-uncache-weak\", cls, reason));\n-            }\n             return _delegate.remove(mapping);\n         } finally {\n             unlock();\n@@ -411,10 +371,8 @@ public void startConfiguration() {\n     }\n     \n     public void setConfiguration(Configuration conf) {\n-        _log = conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n     }\n \n     public void endConfiguration() {\n     }\n-\n }"},{"sha":"5ba876d536d2b845cf75c4c1fe6cec89bc4f3822","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7b6c11a6cd8987e33b3f0cd5c77a16798471acf6/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/7b6c11a6cd8987e33b3f0cd5c77a16798471acf6/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties?ref=7b6c11a6cd8987e33b3f0cd5c77a16798471acf6","patch":"@@ -135,10 +135,6 @@ uparam-pc-key: Class \"{0}\" uses {1} primary key columns but corresponding \\\n \tpositions {2} in the parameter list of the prepared query is not compatible.\n uparam-missing: Parameter {0} in SQL Query \"{1}\" is not given a value. The \\\n \tparameters given is \"{2}\".   \n-finder-cached: Cached finder for \"{0}\" SQL: \"{1}\"\n-finder-not-cachable: Finder for \"{0}\" is not cachable.\n-finder-add-pattern: Exclusion pattern \"{0}\" for finder query has invalidated \\\n-\t{1} existing entries \"{2}\"\n optimistic-violation-lock: An optimistic lock violation was detected when \\\n     locking object instance.\n sql-warning: The statement resulted in SQL warning: {0}"}]}

