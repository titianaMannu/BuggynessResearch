{"sha":"7bd2b4ae49b25d040313dd17d2fbce9be74c3378","node_id":"MDY6Q29tbWl0MjA2MzY0OjdiZDJiNGFlNDliMjVkMDQwMzEzZGQxN2QyZmJjZTliZTc0YzMzNzg=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-05-05T16:17:31Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-05-05T16:17:31Z"},"message":"OPENJPA-1387: Unique should not impose non-null constraint automatically.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@941362 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2024c1002b59fdd3483f7674c00967338a73ae9f","url":"https://api.github.com/repos/apache/openjpa/git/trees/2024c1002b59fdd3483f7674c00967338a73ae9f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7bd2b4ae49b25d040313dd17d2fbce9be74c3378","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7bd2b4ae49b25d040313dd17d2fbce9be74c3378","html_url":"https://github.com/apache/openjpa/commit/7bd2b4ae49b25d040313dd17d2fbce9be74c3378","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7bd2b4ae49b25d040313dd17d2fbce9be74c3378/comments","author":null,"committer":null,"parents":[{"sha":"c7addd5f51598dc111e89db16160c912e159c132","url":"https://api.github.com/repos/apache/openjpa/commits/c7addd5f51598dc111e89db16160c912e159c132","html_url":"https://github.com/apache/openjpa/commit/c7addd5f51598dc111e89db16160c912e159c132"}],"stats":{"total":73,"additions":60,"deletions":13},"files":[{"sha":"fe5d972c219086e0a7e3c99b5678f2bc9bf59a98","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java","status":"modified","additions":1,"deletions":12,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/7bd2b4ae49b25d040313dd17d2fbce9be74c3378/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java","raw_url":"https://github.com/apache/openjpa/raw/7bd2b4ae49b25d040313dd17d2fbce9be74c3378/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java?ref=7bd2b4ae49b25d040313dd17d2fbce9be74c3378","patch":"@@ -52,18 +52,7 @@ public Unique(DBIdentifier name, Table table) {\n     public boolean isLogical() {\n         return false;\n     }\n-    \n-    /**\n-     * Adds the given column. \n-     * The added column is set to non-nullable because a unique constraint\n-     * on the database requires that its constituent columns are NOT NULL. \n-     * @see Column#setNotNull(boolean)\n-     */\n-    public void addColumn(Column col) {\n-    \tsuper.addColumn(col);\n-    \tcol.setNotNull(true);\n-    }\n-    \n+        \n     /**\n      * Set the name of the constraint. This method cannot be called if the\n      * constraint already belongs to a table. "},{"sha":"03c04100569fe3d3d68bd374145036c90b1b9da5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/7bd2b4ae49b25d040313dd17d2fbce9be74c3378/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java","raw_url":"https://github.com/apache/openjpa/raw/7bd2b4ae49b25d040313dd17d2fbce9be74c3378/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java?ref=7bd2b4ae49b25d040313dd17d2fbce9be74c3378","patch":"@@ -23,6 +23,8 @@\n import javax.persistence.Entity;\n import javax.persistence.GeneratedValue;\n import javax.persistence.Id;\n+import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n import javax.persistence.Version;\n \n /**\n@@ -32,6 +34,7 @@\n  *\n  */\n @Entity\n+@Table(uniqueConstraints=@UniqueConstraint(name=\"UniqueNullable\", columnNames={\"UNS\"}))\n public class NullValues {\n \t@Id\n \t@GeneratedValue\n@@ -61,6 +64,9 @@\n \t@Basic(optional=false)\n \tprivate BlobValue notOptionalBlob;\n \t\n+\t@Column(name=\"UNS\")\n+\tprivate String uniqueNullable;\n+\t\n \t@Version\n \tprivate int version;\n \t\n@@ -148,6 +154,14 @@ public void setNotOptionalBlob(BlobValue notOptionalBlob) {\n \t\tthis.notOptionalBlob = notOptionalBlob;\n \t}\n \t\n+    public String getUniqueNullable() {\n+        return uniqueNullable;\n+    }\n+\t\n+    public void setUniqueNullable(String s) {\n+        uniqueNullable = s;\n+    }\n+    \n \tpublic int getVersion() { \n \t    return version;\n \t}"},{"sha":"e327bf4c813dade12d006dfc7f3e34b4fb88b3ec","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","status":"modified","additions":45,"deletions":1,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/7bd2b4ae49b25d040313dd17d2fbce9be74c3378/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","raw_url":"https://github.com/apache/openjpa/raw/7bd2b4ae49b25d040313dd17d2fbce9be74c3378/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java?ref=7bd2b4ae49b25d040313dd17d2fbce9be74c3378","patch":"@@ -18,11 +18,16 @@\n  */\n package org.apache.openjpa.persistence.nullity;\n \n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n import javax.persistence.RollbackException;\n \n import org.apache.openjpa.persistence.InvalidStateException;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n \n+import com.sun.corba.se.spi.legacy.connection.GetEndPointInfoAgainException;\n+\n /**\n  * Test @Basic(optional=true|false) and @Column(nullable=true|false) \n  * specification is honored. \n@@ -34,7 +39,7 @@\n public class TestBasicFieldNullity extends AbstractNullityTestCase {\n \n     public void setUp() {\n-        setUp(CLEAR_TABLES, NullValues.class);\n+        setUp(CLEAR_TABLES, RETAIN_DATA, NullValues.class);\n     }\n \n     public void testNullOnOptionalFieldIsAllowed() {\n@@ -113,5 +118,44 @@ public void testX() {\n     \tpc.setNotNullableBlob(null);\n     \tassertCommitFails(pc, !NEW, RollbackException.class);\n     }\n+    \n+    \n+    public void testUniqueStringColumnCanBeNull() {\n+        NullValues pc = new NullValues();\n+        pc.setUniqueNullable(null);\n+        assertCommitSucceeds(pc, NEW);\n+    }\n+    \n+    public void testUniqueStringColumnAsNull() {\n+        NullValues pc = new NullValues();\n+        pc.setUniqueNullable(null);\n+        assertCommitSucceeds(pc, NEW);\n+        \n+        String jpql = \"select n from NullValues n where n.uniqueNullable = :p\";\n+        EntityManager em = emf.createEntityManager();\n+        List<NullValues> result = em.createQuery(jpql, NullValues.class)\n+                                    .setParameter(\"p\", null)\n+                                    .getResultList();\n+        assertFalse(result.isEmpty());\n+        for (NullValues n : result)\n+            assertNull(n.getUniqueNullable());\n+    }\n+    \n+    public void testUniqueStringColumnAsEmpty() {\n+        String EMPTY_STRING = \"\";\n+        NullValues pc = new NullValues();\n+        pc.setUniqueNullable(EMPTY_STRING);\n+        assertCommitSucceeds(pc, NEW);\n+        \n+        String jpql = \"select n from NullValues n where n.uniqueNullable = :p\";\n+        EntityManager em = emf.createEntityManager();\n+        List<NullValues> result = em.createQuery(jpql, NullValues.class)\n+                                    .setParameter(\"p\", EMPTY_STRING)\n+                                    .getResultList();\n+        assertFalse(result.isEmpty());\n+        for (NullValues n : result)\n+            assertEquals(EMPTY_STRING, n.getUniqueNullable());\n+        \n+    }\n }\n "}]}

