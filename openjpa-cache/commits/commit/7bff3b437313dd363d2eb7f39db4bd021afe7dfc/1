{"sha":"7bff3b437313dd363d2eb7f39db4bd021afe7dfc","node_id":"MDY6Q29tbWl0MjA2MzY0OjdiZmYzYjQzNzMxM2RkMzYzZDJlYjdmMzlkYjRiZDAyMWFmZTdkZmM=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2006-09-13T20:35:08Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2006-09-13T20:35:08Z"},"message":"Removed references to LockGroups from the messages, documents, and code since these are not provided as\npart of the OpenJPA code drop.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@443113 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"accbc182e06c15270ca5beb67e6acc100dabf1b4","url":"https://api.github.com/repos/apache/openjpa/git/trees/accbc182e06c15270ca5beb67e6acc100dabf1b4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7bff3b437313dd363d2eb7f39db4bd021afe7dfc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7bff3b437313dd363d2eb7f39db4bd021afe7dfc","html_url":"https://github.com/apache/openjpa/commit/7bff3b437313dd363d2eb7f39db4bd021afe7dfc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7bff3b437313dd363d2eb7f39db4bd021afe7dfc/comments","author":null,"committer":null,"parents":[{"sha":"868cc7bc4e27b145b561dcb1e9976497a080faa5","url":"https://api.github.com/repos/apache/openjpa/commits/868cc7bc4e27b145b561dcb1e9976497a080faa5","html_url":"https://github.com/apache/openjpa/commit/868cc7bc4e27b145b561dcb1e9976497a080faa5"}],"stats":{"total":542,"additions":103,"deletions":439},"files":[{"sha":"e65faf7a3a8c1e2b35d9774c651ad492f7304f71","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7bff3b437313dd363d2eb7f39db4bd021afe7dfc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","raw_url":"https://github.com/apache/openjpa/raw/7bff3b437313dd363d2eb7f39db4bd021afe7dfc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java?ref=7bff3b437313dd363d2eb7f39db4bd021afe7dfc","patch":"@@ -335,15 +335,15 @@ public void setDataStoreIdColumnName(String dsIdName) {\n \n     /**\n      * Default base name for version identity columns, or null to the mapping's\n-     * built-in name. This name may be combined with lock group names.\n+     * built-in name.\n      */\n     public String getVersionColumnName() {\n         return _versName;\n     }\n \n     /**\n      * Default base name for version identity columns, or null to the mapping's\n-     * built-in name. This name may be combined with lock group names.\n+     * built-in name.\n      */\n     public void setVersionColumnName(String versName) {\n         _versName = versName;"},{"sha":"8bb1d52f1aa518180c2885c33efcc8784e0a39c1","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","status":"modified","additions":4,"deletions":16,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/7bff3b437313dd363d2eb7f39db4bd021afe7dfc/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/7bff3b437313dd363d2eb7f39db4bd021afe7dfc/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties?ref=7bff3b437313dd363d2eb7f39db4bd021afe7dfc","patch":"@@ -15,14 +15,12 @@ no-targetfield: Some of the columns on \"{0}\" are missing target field \\\n \tdeclarations.\n bad-targetfield: \"{0}\" has a column with target field \"{1}\", but that is not a \\\n \tprimary key field of the related class.\n-bad-col-lg-counts: Cannot synchronize mapping information: the number of \\\n-\tversion columns is not equal to the number of lock groups.\n no-joinable: You cannot join on column \"{0}\".  It is not managed by a mapping \\\n \tthat supports joins.\n join-required: Missing table name for field \"{0}\".  This field cannot reside \\\n \tin the owning class table.\n bad-discrim-value: The declared discriminator value \"{1}\" for type \"{0}\" \\\n-\tcannot be parsed as a number, though it starts with a digit.   \n+\tcannot be parsed as a number, though it starts with a digit.\n unexpected-cols: You have supplied columns for \"{0}\", but this mapping cannot \\\n \thave columns in this context.\n unexpected-index: \"{0}\" is marked as indexed, but OpenJPA does not support \\\n@@ -58,7 +56,7 @@ nondfg-field-orderable: Cannot order \"{0}\" on \"{1}\", because that field is not \\\n \tin the default fetch group.  You can only order on fields that will be \\\n \tselected when the related object is loaded.\n order-conflict: Field \"{0}\" declares both a synthetic ordering column and \\\n-\torder-by values.  You cannot use both.  \n+\torder-by values.  You cannot use both.\n order-no-col-name: No order column name was given for \"{0}\".\n order-bad-col-name: \"{0}\" declares order column \"{1}\", but this column does \\\n \tnot exist in table \"{2}\".\n@@ -378,24 +376,14 @@ custom-rm-field: Removing field \"{0}\" in type \"{1}\" from reverse mapped set.\n custom-unused-props: The following customizer properties were not used in \\\n \tthe reverse mapping process: {0}.\n reverse-type: Overriding type mapping for column of type name \"{0}\" to Java \\\n-\tclass \"{1}\". \n+\tclass \"{1}\".\n no-reverse-type: No overridden type mapping for column of type name \"{0}\".\n no-query-res: There is no query result mapping for \"{0}\" with name \"{1}\".\n null-path: Attempt to add a null or empty path to result type \"{1}\" in mapping \\\n-\t\"{0}\". \n+\t\"{0}\".\n bad-path: Result path \"{2}\" in result type \"{1}\" of mapping \"{0}\" contains \\\n \tinvalid fields.\n untraversable-path: Result path \"{2}\" in result type \"{1}\" of mapping \"{0}\" \\\n \tattempts to traverse through a non-relation field.\n num-cols-path: Result path \"{2}\" in result type \"{1}\" of mapping \"{0}\" \\\n \tattempts to map a field that does not have exactly 1 column.\n-lock-group-requires-perf-pack: Field \"{0}\" declares the lock-group extension. \\\n-\tIn order to use custom lock groups, you must have a performance pack or \\\n-\tenterprise edition license. Contact sales@bea.com for details on \\\n-\tupgrading your license.\n-sub-lock-groups: Type \"{0}\" has a mapped superclass, and therefore cannot \\\n-\tdeclare additional lock groups.  Use the \"lock-groups\" extension on the \\\n-\tmapped superclass to declare any additional lock groups needed by this \\\n-\ttype.  {1}\n-vers-mult-lock-groups: Type \"{0}\" cannot use a version field because it has \\\n-\tmultiple lock groups."},{"sha":"099053b4fa81c3c6c3c7f6a0a374407135427d78","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/7bff3b437313dd363d2eb7f39db4bd021afe7dfc/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/7bff3b437313dd363d2eb7f39db4bd021afe7dfc/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/strats/localizer.properties?ref=7bff3b437313dd363d2eb7f39db4bd021afe7dfc","patch":"@@ -13,7 +13,7 @@ cant-inverse: \"{0}\" is not a valid mapping.  Inverse foreign key-based \\\n cant-load: \"{0}\" is not a valid mapping. The related type has subclasses that \\\n \tare not reachable via joins, so OpenJPA must be able to construct an oid \\\n \tfrom the mapped foreign key.  But your foreign key does not represent all \\\n-\tprimary key values of the related type. \n+\tprimary key values of the related type.\n flush-virtual: Attempt to flush an unmapped object of type \"{0}\" with oid \"{1}\".\n cant-project-owned: \"{0}\" cannot be used in a projection, because it can only \\\n \tbe loaded as part of its owning object.\n@@ -45,7 +45,7 @@ not-oid: \"{0}\" species an object id mapping strategy, but it is not \\\n oid-not-joinable: Field \"{0}\" embedded within object id field \"{1}\" cannot be \\\n \ta primary key value.  Its mapping does not it to be a join target.\n flat-table: Type \"{0}\" uses a flat inheritance mapping, but declares a table \\\n-\tname of \"{1}\", which does not match the superclass table \"{2}\".  \n+\tname of \"{1}\", which does not match the superclass table \"{2}\".\n not-string: Field \"{0}\" declares a string field mapping strategy, but is not \\\n \ta string field.\n not-primitive: Field \"{0}\" declares a primitive field mapping strategy, but \\\n@@ -58,7 +58,7 @@ not-chars: Field \"{0}\" declares a char array field mapping strategy, but is \\\n \tnot a char array field.\n not-serialized: Field \"{0}\" declares a blob mapping strategy, but the \\\n \tfield''s value is not serialized.  Set the field''s \"serialized\" attribute \\\n-\tto true.  \n+\tto true.\n not-relation: \"{0}\" declares a relation mapping strategy, but is not a \\\n \tdirect, non-embedded relation to another persistence-capable object.\n not-elem-relation: \"{0}\" declares a to-many relation strategy, but its \\\n@@ -83,18 +83,16 @@ mapped-by-key: Map field \"{0}\" is attempting to use a map table, but its key \\\n \tis mapped by another field.  Use an inverse key or join table mapping.\n not-mapped-by-key: Map field \"{0}\" is attempting to use an inverse key or join \\\n \ttable mapping, but its key is not mapped by another field.  Use a map \\\n-\ttable mapping. \n+\ttable mapping.\n no-handler: Field \"{0}\" declares a handler-based mapping strategy, but no \\\n \tvalue handler is installed.\n auto-assign-handler: Attempt to use an auto-assigned column value in a handler \\\n \twith multiple columns.  To use an auto-assigned column value with field \\\n \t\"{0}\", you will have to write a custom field mapping that implements the \\\n \torg.apache.openjpa.jdbc.meta.Joinable interface.\n-no-lock-groups: Type \"{0}\" does not have any fields that participate in \\\n-\toptimistic locking.  Set its version strategy to \"none\".\n load-subs: Loading subclasses from discriminator column of \"{0}\".\n no-class-name: The discriminator column \"{1}\" for type \"{1}\" contains a null \\\n-\tor empty value. \n+\tor empty value.\n cant-init-subs: The discriminator for type \"{0}\" cannot compute the list of \\\n \tits subclasses on its own.  You should either use a discriminator strategy \\\n \tthat has this ability (such as the class-name strategy), include the set \\"},{"sha":"6ed13a68a8ac89f911c2aba9d8757271bb651447","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/7bff3b437313dd363d2eb7f39db4bd021afe7dfc/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/7bff3b437313dd363d2eb7f39db4bd021afe7dfc/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties?ref=7bff3b437313dd363d2eb7f39db4bd021afe7dfc","patch":"@@ -92,13 +92,13 @@ db2-cant-lock: DB2 cannot perform FOR UPDATE selects on multiple tables. \\\n \tThe tables used in this select are: \"{0}\".  You should either configure \\\n \tyour application to avoid multi-table selects, use optimistic locking, \\\n \tor set the \"SimulateLocking\" DBDictionary property to allow non-locking \\\n-\tselects within pessimistic transactions. \n+\tselects within pessimistic transactions.\n informix-cant-lock: Informix cannot perform FOR UPDATE selects on multiple \\\n \ttables, or when it is a SELECT DISTINCT.  The tables used in this select \\\n \tare: \"{0}\".  You should either configure your application to avoid \\\n \tmulti-table/distinct selects, use optimistic locking, or set the \\\n \t\"SimulateLocking\" DBDictionary property to allow non-locking selects \\\n-\twithin pessimistic transactions. \n+\twithin pessimistic transactions.\n bad-param: The specified parameter of type \"{0}\" is not a valid query parameter.\n warn-generic: Your database configuration was not recognized as a supported \\\n \tOpenJPA database. The generic dictionary will be used, which may result in \\\n@@ -113,7 +113,7 @@ no-fk-table: Foreign key \"{0}\" on table \"{1}\" references a table \\\n \t(\"{2}\") that was not found.\n dd-lock-bug: This version of the DataDirect JDBC driver has a bug that \\\n \tprevents SELECT FOR UPDATE statements from working.  Please \\\n-\tuse version 3.2 or higher of the driver.\t\n+\tuse version 3.2 or higher of the driver.\n storage-restriction: The database \"{0}\" has restrictions that prevent it \\\n \tfrom being able to store the value \"{1}\" of type \"{2}\". The value \\\n \twill be rounded to \"{3}\" for storage.\n@@ -135,9 +135,8 @@ substring-not-supported: The database \"{0}\" does not support the \\\n \tsubstring function.\n null-result-provider: supplied array of result object providers is null\n empty-result-provider: supplied array of result object providers is empty\n-null-shared-result-set: supplied result set is null  \n-illegal-method: {0}.{1}() is illegal to be invoked \n+null-shared-result-set: supplied result set is null\n+illegal-method: {0}.{1}() is illegal to be invoked\n column-not-mapped: SQLResultSetMapping \"{0}\" does not map the columns \"{1}\" \\\n \tthat are selected by the SQL query\\r\\n \"{2}\"\n-batch-license: Your license does not have SQL batching capabilities.\n dictionary-configuration: DBDictionary configuration: \\n{0}"},{"sha":"7aa352cb65929edc439e2564792192fd4b25ec6c","filename":"openjpa-project/src/doc/manual/jpa_overview_trans.xml","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/7bff3b437313dd363d2eb7f39db4bd021afe7dfc/openjpa-project/src/doc/manual/jpa_overview_trans.xml","raw_url":"https://github.com/apache/openjpa/raw/7bff3b437313dd363d2eb7f39db4bd021afe7dfc/openjpa-project/src/doc/manual/jpa_overview_trans.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_trans.xml?ref=7bff3b437313dd363d2eb7f39db4bd021afe7dfc","patch":"@@ -280,11 +280,10 @@ of hanging due to deadlock.\n OpenJPA uses optimistic semantics by default, but supports both optimistic and\n datastore transactions. OpenJPA also offers advanced locking and versioning APIs\n for fine-grained control over database resource allocation and object\n-versioning. See <xref linkend=\"ref_guide_locking\"/> and\n-<xref linkend=\"ref_guide_lock_groups\"/> of the Reference Guide for details\n+versioning. See <xref linkend=\"ref_guide_locking\"/> of the Reference Guide for details\n on locking. <xref linkend=\"jpa_overview_meta_version\"/>\n of this document covers standard object versioning, while\n-<xref linkend=\"ref_guide_mapping_jpa\"/> of the Reference Guide discusses \n+<xref linkend=\"ref_guide_mapping_jpa\"/> of the Reference Guide discusses\n additional versioning strategies available in OpenJPA.\n             </para>\n         </note>\n@@ -305,7 +304,7 @@ additional versioning strategies available in OpenJPA.\n             <imageobject>\n                 <!-- PNG image data, 193 x 157 (see README) -->\n                 <imagedata fileref=\"img/jpa-transaction.png\" width=\"129px\"/>\n-                \n+\n             </imageobject>\n         </mediaobject>\n         <para>"},{"sha":"9135acfc4d99402b384d6a2397d2ff34ac2cb302","filename":"openjpa-project/src/doc/manual/ref_guide_mapping.xml","status":"modified","additions":13,"deletions":26,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/7bff3b437313dd363d2eb7f39db4bd021afe7dfc/openjpa-project/src/doc/manual/ref_guide_mapping.xml","raw_url":"https://github.com/apache/openjpa/raw/7bff3b437313dd363d2eb7f39db4bd021afe7dfc/openjpa-project/src/doc/manual/ref_guide_mapping.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_mapping.xml?ref=7bff3b437313dd363d2eb7f39db4bd021afe7dfc","patch":"@@ -314,7 +314,7 @@ mappingtool -a buildSchema -sa build -sql create.sql Magazine.java\n             </example>\n             <example id=\"ref_guid_mapping_ddl_part_ddl\">\n                 <title>\n-                    Create DDL to Update Database for Current \n+                    Create DDL to Update Database for Current\n         Mappings\n                 </title>\n                 <para>\n@@ -879,7 +879,7 @@ own customization class.\n             </see>\n         </indexterm>\n         <para>\n-In the <emphasis>meet-in-the-middle</emphasis>  \n+In the <emphasis>meet-in-the-middle</emphasis>\n mapping approach, you control both the relational featureSelection and the object featureSelection. It\n is up to you to define the mappings between these models.  The mapping\n tool's <literal>validate</literal> action is useful to meet-in-the-middle\n@@ -1126,10 +1126,7 @@ column. Defaults to true.\n                     </listitem>\n                     <listitem>\n                         <para>\n-<literal>VersionColumnName</literal>: The default name of version columns. If\n-you use custom lock groups, this name may be combined with lock group names. See\n-<xref linkend=\"ref_guide_lock_groups\"/> for more information on lock\n-groups.\n+<literal>VersionColumnName</literal>: The default name of version columns.\n                         </para>\n                     </listitem>\n                     <listitem>\n@@ -1200,8 +1197,8 @@ handler.\n                 Configuring Mapping Defaults\n             </title>\n <programlisting>\n-&lt;property name=\"openjpa.jdbc.MappingDefaults\" \n-    value=\"ForeignKeyDeleteAction=restrict, \n+&lt;property name=\"openjpa.jdbc.MappingDefaults\"\n+    value=\"ForeignKeyDeleteAction=restrict,\n     FieldStrategies='org.mag.data.InfoStruct=org.mag.mapping.InfoStructHandler'\"/&gt;\n </programlisting>\n         </example>\n@@ -1357,7 +1354,7 @@ to differentiate it from a column name.\n             <imageobject>\n                 <!-- PNG image data, 427 x 211 (see README) -->\n                 <imagedata fileref=\"img/joins-constant.png\" width=\"285px\"/>\n-                \n+\n             </imageobject>\n         </mediaobject>\n         <para>\n@@ -1369,7 +1366,7 @@ T1.FK</literal> to <literal>T2.PK1</literal>, we also have to specify that\n <literal>T2.PK2</literal> has the value <literal>a</literal>. Here is how we'd\n accomplish this in mapping metadata.\n         </para>\n-<programlisting> \n+<programlisting>\n @Entity\n @Table(name=\"T1\")\n public class ...\n@@ -1389,7 +1386,7 @@ the constant value so that it won't be confused with a column name. You do not\n need single quotes for numeric constants. For example, the syntax to join\n <literal>T1.R2</literal> to <literal>T2.R4</literal> is:\n         </para>\n-<programlisting> \n+<programlisting>\n @Entity\n @Table(name=\"T1\")\n public class ...\n@@ -1405,7 +1402,7 @@ public class ...\n         <para>\n Finally, from the inverse direction, these joins would look like this:\n         </para>\n-<programlisting> \n+<programlisting>\n @Entity\n @Table(name=\"T2\")\n public class ...\n@@ -1579,9 +1576,7 @@ you to use a surrogate version column in place of a version field if you like.\n You map the surrogate version column with the\n <ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/VersionColumn.html\">\n <classname>org.apache.openjpa.persistence.jdbc.VersionColumn</classname></ulink>\n-annotation. If you take advantage of OpenJPA's ability to define multiple\n-<link linkend=\"ref_guide_lock_groups\">lock groups</link>, you may have multiple\n-version columns. In that case, use the\n+annotation. You can also use the\n <ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/VersionColumns.html\">\n <classname>org.apache.openjpa.persistence.jdbc.VersionColumns</classname>\n </ulink> annotation to declare an array of <classname>VersionColumn</classname>\n@@ -1595,11 +1590,6 @@ values. Each <classname>VersionColumn</classname> has the following properties:\n                 </listitem>\n                 <listitem>\n                     <para>\n-<literal>String lockGroup</literal>\n-                    </para>\n-                </listitem>\n-                <listitem>\n-                    <para>\n <literal>int length</literal>\n                     </para>\n                 </listitem>\n@@ -1635,10 +1625,7 @@ values. Each <classname>VersionColumn</classname> has the following properties:\n                 </listitem>\n             </itemizedlist>\n             <para>\n-The <literal>lockGroup</literal> property allows you to specify that a version\n-column is for some lock group other than the default group. See\n-<xref linkend=\"ref_guide_lock_groups\"/> for an example. All other\n-properties correspond exactly to the same-named properties on the standard\n+All properties correspond exactly to the same-named properties on the standard\n <classname>Column</classname> annotation, described in\n <xref linkend=\"jpa_overview_mapping_column\"/>.\n             </para>\n@@ -2121,7 +2108,7 @@ foreign key (logical or actual) in the table of the related type.\n                 <imageobject>\n                     <!-- PNG image data, 392 x 192 (see README) -->\n                     <imagedata fileref=\"img/inv-key-coll.png\" width=\"261\"/>\n-                    \n+\n                 </imageobject>\n             </mediaobject>\n             <para>\n@@ -2404,7 +2391,7 @@ Here again is our map example from <xref linkend=\"ref_guide_mapping_jpa_map\"/>\n                     <imageobject>\n                         <!-- PNG image data, 410 x 266 (see README) -->\n                         <imagedata fileref=\"img/string-rel-map.png\" width=\"273px\"/>\n-                        \n+\n                     </imageobject>\n                 </mediaobject>\n             </section>"},{"sha":"69da20d947b6e32a98c5cf844d8415379f74b714","filename":"openjpa-project/src/doc/manual/ref_guide_meta.xml","status":"modified","additions":3,"deletions":45,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/7bff3b437313dd363d2eb7f39db4bd021afe7dfc/openjpa-project/src/doc/manual/ref_guide_meta.xml","raw_url":"https://github.com/apache/openjpa/raw/7bff3b437313dd363d2eb7f39db4bd021afe7dfc/openjpa-project/src/doc/manual/ref_guide_meta.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_meta.xml?ref=7bff3b437313dd363d2eb7f39db4bd021afe7dfc","patch":"@@ -555,19 +555,6 @@ marker annotation; it does not recognize any properties. Your annotated field\n must be of type <classname>Object</classname>.\n                 </para>\n             </section>\n-            <section id=\"lock-groups\">\n-                <title>\n-                    Lock Groups\n-                </title>\n-                <para>\n-OpenJPA requires you to pre-declare subclass lock groups in the least-derived\n-mapped class. <phrase> The JPA\n-<ulink url=\"../apidocs/org/apache/openjpa/persistence/LockGroups.html\">\n-<classname>org.apache.openjpa.persistence.LockGroups</classname></ulink>\n-annotation accepts an array of lock group names.</phrase> For details on lock\n-groups, see <xref linkend=\"ref_guide_lock_groups_and_subclasses\"/>.\n-                </para>\n-            </section>\n         </section>\n         <section id=\"ref_guide_meta_field\">\n             <title>\n@@ -656,9 +643,9 @@ Marks the key entities in a map field as dependent.\n                 </indexterm>\n                 <para>\n The <ulink url=\"../apidocs/org/apache/openjpa/persistence/LoadFetchGroup.html\">\n-<classname>org.apache.openjpa.persistence.LoadFetchGroup</classname></ulink> \n-annotation specifies a field's load fetch group. \n-<xref linkend=\"ref_guide_fetch\"/> discusses OpenJPA's support for fetch groups \n+<classname>org.apache.openjpa.persistence.LoadFetchGroup</classname></ulink>\n+annotation specifies a field's load fetch group.\n+<xref linkend=\"ref_guide_fetch\"/> discusses OpenJPA's support for fetch groups\n in general; see <xref linkend=\"ref_guide_fetch_custom\"/> for how to use this\n annotation in particular.\n                 </para>\n@@ -777,34 +764,6 @@ annotation.</phrase> We discuss logical bidirectional relations and this\n extension in detail in <xref linkend=\"ref_guide_inverses\"/>.\n                 </para>\n             </section>\n-            <section id=\"lock-group\">\n-                <title>\n-                    Lock Group\n-                </title>\n-                <indexterm zone=\"lock-group\">\n-                    <primary>\n-                        metadata\n-                    </primary>\n-                    <secondary>\n-                        extensions\n-                    </secondary>\n-                    <tertiary>\n-                        lock group\n-                    </tertiary>\n-                    <seealso>\n-                        locking\n-                    </seealso>\n-                </indexterm>\n-                <para>\n-Lock groups allow for fine-grained optimistic locking concurrency. Use <phrase>\n-OpenJPA's <ulink url=\"../apidocs/org/apache/openjpa/persistence/LockGroup.html\">\n-<classname>org.apache.openjpa.persistence.LockGroup</classname></ulink>\n-annotation</phrase> to name the lock group for a field. You can exclude a field\n-from optimistic locking with a value of <literal>none</literal>. We discuss\n-lock groups and this extension further in <xref linkend=\"ref_guide_lock_groups\"/>\n-.\n-                </para>\n-            </section>\n             <section id=\"read-only\">\n                 <title>\n                     Read-Only\n@@ -1056,7 +1015,6 @@ public class Magazine\n {\n     @ManyToMany\n     @LRS\n-    @LockGroup(LockGroup.NONE)\n     private Collection&lt;Subscriber&gt; subscribers;\n \n     @ExternalValues({\"true=1\", \"false=2\"})"},{"sha":"4708e8b1a16f09fb4e11cfe8d3959c2d74f15005","filename":"openjpa-project/src/doc/manual/ref_guide_pc.xml","status":"modified","additions":68,"deletions":333,"changes":401,"blob_url":"https://github.com/apache/openjpa/blob/7bff3b437313dd363d2eb7f39db4bd021afe7dfc/openjpa-project/src/doc/manual/ref_guide_pc.xml","raw_url":"https://github.com/apache/openjpa/raw/7bff3b437313dd363d2eb7f39db4bd021afe7dfc/openjpa-project/src/doc/manual/ref_guide_pc.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_pc.xml?ref=7bff3b437313dd363d2eb7f39db4bd021afe7dfc","patch":"@@ -114,7 +114,7 @@ the <methodname>getId</methodname> method in your source file.</phrase>\n             <imageobject>\n                 <!-- PNG image data, 509 x 133 (see README) -->\n                 <imagedata fileref=\"img/enhancement.png\" width=\"339px\"/>\n-                \n+\n             </imageobject>\n         </mediaobject>\n         <para>\n@@ -722,7 +722,7 @@ public class Magazine\n {\n     @OneToOne\n     private Photograph coverPhoto;\n-    \n+\n     ...\n }\n \n@@ -732,7 +732,7 @@ public class Photograph\n     @OneToOne\n     @InverseLogical(\"coverPhoto\")\n     private Magazine mag;\n-    \n+\n     ...\n }\n </programlisting>\n@@ -1099,8 +1099,8 @@ import org.apache.openjpa.persistence.*;\n @Entity\n public class Company\n {\n-    @ManyToMany \n-    @LRS private Collection&lt;Employee&gt; employees;     \n+    @ManyToMany\n+    @LRS private Collection&lt;Employee&gt; employees;\n \n     ...\n }\n@@ -1230,9 +1230,9 @@ their corresponding metadata extensions.\n                 </title>\n                 <tgroup cols=\"2\" align=\"left\" colsep=\"1\" rowsep=\"1\">\n                     <colspec colname=\"method\"/>\n-                    \n+\n                     <colspec colname=\"extension\"/>\n-                    \n+\n                     <thead>\n                         <row>\n                             <entry colname=\"method\">\n@@ -1247,64 +1247,64 @@ their corresponding metadata extensions.\n                         <row>\n                             <entry colname=\"method\">\n                                 <literal>\n-                                    \n+\n               public String CustomType.toString()\n-              \n+\n                                 </literal>\n                             </entry>\n                             <entry colname=\"extension\">\n                                 <literal>\n-                                    \n+\n               @Externalizer(\"toString\")\n-              \n+\n                                 </literal>\n                             </entry>\n                         </row>\n                         <row>\n                             <entry colname=\"method\">\n                                 <literal>\n-                                    \n+\n               public String CustomType.toString(StoreContext ctx)\n-              \n+\n                                 </literal>\n                             </entry>\n                             <entry colname=\"extension\">\n                                 <literal>\n-                                    \n+\n               @Externalizer(\"toString\")\n-              \n+\n                                 </literal>\n                             </entry>\n                         </row>\n                         <row>\n                             <entry colname=\"method\">\n                                 <literal>\n-                                    \n+\n               public static String AnyClass.toString(CustomType ct)\n-              \n+\n                                 </literal>\n                             </entry>\n                             <entry colname=\"extension\">\n                                 <literal>\n-                                    \n+\n               @Externalizer(\"AnyClass.toString\")\n-              \n+\n                                 </literal>\n                             </entry>\n                         </row>\n                         <row>\n                             <entry colname=\"method\">\n                                 <literal>\n-                                    \n+\n               public static String AnyClass.toString(CustomType ct, StoreContext ctx)\n-              \n+\n                                 </literal>\n                             </entry>\n                             <entry colname=\"extension\">\n                                 <literal>\n-                                    \n+\n               @Externalizer(\"AnyClass.toString\")\n-              \n+\n                                 </literal>\n                             </entry>\n                         </row>\n@@ -1336,9 +1336,9 @@ corresponding metadata extensions.\n                 </title>\n                 <tgroup cols=\"2\" align=\"left\" colsep=\"1\" rowsep=\"1\">\n                     <colspec colname=\"method\"/>\n-                    \n+\n                     <colspec colname=\"extension\"/>\n-                    \n+\n                     <thead>\n                         <row>\n                             <entry colname=\"method\">\n@@ -1353,78 +1353,78 @@ corresponding metadata extensions.\n                         <row>\n                             <entry colname=\"method\">\n                                 <literal>\n-                                    \n+\n               public CustomType(String str)\n-              \n+\n                                 </literal>\n                             </entry>\n                             <entry colname=\"extension\">\n-                                \n+\n               none\n-              \n+\n                             </entry>\n                         </row>\n                         <row>\n                             <entry colname=\"method\">\n                                 <literal>\n-                                    \n+\n               public static CustomType CustomType.fromString(String str)\n-              \n+\n                                 </literal>\n                             </entry>\n                             <entry colname=\"extension\">\n                                 <literal>\n-                                    \n+\n               @Factory(\"fromString\")\n-              \n+\n                                 </literal>\n                             </entry>\n                         </row>\n                         <row>\n                             <entry colname=\"method\">\n                                 <literal>\n-                                    \n+\n               public static CustomType CustomType.fromString(String str, StoreContext ctx)\n-              \n+\n                                 </literal>\n                             </entry>\n                             <entry colname=\"extension\">\n                                 <literal>\n-                                    \n+\n               @Factory(\"fromString\")\n-              \n+\n                                 </literal>\n                             </entry>\n                         </row>\n                         <row>\n                             <entry colname=\"method\">\n                                 <literal>\n-                                    \n+\n               public static CustomType AnyClass.fromString(String str)\n-              \n+\n                                 </literal>\n                             </entry>\n                             <entry colname=\"extension\">\n                                 <literal>\n-                                    \n+\n               @Factory(\"AnyClass.fromString\")\n-              \n+\n                                 </literal>\n                             </entry>\n                         </row>\n                         <row>\n                             <entry colname=\"method\">\n                                 <literal>\n-                                    \n+\n               public static CustomType AnyClass.fromString(String str, StoreContext ctx)\n-              \n+\n                                 </literal>\n                             </entry>\n                             <entry colname=\"extension\">\n                                 <literal>\n-                                    \n+\n               @Factory(\"AnyClass.fromString\")\n-              \n+\n                                 </literal>\n                             </entry>\n                         </row>\n@@ -1482,19 +1482,19 @@ public class Magazine\n {\n     // use Class.getName and Class.forName to go to/from strings\n     @Persistent\n-    @Externalizer(\"getName\") \n+    @Externalizer(\"getName\")\n     @Factory(\"forName\")\n     private Class cls;\n \n-    // use URL.getExternalForm for externalization. no factory; \n+    // use URL.getExternalForm for externalization. no factory;\n     // we can rely on the URL string constructor\n     @Persistent\n     @Externalizer(\"toExternalForm\")\n     private URL url;\n \n-    // use our custom methods; notice how we use the KeyType and ElementType \n+    // use our custom methods; notice how we use the KeyType and ElementType\n     // annotations to specify the metadata for our externalized map\n-    @Persistent \n+    @Persistent\n     @Externalizer(\"Magazine.mapFromCustomType\")\n     @Factory(\"Magazine.mapToCustomType\")\n     @KeyType(String.class) @ElementType(String.class)\n@@ -1693,7 +1693,7 @@ properties in the fetch group.\n                 </listitem>\n                 <listitem>\n                     <para>\n-<literal>String[] fetchGroups</literal>: Other fetch groups whose fields to \n+<literal>String[] fetchGroups</literal>: Other fetch groups whose fields to\n include in this group.\n                     </para>\n                 </listitem>\n@@ -1715,15 +1715,15 @@ include in the fetch group.\n                 </listitem>\n                 <listitem>\n                     <para>\n-<literal>recursionDepth</literal>: If the attribute represents a relation, the \n+<literal>recursionDepth</literal>: If the attribute represents a relation, the\n maximum number of same-typed relations to eager-fetch from this field.  Defaults\n-to 1.  For example, consider an <classname>Employee</classname> class with a \n+to 1.  For example, consider an <classname>Employee</classname> class with a\n <literal>manager</literal> field, also of type <classname>Employee</classname>.\n When we load an <classname>Employee</classname> and the <literal>\n manager</literal> field is in an active fetch group, the recursion depth (along\n-with the max fetch depth setting, described below) determines whether we only \n-retrieve the target <classname>Employee</classname> and his manager (depth 1), \n-or whether we also retrieve the manager's manager (depth 2), or the manager's \n+with the max fetch depth setting, described below) determines whether we only\n+retrieve the target <classname>Employee</classname> and his manager (depth 1),\n+or whether we also retrieve the manager's manager (depth 2), or the manager's\n manager's manager (depth 3), etc.  Use -1 for unlimited depth.\n                     </para>\n                 </listitem>\n@@ -1755,14 +1755,14 @@ public class Magazine\n             </example>\n             <para>\n A field can be a member of any number of fetch groups.  A field can also\n-declare a <emphasis>load fetch group</emphasis>.  \n+declare a <emphasis>load fetch group</emphasis>.\n When you access a lazy-loaded field for the first time, OpenJPA makes a\n datastore trip to fetch that field's data.  Sometimes, however, you know\n that whenever you access a lazy field A, you're likely to access lazy fields B\n and C as well.  Therefore, it would be more efficient to fetch the data for A,\n-B, and C in the same datastore trip.  By setting A's load fetch group to the \n-name of a <link linkend=\"ref_guide_fetch\">fetch group</link> containing B and \n-C, you can tell OpenJPA to load all of these fields together when A is first \n+B, and C in the same datastore trip.  By setting A's load fetch group to the\n+name of a <link linkend=\"ref_guide_fetch\">fetch group</link> containing B and\n+C, you can tell OpenJPA to load all of these fields together when A is first\n accessed.\n             </para>\n             <para>\n@@ -1828,15 +1828,15 @@ fetch group names.\n             <para>\n You can also set the system's default maximum fetch depth with the\n <link linkend=\"openjpa.MaxFetchDepth\"><literal>openjpa.MaxFetchDepth</literal>\n-</link> configuration property.  The maximum fetch depth determines how \"deep\" \n+</link> configuration property.  The maximum fetch depth determines how \"deep\"\n into the object graph to traverse when loading an instance.  The default maximum\n-depth is 1, meaning that OpenJPA will load at most the target instance and its \n-immediate relations.  By increasing the depth, you can allow OpenJPA to also \n+depth is 1, meaning that OpenJPA will load at most the target instance and its\n+immediate relations.  By increasing the depth, you can allow OpenJPA to also\n load relations of relations, to arbitrary depth.  A value of -1 symbolizes an\n infinite maximum, telling OpenJPA to fetch configured relations until it reaches\n-the edges of the object graph.  Of course, which relation fields are loaded \n+the edges of the object graph.  Of course, which relation fields are loaded\n depends on whether the fields are eager or lazy, and on the active fetch groups.\n-A fetch group member's recursion depth may also limit the fetch depth to \n+A fetch group member's recursion depth may also limit the fetch depth to\n something less than the configured maximum.\n             </para>\n             <para>\n@@ -1846,10 +1846,10 @@ OpenJPAQuery</classname> extensions to the standard <classname>EntityManager\n <ulink url=\"../../api/openjpa/persistence/FetchPlan.html\"><classname>\n org.apache.openjpa.persistence.FetchPlan</classname></ulink> object. The\n <classname>FetchPlan</classname> maintains the set of active fetch groups and\n-the maximum fetch depth. It begins with the groups and depth defined in the \n+the maximum fetch depth. It begins with the groups and depth defined in the\n <literal>openjpa.FetchGroups</literal> and <literal>openjpa.MaxFetchDepth\n </literal> properties, but allows you to add or remove groups and change the\n-maximum fetch depth for an individual <classname>EntityManager</classname> or \n+maximum fetch depth for an individual <classname>EntityManager</classname> or\n <classname>Query</classname> through the methods below.\n             </para>\n <programlisting>\n@@ -1860,7 +1860,7 @@ public FetchPlan removeFetchGroup (String group);\n public FetchPlan removeFetchGroups (String... groups);\n public FetchPlan removeFetchGroups (Collection groups);\n public FetchPlan resetFetchGroups ();\n-public Collection&lt;String&gt; getFetchGroups (); \n+public Collection&lt;String&gt; getFetchGroups ();\n public void clearFetchGroups ();\n public FetchPlan setMaxFetchDepth(int depth);\n public int getMaxFetchDepth();\n@@ -1918,7 +1918,7 @@ public FetchPlan removeFields (String... fields);\n public FetchPlan removeFields (Class cls, String... fields);\n public FetchPlan removeFields (Collection fields);\n public FetchPlan removeFields (Class cls, Collection fields);\n-public Collection&lt;String&gt; getFields (); \n+public Collection&lt;String&gt; getFields ();\n public void clearFields ();\n </programlisting>\n             <para>\n@@ -2350,269 +2350,4 @@ using the mapping extensions described in <xref linkend=\"nonpolymorphic\"/>.\n             </itemizedlist>\n         </section>\n     </section>\n-    <section id=\"ref_guide_lock_groups\">\n-        <title>\n-            Lock Groups\n-        </title>\n-        <indexterm zone=\"ref_guide_lock_groups\">\n-            <primary>\n-                locking\n-            </primary>\n-            <secondary>\n-                lock groups\n-            </secondary>\n-        </indexterm>\n-        <indexterm zone=\"ref_guide_lock_groups\">\n-            <primary>\n-                lock groups\n-            </primary>\n-            <seealso>\n-                locking\n-            </seealso>\n-        </indexterm>\n-        <para>\n-OpenJPA supports both optimistic and datastore locking strategies, but\n-optimistic locking is the preferred approach in most applications. Typically,\n-optimistic locking is performed at the object level of granularity. That is,\n-changes to any part of the same object in concurrent transactions will result in\n-an optimistic locking exception being thrown by the transaction that commits\n-last. In many applications, this is acceptable. However, if your application has\n-a high likelihood of concurrent writes to different parts of the same object,\n-then it may be advantageous to use a finer-grained optimistic lock.\n-Additionally, certain parts of an object featureSelection may be best modeled without any\n-locking at all, or with a last-commit-wins strategy. It is for these types of\n-situations that OpenJPA offers customizable optimistic lock groups, which allow\n-you to achieve sub-object-level locking granularity.\n-        </para>\n-        <para>\n-For example, an <classname>Employee</classname> class may have some fields\n-configurable by the employee the object represents ( <literal> firstName\n-</literal>, <literal>lastName</literal>, <literal> phoneNumber</literal> ), some\n-that are only modifiable by that employee's manager ( <literal>salary</literal>\n-, <literal>title</literal> ), and some in which concurrent updates are\n-acceptable (a list of <literal> projects</literal> ). In such a featureSelection, you can\n-greatly improve the success of concurrent updates in optimistic transactions by\n-putting <literal>firstName</literal>, <literal>lastName</literal>, and <literal>\n-phoneNumber</literal> into one lock group, <literal>salary</literal> and\n-<literal>title</literal> into another, and excluding the <literal>projects\n-</literal> field from optimistic lock checks altogether.\n-        </para>\n-        <para>\n-<phrase> You specify a field's lock group in JPA metadata with the\n-<ulink url=\"../apidocs/org/apache/openjpa/persistence/LockGroup.html\">\n-<classname>org.apache.openjpa.persistence.LockGroup</classname></ulink>\n-annotation.</phrase> See <xref linkend=\"lock-group\"/> for details on lock\n-group metadata.\n-        </para>\n-        <example id=\"ref_guide_lock_groups_metadata\">\n-            <title>\n-                Lock Group Metadata\n-            </title>\n-<programlisting>\n-import org.apache.openjpa.persistence.*;\n-\n-@Entity\n-public class Employee\n-{\n-    // default lock group\n-    private String firstName;\n-    private String lastName;\n-    private String phoneNumber;\n-\n-    // named lock group\n-    @LockGroup(\"corporate\") private float  salary;\n-    @LockGroup(\"corporate\") private String title;\n-\n-    // no lock group; allow concurrent modifications\n-    @LockGroup(LockGroup.NONE) private Set&lt;Project&gt; projects;\n-\n-    ...\n-}\n-</programlisting>\n-        </example>\n-        <para>\n-Currently, lock groups are only supported when using number and timestamp\n-version strategies. They are not supported in the state-comparison strategy,\n-though you can still exclude fields from participating in optimistic versioning\n-under this strategy by setting the their lock group to <literal>none</literal>.\n-        </para>\n-        <section id=\"ref_guide_lock_groups_and_subclasses\">\n-            <title>\n-                Lock Groups and Subclasses\n-            </title>\n-            <indexterm zone=\"ref_guide_lock_groups_and_subclasses\">\n-                <primary>\n-                    lock groups\n-                </primary>\n-                <secondary>\n-                    subclasses\n-                </secondary>\n-            </indexterm>\n-            <para>\n-Due to mapping restrictions, subclasses cannot simply declare additional lock\n-groups implicitly, as is done in the example shown above. Instead, the\n-least-derived mapped type in the persistent hierarchy must list all lock groups\n-that its children can use via the <phrase>\n-<ulink url=\"../apidocs/org/apache/openjpa/persistence/LockGroups.html\">\n-<classname> org.apache.openjpa.persistence.LockGroups</classname></ulink>\n-annotation</phrase> For example, if the <classname>Employee</classname> class in\n-the last example extended <classname>Person</classname>, the metadata would\n-have looked like so:\n-            </para>\n-            <example id=\"ref_guide_lock_groups_and_subclasses_metadata\">\n-                <title>\n-                    Lock Group Metadata\n-                </title>\n-                <!-- ### -->\n-<programlisting>\n-import org.apache.openjpa.persistence.*;\n-\n-@Entity\n-@LockGroups({\"corporate\"})\n-public class Person\n-{\n-    // default lock group\n-    private String firstName;\n-    private String lastName;\n-    private String phoneNumber;\n-\n-    ...\n-}\n-\n-@Entity\n-public class Employee\n-    extends Person\n-{\n-    // named lock group\n-    @LockGroup(\"corporate\") private float  salary;\n-    @LockGroup(\"corporate\") private String title;\n-\n-    // no lock group; allow concurrent modifications\n-    @LockGroup(LockGroup.NONE) private Set&lt;Project&gt; projects;\n-\n-    ...\n-}\n-</programlisting>\n-<programlisting>\n-public class Person\n-{\n-    private String firstName;\n-    private String lastName;\n-    private String phoneNumber;\n-\n-    ...\n-}\n-\n-\n-public class Employee\n-    extends Person\n-{\n-    // these fields can only be set by the employee's manager\n-    private float  salary;\n-    private String title;\n-\n-    // this field might be updated concurrently by the employee,\n-    // other team members, or the employee's manager\n-    private Set projects;\n-\n-    ...\n-}\n-\n-\n-&lt;?xml version=\"1.0\"?&gt;\n-&lt;jdo&gt;\n-  &lt;package name=\"\"&gt;\n-    &lt;class name=\"Person\"&gt;\n-      &lt;!-- here we list the lock groups that will be used by Employee --&gt;\n-      &lt;extension vendor-name=\"openjpa\" key=\"lock-groups\" value=\"corporate\"/&gt;\n-    &lt;/class&gt;\n-    &lt;class name=\"Employee\"&gt;\n-      &lt;!-- named lock group --&gt;\n-      &lt;field name=\"salary\"&gt;\n-        &lt;extension vendor-name=\"openjpa\" key=\"lock-group\" value=\"corporate\"/&gt;\n-      &lt;/field&gt;\n-      &lt;field name=\"title\"&gt;\n-        &lt;extension vendor-name=\"openjpa\" key=\"lock-group\" value=\"corporate\"/&gt;\n-      &lt;/field&gt;\n-      &lt;!-- no lock group; allow concurrent modifications --&gt;\n-      &lt;field name=\"projects\"&gt;\n-        &lt;collection element-type=\"Project\"/&gt;\n-        &lt;extension vendor-name=\"openjpa\" key=\"lock-group\" value=\"none\"/&gt;\n-      &lt;/field&gt;\n-    &lt;/class&gt;\n-  &lt;/package&gt;\n-&lt;/jdo&gt;\n-</programlisting>\n-            </example>\n-            <para>\n-The exceptions to this rule are the <literal>none</literal> and <literal>\n-default</literal> built-in lock groups. They can be used at any point in the\n-inheritance hierarchy without pre-declaration. Additionally, the lock groups\n-listing can contain lock groups that would otherwise be implicitly defined in\n-the least-derived type metadata.\n-            </para>\n-        </section>\n-        <section id=\"ref_guide_lock_group_mapping\">\n-            <title>\n-                Lock Group Mapping\n-            </title>\n-            <indexterm zone=\"ref_guide_lock_group_mapping\">\n-                <primary>\n-                    lock groups\n-                </primary>\n-                <secondary>\n-                    mapping metadata\n-                </secondary>\n-            </indexterm>\n-            <indexterm zone=\"ref_guide_lock_group_mapping\">\n-                <primary>\n-                    mapping metadata\n-                </primary>\n-                <secondary>\n-                    version\n-                </secondary>\n-                <tertiary>\n-                    lock group mapping\n-                </tertiary>\n-                <seealso>\n-                    lock groups\n-                </seealso>\n-            </indexterm>\n-            <para>\n-When using custom lock groups with a relational database, OpenJPA will need a\n-version column for each of the groups, instead of just one version column. This\n-means that you must use surrogate versioning; you cannot use a version field.\n-OpenJPA also currently requires that all the version columns for a given object\n-be in the same table. Finally, it is only possible to use a single version\n-strategy for a given object. That is, you cannot have one version number column\n-and another timestamp version column.\n-            </para>\n-            <para>\n-<phrase> Use the\n-<ulink url=\"../apidocs/org/apache/openjpa/persistence/jdbc/VersionColumn.html\">\n-<classname>org.apache.openjpa.persistence.jdbc.VersionColumn(s)</classname>\n-</ulink> annotation to specify the version column for each lock group in JPA\n-mapping.</phrase>\n-            </para>\n-            <example id=\"ref_guide_lock_groups_mapping_ex\">\n-                <title>\n-                    Mapping Lock Groups\n-                </title>\n-<programlisting>\n-import org.apache.openjpa.persistence.jdbc.*;\n-\n-@Entity\n-@Table(name=\"EMP\")\n-@VersionColumns({\n-    @VersionColumn(name=\"VERS_CORP\" lockGroup=\"corporate\"),\n-    @VersionColumn(name=\"VERS\")\n-})\n-public class Employee\n-{\n-    ...\n-}\n-</programlisting>\n-            </example>\n-        </section>\n-    </section>\n </chapter>"}]}

