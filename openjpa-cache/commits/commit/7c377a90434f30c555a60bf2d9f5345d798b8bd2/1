{"sha":"7c377a90434f30c555a60bf2d9f5345d798b8bd2","node_id":"MDY6Q29tbWl0MjA2MzY0OjdjMzc3YTkwNDM0ZjMwYzU1NWE2MGJmMmQ5ZjUzNDVkNzk4YjhiZDI=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-10-27T14:47:44Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-10-27T14:47:44Z"},"message":"OPENJPA-1856: Executing bulk updates should evict from DataCache.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1027983 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9263c239c3f929c783f4b8d9bdae119ea92d0a67","url":"https://api.github.com/repos/apache/openjpa/git/trees/9263c239c3f929c783f4b8d9bdae119ea92d0a67"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7c377a90434f30c555a60bf2d9f5345d798b8bd2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7c377a90434f30c555a60bf2d9f5345d798b8bd2","html_url":"https://github.com/apache/openjpa/commit/7c377a90434f30c555a60bf2d9f5345d798b8bd2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7c377a90434f30c555a60bf2d9f5345d798b8bd2/comments","author":null,"committer":null,"parents":[{"sha":"06c1e74358856150467a15c048155078f5a5c01f","url":"https://api.github.com/repos/apache/openjpa/commits/06c1e74358856150467a15c048155078f5a5c01f","html_url":"https://github.com/apache/openjpa/commit/06c1e74358856150467a15c048155078f5a5c01f"}],"stats":{"total":164,"additions":150,"deletions":14},"files":[{"sha":"8b34f9e1e8b62f766fc47eb5b2a40ad7162b6bf1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","status":"modified","additions":21,"deletions":2,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/7c377a90434f30c555a60bf2d9f5345d798b8bd2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/7c377a90434f30c555a60bf2d9f5345d798b8bd2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java?ref=7c377a90434f30c555a60bf2d9f5345d798b8bd2","patch":"@@ -21,6 +21,7 @@\n import java.util.Map;\n \n import org.apache.commons.collections.map.LinkedMap;\n+import org.apache.openjpa.datacache.DataCache;\n import org.apache.openjpa.kernel.exps.AggregateListener;\n import org.apache.openjpa.kernel.exps.FilterListener;\n import org.apache.openjpa.kernel.exps.QueryExpressions;\n@@ -121,11 +122,29 @@ public Object evaluate(Object value, Object ob, Object[] params,\n         implements Executor {\n \n         public Number executeDelete(StoreQuery q, Object[] params) {\n-            return q.getContext().deleteInMemory(q, this, params);\n+            try {\n+                return q.getContext().deleteInMemory(q, this, params);\n+            } finally {\n+                for (ClassMetaData cmd : getAccessPathMetaDatas(q)) {\n+                    DataCache cache = cmd.getDataCache();\n+                    if (cache != null) {\n+                        cache.removeAll(cmd.getDescribedType(), true);\n+                    }\n+                }\n+            }\n         }\n \n         public Number executeUpdate(StoreQuery q, Object[] params) {\n-            return q.getContext().updateInMemory(q, this, params);\n+            try {\n+                return q.getContext().updateInMemory(q, this, params);\n+            } finally {\n+                for (ClassMetaData cmd : getAccessPathMetaDatas(q)) {\n+                    DataCache cache = cmd.getDataCache();\n+                    if (cache != null) {\n+                        cache.removeAll(cmd.getDescribedType(), true);\n+                    }\n+                }\n+            }\n         }\n \n         public String[] getDataStoreActions(StoreQuery q, Object[] params,"},{"sha":"78906042bde784b4e754ea65bca1951549990260","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","status":"modified","additions":29,"deletions":10,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/7c377a90434f30c555a60bf2d9f5345d798b8bd2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/7c377a90434f30c555a60bf2d9f5345d798b8bd2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java?ref=7c377a90434f30c555a60bf2d9f5345d798b8bd2","patch":"@@ -31,6 +31,7 @@\n \n import org.apache.commons.collections.map.LinkedMap;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.datacache.DataCache;\n import org.apache.openjpa.kernel.exps.Subquery;\n import org.apache.openjpa.kernel.exps.AbstractExpressionVisitor;\n import org.apache.openjpa.kernel.exps.AggregateListener;\n@@ -778,19 +779,37 @@ public ResultObjectProvider executeQuery(StoreQuery q,\n         }\n \n         public Number executeDelete(StoreQuery q, Object[] params) {\n-            Number num = ((ExpressionStoreQuery) q).executeDelete(this, _meta,\n-                _metas, _subs, _facts, _exps, params);\n-            if (num == null)\n-                return q.getContext().deleteInMemory(q, this, params);\n-            return num;\n+            try {\n+                Number num =\n+                    ((ExpressionStoreQuery) q).executeDelete(this, _meta, _metas, _subs, _facts, _exps, params);\n+                if (num == null)\n+                    return q.getContext().deleteInMemory(q, this, params);\n+                return num;\n+            } finally {\n+                for (ClassMetaData cmd : getAccessPathMetaDatas(q)) {\n+                    DataCache cache = cmd.getDataCache();\n+                    if (cache != null) {\n+                        cache.removeAll(cmd.getDescribedType(), true);\n+                    }\n+                }\n+            }\n         }\n \n         public Number executeUpdate(StoreQuery q, Object[] params) {\n-            Number num = ((ExpressionStoreQuery) q).executeUpdate(this, _meta,\n-                _metas, _subs, _facts, _exps, params);\n-            if (num == null)\n-                return q.getContext().updateInMemory(q, this, params);\n-            return num;\n+            try {\n+                Number num =\n+                    ((ExpressionStoreQuery) q).executeUpdate(this, _meta, _metas, _subs, _facts, _exps, params);\n+                if (num == null)\n+                    return q.getContext().updateInMemory(q, this, params);\n+                return num;\n+            } finally {\n+                for (ClassMetaData cmd : getAccessPathMetaDatas(q)) {\n+                    DataCache cache = cmd.getDataCache();\n+                    if (cache != null) {\n+                        cache.removeAll(cmd.getDescribedType(), true);\n+                    }\n+                }\n+            }\n         }\n \n         public String[] getDataStoreActions(StoreQuery q, Object[] params,"},{"sha":"803edc07e0c8ed50d79700b7d997cb8a5736b6af","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CachedEntityStatistics.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7c377a90434f30c555a60bf2d9f5345d798b8bd2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CachedEntityStatistics.java","raw_url":"https://github.com/apache/openjpa/raw/7c377a90434f30c555a60bf2d9f5345d798b8bd2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CachedEntityStatistics.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CachedEntityStatistics.java?ref=7c377a90434f30c555a60bf2d9f5345d798b8bd2","patch":"@@ -46,11 +46,11 @@\n     @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n     Set<CachedEntityStatistics> lazyList = new HashSet<CachedEntityStatistics>();\n \n+    String firstName, lastName;\n+    \n     public CachedEntityStatistics() {\n     }\n \n-    private String firstName, lastName;\n-\n     public int getId() {\n         return id;\n     }"},{"sha":"6fd88d29164fcf11693410a50a8ccbb8abd5c315","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkUpdatesDataCacheEviction.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/7c377a90434f30c555a60bf2d9f5345d798b8bd2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkUpdatesDataCacheEviction.java","raw_url":"https://github.com/apache/openjpa/raw/7c377a90434f30c555a60bf2d9f5345d798b8bd2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkUpdatesDataCacheEviction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkUpdatesDataCacheEviction.java?ref=7c377a90434f30c555a60bf2d9f5345d798b8bd2","patch":"@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import javax.persistence.Cache;\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestBulkUpdatesDataCacheEviction extends SingleEMFTestCase {\n+    Object[] props = new Object[] { CLEAR_TABLES, CachedEntityStatistics.class, \"openjpa.DataCache\", \"true\" };\n+\n+    public void setUp() throws Exception {\n+        super.setUp(props);\n+    }\n+\n+    /**\n+     * This test ensures that after executing an update against the db, the updated type is purged from\n+     * the DataCache.\n+     */\n+    public void testUpdate() throws Exception {\n+        EntityManager em = emf.createEntityManager();\n+        Cache cache = emf.getCache();\n+        try {\n+            CachedEntityStatistics e = createEntity(em);\n+            assertTrue(cache.contains(CachedEntityStatistics.class, e.getId()));\n+            em.clear();\n+\n+            String update = \"UPDATE CachedEntityStatistics s SET s.firstName = :name WHERE s.id = :id\";\n+            String name = \"name_\" + System.currentTimeMillis();\n+            // execute update, this should result in a cache eviction\n+            em.getTransaction().begin();\n+            assertEquals(1, em.createQuery(update).setParameter(\"name\", name).setParameter(\"id\", e.getId())\n+                .executeUpdate());\n+            em.getTransaction().commit();\n+            assertFalse(cache.contains(CachedEntityStatistics.class, e.getId()));\n+\n+            CachedEntityStatistics postUpdate = em.find(CachedEntityStatistics.class, e.getId());\n+            assertEquals(name, postUpdate.getFirstName());\n+\n+        } finally {\n+            em.close();\n+        }\n+    }\n+\n+    /**\n+     * This test ensures that after executing a delete against the db, the deleted type is purged from\n+     * the DataCache.\n+     */\n+    public void testDelete() throws Exception {\n+        EntityManager em = emf.createEntityManager();\n+        Cache cache = emf.getCache();\n+        try {\n+            CachedEntityStatistics e = createEntity(em);\n+            assertTrue(cache.contains(CachedEntityStatistics.class, e.getId()));\n+            em.clear();\n+\n+            String delete = \"DELETE FROM CachedEntityStatistics s WHERE s.id = :id\";\n+            // execute update, this should result in a cache eviction\n+            em.getTransaction().begin();\n+            assertEquals(1, em.createQuery(delete).setParameter(\"id\", e.getId()).executeUpdate());\n+            em.getTransaction().commit();\n+            assertFalse(cache.contains(CachedEntityStatistics.class, e.getId()));\n+\n+            CachedEntityStatistics postUpdate = em.find(CachedEntityStatistics.class, e.getId());\n+            assertNull(postUpdate);\n+\n+        } finally {\n+            em.close();\n+        }\n+    }\n+\n+    private CachedEntityStatistics createEntity(EntityManager em) {\n+        em.getTransaction().begin();\n+        CachedEntityStatistics e = new CachedEntityStatistics();\n+        em.persist(e);\n+        em.getTransaction().commit();\n+\n+        return e;\n+    }\n+\n+}"}]}

