{"sha":"7c8454767ef4a36d5a57d048ced52322dab996df","node_id":"MDY6Q29tbWl0MjA2MzY0OjdjODQ1NDc2N2VmNGEzNmQ1YTU3ZDA0OGNlZDUyMzIyZGFiOTk2ZGY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-21T21:28:08Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-21T21:28:08Z"},"message":"Fixing svn:eol-style\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@806726 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a917e51c54c76f9e7e5f735a0aa504304645804b","url":"https://api.github.com/repos/apache/openjpa/git/trees/a917e51c54c76f9e7e5f735a0aa504304645804b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7c8454767ef4a36d5a57d048ced52322dab996df","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7c8454767ef4a36d5a57d048ced52322dab996df","html_url":"https://github.com/apache/openjpa/commit/7c8454767ef4a36d5a57d048ced52322dab996df","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7c8454767ef4a36d5a57d048ced52322dab996df/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"bb7048d27c55141851d7f9496f17aae407eca4e4","url":"https://api.github.com/repos/apache/openjpa/commits/bb7048d27c55141851d7f9496f17aae407eca4e4","html_url":"https://github.com/apache/openjpa/commit/bb7048d27c55141851d7f9496f17aae407eca4e4"}],"stats":{"total":742,"additions":371,"deletions":371},"files":[{"sha":"583b796b88ba762a845f435b17ca2625cb93d981","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Listing.java","status":"modified","additions":66,"deletions":66,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/7c8454767ef4a36d5a57d048ced52322dab996df/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Listing.java","raw_url":"https://github.com/apache/openjpa/raw/7c8454767ef4a36d5a57d048ced52322dab996df/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Listing.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Listing.java?ref=7c8454767ef4a36d5a57d048ced52322dab996df","patch":"@@ -1,66 +1,66 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.embed;\r\n-\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Embeddable;\r\n-import javax.persistence.ManyToOne;\r\n-\r\n-\r\n-@Embeddable\r\n-public class Listing {\r\n-\t\r\n-\t@ManyToOne(cascade=CascadeType.ALL)\r\n-\tSeller seller;\r\n-\t\r\n-\tDouble price;\r\n-\t\r\n-\tString comments;\r\n-\t\r\n-\tpublic Listing(){}\r\n-\t\r\n-\tpublic Listing(Seller seller, Double price){\r\n-\t\tthis.price=price;\r\n-\t\tthis.seller=seller;\r\n-\t}\r\n-\t\r\n-\tpublic Seller getSeller() {\r\n-\t    return seller;\r\n-\t}\r\n-\t\r\n-\tpublic void setSeller(Seller seller) {\r\n-\t    this.seller = seller;\r\n-\t}\r\n-\t\r\n-\tpublic Double getPrice() {\r\n-\t    return price;\r\n-\t}\r\n-\t\r\n-\tpublic void setPrice(Double price) {\r\n-\t    this.price = price;\r\n-\t}\r\n-\t\r\n-\tpublic String getComments() {\r\n-\t    return comments;\r\n-\t}\r\n-\r\n-\tpublic void setComments(String comments) {\r\n-\t    this.comments = comments;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.embed;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Embeddable;\n+import javax.persistence.ManyToOne;\n+\n+\n+@Embeddable\n+public class Listing {\n+\t\n+\t@ManyToOne(cascade=CascadeType.ALL)\n+\tSeller seller;\n+\t\n+\tDouble price;\n+\t\n+\tString comments;\n+\t\n+\tpublic Listing(){}\n+\t\n+\tpublic Listing(Seller seller, Double price){\n+\t\tthis.price=price;\n+\t\tthis.seller=seller;\n+\t}\n+\t\n+\tpublic Seller getSeller() {\n+\t    return seller;\n+\t}\n+\t\n+\tpublic void setSeller(Seller seller) {\n+\t    this.seller = seller;\n+\t}\n+\t\n+\tpublic Double getPrice() {\n+\t    return price;\n+\t}\n+\t\n+\tpublic void setPrice(Double price) {\n+\t    this.price = price;\n+\t}\n+\t\n+\tpublic String getComments() {\n+\t    return comments;\n+\t}\n+\n+\tpublic void setComments(String comments) {\n+\t    this.comments = comments;\n+\t}\n+}"},{"sha":"e6e37dac6b864484218e3b92dc9b733197f90ead","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Seller.java","status":"modified","additions":69,"deletions":69,"changes":138,"blob_url":"https://github.com/apache/openjpa/blob/7c8454767ef4a36d5a57d048ced52322dab996df/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Seller.java","raw_url":"https://github.com/apache/openjpa/raw/7c8454767ef4a36d5a57d048ced52322dab996df/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Seller.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Seller.java?ref=7c8454767ef4a36d5a57d048ced52322dab996df","patch":"@@ -1,69 +1,69 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.embed;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.GenerationType;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"SL_EMD\")\r\n-public class Seller {\r\n-\t@Id\r\n-\t@GeneratedValue(strategy=GenerationType.IDENTITY)\r\n-\tprivate int id;\r\n-\t\r\n-\tprivate String name;\r\n-\t\r\n-\tpublic Seller(){\r\n-\t\t\r\n-\t}\r\n-\t\r\n-\tpublic Seller(String n){\r\n-\t\tname=n;\r\n-\t}\r\n-/*\t\r\n-    public Seller(String n, int id){\r\n-        name=n;\r\n-        this.id = id;\r\n-    }\r\n-*/\r\n-    public int getId() {\r\n-\t    return id;\r\n-\t}\r\n-/*\t\r\n-\tpublic void setId(int id) {\r\n-\t    this.id = id;\r\n-\t}\r\n-*/\t\r\n-\tpublic String getName() {\r\n-\t    return name;\r\n-\t}\r\n-\t\r\n-\tpublic void setName(String name) {\r\n-\t    this.name = name;\r\n-\t}\r\n-\t\r\n-\tpublic String toString(){\r\n-\t\treturn \"Seller id: \" + id + \" name: \" + name;\r\n-\t}\r\n-\t\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.embed;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"SL_EMD\")\n+public class Seller {\n+\t@Id\n+\t@GeneratedValue(strategy=GenerationType.IDENTITY)\n+\tprivate int id;\n+\t\n+\tprivate String name;\n+\t\n+\tpublic Seller(){\n+\t\t\n+\t}\n+\t\n+\tpublic Seller(String n){\n+\t\tname=n;\n+\t}\n+/*\t\n+    public Seller(String n, int id){\n+        name=n;\n+        this.id = id;\n+    }\n+*/\n+    public int getId() {\n+\t    return id;\n+\t}\n+/*\t\n+\tpublic void setId(int id) {\n+\t    this.id = id;\n+\t}\n+*/\t\n+\tpublic String getName() {\n+\t    return name;\n+\t}\n+\t\n+\tpublic void setName(String name) {\n+\t    this.name = name;\n+\t}\n+\t\n+\tpublic String toString(){\n+\t\treturn \"Seller id: \" + id + \" name: \" + name;\n+\t}\n+\t\n+}"},{"sha":"ba58ba96a14b620753c53f3d93753f3b51de8104","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestUpdateEmbeddedQueryResult.java","status":"modified","additions":155,"deletions":155,"changes":310,"blob_url":"https://github.com/apache/openjpa/blob/7c8454767ef4a36d5a57d048ced52322dab996df/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestUpdateEmbeddedQueryResult.java","raw_url":"https://github.com/apache/openjpa/raw/7c8454767ef4a36d5a57d048ced52322dab996df/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestUpdateEmbeddedQueryResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestUpdateEmbeddedQueryResult.java?ref=7c8454767ef4a36d5a57d048ced52322dab996df","patch":"@@ -1,155 +1,155 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.embed;\r\n-\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityTransaction;\r\n-\r\n-import org.apache.openjpa.persistence.ArgumentException;\r\n-import org.apache.openjpa.persistence.RollbackException;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-public class TestUpdateEmbeddedQueryResult extends SingleEMFTestCase {\r\n-   \r\n-    public int ID = 1;\r\n-\r\n-    public void setUp() {\r\n-        setUp(Embed.class,\r\n-            Embed_Embed.class, \r\n-            EntityA_Embed_Embed.class, \r\n-            DROP_TABLES);\r\n-    }\r\n-\r\n-    public void testEntityA_Embed_Embed_update() {\r\n-        createEntityA_Embed_Embed();\r\n-        updateEmbedded_EntityA_Embed_Embed();\r\n-    }\r\n-\r\n-    /*\r\n-     * Create EntityA_Embed_Embed\r\n-     */\r\n-    public void createEntityA_Embed_Embed() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        createEntityA_Embed_Embed(em, ID);\r\n-        tran.begin();\r\n-        em.flush();\r\n-        tran.commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void createEntityA_Embed_Embed(EntityManager em, int id) {\r\n-        EntityA_Embed_Embed a = new EntityA_Embed_Embed();\r\n-        a.setId(id);\r\n-        a.setName(\"a\" + id);\r\n-        a.setAge(id);\r\n-        Embed_Embed embed = createEmbed_Embed(em, id, 0);\r\n-        a.setEmbed(embed);\r\n-        em.persist(a);\r\n-    }\r\n-\r\n-    public Embed_Embed createEmbed_Embed(EntityManager em, int id, int idx) {\r\n-        Embed_Embed embed = new Embed_Embed();\r\n-        embed.setIntVal1(id * 100 + idx * 10 + 1);\r\n-        embed.setIntVal2(id * 100 + idx * 10 + 2);\r\n-        embed.setIntVal3(id * 100 + idx * 10 + 3);\r\n-        Embed embed1 = createEmbed(id, idx);\r\n-        embed.setEmbed(embed1);\r\n-        return embed;\r\n-    }\r\n-\r\n-    public Embed createEmbed(int id, int idx) {\r\n-        Embed embed = new Embed();\r\n-        embed.setIntVal1(id * 100 + idx * 10 + 4);\r\n-        embed.setIntVal2(id * 100 + idx * 10 + 5);\r\n-        embed.setIntVal3(id * 100 + idx * 10 + 6);\r\n-        return embed;\r\n-    }\r\n-\r\n-    /*\r\n-     * \r\n-     */\r\n-    public void testBulkUpdateEmbeddedField() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        String update = \"UPDATE EntityA_Embed_Embed a set a.embed.embed.intVal1 = ?1,\" +\r\n-                \" a.embed.embed.intVal2 = ?2 where a.id = 10\";\r\n-        em.getTransaction().begin();\r\n-        int count = em.createQuery(update).setParameter(1, 100).setParameter(2, 200).executeUpdate();\r\n-        em.getTransaction().commit();\r\n-        assertEquals(count, 0);\r\n-\r\n-        // test invalid bulk update embeddable field\r\n-        update = \"UPDATE EntityA_Embed_Embed a set a.embed.embed = ?1\";\r\n-        Embed embed1 = createEmbed(ID, 10);\r\n-        try {\r\n-        int updateCount = em.createQuery(update).setParameter(1, embed1).executeUpdate();\r\n-        } catch (ArgumentException e) {\r\n-            // as expected: Bulk update of embeddable field is not allowed.\r\n-        }\r\n-        em.close();\r\n-    }\r\n-\r\n-    /*\r\n-     * update embedded object returned from query\r\n-     */\r\n-    public void updateEmbedded_EntityA_Embed_Embed() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        // test update embedded object returned from query\r\n-        String query[] = {\r\n-            \"select a.embed from EntityA_Embed_Embed a\",\r\n-            \"select a.embed.embed from EntityA_Embed_Embed a\",\r\n-            \"select a.embed as e from EntityA_Embed_Embed a ORDER BY e\",\r\n-        };\r\n-        List rs = null;\r\n-        Embed_Embed embedembed = null;\r\n-        Embed embed = null;\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        tran.begin();\r\n-        for (int i = 0; i < query.length; i++) {\r\n-            rs = em.createQuery(query[i]).getResultList();\r\n-            assertTrue(rs.size() > 0);\r\n-            try {\r\n-                switch (i) {\r\n-                case 0:\r\n-                case 2:\r\n-                    embedembed = (Embed_Embed) rs.get(0);\r\n-                    embedembed.getEmbed().setIntVal1(1111);\r\n-                    embedembed.setEmbed(embed);\r\n-                    break;\r\n-                case 1:\r\n-                    embed = (Embed) rs.get(0);\r\n-                    embed.setIntVal1(1111);\r\n-                    break;\r\n-                }\r\n-            } catch(ArgumentException e) {\r\n-                // as expected:\r\n-                // Update of embedded object returned from query result is not allowed.\r\n-            }\r\n-        }\r\n-        try {\r\n-            tran.commit();\r\n-        } catch(RollbackException e) {\r\n-            // as expected:\r\n-            // Update of embedded object returned from query result is not allowed.\r\n-        }\r\n-        em.close();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.embed;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityTransaction;\n+\n+import org.apache.openjpa.persistence.ArgumentException;\n+import org.apache.openjpa.persistence.RollbackException;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestUpdateEmbeddedQueryResult extends SingleEMFTestCase {\n+   \n+    public int ID = 1;\n+\n+    public void setUp() {\n+        setUp(Embed.class,\n+            Embed_Embed.class, \n+            EntityA_Embed_Embed.class, \n+            DROP_TABLES);\n+    }\n+\n+    public void testEntityA_Embed_Embed_update() {\n+        createEntityA_Embed_Embed();\n+        updateEmbedded_EntityA_Embed_Embed();\n+    }\n+\n+    /*\n+     * Create EntityA_Embed_Embed\n+     */\n+    public void createEntityA_Embed_Embed() {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        createEntityA_Embed_Embed(em, ID);\n+        tran.begin();\n+        em.flush();\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public void createEntityA_Embed_Embed(EntityManager em, int id) {\n+        EntityA_Embed_Embed a = new EntityA_Embed_Embed();\n+        a.setId(id);\n+        a.setName(\"a\" + id);\n+        a.setAge(id);\n+        Embed_Embed embed = createEmbed_Embed(em, id, 0);\n+        a.setEmbed(embed);\n+        em.persist(a);\n+    }\n+\n+    public Embed_Embed createEmbed_Embed(EntityManager em, int id, int idx) {\n+        Embed_Embed embed = new Embed_Embed();\n+        embed.setIntVal1(id * 100 + idx * 10 + 1);\n+        embed.setIntVal2(id * 100 + idx * 10 + 2);\n+        embed.setIntVal3(id * 100 + idx * 10 + 3);\n+        Embed embed1 = createEmbed(id, idx);\n+        embed.setEmbed(embed1);\n+        return embed;\n+    }\n+\n+    public Embed createEmbed(int id, int idx) {\n+        Embed embed = new Embed();\n+        embed.setIntVal1(id * 100 + idx * 10 + 4);\n+        embed.setIntVal2(id * 100 + idx * 10 + 5);\n+        embed.setIntVal3(id * 100 + idx * 10 + 6);\n+        return embed;\n+    }\n+\n+    /*\n+     * \n+     */\n+    public void testBulkUpdateEmbeddedField() {\n+        EntityManager em = emf.createEntityManager();\n+        String update = \"UPDATE EntityA_Embed_Embed a set a.embed.embed.intVal1 = ?1,\" +\n+                \" a.embed.embed.intVal2 = ?2 where a.id = 10\";\n+        em.getTransaction().begin();\n+        int count = em.createQuery(update).setParameter(1, 100).setParameter(2, 200).executeUpdate();\n+        em.getTransaction().commit();\n+        assertEquals(count, 0);\n+\n+        // test invalid bulk update embeddable field\n+        update = \"UPDATE EntityA_Embed_Embed a set a.embed.embed = ?1\";\n+        Embed embed1 = createEmbed(ID, 10);\n+        try {\n+        int updateCount = em.createQuery(update).setParameter(1, embed1).executeUpdate();\n+        } catch (ArgumentException e) {\n+            // as expected: Bulk update of embeddable field is not allowed.\n+        }\n+        em.close();\n+    }\n+\n+    /*\n+     * update embedded object returned from query\n+     */\n+    public void updateEmbedded_EntityA_Embed_Embed() {\n+        EntityManager em = emf.createEntityManager();\n+        // test update embedded object returned from query\n+        String query[] = {\n+            \"select a.embed from EntityA_Embed_Embed a\",\n+            \"select a.embed.embed from EntityA_Embed_Embed a\",\n+            \"select a.embed as e from EntityA_Embed_Embed a ORDER BY e\",\n+        };\n+        List rs = null;\n+        Embed_Embed embedembed = null;\n+        Embed embed = null;\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        for (int i = 0; i < query.length; i++) {\n+            rs = em.createQuery(query[i]).getResultList();\n+            assertTrue(rs.size() > 0);\n+            try {\n+                switch (i) {\n+                case 0:\n+                case 2:\n+                    embedembed = (Embed_Embed) rs.get(0);\n+                    embedembed.getEmbed().setIntVal1(1111);\n+                    embedembed.setEmbed(embed);\n+                    break;\n+                case 1:\n+                    embed = (Embed) rs.get(0);\n+                    embed.setIntVal1(1111);\n+                    break;\n+                }\n+            } catch(ArgumentException e) {\n+                // as expected:\n+                // Update of embedded object returned from query result is not allowed.\n+            }\n+        }\n+        try {\n+            tran.commit();\n+        } catch(RollbackException e) {\n+            // as expected:\n+            // Update of embedded object returned from query result is not allowed.\n+        }\n+        em.close();\n+    }\n+}"},{"sha":"fd929765e949c3078ce30616c71f79d65532fcf4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Account.java","status":"modified","additions":81,"deletions":81,"changes":162,"blob_url":"https://github.com/apache/openjpa/blob/7c8454767ef4a36d5a57d048ced52322dab996df/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Account.java","raw_url":"https://github.com/apache/openjpa/raw/7c8454767ef4a36d5a57d048ced52322dab996df/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Account.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Account.java?ref=7c8454767ef4a36d5a57d048ced52322dab996df","patch":"@@ -1,81 +1,81 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.ManyToOne;\r\n-import javax.persistence.OneToOne;\r\n-import javax.persistence.Table;\r\n-\r\n-/**\r\n- * Persistent class used in testing subquery.\r\n- */\r\n-@Entity\r\n-@Table(name=\"ACCT\")\r\n-public class Account {\r\n-    @Id\r\n-    @GeneratedValue\r\n-    private long aid;\r\n-\r\n-    private int balance;\r\n-    private Integer loan;\r\n-\r\n-    @ManyToOne\r\n-    private Customer cust;\r\n-    \r\n-    private String name;\r\n-\r\n-    public long getId() {\r\n-        return aid;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    public int getBalance() {\r\n-        return balance;\r\n-    }\r\n-\r\n-    public void setBalance(int balance) {\r\n-        this.balance = balance;\r\n-    }\r\n-\r\n-    public Integer getLoan() {\r\n-        return loan;\r\n-    }\r\n-\r\n-    public void setLoan(Integer loan) {\r\n-        this.loan = loan;\r\n-    }\r\n-    \r\n-    public Customer getCustomer() {\r\n-        return cust;\r\n-    }\r\n-    \r\n-    public void setCustomer(Customer customer) {\r\n-        this.cust = customer;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+\n+/**\n+ * Persistent class used in testing subquery.\n+ */\n+@Entity\n+@Table(name=\"ACCT\")\n+public class Account {\n+    @Id\n+    @GeneratedValue\n+    private long aid;\n+\n+    private int balance;\n+    private Integer loan;\n+\n+    @ManyToOne\n+    private Customer cust;\n+    \n+    private String name;\n+\n+    public long getId() {\n+        return aid;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public int getBalance() {\n+        return balance;\n+    }\n+\n+    public void setBalance(int balance) {\n+        this.balance = balance;\n+    }\n+\n+    public Integer getLoan() {\n+        return loan;\n+    }\n+\n+    public void setLoan(Integer loan) {\n+        this.loan = loan;\n+    }\n+    \n+    public Customer getCustomer() {\n+        return cust;\n+    }\n+    \n+    public void setCustomer(Customer customer) {\n+        this.cust = customer;\n+    }\n+}"}]}

