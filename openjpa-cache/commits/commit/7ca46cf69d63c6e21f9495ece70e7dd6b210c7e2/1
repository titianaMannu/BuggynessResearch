{"sha":"7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2","node_id":"MDY6Q29tbWl0MjA2MzY0OjdjYTQ2Y2Y2OWQ2M2M2ZTIxZjk0OTVlY2U3MGU3ZGQ2YjIxMGM3ZTI=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-31T16:19:24Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-07-31T16:19:24Z"},"message":"OPENJPA-240 XMLMapping Query - refactoring JAXB XML annotaion parser\nHelp Catalina committing OPENJPA-240.r560665.patch for refactoring JAXB XML annotation parser.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@561376 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"63bf22a264a73ac7ad74e13b518774a7ef858dbf","url":"https://api.github.com/repos/apache/openjpa/git/trees/63bf22a264a73ac7ad74e13b518774a7ef858dbf"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2","html_url":"https://github.com/apache/openjpa/commit/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2/comments","author":null,"committer":null,"parents":[{"sha":"872d00888d786f97f027946f59cd9c1962487fec","url":"https://api.github.com/repos/apache/openjpa/commits/872d00888d786f97f027946f59cd9c1962487fec","html_url":"https://github.com/apache/openjpa/commit/872d00888d786f97f027946f59cd9c1962487fec"}],"stats":{"total":829,"additions":505,"deletions":324},"files":[{"sha":"819c807883e39f2059c0f86c7d628571472b9763","filename":"openjpa-jdbc-5/src/main/java/org/apache/openjpa/jdbc/meta/XMLMappingRepository.java","status":"removed","additions":0,"deletions":82,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/872d00888d786f97f027946f59cd9c1962487fec/openjpa-jdbc-5/src/main/java/org/apache/openjpa/jdbc/meta/XMLMappingRepository.java","raw_url":"https://github.com/apache/openjpa/raw/872d00888d786f97f027946f59cd9c1962487fec/openjpa-jdbc-5/src/main/java/org/apache/openjpa/jdbc/meta/XMLMappingRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc-5/src/main/java/org/apache/openjpa/jdbc/meta/XMLMappingRepository.java?ref=872d00888d786f97f027946f59cd9c1962487fec","patch":"@@ -1,82 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.jdbc.meta;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import org.apache.openjpa.meta.FieldMetaData;\n-import org.apache.openjpa.meta.XMLClassMetaData;\n-import org.apache.openjpa.meta.XMLMetaData;\n-\n-/**\n- * Repository of object/relational mapping information.\n- *  (extended to include XML mapping metadata for XML columns)\n- *  \n- * @author Catalina Wei\n- * @since 1.0.0\n- */\n-public class XMLMappingRepository extends MappingRepository {\n-    // xml mapping\n-    protected final XMLMetaData[] EMPTY_XMLMETAS;\n-    private final Map _xmlmetas = new HashMap();\n-\n-    public XMLMappingRepository() {\n-        super();\n-        EMPTY_XMLMETAS = newXMLClassMetaDataArray(0);\n-    }\n-    \n-    public synchronized XMLClassMetaData addXMLClassMetaData(FieldMetaData fmd, \n-        String name) {        \n-        XMLClassMetaData meta = newXMLClassMetaData(fmd, name);\n-        addXMLClassMetaData(fmd.getDeclaredType(), meta);\n-        return meta;\n-    }\n-    \n-    public XMLMetaData getXMLClassMetaData(Class cls) {\n-        synchronized(_xmlmetas) {\n-            if (_xmlmetas.isEmpty())\n-                return null;\n-            else\n-                return (XMLClassMetaData) _xmlmetas.get(cls);\n-        }\n-    }\n-    \n-    public XMLMetaData getXMLMetaData(FieldMetaData fmd) {\n-        XMLMetaData xmlmeta = null;\n-        if (XMLClassMetaData.isXMLMapping(fmd.getDeclaredType())) {\n-            xmlmeta = getXMLClassMetaData(fmd.getDeclaredType());\n-            if (xmlmeta == null)\n-                xmlmeta = addXMLClassMetaData(fmd, fmd.getName());\n-        }\n-        return xmlmeta;\n-    }\n-    \n-    public synchronized void addXMLClassMetaData(Class cls, XMLMetaData meta) {\n-        _xmlmetas.put(cls, meta);\n-    }    \n-    \n-    protected XMLClassMetaData newXMLClassMetaData(FieldMetaData fmd, String name) {\n-        return new XMLClassMetaData(fmd.getDeclaredType(), name, this);\n-    }\n-        \n-    protected XMLMetaData[] newXMLClassMetaDataArray(int length) {\n-        return new XMLClassMetaData[length];\n-    }\n-}"},{"sha":"cb1ecd62647a0ace78c32ec2fc9979f872bc915c","filename":"openjpa-jdbc-5/src/main/java/org/apache/openjpa/meta/XMLClassMetaData.java","status":"removed","additions":0,"deletions":233,"changes":233,"blob_url":"https://github.com/apache/openjpa/blob/872d00888d786f97f027946f59cd9c1962487fec/openjpa-jdbc-5/src/main/java/org/apache/openjpa/meta/XMLClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/872d00888d786f97f027946f59cd9c1962487fec/openjpa-jdbc-5/src/main/java/org/apache/openjpa/meta/XMLClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc-5/src/main/java/org/apache/openjpa/meta/XMLClassMetaData.java?ref=872d00888d786f97f027946f59cd9c1962487fec","patch":"@@ -1,233 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.meta;\n-\n-import java.lang.reflect.AnnotatedElement;\n-import java.lang.reflect.Member;\n-import java.lang.reflect.Field;\n-import java.util.HashMap;\n-\n-import javax.xml.bind.annotation.XmlAccessType;\n-import javax.xml.bind.annotation.XmlAccessorType;\n-import javax.xml.bind.annotation.XmlAttribute;\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n-\n-import org.apache.openjpa.jdbc.meta.XMLMappingRepository;\n-import org.apache.openjpa.meta.JavaTypes;\n-import org.apache.openjpa.meta.XMLMetaData;\n-import org.apache.openjpa.meta.XMLFieldMetaData;\n-import org.apache.commons.lang.StringUtils;\n-\n-/**\n- * Contains metadata about a persistent field that maps to an xml column.\n- * This metadata is loaded at runtime when query involves predicates\n- * that navigate through xpath.\n- *\n- * @author Catalina Wei\n- * @since 1.0.0\n- */\n-public class XMLClassMetaData implements XMLMetaData     \n-{\n-    private Class _type;\n-    private int _code = JavaTypes.OBJECT;\n-    private int _xmltype = XMLTYPE;\n-    private String _name = null;\n-    private String _xmlname = null;\n-    private String _xmlnamespace = null;\n-    private boolean _isXMLRootElement = false;\n-    private HashMap _fieldMap = new HashMap();\n-    \n-    /**\n-     * Constructor.\n-     * \n-     * @param type the class that contains XmlType annotation.\n-     * @name  the persistent field name that maps to xml column\n-     * @param repo the meta repository.\n-     */\n-    public XMLClassMetaData(Class type, String name, XMLMappingRepository repos) {\n-       _type = type;\n-       _isXMLRootElement = _type.getAnnotation(XmlRootElement.class) != null;\n-       if (_isXMLRootElement) {\n-           _xmlname = ((XmlRootElement) _type.getAnnotation\n-                   (XmlRootElement.class)).name();\n-           _xmlnamespace = ((XmlRootElement) _type.getAnnotation\n-                   (XmlRootElement.class)).namespace();\n-       }\n-       else {\n-           _xmlname = ((XmlType) _type.getAnnotation\n-                   (XmlType.class)).name();\n-           _xmlnamespace = ((XmlType) _type.getAnnotation\n-                   (XmlType.class)).namespace();\n-           _name = name;\n-       }\n-       populateFromReflection(_type, repos);\n-    }\n-    \n-    /**\n-     * Constructor. Supply described type and repository.\n-     * \n-     * @param type the class that contains XmlType annotation.\n-     * @param repo the meta repository.\n-     */\n-    protected XMLClassMetaData(Class type, XMLMappingRepository repos) {\n-        _type = type;\n-        _isXMLRootElement = _type.getAnnotation(XmlRootElement.class) != null;\n-        if (_isXMLRootElement) {\n-            _xmlname = ((XmlRootElement) _type.getAnnotation\n-                    (XmlRootElement.class)).name();\n-            _xmlnamespace = ((XmlRootElement) _type.getAnnotation\n-                    (XmlRootElement.class)).namespace();\n-        }\n-        else {\n-            _xmlname = ((XmlType) _type.getAnnotation\n-                    (XmlType.class)).name();\n-            _xmlnamespace = ((XmlType) _type.getAnnotation\n-                    (XmlType.class)).namespace();           \n-        }\n-        populateFromReflection(_type, repos);\n-        repos.addXMLClassMetaData(type, this);\n-    }\n-\n-    /**\n-     * Given a class type return true if XmlType annotation exists\n-     * @param type\n-     * @return true if XmlType annotation is present else false.\n-     */\n-    public static boolean isXMLMapping(Class type) {\n-        return type.isAnnotationPresent(XmlType.class);\n-    }\n-    \n-    public void setName(String name) {\n-        _name = name;\n-    }\n-    \n-    public String getName() {\n-        return _name;\n-    }    \n-    \n-    public void setXmlname(String name) {\n-        _xmlname = name;\n-    }\n-    \n-    public String getXmlname() {\n-        return _isXMLRootElement ? null : _xmlname;\n-    }\n-\n-    public void setXmlnamespace(String name) {\n-        // avoid JAXB XML bind default name\n-        if (!StringUtils.equals(defaultName, name))\n-            _xmlnamespace = name;\n-    }\n-    \n-    public String getXmlnamespace() {\n-        return _xmlnamespace;\n-    }\n-\n-    public boolean isXmlRootElement() {\n-        return _isXMLRootElement;\n-    }\n-    \n-    public boolean isXmlElement() {\n-        return false;\n-    }\n-    \n-    public boolean isXmlAttribute() {\n-        return false;\n-    }\n-    \n-    public XMLMetaData getFieldMapping(String name) {\n-        return (XMLMetaData) _fieldMap.get(name);\n-    }\n-    \n-    public void setType(Class type) {\n-        _type = type;\n-    }\n-    \n-    public Class getType() {\n-        return _type;\n-    }\n-    \n-    public int getTypeCode() {\n-        return _code;\n-    }\n-\n-    public void setXmltype(int type) {\n-        _xmltype = type;\n-    }\n-    public int getXmltype() {\n-        return _xmltype;\n-    }\n-\n-    private synchronized void populateFromReflection(Class cls, \n-        XMLMappingRepository repos) {\n-        Member[] members; \n-        Class superclass = cls.getSuperclass();\n-\n-        // handle inheritance at sub-element level\n-        if (superclass.isAnnotationPresent(XmlType.class))\n-            populateFromReflection(superclass, repos);\n-\n-        if (((XmlAccessorType) cls.getAnnotation(XmlAccessorType.class)).value()\n-                == XmlAccessType.FIELD)\n-            members = cls.getDeclaredFields();\n-        else\n-            members = cls.getDeclaredMethods();\n-        for (int i = 0; i < members.length; i++) {\n-            Member member = members[i];\n-            AnnotatedElement el = (AnnotatedElement) member;\n-            XMLMetaData field = null;\n-            if (el.getAnnotation(XmlElement.class) != null) {\n-                String xmlname = el.getAnnotation(XmlElement.class).name();\n-                // avoid JAXB XML bind default name\n-                if (StringUtils.equals(defaultName, xmlname))\n-                    xmlname = member.getName();\n-                if (((Field) member).getType().\n-                        isAnnotationPresent(XmlType.class)) {\n-                    field = new XMLClassMetaData(((Field) member).getType(),\n-                            repos);\n-                    field.setXmltype(XMLTYPE);\n-                    field.setXmlname(xmlname);\n-                }\n-                else {\n-                    field = new XMLFieldMetaData();\n-                    field.setXmltype(ELEMENT);\n-                    field.setXmlname(xmlname);\n-                    field.setXmlnamespace(el.getAnnotation(XmlElement.class)\n-                            .namespace());                    \n-                }\n-            }\n-            else if (el.getAnnotation(XmlAttribute.class) != null) {\n-                field = new XMLFieldMetaData();\n-                field.setXmltype(XMLFieldMetaData.ATTRIBUTE);\n-                String xmlname = el.getAnnotation(XmlAttribute.class).name();\n-                // avoid JAXB XML bind default name\n-                if (StringUtils.equals(defaultName, xmlname))\n-                    xmlname = member.getName();\n-                field.setXmlname(\"@\"+xmlname);\n-                field.setXmlnamespace(el.getAnnotation(XmlAttribute.class)\n-                        .namespace());                \n-            }\n-            field.setName(member.getName());\n-            field.setType(((Field) member).getType());                \n-            _fieldMap.put(member.getName(), field);\n-        }        \n-    }\n-}"},{"sha":"308d022b9f12678cd57b5fda4911edff538b5eb3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/DelegatingMetaDataFactory.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2/openjpa-kernel/src/main/java/org/apache/openjpa/meta/DelegatingMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2/openjpa-kernel/src/main/java/org/apache/openjpa/meta/DelegatingMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/DelegatingMetaDataFactory.java?ref=7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2","patch":"@@ -122,4 +122,8 @@ public void addClassExtensionKeys(Collection exts) {\n     public void addFieldExtensionKeys(Collection exts) {\n         _delegate.addFieldExtensionKeys(exts);\n     }\n+\n+    public void loadXMLMetaData(FieldMetaData fmd) {\n+        _delegate.loadXMLMetaData(fmd);\n+    }\n }"},{"sha":"cc14ca852ac44589e4b9726fca13dbc7d18ca23c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataFactory.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataFactory.java?ref=7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2","patch":"@@ -144,4 +144,10 @@ public Class getResultSetMappingScope(String resultSetMappingName,\n      * Add any extension keys used by this instance to the given set.\n      */\n     public void addFieldExtensionKeys (Collection exts);\n+\n+    /**\n+     * Load XMLClassMetadata for the given class. Loaded\n+     * metadata should be added directly to the repository.\n+     */\n+    public void loadXMLMetaData(FieldMetaData fmd);\n }"},{"sha":"aa0d66feb7bd0e12405d370f0e937b8f8b93cd55","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":73,"deletions":3,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2","patch":"@@ -117,6 +117,10 @@\n     // map of classes to lists of their subclasses\n     private final Map _subs = Collections.synchronizedMap(new HashMap());\n \n+    // xml mapping\n+    protected final XMLMetaData[] EMPTY_XMLMETAS;\n+    private final Map _xmlmetas = new HashMap();\n+\n     private transient OpenJPAConfiguration _conf = null;\n     private transient Log _log = null;\n     private transient InterfaceImplGenerator _implGen = null;\n@@ -148,6 +152,7 @@ public MetaDataRepository() {\n         EMPTY_METAS = newClassMetaDataArray(0);\n         EMPTY_FIELDS = newFieldMetaDataArray(0);\n         EMPTY_ORDERS = newOrderArray(0);\n+        EMPTY_XMLMETAS = newXMLClassMetaDataArray(0);\n     }\n \n     /**\n@@ -785,6 +790,13 @@ protected FieldMetaData newFieldMetaData(String name, Class type,\n         return new FieldMetaData[length];\n     }\n \n+    /**\n+     * Create a new array of the proper xml class metadata subclass.\n+     */\n+    protected XMLMetaData[] newXMLClassMetaDataArray(int length) {\n+        return new XMLClassMetaData[length];\n+    }\n+\n     /**\n      * Create a new embedded class metadata instance.\n      */\n@@ -1861,9 +1873,67 @@ public boolean equals(Object obj)\n     /**\n      * Return XML metadata for a given field metadata\n      * @param fmd\n-     * @return null\n+     * @return XML metadata\n      */\n-    public XMLMetaData getXMLMetaData(FieldMetaData fmd) {\n-        return null;\n+    public synchronized XMLMetaData getXMLMetaData(FieldMetaData fmd) {\n+        Class cls = fmd.getDeclaredType();\n+        // check if cached before\n+        XMLMetaData xmlmeta = (XMLClassMetaData) _xmlmetas.get(cls);\n+        if (xmlmeta != null)\n+            return xmlmeta;\n+        \n+        // load JAXB XML metadata\n+        _factory.loadXMLMetaData(fmd);\n+        \n+        xmlmeta = (XMLClassMetaData) _xmlmetas.get(cls);\n+\n+        return xmlmeta;\n+    }\n+\n+    /**\n+     * Create a new metadata, populate it with default information, add it to\n+     * the repository, and return it.\n+     *\n+     * @param access the access type to use in populating metadata\n+     */\n+    public XMLClassMetaData addXMLMetaData(Class type, String name) {\n+        XMLClassMetaData meta = newXMLClassMetaData(type, name);\n+        \n+        // synchronize on this rather than the map, because all other methods\n+        // that access _xmlmetas are synchronized on this\n+        synchronized (this) {\n+            _xmlmetas.put(type, meta);\n+        }\n+        return meta;\n+    }\n+\n+    /**\n+     * Return the cached XMLClassMetaData for the given class\n+     * Return null if none.\n+     */\n+    public XMLMetaData getCachedXMLMetaData(Class cls) {\n+        return (XMLMetaData) _xmlmetas.get(cls);\n+    }\n+    \n+    /**\n+     * Create a new xml class metadata\n+     * @param type\n+     * @param name\n+     * @return a XMLClassMetaData\n+     */\n+    protected XMLClassMetaData newXMLClassMetaData(Class type, String name) {\n+        return new XMLClassMetaData(type, name);\n+    }\n+    \n+    /**\n+     * Create a new xml field meta, add it to the fieldMap in the given \n+     *     xml class metadata\n+     * @param type\n+     * @param name\n+     * @param meta\n+     * @return a XMLFieldMetaData\n+     */\n+    public XMLFieldMetaData newXMLFieldMetaData(Class type, String name) {\n+        return new XMLFieldMetaData(type, name);\n     }\n }"},{"sha":"2aa78483341c27ba44152e97dd26e04335e75f16","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java?ref=7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2","patch":"@@ -134,4 +134,7 @@ public Member getBackingMember(FieldMetaData fmd) {\n     public Class getUnimplementedExceptionType() {\n         return null;\n     }\n+    \n+    public void loadXMLMetaData(FieldMetaData fmd) {\n+    }\n }"},{"sha":"61a3c79828bbf75ab96047262702e6ba685e405d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLClassMetaData.java","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/apache/openjpa/blob/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2/openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2/openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLClassMetaData.java?ref=7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2","patch":"@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.meta;\n+\n+import java.util.HashMap;\n+\n+import org.apache.commons.lang.StringUtils;\n+\n+public class XMLClassMetaData implements XMLMetaData     \n+{\n+    private Class _type;\n+    private int _code = JavaTypes.OBJECT;\n+    private int _xmltype = XMLTYPE;\n+    private String _name = null;\n+    private String _xmlname = null;\n+    private String _xmlnamespace = null;\n+    private boolean _isXMLRootElement = false;\n+    private HashMap _fieldMap = new HashMap();\n+    \n+    /**\n+     * Constructor.\n+     * \n+     * @param type the class that contains XmlType annotation.\n+     * @name  the persistent field name that maps to xml column\n+     */\n+    public XMLClassMetaData(Class type, String name) {\n+        _type = type;\n+        _name = name;\n+    }\n+    \n+    /**\n+     * Constructor.\n+     * \n+     * @param type the class that contains XmlType annotation.\n+     */\n+    public XMLClassMetaData(Class type) {\n+        _type = type;\n+    }\n+\n+    public void setName(String name) {\n+        _name = name;\n+    }\n+    \n+    public String getName() {\n+        return _name;\n+    }    \n+    \n+    public void setXmlname(String name) {\n+        _xmlname = name;\n+    }\n+    \n+    public String getXmlname() {\n+        return _isXMLRootElement ? null : _xmlname;\n+    }\n+\n+    public void setXmlnamespace(String name) {\n+        // avoid JAXB XML bind default name\n+        if (!StringUtils.equals(defaultName, name))\n+            _xmlnamespace = name;\n+    }\n+    \n+    public String getXmlnamespace() {\n+        return _xmlnamespace;\n+    }\n+\n+    public void setXmlRootElement(boolean isXMLRootElement) {\n+        _isXMLRootElement = isXMLRootElement;        \n+    }\n+\n+    public boolean isXmlRootElement() {\n+        return _isXMLRootElement;\n+    }\n+    \n+    public boolean isXmlElement() {\n+        return false;\n+    }\n+    \n+    public boolean isXmlAttribute() {\n+        return false;\n+    }\n+    \n+    public XMLMetaData getFieldMapping(String name) {\n+        return (XMLMetaData) _fieldMap.get(name);\n+    }\n+    \n+    public void setType(Class type) {\n+        _type = type;\n+    }\n+    \n+    public Class getType() {\n+        return _type;\n+    }\n+    \n+    public int getTypeCode() {\n+        return _code;\n+    }\n+\n+    public void setXmltype(int type) {\n+        _xmltype = type;\n+    }\n+\n+    public int getXmltype() {\n+        return _xmltype;\n+    }\n+    \n+    public void addField(String name, XMLMetaData field) {\n+        _fieldMap.put(name, field);\n+    }\n+}\n\\ No newline at end of file"},{"sha":"179fbd602f30a8c59703ab258d8f59055cfe92ff","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLFieldMetaData.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2/openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLFieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2/openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLFieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLFieldMetaData.java?ref=7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2","patch":"@@ -40,6 +40,11 @@\n     public XMLFieldMetaData() {        \n     }\n     \n+    public XMLFieldMetaData(Class type, String name) {\n+        setType(type);\n+        _name = name;\n+    }\n+    \n     public Class getType() {\n         return (_type == null) ? _decType : _type;\n     }\n@@ -108,4 +113,10 @@ public boolean isXmlAttribute() {\n     public XMLMetaData getFieldMapping(String name) {\n         return null;\n     }\n+    \n+    public void setXmlRootElement(boolean isXmlRootElement) {\n+    }\n+\n+    public void addField(String name, XMLMetaData field) {\n+    }\n }"},{"sha":"f315012120fbdb96d291cdf75e1812cf6982c39f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLMetaData.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2/openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2/openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/XMLMetaData.java?ref=7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2","patch":"@@ -116,4 +116,8 @@\n      * @return xmltype\n      */\n     public int getXmltype();\n+    \n+    public void setXmlRootElement(boolean isXmlRootElement);\n+    \n+    public void addField(String name, XMLMetaData field);\n }"},{"sha":"8eadc843fb5a91ceb390c6439414a513b73e3ad7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java","raw_url":"https://github.com/apache/openjpa/raw/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java?ref=7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2","patch":"@@ -54,12 +54,6 @@ public void setUp() {\n                 .CustomerKey.class\n             , org.apache.openjpa.persistence.xmlmapping.entities.Order.class\n             , org.apache.openjpa.persistence.xmlmapping.entities.EAddress.class\n-            ,  \"openjpa.MetaDataRepository\"\n-            ,  \"org.apache.openjpa.jdbc.meta.XMLMappingRepository\"\n-//            ,  \"openjpa.ConnectionDriverName\"\n-//            ,  \"org.apache.commons.dbcp.BasicDataSource\"\n-//            ,  \"openjpa.ConnectionProperties\"\n-//            ,  \"DriverClassName=com.ibm.db2.jcc.DB2Driver,Url=jdbc:db2:testdb\"\n             );\n     }\n "},{"sha":"85928229505d15b32cff17fc846dfd2205a77a93","filename":"openjpa-persistence/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2/openjpa-persistence/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2/openjpa-persistence/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/pom.xml?ref=7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2","patch":"@@ -45,6 +45,11 @@\n             <version>1.0</version>\n             <scope>compile</scope>\n         </dependency>\n+\t    <dependency>\n+\t\t    <groupId>javax.xml.bind</groupId>\n+\t\t    <artifactId>jaxb-api</artifactId>\n+\t\t    <version>2.0</version>\n+\t    </dependency>\n     </dependencies>\n     <build>\n         <plugins>"},{"sha":"d0de786d40fbf146edc71b72afdcd75d0320d9b9","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","status":"added","additions":234,"deletions":0,"changes":234,"blob_url":"https://github.com/apache/openjpa/blob/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java?ref=7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2","patch":"@@ -0,0 +1,234 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.lang.reflect.AnnotatedElement;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Member;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlAttribute;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.DelegatingMetaDataFactory;\n+import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.meta.MetaDataFactory;\n+import org.apache.openjpa.meta.MetaDataRepository;\n+import org.apache.openjpa.meta.XMLFieldMetaData;\n+import org.apache.openjpa.meta.XMLMetaData;\n+\n+/**\n+ * JAXB xml annotation metadata parser.\n+ *\n+ * @author Catalina Wei\n+ * @nojavadoc\n+ */\n+public class AnnotationPersistenceXMLMetaDataParser {\n+\n+    private static final Localizer _loc = Localizer.forPackage\n+        (AnnotationPersistenceXMLMetaDataParser.class);\n+\n+    private final OpenJPAConfiguration _conf;\n+    private final Log _log;\n+    private MetaDataRepository _repos = null;\n+\n+    // the class we were invoked to parse\n+    private Class _cls = null;\n+    private FieldMetaData _fmd = null;\n+\n+    /**\n+     * Constructor; supply configuration.\n+     */\n+    public AnnotationPersistenceXMLMetaDataParser(OpenJPAConfiguration conf) {\n+        _conf = conf;\n+        _log = conf.getLog(OpenJPAConfiguration.LOG_METADATA);\n+    }\n+\n+    /**\n+     * Configuration supplied on construction.\n+     */\n+    public OpenJPAConfiguration getConfiguration() {\n+        return _conf;\n+    }\n+\n+    /**\n+     * Metadata log.\n+     */\n+    public Log getLog() {\n+        return _log;\n+    }\n+\n+    /**\n+     * Returns the repository for this parser. If none has been set,\n+     * create a new repository and sets it.\n+     */\n+    public MetaDataRepository getRepository() {\n+        if (_repos == null) {\n+            MetaDataRepository repos = _conf.newMetaDataRepositoryInstance();\n+            MetaDataFactory mdf = repos.getMetaDataFactory();\n+            if (mdf instanceof DelegatingMetaDataFactory)\n+                mdf = ((DelegatingMetaDataFactory) mdf).getInnermostDelegate();\n+            if (mdf instanceof PersistenceMetaDataFactory)\n+                ((PersistenceMetaDataFactory) mdf).setXMLAnnotationParser(this);\n+            _repos = repos;\n+        }\n+        return _repos;\n+    }\n+\n+    /**\n+     * Set the metadata repository for this parser.\n+     */\n+    public void setRepository(MetaDataRepository repos) {\n+        _repos = repos;\n+    }\n+\n+    /**\n+     * Clear caches.\n+     */\n+    public void clear() {\n+        _cls = null;\n+        _fmd = null;\n+    }\n+\n+    /**\n+     * Parse persistence metadata for the given field metadata.\n+     */\n+    public void parse(FieldMetaData fmd) {\n+        _fmd = fmd;\n+        _cls = fmd.getDeclaredType();\n+        if (_log.isTraceEnabled())\n+            _log.trace(_loc.get(\"parse-class\", _cls.getName()));\n+\n+        try {\n+            parseXMLClassAnnotations();\n+        } finally {\n+            _cls = null;\n+            _fmd = null;\n+        }\n+    }\n+\n+    /**\n+     * Read annotations for the current type.\n+     */\n+    private XMLMetaData parseXMLClassAnnotations() {\n+        // check immediately whether the class has JAXB XML annotations\n+        if (!_cls.isAnnotationPresent(XmlType.class))\n+            return null;\n+\n+        // find / create metadata\n+        XMLMetaData meta = getXMLMetaData();\n+        \n+        return meta;\n+    }\n+\n+    /**\n+     * Find or create xml metadata for the current type. \n+     */\n+    private synchronized XMLMetaData getXMLMetaData() {\n+        XMLMetaData meta = getRepository().getCachedXMLMetaData(_cls);\n+        if (meta == null) {\n+            // if not in cache, create metadata\n+            meta = getRepository().addXMLMetaData(_cls, _fmd.getName());\n+            parseXmlRootElement(_cls, meta);\n+            populateFromReflection(_cls, meta);\n+        }\n+        return meta;\n+    }\n+    \n+    private void parseXmlRootElement(Class type, XMLMetaData meta) {\n+        if (type.getAnnotation(XmlRootElement.class) != null) {\n+            meta.setXmlRootElement(true);\n+            meta.setXmlname(((XmlRootElement) type.getAnnotation\n+                (XmlRootElement.class)).name());\n+            meta.setXmlnamespace(((XmlRootElement) type.getAnnotation\n+                (XmlRootElement.class)).namespace());\n+        }\n+        else {\n+            meta.setXmlname(((XmlType) type.getAnnotation\n+                (XmlType.class)).name());\n+            meta.setXmlnamespace(((XmlType) type.getAnnotation\n+                (XmlType.class)).namespace());           \n+        }        \n+    }\n+\n+    private void populateFromReflection(Class cls, XMLMetaData meta) {\n+        Member[] members;\n+        \n+        Class superclass = cls.getSuperclass();\n+\n+        // handle inheritance at sub-element level\n+        if (superclass.isAnnotationPresent(XmlType.class))\n+            populateFromReflection(superclass, meta);\n+\n+        if (((XmlAccessorType) cls.getAnnotation(XmlAccessorType.class)).value()\n+            == XmlAccessType.FIELD)\n+            members = cls.getDeclaredFields();\n+        else\n+            members = cls.getDeclaredMethods();\n+\n+        for (int i = 0; i < members.length; i++) {\n+            Member member = members[i];\n+            AnnotatedElement el = (AnnotatedElement) member;\n+            XMLMetaData field = null;\n+            if (el.getAnnotation(XmlElement.class) != null) {\n+                String xmlname = el.getAnnotation(XmlElement.class).name();\n+                // avoid JAXB XML bind default name\n+                if (StringUtils.equals(XMLMetaData.defaultName, xmlname))\n+                    xmlname = member.getName();\n+                if (((Field) member).getType()\n+                    .isAnnotationPresent(XmlType.class)) {\n+                    field = _repos.addXMLMetaData(((Field) member).getType()\n+                        , member.getName());\n+                    parseXmlRootElement(((Field) member).getType(), field);\n+                    populateFromReflection(((Field) member).getType(), field);\n+                    field.setXmltype(XMLMetaData.XMLTYPE);\n+                    field.setXmlname(xmlname);\n+                }\n+                else {\n+                    field = _repos.newXMLFieldMetaData(((Field) member)\n+                        .getType(), member.getName());\n+                    field.setXmltype(XMLMetaData.ELEMENT);\n+                    field.setXmlname(xmlname);\n+                    field.setXmlnamespace(el.getAnnotation(XmlElement.class)\n+                        .namespace());                    \n+                }\n+            }\n+            else if (el.getAnnotation(XmlAttribute.class) != null) {\n+                field = _repos.newXMLFieldMetaData(((Field) member).getType()\n+                    , member.getName());\n+                field.setXmltype(XMLFieldMetaData.ATTRIBUTE);\n+                String xmlname = el.getAnnotation(XmlAttribute.class).name();\n+                // avoid JAXB XML bind default name\n+                if (StringUtils.equals(XMLMetaData.defaultName, xmlname))\n+                    xmlname = member.getName();\n+                field.setXmlname(\"@\"+xmlname);\n+                field.setXmlnamespace(el.getAnnotation(XmlAttribute.class)\n+                    .namespace());                \n+            }\n+            meta.addField(member.getName(), field);\n+        }        \n+    }\n+}"},{"sha":"bcde0e3c510f2f8c84b0b4b10bd2945e32422851","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","status":"modified","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java?ref=7ca46cf69d63c6e21f9495ece70e7dd6b210c7e2","patch":"@@ -56,6 +56,7 @@\n import org.apache.openjpa.meta.MetaDataFactory;\n import org.apache.openjpa.meta.QueryMetaData;\n import org.apache.openjpa.meta.SequenceMetaData;\n+import org.apache.openjpa.meta.XMLMetaData;\n import org.apache.openjpa.util.GeneralException;\n import org.apache.openjpa.util.MetaDataException;\n \n@@ -75,6 +76,7 @@\n     private final PersistenceMetaDataDefaults _def = \n         new PersistenceMetaDataDefaults();\n     private AnnotationPersistenceMetaDataParser _annoParser = null;\n+    private AnnotationPersistenceXMLMetaDataParser _annoXMLParser = null;\n     private XMLPersistenceMetaDataParser _xmlParser = null;\n     private Map<URL, Set> _xml = null; // xml rsrc -> class names\n     private Set<URL> _unparsed = null; // xml rsrc\n@@ -467,4 +469,42 @@ public void endConfiguration() {\n     public void setInto(Options opts) {\n         opts.keySet().retainAll(opts.setInto(_def).keySet());\n     }\n+\n+    /**\n+     * Return JAXB XML annotation parser, \n+     * creating it if it does not already exist.\n+     */\n+    public AnnotationPersistenceXMLMetaDataParser getXMLAnnotationParser() {\n+        if (_annoXMLParser == null) {\n+            _annoXMLParser = newXMLAnnotationParser();\n+            _annoXMLParser.setRepository(repos);\n+        }\n+        return _annoXMLParser;\n+    }\n+\n+    /**\n+     * Set the JAXB XML annotation parser.\n+     */\n+    public void setXMLAnnotationParser(\n+        AnnotationPersistenceXMLMetaDataParser parser) {\n+        if (_annoXMLParser != null)\n+            _annoXMLParser.setRepository(null);\n+        if (parser != null)\n+            parser.setRepository(repos);\n+        _annoXMLParser = parser;\n+    }\n+\n+    /**\n+     * Create a new JAXB XML annotation parser.\n+     */\n+    protected AnnotationPersistenceXMLMetaDataParser newXMLAnnotationParser() {\n+        return new AnnotationPersistenceXMLMetaDataParser\n+            (repos.getConfiguration());\n+    }\n+\n+    public void loadXMLMetaData(FieldMetaData fmd) {\n+        AnnotationPersistenceXMLMetaDataParser parser\n+            = getXMLAnnotationParser();\n+        parser.parse(fmd);\n+    }\n }"}]}

