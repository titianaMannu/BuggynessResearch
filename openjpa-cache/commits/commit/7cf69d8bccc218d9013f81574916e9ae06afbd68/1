{"sha":"7cf69d8bccc218d9013f81574916e9ae06afbd68","node_id":"MDY6Q29tbWl0MjA2MzY0OjdjZjY5ZDhiY2NjMjE4ZDkwMTNmODE1NzQ5MTZlOWFlMDZhZmJkNjg=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-07-13T23:44:20Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2006-07-13T23:44:20Z"},"message":"reformatted comments to follow Sun standards and use the standard ASL comment formatting\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@421741 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d485666afe76b9b2f2f09574ada162d96f9355c7","url":"https://api.github.com/repos/apache/openjpa/git/trees/d485666afe76b9b2f2f09574ada162d96f9355c7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7cf69d8bccc218d9013f81574916e9ae06afbd68","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7cf69d8bccc218d9013f81574916e9ae06afbd68","html_url":"https://github.com/apache/openjpa/commit/7cf69d8bccc218d9013f81574916e9ae06afbd68","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7cf69d8bccc218d9013f81574916e9ae06afbd68/comments","author":null,"committer":null,"parents":[{"sha":"4ddf63ea3f0ed80c6efa8877201d909900965244","url":"https://api.github.com/repos/apache/openjpa/commits/4ddf63ea3f0ed80c6efa8877201d909900965244","html_url":"https://github.com/apache/openjpa/commit/4ddf63ea3f0ed80c6efa8877201d909900965244"}],"stats":{"total":8159,"additions":4118,"deletions":4041},"files":[{"sha":"6679c9d6ea884dea9cb9009ecbc6da539c814f20","filename":"openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","status":"modified","additions":21,"deletions":21,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -31,8 +31,8 @@\n import serp.bytecode.Project;\n \n /**\n- * <p>Transformer that makes persistent classes implement the\n- * {@link PersistenceCapable} interface at runtime.</p>\n+ * Transformer that makes persistent classes implement the\n+ * {@link PersistenceCapable} interface at runtime.\n  *\n  * @author Abe White\n  * @nojavadoc\n@@ -52,9 +52,9 @@\n     /**\n      * Constructor.\n      *\n-     * @param    repos    metadata repository to use internally\n-     * @param    opts    enhancer configuration options\n-     * @param    loader    temporary class loader for loading intermediate classes\n+     * @param repos metadata repository to use internally\n+     * @param opts enhancer configuration options\n+     * @param loader temporary class loader for loading intermediate classes\n      */\n     public PCClassFileTransformer(MetaDataRepository repos, Options opts,\n         ClassLoader loader) {\n@@ -79,10 +79,10 @@ public PCClassFileTransformer(MetaDataRepository repos, Options opts,\n     /**\n      * Constructor.\n      *\n-     * @param    repos    metadata repository to use internally\n-     * @param    flags    enhancer configuration\n-     * @param    loader    temporary class loader for loading intermediate classes\n-     * @param    devscan    whether to scan the dev classpath for persistent types\n+     * @param repos metadata repository to use internally\n+     * @param flags enhancer configuration\n+     * @param loader temporary class loader for loading intermediate classes\n+     * @param devscan whether to scan the dev classpath for persistent types\n      * if none are configured\n      */\n     public PCClassFileTransformer(MetaDataRepository repos,\n@@ -183,21 +183,21 @@ private static boolean isEnhanced(byte[] b) {\n         for (int i = 1; i < entries.length; i++) {\n             entries[i] = idx + 1; // skip entry type\n             switch (b[idx]) {\n-                case 1:        // utf8\n+                case 1: // utf8\n                     idx += 3 + readUnsignedShort(b, idx + 1);\n                     break;\n-                case 3:        // integer\n-                case 4:        // float\n-                case 9:        // field\n-                case 10:    // method\n-                case 11:    // interface method\n-                case 12:    // name\n+                case 3: // integer\n+                case 4: // float\n+                case 9: // field\n+                case 10: // method\n+                case 11: // interface method\n+                case 12: // name\n                     idx += 5;\n                     break;\n-                case 5:        // long\n-                case 6:        // double\n+                case 5: // long\n+                case 6: // double\n                     idx += 9;\n-                    i++;    // wide entry\n+                    i++; // wide entry\n                     break;\n                 default:\n                     idx += 3;\n@@ -226,7 +226,7 @@ private static boolean isEnhanced(byte[] b) {\n     }\n \n     /**\n-     *\tRead an unsigned short from the given array at the given offset.\n+     * Read an unsigned short from the given array at the given offset.\n      */\n     private static int readUnsignedShort(byte[] b, int idx) {\n         return ((b[idx] & 0xFF) << 8) | (b[idx + 1] & 0xFF);"},{"sha":"deb0064e52b1544e08c158c7faeb86351889d498","filename":"openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -26,16 +26,15 @@\n import org.apache.openjpa.util.ClassResolver;\n \n /**\n- * <p>Java agent that makes persistent classes implement the\n- * {@link PersistenceCapable} interface at runtime.  The agent is launched\n- * at JVM startup from the command line:</p>\n- * <p/>\n+ * Java agent that makes persistent classes implement the\n+ * {@link PersistenceCapable} interface at runtime. The agent is launched\n+ * at JVM startup from the command line:\n+ * \n  * <code>java -javaagent:openjpa.jar[=&lt;options&gt;]</code>\n- * <p/>\n- * <p>The options string should be formatted as a OpenJPA plugin, and may \n- * contain any properties understood by the OpenJPA enhancer or any \n- * configuration properties.  For example:</p>\n- * <p/>\n+ *  The options string should be formatted as a OpenJPA plugin, and may\n+ * contain any properties understood by the OpenJPA enhancer or any\n+ * configuration properties. For example:\n+ * \n  * <code>java -javaagent:openjpa.jar</code>\n  *\n  * @author Abe White"},{"sha":"c07a240981deb72d00f8af4831dc51c7eb3ed1b3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -29,21 +29,20 @@\n import org.apache.openjpa.util.UserException;\n \n /**\n- * <p>{@link BrokerFactory} implementation for use with the\n+ * {@link BrokerFactory} implementation for use with the\n  * {@link AbstractStoreManager}. This provides integration into the\n  * {@link Bootstrap#getBrokerFactory()} bootstrapping mechanism, to facilitate\n  * the process of creating a subclass of {@link AbstractStoreManager}. New\n  * store manager implementations need not extend this class. Instead, set the\n  * <code>org.apache.openjpa.BrokerFactory</code> configuration property to\n  * <code>abstractstore</code>,\n  * and set the <code>org.apache.openjpa.abstractstore.AbstractStoreManager</code>\n- * configuration property to the full class name of your implementation.</p>\n- * <p/>\n- * <p>Additionally, you can optionally create your own\n+ * configuration property to the full class name of your implementation.\n+ *  Additionally, you can optionally create your own\n  * <code>BrokerFactory</code> implementation. However, we recommend that you\n  * use the <code>AbstractStoreBrokerFactory</code>, as it deals with pooling\n  * and bootstrapping from a {@link Map} object (the strategy used by\n- * {@link Bootstrap} to create a factory in a vendor-neutral manner).</p>\n+ * {@link Bootstrap} to create a factory in a vendor-neutral manner).\n  */\n public class AbstractStoreBrokerFactory\n     extends AbstractBrokerFactory {"},{"sha":"17e981aa56749263d01d38fdd99798831325840d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreManager.java","status":"modified","additions":50,"deletions":67,"changes":117,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreManager.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -43,8 +43,8 @@\n import org.apache.openjpa.util.ImplHelper;\n \n /**\n- * <p>Abstract store manager implementation to ease development of custom\n- * OpenJPA back-ends.  A concrete subclass must define implementations for the\n+ * Abstract store manager implementation to ease development of custom\n+ * OpenJPA back-ends. A concrete subclass must define implementations for the\n  * following methods:\n  * <ul>\n  * <li>{@link StoreManager#exists}</li>\n@@ -53,14 +53,12 @@\n  * <li>{@link\n  * #flush(Collection,Collection,Collection,Collection,Collection)}</li>\n  * <li>{@link #executeExtent}</li>\n- * </ul>\n- * Additionally, subclasses should not attempt to acquire resources\n- * until {@link #open} has been called.  Store manager instances might be\n+ * </ul> Additionally, subclasses should not attempt to acquire resources\n+ * until {@link #open} has been called. Store manager instances might be\n  * created to call metadata methods such as {@link #newConfiguration} or\n- * {@link #getUnsupportedOptions} and never opened.  These instances should\n- * not consume any data store resources.</p>\n- * <p/>\n- * <p>Notes:\n+ * {@link #getUnsupportedOptions} and never opened. These instances should\n+ * not consume any data store resources.\n+ *  Notes:\n  * <ul>\n  * <li>The {@link StoreManager#initialize} method is responsible\n  * for creating new instances of objects freshly loaded from the\n@@ -91,7 +89,7 @@\n  * provide that facility on top of your data store), implement\n  * the {@link #getDataStoreIdSequence} method if you want to use a\n  * <code>long</code> as your datastore identity type and are\n- * happy with OpenJPA's {@link Id} class.  To use another datastore identity\n+ * happy with OpenJPA's {@link Id} class. To use another datastore identity\n  * type, override {@link #getManagedType},\n  * {@link #getDataStoreIdType}, {@link #copyDataStoreId}, and\n  * {@link #newDataStoreId} instead. In either case, override\n@@ -113,7 +111,7 @@\n  * {@link org.apache.openjpa.lib.rop.ResultList}. For more details on\n  * MethodQL, see the OpenJPA Reference Guide.</li>\n  * </ul></li>\n- * </ul></p>\n+ * </ul>\n  *\n  * @since 3.1\n  */\n@@ -136,8 +134,7 @@ public StoreContext getContext() {\n     }\n \n     /**\n-     * No-op implementation. Ready this store manager for persistent\n-     * operations.\n+     * No-op implementation. Ready this store manager for persistent operations.\n      */\n     protected void open() {\n     }\n@@ -153,20 +150,18 @@ public void beginOptimistic() {\n     /**\n      * No-op implementation. Override this method to provide optimistic\n      * locking semantics for your data store if you need notification of\n-     * a rollback of an optimistic transaction before {@link #begin} is\n-     * invoked.\n+     * a rollback of an optimistic transaction before {@link #begin} is invoked.\n      */\n     public void rollbackOptimistic() {\n     }\n \n     /**\n-     * <p>OpenJPA assumes that after this method is invoked, all data\n+     * OpenJPA assumes that after this method is invoked, all data\n      * accesses through this store manager will be part of a single\n-     * unit of work that can be rolled back.</p>\n-     * <p/>\n-     * <p>This is a no-op implementation. If your data store does not\n+     * unit of work that can be rolled back.\n+     *  This is a no-op implementation. If your data store does not\n      * support any concept of locking or transactions, you need not\n-     * override this method.</p>\n+     * override this method.\n      */\n     public void begin() {\n     }\n@@ -175,8 +170,7 @@ public void begin() {\n      * This is a no-op implementation. If your data store does not\n      * have a concept of transactions or a unit of work, you need not\n      * override this method. If it does, then override this method to\n-     * notify the data store that the current transaction should be\n-     * committed.\n+     * notify the data store that the current transaction should be committed.\n      */\n     public void commit() {\n     }\n@@ -185,8 +179,7 @@ public void commit() {\n      * This is a no-op implementation. If your data store does not\n      * have a concept of transactions or a unit of work, you need not\n      * override this method. If it does, then override this method to\n-     * notify the data store that the current transaction should be\n-     * rolled back.\n+     * notify the data store that the current transaction should be rolled back.\n      */\n     public void rollback() {\n     }\n@@ -200,36 +193,34 @@ public boolean syncVersion(OpenJPAStateManager sm, Object context) {\n     }\n \n     /**\n-     * <p>This method is invoked when OpenJPA needs to load an object whose\n+     * This method is invoked when OpenJPA needs to load an object whose\n      * identity is known but which has not yet been loaded from the data\n      * store. <code>sm</code> is a partially-set-up state manager for this\n      * object. The ID and least-derived type information for the instance\n      * to load can be obtained by invoking\n      * <code>sm.getObjectId()</code> and <code>sm.getMetaData()</code>.\n-     * </p>\n-     * <p/>\n-     * <p>When implementing this method, load the data for this object from\n+     * \n+     *  When implementing this method, load the data for this object from\n      * the data store, determine the most-derived subclass of the newly-loaded\n      * data, and then use the {@link OpenJPAStateManager#initialize} method to\n      * populate <code>sm</code> with a new instance of the appropriate type.\n      * Once {@link OpenJPAStateManager#initialize} has been invoked, proceed to\n      * load field data into <code>sm</code> as in the {@link #load} method, by\n      * using {@link OpenJPAStateManager#store} (or the appropriate\n      * <code>OpenJPAStateManager.store<em>type</em></code> method) to put the\n-     * data into the object.</p>\n+     * data into the object.\n      */\n     public abstract boolean initialize(OpenJPAStateManager sm, PCState state,\n         FetchState fetchState, Object context);\n \n     /**\n-     * <p>This method is invoked when OpenJPA needs to load additional data\n+     * This method is invoked when OpenJPA needs to load additional data\n      * into an object that has already been at least partially loaded by\n-     * a previous {@link #initialize} invocation.</p>\n-     * <p/>\n-     * <p>Load data into <code>sm</code> by using {@link\n+     * a previous {@link #initialize} invocation.\n+     *  Load data into <code>sm</code> by using {@link\n      * OpenJPAStateManager#store} (or the appropriate\n      * <code>OpenJPAStateManager.store<em>type</em></code> method) to put the\n-     * data into the object.</p>\n+     * data into the object.\n      */\n     public abstract boolean load(OpenJPAStateManager sm, BitSet fields,\n         FetchState fetchState, int lockLevel, Object context);\n@@ -300,7 +291,7 @@ public boolean assignObjectId(OpenJPAStateManager sm, boolean preFlush) {\n     }\n \n     /**\n-     * Assign a new datastore identity to the given instance.  This given\n+     * Assign a new datastore identity to the given instance. This given\n      * value may be null.\n      */\n     protected boolean assignDataStoreId(OpenJPAStateManager sm, Object val) {\n@@ -367,15 +358,13 @@ public Object getClientConnection() {\n     }\n \n     /**\n-     * <p>Create a {@link ResultObjectProvider} that can return all instances\n+     * Create a {@link ResultObjectProvider} that can return all instances\n      * of <code>type</code>, optionally including subclasses as defined\n-     * by <code>subclasses</code>.</p>\n-     * <p/>\n-     * <p>The implementation of the result provider will typically execute\n+     * by <code>subclasses</code>.\n+     *  The implementation of the result provider will typically execute\n      * some sort of data store query to find all the applicable objects, loop\n      * through the returned data, extracting object IDs from the data, and\n-     * invoking {@link\n-     * StoreContext#find(Object,FetchState,BitSet,Object,int)}\n+     * invoking {@link StoreContext#find(Object,FetchState,BitSet,Object,int)}\n      * on each OID. When invoking this method, the first argument is the OID.\n      * The second is the given fetch configuration. The\n      * third argument is a mask of fields to exclude from loading; it will\n@@ -385,7 +374,7 @@ public Object getClientConnection() {\n      * manager, this might be the result set that is being iterated over. If\n      * this argument is <code>null</code>, then the {@link #initialize} or\n      * {@link #load} method will have to issue another command to the data\n-     * store in order to fetch the data to be loaded.</p>\n+     * store in order to fetch the data to be loaded.\n      */\n     public abstract ResultObjectProvider executeExtent(ClassMetaData meta,\n         boolean subs, FetchConfiguration fetch);\n@@ -399,12 +388,12 @@ public FetchConfiguration newFetchConfiguration() {\n     }\n \n     /**\n-     * <p>Casts <code>v1</code> and <code>v2</code> to {@link Comparable}, and\n+     * Casts <code>v1</code> and <code>v2</code> to {@link Comparable}, and\n      * invokes <code>v1.compareTo (v2)</code>. If <code>v1</code> is less\n      * than <code>v2</code>, returns {@link #VERSION_EARLIER}. If the same,\n      * returns {@link #VERSION_SAME}. Otherwise, returns {@link\n      * #VERSION_LATER}. If either <code>v1</code> or <code>v2</code> are\n-     * <code>null</code>, returns {@link #VERSION_DIFFERENT}.</p>\n+     * <code>null</code>, returns {@link #VERSION_DIFFERENT}.\n      */\n     public int compareVersion(OpenJPAStateManager state, Object v1, Object v2) {\n         if (v1 == null || v2 == null)\n@@ -450,67 +439,62 @@ public void close() {\n     }\n \n     /**\n-     * <p>Responsible for writing modifications happened back to the data\n+     * Responsible for writing modifications happened back to the data\n      * store. If you do not remove the\n      * {@link OpenJPAConfiguration#OPTION_INC_FLUSH} option in\n      * {@link #getUnsupportedOptions}, this will be called only once at the\n      * end\tof a transaction. Otherwise, it may be called periodically\n-     * throughout the course of a transaction.</p>\n-     * <p/>\n-     * <p>If this store manager supports optimistic transactions, datastore\n+     * throughout the course of a transaction.\n+     *  If this store manager supports optimistic transactions, datastore\n      * version information should be updated during flush, and the state\n      * manager's version indicator should be updated through the\n-     * {@link OpenJPAStateManager#setNextVersion} method.</p>\n-     * <p/>\n-     * <p>This method will only be invoked if there are meaningful changes\n+     * {@link OpenJPAStateManager#setNextVersion} method.\n+     *  This method will only be invoked if there are meaningful changes\n      * to store. This differs from the behavior of {@link StoreManager#flush},\n      * which may be invoked with a collection of objects in states that\n      * do not require any datastore action (for example, objects in the\n-     * transient-transactional state).</p>\n+     * transient-transactional state).\n      *\n      * @param pNew Objects that should be added to the store,\n      * and that have not previously been flushed.\n      * @param pNewUpdated New objects that have been modified since\n      * they were initially flushed. These were\n-     * in <code>persistentNew</code> in an earlier\n-     * flush invocation.\n+     * in <code>persistentNew</code> in an earlier flush invocation.\n      * @param pNewFlushedDeleted New objects that have been deleted since\n      * they were initially flushed. These were\n-     * in <code>persistentNew</code> in an earlier\n-     * flush invocation.\n+     * in <code>persistentNew</code> in an earlier flush invocation.\n      * @param pDirty Objects that were loaded from the data\n      * store and have since been modified.\n      * @param pDeleted Objects that were loaded from the data\n      * store and have since been deleted. These\n-     * may have been in a previous flush\n-     * invocation's persistentDirty list.\n+     * may have been in a previous flush invocation's persistentDirty list.\n      * @return a collection of exceptions encountered during flushing.\n      */\n     protected abstract Collection flush(Collection pNew,\n         Collection pNewUpdated, Collection pNewFlushedDeleted,\n         Collection pDirty, Collection pDeleted);\n \n     /**\n-     * Return a new configuration instance for this runtime.  Configuration\n+     * Return a new configuration instance for this runtime. Configuration\n      * data is maintained at the factory level and is available to all OpenJPA\n      * components; therefore it is a good place to maintain shared resources\n-     * such as connection pools, etc.</p>\n+     * such as connection pools, etc.\n      */\n     protected OpenJPAConfiguration newConfiguration() {\n         return new OpenJPAConfigurationImpl();\n     }\n \n     /**\n-     * <p>Returns a set of option names that this store manager does\n-     * not support.  By default, returns the following:\n+     * Returns a set of option names that this store manager does\n+     * not support. By default, returns the following:\n      * <ul>\n      * <li>{@link OpenJPAConfiguration#OPTION_OPTIMISTIC}</li>\n      * <li>{@link OpenJPAConfiguration#OPTION_ID_DATASTORE}</li>\n      * <li>{@link OpenJPAConfiguration#OPTION_INC_FLUSH}</li>\n      * <li>{@link OpenJPAConfiguration#OPTION_VALUE_AUTOASSIGN}</li>\n      * <li>{@link OpenJPAConfiguration#OPTION_VALUE_INCREMENT}</li>\n      * <li>{@link OpenJPAConfiguration#OPTION_DATASTORE_CONNECTION}</li>\n-     * </ul></p>\n+     * </ul>\n      */\n     protected Collection getUnsupportedOptions() {\n         Collection c = new HashSet();\n@@ -524,9 +508,8 @@ protected Collection getUnsupportedOptions() {\n     }\n \n     /**\n-     *\t<p>Returns a string name to identify the platform of this\n-     *\tstore manager.  Returns the class name of this store manager by\n-     *\tdefault.</p>\n+     * Returns a string name to identify the platform of this\n+     * store manager. Returns the class name of this store manager by default.\n      */\n     protected String getPlatform ()\n \t{"},{"sha":"6a56801aca848393bbc5b37b667161c4cda46fd4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ant/MetaDataToolTask.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/ant/MetaDataToolTask.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/ant/MetaDataToolTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ant/MetaDataToolTask.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,17 +5,14 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-/*********************************************************************\n-\n- **********************************************************************/\n package org.apache.openjpa.ant;\n \n import java.io.IOException;\n@@ -32,11 +29,11 @@\n import org.apache.openjpa.meta.MetaDataTool;\n \n /**\n- * <p>Executes the metadata tool on the specified files.  This task can\n+ * Executes the metadata tool on the specified files. This task can\n  * take the following arguments:\n  * <ul>\n  * <li><code>file</code></li>\n- * </ul></p>\n+ * </ul>\n  */\n public class MetaDataToolTask\n     extends AbstractTask {"},{"sha":"0b574a760c3299b6e68f846000074eb1ddee054c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ant/PCEnhancerTask.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/ant/PCEnhancerTask.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/ant/PCEnhancerTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ant/PCEnhancerTask.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,17 +5,14 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-/*********************************************************************\n-\n- **********************************************************************/\n package org.apache.openjpa.ant;\n \n import java.io.IOException;\n@@ -29,14 +26,14 @@\n import org.apache.openjpa.meta.MetaDataRepository;\n \n /**\n- * <p>Executes the enhancer on the specified files.  This task can take\n+ * Executes the enhancer on the specified files. This task can take\n  * the following arguments:\n  * <ul>\n  * <li><code>directory</code></li>\n  * <li><code>addDefaultConstructor</code></li>\n  * <li><code>tmpClassLoader</code></li>\n  * <li><code>enforcePropertyRestrictions</code></li>\n- * </ul></p>\n+ * </ul>\n  */\n public class PCEnhancerTask\n     extends AbstractTask {"},{"sha":"c7b92b2fac6884a7bc47822c8b9e099604e5bc37","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/AutoDetachValue.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/conf/AutoDetachValue.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/conf/AutoDetachValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/AutoDetachValue.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -20,8 +20,8 @@\n import serp.util.Strings;\n \n /**\n- * <p>Value type used to represent auto detach flags. Separate to\n- * optimize translation of Strings to bit flags.</p>\n+ * Value type used to represent auto detach flags. Separate to\n+ * optimize translation of Strings to bit flags.\n  *\n  * @author Steve Kim\n  * @nojavadoc"},{"sha":"02cd83ac5abfced4014c667de1399e5f29961f90","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerFactoryValue.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerFactoryValue.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerFactoryValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/BrokerFactoryValue.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -19,10 +19,10 @@\n import org.apache.openjpa.lib.conf.PluginValue;\n \n /**\n- * <p>Value type used to represent the {@link BrokerFactory}.  This type is\n+ * Value type used to represent the {@link BrokerFactory}. This type is\n  * defined separately so that it can be used both in the global configuration\n- * and in {@link org.apache.openjpa.kernel.Bootstrap} with the same \n- * encapsulated configuration.</p>\n+ * and in {@link org.apache.openjpa.kernel.Bootstrap} with the same\n+ * encapsulated configuration.\n  *\n  * @author Abe White\n  * @nojavadoc"},{"sha":"adaa4c93e8a531038c9538e5cecf572969813d03","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.conf;\n \n /**\n- * <p>Struct encompassing backwards-compatibility options.</p>\n+ * Struct encompassing backwards-compatibility options.\n  */\n public class Compatibility {\n \n@@ -29,15 +29,15 @@\n \n     /**\n      * Whether to require exact identity value types when creating object\n-     * ids from a class and value.  Defaults to false.\n+     * ids from a class and value. Defaults to false.\n      */\n     public boolean getStrictIdentityValues() {\n         return _strictIdValues;\n     }\n \n     /**\n      * Whether to require exact identity value types when creating object\n-     * ids from a class and value.  Defaults to false.\n+     * ids from a class and value. Defaults to false.\n      */\n     public void setStrictIdentityValues(boolean strictVals) {\n         _strictIdValues = strictVals;\n@@ -63,9 +63,9 @@ public void setQuotedNumbersInQueries(boolean quotedNumbers) {\n \n     /**\n      * Whether to return hollow instances to broker lookups with a\n-     * <code>validate</code> parameter of false.  OpenJPA versions prior to\n+     * <code>validate</code> parameter of false. OpenJPA versions prior to\n      * 4.0 did not return hollow instances without special configuration\n-     * (the <code>ObjectLookupMode</code>).  Beginning with 4.0, hollow\n+     * (the <code>ObjectLookupMode</code>). Beginning with 4.0, hollow\n      * objects are the default.\n      */\n     public boolean getValidateFalseReturnsHollow() {\n@@ -74,9 +74,9 @@ public boolean getValidateFalseReturnsHollow() {\n \n     /**\n      * Whether to return hollow instances to broker lookups with a\n-     * <code>validate</code> parameter of false.  OpenJPA versions prior to\n+     * <code>validate</code> parameter of false. OpenJPA versions prior to\n      * 4.0 did not return hollow instances without special configuration\n-     * (the <code>ObjectLookupMode</code>).  Beginning with 4.0, hollow\n+     * (the <code>ObjectLookupMode</code>). Beginning with 4.0, hollow\n      * objects are the default.\n      */\n     public void setValidateFalseReturnsHollow(boolean hollow) {\n@@ -86,7 +86,7 @@ public void setValidateFalseReturnsHollow(boolean hollow) {\n     /**\n      * Whether to check the datastore for the existence of a nontransactional\n      * cached object in broker lookups with a <code>validate</code> parameter\n-     * of true.  OpenJPA versions prior to 4.0 checked the datastore.\n+     * of true. OpenJPA versions prior to 4.0 checked the datastore.\n      */\n     public boolean getValidateTrueChecksStore() {\n         return _checkStore;\n@@ -95,15 +95,15 @@ public boolean getValidateTrueChecksStore() {\n     /**\n      * Whether to check the datastore for the existence of a nontransactional\n      * cached object in broker lookups with a <code>validate</code> parameter\n-     * of true.  OpenJPA versions prior to 4.0 checked the datastore.\n+     * of true. OpenJPA versions prior to 4.0 checked the datastore.\n      */\n     public void setValidateTrueChecksStore(boolean check) {\n         _checkStore = check;\n     }\n \n     /**\n      * Whether to copy identity objects before returning them to client code.\n-     * Versions of OpenJPA prior to 3.0 always copied identity objects.  Also,\n+     * Versions of OpenJPA prior to 3.0 always copied identity objects. Also,\n      * you should configure OpenJPA to copy identity objects if you mutate them\n      * after use.\n      */\n@@ -113,7 +113,7 @@ public boolean getCopyObjectIds() {\n \n     /**\n      * Whether to copy identity objects before returning them to client code.\n-     * Versions of OpenJPA prior to 3.0 always copied identity objects.  Also,\n+     * Versions of OpenJPA prior to 3.0 always copied identity objects. Also,\n      * you should configure OpenJPA to copy identity objects if you mutate them\n      * after use.\n      */\n@@ -130,8 +130,8 @@ public boolean getCloseOnManagedCommit() {\n     }\n \n     /**\n-     *\tWhether to close the broker when the managed transaction commits.\n-     *\tVersions of OpenJPA prior to 3.0 did not close the broker.\n+     * Whether to close the broker when the managed transaction commits.\n+     * Versions of OpenJPA prior to 3.0 did not close the broker.\n      */\n     public void setCloseOnManagedCommit(boolean close) {\n         _closeOnCommit = close;"},{"sha":"c36a83b830737776223f133de5d132a26ce39321","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/DetachOptions.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/conf/DetachOptions.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/conf/DetachOptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/DetachOptions.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,7 +18,7 @@\n import org.apache.openjpa.kernel.DetachState;\n \n /**\n- * <p>Detach options.</p>\n+ * Detach options.\n  *\n  * @author Abe White\n  * @nojavadoc\n@@ -53,7 +53,7 @@ public void setDetachedStateField(boolean val) {\n     }\n \n     /**\n-     * For auto-configuration of the detached state field.  Accepts values\n+     * For auto-configuration of the detached state field. Accepts values\n      * \"true\", \"false\", or \"transient\".\n      */\n     public void setDetachedStateField(String val) {\n@@ -90,7 +90,7 @@ public void setDetachedStateTransient(boolean val) {\n      * Whether to use a detached state manager on types that allow it.\n      * Types that do not use detached state or that declare a custom detached\n      * state field to maintain serialization compatibility will never use\n-     * a detached state manager.  Defaults to true.\n+     * a detached state manager. Defaults to true.\n      */\n     public boolean getDetachedStateManager() {\n         return _manager;\n@@ -100,22 +100,22 @@ public boolean getDetachedStateManager() {\n      * Whether to use a detached state manager on types that allow it.\n      * Types that do not use detached state or that declare a custom detached\n      * state field to maintain serialization compatibility will never use\n-     * a detached state manager.  Defaults to true.\n+     * a detached state manager. Defaults to true.\n      */\n     public void setDetachedStateManager(boolean val) {\n         _manager = val;\n     }\n \n     /**\n-     * Whether to allow access to unloaded detached fields.  This setting only\n+     * Whether to allow access to unloaded detached fields. This setting only\n      * applies to instances with detached state managers.\n      */\n     public boolean getAccessUnloaded() {\n         return _access;\n     }\n \n     /**\n-     * Whether to allow access to unloaded detached fields.  This setting only\n+     * Whether to allow access to unloaded detached fields. This setting only\n      * applies to instances with detached state managers.\n      */\n     public void setAccessUnloaded(boolean val) {\n@@ -145,7 +145,7 @@ public int getDetachState() {\n     }\n \n     /**\n-     *\tPublic to allow reflection.\n+     * Public to allow reflection.\n      */\n     public static class All\n         extends DetachOptions {"},{"sha":"7fd3e441c59d31af44e8b6d6f666dac439069ae1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","status":"modified","additions":40,"deletions":48,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -44,17 +44,16 @@\n import org.apache.openjpa.util.ProxyManager;\n \n /**\n- * <p>Defines the properties necessary to configure runtime properties and\n- * connect to a data source.  There is a 1-1 relation between a configuration\n- * and a {@link BrokerFactory}.</p>\n- * <p/>\n- * <p>All setter methods that take primitive parameters also have wrapper\n- * setter with the appropriate primitive wrapper.  This is so the interface\n- * can be in accordance with the J2EE Connector Architecture.</p>\n+ * Defines the properties necessary to configure runtime properties and\n+ * connect to a data source. There is a 1-1 relation between a configuration\n+ * and a {@link BrokerFactory}.\n+ *  All setter methods that take primitive parameters also have wrapper\n+ * setter with the appropriate primitive wrapper. This is so the interface\n+ * can be in accordance with the J2EE Connector Architecture.\n  *\n  * @author Marc Prud'hommeaux\n  * @author Abe White\n- * @see    Configuration\n+ * @see Configuration\n  */\n public interface OpenJPAConfiguration\n     extends Configuration {\n@@ -203,7 +202,7 @@\n         \"org.apache.openjpa.option.JDBCConnection\";\n \n     /**\n-     * Return the set of option strings supported by this runtime.  This set\n+     * Return the set of option strings supported by this runtime. This set\n      * is mutable.\n      */\n     public Collection supportedOptions();\n@@ -219,7 +218,7 @@\n      * spec environments. This should be invoked before any configuration\n      * options are set, as it will mutate various values.\n      * You can only assign the specification once, though it is not fatal\n-     * to attempt to do so multiple times.  Attempts to set to null will\n+     * to attempt to do so multiple times. Attempts to set to null will\n      * be ignored.\n      */\n     public boolean setSpecification(String spec);\n@@ -293,7 +292,7 @@\n \n     /**\n      * The data cache manager manages this configuration's cache instances.\n-     * The cache manager is created if it has not been set.  Once the cache\n+     * The cache manager is created if it has not been set. Once the cache\n      * manager has been set/created, all changes to caching configuration\n      * must proceed through the cache manager.\n      *\n@@ -593,7 +592,7 @@\n     public MetaDataFactory newMetaDataFactoryInstance();\n \n     /**\n-     * The metadata repository of managed class information.  If no\n+     * The metadata repository of managed class information. If no\n      * repository has been set, creates one.\n      *\n      * @since 3.0\n@@ -690,24 +689,22 @@\n     public void setConnectionFactoryProperties(String props);\n \n     /**\n-     * The mode of the connection factory in use.  Available options are:\n+     * The mode of the connection factory in use. Available options are:\n      * <ul>\n      * <li>local: OpenJPA controls the connections.</li>\n      * <li>managed: Connections are automatically enlisted in\n      * the current global transaction by an application server.</li>\n-     * </ul>\n-     * Defaults to local.\n+     * </ul> Defaults to local.\n      */\n     public String getConnectionFactoryMode();\n \n     /**\n-     * The mode of the connection factory in use.  Available options are:\n+     * The mode of the connection factory in use. Available options are:\n      * <ul>\n      * <li>local: OpenJPA controls the connections.</li>\n      * <li>managed: Connections are automatically enlisted in\n      * the current global transaction by an application server.</li>\n-     * </ul>\n-     * Defaults to local.\n+     * </ul> Defaults to local.\n      */\n     public void setConnectionFactoryMode(String mode);\n \n@@ -900,7 +897,7 @@\n \n     /**\n      * A comma-separated list of events which trigger auto-detachment\n-     * in place of managed states.  Possible values are:\n+     * in place of managed states. Possible values are:\n      * <ul>\n      * <li><code>commit</code>: When the current transaction commits.</li>\n      * <li><code>close</code>: When the broker closes.</li>\n@@ -912,7 +909,7 @@\n \n     /**\n      * A comma-separated list of events which trigger auto-detachment\n-     * in place of managed states.  Possible values are:\n+     * in place of managed states. Possible values are:\n      * <ul>\n      * <li><code>commit</code>: When the current transaction commits.</li>\n      * <li><code>close</code>: When the broker closes.</li>\n@@ -998,13 +995,13 @@\n \n     /**\n      * Get the size of the batch that will be pre-selected when accessing\n-     * elements in a query or relationship.  Use -1 to prefetch all results.\n+     * elements in a query or relationship. Use -1 to prefetch all results.\n      */\n     public int getFetchBatchSize();\n \n     /**\n      * Set the size of the batch that will be pre-selected when accessing\n-     * elements in a query or relationship.  Use -1 to prefetch all results.\n+     * elements in a query or relationship. Use -1 to prefetch all results.\n      */\n     public void setFetchBatchSize(int size);\n \n@@ -1181,16 +1178,16 @@\n \n     /**\n      * Specifies the behavior of the broker with respect to data store\n-     * connections.  Possible values are:\n+     * connections. Possible values are:\n      * <ul>\n      * <li><code>always</code>: Each broker obtains a single connection and\n      * uses it until the broker is closed.</li>\n      * <li><code>transaction</code>: A connection is obtained when each\n      * transaction begins (optimistic or datastore), and is released\n      * when the transaction completes.</li>\n      * <li><code>on-demand</code>: Connections are obtained only when needed.\n-     * This is the default mode.  It is equivalent to the previous option\n-     * when datastore transactions are used.  For optimistic transactions,\n+     * This is the default mode. It is equivalent to the previous option\n+     * when datastore transactions are used. For optimistic transactions,\n      * though, it means that a connection will be retained only for\n      * the duration of the data store commit process.</li>\n      * </ul>\n@@ -1201,16 +1198,16 @@\n \n     /**\n      * Specifies the behavior of the broker with respect to data store\n-     * connections.  Possible values are:\n+     * connections. Possible values are:\n      * <ul>\n      * <li><code>always</code>: Each broker obtains a single connection and\n      * uses it until the broker is closed.</li>\n      * <li><code>transaction</code>: A connection is obtained when each\n      * transaction begins (optimistic or datastore), and is released\n      * when the transaction completes.</li>\n      * <li><code>on-demand</code>: Connections are obtained only when needed.\n-     * This is the default mode.  It is equivalent to the previous option\n-     * when datastore transactions are used.  For optimistic transactions,\n+     * This is the default mode. It is equivalent to the previous option\n+     * when datastore transactions are used. For optimistic transactions,\n      * though, it means that a connection will be retained only for\n      * the duration of the data store commit process.</li>\n      * </ul>\n@@ -1254,13 +1251,13 @@\n     public void setFilterListeners(String listeners);\n \n     /**\n-     * Return the query filter listeners.  If none have been set explicitly,\n+     * Return the query filter listeners. If none have been set explicitly,\n      * this method instantiates the listeners from the set plugin list.\n      */\n     public FilterListener[] getFilterListenerInstances();\n \n     /**\n-     * Set the query filter listeners.  Overrides the list of listener classes.\n+     * Set the query filter listeners. Overrides the list of listener classes.\n      */\n     public void setFilterListeners(FilterListener[] listeners);\n \n@@ -1277,14 +1274,13 @@\n     public void setAggregateListeners(String listeners);\n \n     /**\n-     * Return the query function listeners.  If none have been set explicitly,\n+     * Return the query function listeners. If none have been set explicitly,\n      * this method instantiates the listeners from the set plugin list.\n      */\n     public AggregateListener[] getAggregateListenerInstances();\n \n     /**\n-     * Set the query function listeners.  Overrides the list of listener\n-     * classes.\n+     * Set the query function listeners. Overrides the list of listener classes.\n      */\n     public void setAggregateListeners(AggregateListener[] listeners);\n \n@@ -1299,38 +1295,34 @@\n     public boolean getRetryClassRegistration();\n \n     /**\n-     *\tWhether to warn and defer registration instead of throwing an\n-     *\texception when a registered persistent class cannot be processed.\n-     *\tShould only be set to true in complex classloader topologies.\n-\t * \tDefaults to <code>false</code>.\n+     * Whether to warn and defer registration instead of throwing an\n+     * exception when a registered persistent class cannot be processed.\n+     * Should only be set to true in complex classloader topologies.\n+\t * Defaults to <code>false</code>.\n \t *\n-\t *\t@since 3.2.3\n+\t * @since 3.2.3\n \t */\n \tpublic void setRetryClassRegistration (boolean warn);\n \n-\n \t/**\n-\t *\tWrapper for JCA usage of {@link #setRetryClassRegistration(boolean)}.\n+\t * Wrapper for JCA usage of {@link #setRetryClassRegistration(boolean)}.\n \t *\n-\t *\t@since 3.2.3\n+\t * @since 3.2.3\n \t */\n \tpublic void setRetryClassRegistration (Boolean warn);\n \n-\n \t/**\n-\t *\tBackwards compatibility options.\n+\t * Backwards compatibility options.\n \t */\n \tpublic String getCompatibility ();\n \n-\n \t/**\n-\t *\tBackwards compatibility options.\n+\t * Backwards compatibility options.\n \t */\n \tpublic void setCompatibility (String compatibility);\n \n-\n \t/**\n-\t *\tBackwards compatibility options.\n+\t * Backwards compatibility options.\n \t */\n \tpublic Compatibility getCompatibilityInstance ();\n }"},{"sha":"2df6907cc4bcac04ea7cb7097b0dbec0202e5cab","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":10,"deletions":11,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -56,14 +56,13 @@\n import org.apache.openjpa.util.ProxyManager;\n \n /**\n- * <p>Implementation of the {@link OpenJPAConfiguration} interface.</p>\n- * <p/>\n- * <p>On construction, the class will attempt to locate a default properties\n+ * Implementation of the {@link OpenJPAConfiguration} interface.\n+ *  On construction, the class will attempt to locate a default properties\n  * file called <code>org.apache.openjpa.properties</code> located at any top level token\n- * of the CLASSPATH.  See the {@link ConfigurationImpl} class description\n- * for details.</p>\n+ * of the CLASSPATH. See the {@link ConfigurationImpl} class description\n+ * for details.\n  *\n- * @see    ConfigurationImpl\n+ * @see ConfigurationImpl\n  * @author Marc Prud'hommeaux\n  * @author Abe White\n  */\n@@ -144,7 +143,7 @@\n     private String spec = null;\n \n     /**\n-     * Default constructor.  Attempts to load default properties.\n+     * Default constructor. Attempts to load default properties.\n      */\n     public OpenJPAConfigurationImpl() {\n         this(true);\n@@ -153,7 +152,7 @@ public OpenJPAConfigurationImpl() {\n     /**\n      * Constructor.\n      *\n-     * @param    loadDefaults    whether to attempt to load the default\n+     * @param loadDefaults whether to attempt to load the default\n      * <code>org.apache.openjpa.properties</code> resource\n      */\n     public OpenJPAConfigurationImpl(boolean loadDefaults) {\n@@ -163,8 +162,8 @@ public OpenJPAConfigurationImpl(boolean loadDefaults) {\n     /**\n      * Constructor.\n      *\n-     * @param    derivations        whether to apply product derivations\n-     * @param    loadDefaults    whether to attempt to load the default\n+     * @param derivations whether to apply product derivations\n+     * @param loadDefaults whether to attempt to load the default\n      * <code>org.apache.openjpa.properties</code> resource\n      */\n     public OpenJPAConfigurationImpl(boolean derivations, boolean loadDefaults) {"},{"sha":"8c7775f62bb7b123e175e410fd471a323196b4b1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,"},{"sha":"bf5d4c25a8b62e862df159e3e92578b402851a10","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivation.java","status":"modified","additions":68,"deletions":68,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivation.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -1,68 +1,68 @@\n-/*\r\n- * Copyright 2006 The Apache Software Foundation.\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- *     http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.apache.openjpa.conf;\r\n-\r\n-import org.apache.openjpa.lib.conf.Configuration;\r\n-import org.apache.openjpa.lib.conf.ConfigurationProvider;\r\n-\r\n-/**\r\n- * Hooks for deriving products with additional functionality.\r\n- * All implementations of this interface will have a chance to mutate\r\n- * a {@link Configuration} both before and after the user-specified\r\n- * configuration data is loaded. The order in which the\r\n- * derivations are evaluated is determined by the specificity of the\r\n- * derivation type.\r\n- *\r\n- * @since 4.1\r\n- */\r\n-public interface ProductDerivation {\r\n-\r\n-    public static final int TYPE_SPEC = 0;\r\n-    public static final int TYPE_PRODUCT = 1;\r\n-    public static final int TYPE_STORE = 2;\r\n-    public static final int TYPE_SPEC_STORE = 3;\r\n-    public static final int TYPE_PRODUCT_STORE = 4;\r\n-    public static final int TYPE_FEATURE = 5;\r\n-\r\n-    /**\r\n-     * Return the type of derivation.\r\n-     */\r\n-    public int getType();\r\n-\r\n-    /**\r\n-     * Provides the instance with a callback to mutate the initial properties\r\n-     * of the {@link ConfigurationProvider}.  This is primarily to alter or\r\n-     * add properties that determine what type of configuration is constructed,\r\n-     * and therefore is typically used at runtime only.\r\n-     */\r\n-    public void beforeConfigurationConstruct(ConfigurationProvider cp);\r\n-\r\n-    /**\r\n-     * Provides the instance with the opportunity to mutate\r\n-     * <code>conf</code> before the user configuration is applied.\r\n-     */\r\n-    public void beforeConfigurationLoad(OpenJPAConfiguration conf);\r\n-\r\n-    /**\r\n-     * Called after the specification has been set.\r\n-     */\r\n-    public void afterSpecificationSet(OpenJPAConfiguration conf);\r\n-\r\n-    /**\r\n-     * Called after the configuration has been closed.\r\n-     */\r\n-    public void afterClose(OpenJPAConfiguration conf);\r\n-}\r\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.conf;\n+\n+import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.lib.conf.ConfigurationProvider;\n+\n+/**\n+ * Hooks for deriving products with additional functionality.\n+ * All implementations of this interface will have a chance to mutate\n+ * a {@link Configuration} both before and after the user-specified\n+ * configuration data is loaded. The order in which the\n+ * derivations are evaluated is determined by the specificity of the\n+ * derivation type.\n+ *\n+ * @since 4.1\n+ */\n+public interface ProductDerivation {\n+\n+    public static final int TYPE_SPEC = 0;\n+    public static final int TYPE_PRODUCT = 1;\n+    public static final int TYPE_STORE = 2;\n+    public static final int TYPE_SPEC_STORE = 3;\n+    public static final int TYPE_PRODUCT_STORE = 4;\n+    public static final int TYPE_FEATURE = 5;\n+\n+    /**\n+     * Return the type of derivation.\n+     */\n+    public int getType();\n+\n+    /**\n+     * Provides the instance with a callback to mutate the initial properties\n+     * of the {@link ConfigurationProvider}. This is primarily to alter or\n+     * add properties that determine what type of configuration is constructed,\n+     * and therefore is typically used at runtime only.\n+     */\n+    public void beforeConfigurationConstruct(ConfigurationProvider cp);\n+\n+    /**\n+     * Provides the instance with the opportunity to mutate\n+     * <code>conf</code> before the user configuration is applied.\n+     */\n+    public void beforeConfigurationLoad(OpenJPAConfiguration conf);\n+\n+    /**\n+     * Called after the specification has been set.\n+     */\n+    public void afterSpecificationSet(OpenJPAConfiguration conf);\n+\n+    /**\n+     * Called after the configuration has been closed.\n+     */\n+    public void afterClose(OpenJPAConfiguration conf);\n+}"},{"sha":"6b0d47df67b76adb8c286a36eab30f1372fa1911","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivations.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivations.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/ProductDerivations.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -24,7 +24,7 @@\n import org.apache.openjpa.lib.util.Services;\n \n /**\n- * <p>Utilities for running product derivations.</p>\n+ * Utilities for running product derivations.\n  *\n  * @author Abe White\n  * @nojavadoc\n@@ -51,7 +51,7 @@\n \n     /**\n      * Apply {@link ProductDerivation#beforeConfigurationConstruct} callbacks\n-     * to the the given instance.  Exceptions are swallowed.\n+     * to the the given instance. Exceptions are swallowed.\n      */\n     public static void beforeConfigurationConstruct(ConfigurationProvider cp) {\n         for (int i = 0; i < _derivations.length; i++) {\n@@ -67,7 +67,7 @@ public static void beforeConfigurationConstruct(ConfigurationProvider cp) {\n \n     /**\n      * Apply {@link ProductDerivation#beforeConfigurationLoad} callbacks\n-     * to the the given instance.  Exceptions are swallowed.\n+     * to the the given instance. Exceptions are swallowed.\n      */\n     public static void beforeConfigurationLoad(OpenJPAConfiguration conf) {\n         for (int i = 0; i < _derivations.length; i++) {\n@@ -83,7 +83,7 @@ public static void beforeConfigurationLoad(OpenJPAConfiguration conf) {\n \n     /**\n      * Apply {@link ProductDerivation#afterSpecificationSet} callbacks\n-     * to the the given instance.  Exceptions are swallowed.\n+     * to the the given instance. Exceptions are swallowed.\n      */\n     public static void afterSpecificationSet(OpenJPAConfiguration conf) {\n         for (int i = 0; i < _derivations.length; i++) {\n@@ -99,7 +99,7 @@ public static void afterSpecificationSet(OpenJPAConfiguration conf) {\n \n     /**\n      * Apply {@link ProductDerivation#afterClose} callbacks\n-     * to the the given instance.  Exceptions are swallowed.\n+     * to the the given instance. Exceptions are swallowed.\n      */\n     public static void afterClose(OpenJPAConfigurationImpl impl) {\n         for (int i = 0; i < _derivations.length; i++) {\n@@ -114,7 +114,7 @@ public static void afterClose(OpenJPAConfigurationImpl impl) {\n     }\n \n     /**\n-     *\tCompare {@link ProductDerivation}s.\n+     * Compare {@link ProductDerivation}s.\n      */\n     private static class ProductDerivationComparator\n         implements Comparator {"},{"sha":"6a791dedb1c2c6a34d106e457d7d29315a1a8b49","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/RemoteCommitProviderValue.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/conf/RemoteCommitProviderValue.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/conf/RemoteCommitProviderValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/RemoteCommitProviderValue.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -23,9 +23,9 @@\n import org.apache.openjpa.lib.util.Options;\n \n /**\n- * <p>Value type used to represent a {@link RemoteCommitProvider}.  This\n+ * Value type used to represent a {@link RemoteCommitProvider}. This\n  * plugin allows users to specify whether to transmit the ids of added objects\n- * in the remote commit events distributed.</p>\n+ * in the remote commit events distributed.\n  *\n  * @author Abe White\n  * @nojavadoc"},{"sha":"a7df667cefe920b248114491d777767c0fa6bed1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/SeqValue.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/conf/SeqValue.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/conf/SeqValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/SeqValue.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -20,9 +20,9 @@\n import org.apache.openjpa.meta.SequenceMetaData;\n \n /**\n- * <p>Value type used to represent a sequence.  This type is\n+ * Value type used to represent a sequence. This type is\n  * defined separately so that it can be used both in the global configuration\n- * and in class metadata with the same encapsulated configuration.</p>\n+ * and in class metadata with the same encapsulated configuration.\n  *\n  * @author Abe White\n  * @nojavadoc"},{"sha":"d879aa0e9049f364caa9644fe790037c6fb9d196","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractDataCache.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -282,9 +282,9 @@ public String toString() {\n     }\n \n     /**\n-     * This method is part of the {@link RemoteCommitListener} interface.  If\n+     * This method is part of the {@link RemoteCommitListener} interface. If\n      * your cache subclass relies on OpenJPA for clustering support, make it\n-     * implement <code>RemoteCommitListener</code>.  This method will take\n+     * implement <code>RemoteCommitListener</code>. This method will take\n      * care of invalidating entries from remote commits.\n      */\n     public void afterCommit(RemoteCommitEvent event) {\n@@ -320,7 +320,7 @@ protected void keyRemoved(Object key, boolean expired) {\n     /**\n      * Return <code>true</code> if updates to data already in the\n      * cache (either in {@link #commit} or the {@link #update})\n-     * should be put back into the cache.  Returns false by default.\n+     * should be put back into the cache. Returns false by default.\n      */\n     protected boolean recacheUpdates() {\n         return false;"},{"sha":"6dbc5ec3ef3baa77a7ac1895085dea87c58227b1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractQueryCache.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/AbstractQueryCache.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -182,9 +182,9 @@ public boolean removeTypesChangedListener(TypesChangedListener listen) {\n     }\n \n     /**\n-     * This method is part of the {@link RemoteCommitListener} interface.  If\n+     * This method is part of the {@link RemoteCommitListener} interface. If\n      * your cache subclass relies on OpenJPA for clustering support, make it\n-     * implement <code>RemoteCommitListener</code>.  This method will take\n+     * implement <code>RemoteCommitListener</code>. This method will take\n      * care of invalidating entries from remote commits, by delegating to\n      * {@link #onTypesChanged}.\n      */\n@@ -237,7 +237,7 @@ private Set addTypes(Collection oids, Set classes) {\n     }\n \n     /**\n-     * Return a threadsafe view of the keys in this cache.  This collection\n+     * Return a threadsafe view of the keys in this cache. This collection\n      * must be iterable without risk of concurrent modification exceptions.\n      * It does not have to implement contains() efficiently or use set\n      * semantics.\n@@ -311,9 +311,9 @@ protected void fireEvent(Object event, Object listener) {\n     }\n \n     /**\n-     *\tIndividual query results will be registered as types changed\n-     *\tlisteners. We want such query results to be gc'd once\n-     *\tthe only reference is held by the list of expiration listeners.\n+     * Individual query results will be registered as types changed\n+     * listeners. We want such query results to be gc'd once\n+     * the only reference is held by the list of expiration listeners.\n      */\n     protected Collection newListenerCollection() {\n         //### use concurrent"},{"sha":"86009b8a213f3487e82db0f1bb50ca2f4ffb2459","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/Caches.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/Caches.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/Caches.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/Caches.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -27,8 +27,7 @@\n     /**\n      * Utility to build up a set of classes from their class names\n      * when operating outside the context of a persistence manager.\n-     * The set classes can be null, in which case a new Set will be\n-     * created.\n+     * The set classes can be null, in which case a new Set will be created.\n      */\n     static Set addTypesByName(OpenJPAConfiguration conf,\n         Collection classNames, Set classes) {"},{"sha":"258f35e4ce80e2b1a65ca3683f2d308bd698cdbe","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentDataCache.java","status":"modified","additions":140,"deletions":140,"changes":280,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentDataCache.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -1,140 +1,140 @@\n-/*\r\n- * Copyright 2006 The Apache Software Foundation.\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- *     http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.apache.openjpa.datacache;\r\n-\r\n-import org.apache.openjpa.event.RemoteCommitListener;\r\n-import org.apache.openjpa.util.CacheMap;\r\n-\r\n-/**\r\n- * A {@link DataCache} implementation that is optimized for concurrent\r\n- * access.  When the cache fills up, values to remove from cache are chosen\r\n- * randomly.  Due to race conditions, it is possible that a get call might not\r\n- * return a cached instance if that instance is being transferred between\r\n- * internal datastructures.\r\n- *\r\n- * @since 4.0\r\n- */\r\n-public class ConcurrentDataCache\r\n-    extends AbstractDataCache\r\n-    implements RemoteCommitListener {\r\n-\r\n-    private final CacheMap _cache = newCacheMap();\r\n-\r\n-    /**\r\n-     * Returns the underlying {@link CacheMap} that this cache is using.\r\n-     * This is not an unmodifiable view on the map, so care should be taken\r\n-     * with this reference. Implementations should probably not modify the\r\n-     * contents of the cache, but should only use this reference to\r\n-     * obtain cache metrics.\r\n-     */\r\n-    public CacheMap getCacheMap() {\r\n-        return _cache;\r\n-    }\r\n-\r\n-    /**\r\n-     * Sets the maximum number of unpinned objects to keep hard\r\n-     * references to. If the map contains more unpinned objects than\r\n-     * <code>size</code>, then this method will result in the cache\r\n-     * flushing old values.\r\n-     */\r\n-    public void setCacheSize(int size) {\r\n-        _cache.setCacheSize(size);\r\n-    }\r\n-\r\n-    /**\r\n-     * Returns the maximum number of unpinned objects to keep hard\r\n-     * references to.\r\n-     */\r\n-    public int getCacheSize() {\r\n-        return _cache.getCacheSize();\r\n-    }\r\n-\r\n-    /**\r\n-     * Sets the maximum number of unpinned objects to keep soft\r\n-     * references to. If the map contains more soft references than\r\n-     * <code>size</code>, then this method will result in the cache\r\n-     * flushing values.\r\n-     */\r\n-    public void setSoftReferenceSize(int size) {\r\n-        _cache.setSoftReferenceSize(size);\r\n-    }\r\n-\r\n-    /**\r\n-     * Returns the maximum number of unpinned objects to keep soft\r\n-     * references to. Defaults to <code>-1</code>.\r\n-     */\r\n-    public int getSoftReferenceSize() {\r\n-        return _cache.getSoftReferenceSize();\r\n-    }\r\n-\r\n-    public void initialize(DataCacheManager mgr) {\r\n-        super.initialize(mgr);\r\n-        conf.getRemoteCommitEventManager().addListener(this);\r\n-    }\r\n-\r\n-    public void writeLock() {\r\n-        _cache.writeLock();\r\n-    }\r\n-\r\n-    public void writeUnlock() {\r\n-        _cache.writeUnlock();\r\n-    }\r\n-\r\n-    /**\r\n-     * Return the map to use as an internal cache; entry expirations must\r\n-     * invoke {@link AbstractDataCache#keyRemoved}.\r\n-     */\r\n-    protected CacheMap newCacheMap() {\r\n-        return new CacheMap() {\r\n-            protected void entryRemoved(Object key, Object value,\r\n-                boolean expired) {\r\n-                keyRemoved(key, expired);\r\n-            }\r\n-        };\r\n-    }\r\n-\r\n-    protected DataCachePCData getInternal(Object key) {\r\n-        return (DataCachePCData) _cache.get(key);\r\n-    }\r\n-\r\n-    protected DataCachePCData putInternal(Object key, DataCachePCData pc) {\r\n-        return (DataCachePCData) _cache.put(key, pc);\r\n-    }\r\n-\r\n-    protected DataCachePCData removeInternal(Object key) {\r\n-        return (DataCachePCData) _cache.remove(key);\r\n-    }\r\n-\r\n-    protected void removeAllInternal(Class cls, boolean subs) {\r\n-        // we could keep a histogram of the counts of contained classes and\r\n-        // only clear if we have the class, but that still wouldn't support subs\r\n-        // well, would involve synching, and won't yield much benefit when we're\r\n-        // used as a primary cache\r\n-        _cache.clear();\r\n-    }\r\n-\r\n-    protected void clearInternal() {\r\n-        _cache.clear();\r\n-    }\r\n-\r\n-    protected boolean pinInternal(Object key) {\r\n-        return _cache.pin(key);\r\n-    }\r\n-\r\n-    protected boolean unpinInternal(Object key) {\r\n-        return _cache.unpin (key);\r\n-\t}\r\n-}\r\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.datacache;\n+\n+import org.apache.openjpa.event.RemoteCommitListener;\n+import org.apache.openjpa.util.CacheMap;\n+\n+/**\n+ * A {@link DataCache} implementation that is optimized for concurrent\n+ * access. When the cache fills up, values to remove from cache are chosen\n+ * randomly. Due to race conditions, it is possible that a get call might not\n+ * return a cached instance if that instance is being transferred between\n+ * internal datastructures.\n+ *\n+ * @since 4.0\n+ */\n+public class ConcurrentDataCache\n+    extends AbstractDataCache\n+    implements RemoteCommitListener {\n+\n+    private final CacheMap _cache = newCacheMap();\n+\n+    /**\n+     * Returns the underlying {@link CacheMap} that this cache is using.\n+     * This is not an unmodifiable view on the map, so care should be taken\n+     * with this reference. Implementations should probably not modify the\n+     * contents of the cache, but should only use this reference to\n+     * obtain cache metrics.\n+     */\n+    public CacheMap getCacheMap() {\n+        return _cache;\n+    }\n+\n+    /**\n+     * Sets the maximum number of unpinned objects to keep hard\n+     * references to. If the map contains more unpinned objects than\n+     * <code>size</code>, then this method will result in the cache\n+     * flushing old values.\n+     */\n+    public void setCacheSize(int size) {\n+        _cache.setCacheSize(size);\n+    }\n+\n+    /**\n+     * Returns the maximum number of unpinned objects to keep hard\n+     * references to.\n+     */\n+    public int getCacheSize() {\n+        return _cache.getCacheSize();\n+    }\n+\n+    /**\n+     * Sets the maximum number of unpinned objects to keep soft\n+     * references to. If the map contains more soft references than\n+     * <code>size</code>, then this method will result in the cache\n+     * flushing values.\n+     */\n+    public void setSoftReferenceSize(int size) {\n+        _cache.setSoftReferenceSize(size);\n+    }\n+\n+    /**\n+     * Returns the maximum number of unpinned objects to keep soft\n+     * references to. Defaults to <code>-1</code>.\n+     */\n+    public int getSoftReferenceSize() {\n+        return _cache.getSoftReferenceSize();\n+    }\n+\n+    public void initialize(DataCacheManager mgr) {\n+        super.initialize(mgr);\n+        conf.getRemoteCommitEventManager().addListener(this);\n+    }\n+\n+    public void writeLock() {\n+        _cache.writeLock();\n+    }\n+\n+    public void writeUnlock() {\n+        _cache.writeUnlock();\n+    }\n+\n+    /**\n+     * Return the map to use as an internal cache; entry expirations must\n+     * invoke {@link AbstractDataCache#keyRemoved}.\n+     */\n+    protected CacheMap newCacheMap() {\n+        return new CacheMap() {\n+            protected void entryRemoved(Object key, Object value,\n+                boolean expired) {\n+                keyRemoved(key, expired);\n+            }\n+        };\n+    }\n+\n+    protected DataCachePCData getInternal(Object key) {\n+        return (DataCachePCData) _cache.get(key);\n+    }\n+\n+    protected DataCachePCData putInternal(Object key, DataCachePCData pc) {\n+        return (DataCachePCData) _cache.put(key, pc);\n+    }\n+\n+    protected DataCachePCData removeInternal(Object key) {\n+        return (DataCachePCData) _cache.remove(key);\n+    }\n+\n+    protected void removeAllInternal(Class cls, boolean subs) {\n+        // we could keep a histogram of the counts of contained classes and\n+        // only clear if we have the class, but that still wouldn't support subs\n+        // well, would involve synching, and won't yield much benefit when we're\n+        // used as a primary cache\n+        _cache.clear();\n+    }\n+\n+    protected void clearInternal() {\n+        _cache.clear();\n+    }\n+\n+    protected boolean pinInternal(Object key) {\n+        return _cache.pin(key);\n+    }\n+\n+    protected boolean unpinInternal(Object key) {\n+        return _cache.unpin (key);\n+\t}\n+}"},{"sha":"0a593ab98030d2b387bf7e565736de3eff1b28ba","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentQueryCache.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ConcurrentQueryCache.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -22,8 +22,8 @@\n \n /**\n  * A {@link QueryCache} implementation that is optimized for concurrent\n- * access.  When the cache fill up, values to remove from the cache are chosen\n- * randomly.  Due to race conditions, it is possible that a get call might not\n+ * access. When the cache fill up, values to remove from the cache are chosen\n+ * randomly. Due to race conditions, it is possible that a get call might not\n  * retur a cached instance if that instance is being transferred between\n  * internal datastructures.\n  *"},{"sha":"f6b95b8e8d8511a24aa4729904a2a230807a10e1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCache.java","status":"modified","additions":32,"deletions":44,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCache.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCache.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -22,15 +22,14 @@\n import org.apache.openjpa.lib.util.Closeable;\n \n /**\n- * <p>Interface that must be implemented by any level 2 cache used by\n+ * Interface that must be implemented by any level 2 cache used by\n  * OpenJPA. Most data caches will choose to implement the\n  * {@link org.apache.openjpa.lib.conf.Configurable} interface as well so that\n- * they will be given the system configuration just after construction.</p>\n- * <p/>\n- * <p>Implementations should take care not to return timed out data.</p>\n+ * they will be given the system configuration just after construction.\n+ *  Implementations should take care not to return timed out data.\n  *\n- * @see        AbstractDataCache\n- * @see        DataCachePCData#isTimedOut\n+ * @see AbstractDataCache\n+ * @see DataCachePCData#isTimedOut\n  * @author Patrick Linskey\n  * @author Abe White\n  */\n@@ -51,8 +50,7 @@\n     public String getName();\n \n     /**\n-     * Sets a string name to be used to identify this cache to\n-     * end-user needs.\n+     * Sets a string name to be used to identify this cache to end-user needs.\n      *\n      * @since 2.5.0\n      */\n@@ -65,39 +63,34 @@\n     public void initialize(DataCacheManager manager);\n \n     /**\n-     * <p>Perform a batch update of the cache. Add all {@link DataCachePCData}\n+     * Perform a batch update of the cache. Add all {@link DataCachePCData}\n      * objects in <code>additions</code> and in\n      * <code>newUpdates</code>, make the appropriate modifications to\n      * all DataCachePCDatas in <code>existingUpdates</code>, and delete all\n-     * OIDs in <code>deletes</code>.</p>\n-     * <p/>\n-     * <p>All changes made to cached data must be made via this\n+     * OIDs in <code>deletes</code>.\n+     *  All changes made to cached data must be made via this\n      * method. It is this method that is responsible for performing\n-     * any side-effects that should happen on meaningful cache\n-     * changes.</p>\n-     * <p/>\n-     * <p>Implementations should bear in mind that the\n+     * any side-effects that should happen on meaningful cache changes.\n+     *  Implementations should bear in mind that the\n      * <code>deletes</code> collection may contain oids that are also\n      * in the <code>additions</code> map. This is possible because it\n      * is valid for a user to delete an object with a particular oid\n-     * and then add that object in the same batch.</p>\n+     * and then add that object in the same batch.\n      *\n-     * @param    additions    A collection of {@link DataCachePCData} objects.\n+     * @param additions A collection of {@link DataCachePCData} objects.\n      * These represent data that have been newly created,\n      * and thus must be added to the cache.\n-     * @param    newUpdates    A collection of {@link DataCachePCData} objects.\n+     * @param newUpdates A collection of {@link DataCachePCData} objects.\n      * These represent data that have been modified but\n-     * were not originally in the cache, and thus\n-     * must be added to the cache.\n-     * @param    existingUpdates    A collection of {@link DataCachePCData} objects.\n+     * were not originally in the cache, and thus must be added to the cache.\n+     * @param existingUpdates A collection of {@link DataCachePCData} objects.\n      * These represent data that have been modified and\n      * were originally loaded from the cache. It is\n      * up to the cache implementation to decide if\n      * these values must be re-enlisted in the cache.\n      * Some caches may return live data from {@link #get}\n-     * invocations, in which case these values need\n-     * not be re-enlisted.\n-     * @param    deletes        A collection of object IDs that have been deleted\n+     * invocations, in which case these values need not be re-enlisted.\n+     * @param deletes A collection of object IDs that have been deleted\n      * and must therefore be dropped from the cache.\n      */\n     public void commit(Collection additions, Collection newUpdates,\n@@ -116,7 +109,7 @@ public void commit(Collection additions, Collection newUpdates,\n     public BitSet containsAll(Collection oids);\n \n     /**\n-     * Return the cached object for the given oid.  Modifying the returned\n+     * Return the cached object for the given oid. Modifying the returned\n      * object may or may not change the cached value; the {@link #update}\n      * method should be used to re-cache any changed objects.\n      *\n@@ -137,18 +130,15 @@ public void commit(Collection additions, Collection newUpdates,\n     public DataCachePCData put(DataCachePCData value);\n \n     /**\n-     * <p>Update the cached value for the given instance. This does\n+     * Update the cached value for the given instance. This does\n      * <em>not</em> result in an update of other caches. Rather, it should\n      * only be used for loading clean data into the cache. Meaningful changes\n-     * to the state of the cache should be made via the {@link #commit}\n-     * method.</p>\n-     * <p/>\n-     * <p>A cache implementation may or may not return a live object\n+     * to the state of the cache should be made via the {@link #commit} method.\n+     *  A cache implementation may or may not return a live object\n      * from {@link #get} invocations. If an object retrieved from a\n      * {@link #get} operation needs to be updated, this method can be\n      * invoked instead of invoking {@link #put}. The DataCache implementation\n-     * can then make optimizations based on how its {@link #get} method\n-     * works.</p>\n+     * can then make optimizations based on how its {@link #get} method works.\n      */\n     public void update(DataCachePCData value);\n \n@@ -169,7 +159,7 @@ public void commit(Collection additions, Collection newUpdates,\n      * Remove the values stored under the given oids.\n      *\n      * @return the indexes of the removed oids\n-     * @see        #remove\n+     * @see #remove\n      */\n     public BitSet removeAll(Collection oids);\n \n@@ -193,37 +183,35 @@ public void commit(Collection additions, Collection newUpdates,\n      * affect the behavior of {@link #remove}.\n      *\n      * @return <code>true</code> if <code>oid</code>'s value was\n-     *         pinned into the cache; <code>false</code> if the\n-     *         oid is not in the cache.\n+     * pinned into the cache; <code>false</code> if the oid is not in the cache.\n      */\n     public boolean pin(Object oid);\n \n     /**\n      * Pin all oids to the cache.\n      *\n      * @return the indexes of the pinned oids\n-     * @see        #pin\n+     * @see #pin\n      */\n     public BitSet pinAll(Collection oids);\n \n     /**\n      * Unpin the value stored under <code>oid</code> from the cache.\n      * This method reverses a previous invocation of {@link #pin}.\n      * This method does not remove anything from the cache; it merely\n-     * makes <code>oid</code>'s value a candidate for flushing from\n-     * the cache.\n+     * makes <code>oid</code>'s value a candidate for flushing from the cache.\n      *\n      * @return <code>true</code> if <code>oid</code>'s value was\n-     *         unpinned from the cache; <code>false</code> if the\n-     *         oid is not in the cache.\n+     * unpinned from the cache; <code>false</code> if the\n+     * oid is not in the cache.\n      */\n     public boolean unpin(Object oid);\n \n     /**\n      * Unpin all oids from the cache.\n      *\n      * @return the indexes of the unpinned oids\n-     * @see        #unpin\n+     * @see #unpin\n      */\n     public BitSet unpinAll(Collection oids);\n \n@@ -252,7 +240,7 @@ public void commit(Collection additions, Collection newUpdates,\n     public boolean removeExpirationListener(ExpirationListener listen);\n \n     /**\n-     *\tFree the resources used by this cache.\n+     * Free the resources used by this cache.\n \t */\n \tpublic void close ();\n }"},{"sha":"550d0f83a3dec5d0b7501d5ff52a089b66c69584","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManager.java","status":"modified","additions":74,"deletions":74,"changes":148,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManager.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManager.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -1,74 +1,74 @@\n-/*\r\n- * Copyright 2006 The Apache Software Foundation.\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- *     http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.apache.openjpa.datacache;\r\n-\r\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n-import org.apache.openjpa.lib.conf.ObjectValue;\r\n-\r\n-/**\r\n- * <p>Manages the system's data and query caches.  You can\r\n- * retrieve the data cache manager from the {@link OpenJPAConfiguration}.</p>\r\n- *\r\n- * @author Abe White\r\n- * @author Patrick Linskey\r\n- */\r\n-public interface DataCacheManager {\r\n-\r\n-    /**\r\n-     * Initialize the manager, supplying the cache configuration.\r\n-     */\r\n-    public void initialize(OpenJPAConfiguration conf, ObjectValue dataCache,\r\n-        ObjectValue queryCache);\r\n-\r\n-    /**\r\n-     * Return the system-wide data cache, or null if caching is not enabled.\r\n-     */\r\n-    public DataCache getSystemDataCache();\r\n-\r\n-    /**\r\n-     * Return the named data cache, or null if it does not exist.\r\n-     */\r\n-    public DataCache getDataCache(String name);\r\n-\r\n-    /**\r\n-     * Return the named data cache.  If the given name is null, the default\r\n-     * data cache is returned.\r\n-     *\r\n-     * @param    create    if true, the cache will be created if it does\r\n-     * not already exist\r\n-     */\r\n-    public DataCache getDataCache(String name, boolean create);\r\n-\r\n-    /**\r\n-     * Return the system query cache, or null if not configured.\r\n-     */\r\n-    public QueryCache getSystemQueryCache();\r\n-\r\n-    /**\r\n-     * Return the PCData generator if configured.\r\n-     */\r\n-    public DataCachePCDataGenerator getPCDataGenerator();\r\n-\r\n-    /**\r\n-     * Return the runnable which schedules evictions.\r\n-     */\r\n-    public DataCacheScheduler getDataCacheScheduler();\r\n-\r\n-    /**\r\n-     *\tClose all caches.\r\n-     */\r\n-    public void close ();\r\n-}\r\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.datacache;\n+\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.lib.conf.ObjectValue;\n+\n+/**\n+ * Manages the system's data and query caches. You can\n+ * retrieve the data cache manager from the {@link OpenJPAConfiguration}.\n+ *\n+ * @author Abe White\n+ * @author Patrick Linskey\n+ */\n+public interface DataCacheManager {\n+\n+    /**\n+     * Initialize the manager, supplying the cache configuration.\n+     */\n+    public void initialize(OpenJPAConfiguration conf, ObjectValue dataCache,\n+        ObjectValue queryCache);\n+\n+    /**\n+     * Return the system-wide data cache, or null if caching is not enabled.\n+     */\n+    public DataCache getSystemDataCache();\n+\n+    /**\n+     * Return the named data cache, or null if it does not exist.\n+     */\n+    public DataCache getDataCache(String name);\n+\n+    /**\n+     * Return the named data cache. If the given name is null, the default\n+     * data cache is returned.\n+     *\n+     * @param create if true, the cache will be created if it does\n+     * not already exist\n+     */\n+    public DataCache getDataCache(String name, boolean create);\n+\n+    /**\n+     * Return the system query cache, or null if not configured.\n+     */\n+    public QueryCache getSystemQueryCache();\n+\n+    /**\n+     * Return the PCData generator if configured.\n+     */\n+    public DataCachePCDataGenerator getPCDataGenerator();\n+\n+    /**\n+     * Return the runnable which schedules evictions.\n+     */\n+    public DataCacheScheduler getDataCacheScheduler();\n+\n+    /**\n+     * Close all caches.\n+     */\n+    public void close ();\n+}"},{"sha":"a645908be6b8269b12e3174eaf1a66f3a6306d4e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheManagerImpl.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -21,7 +21,7 @@\n import org.apache.openjpa.util.ImplHelper;\n \n /**\n- * <p>Default data cache manager.</p>\n+ * Default data cache manager.\n  *\n  * @author Abe White\n  * @author Patrick Linskey"},{"sha":"b1a6538cf448515179f517e6fb13deea7ff3cd3d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCData.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCData.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCData.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,"},{"sha":"1ed1c0af0a802c66ed37a8180bfda6e0cacdfa34","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataGenerator.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataGenerator.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -36,9 +36,9 @@\n import serp.bytecode.JumpInstruction;\n \n /**\n- * <p>A {@link PCDataGenerator} instance which generates properly\n- * synchronized instances suitable for use in the cache.  In addition,\n- * proper timed behavior is added.</p>\n+ * A {@link PCDataGenerator} instance which generates properly\n+ * synchronized instances suitable for use in the cache. In addition,\n+ * proper timed behavior is added.\n  *\n  * @author Steve Kim\n  * @since 3.3.0"},{"sha":"a6a4d19683ec9c72b95b2dfe8e23602307be96c3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataImpl.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCachePCDataImpl.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -27,7 +27,7 @@\n import org.apache.openjpa.meta.ValueMetaData;\n \n /**\n- * Specialized {@link PCData} implementation for data caching.  This\n+ * Specialized {@link PCData} implementation for data caching. This\n  * implementation is properly synchronized.\n  *\n  * @author Patrick Linskey"},{"sha":"71ae26fcd456ff883f5af7cc1d908ca08eaac9f8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java","status":"modified","additions":9,"deletions":12,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheScheduler.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -32,15 +32,12 @@\n import serp.util.Strings;\n \n /**\n- * <p>Cron-style cache eviction.  Understands schedules based on cron\n- * format:<p>\n+ * Cron-style cache eviction. Understands schedules based on cron format:\n  * <code>minute hour mday month wday</code>\n- * <p/>\n- * <p>For example:</p>\n+ *  For example:\n  * <code>15,30 6,19 2,10 1 2 </code>\n- * <p/>\n- * <p>Would run at 15 and 30 past the 6AM and 7PM, on the 2nd and 10th\n- * of January when its a Monday</p>.\n+ *  Would run at 15 and 30 past the 6AM and 7PM, on the 2nd and 10th\n+ * of January when its a Monday.\n  *\n  * @author Steve Kim\n  */\n@@ -63,14 +60,14 @@ public DataCacheScheduler(OpenJPAConfiguration conf) {\n     }\n \n     /**\n-     * The interval time in minutes between cache checks.  Defaults to 2.\n+     * The interval time in minutes between cache checks. Defaults to 2.\n      */\n     public int getInterval() {\n         return _interval;\n     }\n \n     /**\n-     * The interval time in minutes between cache checks.  Defaults to 2.\n+     * The interval time in minutes between cache checks. Defaults to 2.\n      */\n     public void setInterval(int interval) {\n         _interval = interval;\n@@ -88,7 +85,7 @@ private boolean isStopped() {\n     }\n \n     /**\n-     * Schedule the given cache for eviction.  Starts the scheduling thread\n+     * Schedule the given cache for eviction. Starts the scheduling thread\n      * if not started.\n      */\n     public synchronized void scheduleEviction(DataCache cache, String times) {\n@@ -159,7 +156,7 @@ protected void evict(DataCache cache) {\n     }\n \n     /**\n-     *\tSimple class which represents the given time schedule.\n+     * Simple class which represents the given time schedule.\n      */\n     private static class Schedule {\n "},{"sha":"bca1358d70fa62fefbb85ae2a85a111fed18f535","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -41,7 +41,7 @@\n import org.apache.openjpa.meta.MetaDataRepository;\n \n /**\n- * <p>StoreManager proxy that delegates to a data cache when possible.</p>\n+ * StoreManager proxy that delegates to a data cache when possible.\n  *\n  * @author Patrick Linskey\n  * @nojavadoc\n@@ -50,9 +50,9 @@\n     extends DelegatingStoreManager {\n \n     // all the state managers changed in this transaction\n-    private Collection _inserts = null;    // statemanagers\n-    private Map _updates = null;    // statemanager -> fmd set\n-    private Collection _deletes = null;    // statemanagers\n+    private Collection _inserts = null; // statemanagers\n+    private Map _updates = null; // statemanager -> fmd set\n+    private Collection _deletes = null; // statemanagers\n \n     // the owning context\n     private StoreContext _ctx = null;\n@@ -63,7 +63,7 @@\n     /**\n      * Constructor.\n      *\n-     * @param    sm            the store manager to delegate to\n+     * @param sm the store manager to delegate to\n      */\n     public DataCacheStoreManager(StoreManager sm) {\n         super(sm);\n@@ -255,8 +255,7 @@ private void updateCaches() {\n \n     /**\n      * Transforms a collection of {@link PCDataHolder}s that might contain\n-     * stale instances into a collection of up-to-date\n-     * {@link DataCachePCData}s.\n+     * stale instances into a collection of up-to-date {@link DataCachePCData}s.\n      */\n     private void transformToVersionSafePCDatas(DataCache cache,\n         List holders) {"},{"sha":"9dfd7b2fea33395e12a037a09e54ae811a04de38","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DelegatingDataCache.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DelegatingDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DelegatingDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DelegatingDataCache.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -22,9 +22,9 @@\n import org.apache.openjpa.util.RuntimeExceptionTranslator;\n \n /**\n- * <p>Delegating data cache that can also perform exception translation for\n- * use in facades.  This cache allows its delegate to be null, in which\n- * case it returns default values for all operations.</p>\n+ * Delegating data cache that can also perform exception translation for\n+ * use in facades. This cache allows its delegate to be null, in which\n+ * case it returns default values for all operations.\n  *\n  * @author Abe White\n  * @nojavadoc\n@@ -39,7 +39,7 @@\n     private final RuntimeExceptionTranslator _trans;\n \n     /**\n-     * Constructor.  Supply delegate.\n+     * Constructor. Supply delegate.\n      */\n     public DelegatingDataCache(DataCache cache) {\n         this(cache, null);"},{"sha":"b5868597e12becb67d1e05ae61ecbefabe93bfdf","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DelegatingQueryCache.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DelegatingQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DelegatingQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DelegatingQueryCache.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -19,9 +19,9 @@\n import org.apache.openjpa.util.RuntimeExceptionTranslator;\n \n /**\n- * <p>Delegating query cache that can also perform exception translation for\n- * use in facades.  This cache allows its delegate to be null, in which case\n- * it returns default values or all methods.</p>\n+ * Delegating query cache that can also perform exception translation for\n+ * use in facades. This cache allows its delegate to be null, in which case\n+ * it returns default values or all methods.\n  *\n  * @author Abe White\n  * @since 4.0\n@@ -35,7 +35,7 @@\n     private final RuntimeExceptionTranslator _trans;\n \n     /**\n-     * Constructor.  Supply delegate.\n+     * Constructor. Supply delegate.\n      */\n     public DelegatingQueryCache(QueryCache cache) {\n         this(cache, null);"},{"sha":"ea7a31b37b5d21b62dd647227e7d98f6f66afcf5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ExpirationEvent.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ExpirationEvent.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ExpirationEvent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ExpirationEvent.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,9 +18,9 @@\n import java.util.EventObject;\n \n /**\n- * <p>An event indicating the expiration of an object from the data cache,\n+ * An event indicating the expiration of an object from the data cache,\n  * or an expiration of a result list from the query cache.\n- * The source of the event will be the cache.</p>\n+ * The source of the event will be the cache.\n  *\n  * @since 3.0\n  * @author Abe White\n@@ -34,9 +34,9 @@\n     /**\n      * Constructor.\n      *\n-     * @param    source    the data or query cache\n-     * @param    key        the expired object oid or query key\n-     * @param    expired    <code>true</code> if the object was expired\n+     * @param source the data or query cache\n+     * @param key the expired object oid or query key\n+     * @param expired <code>true</code> if the object was expired\n      * naturally; else <code>false</code>.\n      */\n     public ExpirationEvent(Object source, Object key, boolean expired) {\n@@ -53,8 +53,8 @@ public Object getKey() {\n     }\n \n     /**\n-     *\tReturn whether the expired object was expired naturally, or if\n-     *\tthe object was explicitly removed.\n+     * Return whether the expired object was expired naturally, or if\n+     * the object was explicitly removed.\n      */\n     public boolean getExpired() {\n         return _expired;"},{"sha":"5cdfebbd7e94e89d376e86537e65c0f41cd73b1c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ExpirationListener.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ExpirationListener.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ExpirationListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/ExpirationListener.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.datacache;\n \n /**\n- * <p>An entity that wishes to be notified when cache keys expire.</p>\n+ * An entity that wishes to be notified when cache keys expire.\n  *\n  * @author Abe White\n  * @since 3.0"},{"sha":"b4ccb5ee46947c7cecf3ade673b78840e7b212ac","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCache.java","status":"modified","additions":18,"deletions":22,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCache.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -20,11 +20,11 @@\n import org.apache.openjpa.lib.util.Closeable;\n \n /**\n- * <p>Interface that must be implemented by any level 2 query cache\n+ * Interface that must be implemented by any level 2 query cache\n  * used by OpenJPA. These methods should be threadsafe.\n  * Most query cache implementations will probably implement\n  * {@link org.apache.openjpa.lib.conf.Configurable} to receive a handle to the\n- * system configuration on construction.</p>\n+ * system configuration on construction.\n  *\n  * @since 2.5\n  * @author Patrick Linskey\n@@ -41,18 +41,17 @@\n     public void initialize(DataCacheManager manager);\n \n     /**\n-     * <p>Return a list of oids for the given query key. This is an\n-     * unmodifiable list.</p>\n+     * Return a list of oids for the given query key. This is an\n+     * unmodifiable list.\n      *\n-     * @return The query results matching the given key, or null\n-     * if none\n+     * @return The query results matching the given key, or null if none\n      */\n     public QueryResult get(QueryKey qk);\n \n     /**\n-     * <p>Set the list of OIDs for the given query key. A reference\n+     * Set the list of OIDs for the given query key. A reference\n      * to the given list will be stored in the query cache, so the\n-     * list should not be modified after invoking this method.</p>\n+     * list should not be modified after invoking this method.\n      *\n      * @return The previously cached value, or <code>null</code> if\n      * the key was not previously cached. See {@link Map#put}\n@@ -61,13 +60,12 @@\n     public QueryResult put(QueryKey qk, QueryResult oids);\n \n     /**\n-     * <p>Remove the value stored under the given query key.</p>\n-     * <p/>\n-     * <p>This method is typically not invoked directly from outside\n+     * Remove the value stored under the given query key.\n+     *  This method is typically not invoked directly from outside\n      * the <code>QueryCache</code> class. Instead, the cache should\n-     * be updated by implementing {@link \n+     * be updated by implementing {@link\n      * org.apache.openjpa.event.RemoteCommitListener},\n-     * which will result in all queries that may be invalid being dropped.</p>\n+     * which will result in all queries that may be invalid being dropped.\n      *\n      * @return The previously cached value, or <code>null</code> if\n      * the key was not previously cached. See {@link Map#remove}\n@@ -76,7 +74,7 @@\n     public QueryResult remove(QueryKey qk);\n \n     /**\n-     * <p>Remove all data from this cache.</p>\n+     * Remove all data from this cache.\n      */\n     public void clear();\n \n@@ -90,21 +88,19 @@\n      * behavior of {@link #remove} or {@link #onTypesChanged}.\n      *\n      * @return <code>true</code> if <code>key</code>'s value was\n-     *         pinned into the cache; <code>false</code> if the\n-     *         key is not in the cache.\n+     * pinned into the cache; <code>false</code> if the key is not in the cache.\n      */\n     public boolean pin(QueryKey qk);\n \n     /**\n      * Unpin the value stored under <code>key</code> into the cache.\n      * This method reverses a previous invocation of {@link #pin}.\n      * This method does not remove anything from the cache; it merely\n-     * makes <code>key</code>'s value a candidate for flushing from\n-     * the cache.\n+     * makes <code>key</code>'s value a candidate for flushing from the cache.\n      *\n      * @return <code>true</code> if <code>key</code>'s value was\n-     *         unpinned from the cache; <code>false</code> if the\n-     *         key is not in the cache.\n+     * unpinned from the cache; <code>false</code> if the\n+     * key is not in the cache.\n      */\n     public boolean unpin(QueryKey qk);\n \n@@ -133,7 +129,7 @@\n     public boolean removeTypesChangedListener(TypesChangedListener listen);\n \n     /**\n-     *\tFree the resources used by this cache.\n+     * Free the resources used by this cache.\n \t */\n \tpublic void close ();\n }"},{"sha":"bf7689566f7d695d2183bc41f0dac52b23f8bfdd","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","status":"modified","additions":17,"deletions":25,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -46,8 +46,7 @@\n \n /**\n  * A {@link StoreQuery} implementation that caches the OIDs involved in\n- * the query, and can determine whether or not the query has been\n- * dirtied.\n+ * the query, and can determine whether or not the query has been dirtied.\n  *\n  * @author Patrick Linskey\n  * @since 2.5.0\n@@ -70,8 +69,7 @@ public QueryCacheStoreQuery(StoreQuery query, QueryCache cache) {\n     }\n \n     /**\n-     * Return the {@link QueryCache} that this object is associated\n-     * with.\n+     * Return the {@link QueryCache} that this object is associated with.\n      */\n     public QueryCache getCache() {\n         return _cache;\n@@ -85,30 +83,25 @@ public StoreQuery getDelegate() {\n     }\n \n     /**\n-     * <p>Look in the query cache for a result for the given query\n+     * Look in the query cache for a result for the given query\n      * key. Only look if this query is being executed outside a\n      * transaction or in a transaction with IgnoreChanges set to true\n      * or in a transaction with IgnoreChanges set to false but in which\n-     * none of the classes involved in this query have been\n-     * touched.</p>\n-     * <p/>\n-     * <p>Caching is not used when using object locking.\n+     * none of the classes involved in this query have been touched.\n+     *  Caching is not used when using object locking.\n      * This is because we must obtain locks on the\n      * data, and it is likely that making n trips to the database to\n      * make the locks will be slower than running the query against\n-     * the database.</p>\n-     * <p/>\n-     * <p>If the fetch configuration has query caching disabled,\n-     * then this method returns <code>null</code>.</p>\n-     * <p/>\n-     * <p>Return the list if we meet the above criteria and if a list\n+     * the database.\n+     *  If the fetch configuration has query caching disabled,\n+     * then this method returns <code>null</code>.\n+     *  Return the list if we meet the above criteria and if a list\n      * is found for <code>qk</code>. Else, return\n-     * <code>null</code>.</p>\n-     * <p/>\n-     * <p>This implementation means that queries against the cache\n+     * <code>null</code>.\n+     *  This implementation means that queries against the cache\n      * are of READ_COMMITTED isolation level. It'd be nice to support\n      * READ_SERIALIZABLE -- to do so, we'd just return false when in\n-     * a transaction.</p>\n+     * a transaction.\n      */\n     private List checkCache(QueryKey qk) {\n         if (qk == null)\n@@ -451,7 +444,7 @@ private static StoreQuery unwrap(StoreQuery q) {\n     }\n \n     /**\n-     * Result list implementation for a cached query result.  Package-protected\n+     * Result list implementation for a cached query result. Package-protected\n      * for testing.\n      */\n     public static class CachedList\n@@ -495,8 +488,7 @@ public Object writeReplace()\n      * A wrapper around a {@link ResultObjectProvider} that builds up a list of\n      * all the OIDs in this list and registers that list with the\n      * query cache. Abandons monitoring and registering if one of the classes\n-     * in the access path is modified while the query results are being\n-     * loaded.\n+     * in the access path is modified while the query results are being loaded.\n      */\n     private class CachingResultObjectProvider\n         implements ResultObjectProvider, TypesChangedListener {\n@@ -514,7 +506,7 @@ public Object writeReplace()\n         private int _size = Integer.MAX_VALUE;\n \n         /**\n-         * Constructor.  Supply delegate result provider and our query key.\n+         * Constructor. Supply delegate result provider and our query key.\n          */\n         public CachingResultObjectProvider(ResultObjectProvider rop,\n             boolean proj, QueryKey key) {\n@@ -666,7 +658,7 @@ public void onTypesChanged(TypesChangedEvent ev) {\n     }\n \n     /**\n-     *\tStruct to recognize cached oids.\n+     * Struct to recognize cached oids.\n      */\n     private static class CachedObjectId {\n "},{"sha":"4e741cc9de9e7eff17fd651dac13588213d19461","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryKey.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -45,11 +45,11 @@\n import org.apache.openjpa.util.ImplHelper;\n \n /**\n- * <p>This class stores information about a particular invocation of\n+ * This class stores information about a particular invocation of\n  * a query. It contains a reference to the external properties of the\n  * query that was executed, as well as any parameters used to execute\n  * that query, with one exception: first-class objects used as\n- * parameter values are converted to OIDs.</p>\n+ * parameter values are converted to OIDs.\n  *\n  * @author Patrick Linskey\n  */"},{"sha":"3ce98f20a9410bdaf895e81d7cdb0547d125efe2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryResult.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryResult.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryResult.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -19,7 +19,7 @@\n import java.util.Collection;\n \n /**\n- * <p>A query result.</p>\n+ * A query result.\n  *\n  * @author Abe White\n  */\n@@ -56,7 +56,7 @@ public long getTimeoutTime() {\n     }\n \n     /**\n-     *\tWhether this data is timed out.\n+     * Whether this data is timed out.\n      */\n     public boolean isTimedOut() {\n         return _ex != -1 && _ex < System.currentTimeMillis();"},{"sha":"07f105708dc289a07a18afb6b93b88fb9bd1756f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/TypesChangedEvent.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/TypesChangedEvent.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/TypesChangedEvent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/TypesChangedEvent.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -19,8 +19,8 @@\n import java.util.EventObject;\n \n /**\n- * <p>An event indicating that instances of given persistent types have\n- * been modified.</p>\n+ * An event indicating that instances of given persistent types have\n+ * been modified.\n  *\n  * @author Abe White\n  */\n@@ -32,8 +32,8 @@\n     /**\n      * Constructor.\n      *\n-     * @param    source    the data or query cache\n-     * @param    types    the changed types\n+     * @param source the data or query cache\n+     * @param types the changed types\n      */\n     public TypesChangedEvent(Object source, Collection types) {\n         super(source);"},{"sha":"88f313bc4360320257cfa54b9959cfd3e29bc335","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/TypesChangedListener.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/TypesChangedListener.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/TypesChangedListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/TypesChangedListener.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.datacache;\n \n /**\n- * <p>An entity that wishes to be notified when types change.</p>\n+ * An entity that wishes to be notified when types change.\n  *\n  * @author Abe White\n  * @since 3.0"},{"sha":"e4da1744b5a895c04497b2148763f122bfbf6f8c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","status":"modified","additions":12,"deletions":13,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -25,11 +25,10 @@\n import org.apache.openjpa.util.InvalidStateException;\n \n /**\n- * <p>Implementation of the {@link ManagedRuntime} interface that searches\n+ * Implementation of the {@link ManagedRuntime} interface that searches\n  * through a set of known JNDI locations and method invocations to locate the\n- * appropriate mechanism for obtaining a TransactionManager.</p>\n- * <p/>\n- * <p>Built in support is provided for the following Application Servers:\n+ * appropriate mechanism for obtaining a TransactionManager.\n+ *  Built in support is provided for the following Application Servers:\n  * <ul>\n  * <li>Bluestone</li>\n  * <li>HP Application Server</li>\n@@ -41,20 +40,20 @@\n  * <li>SunONE</li>\n  * <li>Weblogic</li>\n  * <li>Websphere</li>\n- * </ul></p>\n+ * </ul>\n  *\n  * @author Marc Prud'hommeaux\n  */\n public class AutomaticManagedRuntime\n     implements ManagedRuntime, Configurable {\n \n     private static final String [] JNDI_LOCS = new String []{\n-        \"javax.transaction.TransactionManager\",        // weblogic\n-        \"java:/TransactionManager\",                    // jboss & jrun\n-        \"java:/DefaultDomain/TransactionManager\",    // jrun too\n-        \"java:comp/pm/TransactionManager\",            // orion & oracle\n-        \"java:comp/TransactionManager\",                // generic\n-        \"java:pm/TransactionManager\",                // borland\n+        \"javax.transaction.TransactionManager\", // weblogic\n+        \"java:/TransactionManager\", // jboss & jrun\n+        \"java:/DefaultDomain/TransactionManager\", // jrun too\n+        \"java:comp/pm/TransactionManager\", // orion & oracle\n+        \"java:comp/TransactionManager\", // generic\n+        \"java:pm/TransactionManager\", // borland\n     };\n     private static final String [] METHODS = new String[]{\n         \"com.arjuna.jta.JTA_TransactionManager.transactionManager\", // hp\n@@ -66,7 +65,7 @@\n         \"org.openejb.OpenEJB.getTransactionManager\",\n         \"com.sun.jts.jta.TransactionManagerImpl.getTransactionManagerImpl\",\n         \"com.inprise.visitransact.jta.TransactionManagerImpl.\"\n-            + \"getTransactionManagerImpl\",                            // borland\n+            + \"getTransactionManagerImpl\", // borland\n     };\n     private static final ManagedRuntime WLS;\n     private static final ManagedRuntime SUNONE;"},{"sha":"5bb254e891d178469b971bc2b537b95944f09d00","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/InvocationManagedRuntime.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/ee/InvocationManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/ee/InvocationManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/InvocationManagedRuntime.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -23,12 +23,11 @@\n import org.apache.openjpa.lib.conf.Configuration;\n \n /**\n- * <p>Implementation of the {@link ManagedRuntime} interface that uses\n- * a static method call to find the TransactionManager.</p>\n- * <p/>\n- * <p>For example, to configure it to use IBM Websphere's TransactionManager,\n+ * Implementation of the {@link ManagedRuntime} interface that uses\n+ * a static method call to find the TransactionManager.\n+ *  For example, to configure it to use IBM Websphere's TransactionManager,\n  * use the method:<br />\n- * <code>com.ibm.ejs.jts.jta.JTSXA.getTransactionManager</code></p>\n+ * <code>com.ibm.ejs.jts.jta.JTSXA.getTransactionManager</code>\n  *\n  * @author Marc Prud'hommeaux\n  */\n@@ -49,8 +48,7 @@ public String getTransactionManagerMethod() {\n \n     /**\n      * Set the method to invoke to get the {@link TransactionManager}.\n-     * <p/>\n-     * E.g.: com.ibm.ejs.jts.jta.JTSXA.getTransactionManager\n+     *  E.g.: com.ibm.ejs.jts.jta.JTSXA.getTransactionManager\n      */\n     public void setTransactionManagerMethod(String methodName) {\n         _clazz = methodName.substring(0, methodName.lastIndexOf('.'));"},{"sha":"c2da2dd057fd254d0d5c094953b0180bfc37b17d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/JNDIManagedRuntime.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/ee/JNDIManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/ee/JNDIManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/JNDIManagedRuntime.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -20,8 +20,8 @@\n import javax.transaction.TransactionManager;\n \n /**\n- * <p>Implementation of the {@link ManagedRuntime} interface that uses JNDI to\n- * find the TransactionManager.</p>\n+ * Implementation of the {@link ManagedRuntime} interface that uses JNDI to\n+ * find the TransactionManager.\n  *\n  * @author Abe White\n  */"},{"sha":"8971007eef40f8fa76190b500ac5267a774c4b52","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/ManagedRuntime.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/ee/ManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/ee/ManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/ManagedRuntime.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,15 +18,15 @@\n import javax.transaction.TransactionManager;\n \n /**\n- * <p>This interface must be implemented by concrete plugins to application\n- * servers in order to integrate the OpenJPA runtime in a managed environment.</p>\n+ * This interface must be implemented by concrete plugins to application\n+ * servers in order to integrate the OpenJPA runtime in a managed environment.\n  *\n  * @author Abe White\n  */\n public interface ManagedRuntime {\n \n     /**\n-     * Return the TransactionManager for the managed runtime.  This\n+     * Return the TransactionManager for the managed runtime. This\n      * manager is used to register synchronization listeners, to\n      * map transactional PersistenceManagers to the current transaction,\n      * and possibly to enlist XA resources."},{"sha":"e6fa420d1462b5aa12c47e304beebf74dbf23333","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/SunOneManagedRuntime.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/ee/SunOneManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/ee/SunOneManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/SunOneManagedRuntime.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,"},{"sha":"abedad1f7f835cc90f653ac54e8fe11d132fb70c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/WLSManagedRuntime.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WLSManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WLSManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WLSManagedRuntime.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,"},{"sha":"a9b48422917616e8d0f51b1957dc98bdea6cb626","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","status":"modified","additions":30,"deletions":37,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -58,8 +58,7 @@\n import serp.util.Strings;\n \n /**\n- * <p>Generates a class appropriate for use as an application identity\n- * class.</p>\n+ * Generates a class appropriate for use as an application identity class.\n  *\n  * @author Patrick Linskey\n  * @author Abe White\n@@ -174,8 +173,8 @@ public void setCodeFormat(CodeFormat format) {\n     }\n \n     /**\n-     * The directory to write source to.  Defaults to the directory\n-     * of the Java file for the set type.  If the given directory does not\n+     * The directory to write source to. Defaults to the directory\n+     * of the Java file for the set type. If the given directory does not\n      * match the package of the object id, the package structure will be\n      * created below the directory.\n      */\n@@ -184,8 +183,8 @@ public File getDirectory() {\n     }\n \n     /**\n-     * The directory to write source to.  Defaults to the directory\n-     * of the Java file for the set type.  If the given directory does not\n+     * The directory to write source to. Defaults to the directory\n+     * of the Java file for the set type. If the given directory does not\n      * match the package of the object id, the package structure will be\n      * created below the directory.\n      */\n@@ -244,8 +243,7 @@ public String getCode() {\n     }\n \n     /**\n-     * Returns true if the application identity class should\n-     * be an inner class.\n+     * Returns true if the application identity class should be an inner class.\n      */\n     public boolean isInnerClass() {\n         Class oidClass = _meta.getObjectIdType();\n@@ -605,7 +603,7 @@ private String getConstructor(boolean hasSuperclass) {\n \n     /**\n      * Create the fromString method that parses the result of our toString\n-     * method.  If we have superclasses with id fields, this will call\n+     * method. If we have superclasses with id fields, this will call\n      * super.fromString() so that the parent class can parse its own fields.\n      */\n     private String getFromStringCode(boolean hasSuperclass) {\n@@ -702,7 +700,7 @@ else if (type == char[].class)\n         else if (!type.isPrimitive()) {\n             parse.append(\"new \").append(Strings.getClassName(type)).\n                 openParen(true).append(var).closeParen();\n-        } else    // primitive\n+        } else // primitive\n         {\n             switch (type.getName().charAt(0)) {\n                 case 'b':\n@@ -852,8 +850,7 @@ private String getEqualsCode(boolean hasSuperclass) {\n \n     /**\n      * Return a hashCode method that takes into account all\n-     * primary key values.  Must deal correctly with both\n-     * primitives and objects.\n+     * primary key values. Must deal correctly with both primitives and objects.\n      */\n     private String getHashCodeCode(boolean hasSuperclass) {\n         // if we are below a concrete class then we cannot declare any\n@@ -1025,7 +1022,7 @@ else if (_fields[i].getDeclaredType() == Date.class)\n     /**\n      * Code to convert a string to a byte array.\n      *\n-     * @see    org.apache.openjpa.lib.util.Base16Encoder#decode\n+     * @see org.apache.openjpa.lib.util.Base16Encoder#decode\n      */\n     private String getToBytesByteArrayCode() {\n         CodeFormat code = newCodeFormat();\n@@ -1071,7 +1068,7 @@ private String getToBytesByteArrayCode() {\n     /**\n      * Code to convert a byte array to a string.\n      *\n-     * @see    org.apache.openjpa.lib.util.Base16Encoder#encode\n+     * @see org.apache.openjpa.lib.util.Base16Encoder#encode\n      */\n     private String getToStringByteArrayCode() {\n         CodeFormat code = newCodeFormat();\n@@ -1222,20 +1219,19 @@ private CodeFormat newCodeFormat() {\n     }\n \n     /**\n-     * <p>Usage: java org.apache.openjpa.enhance.ApplicationIdTool [option]*\n-     * &lt;class name | .java file | .class file | .jdo file&gt;+</p>\n-     * <p/>\n-     * <p>Where the following options are recognized.\n+     * Usage: java org.apache.openjpa.enhance.ApplicationIdTool [option]*\n+     * &lt;class name | .java file | .class file | .jdo file&gt;+\n+     *  Where the following options are recognized.\n      * <ul>\n      * <li><i>-properties/-p &lt;properties file&gt;</i>: The path to a OpenJPA\n-     * properties file containing information as outlined in \n+     * properties file containing information as outlined in\n      * {@link Configuration}; optional.</li>\n      * <li><i>-&lt;property name&gt; &lt;property value&gt;</i>: All bean\n      * properties of the standard OpenJPA {@link OpenJPAConfiguration} can be\n      * set by using their names and supplying a value.</li>\n      * <li><i>-directory/-d &lt;output directory&gt;</i>: Path to the base\n-     * source directory.  The package structure will be created beneath\n-     * this directory if necessary.  If not specified, the tool will try\n+     * source directory. The package structure will be created beneath\n+     * this directory if necessary. If not specified, the tool will try\n      * to locate the .java file in the CLASSPATH and output to the same\n      * directory; failing that, it will use the current directory as\n      * the base directory.\n@@ -1246,24 +1242,23 @@ private CodeFormat newCodeFormat() {\n      * <li><i>-token/-t &lt;token&gt;</i>: The token to use to separate\n      * stingified primary key field values in the stringified oid.</li>\n      * <li><i>-name/-n &lt;id class name&gt;</i>: The name of the identity\n-     * class to generate.  If this option is specified, you must only\n-     * give a single class argument.  If the class metadata names an object\n+     * class to generate. If this option is specified, you must only\n+     * give a single class argument. If the class metadata names an object\n      * id class, this argument is ignored.</li>\n      * <li><i>-suffix/-s &lt;id class suffix&gt;</i>: A string to suffix each\n-     * persistent class with to create the identity class name.  This is\n+     * persistent class with to create the identity class name. This is\n      * overridden by <code>-name</code> or by any identity class name\n      * specified in metadata.</li>\n      * <li><i>-codeFormat/-cf.&lt;property name&gt; &lt; property value&gt;</i>\n      * : Arguments like this will be used to configure the bean\n      * properties of the internal {@link CodeFormat}.</li>\n-     * </ul></p>\n-     * <p/>\n-     * <p>Each additional argument can be either the full class name of the\n+     * </ul>\n+     *  Each additional argument can be either the full class name of the\n      * type to create an id class for, the path to the .java file for the type,\n      * the path to the .class file for the type, or the path to a .jdo file\n-     * listing one or more types.  If a .java file already exists for an\n+     * listing one or more types. If a .java file already exists for an\n      * application id, it will be backed up to a file named\n-     * &lt;orig file name&gt;~.</p>\n+     * &lt;orig file name&gt;~.\n      */\n     public static void main(String[] args)\n         throws IOException, ClassNotFoundException {\n@@ -1281,8 +1276,7 @@ public static void main(String[] args)\n \n     /**\n      * Run the application id tool with the given command-line and\n-     * given configuration. Returns false if invalid options were\n-     * given.\n+     * given configuration. Returns false if invalid options were given.\n      */\n     public static boolean run(OpenJPAConfiguration conf, String[] args,\n         Options opts)\n@@ -1326,7 +1320,7 @@ public static boolean run(OpenJPAConfiguration conf, String[] args,\n     }\n \n     /**\n-     * Run the tool.  Returns false if invalid options were given.\n+     * Run the tool. Returns false if invalid options were given.\n      */\n     public static boolean run(OpenJPAConfiguration conf, String[] args,\n         Flags flags, ClassLoader loader)\n@@ -1450,14 +1444,13 @@ else if (fatal)\n     }\n \n     /**\n-     *\tInterface implemented by metadata factories that can load non-existant\n-     *\tobject id classes.\n+     * Interface implemented by metadata factories that can load non-existant\n+     * object id classes.\n      */\n     public static interface ObjectIdLoader\n \t{\n \t\t/**\n-\t\t *\tTurn on the loading of all identity classes, even if they don't\n-\t\t *\texist.\n+\t\t * Turn on the loading of all identity classes, even if they don't exist.\n \t \t */\n \t\tpublic void setLoadObjectIds ();\n \t}"},{"sha":"113f2ceaeecf99de6a7a0a778ebd65b05b3b658d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/CodeGenerator.java","status":"modified","additions":25,"deletions":30,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/CodeGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/CodeGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/CodeGenerator.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -34,7 +34,7 @@\n import serp.util.Strings;\n \n /**\n- * <p>Generates Java class code from metadata.</p>\n+ * Generates Java class code from metadata.\n  *\n  * @author Abe White\n  * @author Stephen Kim\n@@ -50,22 +50,22 @@\n     private ParameterTemplate _code = null;\n \n     /**\n-     * Constructor.  Supply configuration and class to generate code for.\n+     * Constructor. Supply configuration and class to generate code for.\n      */\n     public CodeGenerator(OpenJPAConfiguration conf, Class type) {\n         this(new MetaDataRepository(conf).getMetaData(type, null, true));\n     }\n \n     /**\n-     * Constructor.  Supply configuration and metadata to generate code for.\n+     * Constructor. Supply configuration and metadata to generate code for.\n      */\n     public CodeGenerator(ClassMetaData meta) {\n         _meta = meta;\n         _type = meta.getDescribedType();\n     }\n \n     /**\n-     * The directory to write source to.  Defaults to the current directory.\n+     * The directory to write source to. Defaults to the current directory.\n      * If the given directory does not match the package of the metadata, the\n      * package structure will be created below the directory.\n      */\n@@ -74,7 +74,7 @@ public File getCodeDirectory() {\n     }\n \n     /**\n-     * The directory to write source to.  Defaults to the current directory.\n+     * The directory to write source to. Defaults to the current directory.\n      * If the given directory does not match the package of the metadata, the\n      * package structure will be created below the directory.\n      */\n@@ -293,8 +293,7 @@ private String getConstructor() {\n     }\n \n     /**\n-     * Append the declaration and code for the given field to the given\n-     * buffers.\n+     * Append the declaration and code for the given field to the given buffers.\n      */\n     private void appendFieldCode(FieldMetaData fmd, CodeFormat decs,\n         CodeFormat code) {\n@@ -462,33 +461,30 @@ protected CodeFormat newCodeFormat() {\n \n     /**\n      * Return a code template for the given class, or null to use the standard\n-     * system-generated Java code.  To facilitate template reuse, the\n+     * system-generated Java code. To facilitate template reuse, the\n      * following parameters can appear in the template; the proper values\n      * will be subtituted by the system:\n      * <ul>\n      * <li>${packageDec}: The package declaration, in the form\n-     * \"package &lt;package name &gt;;\", or empty string if no\n-     * package.</li>\n+     * \"package &lt;package name &gt;;\", or empty string if no package.</li>\n      * <li>${imports}: Imports for the packages used by the declared\n      * field types.</li>\n      * <li>${className}: The name of the class, without package.</li>\n      * <li>${extendsDec}: Extends declaration, in the form\n      * \"extends &lt;superclass&gt;\", or empty string if no superclass.</li>\n      * <li>${constructor}: A constructor that takes in all primary key fields\n-     * of the class, or empty string if the class uses datastore\n-     * identity.</li>\n+     * of the class, or empty string if the class uses datastore identity.</li>\n      * <li>${fieldDecs}: Declarations of all the declared fields.</li>\n      * <li>${fieldCode}: Get/set methods for all the declared fields.</li>\n-     * </ul>\n-     * Returns null by default.\n+     * </ul> Returns null by default.\n      */\n     protected String getClassCode() {\n         return null;\n     }\n \n     /**\n      * Return code for the initial value for the given field, or null to use\n-     * the default generated by the system.  Returns null by default.\n+     * the default generated by the system. Returns null by default.\n      */\n     protected String getInitialValue(FieldMetaData field) {\n         return null;\n@@ -506,26 +502,25 @@ protected String getInitialValue(FieldMetaData field) {\n      * <li>${fieldType}: The field's type name.</li>\n      * <li>${fieldValue}: The field's initial value, in the form\n      * \" = &lt;value&gt;\", or empty string if none.</li>\n-     * </ul>\n-     * Returns null by default.\n+     * </ul> Returns null by default.\n      */\n     protected String getDeclaration(FieldMetaData field) {\n         return null;\n     }\n \n     /**\n-     *\tReturn a code template for the get/set methods of the given field, or\n-     *\tnull to use the system-generated default Java code.\n-     *\tTo facilitate template reuse, the following parameters can appear in\n-     *\tyour template; the proper values will be subtituted by the system:\n-     *\t<ul>\n-     *\t<li>${fieldName}: The name of the field.</li>\n-     *\t<li>${capFieldName}: The capitalized field name.</li>\n-     *\t<li>${propertyName}: The field name without leading '_', if any.</li>\n-     *\t<li>${fieldType}: The field's type name.</li>\n-     *\t<li>${fieldValue}: The field's initial value, in the form\n-     *\t\t\"= &lt;value&gt;\", or empty string if none.</li>\n-     *\t</ul>\n+     * Return a code template for the get/set methods of the given field, or\n+     * null to use the system-generated default Java code.\n+     * To facilitate template reuse, the following parameters can appear in\n+     * your template; the proper values will be subtituted by the system:\n+     * <ul>\n+     * <li>${fieldName}: The name of the field.</li>\n+     * <li>${capFieldName}: The capitalized field name.</li>\n+     * <li>${propertyName}: The field name without leading '_', if any.</li>\n+     * <li>${fieldType}: The field's type name.</li>\n+     * <li>${fieldValue}: The field's initial value, in the form\n+     * \"= &lt;value&gt;\", or empty string if none.</li>\n+     * </ul>\n      */\n     protected String getFieldCode (FieldMetaData field)\n \t{"},{"sha":"6b2bf36772627c82ed41981f1c11b4a877af052a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicStorage.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicStorage.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicStorage.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicStorage.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,9 +16,9 @@\n package org.apache.openjpa.enhance;\n \n /**\n- * <p>Interface for dynamically generated classes.  Certain getters/setters\n+ * Interface for dynamically generated classes. Certain getters/setters\n  * may either return null or throw an exception depending on the\n- * {@link DynamicStorageGenerator}'s field policy.</p>\n+ * {@link DynamicStorageGenerator}'s field policy.\n  *\n  * @author Steve Kim\n  * @nojavadoc\n@@ -132,7 +132,7 @@\n     public void setObject(int field, Object val);\n \n     /**\n-     *  Ensure object capacity\n+     * Ensure object capacity\n      */\n     public void initialize ();\n }"},{"sha":"56d32a5768717fe38a9718f538957abfa60fc7f2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicStorageGenerator.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicStorageGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicStorageGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicStorageGenerator.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -33,8 +33,8 @@\n import serp.bytecode.TableSwitchInstruction;\n \n /**\n- * <p>Factory for creating new {@link DynamicStorage} classes.  Can be\n- * extended to decorate/modify the generated instances behavior.</p>\n+ * Factory for creating new {@link DynamicStorage} classes. Can be\n+ * extended to decorate/modify the generated instances behavior.\n  *\n  * @author Steve Kim\n  * @nojavadoc\n@@ -58,7 +58,7 @@\n \n     /**\n      * Constant to be as silent as possible during invalid index passed\n-     * to set/get type methods.  On getting an Object, for example,\n+     * to set/get type methods. On getting an Object, for example,\n      * null will be returned.\n      * However, on primitive gets, an exception will be thrown.\n      */\n@@ -119,7 +119,7 @@ public DynamicStorage generateStorage(int[] types, Object obj) {\n     }\n \n     /**\n-     * Return a class name to use for the given user key.  By default,\n+     * Return a class name to use for the given user key. By default,\n      * returns the stringified key prefixed by PREFIX.\n      */\n     protected String getClassName(Object obj) {\n@@ -135,7 +135,7 @@ protected int getFieldAccess() {\n     }\n \n     /**\n-     * Return the name for the generated field at the given index.  Returns\n+     * Return the name for the generated field at the given index. Returns\n      * <code>\"field\" + i</code> by default.\n      */\n     protected String getFieldName(int index) {\n@@ -413,7 +413,7 @@ private void addGetMethod(int typeCode, BCClass bc, int[] types) {\n \n     /**\n      * Clear code associated with the given method signature, and return\n-     * the empty code.  Will return null if the method should be empty.\n+     * the empty code. Will return null if the method should be empty.\n      */\n     protected Code replaceMethod(BCClass bc, String name, Class retType,\n         Class[] args, boolean remove) {\n@@ -518,7 +518,7 @@ protected Class getWrapper(int type) {\n     }\n \n     /**\n-     *  Get the wrapper for the given type.\n+     * Get the wrapper for the given type.\n      */\n     protected Class getWrapper(Class c) {\n         for (int i = 0; i < WRAPPERS.length; i++) {"},{"sha":"d760ac341ca1195fd8d1638c69d14c56f4c687da","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/FieldConsumer.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/FieldConsumer.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/FieldConsumer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/FieldConsumer.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.enhance;\n \n /**\n- * <p>Consumes persistent field values.</p>\n+ * Consumes persistent field values.\n  */\n public interface FieldConsumer {\n \n@@ -66,7 +66,7 @@\n     void storeStringField(int fieldIndex, String value);\n \n     /**\n-     *\tSet the value of the given field.\n+     * Set the value of the given field.\n      */\n     void storeObjectField(int fieldIndex, Object value);\n }"},{"sha":"1392ab9d5edf848bc0eacf4b26730826f192009c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/FieldManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/FieldManager.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/FieldManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/FieldManager.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.enhance;\n \n /**\n- * <p>Manages persistent fields.</p>\n+ * Manages persistent fields.\n  */\n public interface FieldManager\n     extends FieldConsumer, FieldSupplier {"},{"sha":"a310c97c208d7affe89e50b25024f6ac4cd206df","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/FieldSupplier.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/FieldSupplier.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/FieldSupplier.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/FieldSupplier.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.enhance;\n \n /**\n- * <p>Supplies persistent field values.</p>\n+ * Supplies persistent field values.\n  */\n public interface FieldSupplier {\n \n@@ -66,7 +66,7 @@\n     String fetchStringField(int fieldIndex);\n \n     /**\n-     *\tReturn the value of the given field.\n+     * Return the value of the given field.\n      */\n     Object fetchObjectField (int fieldIndex);\n }"},{"sha":"f7b26817a6baa193d7134b158c0bff3f60896be5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCDataGenerator.java","status":"modified","additions":11,"deletions":12,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCDataGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCDataGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCDataGenerator.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -48,9 +48,9 @@\n import serp.bytecode.LookupSwitchInstruction;\n \n /**\n- * <p>Generates {@link PCData} instances which avoid primitve wrappers\n+ * Generates {@link PCData} instances which avoid primitve wrappers\n  * to optimize memory use and performance at the cost of slightly higher\n- * startup time.</p>\n+ * startup time.\n  *\n  * @author Steve Kim\n  * @nojavadoc\n@@ -116,8 +116,7 @@ private DynamicStorage generateStorage(ClassMetaData meta) {\n     }\n \n     /**\n-     * Perform any final actions before the pcdata is returned to client\n-     * code.\n+     * Perform any final actions before the pcdata is returned to client code.\n      */\n     protected void finish(DynamicPCData data, ClassMetaData meta) {\n     }\n@@ -196,7 +195,7 @@ private void enhanceConstructor(BCClass bc) {\n \n     /**\n      * Have to load the type since it may not be available to the\n-     * same classloader (i.e. rar vs. ear).  The context classloader\n+     * same classloader (i.e. rar vs. ear). The context classloader\n      * (i.e. the user app classloader) should be fine.\n      */\n     private void addGetType(BCClass bc, ClassMetaData meta) {\n@@ -371,7 +370,7 @@ private void addFieldImplDataMethods(BCClass bc, ClassMetaData meta) {\n             lswitch.setDefaultTarget(target);\n \n             // if (obj != null)\n-            code.next();    // jump back over target\n+            code.next(); // jump back over target\n             ifins = code.ifnonnull();\n             code.vreturn();\n \n@@ -417,7 +416,7 @@ private void addFieldImplDataMethods(BCClass bc, ClassMetaData meta) {\n                 code.go2().setTarget(switchTarget);\n             }\n             lswitch.setDefaultTarget(switchTarget);\n-            code.next();    // step over switch target\n+            code.next(); // step over switch target\n \n             // if (arrIdx != -1)\n             code.constant().setValue(-1);\n@@ -465,7 +464,7 @@ private void addFieldImplDataMethods(BCClass bc, ClassMetaData meta) {\n \n             // if (fieldImpl != null)\n             // \t\tfieldImpl[index] = null;\n-            code.next();    // step over nullTarget\n+            code.next(); // step over nullTarget\n             code.getfield().setField(impl);\n             ifins = code.ifnonnull();\n             code.vreturn();\n@@ -753,7 +752,7 @@ private Instruction addLoadIntermediate(Code code, int index,\n             boolean.class, new Class[]{ int.class });\n         jumps2.add(code.ifne());\n         //\t\t\tsm.setIntermediate (index, inter);\n-        //\t}  // end else\n+        //\t} // end else\n         code.aload().setParam(0);\n         code.constant().setValue(index);\n         code.aload().setLocal(inter);\n@@ -1067,8 +1066,8 @@ protected void setTarget(Instruction ins, Collection jumps) {\n     }\n \n     /**\n-     *  Dynamic {@link PCData}s generated will implement this interface\n-     *  to simplify initialization.\n+     * Dynamic {@link PCData}s generated will implement this interface\n+     * to simplify initialization.\n      */\n     public static interface DynamicPCData extends PCData {\n "},{"sha":"7a131bf5025315e626a1929375219f67c1e6c3ab","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":79,"deletions":94,"changes":173,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -79,9 +79,9 @@\n import serp.util.Numbers;\n \n /**\n- * <p>Bytecode enhancer used to enhance persistent classes from metadata.  The\n+ * Bytecode enhancer used to enhance persistent classes from metadata. The\n  * enhancer must be invoked on all persistence-capable and persistence aware\n- * classes.</p>\n+ * classes.\n  *\n  * @author Abe White\n  */\n@@ -123,26 +123,26 @@\n     private Set _violations = null;\n \n     /**\n-     * Constructor.  Supply configuration and type to enhance.\n+     * Constructor. Supply configuration and type to enhance.\n      */\n     public PCEnhancer(OpenJPAConfiguration conf, Class type) {\n         this(conf, new Project().loadClass(type), null);\n     }\n \n     /**\n-     * Constructor.  Supply configuration and type to enhance.\n+     * Constructor. Supply configuration and type to enhance.\n      */\n     public PCEnhancer(OpenJPAConfiguration conf, ClassMetaData type) {\n         this(conf, new Project().loadClass(type.getDescribedType()),\n             type.getRepository());\n     }\n \n     /**\n-     * Constructor.  Supply configuration.\n+     * Constructor. Supply configuration.\n      *\n-     * @param    type    the bytecode representation fo the type to\n+     * @param type the bytecode representation fo the type to\n      * enhance; this can be created from any stream or file\n-     * @param    repos    a metadata repository to use for metadata access,\n+     * @param repos a metadata repository to use for metadata access,\n      * or null to create a new reporitory; the repository\n      * from the given configuration isn't used by default\n      * because the configuration might be an\n@@ -187,7 +187,7 @@ public ClassMetaData getMetaData() {\n \n     /**\n      * A boolean indicating whether the enhancer should add a no-args\n-     * constructor if one is not already present in the class.  OpenJPA\n+     * constructor if one is not already present in the class. OpenJPA\n      * requires that a no-arg constructor (whether created by the compiler\n      * or by the user) be present in a PC.\n      */\n@@ -197,7 +197,7 @@ public boolean getAddDefaultConstructor() {\n \n     /**\n      * A boolean indicating whether the enhancer should add a no-args\n-     * constructor if one is not already present in the class.  OpenJPA\n+     * constructor if one is not already present in the class. OpenJPA\n      * requires that a no-arg constructor (whether created by the compiler\n      * or by the user) be present in a PC.\n      */\n@@ -224,34 +224,32 @@ public void setEnforcePropertyRestrictions(boolean fail) {\n     }\n \n     /**\n-     * The base build directory to generate code to.  The proper package\n-     * structure will be created beneath this directory.  Defaults to\n+     * The base build directory to generate code to. The proper package\n+     * structure will be created beneath this directory. Defaults to\n      * overwriting the existing class file if null.\n      */\n     public File getDirectory() {\n         return _dir;\n     }\n \n     /**\n-     * The base build directory to generate code to.  The proper package\n-     * structure will be creaed beneath this directory.  Defaults to\n+     * The base build directory to generate code to. The proper package\n+     * structure will be creaed beneath this directory. Defaults to\n      * overwriting the existing class file if null.\n      */\n     public void setDirectory(File dir) {\n         _dir = dir;\n     }\n \n     /**\n-     * Return the current {@link BytecodeWriter} to write to\n-     * or null if none.\n+     * Return the current {@link BytecodeWriter} to write to or null if none.\n      */\n     public BytecodeWriter getBytecodeWriter() {\n         return _writer;\n     }\n \n     /**\n-     * Set the {@link BytecodeWriter} to write the bytecode\n-     * to or null if none.\n+     * Set the {@link BytecodeWriter} to write the bytecode to or null if none.\n      */\n     public void setBytecodeWriter(BytecodeWriter writer) {\n         _writer = writer;\n@@ -260,7 +258,7 @@ public void setBytecodeWriter(BytecodeWriter writer) {\n     /**\n      * Perform bytecode enhancements.\n      *\n-     * @return    <code>ENHANCE_*</code> constant\n+     * @return <code>ENHANCE_*</code> constant\n      */\n     public int run() {\n         if (_log.isTraceEnabled())\n@@ -343,7 +341,7 @@ else if (_dir == null)\n \n     /**\n      * Validate that the methods in this property-access instance are\n-     * written correctly.  This method also gathers information on each\n+     * written correctly. This method also gathers information on each\n      * property's backing field.\n      */\n     private void validateProperties() {\n@@ -435,7 +433,7 @@ static BCField getAssignedField(BCMethod meth) {\n     }\n \n     /**\n-     * Return the field returned / assigned by <code>meth</code>.  Returns\n+     * Return the field returned / assigned by <code>meth</code>. Returns\n      * null if non-fields (methods, literals, parameters, variables) are\n      * returned, or if non-parameters are assigned to fields.\n      */\n@@ -527,7 +525,7 @@ private void processViolations() {\n \n     /**\n      * Replaced all direct access to managed fields with the appropriate\n-     * pcGet/pcSet method.  Note that this includes access to fields\n+     * pcGet/pcSet method. Note that this includes access to fields\n      * owned by PersistenceCapable classes other than this one.\n      */\n     private void replaceAndValidateFieldAccess() {\n@@ -558,14 +556,13 @@ private void replaceAndValidateFieldAccess() {\n      * Replaces all instructions matching the given template in the given\n      * code block with calls to the appropriate generated getter/setter.\n      *\n-     * @param    code    the code block to modify; the code iterator will\n+     * @param code the code block to modify; the code iterator will\n      * be placed before the first instruction on method start,\n-     * and will be after the last instruction on method\n-     * completion\n-     * @param    ins        the template instruction to search for; either a\n+     * and will be after the last instruction on method completion\n+     * @param ins the template instruction to search for; either a\n      * getfield or putfield instruction\n-     * @param    get        boolean indicating if this is a get instruction\n-     * @param    stat    template invokestatic instruction to replace with\n+     * @param get boolean indicating if this is a get instruction\n+     * @param stat template invokestatic instruction to replace with\n      */\n     private void replaceAndValidateFieldAccess(Code code, Instruction ins,\n         boolean get, Instruction stat) {\n@@ -645,11 +642,10 @@ private boolean isBackingFieldOfAnotherProperty(String name, Code code) {\n      * Helper method to return the declaring PersistenceCapable class of\n      * the given field.\n      *\n-     * @param    fieldName    the name of the field\n-     * @param    owner        the nominal owner of the field\n+     * @param fieldName the name of the field\n+     * @param owner the nominal owner of the field\n      * @return the metadata for the PersistenceCapable type that\n-     * declares the field (and therefore has the static\n-     * method), or null if none\n+     * declares the field (and therefore has the static method), or null if none\n      */\n     private ClassMetaData getPersistenceCapableOwner(String fieldName,\n         Class owner) {\n@@ -672,7 +668,7 @@ private ClassMetaData getPersistenceCapableOwner(String fieldName,\n \n     /**\n      * Adds all synthetic methods to the bytecode by delegating to\n-     * the various addXXXMethods () functions in this class.  Includes\n+     * the various addXXXMethods () functions in this class. Includes\n      * all static field access methods.\n      * Note that the 'stock' methods like <code>pcIsTransactional</code>,\n      * <code>pcFetchObjectId</code>, etc are defined only in the\n@@ -775,7 +771,7 @@ private void addClearFieldsMethod()\n      * These methods are used by the impl helper to create new\n      * managed instances efficiently without reflection.\n      *\n-     * @param    oid        set to true to mimic the method version that takes\n+     * @param oid set to true to mimic the method version that takes\n      * an oid value as well as a state manager\n      */\n     private void addNewInstanceMethod(boolean oid) {\n@@ -867,8 +863,7 @@ private void addManagedFieldCountMethod() {\n \n     /**\n      * Adds the {@link PersistenceCapable#pcProvideField} and\n-     * {@link PersistenceCapable#pcProvideFields} methods to\n-     * the bytecode.\n+     * {@link PersistenceCapable#pcProvideFields} methods to the bytecode.\n      */\n     private void addProvideFieldsMethods()\n         throws NoSuchMethodException {\n@@ -918,8 +913,7 @@ private void addProvideFieldsMethods()\n \n     /**\n      * Adds the {@link PersistenceCapable#pcReplaceField} and\n-     * {@link PersistenceCapable#pcReplaceFields} methods to\n-     * the bytecode.\n+     * {@link PersistenceCapable#pcReplaceFields} methods to the bytecode.\n      */\n     private void addReplaceFieldsMethods()\n         throws NoSuchMethodException {\n@@ -973,8 +967,7 @@ private void addReplaceFieldsMethods()\n     }\n \n     /**\n-     * Adds the {@link PersistenceCapable#pcCopyFields} method to the\n-     * bytecode.\n+     * Adds the {@link PersistenceCapable#pcCopyFields} method to the bytecode.\n      */\n     private void addCopyFieldsMethod()\n         throws NoSuchMethodException {\n@@ -1024,7 +1017,7 @@ private void addCopyFieldsMethod()\n \n     /**\n      * Helper method to add the code common to the beginning of both the\n-     * pcReplaceField method and the pcProvideField method.  This includes\n+     * pcReplaceField method and the pcProvideField method. This includes\n      * calculating the relative field number of the desired field and calling\n      * the superclass if necessary.\n      *\n@@ -1070,7 +1063,7 @@ private int beginSwitchMethod(String name, Code code) {\n      * This helper method, given the pcReplaceField or pcProvideField\n      * method, adds the bytecode for the corresponding 'plural' version\n      * of the method -- the version that takes an int[] of fields to\n-     * to access rather than a single field.  The multiple fields version\n+     * to access rather than a single field. The multiple fields version\n      * simply loops through the provided indexes and delegates to the\n      * singular version for each one.\n      */\n@@ -1198,7 +1191,7 @@ private void addStockMethods()\n     }\n \n     /**\n-     * Helper method to add a stock method to the bytecode.  Each\n+     * Helper method to add a stock method to the bytecode. Each\n      * stock method simply delegates to a corresponding StateManager method.\n      * Given the StateManager method, then, this function translates it into\n      * the wrapper method that should be added to the bytecode.\n@@ -1236,8 +1229,7 @@ else if (!returnType.equals(void.class))\n     }\n \n     /**\n-     * Adds the {@link PersistenceCapable#pcGetVersion}\n-     * method to the bytecode.\n+     * Adds the {@link PersistenceCapable#pcGetVersion} method to the bytecode.\n      */\n     private void addGetVersionMethod()\n         throws NoSuchMethodException {\n@@ -1668,7 +1660,7 @@ private Boolean usesClassStringIdConstructor() {\n \n     /**\n      * If the given field is a wrapper-type single field identity primary key,\n-     * return its corresponding primitive class.  Else return the field type.\n+     * return its corresponding primitive class. Else return the field type.\n      */\n     private Class unwrapSingleFieldIdentity(FieldMetaData fmd) {\n         if (!fmd.getDefiningMetaData().isOpenJPAIdentity())\n@@ -1781,18 +1773,17 @@ else if (usesClsString == Boolean.FALSE)\n \n     /**\n      * When communicating with the StateManager, many methods are used\n-     * depending on the class of state being passed.  This method,\n+     * depending on the class of state being passed. This method,\n      * given the type of information being passed and the prefix\n      * ('provided', 'replace', etc) of the method to\n      * call, returns the StateManager method that should be used.\n      *\n-     * @param    type        the type of state being passed\n-     * @param    prefix        the prefix of the method to call; all methods\n-     * end in '[state type]Field'; only the prefix\n-     * varies\n-     * @param    get            true if receiving information from the\n+     * @param type the type of state being passed\n+     * @param prefix the prefix of the method to call; all methods\n+     * end in '[state type]Field'; only the prefix varies\n+     * @param get true if receiving information from the\n      * StateManager, false if passing it to the SM\n-     * @param    curValue    true if the current state value is passed to\n+     * @param curValue true if the current state value is passed to\n      * the StateManager as an extra argument\n      */\n     private Method getStateManagerMethod(Class type, String prefix,\n@@ -1802,17 +1793,15 @@ private Method getStateManagerMethod(Class type, String prefix,\n     }\n \n     /**\n-     * Return the method of the given owner type matching the given\n-     * criteria.\n+     * Return the method of the given owner type matching the given criteria.\n      *\n-     * @param    type        the type of state being passed\n-     * @param    prefix        the prefix of the method to call; all methods\n-     * end in '[state type]Field'; only the prefix\n-     * varies\n-     * @param    get            true if receiving information from the\n+     * @param type the type of state being passed\n+     * @param prefix the prefix of the method to call; all methods\n+     * end in '[state type]Field'; only the prefix varies\n+     * @param get true if receiving information from the\n      * owner, false if passing it to the owner\n-     * @param    haspc        true if the pc is passed as an extra argument\n-     * @param    curValue    true if the current state value is passed to\n+     * @param haspc true if the pc is passed as an extra argument\n+     * @param curValue true if the current state value is passed to\n      * the owner as an extra argument\n      */\n     private Method getMethod(Class owner, Class type, String prefix,\n@@ -2036,7 +2025,7 @@ else if (!fmd.isPrimaryKey() && !fmd.isInDefaultFetchGroup())\n \n     /**\n      * Adds the code to properly handle PersistenceCapable serialization\n-     * to the bytecode.  This includes creating and initializing the\n+     * to the bytecode. This includes creating and initializing the\n      * static <code>serialVersionUID</code> constant if not already defined,\n      * as well as creating a custom <code>writeObject</code> method if the\n      * class is Serializable and does not define them.\n@@ -2375,7 +2364,7 @@ private void writeIsDetachedMethod(Code code)\n \n     /**\n      * Compare the given field to its Java default, returning the\n-     * comparison instruction.  The field value will already be on the stack.\n+     * comparison instruction. The field value will already be on the stack.\n      */\n     private static JumpInstruction ifDefaultValue(Code code,\n         FieldMetaData fmd) {\n@@ -2440,7 +2429,7 @@ private Code getOrCreateClassInitCode(boolean replaceLast) {\n      * Adds bytecode modifying the cloning behavior of the class being\n      * enhanced to correctly replace the <code>pcFlags</code> and\n      * <code>pcStateManager</code> instance fields of any clone created with\n-     * their default values.  Also, if this class is the base PC type\n+     * their default values. Also, if this class is the base PC type\n      * and does not declared a clone method, one will be added.\n      */\n     private void addCloningCode() {\n@@ -2664,8 +2653,8 @@ private void addAccessors()\n      * The generated method interacts with the instance state and the\n      * StateManager to get the value of the field.\n      *\n-     * @param    index    the relative number of the field\n-     * @param    fmd        metadata about the field to get\n+     * @param index the relative number of the field\n+     * @param fmd metadata about the field to get\n      */\n     private void addGetMethod(int index, FieldMetaData fmd)\n         throws NoSuchMethodException {\n@@ -2733,8 +2722,8 @@ private void addGetMethod(int index, FieldMetaData fmd)\n      * The generated method interacts with the instance state and the\n      * StateManager to set the value of the field.\n      *\n-     * @param    index    the relative number of the field\n-     * @param    fmd        metadata about the field to set\n+     * @param index the relative number of the field\n+     * @param fmd metadata about the field to set\n      */\n     private void addSetMethod(int index, FieldMetaData fmd)\n         throws NoSuchMethodException {\n@@ -3209,7 +3198,7 @@ private void addGetManagedValueCode(Code code, FieldMetaData fmd)\n         throws NoSuchMethodException {\n         if (_meta.getAccessType() == ClassMetaData.ACCESS_FIELD)\n             code.getfield().setField(fmd.getName(), fmd.getDeclaredType());\n-        else    // property\n+        else // property\n         {\n             Method meth = (Method) fmd.getBackingMember();\n             code.invokevirtual().setMethod(PRE + meth.getName(),\n@@ -3227,7 +3216,7 @@ private void addSetManagedValueCode(Code code, FieldMetaData fmd)\n         throws NoSuchMethodException {\n         if (_meta.getAccessType() == ClassMetaData.ACCESS_FIELD)\n             code.putfield().setField(fmd.getName(), fmd.getDeclaredType());\n-        else    // property\n+        else // property\n             code.invokevirtual().setMethod(PRE + getSetterName(fmd),\n                 void.class, new Class[]{ fmd.getDeclaredType() });\n     }\n@@ -3338,47 +3327,44 @@ private static void transferCodeAttributes(BCMethod from, BCMethod to) {\n     }\n \n     /**\n-     * <p>Usage: java org.apache.openjpa.enhance.PCEnhancer [option]*\n-     * &lt;class name | .java file | .class file | .jdo file&gt;+</p>\n-     * <p/>\n-     * <p>Where the following options are recognized.\n+     * Usage: java org.apache.openjpa.enhance.PCEnhancer [option]*\n+     * &lt;class name | .java file | .class file | .jdo file&gt;+\n+     *  Where the following options are recognized.\n      * <ul>\n      * <li><i>-properties/-p &lt;properties file&gt;</i>: The path to a OpenJPA\n-     * properties file containing information as outlined in \n+     * properties file containing information as outlined in\n      * {@link Configuration}; optional.</li>\n      * <li><i>-&lt;property name&gt; &lt;property value&gt;</i>: All bean\n      * properties of the standard OpenJPA {@link OpenJPAConfiguration} can be\n      * set by using their names and supplying a value; for example:\n      * <li><i>-directory/-d &lt;build directory&gt;</i>: The path to the base\n-     * directory where enhanced classes are stored.  By default, the\n+     * directory where enhanced classes are stored. By default, the\n      * enhancer overwrites the original .class file with the enhanced\n-     * version.  Use this option to store the generated .class file in\n-     * another directory.  The package structure will be created beneath\n+     * version. Use this option to store the generated .class file in\n+     * another directory. The package structure will be created beneath\n      * the given directory.</li>\n      * <li><i>-addDefaultConstructor/-adc [true/t | false/f]</i>: Whether to\n      * add a default constructor to persistent classes missing one, as\n-     * opposed to throwing an exception.  Defaults to true.</li>\n+     * opposed to throwing an exception. Defaults to true.</li>\n      * <li><i>-tmpClassLoader/-tcl [true/t | false/f]</i>: Whether to\n      * load the pre-enhanced classes using a temporary class loader.\n-     * Defaults to true.  Set this to false when attempting to debug\n+     * Defaults to true. Set this to false when attempting to debug\n      * class loading errors.</li>\n      * <li><i>-enforcePropertyRestrictions/-epr [true/t | false/f]</i>:\n      * Whether to throw an exception if a PROPERTY access entity appears\n-     * to be violating standard property restrictions.  Defaults to\n-     * false.</li>\n-     * </ul></p>\n-     * <p/>\n-     * <p>Each additional argument can be either the full class name of the\n+     * to be violating standard property restrictions. Defaults to false.</li>\n+     * </ul>\n+     *  Each additional argument can be either the full class name of the\n      * type to enhance, the path to the .java file for the type, the path to\n      * the .class file for the type, or the path to a .jdo file listing one\n      * or more types to enhance.\n      * If the type being enhanced has metadata, it will be enhanced as a\n-     * persistence capable class.  If not, it will be considered a persistence\n+     * persistence capable class. If not, it will be considered a persistence\n      * aware class, and all access to fields of persistence capable classes\n-     * will be replaced by the appropriate\tget/set method.  If the type\n+     * will be replaced by the appropriate\tget/set method. If the type\n      * explicitly declares the persistence-capable interface, it will\n-     * not be enhanced.  Thus, it is safe to invoke the enhancer on classes\n-     * that are already enhanced.</p>\n+     * not be enhanced. Thus, it is safe to invoke the enhancer on classes\n+     * that are already enhanced.\n      */\n     public static void main(String[] args)\n         throws IOException {\n@@ -3395,7 +3381,7 @@ public static void main(String[] args)\n     }\n \n     /**\n-     * Run the tool.  Returns false if invalid options given.\n+     * Run the tool. Returns false if invalid options given.\n      */\n     public static boolean run(OpenJPAConfiguration conf, String[] args,\n         Options opts)\n@@ -3493,7 +3479,7 @@ else if (status == ENHANCE_AWARE) {\n     }\n \n     /**\n-     *\tRun flags.\n+     * Run flags.\n      */\n     public static class Flags {\n \n@@ -3503,9 +3489,8 @@ else if (status == ENHANCE_AWARE) {\n \t\tpublic boolean enforcePropertyRestrictions = false;\n \t}\n \n-\n \t/**\n- \t *\tPlugin interface for additional enhancement.\n+ \t * Plugin interface for additional enhancement.\n \t */\n \tpublic static interface AuxiliaryEnhancer\n \t{"},{"sha":"5850aaea49965df0ddbb5d6b441e5e72da78b631","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCRegistry.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -23,7 +23,7 @@\n import java.util.WeakHashMap;\n \n /**\n- * <p>Tracks registered persistence-capable classes.</p>\n+ * Tracks registered persistence-capable classes.\n  *\n  * @since 4.0\n  * @author Abe White\n@@ -171,10 +171,10 @@ public static void copyKeyFieldsFromObjectId(Class pcClass,\n      * @param fieldTypes managed field types\n      * @param fieldFlags managed field flags\n      * @param sup the most immediate persistent superclass\n-     * @param    pcClass        the <code>PersistenceCapable</code> class\n-     * @param    fieldNames managed field names\n-     * @param    alias        the class alias\n-     * @param    pc an instance of the class, if not abstract\n+     * @param pcClass the <code>PersistenceCapable</code> class\n+     * @param fieldNames managed field names\n+     * @param alias the class alias\n+     * @param pc an instance of the class, if not abstract\n      */\n     public static void register(Class pcClass, String[] fieldNames,\n         Class[] fieldTypes, byte[] fieldFlags, Class sup, String alias,\n@@ -234,8 +234,7 @@ private static Meta getMeta(Class pcClass) {\n     }\n \n     /**\n-     *\tThis is a helper class to manage metadata per persistence-capable\n-     *\tclass.\n+     * This is a helper class to manage metadata per persistence-capable class.\n      */\n     private static class Meta {\n "},{"sha":"89cea30756f608f0233d636d4b09ef2db1467d02","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PersistenceCapable.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PersistenceCapable.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PersistenceCapable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PersistenceCapable.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,"},{"sha":"59bce9136ce8b29d3c69103dca6c3becf978c572","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/StateManager.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/StateManager.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/StateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/StateManager.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -19,7 +19,7 @@\n import java.io.ObjectOutput;\n \n /**\n- * <p>Internal state manager for managed instances.</p>\n+ * Internal state manager for managed instances.\n  */\n public interface StateManager {\n     // DO NOT ADD ADDITIONAL DEPENDENCIES TO THIS CLASS\n@@ -270,13 +270,12 @@ public void providedObjectField(PersistenceCapable pc, int idx,\n     public double replaceDoubleField(PersistenceCapable pc, int idx);\n \n     /**\n-     *\tReplace state callback.\n+     * Replace state callback.\n      */\n     public String replaceStringField(PersistenceCapable pc, int idx);\n \n-\n \t/**\n-\t *\tReplace state callback.\n+\t * Replace state callback.\n \t */\n     public Object replaceObjectField (PersistenceCapable pc, int idx);\n }"},{"sha":"493de0befe229f8466f150a81877e722252a1e97","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/AbstractLifecycleListener.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/AbstractLifecycleListener.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/AbstractLifecycleListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/AbstractLifecycleListener.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,8 +16,8 @@\n package org.apache.openjpa.event;\n \n /**\n- * <p>Abstract implementation of the {@link LifecycleListener} interface\n- * which delegates events to a single method.</p>\n+ * Abstract implementation of the {@link LifecycleListener} interface\n+ * which delegates events to a single method.\n  *\n  * @author Steve Kim\n  * @author Abe White"},{"sha":"f19709f5dcbafc59bcb3d4e6c6002d31db63d6bd","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/AbstractRemoteCommitProvider.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/AbstractRemoteCommitProvider.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/AbstractRemoteCommitProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/AbstractRemoteCommitProvider.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -24,7 +24,7 @@\n import org.apache.openjpa.lib.util.Localizer;\n \n /**\n- * Abstract implementation of {@link RemoteCommitProvider}.  Obtains handles\n+ * Abstract implementation of {@link RemoteCommitProvider}. Obtains handles\n  * to the event manager and log.\n  *\n  * @author Patrick Linskey"},{"sha":"94d4029ccddb2408129c007392955e751ed08768","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/AbstractTransactionListener.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/AbstractTransactionListener.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/AbstractTransactionListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/AbstractTransactionListener.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,8 +16,8 @@\n package org.apache.openjpa.event;\n \n /**\n- * <p>Abstract implementation of the {@link TransactionListener} interface\n- * that provides no-op implementations of all methods.</p>\n+ * Abstract implementation of the {@link TransactionListener} interface\n+ * that provides no-op implementations of all methods.\n  *\n  * @author Abe White\n  * @since 3.0\n@@ -26,8 +26,8 @@\n     implements TransactionListener {\n \n     /**\n-     * Catch-all for unhandled events.  This method is called by all other\n-     * event methods if you do not override them.  Does nothing by default.\n+     * Catch-all for unhandled events. This method is called by all other\n+     * event methods if you do not override them. Does nothing by default.\n      */\n     protected void eventOccurred(TransactionEvent event) {\n     }"},{"sha":"ae668b09a54f17584c61518fb0a90b34251dc053","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/AttachListener.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/AttachListener.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/AttachListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/AttachListener.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.event;\n \n /**\n- * <p>Listener for when a detached instance is attached.</p>\n+ * Listener for when a detached instance is attached.\n  *\n  * @author Steve Kim\n  */"},{"sha":"b109228d9d48f360634dd133ce51a52fd82ba3ff","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/BeanLifecycleCallbacks.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/BeanLifecycleCallbacks.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/BeanLifecycleCallbacks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/BeanLifecycleCallbacks.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -34,7 +34,7 @@\n     private Object _listener;\n \n     /**\n-     * Constructor.  Make the callback on an instance of the given type.\n+     * Constructor. Make the callback on an instance of the given type.\n      *\n      * @arg whether another argunent is expected such as AfterDetach\n      */\n@@ -44,7 +44,7 @@ public BeanLifecycleCallbacks(Class cls, String method, boolean arg) {\n     }\n \n     /**\n-     * Constructor.  Make the callback on an instance of the given type.\n+     * Constructor. Make the callback on an instance of the given type.\n      */\n     public BeanLifecycleCallbacks(Class cls, Method method, boolean arg) {\n         super(method, arg);"},{"sha":"9c5e0d3a41293bcc820cbd074df4d6f5765e7b01","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/BeginTransactionListener.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/BeginTransactionListener.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/BeginTransactionListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/BeginTransactionListener.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.event;\n \n /**\n- * <p>Notified when transactions begin.</p>\n+ * Notified when transactions begin.\n  *\n  * @author Patrick Linskey\n  * @author Abe White\n@@ -27,7 +27,7 @@\n     /**\n      * Notification that a transaction has begun.\n      *\n-     * @see    TransactionEvent#AFTER_BEGIN\n+     * @see TransactionEvent#AFTER_BEGIN\n      */\n     public void afterBegin(TransactionEvent event);\n }"},{"sha":"0f62a42aa3384e39a5e0da1808d75fb35165abc0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/CallbackModes.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/CallbackModes.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/CallbackModes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/CallbackModes.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.event;\n \n /**\n- * <p>Callback handling constants.</p>\n+ * Callback handling constants.\n  *\n  * @author Steve Kim\n  * @since 4.0\n@@ -44,7 +44,7 @@\n     public static final int CALLBACK_RETHROW = 2 << 3;\n \n     /**\n-     *\tFlag to always rollback on a callback exception.\n+     * Flag to always rollback on a callback exception.\n      */\n     public static final int CALLBACK_ROLLBACK = 2 << 4;\n }"},{"sha":"21cacb69f4e357171343d97fdc511736065026eb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/ClearListener.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/ClearListener.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/ClearListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/ClearListener.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.event;\n \n /**\n- * <p>Listener for when persistent state is cleared from an instance.</p>\n+ * Listener for when persistent state is cleared from an instance.\n  *\n  * @author Steve Kim\n  * @author Abe White"},{"sha":"9d16fab929bb8063b36b69c72e91cd7ef07db948","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/DeleteListener.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/DeleteListener.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/DeleteListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/DeleteListener.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.event;\n \n /**\n- * <p>Listener for when a persistent instance is deleted.</p>\n+ * Listener for when a persistent instance is deleted.\n  *\n  * @author Steve Kim\n  * @author Abe White"},{"sha":"53138ab0d07d6c765b76d08c48283dbca5bddcf3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/DetachListener.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/DetachListener.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/DetachListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/DetachListener.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.event;\n \n /**\n- * <p>Listener for when a persistent instance is detached.</p>\n+ * Listener for when a persistent instance is detached.\n  *\n  * @author Steve Kim\n  */"},{"sha":"24ba1e5deb6a7232d1109fdb02798ae408fceb13","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/DirtyListener.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/DirtyListener.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/DirtyListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/DirtyListener.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.event;\n \n /**\n- * <p>Listener for when a persistent instance becomes dirty.</p>\n+ * Listener for when a persistent instance becomes dirty.\n  *\n  * @author Steve Kim\n  * @author Abe White\n@@ -39,7 +39,7 @@\n     public void beforeDirtyFlushed(LifecycleEvent event);\n \n     /**\n-     *\tInvoked after the first change is applied to a flushed instance.\n+     * Invoked after the first change is applied to a flushed instance.\n      */\n     public void afterDirtyFlushed(LifecycleEvent event);\n }"},{"sha":"6d2983d58a4978cf3c5ae842f5603ddbe880ffff","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/EndTransactionListener.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/EndTransactionListener.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/EndTransactionListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/EndTransactionListener.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.event;\n \n /**\n- * <p>Notified when transactions end.</p>\n+ * Notified when transactions end.\n  *\n  * @author Patrick Linskey\n  * @author Abe White\n@@ -27,44 +27,44 @@\n     /**\n      * Notification that the next flush is for the transaction commit.\n      *\n-     * @see    TransactionEvent#BEFORE_COMMIT\n+     * @see TransactionEvent#BEFORE_COMMIT\n      */\n     public void beforeCommit(TransactionEvent event);\n \n     /**\n      * Notification that a transaction has successfully committed.\n      *\n-     * @see    TransactionEvent#AFTER_COMMIT\n+     * @see TransactionEvent#AFTER_COMMIT\n      */\n     public void afterCommit(TransactionEvent event);\n \n     /**\n      * Notification that a transaction has been rolled back.\n      *\n-     * @see    TransactionEvent#AFTER_ROLLBACK\n+     * @see TransactionEvent#AFTER_ROLLBACK\n      */\n     public void afterRollback(TransactionEvent event);\n \n     /**\n      * Notification that state transitions are complete.\n      *\n-     * @see    TransactionEvent#AFTER_STATE_TRANSITIONS\n+     * @see TransactionEvent#AFTER_STATE_TRANSITIONS\n      */\n     public void afterStateTransitions(TransactionEvent event);\n \n     /**\n      * Notification that a transaction has successfully committed and\n      * the transaction is no longer active.\n      *\n-     * @see    TransactionEvent#AFTER_COMMIT_COMPLETE\n+     * @see TransactionEvent#AFTER_COMMIT_COMPLETE\n      */\n     public void afterCommitComplete(TransactionEvent event);\n \n     /**\n-     *\tNotification that a transaction has been rolled back and\n-     *\tthe transaction is no longer active.\n+     * Notification that a transaction has been rolled back and\n+     * the transaction is no longer active.\n      *\n-     *\t@see    TransactionEvent#AFTER_ROLLBACK_COMPLETE\n+     * @see TransactionEvent#AFTER_ROLLBACK_COMPLETE\n      */\n     public void afterRollbackComplete(TransactionEvent event);\n }"},{"sha":"4b5d5fc862c4bf1ededee605d2f18e69c74b52fc","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/ExceptionOrphanedKeyAction.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/ExceptionOrphanedKeyAction.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/ExceptionOrphanedKeyAction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/ExceptionOrphanedKeyAction.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -21,8 +21,7 @@\n import org.apache.openjpa.util.ObjectNotFoundException;\n \n /**\n- * <p>Throw a {@link ObjectNotFoundException} when an orphaned key\n- * is discovered.</p>\n+ * Throw a {@link ObjectNotFoundException} when an orphaned key is discovered.\n  *\n  * @author Abe White\n  * @since 3.2.2"},{"sha":"522731a3d6097b74e114819ae61785a9a6cf03c9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/FlushTransactionListener.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/FlushTransactionListener.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/FlushTransactionListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/FlushTransactionListener.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.event;\n \n /**\n- * <p>Notified on transaction flush.</p>\n+ * Notified on transaction flush.\n  *\n  * @author Patrick Linskey\n  * @author Abe White\n@@ -27,14 +27,14 @@\n     /**\n      * Notification that a transaction is about to flush all object changes.\n      *\n-     * @see    TransactionEvent#BEFORE_FLUSH\n+     * @see TransactionEvent#BEFORE_FLUSH\n      */\n     public void beforeFlush(TransactionEvent event);\n \n     /**\n      * Notification that a transaction has flushed all object changes.\n      *\n-     * @see    TransactionEvent#AFTER_FLUSH\n+     * @see TransactionEvent#AFTER_FLUSH\n      */\n     public void afterFlush(TransactionEvent event);\n }"},{"sha":"c451dff95fe5821f1e28310db48d7dc986a3ed97","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/JMSRemoteCommitProvider.java","status":"modified","additions":24,"deletions":27,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/JMSRemoteCommitProvider.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/JMSRemoteCommitProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/JMSRemoteCommitProvider.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -80,7 +80,7 @@ public void setTopicConnectionFactory(String name) {\n \n     /**\n      * The number of times to attempt to reconnect after a JMS send exception\n-     * is detected.  Defaults to 0, meaning no attempt to reconnect is made;\n+     * is detected. Defaults to 0, meaning no attempt to reconnect is made;\n      * the exception is logged and ignored.\n      */\n     public void setExceptionReconnectAttempts(int attempts) {\n@@ -89,7 +89,7 @@ public void setExceptionReconnectAttempts(int attempts) {\n \n     /**\n      * Set a map of properties to pass to the {@link InitialContext}\n-     * constructor for JNDI lookups.  Implementation of\n+     * constructor for JNDI lookups. Implementation of\n      * {@link GenericConfigurable}.\n      */\n     public void setInto(Map m) {\n@@ -102,8 +102,7 @@ public void setInto(Map m) {\n     }\n \n     /**\n-     * Returns a new {@link Context} object for use by this\n-     * provider.\n+     * Returns a new {@link Context} object for use by this provider.\n      */\n     protected Context newContext()\n         throws NamingException {\n@@ -174,29 +173,27 @@ private void connect() {\n             // create a subscriber.\n             TopicSubscriber s = _session.createSubscriber(topic, null,\n                 /* noLocal: */ true);\n-            MessageListener l = getMessageListener();\n-            s.setMessageListener(l);\n-            _connection.start();\n-            _connection.setExceptionListener(this);\n-            if (log.isInfoEnabled())\n-                log.info(s_loc.get(\"jms-start-listener\", _topicName));\n-        }\n-        catch (OpenJPAException ke) {\n-            throw ke;\n-        }\n-        catch (Exception e) {\n-            throw new UserException(s_loc.get(\"jms-provider-config\",\n-                _topicName, _tcfName), e).setFatal(true);\n-        }\n-    }\n+ MessageListener l = getMessageListener();\n+ s.setMessageListener(l);\n+ _connection.start();\n+ _connection.setExceptionListener(this);\n+ if (log.isInfoEnabled())\n+ log.info(s_loc.get(\"jms-start-listener\", _topicName));\n+ }\n+ catch (OpenJPAException ke) {\n+ throw ke;\n+ }\n+ catch (Exception e) {\n+ throw new UserException(s_loc.get(\"jms-provider-config\",\n+ _topicName, _tcfName), e).setFatal(true);\n+ }\n+ }\n \n-    /**\n-     * <p>Returns a {@link javax.jms.MessageListener} capable of\n-     * understanding and processing messages created by\n-     * {@link #createMessage}.</p>\n-     * <p/>\n-     * <p>The listener returned by this method is responsible for\n-     * notifying the provider that a remote event has been received.</p>\n+    /* *\n+     * Returns a {@link javax.jms.MessageListener} capable of\n+     * understanding and processing messages created by {@link #createMessage}.\n+     *  The listener returned by this method is responsible for\n+     * notifying the provider that a remote event has been received.\n      */\n     protected MessageListener getMessageListener() {\n         return new MessageListener() {"},{"sha":"e62190bb42b25971df3d70f85bca909cf6e3ab89","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleCallbacks.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleCallbacks.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleCallbacks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleCallbacks.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,"},{"sha":"cff5c2bd9643908040bbf2ce0f681f86631c0d84","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEvent.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEvent.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEvent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEvent.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,8 +18,8 @@\n import java.util.EventObject;\n \n /**\n- * <p>Lifecycle event on a persistent instance.  The event source\n- * is the persistent instance whose state has changed.</p>\n+ * Lifecycle event on a persistent instance. The event source\n+ * is the persistent instance whose state has changed.\n  *\n  * @author Steve Kim\n  * @author Abe White\n@@ -148,8 +148,8 @@\n     /**\n      * Constructor.\n      *\n-     * @param    pc        the persistent instance that triggered the event\n-     * @param    type    the event type\n+     * @param pc the persistent instance that triggered the event\n+     * @param type the event type\n      */\n     public LifecycleEvent(Object pc, int type) {\n         this(pc, null, type);\n@@ -158,9 +158,9 @@ public LifecycleEvent(Object pc, int type) {\n     /**\n      * Constructor.\n      *\n-     * @param    pc        the persistent instance that triggered the event\n-     * @param    type    the event type\n-     * @param    related    the related instance such as the detached copy.\n+     * @param pc the persistent instance that triggered the event\n+     * @param type the event type\n+     * @param related the related instance such as the detached copy.\n      */\n     public LifecycleEvent(Object pc, Object related, int type) {\n         super(pc);\n@@ -176,7 +176,7 @@ public int getType() {\n     }\n \n     /**\n-     *\tReturn the related object.\n+     * Return the related object.\n \t */\n \tpublic Object getRelated ()\n \t{"},{"sha":"7cf15666050fcd054d2171ac5a0bbf5e3392da86","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","status":"modified","additions":11,"deletions":13,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -27,15 +27,13 @@\n import org.apache.openjpa.meta.MetaDataDefaults;\n \n /**\n- * <p>Manager that can be used to track and notify listeners on lifecycle\n- * events.</p>\n- * <p/>\n- * <p>This class is optimized for event firing rather than for adding and\n- * removing listeners, which are O(n) operations.  This class also does not\n+ * Manager that can be used to track and notify listeners on lifecycle events.\n+ *  This class is optimized for event firing rather than for adding and\n+ * removing listeners, which are O(n) operations. This class also does not\n  * maintain perfect set semantics for listeners; it is possible to wind up\n  * having the same listener invoked multiple times for a single event if it\n  * is added to this manager multiple times with different classes, or with\n- * a base class and its subclass.</p>\n+ * a base class and its subclass.\n  *\n  * @author Steve Kim\n  * @author Abe White\n@@ -47,7 +45,7 @@\n \n     private static final Exception[] EMPTY_EXCEPTIONS = new Exception[0];\n \n-    private Map _classListeners = null;    // class -> listener list\n+    private Map _classListeners = null; // class -> listener list\n     private ListenerList _listeners = null;\n     private List _addListeners = new LinkedList();\n     private List _remListeners = new LinkedList();\n@@ -56,7 +54,7 @@\n     private boolean _fail = false;\n \n     /**\n-     * Register a lifecycle listener for the given classes.  If the classes\n+     * Register a lifecycle listener for the given classes. If the classes\n      * array is null, register for all classes.\n      */\n     public synchronized void addListener(Object listener, Class[] classes) {\n@@ -329,7 +327,7 @@ private void makeCallbacks(Object source, Object related,\n \n     /**\n      * Fire an event with the given source and type to the given list of\n-     * listeners.  The event may have already been constructed.\n+     * listeners. The event may have already been constructed.\n      */\n     private Object fireEvent(LifecycleEvent ev, Object source, Object rel,\n         int type, ListenerList listeners, boolean mock, boolean failFast,\n@@ -497,8 +495,8 @@ else if (listener instanceof ListenerAdapter) {\n     }\n \n     /**\n-     *\tExtended list that tracks what event types its elements care about.\n-     *\tMaintains set semantics as well.\n+     * Extended list that tracks what event types its elements care about.\n+     * Maintains set semantics as well.\n      */\n     public static class ListenerList\n         extends ArrayList {\n@@ -538,7 +536,7 @@ public boolean remove(Object listener) {\n         }\n \n         /**\n-         *\tReturn a mask of the event types the given listener processes.\n+         * Return a mask of the event types the given listener processes.\n          */\n         private static int getEventTypes(Object listener) {\n             int types = 0;"},{"sha":"98326a5f339925160ab1ac705ccab11d0ddaef00","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleListener.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleListener.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleListener.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.event;\n \n /**\n- * <p>Interface for listening to all {@link LifecycleEvent}s.</p>\n+ * Interface for listening to all {@link LifecycleEvent}s.\n  *\n  * @author Steve Kim\n  * @author Abe White"},{"sha":"7a25d2a7ce0735625b24aba9da0f3ddef0cd0bd9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/LoadListener.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/LoadListener.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/LoadListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/LoadListener.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.event;\n \n /**\n- * <p>Listener for when state is loaded into a persistent instnace.</p>\n+ * Listener for when state is loaded into a persistent instnace.\n  *\n  * @author Steve Kim\n  * @author Abe White"},{"sha":"4a8800151320c6f0fa95b17b9ab2717d7bfe3256","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/LogOrphanedKeyAction.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/LogOrphanedKeyAction.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/LogOrphanedKeyAction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/LogOrphanedKeyAction.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -23,7 +23,7 @@\n import org.apache.openjpa.meta.ValueMetaData;\n \n /**\n- * <p>Log a message when an orphaned key is discovered.</p>\n+ * Log a message when an orphaned key is discovered.\n  *\n  * @author Abe White\n  * @since 3.2.2\n@@ -38,35 +38,35 @@\n     private short _level = Log.WARN;\n \n     /**\n-     * The channel to log to.  Defaults to <code>org.apache.openjpa.Runtime</code>.\n+     * The channel to log to. Defaults to <code>org.apache.openjpa.Runtime</code>.\n      */\n     public String getChannel() {\n         return _channel;\n     }\n \n     /**\n-     * The channel to log to.  Defaults to <code>org.apache.openjpa.Runtime</code>.\n+     * The channel to log to. Defaults to <code>org.apache.openjpa.Runtime</code>.\n      */\n     public void setChannel(String channel) {\n         _channel = channel;\n     }\n \n     /**\n-     * The level to log at.  Defaults to <code>WARN</code>.\n+     * The level to log at. Defaults to <code>WARN</code>.\n      */\n     public short getLevel() {\n         return _level;\n     }\n \n     /**\n-     * The level to log at.  Defaults to <code>WARN</code>.\n+     * The level to log at. Defaults to <code>WARN</code>.\n      */\n     public void setLevel(short level) {\n         _level = level;\n     }\n \n     /**\n-     * The level to log at.  Defaults to <code>WARN</code>.\n+     * The level to log at. Defaults to <code>WARN</code>.\n      */\n     public void setLevel(String level) {\n         _level = LogFactoryImpl.getLevel(level);"},{"sha":"86425952ee28c1505fbe67572646416b2a10a45b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -35,7 +35,7 @@\n     private boolean _arg;\n \n     /**\n-     * Constructor.  Supply callback class and its callback method name.\n+     * Constructor. Supply callback class and its callback method name.\n      *\n      * @arg Whether we expect a further argument such as in AfterDetach\n      */\n@@ -46,7 +46,7 @@ public MethodLifecycleCallbacks(Class cls, String method, boolean arg) {\n     }\n \n     /**\n-     * Constructor.  Supply callback method.\n+     * Constructor. Supply callback method.\n      */\n     public MethodLifecycleCallbacks(Method method, boolean arg) {\n         _callback = method;\n@@ -87,8 +87,8 @@ public String toString() {\n     }\n \n     /**\n-     *\tHelper method to return the named method of the given class, throwing\n-     *\tthe proper exception on error.\n+     * Helper method to return the named method of the given class, throwing\n+     * the proper exception on error.\n      */\n     protected static Method getMethod(Class cls, String method, Class[] args) {\n         try {"},{"sha":"1a3cbaf173cb1afe2d96ba6bf7085ec9de4afa2c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/NoneOrphanedKeyAction.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/NoneOrphanedKeyAction.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/NoneOrphanedKeyAction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/NoneOrphanedKeyAction.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -19,7 +19,7 @@\n import org.apache.openjpa.meta.ValueMetaData;\n \n /**\n- * <p>Does nothing when an orphaned key is discovered.</p>\n+ * Does nothing when an orphaned key is discovered.\n  *\n  * @author Abe White\n  * @since 3.2.2"},{"sha":"1ba583e3261621a1fbde048e15fbd92ad3dcd320","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/OrphanedKeyAction.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/OrphanedKeyAction.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/OrphanedKeyAction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/OrphanedKeyAction.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -19,7 +19,7 @@\n import org.apache.openjpa.meta.ValueMetaData;\n \n /**\n- * <p>Perform an action when OpenJPA detects an orphaned key in the database.</p>\n+ * Perform an action when OpenJPA detects an orphaned key in the database.\n  *\n  * @author Abe White\n  * @since 3.2.2\n@@ -29,10 +29,10 @@\n     /**\n      * Callback received when OpenJPA discovers an orphaned key.\n      *\n-     * @param    oid        the orphaned key\n-     * @param    sm        the instance representing the record in which the\n+     * @param oid the orphaned key\n+     * @param sm the instance representing the record in which the\n      * key was discovered; may be null\n-     * @param    vmd        the value in which the key was discovered\n+     * @param vmd the value in which the key was discovered\n      * @return the value to load into field <code>fmd</code>; typically\n      * <code>null</code>\n      */"},{"sha":"8c7bc8953652066c874c099a64918a46038d254a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/PersistListener.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/PersistListener.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/PersistListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/PersistListener.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,"},{"sha":"c75a0ddccb64bd776d725fbe5ba4e62fee1fa8f5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitEvent.java","status":"modified","additions":9,"deletions":12,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitEvent.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitEvent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitEvent.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -26,9 +26,8 @@\n import org.apache.openjpa.util.UserException;\n \n /**\n- * <p>Event type to hold the IDs of additions, updates, and\n- * deletes.  This event type is also fully serializable for remote\n- * communication.</p>\n+ * Event type to hold the IDs of additions, updates, and\n+ * deletes. This event type is also fully serializable for remote communication.\n  *\n  * @since 3.0\n  * @author Patrick Linskey\n@@ -68,15 +67,13 @@ public RemoteCommitEvent() {\n     }\n \n     /**\n-     * Constructor.  All collections will be proxied with unmodifiable views.\n+     * Constructor. All collections will be proxied with unmodifiable views.\n      *\n-     * @param    payloadType        PAYLOAD constant for type of data in this event\n-     * @param    addIds            set of object IDs for added instances, or null\n-     * @param    addClasses        set of class names for added instances\n-     * @param    updates            set of class names or object IDs for updated\n-     * instances\n-     * @param    deletes            set of class names or object IDs for deleted\n-     * instances\n+     * @param payloadType PAYLOAD constant for type of data in this event\n+     * @param addIds set of object IDs for added instances, or null\n+     * @param addClasses set of class names for added instances\n+     * @param updates set of class names or object IDs for updated instances\n+     * @param deletes set of class names or object IDs for deleted instances\n      */\n     public RemoteCommitEvent(int payloadType, Collection addIds,\n         Collection addClasses, Collection updates, Collection deletes) {"},{"sha":"80cf29edd4e449d9d4d11029a44f6eb05614ae24","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitEventManager.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitEventManager.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -30,10 +30,10 @@\n import org.apache.openjpa.util.UserException;\n \n /**\n- * <p>Manager that can be used to track and notify\n+ * Manager that can be used to track and notify\n  * {@link RemoteCommitListener}s on remote commit events. If remote events\n  * are enabled, this manager should be installed as a transaction listener on\n- * all brokers so that it knows when commits are made.</p>\n+ * all brokers so that it knows when commits are made.\n  *\n  * @author Patrick Linskey\n  * @author Abe White\n@@ -50,7 +50,7 @@\n     private boolean _transmitPersIds = false;\n \n     /**\n-     * Constructor.  Supply configuration.\n+     * Constructor. Supply configuration.\n      */\n     public RemoteCommitEventManager(OpenJPAConfiguration conf) {\n         _provider = conf.newRemoteCommitProviderInstance();"},{"sha":"16ef2b80ed0f2b514f307fbd12470caa122ce662","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitListener.java","status":"modified","additions":18,"deletions":26,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitListener.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitListener.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,33 +18,25 @@\n import org.apache.openjpa.lib.util.Closeable;\n \n /**\n- * <p>An entity that wishes to be notified when Brokers\n- * associated with remote BrokerFactories commit.</p>\n- * <p/>\n- * <p>A RemoteCommitListener <b>is not</b> notified of commits that originated\n+ * An entity that wishes to be notified when Brokers\n+ * associated with remote BrokerFactories commit.\n+ *  A RemoteCommitListener <b>is not</b> notified of commits that originated\n  * with a Broker created from the BrokerFactory that it is\n  * registered with. (Of course, if a listener is registered with multiple\n- * factories, this situation might be complicated a bit.)</p>\n- * <p/>\n- * <p>Usage:\n- * <code><pre>\n- * \timport org.apache.openjpa.event.*;\n- * \timport org.apache.openjpa.conf.*;\n- * <p/>\n- * \t{@link org.apache.openjpa.conf.OpenJPAConfiguration} conf = factory.getConfiguraiton ();\n- * <p/>\n- * \tRemoteCommitListener l = new RemoteCommitListener () {\n- * \t\tpublic void afterCommit ({@link RemoteCommitEvent} e) {\n- * \t\t\t// update a Swing widget when remote brokers make\n- * \t\t\t// changes to reference data\n- * \t\t}\n- * <p/>\n- * \t\tpublic void close () { }\n- * \t};\n- * <p/>\n- * \tconf.getRemoteCommitEventManager ().addListener (l);\n- * \t</pre></code>\n- * </p>\n+ * factories, this situation might be complicated a bit.)\n+ *  Usage:\n+ * <code><pre> import org.apache.openjpa.event.*;\n+ * import org.apache.openjpa.conf.*;\n+ * \n+ * {@link org.apache.openjpa.conf.OpenJPAConfiguration} conf = factory.getConfiguraiton ();\n+ *  RemoteCommitListener l = new RemoteCommitListener () {\n+ * public void afterCommit ({@link RemoteCommitEvent} e) {\n+ * // update a Swing widget when remote brokers make\n+ * // changes to reference data }\n+ *  public void close () { } };\n+ *  conf.getRemoteCommitEventManager ().addListener (l);\n+ * </pre></code>\n+ * \n  *\n  * @author Patrick Linskey\n  * @since 2.5.0"},{"sha":"06f7a7902d6599ccfe966aa9b4970f0645657fcd","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitProvider.java","status":"modified","additions":10,"deletions":14,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitProvider.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/RemoteCommitProvider.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,24 +18,20 @@\n import org.apache.openjpa.lib.util.Closeable;\n \n /**\n- * <p>An entity that is responsible for communicating commit\n+ * An entity that is responsible for communicating commit\n  * notification to other {@link RemoteCommitEventManager}s. Each\n  * event manager creates a remote commit provider, based on\n  * the values of the <code>org.apache.openjpa.RemoteCommitProvider</code>\n- * configuration property.</p>\n- * <p/>\n- * <p>An adapter that implements {@link TransactionListener} is\n+ * configuration property.\n+ *  An adapter that implements {@link TransactionListener} is\n  * registered with each {@link org.apache.openjpa.kernel.Broker}. This adapter\n  * invokes <code>broadcast</code>, which is responsible for\n- * notifying other remote commit provider objects of the commit\n- * changes.</p>\n- * <p/>\n- * <p>Upon receiving a notification from a different remote commit provider,\n+ * notifying other remote commit provider objects of the commit changes.\n+ *  Upon receiving a notification from a different remote commit provider,\n  * a provider must notify all local remote commit listeners via the\n- * {@link RemoteCommitEventManager#fireEvent} method.</p>\n- * <p/>\n- * <p>A remote commit provider <b>must not</b> fire remote events for\n- * commits that originated with a local broker.</p>\n+ * {@link RemoteCommitEventManager#fireEvent} method.\n+ *  A remote commit provider <b>must not</b> fire remote events for\n+ * commits that originated with a local broker.\n  *\n  * @author Patrick Linskey\n  * @since 2.5.0\n@@ -57,7 +53,7 @@\n     public void broadcast(RemoteCommitEvent event);\n \n     /**\n-     *\tFree the resources used by this provider.\n+     * Free the resources used by this provider.\n      */\n     public void close();\n }"},{"sha":"410b08eb36708dae9993e8803993979c38010446","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/SingleJVMRemoteCommitProvider.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/SingleJVMRemoteCommitProvider.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/SingleJVMRemoteCommitProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/SingleJVMRemoteCommitProvider.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -20,12 +20,12 @@\n import java.util.Set;\n \n /**\n- * <p>Single-JVM-only implementation of {@link RemoteCommitProvider}\n+ * Single-JVM-only implementation of {@link RemoteCommitProvider}\n  * that listens for object modifications and propagates those changes\n  * to other SingleJVMRemoteCommitProviders in the same JVM. This is\n  * only useful for linking together multiple factories in the same\n  * JVM that are all loaded in the same classloader, which is a rare\n- * circumstance.</p>\n+ * circumstance.\n  *\n  * @author Patrick Linskey\n  * @since 2.5.0"},{"sha":"4accd738858c0a56983e6f4a50fd5f54868e5c41","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/StoreListener.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/StoreListener.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/StoreListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/StoreListener.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.event;\n \n /**\n- * <p>Listener for when persistent instances are stored to the database.</p>\n+ * Listener for when persistent instances are stored to the database.\n  *\n  * @author Steve Kim\n  * @author Abe White"},{"sha":"4da0de716fd9959d9d6950864cbd060a496ffb87","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/TCPRemoteCommitProvider.java","status":"modified","additions":12,"deletions":17,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/TCPRemoteCommitProvider.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/TCPRemoteCommitProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/TCPRemoteCommitProvider.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -460,8 +460,7 @@ public void setRunning(boolean keepRunning) {\n     }\n \n     /**\n-     * Responsible for listening for incoming packets and processing\n-     * them.\n+     * Responsible for listening for incoming packets and processing them.\n      */\n     private static class TCPPortListener\n         implements Runnable {\n@@ -487,14 +486,12 @@ public void setRunning(boolean keepRunning) {\n         private int _port;\n \n         /**\n-         * Should be set to <code>true</code> once the listener is\n-         * listening.\n+         * Should be set to <code>true</code> once the listener is listening.\n          */\n         private boolean _isRunning = false;\n \n         /**\n-         * Construct a new TCPPortListener configured to use the\n-         * specified port.\n+         * Construct a new TCPPortListener configured to use the specified port.\n          */\n         private TCPPortListener(int port, Log log)\n             throws UnknownHostException, IOException {\n@@ -745,20 +742,19 @@ private void handle(InputStream in)\n     }\n \n     /**\n-     *\tUtility class to store an InetAddress and an int. Not using\n-     *\tInetSocketAddress because it's a JDK1.4 API. This also\n-     *\tprovides a wrapper around the socket(s) associated with this\n-     *\taddress.\n+     * Utility class to store an InetAddress and an int. Not using\n+     * InetSocketAddress because it's a JDK1.4 API. This also\n+     * provides a wrapper around the socket(s) associated with this address.\n      */\n     private class HostAddress {\n \n         private InetAddress _address;\n         private int _port;\n-        private long _timeLastError;        // millis\n-        private boolean _isAvailable;        // is peer thought to be up\n-        private int _infosIssued = 0;    // limit log entries\n+        private long _timeLastError; // millis\n+        private boolean _isAvailable; // is peer thought to be up\n+        private int _infosIssued = 0; // limit log entries\n \n-        private GenericObjectPool _socketPool;    // reusable open sockets\n+        private GenericObjectPool _socketPool; // reusable open sockets\n \n         /**\n          * Construct a new host address from a string of the form\n@@ -892,7 +888,7 @@ private void closeSocket(Socket s) {\n         }\n \n         /**\n-         *\tFactory for pooled sockets.\n+         * Factory for pooled sockets.\n          */\n         private class SocketPoolableObjectFactory\n             implements PoolableObjectFactory {\n@@ -930,7 +926,6 @@ public void activateObject (Object value)\n \t\t\t{\n \t\t\t}\n \n-\n \t\t\tpublic void passivateObject (Object value)\n \t\t\t{\n \t\t\t}"},{"sha":"c2bc15a70cd7b04092fa4bb5c3c1a214abfed405","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/TransactionEvent.java","status":"modified","additions":15,"deletions":19,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/TransactionEvent.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/TransactionEvent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/TransactionEvent.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -22,8 +22,8 @@\n import org.apache.openjpa.kernel.Broker;\n \n /**\n- * <p>A transactional event.  The event source is the {@link Broker} whose\n- * transaction state changed.</p>\n+ * A transactional event. The event source is the {@link Broker} whose\n+ * transaction state changed.\n  *\n  * @since 3.0\n  * @author Abe White\n@@ -38,8 +38,7 @@\n \n     /**\n      * Event type signifying that changes are about to be flushed to the\n-     * datastore.  This does not necessarily mean that a commit is taking\n-     * place.\n+     * datastore. This does not necessarily mean that a commit is taking place.\n      */\n     public static final int BEFORE_FLUSH = 1;\n \n@@ -93,12 +92,12 @@\n     /**\n      * Constructor.\n      *\n-     * @param    pm            the event source\n-     * @param    type        the event type\n-     * @param    objs        transactional objects\n-     * @param    addClss        classes of added instances\n-     * @param    updateClss    classes of updated instances\n-     * @param    deleteClss    classes of deleted instances\n+     * @param pm the event source\n+     * @param type the event type\n+     * @param objs transactional objects\n+     * @param addClss classes of added instances\n+     * @param updateClss classes of updated instances\n+     * @param deleteClss classes of deleted instances\n      */\n     public TransactionEvent(Broker broker, int type,\n         Collection objs, Collection addClss, Collection updateClss,\n@@ -120,7 +119,7 @@ public int getType() {\n \n     /**\n      * Return the unmodifiable set of persistence capable objects\n-     * participating in the transaction.  This set will contain all dirty\n+     * participating in the transaction. This set will contain all dirty\n      * objects, but may not contain clean objects.\n      */\n     public Collection getTransactionalObjects() {\n@@ -129,26 +128,23 @@ public Collection getTransactionalObjects() {\n \n     /**\n      * Return the unmodifiable the set of classes of\n-     * persistence capable objects that were created in\n-     * the transaction.\n+     * persistence capable objects that were created in the transaction.\n      */\n     public Collection getPersistedTypes() {\n         return _addClss;\n     }\n \n     /**\n      * Return the unmodifiable the set of classes of\n-     * persistence capable objects that were modified in\n-     * the transaction.\n+     * persistence capable objects that were modified in the transaction.\n      */\n     public Collection getUpdatedTypes() {\n         return _updateClss;\n     }\n \n     /**\n-     *\tReturn the unmodifiable the set of classes of\n-     *  persistence capable objects that were deleted in\n-     *  the transaction.\n+     * Return the unmodifiable the set of classes of\n+     * persistence capable objects that were deleted in the transaction.\n      */\n     public Collection getDeletedTypes ()\n \t{"},{"sha":"6f016c6fd4b3c83b31c73dd5cf58986f99a97ab9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/TransactionEventManager.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/TransactionEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/TransactionEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/TransactionEventManager.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,8 +18,8 @@\n import org.apache.openjpa.lib.util.concurrent.AbstractConcurrentEventManager;\n \n /**\n- * <p>Manager that can be used to track and notify transaction listeners\n- * of transaction-related events.</p>\n+ * Manager that can be used to track and notify transaction listeners\n+ * of transaction-related events.\n  *\n  * @author Patrick Linskey\n  * @author Abe White\n@@ -78,7 +78,7 @@ public boolean hasEndListeners() {\n     }\n \n     /**\n-     *\tFire the given event to all registered listeners.\n+     * Fire the given event to all registered listeners.\n      */\n     protected void fireEvent(Object event, Object listener) {\n         TransactionEvent ev = (TransactionEvent) event;"},{"sha":"9d51209f42e3c0d289ebdcc77c08693187a5a0ee","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/TransactionListener.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/TransactionListener.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/event/TransactionListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/TransactionListener.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.event;\n \n /**\n- * <p>Interface for listening to all {@link TransactionEvent}s.\n+ * Interface for listening to all {@link TransactionEvent}s.\n  *\n  * @author Patrick Linskey\n  * @author Abe White"},{"sha":"399a90433d9469744ab16be6f090a50687eedad8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -45,8 +45,8 @@\n import org.apache.openjpa.util.UserException;\n \n /**\n- * <p>Abstract implementation of the {@link BrokerFactory}\n- * that must be subclassed for a specific runtime.</p>\n+ * Abstract implementation of the {@link BrokerFactory}\n+ * that must be subclassed for a specific runtime.\n  *\n  * @author Abe White\n  */\n@@ -106,7 +106,7 @@ protected static AbstractBrokerFactory getPooledFactory(Map map) {\n     }\n \n     /**\n-     * Constructor.  Configuration must be provided on construction.\n+     * Constructor. Configuration must be provided on construction.\n      */\n     protected AbstractBrokerFactory(OpenJPAConfiguration config) {\n         _conf = config;\n@@ -206,7 +206,7 @@ protected void addLifecycleListeners(BrokerImpl broker) {\n     }\n \n     /**\n-     * Load the configured persistent classes list.  Performed automatically\n+     * Load the configured persistent classes list. Performed automatically\n      * whenever a broker is created.\n      */\n     private void loadPersistentTypes(ClassLoader envLoader) {\n@@ -360,7 +360,7 @@ public void unlock() {\n     }\n \n     /**\n-     * Replaces the factory with this JVMs pooled version if it exists.  Also\n+     * Replaces the factory with this JVMs pooled version if it exists. Also\n      * freezes the factory.\n      */\n     protected Object readResolve()\n@@ -382,16 +382,16 @@ protected Object readResolve()\n     ////////////////////////\n \n     /**\n-     * Return a new StoreManager for this runtime.  Note that the instance\n+     * Return a new StoreManager for this runtime. Note that the instance\n      * returned here may be wrapped before being passed to the\n      * {@link #newBroker} method.\n      */\n     protected abstract StoreManager newStoreManager();\n \n     /**\n-     * Find a pooled broker, or return null if none.  If using\n+     * Find a pooled broker, or return null if none. If using\n      * managed transactions, looks for a transactional broker;\n-     * otherwise returns null by default.  This method will be called before\n+     * otherwise returns null by default. This method will be called before\n      * {@link #newStoreManager} so that factory subclasses implementing\n      * pooling can return a matching manager before a new {@link StoreManager}\n      * is created.\n@@ -418,7 +418,7 @@ protected BrokerImpl newBrokerImpl(String user, String pass) {\n \n     /**\n      * Setup transient state used by this factory based on the\n-     * current configuration, which will subsequently be locked down.  This\n+     * current configuration, which will subsequently be locked down. This\n      * method will be called before the first broker is requested,\n      * and will be re-called each time the factory is deserialized into a JVM\n      * that has no configuration for this data store.\n@@ -563,7 +563,7 @@ private void assertOpen() {\n     ////////////////////\n \n     /**\n-     * Throws a {@link UserException} if a transaction is active.  The thrown\n+     * Throws a {@link UserException} if a transaction is active. The thrown\n      * exception will contain all the Brokers with active transactions as\n      * failed objects in the nested exceptions.\n      */\n@@ -641,8 +641,8 @@ boolean syncWithManagedTransaction(BrokerImpl broker, boolean begin) {\n     }\n \n     /**\n-     *\tSimple synchronization listener to remove completed transactions\n-     *\tfrom our cache.\n+     * Simple synchronization listener to remove completed transactions\n+     * from our cache.\n      */\n     private class RemoveTransactionSync\n         implements Synchronization {"},{"sha":"820be52382977ef66d14b928ee4f56647fec4028","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractFieldManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractFieldManager.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractFieldManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractFieldManager.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -19,8 +19,8 @@\n import org.apache.openjpa.util.InternalException;\n \n /**\n- * <p>Abstract {@link FieldManager} for easy subclassing.  Throws exceptions\n- * for all methods.</p>\n+ * Abstract {@link FieldManager} for easy subclassing. Throws exceptions\n+ * for all methods.\n  *\n  * @author Abe White\n  */"},{"sha":"cc9bd76183c45518c69e66817b84cbe12a9a3ba2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractLockManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractLockManager.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -71,7 +71,7 @@ public void endTransaction() {\n     }\n \n     /**\n-     *\tDoes nothing by default.\n+     * Does nothing by default.\n      */\n     public void close ()\n \t{"},{"sha":"3171025a082db085be86459c539e431d4f7094f8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -35,7 +35,7 @@\n import org.apache.openjpa.util.Proxy;\n \n /**\n- * <p>Abstract base class which implements core PCData behavior.</p>\n+ * Abstract base class which implements core PCData behavior.\n  *\n  * @author Patrick Linskey\n  * @author Abe White\n@@ -111,7 +111,7 @@ protected Object toField(OpenJPAStateManager sm, FieldMetaData fmd,\n     }\n \n     /**\n-     * Transform the given data value to its field value.  The data value\n+     * Transform the given data value to its field value. The data value\n      * may be a key, value, or element of a map or collection.\n      */\n     protected Object toNestedField(OpenJPAStateManager sm, ValueMetaData vmd,\n@@ -142,7 +142,7 @@ protected Object toNestedField(OpenJPAStateManager sm, ValueMetaData vmd,\n     }\n \n     /**\n-     * Transform the given data into a relation field value.  Default\n+     * Transform the given data into a relation field value. Default\n      * implementation assumes the data is an oid.\n      */\n     protected Object toRelationField(OpenJPAStateManager sm, ValueMetaData vmd,\n@@ -151,7 +151,7 @@ protected Object toRelationField(OpenJPAStateManager sm, ValueMetaData vmd,\n     }\n \n     /**\n-     * Transform the given data into an embedded PC field value.  Default\n+     * Transform the given data into an embedded PC field value. Default\n      * implementation assumes the data is an {@link AbstractPCData}.\n      */\n     protected Object toEmbeddedField(OpenJPAStateManager sm, ValueMetaData vmd,\n@@ -165,7 +165,7 @@ protected Object toEmbeddedField(OpenJPAStateManager sm, ValueMetaData vmd,\n     }\n \n     /**\n-     * Transform the given field value to a data value for caching.  Return\n+     * Transform the given field value to a data value for caching. Return\n      * {@link #NULL} if unable to cache.\n      */\n     protected Object toData(FieldMetaData fmd, Object val, StoreContext ctx) {\n@@ -237,7 +237,7 @@ protected Object toData(FieldMetaData fmd, Object val, StoreContext ctx) {\n     }\n \n     /**\n-     * Transform the given nested value to a cachable value.  Return\n+     * Transform the given nested value to a cachable value. Return\n      * {@link #NULL} if the value cannot be cached.\n      */\n     protected Object toNestedData(ValueMetaData vmd, Object val,\n@@ -270,15 +270,15 @@ protected Object toNestedData(ValueMetaData vmd, Object val,\n     }\n \n     /**\n-     * Return the value to cache for the given object.  Caches its oid by\n+     * Return the value to cache for the given object. Caches its oid by\n      * default.\n      */\n     protected Object toRelationData(Object val, StoreContext ctx) {\n         return ctx.getObjectId(val);\n     }\n \n     /**\n-     * Return the value to cache for the given embedded PC.  Caches a\n+     * Return the value to cache for the given embedded PC. Caches a\n      * {@link PCData} from {@link #newEmbeddedPCData} by default.\n      */\n     protected Object toEmbeddedData(Object val, StoreContext ctx) {\n@@ -299,7 +299,7 @@ protected Object toEmbeddedData(Object val, StoreContext ctx) {\n     }\n \n     /**\n-     *\tTracks proxy data along with list elements.\n+     * Tracks proxy data along with list elements.\n      */\n     private static class ProxyDataList\n         extends ArrayList {"},{"sha":"850f849372c86a87b6946a41237d827e17a387ed","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCResultObjectProvider.java","status":"modified","additions":17,"deletions":18,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCResultObjectProvider.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -22,10 +22,9 @@\n import org.apache.openjpa.util.StoreException;\n \n /**\n- * <p>Abstract implementation of {@link PCResultObjectProvider}\n+ * Abstract implementation of {@link PCResultObjectProvider}\n  * that implements {@link ResultObjectProvider#getResultObject}\n- * by assembling the necessary information about the object to be\n- * loaded.</p>\n+ * by assembling the necessary information about the object to be loaded.\n  *\n  * @author Patrick Linskey\n  */\n@@ -91,23 +90,23 @@ protected abstract Class getPCType()\n \n     /**\n      * Load data from the current input record into the given state\n-     * manager.  Remember to call {@link OpenJPAStateManager#setVersion} to set\n+     * manager. Remember to call {@link OpenJPAStateManager#setVersion} to set\n      * the optimistic versioning information, if it has any.\n      */\n     protected abstract void load(OpenJPAStateManager sm, FetchState fetch)\n         throws Exception;\n \n     /**\n-     * Override if desired.  Does nothing by default.\n+     * Override if desired. Does nothing by default.\n      */\n     public void open()\n         throws Exception {\n     }\n \n     /**\n-     * Override if desired.  Returns false by default.\n+     * Override if desired. Returns false by default.\n      *\n-     * @see    ResultObjectProvider#supportsRandomAccess\n+     * @see ResultObjectProvider#supportsRandomAccess\n      */\n     public boolean supportsRandomAccess() {\n         return false;\n@@ -116,52 +115,52 @@ public boolean supportsRandomAccess() {\n     /**\n      * Implement this method to advance the input.\n      *\n-     * @see    ResultObjectProvider#next\n+     * @see ResultObjectProvider#next\n      */\n     public abstract boolean next()\n         throws Exception;\n \n     /**\n-     * Override if desired.  Throws an exception by default.\n+     * Override if desired. Throws an exception by default.\n      *\n-     * @see    ResultObjectProvider#absolute\n+     * @see ResultObjectProvider#absolute\n      */\n     public boolean absolute(int pos)\n         throws Exception {\n         throw new UnsupportedOperationException();\n     }\n \n     /**\n-     * Override if desired.  Returns {@link Integer#MAX_VALUE} by default.\n+     * Override if desired. Returns {@link Integer#MAX_VALUE} by default.\n      *\n-     * @see    ResultObjectProvider#size\n+     * @see ResultObjectProvider#size\n      */\n     public int size()\n         throws Exception {\n         return Integer.MAX_VALUE;\n     }\n \n     /**\n-     * Override if desired.  Throws an exception by default.\n+     * Override if desired. Throws an exception by default.\n      *\n-     * @see    ResultObjectProvider#reset\n+     * @see ResultObjectProvider#reset\n      */\n     public void reset()\n         throws Exception {\n         throw new UnsupportedOperationException();\n     }\n \n     /**\n-     * Override if desired.  Does nothing by default.\n+     * Override if desired. Does nothing by default.\n      *\n-     * @see    ResultObjectProvider#close\n+     * @see ResultObjectProvider#close\n      */\n     public void close()\n         throws Exception {\n     }\n \n     /**\n-     *\tThrows a {@link StoreException} by default.\n+     * Throws a {@link StoreException} by default.\n      */\n     public void handleCheckedException(Exception e) {\n         throw new StoreException (e);"},{"sha":"fbe27a10e778ec4f7de4c3e3d1767c5757ccf6f6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -25,7 +25,7 @@\n import org.apache.openjpa.util.InternalException;\n \n /**\n- * <p>Abstract {@link StoreQuery} that implements most methods as no-ops.</p>\n+ * Abstract {@link StoreQuery} that implements most methods as no-ops.\n  *\n  * @author Abe White\n  * @since 4.0"},{"sha":"8093bac842e1c0dedeeba56a636a265ffd6175bc","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachManager.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -59,7 +59,7 @@\n     private AttachStrategy _detach = null;\n \n     /**\n-     * Constructor.  Supply broker attaching to.\n+     * Constructor. Supply broker attaching to.\n      */\n     public AttachManager(BrokerImpl broker, boolean copyNew, OpCallbacks call) {\n         _broker = broker;\n@@ -98,7 +98,7 @@ public Object attach(Object pc) {\n         }\n         catch (CallbackException ce) {\n             excep = ce;\n-            return null;    // won't be reached as the exceps will be rethrown\n+            return null; // won't be reached as the exceps will be rethrown\n         }\n         finally {\n             List exceps = null;\n@@ -213,10 +213,10 @@ private void throwExceptions(List exceps, List failed, boolean opt) {\n     /**\n      * Attach.\n      *\n-     * @param    toAttach    the detached object\n-     * @param    into        the instance we're attaching into\n-     * @param    owner        state manager for <code>into</code>\n-     * @param    ownerMeta    the field we traversed to find <code>toAttach</code>\n+     * @param toAttach the detached object\n+     * @param into the instance we're attaching into\n+     * @param owner state manager for <code>into</code>\n+     * @param ownerMeta the field we traversed to find <code>toAttach</code>\n      */\n     Object attach(Object toAttach, PersistenceCapable into,\n         OpenJPAStateManager owner, ValueMetaData ownerMeta) {\n@@ -322,8 +322,8 @@ Object getDetachedObjectId(Object pc) {\n     }\n \n     /**\n-     *\tThrow an exception if the given object is not managed; otherwise\n-     *\treturn its state manager.\n+     * Throw an exception if the given object is not managed; otherwise\n+     * return its state manager.\n      */\n     StateManagerImpl assertManaged(Object obj) {\n         StateManagerImpl sm = _broker.getStateManagerImpl(obj, true);"},{"sha":"32b24fa82cf7d18660ef539cdfb1690ad392aee5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","status":"modified","additions":17,"deletions":18,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AttachStrategy.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -49,12 +49,12 @@\n     /**\n      * Attach.\n      *\n-     * @param    manager        manager holding cache of attached instances\n-     * @param    toAttach    detached instance\n-     * @param    meta        metadata for the instance being attached\n-     * @param    into        instance we're attaching into\n-     * @param    owner        state manager for <code>into</code>\n-     * @param    ownerMeta    field we traversed to find <code>toAttach</code>\n+     * @param manager manager holding cache of attached instances\n+     * @param toAttach detached instance\n+     * @param meta metadata for the instance being attached\n+     * @param into instance we're attaching into\n+     * @param owner state manager for <code>into</code>\n+     * @param ownerMeta field we traversed to find <code>toAttach</code>\n      */\n     public abstract Object attach(AttachManager manager,\n         Object toAttach, ClassMetaData meta, PersistenceCapable into,\n@@ -92,12 +92,11 @@ else if (appId == null) // datastore identity\n     /**\n      * Attach the given field into the given instance.\n      *\n-     * @param    toAttach the detached persistent instance\n-     * @param    sm            state manager for the managed instance we're copying\n-     * into; <code>toAttach</code> also uses this state\n-     * manager\n-     * @param    fmd            metadata on the field we're copying\n-     * @param    nullLoaded    if false, nulls will be considered unloaded and will\n+     * @param toAttach the detached persistent instance\n+     * @param sm state manager for the managed instance we're copying\n+     * into; <code>toAttach</code> also uses this state manager\n+     * @param fmd metadata on the field we're copying\n+     * @param nullLoaded if false, nulls will be considered unloaded and will\n      * not be attached\n      */\n     protected boolean attachField(AttachManager manager, Object toAttach,\n@@ -275,7 +274,7 @@ protected Object getReference(AttachManager manager, Object toAttach,\n \n     /**\n      * Replace the contents of <code>toc</code> with the contents of\n-     * <code>frmc</code>.  Neither collection is null.\n+     * <code>frmc</code>. Neither collection is null.\n      */\n     private void replaceCollection(AttachManager manager, Collection frmc,\n         Collection toc, OpenJPAStateManager sm, FieldMetaData fmd) {\n@@ -341,7 +340,7 @@ private Collection copyCollection(AttachManager manager, Collection orig,\n     /**\n      * Returns an attached version of the <code>frml</code>\n      * list if it is different than <code>tol</code>. If the lists\n-     * will be identical, returns <code>tol</code>.  Neither list is null.\n+     * will be identical, returns <code>tol</code>. Neither list is null.\n      */\n     private Collection replaceList(AttachManager manager, Collection frml,\n         Collection tol, OpenJPAStateManager sm, FieldMetaData fmd) {\n@@ -372,7 +371,7 @@ private Collection replaceList(AttachManager manager, Collection frml,\n \n     /**\n      * Replace the contents of <code>tom</code> with the contents of\n-     * <code>frmm</code>.  Neither map is null.\n+     * <code>frmm</code>. Neither map is null.\n      */\n     private void replaceMap(AttachManager manager, Map frmm, Map tom,\n         OpenJPAStateManager sm, FieldMetaData fmd) {\n@@ -489,8 +488,8 @@ private Object replaceArray(AttachManager manager, Object frma,\n     }\n \n     /**\n-     *\tReturn true if the given objects are equal.  PCs are compared for\n-     *\ton JVM identity.\n+     * Return true if the given objects are equal. PCs are compared for\n+     * on JVM identity.\n      */\n     private static boolean equals(Object a, Object b, boolean pc) {\n         if (a == b)"},{"sha":"46f616395bab02d674c8e5c1e56e0e2b361489d2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AutoClear.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AutoClear.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AutoClear.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AutoClear.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>State clearing constants.</p>\n+ * State clearing constants.\n  *\n  * @author Abe White\n  * @since 4.0"},{"sha":"36710193c22c9768b85e811b015813ad96487874","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AutoDetach.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AutoDetach.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AutoDetach.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AutoDetach.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -31,8 +31,8 @@\n     public static final int DETACH_COMMIT = 2 << 1;\n \n     /**\n-     *\tDetach context on any nontransctional read, such that each\n-     *\tnontransactional operation uses a new persistence context in essence.\n+     * Detach context on any nontransctional read, such that each\n+     * nontransactional operation uses a new persistence context in essence.\n      */\n     public static final int DETACH_NONTXREAD = 2 << 2;\n }"},{"sha":"99c289369cf01ea69407d727d2a2b488386a9c9f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -29,7 +29,7 @@\n import org.apache.openjpa.util.UserException;\n \n /**\n- * <p>Helper methods for acquiring {@link BrokerFactory} objects</p>\n+ * Helper methods for acquiring {@link BrokerFactory} objects\n  *\n  * @since 4.0.0\n  */\n@@ -48,8 +48,8 @@ public static BrokerFactory newBrokerFactory() {\n     }\n \n     /**\n-     * Return a new factory for the given configuration.  The classloader\n-     * will be used to load the factory class.  If no classloader is given,\n+     * Return a new factory for the given configuration. The classloader\n+     * will be used to load the factory class. If no classloader is given,\n      * the thread's context classloader is used.\n      */\n     public static BrokerFactory newBrokerFactory(ConfigurationProvider conf,\n@@ -84,8 +84,8 @@ public static BrokerFactory getBrokerFactory() {\n     }\n \n     /**\n-     * Return a pooled factory for the given configuration.  The classloader\n-     * will be used to load the factory class.  If no classloader is given,\n+     * Return a pooled factory for the given configuration. The classloader\n+     * will be used to load the factory class. If no classloader is given,\n      * the thread's context classloader is used.\n      */\n     public static BrokerFactory getBrokerFactory(ConfigurationProvider conf,\n@@ -113,7 +113,7 @@ public static BrokerFactory getBrokerFactory(ConfigurationProvider conf,\n     }\n \n     /**\n-     *\tInstantiate the factory class designated in properties.\n+     * Instantiate the factory class designated in properties.\n      */\n     private static Class getFactoryClass(ConfigurationProvider conf,\n         ClassLoader loader) {"},{"sha":"952085c0bc1d3f2be5c2106152119e915a3ab093","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","status":"modified","additions":41,"deletions":50,"changes":91,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -29,9 +29,9 @@\n import org.apache.openjpa.util.RuntimeExceptionTranslator;\n \n /**\n- * <p>The broker is the primary interface into the OpenJPA runtime.  Each broker\n+ * The broker is the primary interface into the OpenJPA runtime. Each broker\n  * maintains an independent object cache and an independent transactional\n- * context.</p>\n+ * context.\n  *\n  * @since 4.0\n  * @author Abe White\n@@ -45,7 +45,7 @@\n     /**\n      * Set the broker's behavior for implicit actions such as flushing,\n      * automatic detachment, and exceptions thrown by managed instances outside\n-     * a broker operation.  A broker's implicit behavior can only be set once;\n+     * a broker operation. A broker's implicit behavior can only be set once;\n      * after the first invocation with non-null arguments,\n      * subsequent invocations of this method are ignored.\n      */\n@@ -160,13 +160,13 @@ public void setImplicitBehavior(OpCallbacks call,\n \n     /**\n      * Whether to check for a global transaction upon every managed,\n-     * non-transactional operation.  Defaults to false.\n+     * non-transactional operation. Defaults to false.\n      */\n     public boolean getSyncWithManagedTransactions();\n \n     /**\n      * Whether to check for a global transaction upon every managed,\n-     * non-transactional operation.  Defaults to false.\n+     * non-transactional operation. Defaults to false.\n      */\n     public void setSyncWithManagedTransactions(boolean resync);\n \n@@ -212,7 +212,7 @@ public void setImplicitBehavior(OpCallbacks call,\n     public void setEvictFromDataCache(boolean evict);\n \n     /**\n-     * Put the specified key-value pair into the map of user objects.  Use\n+     * Put the specified key-value pair into the map of user objects. Use\n      * a value of null to remove the key.\n      *\n      * @since 3.2\n@@ -242,7 +242,7 @@ public void setImplicitBehavior(OpCallbacks call,\n \n     /**\n      * Register a listener for lifecycle-related events on the specified\n-     * classes.  If the classes are null, all events will be propagated to\n+     * classes. If the classes are null, all events will be propagated to\n      * the listener.\n      *\n      * @since 3.3\n@@ -284,30 +284,24 @@ public void setImplicitBehavior(OpCallbacks call,\n \n     /**\n      * Issue a commit and then start a new transaction. This is identical to:\n-     * <pre>\n-     * \tbroker.commit ();\n-     * \tbroker.begin ();\n-     * \t</pre>\n-     * except that the broker's internal atomic lock is utilized,\n+     * <pre> broker.commit (); broker.begin ();\n+     * </pre> except that the broker's internal atomic lock is utilized,\n      * so this method can be safely executed from multiple threads.\n      *\n-     * @see    #commit()\n-     * @see    #begin()\n+     * @see #commit()\n+     * @see #begin()\n      * @since 2.4\n      */\n     public void commitAndResume();\n \n     /**\n      * Issue a rollback and then start a new transaction. This is identical to:\n-     * <pre>\n-     * \tbroker.rollback ();\n-     * \tbroker.begin ();\n-     * \t</pre>\n-     * except that the broker's internal atomic lock is utilized,\n+     * <pre> broker.rollback (); broker.begin ();\n+     * </pre> except that the broker's internal atomic lock is utilized,\n      * so this method can be safely executed from multiple threads.\n      *\n-     * @see    #rollback()\n-     * @see    #begin()\n+     * @see #rollback()\n+     * @see #begin()\n      * @since 2.4\n      */\n     public void rollbackAndResume();\n@@ -353,7 +347,7 @@ public void setImplicitBehavior(OpCallbacks call,\n     public void releaseSavepoint(String name);\n \n     /**\n-     * Flush all transactional instances to the data store.  This method may\n+     * Flush all transactional instances to the data store. This method may\n      * set the rollback only flag on the current transaction if it encounters\n      * an error.\n      *\n@@ -373,9 +367,9 @@ public void setImplicitBehavior(OpCallbacks call,\n \n     /**\n      * Validate the changes made in this transaction, reporting any optimistic\n-     * violations, constraint violations, etc.  In a datastore transaction or\n+     * violations, constraint violations, etc. In a datastore transaction or\n      * a flushed optimistic transaction, this method will act just like\n-     * {@link #flush}.  In an optimistic transaction that has not yet begun a\n+     * {@link #flush}. In an optimistic transaction that has not yet begun a\n      * datastore-level transaction, however, it will only report exceptions\n      * that would occur on flush, without retaining any datastore resources.\n      */\n@@ -392,12 +386,12 @@ public void setImplicitBehavior(OpCallbacks call,\n     public void persistAll(Collection objs, OpCallbacks call);\n \n     /**\n-     * Make the given instance persistent.  Unlike other persist operations,\n+     * Make the given instance persistent. Unlike other persist operations,\n      * this method does <b>not</b> immediately cascade to fields marked\n      * {@link ValueMetaData#CASCADE_IMMEDIATE}.\n      *\n-     * @param    pc    the instance to persist\n-     * @param    id    the id to give the state manager; may be null for default\n+     * @param pc the instance to persist\n+     * @param id the id to give the state manager; may be null for default\n      * @return the state manager for the newly persistent instance\n      */\n     public OpenJPAStateManager persist(Object pc, Object id, OpCallbacks call);\n@@ -413,13 +407,13 @@ public void setImplicitBehavior(OpCallbacks call,\n     public void deleteAll(Collection objs, OpCallbacks call);\n \n     /**\n-     * Release the given object from management.  This operation is not\n+     * Release the given object from management. This operation is not\n      * recursive.\n      */\n     public void release(Object pc, OpCallbacks call);\n \n     /**\n-     * Release the given objects from management.  This operation is not\n+     * Release the given objects from management. This operation is not\n      * recursive.\n      */\n     public void releaseAll(Collection objs, OpCallbacks call);\n@@ -489,7 +483,7 @@ public void setImplicitBehavior(OpCallbacks call,\n      *\n      * @param pc instance to import\n      * @return the re-attached instance\n-     * @param    copyNew    whether to copy new instances\n+     * @param copyNew whether to copy new instances\n      */\n     public Object attach(Object pc, boolean copyNew, OpCallbacks call);\n \n@@ -501,7 +495,7 @@ public void setImplicitBehavior(OpCallbacks call,\n      *\n      * @param objs array of instances to import\n      * @return the re-attached instances\n-     * @param    copyNew    whether to copy new instances\n+     * @param copyNew whether to copy new instances\n      */\n     public Object[] attachAll(Collection objs, boolean copyNew,\n         OpCallbacks call);\n@@ -554,9 +548,9 @@ public void setImplicitBehavior(OpCallbacks call,\n     /**\n      * Ensure that the given instance is locked at the given lock level.\n      *\n-     * @param    pc        the object to lock\n-     * @param    level    the lock level to use\n-     * @param    timeout    the number of milliseconds to wait for the lock before\n+     * @param pc the object to lock\n+     * @param level the lock level to use\n+     * @param timeout the number of milliseconds to wait for the lock before\n      * giving up, or -1 for no limit\n      * @since 3.1\n      */\n@@ -573,9 +567,9 @@ public void setImplicitBehavior(OpCallbacks call,\n     /**\n      * Ensure that the given instances are locked at the given lock level.\n      *\n-     * @param    objs    the objects to lock\n-     * @param    level    the lock level to use\n-     * @param    timeout    the number of milliseconds to wait for the lock before\n+     * @param objs the objects to lock\n+     * @param level the lock level to use\n+     * @param timeout the number of milliseconds to wait for the lock before\n      * giving up, or -1 for no limit\n      * @since 3.1\n      */\n@@ -591,7 +585,7 @@ public void lockAll(Collection objs, int level, int timeout,\n     public void lockAll(Collection objs, OpCallbacks call);\n \n     /**\n-     * Cancel all pending data store statements.  If statements are cancelled\n+     * Cancel all pending data store statements. If statements are cancelled\n      * while a flush is in progress, the transaction rollback only flag will\n      * be set.\n      *\n@@ -608,23 +602,21 @@ public void lockAll(Collection objs, int level, int timeout,\n     public void dirtyType(Class cls);\n \n     /**\n-     * Begin a logical operation.  This indicates to the broker the\n+     * Begin a logical operation. This indicates to the broker the\n      * granularity of an operation which may require pre/post operation\n      * side-effects, such as non-tx detach.\n      * Will lock the broker until the {@link #endOperation} is called.\n      *\n      * @param syncTrans whether instances may be loaded/modified during\n      * this operation requiring a re-check of global tx\n-     * @return whether this is the outermost operation on the\n-     * stack\n+     * @return whether this is the outermost operation on the stack\n      */\n     public boolean beginOperation(boolean syncTrans);\n \n     /**\n-     * End a logical operation.  This indicates to the broker the\n+     * End a logical operation. This indicates to the broker the\n      * granularity of an operation which may require pre/post operation\n-     * side-effects, such as non-tx detach.\n-     * Unlocks the given broker.\n+     * side-effects, such as non-tx detach. Unlocks the given broker.\n      *\n      * @return whether this is the outermost operation on the stack\n      */\n@@ -651,15 +643,14 @@ public void lockAll(Collection objs, int level, int timeout,\n     public void assertActiveTransaction();\n \n     /**\n-     *\tThrow an exception if there is no transaction active and\n-     *\tnontransactional reading is not enabled.\n+     * Throw an exception if there is no transaction active and\n+     * nontransactional reading is not enabled.\n \t */\n \tpublic void assertNontransactionalRead ();\n \n-\n \t/**\n-\t *\tThrow an exception if a write operation is not permitted (there is\n-\t *\tno active transaction and nontransactional writing is not enabled).\n+\t * Throw an exception if a write operation is not permitted (there is\n+\t * no active transaction and nontransactional writing is not enabled).\n \t */\n \tpublic void assertWriteOperation ();\n }"},{"sha":"d3dee3c68e822c6029fdd7246d50176ba08d83e5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerFactory.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerFactory.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -22,7 +22,7 @@\n import org.apache.openjpa.lib.util.Closeable;\n \n /**\n- * <p>Factory for {@link Broker} instances.</p>\n+ * Factory for {@link Broker} instances.\n  *\n  * @author Abe White\n  * @since 4.0\n@@ -65,8 +65,8 @@ public Broker newBroker(String user, String pass, boolean managed,\n \n     /**\n      * Register a listener for lifecycle-related events on the specified\n-     * classes.  If the classes are null, all events will be propagated to\n-     * the listener.  The listener will be passed on to all new brokers.\n+     * classes. If the classes are null, all events will be propagated to\n+     * the listener. The listener will be passed on to all new brokers.\n      *\n      * @since 3.3\n      */\n@@ -95,7 +95,7 @@ public Broker newBroker(String user, String pass, boolean managed,\n     public void lock();\n \n     /**\n-     *\tRelease the internal lock.\n+     * Release the internal lock.\n \t */\n \tpublic void unlock ();\n }"},{"sha":"e8af3cab547c5c971009596063671a4772d3af81","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":26,"deletions":31,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -89,9 +89,9 @@\n import org.apache.openjpa.util.UserException;\n \n /**\n- * <p>Concrete {@link Broker}.  The broker handles object-level behavior,\n+ * Concrete {@link Broker}. The broker handles object-level behavior,\n  * but leaves all interaction with the data store to a {@link StoreManager}\n- * that must be supplied at initialization.</p>\n+ * that must be supplied at initialization.\n  *\n  * @author Abe White\n  */\n@@ -223,13 +223,12 @@\n     private LifecycleEventManager _lifeEventManager = null;\n \n     /**\n-     * Set the persistence manager's authentication.  This is the first\n+     * Set the persistence manager's authentication. This is the first\n      * method called after construction.\n      *\n      * @param user the username this broker represents; used when pooling\n      * brokers to make sure that a request to the factory for\n-     * a connection with an explicit user is delegated to a\n-     * suitable broker\n+     * a connection with an explicit user is delegated to a suitable broker\n      * @param pass the password for the above user\n      */\n     public void setAuthentication(String user, String pass) {\n@@ -238,11 +237,10 @@ public void setAuthentication(String user, String pass) {\n     }\n \n     /**\n-     * Initialize the persistence manager.  This method is called\n+     * Initialize the persistence manager. This method is called\n      * automatically by the factory before use.\n      *\n-     * @param factory the factory used to create\n-     * this broker\n+     * @param factory the factory used to create this broker\n      * @param sm a concrete StoreManager implementation to\n      * handle interaction with the data store\n      * @param managed the transaction mode\n@@ -303,7 +301,7 @@ protected void finalize()\n \n     /**\n      * Create a {@link Map} to be used for the primary managed object cache.\n-     * Maps oids to state managers.  By default, this creates a\n+     * Maps oids to state managers. By default, this creates a\n      * {@link ReferenceMap} with soft values.\n      */\n     protected Map newManagedObjectCache() {\n@@ -989,7 +987,7 @@ private boolean requiresLoad(OpenJPAStateManager sm, boolean initialized,\n         Object edata, int flags) {\n         if ((flags & OID_NOVALIDATE) == 0)\n             return true;\n-        if (edata != null)    // take advantage of existing result\n+        if (edata != null) // take advantage of existing result\n             return true;\n         if (initialized && sm.getPCState() != PCState.HOLLOW)\n             return false;\n@@ -1248,7 +1246,7 @@ private void beginStoreManagerTransaction(boolean optimistic) {\n     }\n \n     /**\n-     * End the current store manager transaction.  Throws an\n+     * End the current store manager transaction. Throws an\n      * exception to signal a forced rollback after failed commit, otherwise\n      * returns any exception encountered during the end process.\n      */\n@@ -1733,7 +1731,7 @@ public boolean beginOperation(boolean syncTrans) {\n     }\n \n     /**\n-     * Mark the operation over.  If outermost caller of stack, returns true\n+     * Mark the operation over. If outermost caller of stack, returns true\n      * and will detach manageed instances if necessary.\n      */\n     public boolean endOperation() {\n@@ -1860,8 +1858,8 @@ private void flushSafe(int reason) {\n     }\n \n     /**\n-     * Flush the transactional state to the data store.  Subclasses that\n-     * customize commit behavior should override this method.  The method\n+     * Flush the transactional state to the data store. Subclasses that\n+     * customize commit behavior should override this method. The method\n      * assumes that the persistence manager is locked, is not closed,\n      * and has an active transaction.\n      *\n@@ -3568,7 +3566,7 @@ public void lock(Object obj, OpCallbacks call) {\n         if (obj == null)\n             return;\n \n-        beginOperation(true);    // have to sync or lock level always NONE\n+        beginOperation(true); // have to sync or lock level always NONE\n         try {\n             lock(obj, _fc.getWriteLockLevel(), _fc.getLockTimeout(), call);\n         }\n@@ -3593,7 +3591,7 @@ public void lock(Object obj, int level, int timeout, OpCallbacks call) {\n                 return;\n \n             _lm.lock(sm, level, timeout, null);\n-            sm.readLocked(level, level);    // use same level for future write\n+            sm.readLocked(level, level); // use same level for future write\n         }\n         catch (OpenJPAException ke) {\n             throw ke;\n@@ -3610,7 +3608,7 @@ public void lockAll(Collection objs, OpCallbacks call) {\n         if (objs.isEmpty())\n             return;\n \n-        beginOperation(true);    // have to sync or lock level always NONE\n+        beginOperation(true); // have to sync or lock level always NONE\n         try {\n             lockAll(objs, _fc.getWriteLockLevel(), _fc.getLockTimeout(),\n                 call);\n@@ -3820,8 +3818,7 @@ protected Collection getPendingTransactionalStates() {\n      * @param id the id previously used by the instance\n      * @param sm the state manager for the instance; if the state\n      * manager is transient, we'll stop managing the instance;\n-     * if it has updated its oid, we'll re-cache under the\n-     * new oid\n+     * if it has updated its oid, we'll re-cache under the new oid\n      * @param status one of our STATUS constants describing why we're\n      * setting the state manager\n      */\n@@ -3873,8 +3870,7 @@ void addToTransaction(StateManagerImpl sm) {\n \n     /**\n      * Notify the persistence manager that the given state manager should\n-     * be removed from the set of instances involved in the current\n-     * transaction.\n+     * be removed from the set of instances involved in the current transaction.\n      */\n     void removeFromTransaction(StateManagerImpl sm) {\n         lock();\n@@ -3890,7 +3886,7 @@ void removeFromTransaction(StateManagerImpl sm) {\n     }\n \n     /**\n-     * Notification that the given instance has been dirtied.  This\n+     * Notification that the given instance has been dirtied. This\n      * notification is given when an object first transitions to a dirty state,\n      * and every time the object is modified by the user thereafter.\n      */\n@@ -3961,8 +3957,7 @@ void addToPendingTransaction(StateManagerImpl sm) {\n \n     /**\n      * Notify the persistence manager that the given state manager should\n-     * be removed from the set of instances involved in the next\n-     * transaction.\n+     * be removed from the set of instances involved in the next transaction.\n      */\n     void removeFromPendingTransaction(StateManagerImpl sm) {\n         lock();\n@@ -4003,7 +3998,7 @@ void addDereferencedDependent(StateManagerImpl sm) {\n \n     /**\n      * Remove the given previously dereferenced dependent object from the\n-     * cache.  It is now referenced.\n+     * cache. It is now referenced.\n      */\n     void removeDereferencedDependent(StateManagerImpl sm) {\n         lock();\n@@ -4387,10 +4382,10 @@ public Object processReturn(Object oid, OpenJPAStateManager sm) {\n      */\n     private static class ManagedCache {\n \n-        private final Map _main;                // oid -> sm\n-        private Map _conflicts = null;    // conflict oid -> new sm\n-        private Map _news = null;    // tmp id -> new sm\n-        private Collection _embeds = null;    // embedded/non-persistent sms\n+        private final Map _main; // oid -> sm\n+        private Map _conflicts = null; // conflict oid -> new sm\n+        private Map _news = null; // tmp id -> new sm\n+        private Collection _embeds = null; // embedded/non-persistent sms\n \n         /**\n          * Constructor; supply primary cache map.\n@@ -4876,7 +4871,7 @@ public void remove() {\n     }\n \n     /**\n-     * Helper class to implement JCA interfaces.  This is placed in a\n+     * Helper class to implement JCA interfaces. This is placed in a\n      * separate class so that its methods do not interfere with the\n      * persistence manager APIs.\n      */"},{"sha":"927f92cb8b9ed302ab16ac081916358b727ed9ec","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ClearFieldManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ClearFieldManager.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ClearFieldManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ClearFieldManager.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,8 +16,8 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>FieldManager that responds to all fetch methods with the default value\n- * for that field; used to clear the state of managed instances.</p>\n+ * FieldManager that responds to all fetch methods with the default value\n+ * for that field; used to clear the state of managed instances.\n  *\n  * @author Abe White\n  */"},{"sha":"5388aa096ca9d9e9a036a8ff9fcc700e49670d61","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ConnectionRetainModes.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ConnectionRetainModes.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ConnectionRetainModes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ConnectionRetainModes.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>Connection retain mode constants.</p>\n+ * Connection retain mode constants.\n  *\n  * @author Abe White\n  * @since 4.0\n@@ -35,8 +35,8 @@\n     public static final int CONN_RETAIN_TRANS = 1;\n \n     /**\n-     *\tConstant indicating that each broker will retain a single connection\n-     *\tthat it will use for its lifespan.\n+     * Constant indicating that each broker will retain a single connection\n+     * that it will use for its lifespan.\n      */\n     public static final int CONN_RETAIN_ALWAYS = 2;\n }"},{"sha":"b62045356d8a48faa93d614f1c3c2d101e1bbb4a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -38,8 +38,8 @@\n ///////////////////////////////////////////////////////////////\n \n /**\n- * <p>Delegating broker that can also perform exception translation\n- * for use in facades.</p>\n+ * Delegating broker that can also perform exception translation\n+ * for use in facades.\n  *\n  * @since 4.0\n  * @author Abe White"},{"sha":"d00a8fec1a9b1d98c233f01330143323906a7f89","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBrokerFactory.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBrokerFactory.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -26,8 +26,8 @@\n ///////////////////////////////////////////////////////////////\n \n /**\n- * <p>Delegating broker factory that can also perform exception translation\n- * for use in facades.</p>\n+ * Delegating broker factory that can also perform exception translation\n+ * for use in facades.\n  *\n  * @since 4.0\n  * @author Abe White"},{"sha":"f4ee677a142db0a2573d40dae6c3f003dd6507f6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingExtent.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingExtent.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingExtent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingExtent.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -26,8 +26,8 @@\n ///////////////////////////////////////////////////////////////\n \n /**\n- * <p>Delegating extent that also can perform exception translation for use\n- * in facades.</p>\n+ * Delegating extent that also can perform exception translation for use\n+ * in facades.\n  *\n  * @since 4.0\n  * @author Abe White"},{"sha":"f87eb982d3d47ada9d0e568ca1406fbe28c4308f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -28,8 +28,8 @@\n ///////////////////////////////////////////////////////////////\n \n /**\n- * <p>Delegating fetch configuration that can also perform exception\n- * translation for use in facades.</p>\n+ * Delegating fetch configuration that can also perform exception\n+ * translation for use in facades.\n  *\n  * @author Abe White\n  * @nojavadoc"},{"sha":"a57d306583ded5b4076f0feed76a57446e469a02","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingQuery.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingQuery.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingQuery.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -25,8 +25,8 @@\n import org.apache.openjpa.util.RuntimeExceptionTranslator;\n \n /**\n- * <p>Delegating query that can also perform exception translation\n- * for use in facades.</p>\n+ * Delegating query that can also perform exception translation\n+ * for use in facades.\n  *\n  * @since 4.0\n  * @author Abe White"},{"sha":"267e9ac0e12c69e224e3e7962f4959a995ca4a52","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingResultList.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingResultList.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingResultList.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -25,8 +25,8 @@\n import org.apache.openjpa.util.RuntimeExceptionTranslator;\n \n /**\n- * <p>Delegating result list that can also perform exception translation\n- * for use in facades.</p>\n+ * Delegating result list that can also perform exception translation\n+ * for use in facades.\n  *\n  * @since 4.0\n  * @author Marc Prud'hommeaux\n@@ -336,7 +336,7 @@ public List subList(int fromIndex, int toIndex) {\n     }\n \n     /**\n-     *\tDelegating iterator that also performs exception translation.\n+     * Delegating iterator that also performs exception translation.\n      */\n     public class DelegatingListIterator\n         implements ListIterator {"},{"sha":"dc588fd427af53d6c6a644b7a2ece00db1e3ae25","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingSeq.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingSeq.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingSeq.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -24,8 +24,8 @@\n ///////////////////////////////////////////////////////////////\n \n /**\n- * <p>Delegating sequence that can also perform exception translation for use\n- * in facades.</p>\n+ * Delegating sequence that can also perform exception translation for use\n+ * in facades.\n  *\n  * @author Abe White\n  * @nojavadoc"},{"sha":"41e37ec390034760f6019a3cd85f5c08b96d1556","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingStoreManager.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingStoreManager.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -23,8 +23,8 @@\n import org.apache.openjpa.meta.FieldMetaData;\n \n /**\n- * <p>Base class for store manager decorators that delegate to another\n- * store manager for some operations.</p>\n+ * Base class for store manager decorators that delegate to another\n+ * store manager for some operations.\n  *\n  * @author Abe White\n  */\n@@ -35,7 +35,7 @@\n     private final DelegatingStoreManager _del;\n \n     /**\n-     * Constructor.  Supply delegate.\n+     * Constructor. Supply delegate.\n      */\n     public DelegatingStoreManager(StoreManager store) {\n         _store = store;"},{"sha":"8dbd9c9ced9c08e1b66dfac68dac1d0b602a6e64","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -133,7 +133,7 @@ static boolean writeDetachedState(StateManagerImpl sm, ObjectOutput out,\n      * Ready the object for detachment, including loading the fields to be\n      * detached and updating version information.\n      *\n-     * @param    idxs    the indexes of fields to detach will be set as a side\n+     * @param idxs the indexes of fields to detach will be set as a side\n      * effect of this method\n      */\n     private static void preDetach(Broker broker, StateManagerImpl sm,\n@@ -193,7 +193,7 @@ private static Object getDetachedState(StateManagerImpl sm, BitSet fields) {\n \n     /**\n      * Flush or invoke pre-store callbacks on the given broker if\n-     * needed.  Return true if flushed/stored, false otherwise.\n+     * needed. Return true if flushed/stored, false otherwise.\n      */\n     private static boolean flushDirty(StateManagerImpl sm) {\n         if (!sm.isDirty())\n@@ -232,8 +232,8 @@ private static void setFetchGroupFields(Broker broker,\n     /**\n      * Constructor.\n      *\n-     * @param    broker    owning broker\n-     * @param    full    whether the entire broker cache is being detached; if\n+     * @param broker owning broker\n+     * @param full whether the entire broker cache is being detached; if\n      * this is the case, we assume the broker has already\n      * flushed if needed, and that we're detaching in-place\n      */\n@@ -287,7 +287,7 @@ public Object detach(Object toDetach) {\n     }\n \n     /**\n-     * Return detached versions of all the given instances.  If not copying,\n+     * Return detached versions of all the given instances. If not copying,\n      * null will be returned.\n      */\n     public Object[] detachAll(Collection instances) {\n@@ -545,12 +545,12 @@ protected PersistenceCapable getDetachedPersistenceCapable() {\n     }\n \n     /**\n-     *\tFieldManager that can copy all the fields from one\n-     *\tPersistenceCapable instance to another. One of the\n-     *\tinstances must be managed by a StateManager, and the\n-     *\tother must be unmanaged.\n+     * FieldManager that can copy all the fields from one\n+     * PersistenceCapable instance to another. One of the\n+     * instances must be managed by a StateManager, and the\n+     * other must be unmanaged.\n      *\n-     *\t@author Marc Prud'hommeaux\n+     * @author Marc Prud'hommeaux\n      */\n     private class InstanceDetachFieldManager\n         extends DetachFieldManager {\n@@ -559,7 +559,7 @@ protected PersistenceCapable getDetachedPersistenceCapable() {\n         private final DetachedStateManager _detSM;\n \n         /**\n-         * Constructor.  Supply instance to to copy to.\n+         * Constructor. Supply instance to to copy to.\n          */\n         public InstanceDetachFieldManager(PersistenceCapable to,\n             DetachedStateManager detSM) {\n@@ -780,7 +780,7 @@ private void detachCollection(Collection coll, Collection orig,\n         }\n \n         /**\n-         *\tMake sure all the values in the given map are detached.\n+         * Make sure all the values in the given map are detached.\n          */\n         private void detachMap(Map map, Map orig, FieldMetaData fmd) {\n             // map can be null if not copyable (lrs, for instance)"},{"sha":"b54104d1ea111d24b84dbbc184b003bbaaf8f801","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachState.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachState.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachState.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>Constants for which fields to include in the detach graph.</p>\n+ * Constants for which fields to include in the detach graph.\n  *\n  * @author Abe White\n  * @since 4.0\n@@ -34,7 +34,7 @@\n     public static final int DETACH_LOADED = 1;\n \n     /**\n-     *\tMode to detach all fields.\n+     * Mode to detach all fields.\n      */\n     public static final int DETACH_ALL = 2;\n }"},{"sha":"b01c21d7eeb4b8645b2d637baf8fdf6fd4c11737","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateAttachStrategy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateAttachStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateAttachStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateAttachStrategy.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,"},{"sha":"0d7870ca9d6e1bce6cb4ae788d9f21b4b27c4a1d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -34,8 +34,8 @@\n import org.apache.openjpa.util.UnsupportedException;\n \n /**\n- * <p>Internal state manager for detached instances.  Does not fully\n- * implement {@link OpenJPAStateManager} contract to allow for serialization.</p>\n+ * Internal state manager for detached instances. Does not fully\n+ * implement {@link OpenJPAStateManager} contract to allow for serialization.\n  *\n  * @author Steve Kim\n  * @nojavadoc\n@@ -59,11 +59,11 @@\n     /**\n      * Constructor.\n      *\n-     * @param    pc                the managed instance\n-     * @param    sm                the instance's state manager\n-     * @param    load            the set of detached field indexes\n-     * @param    access            whether to allow access to unloaded fields\n-     * @param    multithreaded    whether the instance will be used concurrently\n+     * @param pc the managed instance\n+     * @param sm the instance's state manager\n+     * @param load the set of detached field indexes\n+     * @param access whether to allow access to unloaded fields\n+     * @param multithreaded whether the instance will be used concurrently\n      * by multiple threads\n      */\n     public DetachedStateManager(PersistenceCapable pc, OpenJPAStateManager sm,"},{"sha":"3af6ec739764bd8718c10d55f85ad7588318f417","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -31,7 +31,7 @@\n import serp.util.Numbers;\n \n /**\n- * <p>Implementation of {@link OpenJPAStateManager} designed to retrieve\n+ * Implementation of {@link OpenJPAStateManager} designed to retrieve\n  * values from a detached instance, including when managed by a\n  * {@link DetachedStateManager}.\n  *"},{"sha":"38691059def9f0b834f8802083cf9fcc91793b28","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ECleanState.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ECleanState.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ECleanState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ECleanState.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,11 +16,10 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>Lifecycle state.</p>\n- * <p/>\n- * <p>Represents an embedded instance that is managed by a StateManager and\n+ * Lifecycle state.\n+ *  Represents an embedded instance that is managed by a StateManager and\n  * may be participating in the current\ttransaction, but has not yet been\n- * modified.</p>\n+ * modified.\n  *\n  * @author Abe White\n  */"},{"sha":"b9525f581d7bc19d7172985052df1f9de3e70441","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ECopyState.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ECopyState.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ECopyState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ECopyState.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,10 +16,9 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>Lifecycle state.</p>\n- * <p/>\n- * <p>Represents an instance that was copied and made embedded within the\n- * current\ttransaction.</p>\n+ * Lifecycle state.\n+ *  Represents an instance that was copied and made embedded within the\n+ * current\ttransaction.\n  *\n  * @author Abe White\n  */"},{"sha":"bc3664036eb6756caad0a12a99b18fa3c1aa5771","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/EDeletedState.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/EDeletedState.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/EDeletedState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/EDeletedState.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,10 +16,9 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>Lifecycle state.</p>\n- * <p/>\n- * <p>Represents an embedded instance that has been deleted in the current\n- * transaction.</p>\n+ * Lifecycle state.\n+ *  Represents an embedded instance that has been deleted in the current\n+ * transaction.\n  *\n  * @author Abe White\n  */"},{"sha":"80fc384e18cf097044eb6a19821818e9890ca1c3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/EDirtyState.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/EDirtyState.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/EDirtyState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/EDirtyState.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,10 +16,9 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>Lifecycle state.</p>\n- * <p/>\n- * <p>Represents an embedded instance that is participating in the current\n- * transaction, and has been modified.</p>\n+ * Lifecycle state.\n+ *  Represents an embedded instance that is participating in the current\n+ * transaction, and has been modified.\n  *\n  * @author Abe White\n  */"},{"sha":"550ffab552f3bb6981ad6e8adf12f9ce5d539965","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ENonTransState.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ENonTransState.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ENonTransState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ENonTransState.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,11 +16,10 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>Lifecycle state.</p>\n- * <p/>\n- * <p>Represents an embedded instance that is not transactional, but that\n- * allows access to persistent data.  This state is reachable only if the\n- * retainValues flag of the broker is set.</p>\n+ * Lifecycle state.\n+ *  Represents an embedded instance that is not transactional, but that\n+ * allows access to persistent data. This state is reachable only if the\n+ * retainValues flag of the broker is set.\n  *\n  * @author Abe White\n  */"},{"sha":"0686e07a8d04ce150821425915f3cbd8b3c36c11","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","status":"modified","additions":47,"deletions":55,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -48,27 +48,25 @@\n import org.apache.openjpa.util.UserException;\n \n /**\n- * <p>Implementation of an expression-based query, which can handle\n+ * Implementation of an expression-based query, which can handle\n  * String-based query expressions such as JPQL and JDOQL.\n  * This implementation is suitable for in-memory operation.\n- * Override the following methods to also support\n- * datastore operation:\n+ * Override the following methods to also support datastore operation:\n  * <ul>\n  * <li>Override {@link #supportsDataStoreExecution} to return\n  * <code>true</code>.</li>\n  * <li>Override {@link #executeQuery}, {@link #executeDelete}, and\n  * {@link #executeUpdate} to execute the query against the data store.\n  * Keep in mind that the parameters passed to this method might be in use\n- * by several threads in different query instances.  Thus components like\n+ * by several threads in different query instances. Thus components like\n  * the expression factory must either be thread safe, or this method must\n  * synchronize on them.</li>\n  * <li>Override {@link #getDataStoreActions} to return a representation of\n- * the actions that will be taken on the data store.  For use in visual\n+ * the actions that will be taken on the data store. For use in visual\n  * tools.</li>\n  * <li>Override {@link #getExpressionFactory} to return a factory for creating\n- * expressions in the datastore's language.  The factory must be\n- * cachable.</li>\n- * </ul></p>\n+ * expressions in the datastore's language. The factory must be cachable.</li>\n+ * </ul>\n  *\n  * @author Abe White\n  */\n@@ -168,22 +166,20 @@ public Executor newDataStoreExecutor(ClassMetaData meta, boolean subs) {\n     /**\n      * Execute the given expression against the given candidate extent.\n      *\n-     * @param    ex            current executor\n-     * @param    base        the base type the query should match\n-     * @param    types        the independent candidate types\n-     * @param    subclasses    true if subclasses should be included in the\n-     * results\n-     * @param    facts        the expression factory used to build the query for\n+     * @param ex current executor\n+     * @param base the base type the query should match\n+     * @param types the independent candidate types\n+     * @param subclasses true if subclasses should be included in the results\n+     * @param facts the expression factory used to build the query for\n      * each base type\n-     * @param    parsed        the parsed query values\n-     * @param    params        parameter values, or empty array\n-     * @param    lrs            whether the result will be handled as a potentially\n+     * @param parsed the parsed query values\n+     * @param params parameter values, or empty array\n+     * @param lrs whether the result will be handled as a potentially\n      * large result set, or will be consumed greedily\n-     * @param    startIdx    0-based inclusive index for first result to return\n+     * @param startIdx 0-based inclusive index for first result to return\n      * from result object provider\n-     * @param    endIdx        0-based exclusive index for last result to return\n-     * from result object provider, or\n-     * {@link Long#MAX_VALUE} for no max\n+     * @param endIdx 0-based exclusive index for last result to return\n+     * from result object provider, or {@link Long#MAX_VALUE} for no max\n      * @return a provider for matching objects\n      */\n     protected ResultObjectProvider executeQuery(Executor ex,\n@@ -197,15 +193,14 @@ protected ResultObjectProvider executeQuery(Executor ex,\n      * Execute the given expression against the given candidate extent\n      * and delete the instances.\n      *\n-     * @param    ex            current executor\n-     * @param    base        the base type the query should match\n-     * @param    types        the independent candidate types\n-     * @param    subclasses    true if subclasses should be included in the\n-     * results\n-     * @param    facts        the expression factory used to build the query for\n+     * @param ex current executor\n+     * @param base the base type the query should match\n+     * @param types the independent candidate types\n+     * @param subclasses true if subclasses should be included in the results\n+     * @param facts the expression factory used to build the query for\n      * each base type\n-     * @param    parsed        the parsed query values\n-     * @param    params        parameter values, or empty array\n+     * @param parsed the parsed query values\n+     * @param params parameter values, or empty array\n      * @return a number indicating the number of instances deleted,\n      * or null to execute the delete in memory\n      */\n@@ -219,15 +214,14 @@ protected Number executeDelete(Executor ex, ClassMetaData base,\n      * Execute the given expression against the given candidate extent\n      * and updates the instances.\n      *\n-     * @param    ex            current executor\n-     * @param    base        the base type the query should match\n-     * @param    types        the independent candidate types\n-     * @param    subclasses    true if subclasses should be included in the\n-     * results\n-     * @param    facts        the expression factory used to build the query for\n+     * @param ex current executor\n+     * @param base the base type the query should match\n+     * @param types the independent candidate types\n+     * @param subclasses true if subclasses should be included in the results\n+     * @param facts the expression factory used to build the query for\n      * each base type\n-     * @param    parsed        the parsed query values\n-     * @param    params        parameter values, or empty array\n+     * @param parsed the parsed query values\n+     * @param params parameter values, or empty array\n      * @return a number indicating the number of instances updated,\n      * or null to execute the update in memory.\n      */\n@@ -241,20 +235,18 @@ protected Number executeUpdate(Executor ex, ClassMetaData base,\n      * Return the commands that will be sent to the datastore in order\n      * to execute the query, typically in the database's native language.\n      *\n-     * @param    ex            current executor\n-     * @param    base        the base type the query should match\n-     * @param    types        the independent candidate types\n-     * @param    subclasses    true if subclasses should be included in the\n-     * results\n-     * @param    facts        the expression factory used to build the query for\n+     * @param ex current executor\n+     * @param base the base type the query should match\n+     * @param types the independent candidate types\n+     * @param subclasses true if subclasses should be included in the results\n+     * @param facts the expression factory used to build the query for\n      * each base type\n-     * @param    parsed        the parsed query values\n-     * @param    params        parameter values, or empty array\n-     * @param    startIdx    0-based inclusive index for first result to return\n+     * @param parsed the parsed query values\n+     * @param params parameter values, or empty array\n+     * @param startIdx 0-based inclusive index for first result to return\n      * from result object provider\n-     * @param    endIdx        0-based exclusive index for last result to return\n-     * from result object provider, or\n-     * {@link Long#MAX_VALUE} for no max\n+     * @param endIdx 0-based exclusive index for last result to return\n+     * from result object provider, or {@link Long#MAX_VALUE} for no max\n      * @return a textual description of the query to execute\n      */\n     protected String[] getDataStoreActions(Executor ex, ClassMetaData base,\n@@ -275,8 +267,8 @@ protected Number executeUpdate(Executor ex, ClassMetaData base,\n \n     /**\n      * Return an {@link ExpressionFactory} to use to create an expression to\n-     * be executed against an extent.  Each factory will be used to compile\n-     * one filter only.  The factory must be cachable.\n+     * be executed against an extent. Each factory will be used to compile\n+     * one filter only. The factory must be cachable.\n      */\n     protected ExpressionFactory getExpressionFactory(ClassMetaData type) {\n         throw new UnsupportedException();\n@@ -528,10 +520,10 @@ public Object getOrderingValue(StoreQuery q, Object[] params,\n     }\n \n     /**\n-     *  The DataStoreExecutor executes the query against the\n-     *  implementation's overridden {@link #executeQuery} method.\n+     * The DataStoreExecutor executes the query against the\n+     * implementation's overridden {@link #executeQuery} method.\n      *\n-     *  @author Marc Prud'hommeaux\n+     * @author Marc Prud'hommeaux\n      */\n     private static class DataStoreExecutor\n         extends AbstractExpressionExecutor"},{"sha":"f40bac806ff8a09c29b2d1fc08d083a6aa3984fe","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Extent.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Extent.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Extent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Extent.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -20,7 +20,7 @@\n import java.util.List;\n \n /**\n- * <p>Representation of all members of a persistent class.</p>\n+ * Representation of all members of a persistent class.\n  *\n  * @author Abe White\n  * @author Patrick Linskey\n@@ -33,14 +33,12 @@\n     public FetchConfiguration getFetchConfiguration();\n \n     /**\n-     * Whether this extent will ignore changes made in the current\n-     * transaction.\n+     * Whether this extent will ignore changes made in the current transaction.\n      */\n     public boolean getIgnoreChanges();\n \n     /**\n-     * Whether this extent will ignore changes made in the current\n-     * transaction.\n+     * Whether this extent will ignore changes made in the current transaction.\n      */\n     public void setIgnoreChanges(boolean ignoreChanges);\n \n@@ -84,7 +82,7 @@\n     public void lock();\n \n     /**\n-     *\tRelease the internal lock.\n+     * Release the internal lock.\n      */\n \tpublic void unlock ();\n }"},{"sha":"6d6f27eae61600a2cd5535caa6edaa6b54e82ed9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExtentImpl.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExtentImpl.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExtentImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExtentImpl.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -35,7 +35,7 @@\n import org.apache.openjpa.util.OpenJPAException;\n \n /**\n- * <p>Representation of all members of a persistent class.</p>\n+ * Representation of all members of a persistent class.\n  *\n  * @author Abe White\n  * @author Patrick Linskey\n@@ -59,9 +59,9 @@\n     /**\n      * Constructor.\n      *\n-     * @param    broker        the owning broker\n-     * @param    type        the candidate class\n-     * @param    subs        whether subclasses are included in the extent\n+     * @param broker the owning broker\n+     * @param type the candidate class\n+     * @param subs whether subclasses are included in the extent\n      */\n     ExtentImpl(Broker broker, Class type, boolean subs,\n         FetchConfiguration fetch) {\n@@ -327,8 +327,8 @@ public boolean evaluate(Object o) {\n     }\n \n     /**\n-     *\tIterator over all new objects in this extent.  This iterator is always\n-     *\twrapped, so it doesn't need to keep track of whether it's closed.\n+     * Iterator over all new objects in this extent. This iterator is always\n+     * wrapped, so it doesn't need to keep track of whether it's closed.\n      */\n     private class FilterNewIterator\n         extends FilterIterator"},{"sha":"f974b809b55beeeb2f3502fe3f5c5cc90e65f539","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -23,8 +23,8 @@\n import org.apache.openjpa.lib.rop.ResultObjectProvider;\n \n /**\n- * <p>Allows configuration and optimization of how objects are loaded from\n- * the data store.</p>\n+ * Allows configuration and optimization of how objects are loaded from\n+ * the data store.\n  *\n  * @since 3.0\n  * @author Abe White\n@@ -53,8 +53,8 @@\n \n     /**\n      * Called automatically by the system to associate the fetch configuration\n-     * with a context before use.  The fetch configuration properties should\n-     * be synchronized with the context's configuration object.  Subclasses\n+     * with a context before use. The fetch configuration properties should\n+     * be synchronized with the context's configuration object. Subclasses\n      * for specific back ends cannot rely on the context's configuration\n      * implementing their back end's configuration sub-interface.\n      */\n@@ -72,14 +72,14 @@\n \n     /**\n      * Return the fetch batch size for large result set support.\n-     * Defaults to the\t<code>org.apache.openjpa.FetchBatchSize</code> setting.  Note\n+     * Defaults to the\t<code>org.apache.openjpa.FetchBatchSize</code> setting. Note\n      * that this property will be ignored under some data stores.\n      */\n     public int getFetchBatchSize();\n \n     /**\n      * Set the fetch batch size for large result set support.\n-     * Defaults to the\t<code>org.apache.openjpa.FetchBatchSize</code> setting.  Note\n+     * Defaults to the\t<code>org.apache.openjpa.FetchBatchSize</code> setting. Note\n      * that this property will be ignored under some data stores.\n      */\n     public FetchConfiguration setFetchBatchSize(int fetchBatchSize);\n@@ -100,7 +100,7 @@\n     public FetchConfiguration setMaxFetchDepth(int max);\n \n     /**\n-     * Return whether or not query caching is enabled.  If this returns\n+     * Return whether or not query caching is enabled. If this returns\n      * <code>true</code> but the datacache plugin is not installed, caching\n      * will not be enabled. If this\n      * returns <code>false</code>, query caching will not be used\n@@ -109,7 +109,7 @@\n     public boolean getQueryCache();\n \n     /**\n-     * Control whether or not query caching is enabled.  This has no effect\n+     * Control whether or not query caching is enabled. This has no effect\n      * if the datacache plugin is not installed, or if the query cache size\n      * is set to zero.\n      */\n@@ -127,7 +127,7 @@\n \n     /**\n      * Returns immutable set of names of the fetch groups that this component\n-     * will use when loading objects.  Defaults to the\n+     * will use when loading objects. Defaults to the\n      * <code>org.apache.openjpa.FetchGroups</code> setting.\n      *\n      * @return empty set if no group has been added.\n@@ -184,7 +184,7 @@\n \n     /**\n      * Returns the set of fully-qualified field names that this component\n-     * will use when loading objects.  Defaults to the empty set.\n+     * will use when loading objects. Defaults to the empty set.\n      */\n     public Set getFields();\n \n@@ -303,12 +303,12 @@\n     public void setHint(String name, Object value);\n \n     /**\n-     *  Returns the hint for the specific key, or null if the hint\n-     *  is not specified.\n+     * Returns the hint for the specific key, or null if the hint\n+     * is not specified.\n      *\n-\t *  @param  name   the hint name\n+\t * @param name the hint name\n \t *\n-\t *\t@since\t4.0\n+\t * @since\t4.0\n \t */\n \tpublic Object getHint (String name);\n }"},{"sha":"cf5ca3e69f5ea8cd8624e221b840860836160493","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -38,8 +38,8 @@\n import org.apache.openjpa.util.NoTransactionException;\n \n /**\n- * <p>Allows configuration and optimization of how objects are loaded from\n- * the data store.</p>\n+ * Allows configuration and optimization of how objects are loaded from\n+ * the data store.\n  *\n  * @since 3.0\n  * @author Abe White\n@@ -99,7 +99,7 @@ public Object clone() {\n     }\n \n     /**\n-     * Return a new hollow instance.  Subclasses should override to return\n+     * Return a new hollow instance. Subclasses should override to return\n      * a new instance of their type, with cached permissions set appropriately.\n      */\n     protected FetchConfigurationImpl newInstance() {"},{"sha":"62e7c805e7205e9ebdd6951c10256098bc850a7a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchState.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchState.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchState.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,"},{"sha":"ac3ca89d5a7cf4cc0a961653e8625c9ab130e264","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchStateImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchStateImpl.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchStateImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchStateImpl.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -130,7 +130,7 @@ protected int getRecursionDepth(FieldMetaData fm) {\n      *\n      * @param fm\n      * @return maximum recursion depth across common fetch groups. -1 is treated\n-     *         as positive infinity.\n+     * as positive infinity.\n      */\n     protected int initalizeRecusrionDepth(FieldMetaData fm) {\n         Set commonFGNs = new HashSet();"},{"sha":"ad00f59aadde686026b1f96aa28eee981ce4d42f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -36,7 +36,7 @@\n import serp.util.Strings;\n \n /**\n- * <p>Helper methods for dealing with query filters.</p>\n+ * Helper methods for dealing with query filters.\n  *\n  * @author Abe White\n  * @nojavadoc\n@@ -505,11 +505,11 @@ private static Object op(BigInteger n1, BigInteger n2, int op) {\n \n     /**\n      * Parses the given declarations into a list of type, name, type, name...\n-     * Returns null if no declarations.  Assumes declaration is not an empty\n+     * Returns null if no declarations. Assumes declaration is not an empty\n      * string and is already trimmed (valid assumptions given the checks made\n      * in our setters).\n      *\n-     * @param    decType        the type of declaration being parsed, for use in\n+     * @param decType the type of declaration being parsed, for use in\n      * error messages\n      */\n     public static List parseDeclaration(String dec, char split,\n@@ -561,7 +561,7 @@ public static List parseDeclaration(String dec, char split,\n     }\n \n     /**\n-     * Split the given expression list into distinct expressions.  Assumes the\n+     * Split the given expression list into distinct expressions. Assumes the\n      * given string is not null or of zero length and is already trimmed\n      * (valid assumptions given the checks in our setters and before\n      * this method call).\n@@ -649,8 +649,7 @@ else if (!string) {\n \n     /**\n      * Add the given access path metadatas to the full path list, making sure\n-     * to maintain only base metadatas in the list.  The given list may\n-     * be null.\n+     * to maintain only base metadatas in the list. The given list may be null.\n      */\n     public static List addAccessPathMetaDatas(List metas,\n         ClassMetaData[] path) {\n@@ -838,7 +837,7 @@ public static Object hintToGetter(Object target, String hintKey) {\n     }\n \n     /**\n-     *\tSet the value of the property named by the hint key.\n+     * Set the value of the property named by the hint key.\n      */\n     public static void hintToSetter(Object target, String hintKey,\n         Object value) {"},{"sha":"6d7f83e01742909522610fb7d5c3cb65d08c1e8c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FindCallbacks.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FindCallbacks.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FindCallbacks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FindCallbacks.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,15 +16,15 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>Allows facades to control the particulars of the find operation\n- * through callbacks.</p>\n+ * Allows facades to control the particulars of the find operation\n+ * through callbacks.\n  *\n  * @author Abe White\n  */\n public interface FindCallbacks {\n \n     /**\n-     * Process find argument.  Throw proper {@link OpenJPAException}\n+     * Process find argument. Throw proper {@link OpenJPAException}\n      * for illegal value.\n      *\n      * @return the id to look up, or null to ignore this argument"},{"sha":"49266cd5e59c85f308d1814fd9adc4defec37e6f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/HollowState.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/HollowState.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/HollowState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/HollowState.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,13 +16,12 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>Lifecycle state.</p>\n- * <p/>\n- * <p>Represents a hollow instance that exists in the data store, but whose\n+ * Lifecycle state.\n+ *  Represents a hollow instance that exists in the data store, but whose\n  * state has not been loaded and who is not active in the current transaction\n- * (if any).  This may be the state of instances returned on ID lookups or by\n+ * (if any). This may be the state of instances returned on ID lookups or by\n  * traversing relations, and the state of persistent instances outside of\n- * transactions (unless the retainValues flag is set in the Broker).</p>\n+ * transactions (unless the retainValues flag is set in the Broker).\n  *\n  * @author Abe White\n  */"},{"sha":"2775a8c9611697e4b479bcc9af3d47421e95b6d0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/InMemorySavepointManager.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/InMemorySavepointManager.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/InMemorySavepointManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/InMemorySavepointManager.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,8 +16,7 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>A {@link SavepointManager} implementation which stores all data\n- * in memory.</p>\n+ * A {@link SavepointManager} implementation which stores all data in memory.\n  *\n  * @author Steve Kim\n  * @since 3.4\n@@ -29,7 +28,7 @@\n \n     /**\n      * Return whether to call {@link Broker#preFlush}\n-     * when a savepoint is set.  While this will allow for tracking of\n+     * when a savepoint is set. While this will allow for tracking of\n      * newly embedded fields, it has the side effect of going through\n      * pre-flush operations.\n      */\n@@ -39,7 +38,7 @@ public boolean getPreFlush() {\n \n     /**\n      * Set whether to call {@link Broker#preFlush}\n-     * when a savepoint is set.  While this will allow for tracking of\n+     * when a savepoint is set. While this will allow for tracking of\n      * newly embedded fields, it has the side effect of going through\n      * pre-flush operations.\n      */"},{"sha":"8d8afc08f0b08cd64273d04600e78ac90c10d83e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/InverseManager.java","status":"modified","additions":10,"deletions":11,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/InverseManager.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/InverseManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/InverseManager.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -31,10 +31,9 @@\n import org.apache.openjpa.util.InvalidStateException;\n \n /**\n- * <p>Class which manages inverse relations before flushing\n- * to the datastore.  Ensures that inverse fields are set.</p>\n- * <p/>\n- * <p>Currently limited to managing PC and Collection-type relations.</p>\n+ * Class which manages inverse relations before flushing\n+ * to the datastore. Ensures that inverse fields are set.\n+ *  Currently limited to managing PC and Collection-type relations.\n  *\n  * @author Steve Kim\n  */\n@@ -72,7 +71,7 @@ public boolean getManageLRS() {\n     }\n \n     /**\n-     * Set whether to false LRS relations.  Defaults to false.\n+     * Set whether to false LRS relations. Defaults to false.\n      */\n     public void setManageLRS(boolean manage) {\n         _manageLRS = manage;\n@@ -123,7 +122,7 @@ public void setConfiguration(Configuration conf) {\n     /**\n      * Correct relations from the given dirty field to inverse instances.\n      * Field <code>fmd</code> of the instance managed by <code>sm</code> has\n-     * value <code>value</code>.  Ensure that all inverses relations from\n+     * value <code>value</code>. Ensure that all inverses relations from\n      * <code>value</code> are consistent with this.\n      */\n     public void correctRelations(OpenJPAStateManager sm, FieldMetaData fmd,\n@@ -227,7 +226,7 @@ private boolean isLoaded(OpenJPAStateManager sm, int field) {\n \n     /**\n      * Remove all relations between the initial value of <code>fmd</code> for\n-     * the instance managed by <code>sm</code> and its inverses.  Relations\n+     * the instance managed by <code>sm</code> and its inverses. Relations\n      * shared with <code>newValue</code> can be left intact.\n      */\n     protected void clearInverseRelations(OpenJPAStateManager sm,\n@@ -296,16 +295,16 @@ protected void clearInverseRelations(OpenJPAStateManager sm, Object val,\n     }\n \n     /**\n-     * Store null value at the given field.  Verify that the given compare\n-     * value is the value being nulled.  Pass NONE for no comparison.\n+     * Store null value at the given field. Verify that the given compare\n+     * value is the value being nulled. Pass NONE for no comparison.\n      */\n     protected void storeNull(OpenJPAStateManager sm, FieldMetaData fmd,\n         Object compare) {\n         storeField(sm, fmd, compare, null);\n     }\n \n     /**\n-     * Store a given value at the given field.  Compare the given\n+     * Store a given value at the given field. Compare the given\n      * argument if not NONE.\n      */\n     protected void storeField(OpenJPAStateManager sm, FieldMetaData fmd,"},{"sha":"82f05e1c85febcb51972fe432cb2446d60ab2b49","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LocalManagedRuntime.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LocalManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LocalManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LocalManagedRuntime.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -30,9 +30,9 @@\n import org.apache.openjpa.util.StoreException;\n \n /**\n- * <p>Uses a local implementation of the {@link TransactionManager} interface.\n+ * Uses a local implementation of the {@link TransactionManager} interface.\n  * This manager is valid only for a single {@link Broker}.\n- * It duplicates non-managed transaction control.</p>\n+ * It duplicates non-managed transaction control.\n  *\n  * @author Abe White\n  */\n@@ -48,7 +48,7 @@\n     private boolean _rollbackOnly = false;\n \n     /**\n-     * Constructor.  Provide broker that will be requesting managed\n+     * Constructor. Provide broker that will be requesting managed\n      * transaction info.\n      */\n     public LocalManagedRuntime(Broker broker) {\n@@ -140,7 +140,7 @@ public synchronized void rollback() {\n \n     /**\n      * Notifies the factory sync that the transaction has ended with\n-     * the given status.  Clears all transaction state regardless\n+     * the given status. Clears all transaction state regardless\n      * of any exceptions during the callback.\n      */\n     private void notifyAfterCompletion(int status) {"},{"sha":"3f88714e57ff664c0f92fa4cb6fae116ac5cfcfa","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LockLevels.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LockLevels.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LockLevels.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LockLevels.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,25 +16,25 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>Standard object lock levels.</p>\n+ * Standard object lock levels.\n  *\n  * @author Abe White\n  * @since 4.0\n  */\n public interface LockLevels {\n \n     /**\n-     * No lock.  Value of 0.\n+     * No lock. Value of 0.\n      */\n     public static final int LOCK_NONE = 0;\n \n     /**\n-     * Generic read lock level.  Value of 10.\n+     * Generic read lock level. Value of 10.\n      */\n     public static final int LOCK_READ = 10;\n \n     /**\n-     *\tGeneric write lock level.  Value of 20.\n+     * Generic write lock level. Value of 20.\n      */\n     public static final int LOCK_WRITE = 20;\n }"},{"sha":"7472db4bc1386dca2d03e6b39b5a4f4cba133ef0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LockManager.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LockManager.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LockManager.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -20,7 +20,7 @@\n import org.apache.openjpa.lib.util.Closeable;\n \n /**\n- * Handles obtaining and releasing locks on objects.  The lock manager\n+ * Handles obtaining and releasing locks on objects. The lock manager\n  * generally does not have to worry about synchronization, as the context is\n  * responsible for synchronizing the calls it makes to the lock manager.\n  *\n@@ -43,26 +43,26 @@\n     public int getLockLevel(OpenJPAStateManager sm);\n \n     /**\n-     * Obtain a lock on the specified object.  This method may be called when\n+     * Obtain a lock on the specified object. This method may be called when\n      * a user explicitly locks an object, and is also called automatically\n-     * for every object accessed during a transaction.  The implementation\n+     * for every object accessed during a transaction. The implementation\n      * must track already-locked objects, and must be optimized to return\n      * quickly when the given object does not need additional locking.\n      * The lock manager might use the state manager's lock object for\n      * bookkeeping information.\n      *\n-     * @param    sm        the object to lock\n-     * @param    level    one of the lock constants defined in {@link LockLevels},\n+     * @param sm the object to lock\n+     * @param level one of the lock constants defined in {@link LockLevels},\n      * or a custom level\n-     * @param    timeout    the timeout in milliseconds, or a negative number for\n+     * @param timeout the timeout in milliseconds, or a negative number for\n      * no timeout\n-     * @param    sdata    the context information passed from the store manager\n+     * @param sdata the context information passed from the store manager\n      * to the persistence context, if any; lock managers\n      * specific to a certain back end may be able to take\n      * advantage of this; others should ignore it\n      * @throws LockException if a lock cannot be obtained in the\n      * given number of milliseconds\n-     * @see    OpenJPAStateManager#setLock\n+     * @see OpenJPAStateManager#setLock\n      */\n     public void lock(OpenJPAStateManager sm, int level, int timeout,\n         Object sdata);\n@@ -76,33 +76,33 @@ public void lockAll(Collection sms, int level, int timeout,\n         Object sdata);\n \n     /**\n-     * Release the lock on the given object.  This method will be called\n+     * Release the lock on the given object. This method will be called\n      * automatically for each state manager with a lock object set on\n      * transaction completion, just before the call to {@link #endTransaction}.\n-     * The lock manager should null the state manager's lock object.  Note\n+     * The lock manager should null the state manager's lock object. Note\n      * that some state manager may be garbage collected during a transaction;\n      * thus lock managers cannot rely on this method being called for every\n      * state manager.\n      *\n-     * @see    OpenJPAStateManager#setLock\n+     * @see OpenJPAStateManager#setLock\n      */\n     public void release(OpenJPAStateManager sm);\n \n     /**\n-     * Notification that a transaction is beginning.  Locks are only obtained\n+     * Notification that a transaction is beginning. Locks are only obtained\n      * within transactions, so an implementation might use this method to\n      * initialize bookkeeping datastructures, etc.\n      */\n     public void beginTransaction();\n \n     /**\n-     * Notification that the current transaction has ended.  Clear all\n+     * Notification that the current transaction has ended. Clear all\n      * datastructures, release any left over locks, etc.\n      */\n     public void endTransaction();\n \n     /**\n-     *\tFree any resources.\n+     * Free any resources.\n      */\n     public void close ();\n }"},{"sha":"fefb8e28b3cfb641160b5e9cc61728dd400a01b6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -38,7 +38,7 @@\n import org.apache.openjpa.util.UserException;\n \n /**\n- * <p>A query that is executed by a user-defined method.</p>\n+ * A query that is executed by a user-defined method.\n  *\n  * @author Abe White\n  * @nojavadoc"},{"sha":"9a713d72b013b1395e29d51e2e3f05f9ec802d4a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/NoneLockManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/NoneLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/NoneLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/NoneLockManager.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,"},{"sha":"abb8ee852ca78c55cf4cf6b1ebcdd235d64ca245","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -32,8 +32,7 @@\n import serp.util.Numbers;\n \n /**\n- * <p>State manager used to access state of embedded object id primary key\n- * fields.</p>\n+ * State manager used to access state of embedded object id primary key fields.\n  *\n  * @author Abe White\n  * @nojavadoc\n@@ -54,7 +53,7 @@\n     /**\n      * Constructor; supply embedded object id and its owner.\n      *\n-     * @param    owner    may be null\n+     * @param owner may be null\n      */\n     public ObjectIdStateManager(Object oid, OpenJPAStateManager owner,\n         ValueMetaData ownerVal) {\n@@ -711,9 +710,9 @@ private Object getValue(int field) {\n     }\n \n     /**\n-     *\tSet the value of the given field using reflection.\n-     *\tRelies on the fact that all oid fields/properties are made public\n-     *\tduring enhancement.\n+     * Set the value of the given field using reflection.\n+     * Relies on the fact that all oid fields/properties are made public\n+     * during enhancement.\n      */\n     private void setValue(int field, Object val, boolean forceInst) {\n         if (_oid == null && forceInst) {"},{"sha":"fc05401897857de19607b5ce194ce3ac6885224e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpCallbacks.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpCallbacks.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpCallbacks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpCallbacks.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,8 +16,8 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>Allows facades to control the particulars of persistence operations\n- * through callbacks.</p>\n+ * Allows facades to control the particulars of persistence operations\n+ * through callbacks.\n  *\n  * @author Abe White\n  */\n@@ -40,12 +40,12 @@\n     public static final int ACT_RUN = 2 << 1;\n \n     /**\n-     * Process operation argument.  Throw proper {@link OpenJPAException}\n+     * Process operation argument. Throw proper {@link OpenJPAException}\n      * for illegal value.\n      *\n-     * @param    op    the operation constant\n-     * @param    arg    the object passed to the operation\n-     * @param    sm    the argument's state manager, or null if none\n+     * @param op the operation constant\n+     * @param arg the object passed to the operation\n+     * @param sm the argument's state manager, or null if none\n      * @return the action to take on the argument\n      */\n     public int processArgument(int op, Object arg, OpenJPAStateManager sm);"},{"sha":"9ee318e5ede6b4e90d6b86a990eae1e6236c8753","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPASavepoint.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPASavepoint.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPASavepoint.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPASavepoint.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -21,8 +21,8 @@\n import java.util.Map;\n \n /**\n- * <p>Represents a savepoint where operations afterwards can be rolled\n- * back and restored to this point<p>\n+ * Represents a savepoint where operations afterwards can be rolled\n+ * back and restored to this point\n  *\n  * @author Steve Kim\n  * @since 3.4\n@@ -37,7 +37,7 @@\n     private Map _saved;\n \n     /**\n-     * Constructor.  Indicate whether to copy field data into memory.\n+     * Constructor. Indicate whether to copy field data into memory.\n      */\n     public OpenJPASavepoint(Broker broker, String name, boolean copy) {\n         _broker = broker;\n@@ -90,21 +90,21 @@ public void save(Collection states) {\n     }\n \n     /**\n-     * Release this savepoint and any associated resources.  Releases\n+     * Release this savepoint and any associated resources. Releases\n      * will happen in reverse order of creation.\n      *\n-     * @param    user    if true, user initiated, otherwise a side effect of\n+     * @param user if true, user initiated, otherwise a side effect of\n      * another savepoint's release/rollback\n      */\n     public void release(boolean user) {\n         _saved = null;\n     }\n \n     /**\n-     *\tHandle the rolled back state, returning saved data.\n-     *\tSubclasses should return the collection returned from this method.\n+     * Handle the rolled back state, returning saved data.\n+     * Subclasses should return the collection returned from this method.\n      *\n-     *\t@param    previous    previous savepoints set in the transaction\n+     * @param previous previous savepoints set in the transaction\n      */\n     public Collection rollback(Collection previous) {\n         Map saved;"},{"sha":"cd6dbfc5929ae5b65662d69c6e351872b7e31012","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPAStateManager.java","status":"modified","additions":46,"deletions":49,"changes":95,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPAStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPAStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPAStateManager.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -26,18 +26,16 @@\n import org.apache.openjpa.util.Proxy;\n \n /**\n- * <p>Interface implemented by OpenJPA state managers.  Each state manager\n- * manages the state of a single persistence capable instance.  The\n+ * Interface implemented by OpenJPA state managers. Each state manager\n+ * manages the state of a single persistence capable instance. The\n  * state manager is also responsible for all communications about the\n- * instance to the {@link StoreManager}.</p>\n- * <p/>\n- * <p>The <code>fetchXXXField</code> and <code>storeXXXField</code>\n+ * instance to the {@link StoreManager}.\n+ *  The <code>fetchXXXField</code> and <code>storeXXXField</code>\n  * methods can be used to get and set fields of the managed persistent object.\n  * Most back-end code, however, should use the similar\n  * <code>fetchXXX</code> and <code>storeXXX</code> methods in place of\n- * the field methods.  These methods function just like the field methods, but\n- * also pass the value through the externalizer and factory the field may\n- * have.</p>\n+ * the field methods. These methods function just like the field methods, but\n+ * also pass the value through the externalizer and factory the field may have.\n  *\n  * @author Abe White\n  */\n@@ -85,7 +83,7 @@\n \n     /**\n      * Return the {@link PersistenceCapable} instance that provides access to\n-     * the instance managed by this state manager.  May be a proxy around\n+     * the instance managed by this state manager. May be a proxy around\n      * the actual managed instance.\n      */\n     public PersistenceCapable getPersistenceCapable();\n@@ -140,29 +138,29 @@\n \n     /**\n      * Return a mutable mask of the unloaded fields that need loading based\n-     * on the given fetch configuration.  Pass in null to retrieve all\n+     * on the given fetch configuration. Pass in null to retrieve all\n      * unloaded fields.\n      */\n     public BitSet getUnloaded(FetchState fetchState);\n \n     /**\n-     * Create a new hollow proxy instance for the given field.  In cases where\n+     * Create a new hollow proxy instance for the given field. In cases where\n      * the field externalizes to an SCO but is declared something else, the\n-     * returned object may not implement {@link Proxy}.  In all other cases,\n+     * returned object may not implement {@link Proxy}. In all other cases,\n      * this method delegates to the system {@link org.apache.openjpa.util.ProxyManager}\n-     * with the correct field information.  The returned proxy's owner is\n+     * with the correct field information. The returned proxy's owner is\n      * unset so that modifications to the proxy will not be tracked while its\n-     * state is initialized.  Calling {@link #storeField} or {@link #store}\n+     * state is initialized. Calling {@link #storeField} or {@link #store}\n      * will set the proxy's owner automatically.\n      */\n     public Object newProxy(int field);\n \n     /**\n-     * Create a new hollow proxy instance for the given field.  This method\n+     * Create a new hollow proxy instance for the given field. This method\n      * differs from {@link #newProxy} in that it returns a proxy for the\n      * field's declared type, not its externalized type.\n      *\n-     * @see    #newProxy\n+     * @see #newProxy\n      */\n     public Object newFieldProxy(int field);\n \n@@ -182,23 +180,23 @@\n     public PCState getPCState();\n \n     /**\n-     * Return the identifier for this state manager.  This may return a\n+     * Return the identifier for this state manager. This may return a\n      * temporary identifier for new unflushed instances that have not been\n      * assigned an object id, or for non-persistent or embedded instances.\n      * For all other instances this method is the same as {@link #getObjectId}.\n      */\n     public Object getId();\n \n     /**\n-     * Return the instance's object id.  This method will return null if no\n-     * oid has been assigned.  Oids are assigned to newly-persisted instances\n+     * Return the instance's object id. This method will return null if no\n+     * oid has been assigned. Oids are assigned to newly-persisted instances\n      * when the user first asks for it, or on flush.\n      */\n     public Object getObjectId();\n \n     /**\n-     * Set the object id for the managed instance.  Some back ends may not be\n-     * able to assign a permanent oid until flush.  Do not call this method on\n+     * Set the object id for the managed instance. Some back ends may not be\n+     * able to assign a permanent oid until flush. Do not call this method on\n      * application identity instances; changing the primary key fields of\n      * application identity objects through the <code>storeXXXField</code>\n      * methods will automatically change the oid.\n@@ -208,20 +206,20 @@\n     /**\n      * Ask the store manager to assign a permanent oid to this new instance.\n      *\n-     * @param    flush    if true, flush if necessary to get a permanent oid; if\n+     * @param flush if true, flush if necessary to get a permanent oid; if\n      * false, the oid may be left unassigned\n      * @return true if an oid assigned, false otherwise\n      */\n     public boolean assignObjectId(boolean flush);\n \n     /**\n-     * The lock object set for this instance.  This object is generally\n+     * The lock object set for this instance. This object is generally\n      * managed by the system lock manager.\n      */\n     public Object getLock();\n \n     /**\n-     * The lock object set for this instance.  This object is generally\n+     * The lock object set for this instance. This object is generally\n      * managed by the system lock manager.\n      */\n     public void setLock(Object lock);\n@@ -233,17 +231,17 @@\n \n     /**\n      * Set the version indicator for this instance, as loaded from the\n-     * data store.  This method is used by the {@link StoreManager} when\n-     * loading instance data.  On rollback, the version will be rolled back\n-     * to this value.  Version objects should be serializable and should not\n+     * data store. This method is used by the {@link StoreManager} when\n+     * loading instance data. On rollback, the version will be rolled back\n+     * to this value. Version objects should be serializable and should not\n      * require vendor-specific classes, because they are transferred to\n      * detached objects.\n      */\n     public void setVersion(Object version);\n \n     /**\n      * Set the next version indicator in the datastore pending a successful\n-     * flush.  The {@link StoreManager} uses this method during flush.\n+     * flush. The {@link StoreManager} uses this method during flush.\n      */\n     public void setNextVersion(Object version);\n \n@@ -254,8 +252,7 @@\n     public boolean isVersionUpdateRequired();\n \n     /**\n-     * Returns true if this state needs to issue a version check at\n-     * flush time.\n+     * Returns true if this state needs to issue a version check at flush time.\n      */\n     public boolean isVersionCheckRequired();\n \n@@ -271,7 +268,7 @@\n      * This object is not used or modified in any way by the generic\n      * persistence layer.\n      *\n-     * @param    cacheable    whether the impl data can be shared among instances\n+     * @param cacheable whether the impl data can be shared among instances\n      * in different contexts if L2 caching is enabled\n      * @return the previous impl data value, if any\n      */\n@@ -284,14 +281,14 @@\n     public boolean isImplDataCacheable();\n \n     /**\n-     * Field-level impl data.  Field-level data only applies to loaded fields,\n+     * Field-level impl data. Field-level data only applies to loaded fields,\n      * and is cleared when the field is cleared.\n      */\n     public Object getImplData(int field);\n \n     /**\n-     * Field-level impl data.  Field-level data only applies to loaded fields,\n-     * and is cleared when the field is cleared.  Whether the data is cached\n+     * Field-level impl data. Field-level data only applies to loaded fields,\n+     * and is cleared when the field is cleared. Whether the data is cached\n      * across instances depends on the corresponding field metadata's response\n      * to {@link FieldMetaData#usesImplData}.\n      *\n@@ -307,7 +304,7 @@\n \n     /**\n      * Use intermediate field data to store intermediate information that\n-     * might be available before the field is fully loaded.  The system\n+     * might be available before the field is fully loaded. The system\n      * will automatically clear this data when the field gets loaded.\n      * This data should be cacheable; the datastore cache will attempt to\n      * cache it if the field value is not available.\n@@ -316,7 +313,7 @@\n \n     /**\n      * Use intermediate field data to store intermediate information that\n-     * might be available before the field is fully loaded.  The system\n+     * might be available before the field is fully loaded. The system\n      * will automatically clear this data when the field gets loaded.\n      * This data should be cacheable; the datastore cache will attempt to\n      * cache it if the field value is not available.\n@@ -375,7 +372,7 @@\n \n     /**\n      * Return the externalized value of the field with the given index as an\n-     * object.  If there is no externalizer, this is equivalent to\n+     * object. If there is no externalizer, this is equivalent to\n      * {@link #fetchField}.\n      */\n     public Object fetch(int field);\n@@ -448,7 +445,7 @@\n \n     /**\n      * Set the value of the field with the given index as from the external\n-     * object value.  If there is no externalizer, this is equivalent to\n+     * object value. If there is no externalizer, this is equivalent to\n      * {@link #storeField}.\n      */\n     public void store(int field, Object value);\n@@ -471,23 +468,23 @@\n     /**\n      * Prepare the instance for refresh\n      *\n-     * @param    refreshAll    true if this instance is one of a collection of\n+     * @param refreshAll true if this instance is one of a collection of\n      * objects being refreshed\n      * @return true if the object needs a refresh, false otherwise\n-     * @see    Broker#refresh\n+     * @see Broker#refresh\n      */\n     public boolean beforeRefresh(boolean refreshAll);\n \n     /**\n-     *\tSet the given field to the given value.  Make the field dirty as\n-     *\tif user code set it.  Do not delete dependent objects in the field's\n-     *\tcurrent value.  This method is invoked by the remote package to\n-     *\tsynch a server-side state manager with remote changes.  We do not\n-     *\tneed to delete dependent instances because they will have been\n-\t *\tdeleted when the field changed on the client side, and those \n-\t *\tclient-side deletes will be transmitted independently.\n+     * Set the given field to the given value. Make the field dirty as\n+     * if user code set it. Do not delete dependent objects in the field's\n+     * current value. This method is invoked by the remote package to\n+     * synch a server-side state manager with remote changes. We do not\n+     * need to delete dependent instances because they will have been\n+\t * deleted when the field changed on the client side, and those\n+\t * client-side deletes will be transmitted independently.\n \t *\n-\t *\t@since\t3.1\n+\t * @since\t3.1\n \t */\n \tpublic void setRemote (int field, Object value);\n }"},{"sha":"7e0c83cf58fc4aa326e104f80bf3461b968b4290","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OrderingMergedResultObjectProvider.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OrderingMergedResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OrderingMergedResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OrderingMergedResultObjectProvider.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -21,8 +21,8 @@\n import org.apache.openjpa.lib.rop.ResultObjectProvider;\n \n /**\n- * <p>Merged result object provider specialization that extracts ordering\n- * values from results for comparison.</p>\n+ * Merged result object provider specialization that extracts ordering\n+ * values from results for comparison.\n  *\n  * @author Abe White\n  * @nojavadoc"},{"sha":"c192697af121fa2c6235305f8a8ced8afaff08ff","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCData.java","status":"modified","additions":12,"deletions":14,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCData.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCData.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -19,7 +19,7 @@\n import java.util.BitSet;\n \n /**\n- * Holds data about a single persistence capable instance.  This interface is\n+ * Holds data about a single persistence capable instance. This interface is\n  * used in the caching framework, and may also be used by simple store manager\n  * back-ends to hold persistent state.\n  *\n@@ -49,25 +49,23 @@\n     public void setImplData(Object val);\n \n     /**\n-     * Returns the current version object that this data was loaded\n-     * from.\n+     * Returns the current version object that this data was loaded from.\n      */\n     public Object getVersion();\n \n     /**\n-     * Sets the current version object that this data was loaded\n-     * from.\n+     * Sets the current version object that this data was loaded from.\n      */\n     public void setVersion(Object version);\n \n     /**\n      * Loads all fields that are currently stored in the cache\n      * into the given state manager.\n      *\n-     * @param    sm        the state manager to load\n-     * @param    fetchState    the fetch configuration to use for loading related\n+     * @param sm the state manager to load\n+     * @param fetchState the fetch configuration to use for loading related\n      * objects\n-     * @param    context    current context information\n+     * @param context current context information\n      */\n     public void load(OpenJPAStateManager sm, FetchState fetchState,\n         Object context);\n@@ -76,12 +74,12 @@ public void load(OpenJPAStateManager sm, FetchState fetchState,\n      * Loads some or all of the marked fields from the cache into the\n      * given state manager.\n      *\n-     * @param    sm            the state manager to load\n-     * @param    fields        the fields to load; clear the bits for the fields\n+     * @param sm the state manager to load\n+     * @param fields the fields to load; clear the bits for the fields\n      * that are successfully loaded\n-     * @param    fetchState        the fetch configuration to use for loading related\n+     * @param fetchState the fetch configuration to use for loading related\n      * objects\n-     * @param    context        current context information\n+     * @param context current context information\n      */\n     public void load(OpenJPAStateManager sm, BitSet fields,\n         FetchState fetchState, Object context);\n@@ -102,7 +100,7 @@ public void load(OpenJPAStateManager sm, BitSet fields,\n     public Object getData(int i);\n \n     /**\n-     *\tWhether the given field index has stored data.\n+     * Whether the given field index has stored data.\n      */\n     public boolean isLoaded (int i);\n }"},{"sha":"d65043c3a49554228312a741b7404225b5b1536a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -21,7 +21,7 @@\n import org.apache.openjpa.meta.FieldMetaData;\n \n /**\n- * <p>Default {@link PCData} implementation.</p>\n+ * Default {@link PCData} implementation.\n  *\n  * @author Patrick Linskey\n  * @author Abe White\n@@ -299,8 +299,8 @@ protected void storeImplData(OpenJPAStateManager sm, FieldMetaData fmd,\n     }\n \n     /**\n-     *\tReturn a new {@link PCData} implementation of the right type for\n-     *\tembedded instances.  Returns a {@link PCDataImpl} by default.\n+     * Return a new {@link PCData} implementation of the right type for\n+     * embedded instances. Returns a {@link PCDataImpl} by default.\n      */\n     public AbstractPCData newEmbeddedPCData(OpenJPAStateManager sm) {\n         return new PCDataImpl(sm.getId (), sm.getMetaData ());"},{"sha":"0c5251f58ac01c44fe5b89567c12416ffeff478c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCResultObjectProvider.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCResultObjectProvider.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,22 +18,20 @@\n import org.apache.openjpa.lib.rop.ResultObjectProvider;\n \n /**\n- * <p>Variant of {@link ResultObjectProvider} that populates a\n- * {@link OpenJPAStateManager} object in an application-defined manner.</p>\n- * <p/>\n- * <p>Implementations of this interface can be used to customize data\n- * loading.</p>\n+ * Variant of {@link ResultObjectProvider} that populates a\n+ * {@link OpenJPAStateManager} object in an application-defined manner.\n+ *  Implementations of this interface can be used to customize data loading.\n  *\n  * @author Patrick Linskey\n- * @see    AbstractPCResultObjectProvider\n+ * @see AbstractPCResultObjectProvider\n  */\n public interface PCResultObjectProvider\n     extends ResultObjectProvider {\n \n     /**\n      * Initializes the state manager.\n      *\n-     * @see    StoreManager#initialize\n+     * @see StoreManager#initialize\n      */\n     public void initialize(OpenJPAStateManager sm, PCState state,\n         FetchState fetchState)"},{"sha":"64481f5b18af7d94fd4bfc5d96598cb7af0130c2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCState.java","status":"modified","additions":23,"deletions":30,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCState.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCState.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -23,15 +23,14 @@\n import org.apache.openjpa.util.InvalidStateException;\n \n /**\n- * <p>Base class for all lifecycle states.  Each instance is managed by\n+ * Base class for all lifecycle states. Each instance is managed by\n  * a {@link OpenJPAStateManager}, which in turn keeps a reference to its current\n- * state.</p>\n- * <p/>\n- * <p>The state governs the behavior of the instance during all lifecycle\n- * events.  The class itself is stateless, and is provided its context\n- * on each method call.  This base class provides no-op implementations\n+ * state.\n+ *  The state governs the behavior of the instance during all lifecycle\n+ * events. The class itself is stateless, and is provided its context\n+ * on each method call. This base class provides no-op implementations\n  * of all methods and maintains static singelton shared references to each\n- * possible state.</p>\n+ * possible state.\n  *\n  * @author Abe White\n  */\n@@ -154,8 +153,7 @@\n     private static Localizer _loc = Localizer.forPackage(PCState.class);\n \n     /**\n-     * Called when this state is first assigned to the given\n-     * state manager.\n+     * Called when this state is first assigned to the given state manager.\n      */\n     void initialize(StateManagerImpl context) {\n     }\n@@ -169,17 +167,15 @@ void beforeFlush(StateManagerImpl context, boolean logical,\n \n     /**\n      * Perform any actions necessary and return the proper lifecycle\n-     * state on fush.\n-     * Returns the <code>this</code> pointer by default.\n+     * state on fush. Returns the <code>this</code> pointer by default.\n      */\n     PCState flush(StateManagerImpl context) {\n         return this;\n     }\n \n     /**\n      * Perform any actions necesssary and return the proper lifecycle state\n-     * on transaction commit.\n-     * Returns the <code>this</code> pointer by default.\n+     * on transaction commit. Returns the <code>this</code> pointer by default.\n      */\n     PCState commit(StateManagerImpl context) {\n         return this;\n@@ -215,7 +211,7 @@ PCState rollbackRestore(StateManagerImpl context) {\n     /**\n      * Perform any actions necesssary and return the proper lifecycle state\n      * on a call to {@link Broker#persist} with the given instance.\n-     * Returns the <code>this</code> pointer by default.  Note: this method\n+     * Returns the <code>this</code> pointer by default. Note: this method\n      * is <b>not</b> called for embedded states, and is only called when an\n      * existing managed instance is the target of a persist call.\n      */\n@@ -269,23 +265,23 @@ PCState evict(StateManagerImpl context) {\n     }\n \n     /**\n-     * Return the state to transition to after refresh.  The context is\n+     * Return the state to transition to after refresh. The context is\n      * not given because no actions should be taken.\n      */\n     PCState afterRefresh() {\n         return this;\n     }\n \n     /**\n-     * Return the state to transition to after refresh.  The context is\n+     * Return the state to transition to after refresh. The context is\n      * not given because no actions should be taken.\n      */\n     PCState afterOptimisticRefresh() {\n         return this;\n     }\n \n     /**\n-     * Return the state to transition to after refresh.  The context is\n+     * Return the state to transition to after refresh. The context is\n      * not given because no actions should be taken.\n      */\n     PCState afterNontransactionalRefresh() {\n@@ -295,9 +291,8 @@ PCState afterNontransactionalRefresh() {\n     /**\n      * Perform any actions necesssary and return the proper lifecycle state\n      * prior to the state of the given instance being read within\n-     * an active transaction.  The given field number can be -1 if it is\n-     * a general object read.\n-     * Returns the <code>this</code> pointer by default.\n+     * an active transaction. The given field number can be -1 if it is\n+     * a general object read. Returns the <code>this</code> pointer by default.\n      */\n     PCState beforeRead(StateManagerImpl context, int field) {\n         return this;\n@@ -306,9 +301,8 @@ PCState beforeRead(StateManagerImpl context, int field) {\n     /**\n      * Perform any actions necesssary and return the proper lifecycle state\n      * prior to the state of the given instance being read outside of\n-     * an active transaction.  The given field number can be -1 if it is\n-     * a general object read.\n-     * Returns the <code>this</code> pointer by default.\n+     * an active transaction. The given field number can be -1 if it is\n+     * a general object read. Returns the <code>this</code> pointer by default.\n      */\n     PCState beforeNontransactionalRead(StateManagerImpl context, int field) {\n         return this;\n@@ -317,9 +311,8 @@ PCState beforeNontransactionalRead(StateManagerImpl context, int field) {\n     /**\n      * Perform any actions necesssary and return the proper lifecycle state\n      * prior to the state of the given instance being read in an optimistic\n-     * transaction.  The given field number can be -1 if it is\n-     * a general object read.\n-     * Returns the <code>this</code> pointer by default.\n+     * transaction. The given field number can be -1 if it is\n+     * a general object read. Returns the <code>this</code> pointer by default.\n      */\n     PCState beforeOptimisticRead(StateManagerImpl context, int field) {\n         return this;\n@@ -328,7 +321,7 @@ PCState beforeOptimisticRead(StateManagerImpl context, int field) {\n     /**\n      * Perform any actions necesssary and return the proper lifecycle state\n      * prior to the state of the given instance being written within\n-     * an active transaction.  The mutate parameter tells if it is a\n+     * an active transaction. The mutate parameter tells if it is a\n      * direct mutation on an SCO field.\n      * Returns the <code>this</code> pointer by default.\n      */\n@@ -339,7 +332,7 @@ PCState beforeWrite(StateManagerImpl context, int field, boolean mutate) {\n     /**\n      * Perform any actions necesssary and return the proper lifecycle state\n      * prior to the state of the given instance being written within\n-     * an optimistic transaction.  The mutate parameter tells if it is a\n+     * an optimistic transaction. The mutate parameter tells if it is a\n      * direct mutation on an SCO field.\n      * Returns the <code>this</code> pointer by default.\n      */\n@@ -351,7 +344,7 @@ PCState beforeOptimisticWrite(StateManagerImpl context, int field,\n     /**\n      * Perform any actions necesssary and return the proper lifecycle state\n      * prior to the state of the given instance being written outside of\n-     * an active transaction.  The mutate parameter tells if it is a\n+     * an active transaction. The mutate parameter tells if it is a\n      * direct mutation on an SCO field.\n      * Returns the <code>this</code> pointer by default.\n      */"},{"sha":"4334c27122d7f474b99de44426d36c5114371c05","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCleanState.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCleanState.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCleanState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCleanState.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,10 +16,9 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>Lifecycle state.</p>\n- * <p/>\n- * <p>Represents a persistent instance that is participating in the current\n- * transaction, but has not yet been modified.</p>\n+ * Lifecycle state.\n+ *  Represents a persistent instance that is participating in the current\n+ * transaction, but has not yet been modified.\n  *\n  * @author Abe White\n  */"},{"sha":"f7f79be10633544bfad25c66e22b6540eecaf697","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDeletedFlushedState.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDeletedFlushedState.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDeletedFlushedState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDeletedFlushedState.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,10 +16,9 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>Lifecycle state.</p>\n- * <p/>\n- * <p>Represents a persistent instance that has been deleted in the current\n- * transaction, and that has been flushed to the database.</p>\n+ * Lifecycle state.\n+ *  Represents a persistent instance that has been deleted in the current\n+ * transaction, and that has been flushed to the database.\n  *\n  * @author Patrick Linskey\n  */"},{"sha":"42c54aea7210533ad91325823f6b68504f83fa74","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDeletedState.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDeletedState.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDeletedState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDeletedState.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,10 +16,9 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>Lifecycle state.</p>\n- * <p/>\n- * <p>Represents a persistent instance that has been deleted in the current\n- * transaction.</p>\n+ * Lifecycle state.\n+ *  Represents a persistent instance that has been deleted in the current\n+ * transaction.\n  *\n  * @author Abe White\n  */"},{"sha":"242055461582ca91d1cfffa6f8442244c355a939","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDirtyState.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDirtyState.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDirtyState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PDirtyState.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,10 +16,9 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>Lifecycle state.</p>\n- * <p/>\n- * <p>Represents a persistent instance that is participating in the current\n- * transaction, and has been modified.</p>\n+ * Lifecycle state.\n+ *  Represents a persistent instance that is participating in the current\n+ * transaction, and has been modified.\n  *\n  * @author Abe White\n  */"},{"sha":"236cbcf7b0ed4e141082d2c5ba0e7da1b8d7eadc","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewDeletedState.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewDeletedState.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewDeletedState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewDeletedState.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,10 +16,9 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>Lifecycle state.</p>\n- * <p/>\n- * <p>Represents an instance that was made persistent, then deleted within the\n- * current\ttransaction.</p>\n+ * Lifecycle state.\n+ *  Represents an instance that was made persistent, then deleted within the\n+ * current\ttransaction.\n  *\n  * @author Abe White\n  */"},{"sha":"bad72f7ba20043eae11ec898c8fa6f469e3062f6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewFlushedDeletedFlushedState.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewFlushedDeletedFlushedState.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewFlushedDeletedFlushedState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewFlushedDeletedFlushedState.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,10 +16,9 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>Lifecycle state.</p>\n- * <p/>\n- * <p>Represents an instance that was made persistent within the\n- * current\ttransaction, flushed, deleted, and flushed.</p>\n+ * Lifecycle state.\n+ *  Represents an instance that was made persistent within the\n+ * current\ttransaction, flushed, deleted, and flushed.\n  *\n  * @author Patrick Linskey\n  */"},{"sha":"63935bf8b494f2fcc652054edaf7300841250174","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewFlushedDeletedState.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewFlushedDeletedState.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewFlushedDeletedState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewFlushedDeletedState.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,10 +16,9 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>Lifecycle state.</p>\n- * <p/>\n- * <p>Represents an instance that was made persistent within the\n- * current\ttransaction, flushed, and subsequently deleted.</p>\n+ * Lifecycle state.\n+ *  Represents an instance that was made persistent within the\n+ * current\ttransaction, flushed, and subsequently deleted.\n  *\n  * @author Patrick Linskey\n  */"},{"sha":"30be1366f95e5654a677dfe96e44a03ef5e7288f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewState.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewState.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewState.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,10 +16,9 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>Lifecycle state.</p>\n- * <p/>\n- * <p>Represents an instance that was made persistent within the\n- * current\ttransaction.</p>\n+ * Lifecycle state.\n+ *  Represents an instance that was made persistent within the\n+ * current\ttransaction.\n  *\n  * @author Abe White\n  */"},{"sha":"f6a28c9e8546eb5969a9ec839cec769c2b062487","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransDeletedState.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransDeletedState.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransDeletedState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransDeletedState.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,9 +16,8 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>Lifecycle state.</p>\n- * <p/>\n- * <p>Represents an instance that was deleted outside a transaction.</p>\n+ * Lifecycle state.\n+ *  Represents an instance that was deleted outside a transaction.\n  *\n  * @author Steve Kim\n  */"},{"sha":"fd07371e8185c093f9c36a0a77452536dbea221f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransDirtyState.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransDirtyState.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransDirtyState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransDirtyState.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,11 +16,10 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>Lifecycle state.</p>\n- * <p/>\n- * <p>Represents a persistent instance that has been dirtied outside of\n- * transaction.  This state is only reachable only if the\n- * RetainNontransactional property is set.</p>\n+ * Lifecycle state.\n+ *  Represents a persistent instance that has been dirtied outside of\n+ * transaction. This state is only reachable only if the\n+ * RetainNontransactional property is set.\n  *\n  * @author Steve Kim\n  */"},{"sha":"46af171cc64bd31865c35ece68b4a6a380462c6f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransNewState.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransNewState.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransNewState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransNewState.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,9 +16,8 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>Lifecycle state.</p>\n- * <p/>\n- * <p>Represents an instance that was persisted outside a transaction.</p>\n+ * Lifecycle state.\n+ *  Represents an instance that was persisted outside a transaction.\n  *\n  * @author Steve Kim\n  */"},{"sha":"0d4cc3ee04618e247115a002cec3ff81c0fb5279","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransState.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransState.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNonTransState.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -20,11 +20,10 @@\n import org.apache.openjpa.lib.util.Localizer;\n \n /**\n- * <p>Lifecycle state.</p>\n- * <p/>\n- * <p>Represents a persistent instance that is not transactional, but that\n- * allows access to persistent data.  This state is reachable only if the\n- * RetainState property is set.</p>\n+ * Lifecycle state.\n+ *  Represents a persistent instance that is not transactional, but that\n+ * allows access to persistent data. This state is reachable only if the\n+ * RetainState property is set.\n  *\n  * @author Abe White\n  */"},{"sha":"be913dd0088b11ede18bac90da17036fb3a484d8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Query.java","status":"modified","additions":9,"deletions":13,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Query.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Query.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Query.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -23,7 +23,7 @@\n import org.apache.openjpa.kernel.exps.FilterListener;\n \n /**\n- * <p>OpenJPA query interface.</p>\n+ * OpenJPA query interface.\n  *\n  * @since 3.0\n  * @author Patrick Linskey\n@@ -127,25 +127,22 @@\n     public long deleteAll(Map parameterMap);\n \n     /**\n-     * Performs an update of the instances that are satisfied by\n-     * the query.\n+     * Performs an update of the instances that are satisfied by the query.\n      *\n      * @return the number of instances that were update\n      */\n     public long updateAll();\n \n     /**\n-     * Performs an update of the instances that are satisfied by\n-     * the query.\n+     * Performs an update of the instances that are satisfied by the query.\n      *\n      * @param parameters the positional parameter array\n      * @return the number of instances that were update\n      */\n     public long updateAll(Object[] parameters);\n \n     /**\n-     * Performs an update of the instances that are satisfied by\n-     * the query.\n+     * Performs an update of the instances that are satisfied by the query.\n      *\n      * @param parameterMap the named parameter map\n      * @return the number of instances that were update\n@@ -158,7 +155,7 @@\n     public void closeAll();\n \n     /**\n-     * Close query results that are consuming resources.  Allow results that\n+     * Close query results that are consuming resources. Allow results that\n      * are not consuming resources to remain open so that they continue to\n      * function normally.\n      */\n@@ -167,8 +164,7 @@\n     /**\n      * Returns a description of the commands that will be sent to\n      * the datastore in order to execute this query. This will\n-     * typically be in the native query language of the database\n-     * (e.g., SQL).\n+     * typically be in the native query language of the database (e.g., SQL).\n      *\n      * @param params the named parameter map for the query invocation\n      * @since 3.2\n@@ -186,8 +182,8 @@\n     public void assertNotReadOnly();\n \n     /**\n-     *\tCheck that the query has not been serialized, which causes it to lose\n-     *\tits association with its Broker.\n+     * Check that the query has not been serialized, which causes it to lose\n+     * its association with its Broker.\n \t */\n \tpublic void assertNotSerialized ();\n }"},{"sha":"1acbed02ad6ed1b5d7bb6a74f197f49b272c7935","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java","status":"modified","additions":12,"deletions":16,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryContext.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -26,15 +26,15 @@\n import org.apache.openjpa.meta.FieldMetaData;\n \n /**\n- * <p>A query execution context.</p>\n+ * A query execution context.\n  *\n  * @author Abe White\n  * @since 4.0\n  */\n public interface QueryContext {\n \n     /**\n-     * Return the query for this context.  Note that the query will be\n+     * Return the query for this context. Note that the query will be\n      * unavailable in remote contexts, and this method may throw an exception\n      * to that effect.\n      */\n@@ -51,8 +51,7 @@\n     public FetchConfiguration getFetchConfiguration();\n \n     /**\n-     * Returns the operation that this query will be expected\n-     * to perform.\n+     * Returns the operation that this query will be expected to perform.\n      *\n      * @see QueryOperations\n      * @since 4.0\n@@ -77,8 +76,7 @@\n \n     /**\n      * Return the class of the objects that this query will return,\n-     * or <code>null</code> if this information is not available /\n-     * not relevant.\n+     * or <code>null</code> if this information is not available / not relevant.\n      */\n     public Class getCandidateType();\n \n@@ -109,7 +107,7 @@\n \n     /**\n      * Specify that the query will return only 1\n-     * result, rather than a collection.  The execute method will return null\n+     * result, rather than a collection. The execute method will return null\n      * if the query result size is 0.\n      *\n      * @since 3.0\n@@ -159,8 +157,8 @@\n     /**\n      * Set the range of results to return.\n      *\n-     * @param    start    0-based inclusive start index\n-     * @param    end        0-based exclusive end index, or\n+     * @param start 0-based inclusive start index\n+     * @param end 0-based exclusive end index, or\n      * {@link Long#MAX_VALUE} for no limit\n      * @since 3.2\n      */\n@@ -177,7 +175,7 @@\n     public void declareParameters(String params);\n \n     /**\n-     * Return a map of parameter name to type for this query.  The returned\n+     * Return a map of parameter name to type for this query. The returned\n      * map will iterate in the order that the parameters were declared or,\n      * if they're implicit, used.\n      */\n@@ -270,19 +268,17 @@\n     /**\n      * Helper method to instantiate the class with the given name, taking\n      * into account the query's candidate package, automatic imports, and\n-     * the given imports (if any).  Returns null if the type cannot be\n-     * found.\n+     * the given imports (if any). Returns null if the type cannot be found.\n      */\n     public Class classForName(String name, String[] imports);\n \n     /**\n-     *\tSynchronize on the query's internal lock.\n+     * Synchronize on the query's internal lock.\n      */\n     public void lock (); \n \n-\n     /**\n-     *\tUnlock the query's internal lock.\n+     * Unlock the query's internal lock.\n      */\n     public void unlock();\n }"},{"sha":"cc9639b2b0df31cb3471188372df235ee6de89f3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryFlushModes.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryFlushModes.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryFlushModes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryFlushModes.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,7 +18,7 @@\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n \n /**\n- * <p>Constants for determining when to flush before queries.</p>\n+ * Constants for determining when to flush before queries.\n  *\n  * @author Abe White\n  * @since 4.0\n@@ -43,11 +43,11 @@\n     public static final int FLUSH_FALSE = 1;\n \n     /**\n-     *\tConstant denoting that queries should flush data to the\n-     *\tdatabase automatically when OpenJPA determines that relevant\n-     *\tmodifications have been made and the current\n-     *\tcontext already has a dedicated connection. See\n-     *\t{@link OpenJPAConfiguration#getFlushBeforeQueries} for more info.\n+     * Constant denoting that queries should flush data to the\n+     * database automatically when OpenJPA determines that relevant\n+     * modifications have been made and the current\n+     * context already has a dedicated connection. See\n+     * {@link OpenJPAConfiguration#getFlushBeforeQueries} for more info.\n      */\n     public static final int FLUSH_WITH_CONNECTION = 2;\n }"},{"sha":"f43b72153ba25967d3008f610ed170cdcaeba0ce","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":16,"deletions":18,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -53,7 +53,7 @@\n import serp.util.Strings;\n \n /**\n- * <p>Implementation of the {@link Query} interface.</p>\n+ * Implementation of the {@link Query} interface.\n  *\n  * @author Abe White\n  * @nojavadoc\n@@ -915,7 +915,7 @@ private static int positionalParameterBase(Collection params) {\n         for (Iterator itr = params.iterator(); itr.hasNext();) {\n             obj = itr.next();\n             if (!(obj instanceof Number))\n-                return 0;    // use 0 base when params are mixed types\n+                return 0; // use 0 base when params are mixed types\n \n             val = ((Number) obj).intValue();\n             if (val == 0)\n@@ -965,7 +965,7 @@ private boolean isInMemory(int operation) {\n \n     /**\n      * Execute the query using the given compilation, executor, and parameter\n-     * values.  All other execute methods delegate to this one or to\n+     * values. All other execute methods delegate to this one or to\n      * {@link #execute(StoreQuery.Executor,Map)} after validation and locking.\n      */\n     private Object execute(StoreQuery.Executor ex, Object[] params)\n@@ -994,7 +994,7 @@ private Object execute(StoreQuery.Executor ex, Object[] params)\n \n     /**\n      * Execute the query using the given compilation, executor, and parameter\n-     * values.  All other execute methods delegate to this one or to\n+     * values. All other execute methods delegate to this one or to\n      * {@link #execute(StoreQuery.Executor,Object[])} after validation and\n      * locking.\n      */\n@@ -1024,7 +1024,7 @@ private Object execute(StoreQuery.Executor ex, Map params)\n \n     /**\n      * Delete the query using the given executor, and parameter\n-     * values.  All other execute methods delegate to this one or to\n+     * values. All other execute methods delegate to this one or to\n      * {@link #delete(StoreQuery.Executor,Object[])} after validation and\n      * locking. The return value will be a Number indicating the number of\n      * instances deleted.\n@@ -1037,7 +1037,7 @@ private Number delete(StoreQuery.Executor ex, Map params)\n \n     /**\n      * Delete the query using the given executor, and parameter\n-     * values.  All other execute methods delegate to this one or to\n+     * values. All other execute methods delegate to this one or to\n      * {@link #delete(StoreQuery.Executor,Map)} after validation and locking.\n      * The return value will be a Number indicating the number of\n      * instances deleted.\n@@ -1070,7 +1070,7 @@ public Number deleteInMemory(StoreQuery.Executor executor,\n \n     /**\n      * Update the query using the given executor and parameter\n-     * values.  All other execute methods delegate to this one or to\n+     * values. All other execute methods delegate to this one or to\n      * {@link #update(StoreQuery.Executor,Object[])} after validation and\n      * locking. The return value will be a Number indicating the number of\n      * instances updated.\n@@ -1083,7 +1083,7 @@ private Number update(StoreQuery.Executor ex, Map params)\n \n     /**\n      * Update the query using the given compilation, executor, and parameter\n-     * values.  All other execute methods delegate to this one or to\n+     * values. All other execute methods delegate to this one or to\n      * {@link #update(StoreQuery.Executor,Map)} after validation and locking.\n      * The return value will be a Number indicating the number of\n      * instances updated.\n@@ -1318,7 +1318,7 @@ private Object emptyResult(StoreQuery.Executor ex) {\n     }\n \n     /**\n-     * Extract an expected single result from the given provider.  Used when\n+     * Extract an expected single result from the given provider. Used when\n      * the result is an ungrouped aggregate or the unique flag is set to true.\n      */\n     private Object singleResult(ResultObjectProvider rop)\n@@ -1710,8 +1710,7 @@ private void assertCandidateType() {\n \n     /**\n      * Check that we are in a state to be able to perform a bulk operation;\n-     * also flush the current modfications if any elements are currently\n-     * dirty.\n+     * also flush the current modfications if any elements are currently dirty.\n      */\n     private void assertBulkModify() {\n         _broker.assertActiveTransaction();\n@@ -1800,15 +1799,15 @@ public String toString() {\n     /**\n      * A merged executor executes multiple Queries and returns\n      * a merged result list with the appropriate ordering (if more than\n-     * one query needs to be executed).  This executor has the following\n+     * one query needs to be executed). This executor has the following\n      * limitations:\n      * <ul>\n-     * <li>It cannot combine aggregates.</p>\n+     * <li>It cannot combine aggregates.\n      * <li>It cannot collate the result lists if ordering is specified and\n      * a result string is given, but does not include the ordering\n      * criteria.</li>\n      * <li>It cannot filter duplicate results from different result lists if\n-     * the result is marked distinct.  This would require tracking all\n+     * the result is marked distinct. This would require tracking all\n      * previous results, which would interfere with large result set\n      * handling.</li>\n      * </ul>\n@@ -2081,8 +2080,8 @@ public void handleCheckedException(Exception e) {\n     }\n \n     /**\n-     *\tResult list that removes itself from the query's open result list\n-     *\twhen it is closed.  Public for testing.\n+     * Result list that removes itself from the query's open result list\n+     * when it is closed. Public for testing.\n      */\n     public class RemoveOnCloseResultList\n         implements ResultList {\n@@ -2239,7 +2238,6 @@ public String toString ()\n \t\t\treturn _res.toString ();\n \t\t}\n \n-\t\n \t\tpublic Object writeReplace ()\n \t\t{\n \t\t\treturn _res;"},{"sha":"2ce0d5659b8a35774f1022bce4734baa2671bdc9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryLanguages.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryLanguages.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryLanguages.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryLanguages.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -23,7 +23,7 @@\n import org.apache.openjpa.util.InternalException;\n \n /**\n- * <p>Constants and utilities for query languages.</p>\n+ * Constants and utilities for query languages.\n  *\n  * @author Abe White\n  * @since 4.0"},{"sha":"817d0ab641c9c206d38819545337b873bb4e034d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryOperations.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryOperations.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryOperations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryOperations.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -39,10 +39,10 @@\n     public static final int OP_DELETE = 2;\n \n     /**\n-     *  Symbolic constant that indicates that this query will be\n-     *  performing a update operation.\n+     * Symbolic constant that indicates that this query will be\n+     * performing a update operation.\n      *\n-     *  @see QueryContext#getOperation\n+     * @see QueryContext#getOperation\n      */\n     public static final int OP_UPDATE = 3;\n }"},{"sha":"0279228026de1287b6f490d6573b0523abc3d4a4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ROPStoreManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ROPStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ROPStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ROPStoreManager.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -21,8 +21,8 @@\n import org.apache.openjpa.util.StoreException;\n \n /**\n- * <p>Wraps the native store manager to handle calls using custom\n- * {@link PCResultObjectProvider}s.</p>\n+ * Wraps the native store manager to handle calls using custom\n+ * {@link PCResultObjectProvider}s.\n  *\n  * @author Abe White\n  */"},{"sha":"a36c5608c307bc824056d48bbf4bc462252b4d61","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/RestoreState.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/RestoreState.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/RestoreState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/RestoreState.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>State restore constants.</p>\n+ * State restore constants.\n  *\n  * @author Abe White\n  * @since 4.0\n@@ -34,7 +34,7 @@\n     public static final int RESTORE_IMMUTABLE = 1;\n \n     /**\n-     *\tRestore all state on rollback.\n+     * Restore all state on rollback.\n      */\n     public static final int RESTORE_ALL = 2;\n }"},{"sha":"cf41fd94475aae43cc540ad505aba38955a3ec7e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -35,7 +35,7 @@\n import org.apache.openjpa.util.UserException;\n \n /**\n- * <p>Helper class to pack results into the result class set on the query.</p>\n+ * Helper class to pack results into the result class set on the query.\n  *\n  * @author Abe White\n  * @author Patrick Linskey\n@@ -87,9 +87,9 @@ public ResultPacker(Class candidate, String alias, Class resultClass) {\n     /**\n      * Constructor for standard projection.\n      *\n-     * @param    types        the projection value types\n-     * @param    aliases        the alias for each projection value\n-     * @param    resultClass    the class to pack into\n+     * @param types the projection value types\n+     * @param aliases the alias for each projection value\n+     * @param resultClass the class to pack into\n      */\n     public ResultPacker(Class[] types, String[] aliases, Class resultClass) {\n         this(null, types, aliases, resultClass);\n@@ -334,7 +334,7 @@ private static Member findSet(String alias, Class type, Field[] fields,\n     }\n \n     /**\n-     *\tReturn the put method if one exists.\n+     * Return the put method if one exists.\n      */\n     private static Method findPut(Method[] methods) {\n         Class[] params;"},{"sha":"2dad550db3e17471c305b6aecf81d54a9da6d440","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SaveFieldManager.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SaveFieldManager.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SaveFieldManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SaveFieldManager.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -26,7 +26,7 @@\n import org.apache.openjpa.util.ProxyManager;\n \n /**\n- * <p>FieldManager type used to store information for rollback.</p>\n+ * FieldManager type used to store information for rollback.\n  *\n  * @author Abe White\n  */\n@@ -72,15 +72,14 @@ public PersistenceCapable getState() {\n     }\n \n     /**\n-     * Return the currently-loaded fields that will be unloaded after\n-     * rollback.\n+     * Return the currently-loaded fields that will be unloaded after rollback.\n      */\n     public BitSet getUnloaded() {\n         return _unloaded;\n     }\n \n     /**\n-     * Save the given field.  If this method returns true, then you need\n+     * Save the given field. If this method returns true, then you need\n      * to use this field manager to replace the given field in the instance\n      * returned by {@link #getState}.\n      */\n@@ -142,7 +141,7 @@ public boolean saveField(int field) {\n     }\n \n     /**\n-     * Restore the given field.  If this method returns true, then you need\n+     * Restore the given field. If this method returns true, then you need\n      * to use this field manager to replace the given field in the state\n      * manager's instance.\n      */"},{"sha":"34a7a76b9bb8e1d41390537542c033f6bc4737f2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SavepointFieldManager.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SavepointFieldManager.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SavepointFieldManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SavepointFieldManager.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -28,7 +28,7 @@\n import org.apache.openjpa.util.ProxyManager;\n \n /**\n- * <p>FieldManager type used to store information for savepoint rollback.</p>\n+ * FieldManager type used to store information for savepoint rollback.\n  *\n  * @author Steve Kim\n  * @since 3.4\n@@ -52,8 +52,8 @@\n     private BitSet _mutable;\n \n     /**\n-     * Constructor.  Provide instance to save and indicate whether\n-     * to copy persistent fields.  Transactional fields will be\n+     * Constructor. Provide instance to save and indicate whether\n+     * to copy persistent fields. Transactional fields will be\n      * copied regardless of copy setting.\n      */\n     public SavepointFieldManager(StateManagerImpl sm, boolean copy) {\n@@ -91,8 +91,7 @@ public StateManagerImpl getStateManager() {\n     }\n \n     /**\n-     * Return the persistence capable copy holding the savepoint\n-     * field values.\n+     * Return the persistence capable copy holding the savepoint field values.\n      */\n     public PersistenceCapable getCopy() {\n         return _copy;\n@@ -154,7 +153,7 @@ public void storeField(FieldMetaData field) {\n     }\n \n     /**\n-     * Restore the given field.  If this method returns true, then you need\n+     * Restore the given field. If this method returns true, then you need\n      * to use this field manager to replace the given field in the state\n      * manager's instance.\n      */"},{"sha":"670ba7feb470c859c68634c9e242d5dfb8067d40","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SavepointManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SavepointManager.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SavepointManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SavepointManager.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>A manager for handling savepoints.</p>\n+ * A manager for handling savepoints.\n  *\n  * @author Steve Kim\n  * @since 3.4"},{"sha":"faf8b222d8b00f29d85011f0dc621f8b897de7da","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Seq.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Seq.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Seq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Seq.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -19,7 +19,7 @@\n import org.apache.openjpa.meta.ClassMetaData;\n \n /**\n- * <p>Internal OpenJPA sequence interface.</p>\n+ * Internal OpenJPA sequence interface.\n  *\n  * @author Abe White\n  */\n@@ -39,32 +39,32 @@\n     /**\n      * Return the next value in the sequence.\n      *\n-     * @param    ctx        the current context\n-     * @param    cls        if this is a datastore identity sequence, the\n+     * @param ctx the current context\n+     * @param cls if this is a datastore identity sequence, the\n      * persistent class the identity value is for; else null\n      */\n     public Object next(StoreContext ctx, ClassMetaData cls);\n \n     /**\n      * Return the current value of the sequence, or null if not available.\n      *\n-     * @param    ctx        the current context\n-     * @param    cls        if this is a datastore identity sequence, the\n+     * @param ctx the current context\n+     * @param cls if this is a datastore identity sequence, the\n      * persistent class the identity value is for; else null\n      */\n     public Object current(StoreContext ctx, ClassMetaData cls);\n \n     /**\n      * Allocate additional values efficiently.\n      *\n-     * @param    ctx        the current context\n-     * @param    cls        if this is a datastore identity sequence, the\n+     * @param ctx the current context\n+     * @param cls if this is a datastore identity sequence, the\n      * persistent class the identity value is for; else null\n      */\n     public void allocate(int additional, StoreContext ctx, ClassMetaData cls);\n \n     /**\n-     *\tFree resources used by this sequence.\n+     * Free resources used by this sequence.\n      */\n     public void close ();\n }"},{"sha":"53b7acf6f394c5add77a42d3621b1b66e1611133","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -40,9 +40,9 @@\n import org.apache.openjpa.util.UserException;\n \n /**\n- * <p>FieldManager type used to hold onto a single field value and then\n- * dispense it via the fetch methods.  The manager can also perform actions\n- * on the held field.</p>\n+ * FieldManager type used to hold onto a single field value and then\n+ * dispense it via the fetch methods. The manager can also perform actions\n+ * on the held field.\n  *\n  * @author Abe White\n  */\n@@ -61,7 +61,7 @@ public SingleFieldManager(StateManagerImpl sm, BrokerImpl broker) {\n     }\n \n     /**\n-     * Proxy the held field if needed.  Return true if the field needs to\n+     * Proxy the held field if needed. Return true if the field needs to\n      * be replaced with the now-proxied instance.\n      */\n     public boolean proxy(boolean reset, boolean replaceNull) {\n@@ -239,7 +239,7 @@ private void releaseEmbedded(ValueMetaData vmd, Object obj) {\n \n     /**\n      * Persist the stored field safely, preventing infinite recursion using\n-     * the given set of already-persisted objects.  This method is only called\n+     * the given set of already-persisted objects. This method is only called\n      * for fields that we know have cascade-immediate settings.\n      */\n     public void persist(OpCallbacks call) {\n@@ -410,7 +410,7 @@ void dereferenceDependent(Object obj) {\n \n     /**\n      * Recursively invoke the broker to gather cascade-refresh objects in\n-     * the current field into the given set.  This method is only called\n+     * the current field into the given set. This method is only called\n      * for fields that we know have cascade-refresh settings.\n      */\n     public void gatherCascadeRefresh(OpCallbacks call) {\n@@ -457,9 +457,9 @@ private void gatherCascadeRefresh(Collection coll, OpCallbacks call) {\n     }\n \n     /**\n-     * Perform pre-flush tasks on the current field.  This includes checking\n+     * Perform pre-flush tasks on the current field. This includes checking\n      * for nulls, persisting pcs, embedding embedded fields, and ref'ing\n-     * pc fields.  Return true if the field needs to be replaced with the\n+     * pc fields. Return true if the field needs to be replaced with the\n      * new value.\n      */\n     public boolean preFlush(OpCallbacks call) {\n@@ -829,7 +829,7 @@ private Object embed(ValueMetaData vmd, Object obj) {\n     }\n \n     /**\n-     *\tReturn the proxy manager.\n+     * Return the proxy manager.\n      */\n     private ProxyManager getProxyManager ()\n \t{"},{"sha":"93f16e6f6d40289d6c9a1d70ffad1283081688ed","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":48,"deletions":51,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -55,17 +55,16 @@\n import serp.util.Numbers;\n \n /**\n- * <p>Implementation of the {@link OpenJPAStateManager} interface for use\n- * with this runtime.  Each state manager manages the state of a single\n- * persistence capable instance.  The state manager is also responsible for\n- * all communications about the instance to the {@link StoreManager}.</p>\n- * <p/>\n- * <p>The state manager uses the State pattern in both its interaction with\n+ * Implementation of the {@link OpenJPAStateManager} interface for use\n+ * with this runtime. Each state manager manages the state of a single\n+ * persistence capable instance. The state manager is also responsible for\n+ * all communications about the instance to the {@link StoreManager}.\n+ *  The state manager uses the State pattern in both its interaction with\n  * the governed instance and its interaction with the broker.\n  * In its interactions with the persistence capable instance, it uses the\n- * {@link FieldManager} interface.  Similarly, when interacting with the\n+ * {@link FieldManager} interface. Similarly, when interacting with the\n  * broker, it uses the {@link PCState} singleton that represents\n- * the current lifecycle state of the instance.</p>\n+ * the current lifecycle state of the instance.\n  *\n  * @author Abe White\n  */\n@@ -178,10 +177,10 @@ void setLoading(boolean loading) {\n     }\n \n     /**\n-     * Set or reset the lifecycle state of the managed instance.  If the\n+     * Set or reset the lifecycle state of the managed instance. If the\n      * transactional state of the instance changes, it will be enlisted/\n-     * delisted from the current transaction as necessary.  The given\n-     * state will be initialized after being set.  If the given state\n+     * delisted from the current transaction as necessary. The given\n+     * state will be initialized after being set. If the given state\n      * is the same as the current state, this method will have no effect.\n      */\n     private void setPCState(PCState state) {\n@@ -320,7 +319,7 @@ public void load(FetchState fetchState) {\n \n     /**\n      * Load the state of this instance based on the given fetch configuration\n-     * and load mode.  Return true if any data was loaded, false otherwise.\n+     * and load mode. Return true if any data was loaded, false otherwise.\n      */\n     protected boolean load(FetchState fetchState, int loadMode,\n         BitSet exclude, Object sdata, boolean forWrite) {\n@@ -419,7 +418,7 @@ private BitSet getUnloadedInternal(FetchState fetchState, int mode,\n                     load = fetchState == null ||\n                         fetchState.requiresLoad(this, fmds[i]);\n                     break;\n-                default:     // LOAD_ALL\n+                default: // LOAD_ALL\n                     load = true;\n             }\n \n@@ -492,7 +491,7 @@ private boolean assignObjectId(boolean flush, boolean preFlushing) {\n      * Make sure we were assigned an oid, and perform actions to make it\n      * permanent.\n      *\n-     * @param    recache        whether to recache ourself on the new oid\n+     * @param recache whether to recache ourself on the new oid\n      */\n     private void assertObjectIdAssigned(boolean recache) {\n         if (!isNew() || isDeleted() || (_flags & FLAG_OID_ASSIGNED) > 0)\n@@ -828,7 +827,7 @@ public void setRemote(int field, Object value) {\n     /**\n      * Notification that the object is about to be accessed.\n      *\n-     * @param    field    the field number being read, or -1 if not a single\n+     * @param field the field number being read, or -1 if not a single\n      * field read\n      */\n     void beforeRead(int field) {\n@@ -852,7 +851,7 @@ void beforeRead(int field) {\n     /**\n      * Delegates to the current state.\n      *\n-     * @see    PCState#beforeFlush\n+     * @see PCState#beforeFlush\n      */\n     void beforeFlush(int reason, OpCallbacks call) {\n         _state.beforeFlush(this, reason == BrokerImpl.FLUSH_LOGICAL, call);\n@@ -861,7 +860,7 @@ void beforeFlush(int reason, OpCallbacks call) {\n     /**\n      * Delegates to the current state.\n      *\n-     * @see    PCState#flush\n+     * @see PCState#flush\n      */\n     void afterFlush(int reason) {\n         // nothing happens when we flush non-persistent states\n@@ -903,8 +902,8 @@ void afterFlush(int reason) {\n      * Delegates to the current state after checking the value\n      * of the RetainState flag.\n      *\n-     * @see    PCState#commit\n-     * @see    PCState#commitRetain\n+     * @see PCState#commit\n+     * @see PCState#commitRetain\n      */\n     void commit() {\n         // release locks before oid updated\n@@ -933,8 +932,8 @@ void commit() {\n      * Delegates to the current state after checking the value\n      * of the RetainState flag.\n      *\n-     * @see    PCState#rollback\n-     * @see    PCState#rollbackRestore\n+     * @see PCState#rollback\n+     * @see PCState#rollbackRestore\n      */\n     void rollback() {\n         // release locks\n@@ -969,8 +968,8 @@ void rollbackToSavepoint(SavepointFieldManager savepoint) {\n     /**\n      * Delegates to the current state.\n      *\n-     * @see    PCState#persist\n-     * @see    Broker#persist\n+     * @see PCState#persist\n+     * @see Broker#persist\n      */\n     void persist() {\n         setPCState(_state.persist(this));\n@@ -979,8 +978,8 @@ void persist() {\n     /**\n      * Delegates to the current state.\n      *\n-     * @see    PCState#delete\n-     * @see    Broker#delete\n+     * @see PCState#delete\n+     * @see Broker#delete\n      */\n     void delete() {\n         setPCState(_state.delete(this));\n@@ -989,8 +988,8 @@ void delete() {\n     /**\n      * Delegates to the current state.\n      *\n-     * @see    PCState#nontransactional\n-     * @see    Broker#nontransactional\n+     * @see PCState#nontransactional\n+     * @see Broker#nontransactional\n      */\n     void nontransactional() {\n         setPCState(_state.nontransactional(this));\n@@ -999,8 +998,8 @@ void nontransactional() {\n     /**\n      * Delegates to the current state.\n      *\n-     * @see    PCState#transactional\n-     * @see    Broker#transactional\n+     * @see PCState#transactional\n+     * @see Broker#transactional\n      */\n     void transactional() {\n         setPCState(_state.transactional(this));\n@@ -1009,8 +1008,8 @@ void transactional() {\n     /**\n      * Delegates to the current state.\n      *\n-     * @see    PCState#release\n-     * @see    Broker#release\n+     * @see PCState#release\n+     * @see Broker#release\n      */\n     void release(boolean unproxy) {\n         release(unproxy, false);\n@@ -1035,8 +1034,8 @@ void release(boolean unproxy, boolean force) {\n     /**\n      * Delegates to the current state.\n      *\n-     * @see    PCState#evict\n-     * @see    Broker#evict\n+     * @see PCState#evict\n+     * @see Broker#evict\n      */\n     void evict() {\n         setPCState(_state.evict(this));\n@@ -1101,7 +1100,7 @@ public boolean beforeRefresh(boolean refreshAll) {\n     }\n \n     /**\n-     * Perform state transitions after refresh.  This method is only\n+     * Perform state transitions after refresh. This method is only\n      * called if {@link #beforeRefresh} returns true.\n      */\n     void afterRefresh() {\n@@ -1140,7 +1139,7 @@ void setDereferencedDependent(boolean deref, boolean notify) {\n     ///////////\n \n     /**\n-     * Notification that we've been read-locked.  Pass in the level at which\n+     * Notification that we've been read-locked. Pass in the level at which\n      * we were locked and the level at which we should write lock ourselves\n      * on dirty.\n      */\n@@ -1370,9 +1369,9 @@ public void dirty(int field) {\n     /**\n      * Make the given field dirty.\n      *\n-     * @param    mutate    if null, may be an SCO mutation; if true, is certainly\n+     * @param mutate if null, may be an SCO mutation; if true, is certainly\n      * a mutation (or at least treat as one)\n-     * @return        {@link Boolean#FALSE} if this instance was already dirty,\n+     * @return {@link Boolean#FALSE} if this instance was already dirty,\n      * <code>null</code> if it was dirty but not since flush, and\n      * {@link Boolean#TRUE} if it was not dirty\n      */\n@@ -1412,13 +1411,13 @@ private Boolean dirty(int field, Boolean mutate, boolean loadFetchGroup) {\n                             (fmd.isEmbedded()) ? Boolean.TRUE : Boolean.FALSE;\n                         break;\n                     default:\n-                        mutate = Boolean.FALSE;        // not sco\n+                        mutate = Boolean.FALSE; // not sco\n                 }\n             }\n \n             // possibly change state\n             boolean active = _broker.isActive();\n-            clean = !_state.isDirty();     // intentional direct access\n+            clean = !_state.isDirty(); // intentional direct access\n \n             // fire event fast before state change.\n             if (clean)\n@@ -1490,7 +1489,7 @@ private Boolean dirty(int field, Boolean mutate, boolean loadFetchGroup) {\n     /**\n      * Fire post-dirty events after field value changes.\n      *\n-     * @param    status    return value from {@link #dirty(int,boolean,boolean)}\n+     * @param status return value from {@link #dirty(int,boolean,boolean)}\n      */\n     private void postDirty(Boolean status) {\n         if (Boolean.TRUE.equals(status))\n@@ -2499,7 +2498,7 @@ else if (!val) {\n \n     /**\n      * Executes pre-clear callbacks, clears all managed fields, and calls the\n-     * {@link #setLoaded} method with a value of false.  Primary key fields\n+     * {@link #setLoaded} method with a value of false. Primary key fields\n      * are not cleared.\n      */\n     void clearFields() {\n@@ -2551,7 +2550,7 @@ void saveFields(boolean immediate) {\n \n     /**\n      * If the field isn't already saved, saves the currently loaded field\n-     * state of the instance.  The saved values can all be restored via\n+     * state of the instance. The saved values can all be restored via\n      * {@link #restoreFields}.\n      */\n     private void saveField(int field) {\n@@ -2673,8 +2672,8 @@ void unproxyFields() {\n     }\n \n     /**\n-     * Get ready for a flush.  Persists all persistence-capable object fields,\n-     * and checks for illegal null values.  Also assigns oids and field values\n+     * Get ready for a flush. Persists all persistence-capable object fields,\n+     * and checks for illegal null values. Also assigns oids and field values\n      * for all strategies that don't require flushing.\n      */\n     void preFlush(boolean logical, OpCallbacks call) {\n@@ -2905,7 +2904,7 @@ private void setLoaded(int field, boolean isLoaded) {\n      * might exclude some fields which are then immediately loaded in a\n      * separate step before being returned to the user.\n      *\n-     * @param    field    the field index that was loaded, or -1 to indicate\n+     * @param field the field index that was loaded, or -1 to indicate\n      * that a group of possibly unknown fields was loaded\n      */\n     private void postLoad(int field, FetchState fetchState) {\n@@ -2965,8 +2964,7 @@ public boolean isVersionCheckRequired() {\n     }\n \n     /**\n-     * Set whether this instance requires a version check on the\n-     * next flush.\n+     * Set whether this instance requires a version check on the next flush.\n      */\n     void setCheckVersion(boolean versionCheck) {\n         if (versionCheck)\n@@ -2983,8 +2981,7 @@ public boolean isVersionUpdateRequired() {\n     }\n \n     /**\n-     * Set whether this instance requires a version update on the\n-     * next flush.\n+     * Set whether this instance requires a version update on the next flush.\n      */\n     void setUpdateVersion(boolean versionUpdate) {\n         if (versionUpdate)\n@@ -3015,7 +3012,7 @@ protected void lock() {\n     }\n \n     /**\n-     *\tUnlock the state manager.\n+     * Unlock the state manager.\n      */\n \tprotected void unlock ()\n \t{"},{"sha":"b82ab56657c49e350771da24351a511bf65d86c2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","status":"modified","additions":40,"deletions":43,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -23,7 +23,7 @@\n import org.apache.openjpa.meta.ValueMetaData;\n \n /**\n- * <p>Represents a set of managed objects and their environment.</p>\n+ * Represents a set of managed objects and their environment.\n  *\n  * @since 4.0\n  * @author Abe White\n@@ -42,7 +42,7 @@\n     public static final int OID_ALLOW_NEW = 2 << 3;\n \n     /**\n-     * Return the broker for this context, if possible.  Note that a broker\n+     * Return the broker for this context, if possible. Note that a broker\n      * will be unavailable in remote contexts, and this method may throw\n      * an exception to that effect.\n      */\n@@ -71,7 +71,7 @@\n     public LockManager getLockManager();\n \n     /**\n-     * Return the store manager in use.  This will be a wrapper around the\n+     * Return the store manager in use. This will be a wrapper around the\n      * native store manager, which you can retrieve via\n      * {@link DelegatingStoreManager#getInnermostDelegate}.\n      */\n@@ -91,21 +91,21 @@\n      * Return the cached instance for the given oid/object, or null if not\n      * cached.\n      *\n-     * @param    oid        the object's id\n+     * @param oid the object's id\n      * @return the cached object, or null if not cached\n      */\n     public Object findCached(Object oid, FindCallbacks call);\n \n     /**\n-     * Find the persistence object with the given oid.  If\n+     * Find the persistence object with the given oid. If\n      * <code>validate</code> is true, the broker will check the store\n-     * for the object, and return null if it does not exist.  If\n-     * <code>validate</code> is false, this method never returns null.  The\n+     * for the object, and return null if it does not exist. If\n+     * <code>validate</code> is false, this method never returns null. The\n      * broker will either return its cached instance, attempt to create a\n      * hollow instance, or throw an <code>ObjectNotFoundException</code> if\n      * unable to return a hollow instance.\n      *\n-     * @param    validate    if true, validate that the instance exists in the\n+     * @param validate if true, validate that the instance exists in the\n      * store and load fetch group fields, otherwise return\n      * any cached or hollow instance\n      */\n@@ -114,25 +114,25 @@\n     /**\n      * Return the objects with the given oids.\n      *\n-     * @param    oids        the oids of the objects to return\n+     * @param oids the oids of the objects to return\n      * @return the objects that were looked up, in the same order as the oids\n      * parameter\n-     * @see    #find(Object,boolean)\n+     * @see #find(Object,boolean)\n      */\n     public Object[] findAll(Collection oids, boolean validate,\n         FindCallbacks call);\n \n     /**\n-     * Return the object with the given oid.  If present, the\n-     * cached instance will be returned.  Otherwise, the instance will be\n+     * Return the object with the given oid. If present, the\n+     * cached instance will be returned. Otherwise, the instance will be\n      * initialized through the store as usual; however, in this case\n      * the store will be passed the given execution data, and the\n      * system will load the object according to the given fetch configuratiion\n      * (or the context's configuration, if the given one is null).\n      * Fields can optionally be excluded from required loading using the\n-     * <code>exclude</code> mask.  By default this method does not find new\n+     * <code>exclude</code> mask. By default this method does not find new\n      * unflushed instances, validates, and does not throw an exception\n-     * if a cached instance has been deleted concurrently.  These options\n+     * if a cached instance has been deleted concurrently. These options\n      * are controllable through the given <code>OID_XXX</code> flags.\n      */\n     public Object find(Object oid, FetchState fetchState, BitSet exclude,\n@@ -141,50 +141,49 @@ public Object find(Object oid, FetchState fetchState, BitSet exclude,\n     /**\n      * Return the objects with the given oids.\n      *\n-     * @see    #find(Object,FetchState,BitSet,Object,int)\n+     * @see #find(Object,FetchState,BitSet,Object,int)\n      */\n     public Object[] findAll(Collection oids, FetchState fetchState,\n         BitSet exclude, Object edata, int flags);\n \n     /**\n-     * Return an iterator over all instances of the given type.  The iterator\n+     * Return an iterator over all instances of the given type. The iterator\n      * should be closed with {@link ImplHelper#close} when no longer needed.\n      * This method delegates to {@link StoreManager#executeExtent}.\n      */\n     public Iterator extentIterator(Class cls, boolean subs,\n         FetchConfiguration fetch, boolean ignoreChanges);\n \n     /**\n-     * Immediately load the given object's persistent fields.  One might\n+     * Immediately load the given object's persistent fields. One might\n      * use this action to make sure that an instance's fields are loaded\n-     * before transitioning it to transient.  Note that this action is not\n-     * recursive.  Any related objects that are loaded will not necessarily\n-     * have their fields loaded.  Unmanaged target is ignored.\n+     * before transitioning it to transient. Note that this action is not\n+     * recursive. Any related objects that are loaded will not necessarily\n+     * have their fields loaded. Unmanaged target is ignored.\n      *\n-     * @param    fgOnly        indicator as to whether to retrieve only fields\n+     * @param fgOnly indicator as to whether to retrieve only fields\n      * in the current fetch groups, or all fields\n-     * @see    #retrieve\n+     * @see #retrieve\n      */\n     public void retrieve(Object pc, boolean fgOnly, OpCallbacks call);\n \n     /**\n-     * Retrieve the given objects' persistent state.  Unmanaged targets are\n+     * Retrieve the given objects' persistent state. Unmanaged targets are\n      * ignored.\n      *\n-     * @param    fgOnly        indicator as to whether to retrieve only fields\n-     * @see    #retrieve\n+     * @param fgOnly indicator as to whether to retrieve only fields\n+     * @see #retrieve\n      */\n     public void retrieveAll(Collection objs, boolean fgOnly, OpCallbacks call);\n \n     /**\n      * Make the given instance embedded.\n      *\n-     * @param    obj            the instance to embed; may be null to create a\n-     * new instance\n-     * @param    id            the id to give the embedded state manager; may be\n+     * @param obj the instance to embed; may be null to create a new instance\n+     * @param id the id to give the embedded state manager; may be\n      * null for default\n-     * @param    owner        the owning state manager\n-     * @param    ownerMeta    the value in which the object is embedded\n+     * @param owner the owning state manager\n+     * @param ownerMeta the value in which the object is embedded\n      * @return the state manager for the embedded instance\n      */\n     public OpenJPAStateManager embed(Object obj, Object id,\n@@ -252,13 +251,13 @@ public OpenJPAStateManager embed(Object obj, Object id,\n \n     /**\n      * Whether to maintain the order in which objects are dirtied for\n-     * {@link #getDirtyObjects}.  Default is the store manager's decision.\n+     * {@link #getDirtyObjects}. Default is the store manager's decision.\n      */\n     public boolean getOrderDirtyObjects();\n \n     /**\n      * Whether to maintain the order in which objects are dirtied for\n-     * {@link #getDirtyObjects}.  Default is the store manager's decision.\n+     * {@link #getDirtyObjects}. Default is the store manager's decision.\n      */\n     public void setOrderDirtyObjects(boolean order);\n \n@@ -342,13 +341,13 @@ public void transactionalAll(Collection objs, boolean updateVersion,\n \n     /**\n      * Detach mode constant to determine which fields are part of the\n-     * detached graph.  Defaults to {@link DetachState#DETACH_LOADED}.\n+     * detached graph. Defaults to {@link DetachState#DETACH_LOADED}.\n      */\n     public int getDetachState();\n \n     /**\n      * Detach mode constant to determine which fields are part of the\n-     * detached graph.  Defaults to {@link DetachState#DETACH_LOADED}.\n+     * detached graph. Defaults to {@link DetachState#DETACH_LOADED}.\n      */\n     public void setDetachState(int mode);\n \n@@ -379,7 +378,7 @@ public void transactionalAll(Collection objs, boolean updateVersion,\n     /**\n      * If a large number of objects will be created, modified, or deleted\n      * during this transaction setting this option to true will reduce memory\n-     * usage if you perform periodic flushes.  Upon transaction commit the\n+     * usage if you perform periodic flushes. Upon transaction commit the\n      * data cache will have to more aggressively flush objects. The store cache\n      * will have to flush instances of objects for each class of object\n      * modified during the transaction. A side benefit of large transaction\n@@ -417,21 +416,19 @@ public void transactionalAll(Collection objs, boolean updateVersion,\n     public boolean hasConnection();\n \n     /**\n-     * Return the connection in use by the context, or a new connection if\n-     * none.\n+     * Return the connection in use by the context, or a new connection if none.\n      */\n     public Object getConnection();\n \n     /**\n-     *\tSynchronizes on an internal lock if the\n-     *\t<code>Multithreaded</code> flag is set to true.  Make sure to call\n-\t *\t{@link #unlock} in a finally clause of the same method.\n+     * Synchronizes on an internal lock if the\n+     * <code>Multithreaded</code> flag is set to true. Make sure to call\n+\t * {@link #unlock} in a finally clause of the same method.\n \t */\n \tpublic void lock ();\n \n-\n \t/**\n-\t *\tReleases the internal lock.\n+\t * Releases the internal lock.\n \t */\n \tpublic void unlock ();\n }"},{"sha":"f701d6b0ea1d76bc5e383bbc3c145db9fafda377","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java","status":"modified","additions":89,"deletions":95,"changes":184,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -25,8 +25,8 @@\n import org.apache.openjpa.meta.ValueStrategies;\n \n /**\n- * <p>Interface to be implemented by data store mechanisms to interact with\n- * this runtime.</p>\n+ * Interface to be implemented by data store mechanisms to interact with\n+ * this runtime.\n  *\n  * @author Abe White\n  */\n@@ -44,15 +44,15 @@\n     public static final int FORCE_LOAD_ALL = 2;\n \n     /**\n-     * Set a reference to the corresponding context.  This method\n-     * will be called before the store manager is used.  The store manager\n+     * Set a reference to the corresponding context. This method\n+     * will be called before the store manager is used. The store manager\n      * is responsible for pulling any necessary configuration data from the\n      * context, including the transaction mode and connection retain mode.\n      */\n     public void setContext(StoreContext ctx);\n \n     /**\n-     * Notification that an optimistic transaction has started.  This method\n+     * Notification that an optimistic transaction has started. This method\n      * does not replace the {@link #begin} method, which will still be called\n      * when a true data store transaction should begin.\n      */\n@@ -67,10 +67,10 @@\n     /**\n      * Begin a data store transaction. After this method is called,\n      * it is assumed that all further operations are operating in a single\n-     * transaction that can be committed or rolled back.  If optimistic\n+     * transaction that can be committed or rolled back. If optimistic\n      * transactions are in use, this method will only be called when the\n      * system requires a transactionally consistent connection due to a\n-     * user request to flush or commit the transaction.  In this case, it\n+     * user request to flush or commit the transaction. In this case, it\n      * is possible that the optimistic transaction does not have the latest\n      * versions of all instances (i.e. another transaction has modified the\n      * same instances and committed since the optimistic transaction started).\n@@ -101,37 +101,36 @@\n      * Update the version information in the given state manager to the\n      * version stored in the data store.\n      *\n-     * @param    sm                the instance to check\n-     * @param    edata            the current execution data, or null if not\n+     * @param sm the instance to check\n+     * @param edata the current execution data, or null if not\n      * given to the calling method of the context\n      * @return true if the instance still exists in the\n      * datastore and is up-to-date, false otherwise\n      */\n     public boolean syncVersion(OpenJPAStateManager sm, Object edata);\n \n     /**\n-     * Initialize the given state manager.  The object id of the\n+     * Initialize the given state manager. The object id of the\n      * state manager will be set, and the state manager's metadata be set to\n      * the class of the instance to load, or possibly one of its superclasses.\n      * Initialization involves first calling the\n      * {@link OpenJPAStateManager#initialize} method with\n      * a new instance of the correct type constructed with the\n-     * {@link org.apache.openjpa.enhance.PCRegistry#newInstance(Class, \n+     * {@link org.apache.openjpa.enhance.PCRegistry#newInstance(Class,\n      * org.apache.openjpa.enhance.StateManager, boolean)} method\n      * (this will reset the state manager's metadata if the actual type was a\n-     * subclass).  After instance initialization, load any the fields for the\n+     * subclass). After instance initialization, load any the fields for the\n      * given fetch configuration that can be efficiently retrieved. If any of\n      * the configured fields are not loaded in this method, they will be\n-     * loaded with a subsequent call to {@link #load}.  If this method is\n+     * loaded with a subsequent call to {@link #load}. If this method is\n      * called during a data store transaction, the instance's database record\n-     * should be locked.  Version information can be loaded if desired through\n+     * should be locked. Version information can be loaded if desired through\n      * the {@link OpenJPAStateManager#setVersion} method.\n      *\n-     * @param    sm        the instance to initialize\n-     * @param    state    the lifecycle state to initialize the state\n-     * manager with\n-     * @param    fetchState    configuration for how to load the instance\n-     * @param    edata    the current execution data, or null if not\n+     * @param sm the instance to initialize\n+     * @param state the lifecycle state to initialize the state manager with\n+     * @param fetchState configuration for how to load the instance\n+     * @param edata the current execution data, or null if not\n      * given to the calling method of the broker\n      * @return true if the matching instance exists in the data\n      * store, false otherwise\n@@ -144,22 +143,22 @@ public boolean initialize(OpenJPAStateManager sm, PCState state,\n      * Note that any collection or map types loaded into the state manager\n      * will be proxied with the correct type; therefore the stroe manager\n      * does not have to load the same concrete collection/map types as the\n-     * instance declares.  However, array types must be consistent with the\n-     * array type stored by the persistence capable instance.  If this method\n+     * instance declares. However, array types must be consistent with the\n+     * array type stored by the persistence capable instance. If this method\n      * is called during a data store transaction, the instance should be\n-     * locked.  If the given state manager does not have its version set\n+     * locked. If the given state manager does not have its version set\n      * already, version information can be loaded if desired through the\n      * {@link OpenJPAStateManager#setVersion} method.\n      *\n-     * @param    sm            the instance to load\n-     * @param    fields        set of fields to load; all field indexes in this\n+     * @param sm the instance to load\n+     * @param fields set of fields to load; all field indexes in this\n      * set must be loaded; this set is mutable\n-     * @param    fetchState        the fetch configuration to use when loading\n+     * @param fetchState the fetch configuration to use when loading\n      * related objects\n-     * @param    lockLevel    attempt to load simple fields at this lock level;\n+     * @param lockLevel attempt to load simple fields at this lock level;\n      * relations should be loaded at the read lock level\n      * of the fetch configuration\n-     * @param    edata        the current execution data, or null if not\n+     * @param edata the current execution data, or null if not\n      * given to the calling method of the broker\n      * @return false if the object no longer exists in the\n      * database, true otherwise\n@@ -169,55 +168,53 @@ public boolean load(OpenJPAStateManager sm, BitSet fields,\n \n     /**\n      * Initialize, load, or validate the existance of all of the given\n-     * objects.  This method is called from various broker methods that act\n-     * on multiple objects, such as {@link StoreContext#retrieveAll}.  It gives\n+     * objects. This method is called from various broker methods that act\n+     * on multiple objects, such as {@link StoreContext#retrieveAll}. It gives\n      * the store manager an opportunity to efficiently batch-load data for\n-     * several objects.  Each of the given state managers will be in one of\n+     * several objects. Each of the given state managers will be in one of\n      * three states, each requiring a different action:\n      * <ul>\n      * <li><code>stateManager.getManagedInstance () == null</code>: An\n-     * uninitialized state manager.  Perform the same actions as in\n-     * {@link #initialize}.</p>\n+     * uninitialized state manager. Perform the same actions as in\n+     * {@link #initialize}.\n      * <li><code>load != FORCE_LOAD_NONE || stateManager.getPCState ()\n      * == PCState.HOLLOW</code>: A hollow state manager, or one whose\n      * fields must be loaded because this is a refresh or retrieve action.\n      * Peform the same actions as in {@link #load}, choosing the fields\n      * to load based on the fetch configuration, or loading all fields\n-     * if <code>load == FORCE_LOAD_ALL</code>.  Any required fields left\n+     * if <code>load == FORCE_LOAD_ALL</code>. Any required fields left\n      * unloaded will cause a subsequent invocation of {@link #load} on\n      * the individual object in question.</li>\n      * <li><code>load == FORCE_LOAD_NONE &amp;&amp;\n      * stateManager.getPCState () != PCState.HOLLOW</code>: A non-hollow\n-     * state manager.  Perform the same actions as in {@link #exists},\n-     * and load additional state if desired.  Non-hollow objects will only\n+     * state manager. Perform the same actions as in {@link #exists},\n+     * and load additional state if desired. Non-hollow objects will only\n      * be included outside of refresh invocations if a user calls\n      * <code>findAll</code> with the <code>validate</code>\n      * parameter set to <code>true</code>.</li>\n-     * </ul>\n-     * Store managers that cannot efficiently batch load can simply test\n+     * </ul> Store managers that cannot efficiently batch load can simply test\n      * for these conditions and delegate to the proper methods.\n      *\n-     * @param    sms        the state manager instances to load\n-     * @param    state    the lifecycle state to initialize uninitialized\n+     * @param sms the state manager instances to load\n+     * @param state the lifecycle state to initialize uninitialized\n      * state managers with; may be null if no uninitialized\n      * instances are included in <code>sms</code>\n-     * @param    load    one of the FORCE_LOAD_* constants describing the\n-     * fields to force-load if this is a refresh or\n-     * retrieve action\n-     * @param    fetchState    the current fetch configuration to use when loading\n+     * @param load one of the FORCE_LOAD_* constants describing the\n+     * fields to force-load if this is a refresh or retrieve action\n+     * @param fetchState the current fetch configuration to use when loading\n      * related objects\n-     * @param    edata    the current execution data, or null if not\n+     * @param edata the current execution data, or null if not\n      * given to the calling method of the broker\n      * @return a collection of the state manager identities for\n      * which no data store record exists\n-     * @see    org.apache.openjpa.util.ImplHelper#loadAll\n+     * @see org.apache.openjpa.util.ImplHelper#loadAll\n      */\n     public Collection loadAll(Collection sms, PCState state, int load,\n         FetchState fetchState, Object edata);\n \n     /**\n      * Notification that the given state manager is about to change its\n-     * lifecycle state.  The store manager is not required to do anything in\n+     * lifecycle state. The store manager is not required to do anything in\n      * this method, but some back ends may need to.\n      *\n      * @since 3.0\n@@ -232,52 +229,50 @@ public void beforeStateChange(OpenJPAStateManager sm, PCState fromState,\n      * store action, such as persistent-clean instances or persistent-dirty\n      * instances that have not been modified since they were last flushed.\n      * For datastore updates and inserts, the dirty, non-flushed fields of\n-     * each state should be flushed.  New instances without an assigned object\n-     * id should be given one via {@link OpenJPAStateManager#setObjectId}.  New\n+     * each state should be flushed. New instances without an assigned object\n+     * id should be given one via {@link OpenJPAStateManager#setObjectId}. New\n      * instances with value-strategy fields that have not been assigned yet\n-     * should have their fields set.  Datastore version information should be\n+     * should have their fields set. Datastore version information should be\n      * updated during flush, and the state manager's version indicator\n      * updated through the {@link OpenJPAStateManager#setNextVersion} method.\n      * The current version will roll over to this next version upon successful\n      * commit.\n      *\n-     * @see    org.apache.openjpa.util.ApplicationIds#assign()\n+     * @see org.apache.openjpa.util.ApplicationIds#assign()\n      */\n     public Collection flush(Collection sms);\n \n     /**\n-     * Assign an object id to the given new instance.  Return false if the\n+     * Assign an object id to the given new instance. Return false if the\n      * instance cannot be assigned an identity because a flush is required\n      * (for example, the identity is determined by the datastore on insert).\n      * For application identity instances, the assigned object id should be\n-     * based on field state.  The implementation is responsible for using the\n-     * proper value strategy according to the instance metadata.  This method\n+     * based on field state. The implementation is responsible for using the\n+     * proper value strategy according to the instance metadata. This method\n      * is called the first time a user requests the oid of a new instance\n      * before flush.\n      *\n-     * @param    preFlush    whether this assignment is being requested by the\n+     * @param preFlush whether this assignment is being requested by the\n      * system as part of pre-flush activities, and can\n-     * be ignored if it is more efficient to assign within\n-     * {@link #flush}\n-     * @see    org.apache.openjpa.util.ImplHelper#generateFieldValue\n-     * @see    org.apache.openjpa.util.ImplHelper#generateIdentityValue\n-     * @see    org.apache.openjpa.util.ApplicationIds#assign()\n+     * be ignored if it is more efficient to assign within {@link #flush}\n+     * @see org.apache.openjpa.util.ImplHelper#generateFieldValue\n+     * @see org.apache.openjpa.util.ImplHelper#generateIdentityValue\n+     * @see org.apache.openjpa.util.ApplicationIds#assign()\n      * @since 3.3\n      */\n     public boolean assignObjectId(OpenJPAStateManager sm, boolean preFlush);\n \n     /**\n-     * Assign a value to the given field.  Return false if the value cannot\n+     * Assign a value to the given field. Return false if the value cannot\n      * be assigned because a flush is required (for example, the field value\n-     * is determined by the datastore on insert).  This method is called the\n+     * is determined by the datastore on insert). This method is called the\n      * first time a user requests the value of a field with a value-strategy\n      * on a new instance before flush.\n      *\n-     * @param    preFlush    whether this assignment is being requested by the\n+     * @param preFlush whether this assignment is being requested by the\n      * system as part of pre-flush activities, and can\n-     * be ignored if it is more efficient to assign within\n-     * {@link #flush}\n-     * @see    org.apache.openjpa.util.ImplHelper#generateFieldValue\n+     * be ignored if it is more efficient to assign within {@link #flush}\n+     * @see org.apache.openjpa.util.ImplHelper#generateFieldValue\n      * @since 4.0\n      */\n     public boolean assignField(OpenJPAStateManager sm, int field,\n@@ -293,14 +288,14 @@ public boolean assignField(OpenJPAStateManager sm, int field,\n \n     /**\n      * Return the class used by this StoreManager for datastore identity\n-     * values.  The given metadata may be null, in which case the return\n+     * values. The given metadata may be null, in which case the return\n      * value should the common datastore identity class for all classes, or\n      * null if this store manager does not use a common identity class.\n      */\n     public Class getDataStoreIdType(ClassMetaData meta);\n \n     /**\n-     * Copy the given object id value.  Use the described type of the given\n+     * Copy the given object id value. Use the described type of the given\n      * metadata, which may be a subclass of the given oid's described type.\n      */\n     public Object copyDataStoreId(Object oid, ClassMetaData meta);\n@@ -312,22 +307,22 @@ public boolean assignField(OpenJPAStateManager sm, int field,\n     public Object newDataStoreId(Object oidVal, ClassMetaData meta);\n \n     /**\n-     * Return a connection to the data store suitable for client use.  If\n+     * Return a connection to the data store suitable for client use. If\n      * this method is called during a data store transaction, thie connection\n-     * must be transactional.  If no connection is in use, this method should\n+     * must be transactional. If no connection is in use, this method should\n      * create one to return.\n      */\n     public Object getClientConnection();\n \n     /**\n-     * Instruct the store to retain a connection for continued use.  This\n+     * Instruct the store to retain a connection for continued use. This\n      * will be invoked automatically based on the user's configured connection\n      * retain mode.\n      */\n     public void retainConnection();\n \n     /**\n-     * Instruct the store to release a retained connection.  This\n+     * Instruct the store to release a retained connection. This\n      * will be invoked automatically based on the user's configured connection\n      * retain mode.\n      */\n@@ -343,26 +338,26 @@ public boolean assignField(OpenJPAStateManager sm, int field,\n \n     /**\n      * Return a provider for all instances of the given candidate class,\n-     * optionally including subclasses.  The given candidate may be an\n-     * unmapped type with mapped subclasses.  If the provider is iterated\n+     * optionally including subclasses. The given candidate may be an\n+     * unmapped type with mapped subclasses. If the provider is iterated\n      * within a data store transaction, returned instances should be locked.\n      */\n     public ResultObjectProvider executeExtent(ClassMetaData meta,\n         boolean subclasses, FetchConfiguration fetch);\n \n     /**\n-     * Return a query implementation suitable for this store.  If the query\n+     * Return a query implementation suitable for this store. If the query\n      * is iterated within a data store transaction, returned instances should\n-     * be locked.  Return null if this store does not support native execution\n-     * of the given language.  OpenJPA can execute JPQL in memory even without \n+     * be locked. Return null if this store does not support native execution\n+     * of the given language. OpenJPA can execute JPQL in memory even without\n      * back end support.\n      *\n-     * @param    language the query language\n+     * @param language the query language\n      */\n     public StoreQuery newQuery(String language);\n \n     /**\n-     * Return a fetch configuration suitable for this runtime.  Typically\n+     * Return a fetch configuration suitable for this runtime. Typically\n      * will be or extend <code>org.apache.openjpa.kernel.FetchConfigurationImpl</code>.\n      */\n     public FetchConfiguration newFetchConfiguration();\n@@ -374,22 +369,22 @@ public ResultObjectProvider executeExtent(ClassMetaData meta,\n      * @param v1 the first version object to compare\n      * @param v2 the second version object to compare\n      * @return <ul>\n-     *         <li>{@link #VERSION_LATER} if <code>v1</code>\n-     *         is later than <code>v2</code></li>\n-     *         <li>{@link #VERSION_EARLIER} if <code>v1</code>\n-     *         is earlier than <code>v2</code></li>\n-     *         <li>{@link #VERSION_SAME} if <code>v1</code>\n-     *         is the same as <code>v2</code></li>\n-     *         <li>{@link #VERSION_DIFFERENT} if <code>v1</code>\n-     *         is different from <code>v2</code>, but the time\n-     *         difference of the versions cannot be determined</li>\n-     *         </ul>\n+     * <li>{@link #VERSION_LATER} if <code>v1</code>\n+     * is later than <code>v2</code></li>\n+     * <li>{@link #VERSION_EARLIER} if <code>v1</code>\n+     * is earlier than <code>v2</code></li>\n+     * <li>{@link #VERSION_SAME} if <code>v1</code>\n+     * is the same as <code>v2</code></li>\n+     * <li>{@link #VERSION_DIFFERENT} if <code>v1</code>\n+     * is different from <code>v2</code>, but the time\n+     * difference of the versions cannot be determined</li>\n+     * </ul>\n      */\n     public int compareVersion(OpenJPAStateManager state, Object v1, Object v2);\n \n     /**\n      * Return a sequence that generates datastore identity values for the\n-     * given class.  This method will only be called when the identity strategy\n+     * given class. This method will only be called when the identity strategy\n      * for the class is one of:\n      * <ul>\n      * <li>{@link ValueStrategies#NATIVE}</li>\n@@ -404,25 +399,24 @@ public ResultObjectProvider executeExtent(ClassMetaData meta,\n     public Seq getDataStoreIdSequence(ClassMetaData forClass);\n \n     /**\n-     * Return a sequence that generates values for the given field.  This\n+     * Return a sequence that generates values for the given field. This\n      * method will only be called when the value strategy for the field\n      * is one of:\n      * <ul>\n      * <li>{@link ValueStrategies#NATIVE}</li>\n      * <li>{@link ValueStrategies#AUTOASSIGN}</li>\n      * <li>{@link ValueStrategies#INCREMENT}</li>\n-     * </ul>\n-     * If the value strategy cannot be represented as a sequence, return\n+     * </ul> If the value strategy cannot be represented as a sequence, return\n      * null.\n      *\n      * @since 4.0\n      */\n     public Seq getValueSequence(FieldMetaData forField);\n \n     /**\n-     *\tFree any resources this store manager is using.\n+     * Free any resources this store manager is using.\n \t *\n-\t *\t@since\t2.5\n+\t * @since\t2.5\n \t */\n \tpublic void close ();\n }"},{"sha":"2e225bbae7c3d4154e7bb253a49d5732ffe6ef21","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreQuery.java","status":"modified","additions":30,"deletions":32,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreQuery.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -28,9 +28,9 @@\n import org.apache.openjpa.meta.FieldMetaData;\n \n /**\n- * <p>Component that executes queries against the datastore.  For\n+ * Component that executes queries against the datastore. For\n  * expression-based queries, consider subclassing\n- * {@link ExpressionStoreManagerQuery}.</p>\n+ * {@link ExpressionStoreManagerQuery}.\n  *\n  * @author Abe White\n  * @since 4.0\n@@ -52,13 +52,13 @@\n     public QueryContext getContext();\n \n     /**\n-     * Set the current query context.  This will be called before use.\n+     * Set the current query context. This will be called before use.\n      */\n     public void setContext(QueryContext ctx);\n \n     /**\n      * This is invoked when the user or a facade creates a new query with\n-     * an object that the system does not recognize.  Return true if\n+     * an object that the system does not recognize. Return true if\n      * the object is recognized by the store, false otherwise.\n      */\n     public boolean setQuery(Object query);\n@@ -74,13 +74,12 @@\n     public AggregateListener getAggregateListener(String tag);\n \n     /**\n-     * Create a new key for caching compiled query information.  May be\n-     * null.\n+     * Create a new key for caching compiled query information. May be null.\n      */\n     public Object newCompilationKey();\n \n     /**\n-     * Create a new compilation for this query.  May be null.\n+     * Create a new compilation for this query. May be null.\n      */\n     public Object newCompilation();\n \n@@ -108,36 +107,36 @@\n \n     /**\n      * Return an executor for in-memory execution of this query.\n-     * Executors must be cachable and thread safe.  If this class returns\n+     * Executors must be cachable and thread safe. If this class returns\n      * true from {@link #supportsAbstractExecutors}, the given metadata\n      * will always be for the candidate class of this query, or possibly\n      * null if the candidate class is not itself persistence capable (like\n-     * an interface or abstract base class).  Otherwise, the given type will\n+     * an interface or abstract base class). Otherwise, the given type will\n      * be a mapped class.\n      *\n-     * @param    subs    whether to include dependent mapped subclasses in the\n+     * @param subs whether to include dependent mapped subclasses in the\n      * results; independent subclasses should never be included\n      */\n     public Executor newInMemoryExecutor(ClassMetaData meta, boolean subs);\n \n     /**\n      * Return an executor for datastore execution of this query.\n-     * Executors must be cachable and thread safe.  If this class returns\n+     * Executors must be cachable and thread safe. If this class returns\n      * true from {@link #supportsAbstractExecutors}, the given metadata\n      * will always be for the candidate class of this query, or possibly\n      * null if the candidate class is not itself persistence capable (like\n-     * an interface or abstract base class).  Otherwise, the given type will\n+     * an interface or abstract base class). Otherwise, the given type will\n      * be a mapped class.\n      *\n-     * @param    subs    whether to include dependent mapped subclasses in the\n+     * @param subs whether to include dependent mapped subclasses in the\n      * results; independent subclasses should never be included\n      */\n     public Executor newDataStoreExecutor(ClassMetaData meta, boolean subs);\n \n     /**\n      * Return true if this query supports execution against abstract or\n-     * interface types.  Returns false by default, meaning we will only\n-     * request executors for persistent classes.  In this case, we will\n+     * interface types. Returns false by default, meaning we will only\n+     * request executors for persistent classes. In this case, we will\n      * automatically combine the results of the executors for all\n      * implementing classes if we execute a query for an interface for\n      * abstract type.\n@@ -160,32 +159,32 @@\n     public boolean supportsParameterDeclarations();\n \n     /**\n-     *  An executor provides a uniform interface to the mechanism for executing\n-     *\teither an in-memory or datastore query.  In the common case, the\n-     *\t{@link #executeQuery} method will be called before other methods,\n-     *\tthough this is not guaranteed.\n+     * An executor provides a uniform interface to the mechanism for executing\n+     * either an in-memory or datastore query. In the common case, the\n+     * {@link #executeQuery} method will be called before other methods,\n+     * though this is not guaranteed.\n      *\n-     *  @author Marc Prud'hommeaux\n+     * @author Marc Prud'hommeaux\n      */\n     public static interface Executor {\n \n         /**\n          * Return the result of executing this query with the given parameter\n-         * values.  If this query is a projection and this executor does not\n+         * values. If this query is a projection and this executor does not\n          * pack results itself, each element of the returned result object\n          * provider should be an object array containing the projection values.\n          *\n-         * @param    lrs        true if the query result should be treated as a\n+         * @param lrs true if the query result should be treated as a\n          * large result set, assuming the query is not an\n          * aggregate and does not have grouping\n-         * @see    #isPacking\n+         * @see #isPacking\n          */\n         public ResultObjectProvider executeQuery(StoreQuery q,\n             Object[] params, boolean lrs, long startIdx, long endIdx);\n \n         /**\n          * Return the result of executing this query with the given parameter\n-         * values.  Most implementation will use\n+         * values. Most implementation will use\n          * {@link QueryContext#toParameterArray} to transform the parameters\n          * into an array and invoke the array version of this method.\n          */\n@@ -226,13 +225,13 @@ public ResultObjectProvider executeQuery(StoreQuery q, Map params,\n         /**\n          * Extract the value of the <code>orderIndex</code>th ordering\n          * expression in {@link Query#getOrderingClauses} from the\n-         * given result object.  The result object will be an object from\n+         * given result object. The result object will be an object from\n          * the result object provider returned from {@link #executeQuery}.\n          * This method is used when several result lists have to be merged\n-         * in memory.  If this exeuctor's parent query supports executors on\n+         * in memory. If this exeuctor's parent query supports executors on\n          * abstract or interface classes, this method will not be used.\n          *\n-         * @see    StoreQuery#supportsAbstractExecutor\n+         * @see StoreQuery#supportsAbstractExecutor\n          */\n         public Object getOrderingValue(StoreQuery q, Object[] params,\n             Object resultObject, int orderIndex);\n@@ -245,7 +244,7 @@ public Object getOrderingValue(StoreQuery q, Object[] params,\n \n         /**\n          * Return true if this executor packs projections into the result\n-         * class itself.  Executors for query languages that allow projections\n+         * class itself. Executors for query languages that allow projections\n          * without result clauses must return true and perform the result\n          * packing themselves.\n          */\n@@ -305,9 +304,8 @@ public Object getOrderingValue(StoreQuery q, Object[] params,\n         public Class getResultClass(StoreQuery q);\n \n         /**\n-         *\tReturn a map of {@link FieldMetaData} to update\n-\t\t *\t{@link Constant}s, in cases where this query is\n-\t\t *\tfor a bulk update.\n+         * Return a map of {@link FieldMetaData} to update\n+\t\t * {@link Constant}s, in cases where this query is for a bulk update.\n \t \t */\n \t\tpublic Map getUpdates (StoreQuery q);\n \t}"},{"sha":"ef81c04b3bc35e4d15ceb0a3f5ed611cb0c8889c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TCleanState.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TCleanState.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TCleanState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TCleanState.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,11 +16,10 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>Lifecycle state.</p>\n- * <p/>\n- * <p>Represents a transient instance that is managed by a StateManager and\n+ * Lifecycle state.\n+ *  Represents a transient instance that is managed by a StateManager and\n  * may be participating in the current\ttransaction, but has not yet been\n- * modified.</p>\n+ * modified.\n  *\n  * @author Abe White\n  */"},{"sha":"31fb003c5279a8ba6893a23269002476f90dc757","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TDirtyState.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TDirtyState.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TDirtyState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TDirtyState.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,10 +16,9 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>Lifecycle state.</p>\n- * <p/>\n- * <p>Represents a transient instance that is participating in the current\n- * transaction, and has been modified.</p>\n+ * Lifecycle state.\n+ *  Represents a transient instance that is participating in the current\n+ * transaction, and has been modified.\n  *\n  * @author Abe White\n  */"},{"sha":"c6423cfc20492bf25cebf2011326250acbe44ab1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TLoadedState.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TLoadedState.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TLoadedState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TLoadedState.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,12 +16,11 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>Lifecycle state.</p>\n- * <p/>\n- * <p>Represents a temporarily managed transient instance whose fields\n+ * Lifecycle state.\n+ *  Represents a temporarily managed transient instance whose fields\n  * are loaded for the purpose of field inspection such\n- * as for cascades.  This state should be released as soon as inspection\n- * is complete.</p>\n+ * as for cascades. This state should be released as soon as inspection\n+ * is complete.\n  *\n  * @author Steve Kim\n  */"},{"sha":"717be7e3611aac8a8114edea0d2df61a7206269c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TimeSeededSeq.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TimeSeededSeq.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TimeSeededSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TimeSeededSeq.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -24,9 +24,9 @@\n ////////////////////////////////////////////////////////////\n \n /**\n- * <p>A simplistic implementation of a {@link Seq} used\n- * to provide datastore ids.  Starts with an id equal to the system's\n- * current time in milliseconds and increments from there.</p>\n+ * A simplistic implementation of a {@link Seq} used\n+ * to provide datastore ids. Starts with an id equal to the system's\n+ * current time in milliseconds and increments from there.\n  *\n  * @author Greg Campbell\n  */"},{"sha":"1a1bbd0a2b7e07f7215aabaee49a2fba63e5322a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TransferFieldManager.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TransferFieldManager.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TransferFieldManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TransferFieldManager.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,7 +18,7 @@\n import org.apache.openjpa.enhance.FieldManager;\n \n /**\n- * <p>FieldManager type used to transfer a single field value.</p>\n+ * FieldManager type used to transfer a single field value.\n  *\n  * @author Abe White\n  */\n@@ -124,8 +124,7 @@ public void storeStringField(int field, String curVal) {\n     }\n \n     /**\n-     * Clear any held state.  Fields are also cleared automatically when\n-     * fetched.\n+     * Clear any held state. Fields are also cleared automatically when fetched.\n      */\n     public void clear() {\n         dblval = 0;"},{"sha":"454275133c0e0e26fccd38df7b9276a1e2b94850","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TransientState.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TransientState.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TransientState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/TransientState.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,11 +16,10 @@\n package org.apache.openjpa.kernel;\n \n /**\n- * <p>Lifecycle state.</p>\n- * <p/>\n- * <p>Represents a transient instance; this state lasts only through\n+ * Lifecycle state.\n+ *  Represents a transient instance; this state lasts only through\n  * the {@link #initialize} method, which immediately removes the\n- * persistence capable instance from management by the OpenJPA runtime.</p>\n+ * persistence capable instance from management by the OpenJPA runtime.\n  *\n  * @author Abe White\n  */"},{"sha":"7296c68c9e6c55d3fd0d6605bfc76b79a797b2c5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDHexSeq.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDHexSeq.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDHexSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDHexSeq.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -19,7 +19,7 @@\n import org.apache.openjpa.meta.ClassMetaData;\n \n /**\n- * <p>Sequence for generating 32-character hex UUID strings.</p>\n+ * Sequence for generating 32-character hex UUID strings.\n  *\n  * @author Abe White\n  */"},{"sha":"3b97bb1f8d4104f17333957a177e425a034159b6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDStringSeq.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDStringSeq.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDStringSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/UUIDStringSeq.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -19,7 +19,7 @@\n import org.apache.openjpa.meta.ClassMetaData;\n \n /**\n- * <p>Sequence for generating 16-character UUID strings.</p>\n+ * Sequence for generating 16-character UUID strings.\n  *\n  * @author Abe White\n  */"},{"sha":"9ad073040ad303b7787be84d6f7471f420f212ff","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -288,7 +288,7 @@ private Collection attachInPlace(AttachManager manager,\n     }\n \n     /**\n-     *\tAttach the given map.\n+     * Attach the given map.\n      */\n     private Map attachInPlace(AttachManager manager, StateManagerImpl sm,\n         FieldMetaData fmd, Map map) {"},{"sha":"644ffd26b29cf9b26d053a6e053bd46ea3f0801d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionLockManager.java","status":"modified","additions":12,"deletions":14,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionLockManager.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -20,8 +20,7 @@\n /**\n  * {@link LockManager} implementation that provides support\n  * for version checking and version updating when locks are acquired.\n- * This lock manager may be used standalone or extended for additional\n- * locking.\n+ * This lock manager may be used standalone or extended for additional locking.\n  *\n  * @author Marc Prud'hommeaux\n  */\n@@ -33,8 +32,8 @@\n \n     /**\n      * Returns the given instance's lock level, assuming that the state's\n-     * lock object is a number.  If the given instance is embedded, traverses\n-     * to its owner.  Override if lock is not stored as a number.\n+     * lock object is a number. If the given instance is embedded, traverses\n+     * to its owner. Override if lock is not stored as a number.\n      */\n     public int getLockLevel(OpenJPAStateManager sm) {\n         while (sm.getOwner() != null)\n@@ -44,7 +43,7 @@ public int getLockLevel(OpenJPAStateManager sm) {\n     }\n \n     /**\n-     * Sets the given instance's lock level to the given number.  Override\n+     * Sets the given instance's lock level to the given number. Override\n      * to store something else as the lock.\n      */\n     protected void setLockLevel(OpenJPAStateManager sm, int level) {\n@@ -61,7 +60,7 @@ public void release(OpenJPAStateManager sm) {\n     /**\n      * Delegates to {@link #lockInternal} after traversing to owning\n      * instance (if embedded) and assuring that the instance is persistent,\n-     * is not new, and is not already locked at a higher level.  After\n+     * is not new, and is not already locked at a higher level. After\n      * locking, calls {@link #setLockLevel} with the given level.\n      */\n     public void lock(OpenJPAStateManager sm, int level, int timeout,\n@@ -89,7 +88,7 @@ public void lock(OpenJPAStateManager sm, int level, int timeout,\n     /**\n      * Marks the instance's transactional status in accordance with\n      * the settings of {@link #getVersionCheckOnReadLock}\n-     * and {@link #getVersionUpdateOnWriteLock}.  Override to perform\n+     * and {@link #getVersionUpdateOnWriteLock}. Override to perform\n      * additional locking.\n      *\n      * @see StoreContext#transactional\n@@ -105,7 +104,7 @@ else if (level >= LockLevels.LOCK_READ && _versionCheckOnReadLock)\n     /**\n      * Whether or not we should force a version check at commit\n      * time when a read lock is requested in order to verify read\n-     * consistency.  Defaults to true.\n+     * consistency. Defaults to true.\n      */\n     public void setVersionCheckOnReadLock(boolean versionCheckOnReadLock) {\n         _versionCheckOnReadLock = versionCheckOnReadLock;\n@@ -114,27 +113,26 @@ public void setVersionCheckOnReadLock(boolean versionCheckOnReadLock) {\n     /**\n      * Whether or not we should force a version check at commit\n      * time when a read lock is requested in order to verify read\n-     * consistency.  Defaults to true.\n+     * consistency. Defaults to true.\n      */\n     public boolean getVersionCheckOnReadLock() {\n         return _versionCheckOnReadLock;\n     }\n \n     /**\n      * Whether or not we should force an update to the version at commit\n-     * time when a write lock is requested.  Defaults to true.\n+     * time when a write lock is requested. Defaults to true.\n      */\n     public void setVersionUpdateOnWriteLock(boolean versionUpdateOnWriteLock) {\n         _versionUpdateOnWriteLock = versionUpdateOnWriteLock;\n     }\n \n     /**\n-     *  Whether or not we should force an update to the version at commit\n-     *  time when a write lock is requested.  Defaults to true.\n+     * Whether or not we should force an update to the version at commit\n+     * time when a write lock is requested. Defaults to true.\n      */\n     public boolean getVersionUpdateOnWriteLock() {\n         return _versionUpdateOnWriteLock;\n \t}\n }\n \n-"},{"sha":"5d089f2d41a2681f70186b2b6267fa866f72c274","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Abs.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Abs.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Abs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Abs.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -22,15 +22,15 @@\n import serp.util.Numbers;\n \n /**\n- * <p>Take the absolute value of a number.</p>\n+ * Take the absolute value of a number.\n  *\n  * @author Abe White\n  */\n class Abs\n     extends UnaryMathVal {\n \n     /**\n-     * Constructor.  Provide the number whose absolute value to calculate.\n+     * Constructor. Provide the number whose absolute value to calculate.\n      */\n     public Abs(Val val) {\n         super(val);"},{"sha":"57ff5486b13d35b72890bc9069e55304ed96ea65","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AbstractExpressionBuilder.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -73,9 +73,9 @@\n     /**\n      * Constructor.\n      *\n-     * @param    factory        the expression factory to use\n-     * @param    meta        candidate class metadata\n-     * @param    resolver    used to resolve variables, parameters, and class\n+     * @param factory the expression factory to use\n+     * @param meta candidate class metadata\n+     * @param resolver used to resolve variables, parameters, and class\n      * names used in the query\n      */\n     public AbstractExpressionBuilder(ExpressionFactory factory,\n@@ -180,7 +180,7 @@ protected Value getVariable(String id, boolean bind) {\n     }\n \n     /**\n-     * Validate that all unbound variables are of a PC type.  If not, assume\n+     * Validate that all unbound variables are of a PC type. If not, assume\n      * that the user actually made a typo that we took for an implicit\n      * unbound variable.\n      */\n@@ -477,7 +477,7 @@ protected static void setImplicitType(Value val, Class expected) {\n     protected abstract Localizer getLocalizer();\n \n     /**\n-     *  Returns the current string being parsed; used for error messages.\n+     * Returns the current string being parsed; used for error messages.\n \t */\n \tprotected abstract String currentQuery ();\n }"},{"sha":"89c9fd1dc84407d4304ba7776c6cd806f6c545ca","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Add.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Add.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Add.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Add.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,15 +18,15 @@\n import org.apache.openjpa.kernel.Filters;\n \n /**\n- * <p>Value produced by two values being added together.</p>\n+ * Value produced by two values being added together.\n  *\n  * @author Abe White\n  */\n class Add\n     extends MathVal {\n \n     /**\n-     * Constructor.  Provide the values to add.\n+     * Constructor. Provide the values to add.\n      */\n     public Add(Val val1, Val val2) {\n         super(val1, val2);"},{"sha":"76c606881d5b29dfcd6de34f2aed22888a634a17","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Aggregate.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Aggregate.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Aggregate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Aggregate.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -23,7 +23,7 @@\n import org.apache.openjpa.util.UserException;\n \n /**\n- * <p>A value produced from evaluating a result aggregate.</p>\n+ * A value produced from evaluating a result aggregate.\n  *\n  * @author Abe White\n  */\n@@ -36,7 +36,7 @@\n     private final Val _arg;\n \n     /**\n-     * Constructor.  Supply aggregate listener and its argument value, if any.\n+     * Constructor. Supply aggregate listener and its argument value, if any.\n      */\n     public Aggregate(AggregateListener listener, Val arg) {\n         _listener = listener;"},{"sha":"49e98197199dd62b704ae9b3808a91a593d297e7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AggregateListener.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AggregateListener.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AggregateListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AggregateListener.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -21,7 +21,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>An aggregate listener aggregates data produced by an ExpressionQuery.</p>\n+ * An aggregate listener aggregates data produced by an ExpressionQuery.\n  *\n  * @author Abe White\n  * @author Patrick Linskey\n@@ -45,13 +45,13 @@\n     /**\n      * Return the value of this aggregate.\n      *\n-     * @param    args        for each candidate, the value of the arguments to\n+     * @param args for each candidate, the value of the arguments to\n      * the function; will be null if this aggregate does\n      * not expect an argument; if this function has\n      * multiple arguments, each element will be an array\n-     * @param    argClasses    the expected class of each argument element\n-     * @param    candidates    the candidate objects being evaluated\n-     * @param    ctx            the persistence context\n+     * @param argClasses the expected class of each argument element\n+     * @param candidates the candidate objects being evaluated\n+     * @param ctx the persistence context\n      * @return the value of the aggregate\n      * @throws UserException if this aggregate does not support\n      * in-memory operation\n@@ -60,10 +60,10 @@ public Object evaluate(Collection args, Class[] argClasses,\n         Collection candidates, StoreContext ctx);\n \n     /**\n-     *\tReturn the expected type of the result of this listener.\n+     * Return the expected type of the result of this listener.\n      *\n-     *\t@param    argClasses    the expected classes of the argument, or null if\n-     *\t\t\t\t\t\tno arguments\n+     * @param argClasses the expected classes of the argument, or null if\n+     * no arguments\n      */\n     public Class getType(Class[] argClasses);\n }"},{"sha":"29f2f911bf5e387e040a1ec312a708252af06ff5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AggregateVal.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AggregateVal.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AggregateVal.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AggregateVal.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -23,7 +23,7 @@\n import org.apache.openjpa.util.UserException;\n \n /**\n- * <p>An aggregate of some value.</p>\n+ * An aggregate of some value.\n  *\n  * @author Abe White\n  */\n@@ -36,7 +36,7 @@\n     private final Val _val;\n \n     /**\n-     * Constructor.  Supply value to aggregate.\n+     * Constructor. Supply value to aggregate.\n      */\n     public AggregateVal(Val val) {\n         _val = val;\n@@ -82,7 +82,7 @@ protected Collection eval(Collection candidates, Object orig,\n     protected abstract Class getType(Class c);\n \n     /**\n-     *\tAggregate the given values.\n+     * Aggregate the given values.\n      */\n     protected abstract Object operate(Collection os, Class c);\n }"},{"sha":"2c81db03eccd3bb15fb24fbb4a11124f053e244d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/All.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/All.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/All.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/All.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -23,8 +23,8 @@\n import org.apache.openjpa.util.UnsupportedException;\n \n /**\n- * <p>In-memory All implementation. Currently unsupported since\n- * in-memory subqueries are not supported.</p>\n+ * In-memory All implementation. Currently unsupported since\n+ * in-memory subqueries are not supported.\n  *\n  * @author Marc Prud'hommeaux\n  */"},{"sha":"4cecca811a8aec0c223b7af03c5dfae9db92e897","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AndExpression.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AndExpression.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AndExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AndExpression.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -20,7 +20,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>An expression that AND's two others together.</p>\n+ * An expression that AND's two others together.\n  *\n  * @author Abe White\n  */\n@@ -31,7 +31,7 @@\n     private final Exp _exp2;\n \n     /**\n-     * Constructor.  Supply expressions to combine.\n+     * Constructor. Supply expressions to combine.\n      */\n     public AndExpression(Exp exp1, Exp exp2) {\n         _exp1 = exp1;"},{"sha":"537f0363d3d115d92196d57112347d18be939483","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Any.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Any.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Any.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Any.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -23,8 +23,8 @@\n import org.apache.openjpa.util.UnsupportedException;\n \n /**\n- * <p>In-memory Any implementation. Currently unsupported since\n- * in-memory subqueries are not supported.</p>\n+ * In-memory Any implementation. Currently unsupported since\n+ * in-memory subqueries are not supported.\n  *\n  * @author Marc Prud'hommeaux\n  */"},{"sha":"b8c94e66c666fa4f45dc78a659c0e84ad8ee2121","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Args.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Args.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Args.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Args.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -21,7 +21,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>A list of arguments to a multi-argument function.</p>\n+ * A list of arguments to a multi-argument function.\n  *\n  * @author Abe White\n  */\n@@ -32,7 +32,7 @@\n     private final List _args = new ArrayList(3);\n \n     /**\n-     * Constructor.  Supply values being combined.\n+     * Constructor. Supply values being combined.\n      */\n     public Args(Value val1, Value val2) {\n         if (val1 instanceof Args)"},{"sha":"99e9b0054d8df3751d629ff61457994e49a555c3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Arguments.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Arguments.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Arguments.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Arguments.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.kernel.exps;\n \n /**\n- * <p>Multiple arguments to a function call.</p>\n+ * Multiple arguments to a function call.\n  *\n  * @author Abe White\n  */"},{"sha":"d31b141111fbe36826e9c112fd89c3e432c64056","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Avg.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Avg.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Avg.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Avg.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -22,15 +22,15 @@\n import serp.util.Numbers;\n \n /**\n- * <p>Average values.</p>\n+ * Average values.\n  *\n  * @author Abe White\n  */\n class Avg\n     extends AggregateVal {\n \n     /**\n-     * Constructor.  Provide the value to average.\n+     * Constructor. Provide the value to average.\n      */\n     public Avg(Val val) {\n         super(val);"},{"sha":"0af232eb6dc38debad0735f897c974fc9083c29d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/BindKeyVariableExpression.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/BindKeyVariableExpression.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/BindKeyVariableExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/BindKeyVariableExpression.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -19,7 +19,7 @@\n import java.util.Map;\n \n /**\n- * <p>{@link BindVariableExpression} for map key sets.</p>\n+ * {@link BindVariableExpression} for map key sets.\n  *\n  * @author Abe White\n  */\n@@ -29,8 +29,8 @@\n     /**\n      * Constructor.\n      *\n-     * @param    var        the bound variable\n-     * @param    val        the value the variable is bound to\n+     * @param var the bound variable\n+     * @param val the value the variable is bound to\n      */\n     public BindKeyVariableExpression(BoundVariable var, Val val) {\n         super(var, val);"},{"sha":"4b6700555e16e53c14a95a51ce8d508a0a8e255c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/BindValueVariableExpression.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/BindValueVariableExpression.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/BindValueVariableExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/BindValueVariableExpression.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -19,7 +19,7 @@\n import java.util.Map;\n \n /**\n- * <p>{@link BindVariableExpression} for map value collections.</p>\n+ * {@link BindVariableExpression} for map value collections.\n  *\n  * @author Abe White\n  */\n@@ -29,8 +29,8 @@\n     /**\n      * Constructor.\n      *\n-     * @param    var        the bound variable\n-     * @param    val        the value the variable is bound to\n+     * @param var the bound variable\n+     * @param val the value the variable is bound to\n      */\n     public BindValueVariableExpression(BoundVariable var, Val val) {\n         super(var, val);"},{"sha":"59119705a5599bd1af89889382738b0b963ee199","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/BindVariableAndExpression.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/BindVariableAndExpression.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/BindVariableAndExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/BindVariableAndExpression.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -21,18 +21,18 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>Any contains(var) expression must be followed by at least one\n- * AND clause using the variable 'var'.  This expression type represents\n- * one of those and AND clauses.  It is responsible for evaluating the\n- * right subexpression for every possible value of the variable.</p>\n+ * Any contains(var) expression must be followed by at least one\n+ * AND clause using the variable 'var'. This expression type represents\n+ * one of those and AND clauses. It is responsible for evaluating the\n+ * right subexpression for every possible value of the variable.\n  *\n  * @author Abe White\n  */\n class BindVariableAndExpression\n     extends AndExpression {\n \n     /**\n-     * Constructor.  Provide expression binding the variable and the\n+     * Constructor. Provide expression binding the variable and the\n      * expression it is AND'd with.\n      */\n     public BindVariableAndExpression(BindVariableExpression var, Exp exp) {"},{"sha":"56b48ea99a2cc5fa9040f5db29d396b4e786168e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/BindVariableExpression.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/BindVariableExpression.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/BindVariableExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/BindVariableExpression.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -20,7 +20,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>Binds a variable to a collection.</p>\n+ * Binds a variable to a collection.\n  *\n  * @author Abe White\n  */\n@@ -33,8 +33,8 @@\n     /**\n      * Constructor.\n      *\n-     * @param    var        the bound variable\n-     * @param    val        the value the variable is bound to\n+     * @param var the bound variable\n+     * @param val the value the variable is bound to\n      */\n     public BindVariableExpression(BoundVariable var, Val val) {\n         _var = var;\n@@ -56,7 +56,7 @@ public Collection getVariableValues(Object candidate, Object orig,\n \n     /**\n      * Return a collection for the given object, produced by\n-     * <code>eval</code>'ing the value of this expression.  Simply casts\n+     * <code>eval</code>'ing the value of this expression. Simply casts\n      * the object to a collection by default.\n      */\n     protected Collection getCollection(Object values) {"},{"sha":"f0cf40d4768b04479aca93b86fd3e25c64ce7cb1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/BoundVariable.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/BoundVariable.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/BoundVariable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/BoundVariable.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,10 +18,10 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>Represents a bound variable.   Variables are aliased to the\n+ * Represents a bound variable. Variables are aliased to the\n  * collection that is stated to contain them in the query.\n  * When the query is evaluated, expressions containing variables will be\n- * executed once for every element in the collection.</p>\n+ * executed once for every element in the collection.\n  *\n  * @author Abe White\n  */\n@@ -32,7 +32,7 @@\n     private Object _val = null;\n \n     /**\n-     * Constructor.  Provide variable name and type.\n+     * Constructor. Provide variable name and type.\n      */\n     public BoundVariable(Class type) {\n         _type = type;"},{"sha":"5161ea3836404c14bb8d1cc393dc4fd8d02dbc3f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CandidatePath.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CandidatePath.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CandidatePath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CandidatePath.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -28,7 +28,7 @@\n import org.apache.openjpa.meta.FieldMetaData;\n \n /**\n- * <p>A path represents a traversal into fields of a candidate object.</p>\n+ * A path represents a traversal into fields of a candidate object.\n  *\n  * @author Abe White\n  */\n@@ -155,7 +155,7 @@ protected Object eval(Object candidate, Object orig,\n     }\n \n     /**\n-     *\tRepresents a traversal through a field.\n+     * Represents a traversal through a field.\n      */\n     private static class Traversal {\n "},{"sha":"c0b1018f00da899b01fda7fd01e6f0e10d849264","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Cast.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Cast.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Cast.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Cast.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -23,7 +23,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>Represents a cast.</p>\n+ * Represents a cast.\n  *\n  * @author Abe White\n  */\n@@ -34,7 +34,7 @@\n     private final Class _cast;\n \n     /**\n-     * Constructor.  Provide value to cast and type to cast to.\n+     * Constructor. Provide value to cast and type to cast to.\n      */\n     public Cast(Val val, Class cast) {\n         _val = val;"},{"sha":"cfcc91da75b497984f640e08b7d2d13a4f9e6490","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CompareExpression.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CompareExpression.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CompareExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CompareExpression.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -21,7 +21,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>Expression that compares two others.</p>\n+ * Expression that compares two others.\n  *\n  * @author Abe White\n  */\n@@ -32,7 +32,7 @@\n     private final Val _val2;\n \n     /**\n-     * Constructor.  Supply values to compare.\n+     * Constructor. Supply values to compare.\n      */\n     public CompareExpression(Val val1, Val val2) {\n         _val1 = val1;"},{"sha":"bb543a66e7b26fa45dd21cf42d142cb12c478944","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Concat.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Concat.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Concat.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Concat.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,7 +18,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>Concatenate two strings together.</p>\n+ * Concatenate two strings together.\n  *\n  * @author Marc Prud'hommeaux\n  */\n@@ -29,7 +29,7 @@\n     private final Val _args;\n \n     /**\n-     * Constructor.  Provide target string and the arguments to the\n+     * Constructor. Provide target string and the arguments to the\n      * indexOf method.\n      */\n     public Concat(Val val, Val args) {"},{"sha":"d806453fbf79572bf8286040bc2aa8d025532404","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Constant.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Constant.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Constant.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Constant.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.kernel.exps;\n \n /**\n- * <p>Interface for any constant value.</p>\n+ * Interface for any constant value.\n  *\n  * @author Marc Prud'hommeaux\n  */"},{"sha":"04d51cc5b4e2be72da8de48abf73a1ff4e97bf1d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ContainsExpression.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ContainsExpression.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ContainsExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ContainsExpression.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -20,7 +20,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>Tests that a Collection contains a value.</p>\n+ * Tests that a Collection contains a value.\n  *\n  * @author Abe White\n  */\n@@ -33,8 +33,8 @@\n     /**\n      * Constructor.\n      *\n-     * @param    val1    the container value\n-     * @param    val2    the containee to test\n+     * @param val1 the container value\n+     * @param val2 the containee to test\n      */\n     public ContainsExpression(Val val1, Val val2) {\n         _val1 = val1;"},{"sha":"5c7dc40e2ba9d597f5b99b51ef8acdcf6dbc6be7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ContainsKeyExpression.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ContainsKeyExpression.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ContainsKeyExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ContainsKeyExpression.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -19,7 +19,7 @@\n import java.util.Map;\n \n /**\n- * <p>Tests that a Map key set contains a value.</p>\n+ * Tests that a Map key set contains a value.\n  *\n  * @author Abe White\n  */\n@@ -29,8 +29,8 @@\n     /**\n      * Constructor.\n      *\n-     * @param    val1    the container value\n-     * @param    val2    the containee to test\n+     * @param val1 the container value\n+     * @param val2 the containee to test\n      */\n     public ContainsKeyExpression(Val val1, Val val2) {\n         super(val1, val2);"},{"sha":"0c04733d7ae9cba8a6207bf4e9f0b663568e00c7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ContainsValueExpression.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ContainsValueExpression.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ContainsValueExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ContainsValueExpression.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -19,7 +19,7 @@\n import java.util.Map;\n \n /**\n- * <p>Tests that a Map value collection contains a value.</p>\n+ * Tests that a Map value collection contains a value.\n  *\n  * @author Abe White\n  */\n@@ -29,8 +29,8 @@\n     /**\n      * Constructor.\n      *\n-     * @param    val1    the container value\n-     * @param    val2    the containee to test\n+     * @param val1 the container value\n+     * @param val2 the containee to test\n      */\n     public ContainsValueExpression(Val val1, Val val2) {\n         super(val1, val2);"},{"sha":"82b2f220fe659b4006ae1d8dec96ce7ce95c39a9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Count.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Count.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Count.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Count.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -21,15 +21,15 @@\n import serp.util.Numbers;\n \n /**\n- * <p>Count non-null values.</p>\n+ * Count non-null values.\n  *\n  * @author Abe White\n  */\n class Count\n     extends AggregateVal {\n \n     /**\n-     * Constructor.  Provide the value to count.\n+     * Constructor. Provide the value to count.\n      */\n     public Count(Val val) {\n         super(val);"},{"sha":"d64c9426cff6179718f3c2743197f53528c1cd02","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CurrentDate.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CurrentDate.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CurrentDate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CurrentDate.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -20,7 +20,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>Represents the current date.</p>\n+ * Represents the current date.\n  *\n  * @author Marc Prud'hommeaux\n  */"},{"sha":"1c2522932a3f8e7f1115011c90c39907c86ed9c1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Distinct.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Distinct.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Distinct.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Distinct.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -22,7 +22,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>A distinct set of the specified values.</p>\n+ * A distinct set of the specified values.\n  *\n  * @author Marc Prud'hommeaux\n  */\n@@ -32,7 +32,7 @@\n     private final Val _val;\n \n     /**\n-     * Constructor.  Supply value to aggregate.\n+     * Constructor. Supply value to aggregate.\n      */\n     public Distinct(Val val) {\n         _val = val;"},{"sha":"137631bf696d3108b303433ed833160f743e6a79","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Divide.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Divide.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Divide.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Divide.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,15 +18,15 @@\n import org.apache.openjpa.kernel.Filters;\n \n /**\n- * <p>Value produced by one value being divided by another.</p>\n+ * Value produced by one value being divided by another.\n  *\n  * @author Abe White\n  */\n class Divide\n     extends MathVal {\n \n     /**\n-     * Constructor.  Provide the values to divide.\n+     * Constructor. Provide the values to divide.\n      */\n     public Divide(Val val1, Val val2) {\n         super(val1, val2);"},{"sha":"c0e93b11c59532fdd21537e7e4607f38aaae9202","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/EndsWithExpression.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/EndsWithExpression.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/EndsWithExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/EndsWithExpression.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,15 +16,15 @@\n package org.apache.openjpa.kernel.exps;\n \n /**\n- * <p>Expression that compares two others.</p>\n+ * Expression that compares two others.\n  *\n  * @author Abe White\n  */\n class EndsWithExpression\n     extends CompareExpression {\n \n     /**\n-     * Constructor.  Supply values to compare.\n+     * Constructor. Supply values to compare.\n      */\n     public EndsWithExpression(Val val1, Val val2) {\n         super(val1, val2);"},{"sha":"8babfb0e63fcb22f1e5a9b435026e6b54f533077","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/EqualExpression.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/EqualExpression.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/EqualExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/EqualExpression.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,15 +16,15 @@\n package org.apache.openjpa.kernel.exps;\n \n /**\n- * <p>Expression that compares two others.</p>\n+ * Expression that compares two others.\n  *\n  * @author Abe White\n  */\n class EqualExpression\n     extends CompareExpression {\n \n     /**\n-     * Constructor.  Supply values to compare.\n+     * Constructor. Supply values to compare.\n      */\n     public EqualExpression(Val val1, Val val2) {\n         super(val1, val2);\n@@ -36,4 +36,3 @@ protected boolean compare(Object o1, Object o2) {\n     }\n }\n \n-"},{"sha":"917af0a69b6fa87e402b24644bc87f2cc30a69d4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Exp.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Exp.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Exp.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Exp.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -20,7 +20,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>An in-memory representation of an {@link Expression}.</p>\n+ * An in-memory representation of an {@link Expression}.\n  *\n  * @author Abe White\n  */\n@@ -69,7 +69,7 @@ protected boolean eval(Object candidate, Object orig,\n     }\n \n     /**\n-     *\tEvaluate the expression for the given group.\n+     * Evaluate the expression for the given group.\n      */\n     protected boolean eval(Collection candidates, StoreContext ctx,\n         Object[] params) {"},{"sha":"791298760ad415b47c43ad74f2150decbf7805fc","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Expression.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Expression.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Expression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Expression.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,8 +16,8 @@\n package org.apache.openjpa.kernel.exps;\n \n /**\n- * <p>Marker interface for a set of conditions that must be met for the query\n- * to be true.</p>\n+ * Marker interface for a set of conditions that must be met for the query\n+ * to be true.\n  *\n  * @author Abe White\n  */"},{"sha":"335971f0047a0eb4c8d54394558cdb3bc4ac2c9a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionFactory.java","status":"modified","additions":17,"deletions":20,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionFactory.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionFactory.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,8 +18,8 @@\n import org.apache.openjpa.meta.ClassMetaData;\n \n /**\n- * <p>The ExpressionFactory must be implemented by a particular runtime\n- * to form {@link Expression}s in its native query language.</p>\n+ * The ExpressionFactory must be implemented by a particular runtime\n+ * to form {@link Expression}s in its native query language.\n  *\n  * @author Abe White\n  * @nojavadoc\n@@ -177,30 +177,28 @@ public Expression notMatches(Value str, Value regexp, String single,\n     public Value trim(Value str, Value trimChar, Boolean where);\n \n     /**\n-     * Return a subquery.  Paths for the candidates of the subquery are\n+     * Return a subquery. Paths for the candidates of the subquery are\n      * created with {@link #newPath(Value)}, passing in the subquery as the\n      * value.\n      *\n-     * @param    candidate    the candidate class of the subquery\n-     * @param    subs        whether the query includes subclasses\n-     * @param    alias        the alias given to the query candidate class\n+     * @param candidate the candidate class of the subquery\n+     * @param subs whether the query includes subclasses\n+     * @param alias the alias given to the query candidate class\n      */\n     public Subquery newSubquery(ClassMetaData candidate, boolean subs,\n         String alias);\n \n     /**\n      * Return a value representing a path which will consist\n      * of a chain of 1 or more field names starting in the namespace of the\n-     * candidate class.<br />\n-     * Example: <code>parent.address.city</code>\n+     * candidate class.<br /> Example: <code>parent.address.city</code>\n      */\n     public Path newPath();\n \n     /**\n      * Return a value representing a path which will consist\n      * of a chain of 1 or more field names starting in the namespace of the\n-     * given value.<br />\n-     * Example: <code>var.address.city</code>\n+     * given value.<br /> Example: <code>var.address.city</code>\n      */\n     public Path newPath(Value val);\n \n@@ -236,7 +234,7 @@ public Subquery newSubquery(ClassMetaData candidate, boolean subs,\n     public Value getCurrentTimestamp();\n \n     /**\n-     * Return a value representing a parameter for the given value.  The\n+     * Return a value representing a parameter for the given value. The\n      * type may be <code>Object</code> if the parameter is not declared.\n      */\n     public Parameter newParameter(String name, Class type);\n@@ -259,8 +257,8 @@ public Value newExtension(FilterListener listener, Value target,\n     public Arguments newArgumentList(Value arg1, Value arg2);\n \n     /**\n-     * Return an unbound variable.  This method will only be called once for\n-     * a given named unbound variable.  The type may be <code>Object</code>\n+     * Return an unbound variable. This method will only be called once for\n+     * a given named unbound variable. The type may be <code>Object</code>\n      * if the variable is not declared.\n      */\n     public Value newUnboundVariable(String name, Class type);\n@@ -269,7 +267,7 @@ public Value newExtension(FilterListener listener, Value target,\n      * This method will be called only once per variable bound in a\n      * <code>contains</code> clause, and the returned value will be reused\n      * for any further instances of the variable in subexpression of the\n-     * filter string.  The type may be <code>Object</code> if the variable is\n+     * filter string. The type may be <code>Object</code> if the variable is\n      * not declared.\n      */\n     public Value newBoundVariable(String name, Class type);\n@@ -389,16 +387,15 @@ public Value newExtension(FilterListener listener, Value target,\n     public Value size(Value target);\n \n     /**\n-     *\tReturn distinct values of the given value.  This is typically used\n-     *\twithin aggregates, for example: max(distinct(path))\n+     * Return distinct values of the given value. This is typically used\n+     * within aggregates, for example: max(distinct(path))\n \t *\n-\t *\t@since 4.0.0\n+\t * @since 4.0.0\n \t */\n \tpublic Value distinct (Value obj);\n \n-\n \t/**\n-\t *\tReturn the object id of the given value.\n+\t * Return the object id of the given value.\n \t */\n \tpublic Value getObjectId (Value val);\n }"},{"sha":"1b16a545284752719bf4db24ed9ca3a91b5059ba","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionParser.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionParser.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionParser.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -23,7 +23,7 @@\n /**\n  * Parser for query languages that will be used by a {@link ExpressionQuery}.\n  * A QueryParser is responsible for translating from some string-based query\n- * language into {@link Expression}s.  Parsers should be stateless.\n+ * language into {@link Expression}s. Parsers should be stateless.\n  *\n  * @author Marc Prud'hommeaux\n  * @nojavadoc\n@@ -54,7 +54,7 @@ public QueryExpressions eval(Object parsed, ExpressionStoreQuery query,\n         ExpressionFactory factory, ClassMetaData candidate);\n \n     /**\n-     *\tParse the given value clauses.\n+     * Parse the given value clauses.\n      */\n     public Value[] eval(String[] vals, ExpressionStoreQuery query,\n         ExpressionFactory factory, ClassMetaData candidate);"},{"sha":"e7285ec62d91fc8f15f156754fa615c91fd30f25","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Extension.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Extension.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Extension.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Extension.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,7 +18,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>A value produced from evaluating a custom extension.</p>\n+ * A value produced from evaluating a custom extension.\n  *\n  * @author Abe White\n  */\n@@ -30,7 +30,7 @@\n     private final Val _arg;\n \n     /**\n-     * Constructor.  Supply filter listener, its target value, and\n+     * Constructor. Supply filter listener, its target value, and\n      * its argument value, if any.\n      */\n     public Extension(FilterListener listener, Val target, Val arg) {"},{"sha":"1898a15c55af6b58503fa8e36a5a2dd0a23f61ea","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/FilterListener.java","status":"modified","additions":17,"deletions":20,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/FilterListener.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/FilterListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/FilterListener.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -20,8 +20,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>A filter listener extends expression filters\n- * with custom functionality.</p>\n+ * A filter listener extends expression filters with custom functionality.\n  *\n  * @author Steve Kim\n  * @author Abe White\n@@ -35,15 +34,15 @@\n     public String getTag();\n \n     /**\n-     * Return true if this extension expects arguments to act on.  Some\n+     * Return true if this extension expects arguments to act on. Some\n      * extensions may not need arguments; for example, an extension to\n      * switch a string to upper case might be of the form:\n      * <code>field.ext:toUpperCase ()</code>.\n      */\n     public boolean expectsArguments();\n \n     /**\n-     * Return true if this extension expects a target to act on.  Some\n+     * Return true if this extension expects a target to act on. Some\n      * extensions act on a field or object value; others stand alone.\n      * <code>field.ext:toUpperCase ()</code> acts on the target\n      * <code>field</code> but has no arguments, while another possible form,\n@@ -53,21 +52,20 @@\n     public boolean expectsTarget();\n \n     /**\n-     * Evaluate the given expression.  This method is used when\n-     * evaluating in-memory expressions.  The method used when evaluating\n+     * Evaluate the given expression. This method is used when\n+     * evaluating in-memory expressions. The method used when evaluating\n      * data store expressions will change depending on the data store in use.\n      *\n-     * @param    target        the target object / field value to act on; will be\n+     * @param target the target object / field value to act on; will be\n      * null if this extension does not expect a target\n-     * @param    targetClass    the expected class of the target; given in case\n+     * @param targetClass the expected class of the target; given in case\n      * the target evaluates to null and typing is needed\n-     * @param    args        the values of the arguments given in the filter;\n-     * will be null if this extension does not expect an\n-     * argument\n-     * @param    argClasses    the expected classes of the arguments; given in case\n+     * @param args the values of the arguments given in the filter;\n+     * will be null if this extension does not expect an argument\n+     * @param argClasses the expected classes of the arguments; given in case\n      * an argument evaluates to null and typing is needed\n-     * @param    candidate    the candidate object being evaluated\n-     * @param    ctx            the persistence context\n+     * @param candidate the candidate object being evaluated\n+     * @param ctx the persistence context\n      * @return the value of the extension for this candidate; if\n      * this extension is an expression, this method should\n      * return {@link Boolean#TRUE} or {@link Boolean#FALSE}\n@@ -78,12 +76,11 @@ public Object evaluate(Object target, Class targetClass, Object[] args,\n         Class[] argClasses, Object candidate, StoreContext ctx);\n \n     /**\n-     *\tReturn the expected type of the result of this listener.\n+     * Return the expected type of the result of this listener.\n      *\n-     *\t@param    targetClass    the expected class of the target, or null if\n-     *\t\t\t\t\t\tno target\n-     *\t@param    argClasses    the expected classes of the arguments, or null if\n-     *\t\t\t\t\t\tno arguments\n+     * @param targetClass the expected class of the target, or null if no target\n+     * @param argClasses the expected classes of the arguments, or null if\n+     * no arguments\n      */\n     public Class getType(Class targetClass, Class[] argClasses);\n }"},{"sha":"11b0ffeb5568fcb710d41e62878db9fcb868b28c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/GetObjectId.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/GetObjectId.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/GetObjectId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/GetObjectId.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,7 +18,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>Get the oid of an object.</p>\n+ * Get the oid of an object.\n  *\n  * @author Abe White\n  */\n@@ -28,7 +28,7 @@\n     private final Val _val;\n \n     /**\n-     * Constructor.  Provide value whose oid to extract.\n+     * Constructor. Provide value whose oid to extract.\n      */\n     public GetObjectId(Val val) {\n         _val = val;"},{"sha":"87f7c4c74daec613066e306a2c5f8f3d10929375","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/GreaterThanEqualExpression.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/GreaterThanEqualExpression.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/GreaterThanEqualExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/GreaterThanEqualExpression.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,15 +16,15 @@\n package org.apache.openjpa.kernel.exps;\n \n /**\n- * <p>Expression that compares two others.</p>\n+ * Expression that compares two others.\n  *\n  * @author Abe White\n  */\n class GreaterThanEqualExpression\n     extends CompareExpression {\n \n     /**\n-     * Constructor.  Supply values to compare.\n+     * Constructor. Supply values to compare.\n      */\n     public GreaterThanEqualExpression(Val val1, Val val2) {\n         super(val1, val2);\n@@ -37,4 +37,3 @@ protected boolean compare(Object o1, Object o2) {\n     }\n }\n \n-"},{"sha":"51ef558536714be44c54c7b59ffc247158124261","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/GreaterThanExpression.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/GreaterThanExpression.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/GreaterThanExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/GreaterThanExpression.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,15 +16,15 @@\n package org.apache.openjpa.kernel.exps;\n \n /**\n- * <p>Expression that compares two others.</p>\n+ * Expression that compares two others.\n  *\n  * @author Abe White\n  */\n class GreaterThanExpression\n     extends CompareExpression {\n \n     /**\n-     * Constructor.  Supply values to compare.\n+     * Constructor. Supply values to compare.\n      */\n     public GreaterThanExpression(Val val1, Val val2) {\n         super(val1, val2);\n@@ -37,4 +37,3 @@ protected boolean compare(Object o1, Object o2) {\n     }\n }\n \n-"},{"sha":"e1dc2fa12e3f553c290c92b97a1e39d6669dd2af","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/InMemoryExpressionFactory.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/InMemoryExpressionFactory.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/InMemoryExpressionFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/InMemoryExpressionFactory.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -35,8 +35,8 @@\n import org.apache.openjpa.util.UserException;\n \n /**\n- * <p>Expression factory implementation that can be used to execute queries\n- * in memory.</p>\n+ * Expression factory implementation that can be used to execute queries\n+ * in memory.\n  *\n  * @author Abe White\n  * @nojavadoc\n@@ -74,7 +74,7 @@ public boolean matches(QueryExpressions exps, ClassMetaData type,\n \n     /**\n      * Recursive method to evaluate the expression for all possible\n-     * combinations of unbound variables.  This method simulates a sequence\n+     * combinations of unbound variables. This method simulates a sequence\n      * of embedded procedural loops over the extents of all variables in the\n      * unbounds list.\n      */\n@@ -176,7 +176,7 @@ public boolean matches(QueryExpressions exps, Collection group,\n \n     /**\n      * Recursive method to evaluate the expression for all possible\n-     * combinations of unbound variables.  This method simulates a sequence\n+     * combinations of unbound variables. This method simulates a sequence\n      * of embedded procedural loops over the extents of all variables in the\n      * unbounds list.\n      */\n@@ -294,8 +294,7 @@ public List order(QueryExpressions exps, List matches,\n     /**\n      * Order the given list of matches on the given value.\n      *\n-     * @param    projected    whether projections have been applied to the\n-     * matches yet\n+     * @param projected whether projections have been applied to the matches yet\n      */\n     private List order(QueryExpressions exps, Value[] orderValues,\n         boolean projected, List matches, StoreContext ctx, Object[] params) {\n@@ -666,9 +665,9 @@ public boolean equals(Object other) {\n     }\n \n     /**\n-     *\tComparator that uses the result of eval'ing a Value to sort on.  Null\n-     *\tvalues are placed last if sorting in ascending order, first if\n-     *\tdescending.\n+     * Comparator that uses the result of eval'ing a Value to sort on. Null\n+     * values are placed last if sorting in ascending order, first if\n+     * descending.\n      */\n     private static class OrderValueComparator\n         implements Comparator {"},{"sha":"958e88e51f927075772486d4973d4999599bdac5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/IndexOf.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/IndexOf.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/IndexOf.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/IndexOf.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -19,7 +19,7 @@\n import serp.util.Numbers;\n \n /**\n- * <p>Find the index of one string within another.</p>\n+ * Find the index of one string within another.\n  *\n  * @author Abe White\n  */\n@@ -30,7 +30,7 @@\n     private final Val _args;\n \n     /**\n-     * Constructor.  Provide target string and the arguments to the\n+     * Constructor. Provide target string and the arguments to the\n      * indexOf method.\n      */\n     public IndexOf(Val val, Val args) {"},{"sha":"d3e557a99f890548a675caf930ea306014941944","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/InstanceofExpression.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/InstanceofExpression.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/InstanceofExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/InstanceofExpression.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -21,7 +21,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>Tests whether a value is an instance of a class.</p>\n+ * Tests whether a value is an instance of a class.\n  *\n  * @author Abe White\n  */\n@@ -49,7 +49,7 @@ protected boolean eval(Object candidate, Object orig,\n     }\n \n     /**\n-     *\tEvaluate the expression for the given group.\n+     * Evaluate the expression for the given group.\n      */\n     protected boolean eval(Collection candidates, StoreContext ctx,\n         Object[] params) {"},{"sha":"bca3f5359543eb80e674b99df8b2e2331760fa66","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/IsEmptyExpression.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/IsEmptyExpression.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/IsEmptyExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/IsEmptyExpression.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -21,7 +21,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>Expression to test for an empty Collection.</p>\n+ * Expression to test for an empty Collection.\n  *\n  * @author Abe White\n  */\n@@ -31,7 +31,7 @@\n     private final Val _val;\n \n     /**\n-     * Constructor.  Provide collection/map value to test.\n+     * Constructor. Provide collection/map value to test.\n      */\n     public IsEmptyExpression(Val val) {\n         _val = val;"},{"sha":"61e6d15e9cc9a9c7885803201fa538731b29f809","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/LessThanEqualExpression.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/LessThanEqualExpression.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/LessThanEqualExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/LessThanEqualExpression.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,15 +16,15 @@\n package org.apache.openjpa.kernel.exps;\n \n /**\n- * <p>Expression that compares two others.</p>\n+ * Expression that compares two others.\n  *\n  * @author Abe White\n  */\n class LessThanEqualExpression\n     extends CompareExpression {\n \n     /**\n-     * Constructor.  Supply values to compare.\n+     * Constructor. Supply values to compare.\n      */\n     public LessThanEqualExpression(Val val1, Val val2) {\n         super(val1, val2);\n@@ -37,4 +37,3 @@ protected boolean compare(Object o1, Object o2) {\n     }\n }\n \n-"},{"sha":"31c1d27763663bd17a033680eb97497f7d231d98","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/LessThanExpression.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/LessThanExpression.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/LessThanExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/LessThanExpression.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,15 +16,15 @@\n package org.apache.openjpa.kernel.exps;\n \n /**\n- * <p>Expression that compares two others.</p>\n+ * Expression that compares two others.\n  *\n  * @author Abe White\n  */\n class LessThanExpression\n     extends CompareExpression {\n \n     /**\n-     * Constructor.  Supply values to compare.\n+     * Constructor. Supply values to compare.\n      */\n     public LessThanExpression(Val val1, Val val2) {\n         super(val1, val2);\n@@ -37,4 +37,3 @@ protected boolean compare(Object o1, Object o2) {\n     }\n }\n \n-"},{"sha":"6b6bc0974d4ee6172fa45f9f2256eb8f68bd8b5f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Lit.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Lit.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Lit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Lit.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -19,7 +19,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>Represents a literal.</p>\n+ * Represents a literal.\n  *\n  * @author Abe White\n  */\n@@ -31,7 +31,7 @@\n     private final int _ptype;\n \n     /**\n-     * Constructor.  Provide constant value.\n+     * Constructor. Provide constant value.\n      */\n     public Lit(Object val, int ptype) {\n         _val = val;"},{"sha":"576ddedf2accf2ef6d01e5553f285f92755931bf","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Literal.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Literal.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Literal.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Literal.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.kernel.exps;\n \n /**\n- * <p>Interface for any literal value.</p>\n+ * Interface for any literal value.\n  *\n  * @author Abe White\n  * @nojavadoc\n@@ -41,7 +41,7 @@\n     public void setValue(Object val);\n \n     /**\n-     *\tThe type the literal was parsed as.\n+     * The type the literal was parsed as.\n      */\n     public int getParseType();\n }"},{"sha":"f8371b454c732cae8d89a2ca070938d8cefbddb9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/MatchesExpression.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/MatchesExpression.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/MatchesExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/MatchesExpression.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -19,7 +19,7 @@\n import serp.util.Strings;\n \n /**\n- * <p>Expression that compares two others.</p>\n+ * Expression that compares two others.\n  *\n  * @author Abe White\n  */\n@@ -32,7 +32,7 @@\n     private final boolean _affirmation;\n \n     /**\n-     * Constructor.  Supply values to compare.\n+     * Constructor. Supply values to compare.\n      */\n     public MatchesExpression(Val val1, Val val2,\n         String single, String multi, String escape, boolean affirmation) {\n@@ -70,4 +70,3 @@ protected boolean compare(Object o1, Object o2) {\n     }\n }\n \n-"},{"sha":"4d005fe2a216daccb0ac8b64900293c05fcbdcf5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/MathVal.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/MathVal.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/MathVal.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/MathVal.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -19,7 +19,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>Value produced by a mathematical operation on two values.</p>\n+ * Value produced by a mathematical operation on two values.\n  *\n  * @author Abe White\n  */\n@@ -30,7 +30,7 @@\n     private final Val _val2;\n \n     /**\n-     * Constructor.  Provide the values to operate on.\n+     * Constructor. Provide the values to operate on.\n      */\n     public MathVal(Val val1, Val val2) {\n         _val1 = val1;"},{"sha":"a38550a4f1d1df2084a002afbc9bda8f286a936f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Max.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Max.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Max.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Max.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -19,15 +19,15 @@\n import java.util.Iterator;\n \n /**\n- * <p>Find the max.</p>\n+ * Find the max.\n  *\n  * @author Abe White\n  */\n class Max\n     extends AggregateVal {\n \n     /**\n-     * Constructor.  Provide the value to maximize.\n+     * Constructor. Provide the value to maximize.\n      */\n     public Max(Val val) {\n         super(val);"},{"sha":"b272f90318e01c51457dddfab09f94d8e00a516a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Min.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Min.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Min.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Min.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -19,15 +19,15 @@\n import java.util.Iterator;\n \n /**\n- * <p>Find the min.</p>\n+ * Find the min.\n  *\n  * @author Abe White\n  */\n class Min\n     extends AggregateVal {\n \n     /**\n-     * Constructor.  Provide the value to minimize.\n+     * Constructor. Provide the value to minimize.\n      */\n     public Min(Val val) {\n         super(val);"},{"sha":"1fde74845edd8bf1a6048ddd402dccca39581b00","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Mod.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Mod.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Mod.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Mod.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,15 +18,15 @@\n import org.apache.openjpa.kernel.Filters;\n \n /**\n- * <p>Value produced by one value being mod'd by another.</p>\n+ * Value produced by one value being mod'd by another.\n  *\n  * @author Abe White\n  */\n class Mod\n     extends MathVal {\n \n     /**\n-     * Constructor.  Provide the values to mod.\n+     * Constructor. Provide the values to mod.\n      */\n     public Mod(Val val1, Val val2) {\n         super(val1, val2);"},{"sha":"b8d90310b99528c7e48bc54bdcd3917bb08aeabd","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Multiply.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Multiply.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Multiply.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Multiply.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,15 +18,15 @@\n import org.apache.openjpa.kernel.Filters;\n \n /**\n- * <p>Value produced by two values being multiplied together.</p>\n+ * Value produced by two values being multiplied together.\n  *\n  * @author Abe White\n  */\n class Multiply\n     extends MathVal {\n \n     /**\n-     * Constructor.  Provide the values to multiply.\n+     * Constructor. Provide the values to multiply.\n      */\n     public Multiply(Val val1, Val val2) {\n         super(val1, val2);"},{"sha":"157f73834d3b2de6067a7392ea7bf73628a9f4a6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/NotEqualExpression.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/NotEqualExpression.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/NotEqualExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/NotEqualExpression.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,15 +16,15 @@\n package org.apache.openjpa.kernel.exps;\n \n /**\n- * <p>Expression that compares two others.</p>\n+ * Expression that compares two others.\n  *\n  * @author Abe White\n  */\n class NotEqualExpression\n     extends CompareExpression {\n \n     /**\n-     * Constructor.  Supply values to compare.\n+     * Constructor. Supply values to compare.\n      */\n     public NotEqualExpression(Val val1, Val val2) {\n         super(val1, val2);\n@@ -36,4 +36,3 @@ protected boolean compare(Object o1, Object o2) {\n     }\n }\n \n-"},{"sha":"d1278bb0b87aee0c1d0ebe036f869a31e9be79cb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/NotExpression.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/NotExpression.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/NotExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/NotExpression.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -20,7 +20,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>An expression that NOT's another.</p>\n+ * An expression that NOT's another.\n  *\n  * @author Abe White\n  */\n@@ -30,7 +30,7 @@\n     private final Exp _exp;\n \n     /**\n-     * Constructor.  Supply expression to negate.\n+     * Constructor. Supply expression to negate.\n      */\n     public NotExpression(Exp exp) {\n         _exp = exp;"},{"sha":"2e4ef751968444115d3c144ee267c5e410b9fafd","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Null.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Null.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Null.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Null.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,7 +18,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>Represents the null constant.</p>\n+ * Represents the null constant.\n  *\n  * @author Abe White\n  */"},{"sha":"fe91b0cd6aa653e97da574ec8f20974dacf94ef8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/OrExpression.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/OrExpression.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/OrExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/OrExpression.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -20,7 +20,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>An expression that OR's two others together.</p>\n+ * An expression that OR's two others together.\n  *\n  * @author Abe White\n  */\n@@ -31,7 +31,7 @@\n     private final Exp _exp2;\n \n     /**\n-     * Constructor.  Supply expressions to combine.\n+     * Constructor. Supply expressions to combine.\n      */\n     public OrExpression(Exp exp1, Exp exp2) {\n         _exp1 = exp1;"},{"sha":"99cf816529aa335c5f3fb057d0f94c849bb777c2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Param.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Param.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Param.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Param.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,7 +18,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>Represents a parameter.</p>\n+ * Represents a parameter.\n  *\n  * @author Abe White\n  */\n@@ -31,7 +31,7 @@\n     private int _index = -1;\n \n     /**\n-     * Constructor.  Provide parameter name and type.\n+     * Constructor. Provide parameter name and type.\n      */\n     public Param(String name, Class type) {\n         _name = name;"},{"sha":"b99ce3c4c4e5bf3f3a3291f0fdb8ae18874624f0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Parameter.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Parameter.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Parameter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Parameter.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.kernel.exps;\n \n /**\n- * <p>A query parameter.</p>\n+ * A query parameter.\n  *\n  * @author Abe White\n  * @nojavadoc"},{"sha":"03d88f6a08ea5e604dd9e5a605b83bd9f861f2ef","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Path.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Path.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Path.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Path.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,7 +18,7 @@\n import org.apache.openjpa.meta.FieldMetaData;\n \n /**\n- * <p>A path represents a traversal into fields of a candidate object.</p>\n+ * A path represents a traversal into fields of a candidate object.\n  *\n  * @author Abe White\n  */\n@@ -29,7 +29,7 @@\n      * Traverse into the given field of the current object, and update\n      * the current object to that field value.\n      *\n-     * @param    nullTraversal    if true, allow traversal through a null field\n+     * @param nullTraversal if true, allow traversal through a null field\n      */\n     public void get(FieldMetaData field, boolean nullTraversal);\n "},{"sha":"268b0401b5747ceb0a81b0f81c0f7abaed02a673","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/QueryExpressions.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -24,7 +24,7 @@\n import org.apache.openjpa.meta.FieldMetaData;\n \n /**\n- * <p>Struct to hold the state of a parsed expression query.</p>\n+ * Struct to hold the state of a parsed expression query.\n  *\n  * @author Abe White\n  * @since 3.2"},{"sha":"9e665e98b7e79f7a49346e114f757a629a600273","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Resolver.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Resolver.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Resolver.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Resolver.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,19 +18,19 @@\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n \n /**\n- * <p>A Resolver is used to resolve listeners and class or entity names\n- * that appear in a query.</p>\n+ * A Resolver is used to resolve listeners and class or entity names\n+ * that appear in a query.\n  *\n  * @author Abe White\n  * @nojavadoc\n  */\n public interface Resolver {\n \n     /**\n-     * Resolve the type represented by the given class name.  This will\n+     * Resolve the type represented by the given class name. This will\n      * test the type against the namespace of the Query and the declared\n      * imports, and will properly handle primitives and java.lang types\n-     * as well.  Returns null if the name does not match a known type.\n+     * as well. Returns null if the name does not match a known type.\n      */\n     public Class classForName(String name, String[] imports);\n \n@@ -45,7 +45,7 @@\n     public AggregateListener getAggregateListener(String tag);\n \n     /**\n-     *\tReturn the OpenJPA configuration.\n+     * Return the OpenJPA configuration.\n      */\n     public OpenJPAConfiguration getConfiguration ();\n }"},{"sha":"c1e9abc7e706894167d56ccbd871af60deab8233","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Size.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Size.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Size.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Size.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -21,7 +21,7 @@\n import serp.util.Numbers;\n \n /**\n- * <p>Returns the count of a collection.</p>\n+ * Returns the count of a collection.\n  *\n  * @author Marc Prud'hommeaux\n  */"},{"sha":"c872bfa63ad5c25b3c26dade316ac036cb155dd7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Sqrt.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Sqrt.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Sqrt.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Sqrt.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,15 +16,15 @@\n package org.apache.openjpa.kernel.exps;\n \n /**\n- * <p>Take the square root of a number.</p>\n+ * Take the square root of a number.\n  *\n  * @author Abe White\n  */\n class Sqrt\n     extends UnaryMathVal {\n \n     /**\n-     * Constructor.  Provide the number whose square root to calculate.\n+     * Constructor. Provide the number whose square root to calculate.\n      */\n     public Sqrt(Val val) {\n         super(val);"},{"sha":"bc2274669790a3d150177830a3f0216e875c50b3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/StartsWithExpression.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/StartsWithExpression.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/StartsWithExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/StartsWithExpression.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,15 +16,15 @@\n package org.apache.openjpa.kernel.exps;\n \n /**\n- * <p>Expression that compares two others.</p>\n+ * Expression that compares two others.\n  *\n  * @author Abe White\n  */\n class StartsWithExpression\n     extends CompareExpression {\n \n     /**\n-     * Constructor.  Supply values to compare.\n+     * Constructor. Supply values to compare.\n      */\n     public StartsWithExpression(Val val1, Val val2) {\n         super(val1, val2);"},{"sha":"bba586831d206f5c2169acc022faf593274790a0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/StringContains.java","status":"modified","additions":6,"deletions":11,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/StringContains.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/StringContains.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/StringContains.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,29 +5,24 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-/*********************************************************************\n-\n- **********************************************************************/\n package org.apache.openjpa.kernel.exps;\n \n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>Tests if the target contains the given argument.  The argument must be\n- * a constant.</p>\n- * <p/>\n- * <p>Examples:<br />\n- * <code>\n- * \"address.street.ext:stringContains (\\\"main\\\")\"\n- * </code></p>\n+ * Tests if the target contains the given argument. The argument must be\n+ * a constant.\n+ *  Examples:<br />\n+ * <code> \"address.street.ext:stringContains (\\\"main\\\")\"\n+ * </code>\n  *\n  * @deprecated Use <code>matches()</code> instead.\n  * @nojavadoc"},{"sha":"b662c24eaf5dd3802231e862511d8a13f8eb05ba","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/StringLength.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/StringLength.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/StringLength.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/StringLength.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -19,7 +19,7 @@\n import serp.util.Numbers;\n \n /**\n- * <p>Returns the number of characters in the String.</p>\n+ * Returns the number of characters in the String.\n  *\n  * @author Marc Prud'hommeaux\n  */\n@@ -30,7 +30,7 @@\n     private Class _cast = null;\n \n     /**\n-     * Constructor.  Provide value to upper-case.\n+     * Constructor. Provide value to upper-case.\n      */\n     public StringLength(Val val) {\n         _val = val;"},{"sha":"ea435ac1a29b9ffebee8636d823eecfdb8429a32","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/SubQ.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/SubQ.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/SubQ.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/SubQ.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -20,8 +20,8 @@\n import org.apache.openjpa.util.UnsupportedException;\n \n /**\n- * <p>An in-memory representation of a {@link Subquery}.  Currently\n- * subqueries aren't supported for in-memory use.</p>\n+ * An in-memory representation of a {@link Subquery}. Currently\n+ * subqueries aren't supported for in-memory use.\n  *\n  * @author Abe White\n  */"},{"sha":"eeffce0f9d91aa043e73ec53128c417a14a341c8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Subquery.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Subquery.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Subquery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Subquery.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.kernel.exps;\n \n /**\n- * <p>Query value representing a subquery.</p>\n+ * Query value representing a subquery.\n  *\n  * @author Abe White\n  * @since 3.2"},{"sha":"3829fd0bfc304d7cfe18df54608726349c07c266","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Substring.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Substring.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Substring.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Substring.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,7 +18,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>Take the substring of a string.</p>\n+ * Take the substring of a string.\n  *\n  * @author Abe White\n  */\n@@ -29,7 +29,7 @@\n     private final Val _args;\n \n     /**\n-     * Constructor.  Provide value to take substring of and arguments to\n+     * Constructor. Provide value to take substring of and arguments to\n      * substring method.\n      */\n     public Substring(Val val, Val args) {"},{"sha":"cd33914611334006f831c5134b8490acfbbe9452","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Subtract.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Subtract.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Subtract.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Subtract.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,15 +18,15 @@\n import org.apache.openjpa.kernel.Filters;\n \n /**\n- * <p>Value produced by one value being subtracted from another.</p>\n+ * Value produced by one value being subtracted from another.\n  *\n  * @author Abe White\n  */\n class Subtract\n     extends MathVal {\n \n     /**\n-     * Constructor.  Provide the values to subtract.\n+     * Constructor. Provide the values to subtract.\n      */\n     public Subtract(Val val1, Val val2) {\n         super(val1, val2);"},{"sha":"2ee8d6c362b312120438d74f98eed1038530d56d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Sum.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Sum.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Sum.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Sum.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -22,15 +22,15 @@\n import serp.util.Numbers;\n \n /**\n- * <p>Sum values.</p>\n+ * Sum values.\n  *\n  * @author Abe White\n  */\n class Sum\n     extends AggregateVal {\n \n     /**\n-     * Constructor.  Provide the value to sum.\n+     * Constructor. Provide the value to sum.\n      */\n     public Sum(Val val) {\n         super(val);"},{"sha":"b2675ad726e3310d7f29486286f4a227ec631a48","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/This.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/This.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/This.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/This.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,7 +18,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>Represents the 'this' ptr in a filter.</p>\n+ * Represents the 'this' ptr in a filter.\n  *\n  * @author Abe White\n  */"},{"sha":"30af84bddbe05725ab60f4bb611a46ad4e94da5a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ToLowerCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ToLowerCase.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ToLowerCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ToLowerCase.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,7 +18,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>Lower-case a string.</p>\n+ * Lower-case a string.\n  *\n  * @author Abe White\n  */\n@@ -28,7 +28,7 @@\n     private final Val _val;\n \n     /**\n-     * Constructor.  Provide value to upper-case.\n+     * Constructor. Provide value to upper-case.\n      */\n     public ToLowerCase(Val val) {\n         _val = val;"},{"sha":"fc3b5a5ac0d7900b392a7061b8dfc79371f3ca20","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ToUpperCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ToUpperCase.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ToUpperCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ToUpperCase.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,7 +18,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>Upper-case a string.</p>\n+ * Upper-case a string.\n  *\n  * @author Abe White\n  */\n@@ -28,7 +28,7 @@\n     private final Val _val;\n \n     /**\n-     * Constructor.  Provide value to upper-case.\n+     * Constructor. Provide value to upper-case.\n      */\n     public ToUpperCase(Val val) {\n         _val = val;"},{"sha":"c55112310de6ff38d04d5892473a3ba23c333e4d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Trim.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Trim.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Trim.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Trim.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,7 +18,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>Trims leading, trailing, or both charactes from a String.</p>\n+ * Trims leading, trailing, or both charactes from a String.\n  *\n  * @author Marc Prud'hommeaux\n  */\n@@ -30,7 +30,7 @@\n     private final Boolean _where;\n \n     /**\n-     * Constructor.  Provide value to upper-case.\n+     * Constructor. Provide value to upper-case.\n      */\n     public Trim(Val val, Val trimChar, Boolean where) {\n         _val = val;"},{"sha":"f8c12e2bc07bb66b62eb4cae6e59f45aeec9f886","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/UnaryMathVal.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/UnaryMathVal.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/UnaryMathVal.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/UnaryMathVal.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,7 +18,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>Value produced by a mathematical operation on one value.</p>\n+ * Value produced by a mathematical operation on one value.\n  *\n  * @author Abe White\n  */\n@@ -28,7 +28,7 @@\n     private final Val _val;\n \n     /**\n-     * Constructor.  Provide the value to operate on.\n+     * Constructor. Provide the value to operate on.\n      */\n     public UnaryMathVal(Val val) {\n         _val = val;\n@@ -62,7 +62,7 @@ protected Object eval(Object candidate, Object orig,\n     protected abstract Class getType(Class c);\n \n     /**\n-     *\tReturn the result of this mathematical operation on the given value.\n+     * Return the result of this mathematical operation on the given value.\n      */\n     protected abstract Object operate(Object o, Class c);\n }"},{"sha":"c5648927f82813194a42dde16902775df854add6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/UnboundVariable.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/UnboundVariable.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/UnboundVariable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/UnboundVariable.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,9 +18,9 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>Represents an unbound variable.  When the query is evaluated,\n+ * Represents an unbound variable. When the query is evaluated,\n  * expressions containing unbound variables will be\n- * executed once for every element in the type's extent.</p>\n+ * executed once for every element in the type's extent.\n  *\n  * @author Abe White\n  */\n@@ -31,7 +31,7 @@\n     private Object _val = null;\n \n     /**\n-     * Constructor.  Provide variable name and type.\n+     * Constructor. Provide variable name and type.\n      */\n     public UnboundVariable(Class type) {\n         _type = type;\n@@ -50,7 +50,7 @@ public void setImplicitType(Class type) {\n     }\n \n     /**\n-     * Set the variable's current value.  Expressions can be evaluated\n+     * Set the variable's current value. Expressions can be evaluated\n      * for every possible object in the extent of each unbound variable\n      * when looking for a match.\n      */"},{"sha":"b716d5d6065bdf2ae32ff0a6fd3787f3b89b4625","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Val.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Val.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Val.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Val.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -24,7 +24,7 @@\n import org.apache.openjpa.meta.ClassMetaData;\n \n /**\n- * <p>An in-memory representation of a {@link Value}.</p>\n+ * An in-memory representation of a {@link Value}.\n  *\n  * @author Abe White\n  * @nojavadoc\n@@ -83,9 +83,9 @@ protected abstract Object eval(Object candidate, Object orig,\n \n     /**\n      * Return a list of values resulting from evaluating each given\n-     * candidate.   By default, this implementation invokes\n+     * candidate. By default, this implementation invokes\n      * {@link #eval(Object,Object,StoreContext,Map)} for\n-     * each instance and packs the return value into a new list.  Aggregates\n+     * each instance and packs the return value into a new list. Aggregates\n      * should override.\n      */\n     protected Collection eval(Collection candidates, Object orig,"},{"sha":"5210d56a663e53ef3c2d665d2cad3e7246e072f5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ValExpression.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ValExpression.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ValExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ValExpression.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -20,7 +20,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>Boolean value used as an expression.</p>\n+ * Boolean value used as an expression.\n  *\n  * @author Abe White\n  */\n@@ -30,7 +30,7 @@\n     private final Val _val;\n \n     /**\n-     * Constructor.  Supply value.\n+     * Constructor. Supply value.\n      */\n     public ValExpression(Val val) {\n         _val = val;"},{"sha":"a66c5a1b40c5426efba6ff4776b9e1a09a0662b8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Value.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Value.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Value.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Value.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,8 +18,8 @@\n import org.apache.openjpa.meta.ClassMetaData;\n \n /**\n- * <p>Interface for any non-operator in a query filter, including\n- * constants, variables, and object fields.</p>\n+ * Interface for any non-operator in a query filter, including\n+ * constants, variables, and object fields.\n  *\n  * @author Abe White\n  */\n@@ -33,7 +33,7 @@\n \n     /**\n      * Set the implicit type of the value, based on how it is used in the\n-     * filter.  This method is only called on values who return\n+     * filter. This method is only called on values who return\n      * <code>Object</code> from {@link #getType}.\n      */\n     public void setImplicitType(Class type);\n@@ -49,7 +49,7 @@\n     public ClassMetaData getMetaData();\n \n     /**\n-     *\tAssociate a persistent type with this value.\n+     * Associate a persistent type with this value.\n      */\n     public void setMetaData(ClassMetaData meta);\n }"},{"sha":"4b75c5b43f014133d7612b0af828f4e7175a6d58","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ValuePath.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ValuePath.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ValuePath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ValuePath.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,7 +18,7 @@\n import org.apache.openjpa.kernel.StoreContext;\n \n /**\n- * <p>Represents a path that begins with a variable or parameter.</p>\n+ * Represents a path that begins with a variable or parameter.\n  *\n  * @author Abe White\n  */\n@@ -28,7 +28,7 @@\n     private final Val _val;\n \n     /**\n-     * Constructor.  Supply context value.\n+     * Constructor. Supply context value.\n      */\n     public ValuePath(Val val) {\n         _val = val;"},{"sha":"56c39073f5fc380cdcfab6f8984d97dafe2bfe02","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/WildcardMatch.java","status":"modified","additions":7,"deletions":12,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/WildcardMatch.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/WildcardMatch.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/WildcardMatch.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,31 +5,26 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-/*********************************************************************\n-\n- **********************************************************************/\n package org.apache.openjpa.kernel.exps;\n \n import org.apache.openjpa.kernel.StoreContext;\n import org.apache.openjpa.lib.util.SimpleRegex;\n \n /**\n- * <p>Tests if the target matches the wildcard expression given in the\n- * argument.  The wildcard '?' is used to represent any single character,\n- * while '*' is used to represent any series of 0 or more characters.</p>\n- * <p/>\n- * <p>Examples:<br />\n- * <code>\n- * \"address.street.ext:wildcardMatch (\\\"?ain*reet\\\")\"\n- * </code></p>\n+ * Tests if the target matches the wildcard expression given in the\n+ * argument. The wildcard '?' is used to represent any single character,\n+ * while '*' is used to represent any series of 0 or more characters.\n+ *  Examples:<br />\n+ * <code> \"address.street.ext:wildcardMatch (\\\"?ain*reet\\\")\"\n+ * </code>\n  *\n  * @deprecated Use <code>matches()</code> instead.\n  * @nojavadoc"},{"sha":"82a9e9662f5b55ec1c030a9f422c289ff2073ab0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -77,10 +77,10 @@\n     /**\n      * Constructor.\n      *\n-     * @param    factory            the expression factory to use\n-     * @param    query            used to resolve variables, parameters,\n+     * @param factory the expression factory to use\n+     * @param query used to resolve variables, parameters,\n      * and class names used in the query\n-     * @param    parsedQuery        the parsed query\n+     * @param parsedQuery the parsed query\n      */\n     public JPQLExpressionBuilder(ExpressionFactory factory,\n         ExpressionStoreQuery query, Object parsedQuery) {\n@@ -1454,8 +1454,7 @@ private static JPQLNode lastChild(JPQLNode node, int fromLast) {\n \n     /**\n      * Base node that will be generated by the JPQLExpressionBuilder; base\n-     * class of the {@link SimpleNode} that is used by\n-     * {@link JPQL}.\n+     * class of the {@link SimpleNode} that is used by {@link JPQL}.\n      *\n      * @author Marc Prud'hommeaux\n      * @see Node"},{"sha":"7849dee5258fab381397e5923966166acf1711a8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLParser.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLParser.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLParser.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,"},{"sha":"cb02fdd452d822d7812046b98454f697b6856997","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/ParseException.java","status":"modified","additions":10,"deletions":12,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/ParseException.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/ParseException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/ParseException.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -21,8 +21,7 @@\n import org.apache.openjpa.util.UserException;\n \n /**\n- * Signifies that a lexical error occurred when parsing the JPQL\n- * statement.\n+ * Signifies that a lexical error occurred when parsing the JPQL statement.\n  *\n  * @author <a href=\"mailto:mprudhom@bea.com\">Marc Prud'hommeaux</a>\n  */\n@@ -33,7 +32,7 @@\n \n     /**\n      * This constructor is used by the method \"generateParseException\"\n-     * in the generated parser.  Calling this constructor generates\n+     * in the generated parser. Calling this constructor generates\n      * a new object of this type with the fields \"currentToken\",\n      * \"expectedTokenSequences\", and \"tokenImage\" set.\n      * This constructor calls its super class with the empty string\n@@ -49,11 +48,11 @@ public ParseException(Token currentTokenVal,\n \n     /**\n      * The following constructors are for use by you for whatever\n-     * purpose you can think of.  Constructing the exception in this\n+     * purpose you can think of. Constructing the exception in this\n      * manner makes the exception behave in the normal way - i.e., as\n-     * documented in the class \"Throwable\".  The fields \"errorToken\",\n+     * documented in the class \"Throwable\". The fields \"errorToken\",\n      * \"expectedTokenSequences\", and \"tokenImage\" do not contain\n-     * relevant information.  The JavaCC generated code does not use\n+     * relevant information. The JavaCC generated code does not use\n      * these constructors.\n      */\n     public ParseException() {\n@@ -66,9 +65,9 @@ public ParseException(String message) {\n \n     /**\n      * This method has the standard behavior when this object has been\n-     * created using the standard constructors.  Otherwise, it uses\n+     * created using the standard constructors. Otherwise, it uses\n      * \"currentToken\" and \"expectedTokenSequences\" to generate a parse\n-     * error message and returns it.  If this object has been created\n+     * error message and returns it. If this object has been created\n      * due to a parse error, and you do not catch it (it gets thrown\n      * from the parser), then this method is called during the printing\n      * of the final stack trace, and hence the correct error message\n@@ -108,9 +107,8 @@ private static String initMessage(Token currentToken,\n     }\n \n     /**\n-     *  Used to convert raw characters to their escaped version\n-     *  when these raw version cannot be used as part of an ASCII\n-     *  string literal.\n+     * Used to convert raw characters to their escaped version\n+     * when these raw version cannot be used as part of an ASCII string literal.\n      */\n     private static String escape(String str) {\n         StringBuffer retval = new StringBuffer();"},{"sha":"c460187da4fc185f6d9ac75b7bd482b2f2be4e15","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/SimpleNode.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/SimpleNode.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/SimpleNode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/SimpleNode.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,"},{"sha":"9b83e4e265578a9cc9d462e57e9bcbbd4a69bf5f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -49,8 +49,8 @@\n import serp.util.Strings;\n \n /**\n- * <p>Base class for factory implementations built around XML metadata files\n- * in the common fomat.</p>\n+ * Base class for factory implementations built around XML metadata files\n+ * in the common fomat.\n  *\n  * @author Abe White\n  * @since 4.0\n@@ -338,7 +338,7 @@ else if (!isMappingOnlyFactory())\n     /**\n      * Assign default source files to the given metadatas.\n      *\n-     * @param    clsNames    map of class names to metadatas\n+     * @param clsNames map of class names to metadatas\n      * @return set of existing files used by these metadatas, or\n      * null if no existing files\n      */\n@@ -387,7 +387,7 @@ private Set assignDefaultMetaDataFiles(ClassMetaData[] metas,\n     /**\n      * Assign default source files to the given queries.\n      *\n-     * @param    clsNames    map of class names to metadatas\n+     * @param clsNames map of class names to metadatas\n      * @return set of existing files used by these metadatas, or\n      * null if no existing files\n      */\n@@ -444,7 +444,7 @@ protected void parse(MetaDataParser parser, Class[] cls) {\n     }\n \n     /**\n-     * Whether to parse classes top down.  Defaults to false.\n+     * Whether to parse classes top down. Defaults to false.\n      */\n     protected boolean isParseTopDown() {\n         return false;\n@@ -533,7 +533,7 @@ protected abstract File defaultSourceFile(SequenceMetaData seq,\n     /**\n      * Create a new metadata parser.\n      *\n-     * @param    loading        if true, this will be the cached parser used for\n+     * @param loading if true, this will be the cached parser used for\n      * loading metadata\n      */\n     protected abstract Parser newParser(boolean loading);\n@@ -546,7 +546,7 @@ protected abstract File defaultSourceFile(SequenceMetaData seq,\n     /**\n      * Return the metadata that defines the given query, if any.\n      *\n-     * @param    clsNames    map of class names to metadatas\n+     * @param clsNames map of class names to metadatas\n      */\n     protected ClassMetaData getDefiningMetaData(QueryMetaData query,\n         Map clsNames) {\n@@ -699,7 +699,7 @@ private void scan(MetaDataIterator mitr, ClassArgParser cparser, Set names,\n \n     /**\n      * Implement this method to map metadata resources to the persistent\n-     * types contained within them.  The method will be called when\n+     * types contained within them. The method will be called when\n      * {@link #getPersistentTypeNames} is invoked.\n      */\n     protected void mapPersistentTypeNames(Object rsrc, String[] names) {\n@@ -723,7 +723,7 @@ public void clear() {\n         extends MetaDataParser {\n \n         /**\n-         * Returns the repository for this parser.  If none has been set,\n+         * Returns the repository for this parser. If none has been set,\n          * creates a new repository and sets it.\n          */\n         public MetaDataRepository getRepository();\n@@ -735,13 +735,13 @@ public void clear() {\n     }\n \n     /**\n-     *\tInternal serializer interface.\n+     * Internal serializer interface.\n      */\n     public static interface Serializer\n         extends MetaDataSerializer {\n \n         /**\n-         * The serialization mode according to the expected document type.  The\n+         * The serialization mode according to the expected document type. The\n          * mode constants act as bit flags, and therefore can be combined.\n          */\n         public void setMode(int mode);\n@@ -767,8 +767,8 @@ public void clear() {\n         public void addQueryMetaData(QueryMetaData meta);\n \n         /**\n-         *\tAdd all components in the given repository to the set to be\n-\t\t *\tserialized.\n+         * Add all components in the given repository to the set to be\n+\t\t * serialized.\n \t\t */\n \t\tpublic void addAll (MetaDataRepository repos);\n \t}"},{"sha":"3a9d5a1e05ada451190794208bd42fd9fb4b824c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -29,7 +29,7 @@\n import org.apache.openjpa.util.UserException;\n \n /**\n- * </p>Abstract metadata defaults.</p>\n+ * Abstract metadata defaults.\n  *\n  * @author Abe White\n  */\n@@ -46,15 +46,15 @@\n \n     /**\n      * Whether to attempt to use the information from registered classes\n-     * to populate metadata defaults.  Defaults to true.\n+     * to populate metadata defaults. Defaults to true.\n      */\n     public boolean getUsePCRegistry() {\n         return _pcRegistry;\n     }\n \n     /**\n      * Whether to attempt to use the information from registered classes\n-     * to populate metadata defaults.  Defaults to true.\n+     * to populate metadata defaults. Defaults to true.\n      */\n     public void setUsePCRegistry(boolean pcRegistry) {\n         _pcRegistry = pcRegistry;\n@@ -129,7 +129,7 @@ public void populate(ClassMetaData meta, int access) {\n     }\n \n     /**\n-     * Populate initial field data.  Does nothing by default.\n+     * Populate initial field data. Does nothing by default.\n      */\n     protected void populate(FieldMetaData fmd) {\n     }\n@@ -209,7 +209,7 @@ private void populateFromReflection(ClassMetaData meta) {\n     }\n \n     /**\n-     * Return the access type of the given metadata.  May be a bitwise\n+     * Return the access type of the given metadata. May be a bitwise\n      * combination of field and property access constants, or ACCESS_UNKNOWN.\n      * Returns ACCESS_FIELD by default.\n      */\n@@ -218,11 +218,11 @@ protected int getAccessType(ClassMetaData meta) {\n     }\n \n     /**\n-     * Return the field name for the given member.  This will only be invoked\n-     * on members of the right type (field vs. method).  Return null if the\n-     * member cannot be managed.  Default behavior: For fields, returns the\n-     * field name.  For getter methods, returns the minus \"get\" or \"is\" with\n-     * the next letter lower-cased.  For other methods, returns null.\n+     * Return the field name for the given member. This will only be invoked\n+     * on members of the right type (field vs. method). Return null if the\n+     * member cannot be managed. Default behavior: For fields, returns the\n+     * field name. For getter methods, returns the minus \"get\" or \"is\" with\n+     * the next letter lower-cased. For other methods, returns null.\n      */\n     protected String getFieldName(Member member) {\n         if (member instanceof Field)\n@@ -261,7 +261,7 @@ protected boolean isReservedFieldName(String name) {\n      * only be invoked on members of the right type (field vs. method).\n      * Returns false if member is static or final by default.\n      *\n-     * @param    name    the field name from {@link #getFieldName}\n+     * @param name the field name from {@link #getFieldName}\n      */\n     protected abstract boolean isDefaultPersistent(ClassMetaData meta,\n         Member member, String name);\n@@ -289,7 +289,7 @@ public Member getBackingMember(FieldMetaData fmd) {\n     }\n \n     /**\n-     * Return the method backing the given field metadata.  Looks for\n+     * Return the method backing the given field metadata. Looks for\n      * \"get\" and \"is\" methods with no parameters by default. This looks\n      * for elements defined in <code>cls</code> and its superclasses.\n      */\n@@ -329,8 +329,8 @@ private Method getBackingMethod(Class cls, String name,\n     }\n \n     /**\n-     *\tHelper method; returns true if the given class appears to be\n-     *\tuser-defined.\n+     * Helper method; returns true if the given class appears to be\n+     * user-defined.\n      */\n     protected static boolean isUserDefined(Class cls) {\n         return cls != null && !cls.getName().startsWith(\"java.\")"},{"sha":"687462ddcf98bf00805f32ba07897ba96260eed9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataFactory.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataFactory.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -28,8 +28,8 @@\n import serp.util.Strings;\n \n /**\n- * </p>Abstract {@link MetaDataFactory} that provides default implementations\n- * of many methods.</p>\n+ * Abstract {@link MetaDataFactory} that provides default implementations\n+ * of many methods.\n  *\n  * @author Abe White\n  */"},{"sha":"9b62d655e86f720aae58113de7e9140f74f62559","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":36,"deletions":43,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -57,13 +57,12 @@\n import serp.util.Strings;\n \n /**\n- * <p>Contains metadata about a persistent type.\n- * This metadata is available both at enhancement time and runtime.</p>\n- * <p/>\n- * <p>Note that this class employs aggressive caching, and therefore it is\n+ * Contains metadata about a persistent type.\n+ * This metadata is available both at enhancement time and runtime.\n+ *  Note that this class employs aggressive caching, and therefore it is\n  * important to finalize the configuration of field metadatas before invoking\n  * methods that depend on that configuration, such as\n- * {@link #getPrimaryKeyFields}.</p>\n+ * {@link #getPrimaryKeyFields}.\n  *\n  * @author Abe White\n  */\n@@ -93,12 +92,12 @@\n     public static final int ACCESS_UNKNOWN = 0;\n \n     /**\n-     * Persistent attributes are accessed via direct field access.  Bit flag.\n+     * Persistent attributes are accessed via direct field access. Bit flag.\n      */\n     public static final int ACCESS_FIELD = 2 << 0;\n \n     /**\n-     * Persistent attributes are accessed via setters and getters.  Bit flag.\n+     * Persistent attributes are accessed via setters and getters. Bit flag.\n      */\n     public static final int ACCESS_PROPERTY = 2 << 1;\n \n@@ -171,7 +170,7 @@\n     private final LifecycleMetaData _lifeMeta = new LifecycleMetaData(this);\n \n     /**\n-     * Constructor.  Supply described type and repository.\n+     * Constructor. Supply described type and repository.\n      */\n     protected ClassMetaData(Class type, MetaDataRepository repos) {\n         _repos = repos;\n@@ -180,7 +179,7 @@ protected ClassMetaData(Class type, MetaDataRepository repos) {\n     }\n \n     /**\n-     * Embedded constructor.  Supply embedding value.\n+     * Embedded constructor. Supply embedding value.\n      */\n     protected ClassMetaData(ValueMetaData owner) {\n         _owner = owner;\n@@ -211,7 +210,7 @@ public Class getDescribedType() {\n     }\n \n     /**\n-     * Set the class descibed by this metadata.  The type may be reset when\n+     * Set the class descibed by this metadata. The type may be reset when\n      * an embedded value changes its declared type.\n      */\n     protected void setDescribedType(Class type) {\n@@ -280,7 +279,7 @@ public void setPCSuperclassMetaData(ClassMetaData meta) {\n     }\n \n     /**\n-     * Whether this class is mapped to the datastore.  By default, only\n+     * Whether this class is mapped to the datastore. By default, only\n      * returns false if class is embedded-only, but subclasses might override\n      * to allow unmapped other types.\n      */\n@@ -323,7 +322,7 @@ public ClassMetaData getMappedPCSuperclassMetaData() {\n         if (_owner != null)\n             return _repos.EMPTY_METAS;\n \n-        Class[] subs = getPCSubclasses();    // checks for new\n+        Class[] subs = getPCSubclasses(); // checks for new\n         if (_subMetas == null) {\n             if (subs.length == 0)\n                 _subMetas = _repos.EMPTY_METAS;\n@@ -345,7 +344,7 @@ public ClassMetaData getMappedPCSuperclassMetaData() {\n         if (_owner != null)\n             return _repos.EMPTY_METAS;\n \n-        ClassMetaData[] subs = getPCSubclassMetaDatas();    // checks for new\n+        ClassMetaData[] subs = getPCSubclassMetaDatas(); // checks for new\n         if (_mapSubMetas == null) {\n             if (subs.length == 0)\n                 _mapSubMetas = subs;\n@@ -362,15 +361,14 @@ public ClassMetaData getMappedPCSuperclassMetaData() {\n     }\n \n     /**\n-     * The type of identity being used.  This will be one of:\n+     * The type of identity being used. This will be one of:\n      * <ul>\n      * <li>{@link #ID_UNKNOWN}: unknown identity type</li>\n      * <li>{@link #ID_DATASTORE}: identity managed by the data store and\n      * independent\tof the fields of the instance</li>\n      * <li>{@link #ID_APPLICATION}: identity managed by the application and\n      * defined by one or more fields of the instance</li>\n-     * </ul>\n-     * If unspecified, defaults to {@link #ID_DATASTORE} if there are no\n+     * </ul> If unspecified, defaults to {@link #ID_DATASTORE} if there are no\n      * primary key fields, and {@link #ID_APPLICATION} otherwise.\n      */\n     public int getIdentityType() {\n@@ -396,15 +394,14 @@ public int getIdentityType() {\n     }\n \n     /**\n-     * The type of identity being used.  This will be one of:\n+     * The type of identity being used. This will be one of:\n      * <ul>\n      * <li>{@link #ID_UNKNOWN}: unknown identity type</li>\n      * <li>{@link #ID_DATASTORE}: identity managed by the data store and\n      * independent\tof the fields of the instance</li>\n      * <li>{@link #ID_APPLICATION}: identity managed by the application and\n      * defined by one or more fields of the instance</li>\n-     * </ul>\n-     * If unspecified, defaults to {@link #ID_DATASTORE} if there are no\n+     * </ul> If unspecified, defaults to {@link #ID_DATASTORE} if there are no\n      * primary key fields, and {@link #ID_APPLICATION} otherwise.\n      */\n     public void setIdentityType(int type) {\n@@ -580,8 +577,7 @@ public LifecycleMetaData getLifecycleMetaData() {\n     /**\n      * Returns the alias for the described type, or <code>null</code> if none\n      * has been set.\n-     * <p/>\n-     * #see\tsetTypeAlias\n+     *  #see\tsetTypeAlias\n      */\n     public String getTypeAlias() {\n         if (_alias == null)\n@@ -688,7 +684,7 @@ public int getExtraFieldDataLength() {\n      * Return the impl / intermediate field data index of the given field\n      * in the compacted array, or -1 if the field does not use extra data.\n      *\n-     * @see    #getExtraFieldDataLength\n+     * @see #getExtraFieldDataLength\n      */\n     public int getExtraFieldDataIndex(int field) {\n         return getExtraFieldDataTable()[field];\n@@ -818,7 +814,7 @@ protected FieldMetaData getSuperclassField(FieldMetaData supField) {\n     }\n \n     /**\n-     * Return primary key fields, or empty array if none.  The order\n+     * Return primary key fields, or empty array if none. The order\n      * in which the keys are returned will be the order in which\n      * the fields are declared, starting at the least-derived superclass\n      * and ending with the primary key fields of the most-derived subclass.\n@@ -997,8 +993,7 @@ public boolean removeDeclaredField(FieldMetaData field) {\n     }\n \n     /**\n-     * Return the defined superclass field with the given name, or null if\n-     * none.\n+     * Return the defined superclass field with the given name, or null if none.\n      */\n     public FieldMetaData getDefinedSuperclassField(String name) {\n         if (_supFieldMap == null)\n@@ -1038,11 +1033,10 @@ public boolean removeDefinedSuperclassField(FieldMetaData field) {\n \n     /**\n      * Incorporate superclass fields redefined in this subclass into this\n-     * metadata.  This method is generally called after metadata is resolved\n+     * metadata. This method is generally called after metadata is resolved\n      * and mapping information is loaded, but before mapping resolve.\n      *\n-     * @param    force    whether to force re-mapping of even mapped superclass\n-     * fields\n+     * @param force whether to force re-mapping of even mapped superclass fields\n      */\n     public void defineSuperclassFields(boolean force) {\n         if (_defSupFields)\n@@ -1120,7 +1114,7 @@ private void resolveDefinedSuperclassFields() {\n \n     /**\n      * Returns all fields in the order they are listed in the metadata\n-     * file.  Unlisted fields are placed after listed ones.\n+     * file. Unlisted fields are placed after listed ones.\n      */\n     public FieldMetaData[] getFieldsInListingOrder() {\n         if (_allListingFields == null) {\n@@ -1154,7 +1148,7 @@ private void resolveDefinedSuperclassFields() {\n \n     /**\n      * Returns all fields defined by this class in the order they are listed\n-     * in the metadata file.  Unlisted fields are placed after listed ones.\n+     * in the metadata file. Unlisted fields are placed after listed ones.\n      * This array includes declared transactional and unmanaged fields.\n      */\n     public FieldMetaData[] getDefinedFieldsInListingOrder() {\n@@ -1190,14 +1184,14 @@ public String getDataCacheName() {\n     }\n \n     /**\n-     * Set the cache name for this class.  Set to null to disable caching.\n+     * Set the cache name for this class. Set to null to disable caching.\n      */\n     public void setDataCacheName(String name) {\n         _cacheName = name;\n     }\n \n     /**\n-     * The cache timeout for this class.  -1 indicates no timeout.\n+     * The cache timeout for this class. -1 indicates no timeout.\n      */\n     public int getDataCacheTimeout() {\n         if (_cacheTimeout == Integer.MIN_VALUE) {\n@@ -1212,7 +1206,7 @@ public int getDataCacheTimeout() {\n     }\n \n     /**\n-     * The cache timeout for this class.  -1 indicates no timeout.\n+     * The cache timeout for this class. -1 indicates no timeout.\n      */\n     public void setDataCacheTimeout(int timeout) {\n         _cacheTimeout = timeout;\n@@ -1448,7 +1442,7 @@ else if (on)\n     }\n \n     /**\n-     * Resolve and validate metadata.  Return true if already resolved.\n+     * Resolve and validate metadata. Return true if already resolved.\n      */\n     public boolean resolve(int mode) {\n         if ((_resMode & mode) == mode)\n@@ -1501,7 +1495,7 @@ protected void resolveMeta(boolean runtime) {\n             meta.resolve(MODE_META);\n             copy(this, meta);\n             _embedded =\n-                Boolean.FALSE;    // embedded instance isn't embedded-only\n+                Boolean.FALSE; // embedded instance isn't embedded-only\n         }\n \n         // make sure superclass is resolved\n@@ -1576,8 +1570,7 @@ protected void validateMeta(boolean runtime) {\n     }\n \n     /**\n-     * Resolve mapping data.  Logs resolve message and resolves super\n-     * by default.\n+     * Resolve mapping data. Logs resolve message and resolves super by default.\n      */\n     protected void resolveMapping(boolean runtime) {\n         Log log = _repos.getLog();\n@@ -1600,7 +1593,7 @@ protected void validateMapping(boolean runtime) {\n     }\n \n     /**\n-     * Initialize mapping.  Logs init message by default.\n+     * Initialize mapping. Logs init message by default.\n      */\n     protected void initializeMapping() {\n         Log log = _repos.getLog();\n@@ -2030,15 +2023,15 @@ else if (on)\n     }\n \n     /**\n-     * The index in which this class was listed in the metadata.  Defaults to\n+     * The index in which this class was listed in the metadata. Defaults to\n      * <code>-1</code> if this class was not listed in the metadata.\n      */\n     public int getListingIndex() {\n         return _listIndex;\n     }\n \n     /**\n-     * The index in which this field was listed in the metadata.  Defaults to\n+     * The index in which this field was listed in the metadata. Defaults to\n      * <code>-1</code> if this class was not listed in the metadata.\n      */\n     public void setListingIndex(int index) {\n@@ -2062,7 +2055,7 @@ public void setComments(String[] comments) {\n     //////////////\n \n     /**\n-     * Copy the metadata from the given instance to this one.  Do not\n+     * Copy the metadata from the given instance to this one. Do not\n      * copy mapping information.\n      */\n     public void copy(ClassMetaData meta) {\n@@ -2129,7 +2122,7 @@ protected void addExtensionKeys(Collection exts) {\n     }\n \n     /**\n-     *\tComparator used to put field metadatas into listing order.\n+     * Comparator used to put field metadatas into listing order.\n      */\n     private static class ListingOrderComparator\n         implements Comparator {"},{"sha":"2d7683685e7976f66a249a8649815aad553aa558","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/DelegatingMetaDataFactory.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/DelegatingMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/DelegatingMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/DelegatingMetaDataFactory.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -23,7 +23,7 @@\n import org.apache.openjpa.lib.meta.ClassArgParser;\n \n /**\n- * <p>Base class for factory instances that use a delegate.</p>\n+ * Base class for factory instances that use a delegate.\n  *\n  * @author Abe White\n  * @nojavadoc"},{"sha":"f0c9a0debda2faa5e1cace6847df078f3685c098","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/Extensions.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/Extensions.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/Extensions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/Extensions.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -30,8 +30,8 @@\n import serp.util.Strings;\n \n /**\n- * <p>Vendor extensions.  This class is thread safe for reads, but not for\n- * mutations.</p>\n+ * Vendor extensions. This class is thread safe for reads, but not for\n+ * mutations.\n  *\n  * @author Abe White\n  */\n@@ -441,7 +441,7 @@ public boolean equals(Object other) {\n     }\n \n     /**\n-     *\tEmbedded extensions implementation.\n+     * Embedded extensions implementation.\n      */\n     private static class EmbeddedExtensions\n         extends Extensions {"},{"sha":"add97ad55182522068ec076673ac4c25b4027cf5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,"},{"sha":"cba8976f58d81d8f292e157e696c7f8ac1fc542d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","status":"modified","additions":33,"deletions":40,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -55,7 +55,7 @@\n import serp.util.Strings;\n \n /**\n- * <p>Metadata for a managed class field.</p>\n+ * Metadata for a managed class field.\n  *\n  * @author Abe White\n  */\n@@ -186,9 +186,9 @@\n     /**\n      * Constructor.\n      *\n-     * @param    name    the field name\n-     * @param    type    the field type\n-     * @param    owner    the owning class metadata\n+     * @param name the field name\n+     * @param type the field type\n+     * @param owner the owning class metadata\n      */\n     protected FieldMetaData(String name, Class type, ClassMetaData owner) {\n         _name = name;\n@@ -327,7 +327,7 @@ public ValueMetaData getElement() {\n     }\n \n     /**\n-     * Return whether this field is mapped to the datastore.  By default,\n+     * Return whether this field is mapped to the datastore. By default,\n      * returns true for all persistent fields whose defining class is mapped.\n      */\n     public boolean isMapped() {\n@@ -413,15 +413,15 @@ public void setDeclaredIndex(int index) {\n     }\n \n     /**\n-     * The index in which this field was listed in the metadata.  Defaults to\n+     * The index in which this field was listed in the metadata. Defaults to\n      * <code>-1</code> if this field was not listed in the metadata.\n      */\n     public int getListingIndex() {\n         return _listIndex;\n     }\n \n     /**\n-     * The index in which this field was listed in the metadata.  Defaults to\n+     * The index in which this field was listed in the metadata. Defaults to\n      * <code>-1</code> if this field was not listed in the metadata.\n      */\n     public void setListingIndex(int index) {\n@@ -430,43 +430,41 @@ public void setListingIndex(int index) {\n \n     /**\n      * The absolute primary key index for this field, or -1 if not a primary\n-     * key.  The first primary key field has index 0, the second index 1, etc.\n+     * key. The first primary key field has index 0, the second index 1, etc.\n      */\n     public int getPrimaryKeyIndex() {\n         return _pkIndex;\n     }\n \n     /**\n      * The absolute primary key index for this field, or -1 if not a primary\n-     * key.  The first primary key field has index 0, the second index 1, etc.\n+     * key. The first primary key field has index 0, the second index 1, etc.\n      */\n     public void setPrimaryKeyIndex(int index) {\n         _pkIndex = index;\n     }\n \n     /**\n-     * Return the management level for the field.  Will be one of:\n+     * Return the management level for the field. Will be one of:\n      * <ul>\n      * <li>{@link #MANAGE_PERSISTENT}: the field is persistent</li>\n      * <li>{@link #MANAGE_TRANSACTIONAL}: the field is transactional but not\n      * persistent</li>\n      * <li>{@link #MANAGE_NONE}: the field is not managed</li>\n-     * </ul>\n-     * Defaults to {@link #MANAGE_PERSISTENT}.\n+     * </ul> Defaults to {@link #MANAGE_PERSISTENT}.\n      */\n     public int getManagement() {\n         return _manage;\n     }\n \n     /**\n-     * Return the management level for the field.  Will be one of:\n+     * Return the management level for the field. Will be one of:\n      * <ul>\n      * <li>{@link #MANAGE_PERSISTENT}: the field is persistent</li>\n      * <li>{@link #MANAGE_TRANSACTIONAL}: the field is transactional but not\n      * persistent</li>\n      * <li>{@link #MANAGE_NONE}: the field is not managed</li>\n-     * </ul>\n-     * Defaults to {@link #MANAGE_PERSISTENT}.\n+     * </ul> Defaults to {@link #MANAGE_PERSISTENT}.\n      */\n     public void setManagement(int manage) {\n         _manage = manage;\n@@ -545,7 +543,7 @@ public boolean isDefaultFetchGroupExplicit() {\n     }\n \n     /**\n-     * Whether the default fetch group setting is explicit.  Allow setting\n+     * Whether the default fetch group setting is explicit. Allow setting\n      * for testing.\n      */\n     public void setDefaultFetchGroupExplicit(boolean explicit) {\n@@ -564,8 +562,7 @@ public void setDefaultFetchGroupExplicit(boolean explicit) {\n      * at commit</li>\n      * <li>{@link #NULL_DEFAULT}: use the database default if this field is\n      * null at commit</li>\n-     * </ul>\n-     * Defaults to {@link #NULL_UNSET}.\n+     * </ul> Defaults to {@link #NULL_UNSET}.\n      */\n     public int getNullValue() {\n         return _nullValue;\n@@ -580,8 +577,7 @@ public int getNullValue() {\n      * at commit</li>\n      * <li>{@link #NULL_DEFAULT}: use the database default if this field is\n      * null at commit</li>\n-     * </ul>\n-     * Defaults to {@link #NULL_UNSET}.\n+     * </ul> Defaults to {@link #NULL_UNSET}.\n      */\n     public void setNullValue(int nullValue) {\n         _nullValue = nullValue;\n@@ -835,8 +831,8 @@ public void setLRS(boolean lrs) {\n      * Gets the name of the fetch groups those are associated to this receiver.\n      *\n      * @return the set of fetch group names.\n-     *         null if this field is a primary key or a version field.\n-     *         zero-length array if no fetch group has been associated.\n+     * null if this field is a primary key or a version field.\n+     * zero-length array if no fetch group has been associated.\n      */\n     public Set getFetchGroups() {\n         if (isPrimaryKey() || isVersion())\n@@ -889,19 +885,19 @@ public boolean isDeclaredInFetchGroup(String fg) {\n \n     /**\n      * Whether this field uses intermediate data when loading/storing\n-     * information through a {@link OpenJPAStateManager}.  Defaults to true.\n+     * information through a {@link OpenJPAStateManager}. Defaults to true.\n      *\n-     * @see    OpenJPAStateManager#setIntermediate(int,Object)\n+     * @see OpenJPAStateManager#setIntermediate(int,Object)\n      */\n     public boolean usesIntermediate() {\n         return _intermediate;\n     }\n \n     /**\n      * Whether this field uses intermediate data when loading/storing\n-     * information through a {@link OpenJPAStateManager}.  Defaults to true.\n+     * information through a {@link OpenJPAStateManager}. Defaults to true.\n      *\n-     * @see    OpenJPAStateManager#setIntermediate(int,Object)\n+     * @see OpenJPAStateManager#setIntermediate(int,Object)\n      */\n     public void setUsesIntermediate(boolean intermediate) {\n         _intermediate = intermediate;\n@@ -913,11 +909,11 @@ public void setUsesIntermediate(boolean intermediate) {\n      * field data when acting on a {@link OpenJPAStateManager}.\n      * Defaults to {@link Boolean#TRUE} (non-cachable impl data).\n      *\n-     * @return        {@link Boolean#FALSE} if this field does not use impl data,\n+     * @return {@link Boolean#FALSE} if this field does not use impl data,\n      * {@link Boolean#TRUE} if this field uses non-cachable impl\n      * data, or <code>null</code> if this field uses impl data that\n      * should be cached across instances\n-     * @see    OpenJPAStateManager#setImplData(int,Object)\n+     * @see OpenJPAStateManager#setImplData(int,Object)\n      */\n     public Boolean usesImplData() {\n         return _implData;\n@@ -927,8 +923,8 @@ public Boolean usesImplData() {\n      * Whether this field uses impl data in conjunction with standard\n      * field data when acting on a {@link OpenJPAStateManager}.\n      *\n-     * @see    OpenJPAStateManager#setImplData(int,Object)\n-     * @see    #usesImplData\n+     * @see OpenJPAStateManager#setImplData(int,Object)\n+     * @see #usesImplData\n      */\n     public void setUsesImplData(Boolean implData) {\n         _implData = implData;\n@@ -975,7 +971,7 @@ public void setOrders(Order[] orders) {\n \n     /**\n      * String declaring the orderings for this field to be applied on load,\n-     * or null.  The string is of the form:<br />\n+     * or null. The string is of the form:<br />\n      * <code>orderable[ asc|desc][, ...]</code><br />\n      * The orderable <code>#element</code> is used to denote the value of\n      * the field's elements.\n@@ -996,7 +992,7 @@ public String getOrderDeclaration() {\n \n     /**\n      * String declaring the orderings for this field to be applied on load,\n-     * or null.  The string is of the form:<br />\n+     * or null. The string is of the form:<br />\n      * <code>orderable[ asc|desc][, ...]</code><br />\n      * The orderable <code>#element</code> is used to denote the value of\n      * the field's elements.\n@@ -1117,7 +1113,7 @@ public Object getExternalValue(Object val, StoreContext ctx) {\n \n     /**\n      * Return the result of passing the given external value through the\n-     * factory to get the field value.  If no factory is present,\n+     * factory to get the field value. If no factory is present,\n      * the given value is returned as-is.\n      */\n     public Object getFieldValue(Object val, StoreContext ctx) {\n@@ -1270,7 +1266,7 @@ private void parseExternalValues() {\n     }\n \n     /**\n-     * Return the string value converted to the given type code.  The string\n+     * Return the string value converted to the given type code. The string\n      * must be non-null and trimmed.\n      */\n     private Object transform(String val, int typeCode) {\n@@ -1475,7 +1471,7 @@ else if (on)\n     }\n \n     /**\n-     * Resolve and validate metadata.  Return true if already resolved.\n+     * Resolve and validate metadata. Return true if already resolved.\n      */\n     public boolean resolve(int mode) {\n         if ((_resMode & mode) == mode)\n@@ -1621,7 +1617,7 @@ private void validateValue() {\n     }\n \n     /**\n-     * Copy state from the given field to this one.  Do not copy mapping\n+     * Copy state from the given field to this one. Do not copy mapping\n      * information.\n      */\n     public void copy(FieldMetaData field) {\n@@ -1836,19 +1832,16 @@ public FieldMetaData getValueMappedByMetaData ()\n \t\treturn _val.getValueMappedByMetaData ();\n \t}\n \n-\n \tpublic Class getTypeOverride ()\n \t{\n \t\treturn _val.getTypeOverride ();\n \t}\n \n-\n \tpublic void setTypeOverride (Class type)\n \t{\n \t\t_val.setTypeOverride (type);\n \t}\n \n-\n \tpublic void copy (ValueMetaData vmd)\n \t{\n \t\t_val.copy (vmd);"},{"sha":"a189605844692571c012b957a4ac7bf0b153b1b8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/InMemoryRelatedFieldOrder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InMemoryRelatedFieldOrder.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InMemoryRelatedFieldOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InMemoryRelatedFieldOrder.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -21,7 +21,7 @@\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n \n /**\n- * <p>Order by a field in the related type in memory.</p>\n+ * Order by a field in the related type in memory.\n  *\n  * @author Abe White\n  */"},{"sha":"2b3eaf2ce4d5543cddb61be28d71d764ac793acc","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/InMemoryValueOrder.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InMemoryValueOrder.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InMemoryValueOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InMemoryValueOrder.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -22,10 +22,10 @@\n import org.apache.openjpa.util.ApplicationIds;\n \n /**\n- * <p>Order by the field value in memory.  If the field contains\n+ * Order by the field value in memory. If the field contains\n  * {@link PersistenceCapable} objects, order on their primary key values.\n  * Relies on primary key values, including datastore oid objects, being\n- * {@link Comparable}.</p>\n+ * {@link Comparable}.\n  *\n  * @author Abe White\n  */"},{"sha":"c4f267774328d3990d70dd722383c1f0dcc04618","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -18,7 +18,7 @@\n import java.util.Comparator;\n \n /**\n- * <p>Comparator that keeps classes in inheritance order.</p>\n+ * Comparator that keeps classes in inheritance order.\n  *\n  * @author Abe White\n  */\n@@ -68,7 +68,7 @@ public int compare(Object o1, Object o2) {\n     }\n \n     /**\n-     *\tCount the levels of inheritance between this class and our base class.\n+     * Count the levels of inheritance between this class and our base class.\n      */\n     private int levels(Class to) {\n         for (int i = 0; to != null; i++, to = to.getSuperclass())"},{"sha":"94595c8d0470c541a9a09e70b39c0cc542ef070c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -39,7 +39,7 @@\n import serp.util.Strings;\n \n /**\n- * <p>Type constants for managed fields.</p>\n+ * Type constants for managed fields.\n  *\n  * @author Abe White\n  */\n@@ -106,7 +106,7 @@\n     }\n \n     /**\n-     * Return the field metadata type code for the given class.  First class\n+     * Return the field metadata type code for the given class. First class\n      * objects are not recognized in this method.\n      */\n     public static int getTypeCode(Class type) {\n@@ -227,9 +227,9 @@ private static Class classForName(String name, ClassMetaData meta,\n     }\n \n     /**\n-     * Convert the given object to the given type if possible.  If the type is\n+     * Convert the given object to the given type if possible. If the type is\n      * a numeric primitive, this method only guarantees that the return value\n-     * is a {@link Number}.  If no known conversion or the value is null,\n+     * is a {@link Number}. If no known conversion or the value is null,\n      * returns the original value.\n      */\n     public static Object convert(Object val, int typeCode) {\n@@ -410,7 +410,7 @@ public static List toList(Object val, Class elem, boolean mutable) {\n     }\n \n     /**\n-     *\tHelper method to return the given collection as an array.\n+     * Helper method to return the given collection as an array.\n      */\n     public static Object toArray(Collection coll, Class elem) {\n         if (coll == null)"},{"sha":"df7df1e91e163dd242eecdcfc62051814a07923b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/LifecycleMetaData.java","status":"modified","additions":8,"deletions":9,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/LifecycleMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/LifecycleMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/LifecycleMetaData.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -105,7 +105,7 @@ public void setIgnoreSuperclassCallbacks(int ignore) {\n     /**\n      * Set the callbacks for the given event type.\n      *\n-     * @param    highPriority    the first N given callbacks are high priority;\n+     * @param highPriority the first N given callbacks are high priority;\n      * high priority callbacks will be returned before\n      * non-high-priority superclass callbacks\n      */\n@@ -135,11 +135,10 @@ public void setDeclaredCallbacks(int eventType,\n \n     /**\n      * Set the callbacks for the given event type for non-persistent\n-     * superclass.  Note these callbacks will only be used where the\n-     * non-persistent superclass is the direct ancestor of the described\n-     * class.\n+     * superclass. Note these callbacks will only be used where the\n+     * non-persistent superclass is the direct ancestor of the described class.\n      *\n-     * @param    highPriority    the first N given callbacks are high priority;\n+     * @param highPriority the first N given callbacks are high priority;\n      * high priority callbacks will be returned before\n      * non-high-priority superclass callbacks\n      */\n@@ -169,9 +168,9 @@ void resolve() {\n     }\n \n     /**\n-     *\tCombine our callbacks with superclass callbacks as necessary.\n-     *\tThis method has the side effect of manipulating the _high array to\n-     *\treflect the combined callbacks rather than the declared ones.\n+     * Combine our callbacks with superclass callbacks as necessary.\n+     * This method has the side effect of manipulating the _high array to\n+     * reflect the combined callbacks rather than the declared ones.\n      */\n     private LifecycleCallbacks[][] combineCallbacks() {\n         if (_ignoreSups == (IGNORE_HIGH | IGNORE_LOW))"},{"sha":"46eae21ecf860efea620066becd822cb2c6681df","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataContext.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataContext.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataContext.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.meta;\n \n /**\n- * <p>Allows us to access configuration through metadata in a generic way.</p>\n+ * Allows us to access configuration through metadata in a generic way.\n  *\n  * @author Abe White\n  */"},{"sha":"cf072abc4a7fa00cc497c2fce69369700f8dca1d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -20,7 +20,7 @@\n import org.apache.openjpa.event.CallbackModes;\n \n /**\n- * <p>Populates new metadata with default values.</p>\n+ * Populates new metadata with default values.\n  *\n  * @author Abe White\n  */\n@@ -40,25 +40,25 @@\n \n     /**\n      * If callbacks are fired before listeners for the given\n-     * event type.  Defaults to false.\n+     * event type. Defaults to false.\n      */\n     public boolean getCallbacksBeforeListeners(int type);\n \n     /**\n      * Whether to ignore members which are not persistent by default\n-     * during metadata population.  Defaults to true.\n+     * during metadata population. Defaults to true.\n      */\n     public void setIgnoreNonPersistent(boolean ignore);\n \n     /**\n      * Populate the given metadata with default settings.\n      *\n-     * @param    access access type constant from {@link ClassMetaData}\n+     * @param access access type constant from {@link ClassMetaData}\n      */\n     public void populate(ClassMetaData meta, int access);\n \n     /**\n-     *\tReturn the backing member for the given field metadata.\n+     * Return the backing member for the given field metadata.\n      */\n     public Member getBackingMember(FieldMetaData field);\n }"},{"sha":"41d31218f98f7d15ff5bcc85ba22bef69901f32c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataFactory.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataFactory.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -23,8 +23,8 @@\n import org.apache.openjpa.lib.meta.ClassArgParser;\n \n /**\n- * <p>The {@link MetaDataRepository} uses implementations of this interface\n- * to load and store metadata.  Implementations need not be threadsafe.</p>\n+ * The {@link MetaDataRepository} uses implementations of this interface\n+ * to load and store metadata. Implementations need not be threadsafe.\n  *\n  * @author Patrick Linskey\n  * @author Abe White\n@@ -43,12 +43,12 @@\n     public void setRepository(MetaDataRepository repos);\n \n     /**\n-     * Base directory for storing metadata.  May not be called.\n+     * Base directory for storing metadata. May not be called.\n      */\n     public void setStoreDirectory(File dir);\n \n     /**\n-     * Storage mode.  May not be called.\n+     * Storage mode. May not be called.\n      */\n     public void setStoreMode(int store);\n \n@@ -59,13 +59,13 @@\n     public void setStrict(boolean strict);\n \n     /**\n-     * Load metadata for the given class in the given mode(s).  If loading\n-     * in {@link MetaDataModes#MODE_QUERY}, the class may be null.  Loaded\n-     * metadata should be added directly to the repository.  It should have\n+     * Load metadata for the given class in the given mode(s). If loading\n+     * in {@link MetaDataModes#MODE_QUERY}, the class may be null. Loaded\n+     * metadata should be added directly to the repository. It should have\n      * its source mode set appropriately via\n      * {@link ClassMetaData#setSourceMode}.\n      *\n-     * @param    mode    the mode to load metadata in: if mapping information is\n+     * @param mode the mode to load metadata in: if mapping information is\n      * stored together with metadata, then you can load mapping\n      * data even if this mode only includes\n      * {@link MetaDataModes#MODE_META MODE_META}, so long as\n@@ -76,8 +76,8 @@\n     /**\n      * Store the given metadata.\n      *\n-     * @param    mode    hint about what aspects of the metadata have changed\n-     * @param    output    if non-null, rather than storing metadata directly,\n+     * @param mode hint about what aspects of the metadata have changed\n+     * @param output if non-null, rather than storing metadata directly,\n      * add entries mapping each output destination such\n      * as a <code>File</code> to the planned output for that\n      * destination in string form\n@@ -102,7 +102,7 @@ public boolean store(ClassMetaData[] metas, QueryMetaData[] queries,\n      * Return all persistent class names, using the metadata locations supplied\n      * in configuration, optionally scanning the classpath.\n      * Return null if no types are supplied and this factory is unable to scan\n-     * the classpath.  This method should not be used directly by outside\n+     * the classpath. This method should not be used directly by outside\n      * code; use {@link MetaDataRepository#getPersistentTypeNames} instead.\n      *\n      * @see MetaDataRepository#getPersistentTypeNames\n@@ -132,7 +132,7 @@ public boolean store(ClassMetaData[] metas, QueryMetaData[] queries,\n     public void addClassExtensionKeys(Collection exts);\n \n     /**\n-     *\tAdd any extension keys used by this instance to the given set.\n+     * Add any extension keys used by this instance to the given set.\n      */\n     public void addFieldExtensionKeys (Collection exts);\n }"},{"sha":"503ec37cea4f6b5067589e6100b391f8960f485b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataInheritanceComparator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataInheritanceComparator.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataInheritanceComparator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataInheritanceComparator.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,7 +16,7 @@\n package org.apache.openjpa.meta;\n \n /**\n- * <p>Comparator that keeps metadatas in inheritance order.</p>\n+ * Comparator that keeps metadatas in inheritance order.\n  *\n  * @author Abe White\n  * @nojavadoc"},{"sha":"e16fc59e4beee5bed09121c00dca6d4eb7d6f13d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataModes.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataModes.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataModes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataModes.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -16,8 +16,8 @@\n package org.apache.openjpa.meta;\n \n /**\n- * <p>Mode constants used to track the initialization status of metadata.\n- * These constants can be used as bit flags.</p>\n+ * Mode constants used to track the initialization status of metadata.\n+ * These constants can be used as bit flags.\n  *\n  * @author Abe White\n  * @since 4.0"},{"sha":"aed92283701cec43dbc8d2f58815477af2b2806c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":43,"deletions":47,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/7cf69d8bccc218d9013f81574916e9ae06afbd68/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=7cf69d8bccc218d9013f81574916e9ae06afbd68","patch":"@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -43,7 +43,7 @@\n import serp.util.Strings;\n \n /**\n- * <p>Repository of and factory for persistent metadata.</p>\n+ * Repository of and factory for persistent metadata.\n  *\n  * @since 3.0\n  * @author Abe White\n@@ -73,7 +73,7 @@\n     public static final int VALIDATE_UNENHANCED = 4;\n \n     /**\n-     * Bit flag for runtime validation.  Requires that all classes are\n+     * Bit flag for runtime validation. Requires that all classes are\n      * enhanced, and performs extra field resolution steps.\n      */\n     public static final int VALIDATE_RUNTIME = 8;\n@@ -130,14 +130,14 @@\n         new LifecycleEventManager.ListenerList(3);\n \n     /**\n-     * Constructor.  Supply configuration.\n+     * Constructor. Supply configuration.\n      */\n     public MetaDataRepository(OpenJPAConfiguration conf) {\n         this(conf, conf.newMetaDataFactoryInstance());\n     }\n \n     /**\n-     * Constructor.  Supply configuration and metadata generator.\n+     * Constructor. Supply configuration and metadata generator.\n      */\n     public MetaDataRepository(OpenJPAConfiguration conf,\n         MetaDataFactory factory) {\n@@ -180,23 +180,23 @@ public MetaDataRepository newInstance() {\n     }\n \n     /**\n-     * The metadata validation level.  Defaults to\n+     * The metadata validation level. Defaults to\n      * <code>VALIDATE_META | VALIDATE_UNENHANCED</code>.\n      */\n     public int getValidate() {\n         return _validate;\n     }\n \n     /**\n-     * The metadata validation level.  Defaults to\n+     * The metadata validation level. Defaults to\n      * <code>VALIDATE_META | VALIDATE_UNENHANCED</code>.\n      */\n     public void setValidate(int validate) {\n         _validate = validate;\n     }\n \n     /**\n-     * The metadata validation level.  Defaults to\n+     * The metadata validation level. Defaults to\n      * <code>VALIDATE_META | VALIDATE_MAPPING | VALIDATE_UNENHANCED</code>.\n      */\n     public void setValidate(int validate, boolean on) {\n@@ -209,23 +209,23 @@ else if (on)\n     }\n \n     /**\n-     * The metadata resolution mode.  Defaults to\n+     * The metadata resolution mode. Defaults to\n      * <code>MODE_META | MODE_MAPPING</code>.\n      */\n     public int getResolve() {\n         return _resMode;\n     }\n \n     /**\n-     * The metadata resolution mode.  Defaults to\n+     * The metadata resolution mode. Defaults to\n      * <code>MODE_META | MODE_MAPPING</code>.\n      */\n     public void setResolve(int mode) {\n         _resMode = mode;\n     }\n \n     /**\n-     * The metadata resolution mode.  Defaults to\n+     * The metadata resolution mode. Defaults to\n      * <code>MODE_META | MODE_MAPPING</code>.\n      */\n     public void setResolve(int mode, boolean on) {\n@@ -238,23 +238,23 @@ else if (on)\n     }\n \n     /**\n-     * The source mode determining what metadata to load.  Defaults to\n+     * The source mode determining what metadata to load. Defaults to\n      * <code>MODE_META | MODE_MAPPING | MODE_QUERY</code>.\n      */\n     public int getSourceMode() {\n         return _sourceMode;\n     }\n \n     /**\n-     * The source mode determining what metadata to load.  Defaults to\n+     * The source mode determining what metadata to load. Defaults to\n      * <code>MODE_META | MODE_MAPPING | MODE_QUERY</code>.\n      */\n     public void setSourceMode(int mode) {\n         _sourceMode = mode;\n     }\n \n     /**\n-     * The source mode determining what metadata to load.  Defaults to\n+     * The source mode determining what metadata to load. Defaults to\n      * <code>MODE_META | MODE_MAPPING | MODE_QUERY</code>.\n      */\n     public void setSourceMode(int mode, boolean on) {\n@@ -269,9 +269,9 @@ else if (on)\n     /**\n      * Return the metadata for the given class.\n      *\n-     * @param    cls            the class to retrieve metadata for\n-     * @param    envLoader    the environmental class loader, if any\n-     * @param    mustExist    if true, throws a {@link MetaDataException}\n+     * @param cls the class to retrieve metadata for\n+     * @param envLoader the environmental class loader, if any\n+     * @param mustExist if true, throws a {@link MetaDataException}\n      * if no metadata is found\n      */\n     public synchronized ClassMetaData getMetaData(Class cls,\n@@ -296,9 +296,9 @@ public synchronized ClassMetaData getMetaData(Class cls,\n     /**\n      * Return the metadata for the given alias name.\n      *\n-     * @param    alias        the alias to class to retrieve metadata for\n-     * @param    envLoader    the environmental class loader, if any\n-     * @param    mustExist    if true, throws a {@link MetaDataException}\n+     * @param alias the alias to class to retrieve metadata for\n+     * @param envLoader the environmental class loader, if any\n+     * @param mustExist if true, throws a {@link MetaDataException}\n      * if no metadata is found\n      * @see ClassMetaData#getTypeAlias\n      */\n@@ -460,27 +460,26 @@ private static String toModeString(int mode) {\n     }\n \n     /**\n-     * Prepare metadata for mapping resolution.  This method might map parts\n+     * Prepare metadata for mapping resolution. This method might map parts\n      * of the metadata that don't rely on other classes being mapped, but that\n      * other classes might rely on during their own mapping (for example,\n-     * primary key fields).  By default, this method only calls\n+     * primary key fields). By default, this method only calls\n      * {@link ClassMetaData#defineSuperclassFields}.\n      */\n     protected void prepareMapping(ClassMetaData meta) {\n         meta.defineSuperclassFields(false);\n     }\n \n     /**\n-     * Resolve the given metadata if needed.  There are three goals:\n+     * Resolve the given metadata if needed. There are three goals:\n      * <ol>\n      * <li>Make sure no unresolved metadata gets back to the client.</li>\n      * <li>Avoid infinite reentrant calls for mutually-dependent metadatas by\n      * allowing unresolved metadata to be returned to other metadatas.</li>\n      * <li>Always make sure the superclass metadata is resolved before the\n      * subclass metadata so that the subclass can access the super's list\n      * of fields.</li>\n-     * </ol>\n-     * Note that the code calling this method is synchronized, so this\n+     * </ol> Note that the code calling this method is synchronized, so this\n      * method doesn't have to be.\n      */\n     private void resolve(ClassMetaData meta) {\n@@ -704,7 +703,7 @@ public ClassMetaData getCachedMetaData(Class cls) {\n \n     /**\n      * Create a new metadata, populate it with default information, add it to\n-     * the repository, and return it.  Use the default access type.\n+     * the repository, and return it. Use the default access type.\n      */\n     public ClassMetaData addMetaData(Class cls) {\n         return addMetaData(cls, ClassMetaData.ACCESS_UNKNOWN);\n@@ -776,7 +775,7 @@ protected ValueMetaData newValueMetaData(FieldMetaData owner) {\n     }\n \n     /**\n-     * Create an {@link Order} for the given field and declaration.  This\n+     * Create an {@link Order} for the given field and declaration. This\n      * method delegates to {@link #newRelatedFieldOrder} and\n      * {@link #newValueFieldOrder} by default.\n      */\n@@ -855,9 +854,9 @@ public synchronized boolean removeMetaData(Class cls) {\n      * Return the least-derived class metadata for the given application\n      * identity object.\n      *\n-     * @param    oid            the oid to get the metadata for\n-     * @param    envLoader    the environmental class loader, if any\n-     * @param    mustExist    if true, throws a {@link MetaDataException}\n+     * @param oid the oid to get the metadata for\n+     * @param envLoader the environmental class loader, if any\n+     * @param mustExist if true, throws a {@link MetaDataException}\n      * if no metadata is found\n      */\n     public ClassMetaData getMetaData(Object oid, ClassLoader envLoader,\n@@ -952,9 +951,9 @@ private void resolveIdentityClass(Object oid) {\n      * Return all least-derived metadatas with some mapped assignable type that\n      * implement the given class.\n      *\n-     * @param    cls            the class or interface to retrieve implementors for\n-     * @param    envLoader    the environmental class loader, if any\n-     * @param    mustExist    if true, throws a {@link MetaDataException}\n+     * @param cls the class or interface to retrieve implementors for\n+     * @param envLoader the environmental class loader, if any\n+     * @param mustExist if true, throws a {@link MetaDataException}\n      * if no metadata is found\n      */\n     public ClassMetaData[] getImplementorMetaDatas(Class cls,\n@@ -992,7 +991,7 @@ private void resolveIdentityClass(Object oid) {\n     }\n \n     /**\n-     * Clear the cache of parsed metadata.  This method also clears the\n+     * Clear the cache of parsed metadata. This method also clears the\n      * internal {@link MetaDataFactory MetaDataFactory}'s cache.\n      */\n     public synchronized void clear() {\n@@ -1014,10 +1013,9 @@ public synchronized void clear() {\n      * Return the set of configured persistent classes, or null if the user\n      * did not configure any.\n      *\n-     * @param    devpath        if true, search for metadata files in directories\n-     * in the classpath if no classes are configured\n-     * explicitly\n-     * @param    envLoader    the class loader to use, or null for default\n+     * @param devpath if true, search for metadata files in directories\n+     * in the classpath if no classes are configured explicitly\n+     * @param envLoader the class loader to use, or null for default\n      */\n     public synchronized Set getPersistentTypeNames(boolean devpath,\n         ClassLoader envLoader) {\n@@ -1031,10 +1029,9 @@ public synchronized Set getPersistentTypeNames(boolean devpath,\n      * application loading the classes before performing operations that\n      * might involve them.\n      *\n-     * @param    devpath        if true, search for metadata files in directories\n-     * in the classpath if the no classes are configured\n-     * explicitly\n-     * @param    envLoader    the class loader to use, or null for default\n+     * @param devpath if true, search for metadata files in directories\n+     * in the classpath if the no classes are configured explicitly\n+     * @param envLoader the class loader to use, or null for default\n      * @return the loaded classes, or empty collection if none\n      */\n     public synchronized Collection loadPersistentTypes(boolean devpath,\n@@ -1076,7 +1073,7 @@ private Class classForName(String name, ClassLoader loader) {\n     }\n \n     /**\n-     * Return all known subclasses for the given class mapping.  Note\n+     * Return all known subclasses for the given class mapping. Note\n      * that this method only works during runtime when the repository is\n      * registered as a {@link RegisterClassListener}.\n      */\n@@ -1394,7 +1391,7 @@ private static Object getQueryKey(QueryMetaData meta) {\n     }\n \n     /**\n-     * Return a unique key for a given class / name.  The class\n+     * Return a unique key for a given class / name. The class\n      * argument can be null.\n      */\n     protected static Object getQueryKey(Class cls, String name) {\n@@ -1571,8 +1568,7 @@ public synchronized boolean removeSystemListener(Object listener) {\n     }\n \n     /**\n-     * Free the resources used by this repository.  Closes all user\n-     * sequences.\n+     * Free the resources used by this repository. Closes all user sequences.\n      */\n     public synchronized void close() {\n         SequenceMetaData[] smds = getSequenceMetaDatas();\n@@ -1582,7 +1578,7 @@ public synchronized void close() {\n     }\n \n     /**\n-     *\tQuery key struct.\n+     * Query key struct.\n      */\n     private static class QueryKey {\n "}]}

