{"sha":"7db81e3d6cf042ac474a1fe41f7d9c90f2f7dec3","node_id":"MDY6Q29tbWl0MjA2MzY0OjdkYjgxZTNkNmNmMDQyYWM0NzRhMWZlNDFmN2Q5YzkwZjJmN2RlYzM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-02-27T01:59:42Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-02-27T01:59:42Z"},"message":"OPENJPA-158 -- reduced log level to TRACE for a variety of enhancement and metadata related messages\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@512107 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6c15989c6902f148b1d03f2f15a84bfab63b8702","url":"https://api.github.com/repos/apache/openjpa/git/trees/6c15989c6902f148b1d03f2f15a84bfab63b8702"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7db81e3d6cf042ac474a1fe41f7d9c90f2f7dec3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7db81e3d6cf042ac474a1fe41f7d9c90f2f7dec3","html_url":"https://github.com/apache/openjpa/commit/7db81e3d6cf042ac474a1fe41f7d9c90f2f7dec3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7db81e3d6cf042ac474a1fe41f7d9c90f2f7dec3/comments","author":null,"committer":null,"parents":[{"sha":"2a95f80f442ecf25a03aef34023cd98756bc1b0d","url":"https://api.github.com/repos/apache/openjpa/commits/2a95f80f442ecf25a03aef34023cd98756bc1b0d","html_url":"https://github.com/apache/openjpa/commit/2a95f80f442ecf25a03aef34023cd98756bc1b0d"}],"stats":{"total":94,"additions":49,"deletions":45},"files":[{"sha":"b471f4eabbd1911e18b0c873968d4b53dcaebe1d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7db81e3d6cf042ac474a1fe41f7d9c90f2f7dec3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/7db81e3d6cf042ac474a1fe41f7d9c90f2f7dec3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java?ref=7db81e3d6cf042ac474a1fe41f7d9c90f2f7dec3","patch":"@@ -450,8 +450,8 @@ public void generateTables(String schemaName, String tableName,\n         throws SQLException {\n         fireGenerationEvent(_loc.get(\"generating-columns\", schemaName,\n             tableName));\n-        if (_log.isInfoEnabled())\n-            _log.info(_loc.get(\"gen-tables\", schemaName, tableName));\n+        if (_log.isTraceEnabled())\n+            _log.trace(_loc.get(\"gen-tables\", schemaName, tableName));\n \n         Column[] cols = _dict.getColumns(meta, conn.getCatalog(), schemaName,\n             tableName, null, conn);\n@@ -813,8 +813,8 @@ public void generateSequences(String schemaName, String sequenceName,\n         Connection conn, DatabaseMetaData meta)\n         throws SQLException {\n         fireGenerationEvent(_loc.get(\"generating-sequences\", schemaName));\n-        if (_log.isInfoEnabled())\n-            _log.info(_loc.get(\"gen-seqs\", schemaName, sequenceName));\n+        if (_log.isTraceEnabled())\n+            _log.trace(_loc.get(\"gen-seqs\", schemaName, sequenceName));\n \n         Sequence[] seqs = _dict.getSequences(meta, conn.getCatalog(),\n             schemaName, sequenceName, conn);"},{"sha":"a6222112b46fae14a6f1b15438e924a12b6f6f2a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":13,"deletions":9,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/7db81e3d6cf042ac474a1fe41f7d9c90f2f7dec3/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/7db81e3d6cf042ac474a1fe41f7d9c90f2f7dec3/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=7db81e3d6cf042ac474a1fe41f7d9c90f2f7dec3","patch":"@@ -2822,7 +2822,7 @@ private void addGetMethod(int index, FieldMetaData fmd)\n         }\n \n         // if (inst.pcStateManager == null) return inst.<field>;\n-        Instruction ins = loadManagedInstance(code, true);\n+        loadManagedInstance(code, true);\n         code.getfield().setField(SM, SMTYPE);\n         JumpInstruction ifins = code.ifnonnull();\n         loadManagedInstance(code, true);\n@@ -2868,7 +2868,7 @@ private void addSetMethod(int index, FieldMetaData fmd)\n         int firstParamOffset = getAccessorParameterOffset();\n \n         // if (inst.pcStateManager == null) inst.<field> = value;\n-        Instruction ins = loadManagedInstance(code, true);\n+        loadManagedInstance(code, true);\n         code.getfield().setField(SM, SMTYPE);\n         JumpInstruction ifins = code.ifnonnull();\n         loadManagedInstance(code, true);\n@@ -3594,7 +3594,8 @@ public static boolean run(OpenJPAConfiguration conf, String[] args,\n         Class cls;\n         for (Iterator itr = classes.iterator(); itr.hasNext();) {\n             cls = (Class) itr.next();\n-            log.info(_loc.get(\"enhance-running\", cls));\n+            if (log.isTraceEnabled())\n+                log.trace(_loc.get(\"enhance-running\", cls));\n \n             bc = project.loadClass(cls);\n             enhancer = new PCEnhancer(conf, bc, repos);\n@@ -3603,12 +3604,15 @@ public static boolean run(OpenJPAConfiguration conf, String[] args,\n             enhancer.setDirectory(flags.directory);\n             enhancer.setAddDefaultConstructor(flags.addDefaultConstructor);\n             status = enhancer.run();\n-            if (status == ENHANCE_NONE)\n-                log.info(_loc.get(\"enhance-norun\"));\n-            else if (status == ENHANCE_INTERFACE)\n-                log.info(_loc.get(\"enhance-interface\"));\n-            else if (status == ENHANCE_AWARE) {\n-                log.info(_loc.get(\"enhance-aware\"));\n+            if (status == ENHANCE_NONE) {\n+                if (log.isTraceEnabled())\n+                    log.trace(_loc.get(\"enhance-norun\"));\n+            } else if (status == ENHANCE_INTERFACE) {\n+                if (log.isTraceEnabled())\n+                    log.trace(_loc.get(\"enhance-interface\"));\n+            } else if (status == ENHANCE_AWARE) {\n+                if (log.isTraceEnabled())\n+                    log.trace(_loc.get(\"enhance-aware\"));\n                 enhancer.record();\n             } else\n                 enhancer.record();"},{"sha":"ee5c11e2e21b384a85795d62a676093f53482641","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7db81e3d6cf042ac474a1fe41f7d9c90f2f7dec3/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/7db81e3d6cf042ac474a1fe41f7d9c90f2f7dec3/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java?ref=7db81e3d6cf042ac474a1fe41f7d9c90f2f7dec3","patch":"@@ -582,8 +582,8 @@ public Set getPersistentTypeNames(boolean devpath, ClassLoader envLoader) {\n             else // we don't cache a full dev cp scan\n                 _typeNames = names;\n \n-            if (log.isInfoEnabled())\n-                log.info(_loc.get(\"found-pcs\", String.valueOf(names.size()),\n+            if (log.isTraceEnabled())\n+                log.trace(_loc.get(\"found-pcs\", String.valueOf(names.size()),\n                     String.valueOf(System.currentTimeMillis() - start)));\n             return (names.isEmpty()) ? null : names;\n         } catch (IOException ioe) {"},{"sha":"6a25d01066d090156a53b4fa3dc341ced3959a69","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7db81e3d6cf042ac474a1fe41f7d9c90f2f7dec3/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/7db81e3d6cf042ac474a1fe41f7d9c90f2f7dec3/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java?ref=7db81e3d6cf042ac474a1fe41f7d9c90f2f7dec3","patch":"@@ -326,15 +326,15 @@ private void parse(MetaDataIterator itr, boolean stopFirst)\n      */\n     protected void parseNewResource(Reader xml, String sourceName)\n         throws IOException {\n-        if (_log != null && _log.isInfoEnabled())\n-            _log.info(_loc.get(\"start-parse\", sourceName));\n+        if (_log != null && _log.isTraceEnabled())\n+            _log.trace(_loc.get(\"start-parse\", sourceName));\n \n         // even if we want to validate, specify that it won't happen\n         // if we have neither a DocType not a Schema\n         Object schemaSource = getSchemaSource();\n         if (schemaSource != null && _schemaBug) {\n-            if (_log != null && _log.isInfoEnabled())\n-                _log.info(_loc.get(\"parser-schema-bug\"));\n+            if (_log != null && _log.isTraceEnabled())\n+                _log.trace(_loc.get(\"parser-schema-bug\"));\n             schemaSource = null;\n         }\n         boolean validating = _validating && (getDocType() != null "},{"sha":"1627a628bad242973654051025857ad4926213ad","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7db81e3d6cf042ac474a1fe41f7d9c90f2f7dec3/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/7db81e3d6cf042ac474a1fe41f7d9c90f2f7dec3/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java?ref=7db81e3d6cf042ac474a1fe41f7d9c90f2f7dec3","patch":"@@ -197,8 +197,8 @@ private void parseTableGenerator(AnnotatedElement el, TableGenerator gen) {\n             throw new MetaDataException(_loc.get(\"no-gen-name\", el));\n \n         Log log = getLog();\n-        if (log.isInfoEnabled())\n-            log.info(_loc.get(\"parse-gen\", name));\n+        if (log.isTraceEnabled())\n+            log.trace(_loc.get(\"parse-gen\", name));\n \n         SequenceMapping meta = (SequenceMapping) getRepository().\n             getCachedSequenceMetaData(name);\n@@ -481,8 +481,8 @@ private void parseSQLResultSetMappings(ClassMapping cm,\n         MappingRepository repos = (MappingRepository) getRepository();\n         Log log = getLog();\n         for (SqlResultSetMapping anno : annos) {\n-            if (log.isInfoEnabled())\n-                log.info(_loc.get(\"parse-sqlrsmapping\", anno.name()));\n+            if (log.isTraceEnabled())\n+                log.trace(_loc.get(\"parse-sqlrsmapping\", anno.name()));\n \n             QueryResultMapping result = repos.getCachedQueryResultMapping\n                 (null, anno.name());"},{"sha":"1e7c28a67455a916aff7193b89c2d5a600bc01e1","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/7db81e3d6cf042ac474a1fe41f7d9c90f2f7dec3/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/7db81e3d6cf042ac474a1fe41f7d9c90f2f7dec3/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java?ref=7db81e3d6cf042ac474a1fe41f7d9c90f2f7dec3","patch":"@@ -370,8 +370,8 @@ private void clearSecondaryTableInfo() {\n     private boolean startTableGenerator(Attributes attrs) {\n         String name = attrs.getValue(\"name\");\n         Log log = getLog();\n-        if (log.isInfoEnabled())\n-            log.info(_loc.get(\"parse-gen\", name));\n+        if (log.isTraceEnabled())\n+            log.trace(_loc.get(\"parse-gen\", name));\n         if (getRepository().getCachedSequenceMetaData(name) != null\n             && log.isWarnEnabled())\n             log.warn(_loc.get(\"override-gen\", name));\n@@ -781,8 +781,8 @@ private String toTableName(String schema, String table) {\n     private boolean startSQLResultSetMapping(Attributes attrs) {\n         String name = attrs.getValue(\"name\");\n         Log log = getLog();\n-        if (log.isInfoEnabled())\n-            log.info(_loc.get(\"parse-sqlrsmapping\", name));\n+        if (log.isTraceEnabled())\n+            log.trace(_loc.get(\"parse-sqlrsmapping\", name));\n \n         MappingRepository repos = (MappingRepository) getRepository();\n         QueryResultMapping result = repos.getCachedQueryResultMapping"},{"sha":"67b832dfa60c4a57a5dabff23234f4c84e7b32c6","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/7db81e3d6cf042ac474a1fe41f7d9c90f2f7dec3/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/7db81e3d6cf042ac474a1fe41f7d9c90f2f7dec3/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=7db81e3d6cf042ac474a1fe41f7d9c90f2f7dec3","patch":"@@ -335,8 +335,8 @@ public void clear() {\n      * Parse persistence metadata for the given class.\n      */\n     public void parse(Class cls) {\n-        if (_log.isInfoEnabled())\n-            _log.info(_loc.get(\"parse-class\", cls.getName()));\n+        if (_log.isTraceEnabled())\n+            _log.trace(_loc.get(\"parse-class\", cls.getName()));\n \n         _cls = cls;\n         try {\n@@ -369,8 +369,8 @@ private void parsePackageAnnotations() {\n             return;\n \n         int pkgMode = getSourceMode(pkg);\n-        if (pkgMode == 0 && _log.isInfoEnabled())\n-            _log.info(_loc.get(\"parse-package\", _cls.getName()));\n+        if (pkgMode == 0 && _log.isTraceEnabled())\n+            _log.trace(_loc.get(\"parse-package\", _cls.getName()));\n         if ((pkgMode & _mode) == _mode) // already visited\n             return;\n \n@@ -1440,8 +1440,8 @@ private void parseSequenceGenerator(AnnotatedElement el,\n         if (StringUtils.isEmpty(name))\n             throw new MetaDataException(_loc.get(\"no-seq-name\", el));\n \n-        if (_log.isInfoEnabled())\n-            _log.info(_loc.get(\"parse-sequence\", name));\n+        if (_log.isTraceEnabled())\n+            _log.trace(_loc.get(\"parse-sequence\", name));\n \n         SequenceMetaData meta = getRepository().getCachedSequenceMetaData\n             (name);\n@@ -1495,8 +1495,8 @@ private void parseNamedQueries(AnnotatedElement el, NamedQuery... queries) {\n                 throw new MetaDataException(_loc.get(\"no-query-string\",\n                     query.name(), el));\n \n-            if (_log.isInfoEnabled())\n-                _log.info(_loc.get(\"parse-query\", query.name()));\n+            if (_log.isTraceEnabled())\n+                _log.trace(_loc.get(\"parse-query\", query.name()));\n \n             meta = getRepository().getCachedQueryMetaData(null, query.name());\n             if (meta != null) {\n@@ -1536,8 +1536,8 @@ private void parseNamedNativeQueries(AnnotatedElement el,\n                 throw new MetaDataException(_loc.get(\"no-native-query-string\",\n                     query.name(), el));\n \n-            if (_log.isInfoEnabled())\n-                _log.info(_loc.get(\"parse-native-query\", query.name()));\n+            if (_log.isTraceEnabled())\n+                _log.trace(_loc.get(\"parse-native-query\", query.name()));\n \n             meta = getRepository().getCachedQueryMetaData(null, query.name());\n             if (meta != null) {"},{"sha":"7a6d1688fc96297c0a7d407698fe8aef5fee54db","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/7db81e3d6cf042ac474a1fe41f7d9c90f2f7dec3/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/7db81e3d6cf042ac474a1fe41f7d9c90f2f7dec3/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=7db81e3d6cf042ac474a1fe41f7d9c90f2f7dec3","patch":"@@ -727,8 +727,8 @@ protected boolean startClass(String elem, Attributes attrs)\n         }\n \n         Log log = getLog();\n-        if (log.isInfoEnabled())\n-            log.info(_loc.get(\"parse-class\", _cls.getName()));\n+        if (log.isTraceEnabled())\n+            log.trace(_loc.get(\"parse-class\", _cls.getName()));\n \n         MetaDataRepository repos = getRepository();\n         ClassMetaData meta = repos.getCachedMetaData(_cls);\n@@ -853,8 +853,8 @@ protected boolean startSequenceGenerator(Attributes attrs) {\n \n         String name = attrs.getValue(\"name\");\n         Log log = getLog();\n-        if (log.isInfoEnabled())\n-            log.info(_loc.get(\"parse-sequence\", name));\n+        if (log.isTraceEnabled())\n+            log.trace(_loc.get(\"parse-sequence\", name));\n \n         SequenceMetaData meta = getRepository().getCachedSequenceMetaData(name);\n         if (meta != null && log.isWarnEnabled())\n@@ -1373,8 +1373,8 @@ protected boolean startNamedQuery(Attributes attrs)\n \n         String name = attrs.getValue(\"name\");\n         Log log = getLog();\n-        if (log.isInfoEnabled())\n-            log.info(_loc.get(\"parse-query\", name));\n+        if (log.isTraceEnabled())\n+            log.trace(_loc.get(\"parse-query\", name));\n \n         QueryMetaData meta = getRepository().getCachedQueryMetaData(null, name);\n         if (meta != null && log.isWarnEnabled())\n@@ -1439,8 +1439,8 @@ protected boolean startNamedNativeQuery(Attributes attrs)\n \n         String name = attrs.getValue(\"name\");\n         Log log = getLog();\n-        if (log.isInfoEnabled())\n-            log.info(_loc.get(\"parse-native-query\", name));\n+        if (log.isTraceEnabled())\n+            log.trace(_loc.get(\"parse-native-query\", name));\n \n         QueryMetaData meta = getRepository().getCachedQueryMetaData(null, name);\n         if (meta != null && log.isWarnEnabled())"}]}

