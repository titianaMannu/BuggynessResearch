{"sha":"7e50c0bf6dae733ea989872e33ab5b1f05919d33","node_id":"MDY6Q29tbWl0MjA2MzY0OjdlNTBjMGJmNmRhZTczM2VhOTg5ODcyZTMzYWI1YjFmMDU5MTlkMzM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-08-12T20:53:58Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-08-12T20:53:58Z"},"message":"OPENJPA-1424: adding testcase.\nSubmitted By: Heath Thomann, Daryl Stultz.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@984967 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"98b10647d34112530799bc680da88fa917667e24","url":"https://api.github.com/repos/apache/openjpa/git/trees/98b10647d34112530799bc680da88fa917667e24"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7e50c0bf6dae733ea989872e33ab5b1f05919d33","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7e50c0bf6dae733ea989872e33ab5b1f05919d33","html_url":"https://github.com/apache/openjpa/commit/7e50c0bf6dae733ea989872e33ab5b1f05919d33","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7e50c0bf6dae733ea989872e33ab5b1f05919d33/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"319ba414835f6b2826905739eaaa9958fd583ede","url":"https://api.github.com/repos/apache/openjpa/commits/319ba414835f6b2826905739eaaa9958fd583ede","html_url":"https://github.com/apache/openjpa/commit/319ba414835f6b2826905739eaaa9958fd583ede"}],"stats":{"total":490,"additions":490,"deletions":0},"files":[{"sha":"290cf8f4d57ff86434539fb74e529bd42fa7efae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Case.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/7e50c0bf6dae733ea989872e33ab5b1f05919d33/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Case.java","raw_url":"https://github.com/apache/openjpa/raw/7e50c0bf6dae733ea989872e33ab5b1f05919d33/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Case.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Case.java?ref=7e50c0bf6dae733ea989872e33ab5b1f05919d33","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.List;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"cases\")\n+public class Case {\n+\n+    @Id\n+    @GeneratedValue\n+    @Column(name = \"caseid\")\n+    private Integer id;\n+\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    @JoinColumn(name = \"scheduledayid\", nullable = false)\n+    private ScheduleDay scheduleDay;\n+\n+    @OneToMany(fetch = FetchType.LAZY, mappedBy = \"caze\")\n+    private List<ScheduledAssignment> scheduledAssignments;\n+\n+    public Integer getId() {\n+        return id;\n+    }\n+\n+    public void setId(Integer id) {\n+        this.id = id;\n+    }\n+\n+    public ScheduleDay getScheduleDay() {\n+        return scheduleDay;\n+    }\n+\n+    public void setScheduleDay(ScheduleDay scheduleDay) {\n+        this.scheduleDay = scheduleDay;\n+    }\n+\n+    public List<ScheduledAssignment> getScheduledAssignments() {\n+        return scheduledAssignments;\n+    }\n+\n+    public void setScheduledAssignments(List<ScheduledAssignment> scheduledAssignments) {\n+        this.scheduledAssignments = scheduledAssignments;\n+    }\n+\n+    public void addScheduledAssignment(ScheduledAssignment scheduledAssignment) {\n+        scheduledAssignments.add(scheduledAssignment);\n+    }\n+}"},{"sha":"7ede47d79045c0a71165526e3b7d1d4879f9e4f4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Lookup.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/7e50c0bf6dae733ea989872e33ab5b1f05919d33/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Lookup.java","raw_url":"https://github.com/apache/openjpa/raw/7e50c0bf6dae733ea989872e33ab5b1f05919d33/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Lookup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Lookup.java?ref=7e50c0bf6dae733ea989872e33ab5b1f05919d33","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"lookups\")\n+public class Lookup {\n+\n+    @Id\n+    @Column(name = \"ruleid\")\n+    private Integer id;\n+    @Column(name = \"name\", nullable = false, length = 100)\n+    private String name;\n+\n+    public Lookup() {\n+    }\n+\n+    public Integer getId() {\n+        return this.id;\n+    }\n+\n+    public void setId(Integer id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"35d547b13f61c732209069979512d512649652fb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Role.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/7e50c0bf6dae733ea989872e33ab5b1f05919d33/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Role.java","raw_url":"https://github.com/apache/openjpa/raw/7e50c0bf6dae733ea989872e33ab5b1f05919d33/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Role.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Role.java?ref=7e50c0bf6dae733ea989872e33ab5b1f05919d33","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"roles\")\n+public class Role {\n+\n+    @Id\n+    @GeneratedValue\n+    @Column(name = \"roleid\")\n+    private Integer id;\n+    @ManyToOne(fetch = FetchType.EAGER, optional = false)\n+    @JoinColumn(name = \"lookupid\", nullable = false)\n+    private Lookup lookup;\n+\n+    public Role() {\n+        super();\n+    }\n+\n+    public Integer getId() {\n+        return this.id;\n+    }\n+\n+    public void setId(Integer roleid) {\n+        this.id = roleid;\n+    }\n+\n+    public Lookup getLookup() {\n+        return lookup;\n+    }\n+\n+    public void setLookup(Lookup lookup) {\n+        this.lookup = lookup;\n+    }\n+}"},{"sha":"483a71c29676fcff7873579c9816610b6ac9a076","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ScheduleDay.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/7e50c0bf6dae733ea989872e33ab5b1f05919d33/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ScheduleDay.java","raw_url":"https://github.com/apache/openjpa/raw/7e50c0bf6dae733ea989872e33ab5b1f05919d33/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ScheduleDay.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ScheduleDay.java?ref=7e50c0bf6dae733ea989872e33ab5b1f05919d33","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.Date;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+import javax.persistence.UniqueConstraint;\n+\n+@Entity\n+@Table(name = \"scheduledays\", uniqueConstraints = @UniqueConstraint(columnNames = \"scheduledate\"))\n+public class ScheduleDay {\n+\n+    @Id\n+    @GeneratedValue\n+    @Column(name = \"scheduledayid\")\n+    private Integer id;\n+    @Temporal(TemporalType.DATE)\n+    @Column(name = \"scheduledate\", unique = true, nullable = false, length = 4)\n+    private Date date;\n+\n+    public ScheduleDay() {\n+        super();\n+    }\n+\n+    public Integer getId() {\n+        return this.id;\n+    }\n+\n+    public void setId(Integer scheduledayid) {\n+        this.id = scheduledayid;\n+    }\n+\n+    public Date getDate() {\n+        return this.date;\n+    }\n+\n+    public void setDate(Date scheduledate) {\n+        this.date = scheduledate;\n+    }\n+}"},{"sha":"759ba9edeb619c5319dd2e63d8d916bdecb881aa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ScheduledAssignment.java","status":"added","additions":126,"deletions":0,"changes":126,"blob_url":"https://github.com/apache/openjpa/blob/7e50c0bf6dae733ea989872e33ab5b1f05919d33/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ScheduledAssignment.java","raw_url":"https://github.com/apache/openjpa/raw/7e50c0bf6dae733ea989872e33ab5b1f05919d33/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ScheduledAssignment.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ScheduledAssignment.java?ref=7e50c0bf6dae733ea989872e33ab5b1f05919d33","patch":"@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"scheduledassignments\")\n+public class ScheduledAssignment {\n+\n+    @Id\n+    @GeneratedValue\n+    @Column(name = \"scheduledassignmentid\")\n+    private Integer id;\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"autoassignid\")\n+    private ScheduledAssignment parentScheduledAssignment;\n+\n+    @ManyToOne(fetch = FetchType.EAGER, optional = false)\n+    @JoinColumn(name = \"scheduledayid\", nullable = false)\n+    private ScheduleDay scheduleDay;\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"caseid\")\n+    private Case caze;\n+\n+    @ManyToOne(fetch = FetchType.EAGER, optional = false)\n+    @JoinColumn(name = \"roleid\", nullable = false)\n+    private Role role;\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"lookupId\")\n+    private Lookup brokenRuleLookup;\n+\n+    @Column(name = \"brokencustomruleexplanation\")\n+    private String brokenCustomRuleExplanation; // somehow, removing this has an effect\n+\n+    public ScheduledAssignment() {\n+        super();\n+    }\n+\n+    public Integer getId() {\n+        return this.id;\n+    }\n+\n+    public void setId(Integer id) {\n+        this.id = id;\n+    }\n+\n+    public ScheduledAssignment getParentScheduledAssignment() {\n+        return this.parentScheduledAssignment;\n+    }\n+\n+    public void setParentScheduledAssignment(ScheduledAssignment scheduledassignments) {\n+        this.parentScheduledAssignment = scheduledassignments;\n+    }\n+\n+    public ScheduleDay getScheduleDay() {\n+        return this.scheduleDay;\n+    }\n+\n+    public void setScheduleDay(ScheduleDay scheduleDay) {\n+        this.scheduleDay = scheduleDay;\n+    }\n+\n+    public Case getCase() {\n+        return caze;\n+    }\n+\n+    public void setCase(Case caze) {\n+        this.caze = caze;\n+    }\n+\n+    public Role getRole() {\n+        return this.role;\n+    }\n+\n+    public void setRole(Role roles) {\n+        this.role = roles;\n+    }\n+\n+    public Lookup getBrokenRuleLookup() {\n+        return brokenRuleLookup;\n+    }\n+\n+    public void setBrokenRuleLookup(Lookup brokenRuleLookup) {\n+        this.brokenRuleLookup = brokenRuleLookup;\n+    }\n+\n+    public Case getCaze() {\n+        return caze;\n+    }\n+\n+    public void setCaze(Case caze) {\n+        this.caze = caze;\n+    }\n+\n+    public String getBrokenCustomRuleExplanation() {\n+        return brokenCustomRuleExplanation;\n+    }\n+\n+    public void setBrokenCustomRuleExplanation(String brokenCustomRuleExplanation) {\n+        this.brokenCustomRuleExplanation = brokenCustomRuleExplanation;\n+    }\n+}"},{"sha":"fc265b7324a9315bf0e8d624fa3caf12c0588605","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestOutOfBoundsEx.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/7e50c0bf6dae733ea989872e33ab5b1f05919d33/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestOutOfBoundsEx.java","raw_url":"https://github.com/apache/openjpa/raw/7e50c0bf6dae733ea989872e33ab5b1f05919d33/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestOutOfBoundsEx.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestOutOfBoundsEx.java?ref=7e50c0bf6dae733ea989872e33ab5b1f05919d33","patch":"@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.FetchPlan;\n+import org.apache.openjpa.persistence.QueryImpl;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestOutOfBoundsEx extends SingleEMFTestCase {\n+\tprivate EntityManager em = null;\n+\tprivate Lookup lookup;\n+\t\n+\tpublic void setUp() throws Exception {\n+\t\tsuper.setUp(Lookup.class, Case.class, Role.class, ScheduledAssignment.class, ScheduleDay.class, \n+        DROP_TABLES);\n+\t\tem = emf.createEntityManager();\n+\t\tinsertLookups();\n+\t}\n+\t\n+\tpublic void testOutOfBounds() throws Exception {\n+\t\tCalendar cal = Calendar.getInstance();\n+\t\tfinal Date date = cal.getTime();\n+\t\tScheduleDay sd = insertScheduleDay(date);\n+\t\t\n+\t\tRole role1 = insertJob();\n+\t\tRole role2 = insertJob();\n+\t\tCase kase1 = insertCase(sd);\n+\t\tCase kase2 = insertCase(sd);\n+\t\tinsertScheduledAssignmentInCase(role1, kase2);\n+\t\t\n+\t\t// simulate new web transaction on different em\n+\t\tem.close();\n+\t\tem = emf.createEntityManager();\n+\t\t\n+\t\tQuery query = em.createQuery(\"select o from Case as o\" +\n+\t\t\t\t\" where o.scheduleDay = :sd\");\n+\t\tquery.setParameter(\"sd\", sd);\n+\t\tFetchPlan fetchPlan = ((QueryImpl) query).getFetchPlan();\n+\t\tfetchPlan.addField(Case.class, \"scheduledAssignments\");\n+\t\t\n+\t\t//Without the changes of OJ1424, this next call would cause an \n+\t\t//ArrayIndexOutOfBoundsException.\n+\t\tList<Case> allCases = query.getResultList();\n+\t}\n+\n+\tpublic void insertLookups() {\n+\t\tlookup = new Lookup();\n+\t\tlookup.setName(\"XYZ\");\n+\t\tlookup.setId(1);\n+\t\tsave(lookup);\n+\t}\n+\n+\tpublic void save(Object obj) {\n+\t\tem.getTransaction().begin();\n+\t\tem.persist(obj);\n+\t\tem.getTransaction().commit();\n+\t}\n+\t\n+\tpublic Role insertJob() {\n+\t\tRole role = new Role();\n+\t\trole.setLookup(lookup);\n+\t\tsave(role);\n+\t\treturn role;\n+\t}\n+\n+\tpublic Case insertCase(ScheduleDay sd) throws Exception {\n+\t\tCase kase = new Case();\n+\t\tkase.setScheduleDay(sd);\n+\t\tsave(kase);\n+\t\treturn kase;\n+\t}\n+\n+\tpublic void insertScheduledAssignmentInCase(Role job, Case kase) {\n+\t\tScheduledAssignment sa = new ScheduledAssignment();\n+\t\tsa.setRole(job);\n+\t\tsa.setCase(kase);\n+\t\tsa.setScheduleDay(kase.getScheduleDay());\n+\t\tsave(sa);\n+\t}\n+\n+\tpublic ScheduleDay insertScheduleDay(Date date) {\n+\t\tScheduleDay sd = new ScheduleDay();\n+\t\tsd.setDate(date);\n+\t\tsave(sd);\n+\t\treturn sd;\n+\t}\t\n+}"}]}

