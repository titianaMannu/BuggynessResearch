{"sha":"7ee08e7c2f82b0c92f0a153a3a1d2666f64aedb7","node_id":"MDY6Q29tbWl0MjA2MzY0OjdlZTA4ZTdjMmY4MmIwYzkyZjBhMTUzYTNhMWQyNjY2ZjY0YWVkYjc=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-13T14:37:28Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-13T14:37:28Z"},"message":"OPENJPA-1243:\nOPENJPA-605: Do not create a unique index on primary key columns for Informix\nOPENJPA-606: Informix updates - update timestamp type name, fix cross join syntax, Informix does not support NullDeleteAction or default delete, and add error message for LOCATE function.\nOPENJPA-629: Trim trailing whitespace when checking for existing keys in database\nSubmitted By: B. J. Reed, based on patches by Michael Dick, Fay Wang and Catalina Wei.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@803904 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"524913fbb0077052f53e64c79032f86bd3d3bb2a","url":"https://api.github.com/repos/apache/openjpa/git/trees/524913fbb0077052f53e64c79032f86bd3d3bb2a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7ee08e7c2f82b0c92f0a153a3a1d2666f64aedb7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7ee08e7c2f82b0c92f0a153a3a1d2666f64aedb7","html_url":"https://github.com/apache/openjpa/commit/7ee08e7c2f82b0c92f0a153a3a1d2666f64aedb7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7ee08e7c2f82b0c92f0a153a3a1d2666f64aedb7/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"216220067cf3eaa5aab3daa1cebafd59b49c08b8","url":"https://api.github.com/repos/apache/openjpa/commits/216220067cf3eaa5aab3daa1cebafd59b49c08b8","html_url":"https://github.com/apache/openjpa/commit/216220067cf3eaa5aab3daa1cebafd59b49c08b8"}],"stats":{"total":88,"additions":77,"deletions":11},"files":[{"sha":"b3cb27838141dabc042ded9fa363cd41ccd432ab","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Distinct.java","status":"modified","additions":15,"deletions":1,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/7ee08e7c2f82b0c92f0a153a3a1d2666f64aedb7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Distinct.java","raw_url":"https://github.com/apache/openjpa/raw/7ee08e7c2f82b0c92f0a153a3a1d2666f64aedb7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Distinct.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Distinct.java?ref=7ee08e7c2f82b0c92f0a153a3a1d2666f64aedb7","patch":"@@ -14,10 +14,11 @@\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  * KIND, either express or implied.  See the License for the\n  * specific language governing permissions and limitations\n- * under the License.    \n+ * under the License.\n  */\n package org.apache.openjpa.jdbc.kernel.exps;\n \n+import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n \n /**\n@@ -40,4 +41,17 @@ public ExpState initialize(Select sel, ExpContext ctx, int flags) {\n     protected String getOperator() {\n         return \"DISTINCT\";\n     }\n+\n+    public void appendTo(Select sel, ExpContext ctx, ExpState state,\n+        SQLBuffer sql, int index) {\n+        if (sel.getConfiguration().getDBDictionaryInstance().platform.indexOf(\n+            \"Informix\") > -1) {\n+            sql.append(getOperator());\n+            sql.append(\" \");\n+            getValue().appendTo(sel, ctx, state, sql, 0);\n+            sql.addCastForParam(getOperator(), getValue());\n+        }\n+        else\n+            super.appendTo(sel, ctx, state, sql, index);\n+    }\n }"},{"sha":"f7c0b40483f84333c9f32a4efad32ae7fc939a58","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/7ee08e7c2f82b0c92f0a153a3a1d2666f64aedb7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/7ee08e7c2f82b0c92f0a153a3a1d2666f64aedb7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaGenerator.java?ref=7ee08e7c2f82b0c92f0a153a3a1d2666f64aedb7","patch":"@@ -757,6 +757,9 @@ public void generateForeignKeys(String schemaName, String tableName,\n \n             // find pk table\n             pkSchemaName = fks[i].getPrimaryKeySchemaName();\n+            if(_dict.getTrimSchemaName()) {\n+                pkSchemaName= StringUtils.trimToNull(pkSchemaName);\n+            }\n             pkTableName = fks[i].getPrimaryKeyTableName();\n             if (_log.isTraceEnabled())\n                 _log.trace(_loc.get(\"gen-fk\", new Object[]{ name, table,"},{"sha":"fd974109ae9373aefbf6992cce8257afd634b908","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/7ee08e7c2f82b0c92f0a153a3a1d2666f64aedb7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","raw_url":"https://github.com/apache/openjpa/raw/7ee08e7c2f82b0c92f0a153a3a1d2666f64aedb7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java?ref=7ee08e7c2f82b0c92f0a153a3a1d2666f64aedb7","patch":"@@ -986,6 +986,10 @@ public boolean dropSequence(Sequence seq)\n      */\n     public boolean createIndex(Index idx, Table table)\n         throws SQLException {\n+\n+        if (!_dict.needsToCreateIndex(idx,table))\n+            return false;\n+\n         int max = _dict.maxIndexesPerTable;\n \n         int len = table.getIndexes().length;"},{"sha":"d29a23a853320e0f6e3c2e1451962369ae57951b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/7ee08e7c2f82b0c92f0a153a3a1d2666f64aedb7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/7ee08e7c2f82b0c92f0a153a3a1d2666f64aedb7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=7ee08e7c2f82b0c92f0a153a3a1d2666f64aedb7","patch":"@@ -215,6 +215,11 @@\n     public boolean supportsModOperator = false;\n     public boolean supportsXMLColumn = false;\n \n+    /**\n+     * Some Databases append whitespace after the schema name\n+     */\n+    public boolean trimSchemaName = false;\n+\n     // functions\n     public String castFunction = \"CAST({0} AS {1})\";\n     public String toLowerCaseFunction = \"LOWER({0})\";\n@@ -4052,4 +4057,16 @@ public boolean isSelect(String sql) {\n         }\n         return false;\n     }\n+\n+    public boolean needsToCreateIndex(Index idx, Table table) {\n+        return true;\n+    }\n+\n+    public boolean getTrimSchemaName() {\n+        return trimSchemaName;\n+    }\n+\n+    public void setTrimSchemaName(boolean trimSchemaName) {\n+        this.trimSchemaName = trimSchemaName;\n+    }\n }"},{"sha":"2b44b34dc36c45eeca48e636e68bc1fea2d54a7e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","status":"modified","additions":37,"deletions":9,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/7ee08e7c2f82b0c92f0a153a3a1d2666f64aedb7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/7ee08e7c2f82b0c92f0a153a3a1d2666f64aedb7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java?ref=7ee08e7c2f82b0c92f0a153a3a1d2666f64aedb7","patch":"@@ -28,12 +28,14 @@\n import java.util.Arrays;\n import java.util.Collection;\n \n+import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.schema.Index;\n import org.apache.openjpa.jdbc.schema.PrimaryKey;\n import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.lib.util.ReferenceHashSet;\n+import org.apache.openjpa.util.UnsupportedException;\n \n /**\n  * Dictionary for Informix database. Notable features:\n@@ -91,11 +93,6 @@ public InformixDictionary() {\n         supportsDeferredConstraints = false;\n         constraintNameMode = CONS_NAME_AFTER;\n \n-        maxTableNameLength = 18;\n-        maxColumnNameLength = 18;\n-        maxIndexNameLength = 18;\n-        maxConstraintNameLength = 18;\n-\n         // informix supports \"CLOB\" type, but any attempt to insert\n         // into them raises: \"java.sql.SQLException: Can't convert fromnull\"\n         useGetStringForClobs = true;\n@@ -108,7 +105,8 @@ public InformixDictionary() {\n         blobTypeName = \"BYTE\";\n         doubleTypeName = \"NUMERIC(32,20)\";\n         dateTypeName = \"DATE\";\n-        timestampTypeName = \"DATE\";\n+        timeTypeName = \"DATETIME HOUR TO SECOND\";\n+        timestampTypeName = \"DATETIME YEAR TO FRACTION(3)\";\n         doubleTypeName = \"NUMERIC(32,20)\";\n         floatTypeName = \"REAL\";\n         bigintTypeName = \"NUMERIC(32,0)\";\n@@ -130,8 +128,24 @@ public InformixDictionary() {\n \n         // Informix doesn't support aliases in deletes if the table has an index\n         allowsAliasInBulkClause = false;\n-        \n-        supportsSubselect = false;\n+\n+        supportsTimestampNanos = false;\n+\n+        // Informix doesn't understand \"X CROSS JOIN Y\", but it does understand\n+        // the equivalent \"X JOIN Y ON 1 = 1\"\n+        crossJoinClause = \"JOIN\";\n+        requiresConditionForCrossJoin = true;\n+\n+        concatenateFunction = \"CONCAT({0},{1})\";\n+        nextSequenceQuery = \"SELECT {0}.NEXTVAL FROM SYSTABLES WHERE TABID=1\";\n+        supportsCorrelatedSubselect = false;\n+        swapSchemaAndCatalog = false;\n+\n+        // Informix does not support foreign key delete action NULL or DEFAULT\n+        supportsNullDeleteAction = false;\n+        supportsDefaultDeleteAction = false;\n+\n+        trimSchemaName = true;\n     }\n \n     public void connectedConfiguration(Connection conn)\n@@ -196,7 +210,7 @@ public void setBoolean(PreparedStatement stmnt, int idx, boolean val,\n         throws SQLException {\n         // informix actually requires that a boolean be set: it cannot\n         // handle a numeric argument\n-        stmnt.setBoolean(idx, val);\n+        stmnt.setString(idx, val ? \"t\" : \"f\");\n     }\n \n     public String[] getCreateTableSQL(Table table) {\n@@ -262,4 +276,18 @@ public Connection decorate(Connection conn)\n             }\n         return conn;\n     }\n+\n+    public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,\n+            FilterValue start) {\n+        throw new UnsupportedException();\n+    }\n+\n+    public boolean needsToCreateIndex(Index idx, Table table) {\n+       // Informix will automatically create a unique index for the\n+       // primary key, so don't create another index again\n+       PrimaryKey pk = table.getPrimaryKey();\n+       if (pk != null && idx.columnsMatch(pk.getColumns()))\n+           return false;\n+       return true;\n+    }\n }"},{"sha":"3924b90e4f0ea8a5d75cd2201ecef621c4681956","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/7ee08e7c2f82b0c92f0a153a3a1d2666f64aedb7/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/7ee08e7c2f82b0c92f0a153a3a1d2666f64aedb7/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/pom.xml?ref=7ee08e7c2f82b0c92f0a153a3a1d2666f64aedb7","patch":"@@ -118,7 +118,7 @@\n         <profile>\n             <id>jdk1.5</id>\n             <activation>\n-                <jdk>1.5</jdk>\n+                <jdk>(,1.5)</jdk>\n             </activation>\n             <modules>\n                 <module>openjpa-lib-5</module>"}]}

