{"sha":"7f6d88f8a45b12890bf3d901b07765ebbb45f7f9","node_id":"MDY6Q29tbWl0MjA2MzY0OjdmNmQ4OGY4YTQ1YjEyODkwYmYzZDkwMWIwNzc2NWViYmI0NWY3Zjk=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-22T14:13:00Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-04-22T14:13:00Z"},"message":"OPENJPA-1639 Create some simple openjpa-xmlstore tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@936860 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a9d5c95642ba9486d1c081365d333b410005029a","url":"https://api.github.com/repos/apache/openjpa/git/trees/a9d5c95642ba9486d1c081365d333b410005029a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/7f6d88f8a45b12890bf3d901b07765ebbb45f7f9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/7f6d88f8a45b12890bf3d901b07765ebbb45f7f9","html_url":"https://github.com/apache/openjpa/commit/7f6d88f8a45b12890bf3d901b07765ebbb45f7f9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/7f6d88f8a45b12890bf3d901b07765ebbb45f7f9/comments","author":null,"committer":null,"parents":[{"sha":"cb34b9f07fb3ac884c9f6b1166b6770580495bf0","url":"https://api.github.com/repos/apache/openjpa/commits/cb34b9f07fb3ac884c9f6b1166b6770580495bf0","html_url":"https://github.com/apache/openjpa/commit/cb34b9f07fb3ac884c9f6b1166b6770580495bf0"}],"stats":{"total":683,"additions":677,"deletions":6},"files":[{"sha":"4e37c10c74411716d0f4d57ffebbffe9ea45b8bc","filename":"openjpa-xmlstore/pom.xml","status":"modified","additions":90,"deletions":6,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/7f6d88f8a45b12890bf3d901b07765ebbb45f7f9/openjpa-xmlstore/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/7f6d88f8a45b12890bf3d901b07765ebbb45f7f9/openjpa-xmlstore/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/pom.xml?ref=7f6d88f8a45b12890bf3d901b07765ebbb45f7f9","patch":"@@ -21,23 +21,107 @@\n     Maven release plugin requires the project tag to be on a single line. \n -->\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n     <modelVersion>4.0.0</modelVersion>\n-    <groupId>org.apache.openjpa</groupId>\n-    <artifactId>openjpa-xmlstore</artifactId>\n-    <packaging>jar</packaging>\n-    <name>OpenJPA XML Store</name>\n-    <description>OpenJPA XML Store</description>\n-    <url>http://openjpa.apache.org</url>\n+\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n         <version>2.0.1-SNAPSHOT</version>\n     </parent>\n+\n+    <groupId>org.apache.openjpa</groupId>\n+    <artifactId>openjpa-xmlstore</artifactId>\n+    <packaging>jar</packaging>\n+    <name>OpenJPA XML Store</name>\n+    <description>OpenJPA XML Store</description>\n+\n     <dependencies>\n         <dependency>\n             <groupId>org.apache.openjpa</groupId>\n             <artifactId>openjpa-kernel</artifactId>\n             <version>${pom.version}</version>\n         </dependency>\n+        <dependency>\n+            <groupId>org.apache.openjpa</groupId>\n+            <artifactId>openjpa-persistence-jdbc</artifactId>\n+            <version>${pom.version}</version>\n+            <!-- <classifier>test-base</classifier> -->\n+            <type>test-jar</type>\n+            <scope>test</scope>\n+        </dependency>\n     </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <!-- create *-tests.jar -->\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>attach-tests</id>\n+                        <phase>verify</phase>\n+                        <goals>\n+                            <goal>test-jar</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+\n+            <!-- new way of using openjpa-maven-plugin to enhance classes -->\n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>openjpa-maven-plugin</artifactId>\n+                <version>1.1</version>\n+                <configuration>\n+                    <excludes>org/apache/openjpa/xmlstore/**/Test*.class</excludes>\n+                    <excludes>org/apache/openjpa/persistence/**/*.class</excludes>\n+                    <addDefaultConstructor>true</addDefaultConstructor>\n+                    <enforcePropertyRestrictions>true</enforcePropertyRestrictions>\n+                </configuration>\n+                <executions>\n+                    <execution>\n+                        <id>enhancer</id>\n+                        <phase>process-test-classes</phase>\n+                        <goals>\n+                            <goal>test-enhance</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+                <dependencies>\n+                    <dependency>\n+                        <groupId>org.apache.openjpa</groupId>\n+                        <!-- use o-p-j instead of openjpa to avoid cyclical dependency in maven graph -->\n+                        <artifactId>openjpa-persistence-jdbc</artifactId>\n+                        <version>${pom.version}</version>\n+                    </dependency>\n+                </dependencies>\n+            </plugin>\n+\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <argLine>${test.jvm.arguments}</argLine>\n+                    <systemProperties>\n+                        <property>\n+                            <name>openjpa.Log</name>\n+                            <value>${openjpa.Log}</value>\n+                        </property>\n+                        <property>\n+                            <name>openjpa.DynamicEnhancementAgent</name>\n+                            <value>false</value>\n+                        </property>\n+                        <property>\n+                            <name>tests.openjpa.allowfailure</name>\n+                            <value>${tests.openjpa.allowfailure}</value>\n+                        </property>\n+                    </systemProperties>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n </project>\n+"},{"sha":"080755fbd35ff1ca71a49c809422066fa09445a2","filename":"openjpa-xmlstore/src/test/java/org/apache/openjpa/xmlstore/simple/AllFieldTypes.java","status":"added","additions":368,"deletions":0,"changes":368,"blob_url":"https://github.com/apache/openjpa/blob/7f6d88f8a45b12890bf3d901b07765ebbb45f7f9/openjpa-xmlstore/src/test/java/org/apache/openjpa/xmlstore/simple/AllFieldTypes.java","raw_url":"https://github.com/apache/openjpa/raw/7f6d88f8a45b12890bf3d901b07765ebbb45f7f9/openjpa-xmlstore/src/test/java/org/apache/openjpa/xmlstore/simple/AllFieldTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/src/test/java/org/apache/openjpa/xmlstore/simple/AllFieldTypes.java?ref=7f6d88f8a45b12890bf3d901b07765ebbb45f7f9","patch":"@@ -0,0 +1,368 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.xmlstore.simple;\n+\n+import java.io.Serializable;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.List;\n+import java.util.ArrayList;\n+import javax.persistence.Entity;\n+import javax.persistence.OneToOne;\n+import javax.persistence.OneToMany;\n+\n+import org.apache.openjpa.persistence.PersistentCollection;\n+\n+@Entity\n+public class AllFieldTypes implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public static enum EnumType {Value1, Value2};\n+    \n+    // @Basic types\n+    private short shortField;\n+    private int intField;\n+    private boolean booleanField;\n+    private long longField;\n+    private float floatField;\n+    private char charField;\n+    private double doubleField;\n+    private byte byteField;\n+    private Short wShortField;\n+    private Integer wIntegerField;\n+    private Boolean wBooleanField;\n+    private Long wLongField;\n+    private Float wFloatField;\n+    private Character wCharacterField;\n+    private Double wDoubleField;\n+    private Byte wByteField;\n+    private BigInteger bigIntegerField;\n+    private BigDecimal bigDecimalField;\n+    private String stringField;\n+    private Date dateField;\n+    private Calendar calendarField;\n+    private java.sql.Date sqlDateField;\n+    private java.sql.Time sqlTimeField;\n+    private java.sql.Timestamp sqlTimestampField;\n+    private byte[] byteLob;\n+    private Byte[] wByteLob;\n+    private char[] charLob;\n+    private Character[] wCharacterLob;\n+    private EnumType enumField;\n+    private Serializable serializableField;\n+    \n+    // Additional types\n+    private Set<String> setOfStrings = new HashSet<String>();\n+    private String[] arrayOfStrings;\n+\n+    @PersistentCollection\n+    private int[] arrayOfInts;\n+\n+    // one-to-one and one-to-many relations to self\n+    @OneToOne\n+    private AllFieldTypes selfOneOne;\n+    @OneToMany\n+    private List<AllFieldTypes> selfOneMany = new ArrayList<AllFieldTypes>();\n+\n+    public void setShortField(short shortField) {\n+        this.shortField = shortField;\n+    }\n+\n+    public short getShortField() {\n+        return this.shortField;\n+    }\n+\n+    public void setIntField(int intField) {\n+        this.intField = intField;\n+    }\n+\n+    public int getIntField() {\n+        return this.intField;\n+    }\n+\n+    public void setBooleanField(boolean booleanField) {\n+        this.booleanField = booleanField;\n+    }\n+\n+    public boolean getBooleanField() {\n+        return this.booleanField;\n+    }\n+\n+    public void setLongField(long longField) {\n+        this.longField = longField;\n+    }\n+\n+    public long getLongField() {\n+        return this.longField;\n+    }\n+\n+    public void setFloatField(float floatField) {\n+        this.floatField = floatField;\n+    }\n+\n+    public float getFloatField() {\n+        return this.floatField;\n+    }\n+\n+    public void setCharField(char charField) {\n+        this.charField = charField;\n+    }\n+\n+    public char getCharField() {\n+        return this.charField;\n+    }\n+\n+    public void setDoubleField(double doubleField) {\n+        this.doubleField = doubleField;\n+    }\n+\n+    public double getDoubleField() {\n+        return this.doubleField;\n+    }\n+\n+    public void setByteField(byte byteField) {\n+        this.byteField = byteField;\n+    }\n+\n+    public byte getByteField() {\n+        return this.byteField;\n+    }\n+\n+    public void setStringField(String stringField) {\n+        this.stringField = stringField;\n+    }\n+\n+    public String getStringField() {\n+        return this.stringField;\n+    }\n+\n+    public void setDateField(Date dateField) {\n+        this.dateField = dateField;\n+    }\n+\n+    public Date getDateField() {\n+        return this.dateField;\n+    }\n+\n+    public void setSetOfStrings(Set<String> setOfStrings) {\n+        this.setOfStrings = setOfStrings;\n+    }\n+\n+    public Set<String> getSetOfStrings() {\n+        return this.setOfStrings;\n+    }\n+\n+    public void setArrayOfStrings(String[] arrayOfStrings) {\n+        this.arrayOfStrings = arrayOfStrings;\n+    }\n+\n+    public String[] getArrayOfStrings() {\n+        return this.arrayOfStrings;\n+    }\n+\n+    public void setArrayOfInts(int[] arrayOfInts) {\n+        this.arrayOfInts = arrayOfInts;\n+    }\n+\n+    public int[] getArrayOfInts() {\n+        return arrayOfInts;\n+    }\n+\n+    public BigDecimal getBigDecimalField() {\n+        return bigDecimalField;\n+    }\n+\n+    public void setBigDecimalField(BigDecimal bigDecimalField) {\n+        this.bigDecimalField = bigDecimalField;\n+    }\n+\n+    public BigInteger getBigIntegerField() {\n+        return bigIntegerField;\n+    }\n+\n+    public void setBigIntegerField(BigInteger bigIntegerField) {\n+        this.bigIntegerField = bigIntegerField;\n+    }\n+\n+    public byte[] getByteLob() {\n+        return byteLob;\n+    }\n+\n+    public void setByteLob(byte[] byteLob) {\n+        this.byteLob = byteLob;\n+    }\n+\n+    public Calendar getCalendarField() {\n+        return calendarField;\n+    }\n+\n+    public void setCalendarField(Calendar calendarField) {\n+        this.calendarField = calendarField;\n+    }\n+\n+    public char[] getCharLob() {\n+        return charLob;\n+    }\n+\n+    public void setCharLob(char[] charLob) {\n+        this.charLob = charLob;\n+    }\n+\n+    public EnumType getEnumField() {\n+        return enumField;\n+    }\n+\n+    public void setEnumField(EnumType enumField) {\n+        this.enumField = enumField;\n+    }\n+\n+    public Serializable getSerializableField() {\n+        return serializableField;\n+    }\n+\n+    public void setSerializableField(Serializable serializableField) {\n+        this.serializableField = serializableField;\n+    }\n+\n+    public java.sql.Date getSqlDateField() {\n+        return sqlDateField;\n+    }\n+\n+    public void setSqlDateField(java.sql.Date sqlDateField) {\n+        this.sqlDateField = sqlDateField;\n+    }\n+\n+    public java.sql.Time getSqlTimeField() {\n+        return sqlTimeField;\n+    }\n+\n+    public void setSqlTimeField(java.sql.Time sqlTimeField) {\n+        this.sqlTimeField = sqlTimeField;\n+    }\n+\n+    public java.sql.Timestamp getSqlTimestampField() {\n+        return sqlTimestampField;\n+    }\n+\n+    public void setSqlTimestampField(java.sql.Timestamp sqlTimestampField) {\n+        this.sqlTimestampField = sqlTimestampField;\n+    }\n+\n+    public Boolean getWBooleanField() {\n+        return wBooleanField;\n+    }\n+\n+    public void setWBooleanField(Boolean booleanField) {\n+        wBooleanField = booleanField;\n+    }\n+\n+    public Byte getWByteField() {\n+        return wByteField;\n+    }\n+\n+    public void setWByteField(Byte byteField) {\n+        wByteField = byteField;\n+    }\n+\n+    public Byte[] getWByteLob() {\n+        return wByteLob;\n+    }\n+\n+    public void setWByteLob(Byte[] byteLob) {\n+        wByteLob = byteLob;\n+    }\n+\n+    public Character getWCharacterField() {\n+        return wCharacterField;\n+    }\n+\n+    public void setWCharacterField(Character characterField) {\n+        wCharacterField = characterField;\n+    }\n+\n+    public Character[] getWCharacterLob() {\n+        return wCharacterLob;\n+    }\n+\n+    public void setWCharacterLob(Character[] characterLob) {\n+        wCharacterLob = characterLob;\n+    }\n+\n+    public Double getWDoubleField() {\n+        return wDoubleField;\n+    }\n+\n+    public void setWDoubleField(Double doubleField) {\n+        wDoubleField = doubleField;\n+    }\n+\n+    public Float getWFloatField() {\n+        return wFloatField;\n+    }\n+\n+    public void setWFloatField(Float floatField) {\n+        wFloatField = floatField;\n+    }\n+\n+    public Integer getWIntegerField() {\n+        return wIntegerField;\n+    }\n+\n+    public void setWIntegerField(Integer integerField) {\n+        wIntegerField = integerField;\n+    }\n+\n+    public Long getWLongField() {\n+        return wLongField;\n+    }\n+\n+    public void setWLongField(Long longField) {\n+        wLongField = longField;\n+    }\n+\n+    public Short getWShortField() {\n+        return wShortField;\n+    }\n+\n+    public void setWShortField(Short shortField) {\n+        wShortField = shortField;\n+    }\n+\n+    public AllFieldTypes getSelfOneOne() {\n+        return selfOneOne;\n+    }\n+    \n+    public void setSelfOneOne(AllFieldTypes selfOneOne) {\n+        this.selfOneOne = selfOneOne;\n+    }\n+\n+    public List<AllFieldTypes> getSelfOneMany() {\n+        return selfOneMany;\n+    }\n+\n+    public void setSelfOneMany(List<AllFieldTypes> selfOneMany) {\n+        this.selfOneMany = selfOneMany;\n+    }\n+}\n+"},{"sha":"7d835198cf101f74f8281a639e4c2f9b296e4467","filename":"openjpa-xmlstore/src/test/java/org/apache/openjpa/xmlstore/simple/Place.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/7f6d88f8a45b12890bf3d901b07765ebbb45f7f9/openjpa-xmlstore/src/test/java/org/apache/openjpa/xmlstore/simple/Place.java","raw_url":"https://github.com/apache/openjpa/raw/7f6d88f8a45b12890bf3d901b07765ebbb45f7f9/openjpa-xmlstore/src/test/java/org/apache/openjpa/xmlstore/simple/Place.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/src/test/java/org/apache/openjpa/xmlstore/simple/Place.java?ref=7f6d88f8a45b12890bf3d901b07765ebbb45f7f9","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.xmlstore.simple;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class Place implements Serializable {\n+    private static final long serialVersionUID = 1L;\n+    \n+    private String location;\n+\n+    @Id\n+    public String getLocation() {\n+        return location;\n+    }\n+\n+    public void setLocation(String location) {\n+        this.location = location;\n+    }\n+}\n+"},{"sha":"5a6d6b9f35e85e9e5c4149ce173dadd1fb9d69bb","filename":"openjpa-xmlstore/src/test/java/org/apache/openjpa/xmlstore/simple/TestPersistence.java","status":"added","additions":132,"deletions":0,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/7f6d88f8a45b12890bf3d901b07765ebbb45f7f9/openjpa-xmlstore/src/test/java/org/apache/openjpa/xmlstore/simple/TestPersistence.java","raw_url":"https://github.com/apache/openjpa/raw/7f6d88f8a45b12890bf3d901b07765ebbb45f7f9/openjpa-xmlstore/src/test/java/org/apache/openjpa/xmlstore/simple/TestPersistence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/src/test/java/org/apache/openjpa/xmlstore/simple/TestPersistence.java?ref=7f6d88f8a45b12890bf3d901b07765ebbb45f7f9","patch":"@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.xmlstore.simple;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityTransaction;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.test.AbstractPersistenceTestCase;\n+\n+/**\n+ * Simple XMLStore test case to get an EntityManager and perform some basic operations.\n+ */\n+public class TestPersistence extends AbstractPersistenceTestCase {\n+\n+    public void testCreateEntityManager() {\n+        OpenJPAEntityManagerFactorySPI emf = createNamedEMF(\"xmlstore-simple\");\n+        try {\n+            EntityManager em = emf.createEntityManager();\n+\n+            EntityTransaction t = em.getTransaction();\n+            assertNotNull(t);\n+            t.begin();\n+            t.setRollbackOnly();\n+            t.rollback();\n+\n+            // openjpa-facade test\n+            assertTrue(em instanceof OpenJPAEntityManager);\n+            OpenJPAEntityManager ojem = (OpenJPAEntityManager) em;\n+            ojem.getFetchPlan().setMaxFetchDepth(1);\n+            assertEquals(1, ojem.getFetchPlan().getMaxFetchDepth());\n+            em.close();\n+        } finally {\n+            closeEMF(emf);\n+        }\n+    }\n+\n+    public void testQuery() {\n+        OpenJPAEntityManagerFactorySPI emf = createNamedEMF(\"xmlstore-simple\",\n+            CLEAR_TABLES, AllFieldTypes.class);\n+        try {\n+            EntityManager em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            AllFieldTypes aft = new AllFieldTypes();\n+            aft.setStringField(\"foo\");\n+            aft.setIntField(10);\n+            em.persist(aft);\n+            em.getTransaction().commit();\n+            em.close();\n+\n+            em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            assertEquals(1, em.createQuery\n+                (\"select x from AllFieldTypes x where x.stringField = 'foo'\").\n+                getResultList().size());\n+            assertEquals(0, em.createQuery\n+                (\"select x from AllFieldTypes x where x.stringField = 'bar'\").\n+                getResultList().size());\n+            assertEquals(1, em.createQuery\n+                (\"select x from AllFieldTypes x where x.intField >= 10\").\n+                getResultList().size());\n+            em.getTransaction().rollback();\n+            em.close();\n+        } finally {\n+            closeEMF(emf);\n+        }\n+    }\n+\n+    public void testNewDeleteNew() {\n+        OpenJPAEntityManagerFactorySPI emf = createNamedEMF(\"xmlstore-simple\",\n+            CLEAR_TABLES, Place.class);\n+        try {\n+            EntityManager em = emf.createEntityManager();\n+\n+            // create new\n+            Place place = new Place();\n+            place.setLocation(\"Lexington\");\n+            assertFalse(em.contains(place));\n+            em.getTransaction().begin();\n+            em.persist(place);\n+            em.getTransaction().commit();\n+            assertTrue(em.contains(place));\n+\n+            // find and verify\n+            place = em.find(Place.class, \"Lexington\");\n+            assertNotNull(place);\n+            assertEquals(\"Lexington\", place.getLocation());\n+\n+            // delete\n+            em.getTransaction().begin();\n+            em.remove(place);\n+            em.getTransaction().commit();\n+            assertFalse(em.contains(place));\n+\n+            // recreate\n+            place = new Place();\n+            place.setLocation(\"Lexington\");\n+            assertFalse(em.contains(place));\n+            em.getTransaction().begin();\n+            em.persist(place);\n+            em.getTransaction().commit();\n+            assertTrue(em.contains(place));\n+\n+            // find and verify\n+            place = em.find(Place.class, \"Lexington\");\n+            assertNotNull(place);\n+            assertEquals(\"Lexington\", place.getLocation());\n+            em.close();\n+        } finally {\n+            closeEMF(emf);\n+        }\n+    }\n+\n+}\n+"},{"sha":"6dda6cbfa83342e7ab7960138ff28b7b5eed5808","filename":"openjpa-xmlstore/src/test/resources/META-INF/persistence.xml","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/7f6d88f8a45b12890bf3d901b07765ebbb45f7f9/openjpa-xmlstore/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/7f6d88f8a45b12890bf3d901b07765ebbb45f7f9/openjpa-xmlstore/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/src/test/resources/META-INF/persistence.xml?ref=7f6d88f8a45b12890bf3d901b07765ebbb45f7f9","patch":"@@ -0,0 +1,46 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    version=\"2.0\">\n+\n+    <persistence-unit name=\"xmlstore-simple\">\n+        <class>org.apache.openjpa.xmlstore.simple.AllFieldTypes</class>\n+        <class>org.apache.openjpa.xmlstore.simple.Place</class>\n+        <properties>\n+            <property name=\"openjpa.ConnectionURL\"\n+                      value=\"target/openjpa-xmlstore-db\" />\n+            <property name=\"openjpa.BrokerFactory\"\n+                      value=\"org.apache.openjpa.abstractstore.AbstractStoreBrokerFactory\" />\n+            <property name=\"openjpa.abstractstore.AbstractStoreManager\"\n+                      value=\"org.apache.openjpa.xmlstore.XMLStoreManager\" /> \n+            <property name=\"openjpa.LockManager\"\n+                      value=\"org.apache.openjpa.kernel.VersionLockManager\" />\n+            <!--\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\"\n+                value=\"buildSchema\" />\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\"\n+                value=\"builma(ForeignKeys=true)\"/>\n+            -->\n+        </properties>\n+    </persistence-unit>\n+\n+</persistence>\n+"}]}

