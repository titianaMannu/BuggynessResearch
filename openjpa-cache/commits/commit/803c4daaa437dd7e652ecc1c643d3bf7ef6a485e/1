{"sha":"803c4daaa437dd7e652ecc1c643d3bf7ef6a485e","node_id":"MDY6Q29tbWl0MjA2MzY0OjgwM2M0ZGFhYTQzN2RkN2U2NTJlY2MxYzY0M2QzYmY3ZWY2YTQ4NWU=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-07-29T20:36:20Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-07-29T20:36:20Z"},"message":"OPENJPA-890 Fix some inconsistent whitespaces in example code around method signatures and arguments\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@799064 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a438a1e406344a1259301090c866ae45d36a73cb","url":"https://api.github.com/repos/apache/openjpa/git/trees/a438a1e406344a1259301090c866ae45d36a73cb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/803c4daaa437dd7e652ecc1c643d3bf7ef6a485e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/803c4daaa437dd7e652ecc1c643d3bf7ef6a485e","html_url":"https://github.com/apache/openjpa/commit/803c4daaa437dd7e652ecc1c643d3bf7ef6a485e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/803c4daaa437dd7e652ecc1c643d3bf7ef6a485e/comments","author":null,"committer":null,"parents":[{"sha":"efaf681a466f83e92ef6ab75d9774fe1e1c4328c","url":"https://api.github.com/repos/apache/openjpa/commits/efaf681a466f83e92ef6ab75d9774fe1e1c4328c","html_url":"https://github.com/apache/openjpa/commit/efaf681a466f83e92ef6ab75d9774fe1e1c4328c"}],"stats":{"total":164,"additions":82,"deletions":82},"files":[{"sha":"005a7edc71b4c261cbe860fc86ffb8854ea90ee4","filename":"openjpa-project/src/doc/manual/jpa_overview_arch.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/803c4daaa437dd7e652ecc1c643d3bf7ef6a485e/openjpa-project/src/doc/manual/jpa_overview_arch.xml","raw_url":"https://github.com/apache/openjpa/raw/803c4daaa437dd7e652ecc1c643d3bf7ef6a485e/openjpa-project/src/doc/manual/jpa_overview_arch.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_arch.xml?ref=803c4daaa437dd7e652ecc1c643d3bf7ef6a485e","patch":"@@ -213,7 +213,7 @@ container.\n                                \"  FROM Employee e \" +\n                                \" WHERE e.division.name = 'Research' \" +\n                                \"   AND e.avgHours &gt; 40\");\n-  List results = query.getResultList ();\n+  List results = query.getResultList();\n \n   // give all those hard-working employees a raise\n   for (Object res : results) {"},{"sha":"1ac07958e4d333e5cf8742e898f2b7e9cd85ccc7","filename":"openjpa-project/src/doc/manual/jpa_overview_em.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/803c4daaa437dd7e652ecc1c643d3bf7ef6a485e/openjpa-project/src/doc/manual/jpa_overview_em.xml","raw_url":"https://github.com/apache/openjpa/raw/803c4daaa437dd7e652ecc1c643d3bf7ef6a485e/openjpa-project/src/doc/manual/jpa_overview_em.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_em.xml?ref=803c4daaa437dd7e652ecc1c643d3bf7ef6a485e","patch":"@@ -112,7 +112,7 @@ Closing.\n             </secondary>\n         </indexterm>\n <programlisting>\n-public EntityTransaction getTransaction ();\n+public EntityTransaction getTransaction();\n </programlisting>\n         <para>\n Every <classname>EntityManager</classname> has a one-to-one relation with an\n@@ -495,7 +495,7 @@ whose <link linkend=\"jpa_overview_meta_cascade\">cascades</link> include\n             </listitem>\n         </itemizedlist>\n <programlisting>\n-public void lock (Object entity, LockModeType mode);\n+public void lock(Object entity, LockModeType mode);\n </programlisting>\n         <para>\n         <indexterm>"},{"sha":"db8c866d1231b0e79b84d391d8969f4f95a4bed6","filename":"openjpa-project/src/doc/manual/jpa_overview_emfactory.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/803c4daaa437dd7e652ecc1c643d3bf7ef6a485e/openjpa-project/src/doc/manual/jpa_overview_emfactory.xml","raw_url":"https://github.com/apache/openjpa/raw/803c4daaa437dd7e652ecc1c643d3bf7ef6a485e/openjpa-project/src/doc/manual/jpa_overview_emfactory.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_emfactory.xml?ref=803c4daaa437dd7e652ecc1c643d3bf7ef6a485e","patch":"@@ -399,8 +399,8 @@ em.close();\n             </secondary>\n         </indexterm>\n <programlisting>\n-public boolean isOpen ();\n-public void close ();\n+public boolean isOpen();\n+public void close();\n </programlisting>\n         <para>\n <classname>EntityManagerFactory</classname> instances are heavyweight objects."},{"sha":"e2b70112e8eba303334a5a557647b416a6448550","filename":"openjpa-project/src/doc/manual/jpa_overview_mapping.xml","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/803c4daaa437dd7e652ecc1c643d3bf7ef6a485e/openjpa-project/src/doc/manual/jpa_overview_mapping.xml","raw_url":"https://github.com/apache/openjpa/raw/803c4daaa437dd7e652ecc1c643d3bf7ef6a485e/openjpa-project/src/doc/manual/jpa_overview_mapping.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_mapping.xml?ref=803c4daaa437dd7e652ecc1c643d3bf7ef6a485e","patch":"@@ -3124,8 +3124,8 @@ public class LifetimeSubscription\n \n     @Basic(fetch=FetchType.LAZY)\n     @Column(name=\"ELITE\")\n-    private boolean getEliteClub () { ... }\n-    public void setEliteClub (boolean elite) { ... }\n+    private boolean getEliteClub() { ... }\n+    public void setEliteClub(boolean elite) { ... }\n \n     ...\n }\n@@ -3136,8 +3136,8 @@ public class TrialSubscription\n     extends Subscription {\n \n     @Column(name=\"END\")\n-    public Date getEndDate () { ... }\n-    public void setEndDate (Date end) { ... }\n+    public Date getEndDate() { ... }\n+    public void setEndDate(Date end) { ... }\n \n     ...\n }\n@@ -4581,8 +4581,8 @@ public class LifetimeSubscription\n \n     @Basic(fetch=FetchType.LAZY)\n     @Column(name=\"ELITE\")\n-    private boolean getEliteClub () { ... }\n-    public void setEliteClub (boolean elite) { ... }\n+    private boolean getEliteClub() { ... }\n+    public void setEliteClub(boolean elite) { ... }\n \n     ...\n }\n@@ -4593,8 +4593,8 @@ public class TrialSubscription\n     extends Subscription {\n \n     @Column(name=\"END\")\n-    public Date getEndDate () { ... }\n-    public void setEndDate (Date end) { ... }\n+    public Date getEndDate() { ... }\n+    public void setEndDate(Date end) { ... }\n \n     ...\n }"},{"sha":"a671e6559bc18b58f5b59fcb9e9ce516c2749774","filename":"openjpa-project/src/doc/manual/jpa_overview_pc.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/803c4daaa437dd7e652ecc1c643d3bf7ef6a485e/openjpa-project/src/doc/manual/jpa_overview_pc.xml","raw_url":"https://github.com/apache/openjpa/raw/803c4daaa437dd7e652ecc1c643d3bf7ef6a485e/openjpa-project/src/doc/manual/jpa_overview_pc.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_pc.xml?ref=803c4daaa437dd7e652ecc1c643d3bf7ef6a485e","patch":"@@ -1290,7 +1290,7 @@ public class MagazineLogger {\n \n     @PostPersist\n     public void logAddition(Object pc) {\n-        getLog ().debug (\"Added new magazine:\" + ((Magazine) pc).getTitle ());\n+        getLog().debug(\"Added new magazine:\" + ((Magazine) pc).getTitle());\n     }\n \n "},{"sha":"4ad1a59c163fcd9b194697c332d60d74de7dd342","filename":"openjpa-project/src/doc/manual/jpa_overview_sqlquery.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/803c4daaa437dd7e652ecc1c643d3bf7ef6a485e/openjpa-project/src/doc/manual/jpa_overview_sqlquery.xml","raw_url":"https://github.com/apache/openjpa/raw/803c4daaa437dd7e652ecc1c643d3bf7ef6a485e/openjpa-project/src/doc/manual/jpa_overview_sqlquery.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_sqlquery.xml?ref=803c4daaa437dd7e652ecc1c643d3bf7ef6a485e","patch":"@@ -233,7 +233,7 @@ query.setParameter(2, 10d);\n \n List&lt;Magazine&gt; results = (List&lt;Magazine&gt;) query.getResultList();\n for (Magazine mag : results)\n-    processMagazine (mag);\n+    processMagazine(mag);\n </programlisting>\n         </example>\n         <para>"},{"sha":"9aae52b12e963b8d62172f2264e18191419a1d13","filename":"openjpa-project/src/doc/manual/jpa_tutorials.xml","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/803c4daaa437dd7e652ecc1c643d3bf7ef6a485e/openjpa-project/src/doc/manual/jpa_tutorials.xml","raw_url":"https://github.com/apache/openjpa/raw/803c4daaa437dd7e652ecc1c643d3bf7ef6a485e/openjpa-project/src/doc/manual/jpa_tutorials.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_tutorials.xml?ref=803c4daaa437dd7e652ecc1c643d3bf7ef6a485e","patch":"@@ -526,11 +526,11 @@ AnimalMaintenance.java</filename> to look like this:\n      *  @param  cls         the class of animal to query on\n      *  @param  em          the EntityManager to obtain the query from\n      */\n-    public static List getAnimals (String filter, EntityManager em)\n+    public static List getAnimals(String filter, EntityManager em)\n     {\n         // Execute a query for the specified filter.\n-        Query query = em.createQuery (filter);\n-        return query.getResultList ();\n+        Query query = em.createQuery(filter);\n+        return query.getResultList();\n     }\n </programlisting>\n                 </listitem>\n@@ -612,17 +612,17 @@ AnimalMaintenance.java</filename> to look like this:\n      *\n      *  @param  object  the object to persist in the data store\n      */\n-    public static void persistObject (EntityManager em, Object object)\n+    public static void persistObject(EntityManager em, Object object)\n     {\n         // Mark the beginning of the unit of work boundary.\n-        em.getTransaction ().begin ();\n+        em.getTransaction().begin();\n \n-        em.persist (object);\n+        em.persist(object);\n \n         // Mark the end of the unit of work boundary,\n         // and record all inserts in the database.\n-        em.getTransaction ().commit ();\n-        System.out.println (\"Added \" + object);\n+        em.getTransaction().commit();\n+        System.out.println(\"Added \" + object);\n     }\n </programlisting>\n                         <note>\n@@ -694,21 +694,21 @@ AnimalMaintenance.java</filename> to look like this:\n      *  @param  objects     the objects to persist in the datastore\n      *  @param  em          the EntityManager to delete with\n      */\n-    public static void deleteObjects (Collection objects, EntityManager em)\n+    public static void deleteObjects(Collection objects, EntityManager em)\n     {\n         // Mark the beginning of the unit of work boundary.\n-        em.getTransaction ().begin ();\n+        em.getTransaction().begin();\n \n         // This method removes the objects in 'objects' from the data store.\n         for (Object ob : objects)\n         {\n-            System.out.println (\"Removed animal: \" + ob);\n-            em.remove (ob);\n+            System.out.println(\"Removed animal: \" + ob);\n+            em.remove(ob);\n         }\n \n         // Mark the end of the unit of work boundary, and record all\n         // deletes in the database.\n-        em.getTransaction ().commit ();\n+        em.getTransaction().commit();\n     }\n </programlisting>\n                     </listitem>\n@@ -981,27 +981,27 @@ For more information on types of relations, see\n <xref linkend=\"jpa_overview_mapping_field\"/> of the JPA Overview.\n                     </para>\n                     <para>\n-Modify the <literal>toString (boolean)</literal> method to output the giTract\n+Modify the <literal>toString(boolean)</literal> method to output the giTract\n list.\n                     </para>\n <programlisting>\n-    public String toString (boolean detailed)\n+    public String toString(boolean detailed)\n     {\n-        StringBuffer buf = new StringBuffer (1024);\n-        buf.append (\"Snake \").append (getName ());\n+        StringBuffer buf = new StringBuffer(1024);\n+        buf.append(\"Snake \").append(getName());\n \n         if (detailed)\n         {\n-            buf.append (\" (\").append (length).append (\" feet long) sells for \");\n-            buf.append (getPrice ()).append (\" dollars.\");\n-            buf.append (\"  Its gastrointestinal tract contains:\\n\");\n+            buf.append(\" (\").append(length).append(\" feet long) sells for \");\n+            buf.append(getPrice()).append(\" dollars.\");\n+            buf.append(\"  Its gastrointestinal tract contains:\\n\");\n             for (Rabbit rabbit : giTract)\n-                buf.append (\"\\t\").append (rabbit).append (\"\\n\");\n+                buf.append(\"\\t\").append(rabbit).append(\"\\n\");\n         }\n         else\n-            buf.append (\"; ate \" + giTract.size () + \" rabbits.\");\n+            buf.append(\"; ate \" + giTract.size() + \" rabbits.\");\n \n-        return buf.toString ();\n+        return buf.toString();\n     }\n </programlisting>\n                     <para>\n@@ -1011,75 +1011,75 @@ Add the following methods.\n     /**\n      *  Kills the specified rabbit and eats it.\n      */\n-    public void eat (Rabbit dinner)\n+    public void eat(Rabbit dinner)\n     {\n         // Consume the rabbit.\n-        dinner.kill ();\n-        dinner.setEater (this);\n-        giTract.add (dinner);\n-        System.out.println (\"Snake \" + getName () + \" ate rabbit \" \n-            + dinner.getName () + \".\");\n+        dinner.kill();\n+        dinner.setEater(this);\n+        giTract.add(dinner);\n+        System.out.println(\"Snake \" + getName() + \" ate rabbit \" \n+            + dinner.getName() + \".\");\n     }\n \n \n     /**\n      *  Locates the specified snake and tells it to eat a rabbit.\n      */\n-    public static void eat (EntityManager em, String filter)\n+    public static void eat(EntityManager em, String filter)\n     {\n-        em.getTransaction ().begin ();\n+        em.getTransaction().begin();\n \n         // Find the desired snake(s) in the data store.\n-        Query query = em.createQuery (filter);\n-        List&lt;Snake&gt; results = query.getResultList ();\n-        if (results.isEmpty ())\n+        Query query = em.createQuery(filter);\n+        List&lt;Snake&gt; results = query.getResultList();\n+        if (results.isEmpty())\n         {\n-            System.out.println (\"No snakes matching '\" + filter + \"' found\");\n+            System.out.println(\"No snakes matching '\" + filter + \"' found\");\n             return;\n         }\n \n         Query uneatenQuery = em.createQuery\n             (\"select r from Rabbit r where r.isDead = false\");\n-        Random random = new Random ();\n+        Random random = new Random();\n         for (Snake snake : results)\n         {\n             // Run a query for a rabbit whose 'isDead' field indicates\n             // that it is alive.\n-            List&lt;Rabbit&gt; menu = uneatenQuery.getResultList ();\n-            if (menu.isEmpty ())\n+            List&lt;Rabbit&gt; menu = uneatenQuery.getResultList();\n+            if (menu.isEmpty())\n             {\n-                System.out.println (\"No live rabbits in DB.\");\n+                System.out.println(\"No live rabbits in DB.\");\n                 break;\n             }\n \n             // Select a random rabbit from the list.\n-            Rabbit dinner = menu.get (random.nextInt (menu.size ()));\n+            Rabbit dinner = menu.get(random.nextInt(menu.size()));\n \n             // Perform the eating.\n-            System.out.println (snake + \" is eating:\");\n-            snake.eat (dinner);\n+            System.out.println(snake + \" is eating:\");\n+            snake.eat(dinner);\n         }\n \n-        em.getTransaction ().commit ();\n+        em.getTransaction().commit();\n     }\n \n \n-    public static void main (String[] args)\n+    public static void main(String[] args)\n     {\n-        if (args.length == 2 &amp;&amp; args[0].equals (\"eat\"))\n+        if (args.length == 2 &amp;&amp; args[0].equals(\"eat\"))\n         {\n             EntityManagerFactory emf = Persistence.\n-                createEntityManagerFactory (null);\n-            EntityManager em = emf.createEntityManager ();\n-            eat (em, args[1]);\n-            em.close ();\n-            emf.close ();\n+                createEntityManagerFactory(null);\n+            EntityManager em = emf.createEntityManager();\n+            eat(em, args[1]);\n+            em.close();\n+            emf.close();\n             return;\n         }\n \n         // If we get here, something went wrong.\n-        System.out.println (\"Usage:\");\n-        System.out.println (\"  java tutorial.persistence.Snake eat \"\n+        System.out.println(\"Usage:\");\n+        System.out.println(\"  java tutorial.persistence.Snake eat \"\n             + \"\\\"snakequery\\\"\");\n     }\n </programlisting>\n@@ -1095,13 +1095,13 @@ a getter and setter.\n \n     ...\n \n-    public Snake getEater ()\n+    public Snake getEater()\n     {\n         return eater;\n     }\n \n \n-    public void setEater (Snake snake)\n+    public void setEater(Snake snake)\n     {\n         eater = snake;\n     }"},{"sha":"6bae344daafbb8fdf7e9bd71c6f0b6e981adfb99","filename":"openjpa-project/src/doc/manual/ref_guide_caching.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/803c4daaa437dd7e652ecc1c643d3bf7ef6a485e/openjpa-project/src/doc/manual/ref_guide_caching.xml","raw_url":"https://github.com/apache/openjpa/raw/803c4daaa437dd7e652ecc1c643d3bf7ef6a485e/openjpa-project/src/doc/manual/ref_guide_caching.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_caching.xml?ref=803c4daaa437dd7e652ecc1c643d3bf7ef6a485e","patch":"@@ -707,7 +707,7 @@ EntityManager em = emf.createEntityManager();\n Query q = em.createQuery(...).\n     setParameter(0, paramVal0).\n     setParameter(1, paramVal1);\n-qcache.evict (q);\n+qcache.evict(q);\n </programlisting>\n             </example>\n             <para>\n@@ -777,7 +777,7 @@ import org.apache.openjpa.persistence.*;\n \n // temporarily disable query caching for all queries created from em\n OpenJPAEntityManager oem = OpenJPAPersistence.cast(em);\n-oem.getFetchPlan ().setQueryResultCacheEnabled(false);\n+oem.getFetchPlan().setQueryResultCacheEnabled(false);\n \n // re-enable caching for a particular query\n OpenJPAQuery oq = oem.createQuery(...);"},{"sha":"3bd78e52303a6424e50aa88f3205a272edd351df","filename":"openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/803c4daaa437dd7e652ecc1c643d3bf7ef6a485e/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","raw_url":"https://github.com/apache/openjpa/raw/803c4daaa437dd7e652ecc1c643d3bf7ef6a485e/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml?ref=803c4daaa437dd7e652ecc1c643d3bf7ef6a485e","patch":"@@ -3708,7 +3708,7 @@ import org.apache.openjpa.persistence.jdbc.*;\n \n Query q = em.createQuery(\"select m from Magazine m where m.title = 'JDJ'\");\n OpenJPAQuery kq = OpenJPAPersistence.cast(q);\n-JDBCFetchPlan fetch = (JDBCFetchPlan) kq.getFetchPlan ();\n+JDBCFetchPlan fetch = (JDBCFetchPlan) kq.getFetchPlan();\n fetch.setJoinSyntax(JoinSyntax.SQL92);\n List results = q.getResultList();\n </programlisting>"},{"sha":"35b96587b9406b7f045a48960509467dee728370","filename":"openjpa-project/src/doc/manual/ref_guide_logging.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/803c4daaa437dd7e652ecc1c643d3bf7ef6a485e/openjpa-project/src/doc/manual/ref_guide_logging.xml","raw_url":"https://github.com/apache/openjpa/raw/803c4daaa437dd7e652ecc1c643d3bf7ef6a485e/openjpa-project/src/doc/manual/ref_guide_logging.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_logging.xml?ref=803c4daaa437dd7e652ecc1c643d3bf7ef6a485e","patch":"@@ -507,7 +507,7 @@ public class CustomLogFactory\n \n     private String _prefix = \"CUSTOM LOG\";\n \n-    public void setPrefix (String prefix) {\n+    public void setPrefix(String prefix) {\n         _prefix = prefix;\n     }\n  \n@@ -522,7 +522,7 @@ public class CustomLogFactory\n                 return true;\n             }\n \n-            protected void log (short type, String message, Throwable t) {\n+            protected void log(short type, String message, Throwable t) {\n                 // just send everything to System.err\n                 System.err.println(_prefix + \": \" + type + \": \"\n                     + message + \": \" + t);"},{"sha":"c4f585c1f75a5be784bcbded88665b74d3137e4d","filename":"openjpa-project/src/doc/manual/ref_guide_pc.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/803c4daaa437dd7e652ecc1c643d3bf7ef6a485e/openjpa-project/src/doc/manual/ref_guide_pc.xml","raw_url":"https://github.com/apache/openjpa/raw/803c4daaa437dd7e652ecc1c643d3bf7ef6a485e/openjpa-project/src/doc/manual/ref_guide_pc.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_pc.xml?ref=803c4daaa437dd7e652ecc1c643d3bf7ef6a485e","patch":"@@ -1759,7 +1759,7 @@ public class Magazine {\n         ... logic to pack custom type into a list of authors ...\n     }\n \n-    public static CustomType authorsToCustomType (Collection authors) {\n+    public static CustomType authorsToCustomType(Collection authors) {\n         ... logic to create custom type from a collection of authors ...\n     }\n "},{"sha":"7a9a943595fc9171e961dbe1e66071d94b3b4e17","filename":"openjpa-project/src/doc/manual/ref_guide_runtime.xml","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/803c4daaa437dd7e652ecc1c643d3bf7ef6a485e/openjpa-project/src/doc/manual/ref_guide_runtime.xml","raw_url":"https://github.com/apache/openjpa/raw/803c4daaa437dd7e652ecc1c643d3bf7ef6a485e/openjpa-project/src/doc/manual/ref_guide_runtime.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_runtime.xml?ref=803c4daaa437dd7e652ecc1c643d3bf7ef6a485e","patch":"@@ -347,7 +347,7 @@ import org.apache.openjpa.persistence.*;\n OpenJPAEntityManager kem = OpenJPAPersistence.cast(em);\n Extent&lt;Magazine&gt; mags = kem.createExtent(Magazine.class, false);\n for (Magazine m : mags)\n-    processMagazine (m);\n+    processMagazine(m);\n </programlisting>\n             </example>\n         </section>\n@@ -619,7 +619,7 @@ em.getTransaction().begin();\n Query q = em.createQuery(\"select s from Stock s where symbol = :s\");\n q.setParameter(\"s\", symbol);\n OpenJPAQuery oq = OpenJPAPersistence.cast(q);\n-FetchPlan fetch = oq.getFetchPlan ();\n+FetchPlan fetch = oq.getFetchPlan();\n fetch.setReadLockMode(LockModeType.WRITE);\n fetch.setLockTimeout(3000); // 3 seconds\n Stock stock = (Stock) q.getSingleResult();\n@@ -693,7 +693,7 @@ if (level == OpenJPAModeType.WRITE) ...\n ...\n \n oem.setOptimistic(true);\n-oem.getTransaction().begin ();\n+oem.getTransaction().begin();\n \n // override default of not locking during an opt trans to lock stock object\n oem.lock(stock, LockModeType.WRITE, 1000);\n@@ -1139,8 +1139,8 @@ the 3 characters 'H', 'a', 'r'.\n                     Basic Filter Extension\n                 </title>\n <programlisting>\n-Query q = em.createQuery (\"select c from City c where c.name.ext:firstThreeChars () = 'Har'\");\n-List results = q.getResultList ();\n+Query q = em.createQuery(\"select c from City c where c.name.ext:firstThreeChars () = 'Har'\");\n+List results = q.getResultList();\n </programlisting>\n             </example>\n             <para>\n@@ -1153,9 +1153,9 @@ extension, <literal>equalsIgnoreCase</literal>:\n                     Chaining Filter Extensions\n                 </title>\n <programlisting>\n-Query query = em.createQuery (\"select c from City c where \"\n+Query query = em.createQuery(\"select c from City c where \"\n     + \"c.name.ext:firstThreeChars ().ext:equalsIgnoreCase ('Har')\");\n-List results = q.getResultList ();\n+List results = q.getResultList();\n </programlisting>\n             </example>\n             <para>"}]}

