{"sha":"80671afcbf5802e3340c65ebda7e7bdf9bec75af","node_id":"MDY6Q29tbWl0MjA2MzY0OjgwNjcxYWZjYmY1ODAyZTMzNDBjNjVlYmRhN2U3YmRmOWJlYzc1YWY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-05-04T20:58:49Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-05-04T20:58:49Z"},"message":"OPENJPA-235. Reformatted code to meet OpenJPA conventions; widened some type arguments that seemed unnecessarily narrow.\n\nThis passes all the OpenJPA tests in my environment, and the logic seems sound. I think that we could adjust the algorithm to require less collection copying, but I don't think that we should hold up the commit for that type of optimization.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@535379 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"99b65b63f581a7bd177fb5d10364e6bd10050678","url":"https://api.github.com/repos/apache/openjpa/git/trees/99b65b63f581a7bd177fb5d10364e6bd10050678"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/80671afcbf5802e3340c65ebda7e7bdf9bec75af","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/80671afcbf5802e3340c65ebda7e7bdf9bec75af","html_url":"https://github.com/apache/openjpa/commit/80671afcbf5802e3340c65ebda7e7bdf9bec75af","comments_url":"https://api.github.com/repos/apache/openjpa/commits/80671afcbf5802e3340c65ebda7e7bdf9bec75af/comments","author":null,"committer":null,"parents":[{"sha":"33aa3cb59f4be199e547db25e23da212b8b0de98","url":"https://api.github.com/repos/apache/openjpa/commits/33aa3cb59f4be199e547db25e23da212b8b0de98","html_url":"https://github.com/apache/openjpa/commit/33aa3cb59f4be199e547db25e23da212b8b0de98"}],"stats":{"total":531,"additions":521,"deletions":10},"files":[{"sha":"edbc960c61d6b484c4bef1f23c8f54650e26ad42","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/OperationOrderUpdateManager.java","status":"modified","additions":144,"deletions":10,"changes":154,"blob_url":"https://github.com/apache/openjpa/blob/80671afcbf5802e3340c65ebda7e7bdf9bec75af/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/OperationOrderUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/80671afcbf5802e3340c65ebda7e7bdf9bec75af/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/OperationOrderUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/OperationOrderUpdateManager.java?ref=80671afcbf5802e3340c65ebda7e7bdf9bec75af","patch":"@@ -14,16 +14,21 @@\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  * KIND, either express or implied.  See the License for the\n  * specific language governing permissions and limitations\n- * under the License.    \n+ * under the License.\n  */\n package org.apache.openjpa.jdbc.kernel;\n \n import java.sql.Connection;\n import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.HashMap;\n import java.util.Iterator;\n+import java.util.List;\n+import java.util.Stack;\n+import java.util.Map;\n \n+import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.sql.PrimaryRow;\n import org.apache.openjpa.jdbc.sql.Row;\n@@ -34,7 +39,7 @@\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n \n /**\n- * Update manager that writes SQL in object-level operation order.\n+ * Update manager that writes SQL in object-level operation order\n  *\n  * @author Abe White\n  */\n@@ -66,13 +71,20 @@ protected Collection flush(RowManager rowMgr,\n \n         // now do any 'all row' updates, which typically null keys\n         flush(rmimpl.getAllRowUpdates(), psMgr);\n+        \n+        // map statemanagers to primaryrows\n+        Map smMap = mapStateManagers(rmimpl.getOrdered());\n+        \n+        // order rows to avoid constraint violations\n+        List orderedRows = orderRows(rmimpl, smMap);\n \n         // gather any updates we need to avoid fk constraints on deletes\n         Collection constraintUpdates = null;\n-        for (Iterator itr = rmimpl.getDeletes().iterator(); itr.hasNext();) {\n+        for (Iterator itr = orderedRows.iterator(); itr.hasNext();) {\n             try {\n                 constraintUpdates = analyzeDeleteConstraints(rmimpl,\n-                    (PrimaryRow) itr.next(), constraintUpdates);\n+                    (PrimaryRow) itr.next(), constraintUpdates, smMap,\n+                    orderedRows);\n             } catch (SQLException se) {\n                 exceps = addException(exceps, SQLExceptions.getStore\n                     (se, dict));\n@@ -82,17 +94,18 @@ protected Collection flush(RowManager rowMgr,\n             flush(constraintUpdates, psMgr);\n             constraintUpdates.clear();\n         }\n-\n+        \n         // flush primary rows in order\n-        for (Iterator itr = rmimpl.getOrdered().iterator(); itr.hasNext();) {\n+        for (Iterator itr = orderedRows.iterator(); itr.hasNext();) {\n             try {\n                 constraintUpdates = flushPrimaryRow(rmimpl, (PrimaryRow)\n-                    itr.next(), psMgr, constraintUpdates);\n+                    itr.next(), psMgr, constraintUpdates, smMap, orderedRows);\n             } catch (SQLException se) {\n                 exceps = addException(exceps, SQLExceptions.getStore\n                     (se, dict));\n             }\n         }\n+\n         if (constraintUpdates != null)\n             flush(constraintUpdates, psMgr);\n \n@@ -106,14 +119,122 @@ protected Collection flush(RowManager rowMgr,\n         return exceps;\n     }\n \n+    /**\n+     * Reorders all rows provided by the specified RowManagerImpl such that\n+     * no foreign key constraints are violated (assuming a proper schema).\n+     * @param rmimpl RowManagerImpl\n+     */\n+    private List orderRows(RowManagerImpl rmimpl, Map smMap) {\n+        List orderedRows = new ArrayList();\n+        if (rmimpl.getOrdered().size() > 0) {\n+            List inserts = new ArrayList(rmimpl.getInserts());\n+            List updates = new ArrayList(rmimpl.getUpdates());\n+            List deletes = new ArrayList(rmimpl.getDeletes());\n+\n+            orderedRows.addAll(orderRows(inserts, smMap));\n+            orderedRows.addAll(updates);\n+            orderedRows.addAll(orderRows(deletes, smMap));\n+        }\n+        return orderedRows;\n+    }\n+\n+    private List orderRows(List unorderedList, Map smMap) {\n+        List orderedList = new ArrayList();\n+        // this iterates in a while loop instead of with an iterator to\n+        // avoid ConcurrentModificationExceptions, as unorderedList is\n+        // mutated in the orderRow() invocation.\n+        while (!unorderedList.isEmpty()) {\n+            PrimaryRow nextRow = (PrimaryRow) unorderedList.get(0);\n+            orderRow(nextRow, unorderedList, orderedList, smMap, new Stack());\n+        }\n+        return orderedList;\n+    }\n+\n+    private void orderRow(PrimaryRow currentRow, Collection unordered,\n+        List orderedList, Map smMap, Stack visitedRows) {\n+        if (orderedList.contains(currentRow)) {\n+            return;\n+        }\n+\n+        // a circular reference found which means there is a problem\n+        // with the underlying database schema and/or class metadata\n+        // definitions. nothing can be done here to correct the problem.\n+        if (visitedRows.contains(currentRow)) {\n+            orderedList.addAll(unordered);\n+            unordered.clear();\n+            return;\n+        }\n+\n+        if (currentRow.getAction() == Row.ACTION_INSERT) {\n+            ForeignKey[] fks = currentRow.getTable().getForeignKeys();\n+            OpenJPAStateManager sm;\n+            for (int i = 0; i < fks.length; i++) {\n+                sm = currentRow.getForeignKeySet(fks[i]);\n+                if (sm == null)\n+                    continue;\n+                // if the foreign key is new and it's primary key is\n+                // auto assigned\n+                PrimaryRow fkRow = (PrimaryRow) smMap.get(sm);\n+                if (fkRow.getAction() == Row.ACTION_INSERT) {\n+                    boolean nullable = true;\n+                    Column[] columns = fks[i].getColumns();\n+                    for (int j = 0; j < columns.length; j++) {\n+                        if (columns[j].isNotNull()) {\n+                            nullable = false;\n+                            break;\n+                        }\n+                    }\n+                    if (!nullable) {\n+                        visitedRows.push(currentRow);\n+                        PrimaryRow nextRow = (PrimaryRow) smMap.get(sm);\n+                        orderRow(nextRow, unordered, orderedList, smMap,\n+                            visitedRows);\n+                        visitedRows.pop();\n+                    }\n+                }\n+            }\n+            if (!orderedList.contains(currentRow)) {\n+                unordered.remove(currentRow);\n+                orderedList.add(currentRow);\n+            }\n+        } else if (currentRow.getAction() == Row.ACTION_DELETE) {\n+            ForeignKey[] fks = currentRow.getTable().getForeignKeys();\n+            OpenJPAStateManager sm;\n+            for (int i = 0; i < fks.length; i++) {\n+                sm = currentRow.getForeignKeySet(fks[i]);\n+                if (sm == null)\n+                    continue;\n+                PrimaryRow fkRow = (PrimaryRow) smMap.get(sm);\n+                // if the foreign key is going to be deleted\n+                if (!orderedList.contains(fkRow)\n+                    && fkRow.getAction() == Row.ACTION_DELETE) {\n+                    visitedRows.add(currentRow);\n+                    orderRow(fkRow, unordered, orderedList, smMap, visitedRows);\n+                    visitedRows.remove(currentRow);\n+                }\n+            }\n+            unordered.remove(currentRow);\n+            orderedList.add(0, currentRow);\n+        }\n+    }\n+\n+    private Map mapStateManagers(List rowList) {\n+        Map smMap = new HashMap();\n+        for (Iterator iter = rowList.iterator(); iter.hasNext();) {\n+            PrimaryRow row = (PrimaryRow) iter.next();\n+            smMap.put(row.getPrimaryKey(), row);\n+        }\n+        return smMap;\n+    }\n+\n     /**\n      * Analyze the delete constraints on the given row, gathering necessary\n      * updates to null fks before deleting.\n      */\n     private Collection analyzeDeleteConstraints(RowManagerImpl rowMgr,\n-        PrimaryRow row, Collection updates)\n+        PrimaryRow row, Collection updates, Map smMap, List orderedRows)\n         throws SQLException {\n-        if (!row.isValid())\n+        if (!row.isValid() || row.getAction() != Row.ACTION_DELETE)\n             return updates;\n \n         ForeignKey[] fks = row.getTable().getForeignKeys();\n@@ -127,6 +248,11 @@ private Collection analyzeDeleteConstraints(RowManagerImpl rowMgr,\n                 sm = row.getForeignKeyWhere(fks[i]);\n             if (sm == null)\n                 continue;\n+            PrimaryRow fkRow = (PrimaryRow) smMap.get(sm);\n+            int fkIndex = orderedRows.indexOf(fkRow);\n+            int rIndex = orderedRows.indexOf(row);\n+            if (fkIndex > rIndex)\n+                continue;\n \n             // only need an update if we have an fk to a row that's being\n             // deleted before we are\n@@ -152,7 +278,8 @@ private Collection analyzeDeleteConstraints(RowManagerImpl rowMgr,\n      * Flush the given row, creating deferred updates for dependencies.\n      */\n     private Collection flushPrimaryRow(RowManagerImpl rowMgr, PrimaryRow row,\n-        PreparedStatementManager psMgr, Collection updates)\n+        PreparedStatementManager psMgr, Collection updates, Map smMap,\n+        List orderedRows)\n         throws SQLException {\n         if (!row.isValid())\n             return updates;\n@@ -172,6 +299,13 @@ private Collection flushPrimaryRow(RowManagerImpl rowMgr, PrimaryRow row,\n             if (sm == null)\n                 continue;\n \n+            PrimaryRow fkRow = (PrimaryRow) smMap.get(sm);\n+            int fkIndex = orderedRows.indexOf(fkRow);\n+            int rIndex = orderedRows.indexOf(row);\n+            // consider sm flushed, no need to defer\n+            if (rIndex > fkIndex)\n+                continue;\n+\n             // only need an update if we have an fk to a row that's being\n             // inserted after we are; if row is dependent on itself and no\n             // fk, must be an auto-inc because otherwise we wouldn't have"},{"sha":"5003166f66b737b343d94b12b18290f5e4d08207","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityA.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/80671afcbf5802e3340c65ebda7e7bdf9bec75af/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityA.java","raw_url":"https://github.com/apache/openjpa/raw/80671afcbf5802e3340c65ebda7e7bdf9bec75af/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityA.java?ref=80671afcbf5802e3340c65ebda7e7bdf9bec75af","patch":"@@ -0,0 +1,79 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.jdbc.kernel;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.JoinColumn;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Version;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\r\n+\r\n+@Entity\r\n+public class EntityA {\r\n+\r\n+    @Id\r\n+    @Column(name = \"entitya_id\", nullable = false)\r\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n+    private Integer id;\r\n+\r\n+    private String name;\r\n+\r\n+    @OneToOne(cascade = CascadeType.ALL, optional = false)\r\n+    @JoinColumn(name = \"entityb_id\", referencedColumnName = \"entityb_id\",\r\n+        nullable = false)\r\n+    @ForeignKey\r\n+    private EntityB entityB;\r\n+\r\n+    @Version\r\n+    private Integer optLock;\r\n+\r\n+    public EntityA() {\r\n+    }\r\n+\r\n+    public void setId(Integer id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public Integer getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public EntityB getEntityB() {\r\n+        return this.entityB;\r\n+    }\r\n+\r\n+    public void setEntityB(EntityB entityB) {\r\n+        this.entityB = entityB;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return this.name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+}\r\n+\r"},{"sha":"a4087f2b039f6c90f3a516a79d4c2c1df799e4e6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityB.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/80671afcbf5802e3340c65ebda7e7bdf9bec75af/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityB.java","raw_url":"https://github.com/apache/openjpa/raw/80671afcbf5802e3340c65ebda7e7bdf9bec75af/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityB.java?ref=80671afcbf5802e3340c65ebda7e7bdf9bec75af","patch":"@@ -0,0 +1,79 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.jdbc.kernel;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.JoinColumn;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Version;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\r\n+\r\n+@Entity\r\n+public class EntityB {\r\n+\r\n+    @Id\r\n+    @Column(name = \"entityb_id\", nullable = false)\r\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n+    private Integer id;\r\n+\r\n+    private String name;\r\n+\r\n+    @OneToOne(cascade = CascadeType.ALL, optional = false)\r\n+    @JoinColumn(name = \"entityc_id\", referencedColumnName = \"entityc_id\",\r\n+        nullable = false)\r\n+    @ForeignKey\r\n+    private EntityC entityC;\r\n+\r\n+    @Version\r\n+    private Integer optLock;\r\n+\r\n+    public EntityB() {\r\n+    }\r\n+\r\n+    public void setId(Integer id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public Integer getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public EntityC getEntityC() {\r\n+        return this.entityC;\r\n+    }\r\n+\r\n+    public void setEntityC(EntityC entityC) {\r\n+        this.entityC = entityC;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return this.name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+}\r\n+\r"},{"sha":"03c85b4f31f07e6cb5392e1890a098eaf51ea522","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityC.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/80671afcbf5802e3340c65ebda7e7bdf9bec75af/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityC.java","raw_url":"https://github.com/apache/openjpa/raw/80671afcbf5802e3340c65ebda7e7bdf9bec75af/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityC.java?ref=80671afcbf5802e3340c65ebda7e7bdf9bec75af","patch":"@@ -0,0 +1,81 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.jdbc.kernel;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.JoinColumn;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Version;\r\n+\r\n+import org.apache.openjpa.persistence.Dependent;\r\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\r\n+\r\n+@Entity\r\n+public class EntityC {\r\n+\r\n+    @Id\r\n+    @Column(name = \"entityc_id\", nullable = false)\r\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n+    private Integer id;\r\n+\r\n+    private String name;\r\n+\r\n+    @OneToOne(cascade = CascadeType.ALL, optional = false)\r\n+    @JoinColumn(name = \"entityd_id\", referencedColumnName = \"entityd_id\",\r\n+        nullable = false)\r\n+    @ForeignKey\r\n+    @Dependent\r\n+    private EntityD entityD;\r\n+\r\n+    @Version\r\n+    private Integer optLock;\r\n+\r\n+    public EntityC() {\r\n+    }\r\n+\r\n+    public void setId(Integer id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public Integer getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public EntityD getEntityD() {\r\n+        return this.entityD;\r\n+    }\r\n+\r\n+    public void setEntityD(EntityD entityD) {\r\n+        this.entityD = entityD;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return this.name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+}\r\n+\r"},{"sha":"4f5c7e488e3d54a20458a6464246b9e17f6ee5fb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityD.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/80671afcbf5802e3340c65ebda7e7bdf9bec75af/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityD.java","raw_url":"https://github.com/apache/openjpa/raw/80671afcbf5802e3340c65ebda7e7bdf9bec75af/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityD.java?ref=80671afcbf5802e3340c65ebda7e7bdf9bec75af","patch":"@@ -0,0 +1,60 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.jdbc.kernel;\r\n+\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity\r\n+public class EntityD {\r\n+\r\n+    @Id\r\n+    @Column(name = \"entityd_id\", nullable = false)\r\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n+    private Integer id;\r\n+\r\n+    private String name;\r\n+\r\n+    @Version\r\n+    private Integer optLock;\r\n+\r\n+    public EntityD() {\r\n+    }\r\n+\r\n+    public void setId(Integer id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public Integer getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return this.name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+}\r\n+\r"},{"sha":"5e687d01276ea87c550982b09a00cdc712d0593d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestNoForeignKeyViolation.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/80671afcbf5802e3340c65ebda7e7bdf9bec75af/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestNoForeignKeyViolation.java","raw_url":"https://github.com/apache/openjpa/raw/80671afcbf5802e3340c65ebda7e7bdf9bec75af/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestNoForeignKeyViolation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestNoForeignKeyViolation.java?ref=80671afcbf5802e3340c65ebda7e7bdf9bec75af","patch":"@@ -0,0 +1,78 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.jdbc.kernel;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import junit.textui.TestRunner;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Test that sql statements get flushed in an order which does not violate\r\n+ * non-nullable foreign key constraints on inserts and deletes.\r\n+ *\r\n+ * @author Reece Garrett\r\n+ */\r\n+public class TestNoForeignKeyViolation\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    private EntityA entityA;\r\n+    private EntityC entityC;\r\n+\r\n+    public void setUp() {\r\n+        setUp(EntityA.class, EntityB.class, EntityC.class, EntityD.class);\r\n+\r\n+        entityA = new EntityA();\r\n+        EntityB entityB = new EntityB();\r\n+        entityC = new EntityC();\r\n+        EntityD entityD = new EntityD();\r\n+        entityA.setName(\"entityA\");\r\n+        entityB.setName(\"entityB\");\r\n+        entityC.setName(\"entityC\");\r\n+        entityD.setName(\"entityD\");\r\n+        entityA.setEntityB(entityB);\r\n+        entityB.setEntityC(entityC);\r\n+        entityC.setEntityD(entityD);\r\n+    }\r\n+\r\n+    public void testSqlOrder() {\r\n+\r\n+        EntityManager em = emf.createEntityManager();\r\n+        try {\r\n+            em.getTransaction().begin();\r\n+            em.persist(entityA);\r\n+            em.getTransaction().commit();\r\n+\r\n+            EntityD newEntityD = new EntityD();\r\n+            newEntityD.setName(\"newEntityD\");\r\n+            entityC.setEntityD(newEntityD);\r\n+\r\n+            em.getTransaction().begin();\r\n+            em.merge(entityC);\r\n+            em.getTransaction().commit();\r\n+        }\r\n+        finally {\r\n+            em.close();\r\n+        }\r\n+    }\r\n+\r\n+    public static void main(String[] args) {\r\n+        TestRunner.run(TestNoForeignKeyViolation.class);\r\n+    }\r\n+}\r"}]}

