{"sha":"80736f6e9d38dfb180c89cec6cb2916341165a5c","node_id":"MDY6Q29tbWl0MjA2MzY0OjgwNzM2ZjZlOWQzOGRmYjE4MGM4OWNlYzZjYjI5MTYzNDExNjVhNWM=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2019-02-14T13:29:11Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2019-02-14T13:29:11Z"},"message":"OPENJPA-2733 subquery parameters are incorrectly assigned\n\npatch submitted by Pawel Veselov - thanks!","tree":{"sha":"a1f7ece70506b0d97878b03929afa7346a61a72f","url":"https://api.github.com/repos/apache/openjpa/git/trees/a1f7ece70506b0d97878b03929afa7346a61a72f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/80736f6e9d38dfb180c89cec6cb2916341165a5c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/80736f6e9d38dfb180c89cec6cb2916341165a5c","html_url":"https://github.com/apache/openjpa/commit/80736f6e9d38dfb180c89cec6cb2916341165a5c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/80736f6e9d38dfb180c89cec6cb2916341165a5c/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"0d9645781e243609c59196270d0325f6d75062a8","url":"https://api.github.com/repos/apache/openjpa/commits/0d9645781e243609c59196270d0325f6d75062a8","html_url":"https://github.com/apache/openjpa/commit/0d9645781e243609c59196270d0325f6d75062a8"}],"stats":{"total":92,"additions":78,"deletions":14},"files":[{"sha":"79148f91d73b2728ec8c0c7d9aa6b8dcd729ddbc","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/OrderedMap.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/80736f6e9d38dfb180c89cec6cb2916341165a5c/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/OrderedMap.java","raw_url":"https://github.com/apache/openjpa/raw/80736f6e9d38dfb180c89cec6cb2916341165a5c/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/OrderedMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/OrderedMap.java?ref=80736f6e9d38dfb180c89cec6cb2916341165a5c","patch":"@@ -61,6 +61,7 @@ public int indexOf(Object key) {\n \n     @Override\n     public void clear() {\n+        _del.clear();\n     }\n \n "},{"sha":"f4e8adb6f5c925d0a60dc2ccb0765d53521780de","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java","status":"modified","additions":65,"deletions":8,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/80736f6e9d38dfb180c89cec6cb2916341165a5c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java","raw_url":"https://github.com/apache/openjpa/raw/80736f6e9d38dfb180c89cec6cb2916341165a5c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestSubqueries.java?ref=80736f6e9d38dfb180c89cec6cb2916341165a5c","patch":"@@ -20,15 +20,10 @@\n \n import java.sql.Timestamp;\n \n+import javax.persistence.Parameter;\n import javax.persistence.Tuple;\n-import javax.persistence.criteria.CriteriaQuery;\n-import javax.persistence.criteria.Expression;\n-import javax.persistence.criteria.Join;\n-import javax.persistence.criteria.JoinType;\n-import javax.persistence.criteria.ListJoin;\n-import javax.persistence.criteria.Root;\n-import javax.persistence.criteria.SetJoin;\n-import javax.persistence.criteria.Subquery;\n+import javax.persistence.TypedQuery;\n+import javax.persistence.criteria.*;\n \n public class TestSubqueries extends CriteriaTest {\n \n@@ -585,4 +580,66 @@ public void testSubquery23() {\n                 Customer.CreditRating.POOR))));\n         assertEquivalence(q, query);\n     }\n+\n+    public void testSubquery24() {\n+\n+        em.getTransaction().begin();\n+\n+        em.createQuery(\"delete from Order o where o.customer.name = 'Capricorn'\").executeUpdate();\n+        em.createQuery(\"delete from Order o\").executeUpdate();\n+        em.createQuery(\"delete from Customer c where c.name = 'Capricorn'\").executeUpdate();\n+\n+        em.flush();\n+\n+        Customer c1 = new Customer();\n+        c1.setAccountNum(156);\n+        c1.setFirstName(\"John\");\n+        c1.setLastName(\"Doe\");\n+        c1.setName(\"Capricorn\");\n+        em.persist(c1);\n+\n+        Order o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+        o1 = new Order();\n+        o1.setCustomer(c1);\n+        em.persist(o1);\n+\n+        em.flush();\n+\n+        // em.getTransaction().commit();\n+\n+        // System.out.println(\"CUSTOMERS: \"+em.createQuery(\"select count(c) from Customer c\").getFirstResult());\n+        // System.out.println(\"ORDERS: \"+em.createQuery(\"select count(c) from Order c\").getFirstResult());\n+\n+        CriteriaQuery<Long> q = cb.createQuery(Long.class);\n+        Root<Customer> root = q.from(Customer.class);\n+        q.select(root.get(Customer_.accountNum));\n+\n+        ParameterExpression<String> testParam = cb.parameter(String.class, \"param1\");\n+\n+        Subquery<Customer> sq = q.subquery(Customer.class);\n+        Root<Order> sqRoot = sq.from(Order.class);\n+        sq.where(cb.and(\n+                cb.equal(cb.parameter(String.class, \"param2\"), sqRoot.get(Order_.customer).get(Customer_.lastName)),\n+                cb.equal(testParam, sqRoot.get(Order_.customer).get(Customer_.name))\n+                ));\n+        sq.select(sqRoot.get(Order_.customer));\n+\n+        q.where(cb.and(\n+                cb.equal(testParam, root.get(Customer_.name)),\n+                cb.in(root).value(sq)\n+        ));\n+\n+        // em.createQuery(q).getResultList();\n+        TypedQuery<Long> tq = em.createQuery(q);\n+        tq.setParameter(\"param1\", \"Capricorn\");\n+        tq.setParameter(\"param2\", \"Doe\");\n+\n+        assertEquals(1, tq.getResultList().size());\n+\n+        em.getTransaction().rollback();\n+\n+    }\n+\n }"},{"sha":"7ea8a3f2a34ea9a6afea9e4e32e198a36f73cad5","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/80736f6e9d38dfb180c89cec6cb2916341165a5c/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/80736f6e9d38dfb180c89cec6cb2916341165a5c/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java?ref=80736f6e9d38dfb180c89cec6cb2916341165a5c","patch":"@@ -115,11 +115,14 @@ public CriteriaQueryImpl(MetamodelImpl featureSelection, Class<T> resultClass) {\n      * @param featureSelection the metamodel defines the scope of all persistent entity references.\n      * @param delegator the subquery which will delegate to this receiver.\n      */\n-    CriteriaQueryImpl(MetamodelImpl featureSelection, SubqueryImpl<T> delegator) {\n+    CriteriaQueryImpl(MetamodelImpl featureSelection, SubqueryImpl<T> delegator, OrderedMap params) {\n         this._model = featureSelection;\n         this._resultClass = delegator.getJavaType();\n         _delegator = delegator;\n         _aliases = getAliases();\n+        if (params != null) {\n+            this._params = params;\n+        }\n     }\n \n     /**\n@@ -225,8 +228,6 @@ public MetamodelImpl getMetamodel() {\n      * Registers the given parameter.\n      */\n     void registerParameter(ParameterExpressionImpl<?> p) {\n-        if (_params == null)\n-            _params = new OrderedMap/*<ParameterExpression<?>, Class<?>*/();\n         if (!_params.containsKey(p)) {\n             p.setIndex(_params.size());\n             _params.put(p, p.getJavaType());\n@@ -431,7 +432,7 @@ public boolean isDistinct() {\n      */\n     public OrderedMap<Object, Class<?>> getParameterTypes() {\n         collectParameters(new CriteriaExpressionVisitor.ParameterVisitor(this));\n-        return _params == null ? StoreQuery.EMPTY_ORDERED_PARAMS : _params;\n+        return _params;\n     }\n \n     /**\n@@ -654,7 +655,7 @@ protected boolean isDefaultProjection() {\n \n     void invalidateCompilation() {\n         _compiled = false;\n-        _params   = null;\n+        _params.clear();\n     }\n \n     /**"},{"sha":"e8abe191c775fc8a94bc1973d080d93cbed4680e","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/80736f6e9d38dfb180c89cec6cb2916341165a5c/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/80736f6e9d38dfb180c89cec6cb2916341165a5c/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SubqueryImpl.java?ref=80736f6e9d38dfb180c89cec6cb2916341165a5c","patch":"@@ -43,6 +43,7 @@\n import org.apache.openjpa.kernel.exps.QueryExpressions;\n import org.apache.openjpa.kernel.exps.Value;\n import org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder;\n+import org.apache.openjpa.lib.util.OrderedMap;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.ValueMetaData;\n@@ -78,14 +79,18 @@\n     SubqueryImpl(Class<T> cls, AbstractQuery<?> parent) {\n         super(cls);\n         _parent = parent;\n+        OrderedMap params;\n         if (parent instanceof CriteriaQueryImpl) {\n             _model = ((CriteriaQueryImpl<?>)parent).getMetamodel();\n+            params = ((CriteriaQueryImpl<?>)parent).getParameterTypes();\n         } else if (parent instanceof SubqueryImpl) {\n             _model = ((SubqueryImpl<?>)parent).getMetamodel();\n+            params = ((SubqueryImpl<?>)parent).getInnermostParent().getParameterTypes();\n         } else {\n             _model = null;\n+            params = null;\n         }\n-        _delegate = new CriteriaQueryImpl<>(_model, this);\n+        _delegate = new CriteriaQueryImpl<>(_model, this, params);\n     }\n \n     /**"}]}

