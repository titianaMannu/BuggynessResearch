{"sha":"80dc4a39e785457605080be80fde560c12eead15","node_id":"MDY6Q29tbWl0MjA2MzY0OjgwZGM0YTM5ZTc4NTQ1NzYwNTA4MGJlODBmZGU1NjBjMTJlZWFkMTU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-01-22T19:19:07Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-01-22T19:19:07Z"},"message":"OPENJPA-864 do not remove table aliases for databases which use JoinSyntaxes.SYNTAX_DATABASE (no joins).\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@736750 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4109720cfc93d0695c1bd378d65c2401a2c4bd86","url":"https://api.github.com/repos/apache/openjpa/git/trees/4109720cfc93d0695c1bd378d65c2401a2c4bd86"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/80dc4a39e785457605080be80fde560c12eead15","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/80dc4a39e785457605080be80fde560c12eead15","html_url":"https://github.com/apache/openjpa/commit/80dc4a39e785457605080be80fde560c12eead15","comments_url":"https://api.github.com/repos/apache/openjpa/commits/80dc4a39e785457605080be80fde560c12eead15/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"d9b6b95adf62e547ac4591a5f5bf7771aeb14f6f","url":"https://api.github.com/repos/apache/openjpa/commits/d9b6b95adf62e547ac4591a5f5bf7771aeb14f6f","html_url":"https://github.com/apache/openjpa/commit/d9b6b95adf62e547ac4591a5f5bf7771aeb14f6f"}],"stats":{"total":318,"additions":289,"deletions":29},"files":[{"sha":"3237a97a482d66ac1a390c879bab81dacbe31b94","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":29,"deletions":26,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/80dc4a39e785457605080be80fde560c12eead15/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/80dc4a39e785457605080be80fde560c12eead15/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=80dc4a39e785457605080be80fde560c12eead15","patch":"@@ -581,38 +581,41 @@ public void setParent(Select parent, String path) {\n         if (_parent._aliases.size() <= 1)\n             return;\n  \n-        // resolve aliases for subselect from parent\n-        Set<Map.Entry> entries = _parent.getAliases().entrySet();\n-        for (Map.Entry entry : entries) {\n-            Object key = entry.getKey();\n-            Integer alias = (Integer) entry.getValue();\n-            if (key.toString().indexOf(_subPath) != -1 ||\n-                _parent.findTableAlias(alias) == false) {\n-                if (_aliases == null)\n-                    _aliases = new HashMap();\n-                _aliases.put(key, alias);\n-\n-                Object tableString = _parent.getTables().get(alias);\n-                if (_tables == null)\n-                    _tables = new TreeMap();\n-                _tables.put(alias, tableString);\n-                \n-                _removedAliasFromParent.set(alias.intValue());\n-            }\n-        }\n-        \n-        if (_aliases != null) {\n-            // aliases moved into subselect should be removed from parent\n-            entries = _aliases.entrySet();\n+        // Do not remove aliases for databases that use SYNTAX_DATABASE (oracle)\n+        if(_parent._joinSyntax != JoinSyntaxes.SYNTAX_DATABASE) {\n+            // resolve aliases for subselect from parent\n+            Set<Map.Entry> entries = _parent.getAliases().entrySet();\n             for (Map.Entry entry : entries) {\n                 Object key = entry.getKey();\n                 Integer alias = (Integer) entry.getValue();\n                 if (key.toString().indexOf(_subPath) != -1 ||\n-                    _parent.findTableAlias(alias) == false) {\n-                    _parent.removeAlias(key);\n+                        _parent.findTableAlias(alias) == false) {\n+                    if (_aliases == null)\n+                        _aliases = new HashMap();\n+                    _aliases.put(key, alias);\n \n                     Object tableString = _parent.getTables().get(alias);\n-                    _parent.removeTable(alias);\n+                    if (_tables == null)\n+                        _tables = new TreeMap();\n+                    _tables.put(alias, tableString);\n+\n+                    _removedAliasFromParent.set(alias.intValue());\n+                }\n+            }\n+\n+            if (_aliases != null) {\n+                // aliases moved into subselect should be removed from parent\n+                entries = _aliases.entrySet();\n+                for (Map.Entry entry : entries) {\n+                    Object key = entry.getKey();\n+                    Integer alias = (Integer) entry.getValue();\n+                    if (key.toString().indexOf(_subPath) != -1 ||\n+                            _parent.findTableAlias(alias) == false) {\n+                        _parent.removeAlias(key);\n+\n+                        Object tableString = _parent.getTables().get(alias);\n+                        _parent.removeTable(alias);\n+                    }\n                 }\n             }\n         }"},{"sha":"b465a61170b7ea6b3cfb596360c456a094709d4a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Dependent.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/80dc4a39e785457605080be80fde560c12eead15/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Dependent.java","raw_url":"https://github.com/apache/openjpa/raw/80dc4a39e785457605080be80fde560c12eead15/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Dependent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Dependent.java?ref=80dc4a39e785457605080be80fde560c12eead15","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.Date;\n+\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+\n+@Entity\n+@Table(name=\"SUBQ_DEPENDENT\")\n+public class Dependent {\n+    @EmbeddedId\n+    private DependentId id;\n+\n+    @OneToOne\n+    private Employee emp;\n+    \n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date endDate;\n+    \n+    private int curStatusId;\n+\n+    public int getCurStatusId() {\n+        return curStatusId;\n+    }\n+\n+    public void setCurStatusId(int curStatusId) {\n+        this.curStatusId = curStatusId;\n+    }\n+\n+    public DependentId getId() {\n+        return id;\n+    }\n+\n+    public void setId(DependentId id) {\n+        this.id = id;\n+    }\n+\n+    public Employee getEmp() {\n+        return emp;\n+    }\n+\n+    public void setEmp(Employee emp) {\n+        this.emp = emp;\n+    }\n+\n+    public Date getEndDate() {\n+        return endDate;\n+    }\n+\n+    public void setEndDate(Date endDate) {\n+        this.endDate = endDate;\n+    }\n+\n+}"},{"sha":"24c0a7ec5f64df1c3d3e5999b09c7b048bbbf27e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/DependentId.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/80dc4a39e785457605080be80fde560c12eead15/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/DependentId.java","raw_url":"https://github.com/apache/openjpa/raw/80dc4a39e785457605080be80fde560c12eead15/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/DependentId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/DependentId.java?ref=80dc4a39e785457605080be80fde560c12eead15","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.Date;\n+\n+import javax.persistence.Embeddable;\n+\n+@Embeddable\n+public class DependentId {\n+    private String name;\n+    private long empid; \n+    private Date effDate;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public long getEmpid() {\n+        return empid;\n+    }\n+\n+    public void setEmpid(long empid) {\n+        this.empid = empid;\n+    }\n+\n+    public Date getEffDate() {\n+        return effDate;\n+    }\n+\n+    public void setEffDate(Date effDate) {\n+        this.effDate = effDate;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + ((effDate == null) ? 0 : effDate.hashCode());\n+        result = prime * result + (int) (empid ^ (empid >>> 32));\n+        result = prime * result + ((name == null) ? 0 : name.hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (getClass() != obj.getClass())\n+            return false;\n+        DependentId other = (DependentId) obj;\n+        if (effDate == null) {\n+            if (other.effDate != null)\n+                return false;\n+        } else if (!effDate.equals(other.effDate))\n+            return false;\n+        if (empid != other.empid)\n+            return false;\n+        if (name == null) {\n+            if (other.name != null)\n+                return false;\n+        } else if (!name.equals(other.name))\n+            return false;\n+        return true;\n+    }\n+}"},{"sha":"e8321a100318ab8e3032ce24b567b9db4642bfd4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Employee.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/80dc4a39e785457605080be80fde560c12eead15/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/80dc4a39e785457605080be80fde560c12eead15/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Employee.java?ref=80dc4a39e785457605080be80fde560c12eead15","patch":"@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"SUBQ_EMPLOYEE\")\n+public class Employee {\n+\n+    @Id \n+    private long empId;\n+    private String name;\n+    \n+    private long someLong;\n+\n+    private int statusId; \n+\n+    public int getStatusId() {\n+        return statusId;\n+    }\n+\n+    public void setStatusId(int statusId) {\n+        this.statusId = statusId;\n+    }\n+\n+    public long getEmpId() {\n+        return empId;\n+    }\n+\n+    public void setEmpId(long empId) {\n+        this.empId = empId;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public long getSomeLong() {\n+        return someLong;\n+    }\n+\n+    public void setSomeLong(long someLong) {\n+        this.someLong = someLong;\n+    }\n+\n+    \n+}\n\\ No newline at end of file"},{"sha":"528efaaadccf1a4c2a41c465226a422ac5bb4b0a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java","status":"modified","additions":26,"deletions":3,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/80dc4a39e785457605080be80fde560c12eead15/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java","raw_url":"https://github.com/apache/openjpa/raw/80dc4a39e785457605080be80fde560c12eead15/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java?ref=80dc4a39e785457605080be80fde560c12eead15","patch":"@@ -18,9 +18,11 @@\n  */\n package org.apache.openjpa.persistence.query;\n \n+import java.util.Date;\n import java.util.List;\n \n import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n \n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n@@ -31,9 +33,9 @@\n     extends SingleEMFTestCase {\n \n     public void setUp() {\n-        setUp(Customer.class, Customer.CustomerKey.class,\n-            Order.class, OrderItem.class,\n-            Magazine.class, Publisher.class, CLEAR_TABLES);\n+        setUp(Customer.class, Customer.CustomerKey.class, Order.class,\n+            OrderItem.class, Magazine.class, Publisher.class, Employee.class,\n+            Dependent.class, DependentId.class, CLEAR_TABLES);\n     }\n \n     static String[]  querys = new String[] {\n@@ -111,4 +113,25 @@ public void testSubquery() {\n         em.getTransaction().rollback();\n         em.close();\n     }\n+    \n+    /**\n+     * Verify a sub query can contain MAX and additional date comparisons \n+     * without losing the correct alias information. This sort of query \n+     * originally caused problems for DBDictionaries which used DATABASE syntax. \n+     */\n+    public void testSubSelectMaxDateRange() {        \n+        String query =\n+            \"SELECT e,d from Employee e, Dependent d \"\n+                + \"WHERE e.empId = :empid \"\n+                + \"AND d.id.empid = (SELECT MAX (e2.empId) FROM Employee e2) \"\n+                + \"AND d.id.effDate > :minDate \"\n+                + \"AND d.id.effDate < :maxDate \";\n+        EntityManager em = emf.createEntityManager();\n+        Query q = em.createQuery(query);\n+        q.setParameter(\"empid\", (long) 101);\n+        q.setParameter(\"minDate\", new Date(100));\n+        q.setParameter(\"maxDate\", new Date(100000));\n+        q.getResultList();\n+        em.close();\n+    }\n }"}]}

