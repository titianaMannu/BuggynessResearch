{"sha":"80f7795fefebd6776293ad0c51417e0fccdbeadd","node_id":"MDY6Q29tbWl0MjA2MzY0OjgwZjc3OTVmZWZlYmQ2Nzc2MjkzYWQwYzUxNDE3ZTBmY2NkYmVhZGQ=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-04-04T21:13:19Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-04-04T21:13:19Z"},"message":"Cleanup bugfix relating to use of a default schema declared in orm.xml:\n- Removed prepending of schema name in PersistenceMappingDefaults.getTableName\n  methods as unnecessary.\n- Moved storage of default schema name to ClassMappingInfo as that's the only\n  place we use it for now.\n- Moved setting of default schema name into the more efficient endClassMapping\n  method of XMLPersistenceMappingParser.\n- Fixed MappingInfo.createTable logic to pass the full table name to \n  SchemaGroup.findTable.  This is important b/c the DynamicSchemaGroup (used\n  during the mappingtool's buildSchema action, the default for JPA) dynamically\n  adds the table to itself during the findTable operation.  Without the full\n  table name it would always add the table to the default schema.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@525606 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ff0fe5bf723820b74235918a66f11978591d04c7","url":"https://api.github.com/repos/apache/openjpa/git/trees/ff0fe5bf723820b74235918a66f11978591d04c7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/80f7795fefebd6776293ad0c51417e0fccdbeadd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/80f7795fefebd6776293ad0c51417e0fccdbeadd","html_url":"https://github.com/apache/openjpa/commit/80f7795fefebd6776293ad0c51417e0fccdbeadd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/80f7795fefebd6776293ad0c51417e0fccdbeadd/comments","author":null,"committer":null,"parents":[{"sha":"db2a53ff2dacb94f9bb2cf2f721994604d73b921","url":"https://api.github.com/repos/apache/openjpa/commits/db2a53ff2dacb94f9bb2cf2f721994604d73b921","html_url":"https://github.com/apache/openjpa/commit/db2a53ff2dacb94f9bb2cf2f721994604d73b921"}],"stats":{"total":128,"additions":53,"deletions":75},"files":[{"sha":"891b3a0d029477b459882b19f19b84aceeb5e444","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","status":"modified","additions":16,"deletions":1,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/80f7795fefebd6776293ad0c51417e0fccdbeadd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/80f7795fefebd6776293ad0c51417e0fccdbeadd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java?ref=80f7795fefebd6776293ad0c51417e0fccdbeadd","patch":"@@ -54,6 +54,7 @@\n \n     private String _className = Object.class.getName();\n     private String _tableName = null;\n+    private String _schemaName = null;\n     private boolean _joined = false;\n     private Map _seconds = null;\n     private String _subStrat = null;\n@@ -104,6 +105,20 @@ public void setTableName(String table) {\n         _tableName = table;\n     }\n \n+    /**\n+     * The default schema name for unqualified tables.\n+     */\n+    public String getSchemaName() {\n+        return _schemaName;\n+    }\n+\n+    /**\n+     * The default schema name for unqualified tables.\n+     */\n+    public void setSchemaName(String schema) {\n+        _schemaName = schema;\n+    }\n+\n     /**\n      * Whether there is a join to the superclass table.\n      */\n@@ -215,7 +230,7 @@ public String get(Schema schema) {\n                 return cls.getMappingRepository().getMappingDefaults().\n                     getTableName(cls, schema);\n             }\n-        }, null, _tableName, adapt);\n+        }, _schemaName, _tableName, adapt);\n     }\n \n     /**"},{"sha":"4779c14fe56c461221f0eb3392ab5b70a2ede3e3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMappingInfo.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/80f7795fefebd6776293ad0c51417e0fccdbeadd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/80f7795fefebd6776293ad0c51417e0fccdbeadd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMappingInfo.java?ref=80f7795fefebd6776293ad0c51417e0fccdbeadd","patch":"@@ -118,7 +118,8 @@ public Table getTable(final FieldMapping field, boolean create,\n             return null;\n \n         Table table = field.getDefiningMapping().getTable();\n-        Schema schema = (table == null) ? null : table.getSchema();\n+        String schemaName = (table == null) ? null \n+            : table.getSchema().getName();\n \n         // if we have no join columns defined, there may be class-level join\n         // information with a more fully-qualified name for our table\n@@ -134,7 +135,7 @@ public String get(Schema schema) {\n                 return field.getMappingRepository().getMappingDefaults().\n                     getTableName(field, schema);\n             }\n-        }, schema, tableName, adapt);\n+        }, schemaName, tableName, adapt);\n     }\n \n     /**"},{"sha":"8e4d5c75b279c97df2f39f54dc87d20e4e84b326","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","status":"modified","additions":25,"deletions":36,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/80f7795fefebd6776293ad0c51417e0fccdbeadd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/80f7795fefebd6776293ad0c51417e0fccdbeadd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java?ref=80f7795fefebd6776293ad0c51417e0fccdbeadd","patch":"@@ -70,7 +70,6 @@\n     private boolean _canFK = true;\n     private int _join = JOIN_NONE;\n     private ColumnIO _io = null;\n-    private String _defaultSchemaName = null;\n \n     /**\n      * Mapping strategy name.\n@@ -423,58 +422,56 @@ public void assertNoJoin(MetaDataContext context, boolean die) {\n      *\n      * @param context the mapping that uses the table\n      * @param def default table name provider\n-     * @param schema default schema if known, or null\n+     * @param schemaName default schema if known, or null\n      * @param given given table name\n      * @param adapt whether we can alter the schema or mappings\n      */\n     public Table createTable(MetaDataContext context, TableDefaults def,\n-        Schema schema, String given, boolean adapt) {\n+        String schemaName, String given, boolean adapt) {\n         MappingRepository repos = (MappingRepository) context.getRepository();\n         if (given == null && (def == null || (!adapt\n             && !repos.getMappingDefaults().defaultMissingInfo())))\n             throw new MetaDataException(_loc.get(\"no-table\", context));\n \n+        if (schemaName == null)\n+            schemaName = Schemas.getNewTableSchema((JDBCConfiguration)\n+                repos.getConfiguration());\n+\n         // if no given and adapting or defaulting missing info, use template\n         SchemaGroup group = repos.getSchemaGroup();\n-        String schemaName = null;\n+        Schema schema = null;\n         if (given == null) {\n-            if (schema == null) {\n-                schemaName = Schemas.getNewTableSchema((JDBCConfiguration)\n-                    repos.getConfiguration());\n-                if (StringUtils.isEmpty(schemaName)) { \n-                   schemaName = _defaultSchemaName;\n-                }\n-                schema = group.getSchema(schemaName);\n-                if (schema == null)\n-                    schema = group.addSchema(schemaName);\n-            }\n+            schema = group.getSchema(schemaName);\n+            if (schema == null)\n+                schema = group.addSchema(schemaName);\n             given = def.get(schema);\n         }\n \n-        // look for named table\n-        Table table = group.findTable(given);\n-        if (table != null)\n-            return table;\n-        if (!adapt)\n-            throw new MetaDataException(_loc.get(\"bad-table\", given, context));\n-\n-        // named table doesn't exist; figure out what schema to create new\n-        // table in\n+        String fullName;\n         int dotIdx = given.lastIndexOf('.');\n-        if (dotIdx != -1) {\n+        if (dotIdx == -1)\n+            fullName = (schemaName == null) ? given : schemaName + \".\" + given;\n+        else {\n+            fullName = given;\n             schema = null;\n             schemaName = given.substring(0, dotIdx);\n             given = given.substring(dotIdx + 1);\n-        } else if (schema == null)\n-            schemaName = Schemas.getNewTableSchema((JDBCConfiguration)\n-                repos.getConfiguration());\n+        }\n \n+        // look for named table using full name and findTable, which allows\n+        // the dynamic schema factory to create the table if needed\n+        Table table = group.findTable(fullName);\n+        if (table != null)\n+            return table;\n+        if (!adapt)\n+            throw new MetaDataException(_loc.get(\"bad-table\", given, context));\n+\n+        // named table doesn't exist; create it\n         if (schema == null) {\n             schema = group.getSchema(schemaName);\n             if (schema == null)\n                 schema = group.addSchema(schemaName);\n         }\n-\n         table = schema.getTable(given);\n         if (table == null)\n             table = schema.addTable(given);\n@@ -1769,12 +1766,4 @@ private static boolean defaultTarget(Column col, Column targetCol,\n         public void populate(Table local, Table foreign, Column col,\n             Object target, boolean inverse, int pos, int cols);\n \t}\n-    \n-    public String getDefaultSchemaName() {\n-        return _defaultSchemaName;\n-    }\n-\n-    public void setDefaultSchemaName(String schemaName) {\n-        _defaultSchemaName = schemaName;\n-    }\n }"},{"sha":"271ddf8ab1d43c96f81413f4fbff6c5614a101fe","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/FlatClassStrategy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/80f7795fefebd6776293ad0c51417e0fccdbeadd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/FlatClassStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/80f7795fefebd6776293ad0c51417e0fccdbeadd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/FlatClassStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/FlatClassStrategy.java?ref=80f7795fefebd6776293ad0c51417e0fccdbeadd","patch":"@@ -47,7 +47,7 @@ public void map(boolean adapt) {\n         info.assertNoSchemaComponents(cls, true);\n \n         if (info.getTableName() != null) {\n-            Table table = info.createTable(cls, null, null,\n+            Table table = info.createTable(cls, null, info.getSchemaName(),\n                 info.getTableName(), false);\n             if (table != sup.getTable())\n                 throw new MetaDataException(_loc.get(\"flat-table\", cls,"},{"sha":"be28c8cdc2c27cc80f86e306433327e6870523a3","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/PersistenceMappingDefaults.java","status":"modified","additions":3,"deletions":18,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/80f7795fefebd6776293ad0c51417e0fccdbeadd/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/PersistenceMappingDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/80f7795fefebd6776293ad0c51417e0fccdbeadd/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/PersistenceMappingDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/PersistenceMappingDefaults.java?ref=80f7795fefebd6776293ad0c51417e0fccdbeadd","patch":"@@ -115,30 +115,15 @@ public Object getStrategy(Discriminator disc, boolean adapt) {\n \n     @Override\n     public String getTableName(ClassMapping cls, Schema schema) {\n-        String name = \"\";\n-        if (StringUtils.isNotEmpty(schema.getName())) {\n-            name += schema.getName() + '.';\n-        }\n-\n         if (cls.getTypeAlias() != null)\n-            name += cls.getTypeAlias();\n-        \n-        else\n-            name += Strings.getClassName(cls.getDescribedType()).replace('$',\n-                '_');\n-        \n-        return name;\n+            return cls.getTypeAlias();\n+        return Strings.getClassName(cls.getDescribedType()).replace('$', '_');\n     }\n \n     @Override\n     public String getTableName(FieldMapping fm, Schema schema) {\n-        String name = \"\"; \n-        if (StringUtils.isNotEmpty(schema.getName())) {\n-            name += schema.getName() + '.';\n-        }\n-        \n         // base name is table of defining type + '_'\n-        name += fm.getDefiningMapping().getTable().getName() + \"_\";\n+        String name = fm.getDefiningMapping().getTable().getName() + \"_\";\n \n         // if this is an assocation table, spec says to suffix with table of\n         // the related type. spec doesn't cover other cases; we're going to"},{"sha":"a7355e033045e697e1ea7facbd0c656d4c347c90","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","status":"modified","additions":5,"deletions":17,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/80f7795fefebd6776293ad0c51417e0fccdbeadd/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/80f7795fefebd6776293ad0c51417e0fccdbeadd/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java?ref=80f7795fefebd6776293ad0c51417e0fccdbeadd","patch":"@@ -304,6 +304,9 @@ protected void startClassMapping(ClassMetaData meta, boolean mappedSuper,\n     protected void endClassMapping(ClassMetaData meta)\n         throws SAXException {\n         ClassMapping cm = (ClassMapping) meta;\n+        if (_schema != null)\n+            cm.getMappingInfo().setSchemaName(_schema);\n+\n         if (_supJoinCols != null)\n             cm.getMappingInfo().setColumns(_supJoinCols);\n \n@@ -769,10 +772,9 @@ private Column parseColumn(Attributes attrs)\n     private String toTableName(String schema, String table) {\n         if (StringUtils.isEmpty(table))\n             return null;\n-        schema = StringUtils.isEmpty(schema) ? _schema : schema;\n         if (StringUtils.isEmpty(schema))\n-            return table;\n-        return schema + \".\" + table;\n+            schema = _schema;\n+        return (StringUtils.isEmpty(schema)) ? table : schema + \".\" + table;\n     }\n \n     /**\n@@ -911,18 +913,4 @@ private boolean endColumnName() {\n \t\tTRUE,\n \t\tFALSE\n \t}\n-    \n-    @Override\n-    protected void endClass(String elem)\n-        throws SAXException {\n-        if (StringUtils.isNotEmpty(_schema)) {\n-            Class cls = classForName(currentClassName());\n-\n-            MetaDataRepository repos = getRepository();\n-            ClassMapping meta = (ClassMapping) repos.getCachedMetaData(cls);\n-\n-            meta.getMappingInfo().setDefaultSchemaName(_schema);\n-        }\n-        super.endClass(elem);\n-    }\n }"}]}

