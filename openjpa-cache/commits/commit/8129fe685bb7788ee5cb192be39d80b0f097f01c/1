{"sha":"8129fe685bb7788ee5cb192be39d80b0f097f01c","node_id":"MDY6Q29tbWl0MjA2MzY0OjgxMjlmZTY4NWJiNzc4OGVlNWNiMTkyYmUzOWQ4MGIwZjA5N2YwMWM=","commit":{"author":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2015-01-28T15:28:40Z"},"committer":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2015-01-28T15:28:40Z"},"message":"OPENJPA-2536: FetchGroup is not returning lazy fields.  Applied Rick Curtis' fix to trunk.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1655360 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d70435d0874b6172f47cddde7dcba7b09b65660d","url":"https://api.github.com/repos/apache/openjpa/git/trees/d70435d0874b6172f47cddde7dcba7b09b65660d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8129fe685bb7788ee5cb192be39d80b0f097f01c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8129fe685bb7788ee5cb192be39d80b0f097f01c","html_url":"https://github.com/apache/openjpa/commit/8129fe685bb7788ee5cb192be39d80b0f097f01c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8129fe685bb7788ee5cb192be39d80b0f097f01c/comments","author":null,"committer":null,"parents":[{"sha":"244e37b1894af680457b6edadafea4a0a0b6a4c4","url":"https://api.github.com/repos/apache/openjpa/commits/244e37b1894af680457b6edadafea4a0a0b6a4c4","html_url":"https://github.com/apache/openjpa/commit/244e37b1894af680457b6edadafea4a0a0b6a4c4"}],"stats":{"total":552,"additions":275,"deletions":277},"files":[{"sha":"e1ce64d3d7cc775c030e5a46f1f509f65135c3d9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/8129fe685bb7788ee5cb192be39d80b0f097f01c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/8129fe685bb7788ee5cb192be39d80b0f097f01c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=8129fe685bb7788ee5cb192be39d80b0f097f01c","patch":"@@ -39,6 +39,7 @@\n import java.util.concurrent.locks.ReentrantLock;\n \n import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.conf.DetachOptions.FetchGroups;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.enhance.DynamicPersistenceCapable;\n import org.apache.openjpa.enhance.FieldManager;\n@@ -3209,7 +3210,7 @@ protected void loadField(int field, int lockLevel, boolean forWrite,\n                 fetch.addFetchGroup(lfg);\n                 lfgAdded = true;\n             }\n-        } else if (fmd.isInDefaultFetchGroup() && fields == null) {\n+        } else if (fetch.hasFetchGroup(FetchGroup.NAME_DEFAULT) && fmd.isInDefaultFetchGroup() && fields == null) {\n             // no load group but dfg: add dfg fields if we haven't already\n             if (!unloadedDFGFieldMarked)\n                 fields = getUnloadedInternal(fetch, LOAD_FGS, null);"},{"sha":"be5756241bbc88a6306be588f3f51b3c23db28ad","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroups.java","status":"modified","additions":273,"deletions":276,"changes":549,"blob_url":"https://github.com/apache/openjpa/blob/8129fe685bb7788ee5cb192be39d80b0f097f01c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroups.java","raw_url":"https://github.com/apache/openjpa/raw/8129fe685bb7788ee5cb192be39d80b0f097f01c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroups.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroups.java?ref=8129fe685bb7788ee5cb192be39d80b0f097f01c","patch":"@@ -25,26 +25,44 @@\n import org.apache.openjpa.persistence.FetchPlan;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n import org.apache.openjpa.persistence.test.SingleEMTestCase;\n \n public class TestFetchGroups extends SingleEMTestCase {\n     private static final int empPerMgr = 5;\n     private static final int mgrCount = 3;\n     private static final int empCount = mgrCount * empPerMgr;\n-    \n-    \n+\n     private HashSet<FGEmployee> employeeSet = new HashSet<FGEmployee>();\n     private HashSet<FGManager> managerSet = new HashSet<FGManager>();\n-    \n+\n     private static final String empDescriptionFieldStr =\n-            \"org.apache.openjpa.persistence.fetchgroups.FGEmployee.description\";\n-    \n+        \"org.apache.openjpa.persistence.fetchgroups.FGEmployee.description\";\n+\n     public void setUp() {\n-        super.setUp(CLEAR_TABLES, \n-            FGManager.class, FGDepartment.class, FGEmployee.class, FGAddress.class);\n+        super.setUp(CLEAR_TABLES, FGManager.class, FGDepartment.class, FGEmployee.class, FGAddress.class);\n         createEmployeeData();\n     }\n-    \n+\n+    public void testNoDefaultGroupLazyLoad() {\n+        FGEmployee emp = employeeSet.iterator().next();\n+        OpenJPAEntityManagerSPI em = emf.createEntityManager();\n+\n+        FGEmployee e = em.find(FGEmployee.class, emp.getId());\n+        assertEquals(emp.getFirstName(), e.getFirstName());\n+        em.clear();\n+\n+        em.getFetchPlan().resetFetchGroups().removeFetchGroup(\"default\").addFetchGroups(\"AddressFetchGroup\");\n+        FGEmployee e2 = em.find(FGEmployee.class, emp.getId());\n+        em.clear();\n+        assertNull(e2.getFirstName());\n+\n+        FGEmployee e3 = em.find(FGEmployee.class, emp.getId());\n+        assertEquals(emp.getFirstName(), e3.getFirstName());\n+        em.close();\n+\n+    }\n+\n     /**\n      * Verify the \"default\" fetch plan that models JPA's expected eager/lazy fetch load behaviors.\n      */\n@@ -55,175 +73,168 @@ public void testDefaultFetchPlan001() {\n         assertNotNull(fp.getFetchGroups());\n         assertEquals(1, fp.getFetchGroups().size());\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n-        \n-        FetchConfiguration fetchCfg = ((org.apache.openjpa.persistence.EntityManagerImpl) em)\n-                .getBroker()\n-                .getFetchConfiguration();\n+\n+        FetchConfiguration fetchCfg =\n+            ((org.apache.openjpa.persistence.EntityManagerImpl) em).getBroker().getFetchConfiguration();\n         assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n-        \n+\n         FGManager mgr = managerSet.iterator().next();\n         assertNotNull(mgr);\n-        \n+\n         FGManager findMgr = em.find(FGManager.class, mgr.getId());\n         em.close();\n-        \n+\n         assertEquals(mgr.getId(), findMgr.getId());\n         assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n         assertEquals(mgr.getLastName(), findMgr.getLastName());\n         assertNull(findMgr.getDescription()); // Should be lazy-loaded\n     }\n-    \n+\n     /**\n-     * Verify that adding a FetchGroup to the fetch plan makes a normally JPA determined lazy loaded\n-     * field to behave as an eagerly loaded field.\n+     * Verify that adding a FetchGroup to the fetch plan makes a normally JPA determined lazy loaded field to behave as\n+     * an eagerly loaded field.\n      */\n     public void testDefaultFetchPlan002() {\n         OpenJPAEntityManager em = emf.createEntityManager();\n         FetchPlan fp = em.getFetchPlan();\n         assertNotNull(fp);\n-        \n+\n         fp.addFetchGroup(\"DescFetchGroup\");\n         assertNotNull(fp.getFetchGroups());\n         assertEquals(2, fp.getFetchGroups().size());\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n         assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n-        \n-        FetchConfiguration fetchCfg = ((org.apache.openjpa.persistence.EntityManagerImpl) em)\n-                .getBroker()\n-                .getFetchConfiguration();\n+\n+        FetchConfiguration fetchCfg =\n+            ((org.apache.openjpa.persistence.EntityManagerImpl) em).getBroker().getFetchConfiguration();\n         assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n+\n         FGManager mgr = managerSet.iterator().next();\n         assertNotNull(mgr);\n-        \n+\n         FGManager findMgr = em.find(FGManager.class, mgr.getId());\n         em.close();\n-        \n+\n         assertEquals(mgr.getId(), findMgr.getId());\n         assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n         assertEquals(mgr.getLastName(), findMgr.getLastName());\n         assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n     }\n-    \n+\n     /**\n-     * Verify that adding a field to the fetch plan makes a normally JPA determined lazy loaded\n-     * field to behave as an eagerly loaded field.\n+     * Verify that adding a field to the fetch plan makes a normally JPA determined lazy loaded field to behave as an\n+     * eagerly loaded field.\n      */\n     public void testDefaultFetchPlan003() {\n         OpenJPAEntityManager em = emf.createEntityManager();\n         FetchPlan fp = em.getFetchPlan();\n         assertNotNull(fp);\n-        \n+\n         fp.addField(empDescriptionFieldStr);\n         assertNotNull(fp.getFetchGroups());\n         assertEquals(1, fp.getFetchGroups().size());\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n         assertTrue(fp.getFields().contains(empDescriptionFieldStr));\n-        \n-        FetchConfiguration fetchCfg = ((org.apache.openjpa.persistence.EntityManagerImpl) em)\n-                .getBroker()\n-                .getFetchConfiguration();\n+\n+        FetchConfiguration fetchCfg =\n+            ((org.apache.openjpa.persistence.EntityManagerImpl) em).getBroker().getFetchConfiguration();\n         assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n+\n         FGManager mgr = managerSet.iterator().next();\n         assertNotNull(mgr);\n-        \n+\n         FGManager findMgr = em.find(FGManager.class, mgr.getId());\n         em.close();\n-        \n+\n         assertEquals(mgr.getId(), findMgr.getId());\n         assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n         assertEquals(mgr.getLastName(), findMgr.getLastName());\n         assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n     }\n-    \n-    \n+\n     /**\n-     * Verify the use of the \"openjpa.FetchGroups\" property when used to add a fetch group\n-     * to the default fetch plan.  Note when overriding that \"default\" must be included in the list.\n+     * Verify the use of the \"openjpa.FetchGroups\" property when used to add a fetch group to the default fetch plan.\n+     * Note when overriding that \"default\" must be included in the list.\n      */\n     public void testPctxDefaultFetchPlan001() {\n-        OpenJPAEntityManagerFactory emf2 = createNamedEMF(getPersistenceUnitName(), \n-            FGManager.class, FGDepartment.class, FGEmployee.class, FGAddress.class, \n-            \"openjpa.FetchGroups\", \"default,DescFetchGroup\");\n-        \n+        OpenJPAEntityManagerFactory emf2 =\n+            createNamedEMF(getPersistenceUnitName(), FGManager.class, FGDepartment.class, FGEmployee.class,\n+                FGAddress.class, \"openjpa.FetchGroups\", \"default,DescFetchGroup\");\n+\n         OpenJPAEntityManager em = emf2.createEntityManager();\n         FetchPlan fp = em.getFetchPlan();\n         assertNotNull(fp);\n         assertNotNull(fp.getFetchGroups());\n         assertEquals(2, fp.getFetchGroups().size());\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n         assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n-        \n-        FetchConfiguration fetchCfg = ((org.apache.openjpa.persistence.EntityManagerImpl) em)\n-                .getBroker()\n-                .getFetchConfiguration();\n+\n+        FetchConfiguration fetchCfg =\n+            ((org.apache.openjpa.persistence.EntityManagerImpl) em).getBroker().getFetchConfiguration();\n         assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n+\n         FGManager mgr = managerSet.iterator().next();\n         assertNotNull(mgr);\n-        \n+\n         FGManager findMgr = em.find(FGManager.class, mgr.getId());\n         em.close();\n         emf2.close();\n-        \n+\n         assertEquals(mgr.getId(), findMgr.getId());\n         assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n         assertEquals(mgr.getLastName(), findMgr.getLastName());\n         assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n     }\n-    \n+\n     /**\n-     * Verify the use of the \"openjpa.FetchGroups\" property - when a list not containing \"default\"\n-     * is provided, then the PCtx's default fetch plan should not include it.  This renders\n-     * fields normally eagerly loaded as per JPA rules to behave as lazy loaded fields.\n+     * Verify the use of the \"openjpa.FetchGroups\" property - when a list not containing \"default\" is provided, then the\n+     * PCtx's default fetch plan should not include it. This renders fields normally eagerly loaded as per JPA rules to\n+     * behave as lazy loaded fields.\n      * \n      * Note that fetch groups are case sensitive, \"default\" != \"Default\".\n      */\n     public void testPctxDefaultFetchPlan002() {\n-        OpenJPAEntityManagerFactory emf2 = createNamedEMF(getPersistenceUnitName(), \n-            FGManager.class, FGDepartment.class, FGEmployee.class, FGAddress.class, \n-            \"openjpa.FetchGroups\", \"Default,DescFetchGroup\");\n-        \n+        OpenJPAEntityManagerFactory emf2 =\n+            createNamedEMF(getPersistenceUnitName(), FGManager.class, FGDepartment.class, FGEmployee.class,\n+                FGAddress.class, \"openjpa.FetchGroups\", \"Default,DescFetchGroup\");\n+\n         OpenJPAEntityManager em = emf2.createEntityManager();\n         FetchPlan fp = em.getFetchPlan();\n         assertNotNull(fp);\n         assertNotNull(fp.getFetchGroups());\n         assertEquals(2, fp.getFetchGroups().size());\n         assertTrue(fp.getFetchGroups().contains(\"Default\")); // Not the same as \"default\"\n         assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n-        \n-        FetchConfiguration fetchCfg = ((org.apache.openjpa.persistence.EntityManagerImpl) em)\n-                .getBroker()\n-                .getFetchConfiguration();\n+\n+        FetchConfiguration fetchCfg =\n+            ((org.apache.openjpa.persistence.EntityManagerImpl) em).getBroker().getFetchConfiguration();\n         assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n+\n         FGManager mgr = managerSet.iterator().next();\n         assertNotNull(mgr);\n-        \n+\n         FGManager findMgr = em.find(FGManager.class, mgr.getId());\n         em.close();\n         emf2.close();\n-        \n+\n         assertEquals(mgr.getId(), findMgr.getId()); // Identity is always loaded\n         assertNull(findMgr.getFirstName());\n         assertNull(findMgr.getLastName());\n         assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n     }\n-    \n+\n     /**\n-     * Test clearFetchGroups(), which removes all fetch groups from the fetch plan and reactivates\n-     * the \"default\" fetch plan.\n+     * Test clearFetchGroups(), which removes all fetch groups from the fetch plan and reactivates the \"default\" fetch\n+     * plan.\n      * \n-     * Note that the method does not place \"default\" back in the list of active fetch groups, OPENJPA-2413\n-     * was opened to note this behavior.\n+     * Note that the method does not place \"default\" back in the list of active fetch groups, OPENJPA-2413 was opened to\n+     * note this behavior.\n      */\n     public void testClearFetchGroups001() {\n-        OpenJPAEntityManagerFactory emf2 = createNamedEMF(getPersistenceUnitName(), \n-            FGManager.class, FGDepartment.class, FGEmployee.class, FGAddress.class, \n-            \"openjpa.FetchGroups\", \"Default,DescFetchGroup\");\n-        \n+        OpenJPAEntityManagerFactory emf2 =\n+            createNamedEMF(getPersistenceUnitName(), FGManager.class, FGDepartment.class, FGEmployee.class,\n+                FGAddress.class, \"openjpa.FetchGroups\", \"Default,DescFetchGroup\");\n+\n         OpenJPAEntityManager em = emf2.createEntityManager();\n         FetchPlan fp = em.getFetchPlan();\n         assertNotNull(fp);\n@@ -232,9 +243,8 @@ public void testClearFetchGroups001() {\n         assertTrue(fp.getFetchGroups().contains(\"Default\")); // Not the same as \"default\"\n         assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n         \n-        FetchConfiguration fetchCfg = ((org.apache.openjpa.persistence.EntityManagerImpl) em)\n-                .getBroker()\n-                .getFetchConfiguration();\n+        FetchConfiguration fetchCfg =\n+            ((org.apache.openjpa.persistence.EntityManagerImpl) em).getBroker().getFetchConfiguration();\n         assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n         \n         fp.clearFetchGroups(); // OPENJPA-2413: now places \"default\" in the list of active fetch groups.\n@@ -257,13 +267,12 @@ public void testClearFetchGroups001() {\n     }\n \n     /**\n-     * The resetFetchGroups() method restores the fetch plan's active fetch plans to \n-     * the PCtx's configured default.\n+     * The resetFetchGroups() method restores the fetch plan's active fetch plans to the PCtx's configured default.\n      */\n     public void testResetFetchGroups001() {\n-        OpenJPAEntityManagerFactory emf2 = createNamedEMF(getPersistenceUnitName(), \n-            FGManager.class, FGDepartment.class, FGEmployee.class, FGAddress.class, \n-            \"openjpa.FetchGroups\", \"Default,DescFetchGroup\");\n+        OpenJPAEntityManagerFactory emf2 =\n+            createNamedEMF(getPersistenceUnitName(), FGManager.class, FGDepartment.class, FGEmployee.class,\n+                FGAddress.class, \"openjpa.FetchGroups\", \"Default,DescFetchGroup\");\n         \n         OpenJPAEntityManager em = emf2.createEntityManager();\n         FetchPlan fp = em.getFetchPlan();\n@@ -273,9 +282,8 @@ public void testResetFetchGroups001() {\n         assertTrue(fp.getFetchGroups().contains(\"Default\")); // Not the same as \"default\"\n         assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n         \n-        FetchConfiguration fetchCfg = ((org.apache.openjpa.persistence.EntityManagerImpl) em)\n-                .getBroker()\n-                .getFetchConfiguration();\n+        FetchConfiguration fetchCfg =\n+            ((org.apache.openjpa.persistence.EntityManagerImpl) em).getBroker().getFetchConfiguration();\n         assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n         \n         \n@@ -294,171 +302,168 @@ public void testResetFetchGroups001() {\n         assertTrue(fp.getFetchGroups().contains(\"Default\")); // Not the same as \"default\"\n         assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n         assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n-        // Verify that the PCtx default fetch plan was properly restored.  \"default\" should not be enabled\n+\n+        // Verify that the PCtx default fetch plan was properly restored. \"default\" should not be enabled\n         // since it was not listed by openjpa.FetchGroups.\n         FGManager mgr = managerSet.iterator().next();\n         assertNotNull(mgr);\n-        \n+\n         FGManager findMgr = em.find(FGManager.class, mgr.getId());\n         em.close();\n         emf2.close();\n-        \n+\n         assertEquals(mgr.getId(), findMgr.getId()); // Identity is always loaded\n-//        assertNull(findMgr.getFirstName()); // Commented out, for OPENJPA-2420\n-//        assertNull(findMgr.getLastName());\n+        // assertNull(findMgr.getFirstName()); // Commented out, for OPENJPA-2420\n+        // assertNull(findMgr.getLastName());\n         assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n     }\n-    \n+\n     /**\n      * Baseline test for Finder Cache\n      */\n     public void testFinderCache001() {\n         OpenJPAEntityManager em = emf.createEntityManager();\n-        \n+\n         FetchPlan fp = em.getFetchPlan();\n         assertNotNull(fp);\n         assertNotNull(fp.getFetchGroups());\n         assertEquals(1, fp.getFetchGroups().size());\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n-        \n-        FetchConfiguration fetchCfg = ((org.apache.openjpa.persistence.EntityManagerImpl) em)\n-                .getBroker()\n-                .getFetchConfiguration();\n+\n+        FetchConfiguration fetchCfg =\n+            ((org.apache.openjpa.persistence.EntityManagerImpl) em).getBroker().getFetchConfiguration();\n         assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n+\n         FGManager mgr = managerSet.iterator().next();\n         assertNotNull(mgr);\n-        \n+\n         {\n             // First find, to prime the Finder Cache\n             FGManager findMgr = em.find(FGManager.class, mgr.getId());\n             em.clear();\n-            \n+\n             assertEquals(mgr.getId(), findMgr.getId());\n             assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n             assertEquals(mgr.getLastName(), findMgr.getLastName());\n             assertNull(findMgr.getDescription()); // Should be lazy-loaded\n         }\n-        \n+\n         {\n             // Second find, should rely on the finder cache to reuse generated SQL.\n             FGManager findMgr = em.find(FGManager.class, mgr.getId());\n             em.clear();\n-            \n+\n             assertEquals(mgr.getId(), findMgr.getId());\n             assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n             assertEquals(mgr.getLastName(), findMgr.getLastName());\n             assertNull(findMgr.getDescription()); // Should be lazy-loaded\n-        }   \n-        \n+        }\n+\n         em.close();\n     }\n-    \n+\n     /**\n-     * Only SQL generated by the PCtx's default fetch plan should be used by the finder cache,\n-     * as it currently lacks the ability to distinguish fetch plan configuration in its key value.\n-     * The PCtx's default fetch plan is the normal plan not modified by the \"openjpa.FetchGroups\"\n-     * property.\n+     * Only SQL generated by the PCtx's default fetch plan should be used by the finder cache, as it currently lacks the\n+     * ability to distinguish fetch plan configuration in its key value. The PCtx's default fetch plan is the normal\n+     * plan not modified by the \"openjpa.FetchGroups\" property.\n      * \n-     * In this variant, a find using the default fetch plan is first executed to prime the finder cache.\n-     * Finds operating under a modified fetch plan should not utilize sql stored in the finder cache.\n+     * In this variant, a find using the default fetch plan is first executed to prime the finder cache. Finds operating\n+     * under a modified fetch plan should not utilize sql stored in the finder cache.\n      */\n     public void testFinderCache002() {\n         OpenJPAEntityManager em = emf.createEntityManager();\n-        \n+\n         FetchPlan fp = em.getFetchPlan();\n         assertNotNull(fp);\n         assertNotNull(fp.getFetchGroups());\n         assertEquals(1, fp.getFetchGroups().size());\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n-        \n-        FetchConfiguration fetchCfg = ((org.apache.openjpa.persistence.EntityManagerImpl) em)\n-                .getBroker()\n-                .getFetchConfiguration();\n+\n+        FetchConfiguration fetchCfg =\n+            ((org.apache.openjpa.persistence.EntityManagerImpl) em).getBroker().getFetchConfiguration();\n         assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n+\n         FGManager mgr = managerSet.iterator().next();\n         assertNotNull(mgr);\n-        \n+\n         {\n             // First find, to prime the Finder Cache\n             FGManager findMgr = em.find(FGManager.class, mgr.getId());\n             em.clear();\n-            \n+\n             assertEquals(mgr.getId(), findMgr.getId());\n             assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n             assertEquals(mgr.getLastName(), findMgr.getLastName());\n             assertNull(findMgr.getDescription()); // Should be lazy-loaded\n         }\n-        \n+\n         {\n             // Second find, should rely on the finder cache to reuse generated SQL.\n             FGManager findMgr = em.find(FGManager.class, mgr.getId());\n             em.clear();\n-            \n+\n             assertEquals(mgr.getId(), findMgr.getId());\n             assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n             assertEquals(mgr.getLastName(), findMgr.getLastName());\n             assertNull(findMgr.getDescription()); // Should be lazy-loaded\n         }\n-        \n+\n         // Add a fetch group to the fetch plan and verify expected behavior\n         fp.addFetchGroup(\"DescFetchGroup\");\n         assertNotNull(fp.getFetchGroups());\n         assertEquals(2, fp.getFetchGroups().size());\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n         assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n         assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n+\n         {\n             // Second find, should rely on the finder cache to reuse generated SQL.\n             FGManager findMgr = em.find(FGManager.class, mgr.getId());\n             em.clear();\n-            \n+\n             assertEquals(mgr.getId(), findMgr.getId());\n             assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n             assertEquals(mgr.getLastName(), findMgr.getLastName());\n             assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n         }\n-        \n+\n         // Remove the fetch group previously added, and verify expected behavior\n         fp.removeFetchGroup(\"DescFetchGroup\");\n         assertNotNull(fp.getFetchGroups());\n         assertEquals(1, fp.getFetchGroups().size());\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n         assertFalse(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n         assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n+\n         {\n             FGManager findMgr = em.find(FGManager.class, mgr.getId());\n             em.clear();\n-            \n+\n             assertEquals(mgr.getId(), findMgr.getId());\n             assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n             assertEquals(mgr.getLastName(), findMgr.getLastName());\n             assertNull(findMgr.getDescription()); // Should be lazy-loaded\n-        }   \n-        \n+        }\n+\n         // Add a fetch group to the fetch plan and verify expected behavior\n         fp.addFetchGroup(\"DescFetchGroup\");\n         assertNotNull(fp.getFetchGroups());\n         assertEquals(2, fp.getFetchGroups().size());\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n         assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n         assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n+\n         {\n             // Second find, should rely on the finder cache to reuse generated SQL.\n             FGManager findMgr = em.find(FGManager.class, mgr.getId());\n             em.clear();\n-            \n+\n             assertEquals(mgr.getId(), findMgr.getId());\n             assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n             assertEquals(mgr.getLastName(), findMgr.getLastName());\n             assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n         }\n-        \n+\n         // Reset the fetch plan, and verify expected behavior\n         fp.resetFetchGroups();\n         assertNotNull(fp.getFetchGroups());\n@@ -469,13 +474,13 @@ public void testFinderCache002() {\n         {\n             FGManager findMgr = em.find(FGManager.class, mgr.getId());\n             em.clear();\n-            \n+\n             assertEquals(mgr.getId(), findMgr.getId());\n             assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n             assertEquals(mgr.getLastName(), findMgr.getLastName());\n             assertNull(findMgr.getDescription()); // Should be lazy-loaded\n         }\n-        \n+\n         // Add a fetch group to the fetch plan and verify expected behavior\n         fp.addFetchGroup(\"DescFetchGroup\");\n         assertNotNull(fp.getFetchGroups());\n@@ -518,13 +523,12 @@ public void testFinderCache002() {\n     }\n     \n     /**\n-     * Only SQL generated by the PCtx's default fetch plan should be used by the finder cache,\n-     * as it currently lacks the ability to distinguish fetch plan configuration in its key value.\n-     * The PCtx's default fetch plan is the normal plan not modified by the \"openjpa.FetchGroups\"\n-     * property.\n+     * Only SQL generated by the PCtx's default fetch plan should be used by the finder cache, as it currently lacks the\n+     * ability to distinguish fetch plan configuration in its key value. The PCtx's default fetch plan is the normal\n+     * plan not modified by the \"openjpa.FetchGroups\" property.\n      * \n-     * In this variant, a find using a modified fetch plan is first executed, which should not be added\n-     * to the finder cache.  \n+     * In this variant, a find using a modified fetch plan is first executed, which should not be added to the finder\n+     * cache.\n      */\n     public void testFinderCache003() {\n         OpenJPAEntityManager em = emf.createEntityManager();\n@@ -538,9 +542,8 @@ public void testFinderCache003() {\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n         assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n         \n-        FetchConfiguration fetchCfg = ((org.apache.openjpa.persistence.EntityManagerImpl) em)\n-                .getBroker()\n-                .getFetchConfiguration();\n+        FetchConfiguration fetchCfg =\n+            ((org.apache.openjpa.persistence.EntityManagerImpl) em).getBroker().getFetchConfiguration();\n         assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n         \n         \n@@ -564,91 +567,91 @@ public void testFinderCache003() {\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n         assertFalse(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n         assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n+\n         {\n             FGManager findMgr = em.find(FGManager.class, mgr.getId());\n             em.clear();\n-            \n+\n             assertEquals(mgr.getId(), findMgr.getId());\n             assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n             assertEquals(mgr.getLastName(), findMgr.getLastName());\n             assertNull(findMgr.getDescription()); // Should be lazy-loaded\n-        }   \n-        \n+        }\n+\n         // Restore the fetch group to the fetch plan and verify expected behavior\n         fp.addFetchGroup(\"DescFetchGroup\");\n         assertNotNull(fp.getFetchGroups());\n         assertEquals(2, fp.getFetchGroups().size());\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n         assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n         assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n+\n         {\n             // Second find, should rely on the finder cache to reuse generated SQL.\n             FGManager findMgr = em.find(FGManager.class, mgr.getId());\n             em.clear();\n-            \n+\n             assertEquals(mgr.getId(), findMgr.getId());\n             assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n             assertEquals(mgr.getLastName(), findMgr.getLastName());\n             assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n         }\n-        \n+\n         // Remove the \"DescFetchGroup\" fetch group, and verify expected behavior\n         fp.removeFetchGroup(\"DescFetchGroup\");\n         assertNotNull(fp.getFetchGroups());\n         assertEquals(1, fp.getFetchGroups().size());\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n         assertFalse(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n         assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n+\n         {\n             FGManager findMgr = em.find(FGManager.class, mgr.getId());\n             em.clear();\n-            \n+\n             assertEquals(mgr.getId(), findMgr.getId());\n             assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n             assertEquals(mgr.getLastName(), findMgr.getLastName());\n             assertNull(findMgr.getDescription()); // Should be lazy-loaded\n-        } \n-        \n+        }\n+\n         // Restore the fetch group to the fetch plan and verify expected behavior\n         fp.addFetchGroup(\"DescFetchGroup\");\n         assertNotNull(fp.getFetchGroups());\n         assertEquals(2, fp.getFetchGroups().size());\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n         assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n         assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n+\n         {\n             // Second find, should rely on the finder cache to reuse generated SQL.\n             FGManager findMgr = em.find(FGManager.class, mgr.getId());\n             em.clear();\n-            \n+\n             assertEquals(mgr.getId(), findMgr.getId());\n             assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n             assertEquals(mgr.getLastName(), findMgr.getLastName());\n             assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n         }\n-        \n+\n         // Reset the fetch plan, and verify expected behavior\n         fp.resetFetchGroups();\n         assertNotNull(fp.getFetchGroups());\n         assertEquals(1, fp.getFetchGroups().size());\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n         assertFalse(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n         assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n+\n         {\n             FGManager findMgr = em.find(FGManager.class, mgr.getId());\n             em.clear();\n-            \n+\n             assertEquals(mgr.getId(), findMgr.getId());\n             assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n             assertEquals(mgr.getLastName(), findMgr.getLastName());\n             assertNull(findMgr.getDescription()); // Should be lazy-loaded\n         }\n-        \n+\n         // Restore the fetch group to the fetch plan and verify expected behavior\n         fp.addFetchGroup(\"DescFetchGroup\");\n         assertNotNull(fp.getFetchGroups());\n@@ -691,15 +694,14 @@ public void testFinderCache003() {\n     }\n     \n     /**\n-     * Only SQL generated by the PCtx's default fetch plan should be used by the finder cache,\n-     * as it currently lacks the ability to distinguish fetch plan configuration in its key value.\n-     * The PCtx's default fetch plan is modified by the \"openjpa.FetchGroups\" property.\n-     *  \n+     * Only SQL generated by the PCtx's default fetch plan should be used by the finder cache, as it currently lacks the\n+     * ability to distinguish fetch plan configuration in its key value. The PCtx's default fetch plan is modified by\n+     * the \"openjpa.FetchGroups\" property.\n      */\n     public void testFinderCache004() {\n-        OpenJPAEntityManagerFactory emf2 = createNamedEMF(getPersistenceUnitName(), \n-            FGManager.class, FGDepartment.class, FGEmployee.class, FGAddress.class, \n-            \"openjpa.FetchGroups\", \"default,DescFetchGroup\");\n+        OpenJPAEntityManagerFactory emf2 =\n+            createNamedEMF(getPersistenceUnitName(), FGManager.class, FGDepartment.class, FGEmployee.class,\n+                FGAddress.class, \"openjpa.FetchGroups\", \"default,DescFetchGroup\");\n         \n         OpenJPAEntityManager em = emf2.createEntityManager();\n         FetchPlan fp = em.getFetchPlan();\n@@ -708,93 +710,92 @@ public void testFinderCache004() {\n         assertEquals(2, fp.getFetchGroups().size());\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n         assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n-        \n-        FetchConfiguration fetchCfg = ((org.apache.openjpa.persistence.EntityManagerImpl) em)\n-                .getBroker()\n-                .getFetchConfiguration();\n+\n+        FetchConfiguration fetchCfg =\n+            ((org.apache.openjpa.persistence.EntityManagerImpl) em).getBroker().getFetchConfiguration();\n         assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n+\n         FGManager mgr = managerSet.iterator().next();\n         assertNotNull(mgr);\n-        \n+\n         {\n             // First find, to prime the Finder Cache\n             FGManager findMgr = em.find(FGManager.class, mgr.getId());\n             em.clear();\n-            \n+\n             assertEquals(mgr.getId(), findMgr.getId());\n             assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n             assertEquals(mgr.getLastName(), findMgr.getLastName());\n             assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n         }\n-        \n+\n         {\n             // Second find, should rely on the finder cache to reuse generated SQL.\n             FGManager findMgr = em.find(FGManager.class, mgr.getId());\n             em.clear();\n-            \n+\n             assertEquals(mgr.getId(), findMgr.getId());\n             assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n             assertEquals(mgr.getLastName(), findMgr.getLastName());\n             assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n         }\n-        \n+\n         // Remove a fetch group to the fetch plan and verify expected behavior\n         fp.removeFetchGroup(\"DescFetchGroup\");\n         assertNotNull(fp.getFetchGroups());\n         assertEquals(1, fp.getFetchGroups().size());\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n         assertFalse(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n         assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n+\n         {\n             // Second find, should rely on the finder cache to reuse generated SQL.\n             FGManager findMgr = em.find(FGManager.class, mgr.getId());\n             em.clear();\n-            \n+\n             assertEquals(mgr.getId(), findMgr.getId());\n             assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n             assertEquals(mgr.getLastName(), findMgr.getLastName());\n             assertNull(findMgr.getDescription()); // Should be lazy-loaded\n         }\n-        \n+\n         // Restore the fetch group previously removed, and verify expected behavior\n         fp.addFetchGroup(\"DescFetchGroup\");\n         assertNotNull(fp.getFetchGroups());\n         assertEquals(2, fp.getFetchGroups().size());\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n         assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n         assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n+\n         {\n             FGManager findMgr = em.find(FGManager.class, mgr.getId());\n             em.clear();\n-            \n+\n             assertEquals(mgr.getId(), findMgr.getId());\n             assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n             assertEquals(mgr.getLastName(), findMgr.getLastName());\n             assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n-        }   \n-        \n+        }\n+\n         // Remove a fetch group to the fetch plan and verify expected behavior\n         fp.removeFetchGroup(\"DescFetchGroup\");\n         assertNotNull(fp.getFetchGroups());\n         assertEquals(1, fp.getFetchGroups().size());\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n         assertFalse(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n         assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n+\n         {\n             // Second find, should rely on the finder cache to reuse generated SQL.\n             FGManager findMgr = em.find(FGManager.class, mgr.getId());\n             em.clear();\n-            \n+\n             assertEquals(mgr.getId(), findMgr.getId());\n             assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n             assertEquals(mgr.getLastName(), findMgr.getLastName());\n             assertNull(findMgr.getDescription()); // Should be lazy-loaded\n         }\n-        \n+\n         // Reset the fetch plan, and verify expected behavior\n         fp.resetFetchGroups();\n         assertNotNull(fp.getFetchGroups());\n@@ -837,104 +838,103 @@ public void testFinderCache004() {\n     }\n     \n     /**\n-     * Only SQL generated by the PCtx's default fetch plan should be used by the finder cache,\n-     * as it currently lacks the ability to distinguish fetch plan configuration in its key value.\n-     * The PCtx's default fetch plan is modified by the \"openjpa.FetchGroups\" property.\n-     * \n-     * In this variant, a find using a modified fetch plan is first executed, which should not be added\n-     * to the finder cache.  \n-     */\n-    public void testFinderCache005() {\n-        OpenJPAEntityManagerFactory emf2 = createNamedEMF(getPersistenceUnitName(), \n-            FGManager.class, FGDepartment.class, FGEmployee.class, FGAddress.class, \n-            \"openjpa.FetchGroups\", \"default,DescFetchGroup\");\n-        \n+      * Only SQL generated by the PCtx's default fetch plan should be used by the finder cache, as it currently lacks\n+      * the ability to distinguish fetch plan configuration in its key value. The PCtx's default fetch plan is modified\n+      * by the \"openjpa.FetchGroups\" property.\n+      * \n+      * In this variant, a find using a modified fetch plan is first executed, which should not be added to the finder\n+      * cache.\n+      */\n+     public void testFinderCache005() {\n+        OpenJPAEntityManagerFactory emf2 =\n+            createNamedEMF(getPersistenceUnitName(), FGManager.class, FGDepartment.class, FGEmployee.class,\n+                FGAddress.class, \"openjpa.FetchGroups\", \"default,DescFetchGroup\");\n+\n         OpenJPAEntityManager em = emf2.createEntityManager();\n         FetchPlan fp = em.getFetchPlan();\n         assertNotNull(fp);\n         assertNotNull(fp.getFetchGroups());\n         assertEquals(2, fp.getFetchGroups().size());\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n         assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n-        \n-        FetchConfiguration fetchCfg = ((org.apache.openjpa.persistence.EntityManagerImpl) em)\n-                .getBroker()\n-                .getFetchConfiguration();\n+\n+        FetchConfiguration fetchCfg =\n+            ((org.apache.openjpa.persistence.EntityManagerImpl) em).getBroker().getFetchConfiguration();\n         assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n+\n         FGManager mgr = managerSet.iterator().next();\n         assertNotNull(mgr);\n-        \n+\n         fp.removeFetchGroup(\"DescFetchGroup\");\n         assertEquals(1, fp.getFetchGroups().size());\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n         assertFalse(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n         assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n+\n         {\n             FGManager findMgr = em.find(FGManager.class, mgr.getId());\n             em.clear();\n-            \n+\n             assertEquals(mgr.getId(), findMgr.getId());\n             assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n             assertEquals(mgr.getLastName(), findMgr.getLastName());\n             assertNull(findMgr.getDescription()); // Should be lazy-loaded\n         }\n-        \n+\n         // Restore the \"DescFetchGroup\" fetch group, and verify expected behavior\n         fp.addFetchGroup(\"DescFetchGroup\");\n         assertNotNull(fp.getFetchGroups());\n         assertEquals(2, fp.getFetchGroups().size());\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n         assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n         assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n+\n         {\n             FGManager findMgr = em.find(FGManager.class, mgr.getId());\n             em.clear();\n-            \n+\n             assertEquals(mgr.getId(), findMgr.getId());\n             assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n             assertEquals(mgr.getLastName(), findMgr.getLastName());\n             assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n-        }   \n-        \n+        }\n+\n         // Remove the \"DescFetchGroup\" fetch group, and verify expected behavior\n         fp.removeFetchGroup(\"DescFetchGroup\");\n         assertNotNull(fp.getFetchGroups());\n         assertEquals(1, fp.getFetchGroups().size());\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n         assertFalse(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n         assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n+\n         {\n             FGManager findMgr = em.find(FGManager.class, mgr.getId());\n             em.clear();\n-            \n+\n             assertEquals(mgr.getId(), findMgr.getId());\n             assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n             assertEquals(mgr.getLastName(), findMgr.getLastName());\n             assertNull(findMgr.getDescription()); // Should be lazy-loaded\n-        } \n-        \n+        }\n+\n         // Reset the fetch plan, and verify expected behavior\n         fp.resetFetchGroups();\n         assertNotNull(fp.getFetchGroups());\n         assertEquals(2, fp.getFetchGroups().size());\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n         assertTrue(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n         assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n+\n         {\n             FGManager findMgr = em.find(FGManager.class, mgr.getId());\n             em.clear();\n-            \n+\n             assertEquals(mgr.getId(), findMgr.getId());\n             assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n             assertEquals(mgr.getLastName(), findMgr.getLastName());\n             assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n         }\n-        \n+\n         // Remove the \"DescFetchGroup\" fetch group, and verify expected behavior\n         fp.removeFetchGroup(\"DescFetchGroup\");\n         assertNotNull(fp.getFetchGroups());\n@@ -976,15 +976,14 @@ public void testFinderCache005() {\n         emf2.close();\n     }\n     \n-    /**\n-     * Only SQL generated by the PCtx's default fetch plan should be used by the finder cache,\n-     * as it currently lacks the ability to distinguish fetch plan configuration in its key value.\n-     * The PCtx's default fetch plan is the normal plan not modified by the \"openjpa.FetchGroups\"\n-     * property.\n-     * \n-     * In this variant, a find using the default fetch plan is first executed to prime the finder cache.\n-     * Finds operating under a modified fetch plan should not utilize sql stored in the finder cache.\n-     */\n+     /**\n+      * Only SQL generated by the PCtx's default fetch plan should be used by the finder cache, as it currently lacks\n+      * the ability to distinguish fetch plan configuration in its key value. The PCtx's default fetch plan is the \\\n+      * normal plan not modified by the \"openjpa.FetchGroups\" property.\n+      * \n+      * In this variant, a find using the default fetch plan is first executed to prime the finder cache. Finds \n+      * operating under a modified fetch plan should not utilize sql stored in the finder cache.\n+      */\n     public void testFinderCache006() {\n         OpenJPAEntityManager em = emf.createEntityManager();\n         \n@@ -994,9 +993,8 @@ public void testFinderCache006() {\n         assertEquals(1, fp.getFetchGroups().size());\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n         \n-        FetchConfiguration fetchCfg = ((org.apache.openjpa.persistence.EntityManagerImpl) em)\n-                .getBroker()\n-                .getFetchConfiguration();\n+        FetchConfiguration fetchCfg =\n+            ((org.apache.openjpa.persistence.EntityManagerImpl) em).getBroker().getFetchConfiguration();\n         assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n         \n         FGManager mgr = managerSet.iterator().next();\n@@ -1031,55 +1029,55 @@ public void testFinderCache006() {\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n         assertTrue(fp.getFields().contains(empDescriptionFieldStr));\n         assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n+\n         {\n             // Second find, should rely on the finder cache to reuse generated SQL.\n             FGManager findMgr = em.find(FGManager.class, mgr.getId());\n             em.clear();\n-            \n+\n             assertEquals(mgr.getId(), findMgr.getId());\n             assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n             assertEquals(mgr.getLastName(), findMgr.getLastName());\n             assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n         }\n-        \n+\n         // Remove the field previously added, and verify expected behavior\n         fp.removeField(empDescriptionFieldStr);\n         assertNotNull(fp.getFetchGroups());\n         assertEquals(1, fp.getFetchGroups().size());\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n         assertFalse(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n         assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n+\n         {\n             FGManager findMgr = em.find(FGManager.class, mgr.getId());\n             em.clear();\n-            \n+\n             assertEquals(mgr.getId(), findMgr.getId());\n             assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n             assertEquals(mgr.getLastName(), findMgr.getLastName());\n             assertNull(findMgr.getDescription()); // Should be lazy-loaded\n-        }   \n-        \n+        }\n+\n         // Add a field to the fetch plan and verify expected behavior\n         fp.addField(empDescriptionFieldStr);\n         assertNotNull(fp.getFetchGroups());\n         assertEquals(1, fp.getFetchGroups().size());\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n         assertTrue(fp.getFields().contains(empDescriptionFieldStr));\n         assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n+\n         {\n             // Second find, should rely on the finder cache to reuse generated SQL.\n             FGManager findMgr = em.find(FGManager.class, mgr.getId());\n             em.clear();\n-            \n+\n             assertEquals(mgr.getId(), findMgr.getId());\n             assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n             assertEquals(mgr.getLastName(), findMgr.getLastName());\n             assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n         }\n-        \n+\n         // Reset the fetch groups, and verify expected behavior (note the reset doesn't remove added fields!)\n         fp.resetFetchGroups();\n         assertNotNull(fp.getFetchGroups());\n@@ -1158,9 +1156,8 @@ public void testFinderCache007() {\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n         assertTrue(fp.getFields().contains(empDescriptionFieldStr));\n         \n-        FetchConfiguration fetchCfg = ((org.apache.openjpa.persistence.EntityManagerImpl) em)\n-                .getBroker()\n-                .getFetchConfiguration();\n+        FetchConfiguration fetchCfg =\n+            ((org.apache.openjpa.persistence.EntityManagerImpl) em).getBroker().getFetchConfiguration();\n         assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n         \n         \n@@ -1184,73 +1181,73 @@ public void testFinderCache007() {\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n         assertFalse(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n         assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n+\n         {\n             FGManager findMgr = em.find(FGManager.class, mgr.getId());\n             em.clear();\n-            \n+\n             assertEquals(mgr.getId(), findMgr.getId());\n             assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n             assertEquals(mgr.getLastName(), findMgr.getLastName());\n             assertNull(findMgr.getDescription()); // Should be lazy-loaded\n-        }   \n-        \n+        }\n+\n         // Restore the field to the fetch plan and verify expected behavior\n         fp.addField(empDescriptionFieldStr);\n         assertNotNull(fp.getFetchGroups());\n         assertEquals(1, fp.getFetchGroups().size());\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n         assertTrue(fp.getFields().contains(empDescriptionFieldStr));\n         assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n+\n         {\n             // Second find, should rely on the finder cache to reuse generated SQL.\n             FGManager findMgr = em.find(FGManager.class, mgr.getId());\n             em.clear();\n-            \n+\n             assertEquals(mgr.getId(), findMgr.getId());\n             assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n             assertEquals(mgr.getLastName(), findMgr.getLastName());\n             assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n         }\n-        \n+\n         // Remove the \"DescFetchGroup\" fetch group, and verify expected behavior\n         fp.removeField(empDescriptionFieldStr);\n         assertNotNull(fp.getFetchGroups());\n         assertEquals(1, fp.getFetchGroups().size());\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n         assertFalse(fp.getFetchGroups().contains(\"DescFetchGroup\"));\n         assertTrue(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n+\n         {\n             FGManager findMgr = em.find(FGManager.class, mgr.getId());\n             em.clear();\n-            \n+\n             assertEquals(mgr.getId(), findMgr.getId());\n             assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n             assertEquals(mgr.getLastName(), findMgr.getLastName());\n             assertNull(findMgr.getDescription()); // Should be lazy-loaded\n-        } \n-        \n+        }\n+\n         // Restore the field to the fetch plan and verify expected behavior\n         fp.addField(empDescriptionFieldStr);\n         assertNotNull(fp.getFetchGroups());\n         assertEquals(1, fp.getFetchGroups().size());\n         assertTrue(fp.getFetchGroups().contains(\"default\"));\n         assertTrue(fp.getFields().contains(empDescriptionFieldStr));\n         assertFalse(fetchCfg.isDefaultPUFetchGroupConfigurationOnly());\n-        \n+\n         {\n             // Second find, should rely on the finder cache to reuse generated SQL.\n             FGManager findMgr = em.find(FGManager.class, mgr.getId());\n             em.clear();\n-            \n+\n             assertEquals(mgr.getId(), findMgr.getId());\n             assertEquals(mgr.getFirstName(), findMgr.getFirstName());\n             assertEquals(mgr.getLastName(), findMgr.getLastName());\n             assertEquals(mgr.getDescription(), findMgr.getDescription()); // Should not be lazy-loaded\n         }\n-        \n+\n         // Reset the fetch plan, and verify expected behavior (should not affect fields)\n         fp.resetFetchGroups();\n         assertNotNull(fp.getFetchGroups());\n@@ -1339,58 +1336,58 @@ private void createEmployeeData() {\n             mgr.setDescription(\"Manager-\" + id);\n             mgr.setAddress(addr);\n             mgr.setDept(dept);\n-            \n+\n             em.persist(mgr);\n-            \n+\n             managerSet.add(mgr);\n         }\n-        \n+\n         // Create Employees\n         for (int i = 1; i < empCount; i++) {\n             int id = empIdIndex++;\n             int mgrId = (id % empPerMgr) + 1;\n-            \n+\n             FGAddress addr = createAddress(id);\n             em.persist(addr);\n-            \n+\n             FGDepartment dept = createDepartment(id);\n             em.persist(dept);\n-            \n+\n             FGEmployee emp = new FGEmployee();\n-            emp.setId(id);           \n+            emp.setId(id);\n             emp.setFirstName(\"First-\" + id);\n             emp.setLastName(\"Last-\" + id);\n             emp.setRating(\"Rating-\" + id);\n             emp.setDescription(\"Employee-\" + id);\n             emp.setAddress(addr);\n             emp.setDept(dept);\n-            \n+\n             em.persist(emp);\n-            \n+\n             employeeSet.add(emp);\n         }\n-        \n+\n         em.getTransaction().commit();\n-        \n+\n         em.close();\n     }\n-    \n+\n     private FGAddress createAddress(int id) {\n         FGAddress addr = new FGAddress();\n         addr.setId(id);\n         addr.setStreet(\"Street-\" + id);\n         addr.setCity(\"City-\" + id);\n         addr.setState(\"State-\" + id);\n         addr.setZip(id);\n-        \n+\n         return addr;\n     }\n-   \n+\n     private FGDepartment createDepartment(int id) {\n         FGDepartment dept = new FGDepartment();\n         dept.setId(id);\n         dept.setName(\"Department-\" + id);\n-        \n+\n         return dept;\n     }\n }"}]}

