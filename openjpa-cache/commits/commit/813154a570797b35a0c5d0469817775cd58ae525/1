{"sha":"813154a570797b35a0c5d0469817775cd58ae525","node_id":"MDY6Q29tbWl0MjA2MzY0OjgxMzE1NGE1NzA3OTdiMzVhMGM1ZDA0Njk4MTc3NzVjZDU4YWU1MjU=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2021-05-03T15:06:22Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2021-05-03T15:06:22Z"},"message":"OPENJPA-2861 fix unit test\n\nBoolean is the correct return value.\nThis should actually have been returned for all dictionaries.\nThe problem is that we always only return the _internal_ representation.\nThe reason is because CASE/WHEN can be used to return values, but also as subquery.\nNow imagine a database uses 0 and 1 for false and true. If CASE/WHEN is used\nas subquery we really have to return 0/1 (number) because otherwise the WHERE clause\nwould not fit. When not executing the query on a Entity, we do not know the target type.\nSo there is probably no way we can later do a BooleanRepresentation call to switch to boolean.\nAnd this would also break existing applications.","tree":{"sha":"540293edefd903775335645406fb970caa52191d","url":"https://api.github.com/repos/apache/openjpa/git/trees/540293edefd903775335645406fb970caa52191d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/813154a570797b35a0c5d0469817775cd58ae525","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/813154a570797b35a0c5d0469817775cd58ae525","html_url":"https://github.com/apache/openjpa/commit/813154a570797b35a0c5d0469817775cd58ae525","comments_url":"https://api.github.com/repos/apache/openjpa/commits/813154a570797b35a0c5d0469817775cd58ae525/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"31d2d862b74bfdcc6088e3c078dfde0098b42423","url":"https://api.github.com/repos/apache/openjpa/commits/31d2d862b74bfdcc6088e3c078dfde0098b42423","html_url":"https://github.com/apache/openjpa/commit/31d2d862b74bfdcc6088e3c078dfde0098b42423"}],"stats":{"total":10,"additions":7,"deletions":3},"files":[{"sha":"95f5a8f219adf10e3285fdf49964877200a68362","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/813154a570797b35a0c5d0469817775cd58ae525/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java","raw_url":"https://github.com/apache/openjpa/raw/813154a570797b35a0c5d0469817775cd58ae525/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestJPQLScalarExpressions.java?ref=813154a570797b35a0c5d0469817775cd58ae525","patch":"@@ -223,11 +223,15 @@ public void testSimpleCaseExpressions() {\n \n         result = (Object[]) rs.get(rs.size()-1);\n \n-        if (result[1] instanceof String)\n+        if (result[1] instanceof String) {\n             assertEquals(result[1], \"true\");\n-        else\n+        }\n+        else if (result[1] instanceof Boolean) {\n+            assertEquals(true, result[1]);\n+        }\n+        else {\n             assertEquals(result[1], 1);\n-\n+        }\n \n         startTx(em);\n         String update = \"update CompUser c set c.creditRating = \" +"}]}

