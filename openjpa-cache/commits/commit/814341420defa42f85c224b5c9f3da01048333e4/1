{"sha":"814341420defa42f85c224b5c9f3da01048333e4","node_id":"MDY6Q29tbWl0MjA2MzY0OjgxNDM0MTQyMGRlZmE0MmY4NWMyMjRiNWM5ZjNkYTAxMDQ4MzMzZTQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-18T20:20:26Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-08-18T20:20:26Z"},"message":"OPENJPA-849, OPENJPA-1251: property management, hidden values\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@805565 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f32a78922803a6a9c160a73561e8cc3ede2f2e6c","url":"https://api.github.com/repos/apache/openjpa/git/trees/f32a78922803a6a9c160a73561e8cc3ede2f2e6c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/814341420defa42f85c224b5c9f3da01048333e4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/814341420defa42f85c224b5c9f3da01048333e4","html_url":"https://github.com/apache/openjpa/commit/814341420defa42f85c224b5c9f3da01048333e4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/814341420defa42f85c224b5c9f3da01048333e4/comments","author":null,"committer":null,"parents":[{"sha":"0e4769e43bd84d82cf2fce85d326431c72d71e54","url":"https://api.github.com/repos/apache/openjpa/commits/0e4769e43bd84d82cf2fce85d326431c72d71e54","html_url":"https://github.com/apache/openjpa/commit/0e4769e43bd84d82cf2fce85d326431c72d71e54"}],"stats":{"total":497,"additions":215,"deletions":282},"files":[{"sha":"57c5f390e1b14d37a4cd806f76d25ac65225f06b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/AutoDetachValue.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/814341420defa42f85c224b5c9f3da01048333e4/openjpa-kernel/src/main/java/org/apache/openjpa/conf/AutoDetachValue.java","raw_url":"https://github.com/apache/openjpa/raw/814341420defa42f85c224b5c9f3da01048333e4/openjpa-kernel/src/main/java/org/apache/openjpa/conf/AutoDetachValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/AutoDetachValue.java?ref=814341420defa42f85c224b5c9f3da01048333e4","patch":"@@ -77,10 +77,10 @@ public int getConstant() {\n         return _flags;\n     }\n \n-    protected List getAliasList() {\n+    protected List<String> getAliasList() {\n         // We do not document the numeric values and they are not\n         // helpful to someone trying to understand the error message\n-        ArrayList list = new ArrayList();\n+        ArrayList<String> list = new ArrayList<String>();\n         for (int x = 0; x < ALIASES.length; x += 2)\n             list.add(ALIASES[x]);\n         return list;"},{"sha":"c35a51ba8d2d5d983d0a22b4f8bb0ee25ed6c942","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":67,"deletions":100,"changes":167,"blob_url":"https://github.com/apache/openjpa/blob/814341420defa42f85c224b5c9f3da01048333e4/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/814341420defa42f85c224b5c9f3da01048333e4/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=814341420defa42f85c224b5c9f3da01048333e4","patch":"@@ -41,6 +41,7 @@\n import org.apache.openjpa.kernel.InverseManager;\n import org.apache.openjpa.kernel.LockLevels;\n import org.apache.openjpa.kernel.LockManager;\n+import org.apache.openjpa.kernel.MixedLockLevels;\n import org.apache.openjpa.kernel.PreparedQueryCache;\n import org.apache.openjpa.kernel.QueryFlushModes;\n import org.apache.openjpa.kernel.RestoreState;\n@@ -86,8 +87,7 @@\n     extends ConfigurationImpl\n     implements OpenJPAConfiguration {\n \n-    private static final Localizer _loc =\n-        Localizer.forPackage(OpenJPAConfigurationImpl.class);\n+    private static final Localizer _loc = Localizer.forPackage(OpenJPAConfigurationImpl.class);\n \n     // cached state; some of this is created in getter methods, so make\n     // protected in case subclasses want to access without creating\n@@ -172,19 +172,17 @@\n     public ObjectValue writeBehindCachePlugin;\n     public ObjectValue writeBehindCacheManagerPlugin;\n     public ObjectValue writeBehindCallbackPlugin;\n+    public BooleanValue dynamicEnhancementAgent;\n     \n     // custom values\n     public BrokerFactoryValue brokerFactoryPlugin;\n     public RemoteCommitProviderValue remoteProviderPlugin;\n     public AutoDetachValue autoDetach;\n \n     private Collection<String> supportedOptions = new HashSet<String>(33);\n-    private final StoreFacadeTypeRegistry _storeFacadeRegistry =\n-        new StoreFacadeTypeRegistry();\n-    private BrokerFactoryEventManager _brokerFactoryEventManager =\n-        new BrokerFactoryEventManager(this);\n+    private final StoreFacadeTypeRegistry _storeFacadeRegistry = new StoreFacadeTypeRegistry();\n+    private BrokerFactoryEventManager _brokerFactoryEventManager = new BrokerFactoryEventManager(this);\n         \n-    public BooleanValue dynamicEnhancementAgent;\n \n     /**\n      * Default constructor. Attempts to load global properties.\n@@ -213,9 +211,8 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         String[] aliases;\n \n         classResolverPlugin = addPlugin(\"ClassResolver\", true);\n-        aliases =\n-            new String[] { \"default\",\n-                \"org.apache.openjpa.util.ClassResolverImpl\",\n+        aliases = new String[] { \n+                \"default\", \"org.apache.openjpa.util.ClassResolverImpl\",\n                 // deprecated alias\n                 \"spec\", \"org.apache.openjpa.util.ClassResolverImpl\", };\n         classResolverPlugin.setAliases(aliases);\n@@ -273,41 +270,38 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n \n         lockManagerPlugin = addPlugin(\"LockManager\", false);\n         aliases =\n-            new String[] { \"none\", \"org.apache.openjpa.kernel.NoneLockManager\",\n+            new String[] { \n+                \"none\", \"org.apache.openjpa.kernel.NoneLockManager\",\n                 \"version\", \"org.apache.openjpa.kernel.VersionLockManager\", };\n         lockManagerPlugin.setAliases(aliases);\n         lockManagerPlugin.setDefault(aliases[0]);\n         lockManagerPlugin.setString(aliases[0]);\n \n         inverseManagerPlugin = addPlugin(\"InverseManager\", false);\n-        aliases =\n-            new String[] { \"false\", null, \"true\",\n-                \"org.apache.openjpa.kernel.InverseManager\", };\n+        aliases = new String[] { \n+                \"false\", null, \n+                \"true\",  \"org.apache.openjpa.kernel.InverseManager\", };\n         inverseManagerPlugin.setAliases(aliases);\n         inverseManagerPlugin.setDefault(aliases[0]);\n         inverseManagerPlugin.setString(aliases[0]);\n \n         savepointManagerPlugin = addPlugin(\"SavepointManager\", true);\n-        aliases =\n-            new String[] { \"in-mem\",\n-                \"org.apache.openjpa.kernel.InMemorySavepointManager\", };\n+        aliases = new String[] { \n+                \"in-mem\", \"org.apache.openjpa.kernel.InMemorySavepointManager\", };\n         savepointManagerPlugin.setAliases(aliases);\n         savepointManagerPlugin.setDefault(aliases[0]);\n         savepointManagerPlugin.setString(aliases[0]);\n-        savepointManagerPlugin\n-            .setInstantiatingGetter(\"getSavepointManagerInstance\");\n+        savepointManagerPlugin.setInstantiatingGetter(\"getSavepointManagerInstance\");\n \n         orphanedKeyPlugin = addPlugin(\"OrphanedKeyAction\", true);\n-        aliases =\n-            new String[] { \"log\",\n-                \"org.apache.openjpa.event.LogOrphanedKeyAction\", \"exception\",\n-                \"org.apache.openjpa.event.ExceptionOrphanedKeyAction\", \"none\",\n-                \"org.apache.openjpa.event.NoneOrphanedKeyAction\", };\n+        aliases = new String[] { \n+                \"log\",       \"org.apache.openjpa.event.LogOrphanedKeyAction\", \n+                \"exception\", \"org.apache.openjpa.event.ExceptionOrphanedKeyAction\", \n+                \"none\",      \"org.apache.openjpa.event.NoneOrphanedKeyAction\", };\n         orphanedKeyPlugin.setAliases(aliases);\n         orphanedKeyPlugin.setDefault(aliases[0]);\n         orphanedKeyPlugin.setString(aliases[0]);\n-        orphanedKeyPlugin\n-            .setInstantiatingGetter(\"getOrphanedKeyActionInstance\");\n+        orphanedKeyPlugin.setInstantiatingGetter(\"getOrphanedKeyActionInstance\");\n \n         remoteProviderPlugin = new RemoteCommitProviderValue();\n         addValue(remoteProviderPlugin);\n@@ -318,21 +312,19 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         transactionMode.setDefault(aliases[0]);\n \n         managedRuntimePlugin = addPlugin(\"ManagedRuntime\", true);\n-        aliases =\n-            new String[] { \"auto\",\n-                \"org.apache.openjpa.ee.AutomaticManagedRuntime\", \"jndi\",\n-                \"org.apache.openjpa.ee.JNDIManagedRuntime\", \"invocation\",\n-                \"org.apache.openjpa.ee.InvocationManagedRuntime\", };\n+        aliases = new String[] { \n+                \"auto\",       \"org.apache.openjpa.ee.AutomaticManagedRuntime\", \n+                \"jndi\",       \"org.apache.openjpa.ee.JNDIManagedRuntime\", \n+                \"invocation\", \"org.apache.openjpa.ee.InvocationManagedRuntime\", };\n         managedRuntimePlugin.setAliases(aliases);\n         managedRuntimePlugin.setDefault(aliases[0]);\n         managedRuntimePlugin.setString(aliases[0]);\n         managedRuntimePlugin\n             .setInstantiatingGetter(\"getManagedRuntimeInstance\");\n \n         proxyManagerPlugin = addPlugin(\"ProxyManager\", true);\n-        aliases =\n-            new String[] { \"default\",\n-                \"org.apache.openjpa.util.ProxyManagerImpl\" };\n+        aliases = new String[] { \n+                \"default\", \"org.apache.openjpa.util.ProxyManagerImpl\" };\n         proxyManagerPlugin.setAliases(aliases);\n         proxyManagerPlugin.setDefault(aliases[0]);\n         proxyManagerPlugin.setString(aliases[0]);\n@@ -380,8 +372,7 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         connection2URL = addString(\"Connection2URL\");\n         connection2DriverName = addString(\"Connection2DriverName\");\n         connection2Properties = addString(\"Connection2Properties\");\n-        connectionFactory2Properties =\n-            addString(\"ConnectionFactory2Properties\");\n+        connectionFactory2Properties = addString(\"ConnectionFactory2Properties\");\n         connectionFactory2Name = addString(\"ConnectionFactory2Name\");\n \n         connectionFactoryMode = addBoolean(\"ConnectionFactoryMode\");\n@@ -408,13 +399,13 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         retainState.set(true);\n \n         restoreState = addInt(\"RestoreState\");\n-        aliases =\n-            new String[] { \"none\", String.valueOf(RestoreState.RESTORE_NONE),\n-                \"false\", String.valueOf(RestoreState.RESTORE_NONE),\n+        aliases = new String[] { \n+                \"none\",      String.valueOf(RestoreState.RESTORE_NONE),\n+                \"false\",     String.valueOf(RestoreState.RESTORE_NONE),\n                 \"immutable\", String.valueOf(RestoreState.RESTORE_IMMUTABLE),\n                 // \"true\" for compat with jdo RestoreValues\n-                \"true\", String.valueOf(RestoreState.RESTORE_IMMUTABLE), \"all\",\n-                String.valueOf(RestoreState.RESTORE_ALL), };\n+                \"true\",      String.valueOf(RestoreState.RESTORE_IMMUTABLE), \n+                \"all\",       String.valueOf(RestoreState.RESTORE_ALL), };\n         restoreState.setAliases(aliases);\n         restoreState.setDefault(aliases[0]);\n         restoreState.set(RestoreState.RESTORE_IMMUTABLE);\n@@ -425,10 +416,10 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n \n         detachStatePlugin = addPlugin(\"DetachState\", true);\n         aliases = new String[] {\n-            \"loaded\", DetachOptions.Loaded.class.getName(),\n-            \"fgs\", DetachOptions.FetchGroups.class.getName(),\n+            \"loaded\",       DetachOptions.Loaded.class.getName(),\n+            \"fgs\",          DetachOptions.FetchGroups.class.getName(),\n             \"fetch-groups\", DetachOptions.FetchGroups.class.getName(), \n-            \"all\", DetachOptions.All.class.getName(),\n+            \"all\",          DetachOptions.All.class.getName(),\n         };\n         detachStatePlugin.setAliases(aliases);\n         detachStatePlugin.setDefault(aliases[0]);\n@@ -458,11 +449,11 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         fetchGroups.set(new String[] { \"default\" });\n \n         flushBeforeQueries = addInt(\"FlushBeforeQueries\");\n-        aliases =\n-            new String[] { \"true\", String.valueOf(QueryFlushModes.FLUSH_TRUE),\n-                \"false\", String.valueOf(QueryFlushModes.FLUSH_FALSE),\n-                \"with-connection\",\n-                String.valueOf(QueryFlushModes.FLUSH_WITH_CONNECTION), };\n+        aliases = new String[] { \n+                \"true\",            String.valueOf(QueryFlushModes.FLUSH_TRUE),\n+                \"false\",           String.valueOf(QueryFlushModes.FLUSH_FALSE),\n+                \"with-connection\", String.valueOf(QueryFlushModes.FLUSH_WITH_CONNECTION), \n+        };\n         flushBeforeQueries.setAliases(aliases);\n         flushBeforeQueries.setDefault(aliases[0]);\n         flushBeforeQueries.set(QueryFlushModes.FLUSH_TRUE);\n@@ -474,8 +465,7 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         lockTimeout.setDynamic(true);\n         \n         readLockLevel = addInt(\"ReadLockLevel\");\n-        aliases =\n-            new String[] {\n+        aliases = new String[] {\n                 \"read\", String.valueOf(LockLevels.LOCK_READ),\n                 \"write\", String.valueOf(LockLevels.LOCK_WRITE),\n                 \"none\", String.valueOf(LockLevels.LOCK_NONE),\n@@ -486,8 +476,7 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         readLockLevel.setAliasListComprehensive(true);\n \n         writeLockLevel = addInt(\"WriteLockLevel\");\n-        aliases =\n-            new String[] {\n+        aliases = new String[] {\n                 \"read\", String.valueOf(LockLevels.LOCK_READ),\n                 \"write\", String.valueOf(LockLevels.LOCK_WRITE),\n                 \"none\", String.valueOf(LockLevels.LOCK_NONE),\n@@ -502,30 +491,23 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         addValue(seqPlugin);\n \n         connectionRetainMode = addInt(\"ConnectionRetainMode\");\n-        aliases =\n-            new String[] {\n-                \"on-demand\",\n-                String.valueOf(ConnectionRetainModes.CONN_RETAIN_DEMAND),\n-                \"transaction\",\n-                String.valueOf(ConnectionRetainModes.CONN_RETAIN_TRANS),\n-                \"always\",\n-                String.valueOf(ConnectionRetainModes.CONN_RETAIN_ALWAYS),\n+        aliases = new String[] {\n+                \"on-demand\",   String.valueOf(ConnectionRetainModes.CONN_RETAIN_DEMAND),\n+                \"transaction\", String.valueOf(ConnectionRetainModes.CONN_RETAIN_TRANS),\n+                \"always\",      String.valueOf(ConnectionRetainModes.CONN_RETAIN_ALWAYS),\n                 // deprecated\n-                \"persistence-manager\",\n-                String.valueOf(ConnectionRetainModes.CONN_RETAIN_ALWAYS),\n+                \"persistence-manager\", String.valueOf(ConnectionRetainModes.CONN_RETAIN_ALWAYS),\n             };\n         connectionRetainMode.setAliases(aliases);\n         connectionRetainMode.setDefault(aliases[0]);\n         connectionRetainMode.setAliasListComprehensive(true);\n         connectionRetainMode.set(ConnectionRetainModes.CONN_RETAIN_DEMAND);\n \n         filterListenerPlugins = addPluginList(\"FilterListeners\");\n-        filterListenerPlugins\n-            .setInstantiatingGetter(\"getFilterListenerInstances\");\n+        filterListenerPlugins.setInstantiatingGetter(\"getFilterListenerInstances\");\n \n         aggregateListenerPlugins = addPluginList(\"AggregateListeners\");\n-        aggregateListenerPlugins\n-            .setInstantiatingGetter(\"getAggregateListenerInstances\");\n+        aggregateListenerPlugins.setInstantiatingGetter(\"getAggregateListenerInstances\");\n \n         retryClassRegistration = addBoolean(\"RetryClassRegistration\");\n \n@@ -543,27 +525,21 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         callbackPlugin.setString(aliases[0]);\n         callbackPlugin.setInstantiatingGetter(\"getCallbackOptionsInstance\");\n            \n-        queryCompilationCachePlugin = new QueryCompilationCacheValue(\n-            \"QueryCompilationCache\");\n-        queryCompilationCachePlugin.setInstantiatingGetter(\n-            \"getQueryCompilationCacheInstance\");\n+        queryCompilationCachePlugin = new QueryCompilationCacheValue(\"QueryCompilationCache\");\n+        queryCompilationCachePlugin.setInstantiatingGetter(\"getQueryCompilationCacheInstance\");\n         addValue(queryCompilationCachePlugin);\n         \n         runtimeUnenhancedClasses = addInt(\"RuntimeUnenhancedClasses\");\n         runtimeUnenhancedClasses.setAliases(new String[] {\n-            \"supported\", String.valueOf(\n-                RuntimeUnenhancedClassesModes.SUPPORTED),\n-            \"unsupported\", String.valueOf(\n-                RuntimeUnenhancedClassesModes.UNSUPPORTED),\n-            \"warn\", String.valueOf(\n-                RuntimeUnenhancedClassesModes.WARN),\n+            \"supported\",   String.valueOf(RuntimeUnenhancedClassesModes.SUPPORTED),\n+            \"unsupported\", String.valueOf(RuntimeUnenhancedClassesModes.UNSUPPORTED),\n+            \"warn\",        String.valueOf(RuntimeUnenhancedClassesModes.WARN),\n         });\n         runtimeUnenhancedClasses.setDefault(\"unsupported\");\n         runtimeUnenhancedClasses.setString(\"unsupported\");\n         runtimeUnenhancedClasses.setAliasListComprehensive(true);\n \n-        cacheMarshallerPlugins = (CacheMarshallersValue)\n-            addValue(new CacheMarshallersValue(this));\n+        cacheMarshallerPlugins = (CacheMarshallersValue) addValue(new CacheMarshallersValue(this));\n         \n         eagerInitialization = addBoolean(\"InitializeEagerly\");\n         \n@@ -581,26 +557,22 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         validationMode.setDynamic(true);\n \n         String defValidationGroup = \"javax.validation.groups.Default\";\n-        validationGroupPrePersist = \n-            addString(\"javax.persistence.validation.group.pre-persist\");\n+        validationGroupPrePersist = addString(\"javax.persistence.validation.group.pre-persist\");\n         validationGroupPrePersist.setString(defValidationGroup);\n         validationGroupPrePersist.setDefault(\"\");\n         validationGroupPrePersist.setDynamic(true);\n \n-        validationGroupPreUpdate = \n-            addString(\"javax.persistence.validation.group.pre-update\");\n+        validationGroupPreUpdate = addString(\"javax.persistence.validation.group.pre-update\");\n         validationGroupPreUpdate.setString(defValidationGroup);\n         validationGroupPreUpdate.setDefault(\"\");\n         validationGroupPreUpdate.setDynamic(true);\n \n-        validationGroupPreRemove = \n-            addString(\"javax.persistence.validation.group.pre-remove\");\n+        validationGroupPreRemove = addString(\"javax.persistence.validation.group.pre-remove\");\n         validationGroupPreRemove.setDefault(\"\");\n         validationGroupPreRemove.setDynamic(true);\n \n         validationFactory = addObject(\"javax.persistence.validation.factory\");\n-        validationFactory.setInstantiatingGetter(\n-            \"getValidationFactoryInstance\");\n+        validationFactory.setInstantiatingGetter(\"getValidationFactoryInstance\");\n         validationFactory.setDynamic(true);\n \n         validator = addObject(\"Validator\");\n@@ -615,8 +587,7 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         lifecycleEventManager.setAliases(aliases);\n         lifecycleEventManager.setDefault(aliases[0]);\n         lifecycleEventManager.setString(aliases[0]);\n-        lifecycleEventManager.setInstantiatingGetter(\n-                \"getLifecycleEventManagerInstance\");\n+        lifecycleEventManager.setInstantiatingGetter(\"getLifecycleEventManagerInstance\");\n \n         dynamicEnhancementAgent  = addBoolean(\"DynamicEnhancementAgent\");\n         dynamicEnhancementAgent.setDefault(\"true\");\n@@ -648,17 +619,17 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n \n         writeBehindCachePlugin = addPlugin(\"WriteBehindCache\", false);\n         aliases = new String[] { \n-            \"false\", null, \n-            \"true\", SimpleWriteBehindCache.class.getName(), \n+            \"false\",  null, \n+            \"true\",   SimpleWriteBehindCache.class.getName(), \n             \"simple\", SimpleWriteBehindCache.class.getName() };\n         writeBehindCachePlugin.setAliases(aliases);\n         writeBehindCachePlugin.setDefault(aliases[0]);\n         writeBehindCachePlugin.setString(aliases[0]);\n         \n         writeBehindCallbackPlugin = addPlugin(\"WriteBehindCallback\", true); \n         aliases = new String[] { \n-            \"false\", null, \n-            \"true\", SimpleWriteBehindCallback.class.getName(), \n+            \"false\",  null, \n+            \"true\",   SimpleWriteBehindCallback.class.getName(), \n             \"simple\", SimpleWriteBehindCallback.class.getName() };\n         writeBehindCallbackPlugin.setAliases(aliases);\n         writeBehindCallbackPlugin.setDefault(aliases[0]);\n@@ -737,8 +708,7 @@ public String getBrokerImpl() {\n     }\n \n     public BrokerImpl newBrokerInstance(String user, String pass) {\n-        BrokerImpl broker =\n-            (BrokerImpl) brokerPlugin.instantiate(BrokerImpl.class, this);\n+        BrokerImpl broker = (BrokerImpl) brokerPlugin.instantiate(BrokerImpl.class, this);\n         if (broker != null)\n             broker.setAuthentication(user, pass);\n         return broker;\n@@ -761,9 +731,7 @@ public void setDataCacheManager(DataCacheManager dcm) {\n     public DataCacheManager getDataCacheManagerInstance() {\n         DataCacheManager dcm = (DataCacheManager) dataCacheManagerPlugin.get();\n         if (dcm == null) {\n-            dcm =\n-                (DataCacheManager) dataCacheManagerPlugin.instantiate(\n-                    DataCacheManager.class, this);\n+            dcm =  (DataCacheManager) dataCacheManagerPlugin.instantiate(DataCacheManager.class, this);\n             dcm.initialize(this, dataCachePlugin, queryCachePlugin);\n         }\n         return dcm;\n@@ -849,8 +817,7 @@ public String getInverseManager() {\n     }\n \n     public InverseManager newInverseManagerInstance() {\n-        return (InverseManager) inverseManagerPlugin.instantiate(\n-            InverseManager.class, this);\n+        return (InverseManager) inverseManagerPlugin.instantiate(InverseManager.class, this);\n     }\n \n     public void setSavepointManager(String savepointManager) {"},{"sha":"f438892aaa7db521ac116afb6dd9b98711e80a8e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerFactory.java","status":"modified","additions":1,"deletions":9,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/814341420defa42f85c224b5c9f3da01048333e4/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/814341420defa42f85c224b5c9f3da01048333e4/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerFactory.java?ref=814341420defa42f85c224b5c9f3da01048333e4","patch":"@@ -43,15 +43,7 @@\n     /**\n      * Return properties describing this runtime.\n      */\n-    public Properties getProperties();\n-    \n-    /**\n-     * Return all of the configured properties plus those returned in \n-     * @see #getProperties().\n-     * \n-     * @since 2.0.0\n-     */\n-    public Map<String, String> getAllProperties();\n+    public Map<String,Object> getProperties();\n     \n     /**\n      * Return all of the supported properties as a set of keys. If a property"},{"sha":"aec010f697f7398ba4aef13d878cd1bc3f59b0d0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":48,"deletions":79,"changes":127,"blob_url":"https://github.com/apache/openjpa/blob/814341420defa42f85c224b5c9f3da01048333e4/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/814341420defa42f85c224b5c9f3da01048333e4/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=814341420defa42f85c224b5c9f3da01048333e4","patch":"@@ -26,6 +26,7 @@\n import java.security.AccessController;\n import java.util.AbstractCollection;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.BitSet;\n import java.util.Collection;\n import java.util.Collections;\n@@ -53,13 +54,13 @@\n import org.apache.openjpa.ee.ManagedRuntime;\n import org.apache.openjpa.enhance.PCRegistry;\n import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.enhance.Reflection;\n import org.apache.openjpa.event.LifecycleEvent;\n import org.apache.openjpa.event.LifecycleEventManager;\n import org.apache.openjpa.event.RemoteCommitEventManager;\n import org.apache.openjpa.event.TransactionEvent;\n import org.apache.openjpa.event.TransactionEventManager;\n import org.apache.openjpa.kernel.exps.ExpressionParser;\n-import org.apache.openjpa.lib.conf.Value;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n@@ -98,6 +99,7 @@\n  *\n  * @author Abe White\n  */\n+@SuppressWarnings(\"serial\")\n public class BrokerImpl\n     implements Broker, FindCallbacks, Cloneable, Serializable {\n \n@@ -229,8 +231,8 @@\n     \n \n     // Map of properties whose values have been changed\n-    private Map<String, String> _changedProperties =\n-        new HashMap<String, String>();\n+//    private Map<String, String> _changedProperties =\n+//        new HashMap<String, String>();\n \n     // status\n     private int _flags = 0;\n@@ -251,8 +253,30 @@\n     private transient boolean _initializeWasInvoked = false;\n     private LinkedList _fcs;\n     \n-    // Set of supported properties\n-    private Set<String> _supportedPropertyNames;\n+    // Set of supported property keys. The keys in this set correspond to bean-style setter methods\n+    // that can be set by reflection. The keys are not qualified by any prefix.\n+    private static Set<String> _supportedPropertyNames;\n+    static {\n+        _supportedPropertyNames = new HashSet<String>();\n+        _supportedPropertyNames.addAll(Arrays.asList(new String[] {\n+                \"AutoClear\", \n+                \"AutoDetach\", \n+                \"CacheFinderQuery\", \n+                \"CachePreparedQuery\", \n+                \"DetachedNew\", \n+                \"DetachState\", \n+                \"EvictFromDataCache\", \n+                \"IgnoreChanges\", \n+                \"LifecycleListenerCallbackMode\", \n+                \"Multithreaded\", \n+                \"NontransactionalRead\", \n+                \"NontransactionalWrite\", \n+                \"Optimistic\", \n+                \"PopulateDataCache\",\n+                \"RestoreState\", \n+                \"RetainState\",\n+                }));\n+    }\n \n     /**\n      * Set the persistence manager's authentication. This is the first\n@@ -472,8 +496,6 @@ public boolean getIgnoreChanges() {\n     public void setIgnoreChanges(boolean val) {\n         assertOpen();\n         _ignoreChanges = val;\n-        _changedProperties.put(\"IgnoreChanges\", String\n-            .valueOf(_ignoreChanges));\n     }\n \n     public boolean getNontransactionalRead() {\n@@ -492,8 +514,6 @@ public void setNontransactionalRead(boolean val) {\n                 (\"nontrans-read-not-supported\"));\n \n         _nontransRead = val;\n-        _changedProperties.put(\"NontransactionalRead\", String\n-            .valueOf(_nontransRead));\n     }\n \n     public boolean getNontransactionalWrite() {\n@@ -506,8 +526,6 @@ public void setNontransactionalWrite(boolean val) {\n             throw new UserException(_loc.get(\"illegal-op-in-prestore\"));\n \n         _nontransWrite = val;\n-        _changedProperties.put(\"NontransactionalWrite\", String\n-            .valueOf(_nontransWrite));\n     }\n \n     public boolean getOptimistic() {\n@@ -526,8 +544,6 @@ public void setOptimistic(boolean val) {\n                 (\"optimistic-not-supported\"));\n \n         _optimistic = val;\n-        _changedProperties.put(\"Optimistic\", String\n-            .valueOf(_optimistic));\n     }\n \n     public int getRestoreState() {\n@@ -541,8 +557,6 @@ public void setRestoreState(int val) {\n                 \"Restore\"));\n \n         _restoreState = val;\n-        _changedProperties.put(\"RestoreState\", String\n-            .valueOf(_restoreState));\n     }\n \n     public boolean getRetainState() {\n@@ -554,8 +568,6 @@ public void setRetainState(boolean val) {\n         if ((_flags & FLAG_PRESTORING) != 0)\n             throw new UserException(_loc.get(\"illegal-op-in-prestore\"));\n         _retainState = val;\n-        _changedProperties.put(\"RetainState\", String\n-            .valueOf(_retainState));\n     }\n \n     public int getAutoClear() {\n@@ -565,7 +577,6 @@ public int getAutoClear() {\n     public void setAutoClear(int val) {\n         assertOpen();\n         _autoClear = val;\n-        _changedProperties.put(\"AutoClear\", String.valueOf(_autoClear));\n     }\n \n     public int getAutoDetach() {\n@@ -575,8 +586,6 @@ public int getAutoDetach() {\n     public void setAutoDetach(int detachFlags) {\n         assertOpen();\n         _autoDetach = detachFlags;\n-        _changedProperties.put(\"AutoDetach\", String\n-            .valueOf(_autoDetach));\n     }\n \n     public void setAutoDetach(int detachFlag, boolean on) {\n@@ -585,8 +594,6 @@ public void setAutoDetach(int detachFlag, boolean on) {\n             _autoDetach |= detachFlag;\n         else\n             _autoDetach &= ~detachFlag;\n-        _changedProperties.put(\"AutoDetach\", String\n-            .valueOf(_autoDetach));\n     }\n \n     public int getDetachState() {\n@@ -596,8 +603,6 @@ public int getDetachState() {\n     public void setDetachState(int mode) {\n         assertOpen();\n         _detachState = mode;\n-        _changedProperties.put(\"DetachState\", String\n-            .valueOf(_detachState));\n     }\n \n     public boolean isDetachedNew() {\n@@ -668,65 +673,29 @@ public Object putUserObject(Object key, Object val) {\n         }\n     }\n \n-    public Map<String, String> getProperties() {\n-        Map<String, String> currentProperties = _conf.getAllProperties();\n-        \n-        // Update the properties from the config with properties that may\n-        // have changed for this broker\n-        if (!_changedProperties.isEmpty()) {\n-            Set<String> changedKeys = _changedProperties.keySet();\n-            for (String changedKey : changedKeys) {\n-                Value value = _conf.getValue(changedKey);\n-                String valueKey = value.getLoadKey();\n-                if (valueKey == null) {\n-                    valueKey = \"openjpa.\" + value.getProperty();\n-                }\n-                \n-                if (currentProperties.containsKey(valueKey)) {\n-                    currentProperties.put(valueKey, _changedProperties\n-                        .get(changedKey));\n-                }\n-                else {\n-                    Set<String> equivalentKeys = value.getEquivalentKeys();\n-                    if (!equivalentKeys.isEmpty()) {\n-                        for (String equivalentKey : equivalentKeys) {\n-                            if (currentProperties.containsKey(equivalentKey)) {\n-                                currentProperties.put(equivalentKey,\n-                                    _changedProperties.get(changedKey));\n-                                break;\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n+    /**\n+     * Get current configuration property values used by this instance.\n+     * This values are combination of the current configuration values \n+     * overwritten by values maintained by this instance such as\n+     * Optimistic flag. \n+     */\n+    public Map<String, Object> getProperties() {\n+        Map props = _conf.toProperties(true);\n+        for (String s : _supportedPropertyNames) {\n+            props.put(\"openjpa.\" + s, Reflection.getValue(this, s, true));\n         }\n-\n-        return currentProperties;\n+        return props;\n     }\n     \n+    /**\n+     * Gets the property names that can be used to corresponding setter methods of this receiver\n+     * to set its value.\n+     */    \n     public Set<String> getSupportedProperties() {\n-        if (_supportedPropertyNames == null) {\n-            _supportedPropertyNames = new TreeSet<String>();\n-            _supportedPropertyNames.add(\"AutoClear\");\n-            _supportedPropertyNames.add(\"AutoDetach\");\n-            _supportedPropertyNames.add(\"DetachState\");\n-            _supportedPropertyNames.add(\"IgnoreChanges\");\n-            _supportedPropertyNames.add(\"LockTimeout\");\n-            _supportedPropertyNames.add(\"Multithreaded\");\n-            _supportedPropertyNames.add(\"NontransactionalRead\");\n-            _supportedPropertyNames.add(\"NontransactionalWrite\");\n-            _supportedPropertyNames.add(\"Optimistic\");\n-            _supportedPropertyNames.add(\"RestoreState\");\n-            _supportedPropertyNames.add(\"RetainState\");\n-        }\n-        Set<String> supportedProperties = new LinkedHashSet<String>();\n-        for (String propertyName : _supportedPropertyNames) {\n-            supportedProperties.addAll(_conf.getPropertyKeys(propertyName));\n-        }\n-        supportedProperties.add(\"javax.persistence.query.timeout\");\n-        supportedProperties.add(\"javax.persistence.lock.timeout\");\n-        \n-        return supportedProperties;\n+        Set<String> keys = _conf.getPropertyKeys();\n+        for (String s : _supportedPropertyNames)\n+            keys.add(\"openjpa.\" + s);\n+        return keys;\n     }\n \n     // ////////"},{"sha":"dfb7b43d302572790671bfd41b33213e60cf1d49","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/814341420defa42f85c224b5c9f3da01048333e4/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","raw_url":"https://github.com/apache/openjpa/raw/814341420defa42f85c224b5c9f3da01048333e4/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java?ref=814341420defa42f85c224b5c9f3da01048333e4","patch":"@@ -180,7 +180,7 @@ public String getConnectionPassword() {\n         }\n     }\n     \n-    public Map<String, String> getProperties() {\n+    public Map<String,Object> getProperties() {\n         try {\n             return _broker.getProperties();\n         } catch (RuntimeException re) {"},{"sha":"7ead667ea1eb66f0bef261921d5979445b384480","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/BooleanValue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/814341420defa42f85c224b5c9f3da01048333e4/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/BooleanValue.java","raw_url":"https://github.com/apache/openjpa/raw/814341420defa42f85c224b5c9f3da01048333e4/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/BooleanValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/BooleanValue.java?ref=814341420defa42f85c224b5c9f3da01048333e4","patch":"@@ -50,7 +50,7 @@ public void set(boolean value) {\n     /**\n      * The internal value.\n      */\n-    public boolean get() {\n+    public Boolean get() {\n         return value;\n     }\n "},{"sha":"29b6533797afd981cf97f87f6ca18920ba5e19ab","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/DoubleValue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/814341420defa42f85c224b5c9f3da01048333e4/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/DoubleValue.java","raw_url":"https://github.com/apache/openjpa/raw/814341420defa42f85c224b5c9f3da01048333e4/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/DoubleValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/DoubleValue.java?ref=814341420defa42f85c224b5c9f3da01048333e4","patch":"@@ -51,7 +51,7 @@ public void set(double value) {\n     /**\n      * The internal value.\n      */\n-    public double get() {\n+    public Double get() {\n         return value;\n     }\n "},{"sha":"c0bf2ffbb9387fd59fc79a7eb6e9ae2597c0f11c","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java","status":"modified","additions":13,"deletions":3,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/814341420defa42f85c224b5c9f3da01048333e4/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java","raw_url":"https://github.com/apache/openjpa/raw/814341420defa42f85c224b5c9f3da01048333e4/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java?ref=814341420defa42f85c224b5c9f3da01048333e4","patch":"@@ -40,6 +40,7 @@\n \n     private static final String[] EMPTY_ALIASES = new String[0];\n     private static final Localizer s_loc = Localizer.forPackage(Value.class);\n+    public static final String INVISIBLE = \"******\";\n     \n     private String prop = null;\n     private String loadKey = null;\n@@ -53,7 +54,7 @@\n     private String originalValue = null;\n     private Set<String> otherNames = null;\n     private boolean visible = true;\n-\n+    \n     /**\n      * Default constructor.\n      */\n@@ -285,7 +286,7 @@ public String getDefault() {\n     }\n \n     /**\n-     * The default value for the propert as a string.\n+     * The default value for the property as a string.\n      */\n     public void setDefault(String def) {\n         this.def = def;\n@@ -411,7 +412,7 @@ boolean isDefault(Object val) {\n     /**\n      * Returns the type of the property that this Value represents.\n      */\n-    public abstract Class getValueType();\n+    public abstract Class<?> getValueType();\n \n     /**\n      * Return the internal string form of this value.\n@@ -559,4 +560,13 @@ public boolean isVisible() {\n     public void setVisible(boolean visible) {\n         this.visible = visible;\n     }\n+    \n+    /**\n+     * Get the actual data stored in this value.\n+     */\n+    public abstract Object get();\n+    \n+    public String toString() {\n+        return getProperty()+ \":\" + get() + \"[\" + getValueType().getName() + \"]\";\n+    }\n }"},{"sha":"50fd710c3c981be93b6a87ddee54ca8970901de1","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":40,"deletions":23,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/814341420defa42f85c224b5c9f3da01048333e4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/814341420defa42f85c224b5c9f3da01048333e4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=814341420defa42f85c224b5c9f3da01048333e4","patch":"@@ -28,6 +28,7 @@\n import java.io.ObjectOutputStream;\n import java.io.ObjectStreamClass;\n import java.lang.reflect.Array;\n+import java.lang.reflect.Method;\n import java.sql.Connection;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -53,6 +54,7 @@\n import org.apache.openjpa.ee.ManagedRuntime;\n import org.apache.openjpa.enhance.PCEnhancer;\n import org.apache.openjpa.enhance.PCRegistry;\n+import org.apache.openjpa.enhance.Reflection;\n import org.apache.openjpa.kernel.AbstractBrokerFactory;\n import org.apache.openjpa.kernel.Broker;\n import org.apache.openjpa.kernel.DelegatingBroker;\n@@ -66,6 +68,7 @@\n import org.apache.openjpa.kernel.QueryLanguages;\n import org.apache.openjpa.kernel.Seq;\n import org.apache.openjpa.kernel.jpql.JPQLParser;\n+import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Closeable;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n@@ -81,6 +84,8 @@\n import org.apache.openjpa.util.UserException;\n import org.apache.openjpa.util.WrappedException;\n \n+import serp.util.Strings;\n+\n /**\n  * Implementation of {@link EntityManager} interface.\n  *\n@@ -92,17 +97,14 @@\n     implements OpenJPAEntityManagerSPI, Externalizable,\n     FindCallbacks, OpCallbacks, Closeable, OpenJPAEntityTransaction {\n \n-    private static final Localizer _loc = Localizer.forPackage\n-        (EntityManagerImpl.class);\n+    private static final Localizer _loc = Localizer.forPackage(EntityManagerImpl.class);\n     private static final Object[] EMPTY_OBJECTS = new Object[0];\n \n     private DelegatingBroker _broker;\n     private EntityManagerFactoryImpl _emf;\n-    private Map<FetchConfiguration,FetchPlan> _plans =\n-        new IdentityHashMap<FetchConfiguration,FetchPlan>(1);\n+    private Map<FetchConfiguration,FetchPlan> _plans = new IdentityHashMap<FetchConfiguration,FetchPlan>(1);\n \n-    private RuntimeExceptionTranslator _ret =\n-        PersistenceExceptions.getRollbackTranslator(this);\n+    private RuntimeExceptionTranslator _ret = PersistenceExceptions.getRollbackTranslator(this);\n \n     public EntityManagerImpl() {\n         // for Externalizable\n@@ -111,8 +113,7 @@ public EntityManagerImpl() {\n     /**\n      * Constructor; supply factory and delegate.\n      */\n-    public EntityManagerImpl(EntityManagerFactoryImpl factory,\n-        Broker broker) {\n+    public EntityManagerImpl(EntityManagerFactoryImpl factory, Broker broker) {\n         initialize(factory, broker);\n     }\n \n@@ -1551,19 +1552,14 @@ public OpenJPAQuery createDynamicQuery(\n         return createQuery(jpql);\n     }\n \n-    /*\n-     * @see javax.persistence.EntityManager#getProperties()\n-     * \n-     * This does not return the password property.\n-     */\n     public Map<String, Object> getProperties() {\n-        Map<String, String> currentProperties = _broker.getProperties();\n-        \n-        // Convert the <String, String> map into a <String, Object> map\n-        Map<String, Object> finalMap =\n-            new HashMap<String, Object>(currentProperties);\n-        \n-        return finalMap;\n+        Map props = _broker.getProperties();\n+        for (String s : _broker.getSupportedProperties()) {\n+            Method getter = Reflection.findGetter(this.getClass(), getPropertyName(s), false);\n+            if (getter != null)\n+                props.put(s, Reflection.get(this, getter));\n+        }\n+        return props;\n     }\n \n     public CriteriaBuilder getQueryBuilder() {\n@@ -1614,8 +1610,29 @@ public Metamodel getMetamodel() {\n         return _emf.getMetamodel();\n     }\n \n-    public void setProperty(String arg0, Object arg1) {\n-        throw new UnsupportedOperationException(\n-        \"JPA 2.0 - Method not yet implemented\");\n+    public void setProperty(String prop, Object value) {\n+        String beanProp = getPropertyName(prop);\n+        try {\n+            Method setter = Reflection.findSetter(this.getClass(), beanProp, false);\n+            if (setter != null) {\n+                if (value instanceof String) {\n+                    if (\"null\".equals(value)) {\n+                        value = null;\n+                    } else {\n+                        value = Strings.parse((String) value, setter.getParameterTypes()[0]);\n+                    }\n+                }\n+                Reflection.set(this, setter, value);\n+            }\n+        } catch (Exception ex) {\n+            Log log = getConfiguration().getLog(OpenJPAConfiguration.LOG_RUNTIME);\n+            if (log.isWarnEnabled())\n+                log.warn(_loc.get(\"bad-em-prop\", prop, value));\n+        }\n+    }\n+    \n+    String getPropertyName(String s) {\n+        int dot = s.lastIndexOf('.');\n+        return dot == -1 ? s : s.substring(dot+1);\n     }\n }"},{"sha":"a2dcf3119cbb00d6642cf651e7c946964622566a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","status":"modified","additions":41,"deletions":63,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/814341420defa42f85c224b5c9f3da01048333e4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/814341420defa42f85c224b5c9f3da01048333e4/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java?ref=814341420defa42f85c224b5c9f3da01048333e4","patch":"@@ -99,6 +99,11 @@ public void putBrokerFactoryAliases(Map m) {\n     public int getType() {\n         return TYPE_SPEC;\n     }\n+    \n+    @Override\n+    public String getConfigurationPrefix() {\n+        return \"javax.persistence\";\n+    }\n \n     @Override\n     public void validate()\n@@ -174,8 +179,7 @@ public boolean afterSpecificationSet(Configuration c) {\n         conf.lockManagerPlugin.setString(\"mixed\");\n         conf.nontransactionalWrite.setDefault(\"true\");\n         conf.nontransactionalWrite.set(true);\n-        int specVersion = ((OpenJPAConfiguration) c).getSpecificationInstance()\n-            .getVersion();\n+        int specVersion = ((OpenJPAConfiguration) c).getSpecificationInstance().getVersion();\n         if (specVersion < 2) {\n             Compatibility compatibility = conf.getCompatibilityInstance();\n             compatibility.setFlushBeforeDetach(true);\n@@ -354,7 +358,7 @@ public ConfigurationProvider loadDefaults(ClassLoader loader)\n       */\n      public boolean checkPuNameCollisions(Log logger,String puName){\n          PUNameCollision p = _puNameCollisions.get(puName);\n-         if(p!=null){\n+         if (p != null){\n              p.logCollision(logger);\n              return true;\n          }\n@@ -365,13 +369,10 @@ public boolean checkPuNameCollisions(Log logger,String puName){\n         throws IOException {\n         Enumeration<URL> urls = null;\n         try {\n-            urls = AccessController.doPrivileged(\n-                J2DoPrivHelper.getResourcesAction(loader, rsrc)); \n+            urls = AccessController.doPrivileged(J2DoPrivHelper.getResourcesAction(loader, rsrc)); \n             if (!urls.hasMoreElements()) {\n                 if (!rsrc.startsWith(\"META-INF\"))\n-                    urls = AccessController.doPrivileged(\n-                        J2DoPrivHelper.getResourcesAction(\n-                            loader, \"META-INF/\" + rsrc)); \n+                  urls = AccessController.doPrivileged(J2DoPrivHelper.getResourcesAction(loader, \"META-INF/\" + rsrc));\n                 if (!urls.hasMoreElements())\n                     return null;\n             }\n@@ -396,22 +397,19 @@ private Boolean load(ConfigurationProviderImpl cp, String rsrc,\n         String name, Map m, ClassLoader loader, boolean explicit)\n         throws IOException {\n         if (loader == null)\n-            loader = AccessController.doPrivileged(\n-                J2DoPrivHelper.getContextClassLoaderAction());\n+            loader = AccessController.doPrivileged(J2DoPrivHelper.getContextClassLoaderAction());\n \n         List<URL> urls = getResourceURLs(rsrc, loader);\n         if (urls == null || urls.size() == 0)\n             return null;\n \n         ConfigurationParser parser = new ConfigurationParser(m);\n-        PersistenceUnitInfoImpl pinfo = parseResources(parser, urls, name, \n-            loader);\n+        PersistenceUnitInfoImpl pinfo = parseResources(parser, urls, name, loader);\n         if (pinfo == null) {\n             if (!explicit)\n                 return Boolean.FALSE;\n             throw new MissingResourceException(_loc.get(\"missing-xml-config\", \n-                rsrc, String.valueOf(name)).getMessage(), getClass().getName(), \n-                rsrc);\n+                rsrc, String.valueOf(name)).getMessage(), getClass().getName(), rsrc);\n         } else if (!isOpenJPAPersistenceProvider(pinfo, loader)) {\n             if (!explicit) {\n                 warnUnknownProvider(pinfo);\n@@ -434,8 +432,7 @@ private Boolean load(ConfigurationProviderImpl cp, String rsrc,\n     private PersistenceUnitInfoImpl parseResources(ConfigurationParser parser,\n         List<URL> urls, String name, ClassLoader loader)\n         throws IOException {\n-        List<PersistenceUnitInfoImpl> pinfos = \n-            new ArrayList<PersistenceUnitInfoImpl>();\n+        List<PersistenceUnitInfoImpl> pinfos = new ArrayList<PersistenceUnitInfoImpl>();\n         for (URL url : urls) {\n             parser.parse(url);\n             pinfos.addAll((List<PersistenceUnitInfoImpl>) parser.getResults());\n@@ -455,16 +452,13 @@ private PersistenceUnitInfoImpl findUnit(List<PersistenceUnitInfoImpl>\n             // found named unit?\n             if (name != null) {\n                 if (name.equals(pinfo.getPersistenceUnitName())){\n-\n-                    if(result!=null){\n-                        this.addPuNameCollision(name,\n-                            result.getPersistenceXmlFileUrl().toString(),\n+                    if (result != null){\n+                        this.addPuNameCollision(name, result.getPersistenceXmlFileUrl().toString(),\n                                 pinfo.getPersistenceXmlFileUrl().toString());\n \n-                    }else{\n+                    } else {\n                         // Grab a ref to the pinfo that matches the name we're\n-                        // looking for. Keep going to look for duplicate pu\n-                        // names.\n+                        // looking for. Keep going to look for duplicate pu names.\n                         result = pinfo;\n                     }\n                 }\n@@ -473,8 +467,7 @@ private PersistenceUnitInfoImpl findUnit(List<PersistenceUnitInfoImpl>\n \n             if (isOpenJPAPersistenceProvider(pinfo, loader)) {\n                 // if no name given and found unnamed unit, return it.  \n-                // otherwise record as default unit unless we find a \n-                // better match later\n+                // otherwise record as default unit unless we find a better match later\n                 if (StringUtils.isEmpty(pinfo.getPersistenceUnitName()))\n                     return pinfo;\n                 if (ojpa == null)\n@@ -493,16 +486,13 @@ private PersistenceUnitInfoImpl findUnit(List<PersistenceUnitInfoImpl>\n     private static boolean isOpenJPAPersistenceProvider\n         (PersistenceUnitInfo pinfo, ClassLoader loader) {\n         String provider = pinfo.getPersistenceProviderClassName();\n-        if (StringUtils.isEmpty(provider) \n-            || PersistenceProviderImpl.class.getName().equals(provider))\n+        if (StringUtils.isEmpty(provider) || PersistenceProviderImpl.class.getName().equals(provider))\n             return true;\n \n         if (loader == null)\n-            loader = AccessController.doPrivileged(\n-                J2DoPrivHelper.getContextClassLoaderAction());\n+            loader = AccessController.doPrivileged(J2DoPrivHelper.getContextClassLoaderAction());\n         try {\n-            if (PersistenceProviderImpl.class.isAssignableFrom\n-                (Class.forName(provider, false, loader)))\n+            if (PersistenceProviderImpl.class.isAssignableFrom(Class.forName(provider, false, loader)))\n                 return true;\n         } catch (Throwable t) {\n             log(_loc.get(\"unloadable-provider\", provider, t).getMessage());\n@@ -516,8 +506,7 @@ private PersistenceUnitInfoImpl findUnit(List<PersistenceUnitInfoImpl>\n      * provider.\n      */\n     private static void warnUnknownProvider(PersistenceUnitInfo pinfo) {\n-        log(_loc.get(\"unrecognized-provider\", \n-            pinfo.getPersistenceProviderClassName()).getMessage());\n+        log(_loc.get(\"unrecognized-provider\", pinfo.getPersistenceProviderClassName()).getMessage());\n     }\n     \n     /**\n@@ -530,13 +519,11 @@ private static void log(String msg) {\n \n     private void addPuNameCollision(String puName, String file1, String file2){\n         PUNameCollision pun = _puNameCollisions.get(puName);\n-        if(pun!=null){\n+        if (pun != null){\n             pun.addCollision(file1, file2);\n-        }else{\n-            _puNameCollisions.put(puName,\n-            \tnew PUNameCollision(puName, file1, file2));\n+        } else {\n+            _puNameCollisions.put(puName, new PUNameCollision(puName, file1, file2));\n         }\n-\n     }\n     \n     /**\n@@ -565,17 +552,13 @@ public void setSource(String source) {\n         public void setInto(Configuration conf) {\n             if (conf instanceof OpenJPAConfiguration) {\n                 OpenJPAConfiguration oconf = (OpenJPAConfiguration) conf;\n-                Object persistenceVersion = \n-                    getProperties().get(\n-                        PersistenceUnitInfoImpl.PERSISTENCE_VERSION);\n+                Object persistenceVersion = getProperties().get(PersistenceUnitInfoImpl.PERSISTENCE_VERSION);\n                 if (persistenceVersion == null) {\n                     oconf.setSpecification(SPEC_JPA);\n                 } else {\n                     // Set the spec level based on the persistence version\n-                    oconf.setSpecification(\"jpa \" + \n-                        persistenceVersion.toString());\n-                    getProperties().remove(\n-                        PersistenceUnitInfoImpl.PERSISTENCE_VERSION);\n+                    oconf.setSpecification(\"jpa \" + persistenceVersion.toString());\n+                    getProperties().remove(PersistenceUnitInfoImpl.PERSISTENCE_VERSION);\n                 }\n                     \n \n@@ -586,12 +569,10 @@ public void setInto(Configuration conf) {\n                 // the global value with our settings\n                 String orig = oconf.getMetaDataFactory();\n                 if (!StringUtils.isEmpty(orig)) {\n-                    String key = ProductDerivations.getConfigurationKey\n-                        (\"MetaDataFactory\", getProperties());\n+                    String key = ProductDerivations.getConfigurationKey(\"MetaDataFactory\", getProperties());\n                     Object override = getProperties().get(key);\n                     if (override instanceof String)\n-                        addProperty(key, Configurations.combinePlugins(orig, \n-                            (String) override));\n+                        addProperty(key, Configurations.combinePlugins(orig, (String) override));\n                 }\n             }\n \n@@ -674,16 +655,14 @@ public void parse(File file)\n         protected Object getSchemaSource() {\n             // use the version 1 schema by default.  non-versioned docs will \n             // continue to parse with the old xml if they do not contain a \n-            // persistence-unit.  that is currently the only signficant change\n+            // persistence-unit.  that is currently the only significant change\n             // to the schema.  if more significant changes are made in the \n             // future, the 2.0 schema may be preferable.\n             String persistencexsd = \"persistence-xsd.rsrc\";\n             // if the version and/or schema location is for 1.0, use the 1.0 \n             // schema\n-            if (_persistenceVersion != null &&\n-                _persistenceVersion.equals(XMLVersionParser.VERSION_2_0) ||\n-                (_schemaLocation != null && \n-                _schemaLocation.indexOf(PERSISTENCE_XSD_2_0) != -1)) {\n+            if (_persistenceVersion != null && _persistenceVersion.equals(XMLVersionParser.VERSION_2_0) \n+            || (_schemaLocation != null && _schemaLocation.indexOf(PERSISTENCE_XSD_2_0) != -1)) {\n                 persistencexsd = \"persistence_2_0-xsd.rsrc\";\n             }\n             return getClass().getResourceAsStream(persistencexsd);\n@@ -701,8 +680,7 @@ protected boolean startElement(String name, Attributes attrs)\n             if (currentDepth() == 1)\n                 startPersistenceUnit(attrs);\n             else if (currentDepth() == 3 && \"property\".equals(name))\n-                _info.setProperty(attrs.getValue(\"name\"),\n-                    attrs.getValue(\"value\"));\n+                _info.setProperty(attrs.getValue(\"name\"), attrs.getValue(\"value\"));\n             return true;\n         }\n \n@@ -772,16 +750,15 @@ private void startPersistenceUnit(Attributes attrs)\n             // transaction type to local\n             String val = attrs.getValue(\"transaction-type\");\n             if (val == null)\n-                _info.setTransactionType\n-                    (PersistenceUnitTransactionType.RESOURCE_LOCAL);\n+                _info.setTransactionType(PersistenceUnitTransactionType.RESOURCE_LOCAL);\n             else\n-                _info.setTransactionType(Enum.valueOf\n-                    (PersistenceUnitTransactionType.class, val));\n+                _info.setTransactionType(Enum.valueOf(PersistenceUnitTransactionType.class, val));\n \n             if (_source != null)\n                 _info.setPersistenceXmlFileUrl(_source);\n \t\t}\n \t}\n+    \n     /**\n      * This private class is used to hold onto information regarding\n      * PersistentUnit name collisions.\n@@ -797,13 +774,14 @@ private void startPersistenceUnit(Attributes attrs)\n \n             _puName=puName;\n         }\n+        \n         void logCollision(Log logger){\n             if(logger.isWarnEnabled()){\n-                logger.warn(_loc.getFatal(\"dup-pu\",\n-                    new Object[]{_puName,_resources.toString(),\n-                    \t_resources.iterator().next()}));\n+                logger.warn(_loc.getFatal(\"dup-pu\", new Object[]{_puName,_resources.toString(),\t\n+                    _resources.iterator().next()}));\n             }\n         }\n+        \n         void addCollision(String file1, String file2){\n             _resources.add(file1);\n             _resources.add(file2);"}]}

