{"sha":"814637ca6cd89f237450d24469732b86b91b73b5","node_id":"MDY6Q29tbWl0MjA2MzY0OjgxNDYzN2NhNmNkODlmMjM3NDUwZDI0NDY5NzMyYjg2YjkxYjczYjU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-04-05T22:55:52Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-04-05T22:55:52Z"},"message":"OPENJPA-182. Moved to API-based featureSelection. Query.setHint() can still be used via the query hint => fetch plan binding.\n\nRemoved the logic to override the forUpdate value, since the calling code already incorporates fetch configuration data into its decision about how to invoke toSelect(). Added a test case to assert this behavior.\n\nAlso cleaned up some minor whitespace issues, and reduced code duplication by moving a couple of concepts up into DBDictionary. Removed some seemingly-unnecessary overrides from H2Dictionary.\n\nAdded a test case for isolation level configuration. For non-DB2 dictionaries, it asserts that an exception is thrown during execution. Someone with DB2 knowledge / access should fill in the test case for the DB2 cases. As we add support for per-query isolation level configuration for other databases, we should change this test case.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@525997 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0d589cc3bfd1e291b30b207ee01411c84ceb240c","url":"https://api.github.com/repos/apache/openjpa/git/trees/0d589cc3bfd1e291b30b207ee01411c84ceb240c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/814637ca6cd89f237450d24469732b86b91b73b5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/814637ca6cd89f237450d24469732b86b91b73b5","html_url":"https://github.com/apache/openjpa/commit/814637ca6cd89f237450d24469732b86b91b73b5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/814637ca6cd89f237450d24469732b86b91b73b5/comments","author":null,"committer":null,"parents":[{"sha":"e541936463b4b6be3ab05ded5b2ed224b4692d6b","url":"https://api.github.com/repos/apache/openjpa/commits/e541936463b4b6be3ab05ded5b2ed224b4692d6b","html_url":"https://github.com/apache/openjpa/commit/e541936463b4b6be3ab05ded5b2ed224b4692d6b"}],"stats":{"total":545,"additions":365,"deletions":180},"files":[{"sha":"98ecba8ea7b7527e7d9c3429f3bd6a7b95438a9d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/814637ca6cd89f237450d24469732b86b91b73b5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/814637ca6cd89f237450d24469732b86b91b73b5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java?ref=814637ca6cd89f237450d24469732b86b91b73b5","patch":"@@ -240,4 +240,21 @@ public JDBCFetchConfiguration traverseJDBC(FieldMetaData fm) {\n             throw translate(re);\n         }\n     }\n+\n+    public int getIsolationLevel() {\n+        try {\n+            return getJDBCDelegate().getIsolationLevel();\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public JDBCFetchConfiguration setIsolationLevel(int level) {\n+        try {\n+            getJDBCDelegate().setIsolationLevel(level);\n+            return this;\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n }"},{"sha":"a1389827a975b476c46b5fc74a76ca55fc3d2351","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java","status":"modified","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/814637ca6cd89f237450d24469732b86b91b73b5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/814637ca6cd89f237450d24469732b86b91b73b5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java?ref=814637ca6cd89f237450d24469732b86b91b73b5","patch":"@@ -16,6 +16,7 @@\n package org.apache.openjpa.jdbc.kernel;\n \n import java.sql.ResultSet;\n+import java.sql.Connection;\n import java.util.Collection;\n import java.util.Set;\n \n@@ -169,4 +170,38 @@\n      * Convenience method to cast traversal to store-specific type.\n      */\n     public JDBCFetchConfiguration traverseJDBC(FieldMetaData fm);\n+\n+    /**\n+     * <p>The isolation level for queries issued to the database. This overrides\n+     * the persistence-unit-wide <code>openjpa.jdbc.TransactionIsolation</code>\n+     * value.</p>\n+     *\n+     * <p>Must be one of {@link Connection#TRANSACTION_NONE},\n+     * {@link Connection#TRANSACTION_READ_UNCOMMITTED},\n+     * {@link Connection#TRANSACTION_READ_COMMITTED},\n+     * {@link Connection#TRANSACTION_REPEATABLE_READ},\n+     * {@link Connection#TRANSACTION_SERIALIZABLE},\n+     * or -1 for the default connection level specified by the context in\n+     * which this fetch configuration is being used.</p>\n+     *\n+     * @since 0.9.7\n+     */\n+    public int getIsolationLevel();\n+\n+    /**\n+     * <p>The isolation level for queries issued to the database. This overrides\n+     * the persistence-unit-wide <code>openjpa.jdbc.TransactionIsolation</code>\n+     * value.</p>\n+     *\n+     * <p>Must be one of {@link Connection#TRANSACTION_NONE},\n+     * {@link Connection#TRANSACTION_READ_UNCOMMITTED},\n+     * {@link Connection#TRANSACTION_READ_COMMITTED},\n+     * {@link Connection#TRANSACTION_REPEATABLE_READ},\n+     * {@link Connection#TRANSACTION_SERIALIZABLE},\n+     * or -1 for the default connection level specified by the context in\n+     * which this fetch configuration is being used.</p>\n+     *\n+     * @since 0.9.7\n+     */\n+    public JDBCFetchConfiguration setIsolationLevel(int level);\n }"},{"sha":"669888dde76fa2a3ca158fbf280ea3506018b0f6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/814637ca6cd89f237450d24469732b86b91b73b5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/814637ca6cd89f237450d24469732b86b91b73b5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java?ref=814637ca6cd89f237450d24469732b86b91b73b5","patch":"@@ -17,6 +17,7 @@\n \n import java.io.Serializable;\n import java.sql.ResultSet;\n+import java.sql.Connection;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n@@ -65,6 +66,7 @@\n         public int size = 0;\n         public int syntax = 0;\n         public Set joins = null;\n+        public int isolationLevel = -1;\n     }\n \n     private final JDBCConfigurationState _state;\n@@ -319,4 +321,22 @@ private JDBCConfiguration getJDBCConfiguration() {\n             return null;\n         return (JDBCConfiguration) conf;\n     }\n+\n+    public int getIsolationLevel() {\n+        return _state.isolationLevel;\n+    }\n+\n+    public JDBCFetchConfiguration setIsolationLevel(int level) {\n+        if (level != -1\n+            && level != Connection.TRANSACTION_NONE\n+            && level != Connection.TRANSACTION_READ_UNCOMMITTED\n+            && level != Connection.TRANSACTION_READ_COMMITTED\n+            && level != Connection.TRANSACTION_REPEATABLE_READ\n+            && level != Connection.TRANSACTION_SERIALIZABLE)\n+            throw new IllegalArgumentException(\n+                _loc.get(\"bad-level\", Integer.valueOf(level)).getMessage());\n+        \n+        _state.isolationLevel = level;\n+        return this;\n+    }\n }"},{"sha":"e3a7de30b7a5e936e1e202580b0f46e5c1b39338","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":92,"deletions":148,"changes":240,"blob_url":"https://github.com/apache/openjpa/blob/814637ca6cd89f237450d24469732b86b91b73b5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/814637ca6cd89f237450d24469732b86b91b73b5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=814637ca6cd89f237450d24469732b86b91b73b5","patch":"@@ -23,8 +23,8 @@\n import java.util.StringTokenizer;\r\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\r\n import org.apache.openjpa.jdbc.schema.Sequence;\r\n-import org.apache.openjpa.lib.log.Log;\r\n import org.apache.openjpa.util.OpenJPAException;\r\n+import org.apache.openjpa.kernel.LockLevels;\r\n \r\n /**\r\n  * Dictionary for IBM DB2 database.\r\n@@ -34,20 +34,21 @@\n \r\n     public String optimizeClause = \"optimize for\";\r\n     public String rowClause = \"row\";\r\n-    private int db2ServerType = 0; \r\n-    private static final int  db2ISeriesV5R3AndEarlier = 1;\r\n+    private int db2ServerType = 0;\r\n+    private static final int db2ISeriesV5R3AndEarlier = 1;\r\n     private static final int db2UDBV81OrEarlier = 2;\r\n     private static final int db2ZOSV8x = 3;\r\n     private static final int db2UDBV82AndLater = 4;\r\n-    private static final int  db2ISeriesV5R4AndLater = 5;\r\n-\tprivate static final String  forUpdateOfClause=\"FOR UPDATE OF\";\r\n-    private static final String  withRSClause=\"WITH RS\";\r\n-    private static final String  withRRClause=\"WITH RR\";\r\n-    private static final String  useKeepUpdateLockClause= \"USE AND KEEP UPDATE LOCKS\";\r\n-    private static final String  useKeepExclusiveLockClause=\"USE AND KEEP EXCLUSIVE LOCKS\";\r\n-    private static final String  forReadOnlyClause = \"FOR READ ONLY\";\r\n-    public static final String UPDATE_HINT = \"openjpa.hint.updateClause\";\r\n-    public static final String ISOLATION_HINT = \"openjpa.hint.isolationLevel\";\r\n+    private static final int db2ISeriesV5R4AndLater = 5;\r\n+\tprivate static final String forUpdateOfClause = \"FOR UPDATE OF\";\r\n+    private static final String withRSClause = \"WITH RS\";\r\n+    private static final String withRRClause = \"WITH RR\";\r\n+    private static final String useKeepUpdateLockClause\r\n+        = \"USE AND KEEP UPDATE LOCKS\";\r\n+    private static final String useKeepExclusiveLockClause\r\n+        = \"USE AND KEEP EXCLUSIVE LOCKS\";\r\n+    private static final String forReadOnlyClause = \"FOR READ ONLY\";\r\n+\r\n     public DB2Dictionary() {\r\n         platform = \"DB2\";\r\n         validationSQL = \"SELECT DISTINCT(CURRENT TIMESTAMP) FROM \"\r\n@@ -186,18 +187,18 @@ public void connectedConfiguration(Connection conn) throws SQLException {\n     \tif (isJDBC3(metaData)) {\r\n \t\t\tint maj = metaData.getDatabaseMajorVersion();\r\n \t    \tint min = metaData.getDatabaseMinorVersion();\r\n-\t    \t\r\n+\r\n \t    \t// Determine the type of DB2 database\r\n \t    \tif (isDB2ISeriesV5R3AndEarlier(metaData))\r\n-\t    \t    db2ServerType =db2ISeriesV5R3AndEarlier;\r\n+\t    \t    db2ServerType = db2ISeriesV5R3AndEarlier;\r\n \t    \telse if (isDB2UDBV81OrEarlier(metaData,maj,min))\r\n-\t    \t    db2ServerType =db2UDBV81OrEarlier;\r\n+\t    \t    db2ServerType = db2UDBV81OrEarlier;\r\n \t    \telse if (isDB2ZOSV8x(metaData,maj))\r\n-\t    \t    db2ServerType =db2ZOSV8x;\r\n+\t    \t    db2ServerType = db2ZOSV8x;\r\n \t    \telse if (isDB2UDBV82AndLater(metaData,maj,min))\r\n-\t    \t    db2ServerType=db2UDBV82AndLater;\r\n+\t    \t    db2ServerType = db2UDBV82AndLater;\r\n \t    \telse if (isDB2ISeriesV5R4AndLater(metaData))\r\n-\t    \t    db2ServerType=db2ISeriesV5R4AndLater;\r\n+\t    \t    db2ServerType = db2ISeriesV5R4AndLater;\r\n \r\n \t    \tif (maj >= 9 || (maj == 8 && min >= 2)) {\r\n \t    \t\tsupportsLockingWithMultipleTables = true;\r\n@@ -225,128 +226,126 @@ else if (isDB2ISeriesV5R4AndLater(metaData))\n             }\r\n         }\r\n     }\r\n-    \r\n-    /** Get the update clause for the query based on the \r\n+\r\n+    /**\r\n+     * Get the update clause for the query based on the\r\n      * updateClause and isolationLevel hints\r\n      */\r\n-    public String getForUpdateClause(JDBCFetchConfiguration fetch, boolean forUpdate) {\r\n-        String isolationLevel = null;\r\n-        boolean updateClause;\r\n-        DatabaseMetaData metaData = null;\r\n+    protected String getForUpdateClause(JDBCFetchConfiguration fetch,\r\n+        boolean forUpdate) {\r\n+        int isolationLevel;\r\n         StringBuffer forUpdateString = new StringBuffer();\r\n         try {\r\n-            // Determine the update clause/isolationLevel the hint \r\n-            // overrides the persistence.xml value\r\n-            if (fetch != null && fetch.getHint(UPDATE_HINT)\r\n-                !=null )\r\n-                updateClause = ((Boolean)fetch.\r\n-                getHint(UPDATE_HINT)).booleanValue();\r\n-            else \r\n-                updateClause = forUpdate;\r\n-            if (fetch != null &&fetch.getHint(ISOLATION_HINT)\r\n-                !=null )\r\n-                isolationLevel = (String)fetch.\r\n-                getHint(ISOLATION_HINT);\r\n-            else \r\n-                isolationLevel = conf.getTransactionIsolation();\r\n-            if (updateClause == false)\r\n+            // Determine the isolationLevel; the fetch\r\n+            // configuration data overrides the persistence.xml value\r\n+            if (fetch != null && fetch.getIsolationLevel() != -1)\r\n+                isolationLevel = fetch.getIsolationLevel();\r\n+            else\r\n+                isolationLevel = conf.getTransactionIsolationConstant();\r\n+\r\n+            if (!forUpdate) {\r\n                 // This sql is not for update so add FOR Read Only clause\r\n                 forUpdateString.append(\" \").append(forReadOnlyClause)\r\n                     .append(\" \");\r\n-            else if (updateClause == true){\r\n+            } else {\r\n \r\n-                switch(db2ServerType){\r\n+                switch(db2ServerType) {\r\n                 case db2ISeriesV5R3AndEarlier:\r\n-                case db2UDBV81OrEarlier: \r\n-                    if (isolationLevel.equals(\"read-uncommitted\"))\r\n+                case db2UDBV81OrEarlier:\r\n+                    if (isolationLevel ==\r\n+                        Connection.TRANSACTION_READ_UNCOMMITTED) {\r\n                         forUpdateString.append(\" \").append(withRSClause)\r\n-                        .append(\" \").append(forUpdateOfClause).append(\" \");\r\n-                    else\r\n+                            .append(\" \").append(forUpdateOfClause).append(\" \");\r\n+                    } else {\r\n                         forUpdateString.append(\" \").append(forUpdateOfClause)\r\n-                        .append(\" \");\r\n-                    break;   \r\n+                           .append(\" \");\r\n+                    }\r\n+                    break;\r\n                 case db2ZOSV8x:\r\n-                case db2UDBV82AndLater: \r\n-                    if (isolationLevel.equals(\"serializable\"))\r\n+                case db2UDBV82AndLater:\r\n+                    if (isolationLevel == Connection.TRANSACTION_SERIALIZABLE) {\r\n                         forUpdateString.append(\" \").append(withRRClause)\r\n-                        .append(\" \").append(useKeepUpdateLockClause)\r\n-                        .append(\" \");\r\n-                    else\r\n+                            .append(\" \").append(useKeepUpdateLockClause)\r\n+                            .append(\" \");\r\n+                    } else {\r\n                         forUpdateString.append(\" \").append(withRSClause)\r\n-                        .append(\" \").append(useKeepUpdateLockClause)\r\n-                        .append(\" \");\t\r\n+                            .append(\" \").append(useKeepUpdateLockClause)\r\n+                            .append(\" \");\r\n+                    }\r\n                     break;\r\n                 case db2ISeriesV5R4AndLater:\r\n-                    if (isolationLevel.equals(\"serializable\"))\r\n+                    if (isolationLevel == Connection.TRANSACTION_SERIALIZABLE) {\r\n                         forUpdateString.append(\" \").append(withRRClause)\r\n-                        .append(\" \").append(useKeepExclusiveLockClause)\r\n-                        .append(\" \");\r\n-                    else\r\n+                            .append(\" \").append(useKeepExclusiveLockClause)\r\n+                            .append(\" \");\r\n+                    } else {\r\n                         forUpdateString.append(\" \").append(withRSClause)\r\n-                        .append(\" \").append(useKeepExclusiveLockClause)\r\n-                        .append(\" \");\t\r\n+                            .append(\" \").append(useKeepExclusiveLockClause)\r\n+                            .append(\" \");\r\n+                    }\r\n+                    break;\r\n                 }\r\n             }\r\n-        }    \r\n+        }\r\n         catch (Exception e) {\r\n             if (log.isTraceEnabled())\r\n                 log.error(e.toString(),e);\r\n         }\r\n         return forUpdateString.toString();\r\n-    }  \r\n-   \r\n+    }\r\n+\r\n     public boolean isDB2UDBV82AndLater(DatabaseMetaData metadata, int maj,\r\n         int min) throws SQLException {\r\n         boolean match = false;\r\n-        if (metadata.getDatabaseProductVersion().indexOf(\"SQL\") != -1 \r\n-            && ((maj ==8 && min >=2) ||(maj >=8)))\r\n-            match = true; \r\n+        if (metadata.getDatabaseProductVersion().indexOf(\"SQL\") != -1\r\n+            && ((maj == 8 && min >= 2) ||(maj >= 8)))\r\n+            match = true;\r\n         return match;\r\n     }\r\n \r\n-    public boolean isDB2ZOSV8x(DatabaseMetaData metadata,int maj)\r\n+    public boolean isDB2ZOSV8x(DatabaseMetaData metadata, int maj)\r\n        throws SQLException {\r\n        boolean match = false;\r\n-       if (metadata.getDatabaseProductVersion().indexOf(\"DSN\") != -1 \r\n-           && maj ==8 )\r\n-           match = true; \r\n+       if (metadata.getDatabaseProductVersion().indexOf(\"DSN\") != -1\r\n+           && maj == 8)\r\n+           match = true;\r\n         return match;\r\n     }\r\n \r\n     public boolean isDB2ISeriesV5R3AndEarlier(DatabaseMetaData metadata)\r\n        throws SQLException {\r\n        boolean match = false;\r\n-       if (metadata.getDatabaseProductVersion().indexOf(\"AS\") != -1 \r\n+       if (metadata.getDatabaseProductVersion().indexOf(\"AS\") != -1\r\n            && generateVersionNumber(metadata.getDatabaseProductVersion())\r\n-           <= 530 )\r\n-           match = true; \r\n+           <= 530)\r\n+           match = true;\r\n        return match;\r\n     }\r\n \r\n     public boolean isDB2ISeriesV5R4AndLater(DatabaseMetaData metadata)\r\n        throws SQLException {\r\n        boolean match = false;\r\n-       if (metadata.getDatabaseProductVersion().indexOf(\"AS\") != -1 \r\n+       if (metadata.getDatabaseProductVersion().indexOf(\"AS\") != -1\r\n            && generateVersionNumber(metadata.getDatabaseProductVersion())\r\n-           >= 540 )\r\n-           match = true; \r\n+           >= 540)\r\n+           match = true;\r\n       return match;\r\n     }\r\n \r\n-    public boolean isDB2UDBV81OrEarlier(DatabaseMetaData metadata,int maj, \r\n+    public boolean isDB2UDBV81OrEarlier(DatabaseMetaData metadata, int maj,\r\n         int min) throws SQLException {\r\n         boolean match = false;\r\n         if (metadata.getDatabaseProductVersion().indexOf(\"SQL\") != -1 &&\r\n-           ((maj ==8 && min <=1)|| maj <8 ))\r\n-            match = true; \r\n+           ((maj == 8 && min <= 1)|| maj < 8))\r\n+            match = true;\r\n         return match;\r\n     }\r\n \r\n     /** Get the version number for the ISeries\r\n-     */ \r\n+     */\r\n     protected  int generateVersionNumber(String versionString) {\r\n         String s = versionString.substring(versionString.indexOf('V'));\r\n-        s = s.toUpperCase(); \r\n+        s = s.toUpperCase();\r\n         int i = -1;\r\n         StringTokenizer stringtokenizer = new StringTokenizer(s, \"VRM\", false);\r\n         if (stringtokenizer.countTokens() == 3)\r\n@@ -358,72 +357,17 @@ protected  int generateVersionNumber(String versionString) {\n         }\r\n         return i;\r\n     }\r\n- \r\n-       \r\n-    /**\r\n-     * Override the toOperationMethod of DBDictionary to pass the \r\n-     * forUpdateString.\r\n-     */\r\n-    protected SQLBuffer toOperation(String op, SQLBuffer selects, \r\n-        SQLBuffer from, SQLBuffer where, SQLBuffer group, SQLBuffer having, \r\n-        SQLBuffer order, boolean distinct, boolean forUpdate, long start, \r\n-        long end,String forUpdateString) {\r\n-        SQLBuffer buf = new SQLBuffer(this);\r\n-        buf.append(op);\r\n-        boolean range = start != 0 || end != Long.MAX_VALUE;\r\n-        if (range && rangePosition == RANGE_PRE_DISTINCT)\r\n-            appendSelectRange(buf, start, end);\r\n-        if (distinct)\r\n-            buf.append(\" DISTINCT\");\r\n-        if (range && rangePosition == RANGE_POST_DISTINCT)\r\n-            appendSelectRange(buf, start, end);\r\n-        buf.append(\" \").append(selects).append(\" FROM \").append(from);\r\n-\r\n-        if (where != null && !where.isEmpty())\r\n-            buf.append(\" WHERE \").append(where);\r\n-        if (group != null && !group.isEmpty())\r\n-            buf.append(\" GROUP BY \").append(group);\r\n-        if (having != null && !having.isEmpty()) {\r\n-            assertSupport(supportsHaving, \"SupportsHaving\");\r\n-            buf.append(\" HAVING \").append(having);\r\n-        }\r\n-        if (order != null && !order.isEmpty())\r\n-            buf.append(\" ORDER BY \").append(order);\r\n-        if (range && rangePosition == RANGE_POST_SELECT)\r\n-            appendSelectRange(buf, start, end);\r\n-\r\n-        if (!simulateLocking ) {\r\n-            assertSupport(supportsSelectForUpdate, \"SupportsSelectForUpdate\");\r\n-            buf.append(\" \").append(forUpdateString);\r\n-        }\r\n-        if (range && rangePosition == RANGE_POST_LOCK)\r\n-            appendSelectRange(buf, start, end);\r\n-        return buf;\r\n-    }\r\n \r\n     public SQLBuffer toSelect(Select sel, boolean forUpdate,\r\n         JDBCFetchConfiguration fetch) {\r\n-        sel.addJoinClassConditions();\r\n-        boolean update = forUpdate && sel.getFromSelect() == null;\r\n-        SQLBuffer select = getSelects(sel, false, update);\r\n-        SQLBuffer ordering = null;\r\n-        if (!sel.isAggregate() || sel.getGrouping() != null)\r\n-            ordering = sel.getOrdering();\r\n-        SQLBuffer from;\r\n-        if (sel.getFromSelect() != null)\r\n-            from = getFromSelect(sel, forUpdate);\r\n-        else\r\n-            from = getFrom(sel, update);\r\n-        SQLBuffer where = getWhere(sel, update);\r\n-        String forUpdateString = getForUpdateClause(fetch,forUpdate);\r\n-        SQLBuffer buf = toOperation(getSelectOperation(fetch), select,\r\n-            from, where,sel.getGrouping(), sel.getHaving(),  ordering,\r\n-            sel.isDistinct(), forUpdate, sel.getStartIndex(),\r\n-            sel.getEndIndex(),forUpdateString);\r\n-        if (sel.getExpectedResultCount() > 0)\r\n-            buf.append(\" \").append(optimizeClause).append(\" \").\r\n-            append(String.valueOf(sel.getExpectedResultCount())).\r\n-            append(\" \").append(rowClause);\r\n+        SQLBuffer buf = super.toSelect(sel, forUpdate, fetch);\r\n+\r\n+        if (sel.getExpectedResultCount() > 0) {\r\n+            buf.append(\" \").append(optimizeClause).append(\" \")\r\n+                .append(String.valueOf(sel.getExpectedResultCount()))\r\n+                .append(\" \").append(rowClause);\r\n+        }\r\n+\r\n         return buf;\r\n     }\r\n \r\n@@ -452,20 +396,20 @@ private String appendExtendedExceptionMsg(String msg, SQLException sqle){\n             getMethod(\"getSqlWarn\", null);\r\n             Method  getSqlErrdMethd = sqlca.getClass().\r\n             getMethod(\"getSqlErrd\", null);\r\n-            exceptionMsg = exceptionMsg.concat( \"SQLCA OUTPUT\" + \r\n+            exceptionMsg = exceptionMsg.concat( \"SQLCA OUTPUT\" +\r\n                     \"[Errp=\" +getSqlErrpMethd.invoke(sqlca,new Object[]{})\r\n                     + \", Errd=\" + Arrays.toString((int[])\r\n                             (getSqlErrdMethd.invoke(sqlca, new Object[]{}))));\r\n             String Warn = new String((char[])getSqlWarnMethd.\r\n                     invoke(sqlca, new Object[]{}));\r\n             if(Warn.trim().length() != 0)\r\n-                exceptionMsg = exceptionMsg.concat(\", Warn=\" +Warn + \"]\" ); \r\n+                exceptionMsg = exceptionMsg.concat(\", Warn=\" +Warn + \"]\" );\r\n             else\r\n-                exceptionMsg = exceptionMsg.concat( \"]\" ); \r\n+                exceptionMsg = exceptionMsg.concat( \"]\" );\r\n             msg = msg.concat(exceptionMsg);\r\n             return msg;\r\n         } catch (Throwable t) {\r\n             return sqle.getMessage();\r\n         }\r\n     }\r\n-   }\n\\ No newline at end of file\n+   }\r"},{"sha":"515d6bc432eb95d364ae681adcb272774263e849","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":22,"deletions":7,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/814637ca6cd89f237450d24469732b86b91b73b5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/814637ca6cd89f237450d24469732b86b91b73b5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=814637ca6cd89f237450d24469732b86b91b73b5","patch":"@@ -2145,7 +2145,22 @@ public SQLBuffer toSelect(SQLBuffer selects, JDBCFetchConfiguration fetch,\n         SQLBuffer having, SQLBuffer order,\n         boolean distinct, boolean forUpdate, long start, long end) {\n         return toOperation(getSelectOperation(fetch), selects, from, where,\n-            group, having, order, distinct, forUpdate, start, end);\n+            group, having, order, distinct, forUpdate, start, end,\n+            getForUpdateClause(fetch, forUpdate));\n+    }\n+\n+    /**\n+     * Get the update clause for the query based on the\n+     * updateClause and isolationLevel hints\n+     */\n+    protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n+        boolean forUpdate) {\n+        if (fetch.getIsolationLevel() != -1)\n+            throw new IllegalStateException(_loc.get(\n+                \"isolation-level-config-not-supported\", getClass().getName())\n+                .getMessage());\n+        else\n+            return forUpdateClause;\n     }\n \n     /**\n@@ -2158,10 +2173,10 @@ public String getSelectOperation(JDBCFetchConfiguration fetch) {\n     /**\n      * Return the SQL for the given selecting operation.\n      */\n-    protected SQLBuffer toOperation(String op, SQLBuffer selects, \n-        SQLBuffer from, SQLBuffer where, SQLBuffer group, SQLBuffer having, \n-        SQLBuffer order, boolean distinct, boolean forUpdate, long start, \n-        long end) {\n+    protected SQLBuffer toOperation(String op, SQLBuffer selects,\n+        SQLBuffer from, SQLBuffer where, SQLBuffer group, SQLBuffer having,\n+        SQLBuffer order, boolean distinct, boolean forUpdate, long start,\n+        long end, String forUpdateClause) {\n         SQLBuffer buf = new SQLBuffer(this);\n         buf.append(op);\n \n@@ -2190,8 +2205,8 @@ protected SQLBuffer toOperation(String op, SQLBuffer selects,\n \n         if (forUpdate && !simulateLocking) {\n             assertSupport(supportsSelectForUpdate, \"SupportsSelectForUpdate\");\n-            if (forUpdateClause != null)\n-                buf.append(\" \").append(forUpdateClause);\n+            if (this.forUpdateClause != null)\n+                buf.append(\" \").append(this.forUpdateClause);\n         }\n         if (range && rangePosition == RANGE_POST_LOCK)\n             appendSelectRange(buf, start, end);"},{"sha":"02a5adee293768a5a9240569ce083f2b801d8e13","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java","status":"modified","additions":0,"deletions":20,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/814637ca6cd89f237450d24469732b86b91b73b5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/814637ca6cd89f237450d24469732b86b91b73b5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java?ref=814637ca6cd89f237450d24469732b86b91b73b5","patch":"@@ -159,14 +159,6 @@ protected String getSequencesSQL(String schemaName, String sequenceName) {\n         return buf.toString();\n     }\n \n-    protected SQLBuffer toOperation(String op, SQLBuffer selects,\n-        SQLBuffer from, SQLBuffer where, SQLBuffer group, SQLBuffer having,\n-        SQLBuffer order, boolean distinct, boolean forUpdate, long start,\n-        long end) {\n-        return super.toOperation(op, selects, from, where, group, having,\n-            order, distinct, forUpdate, start, end);\n-    }\n-\n     public Column[] getColumns(DatabaseMetaData meta, String catalog,\n         String schemaName, String tableName, String columnName, Connection conn)\n         throws SQLException {\n@@ -175,18 +167,6 @@ protected SQLBuffer toOperation(String op, SQLBuffer selects,\n         return cols;\n     }\n \n-    public void setDouble(PreparedStatement stmnt, int idx, double val,\n-        Column col)\n-        throws SQLException {\n-        super.setDouble(stmnt, idx, val, col);\n-    }\n-\n-    public void setBigDecimal(PreparedStatement stmnt, int idx, BigDecimal val,\n-        Column col)\n-        throws SQLException {\n-        super.setBigDecimal(stmnt, idx, val, col);\n-    }\n-\n     protected void appendSelectRange(SQLBuffer buf, long start, long end) {\n         if (end != Long.MAX_VALUE)\n             buf.append(\" LIMIT \").appendValue(end - start);"},{"sha":"76d540f1ce24988b938cd3a1475211df1cd3ae70","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/814637ca6cd89f237450d24469732b86b91b73b5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/814637ca6cd89f237450d24469732b86b91b73b5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java?ref=814637ca6cd89f237450d24469732b86b91b73b5","patch":"@@ -190,16 +190,16 @@ protected String getSequencesSQL(String schemaName, String sequenceName) {\n         return buf.toString();\n     }\n \n-    protected SQLBuffer toOperation(String op, SQLBuffer selects, \n-        SQLBuffer from, SQLBuffer where, SQLBuffer group, SQLBuffer having, \n-        SQLBuffer order, boolean distinct, boolean forUpdate, long start, \n-        long end) {\n+    protected SQLBuffer toOperation(String op, SQLBuffer selects,\n+        SQLBuffer from, SQLBuffer where, SQLBuffer group, SQLBuffer having,\n+        SQLBuffer order, boolean distinct, boolean forUpdate, long start,\n+        long end, String forUpdateClause) {\n         // hsql requires ordering when limit is used\n         if ((start != 0 || end != Long.MAX_VALUE)\n             && (order == null || order.isEmpty()))\n             order = _oneBuffer;\n         return super.toOperation(op, selects, from, where, group, having,\n-            order, distinct, forUpdate, start, end);\n+            order, distinct, forUpdate, start, end, forUpdateClause);\n     }\n \n     public Column[] getColumns(DatabaseMetaData meta, String catalog,"},{"sha":"18b5bffb9251158c19432d4bd26af13e20f23ca0","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/814637ca6cd89f237450d24469732b86b91b73b5/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/814637ca6cd89f237450d24469732b86b91b73b5/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/kernel/localizer.properties?ref=814637ca6cd89f237450d24469732b86b91b73b5","patch":"@@ -97,3 +97,8 @@ clstable-seq-usage: Usage: \\\n native-seq-usage: Usage: java org.apache.openjpa.jdbc.kernel.NativeJDBCSeq\\n\\\n \t\\t[-properties/-p <properties file or resource>]\\n\\\n \t\\t[-<property name> <property value>]*\n+bad-level: Invalid isolation level. Valid levels are -1, \\\n+    Connection.TRANSACTION_NONE, Connection.TRANSACTION_READ_UNCOMMITTED, \\ \n+    Connection.TRANSACTION_READ_COMMITTED, \\\n+    Connection.TRANSACTION_REPEATABLE_READ, or \\\n+    Connection.TRANSACTION_SERIALIZABLE. Specified value: {0}.\n\\ No newline at end of file"},{"sha":"fe43ecd36c4254e261693bb45460cf6bd17271c9","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/814637ca6cd89f237450d24469732b86b91b73b5/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/814637ca6cd89f237450d24469732b86b91b73b5/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/sql/localizer.properties?ref=814637ca6cd89f237450d24469732b86b91b73b5","patch":"@@ -160,3 +160,5 @@ oracle-timestamp-bug: An ArrayIndexOutOfBoundsException has occured when \\\n     less than 9.2. Downgrading the driver will solve this, or it can be \\\n     worked around by setting the \"SupportsTimestampNanos\" DBDictionary \\\n     property to \"true\".\n+isolation-level-config-not-supported: This DBDictionary does not support \\\n+    customization of isolation levels on a per-query basis. DBDictionary: {0}.\n\\ No newline at end of file"},{"sha":"8c4954a4220a18ecafb0758cc4b1a084ba926d4b","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java","status":"modified","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/814637ca6cd89f237450d24469732b86b91b73b5/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java","raw_url":"https://github.com/apache/openjpa/raw/814637ca6cd89f237450d24469732b86b91b73b5/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java?ref=814637ca6cd89f237450d24469732b86b91b73b5","patch":"@@ -15,6 +15,8 @@\n  */\n package org.apache.openjpa.persistence.jdbc;\n \n+import java.sql.Connection;\n+\n import org.apache.openjpa.jdbc.kernel.EagerFetchModes;\n import org.apache.openjpa.jdbc.kernel.LRSSizes;\n import org.apache.openjpa.jdbc.sql.JoinSyntaxes;\n@@ -114,4 +116,38 @@\n      * @see JoinSyntaxes\n      */\n     public JDBCFetchPlan setJoinSyntax(int syntax);\n+\n+    /**\n+     * <p>The isolation level for queries issued to the database. This overrides\n+     * the persistence-unit-wide <code>openjpa.jdbc.TransactionIsolation</code>\n+     * value.</p>\n+     *\n+     * <p>Must be one of {@link Connection#TRANSACTION_NONE},\n+     * {@link Connection#TRANSACTION_READ_UNCOMMITTED},\n+     * {@link Connection#TRANSACTION_READ_COMMITTED},\n+     * {@link Connection#TRANSACTION_REPEATABLE_READ}, \n+     * {@link Connection#TRANSACTION_SERIALIZABLE},\n+     * or -1 for the default connection level specified by the context in\n+     * which this fetch plan is being used.</p>\n+     *\n+     * @since 0.9.7\n+     */\n+    public int getIsolationLevel();\n+\n+    /**\n+     * <p>The isolation level for queries issued to the database. This overrides\n+     * the persistence-unit-wide <code>openjpa.jdbc.TransactionIsolation</code>\n+     * value.</p>\n+     *\n+     * <p>Must be one of {@link Connection#TRANSACTION_NONE},\n+     * {@link Connection#TRANSACTION_READ_UNCOMMITTED},\n+     * {@link Connection#TRANSACTION_READ_COMMITTED},\n+     * {@link Connection#TRANSACTION_REPEATABLE_READ},\n+     * {@link Connection#TRANSACTION_SERIALIZABLE},\n+     * or -1 for the default connection level specified by the context in\n+     * which this fetch plan is being used.</p>\n+     *\n+     * @since 0.9.7\n+     */\n+    public JDBCFetchPlan setIsolationLevel(int level);\n }"},{"sha":"ed179ea42196d654fa116de9ae61172064aa304a","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/814637ca6cd89f237450d24469732b86b91b73b5/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java","raw_url":"https://github.com/apache/openjpa/raw/814637ca6cd89f237450d24469732b86b91b73b5/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java?ref=814637ca6cd89f237450d24469732b86b91b73b5","patch":"@@ -102,4 +102,13 @@ public JDBCFetchPlanImpl setJoinSyntax(int syntax) {\n         _fetch.setJoinSyntax(syntax);\n         return this;\n     }\n+\n+    public int getIsolationLevel() {\n+        return _fetch.getIsolationLevel();\n+    }\n+\n+    public JDBCFetchPlan setIsolationLevel(int level) {\n+        _fetch.setIsolationLevel(level);\n+        return this;\n+    }\n }"},{"sha":"396e4d7533cdd7499b3c6a7fbf9033749b638506","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/814637ca6cd89f237450d24469732b86b91b73b5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","raw_url":"https://github.com/apache/openjpa/raw/814637ca6cd89f237450d24469732b86b91b73b5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java?ref=814637ca6cd89f237450d24469732b86b91b73b5","patch":"@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc;\n+\n+import java.sql.Connection;\n+import javax.persistence.EntityManager;\n+import javax.persistence.LockModeType;\n+import javax.persistence.PersistenceException;\n+\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.FetchPlan;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.DB2Dictionary;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+\n+public class TestIsolationLevelOverride\n+    extends SQLListenerTestCase {\n+\n+    public void setUp() {\n+        setUp(AllFieldTypes.class,\n+            \"openjpa.Optimistic\", \"false\",\n+            \"openjpa.LockManager\", \"pessimistic\");\n+    }\n+\n+    public void testIsolationLevelOverride() {\n+        OpenJPAEntityManager em =\n+            OpenJPAPersistence.cast(emf.createEntityManager());\n+        DBDictionary dict = ((JDBCConfiguration) em.getConfiguration())\n+            .getDBDictionaryInstance();\n+        sql.clear();\n+        try {\n+            em.getTransaction().begin();\n+            ((JDBCFetchPlan) em.getFetchPlan())\n+                .setIsolationLevel(Connection.TRANSACTION_SERIALIZABLE);\n+            em.find(AllFieldTypes.class, 0);\n+\n+            if (dict instanceof DB2Dictionary) {\n+                assertEquals(1, sql.size());\n+                assertSQL(\".*DB2-specific SQL to test for goes here.*\");\n+            } else {\n+                fail(\"OpenJPA currently only supports per-query isolation \" +\n+                    \"level configuration on the following databases: DB2\");\n+            }\n+        } catch (PersistenceException pe) {\n+            // if we're not using DB2, we expect an IllegalStateException.\n+            if (dict instanceof DB2Dictionary\n+                || !(pe.getCause() instanceof IllegalStateException))\n+                throw pe;\n+        } finally {\n+            em.getTransaction().rollback();\n+            em.close();\n+        }\n+    }\n+}"},{"sha":"1c670f4538ba205b1570412927a9f29dc87362ed","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/814637ca6cd89f237450d24469732b86b91b73b5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java","raw_url":"https://github.com/apache/openjpa/raw/814637ca6cd89f237450d24469732b86b91b73b5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java?ref=814637ca6cd89f237450d24469732b86b91b73b5","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.LockModeType;\n+\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.FetchPlan;\n+\n+public class TestSelectForUpdateOverride\n+    extends SQLListenerTestCase {\n+\n+    public void setUp() {\n+        setUp(AllFieldTypes.class,\n+            \"openjpa.Optimistic\", \"false\",\n+            \"openjpa.LockManager\", \"pessimistic\",\n+            \"openjpa.ReadLockLevel\", \"none\");\n+    }\n+\n+    public void testSelectForUpdateOverride() {\n+        EntityManager em = emf.createEntityManager();\n+        sql.clear();\n+        try {\n+            em.getTransaction().begin();\n+            OpenJPAPersistence.cast(em).getFetchPlan()\n+                .setReadLockMode(LockModeType.WRITE);\n+            em.find(AllFieldTypes.class, 0);\n+\n+            assertEquals(1, sql.size());\n+            assertSQL(\".*FOR UPDATE.*\");\n+        } finally {\n+            em.getTransaction().rollback();\n+            em.close();\n+        }\n+    }\n+}"}]}

