{"sha":"8167400e51e6148aed5f4bef1c9fb737b659abd3","node_id":"MDY6Q29tbWl0MjA2MzY0OjgxNjc0MDBlNTFlNjE0OGFlZDVmNGJlZjFjOWZiNzM3YjY1OWFiZDM=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-03-30T18:45:15Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-03-30T18:45:15Z"},"message":"Bring some consistency to test case structure.  Now all persistent test cases\nextend SingleEMFTestCase or SingleEMTestCase as appropriate.  These base test\ncases contain utilties for initializing the EMF on setup and deleting any\ninserted database records and closing the EMF on teardown.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@524228 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2b419603d0eb62df53eff98ccd5c03caf98ab0f7","url":"https://api.github.com/repos/apache/openjpa/git/trees/2b419603d0eb62df53eff98ccd5c03caf98ab0f7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8167400e51e6148aed5f4bef1c9fb737b659abd3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8167400e51e6148aed5f4bef1c9fb737b659abd3","html_url":"https://github.com/apache/openjpa/commit/8167400e51e6148aed5f4bef1c9fb737b659abd3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8167400e51e6148aed5f4bef1c9fb737b659abd3/comments","author":null,"committer":null,"parents":[{"sha":"3d929be1707797d4d7078e0776686ee783c11895","url":"https://api.github.com/repos/apache/openjpa/commits/3d929be1707797d4d7078e0776686ee783c11895","html_url":"https://github.com/apache/openjpa/commit/3d929be1707797d4d7078e0776686ee783c11895"}],"stats":{"total":1488,"additions":453,"deletions":1035},"files":[{"sha":"600d1ee2eaeeacc9a86b4df4615e807f7a704a44","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -577,7 +577,8 @@ public LifecycleMetaData getLifecycleMetaData() {\n     /**\n      * Returns the alias for the described type, or <code>null</code> if none\n      * has been set.\n-     *  #see\tsetTypeAlias\n+     * \n+     * @see #setTypeAlias\n      */\n     public String getTypeAlias() {\n         if (_alias == null)"},{"sha":"c8597291538462b15466bec5ebe2cfe64206b2ae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestExceptionsFromCallbacks.java","status":"modified","additions":4,"deletions":31,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestExceptionsFromCallbacks.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestExceptionsFromCallbacks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestExceptionsFromCallbacks.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -7,47 +7,20 @@\n import javax.persistence.Persistence;\n import javax.persistence.RollbackException;\n \n+import junit.framework.TestCase;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.openjpa.persistence.callbacks.ExceptionsFromCallbacksEntity.CallbackTestException;\n-\n-import junit.framework.TestCase;\n-\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n /**\n  * Tests against JPA section 3.5's description of callback exception handling.\n  */\n public class TestExceptionsFromCallbacks\n-    extends TestCase {\n-\n-    private OpenJPAEntityManagerFactory emf;\n+    extends SingleEMFTestCase {\n \n     public void setUp() {\n-        String types = ExceptionsFromCallbacksEntity.class.getName();\n-        Map props = new HashMap(System.getProperties());\n-        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" + types + \")\");\n-        emf = (OpenJPAEntityManagerFactory) Persistence.\n-            createEntityManagerFactory(\"test\", props);\n-        deleteAll();\n-    }\n-\n-    public void tearDown() {\n-        if (emf == null)\n-            return;\n-        try {\n-            deleteAll();\n-            emf.close();\n-        } catch (Exception e) {\n-        }\n-    }\n-    \n-    private void deleteAll() {\n-        EntityManager em = emf.createEntityManager();\n-        em.getTransaction().begin();\n-        em.createQuery(\"delete from ExceptionsFromCallbacksEntity\").\n-            executeUpdate();\n-        em.getTransaction().commit();\n-        em.close();\n+        setUp(ExceptionsFromCallbacksEntity.class);\n     }\n \n     public void testPrePersistException() {"},{"sha":"3e213de0970b15caa42bdd48c0bc61859bf0cd22","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestArrayFieldsInDataCache.java","status":"modified","additions":11,"deletions":26,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestArrayFieldsInDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestArrayFieldsInDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestArrayFieldsInDataCache.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -4,41 +4,26 @@\n import java.util.Arrays;\n import javax.persistence.EntityManager;\n \n-import org.apache.openjpa.persistence.test.SingleEMTest;\n-import org.apache.openjpa.persistence.simple.AllFieldTypes;\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.openjpa.datacache.DataCache;\n import org.apache.openjpa.kernel.PCData;\n import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n public class TestArrayFieldsInDataCache\n-    extends SingleEMTest {\n+    extends SingleEMFTestCase {\n \n     private static final String[] STRINGS = new String[]{ \"a\", \"b\", \"c\" };\n     private static final int[] INTS = new int[]{ 1, 2, 3 };\n \n     private Object jpaOid;\n     private Object internalOid;\n \n-    public TestArrayFieldsInDataCache() {\n-        super(AllFieldTypes.class);\n-    }\n-\n-    @Override\n-    protected void setEMFProps(Map props) {\n-        super.setEMFProps(props);\n-        props.put(\"openjpa.DataCache\", \"true\");\n-        props.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n-    }\n-\n-    @Override\n-    protected boolean clearDatabaseInSetUp() {\n-        return true;\n-    }\n-\n-    @Override\n-    public void setUp() throws Exception {\n-        super.setUp();\n+    public void setUp() {\n+        setUp(\"openjpa.DataCache\", \"true\", \n+            \"openjpa.RemoteCommitProvider\", \"sjvm\", \n+            AllFieldTypes.class);\n \n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n@@ -70,7 +55,7 @@ public void testArrayOfStrings() {\n             cachedFieldData.getClass().getComponentType());\n \n         // make sure that the returned results are correct\n-        em = emf.createEntityManager();\n+        EntityManager em = emf.createEntityManager();\n         AllFieldTypes aft = em.find(AllFieldTypes.class, jpaOid);\n         assertTrue(Arrays.equals(STRINGS, aft.getArrayOfStrings()));\n         assertNotSame(STRINGS, aft.getArrayOfStrings());\n@@ -90,10 +75,10 @@ public void testArrayOfInts() {\n         assertEquals(int.class, cachedFieldData.getClass().getComponentType());\n \n         // make sure that the returned results are correct\n-        em = emf.createEntityManager();\n+        EntityManager em = emf.createEntityManager();\n         AllFieldTypes aft = em.find(AllFieldTypes.class, jpaOid);\n         assertTrue(Arrays.equals(INTS, aft.getArrayOfInts()));\n         assertNotSame(INTS, aft.getArrayOfInts());\n         em.close();\n     }\n-}\n\\ No newline at end of file\n+}"},{"sha":"991ef81ff540fe41bf125a0b6fa16ca9640bec30","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkJPQLAndDataCache.java","status":"modified","additions":10,"deletions":46,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkJPQLAndDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkJPQLAndDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkJPQLAndDataCache.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -7,34 +7,19 @@\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.openjpa.persistence.simple.AllFieldTypes;\n-import org.apache.openjpa.persistence.test.SingleEMFTest;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n public class TestBulkJPQLAndDataCache\n-    extends SingleEMFTest {\n+    extends SingleEMFTestCase {\n \n     private Object oid;\n \n-    public TestBulkJPQLAndDataCache() {\n-        super(AllFieldTypes.class, CascadeParent.class, CascadeChild.class);\n-    }\n-\n-    @Override\n-    protected boolean clearDatabaseInSetUp() {\n-        return true;\n-    }\n-\n-    protected void setEMFProps(Map props) {\n-        super.setEMFProps(props);\n-        props.put(\"openjpa.DataCache\", \"true\");\n-        props.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n-    }\n-\n-    @Override\n     public void setUp() throws Exception {\n-        super.setUp();\n+        setUp(\"openjpa.DataCache\", \"true\",\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\",\n+            AllFieldTypes.class, CascadeParent.class, CascadeChild.class);\n \n-        OpenJPAEntityManager em =\n-            OpenJPAPersistence.cast(emf.createEntityManager());\n+        OpenJPAEntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n         AllFieldTypes pc = new AllFieldTypes();\n         pc.setStringField(\"DeleteMe\");\n@@ -44,28 +29,8 @@ public void setUp() throws Exception {\n         em.close();\n     }\n \n-    public void tearDown() \n-        throws Exception {\n-        if (emf == null)\n-            return;\n-        try {\n-            EntityManager em = emf.createEntityManager();\n-            em.getTransaction().begin();\n-            em.createQuery(\"DELETE FROM AllFieldTypes\").executeUpdate();\n-            em.createQuery(\"DELETE FROM CascadeParent\").executeUpdate();\n-            em.createQuery(\"DELETE FROM CascadeChild\").executeUpdate();\n-            em.getTransaction().commit();\n-            em.close();\n-        } catch (Exception e) {\n-        }\n-\n-        super.tearDown();\n-    }\n-\n     public void testBulkDelete() {\n-        OpenJPAEntityManager em =\n-            OpenJPAPersistence.cast(emf.createEntityManager());\n-\n+        OpenJPAEntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n         List result = em.createQuery(\"SELECT o FROM AllFieldTypes o\")\n             .getResultList();\n@@ -74,7 +39,7 @@ public void testBulkDelete() {\n         em.getTransaction().commit();\n         em.close();\n \n-        em = OpenJPAPersistence.cast(emf.createEntityManager());\n+        em = emf.createEntityManager();\n \n         // this assumes that we invalidate the cache, rather than update it\n         // according to the bulk rule.\n@@ -86,8 +51,7 @@ public void testBulkDelete() {\n     }\n \n     public void testBulkUpdate() {\n-        OpenJPAEntityManager em =\n-            OpenJPAPersistence.cast(emf.createEntityManager());\n+        OpenJPAEntityManager em = emf.createEntityManager();\n \n         em.getTransaction().begin();\n         List result = em.createQuery(\"SELECT o FROM AllFieldTypes o \"\n@@ -98,7 +62,7 @@ public void testBulkUpdate() {\n         em.getTransaction().commit();\n         em.close();\n \n-        em = OpenJPAPersistence.cast(emf.createEntityManager());\n+        em = emf.createEntityManager();\n \n         // this assumes that we invalidate the cache, rather than update it\n         // according to the bulk rule."},{"sha":"feac87bc8c7d38948f24057337bf772ea79acfd9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheOptimisticLockRecovery.java","status":"modified","additions":11,"deletions":37,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheOptimisticLockRecovery.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheOptimisticLockRecovery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheOptimisticLockRecovery.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -15,62 +15,36 @@\n  */\r\n package org.apache.openjpa.persistence.datacache;\r\n \r\n+import java.sql.Connection;\r\n+import java.sql.PreparedStatement;\r\n+import java.sql.SQLException;\r\n import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import javax.persistence.Persistence;\r\n import javax.persistence.RollbackException;\r\n import javax.persistence.LockModeType;\r\n+import javax.sql.DataSource;\r\n \r\n-import junit.framework.TestCase;\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-\r\n-import java.sql.Connection;\r\n-import java.sql.PreparedStatement;\r\n-import java.sql.SQLException;\r\n-import javax.sql.DataSource;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n \r\n public class TestDataCacheOptimisticLockRecovery\r\n-    extends TestCase {\r\n+    extends SingleEMFTestCase {\r\n \r\n-    private EntityManagerFactory emf;\r\n     private int pk;\r\n \r\n     public void setUp() {\r\n-        Map options = new HashMap(System.getProperties());\r\n-\r\n-        // turn on caching\r\n-        options.put(\"openjpa.DataCache\", \"true\");\r\n-        options.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n-\r\n-        // ensure that OpenJPA knows about our type, so that \r\n-        // auto-schema-creation works\r\n-        options.put(\"openjpa.MetaDataFactory\",\r\n-            \"jpa(Types=\" + OptimisticLockInstance.class.getName() + \")\");\r\n-\r\n-        emf = Persistence.createEntityManagerFactory(\"test\", options);\r\n+        setUp(\"openjpa.DataCache\", \"true\",\r\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\",\r\n+            OptimisticLockInstance.class);\r\n \r\n         EntityManager em = emf.createEntityManager();\r\n         em.getTransaction().begin();\r\n-        em.createQuery(\"delete from OptimisticLockInstance\").executeUpdate();\r\n-\r\n         OptimisticLockInstance oli = new OptimisticLockInstance(\"foo\");\r\n-        try {\r\n-            em.persist(oli);\r\n-            em.getTransaction().commit();\r\n-        } finally {\r\n-            if (em.getTransaction().isActive())\r\n-                em.getTransaction().rollback();\r\n-        }\r\n+        em.persist(oli);\r\n+        em.getTransaction().commit();\r\n         pk = oli.getPK();\r\n         em.close();\r\n     }\r\n \r\n-    public void tearDown() {\r\n-        emf.close();\r\n-    }\r\n-\r\n     public void testOptimisticLockRecovery() \r\n         throws SQLException {\r\n \r"},{"sha":"33b290f0d7a271b612616ba91cef4ea768d15536","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestAttachWithNoChanges.java","status":"modified","additions":3,"deletions":35,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestAttachWithNoChanges.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestAttachWithNoChanges.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestAttachWithNoChanges.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -15,15 +15,11 @@\n  */\n package org.apache.openjpa.persistence.detachment;\n \n-import java.util.HashMap;\n-import java.util.Map;\n import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n import javax.persistence.OptimisticLockException;\n-import javax.persistence.Persistence;\n \n-import junit.framework.TestCase;\n import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n /**\n  * Test that attaching an instance without having changed it still overwrites\n@@ -32,37 +28,13 @@\n  * @author Abe White\n  */\n public class TestAttachWithNoChanges\n-    extends TestCase {\n-\n-    private EntityManagerFactory emf;\n+    extends SingleEMFTestCase {\n \n     public void setUp() {\n-        String types = DetachmentOneManyParent.class.getName() + \";\"\n-            + DetachmentOneManyChild.class.getName(); \n-        Map props = new HashMap(System.getProperties());\n-        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" + types + \")\");\n-        emf = Persistence.createEntityManagerFactory(\"test\", props);\n+        setUp(DetachmentOneManyParent.class, DetachmentOneManyChild.class);\n     }\n \n-    public void tearDown() {\n-        if (emf == null)\n-            return;\n-        try {\n-            EntityManager em = emf.createEntityManager();\n-            em.getTransaction().begin();\n-            em.createQuery(\"delete from DetachmentOneManyChild\").\n-                executeUpdate();\n-            em.createQuery(\"delete from DetachmentOneManyParent\").\n-                executeUpdate();\n-            em.getTransaction().commit();\n-            em.close();\n-            emf.close();\n-        } catch (Exception e) {\n-        }\n-    }\n-    \n     public void testAttachWithNoChangesChecksVersion() {\n-try {\n         DetachmentOneManyChild e = new DetachmentOneManyChild();\n         DetachmentOneManyParent p = new DetachmentOneManyParent();\n         e.setName(\"orig\");\n@@ -91,10 +63,6 @@ public void testAttachWithNoChangesChecksVersion() {\n                 em.getTransaction().rollback();\n             em.close();\n         }\n-} catch (RuntimeException re) {\n-re.printStackTrace();\n-throw re;\n-}\n     }\n \n     public static void main(String[] args) {"},{"sha":"6cfdde3ebc091d649f65baa8c2215db6c3db8a59","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachmentOneMany.java","status":"modified","additions":5,"deletions":33,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachmentOneMany.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachmentOneMany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachmentOneMany.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -15,54 +15,25 @@\n  */\n package org.apache.openjpa.persistence.detachment;\n \n-import java.util.HashMap;\n-import java.util.Map;\n import javax.persistence.EntityManager;\n-import javax.persistence.Persistence;\n \n-import junit.framework.TestCase;\n import junit.textui.TestRunner;\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.openjpa.kernel.AutoDetach;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n /**\n  * Tests detachment for bidirectional one-many relationship\n  *\n  * @author David Ezzio\n  */\n public class TestDetachmentOneMany\n-    extends TestCase {\n+    extends SingleEMFTestCase {\n \n-    private OpenJPAEntityManagerFactory emf;\n-\n-    @SuppressWarnings(\"unchecked\")\n     public void setUp() {\n-        String types = DetachmentOneManyParent.class.getName() + \";\"\n-            + DetachmentOneManyChild.class.getName(); \n-        Map props = new HashMap(System.getProperties());\n-        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" + types + \")\");\n-        emf = (OpenJPAEntityManagerFactory) Persistence.\n-            createEntityManagerFactory(\"test\", props);\n+        setUp(DetachmentOneManyParent.class, DetachmentOneManyChild.class);\n     }\n \n-    public void tearDown() {\n-        if (emf == null)\n-            return;\n-        try {\n-            EntityManager em = emf.createEntityManager();\n-            em.getTransaction().begin();\n-            em.createQuery(\"delete from DetachmentOneManyChild\").\n-                executeUpdate();\n-            em.createQuery(\"delete from DetachmentOneManyParent\").\n-                executeUpdate();\n-            em.getTransaction().commit();\n-            em.close();\n-            emf.close();\n-        } catch (Exception e) {\n-        }\n-    }\n-    \n     public void testDetachment() {\n         long id = createParentAndChildren();\n     \n@@ -72,6 +43,7 @@ public void testDetachment() {\n             id);\n         assertNotNull(parent);\n         assertFalse(\"The parent was not detached\", em.contains(parent));\n+        em.close();\n     }\n \n     public void testFetchWithDetach() {"},{"sha":"00ac2d94431a129ff4dcb01ab3d536acfa9dad29","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestGetReferenceAndImplicitDetachment.java","status":"modified","additions":5,"deletions":40,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestGetReferenceAndImplicitDetachment.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestGetReferenceAndImplicitDetachment.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestGetReferenceAndImplicitDetachment.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -1,54 +1,19 @@\n package org.apache.openjpa.persistence.detachment;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-\n import javax.persistence.EntityManager;\n-import javax.persistence.Persistence;\n import javax.persistence.RollbackException;\n \n+import junit.framework.TestCase;\n import org.apache.openjpa.enhance.PersistenceCapable;\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n-\n-import junit.framework.TestCase;\n-\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n public class TestGetReferenceAndImplicitDetachment\n-    extends TestCase {\n-\n-    private OpenJPAEntityManagerFactory emf;\n+    extends SingleEMFTestCase {\n \n     public void setUp() {\n-        String types = DetachmentOneManyParent.class.getName() + \";\"\n-            + DetachmentOneManyChild.class.getName(); \n-        Map props = new HashMap(System.getProperties());\n-        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" + types + \")\");\n-        props.put(\"openjpa.DetachState\", \"fgs\");\n-        emf = (OpenJPAEntityManagerFactory) Persistence.\n-            createEntityManagerFactory(\"test\", props);\n-        deleteAll();\n-    }\n-\n-    public void tearDown() {\n-        if (emf == null)\n-            return;\n-        try {\n-            deleteAll();\n-            emf.close();\n-        } catch (Exception e) {\n-        }\n-    }\n-    \n-    private void deleteAll() {\n-        EntityManager em = emf.createEntityManager();\n-        em.getTransaction().begin();\n-        em.createQuery(\"delete from DetachmentOneManyChild\").\n-            executeUpdate();\n-        em.createQuery(\"delete from DetachmentOneManyParent\").\n-            executeUpdate();\n-        em.getTransaction().commit();\n-        em.close();\n+        setUp(\"openjpa.DetachState\", \"fgs\",\n+            DetachmentOneManyParent.class, DetachmentOneManyChild.class);\n     }\n \n     public void testNonexistentGetReferenceDetachmentInTxWithCommit() {"},{"sha":"605dd1607776fd909e7e52641c09f770760fc31e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestGenerationType.java","status":"modified","additions":4,"deletions":27,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestGenerationType.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestGenerationType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestGenerationType.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -15,37 +15,28 @@\n  */\n package org.apache.openjpa.persistence.identity;\n \n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n import javax.persistence.EntityManager;\n import javax.persistence.EntityTransaction;\n-import javax.persistence.Persistence;\n import javax.persistence.Query;\n \n import junit.framework.TestCase;\n import junit.textui.TestRunner;\n-\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n /**\n  * Simple test case to test the GenerationType for @Id...\n  *\n  * @author Kevin Sutter\n  */\n public class TestGenerationType\n-    extends TestCase {\n-\n-    private OpenJPAEntityManagerFactory emf;\n+    extends SingleEMFTestCase {\n \n     public void setUp() {\n-        Map props = new HashMap(System.getProperties());\n-        props.put(\"openjpa.MetaDataFactory\",\n-            \"jpa(Types=\" + IdentityGenerationType.class.getName() + \")\");\n-        emf = (OpenJPAEntityManagerFactory) Persistence.\n-            createEntityManagerFactory(\"test\", props);\n+        setUp(IdentityGenerationType.class);\n+\n         /*\n          * If the DBDictionary doesn't support AutoAssign(ment) of column\n          * values, then null out the emf instance to prevent the rest of\n@@ -58,20 +49,6 @@ public void setUp() {\n \n     }\n \n-    public void tearDown() {\n-        if (emf == null)\n-            return;\n-        try {\n-            EntityManager em = emf.createEntityManager();\n-            em.getTransaction().begin();\n-            em.createQuery(\"delete from IdentityGenerationType\").executeUpdate();\n-            em.getTransaction().commit();\n-            em.close();\n-            emf.close();\n-        } catch (Exception e) {\n-        }\n-    }\n-\n     public void testCreateEntityManager() {\n         if (emf == null)\n             return;"},{"sha":"da84a8f971663be8bd16ca13a3cfe990d75099a7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLDateId.java","status":"modified","additions":3,"deletions":26,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLDateId.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLDateId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLDateId.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -16,44 +16,21 @@\n package org.apache.openjpa.persistence.identity;\n \n import java.sql.Date;\n-import java.util.HashMap;\n-import java.util.Map;\n import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n-import javax.persistence.Persistence;\n \n-import junit.framework.TestCase;\n import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n /**\n  * Test that entities can use SQL dates as identity values.\n  *\n  * @author Abe White\n  */\n public class TestSQLDateId\n-    extends TestCase {\n-\n-    private EntityManagerFactory emf;\n+    extends SingleEMFTestCase {\n \n     public void setUp() {\n-        String types = SQLDateIdEntity.class.getName();\n-        Map props = new HashMap(System.getProperties());\n-        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" + types + \")\");\n-        emf = Persistence.createEntityManagerFactory(\"test\", props);\n-    }\n-\n-    public void tearDown() {\n-        if (emf == null)\n-            return;\n-        try {\n-            EntityManager em = emf.createEntityManager();\n-            em.getTransaction().begin();\n-            em.createQuery(\"delete from SQLDateIdEntity\").executeUpdate();\n-            em.getTransaction().commit();\n-            em.close();\n-            emf.close();\n-        } catch (Exception e) {\n-        }\n+        setUp(SQLDateIdEntity.class);\n     }\n \n     public void testPersist() {"},{"sha":"01250f21712d63f2eaaf97fc6827098596feb597","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestFindAbstractClass.java","status":"modified","additions":3,"deletions":27,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestFindAbstractClass.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestFindAbstractClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestFindAbstractClass.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -15,14 +15,10 @@\n  */\n package org.apache.openjpa.persistence.inheritance;\n \n-import java.util.HashMap;\n-import java.util.Map;\n import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n-import javax.persistence.Persistence;\n \n-import junit.framework.TestCase;\n import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n /**\n  * Test that you can find a concrete subclass record when passing in its\n@@ -31,16 +27,10 @@\n  * @author Abe White\n  */\n public class TestFindAbstractClass\n-    extends TestCase {\n-\n-    private EntityManagerFactory emf;\n+    extends SingleEMFTestCase {\n \n     public void setUp() {\n-        String types = AbstractBase.class.getName() + \";\"\n-            + ConcreteSubclass.class.getName();\n-        Map props = new HashMap(System.getProperties());\n-        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" + types + \")\");\n-        emf = Persistence.createEntityManagerFactory(\"test\", props);\n+        setUp(AbstractBase.class, ConcreteSubclass.class);\n \n         ConcreteSubclass e = new ConcreteSubclass();\n         e.setId(\"id\");\n@@ -53,20 +43,6 @@ public void setUp() {\n         em.close();\n     }\n \n-    public void tearDown() {\n-        if (emf == null)\n-            return;\n-        try {\n-            EntityManager em = emf.createEntityManager();\n-            em.getTransaction().begin();\n-            em.createQuery(\"delete from ConcreteSubclass\").executeUpdate();\n-            em.getTransaction().commit();\n-            em.close();\n-            emf.close();\n-        } catch (Exception e) {\n-        }\n-    }\n-\n     public void testFind() {\n         EntityManager em = emf.createEntityManager();\n         AbstractBase e = em.find(AbstractBase.class, \"id\");"},{"sha":"7e8e2e43590dc8de176ea4b6bb51c7c2245989d7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestMultipleMappedSuperclassHierarchy.java","status":"modified","additions":4,"deletions":28,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestMultipleMappedSuperclassHierarchy.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestMultipleMappedSuperclassHierarchy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestMultipleMappedSuperclassHierarchy.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -15,14 +15,10 @@\n  */\n package org.apache.openjpa.persistence.inheritance;\n \n-import java.util.HashMap;\n-import java.util.Map;\n import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n-import javax.persistence.Persistence;\n \n-import junit.framework.TestCase;\n import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n /**\n  * Perform basic operations on an inheritance hierarchy involving multiple\n@@ -31,31 +27,11 @@\n  * @author Abe White\n  */\n public class TestMultipleMappedSuperclassHierarchy\n-    extends TestCase {\n-\n-    private EntityManagerFactory emf;\n+    extends SingleEMFTestCase {\n \n     public void setUp() {\n-        String types = MappedSuperclassBase.class.getName() + \";\"\n-            + MappedSuperclassL2.class.getName() + \";\"\n-            + EntityL3.class.getName();\n-        Map props = new HashMap(System.getProperties());\n-        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" + types + \")\");\n-        emf = Persistence.createEntityManagerFactory(\"test\", props);\n-    }\n-\n-    public void tearDown() {\n-        if (emf == null)\n-            return;\n-        try {\n-            EntityManager em = emf.createEntityManager();\n-            em.getTransaction().begin();\n-            em.createQuery(\"delete from EntityL3\").executeUpdate();\n-            em.getTransaction().commit();\n-            em.close();\n-            emf.close();\n-        } catch (Exception e) {\n-        }\n+        setUp(MappedSuperclassBase.class, MappedSuperclassL2.class,\n+            EntityL3.class);\n     }\n \n     public void testPersist() {"},{"sha":"66086a1048f44d7d1c3cea29e4fcd491d9bfcd9c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedMappedSuperclassIdValue.java","status":"modified","additions":4,"deletions":32,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedMappedSuperclassIdValue.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedMappedSuperclassIdValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedMappedSuperclassIdValue.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -15,14 +15,10 @@\n  */\n package org.apache.openjpa.persistence.inheritance;\n \n-import java.util.HashMap;\n-import java.util.Map;\n import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n-import javax.persistence.Persistence;\n \n-import junit.framework.TestCase;\n import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n /**\n  * Test that sibling classes with a shared id value declared in their \n@@ -31,18 +27,11 @@\n  * @author Abe White\n  */\n public class TestSharedMappedSuperclassIdValue\n-    extends TestCase {\n-\n-    private EntityManagerFactory emf;\n+    extends SingleEMFTestCase {\n \n     public void setUp() {\n-        String types = MappedSuperclassBase.class.getName() + \";\"\n-            + MappedSuperclassL2.class.getName() + \";\"\n-            + EntityL3.class.getName() + \";\"\n-            + EntityL3Sibling.class.getName();\n-        Map props = new HashMap(System.getProperties());\n-        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" + types + \")\");\n-        emf = Persistence.createEntityManagerFactory(\"test\", props);\n+        setUp(MappedSuperclassBase.class, MappedSuperclassL2.class,\n+            EntityL3.class, EntityL3Sibling.class);\n \n         EntityL3 ent = new EntityL3();\n         ent.setId(1);\n@@ -59,22 +48,6 @@ public void setUp() {\n         em.persist(sib);\n         em.getTransaction().commit();\n         em.close();\n-\n-    }\n-\n-    public void tearDown() {\n-        if (emf == null)\n-            return;\n-        try {\n-            EntityManager em = emf.createEntityManager();\n-            em.getTransaction().begin();\n-            em.createQuery(\"delete from EntityL3\").executeUpdate();\n-            em.createQuery(\"delete from EntityL3Sibling\").executeUpdate();\n-            em.getTransaction().commit();\n-            em.close();\n-            emf.close();\n-        } catch (Exception e) {\n-        }\n     }\n \n     public void testFind() {\n@@ -108,7 +81,6 @@ public void testGetReference() {\n         em.close();\n     }\n \n-\n     public static void main(String[] args) {\n         TestRunner.run(TestSharedMappedSuperclassIdValue.class);\n     }"},{"sha":"b176fba68cf61a94aaf52411d3304cb8251dab2a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/CompanyModelTest.java","status":"modified","additions":8,"deletions":16,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/CompanyModelTest.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/CompanyModelTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/CompanyModelTest.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -28,12 +28,13 @@\n  *  \n  * @author  Marc Prud'hommeaux\n  */\n-public abstract class CompanyModelTest extends SingleEMTest {\n-    private static Map<Class,Class> factoryClasses;\n+public abstract class CompanyModelTest \n+    extends SingleEMTestCase {\n \n-    private final Map<Class,Class> impls;\n+    private static Map<Class,Class> factoryClasses;\n+    private Map<Class,Class> impls;\n \n-    public CompanyModelTest() {\n+    public void setUp() {\n         // make a map of the implementations based on the class names in\n         // the current package of the test subclass\n         impls = new HashMap<Class,Class>();\n@@ -48,7 +49,8 @@ public CompanyModelTest() {\n         impls.put(IPartTimeEmployee.class, localClass(\"PartTimeEmployee\"));\n         impls.put(IProduct.class, localClass(\"Product\"));\n \n-        classes = (Class[]) impls.values().toArray(new Class[impls.size()]);\n+        setUp(impls.values().toArray(new Class[impls.size()]));\n+        checkModel();\n     }\n \n     private Class localClass(String name) {\n@@ -60,16 +62,6 @@ private Class localClass(String name) {\n         }\n     }\n \n-    public void setUp() throws Exception {\n-        super.setUp();\n-        try {\n-            checkModel();\n-        } catch (Exception e) {\n-            closeEMF();\n-            throw e;\n-        }\n-    }\n-\n     /** \n      * Runs through basic queries against all of the properties of all\n      * of the known persistent classes. We're just checking here to\n@@ -174,7 +166,7 @@ void checkModel() {\n             verifyModel();\n         } catch (AssertionFailedError e) {\n             // clear all existing instances\n-            delete(impls.values().toArray(new Class[0]));\n+            clear(emf, impls.values().toArray(new Class[impls.size()]));\n \n             // since the factory method needs to be static, we need to store\n             // the classes statically"},{"sha":"d5eefab57b9660ab9866f906c4773c7009dab8e6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestAbstractSchemaName.java","status":"modified","additions":3,"deletions":27,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestAbstractSchemaName.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestAbstractSchemaName.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestAbstractSchemaName.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -15,32 +15,23 @@\n  */\n package org.apache.openjpa.persistence.query;\n \n-import java.util.HashMap;\n-import java.util.Map;\n import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n-import javax.persistence.Persistence;\n import javax.persistence.Query;\n \n-import junit.framework.TestCase;\n import junit.textui.TestRunner;\n import org.apache.openjpa.persistence.simple.NamedEntity;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n /**\n  * Test that we can query by an entity's abstract schema name.\n  *\n  * @author Abe White\n  */\n public class TestAbstractSchemaName\n-    extends TestCase {\n-\n-    private EntityManagerFactory emf;\n+    extends SingleEMFTestCase {\n \n     public void setUp() {\n-        Map props = new HashMap(System.getProperties());\n-        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" \n-            + NamedEntity.class.getName() + \")\");\n-        emf = Persistence.createEntityManagerFactory(\"test\", props);\n+        setUp(NamedEntity.class);\n \n         NamedEntity e = new NamedEntity();\n         e.setName(\"e\"); \n@@ -52,21 +43,6 @@ public void setUp() {\n         em.close();\n     }\n \n-    public void tearDown() {\n-        if (emf == null)\n-            return;\n-        try {\n-            EntityManager em = emf.createEntityManager();\n-            em.getTransaction().begin();\n-            em.createQuery(\"delete from named\").executeUpdate();\n-            em.getTransaction().commit();\n-            em.close();\n-            emf.close();\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n     public void testQuery() {\n         EntityManager em = emf.createEntityManager();\n         Query q = em.createQuery(\"select e from named e\");"},{"sha":"cd4eb7f6e569e893fc80e08f8126d7b6e9c4d384","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestInMemoryQueryMatchEscapes.java","status":"modified","additions":3,"deletions":18,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestInMemoryQueryMatchEscapes.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestInMemoryQueryMatchEscapes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestInMemoryQueryMatchEscapes.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -15,33 +15,18 @@\n  */\r\n package org.apache.openjpa.persistence.query;\r\n \r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-\r\n import javax.persistence.FlushModeType;\r\n import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import javax.persistence.Persistence;\r\n \r\n import org.apache.openjpa.persistence.OpenJPAQuery;\r\n import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n-\r\n-import junit.framework.TestCase;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n \r\n public class TestInMemoryQueryMatchEscapes\r\n-    extends TestCase {\r\n-\r\n-    private EntityManagerFactory emf;\r\n+    extends SingleEMFTestCase {\r\n \r\n     public void setUp() {\r\n-        Map options = new HashMap(System.getProperties());\r\n-\r\n-        // ensure that OpenJPA knows about our type, so that \r\n-        // auto-schema-creation works\r\n-        options.put(\"openjpa.MetaDataFactory\",\r\n-            \"jpa(Types=\" + AllFieldTypes.class.getName() + \")\");\r\n-\r\n-        emf = Persistence.createEntityManagerFactory(\"test\", options);\r\n+        setUp(AllFieldTypes.class);\r\n     }\r\n     \r\n     public void testDatabaseEscape() {\r"},{"sha":"296c2ce9b88e0df732c7884cdc00fe7ef2a935ee","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryExcludingSubclasses.java","status":"modified","additions":3,"deletions":29,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryExcludingSubclasses.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryExcludingSubclasses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryExcludingSubclasses.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -15,34 +15,24 @@\n  */\n package org.apache.openjpa.persistence.query;\n \n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n-import javax.persistence.Persistence;\n import javax.persistence.Query;\n \n-import junit.framework.TestCase;\n import junit.textui.TestRunner;\n import org.apache.openjpa.persistence.OpenJPAQuery;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n /**\n  * Test that we can exclude subclass instances from query results.\n  *\n  * @author Abe White\n  */\n public class TestQueryExcludingSubclasses\n-    extends TestCase {\n-\n-    private EntityManagerFactory emf;\n+    extends SingleEMFTestCase {\n \n     public void setUp() {\n-        Map props = new HashMap(System.getProperties());\n-        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" \n-            + ManyOneEntity.class.getName() + \";\"\n-            + ManyOneEntitySub.class.getName() + \")\");\n-        emf = Persistence.createEntityManagerFactory(\"test\", props);\n+        setUp(ManyOneEntity.class, ManyOneEntitySub.class);\n \n         ManyOneEntity e1 = new ManyOneEntity();\n         e1.setName(\"e1\"); \n@@ -69,21 +59,6 @@ public void setUp() {\n         em.close();\n     }\n \n-    public void tearDown() {\n-        if (emf == null)\n-            return;\n-        try {\n-            EntityManager em = emf.createEntityManager();\n-            em.getTransaction().begin();\n-            em.createQuery(\"delete from ManyOneEntity\").executeUpdate();\n-            em.getTransaction().commit();\n-            em.close();\n-            emf.close();\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n     public void testQuery() {\n         EntityManager em = emf.createEntityManager();\n         Query q = em.createQuery(\"select e from ManyOneEntity e \"\n@@ -115,7 +90,6 @@ public void testQueryExcludingSubclasses() {\n         em.close();\n     }\n \n-\n     public static void main(String[] args) {\n         TestRunner.run(TestQueryExcludingSubclasses.class);\n     }"},{"sha":"6c44592cdf913586f0f5b3b2d83d0111e2a204bc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryIdOfRelationDoesNotJoin.java","status":"modified","additions":3,"deletions":27,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryIdOfRelationDoesNotJoin.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryIdOfRelationDoesNotJoin.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryIdOfRelationDoesNotJoin.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -15,16 +15,12 @@\n  */\n package org.apache.openjpa.persistence.query;\n \n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n-import javax.persistence.Persistence;\n import javax.persistence.Query;\n \n-import junit.framework.TestCase;\n import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n /**\n  * Test that querying the id of a related many-one (or one-one) does not create\n@@ -33,17 +29,12 @@\n  * @author Abe White\n  */\n public class TestQueryIdOfRelationDoesNotJoin\n-    extends TestCase {\n+    extends SingleEMFTestCase {\n \n-    private EntityManagerFactory emf;\n     private long e3Id;\n \n     public void setUp() {\n-        Map props = new HashMap(System.getProperties());\n-        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\"\n-                + ManyOneEntity.class.getName() + \";\"\n-                + ManyOneEntitySub.class.getName() + \")\");\n-        emf = Persistence.createEntityManagerFactory(\"test\", props);\n+        setUp(ManyOneEntity.class, ManyOneEntitySub.class);\n \n         ManyOneEntity e1 = new ManyOneEntity();\n         e1.setName(\"e1\");\n@@ -67,21 +58,6 @@ public void setUp() {\n         em.close();\n     }\n \n-    public void tearDown() {\n-        if (emf == null)\n-            return;\n-        try {\n-            EntityManager em = emf.createEntityManager();\n-            em.getTransaction().begin();\n-            em.createQuery(\"delete from ManyOneEntity\").executeUpdate();\n-            em.getTransaction().commit();\n-            em.close();\n-            emf.close();\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n     public void testQuery() {\n         EntityManager em = emf.createEntityManager();\n         Query q = em.createQuery(\"select e from ManyOneEntity e \""},{"sha":"b411ea09cfe06438624ca5963d527cf17a30b8bd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestResultSetMapping.java","status":"modified","additions":5,"deletions":29,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestResultSetMapping.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestResultSetMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestResultSetMapping.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -15,28 +15,19 @@\n  */\n package org.apache.openjpa.persistence.query;\n \n-import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.Map;\n-\n import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n-import javax.persistence.Persistence;\n import javax.persistence.Query;\n \n-import junit.framework.TestCase;\n import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n-public class TestResultSetMapping extends TestCase {\n-\n-    private EntityManagerFactory emf;\n+public class TestResultSetMapping \n+    extends SingleEMFTestCase {\n \n     public void setUp() {\n-        Map props = new HashMap();\n-        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" + \n-            org.apache.openjpa.persistence.query.SimpleEntity.class.getName() + \")\");\n-        emf = Persistence.createEntityManagerFactory(\"test\", props);\n+        setUp(SimpleEntity.class);\n \n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n@@ -45,21 +36,6 @@ public void setUp() {\n         em.close();\n     }\n \n-    public void tearDown() {\n-        if (emf == null)\n-            return;\n-        try {\n-            EntityManager em = emf.createEntityManager();\n-            em.getTransaction().begin();\n-            em.createQuery(\"delete from simple\").executeUpdate();\n-            em.getTransaction().commit();\n-            em.close();\n-            emf.close();\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n     public void testSimpleQuery() {\n         EntityManager em = emf.createEntityManager();\n         Query q = em.createNamedQuery(\"findSimpleEntitites\");\n@@ -74,4 +50,4 @@ public void testSimpleQuery() {\n     public static void main(String[] args) {\n         TestRunner.run(TestResultSetMapping.class);\n     }\n-}\n\\ No newline at end of file\n+}"},{"sha":"f5e1bd12ecbddecd36178df1477dbcbdceac8569","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestCascadingOneManyWithForeignKey.java","status":"modified","additions":3,"deletions":30,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestCascadingOneManyWithForeignKey.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestCascadingOneManyWithForeignKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestCascadingOneManyWithForeignKey.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -15,51 +15,24 @@\n  */\n package org.apache.openjpa.persistence.relations;\n \n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n import javax.persistence.EntityManager;\n-import javax.persistence.Persistence;\n \n-import junit.framework.TestCase;\n import junit.textui.TestRunner;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n /**\n  * Tests a cascading one-many backed by a foreign key.\n  *\n  * @author Abe White\n  */\n public class TestCascadingOneManyWithForeignKey\n-    extends TestCase {\n-\n-    private OpenJPAEntityManagerFactory emf;\n+    extends SingleEMFTestCase {\n \n     public void setUp() {\n-        String types = CascadingOneManyParent.class.getName() + \";\"\n-            + CascadingOneManyChild.class.getName(); \n-        Map props = new HashMap(System.getProperties());\n-        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" + types + \")\");\n-        emf = (OpenJPAEntityManagerFactory) Persistence.\n-            createEntityManagerFactory(\"test\", props);\n-    }\n-\n-    public void tearDown() {\n-        if (emf == null)\n-            return;\n-        try {\n-            EntityManager em = emf.createEntityManager();\n-            em.getTransaction().begin();\n-            em.createQuery(\"delete from CascadingOneManyChild\").executeUpdate();\n-            em.createQuery(\"delete from CascadingOneManyParent\").\n-                executeUpdate();\n-            em.getTransaction().commit();\n-            em.close();\n-            emf.close();\n-        } catch (Exception e) {\n-        }\n+        setUp(CascadingOneManyParent.class, CascadingOneManyChild.class);\n     }\n \n     public void testPersist() {"},{"sha":"ded0e4c1c8cfbfbd96699a7df97bb8ad665df39c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestIdOrderedOneMany.java","status":"modified","additions":3,"deletions":29,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestIdOrderedOneMany.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestIdOrderedOneMany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestIdOrderedOneMany.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -15,33 +15,23 @@\n  */\n package org.apache.openjpa.persistence.relations;\n \n-import java.util.HashMap;\n-import java.util.Map;\n import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n-import javax.persistence.Persistence;\n \n-import junit.framework.TestCase;\n import junit.textui.TestRunner;\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n /**\n  * Test ordering a one-many field on the primary key of the related entity.\n  *\n  * @author Abe White\n  */\n public class TestIdOrderedOneMany\n-    extends TestCase {\n+    extends SingleEMFTestCase {\n \n-    private EntityManagerFactory emf;\n     private long id;\n \n     public void setUp() {\n-        Map props = new HashMap(System.getProperties());\n-        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" \n-            + IdOrderedOneManyParent.class.getName() + \";\"\n-            + IdOrderedOneManyChild.class.getName() + \")\");\n-        emf = Persistence.createEntityManagerFactory(\"test\", props);\n+        setUp(IdOrderedOneManyParent.class, IdOrderedOneManyChild.class);\n \n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n@@ -71,22 +61,6 @@ public void setUp() {\n         em.close();\n     }\n \n-    public void tearDown() {\n-        if (emf == null)\n-            return;\n-        try {\n-            EntityManager em = emf.createEntityManager();\n-            em.getTransaction().begin();\n-            em.createQuery(\"delete from IdOrderedOneManyChild\").executeUpdate();\n-            em.createQuery(\"delete from IdOrderedOneManyParent\").\n-                executeUpdate();\n-            em.getTransaction().commit();\n-            em.close();\n-            emf.close();\n-        } catch (Exception e) {\n-        }\n-    }\n-\n     public void testExplicitOrdering() {\n         EntityManager em = emf.createEntityManager();\n         IdOrderedOneManyParent parent = em.find(IdOrderedOneManyParent.class, "},{"sha":"9340ee5337d9983382ec6312d356bd1d4a0095e2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyOneAsId.java","status":"modified","additions":5,"deletions":35,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyOneAsId.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyOneAsId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyOneAsId.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -15,16 +15,12 @@\n  */\n package org.apache.openjpa.persistence.relations;\n \n-import java.util.HashMap;\n-import java.util.Map;\n import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n-import javax.persistence.Persistence;\n import javax.persistence.Query;\n \n-import junit.framework.TestCase;\n import junit.textui.TestRunner;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n /**\n  * Perform basic operations on an entity with a many-one relation as its id\n@@ -33,22 +29,16 @@\n  * @author Abe White\n  */\n public class TestManyOneAsId\n-    extends TestCase {\n+    extends SingleEMFTestCase {\n \n-    private EntityManagerFactory emf;\n     private long id;\n     private long dsid;\n     private long cid;\n \n     public void setUp() {\n-        Map props = new HashMap(System.getProperties());\n-        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" \n-            + BasicEntity.class.getName() + \";\"\n-            + DataStoreBasicEntity.class.getName() + \";\"\n-            + ManyOneIdOwner.class.getName() + \";\"\n-            + DataStoreManyOneIdOwner.class.getName() + \";\"\n-            + ManyOneCompoundIdOwner.class.getName() + \")\");\n-        emf = Persistence.createEntityManagerFactory(\"test\", props);\n+        setUp(BasicEntity.class, DataStoreBasicEntity.class,\n+            ManyOneIdOwner.class, DataStoreManyOneIdOwner.class,\n+            ManyOneCompoundIdOwner.class);\n \n         BasicEntity id1 = new BasicEntity();\n         id1.setName(\"id1\");\n@@ -108,26 +98,6 @@ public void setUp() {\n         em.close();\n     }\n \n-    public void tearDown() {\n-        if (emf == null)\n-            return;\n-        try {\n-            EntityManager em = emf.createEntityManager();\n-            em.getTransaction().begin();\n-            em.createQuery(\"delete from ManyOneIdOwner\").executeUpdate();\n-            em.createQuery(\"delete from DataStoreManyOneIdOwner\").\n-                executeUpdate();\n-            em.createQuery(\"delete from ManyOneCompoundIdOwner\").\n-                executeUpdate();\n-            em.createQuery(\"delete from BasicEntity\").executeUpdate();\n-            em.createQuery(\"delete from DataStoreBasicEntity\").executeUpdate();\n-            em.getTransaction().commit();\n-            em.close();\n-            emf.close();\n-        } catch (Exception e) {\n-        }\n-    }\n-\n     private void assertRelations(EntityManager em, ManyOneIdOwner parent) {\n         assertEquals(\"parent\", parent.getName());\n         BasicEntity id1 = parent.getId();"},{"sha":"4bbdb26540e02012a67aeac5e20d38ceb9a0d687","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestMultipleSameTypedEmbeddedWithEagerRelations.java","status":"modified","additions":3,"deletions":29,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestMultipleSameTypedEmbeddedWithEagerRelations.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestMultipleSameTypedEmbeddedWithEagerRelations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestMultipleSameTypedEmbeddedWithEagerRelations.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -15,16 +15,12 @@\n  */\n package org.apache.openjpa.persistence.relations;\n \n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n-import javax.persistence.Persistence;\n import javax.persistence.Query;\n \n-import junit.framework.TestCase;\n import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n /**\n  * Test that querying and retrieving entities with multiple same-typed embedded\n@@ -33,16 +29,10 @@\n  * @author Abe White\n  */\n public class TestMultipleSameTypedEmbeddedWithEagerRelations\n-    extends TestCase {\n-\n-    private EntityManagerFactory emf;\n+    extends SingleEMFTestCase {\n \n     public void setUp() {\n-        Map props = new HashMap(System.getProperties());\n-        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" \n-            + EmbeddableWithRelation.class.getName() + \";\"\n-            + MultipleSameTypedEmbedded.class.getName() + \")\");\n-        emf = Persistence.createEntityManagerFactory(\"test\", props);\n+        setUp(EmbeddableWithRelation.class, MultipleSameTypedEmbedded.class);\n \n         EmbeddableWithRelation embed1 = new EmbeddableWithRelation();\n         embed1.setName(\"embed1\");\n@@ -69,22 +59,6 @@ public void setUp() {\n         em.close();\n     }\n \n-    public void tearDown() {\n-        if (emf == null)\n-            return;\n-        try {\n-            EntityManager em = emf.createEntityManager();\n-            em.getTransaction().begin();\n-            em.createQuery(\"delete from MultipleSameTypedEmbedded\").\n-                executeUpdate();\n-            em.getTransaction().commit();\n-            em.close();\n-            emf.close();\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n     public void testQuery() {\n         EntityManager em = emf.createEntityManager();\n         Query q = em.createQuery(\"select m from MultipleSameTypedEmbedded m \""},{"sha":"5ae4187168d336039ed8f5afd350280543b2eed0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestTargetedIFaceRelations.java","status":"modified","additions":3,"deletions":27,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestTargetedIFaceRelations.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestTargetedIFaceRelations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestTargetedIFaceRelations.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -15,14 +15,10 @@\n  */\n package org.apache.openjpa.persistence.relations;\n \n-import java.util.HashMap;\n-import java.util.Map;\n import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n-import javax.persistence.Persistence;\n \n-import junit.framework.TestCase;\n import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n /**\n  * Perform basic operations on an entity with interface relations that use\n@@ -31,30 +27,10 @@\n  * @author Abe White\n  */\n public class TestTargetedIFaceRelations\n-    extends TestCase {\n-\n-    private EntityManagerFactory emf;\n+    extends SingleEMFTestCase {\n \n     public void setUp() {\n-        Map props = new HashMap(System.getProperties());\n-        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" \n-            + TargetedIFaceRelationParent.class.getName() + \")\");\n-        emf = Persistence.createEntityManagerFactory(\"test\", props);\n-    }\n-\n-    public void tearDown() {\n-        if (emf == null)\n-            return;\n-        try {\n-            EntityManager em = emf.createEntityManager();\n-            em.getTransaction().begin();\n-            em.createQuery(\"delete from TargetedIFaceRelationParent\").\n-                executeUpdate();\n-            em.getTransaction().commit();\n-            em.close();\n-            emf.close();\n-        } catch (Exception e) {\n-        }\n+        setUp(TargetedIFaceRelationParent.class);\n     }\n \n     public void testPersist() {"},{"sha":"269fef147fc37d3a42c6c4ecf5afab4b8e737490","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestCaseInsensitiveKeywordsInJPQL.java","status":"modified","additions":20,"deletions":5,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestCaseInsensitiveKeywordsInJPQL.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestCaseInsensitiveKeywordsInJPQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestCaseInsensitiveKeywordsInJPQL.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -1,15 +1,30 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package org.apache.openjpa.persistence.simple;\n \n import javax.persistence.Query;\n import javax.persistence.EntityManager;\n \n-import org.apache.openjpa.persistence.test.PersistenceTestCase;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n public class TestCaseInsensitiveKeywordsInJPQL\n-    extends PersistenceTestCase {\n+    extends SingleEMFTestCase {\n \n-    public Class[] getEntityTypes() {\n-        return new Class[] { AllFieldTypes.class };\n+    public void setUp() {\n+        setUp(AllFieldTypes.class);\n     }\n \n     public void testCaseInsensitiveBooleans() {\n@@ -38,4 +53,4 @@ public void testCaseInsensitiveBooleans() {\n         \n         em.getTransaction().rollback();\n     }\n-}\n\\ No newline at end of file\n+}"},{"sha":"1ff91e6f98046eb131db931c13b6039bd7b81f0c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerClear.java","status":"modified","additions":29,"deletions":58,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerClear.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerClear.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerClear.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -15,86 +15,57 @@\n  */\n package org.apache.openjpa.persistence.simple;\n \n-import java.util.HashMap;\n-import java.util.Map;\n import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n-import javax.persistence.Persistence;\n \n-import junit.framework.TestCase;\n import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n \n /**\n  * Test case to ensure that the proper JPA clear semantics are processed.\n  *\n  * @author Kevin Sutter\n  */\n public class TestEntityManagerClear\n-    extends TestCase {\n-\n-    private EntityManagerFactory emf;\n-    private EntityManager em;\n+    extends SingleEMTestCase {\n \n     public void setUp() {\n-        Map props = new HashMap(System.getProperties());\n-        props.put(\"openjpa.MetaDataFactory\",\n-            \"jpa(Types=\" + AllFieldTypes.class.getName() + \")\");\n-        emf = Persistence.createEntityManagerFactory(\"test\", props);\n+        setUp(AllFieldTypes.class);\n     }\n \n-    public void tearDown() {\n-        if (emf == null)\n-            return;\n-        try {\n-            EntityManager em = emf.createEntityManager();\n-            em.getTransaction().begin();\n-            em.createQuery(\"delete from AllFieldTypes\").executeUpdate();\n-            em.getTransaction().commit();\n-            em.close();\n-            emf.close();\n-        } catch (Exception e) {\n-        }\n-    }\n     public void testClear() {\n-        try {\n-            // Create EntityManager and Start a transaction (1)\n-            em = emf.createEntityManager();\n-            em.getTransaction().begin();\n+        // Create EntityManager and Start a transaction (1)\n+        begin();\n \n-            // Insert a new object and flush\n-            AllFieldTypes testObject1 = new AllFieldTypes();\n-            testObject1.setStringField(\"my test object1\");\n-            em.persist(testObject1);\n-            em.flush();\n+        // Insert a new object and flush\n+        AllFieldTypes testObject1 = new AllFieldTypes();\n+        testObject1.setStringField(\"my test object1\");\n+        persist(testObject1);\n+        em.flush();\n \n-            // Clear the PC for new object 2\n-            AllFieldTypes testObject2 = new AllFieldTypes();\n-            testObject1.setStringField(\"my test object2\");\n-            em.persist(testObject2);\n-            em.clear();\n+        // Clear the PC for new object 2\n+        AllFieldTypes testObject2 = new AllFieldTypes();\n+        testObject1.setStringField(\"my test object2\");\n+        persist(testObject2);\n+        em.clear();\n \n-            // Commit the transaction (only object 1 should be in database)\n-            em.getTransaction().commit();\n+        // Commit the transaction (only object 1 should be in database)\n+        commit();\n \n-            // Start a new transaction\n-            em.getTransaction().begin();\n+        // Start a new transaction\n+        begin();\n \n-            // Attempt retrieve of Object1 from previous PC (should exist)\n-            assertEquals(1, em.createQuery\n-                    (\"select x from AllFieldTypes x where x.stringField = 'my test object1'\").\n-                    getResultList().size());\n+        // Attempt retrieve of Object1 from previous PC (should exist)\n+        assertEquals(1, query(\"select x from AllFieldTypes x \"\n+            + \"where x.stringField = 'my test object1'\").\n+                getResultList().size());\n \n-            // Attempt retrieve of Object2 from previous PC (should not exist)\n-            assertEquals(0, em.createQuery\n-                    (\"select x from AllFieldTypes x where x.stringField = 'my test object2'\").\n-                    getResultList().size());\n+        // Attempt retrieve of Object2 from previous PC (should not exist)\n+        assertEquals(0, query(\"select x from AllFieldTypes x \"\n+            + \"where x.stringField = 'my test object2'\").\n+                getResultList().size());\n \n-            // Rollback the transaction and close everything\n-            em.getTransaction().rollback();\n-            em.close();\n-        } catch (Exception ex) {\n-            fail(\"Unexpected Exception ex = \" + ex);\n-        }\n+        // Rollback the transaction and close everything\n+        rollback();\n     }\n \n     public static void main(String[] args) {"},{"sha":"898f4cc711fa70de3b0f5708075019335144e78b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMethodsThrowAfterClose.java","status":"modified","additions":4,"deletions":27,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMethodsThrowAfterClose.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMethodsThrowAfterClose.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMethodsThrowAfterClose.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -15,16 +15,12 @@\n  */\n package org.apache.openjpa.persistence.simple;\n \n-import java.util.HashMap;\n-import java.util.Map;\n import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n import javax.persistence.FlushModeType;\n import javax.persistence.LockModeType;\n-import javax.persistence.Persistence;\n \n-import junit.framework.TestCase;\n import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n \n /**\n  * Negative test case to verify that EntityManager throws required exceptions\n@@ -33,34 +29,15 @@\n  * @author Craig Russell\n  */\n public class TestEntityManagerMethodsThrowAfterClose\n-    extends TestCase {\n+    extends SingleEMTestCase {\n \n-    private EntityManagerFactory emf;\n-    private EntityManager em;\n     private AllFieldTypes aft = new AllFieldTypes();\n \n     public void setUp() {\n-        Map props = new HashMap(System.getProperties());\n-        props.put(\"openjpa.MetaDataFactory\",\n-            \"jpa(Types=\" + AllFieldTypes.class.getName() + \")\");\n-        emf = Persistence.createEntityManagerFactory(\"test\", props);\n-        em = emf.createEntityManager();\n-        em.close();\n+        setUp(AllFieldTypes.class);\n+        close();\n     }\n \n-    public void tearDown() {\n-        if (emf == null)\n-            return;\n-        try {\n-            EntityManager em = emf.createEntityManager();\n-            em.getTransaction().begin();\n-            em.createQuery(\"delete from AllFieldTypes\").executeUpdate();\n-            em.getTransaction().commit();\n-            em.close();\n-            emf.close();\n-        } catch (Exception e) {\n-        }\n-    }\n     public void testPersistAfterClose() {\n         try {\n             em.persist(aft);"},{"sha":"37c39bf4c409a7f68b97408cd56e1d941c9e6acd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java","status":"modified","additions":3,"deletions":26,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -15,46 +15,23 @@\n  */\r\n package org.apache.openjpa.persistence.simple;\r\n \r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n import javax.persistence.EntityTransaction;\r\n-import javax.persistence.Persistence;\r\n \r\n-import junit.framework.TestCase;\r\n import junit.textui.TestRunner;\r\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n \r\n /**\r\n  * Simple test case to get an EntityManager and perform some basic operations.\r\n  *\r\n  * @author Marc Prud'hommeaux\r\n  */\r\n public class TestPersistence\r\n-    extends TestCase {\r\n-\r\n-    private EntityManagerFactory emf;\r\n+    extends SingleEMFTestCase {\r\n \r\n     public void setUp() {\r\n-        Map props = new HashMap(System.getProperties());\r\n-        props.put(\"openjpa.MetaDataFactory\",\r\n-            \"jpa(Types=\" + AllFieldTypes.class.getName() + \")\");\r\n-        emf = Persistence.createEntityManagerFactory(\"test\", props);\r\n-    }\r\n-\r\n-    public void tearDown() {\r\n-        if (emf == null)\r\n-            return;\r\n-        try {\r\n-            EntityManager em = emf.createEntityManager();\r\n-            em.getTransaction().begin();\r\n-            em.createQuery(\"delete from AllFieldTypes\").executeUpdate();\r\n-            em.getTransaction().commit();\r\n-            em.close();\r\n-            emf.close();\r\n-        } catch (Exception e) {\r\n-        }\r\n+        setUp(AllFieldTypes.class);\r\n     }\r\n \r\n     public void testCreateEntityManager() {\r"},{"sha":"e20675a49b7a624be11da0313ad6ddea2a89bb29","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestTableNamesDefaultToEntityNames.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestTableNamesDefaultToEntityNames.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestTableNamesDefaultToEntityNames.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestTableNamesDefaultToEntityNames.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -1,20 +1,19 @@\n package org.apache.openjpa.persistence.simple;\n \n-import org.apache.openjpa.persistence.OpenJPAPersistence;\n-import org.apache.openjpa.persistence.test.PersistenceTestCase;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n public class TestTableNamesDefaultToEntityNames\n-    extends PersistenceTestCase {\n+    extends SingleEMFTestCase {\n \n-    @Override\n-    protected Class[] getEntityTypes() {\n-        return new Class[] { NamedEntity.class };\n+    public void setUp() {\n+        setUp(NamedEntity.class);\n     }\n \n     public void testEntityNames() {\n         ClassMapping cm = (ClassMapping) OpenJPAPersistence.getMetaData(\n-            getEntityManagerFactory(), NamedEntity.class);\n+            emf, NamedEntity.class);\n         assertEquals(\"named\", cm.getTable().getName());\n     }\n }"},{"sha":"d1a8a17973e6672c2a9e0828cdf3f87c5213b8db","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","status":"modified","additions":128,"deletions":17,"changes":145,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -1,39 +1,150 @@\n package org.apache.openjpa.persistence.test;\n \n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n import java.util.Map;\n import java.util.HashMap;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n import javax.persistence.Persistence;\n \n import junit.framework.TestCase;\n+import org.apache.openjpa.kernel.AbstractBrokerFactory;\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n \n+/**\n+ * Base test class providing persistence utilities.\n+ */\n public abstract class PersistenceTestCase\n     extends TestCase {\n \n-    protected OpenJPAEntityManagerFactory emf;\n+    /**\n+     * Marker object you an pass to {@link #setUp} to indicate that the\n+     * database tables should be cleared.\n+     */\n+    protected static final Object CLEAR_TABLES = new Object();\n \n-    protected Class[] getEntityTypes() {\n-        return new Class[0];\n-    }\n+    /**\n+     * Create an entity manager factory.\n+     *\n+     * @param props list of persistent types used in testing and/or \n+     * configuration values in the form key,value,key,value...\n+     */\n+    protected OpenJPAEntityManagerFactory createEMF(Object... props) {\n+        Map map = new HashMap(System.getProperties());\n+        List<Class> types = new ArrayList<Class>();\n+        boolean prop = false;\n+        for (int i = 0; i < props.length; i++) {\n+            if (prop) {\n+                map.put(props[i - 1], props[i]);\n+                prop = false;\n+            } else if (props[i] == CLEAR_TABLES) {\n+                map.put(\"openjpa.jdbc.SynchronizeMappings\",\n+                    \"buildSchema(ForeignKeys=true,\" \n+                    + \"SchemaAction='add,deleteTableContents')\");\n+            } else if (props[i] instanceof Class)\n+                types.add((Class) props[i]);\n+            else\n+                prop = true;\n+        }\n \n-    public void setUp() {\n-        Map props = new HashMap(System.getProperties());\n-        Class[] types = getEntityTypes();\n-        if (types != null && types.length > 0) {\n+        if (!types.isEmpty()) {\n             StringBuffer buf = new StringBuffer();\n-            for (int i = 0; i < types.length; i++) {\n-                buf.append(types[i].getName());\n-                if (i != types.length - 1)\n-                    buf.append(\",\");\n+            for (Class c : types) {\n+                if (buf.length() > 0)\n+                    buf.append(\";\");\n+                buf.append(c.getName());\n             }\n-            props.put(\"openjpa.MetaDataFactory\",\n+            map.put(\"openjpa.MetaDataFactory\",\n                 \"jpa(Types=\" + buf.toString() + \")\");\n         }\n-        emf = (OpenJPAEntityManagerFactory)\n-            Persistence.createEntityManagerFactory(\"test\", props);\n+\n+        return (OpenJPAEntityManagerFactory) Persistence.\n+            createEntityManagerFactory(\"test\", map);\n+    }\n+\n+    /**\n+     * Safely close the given factory.\n+     */\n+    protected boolean closeEMF(EntityManagerFactory emf) {\n+        if (emf == null)\n+            return false;\n+        if (!emf.isOpen())\n+            return false;\n+\n+        for (Iterator iter = ((AbstractBrokerFactory) OpenJPAPersistence\n+            .toBrokerFactory(emf)).getOpenBrokers().iterator();\n+            iter.hasNext(); ) {\n+            Broker b = (Broker) iter.next();\n+            if (b != null && !b.isClosed()) {\n+                EntityManager em = OpenJPAPersistence.toEntityManager(b);\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+\n+        emf.close();\n+        return !emf.isOpen();\n+    }\n+\n+    /**\n+     * Delete all instances of the given types using bulk delete queries.\n+     */\n+    protected void clear(EntityManagerFactory emf, Class... types) {\n+        if (emf == null || types.length == 0)\n+            return;\n+\n+        List<ClassMetaData> metas = new ArrayList<ClassMetaData>(types.length);\n+        for (Class c : types) {\n+            ClassMetaData meta = OpenJPAPersistence.getMetaData(emf, c);\n+            if (meta != null)\n+                metas.add(meta);\n+        }\n+        clear(emf, metas.toArray(new ClassMetaData[metas.size()]));\n+    }\n+\n+    /**\n+     * Delete all instances of the persistent types registered with the given\n+     * factory using bulk delete queries.\n+     */\n+    protected void clear(EntityManagerFactory emf) {\n+        if (emf == null)\n+            return;\n+        clear(emf, ((OpenJPAEntityManagerFactory) emf).getConfiguration().\n+            getMetaDataRepositoryInstance().getMetaDatas());\n+    }\n+\n+    /**\n+     * Delete all instances of the given types using bulk delete queries.\n+     */\n+    private void clear(EntityManagerFactory emf, ClassMetaData... types) {\n+        if (emf == null || types.length == 0)\n+            return;\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        for (ClassMetaData meta : types) {\n+            if (!meta.isMapped() || meta.isEmbeddedOnly() \n+                || Modifier.isAbstract(meta.getDescribedType().getModifiers()))\n+                continue;\n+            em.createQuery(\"DELETE FROM \" + meta.getTypeAlias() + \" o\").\n+                executeUpdate();\n+        }\n+        em.getTransaction().commit();\n+        em.close();\n     }\n \n-    public OpenJPAEntityManagerFactory getEntityManagerFactory() {\n-        return emf;\n+    /**\n+     * Return the entity name for the given type.   \n+     */\n+    protected String entityName(EntityManagerFactory emf, Class c) {\n+        ClassMetaData meta = OpenJPAPersistence.getMetaData(emf, c);\n+        return (meta == null) ? null : meta.getTypeAlias();\n     }\n }"},{"sha":"6f52d5e2521989c2b1b66b4e5dd87998c1328e4d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -0,0 +1,72 @@\n+package org.apache.openjpa.persistence.test;\n+\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+import org.apache.openjpa.lib.jdbc.AbstractJDBCListener;\n+import org.apache.openjpa.lib.jdbc.JDBCEvent;\n+import org.apache.openjpa.lib.jdbc.JDBCListener;\n+\n+/**\n+ * Base class for tests that need to check generated SQL.\n+ *\n+ * @author Patrick Linskey\n+ */\n+public abstract class SQLListenerTestCase\n+    extends SingleEMFTestCase {\n+\n+    protected List<String> sql = new ArrayList<String>();\n+\n+    @Override\n+    public void setUp(Object... props) {\n+        Object[] copy = new Object[props.length + 2];\n+        System.arraycopy(props, 0, copy, 0, props.length);\n+        copy[copy.length - 2] = \"openjpa.jdbc.JDBCListeners\";\n+        copy[copy.length - 1] = new JDBCListener[] { new Listener() };\n+        super.setUp(copy); \n+    }\n+\n+    /**\n+     * Confirm that the specified SQL has been executed.\n+     *\n+     * @param sqlExp the SQL expression. E.g., \"SELECT FOO .*\"\n+     */\n+    public void assertSQL(String sqlExp) {\n+        for (String statement : sql) {\n+            if (statement.matches(sqlExp))\n+                return;\n+        }\n+\n+        fail(\"Expected regular expression <\" + sqlExp + \"> to have\"\n+            + \" existed in SQL statements: \" + sql);\n+    }\n+\n+    /**\n+     * Confirm that the specified SQL has not been executed.\n+     *\n+     * @param sqlExp the SQL expression. E.g., \"SELECT BADCOLUMN .*\"\n+     */\n+    public void assertNotSQL(String sqlExp) {\n+        boolean failed = false;\n+\n+        for (String statement : sql) {\n+            if (statement.matches(sqlExp))\n+                failed = true;\n+        }\n+\n+        if (failed)\n+            fail(\"Regular expression <\" + sqlExp + \">\"\n+                + \" should not have been executed in SQL statements: \" + sql);\n+    }\n+\n+    public class Listener\n+        extends AbstractJDBCListener {\n+\n+        @Override\n+        public void beforeExecuteStatement(JDBCEvent event) {\n+            if (event.getSQL() != null && sql != null)\n+                sql.add(event.getSQL());\n+\t\t}\n+\t}\n+}"},{"sha":"cc9101ff29f70c030d8f0b7a988a76ecbffe38b5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTest.java","status":"removed","additions":0,"deletions":105,"changes":105,"blob_url":"https://github.com/apache/openjpa/blob/3d929be1707797d4d7078e0776686ee783c11895/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTest.java","raw_url":"https://github.com/apache/openjpa/raw/3d929be1707797d4d7078e0776686ee783c11895/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTest.java?ref=3d929be1707797d4d7078e0776686ee783c11895","patch":"@@ -1,105 +0,0 @@\n-package org.apache.openjpa.persistence.test;\n-\n-import java.util.Map;\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import javax.persistence.EntityManagerFactory;\n-import javax.persistence.Persistence;\n-import javax.persistence.EntityManager;\n-\n-import junit.framework.TestCase;\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\n-import org.apache.openjpa.kernel.AbstractBrokerFactory;\n-import org.apache.openjpa.kernel.Broker;\n-\n-public abstract class SingleEMFTest extends TestCase {\n-\n-    protected EntityManagerFactory emf;\n-    protected Class[] classes;\n-\n-    public SingleEMFTest(Class... classes) {\n-        this.classes = classes;\n-    }\n-\n-    /**\n-     * Can be overridden to return a list of classes that will be used\n-     * for this test.\n-     */\n-    protected Class[] getClasses() {\n-        return classes;\n-    }\n-\n-    /**\n-     * Modify the properties that are used to create the EntityManagerFactory.\n-     * By default, this will set up the MetaDataFactory with the\n-     * persistent classes for this test case. This method can be overridden\n-     * to add more properties to the map.\n-     */\n-    protected void setEMFProps(Map props) {\n-        // if we have specified a list of persistent classes to examine,\n-        // then set it in the MetaDataFactory so that our automatic\n-        // schema generation will work.\n-        Class[] pclasses = getClasses();\n-        if (pclasses != null) {\n-            StringBuilder str = new StringBuilder();\n-            for (Class c : pclasses)\n-                str.append(str.length() > 0 ? \";\" : \"\").append(c.getName());\n-\n-            props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" + str + \")\");\n-        }\n-\n-        if (clearDatabaseInSetUp()) {\n-            props.put(\"openjpa.jdbc.SynchronizeMappings\",\n-                \"buildSchema(ForeignKeys=true,\" +\n-                    \"SchemaAction='add,deleteTableContents')\");\n-        }\n-    }\n-\n-    protected boolean clearDatabaseInSetUp() {\n-        return false;\n-    }\n-\n-    public EntityManagerFactory emf() {\n-        return emf;\n-    }\n-\n-    public boolean closeEMF() {\n-        if (emf == null)\n-            return false;\n-\n-        if (!emf.isOpen())\n-            return false;\n-\n-        for (Iterator iter = ((AbstractBrokerFactory) OpenJPAPersistence\n-            .toBrokerFactory(emf)).getOpenBrokers().iterator();\n-            iter.hasNext(); ) {\n-            Broker b = (Broker) iter.next();\n-            if (b != null && !b.isClosed()) {\n-                EntityManager em = OpenJPAPersistence.toEntityManager(b);\n-                if (em.getTransaction().isActive())\n-                    em.getTransaction().rollback();\n-                em.close();\n-            }\n-        }\n-\n-        emf.close();\n-        return !emf.isOpen();\n-    }\n-\n-    @Override\n-    public void setUp() throws Exception {\n-        super.setUp();\n-        Map props = new HashMap(System.getProperties());\n-        setEMFProps(props);\n-        emf = Persistence.createEntityManagerFactory(\"test\", props);\n-\n-        if (clearDatabaseInSetUp()) // get an EM to trigger schema manipulations\n-            emf.createEntityManager().close();\n-    }\n-\n-    @Override\n-    public void tearDown() throws Exception {\n-        closeEMF();\n-        super.tearDown();\n-    }\n-}\n\\ No newline at end of file"},{"sha":"af856a0c884d6dabbc3f1dcdfa65c8addf42d1d7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -0,0 +1,38 @@\n+package org.apache.openjpa.persistence.test;\n+\n+import java.util.Map;\n+import java.util.HashMap;\n+import javax.persistence.Persistence;\n+\n+import junit.framework.TestCase;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+\n+public abstract class SingleEMFTestCase\n+    extends PersistenceTestCase {\n+\n+    protected OpenJPAEntityManagerFactory emf;\n+\n+    /**\n+     * Initialize entity manager factory.\n+     *\n+     * @param props list of persistent types used in testing and/or \n+     * configuration values in the form key,value,key,value...\n+     */\n+    protected void setUp(Object... props) {\n+        emf = createEMF(props);\n+    }\n+\n+    /**\n+     * Closes the entity manager factory.\n+     */\n+    public void tearDown() {\n+        if (emf == null)\n+            return;\n+\n+        try {\n+            clear(emf);\n+        } finally {\n+            closeEMF(emf);\n+        }\n+    }\n+}"},{"sha":"4e56baf938e92153f6ca25e2fbb0a391e2fe64fb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMTestCase.java","status":"renamed","additions":38,"deletions":86,"changes":124,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMTestCase.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -15,52 +15,43 @@\n  */\n package org.apache.openjpa.persistence.test;\n \n-import java.util.*;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.persistence.EntityTransaction;\n \n-import javax.persistence.*;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n \n /**\n  * A base test case that can be used to easily test scenarios where there\n  * is only a single EntityManager at any given time.\n  *\n  * @author Marc Prud'hommeaux\n  */\n-public abstract class SingleEMTest extends SingleEMFTest {\n+public abstract class SingleEMTestCase \n+    extends SingleEMFTestCase {\n \n-    protected EntityManager em;\n+    protected OpenJPAEntityManager em;\n \n-    public SingleEMTest(Class... classes) {\n-        super(classes);\n+    @Override\n+    public void setUp(Object... props) {\n+        super.setUp(props);\n+        em = emf.createEntityManager(); \n     }\n \n-    /**\n-     * Rolls back the current transaction and closes the EntityManager. \n-     */\n     @Override\n-    public void tearDown() throws Exception {\n+    public void tearDown() {\n         rollback();\n         close();\n         super.tearDown();\n     }\n \n-    /**\n-     * Returns the current EntityManager, creating one from the\n-     * EntityManagerFactory if it doesn't already exist. \n-     */\n-    public EntityManager em() {\n-        if (em == null) {\n-            em = emf().createEntityManager();\n-        }\n-\n-        return em;\n-    }\n-\n     /** \n      * Start a new transaction if there isn't currently one active. \n      * @return  true if a transaction was started, false if one already existed\n      */\n-    public boolean begin() {\n-        EntityTransaction tx = em().getTransaction();\n+    protected boolean begin() {\n+        EntityTransaction tx = em.getTransaction();\n         if (tx.isActive())\n             return false;\n \n@@ -72,8 +63,8 @@ public boolean begin() {\n      * Commit the current transaction, if it is active. \n      * @return true if the transaction was committed\n      */\n-    public boolean commit() {\n-        EntityTransaction tx = em().getTransaction();\n+    protected boolean commit() {\n+        EntityTransaction tx = em.getTransaction();\n         if (!tx.isActive())\n             return false;\n \n@@ -85,8 +76,8 @@ public boolean commit() {\n      * Rollback the current transaction, if it is active. \n      * @return true if the transaction was rolled back\n      */\n-    public boolean rollback() {\n-        EntityTransaction tx = em().getTransaction();\n+    protected boolean rollback() {\n+        EntityTransaction tx = em.getTransaction();\n         if (!tx.isActive())\n             return false;\n \n@@ -98,7 +89,7 @@ public boolean rollback() {\n      * Closes the current EntityManager if it is open. \n      * @return false if the EntityManager was already closed.\n      */\n-    public boolean close() {\n+    protected boolean close() {\n         if (em == null)\n             return false;\n \n@@ -111,41 +102,18 @@ public boolean close() {\n         return !em.isOpen();\n     }\n \n-    @Override\n-    public boolean closeEMF() {\n-        close();\n-        return super.closeEMF();\n-    }\n-\n-    /** \n-     * Returns the entity name of the specified class. If the class\n-     * declares an @Entity, then it will be used, otherwise the base\n-     * name of the class will be returned.\n-     *\n-     * Note that this will not correctly return the entity name of\n-     * a class declared in an orm.xml file.\n-     */\n-    public String entityName(Class c) {\n-        Entity e = (Entity) c.getAnnotation(Entity.class);\n-        if (e != null && e.name() != null && e.name().length() > 0)\n-            return e.name();\n-\n-        String name = c.getSimpleName();\n-        name = name.substring(name.lastIndexOf(\".\") + 1);\n-        return name;\n-    }\n-\n     /** \n      * Delete all of the instances.\n      *\n      * If no transaction is running, then one will be started and committed.\n      * Otherwise, the operation will take place in the current transaction.\n      */\n-    public void remove(Object... obs) {\n+    protected void remove(Object... obs) {\n         boolean tx = begin();\n         for (Object ob : obs)\n-            em().remove(ob);\n-        if (tx) commit();\n+            em.remove(ob);\n+        if (tx) \n+            commit();\n     }\n \n     /** \n@@ -154,18 +122,19 @@ public void remove(Object... obs) {\n      * If no transaction is running, then one will be started and committed.\n      * Otherwise, the operation will take place in the current transaction.\n      */\n-    public void persist(Object... obs) {\n+    protected void persist(Object... obs) {\n         boolean tx = begin();\n         for (Object ob : obs)\n-            em().persist(ob);\n-        if (tx) commit();\n+            em.persist(ob);\n+        if (tx) \n+            commit();\n     }\n \n     /** \n      * Creates a query in the current EntityManager with the specified string. \n      */\n-    public Query query(String str) {\n-        return em().createQuery(str);\n+    protected OpenJPAQuery query(String str) {\n+        return em.createQuery(str);\n     }\n \n     /** \n@@ -178,10 +147,10 @@ public Query query(String str) {\n      * @param  params  the parameters, if any\n      * @return the Query object\n      */\n-    public Query query(Class c, String str, Object... params) {\n-        String query = \"select x from \" + entityName(c) + \" x \"\n+    protected OpenJPAQuery query(Class c, String str, Object... params) {\n+        String query = \"select x from \" + entityName(emf, c) + \" x \"\n             + (str == null ? \"\" : str);\n-        Query q = em().createQuery(query);\n+        OpenJPAQuery q = em.createQuery(query);\n         for (int i = 0; params != null && i < params.length; i++)\n             q.setParameter(i + 1, params[i]);\n         return q;\n@@ -196,31 +165,14 @@ public Query query(Class c, String str, Object... params) {\n      *\n      * @see #query(java.lang.Class,java.lang.String)\n      */\n-    public <E> List<E> find(Class<E> c, String q, Object... params) {\n+    protected <E> List<E> find(Class<E> c, String q, Object... params) {\n         return Collections.checkedList(query(c, q, params).getResultList(), c);\n     }\n \n-    public <E> List<E> find(Class<E> c) {\n-        return find(c, null);\n-    }\n-\n     /** \n-     * Deletes all instances of the specific class from the database. \n-     *\n-     * If no transaction is running, then one will be started and committed.\n-     * Otherwise, the operation will take place in the current transaction.\n-     *\n-     * @return the total number of instanes deleted\n+     * Returns a list of all instances of the specific class in the database. \n      */\n-    public int delete(Class... classes) {\n-        boolean tx = begin();\n-        int total = 0;\n-        for (Class c : classes) {\n-            total += query(\"delete from \" + entityName(c) + \" x\").\n-                executeUpdate();\n-        }\n-        if (tx) commit();\n-\n-        return total;\n+    protected <E> List<E> find(Class<E> c) {\n+        return find(c, null);\n     }\n-}\n\\ No newline at end of file\n+}","previous_filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMTest.java"},{"sha":"a83f7ff701f0a73d3f6281ca65c349c640f86125","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestSimpleXmlEntity.java","status":"modified","additions":4,"deletions":19,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestSimpleXmlEntity.java","raw_url":"https://github.com/apache/openjpa/raw/8167400e51e6148aed5f4bef1c9fb737b659abd3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestSimpleXmlEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestSimpleXmlEntity.java?ref=8167400e51e6148aed5f4bef1c9fb737b659abd3","patch":"@@ -1,55 +1,40 @@\n package org.apache.openjpa.persistence.xml;\n \n-import java.util.Map;\n-import javax.persistence.EntityManager;\n-\n-import org.apache.openjpa.persistence.test.SingleEMTest;\n import org.apache.openjpa.persistence.ArgumentException;\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n \n public class TestSimpleXmlEntity\n-    extends SingleEMTest {\n-\n-    public TestSimpleXmlEntity() {\n-        super(SimpleXmlEntity.class);\n-    }\n+    extends SingleEMTestCase {\n \n-    protected void setEMFProps(Map props) {\n-        super.setEMFProps(props);\n+    public void setUp() {\n+        setUp(SimpleXmlEntity.class);\n     }\n \n     public void testNamedQueryInXmlNamedEntity() {\n-        EntityManager em = emf.createEntityManager();\n         em.createNamedQuery(\"SimpleXml.findAll\").getResultList();\n-        em.close();\n     }\n \n     public void testNamedQueryInXmlUsingShortClassName() {\n-        EntityManager em = emf.createEntityManager();\n         try {\n             em.createNamedQuery(\"SimpleXmlEntity.findAll\").getResultList();\n             fail(\"should not be able to execute query using short class name \" +\n                 \"for entity that has an entity name specified\");\n         } catch (ArgumentException ae) {\n             // expected\n         }\n-        em.close();\n     }\n \n     public void testNamedEntityInDynamicQuery() {\n-        EntityManager em = emf.createEntityManager();\n         em.createQuery(\"select o from SimpleXml o\").getResultList();\n-        em.close();\n     }\n \n     public void testShortClassNameInDynamicQuery() {\n-        EntityManager em = emf.createEntityManager();\n         try {\n             em.createQuery(\"select o from SimpleXmlEntity o\").getResultList();\n             fail(\"should not be able to execute query using short class name \" +\n                 \"for entity that has an entity name specified\");\n         } catch (ArgumentException ae) {\n             // expected\n         }\n-        em.close();\n     }\n }"}]}

