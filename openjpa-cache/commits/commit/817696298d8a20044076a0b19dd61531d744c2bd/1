{"sha":"817696298d8a20044076a0b19dd61531d744c2bd","node_id":"MDY6Q29tbWl0MjA2MzY0OjgxNzY5NjI5OGQ4YTIwMDQ0MDc2YTBiMTlkZDYxNTMxZDc0NGMyYmQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-02T19:47:10Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-02T19:47:10Z"},"message":"OPENJPA-1276: preserve precedence order while rendering logical operators/operands\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@810685 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"536242ee2c5c4ef9d573fda249a28653b3fc96fa","url":"https://api.github.com/repos/apache/openjpa/git/trees/536242ee2c5c4ef9d573fda249a28653b3fc96fa"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/817696298d8a20044076a0b19dd61531d744c2bd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/817696298d8a20044076a0b19dd61531d744c2bd","html_url":"https://github.com/apache/openjpa/commit/817696298d8a20044076a0b19dd61531d744c2bd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/817696298d8a20044076a0b19dd61531d744c2bd/comments","author":null,"committer":null,"parents":[{"sha":"9d69e59a7ce8ee1d43c22592ea94dfa61cd29487","url":"https://api.github.com/repos/apache/openjpa/commits/9d69e59a7ce8ee1d43c22592ea94dfa61cd29487","html_url":"https://github.com/apache/openjpa/commit/9d69e59a7ce8ee1d43c22592ea94dfa61cd29487"}],"stats":{"total":80,"additions":75,"deletions":5},"files":[{"sha":"05f0e668f8e657befa4075eceeca77c0ce155f97","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCQL.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/817696298d8a20044076a0b19dd61531d744c2bd/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCQL.java","raw_url":"https://github.com/apache/openjpa/raw/817696298d8a20044076a0b19dd61531d744c2bd/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCQL.java?ref=817696298d8a20044076a0b19dd61531d744c2bd","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.criteria;\n+\n+import javax.persistence.criteria.Predicate;\n+import javax.persistence.criteria.Root;\n+\n+/**\n+ * Test logical predicates precedence is preserved and rendered correctly in CQL.\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class TestCQL extends CriteriaTest {\n+    public void testLogicalPrecedence() {\n+        OpenJPACriteriaQuery<Person> q = cb.createQuery(Person.class);\n+        Root<Person> p = q.from(Person.class);\n+        q.select(p);\n+        Predicate a = cb.equal(p.get(Person_.name), \"A\");\n+        Predicate b = cb.equal(p.get(Person_.name), \"B\");\n+        Predicate c = cb.equal(p.get(Person_.name), \"C\");\n+        Predicate d = cb.equal(p.get(Person_.name), \"D\");\n+        \n+        // (a OR b) AND (c or D)\n+        q.where(cb.or(a,b), cb.or(c,d));\n+        \n+        String jpql = \"\";\n+        // The strings are compared for exact match so be careful about spaces and such... \n+        jpql = \"SELECT p FROM Person p WHERE ((p.name = 'A' OR p.name = 'B') AND (p.name = 'C' OR p.name = 'D'))\";\n+        assertEquivalence(q, jpql);\n+        assertEquals(jpql, q.toCQL());\n+        \n+        // (a OR b or C) AND D\n+        q.where(cb.or(a,b,c), d);\n+        jpql = \"SELECT p FROM Person p WHERE ((p.name = 'A' OR p.name = 'B' OR p.name = 'C') AND p.name = 'D')\";\n+        assertEquivalence(q, jpql);\n+        assertEquals(jpql, q.toCQL());\n+        \n+        // a AND (b OR c) AND d \n+        q.where(a, cb.or(b,c), d);\n+        jpql = \"SELECT p FROM Person p WHERE (p.name = 'A' AND (p.name = 'B' OR p.name = 'C') AND p.name = 'D')\";\n+        assertEquivalence(q, jpql);\n+        assertEquals(jpql, q.toCQL());\n+        \n+        // a OR (b AND (c OR d)) \n+        q.where(cb.or(a, cb.and(b, cb.or(c,d))));\n+        jpql = \"SELECT p FROM Person p WHERE (p.name = 'A' OR (p.name = 'B' AND (p.name = 'C' OR p.name = 'D')))\";\n+        assertEquivalence(q, jpql);\n+        assertEquals(jpql, q.toCQL());\n+    }\n+}"},{"sha":"52ea7cc39146c9ebfbeb997653a0f9024f46b8e7","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilder.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/817696298d8a20044076a0b19dd61531d744c2bd/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/817696298d8a20044076a0b19dd61531d744c2bd/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilder.java?ref=817696298d8a20044076a0b19dd61531d744c2bd","patch":"@@ -92,7 +92,7 @@ public String getLanguage() {\n      *  @param resultClass  type of the query result\n      *  @return query object\n      */\n-    public <T> CriteriaQuery<T> createQuery(Class<T> resultClass) {\n+    public <T> OpenJPACriteriaQuery<T> createQuery(Class<T> resultClass) {\n         return new CriteriaQueryImpl<T>(_model, resultClass);\n     }\n \n@@ -101,7 +101,7 @@ public String getLanguage() {\n      *  objects as its result.\n      *  @return query object\n      */\n-    public CriteriaQuery<Tuple> createTupleQuery() {\n+    public OpenJPACriteriaQuery<Tuple> createTupleQuery() {\n         return new CriteriaQueryImpl<Tuple>(_model, Tuple.class);\n     }\n \n@@ -498,7 +498,7 @@ public Predicate notLike(Expression<String> x, String pattern, char escapeChar)\n     }\n \n     public Predicate or(Predicate... restrictions) {\n-        return new PredicateImpl.Or();\n+        return new PredicateImpl.Or(restrictions);\n     }\n \n     public Predicate or(Expression<Boolean> x, Expression<Boolean> y) {"},{"sha":"c74000e0351aa47cb7e6f7be4814b65b8791bf34","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/817696298d8a20044076a0b19dd61531d744c2bd/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java","raw_url":"https://github.com/apache/openjpa/raw/817696298d8a20044076a0b19dd61531d744c2bd/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/PredicateImpl.java?ref=817696298d8a20044076a0b19dd61531d744c2bd","patch":"@@ -141,8 +141,11 @@ public void acceptVisit(CriteriaExpressionVisitor visitor) {\n     }\n     \n     public StringBuilder asValue(CriteriaQueryImpl<?> q) {\n-        return Expressions.asValue(q, _exps == null ? null : _exps.toArray(new Expression<?>[_exps.size()]), \n-            \" \" +_op + \" \");\n+        boolean braces = _exps != null && _exps.size() > 1;\n+        StringBuilder buffer =  Expressions.asValue(q, _exps == null ? null : \n+            _exps.toArray(new Expression<?>[_exps.size()]), \" \" +_op + \" \");\n+        if (braces) buffer.insert(0, \"(\").append(\")\");\n+        return buffer;\n     }\n \n     "}]}

