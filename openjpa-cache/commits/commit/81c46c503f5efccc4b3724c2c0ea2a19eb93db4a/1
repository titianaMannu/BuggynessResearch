{"sha":"81c46c503f5efccc4b3724c2c0ea2a19eb93db4a","node_id":"MDY6Q29tbWl0MjA2MzY0OjgxYzQ2YzUwM2Y1ZWZjY2M0YjM3MjRjMmMwZWEyYTE5ZWI5M2RiNGE=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2011-05-25T16:11:47Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2011-05-25T16:11:47Z"},"message":"OPENJPA-2006 If flushing, also pre-flush non-provisional entities to allow sequence ID population.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1127573 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"829f29ed6533a1d680823476b5ca1a39293fa983","url":"https://api.github.com/repos/apache/openjpa/git/trees/829f29ed6533a1d680823476b5ca1a39293fa983"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/81c46c503f5efccc4b3724c2c0ea2a19eb93db4a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/81c46c503f5efccc4b3724c2c0ea2a19eb93db4a","html_url":"https://github.com/apache/openjpa/commit/81c46c503f5efccc4b3724c2c0ea2a19eb93db4a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/81c46c503f5efccc4b3724c2c0ea2a19eb93db4a/comments","author":null,"committer":null,"parents":[{"sha":"350ed99379f29b606bf61dedfb4a9bb7f9f397e2","url":"https://api.github.com/repos/apache/openjpa/commits/350ed99379f29b606bf61dedfb4a9bb7f9f397e2","html_url":"https://github.com/apache/openjpa/commit/350ed99379f29b606bf61dedfb4a9bb7f9f397e2"}],"stats":{"total":749,"additions":749,"deletions":0},"files":[{"sha":"328b80b750fa17fca78c314a3320058a86ebc3f1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/81c46c503f5efccc4b3724c2c0ea2a19eb93db4a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/81c46c503f5efccc4b3724c2c0ea2a19eb93db4a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=81c46c503f5efccc4b3724c2c0ea2a19eb93db4a","patch":"@@ -5176,4 +5176,9 @@ public boolean getAllowReferenceToSiblingContext() {\n     public void setAllowReferenceToSiblingContext(boolean allow) {\n         _allowReferenceToSiblingContext = allow;\n     }\n+    \n+    protected boolean isFlushing() {\n+        return ((_flags & FLAG_FLUSHING) != 0);\n+    }\n+\n }"},{"sha":"54a946607a423fb60ba33019fd9d055bc97cd94f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/81c46c503f5efccc4b3724c2c0ea2a19eb93db4a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","raw_url":"https://github.com/apache/openjpa/raw/81c46c503f5efccc4b3724c2c0ea2a19eb93db4a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java?ref=81c46c503f5efccc4b3724c2c0ea2a19eb93db4a","patch":"@@ -793,6 +793,12 @@ private void preFlushPC(ValueMetaData vmd, Object obj, boolean logical, OpCallba\n                 // ensure generated IDs get assigned properly\n                 if (!logical)\n                     ((StateManagerImpl)sm).assignObjectId(false, true);\n+                \n+                // Call preFetch on this and any related persistent fields.\n+                // This will ensure IDs get assigned to those that need them.\n+                if (_broker.isFlushing()) {\n+                    ((StateManagerImpl)sm).preFlush(logical, call);\n+                }\n             }\n         }\n "},{"sha":"9c01139d7f455c32fda9d091a9c138d42c94a070","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/flush/Assignment.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/81c46c503f5efccc4b3724c2c0ea2a19eb93db4a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/flush/Assignment.java","raw_url":"https://github.com/apache/openjpa/raw/81c46c503f5efccc4b3724c2c0ea2a19eb93db4a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/flush/Assignment.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/flush/Assignment.java?ref=81c46c503f5efccc4b3724c2c0ea2a19eb93db4a","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.flush;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.SequenceGenerator;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"FL_ASSIGN\")\n+public class Assignment implements Serializable {\n+\n+    private static final long serialVersionUID = -7707299604883998179L;\n+    \n+    @Id\n+    @Column(name=\"ASSIGN_ID\")\n+    @SequenceGenerator(name=\"assignIdSeq\", sequenceName=\"FL_ASSIGN_SEQ\")\n+    @GeneratedValue(generator=\"assignIdSeq\", strategy=GenerationType.SEQUENCE)\n+    protected Long assignId;\n+    \n+    @ManyToOne(cascade = {CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH}, fetch=FetchType.LAZY)\n+    @JoinColumn(name=\"TOPIC_ID\")\n+    protected Topic topic;\n+    \n+    @Column(name=\"ASSIGN_TEXT\")\n+    protected String assignText;\n+\n+    public Long getAssignmentId() {\n+        return assignId;\n+    }\n+\n+    public void setAssignmentId(Long assignId) {\n+        this.assignId = assignId;\n+    }\n+\n+    public Topic getTopic() {\n+        return topic;\n+    }\n+\n+    public void setTopic(Topic topic) {\n+        this.topic = topic;\n+    }\n+\n+    public String getAssignmentText() {\n+        return assignText;\n+    }\n+\n+    public void setAssignmentText(String assignText) {\n+        this.assignText = assignText;\n+    }\n+}"},{"sha":"dff41b3a4ae3f501432adba67d48a75cd38c44d3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/flush/ClassPeriod.java","status":"added","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/apache/openjpa/blob/81c46c503f5efccc4b3724c2c0ea2a19eb93db4a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/flush/ClassPeriod.java","raw_url":"https://github.com/apache/openjpa/raw/81c46c503f5efccc4b3724c2c0ea2a19eb93db4a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/flush/ClassPeriod.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/flush/ClassPeriod.java?ref=81c46c503f5efccc4b3724c2c0ea2a19eb93db4a","patch":"@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.flush;\n+\n+import java.io.Serializable;\n+import java.util.Set;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.SequenceGenerator;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.ElementDependent;\n+\n+@Entity\n+@Table(name=\"FL_CLP\")\n+public class ClassPeriod implements Serializable {\n+\n+    private static final long serialVersionUID = -5315185851562144594L;\n+\n+    @Id\n+    @Column(name=\"CLP_ID\")\n+    @SequenceGenerator(name=\"clpIdSeq\", sequenceName=\"FL_CLP_SEQ\")\n+    @GeneratedValue(generator=\"clpIdSeq\", strategy=GenerationType.SEQUENCE)\n+    protected Long clpId;\n+    \n+    @Column(name=\"CLP_TEXT\")\n+    protected String clpText;\n+    \n+    @ManyToOne(cascade = {CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH}, fetch=FetchType.LAZY)\n+    @JoinColumn(name=\"COURSE_ID\")\n+    protected Course course;\n+    \n+    @OneToMany(mappedBy=\"clp\",cascade=CascadeType.ALL,fetch=FetchType.EAGER)\n+    @ElementDependent(true)\n+    protected Set<Topic> topics;\n+    \n+    public Set<Topic> getTopics() {\n+        return topics;\n+    }\n+    \n+    public void setTopics(Set<Topic> topics) {\n+        this.topics = topics;\n+    }\n+    \n+    public Long getClassPeriodId() {\n+        return clpId;\n+    }\n+    \n+    public void setClassPeriodId(Long clpId) {\n+        this.clpId = clpId;\n+    }\n+    \n+    public Course getCourse() {\n+        return course;\n+    }\n+    \n+    public void setCourse(Course course) {\n+        this.course = course;   \n+    }\n+    \n+    public String getClassPeriodText() {\n+        return clpText;\n+    }\n+    \n+    public void setClassPeriodText(String clpText) {\n+        this.clpText = clpText;\n+    }\n+}"},{"sha":"4fdac3568ab365d5a0c4dd46ed5671bfedd09082","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/flush/Course.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/81c46c503f5efccc4b3724c2c0ea2a19eb93db4a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/flush/Course.java","raw_url":"https://github.com/apache/openjpa/raw/81c46c503f5efccc4b3724c2c0ea2a19eb93db4a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/flush/Course.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/flush/Course.java?ref=81c46c503f5efccc4b3724c2c0ea2a19eb93db4a","patch":"@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.flush;\n+\n+import java.io.Serializable;\n+import java.util.Set;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.SequenceGenerator;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.ElementDependent;\n+\n+@Entity\n+@Table(name=\"FL_COURSE\")\n+public class Course implements Serializable {\n+\n+    private static final long serialVersionUID = -5351948190722744801L;\n+\n+    @Id\n+    @Column(name=\"COURSE_ID\")\n+    @SequenceGenerator(name=\"courseIdSeq\", sequenceName=\"FL_COURSE_SEQ\")\n+    @GeneratedValue(generator=\"courseIdSeq\", strategy=GenerationType.SEQUENCE)\n+    protected Long courseId;\n+    \n+    @Column(name=\"COURSE_TEXT\")\n+    protected String courseText;\n+    \n+    @OneToMany(mappedBy=\"course\", cascade=CascadeType.ALL, fetch=FetchType.EAGER)\n+    @ElementDependent(true)\n+    protected Set<ClassPeriod> classPeriods;\n+\n+    public Long getCourseId() {\n+        return courseId;\n+    }\n+\n+    public void setCourseId(Long courseId) {\n+        this.courseId = courseId;\n+    }\n+\n+    public String getCourseText() {\n+        return courseText;\n+    }\n+\n+    public void setCourseText(String courseText) {\n+        this.courseText = courseText;\n+    }\n+\n+    public Set<ClassPeriod> getClassPeriods() {\n+        return classPeriods;\n+    }\n+\n+    public void setClassPeriods(Set<ClassPeriod> classPeriods) {\n+        this.classPeriods = classPeriods;\n+    }\n+}"},{"sha":"032501f7f63daf37d8b53580aed5294f8f939733","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/flush/SubTopic.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/81c46c503f5efccc4b3724c2c0ea2a19eb93db4a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/flush/SubTopic.java","raw_url":"https://github.com/apache/openjpa/raw/81c46c503f5efccc4b3724c2c0ea2a19eb93db4a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/flush/SubTopic.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/flush/SubTopic.java?ref=81c46c503f5efccc4b3724c2c0ea2a19eb93db4a","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.flush;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.SequenceGenerator;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"FL_SUBTOPIC\")\n+public class SubTopic implements Serializable {\n+\n+    private static final long serialVersionUID = 1855479005964448251L;\n+\n+    @Id\n+    @Column(name=\"SUBTOPIC_ID\")\n+    @SequenceGenerator(name=\"subtopicIdSeq\", sequenceName=\"FL_SUBTOPIC_SEQ\")\n+    @GeneratedValue(generator=\"subtopicIdSeq\", strategy=GenerationType.SEQUENCE)\n+    protected Long subtopicId;\n+    \n+    @ManyToOne(cascade = {CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH}, fetch=FetchType.LAZY)\n+    @JoinColumn(name=\"TOPIC_ID\")\n+    protected Topic topic;\n+    \n+    @Column(name=\"SUBTOPIC_TEXT\")\n+    protected String subtopicText;\n+    \n+    public Long getSubtopicId() {\n+        return subtopicId;\n+    }\n+\n+    public void setSubtopicId(Long subtopicId) {\n+        this.subtopicId = subtopicId;\n+    }\n+\n+    public Topic getTopic() {\n+        return topic;\n+    }\n+\n+    public void setTopic(Topic topic) {\n+        this.topic = topic;\n+    }\n+\n+    public String getSubtopicText() {\n+        return subtopicText;\n+    }\n+\n+    public void setSubtopicText(String subtopicText) {\n+        this.subtopicText = subtopicText;\n+    }\n+}"},{"sha":"47093164cfff42a1b0ee709acacd04f22640aca1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/flush/TestCascadingFlush.java","status":"added","additions":307,"deletions":0,"changes":307,"blob_url":"https://github.com/apache/openjpa/blob/81c46c503f5efccc4b3724c2c0ea2a19eb93db4a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/flush/TestCascadingFlush.java","raw_url":"https://github.com/apache/openjpa/raw/81c46c503f5efccc4b3724c2c0ea2a19eb93db4a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/flush/TestCascadingFlush.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/flush/TestCascadingFlush.java?ref=81c46c503f5efccc4b3724c2c0ea2a19eb93db4a","patch":"@@ -0,0 +1,307 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.flush;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestCascadingFlush extends SingleEMFTestCase {\n+\n+    boolean supportsNativeSequence = false;\n+\n+    public void setUp() {\n+        setUp(Assignment.class, ClassPeriod.class, Course.class, SubTopic.class, Topic.class, CLEAR_TABLES);\n+\n+        try {\n+            supportsNativeSequence = ((JDBCConfiguration) emf\n+                .getConfiguration()).getDBDictionaryInstance()\n+                .nextSequenceQuery != null;\n+        } catch (Throwable t) {\n+            supportsNativeSequence = false;\n+        }\n+    }\n+\n+    /**\n+     * Verifies flushing a complex bidirectional domain featureSelection results in retrieval and population of all sequence-gen\n+     * ID values.\n+     */\n+    public void testCascadingFlushBasic() {\n+        if (!supportsNativeSequence) {\n+            return;\n+        }\n+        EntityManager em = emf.createEntityManager();\n+        Long courseId = populate(em);\n+        em.clear();\n+        Course course = em.find(Course.class, courseId);\n+        verifyCascadingFlush(em, course);\n+        em.close();\n+    }\n+\n+    /**\n+     * Verifies flushing a complex bidirectional domain featureSelection results in retrieval and population of all sequence-gen\n+     * ID values using an detached, then merged entity graph.\n+     */\n+    public void testCascadingFlushDetach() {\n+        if (!supportsNativeSequence) {\n+            return;\n+        }\n+        EntityManager em = emf.createEntityManager();\n+        Long courseId = populate(em);\n+        em.clear();\n+        Course tmpCourse = em.find(Course.class, courseId);\n+\n+        Course course = OpenJPAPersistence.cast(em).detachCopy(tmpCourse);\n+        assertNotEquals(course, tmpCourse);\n+        verifyCascadingFlush(em, course);\n+        em.close();\n+    }\n+\n+    /**\n+     * Verifies flushing a complex bidirectional domain featureSelection results in retrieval of all sequence-gen ID values using\n+     * an serialized (resulting in detach), then merged entity graph.\n+     */\n+    public void testCascadingFlushSerialize() {\n+        if (!supportsNativeSequence) {\n+            return;\n+        }\n+        EntityManager em = emf.createEntityManager();\n+        try {\n+            Long courseId = populate(em);\n+            em.clear();\n+            Course tmpCourse = em.find(Course.class, courseId);\n+            Course course = null;\n+            try {\n+                course = (Course)roundtrip(tmpCourse, false);\n+            } catch (Throwable t) {\n+                fail(\"Failed to serialize and deserialize persistent object.\");\n+            }\n+            assertNotEquals(course, tmpCourse);\n+            verifyCascadingFlush(em, course);\n+        }\n+        finally {\n+            if (em != null) {\n+                em.close();\n+            }\n+        }\n+    }\n+\n+\n+    private void verifyCascadingFlush(EntityManager em, Course course) {\n+        try {\n+            beginTx(em);\n+            // Add a class period to the graph\n+            addClassPeriod(course);\n+\n+            // Merge in the new entities\n+            Course course2 = em.merge(course);\n+            // Flush to the database.  ID's should be assigned to all elements in\n+            // the graph.\n+            em.flush();\n+            // Verify all id's are assigned\n+            assertTrue(course2.getCourseId() > 0);\n+            assertNotNull(course2.getClassPeriods());\n+            Set<ClassPeriod> cps = course2.getClassPeriods();\n+            assertTrue(cps.size() == 2);\n+            for (ClassPeriod cp : cps) {\n+                assertNotNull(cp);\n+                assertTrue(cp.getClassPeriodId() > 0);\n+                assertEquals(cp.getCourse(), course2);\n+                Set<Topic> topics = cp.getTopics();\n+                assertNotNull(topics);\n+                assertTrue(topics.size() > 0);\n+                for (Topic t : topics) {\n+                    assertNotNull(t);\n+                    assertTrue(t.getTopicId() > 0);\n+                    Set<Assignment> assignments = t.getAssignments();\n+                    assertNotNull(assignments);\n+                    assertTrue(assignments.size() == 1);\n+                    for (Assignment a : assignments) {\n+                        assertNotNull(a);\n+                        assertTrue(a.getAssignmentId() > 0);\n+                    }\n+                    Set<SubTopic> subTopics = t.getSubTopics();\n+                    assertNotNull(subTopics);\n+                    assertTrue(subTopics.size() == 1);\n+                    for (SubTopic s : subTopics) {\n+                        assertNotNull(s);\n+                        assertTrue(s.getSubtopicId() > 0);\n+                    }\n+                }\n+            }\n+\n+            commitTx(em);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            em.getTransaction().rollback();\n+            fail();\n+        }\n+    }\n+\n+    public static Long populate(EntityManager em) {\n+\n+        beginTx(em);\n+        Course course = createNewCourse();\n+        em.persist(course);\n+        em.flush();\n+\n+        commitTx(em);\n+        return course.getCourseId();\n+    }\n+\n+    public static Course createNewCourse() {\n+\n+        Course course = new Course();\n+        course.setCourseText(\"Nuclear Physics\");\n+\n+        Assignment assignment1 = new Assignment();\n+        assignment1.setAssignmentText(\"Lab: Nuclear Fusion\");\n+\n+        Set<Assignment> assignments = new HashSet<Assignment>();\n+        assignments.add(assignment1);\n+\n+        SubTopic subtopic1 = new SubTopic();\n+        subtopic1.setSubtopicText(\"Nuclear Fusion\");\n+\n+        Set<SubTopic> subtopics = new HashSet<SubTopic>();\n+        subtopics.add(subtopic1);\n+\n+        Topic topic1 = new Topic();\n+        topic1.setTopicText(\"Fundamentals of Nuclear Energy\");\n+        topic1.setAssignments(assignments);\n+        topic1.setSubTopics(subtopics);\n+\n+        assignment1.setTopic(topic1);\n+        subtopic1.setTopic(topic1);\n+\n+        Set<Topic> topics = new HashSet<Topic>();\n+        topics.add(topic1);\n+\n+        ClassPeriod cp1 = new ClassPeriod();\n+        cp1.setClassPeriodText(\"8844: M,W,Th 8:00AM\");\n+        cp1.setTopics(topics);\n+        cp1.setCourse(course);\n+\n+        topic1.setClassPeriod(cp1);\n+\n+        Set<ClassPeriod> cps = new HashSet<ClassPeriod>();\n+        cps.add(cp1);\n+\n+        course.setClassPeriods(cps);\n+\n+        return course;\n+    }\n+\n+    public static void addClassPeriod(Course course) {\n+\n+        \n+        Assignment assignment = new Assignment();\n+        assignment.setAssignmentText(\"Read pages 442-645\");\n+\n+        Set<Assignment> assignments = new HashSet<Assignment>();\n+        assignments.add(assignment);\n+\n+        SubTopic subTopic = new SubTopic();\n+        subTopic.setSubtopicText(\"Newton\");\n+\n+        Set<SubTopic> subTopics = new HashSet<SubTopic>();\n+        subTopics.add(subTopic);\n+\n+        Topic topic = new Topic();\n+        topic.setTopicText(\"Gravity\");\n+        topic.setSubTopics(subTopics);\n+        topic.setAssignments(assignments);\n+\n+        assignment.setTopic(topic);\n+        subTopic.setTopic(topic);\n+\n+        Set<Topic> topics = new HashSet<Topic>();\n+        topics.add(topic);\n+\n+        // Add another topic\n+        Assignment assignment2 = new Assignment();\n+        assignment2.setAssignmentText(\"Read pages 645-785\");\n+\n+        Set<Assignment> assignments2 = new HashSet<Assignment>();\n+        assignments2.add(assignment2);\n+\n+        SubTopic subTopic2 = new SubTopic();\n+        subTopic2.setSubtopicText(\"Forces\");\n+\n+        Set<SubTopic> subTopics2 = new HashSet<SubTopic>();\n+        subTopics2.add(subTopic2);\n+\n+        Topic topic2 = new Topic();\n+        topic2.setTopicText(\"Magnetism\");\n+        topic2.setSubTopics(subTopics2);\n+        topic2.setAssignments(assignments2);\n+\n+        subTopic2.setTopic(topic);\n+        subTopic2.setTopic(topic);\n+\n+        topics.add(topic2);\n+\n+        ClassPeriod cp2 = new ClassPeriod();\n+        cp2.setClassPeriodText(\"8846: M,W,Th 11:00AM\");\n+        cp2.setTopics(topics);\n+        cp2.setCourse(course);\n+\n+        topic.setClassPeriod(cp2);\n+        topic2.setClassPeriod(cp2);\n+\n+        course.getClassPeriods().add(cp2);\n+    }\n+\n+    private static void beginTx(EntityManager em) {\n+        em.getTransaction().begin();\n+    }\n+\n+    private static void commitTx(EntityManager em) {\n+        em.getTransaction().commit();\n+    }\n+\n+    public static Object roundtrip(Object orig, boolean validateEquality)\n+        throws IOException, ClassNotFoundException {\n+        assertNotNull(orig);\n+\n+        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream(bout);\n+        out.writeObject(orig);\n+        ByteArrayInputStream bin = new ByteArrayInputStream(bout.toByteArray());\n+        ObjectInputStream in = new ObjectInputStream(bin);\n+        Object result = in.readObject();\n+\n+        if (validateEquality) {\n+            assertEquals(orig.hashCode(), result.hashCode());\n+            assertEquals(orig, result);\n+        }\n+\n+        return result;\n+    }\n+}"},{"sha":"5316bdee53725459b0c724241b44ba57ae45eafb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/flush/Topic.java","status":"added","additions":105,"deletions":0,"changes":105,"blob_url":"https://github.com/apache/openjpa/blob/81c46c503f5efccc4b3724c2c0ea2a19eb93db4a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/flush/Topic.java","raw_url":"https://github.com/apache/openjpa/raw/81c46c503f5efccc4b3724c2c0ea2a19eb93db4a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/flush/Topic.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/flush/Topic.java?ref=81c46c503f5efccc4b3724c2c0ea2a19eb93db4a","patch":"@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.flush;\n+\n+import java.io.Serializable;\n+import java.util.Set;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.SequenceGenerator;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.ElementDependent;\n+\n+@Entity\n+@Table(name=\"FL_TOPIC\")\n+public class Topic implements Serializable {\n+\n+    private static final long serialVersionUID = -2570150606711529060L;\n+\n+    @Id\n+    @Column(name=\"TOPIC_ID\")\n+    @SequenceGenerator(name=\"topicIdSeq\", sequenceName=\"TOPIC_SEQ\")\n+    @GeneratedValue(generator=\"topicIdSeq\", strategy=GenerationType.SEQUENCE)\n+    protected Long topicId;\n+    \n+    @ManyToOne(cascade = {CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH}, fetch=FetchType.LAZY)\n+    @JoinColumn(name=\"CLP_ID\")\n+    protected ClassPeriod clp;\n+\n+    @Column(name=\"TOPIC_TEXT\")\n+    protected String topicText;\n+\n+    @OneToMany(mappedBy=\"topic\",cascade=CascadeType.ALL, fetch=FetchType.EAGER)\n+    @ElementDependent(true)\n+    protected Set<Assignment> assignments;\n+    \n+    @OneToMany(mappedBy=\"topic\",cascade=CascadeType.ALL, fetch=FetchType.EAGER)\n+    @ElementDependent(true)\n+    protected Set<SubTopic> subTopics;\n+\n+    public Long getTopicId() {\n+        return topicId;\n+    }\n+\n+    public void setTopicId(Long topicId) {\n+        this.topicId = topicId;\n+    }\n+\n+    public ClassPeriod getClassPeriod() {\n+        return clp;\n+    }\n+\n+    public void setClassPeriod(ClassPeriod clp) {\n+        this.clp = clp;\n+    }\n+\n+    public String getTopicText() {\n+        return topicText;\n+    }\n+\n+    public void setTopicText(String topicText) {\n+        this.topicText = topicText;\n+    }\n+\n+    public Set<Assignment> getAssignments() {\n+        return assignments;\n+    }\n+\n+    public void setAssignments(Set<Assignment> assignments) {\n+        this.assignments = assignments;\n+    }\n+\n+    public Set<SubTopic> getSubTopics() {\n+        return subTopics;\n+    }\n+\n+    public void setSubTopics(Set<SubTopic> subTopics) {\n+        this.subTopics = subTopics;\n+    }\n+}"}]}

