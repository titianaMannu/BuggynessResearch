{"sha":"81c9a795ca2d6134120a82d73e60493ab48ed787","node_id":"MDY6Q29tbWl0MjA2MzY0OjgxYzlhNzk1Y2EyZDYxMzQxMjBhODJkNzNlNjA0OTNhYjQ4ZWQ3ODc=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-01-23T21:10:21Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-01-23T21:10:21Z"},"message":"Use additional contextual classloaders when deserializing lob data.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@499137 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d573d1f0da93227943dd635aca877d54240ddcac","url":"https://api.github.com/repos/apache/openjpa/git/trees/d573d1f0da93227943dd635aca877d54240ddcac"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/81c9a795ca2d6134120a82d73e60493ab48ed787","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/81c9a795ca2d6134120a82d73e60493ab48ed787","html_url":"https://github.com/apache/openjpa/commit/81c9a795ca2d6134120a82d73e60493ab48ed787","comments_url":"https://api.github.com/repos/apache/openjpa/commits/81c9a795ca2d6134120a82d73e60493ab48ed787/comments","author":null,"committer":null,"parents":[{"sha":"5dddb15cb39cddfeb8e59002fa6e1be35a5a6a26","url":"https://api.github.com/repos/apache/openjpa/commits/5dddb15cb39cddfeb8e59002fa6e1be35a5a6a26","html_url":"https://github.com/apache/openjpa/commit/5dddb15cb39cddfeb8e59002fa6e1be35a5a6a26"}],"stats":{"total":37,"additions":33,"deletions":4},"files":[{"sha":"bdb2c61d616023299711ded085add6540dbb7704","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/81c9a795ca2d6134120a82d73e60493ab48ed787/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/81c9a795ca2d6134120a82d73e60493ab48ed787/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=81c9a795ca2d6134120a82d73e60493ab48ed787","patch":"@@ -658,8 +658,7 @@ private synchronized Object setExtraFieldData(int field, Object data,\n         boolean loaded) {\n         int idx = _meta.getExtraFieldDataIndex(field);\n         if (idx == -1)\n-            throw new InternalException(String.valueOf(_meta.getField\n-                (field)));\n+            throw new InternalException(String.valueOf(_meta.getField(field)));\n \n         Object old = (_fieldImpl == null) ? null : _fieldImpl[idx];\n         if (data != null) {"},{"sha":"32db27635d71cdff94ce81131f8529d61755d7b2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Serialization.java","status":"modified","additions":32,"deletions":2,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/81c9a795ca2d6134120a82d73e60493ab48ed787/openjpa-kernel/src/main/java/org/apache/openjpa/util/Serialization.java","raw_url":"https://github.com/apache/openjpa/raw/81c9a795ca2d6134120a82d73e60493ab48ed787/openjpa-kernel/src/main/java/org/apache/openjpa/util/Serialization.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Serialization.java?ref=81c9a795ca2d6134120a82d73e60493ab48ed787","patch":"@@ -21,13 +21,15 @@\n import java.io.InputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n+import java.io.ObjectStreamClass;\n import java.io.OutputStream;\n import java.io.Serializable;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.kernel.StoreContext;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.MultiClassLoader;\n \n /**\n  * Helper class to serialize and deserialize persistent objects,\n@@ -74,7 +76,7 @@ public static Object deserialize(byte[] bytes, StoreContext ctx) {\n     public static Object deserialize(InputStream in, StoreContext ctx) {\n         try {\n             if (ctx == null)\n-                return new ObjectInputStream(in).readObject();\n+                return new ClassResolvingObjectInputStream(in).readObject();\n             return new PersistentObjectInputStream(in, ctx).readObject();\n         } catch (Exception e) {\n             throw new StoreException(e);\n@@ -106,11 +108,34 @@ protected Object replaceObject(Object obj) {\n         }\n     }\n \n+    private static class ClassResolvingObjectInputStream\n+        extends ObjectInputStream {\n+\n+        public ClassResolvingObjectInputStream(InputStream delegate)\n+            throws IOException {\n+            super(delegate);\n+        }\n+\n+        protected Class resolveClass(ObjectStreamClass desc) \n+            throws IOException, ClassNotFoundException {\n+            MultiClassLoader loader = new MultiClassLoader();\n+            addContextClassLoaders(loader);\n+            loader.addClassLoader(getClass().getClassLoader());\n+            loader.addClassLoader(MultiClassLoader.SYSTEM_LOADER);\n+            return Class.forName(desc.getName(), true, loader);\n+        }\n+\n+        protected void addContextClassLoaders(MultiClassLoader loader) {\n+            loader.addClassLoader(Thread.currentThread().\n+                getContextClassLoader());\n+        }\n+    }\n+\n     /**\n      * Object input stream that replaces oids with their objects.\n      */\n     private static class PersistentObjectInputStream\n-        extends ObjectInputStream {\n+        extends ClassResolvingObjectInputStream {\n \n         private final StoreContext _ctx;\n \n@@ -126,6 +151,11 @@ public PersistentObjectInputStream(InputStream delegate,\n             enableResolveObject(true);\n         }\n \n+        protected void addContextClassLoaders(MultiClassLoader loader) {\n+            super.addContextClassLoaders(loader);\n+            loader.addClassLoader(_ctx.getClassLoader());\n+        }\n+\n         protected Object resolveObject(Object obj) {\n             if (!(obj instanceof ObjectIdMarker))\n                 return obj;"}]}

