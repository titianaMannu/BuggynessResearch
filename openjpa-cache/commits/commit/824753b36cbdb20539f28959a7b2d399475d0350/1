{"sha":"824753b36cbdb20539f28959a7b2d399475d0350","node_id":"MDY6Q29tbWl0MjA2MzY0OjgyNDc1M2IzNmNiZGIyMDUzOWYyODk1OWE3YjJkMzk5NDc1ZDAzNTA=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2012-02-08T22:38:07Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2012-02-08T22:38:07Z"},"message":"OPENJPA-2119: Added support for generating a constructor and greater support for tabbing. Also fixed a number of bugs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1242154 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"38fd935666c6c289759bc6c33808a481bdb391e9","url":"https://api.github.com/repos/apache/openjpa/git/trees/38fd935666c6c289759bc6c33808a481bdb391e9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/824753b36cbdb20539f28959a7b2d399475d0350","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/824753b36cbdb20539f28959a7b2d399475d0350","html_url":"https://github.com/apache/openjpa/commit/824753b36cbdb20539f28959a7b2d399475d0350","comments_url":"https://api.github.com/repos/apache/openjpa/commits/824753b36cbdb20539f28959a7b2d399475d0350/comments","author":null,"committer":null,"parents":[{"sha":"91eb9d4792818cf0aa0ffe43c0972bc74cd5739b","url":"https://api.github.com/repos/apache/openjpa/commits/91eb9d4792818cf0aa0ffe43c0972bc74cd5739b","html_url":"https://github.com/apache/openjpa/commit/91eb9d4792818cf0aa0ffe43c0972bc74cd5739b"}],"stats":{"total":133,"additions":121,"deletions":12},"files":[{"sha":"6612393a1a53d774e5914168388db5096cb882f5","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/util/SourceCode.java","status":"modified","additions":120,"deletions":12,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/824753b36cbdb20539f28959a7b2d399475d0350/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/util/SourceCode.java","raw_url":"https://github.com/apache/openjpa/raw/824753b36cbdb20539f28959a7b2d399475d0350/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/util/SourceCode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/util/SourceCode.java?ref=824753b36cbdb20539f28959a7b2d399475d0350","patch":"@@ -127,7 +127,7 @@ private boolean addImport(ClassName name) {\n \t * @param name fully-qualified name of a class\n \t * @return an existing class name instance or a new one. \n \t */\n-\tClassName getOrCreateImport(String name) {\n+\tpublic ClassName getOrCreateImport(String name) {\n \t    for (Import i : imports) {\n \t        if (i.name.getFullName().equals(name))\n \t            return i.name;\n@@ -368,6 +368,7 @@ public void write(PrintWriter out, int tab) {\n \t\tprivate List<ClassName> interfaces = new ArrayList<ClassName>();\n \t    private Set<Field> fields   = new TreeSet<Field>();\n \t    private Set<Method> methods = new TreeSet<Method>();\n+\t    private Set<Constructor> constructors = new TreeSet<Constructor>();\n \t\t\n \t\tpublic Class(String name) {\n \t\t\tsuper(name, getOrCreateImport(name));\n@@ -439,6 +440,13 @@ protected Method addMethod(String m, ClassName retType) {\n \t        return method;\n \t    }\n \n+\t    public Constructor addConstructor(){\n+\t        Constructor c = new Constructor(type.simpleName);\n+\t           if (!constructors.add(c)) \n+\t                throw new IllegalArgumentException(_loc.get(\n+\t                    \"src-duplicate-constructor\", c, this).toString());\n+\t            return c;\n+\t    }\n \t    public void write(PrintWriter out, int tab) {\n \t\t\tsuper.write(out, tab);\n \t\t\tif (isAbstract) \n@@ -452,6 +460,9 @@ public void write(PrintWriter out, int tab) {\n \t\t\tout.println(SPACE + BLOCK_DELIMITER.start);\n \t        for (Field field:fields) \n \t            field.write(out, 1);\n+\t        for(Constructor ctor : constructors){\n+\t            ctor.write(out, 1);\n+\t        }\n \t        for (Method method:methods) \n \t            method.write(out, 1);\n \t        out.println(BLOCK_DELIMITER.end);\n@@ -536,11 +547,13 @@ public boolean equals(Object other) {\n \t * \n \t *\n \t */\n-\tclass Method  extends Element<Method> {\n+\tpublic class Method extends Element<Method> {\n \t\tprivate boolean isAbstract;\n \t\tprivate List<Argument<ClassName,String>> args = new ArrayList<Argument<ClassName,String>>();\n \t\tprivate List<String> codeLines = new ArrayList<String>();\n-\t\t\n+\t\tint tabCount = 0;\n+\t\tString tab = \"\";\n+\n         Method(String n, String t) {\n             this(n, getOrCreateImport(t));\n         }\n@@ -555,16 +568,42 @@ public Method addArgument(Argument<ClassName,String> arg) {\n \t\t\treturn this;\n \t\t}\n \t\t\n-\t\tpublic Method addCodeLine(String line) {\n-\t\t\tif (isAbstract)\n-                throw new IllegalStateException(\"abstract method \" + name \n-\t\t\t\t    + \" can not have body\");\n-\t\t\tif (!line.endsWith(SEMICOLON))\n-\t\t\t    line = line + SEMICOLON;\n-\t\t\tcodeLines.add(line);\n-\t\t\treturn this;\n+\t\tpublic Method addArgument(String className, String argName){\n+\t\t    ClassName cn = getOrCreateImport(className);\n+\t\t    args.add(new Argument<ClassName, String>(cn, argName,\" \"));\n+\t\t    return this;\n \t\t}\n \t\t\n+        public void setTab(boolean inc) {\n+            if (inc)\n+                tabCount++;\n+            else\n+                tabCount--;\n+            tab = \"\";\n+            for (int i = 0; i < tabCount * TABSIZE; i++) {\n+                tab += SPACE;\n+            }\n+        }\n+\n+        public Method addCodeLine(String line) {\n+            if (isAbstract)\n+                throw new IllegalStateException(\"abstract method \" + name + \" can not have body\");\n+            // This doesn't handle try{ ... catch(){ if{\n+            if (line.endsWith(\"{\") || line.endsWith(\"}\")) {\n+\n+            }\n+            if (!line.endsWith(SEMICOLON)\n+                && !(line.isEmpty() || line.endsWith(\"{\") || line.endsWith(\"}\") || line.startsWith(\"if\")))\n+                line = line + SEMICOLON;\n+            codeLines.add(tab + line);\n+            return this;\n+        }\n+\t    // if tabInc = true, the current line, and all following lines will be tabbed. If false, a tab will be removed.\n+        public Method addCodeLine(String line, boolean tabInc) {\n+            setTab(tabInc);\n+            return addCodeLine(line);\n+        }\n+\t\t\n \t\tpublic Method makeAbstract() {\n \t\t\tif (codeLines.isEmpty())\n \t\t\t\tisAbstract = true;\n@@ -607,6 +646,75 @@ public boolean equals(Object other) {\n \t\t}\n \t}\n \t\n+\tpublic class Constructor extends Element<Constructor> {\n+\t    private List<Argument<ClassName,String>> args = new ArrayList<Argument<ClassName,String>>();\n+        private List<String> codeLines = new ArrayList<String>();\n+        int tabCount = 0;\n+        String tab = \"\";\n+        \n+\t    public Constructor(String name) {\n+\t        super(name, null);\n+\t        makePublic();\n+        }\n+        \n+        public Constructor addArgument(Argument<ClassName,String> arg) {\n+            args.add(arg);\n+            return this;\n+        }\n+\n+        public Constructor addArgument(String className, String argName) {\n+            ClassName cn = getOrCreateImport(className);\n+            args.add(new Argument<ClassName, String>(cn, argName, \" \"));\n+            return this;\n+        }\n+        \n+        public Constructor addCodeLine(String line) {\n+            // This doesn't handle try{ ... catch(){ if{\n+            if (line.endsWith(\"{\") || line.endsWith(\"}\")) {\n+\n+            }\n+            if (!line.endsWith(SEMICOLON)\n+                && !(line.isEmpty() || line.endsWith(\"{\") || line.endsWith(\"}\") || line.startsWith(\"if\")))\n+                line = line + SEMICOLON;\n+            codeLines.add(tab + line);\n+            return this;\n+        }\n+        /**\n+         *  if tabInc = true, the current line, and all following lines will be tabbed. If false, a tab will be removed.\n+         */\n+        public Constructor addCodeLine(String line, boolean tabInc) {\n+            setTab(tabInc);\n+            return addCodeLine(line);\n+        }\n+        \n+        public void setTab(boolean inc) {\n+            if (inc)\n+                tabCount++;\n+            else\n+                tabCount--;\n+            tab = \"\";\n+            for (int i = 0; i < tabCount * TABSIZE; i++) {\n+                tab += SPACE;\n+            }\n+        }\n+        \n+        @Override\n+        public void write(PrintWriter out, int tab) {\n+            out.println(BLANK);\n+            super.write(out, tab);\n+            out.print(name);\n+            writeList(out, BLANK, args, ARGS_DELIMITER, true);\n+\n+            out.println(SPACE + BLOCK_DELIMITER.start);\n+            for (String line : codeLines) {\n+                tab(out, tab+1);\n+                out.println(line);\n+            }\n+            tab(out, tab);\n+            out.println(BLOCK_DELIMITER.end);\n+        }\n+\t    \n+\t}\n \t/**\n \t * Represents <code>import</code> statement.\n \t *\n@@ -875,7 +983,7 @@ boolean usingFullName() {\n \t    final char end;\n \t    \n         public Delimiter() {\n-            this((char)0, (char)0);\n+            this((char)' ', (char)' ');\n         }\n \n \t    public Delimiter(String pair) {"},{"sha":"812144b3d8851f59ebc3f6b36202d88d8645f403","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/util/localizer.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/824753b36cbdb20539f28959a7b2d399475d0350/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/util/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/824753b36cbdb20539f28959a7b2d399475d0350/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/util/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/util/localizer.properties?ref=824753b36cbdb20539f28959a7b2d399475d0350","patch":"@@ -16,6 +16,7 @@\n # under the License.\n src-duplicate-field: \"{0}\" is found to be a duplicated field in Class {1}. \n src-duplicate-method: \"{0}\" is found to be a duplicated method in Class {1}.\n+src-duplicate-constructor: \"{0}\" is found to be a duplicated constructor in Class {1}.\n src-invalid-method: \"{0}\" is not a valid method name. \\\n It must be a non-reserved Java token and a valid Java identifier.\n src-invalid-type: \"{0}\" is not a valid type name. It must be a valid Java package name, a non-reserved \\"}]}

