{"sha":"828e08ee0e921f61df972f5b190b3bbf67c13b42","node_id":"MDY6Q29tbWl0MjA2MzY0OjgyOGUwOGVlMGU5MjFmNjFkZjk3MmY1YjE5MGIzYmJmNjdjMTNiNDI=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-21T20:01:44Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2009-09-21T20:01:44Z"},"message":"OPENJPA-1182 Backwards compatibility issues - PreUpdate and PostUpdate behavior.  Patch contributed by Tim McConnell with some minor package name and version checking changes.  Doc updates by Donald Woods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@817389 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1e09dd2699ab0f87eafdc75cfab661736ef7996d","url":"https://api.github.com/repos/apache/openjpa/git/trees/1e09dd2699ab0f87eafdc75cfab661736ef7996d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/828e08ee0e921f61df972f5b190b3bbf67c13b42","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/828e08ee0e921f61df972f5b190b3bbf67c13b42","html_url":"https://github.com/apache/openjpa/commit/828e08ee0e921f61df972f5b190b3bbf67c13b42","comments_url":"https://api.github.com/repos/apache/openjpa/commits/828e08ee0e921f61df972f5b190b3bbf67c13b42/comments","author":null,"committer":null,"parents":[{"sha":"e53f8514f463fcc943bb8152f9f821419a8fa7dd","url":"https://api.github.com/repos/apache/openjpa/commits/e53f8514f463fcc943bb8152f9f821419a8fa7dd","html_url":"https://github.com/apache/openjpa/commit/e53f8514f463fcc943bb8152f9f821419a8fa7dd"}],"stats":{"total":270,"additions":268,"deletions":2},"files":[{"sha":"2e8c2b2c3d2ca35417f6cfd0c3bdd79cc2e90de2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestMessageListener.java","status":"added","additions":239,"deletions":0,"changes":239,"blob_url":"https://github.com/apache/openjpa/blob/828e08ee0e921f61df972f5b190b3bbf67c13b42/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestMessageListener.java","raw_url":"https://github.com/apache/openjpa/raw/828e08ee0e921f61df972f5b190b3bbf67c13b42/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestMessageListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestMessageListener.java?ref=828e08ee0e921f61df972f5b190b3bbf67c13b42","patch":"@@ -0,0 +1,239 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agEmployee_Last_Name to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.compat;\n+\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.callbacks.Message;\n+import org.apache.openjpa.persistence.callbacks.MessageListenerImpl;\n+import org.apache.openjpa.conf.OpenJPAVersion;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+/**\n+ * <b>TestCompatibile</b> is used to test various backwards compatibility scenarios between JPA 2.0 and JPA 1.2\n+ * \n+ * <p>The following scenarios are tested:\n+ * <ol>\n+ * <li>preUpdate and postUpdate behavior in JPA 2.0 is different than in 1.2\n+ * <li>TBD\n+ * </ol>\n+ * <p> \n+ * <b>Note(s):</b>\n+ * <ul>\n+ * <li>The proper openjpa.Compatibility value(s) must be provided in order for the testcases to succeed\n+ * </ul>\n+ */\n+public class TestMessageListener extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(Message.class, \n+              \"openjpa.Compatibility\", \"default\",\n+              DROP_TABLES);\n+    }\n+\n+    public void testUpdateInPreUpdate() {\n+        // Create a new EntityManager from the EntityManagerFactory. The\n+        // EntityManager is the main object in the persistence API, and is\n+        // used to create, delete, and query objects, as well as access\n+        // the current transaction\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        try {\n+            // Begin a new local transaction so that we can persist a new entity\n+            em.getTransaction().begin();\n+\n+            MessageListenerImpl.resetCounters();\n+\n+            // Create and persist a new Message entity\n+            Message message = new Message(\"Hello Persistence!\");\n+            assertNull(\"Test message's created field to be null.\", message.getCreated());\n+            assertNull(\"Test message's updated field to be null.\", message.getUpdated());\n+\n+            em.persist(message);\n+\n+            // Pre-persist invoked, created and updated fields set\n+            assertStatus(1, 0, 0, 0, 0, 0, 0);\n+            assertNotNull(\"Test message's created field being set.\", message.getCreated());\n+            assertNotNull(\"Test message's updated field being set.\", message.getUpdated());\n+\n+            // Perform a simple query to get the Message\n+            Query q = em.createQuery(\"select m from Message m where m.id=\" + message.getId());\n+            Message m = (Message) q.getSingleResult();\n+            assertEquals(\"Test first expected message.\", \"Hello Persistence!\",m.getMessage());\n+            assertNotNull(\"Test message's created field being set.\", m.getCreated());\n+            assertNotNull(\"Test message's updated field being set.\", m.getUpdated());\n+\n+            // Query cause flush to occur, hence fire the postPersist event\n+            assertStatus(1, 1, 0, 0, 0, 0, 0);\n+\n+            // Create and persist another new Message entity\n+            message = new Message(\"Hello Persistence 2!\");\n+            assertNull(\"Test message's created field to be null.\", message.getCreated());\n+            assertNull(\"Test message's updated field to be null.\", message.getUpdated());\n+\n+            em.persist(message);\n+\n+            // Pre-persist invoked, created and updated fields set\n+            assertStatus(2, 1, 0, 0, 0, 0, 0);\n+            assertNotNull(\"Test message's created field being set.\", message.getCreated());\n+            assertNotNull(\"Test message's updated field being set.\", message.getUpdated());\n+\n+            em.getTransaction().commit();\n+\n+            // Complete the 2nd @postPersist\n+            // preUpdate and postUpdate are called in 1.2.x but not in 1.3 or later\n+            // See JPA2 Spec 3.5.2 Note about this being implementation dependent\n+            if ((OpenJPAVersion.MAJOR_RELEASE >= 2) ||\n+                ((OpenJPAVersion.MAJOR_RELEASE == 1) &&\n+                 (OpenJPAVersion.MINOR_RELEASE >= 3))) {\n+                assertStatus(2, 2, 0, 0, 0, 0, 0);\n+            } else {\n+                // prior to 2.0, pre/postUpdate was called\n+                assertStatus(2, 2, 1, 1, 0, 0, 0);\n+            }            \n+\n+            // Make an update to trigger the pre/postUpdater callbacks\n+            em.getTransaction().begin();\n+            message = em.find(Message.class,message.getId());\n+            message.setMessage(\"Update field and trigger pre/postUpdate\");\n+            em.getTransaction().commit();\n+\n+            // Complete the 2nd @postPersist\n+            if ((OpenJPAVersion.MAJOR_RELEASE >= 2) ||\n+                ((OpenJPAVersion.MAJOR_RELEASE == 1) &&\n+                    (OpenJPAVersion.MINOR_RELEASE >= 3))) {\n+                assertStatus(2, 2, 1, 1, 0, 0, 0);\n+            } else {\n+                assertStatus(2, 2, 2, 2, 0, 0, 0);\n+            }            \n+        }\n+        finally {\n+            if (em != null && em.getTransaction().isActive())\n+                em.getTransaction().rollback();\n+            if (em != null && em.isOpen())\n+                em.close();\n+        }\n+    } \n+\n+    public void testUpdateInPreUpdate2() {\n+        // Create a new EntityManager from the EntityManagerFactory. The\n+        // EntityManager is the main object in the persistence API, and is\n+        // used to create, delete, and query objects, as well as access\n+        // the current transaction\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        try {\n+            // Begin a new local transaction so that we can persist a new entity\n+            em.getTransaction().begin();\n+\n+            MessageListenerImpl.resetCounters();\n+\n+            // Create and persist a new Message entity\n+            Message message = new Message(\"Hello Persistence!\");\n+            assertNull(\"Test message's created field to be null.\", message.getCreated());\n+            assertNull(\"Test message's updated field to be null.\", message.getUpdated());\n+\n+            em.persist(message);\n+\n+            // Pre-persist invoked, created and updated fields set\n+            assertStatus(1, 0, 0, 0, 0, 0, 0);\n+            assertNotNull(\"Test message's created field being set.\", message.getCreated());\n+            assertNotNull(\"Test message's updated field being set.\", message.getUpdated());\n+\n+            // Perform a simple query to get the Message\n+            Query q = em.createQuery(\"select m from Message m where m.id=\" + message.getId());\n+            Message m = (Message) q.getSingleResult();\n+            assertEquals(\"Test first expected message.\", \"Hello Persistence!\",m.getMessage());\n+            assertNotNull(\"Test message's created field being set.\", m.getCreated());\n+            assertNotNull(\"Test message's updated field being set.\", m.getUpdated());\n+\n+            // Query cause flush to occur, hence fire the postPersist event\n+            assertStatus(1, 1, 0, 0, 0, 0, 0);\n+\n+            // Create and persist another new Message entity\n+            message = new Message(\"Hello Persistence 2!\");\n+            assertNull(\"Test message's created field to be null.\", message.getCreated());\n+            assertNull(\"Test message's updated field to be null.\", message.getUpdated());\n+\n+            em.persist(message);\n+\n+            // Pre-persist invoked, created and updated fields set\n+            assertStatus(2, 1, 0, 0, 0, 0, 0);\n+            assertNotNull(\"Test message's created field being set.\", message.getCreated());\n+            assertNotNull(\"Test message's updated field being set.\", message.getUpdated());\n+\n+            // Update the entity before committing\n+            message.setMessage(\"Combined Create and Update triggers\");\n+            // preUpdate and postUpdate are called in 1.2.x but not in 1.3 or later\n+            // See JPA2 Spec 3.5.2 Note about this being implementation dependent\n+            if ((OpenJPAVersion.MAJOR_RELEASE >= 2) ||\n+                ((OpenJPAVersion.MAJOR_RELEASE == 1) &&\n+                 (OpenJPAVersion.MINOR_RELEASE >= 3))) {\n+                assertStatus(2, 1, 0, 0, 0, 0, 0);\n+            } else {\n+                // prior to 2.0, pre/postUpdate was called\n+                assertStatus(2, 1, 1, 1, 0, 0, 0);\n+            }            \n+\n+            em.getTransaction().commit();\n+\n+            // Complete the 2nd @postPersist\n+            // preUpdate and postUpdate are called in 1.2.x but not in 1.3 or later\n+            if ((OpenJPAVersion.MAJOR_RELEASE >= 2) ||\n+                ((OpenJPAVersion.MAJOR_RELEASE == 1) &&\n+                 (OpenJPAVersion.MINOR_RELEASE >= 3))) {\n+                assertStatus(2, 2, 0, 0, 0, 0, 0);\n+            } else {\n+                assertStatus(2, 2, 1, 1, 0, 0, 0);\n+            }            \n+\n+            // Make an update to trigger the pre/postUpdater callbacks\n+            em.getTransaction().begin();\n+            message = em.find(Message.class,message.getId());\n+            message.setMessage(\"Update field and trigger pre/postUpdate\");\n+            em.getTransaction().commit();\n+\n+            // Complete the 2nd @postPersist\n+            if ((OpenJPAVersion.MAJOR_RELEASE >= 2) ||\n+                ((OpenJPAVersion.MAJOR_RELEASE == 1) &&\n+                 (OpenJPAVersion.MINOR_RELEASE >= 3))) {\n+                assertStatus(2, 2, 1, 1, 0, 0, 0);\n+            } else {\n+                assertStatus(2, 2, 2, 2, 0, 0, 0);\n+            }            \n+        }\n+        finally {\n+            if (em != null && em.getTransaction().isActive())\n+                em.getTransaction().rollback();\n+            if (em != null && em.isOpen())\n+                em.close();\n+        }\n+    } \n+\n+    private void assertStatus(int prePersist, int postPersist, int preUpdate, \n+                              int postUpdate, int preRemove, int postRemove, int postLoad) {\n+        assertEquals(\"prePersist\", prePersist, MessageListenerImpl.prePersistCount);\n+        assertEquals(\"postPersist\", postPersist, MessageListenerImpl.postPersistCount);\n+        assertEquals(\"preUpdate\", preUpdate, MessageListenerImpl.preUpdateCount);\n+        assertEquals(\"postUpdate\", postUpdate, MessageListenerImpl.postUpdateCount);\n+        assertEquals(\"preRemove\", preRemove, MessageListenerImpl.preRemoveCount);\n+        assertEquals(\"postRemove\", postRemove, MessageListenerImpl.postRemoveCount);\n+        assertEquals(\"postLoad\", postLoad, MessageListenerImpl.postLoadCount);\n+    }\n+}\n+"},{"sha":"f4d971716ef0cab6893eb86aafbafcb7399f9137","filename":"openjpa-project/src/doc/manual/migration_considerations.xml","status":"modified","additions":29,"deletions":2,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/828e08ee0e921f61df972f5b190b3bbf67c13b42/openjpa-project/src/doc/manual/migration_considerations.xml","raw_url":"https://github.com/apache/openjpa/raw/828e08ee0e921f61df972f5b190b3bbf67c13b42/openjpa-project/src/doc/manual/migration_considerations.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/migration_considerations.xml?ref=828e08ee0e921f61df972f5b190b3bbf67c13b42","patch":"@@ -203,8 +203,10 @@\n     \t\t<para>\n     \t\tThe following sections indicate internal changes between\n     \t\tOpenJPA 1.x.x releases and the 2.0 release. As these are\n-                internal implementation classes, no changes to applications\n-                should be required.\n+                internal implementation specific behaviors not covered by\n+                the JPA specification, no changes should be required for\n+                applications that did not use or depend upon OpenJPA specific\n+                APIs or behavior.\n     \t\t</para>\n     \t\t<section id=\"getStrategy\">\n     \t\t\t<title>\n@@ -221,6 +223,31 @@\n \t\t\t\texample test case demonstrating the change.\n \t\t\t</para>\n \t\t</section>\n+    \t\t<section id=\"prePostUpdate\">\n+    \t\t\t<title>\n+    \t\t\t\tPreUpdate/PostUpdate Life Cycle Callbacks\n+    \t\t\t</title>\n+    \t\t\t<para>\n+    \t\t\t\tIf an entity was updated between the persist()\n+                                and commit() operations in OpenJPA 1.x, then \n+                                any PreUpdate and PostUpdate life cycle callback\n+                                methods would be executed.  Starting in OpenJPA\n+                                1.3 and 2.0, these callbacks will not get \n+                                executed.\n+\t\t\t</para>\n+\t\t\t<para>\n+                                The JPA 2.0 specification section on \"Semantics\n+                                of the Life Cycle Callback Methods for Entities\"\n+                                has been updated to include a Note that the\n+                                callback behavior for updating an entity after\n+                                the persist operation is implementation specific\n+                                and should not be relied upon.\n+\t\t\t</para>\n+\t\t\t<para>\n+                                See OPENJPA-1182 for an\n+\t\t\t\texample test case demonstrating the change.\n+\t\t\t</para>\n+\t\t</section>\n         </section>\n     </section>\n </appendix>"}]}

