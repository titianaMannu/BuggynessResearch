{"sha":"82e145860457bc6d2870c03f974582737252636c","node_id":"MDY6Q29tbWl0MjA2MzY0OjgyZTE0NTg2MDQ1N2JjNmQyODcwYzAzZjk3NDU4MjczNzI1MjYzNmM=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2015-07-07T08:10:56Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2015-07-07T08:10:56Z"},"message":"OPENJPA-2341 add unit test for Strategy handling\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1689594 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dcd064ca0705cf9b1ea4f4f1d34074ff3fbdf4c0","url":"https://api.github.com/repos/apache/openjpa/git/trees/dcd064ca0705cf9b1ea4f4f1d34074ff3fbdf4c0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/82e145860457bc6d2870c03f974582737252636c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/82e145860457bc6d2870c03f974582737252636c","html_url":"https://github.com/apache/openjpa/commit/82e145860457bc6d2870c03f974582737252636c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/82e145860457bc6d2870c03f974582737252636c/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"f6ba63def5596bfe9ef9e7fb3fe84e230afeb84d","url":"https://api.github.com/repos/apache/openjpa/commits/f6ba63def5596bfe9ef9e7fb3fe84e230afeb84d","html_url":"https://github.com/apache/openjpa/commit/f6ba63def5596bfe9ef9e7fb3fe84e230afeb84d"}],"stats":{"total":267,"additions":248,"deletions":19},"files":[{"sha":"d276c91af04c3f9cc4ab765038f063e81cab65b1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/ImplicitValueStrategyEntity.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/82e145860457bc6d2870c03f974582737252636c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/ImplicitValueStrategyEntity.java","raw_url":"https://github.com/apache/openjpa/raw/82e145860457bc6d2870c03f974582737252636c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/ImplicitValueStrategyEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/ImplicitValueStrategyEntity.java?ref=82e145860457bc6d2870c03f974582737252636c","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.strategy.value;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+\n+/**\n+ * Similar to {@link ValueStrategyEntity} but this time\n+ * we do not annotate any &#064;Strategy but we give it via the\n+ * configured MappingDefaults FieldStrategies.\n+ */\n+@Entity\n+public class ImplicitValueStrategyEntity {\n+    @Id\n+    private String id;\n+\n+    /**\n+     * This field gets AUTOMATICALLY converted by OpenJPA because we registered\n+     * the {@link PrincipalValueStrategyHandler} in persistence.xml.\n+     * Currently this needs either to be Serializable, so we cannot store Principal but only the impl :(\n+     */\n+    private PrincipalValueStrategyHandler.TestPrincipal user;\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+\n+    public PrincipalValueStrategyHandler.TestPrincipal getUser() {\n+        return user;\n+    }\n+\n+    public void setUser(PrincipalValueStrategyHandler.TestPrincipal user) {\n+        this.user = user;\n+    }\n+}"},{"sha":"18f875aec8d1b9faf57387b6f6983fa692dbaa64","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/PrincipalValueStrategyHandler.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/82e145860457bc6d2870c03f974582737252636c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/PrincipalValueStrategyHandler.java","raw_url":"https://github.com/apache/openjpa/raw/82e145860457bc6d2870c03f974582737252636c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/PrincipalValueStrategyHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/PrincipalValueStrategyHandler.java?ref=82e145860457bc6d2870c03f974582737252636c","patch":"@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.strategy.value;\n+\n+import java.io.Serializable;\n+import java.security.Principal;\n+\n+import org.apache.openjpa.jdbc.kernel.JDBCStore;\n+import org.apache.openjpa.jdbc.meta.ValueMapping;\n+import org.apache.openjpa.jdbc.meta.strats.AbstractValueHandler;\n+import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.schema.ColumnIO;\n+import org.apache.openjpa.meta.JavaTypes;\n+\n+/**\n+ * A ValueHandler which handles a Principal and stores it as String representation.\n+ * I use Principal because this class exists in every JDK. A more practical example\n+ * could be joda LocalDate or the new Java8 Date classes.\n+ */\n+public class PrincipalValueStrategyHandler extends AbstractValueHandler {\n+\n+    private static final long serialVersionUID = 8371304701543038775L;\n+\n+    private static final PrincipalValueStrategyHandler _instance = new PrincipalValueStrategyHandler();\n+\n+    public static PrincipalValueStrategyHandler getInstance() {\n+        return _instance;\n+    }\n+\n+    @Override\n+    public Column[] map(ValueMapping arg0, String name, ColumnIO arg2,\n+                        boolean arg3) {\n+\n+        Column col = new Column();\n+        col.setName(name);\n+        col.setJavaType(JavaTypes.STRING);\n+\n+        return new Column[]{col};\n+    }\n+\n+    public Object toDataStoreValue(ValueMapping vm, Object val, JDBCStore store) {\n+\n+        if (val instanceof Principal) {\n+            return ((Principal) val).getName();\n+        }\n+\n+        return null;\n+    }\n+\n+    public Object toObjectValue(ValueMapping vm, final Object val) {\n+        if (val == null || !(val instanceof String)) {\n+            return null;\n+        }\n+\n+        return new TestPrincipal((String) val);\n+    }\n+\n+\n+    public static class TestPrincipal implements Principal, Serializable {\n+        private final String name;\n+\n+        public TestPrincipal(String name) {\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return name;\n+        }\n+    }\n+}"},{"sha":"a697068edda5d57c6c22353437dee85388b5ceab","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/TestImplicitValueStrategy.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/82e145860457bc6d2870c03f974582737252636c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/TestImplicitValueStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/82e145860457bc6d2870c03f974582737252636c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/TestImplicitValueStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/TestImplicitValueStrategy.java?ref=82e145860457bc6d2870c03f974582737252636c","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.strategy.value;\n+\n+import java.security.Principal;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+public class TestImplicitValueStrategy extends SQLListenerTestCase {\n+    public void setUp(){\n+        setUp(ImplicitValueStrategyEntity.class, DROP_TABLES,\n+                \"openjpa.jdbc.MappingDefaults\",\n+                \"ForeignKeyDeleteAction=restrict, JoinForeignKeyDeleteAction=restrict, \" +\n+                    \"FieldStrategies='java.security.Principal=\" +\n+                    \"org.apache.openjpa.persistence.strategy.value.PrincipalValueStrategyHandler'\",\n+                \"openjpa.RuntimeUnenhancedClasses\", \"supported\"\n+                );\n+        assertNotNull(emf);\n+\n+        create();\n+    }\n+\n+    public void testIt() {\n+        EntityManager em = emf.createEntityManager();\n+        ImplicitValueStrategyEntity se = em.find(ImplicitValueStrategyEntity.class, \"id1\");\n+        assertNotNull(se);\n+        assertNotNull(se.getUser());\n+        assertEquals(\"name1\", se.getUser().getName());\n+\n+        em.close();\n+    }\n+\n+    private void create() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        ImplicitValueStrategyEntity stratEnt = new ImplicitValueStrategyEntity();\n+        stratEnt.setId(\"id1\");\n+        PrincipalValueStrategyHandler.TestPrincipal user = new PrincipalValueStrategyHandler.TestPrincipal(\"name1\");\n+        stratEnt.setUser(user);\n+\n+        em.persist(stratEnt);\n+\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+}"},{"sha":"cc63e07d81302b8ec45f113c1fbbee9d023f0def","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/TestValueStrategy.java","status":"modified","additions":24,"deletions":19,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/82e145860457bc6d2870c03f974582737252636c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/TestValueStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/82e145860457bc6d2870c03f974582737252636c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/TestValueStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/TestValueStrategy.java?ref=82e145860457bc6d2870c03f974582737252636c","patch":"@@ -24,31 +24,36 @@\n \n public class TestValueStrategy extends SQLListenerTestCase {\n     public void setUp(){\n-      setUp(ValueStrategyEntity.class, DROP_TABLES);\n-      assertNotNull(emf);\n-      \n-      create();\n-}\n+        setUp(ValueStrategyEntity.class, DROP_TABLES,\n+                \"openjpa.RuntimeUnenhancedClasses\", \"supported\");\n+        assertNotNull(emf);\n+\n+        create();\n+    }\n     \n     public void testIt() {\n         EntityManager em = emf.createEntityManager();\n         ValueStrategyEntity se = em.find(ValueStrategyEntity.class, \"id1\");\n         assertNotNull(se);\n-        \n+        assertEquals(\"name1\", se.getName());\n+        assertNotNull(se.getUser());\n+        assertEquals(\"name1\", se.getUser().getName());\n+\n         em.close();\n     }\n \n-        private void create() {\n-            EntityManager em = emf.createEntityManager();\n-            em.getTransaction().begin();\n-            \n-            ValueStrategyEntity stratEnt = new ValueStrategyEntity();\n-            stratEnt.setId(\"id1\");\n-            stratEnt.setName(\"name1\");\n-            \n-            em.persist(stratEnt);\n-            \n-            em.getTransaction().commit();\n-            em.close();\n-        }\n+    private void create() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        ValueStrategyEntity stratEnt = new ValueStrategyEntity();\n+        stratEnt.setId(\"id1\");\n+        stratEnt.setName(\"name1\");\n+        stratEnt.setUser(new PrincipalValueStrategyHandler.TestPrincipal(\"name1\"));\n+\n+        em.persist(stratEnt);\n+\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n }"},{"sha":"452be844c863d2502db48724c058059be9763e53","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/ValueStrategyEntity.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/82e145860457bc6d2870c03f974582737252636c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/ValueStrategyEntity.java","raw_url":"https://github.com/apache/openjpa/raw/82e145860457bc6d2870c03f974582737252636c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/ValueStrategyEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/strategy/value/ValueStrategyEntity.java?ref=82e145860457bc6d2870c03f974582737252636c","patch":"@@ -32,6 +32,14 @@\n     @Strategy (\"org.apache.openjpa.persistence.strategy.value.ValueStrategyHandler\")\n     private String name;\n \n+    /**\n+     * This field gets AUTOMATICALLY converted by OpenJPA because we registered\n+     * the {@link PrincipalValueStrategyHandler} in persistence.xml.\n+     * Currently this needs either to be Serializable, so we cannot store Principal but only the impl :(\n+     */\n+    @Strategy(\"org.apache.openjpa.persistence.strategy.value.PrincipalValueStrategyHandler\")\n+    private PrincipalValueStrategyHandler.TestPrincipal user;\n+\n     public String getId() {\n         return id;\n     }\n@@ -48,4 +56,11 @@ public void setName(String name) {\n         this.name = name;\n     }\n \n+    public PrincipalValueStrategyHandler.TestPrincipal getUser() {\n+        return user;\n+    }\n+\n+    public void setUser(PrincipalValueStrategyHandler.TestPrincipal user) {\n+        this.user = user;\n+    }\n }"}]}

