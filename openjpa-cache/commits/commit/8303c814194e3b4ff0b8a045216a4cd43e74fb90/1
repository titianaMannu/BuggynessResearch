{"sha":"8303c814194e3b4ff0b8a045216a4cd43e74fb90","node_id":"MDY6Q29tbWl0MjA2MzY0OjgzMDNjODE0MTk0ZTNiNGZmMGI4YTA0NTIxNmE0Y2Q0M2U3NGZiOTA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-01-15T22:39:14Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-01-15T22:39:14Z"},"message":"Processing <unique-constraint> in XML descriptor and serializing the same. \nDoes not cover <unique-constraint> within Secondary or Join table.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@496522 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4c8625da63af4f7989d6879f7a48fe23d538f0b0","url":"https://api.github.com/repos/apache/openjpa/git/trees/4c8625da63af4f7989d6879f7a48fe23d538f0b0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8303c814194e3b4ff0b8a045216a4cd43e74fb90","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8303c814194e3b4ff0b8a045216a4cd43e74fb90","html_url":"https://github.com/apache/openjpa/commit/8303c814194e3b4ff0b8a045216a4cd43e74fb90","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8303c814194e3b4ff0b8a045216a4cd43e74fb90/comments","author":null,"committer":null,"parents":[{"sha":"218a000b84a4a8c6b74bb9de4dc604d720c04f66","url":"https://api.github.com/repos/apache/openjpa/commits/218a000b84a4a8c6b74bb9de4dc604d720c04f66","html_url":"https://github.com/apache/openjpa/commit/218a000b84a4a8c6b74bb9de4dc604d720c04f66"}],"stats":{"total":92,"additions":86,"deletions":6},"files":[{"sha":"608d9c2214c341f733fdc036ff03222eb2f38f2c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/8303c814194e3b4ff0b8a045216a4cd43e74fb90/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/8303c814194e3b4ff0b8a045216a4cd43e74fb90/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java?ref=8303c814194e3b4ff0b8a045216a4cd43e74fb90","patch":"@@ -330,9 +330,15 @@ public void addUnique(Unique unique) {\n         _uniques.add(unique);\n     }\n     \n+    public Unique[] getUniques() {\n+        return (_uniques == null) ? new Unique[0] :\n+            (Unique[])_uniques.toArray(new Unique[_uniques.size()]);\n+    }\n+    \n     public Unique[] getUniques(ClassMapping cm, boolean adapt) {\n         if (_uniques == null || _uniques.isEmpty())\n             return new Unique[0];\n+        \n         Iterator uniqueConstraints = _uniques.iterator();\n         Table table = cm.getTable();\n         Collection result = new ArrayList();"},{"sha":"c62579958e5a8c81bad7334393b29088fde019b9","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/MappingTag.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/8303c814194e3b4ff0b8a045216a4cd43e74fb90/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/MappingTag.java","raw_url":"https://github.com/apache/openjpa/raw/8303c814194e3b4ff0b8a045216a4cd43e74fb90/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/MappingTag.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/MappingTag.java?ref=8303c814194e3b4ff0b8a045216a4cd43e74fb90","patch":"@@ -32,6 +32,7 @@\n     ATTR_OVERRIDE,\n     ATTR_OVERRIDES,\n     COL,\n+    COLUMN_NAME,\n     COLUMN_RESULT,\n     DISCRIM_COL,\n     DISCRIM_VAL,"},{"sha":"3fb45a90c29f407088c8556ae7ab3b9a68334aba","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","status":"modified","additions":58,"deletions":2,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/8303c814194e3b4ff0b8a045216a4cd43e74fb90/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/8303c814194e3b4ff0b8a045216a4cd43e74fb90/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java?ref=8303c814194e3b4ff0b8a045216a4cd43e74fb90","patch":"@@ -69,6 +69,7 @@\n         _elems.put(\"association-override\", ASSOC_OVERRIDE);\n         _elems.put(\"attribute-override\", ATTR_OVERRIDE);\n         _elems.put(\"column\", COL);\n+        _elems.put(\"column-name\", COLUMN_NAME);\n         _elems.put(\"column-result\", COLUMN_RESULT);\n         _elems.put(\"discriminator-column\", DISCRIM_COL);\n         _elems.put(\"discriminator-value\", DISCRIM_VAL);\n@@ -85,6 +86,7 @@\n         _elems.put(\"table\", TABLE);\n         _elems.put(\"table-generator\", TABLE_GEN);\n         _elems.put(\"temporal\", TEMPORAL);\n+        _elems.put(\"unique-constraint\", UNIQUE);\n     }\n \n     private static final Localizer _loc = Localizer.forPackage\n@@ -220,8 +222,7 @@ protected Object startClassMappingElement(String name, Attributes attrs)\n                 ret = startTableGenerator(attrs);\n                 break;\n             case UNIQUE:\n-                getLog().warn(_loc.get(\"unique-constraints\", currentElement()));\n-                ret = false;\n+                ret = startUniqueConstraint(attrs);\n                 break;\n             case TEMPORAL:\n             case ENUMERATED:\n@@ -239,6 +240,9 @@ protected Object startClassMappingElement(String name, Attributes attrs)\n             case COLUMN_RESULT:\n                 ret = startColumnResult(attrs);\n                 break;\n+            case COLUMN_NAME:\n+                ret = true;\n+                break;\n             default:\n                 ret = false;\n         }\n@@ -277,6 +281,12 @@ protected void endClassMappingElement(String name)\n             case ENTITY_RESULT:\n                 endEntityResult();\n                 break;\n+            case UNIQUE:\n+                endUniqueConstraint();\n+                break;\n+            case COLUMN_NAME:\n+                endColumnName();\n+                break;\n         }\n     }\n \n@@ -846,6 +856,52 @@ private boolean startColumnResult(Attributes attrs)\n         return true;\n     }\n \n+    /** \n+     * Starts processing &lt;unique-constraint&gt; provided the tag occurs\n+     * within a ClassMapping element and <em>not</em> within a secondary\n+     * table. \n+     * Pushes the Unique element in the stack.\n+     */\n+    private boolean startUniqueConstraint(Attributes attrs) \n+        throws SAXException {\n+        Object current = currentElement();\n+        if (current instanceof ClassMapping && _secondaryTable == null) {\n+            Unique unique = new Unique();\n+            pushElement(unique);\n+            return true;\n+        } \n+        return false;\n+    }\n+    \n+    /**\n+     * Ends processing &lt;unique-constraint&gt; provided the tag occurs\n+     * within a ClassMapping element and <em>not</em> within a secondary\n+     * table. The stack is popped and the Unique element is added to the\n+     * ClassMappingInfo. \n+     */\n+    private void endUniqueConstraint() {\n+        Unique unique = (Unique)popElement();\n+        Object current = currentElement();\n+        if (current instanceof ClassMapping && _secondaryTable == null)\n+            ((ClassMapping)current).getMappingInfo().addUnique(unique);\n+    }\n+    \n+    /**\n+     * Ends processing &lt;column-name&gt; tag by adding the column name in\n+     * the current Unique element that resides in the top of the stack.\n+     */\n+    private boolean endColumnName() {\n+        Object current = currentElement();\n+        if (current instanceof Unique) {\n+            Unique unique = (Unique)current;\n+            Column column = new Column();\n+            column.setName(this.currentText());\n+            unique.addColumn(column);\n+            return true;\n+        }\n+        return false;\n+    }\n+    \n     /**\n      * Track unique column settings.\n \t */"},{"sha":"500b76a536e4f9a9cf78efce928aec219e028eec","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingSerializer.java","status":"modified","additions":21,"deletions":4,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/8303c814194e3b4ff0b8a045216a4cd43e74fb90/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/8303c814194e3b4ff0b8a045216a4cd43e74fb90/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingSerializer.java?ref=8303c814194e3b4ff0b8a045216a4cd43e74fb90","patch":"@@ -42,6 +42,7 @@\n import org.apache.openjpa.jdbc.meta.strats.FullClassStrategy;\n import org.apache.openjpa.jdbc.meta.strats.VerticalClassStrategy;\n import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.schema.Unique;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n@@ -181,9 +182,10 @@ protected void serializeClassMappingContent(ClassMetaData mapping)\n         ClassMapping cls = (ClassMapping) mapping;\n         ClassMappingInfo info = cls.getMappingInfo();\n         serializeTable(info.getTableName(), \"table\", Strings\n-            .getClassName(mapping.getDescribedType()), null);\n+            .getClassName(mapping.getDescribedType()), null, \n+            info.getUniques());\n         for (String second : info.getSecondaryTableNames())\n-            serializeTable(second, \"secondary-table\", null, info);\n+            serializeTable(second, \"secondary-table\", null, info, null);\n         serializeColumns(info, ColType.PK_JOIN, null);\n     }\n \n@@ -218,14 +220,15 @@ else if (FullClassStrategy.ALIAS.equals(strat))\n      * in the given {@link ClassMappingInfo}.\n      */\n     private void serializeTable(String table, String elementName,\n-        String defaultName, ClassMappingInfo secondaryInfo)\n+        String defaultName, ClassMappingInfo secondaryInfo, Unique[] uniques)\n         throws SAXException {\n         List<Column> cols = null;\n         if (secondaryInfo != null)\n             cols = (List<Column>) secondaryInfo.getSecondaryTableJoinColumns\n                 (table);\n \n-        boolean print = cols != null && cols.size() > 0;\n+        boolean print = (cols != null && cols.size() > 0) || \n+            (uniques !=null || uniques.length > 0);\n         if (table != null\n             && (defaultName == null || !defaultName.equals(table))) {\n             print = true;\n@@ -243,6 +246,9 @@ private void serializeTable(String table, String elementName,\n                 for (Column col : cols)\n                     serializeColumn(col, ColType.PK_JOIN, null, false);\n             }\n+            if (uniques != null)\n+                for (Unique unique: uniques)\n+                    serializeUniqueConstraint(unique);\n             endElement(elementName);\n         }\n     }\n@@ -509,6 +515,17 @@ private void serializeColumn(Column col, ColType type, String secondary,\n         }\n     }\n \n+    private void serializeUniqueConstraint(Unique unique) throws SAXException {\n+        startElement(\"unique-constraint\");\n+        Column[] columns = unique.getColumns();\n+        for (Column column:columns) {\n+            startElement(\"column-name\");\n+            addText(column.getName());\n+            endElement(\"column-name\");\n+        }\n+        endElement(\"unique-constraint\");\n+    }\n+    \n     @Override\n     protected SerializationComparator newSerializationComparator() {\n         return new MappingSerializationComparator();"}]}

