{"sha":"830cc35014e422f0bdf6b43cb7e1c709560876f1","node_id":"MDY6Q29tbWl0MjA2MzY0OjgzMGNjMzUwMTRlNDIyZjBiZGY2YjQzY2I3ZTFjNzA5NTYwODc2ZjE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-10-31T01:27:23Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-10-31T01:27:23Z"},"message":"Additional test cases for JPA annotations; commented-out test for OPENJPA-425.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@590529 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"249c7b5c2938381a7ebe2ddb0414096ec7f4b1b9","url":"https://api.github.com/repos/apache/openjpa/git/trees/249c7b5c2938381a7ebe2ddb0414096ec7f4b1b9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/830cc35014e422f0bdf6b43cb7e1c709560876f1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/830cc35014e422f0bdf6b43cb7e1c709560876f1","html_url":"https://github.com/apache/openjpa/commit/830cc35014e422f0bdf6b43cb7e1c709560876f1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/830cc35014e422f0bdf6b43cb7e1c709560876f1/comments","author":null,"committer":null,"parents":[{"sha":"bc9d60fe3bda89a1b300b68328ac7bb6067ff491","url":"https://api.github.com/repos/apache/openjpa/commits/bc9d60fe3bda89a1b300b68328ac7bb6067ff491","html_url":"https://github.com/apache/openjpa/commit/bc9d60fe3bda89a1b300b68328ac7bb6067ff491"}],"stats":{"total":3455,"additions":3455,"deletions":0},"files":[{"sha":"e4400fbdaa328880c0b28ceaecb93829a6c382b1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest1.java","status":"added","additions":312,"deletions":0,"changes":312,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest1.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest1.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,312 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import java.util.*;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.*;\r\n+\r\n+@Entity\r\n+@Table(name = \"ANNOTEST1\")\r\n+@Inheritance(strategy = InheritanceType.JOINED)\r\n+@DiscriminatorColumn(name = \"ANNOCLS\")\r\n+@DiscriminatorValue(\"ANNO1\")\r\n+@SecondaryTables({ @SecondaryTable(name = \"OTHER_ANNOTEST1\",\r\n+    pkJoinColumns = @PrimaryKeyJoinColumn(name = \"OTHER_PK\",\r\n+        referencedColumnName = \"PK\")) })\r\n+public class AnnoTest1 {\r\n+\r\n+    @Id\r\n+    @Column(name = \"PK\")\r\n+    protected Long pk;\r\n+\r\n+    @Version\r\n+    @Column(name = \"ANNOVER\")\r\n+    protected int version;\r\n+\r\n+    @Basic\r\n+    protected int basic;\r\n+\r\n+    @Transient\r\n+    protected int trans;\r\n+\r\n+    @Basic\r\n+    @Column(name = \"OTHERVALUE\", table = \"OTHER_ANNOTEST1\")\r\n+    protected int otherTableBasic;\r\n+\r\n+    @OneToOne(fetch = FetchType.LAZY)\r\n+    @JoinColumn(name = \"SELFONEONE_PK\", referencedColumnName = \"PK\")\r\n+    protected AnnoTest1 selfOneOne;\r\n+\r\n+    @OneToOne\r\n+    @PrimaryKeyJoinColumn\r\n+    protected AnnoTest1 pkJoinSelfOneOne;\r\n+\r\n+    @OneToOne\r\n+    @JoinColumns({\r\n+    @JoinColumn(name = \"ONEONE_PK1\", referencedColumnName = \"PK1\"),\r\n+    @JoinColumn(name = \"ONEONE_PK2\", referencedColumnName = \"PK2\") })\r\n+    protected AnnoTest2 oneOne;\r\n+\r\n+    @OneToOne(fetch = FetchType.LAZY)\r\n+    @JoinColumns({\r\n+    @JoinColumn(name = \"OTHERONE_PK1\", referencedColumnName = \"PK1\",\r\n+        table = \"OTHER_ANNOTEST1\"),\r\n+    @JoinColumn(name = \"OTHERONE_PK2\", referencedColumnName = \"PK2\",\r\n+        table = \"OTHER_ANNOTEST1\") })\r\n+    protected AnnoTest2 otherTableOneOne;\r\n+\r\n+    @OneToOne(mappedBy = \"inverseOneOne\", fetch = FetchType.LAZY)\r\n+    protected AnnoTest2 inverseOwnerOneOne;\r\n+\r\n+    @Lob\r\n+    @Column(name = \"BLOBVAL\")\r\n+    protected byte[] blob;\r\n+\r\n+    @Basic\r\n+    @Lob\r\n+    @Column(name = \"SERVAL\")\r\n+    protected Object serial;\r\n+\r\n+    @Column(name = \"CLOBVAL\")\r\n+    @Lob\r\n+    protected String clob;\r\n+\r\n+    // un-annotated enum should be persisted by default\r\n+    @Column(name = \"ENUMVAL\")\r\n+    protected InheritanceType enumeration;\r\n+\r\n+    @Enumerated\r\n+    @Column(name = \"ORD_ENUMVAL\")\r\n+    protected InheritanceType ordinalEnumeration;\r\n+\r\n+    @Enumerated(EnumType.STRING)\r\n+    @Column(name = \"STR_ENUMVAL\")\r\n+    protected InheritanceType stringEnumeration;\r\n+\r\n+    @OneToMany\r\n+    @ElementJoinColumn(name = \"ONEMANY_PK\", referencedColumnName = \"PK\")\r\n+    protected Set<AnnoTest2> oneMany = new HashSet();\r\n+\r\n+    @OneToMany(mappedBy = \"oneManyOwner\")\r\n+    protected Set<AnnoTest2> inverseOwnerOneMany = new HashSet();\r\n+\r\n+    @ManyToMany\r\n+    @JoinTable(name = \"ANNOTEST1_MANYMANY\",\r\n+        joinColumns = @JoinColumn(name = \"MANY_PK\"),\r\n+        inverseJoinColumns = {\r\n+        @JoinColumn(name = \"MANY_PK1\", referencedColumnName = \"PK1\"),\r\n+        @JoinColumn(name = \"MANY_PK2\", referencedColumnName = \"PK2\") })\r\n+    protected Set<AnnoTest2> manyMany = new HashSet();\r\n+\r\n+    @ManyToMany(mappedBy = \"manyMany\")\r\n+    protected Set<AnnoTest2> inverseOwnerManyMany = new HashSet();\r\n+\r\n+    @MapKey\r\n+    @OneToMany\r\n+    protected Map<Integer, Flat1> defaultMapKey = new HashMap();\r\n+\r\n+    @MapKey(name = \"basic\")\r\n+    @OneToMany\r\n+    protected Map<Integer, Flat1> namedMapKey = new HashMap();\r\n+\r\n+    @MapKey(name = \"basic\")\r\n+    @OneToMany(mappedBy = \"oneManyOwner\")\r\n+    protected Map<String, AnnoTest2> inverseOwnerMapKey = new HashMap();\r\n+\r\n+    public AnnoTest1() {\r\n+    }\r\n+\r\n+    public AnnoTest1(long pk) {\r\n+        this(new Long(pk));\r\n+    }\r\n+\r\n+    public AnnoTest1(Long pk) {\r\n+        this.pk = pk;\r\n+    }\r\n+\r\n+    public void setPk(Long val) {\r\n+        pk = val;\r\n+    }\r\n+\r\n+    public Long getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public int getVersion() {\r\n+        return version;\r\n+    }\r\n+\r\n+    public void setBasic(int i) {\r\n+        basic = i;\r\n+    }\r\n+\r\n+    public int getBasic() {\r\n+        return basic;\r\n+    }\r\n+\r\n+    public void setTransient(int i) {\r\n+        trans = i;\r\n+    }\r\n+\r\n+    public int getTransient() {\r\n+        return trans;\r\n+    }\r\n+\r\n+    public void setOtherTableBasic(int i) {\r\n+        otherTableBasic = i;\r\n+    }\r\n+\r\n+    public int getOtherTableBasic() {\r\n+        return otherTableBasic;\r\n+    }\r\n+\r\n+    public void setSelfOneOne(AnnoTest1 other) {\r\n+        selfOneOne = other;\r\n+    }\r\n+\r\n+    public AnnoTest1 getSelfOneOne() {\r\n+        return selfOneOne;\r\n+    }\r\n+\r\n+    public void setPKJoinSelfOneOne(AnnoTest1 other) {\r\n+        pkJoinSelfOneOne = other;\r\n+    }\r\n+\r\n+    public AnnoTest1 getPKJoinSelfOneOne() {\r\n+        return pkJoinSelfOneOne;\r\n+    }\r\n+\r\n+    public void setOneOne(AnnoTest2 other) {\r\n+        oneOne = other;\r\n+    }\r\n+\r\n+    public AnnoTest2 getOneOne() {\r\n+        return oneOne;\r\n+    }\r\n+\r\n+    public void setOtherTableOneOne(AnnoTest2 other) {\r\n+        otherTableOneOne = other;\r\n+    }\r\n+\r\n+    public AnnoTest2 getOtherTableOneOne() {\r\n+        return otherTableOneOne;\r\n+    }\r\n+\r\n+    public void setInverseOwnerOneOne(AnnoTest2 other) {\r\n+        inverseOwnerOneOne = other;\r\n+    }\r\n+\r\n+    public AnnoTest2 getInverseOwnerOneOne() {\r\n+        return inverseOwnerOneOne;\r\n+    }\r\n+\r\n+    public void setBlob(byte[] bytes) {\r\n+        blob = bytes;\r\n+    }\r\n+\r\n+    public byte[] getBlob() {\r\n+        return blob;\r\n+    }\r\n+\r\n+    public void setSerialized(Object o) {\r\n+        serial = o;\r\n+    }\r\n+\r\n+    public Object getSerialized() {\r\n+        return serial;\r\n+    }\r\n+\r\n+    public void setClob(String s) {\r\n+        clob = s;\r\n+    }\r\n+\r\n+    public String getClob() {\r\n+        return clob;\r\n+    }\r\n+\r\n+    public InheritanceType getEnumeration() {\r\n+        return enumeration;\r\n+    }\r\n+\r\n+    public void setEnumeration(InheritanceType val) {\r\n+        enumeration = val;\r\n+    }\r\n+\r\n+    public InheritanceType getOrdinalEnumeration() {\r\n+        return ordinalEnumeration;\r\n+    }\r\n+\r\n+    public void setOrdinalEnumeration(InheritanceType val) {\r\n+        ordinalEnumeration = val;\r\n+    }\r\n+\r\n+    public InheritanceType getStringEnumeration() {\r\n+        return stringEnumeration;\r\n+    }\r\n+\r\n+    public void setStringEnumeration(InheritanceType val) {\r\n+        stringEnumeration = val;\r\n+    }\r\n+\r\n+    public Set<AnnoTest2> getOneMany() {\r\n+        return oneMany;\r\n+    }\r\n+\r\n+    public Set<AnnoTest2> getInverseOwnerOneMany() {\r\n+        return inverseOwnerOneMany;\r\n+    }\r\n+\r\n+    public Set<AnnoTest2> getManyMany() {\r\n+        return manyMany;\r\n+    }\r\n+\r\n+    public Set<AnnoTest2> getInverseOwnerManyMany() {\r\n+        return inverseOwnerManyMany;\r\n+    }\r\n+\r\n+    public Map<Integer, Flat1> getDefaultMapKey() {\r\n+        return this.defaultMapKey;\r\n+    }\r\n+\r\n+    public void setDefaultMapKey(Map<Integer, Flat1> defaultMapKey) {\r\n+        this.defaultMapKey = defaultMapKey;\r\n+    }\r\n+\r\n+    public Map<Integer, Flat1> getNamedMapKey() {\r\n+        return this.namedMapKey;\r\n+    }\r\n+\r\n+    public void setNamedMapKey(Map<Integer, Flat1> namedMapKey) {\r\n+        this.namedMapKey = namedMapKey;\r\n+    }\r\n+\r\n+    public Map<String, AnnoTest2> getInverseOwnerMapKey() {\r\n+        return this.inverseOwnerMapKey;\r\n+    }\r\n+\r\n+    public void setInverseOwnerMapKey(\r\n+        Map<String, AnnoTest2> inverseOwnerMapKey) {\r\n+        this.inverseOwnerMapKey = inverseOwnerMapKey;\r\n+    }\r\n+}\r\n+\r"},{"sha":"d2321d6fd5ff6a0cd25f01d1f14bdbe869b6d0fd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest2.java","status":"added","additions":166,"deletions":0,"changes":166,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest2.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest2.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,166 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import java.util.*;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@Table(name = \"ANNOTEST2\")\r\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n+@DiscriminatorColumn(name = \"ANNOCLS\")\r\n+@DiscriminatorValue(\"ANNO2\")\r\n+@IdClass(AnnoTest2.Oid.class)\r\n+public class AnnoTest2 {\r\n+\r\n+    @Id\r\n+    @Column(name = \"PK1\")\r\n+    protected long pk1;\r\n+\r\n+    @Id\r\n+    @Column(name = \"PK2\")\r\n+    protected String pk2;\r\n+\r\n+    @Version\r\n+    @Column(name = \"ANNOVER\")\r\n+    protected Date version;\r\n+\r\n+    @Basic\r\n+    protected String basic;\r\n+\r\n+    @OneToOne(fetch = FetchType.LAZY)\r\n+    @JoinColumn(name = \"INVERSEONEONE_PK\", referencedColumnName = \"PK\")\r\n+    protected AnnoTest1 inverseOneOne;\r\n+\r\n+    @ManyToOne(fetch = FetchType.LAZY)\r\n+    @JoinColumn(name = \"MANYONEONE_PK\", referencedColumnName = \"PK\")\r\n+    protected AnnoTest1 oneManyOwner;\r\n+\r\n+    @ManyToMany\r\n+    @JoinTable(name = \"ANNOTEST2_MANYMANY\",\r\n+        joinColumns = {\r\n+        @JoinColumn(name = \"MANY_PK1\", referencedColumnName = \"PK1\"),\r\n+        @JoinColumn(name = \"MANY_PK2\", referencedColumnName = \"PK2\") },\r\n+        inverseJoinColumns =\r\n+        @JoinColumn(name = \"MANYE_PK\", referencedColumnName = \"PK\"))\r\n+    protected Set<AnnoTest1> manyMany = new HashSet();\r\n+\r\n+    public AnnoTest2() {\r\n+    }\r\n+\r\n+    public AnnoTest2(long pk1, String pk2) {\r\n+        this.pk1 = pk1;\r\n+        this.pk2 = pk2;\r\n+    }\r\n+\r\n+    public void setPk1(long val) {\r\n+        pk1 = val;\r\n+    }\r\n+\r\n+    public long getPk1() {\r\n+        return pk1;\r\n+    }\r\n+\r\n+    public void setPk2(String str) {\r\n+        pk2 = str;\r\n+    }\r\n+\r\n+    public String getPk2() {\r\n+        return pk2;\r\n+    }\r\n+\r\n+    public Date getVersion() {\r\n+        return version;\r\n+    }\r\n+\r\n+    public void setBasic(String s) {\r\n+        basic = s;\r\n+    }\r\n+\r\n+    public String getBasic() {\r\n+        return basic;\r\n+    }\r\n+\r\n+    public void setInverseOneOne(AnnoTest1 other) {\r\n+        inverseOneOne = other;\r\n+    }\r\n+\r\n+    public AnnoTest1 getInverseOneOne() {\r\n+        return inverseOneOne;\r\n+    }\r\n+\r\n+    public void setOneManyOwner(AnnoTest1 other) {\r\n+        oneManyOwner = other;\r\n+    }\r\n+\r\n+    public AnnoTest1 getOneManyOwner() {\r\n+        return oneManyOwner;\r\n+    }\r\n+\r\n+    public Set getManyMany() {\r\n+        return manyMany;\r\n+    }\r\n+\r\n+    public static class Oid {\r\n+\r\n+        public long pk1;\r\n+        public String pk2;\r\n+\r\n+        public Oid() {\r\n+        }\r\n+\r\n+        public Oid(long pk1, String pk2) {\r\n+            this.pk1 = pk1;\r\n+            this.pk2 = pk2;\r\n+        }\r\n+\r\n+        public Oid(String str) {\r\n+            if (str != null) {\r\n+                int index = str.indexOf(\",\");\r\n+                pk1 = Long.parseLong(str.substring(0, index));\r\n+                pk2 = str.substring(index + 1);\r\n+                if (\"null\".equals(pk2))\r\n+                    pk2 = null;\r\n+            }\r\n+        }\r\n+\r\n+        public boolean equals(Object o) {\r\n+            if (o == this)\r\n+                return true;\r\n+            if (!(o instanceof Oid))\r\n+                return false;\r\n+            Oid other = (Oid) o;\r\n+            if (pk1 != other.pk1)\r\n+                return false;\r\n+            if (pk2 == null)\r\n+                return other.pk2 == null;\r\n+            return pk2.equals(other.pk2);\r\n+        }\r\n+\r\n+        public int hashCode() {\r\n+            return ((int) pk1) + (pk2 == null ? 0 : pk2.hashCode());\r\n+        }\r\n+\r\n+        public String toString() {\r\n+            return pk1 + \",\" + (pk2 == null ? \"null\" : pk2);\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"f989ea9b1007a4b7b77002925d842766156324c4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest3.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest3.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest3.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,64 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@DiscriminatorValue(\"ANNO3\")\r\n+@Table(name = \"ANNOTEST3\")\r\n+@PrimaryKeyJoinColumns(@PrimaryKeyJoinColumn(name = \"SUB_PK\",\r\n+    referencedColumnName = \"PK\"))\r\n+public class AnnoTest3 extends AnnoTest1 {\r\n+\r\n+    @Basic\r\n+    @Column(name = \"SUBBASIC\")\r\n+    protected int basic2;\r\n+\r\n+    @OneToOne(fetch = FetchType.LAZY)\r\n+    protected AnnoTest2 subOneOne;\r\n+\r\n+    public AnnoTest3() {\r\n+    }\r\n+\r\n+    public AnnoTest3(long pk) {\r\n+        super(pk);\r\n+    }\r\n+\r\n+    public AnnoTest3(Long pk) {\r\n+        super(pk);\r\n+    }\r\n+\r\n+    public void setBasic2(int i) {\r\n+        basic2 = i;\r\n+    }\r\n+\r\n+    public int getBasic2() {\r\n+        return basic2;\r\n+    }\r\n+\r\n+    public AnnoTest2 getSubOneOne() {\r\n+        return subOneOne;\r\n+    }\r\n+\r\n+    public void setSubOneOne(AnnoTest2 anno2) {\r\n+        subOneOne = anno2;\r\n+    }\r\n+}\r"},{"sha":"a66ba8e55b086d4a9155f93c760fcbe0a1933cdc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedOwner.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedOwner.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedOwner.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,68 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@SqlResultSetMapping(name = \"EmbedMapping\", entities = {\r\n+@EntityResult(entityClass = EmbedOwner.class, fields = {\r\n+@FieldResult(name = \"pk\", column = \"OWNER_PK\"),\r\n+@FieldResult(name = \"basic\", column = \"OWNER_BASIC\"),\r\n+@FieldResult(name = \"embed.basic\", column = \"EMBED_BASIC\"),\r\n+@FieldResult(name = \"embed.clob\", column = \"EMBED_CLOB\")\r\n+    })\r\n+    })\r\n+public class EmbedOwner {\r\n+\r\n+    @Embedded\r\n+    @AttributeOverride(name = \"basic\", column = @Column(name = \"OVER_BASIC\"))\r\n+    @AssociationOverride(name = \"owner\",\r\n+        joinColumns = @JoinColumn(name = \"OVER_OWNER\"))\r\n+    protected EmbedValue embed;\r\n+\r\n+    @Basic\r\n+    @Column(name = \"OWN_BASIC\")\r\n+    protected String basic;\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    protected int pk;\r\n+\r\n+    public int getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public void setBasic(String basic) {\r\n+        this.basic = basic;\r\n+    }\r\n+\r\n+    public String getBasic() {\r\n+        return basic;\r\n+    }\r\n+\r\n+    public void setEmbed(EmbedValue embed) {\r\n+        this.embed = embed;\r\n+    }\r\n+\r\n+    public EmbedValue getEmbed() {\r\n+        return embed;\r\n+    }\r\n+}\r"},{"sha":"bcf01c97aae61abd7e42dfa06f6fdbd30487cc16","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,74 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Embeddable\r\n+public class EmbedValue {\r\n+\r\n+    @Basic\r\n+    @Column(name = \"EMB_BASIC\")\r\n+    protected String basic;\r\n+\r\n+    @Lob\r\n+    @Column(name = \"EMB_CLOB\")\r\n+    protected String clob;\r\n+\r\n+    @Lob\r\n+    @Column(name = \"EMB_BLOB\")\r\n+    protected byte[] blob;\r\n+\r\n+    @ManyToOne\r\n+    @JoinColumn(name = \"EMB_REL\")\r\n+    protected EmbedOwner owner;\r\n+\r\n+    public void setBasic(String basic) {\r\n+        this.basic = basic;\r\n+    }\r\n+\r\n+    public String getBasic() {\r\n+        return basic;\r\n+    }\r\n+\r\n+    public void setClob(String clob) {\r\n+        this.clob = clob;\r\n+    }\r\n+\r\n+    public String getClob() {\r\n+        return clob;\r\n+    }\r\n+\r\n+    public void setBlob(byte[] blob) {\r\n+        this.blob = blob;\r\n+    }\r\n+\r\n+    public byte[] getBlob() {\r\n+        return blob;\r\n+    }\r\n+\r\n+    public void setOwner(EmbedOwner owner) {\r\n+        this.owner = owner;\r\n+    }\r\n+\r\n+    public EmbedOwner getOwner() {\r\n+        return owner;\r\n+    }\r\n+}\r"},{"sha":"081e794e8bd7dff1191aa2d07bc4c45b303e23e7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue2.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue2.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue2.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,54 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+/**\r\n+ * Same as EmbedValue but no blobs for suitable use as key/value/element\r\n+ * in oracle.\r\n+ */\r\n+@Embeddable\r\n+public class EmbedValue2 {\r\n+\r\n+    @Basic\r\n+    @Column(name = \"EMB_BASIC\")\r\n+    protected String basic;\r\n+\r\n+    @Basic\r\n+    @Column(name = \"EMB_INTBASIC\")\r\n+    protected int intBasic;\r\n+\r\n+    public void setBasic(String basic) {\r\n+        this.basic = basic;\r\n+    }\r\n+\r\n+    public String getBasic() {\r\n+        return basic;\r\n+    }\r\n+\r\n+    public void setIntBasic(int intBasic) {\r\n+        this.intBasic = intBasic;\r\n+    }\r\n+\r\n+    public int getIntBasic() {\r\n+        return intBasic;\r\n+    }\r\n+}\r"},{"sha":"15dcf2f7593b69b3be8d001287f3a833b2e32139","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuper.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuper.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuper.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,77 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@MappedSuperclass\r\n+public class EmbeddableSuper {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    @Column(name = \"ID\")\r\n+    private long pk;\r\n+\r\n+    @Version\r\n+    @Column(name = \"SUPVERS\")\r\n+    private int version;\r\n+\r\n+    @Transient\r\n+    private int trans;\r\n+\r\n+    @Lob\r\n+    @Column(name = \"CLOBVAL\")\r\n+    protected String clob;\r\n+\r\n+    public EmbeddableSuper() {\r\n+    }\r\n+\r\n+    public long getPK() {\r\n+        return this.pk;\r\n+    }\r\n+\r\n+    public void setPK(long pk) {\r\n+        this.pk = pk;\r\n+    }\r\n+\r\n+    public int getTrans() {\r\n+        return this.trans;\r\n+    }\r\n+\r\n+    public void setTrans(int trans) {\r\n+        this.trans = trans;\r\n+    }\r\n+\r\n+    public String getClob() {\r\n+        return this.clob;\r\n+    }\r\n+\r\n+    public void setClob(String clob) {\r\n+        this.clob = clob;\r\n+    }\r\n+\r\n+    public int getVersion() {\r\n+        return this.version;\r\n+    }\r\n+\r\n+    public void setVersion(int version) {\r\n+        this.version = version;\r\n+    }\r\n+}\r"},{"sha":"c476ad913b8d603f02bc40287ebddd5dd3556230","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuperSub.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuperSub.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuperSub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuperSub.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,58 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@DiscriminatorColumn(name = \"DISC\")\r\n+@AttributeOverrides({\r\n+    @AttributeOverride(name = \"clob\", column = @Column(name = \"CC\")),\r\n+    @AttributeOverride(name = \"version\", column = @Column(name = \"VERSVAL\"))\r\n+})\r\n+public class EmbeddableSuperSub\r\n+    extends EmbeddableSuper {\r\n+\r\n+    @ManyToOne\r\n+    private EmbeddableSuperSub sub;\r\n+\r\n+    @ManyToOne\r\n+    // #####\r\n+    private EmbeddableSuper sup;\r\n+\r\n+    public EmbeddableSuperSub() {\r\n+    }\r\n+\r\n+    public EmbeddableSuperSub getSub() {\r\n+        return this.sub;\r\n+    }\r\n+\r\n+    public void setSub(EmbeddableSuperSub sub) {\r\n+        this.sub = sub;\r\n+    }\r\n+\r\n+    public EmbeddableSuper getSup() {\r\n+        return this.sup;\r\n+    }\r\n+\r\n+    public void setSup(EmbeddableSuper sup) {\r\n+        this.sup = sup;\r\n+    }\r\n+}\r"},{"sha":"5c0f1f5c4fc73c42d8836a51bb6b239fb640a5a0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdClass.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdClass.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdClass.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,80 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Embeddable\r\n+public class EmbeddedIdClass {\r\n+\r\n+    @Column(name = \"EPK1\")\r\n+    private long pk1;\r\n+\r\n+    @Column(name = \"EPK2\")\r\n+    private long pk2;\r\n+\r\n+    @Column(name = \"EPK3\")\r\n+    @GeneratedValue\r\n+    private long pk3;\r\n+\r\n+    public long getPk1() {\r\n+        return pk1;\r\n+    }\r\n+\r\n+    public void setPk1(long pk1) {\r\n+        this.pk1 = pk1;\r\n+    }\r\n+\r\n+    public long getPk2() {\r\n+        return pk2;\r\n+    }\r\n+\r\n+    public void setPk2(long pk2) {\r\n+        this.pk2 = pk2;\r\n+    }\r\n+\r\n+    public long getPk3() {\r\n+        return pk3;\r\n+    }\r\n+\r\n+    public void setPk3(long pk3) {\r\n+        this.pk3 = pk3;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return pk1 + \":\" + pk2 + \":\" + pk3;\r\n+    }\r\n+\r\n+    public int hashCode() {\r\n+        return (int) ((pk1 ^ pk2 ^ pk3) % Integer.MAX_VALUE);\r\n+    }\r\n+\r\n+    public boolean equals(Object other) {\r\n+        if (other == this)\r\n+            return true;\r\n+        if (!(other instanceof EmbeddedIdClass))\r\n+            return false;\r\n+\r\n+        EmbeddedIdClass id = (EmbeddedIdClass) other;\r\n+        return id.pk1 == pk1\r\n+            && id.pk2 == pk2\r\n+            && id.pk3 == pk3;\r\n+    }\r\n+}\r"},{"sha":"ddc1b55191e3324afb1240e60129dbda068ff1c3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdEntity.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdEntity.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdEntity.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,88 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@Table(name = \"EMIDENTITY\")\r\n+@SqlResultSetMapping(name = \"EmbeddedIdMapping\", entities = {\r\n+@EntityResult(entityClass = EmbeddedIdEntity.class, fields = {\r\n+@FieldResult(name = \"id.pk1\", column = \"OWNER_PK1\"),\r\n+@FieldResult(name = \"id.pk2\", column = \"OWNER_PK2\"),\r\n+@FieldResult(name = \"id.pk3\", column = \"OWNER_PK3\"),\r\n+@FieldResult(name = \"value\", column = \"OWNER_VAL\"),\r\n+@FieldResult(name = \"relation.id.pk1\", column = \"REL_PK1\"),\r\n+@FieldResult(name = \"relation.id.pk2\", column = \"REL_PK2\"),\r\n+@FieldResult(name = \"relation.id.pk3\", column = \"REL_PK3\")\r\n+    }),\r\n+@EntityResult(entityClass = EmbeddedIdEntity.class, fields = {\r\n+@FieldResult(name = \"id.pk1\", column = \"REL_PK1\"),\r\n+@FieldResult(name = \"id.pk2\", column = \"REL_PK2\"),\r\n+@FieldResult(name = \"id.pk3\", column = \"REL_PK3\"),\r\n+@FieldResult(name = \"value\", column = \"REL_VAL\")\r\n+    })\r\n+    })\r\n+public class EmbeddedIdEntity {\r\n+\r\n+    @EmbeddedId\r\n+    private EmbeddedIdClass id;\r\n+\r\n+    @Column(name = \"VAL\")\r\n+    private String value;\r\n+\r\n+    @ManyToOne\r\n+    private EmbeddedIdEntity relation;\r\n+\r\n+    @ManyToOne\r\n+    @JoinColumns({\r\n+    @JoinColumn(name = \"MREL_PK1\", referencedColumnName = \"EPK1\"),\r\n+    @JoinColumn(name = \"MREL_PK2\", referencedColumnName = \"EPK2\")\r\n+        })\r\n+    private EmbeddedIdEntity mapOverrideRelation;\r\n+\r\n+    public EmbeddedIdClass getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(EmbeddedIdClass id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getValue() {\r\n+        return value;\r\n+    }\r\n+\r\n+    public void setValue(String value) {\r\n+        this.value = value;\r\n+    }\r\n+\r\n+    public EmbeddedIdEntity getRelation() {\r\n+        return relation;\r\n+    }\r\n+\r\n+    public void setRelation(EmbeddedIdEntity relation) {\r\n+        this.relation = relation;\r\n+    }\r\n+\r\n+    public EmbeddedIdEntity getMappingOverrideRelation() {\r\n+        return mapOverrideRelation;\r\n+    }\r\n+}\r"},{"sha":"d788dc3e0dc6cf3c6e158da168fd22983b8d71c3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/ExtensionsEntity.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/ExtensionsEntity.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/ExtensionsEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/ExtensionsEntity.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,94 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import java.util.*;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import org.apache.openjpa.jdbc.meta.strats.*;\r\n+import org.apache.openjpa.persistence.*;\r\n+import org.apache.openjpa.persistence.jdbc.*;\r\n+\r\n+\r\n+@Entity\r\n+@DataStoreId(strategy = GenerationType.SEQUENCE, generator = \"system\")\r\n+@DataCache(enabled = false)\r\n+@FetchGroup(name = \"detail\", attributes = {\r\n+    @FetchAttribute(name = \"rel\", recursionDepth = -1),\r\n+    @FetchAttribute(name = \"seq\")\r\n+})\r\n+@VersionStrategy(StateComparisonVersionStrategy.ALIAS)\r\n+public class ExtensionsEntity {\r\n+\r\n+    @GeneratedValue(generator = \"uuid-hex\")\r\n+    @Column(name = \"UUID_HEX\")\r\n+    private String uuid;\r\n+\r\n+    @Basic(fetch = FetchType.LAZY)\r\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"system\")\r\n+    @ReadOnly\r\n+    private int seq;\r\n+\r\n+    @ManyToOne(fetch = FetchType.LAZY)\r\n+    @JoinColumn(name = \"REL_ID\", referencedColumnName = \"ID\")\r\n+    @Dependent\r\n+    @InverseLogical(\"owner\")\r\n+    private ExtensionsEntity rel;\r\n+\r\n+    @ManyToOne\r\n+    @JoinColumn(name = \"OWNER_ID\", referencedColumnName = \"ID\")\r\n+    private ExtensionsEntity owner;\r\n+\r\n+    @ManyToMany\r\n+    @LRS\r\n+    private Collection<ExtensionsEntity> lrs;\r\n+\r\n+    @ManyToMany\r\n+    @EagerFetchMode(FetchMode.JOIN)\r\n+    @ElementClassCriteria\r\n+    @ElementDependent\r\n+    private Collection<ExtensionsEntity> eager;\r\n+\r\n+    @ExternalValues({ \"M=1\", \"F=2\" })\r\n+    @Type(int.class)\r\n+    private char externalValues;\r\n+\r\n+    @Persistent\r\n+    @Externalizer(\"getName\")\r\n+    @Factory(\"Class.forName\")\r\n+    private Class externalizer;\r\n+\r\n+    public char getExternalValues() {\r\n+        return this.externalValues;\r\n+    }\r\n+\r\n+    public void setExternalValues(char externalValues) {\r\n+        this.externalValues = externalValues;\r\n+    }\r\n+\r\n+    public Class getExternalizer() {\r\n+        return this.externalizer;\r\n+    }\r\n+\r\n+    public void setExternalizer(Class externalizer) {\r\n+        this.externalizer = externalizer;\r\n+    }\r\n+}\r"},{"sha":"c500a8fa608eb3072500beabd5425b416e191762","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat1.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat1.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat1.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,68 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity(name=\"Flat1\")\r\n+@Table(name=\"Flat1\")\r\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n+@DiscriminatorColumn(name = \"EJB_CLS\", length=100)\r\n+public class Flat1 {\r\n+\r\n+    @Id\r\n+    @Column(name = \"PK\")\r\n+    protected int pk;\r\n+\r\n+    @Version\r\n+    @Column(name = \"EJB_VER\")\r\n+    protected int version;\r\n+\r\n+    @Basic\r\n+    protected int basic;\r\n+\r\n+    public Flat1() {\r\n+    }\r\n+\r\n+    public Flat1(int pk) {\r\n+        this.pk = pk;\r\n+    }\r\n+\r\n+    public void setPk(int val) {\r\n+        pk = val;\r\n+    }\r\n+\r\n+    public int getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public int getVersion() {\r\n+        return version;\r\n+    }\r\n+\r\n+    public void setBasic(int i) {\r\n+        basic = i;\r\n+    }\r\n+\r\n+    public int getBasic() {\r\n+        return basic;\r\n+    }\r\n+}\r\n+\r"},{"sha":"16d74a001b79118abb173a3156a4018e7b69a27c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat2.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat2.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat2.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,46 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity(name=\"Flat2\")\r\n+public class Flat2\r\n+    extends Flat1 {\r\n+\r\n+    @Basic\r\n+    protected String basic2;\r\n+\r\n+    public Flat2() {\r\n+    }\r\n+\r\n+    public Flat2(int pk) {\r\n+        super(pk);\r\n+    }\r\n+\r\n+    public void setBasic2(String s) {\r\n+        basic2 = s;\r\n+    }\r\n+\r\n+    public String getBasic2() {\r\n+        return basic2;\r\n+    }\r\n+}\r\n+\r"},{"sha":"9ea4ed94908baa7ea9b56b84449c3d484111c660","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Generator.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Generator.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Generator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Generator.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,110 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import java.util.*;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+// non-psql/ora dbs cause issues with SequenceGenerator in auto-mapping\r\n+//@SequenceGenerator(name=\"seq\", sequenceName=\"ejb_sequence\")\r\n+@TableGenerator(name = \"tab\")\r\n+@IdClass(Generator.Oid.class)\r\n+public class Generator {\r\n+\r\n+    @Id\r\n+    protected int pk;\r\n+\r\n+    @Id\r\n+    @GeneratedValue(strategy = GenerationType.TABLE, generator = \"tab\")\r\n+    protected Integer pk2;\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    protected long pk3;\r\n+\r\n+    @Basic\r\n+    protected String stringField;\r\n+\r\n+    // for non-seq\r\n+    public void setPk(int pk) {\r\n+        this.pk = pk;\r\n+    }\r\n+\r\n+    public int getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public Integer getPk2() {\r\n+        return pk2;\r\n+    }\r\n+\r\n+    public long getPk3() {\r\n+        return pk3;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String s) {\r\n+        stringField = s;\r\n+    }\r\n+\r\n+    public static class Oid {\r\n+\r\n+        public int pk;\r\n+        public Integer pk2;\r\n+        public long pk3;\r\n+\r\n+        public Oid() {\r\n+        }\r\n+\r\n+        public Oid(String str) {\r\n+            StringTokenizer tok = new StringTokenizer(str, \",\");\r\n+            pk = Integer.parseInt(tok.nextToken());\r\n+            pk2 = Integer.valueOf(tok.nextToken());\r\n+            pk3 = Long.valueOf(tok.nextToken());\r\n+        }\r\n+\r\n+        public boolean equals(Object o) {\r\n+            if (o == null || !(o instanceof Oid))\r\n+                return false;\r\n+            Oid other = (Oid) o;\r\n+            if (pk != other.pk)\r\n+                return false;\r\n+            if (pk3 != other.pk3)\r\n+                return false;\r\n+            if (pk2 == null)\r\n+                return other.pk2 == null;\r\n+            return pk2.equals(other.pk2);\r\n+        }\r\n+\r\n+        public int hashCode() {\r\n+            return pk + (pk2 == null ? 0 : pk2.hashCode())\r\n+                + (int) (pk3 % Integer.MAX_VALUE);\r\n+        }\r\n+\r\n+        public String toString() {\r\n+            return pk + \",\" + pk2 + \",\" + pk3;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"9dbf36612d6ecf03a0227514c28998db1a11a560","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PropertyAccess1.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PropertyAccess1.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PropertyAccess1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PropertyAccess1.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,65 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+/**\r\n+ * Entity test object that uses property access mode.\r\n+ */\r\n+@Entity\r\n+public class PropertyAccess1 {\r\n+\r\n+    private int id;\r\n+    private String name;\r\n+    private int intVal; // this intentionally does not match the getter name\r\n+\r\n+    protected PropertyAccess1() {\r\n+    }\r\n+\r\n+    public PropertyAccess1(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    @Id\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(String n) {\r\n+        this.name = n;\r\n+    }\r\n+\r\n+    public int getIntValue() {\r\n+        return intVal;\r\n+    }\r\n+\r\n+    public void setIntValue(int intVal) {\r\n+        this.intVal = intVal;\r\n+    }\r\n+}\r"},{"sha":"d93ce3acdbf6e65df9edcf926c56e402340f9ba7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass1.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass1.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass1.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,64 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\r\n+public class TablePerClass1 {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    protected int pk;\r\n+\r\n+    @Column(name = \"TPC_BASIC\")\r\n+    protected int basic;\r\n+\r\n+    @Embedded\r\n+    @AttributeOverrides({\r\n+    @AttributeOverride(name = \"basic\",\r\n+        column = @Column(name = \"TPC_EMB_BASIC\")),\r\n+    @AttributeOverride(name = \"clob\", column = @Column(name = \"TPC_EMB_CLOB\")),\r\n+    @AttributeOverride(name = \"blob\", column = @Column(name = \"TPC_EMB_BLOB\"))\r\n+        })\r\n+    protected EmbedValue embed;\r\n+\r\n+    public int getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public void setBasic(int i) {\r\n+        basic = i;\r\n+    }\r\n+\r\n+    public int getBasic() {\r\n+        return basic;\r\n+    }\r\n+\r\n+    public EmbedValue getEmbed() {\r\n+        return embed;\r\n+    }\r\n+\r\n+    public void setEmbed(EmbedValue ev) {\r\n+        embed = ev;\r\n+    }\r\n+}\r\n+\r"},{"sha":"cca9d7d7d75684f1996685bf586d6f2ba80a6e1b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass2.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass2.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass2.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,39 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+public class TablePerClass2\r\n+    extends TablePerClass1 {\r\n+\r\n+    @Basic\r\n+    protected String basic2;\r\n+\r\n+    public void setBasic2(String s) {\r\n+        basic2 = s;\r\n+    }\r\n+\r\n+    public String getBasic2() {\r\n+        return basic2;\r\n+    }\r\n+}\r\n+\r"},{"sha":"b2a88c2b85196ee638c87fa30dd935c80b103387","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestDiscriminator.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestDiscriminator.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestDiscriminator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestDiscriminator.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,76 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.strats.NoneDiscriminatorStrategy;\r\n+import org.apache.openjpa.jdbc.meta.strats.SubclassJoinDiscriminatorStrategy;\r\n+import org.apache.openjpa.jdbc.meta.strats.ValueMapDiscriminatorStrategy;\r\n+import org.apache.openjpa.jdbc.sql.JoinSyntaxes;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * <p>Test discriminator mappings.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public abstract class TestDiscriminator\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        //  #####\r\n+//        setUp(Entity1.class, Entity2.class, AnnoTest1.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+//    public void testNoDefaultJoinedDiscriminatorWithoutColumn() {\r\n+//        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\r\n+//        ClassMapping cls = conf.getMappingRepositoryInstance().\r\n+//            getMapping(Entity1.class, null, true);\r\n+//        if (conf.getDBDictionaryInstance().joinSyntax\r\n+//            != JoinSyntaxes.SYNTAX_TRADITIONAL) {\r\n+//            assertTrue(cls.getDiscriminator().getStrategy()\r\n+//                instanceof SubclassJoinDiscriminatorStrategy);\r\n+//        } else {\r\n+//            assertEquals(NoneDiscriminatorStrategy.getInstance(),\r\n+//                cls.getDiscriminator().getStrategy());\r\n+//        }\r\n+//        assertEquals(0, cls.getDiscriminator().getColumns().length);\r\n+//    }\r\n+\r\n+    public void testJoinedDiscriminatorWithColumn() {\r\n+        ClassMapping cls = ((JDBCConfiguration) emf.getConfiguration()).\r\n+            getMappingRepositoryInstance().getMapping(AnnoTest1.class, \r\n+            null, true);\r\n+        assertTrue(cls.getDiscriminator().getStrategy()\r\n+            instanceof ValueMapDiscriminatorStrategy);\r\n+        assertEquals(1, cls.getDiscriminator().getColumns().length);\r\n+        assertEquals(\"ANNOCLS\", cls.getDiscriminator().getColumns()[0].\r\n+            getName());\r\n+    }\r\n+\r\n+//    public void testDefaultFlatDiscriminator() {\r\n+//        ClassMapping cls = ((JDBCConfiguration) emf.getConfiguration()).\r\n+//            getMappingRepositoryInstance().getMapping(Entity2.class,\r\n+//            null, true);\r\n+//        assertTrue(cls.getDiscriminator().getStrategy()\r\n+//            instanceof ValueMapDiscriminatorStrategy);\r\n+//        assertEquals(1, cls.getDiscriminator().getColumns().length);\r\n+//    }\r\n+}\r"},{"sha":"b3fff4dc8168f48e17d44951c69ed114b6a2127c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEJBEmbedded.java","status":"added","additions":127,"deletions":0,"changes":127,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEJBEmbedded.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEJBEmbedded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEJBEmbedded.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,127 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import java.sql.Types;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n+import org.apache.openjpa.jdbc.meta.strats.ClobValueHandler;\r\n+import org.apache.openjpa.jdbc.meta.strats.MaxEmbeddedClobFieldStrategy;\r\n+import org.apache.openjpa.jdbc.meta.strats.StringFieldStrategy;\r\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Test for embedded\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public class TestEJBEmbedded extends SingleEMFTestCase {\r\n+\r\n+    private static final String CLOB;\r\n+\r\n+    static {\r\n+        StringBuffer buf = new StringBuffer();\r\n+        for (int i = 0; i < 1000; i++)\r\n+            buf.append('a');\r\n+        CLOB = buf.toString();\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        setUp(EmbedOwner.class, EmbedValue.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testEmbedded() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        EmbedOwner owner = new EmbedOwner();\r\n+        owner.setBasic(\"foo\");\r\n+        EmbedValue embed = new EmbedValue();\r\n+        embed.setClob(CLOB);\r\n+        embed.setBasic(\"bar\");\r\n+        embed.setBlob(\"foobar\".getBytes());\r\n+        embed.setOwner(owner);\r\n+        owner.setEmbed(embed);\r\n+        em.persist(owner);\r\n+        int pk = owner.getPk();\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        owner = em.find(EmbedOwner.class, pk);\r\n+        assertEquals(\"foo\", owner.getBasic());\r\n+        embed = owner.getEmbed();\r\n+        assertNotNull(embed);\r\n+        assertEquals(CLOB, embed.getClob());\r\n+        assertEquals(\"bar\", embed.getBasic());\r\n+        assertEquals(\"foobar\", new String(embed.getBlob()));\r\n+        assertEquals(owner, embed.getOwner());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testNull() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        EmbedOwner owner = new EmbedOwner();\r\n+        owner.setBasic(\"foo\");\r\n+        em.persist(owner);\r\n+        int pk = owner.getPk();\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        owner = em.find(EmbedOwner.class, pk);\r\n+        assertEquals(\"foo\", owner.getBasic());\r\n+        EmbedValue embed = owner.getEmbed();\r\n+        assertNotNull(embed);\r\n+        assertNull(embed.getClob());\r\n+        assertNull(embed.getBasic());\r\n+        assertNull(embed.getBlob());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testMappingTransferAndOverride() {\r\n+        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\r\n+        ClassMapping cls = conf.getMappingRepositoryInstance().getMapping\r\n+            (EmbedOwner.class, null, true);\r\n+        assertEquals(\"OWN_BASIC\", cls.getFieldMapping(\"basic\").\r\n+            getColumns()[0].getName());\r\n+        ClassMapping embed = cls.getFieldMapping(\"embed\").getEmbeddedMapping();\r\n+        assertEquals(\"EMB_BLOB\", embed.getFieldMapping(\"blob\").\r\n+            getColumns()[0].getName());\r\n+        assertEquals(\"OVER_BASIC\", embed.getFieldMapping(\"basic\").\r\n+            getColumns()[0].getName());\r\n+        assertEquals(\"OVER_OWNER\", embed.getFieldMapping(\"owner\").\r\n+            getColumns()[0].getName());\r\n+\r\n+        FieldMapping fm = embed.getFieldMapping(\"clob\");\r\n+        DBDictionary dict = conf.getDBDictionaryInstance();\r\n+        if (dict.getPreferredType(Types.CLOB) == Types.CLOB) {\r\n+            if (dict.maxEmbeddedClobSize > 0)\r\n+                assertTrue(fm.getStrategy() instanceof\r\n+                    MaxEmbeddedClobFieldStrategy);\r\n+            else\r\n+                assertTrue(fm.getHandler() instanceof ClobValueHandler);\r\n+        } else\r\n+            assertTrue(fm.getStrategy() instanceof StringFieldStrategy);\r\n+    }\r\n+}\r"},{"sha":"1f3adc11b8305455e7dc99cc55882935bc12d79e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddableSuperclass.java","status":"added","additions":136,"deletions":0,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddableSuperclass.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddableSuperclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddableSuperclass.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,136 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import java.sql.Types;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n+import org.apache.openjpa.jdbc.meta.strats.ClobValueHandler;\r\n+import org.apache.openjpa.jdbc.meta.strats.FullClassStrategy;\r\n+import org.apache.openjpa.jdbc.meta.strats.MaxEmbeddedClobFieldStrategy;\r\n+import org.apache.openjpa.jdbc.meta.strats.NoneClassStrategy;\r\n+import org.apache.openjpa.jdbc.meta.strats.RelationFieldStrategy;\r\n+import org.apache.openjpa.jdbc.meta.strats.StringFieldStrategy;\r\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n+import org.apache.openjpa.meta.ValueStrategies;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * <p>Test embeddable superclasses.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class TestEmbeddableSuperclass\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(EmbeddableSuper.class, EmbeddableSuperSub.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testSuperclassEmbeddedOnly() {\r\n+        ClassMapping cls = ((JDBCConfiguration) emf.getConfiguration()).\r\n+            getMappingRepositoryInstance().getMapping(EmbeddableSuper.class, \r\n+            null, true);\r\n+        assertTrue(cls.isEmbeddedOnly());\r\n+        assertEquals(NoneClassStrategy.getInstance(), cls.getStrategy());\r\n+    }\r\n+\r\n+    public void testSubclassMappingDefaultsAndOverrides() {\r\n+        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\r\n+        ClassMapping cls = conf.getMappingRepositoryInstance().\r\n+            getMapping(EmbeddableSuperSub.class, null, true);\r\n+        assertTrue(!cls.isEmbeddedOnly());\r\n+        assertTrue(cls.getStrategy() instanceof FullClassStrategy);\r\n+        assertEquals(ClassMapping.ID_APPLICATION, cls.getIdentityType());\r\n+        assertTrue(cls.isOpenJPAIdentity());\r\n+\r\n+        FieldMapping fm = cls.getFieldMapping(\"pk\");\r\n+        assertTrue(fm.isPrimaryKey());\r\n+        assertEquals(ValueStrategies.SEQUENCE, fm.getValueStrategy());\r\n+        assertEquals(\"ID\", fm.getColumns()[0].getName());\r\n+\r\n+        assertNull(cls.getField(\"trans\"));\r\n+\r\n+        fm = cls.getFieldMapping(\"clob\");\r\n+        assertEquals(\"CC\", fm.getColumns()[0].getName());\r\n+        DBDictionary dict = conf.getDBDictionaryInstance();\r\n+        if (dict.getPreferredType(Types.CLOB) == Types.CLOB) {\r\n+            if (dict.maxEmbeddedClobSize > 0)\r\n+                assertTrue(fm.getStrategy() instanceof\r\n+                    MaxEmbeddedClobFieldStrategy);\r\n+            else\r\n+                assertTrue(fm.getHandler() instanceof ClobValueHandler);\r\n+        } else\r\n+            assertTrue(fm.getStrategy() instanceof StringFieldStrategy);\r\n+    }\r\n+\r\n+    public void testSubclassDiscriminatorMapping() {\r\n+        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\r\n+        ClassMapping cls = conf.getMappingRepositoryInstance().\r\n+            getMapping(EmbeddableSuperSub.class, null, true);\r\n+        assertEquals(\"DISC\", cls.getDiscriminator().getColumns()[0].\r\n+            getName());\r\n+    }\r\n+\r\n+    public void testVersionOverrideMapping() {\r\n+        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\r\n+        ClassMapping cls = conf.getMappingRepositoryInstance().\r\n+            getMapping(EmbeddableSuperSub.class, null, true);\r\n+        assertEquals(\"VERSVAL\", cls.getVersion().getColumns()[0].getName());\r\n+    }\r\n+\r\n+    public void testRelationMappings() {\r\n+        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\r\n+        ClassMapping cls = conf.getMappingRepositoryInstance().\r\n+            getMapping(EmbeddableSuperSub.class, null, true);\r\n+        FieldMapping fm = cls.getFieldMapping(\"sub\");\r\n+        assertTrue(fm.getStrategy() instanceof RelationFieldStrategy);\r\n+\r\n+        fm = cls.getFieldMapping(\"sup\");\r\n+        assertTrue(fm.getStrategy() instanceof RelationFieldStrategy);\r\n+    }\r\n+\r\n+    public void testPersistAndFind() {\r\n+        EmbeddableSuperSub parent = new EmbeddableSuperSub();\r\n+        parent.setClob(\"parent\");\r\n+        EmbeddableSuperSub sub = new EmbeddableSuperSub();\r\n+        sub.setClob(\"sub\");\r\n+        EmbeddableSuperSub sup = new EmbeddableSuperSub();\r\n+        sup.setClob(\"sup\");\r\n+        parent.setSub(sub);\r\n+        parent.setSup(sup);\r\n+\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.persistAll(parent, sub, sup);\r\n+        em.getTransaction().commit();\r\n+        long pk = parent.getPK();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        parent = em.find(EmbeddableSuperSub.class, pk);\r\n+        assertEquals(\"parent\", parent.getClob());\r\n+        assertEquals(\"sub\", parent.getSub().getClob());\r\n+        assertEquals(\"sup\", parent.getSup().getClob());\r\n+        em.close();\r\n+    }\r\n+}\r"},{"sha":"333b83532d1b961ade3f2c938a9b6a4e1189d6e9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddedId.java","status":"added","additions":244,"deletions":0,"changes":244,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddedId.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddedId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddedId.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,244 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.enhance.PersistenceCapable;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * <p>Test embedded id classes.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class TestEmbeddedId\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    EmbeddedIdClass _oid;\r\n+    EmbeddedIdClass _roid;\r\n+\r\n+    public void setUp() {\r\n+        setUp(EmbeddedIdEntity.class, EmbeddedIdClass.class, CLEAR_TABLES);\r\n+\r\n+        _oid = new EmbeddedIdClass();\r\n+        _oid.setPk1(1);\r\n+        _oid.setPk2(2);\r\n+\r\n+        EmbeddedIdEntity e = new EmbeddedIdEntity();\r\n+        e.setId(_oid);\r\n+        e.setValue(\"e\");\r\n+\r\n+        _roid = new EmbeddedIdClass();\r\n+        _roid.setPk1(2);\r\n+        _roid.setPk2(3);\r\n+\r\n+        EmbeddedIdEntity rel = new EmbeddedIdEntity();\r\n+        rel.setId(_roid);\r\n+        rel.setValue(\"r\");\r\n+        e.setRelation(rel);\r\n+\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.persistAll(e, rel);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testGetObjectId() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        EmbeddedIdEntity e = em.find(EmbeddedIdEntity.class, _oid);\r\n+        assertNotNull(e);\r\n+        assertEquals(\"e\", e.getValue());\r\n+        assertNull(e.getMappingOverrideRelation());\r\n+        assertNotNull(e.getRelation());\r\n+        assertEquals(\"r\", e.getRelation().getValue());\r\n+\r\n+        assertEquals(_oid, em.getObjectId(e));\r\n+        assertEquals(_roid, em.getObjectId(e.getRelation()));\r\n+        assertEquals(_oid, e.getId());\r\n+        assertEquals(_roid, e.getRelation().getId());\r\n+        assertNull(((PersistenceCapable) e.getId()).pcGetGenericContext());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testMutateEmbeddedIdFieldValueOfNew() {\r\n+        EmbeddedIdEntity e1 = new EmbeddedIdEntity();\r\n+        e1.setValue(\"e1\");\r\n+        EmbeddedIdEntity e2 = new EmbeddedIdEntity();\r\n+        e2.setValue(\"e2\");\r\n+        EmbeddedIdClass id = new EmbeddedIdClass();\r\n+        e2.setId(id);\r\n+\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.persistAll(e1, e2);\r\n+\r\n+        EmbeddedIdClass oid = new EmbeddedIdClass();\r\n+        oid.setPk1(4);\r\n+        oid.setPk2(5);\r\n+        e1.setId(oid);\r\n+        e2.getId().setPk1(6);\r\n+        e2.getId().setPk2(7);\r\n+        em.getTransaction().commit();\r\n+\r\n+        EmbeddedIdClass oid1 = e1.getId();\r\n+        assertEquals(oid1, em.getObjectId(e1));\r\n+        assertEquals(4, oid1.getPk1());\r\n+        assertEquals(5, oid1.getPk2());\r\n+\r\n+        EmbeddedIdClass oid2 = e2.getId();\r\n+        // pcl: 30 October 2007: this fails currently; commenting out.\r\n+        // See OPENJPA-425\r\n+        //assertEquals(oid2, em.getObjectId(e2));\r\n+        assertEquals(6, oid2.getPk1());\r\n+        assertEquals(7, oid2.getPk2());\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        e1 = em.find(EmbeddedIdEntity.class, oid1);\r\n+        e2 = em.find(EmbeddedIdEntity.class, oid2);\r\n+        assertEquals(oid1, em.getObjectId(e1));\r\n+        assertEquals(oid2, em.getObjectId(e2));\r\n+        assertEquals(oid1, e1.getId());\r\n+        assertEquals(oid2, e2.getId());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testMutateEmbeddedIdFieldValueOfExisting() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+\r\n+        EmbeddedIdEntity e = em.find(EmbeddedIdEntity.class, _oid);\r\n+        e.setValue(\"changed\");\r\n+        try {\r\n+            e.getId().setPk1(9);\r\n+            em.getTransaction().commit();\r\n+            fail(\"Committed with changed oid field.\");\r\n+        } catch (RuntimeException re) {\r\n+            if (em.getTransaction().isActive())\r\n+                em.getTransaction().rollback();\r\n+        }\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testDetachAttach() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        EmbeddedIdEntity e = em.find(EmbeddedIdEntity.class, _oid);\r\n+        e.getRelation();\r\n+        em.close();\r\n+\r\n+        e.setValue(\"echanged\");\r\n+        e.getRelation().setValue(\"rchanged\");\r\n+\r\n+        em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        EmbeddedIdEntity me = (EmbeddedIdEntity) em.mergeAll(e,\r\n+            e.getRelation())[0];\r\n+        assertTrue(me != e);\r\n+        assertNotNull(me.getRelation());\r\n+        assertTrue(me.getRelation() != e.getRelation());\r\n+        assertEquals(\"echanged\", me.getValue());\r\n+        assertEquals(\"rchanged\", me.getRelation().getValue());\r\n+        assertEquals(_oid, me.getId());\r\n+        assertEquals(_oid, em.getObjectId(me));\r\n+        assertEquals(_roid, me.getRelation().getId());\r\n+        assertEquals(_roid, em.getObjectId(me.getRelation()));\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testQuery() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        Query q = em.createQuery(\"select e from EmbeddedIdEntity e \"\r\n+            + \"where e.id.pk1 = 1\");\r\n+        EmbeddedIdEntity e = (EmbeddedIdEntity) q.getSingleResult();\r\n+        assertEquals(_oid, e.getId());\r\n+        assertEquals(\"e\", e.getValue());\r\n+\r\n+        q = em.createQuery(\"select e.id.pk2 from EmbeddedIdEntity e \"\r\n+            + \"where e.id.pk1 = 1\");\r\n+        assertEquals(new Long(_oid.getPk2()), q.getSingleResult());\r\n+\r\n+        q = em.createQuery(\"select e.id from EmbeddedIdEntity e \"\r\n+            + \"where e.id.pk1 = 1\");\r\n+        assertEquals(_oid, q.getSingleResult());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testAutoAssigned() {\r\n+        // begin with null id object\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        EmbeddedIdEntity e = new EmbeddedIdEntity();\r\n+        em.persist(e);\r\n+        EmbeddedIdClass oid = e.getId();\r\n+        assertNotNull(oid);\r\n+        assertTrue(oid.getPk3() != 0);\r\n+        assertEquals(oid, em.getObjectId(e));\r\n+        em.getTransaction().commit();\r\n+        assertEquals(oid, em.getObjectId(e));\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        e = em.find(EmbeddedIdEntity.class, oid);\r\n+        assertEquals(oid, em.getObjectId(e));\r\n+        em.close();\r\n+\r\n+        // begin with non-null id object\r\n+        em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        e = new EmbeddedIdEntity();\r\n+        oid = new EmbeddedIdClass();\r\n+        oid.setPk1(4);\r\n+        oid.setPk2(5);\r\n+        e.setId(oid);\r\n+        em.persist(e);\r\n+        oid = e.getId();\r\n+        assertEquals(4, oid.getPk1());\r\n+        assertEquals(5, oid.getPk2());\r\n+        assertTrue(oid.getPk3() != 0);\r\n+        assertEquals(oid, em.getObjectId(e));\r\n+        em.getTransaction().commit();\r\n+        assertEquals(oid, em.getObjectId(e));\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        e = em.find(EmbeddedIdEntity.class, oid);\r\n+        assertEquals(oid, em.getObjectId(e));\r\n+        em.close();\r\n+\r\n+        // flush before accessing id field\r\n+        em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        e = new EmbeddedIdEntity();\r\n+        em.persist(e);\r\n+        em.getTransaction().commit();\r\n+        oid = e.getId();\r\n+        assertTrue(oid.getPk3() != 0);\r\n+        assertEquals(oid, em.getObjectId(e));\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        e = em.find(EmbeddedIdEntity.class, oid);\r\n+        assertEquals(oid, em.getObjectId(e));\r\n+        em.close();\r\n+    }\r\n+}\r"},{"sha":"ca0050f5cbc047e9f2ddb867eefba2fcdddc1ed9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEnumerated.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEnumerated.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEnumerated.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEnumerated.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,97 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import javax.persistence.InheritanceType;\r\n+\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n+import org.apache.openjpa.meta.JavaTypes;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Test enums and the @Enumerated annotation.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class TestEnumerated\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(AnnoTest1.class, AnnoTest2.class, Flat1.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testMapping() {\r\n+        ClassMapping cls = (ClassMapping) emf.getConfiguration().\r\n+            getMetaDataRepositoryInstance().getMetaData(AnnoTest1.class, \r\n+            null, true);\r\n+        FieldMapping fm = cls.getDeclaredFieldMapping(\"enumeration\");\r\n+        assertNotNull(fm);\r\n+        assertEquals(FieldMapping.MANAGE_PERSISTENT, fm.getManagement());\r\n+        assertEquals(JavaTypes.OBJECT, fm.getTypeCode());\r\n+        assertEquals(JavaTypes.SHORT, fm.getColumns()[0].getJavaType());\r\n+\r\n+        fm = cls.getDeclaredFieldMapping(\"ordinalEnumeration\");\r\n+        assertNotNull(fm);\r\n+        assertEquals(FieldMapping.MANAGE_PERSISTENT, fm.getManagement());\r\n+        assertEquals(JavaTypes.OBJECT, fm.getTypeCode());\r\n+        assertEquals(JavaTypes.SHORT, fm.getColumns()[0].getJavaType());\r\n+\r\n+        fm = cls.getDeclaredFieldMapping(\"stringEnumeration\");\r\n+        assertNotNull(fm);\r\n+        assertEquals(FieldMapping.MANAGE_PERSISTENT, fm.getManagement());\r\n+        assertEquals(JavaTypes.OBJECT, fm.getTypeCode());\r\n+        assertEquals(JavaTypes.STRING, fm.getColumns()[0].getJavaType());\r\n+    }\r\n+\r\n+    public void testBehavior() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AnnoTest1 pc = new AnnoTest1(1);\r\n+        pc.setEnumeration(InheritanceType.TABLE_PER_CLASS);\r\n+        pc.setOrdinalEnumeration(InheritanceType.TABLE_PER_CLASS);\r\n+        pc.setStringEnumeration(InheritanceType.JOINED);\r\n+        em.persist(pc);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(1));\r\n+        assertEquals(InheritanceType.TABLE_PER_CLASS, pc.getEnumeration());\r\n+        assertEquals(InheritanceType.TABLE_PER_CLASS,\r\n+            pc.getOrdinalEnumeration());\r\n+        assertEquals(InheritanceType.JOINED,\r\n+            pc.getStringEnumeration());\r\n+        em.getTransaction().begin();\r\n+        pc.setEnumeration(InheritanceType.JOINED);\r\n+        pc.setOrdinalEnumeration(InheritanceType.JOINED);\r\n+        pc.setStringEnumeration(InheritanceType.TABLE_PER_CLASS);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(1));\r\n+        assertEquals(InheritanceType.JOINED, pc.getEnumeration());\r\n+        assertEquals(InheritanceType.JOINED, pc.getOrdinalEnumeration());\r\n+        assertEquals(InheritanceType.TABLE_PER_CLASS,\r\n+            pc.getStringEnumeration());\r\n+        em.close();\r\n+    }\r\n+}\r"},{"sha":"c8a54cb6a8530ee8eb4201a21b84260cb0611e6c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestExtensionAnnotations.java","status":"added","additions":132,"deletions":0,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestExtensionAnnotations.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestExtensionAnnotations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestExtensionAnnotations.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,132 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n+import org.apache.openjpa.meta.FetchGroup;\r\n+import org.apache.openjpa.meta.JavaTypes;\r\n+import org.apache.openjpa.meta.UpdateStrategies;\r\n+import org.apache.openjpa.meta.ValueMetaData;\r\n+import org.apache.openjpa.meta.ValueStrategies;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * <p>Test the parsing of Kodo metadata extension annotations.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class TestExtensionAnnotations\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    private ClassMapping _mapping;\r\n+\r\n+    public void setUp() {\r\n+        setUp(ExtensionsEntity.class);\r\n+        _mapping = ((JDBCConfiguration) emf.getConfiguration()).\r\n+            getMappingRepositoryInstance().getMapping(ExtensionsEntity.class,\r\n+            null, true);\r\n+    }\r\n+\r\n+    public void testDataStoreId() {\r\n+        assertEquals(ClassMapping.ID_DATASTORE, _mapping.getIdentityType());\r\n+        assertEquals(ValueStrategies.SEQUENCE, _mapping.getIdentityStrategy());\r\n+        assertEquals(\"system\", _mapping.getIdentitySequenceName());\r\n+    }\r\n+\r\n+    public void testDataCache() {\r\n+        assertNull(_mapping.getDataCacheName());\r\n+    }\r\n+\r\n+    public void testFetchGroups() {\r\n+        FetchGroup fg = _mapping.getFetchGroup(\"detail\");\r\n+        assertNotNull(fg);\r\n+        assertFalse(fg.isPostLoad());\r\n+        FieldMapping fm = _mapping.getFieldMapping(\"rel\");\r\n+        assertEquals(1, fm.getCustomFetchGroups().length);\r\n+        assertEquals(\"detail\", fm.getCustomFetchGroups()[0]);\r\n+        assertEquals(-1, fg.getRecursionDepth(fm));\r\n+        fm = _mapping.getFieldMapping(\"seq\");\r\n+        assertEquals(1, fm.getCustomFetchGroups().length);\r\n+        assertEquals(\"detail\", fm.getCustomFetchGroups()[0]);\r\n+        assertEquals(1, fg.getRecursionDepth(fm));\r\n+    }\r\n+\r\n+    public void testValueStrategy() {\r\n+        assertEquals(ValueStrategies.UUID_HEX,\r\n+            _mapping.getField(\"uuid\").getValueStrategy());\r\n+        FieldMapping seq = _mapping.getFieldMapping(\"seq\");\r\n+        assertEquals(ValueStrategies.SEQUENCE, seq.getValueStrategy());\r\n+        assertEquals(\"system\", seq.getValueSequenceName());\r\n+    }\r\n+\r\n+    public void testReadOnly() {\r\n+        assertEquals(UpdateStrategies.RESTRICT,\r\n+            _mapping.getField(\"seq\").getUpdateStrategy());\r\n+    }\r\n+\r\n+    public void testInverseLogical() {\r\n+        assertEquals(\"owner\", _mapping.getField(\"rel\").getInverse());\r\n+        assertNull(_mapping.getField(\"owner\").getInverse());\r\n+    }\r\n+\r\n+    public void testDependent() {\r\n+        assertEquals(ValueMetaData.CASCADE_AUTO,\r\n+            _mapping.getField(\"rel\").getCascadeDelete());\r\n+        assertEquals(ValueMetaData.CASCADE_NONE,\r\n+            _mapping.getField(\"eager\").getCascadeDelete());\r\n+        assertEquals(ValueMetaData.CASCADE_AUTO,\r\n+            _mapping.getField(\"eager\").getElement().getCascadeDelete());\r\n+    }\r\n+\r\n+    public void testLRS() {\r\n+        assertTrue(_mapping.getField(\"lrs\").isLRS());\r\n+        assertFalse(_mapping.getField(\"eager\").isLRS());\r\n+    }\r\n+\r\n+    public void testClassCriteria() {\r\n+        assertTrue(_mapping.getFieldMapping(\"eager\").getElementMapping().\r\n+            getUseClassCriteria());\r\n+        assertFalse(_mapping.getFieldMapping(\"eager\").getUseClassCriteria());\r\n+        assertFalse(_mapping.getFieldMapping(\"lrs\").getElementMapping().\r\n+            getUseClassCriteria());\r\n+    }\r\n+\r\n+    public void testExternalValues() {\r\n+        FieldMapping externalValues = _mapping.getFieldMapping\r\n+            (\"externalValues\");\r\n+        assertEquals(JavaTypes.CHAR, externalValues.getDeclaredTypeCode());\r\n+        assertEquals(JavaTypes.INT, externalValues.getTypeCode());\r\n+        assertEquals(new Integer(1), externalValues.getExternalValueMap().\r\n+            get(new Character('M')));\r\n+        assertEquals(new Integer(2), externalValues.getExternalValueMap().\r\n+            get(new Character('F')));\r\n+    }\r\n+\r\n+    public void testExternalizer() {\r\n+        FieldMapping externalizer = _mapping.getFieldMapping(\"externalizer\");\r\n+        assertEquals(JavaTypes.OBJECT, externalizer.getDeclaredTypeCode());\r\n+        assertEquals(JavaTypes.STRING, externalizer.getTypeCode());\r\n+        assertEquals(\"java.lang.String\", externalizer.getExternalValue\r\n+            (String.class, null));\r\n+        assertEquals(String.class, externalizer.getFieldValue\r\n+            (String.class.getName(), null));\r\n+    }\r\n+}\r"},{"sha":"7f00de56cb1b03e418a4f8b92efbc7129db2af5f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestFlatInheritance.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestFlatInheritance.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestFlatInheritance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestFlatInheritance.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,58 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Test for InheritanceType.SINGLE_TABLE\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public class TestFlatInheritance extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(Flat1.class, Flat2.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testInheritance() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        Flat1 pc = new Flat1(1);\r\n+        Flat2 pc2 = new Flat2(2);\r\n+        pc.setBasic(10);\r\n+        pc2.setBasic(20);\r\n+        pc2.setBasic2(\"DOG\");\r\n+        em.persist(pc);\r\n+        em.persist(pc2);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(Flat1.class, 1);\r\n+        assertEquals(10, pc.getBasic());\r\n+        pc = em.find(Flat1.class, 2);\r\n+        assertEquals(Flat2.class, pc.getClass());\r\n+        assertEquals(20, pc.getBasic());\r\n+        assertEquals(\"DOG\", ((Flat2) pc).getBasic2());\r\n+        em.close();\r\n+    }\r\n+}\r"},{"sha":"b5e4b50dfa10a02b22e273480caca4e05d0bb4c3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestJoinedInheritance.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestJoinedInheritance.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestJoinedInheritance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestJoinedInheritance.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,65 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Test for InheritanceType.JOINED\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public class TestJoinedInheritance extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(AnnoTest1.class, AnnoTest2.class, AnnoTest3.class, Flat1.class,\r\n+            CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testInheritance() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AnnoTest3 pc = new AnnoTest3();\r\n+        pc.setPk(new Long(1));\r\n+        pc.setBasic(10);\r\n+        pc.setBasic2(20);\r\n+        em.persist(pc);\r\n+\r\n+        AnnoTest2 pc2 = new AnnoTest2();\r\n+        pc2.setPk1(2);\r\n+        pc2.setPk2(\"bar\");\r\n+        pc2.setInverseOneOne(pc);\r\n+        pc.setSubOneOne(pc2);\r\n+        em.persist(pc2);\r\n+\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc2 = em.find(AnnoTest2.class, new AnnoTest2.Oid(2, \"bar\"));\r\n+        pc = (AnnoTest3) pc2.getInverseOneOne();\r\n+        assertEquals(pc.getInverseOwnerOneOne(), pc2);\r\n+        assertEquals(10, pc.getBasic());\r\n+        assertEquals(20, pc.getBasic2());\r\n+        assertEquals(pc2, pc.getSubOneOne());\r\n+        em.close();\r\n+    }\r\n+}\r"},{"sha":"334de0ef92890264f846b25917af0d6121c3f130","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestManyToMany.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestManyToMany.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestManyToMany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestManyToMany.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,110 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import java.util.Set;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Test for m-m\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public class TestManyToMany\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(AnnoTest1.class, AnnoTest2.class, Flat1.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testManyToMany() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AnnoTest1 pc = new AnnoTest1(4);\r\n+        em.persist(pc);\r\n+        AnnoTest2 pc2;\r\n+        for (int i = 0; i < 3; i++) {\r\n+            pc2 = new AnnoTest2(5 + i, \"foo\" + i);\r\n+            pc.getManyMany().add(pc2);\r\n+            em.persist(pc2);\r\n+        }\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(4));\r\n+        Set<AnnoTest2> many = pc.getManyMany();\r\n+        assertEquals(3, many.size());\r\n+        for (AnnoTest2 manyPc2 : many) {\r\n+            switch ((int) manyPc2.getPk1()) {\r\n+                case 5:\r\n+                    assertEquals(\"foo0\", manyPc2.getPk2());\r\n+                    break;\r\n+                case 6:\r\n+                    assertEquals(\"foo1\", manyPc2.getPk2());\r\n+                    break;\r\n+                case 7:\r\n+                    assertEquals(\"foo2\", manyPc2.getPk2());\r\n+                    break;\r\n+                default:\r\n+                    fail(\"bad pk:\" + manyPc2.getPk1());\r\n+            }\r\n+        }\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testInverseOwnerManyToMany() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AnnoTest1 pc = new AnnoTest1(4);\r\n+        em.persist(pc);\r\n+        AnnoTest2 pc2;\r\n+        for (int i = 0; i < 3; i++) {\r\n+            pc2 = new AnnoTest2(5 + i, \"foo\" + i);\r\n+            pc2.getManyMany().add(pc);\r\n+            em.persist(pc2);\r\n+        }\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(4));\r\n+        Set<AnnoTest2> many = pc.getInverseOwnerManyMany();\r\n+        assertEquals(3, many.size());\r\n+        for (AnnoTest2 manyPc2 : many) {\r\n+            assertTrue(manyPc2.getManyMany().contains(pc));\r\n+            switch ((int) manyPc2.getPk1()) {\r\n+                case 5:\r\n+                    assertEquals(\"foo0\", manyPc2.getPk2());\r\n+                    break;\r\n+                case 6:\r\n+                    assertEquals(\"foo1\", manyPc2.getPk2());\r\n+                    break;\r\n+                case 7:\r\n+                    assertEquals(\"foo2\", manyPc2.getPk2());\r\n+                    break;\r\n+                default:\r\n+                    fail(\"bad pk:\" + manyPc2.getPk1());\r\n+            }\r\n+        }\r\n+        em.close();\r\n+    }\r\n+}\r"},{"sha":"190129db0a422c7fb0db10ea1d55e334a2f39827","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMapKey.java","status":"added","additions":123,"deletions":0,"changes":123,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMapKey.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMapKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMapKey.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,123 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.MapKey;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n+import org.apache.openjpa.jdbc.meta.strats.RelationMapInverseKeyFieldStrategy;\r\n+import org.apache.openjpa.jdbc.meta.strats.RelationMapTableFieldStrategy;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * <p>Test the use of the {@link MapKey} annotation.  Note that we have\r\n+ * more thorough Kodo core tests for the mappings themselves.  See\r\n+ * {@link kodo.jdbc.meta.TestMappedByKeyMaps}.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class TestMapKey\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(Flat1.class, AnnoTest1.class, AnnoTest2.class, CLEAR_TABLES);\r\n+\r\n+    }\r\n+\r\n+    public void testDefaultMapKeyMapping() {\r\n+        ClassMapping mapping = ((JDBCConfiguration) emf.getConfiguration())\r\n+            .getMappingRepositoryInstance().getMapping(AnnoTest1.class,\r\n+                null, true);\r\n+        FieldMapping fm = mapping.getFieldMapping(\"defaultMapKey\");\r\n+        assertTrue(fm.getStrategy() instanceof RelationMapTableFieldStrategy);\r\n+        assertEquals(\"pk\", fm.getKey().getValueMappedBy());\r\n+        assertEquals(mapping.getRepository().getMetaData(Flat1.class, null,\r\n+            true).getField(\"pk\"), fm.getKey().getValueMappedByMetaData());\r\n+    }\r\n+\r\n+    public void testNamedMapKeyMapping() {\r\n+        ClassMapping mapping = ((JDBCConfiguration) emf.getConfiguration())\r\n+            .getMappingRepositoryInstance().getMapping(AnnoTest1.class,\r\n+                null, true);\r\n+        FieldMapping fm = mapping.getFieldMapping(\"namedMapKey\");\r\n+        assertTrue(fm.getStrategy() instanceof RelationMapTableFieldStrategy);\r\n+        assertEquals(\"basic\", fm.getKey().getValueMappedBy());\r\n+        assertEquals(mapping.getRepository().getMetaData(Flat1.class, null,\r\n+            true).getField(\"basic\"), fm.getKey().getValueMappedByMetaData());\r\n+    }\r\n+\r\n+    public void testInverseOwnerMapKeyMapping() {\r\n+        ClassMapping mapping = ((JDBCConfiguration) emf.getConfiguration())\r\n+            .getMappingRepositoryInstance().getMapping(AnnoTest1.class,\r\n+                null, true);\r\n+        FieldMapping fm = mapping.getFieldMapping(\"inverseOwnerMapKey\");\r\n+        assertTrue(fm.getStrategy() instanceof\r\n+            RelationMapInverseKeyFieldStrategy);\r\n+        assertEquals(\"basic\", fm.getKey().getValueMappedBy());\r\n+        assertEquals(mapping.getRepository().getMetaData(AnnoTest2.class,\r\n+            null, true).getField(\"basic\"), fm.getKey().\r\n+            getValueMappedByMetaData());\r\n+    }\r\n+\r\n+    public void testInsertAndRetrieve() {\r\n+        Flat1 f1 = new Flat1(1);\r\n+        f1.setBasic(100);\r\n+        Flat1 f2 = new Flat1(2);\r\n+        f2.setBasic(200);\r\n+        AnnoTest2 a1 = new AnnoTest2(1L, \"1\");\r\n+        a1.setBasic(\"100\");\r\n+        AnnoTest2 a2 = new AnnoTest2(2L, \"2\");\r\n+        a2.setBasic(\"200\");\r\n+\r\n+        AnnoTest1 pc = new AnnoTest1(1L);\r\n+        pc.getDefaultMapKey().put(f1.getPk(), f1);\r\n+        pc.getDefaultMapKey().put(f2.getPk(), f2);\r\n+        pc.getNamedMapKey().put(f1.getBasic(), f1);\r\n+        pc.getNamedMapKey().put(f2.getBasic(), f2);\r\n+        pc.getInverseOwnerMapKey().put(a1.getBasic(), a1);\r\n+        pc.getInverseOwnerMapKey().put(a2.getBasic(), a2);\r\n+        a1.setOneManyOwner(pc);\r\n+        a2.setOneManyOwner(pc);\r\n+\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.persistAll(new Object[]{ pc, f1, f2, a1, a2 });\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(1));\r\n+        assertEquals(2, pc.getDefaultMapKey().size());\r\n+        assertEquals(1, pc.getDefaultMapKey().get(1).getPk());\r\n+        assertEquals(2, pc.getDefaultMapKey().get(2).getPk());\r\n+        assertEquals(2, pc.getNamedMapKey().size());\r\n+        assertEquals(100, pc.getNamedMapKey().get(100).getBasic());\r\n+        assertEquals(200, pc.getNamedMapKey().get(200).getBasic());\r\n+        assertEquals(2, pc.getInverseOwnerMapKey().size());\r\n+        assertEquals(\"100\", pc.getInverseOwnerMapKey().get(\"100\").\r\n+            getBasic());\r\n+        assertEquals(\"200\", pc.getInverseOwnerMapKey().get(\"200\").\r\n+            getBasic());\r\n+        em.close();\r\n+    }\r\n+}\r"},{"sha":"de8bbe96ee85c9f26ef81f0c7f91e112eb5911a1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToMany.java","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToMany.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToMany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToMany.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,102 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import java.util.Collection;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Test for 1-m\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public class TestOneToMany\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(AnnoTest1.class, AnnoTest2.class, Flat1.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testOneToMany() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AnnoTest1 pc = new AnnoTest1(5);\r\n+        pc.getOneMany().add(new AnnoTest2(15, \"foo\"));\r\n+        pc.getOneMany().add(new AnnoTest2(20, \"foobar\"));\r\n+        em.persist(pc);\r\n+        em.persistAll(pc.getOneMany());\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(5));\r\n+        Collection<AnnoTest2> many = pc.getOneMany();\r\n+        assertEquals(2, many.size());\r\n+        for (AnnoTest2 pc2 : many) {\r\n+            switch ((int) pc2.getPk1()) {\r\n+                case 15:\r\n+                    assertEquals(\"foo\", pc2.getPk2());\r\n+                    break;\r\n+                case 20:\r\n+                    assertEquals(\"foobar\", pc2.getPk2());\r\n+                    break;\r\n+                default:\r\n+                    fail(\"unknown element:\" + pc2.getPk1());\r\n+            }\r\n+        }\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testInverseOwnerOneToMany() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AnnoTest1 pc = new AnnoTest1(5);\r\n+        AnnoTest2 pc2 = new AnnoTest2(15, \"foo\");\r\n+        pc.getInverseOwnerOneMany().add(pc2);\r\n+        pc2.setOneManyOwner(pc);\r\n+        pc2 = new AnnoTest2(20, \"foobar\");\r\n+        pc.getInverseOwnerOneMany().add(pc2);\r\n+        pc2.setOneManyOwner(pc);\r\n+        em.persist(pc);\r\n+        em.persistAll(pc.getInverseOwnerOneMany());\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(5));\r\n+        Collection<AnnoTest2> many = pc.getInverseOwnerOneMany();\r\n+        assertEquals(2, many.size());\r\n+        for (AnnoTest2 pc3 : many) {\r\n+            assertEquals(pc, pc3.getOneManyOwner());\r\n+            switch ((int) pc3.getPk1()) {\r\n+                case 15:\r\n+                    assertEquals(\"foo\", pc3.getPk2());\r\n+                    break;\r\n+                case 20:\r\n+                    assertEquals(\"foobar\", pc3.getPk2());\r\n+                    break;\r\n+                default:\r\n+                    fail(\"unknown element:\" + pc3.getPk1());\r\n+            }\r\n+        }\r\n+        em.close();\r\n+    }\r\n+}\r"},{"sha":"efddefdc5fa1eadab18a0cd98fba9cce2ce2a021","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToOne.java","status":"added","additions":135,"deletions":0,"changes":135,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToOne.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToOne.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToOne.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,135 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Test for 1-1\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public class TestOneToOne\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(AnnoTest1.class, AnnoTest2.class, Flat1.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testOneToOne() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AnnoTest1 pc = new AnnoTest1(5);\r\n+        AnnoTest2 pc2 = new AnnoTest2(15, \"foo\");\r\n+        pc.setOneOne(pc2);\r\n+        em.persist(pc);\r\n+        em.persist(pc2);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(5));\r\n+        pc2 = pc.getOneOne();\r\n+        assertNotNull(pc2);\r\n+        assertEquals(15, pc2.getPk1());\r\n+        assertEquals(\"foo\", pc2.getPk2());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testSelfOneToOne() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AnnoTest1 pc = new AnnoTest1(5);\r\n+        AnnoTest1 pc2 = new AnnoTest1(15);\r\n+        pc.setSelfOneOne(pc2);\r\n+        em.persist(pc);\r\n+        em.persist(pc2);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(5));\r\n+        pc2 = pc.getSelfOneOne();\r\n+        assertNotNull(pc2);\r\n+        assertEquals(new Long(15), pc2.getPk());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testPKJoinSelfOneToOne() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AnnoTest1 pc = new AnnoTest1(5);\r\n+        AnnoTest1 pc2 = new AnnoTest1(15);\r\n+        pc.setSelfOneOne(pc2);\r\n+        em.persist(pc);\r\n+        em.persist(pc2);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(5));\r\n+        pc2 = pc.getSelfOneOne();\r\n+        assertNotNull(pc2);\r\n+        assertEquals(new Long(15), pc2.getPk());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testOtherTableOneToOne() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AnnoTest1 pc = new AnnoTest1(5);\r\n+        AnnoTest2 pc2 = new AnnoTest2(15, \"foo\");\r\n+        pc.setOtherTableOneOne(pc2);\r\n+        em.persist(pc);\r\n+        em.persist(pc2);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(5));\r\n+        pc2 = pc.getOtherTableOneOne();\r\n+        assertNotNull(pc2);\r\n+        assertEquals(15, pc2.getPk1());\r\n+        assertEquals(\"foo\", pc2.getPk2());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testInverseOneToOne() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AnnoTest1 pc = new AnnoTest1(5);\r\n+        AnnoTest2 pc2 = new AnnoTest2(15, \"foo\");\r\n+        pc2.setInverseOneOne(pc);\r\n+        em.persist(pc);\r\n+        em.persist(pc2);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(5));\r\n+        pc2 = pc.getInverseOwnerOneOne();\r\n+        assertNotNull(pc2);\r\n+        assertEquals(15, pc2.getPk1());\r\n+        assertEquals(\"foo\", pc2.getPk2());\r\n+        assertEquals(pc, pc2.getInverseOneOne());\r\n+        em.close();\r\n+    }\r\n+}\r"},{"sha":"fe8a325814cdfe604a3f78a400a7a207fb851e0f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestPropertyAccess.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestPropertyAccess.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestPropertyAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestPropertyAccess.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,92 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+public class TestPropertyAccess\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(PropertyAccess1.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testPropertyAccessBasicCreation() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        PropertyAccess1 pa1_1 = new PropertyAccess1(10);\r\n+        pa1_1.setName(\"foo\");\r\n+        em.persist(pa1_1);\r\n+        em.getTransaction().commit();\r\n+\r\n+        // getting a new EM should not be necessary once the extended PC stuff\r\n+        // is complete.\r\n+        em = emf.createEntityManager();\r\n+\r\n+        PropertyAccess1 pa1_2 = em.find(PropertyAccess1.class, 10);\r\n+        assertNotSame(pa1_1, pa1_2);\r\n+        assertNotNull(pa1_2);\r\n+        assertEquals(10, pa1_2.getId());\r\n+        assertEquals(\"foo\", pa1_2.getName());\r\n+    }\r\n+\r\n+    public void testPropertyAccessBasicMutation() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        PropertyAccess1 pa1_1 = new PropertyAccess1(10);\r\n+        pa1_1.setName(\"foo\");\r\n+        em.persist(pa1_1);\r\n+        em.getTransaction().commit();\r\n+\r\n+        // getting a new EM should not be necessary once the extended PC stuff\r\n+        // is complete.\r\n+        em = emf.createEntityManager();\r\n+\r\n+        em.getTransaction().begin();\r\n+        PropertyAccess1 pa1_2 = em.find(PropertyAccess1.class, 10);\r\n+        pa1_2.setName(pa1_2.getName() + \"bar\");\r\n+        em.getTransaction().commit();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        PropertyAccess1 pa1_3 = em.find(PropertyAccess1.class, 10);\r\n+        assertNotSame(pa1_2, pa1_3);\r\n+        assertEquals(\"foobar\", pa1_3.getName());\r\n+    }\r\n+\r\n+    public void testJPQL() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.createQuery(\"select o from PropertyAccess1 o where \" +\r\n+            \"o.name = 'foo'\").getResultList();\r\n+        em.createQuery(\"select o from PropertyAccess1 o order by \" +\r\n+            \"o.name asc\").getResultList();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testJPQLWithFieldNameMismatch() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.createQuery(\"select o from PropertyAccess1 o where \" +\r\n+            \"o.intValue = 0\").getResultList();\r\n+        em.createQuery(\"select o from PropertyAccess1 o order by \" +\r\n+            \"o.intValue asc\").getResultList();\r\n+        em.close();\r\n+    }\r\n+}\r"},{"sha":"059ece1e608d9d5e9c19a58293e00b7d77e80f16","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestSerializedLobs.java","status":"added","additions":137,"deletions":0,"changes":137,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestSerializedLobs.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestSerializedLobs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestSerializedLobs.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,137 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import java.sql.Blob;\r\n+import java.sql.Connection;\r\n+import java.sql.ResultSet;\r\n+import java.sql.SQLException;\r\n+import java.sql.Statement;\r\n+import java.util.Date;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Test for serialized, clob, and lob types.\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public class TestSerializedLobs extends SingleEMFTestCase {\r\n+\r\n+    private static final Date DATE = new Date();\r\n+\r\n+    public void setUp() {\r\n+        setUp(AnnoTest1.class, AnnoTest2.class, Flat1.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    // Serialized fields not being read properly\r\n+    public void testSerialized() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AnnoTest1 pc1 = new AnnoTest1(1);\r\n+        AnnoTest1 pc2 = new AnnoTest1(2);\r\n+        pc1.setSerialized(\"ASDASD\");\r\n+        pc2.setSerialized(DATE);\r\n+        em.persist(pc1);\r\n+        em.persist(pc2);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc1 = em.find(AnnoTest1.class, new Long(1));\r\n+        pc2 = em.find(AnnoTest1.class, new Long(2));\r\n+        assertEquals(\"ASDASD\", pc1.getSerialized());\r\n+        assertEquals(DATE, pc2.getSerialized());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testBlob()\r\n+        throws Exception {\r\n+        OpenJPAEntityManagerSPI em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+\r\n+        AnnoTest1 pc = new AnnoTest1(1);\r\n+        pc.setBlob(\"Not Null\".getBytes());\r\n+        em.persist(pc);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(1));\r\n+        assertEquals(\"Not Null\", new String(pc.getBlob()));\r\n+        Connection conn = (Connection) em.getConnection();\r\n+        Statement stmnt = conn.createStatement();\r\n+        ResultSet rs = stmnt.executeQuery(\"SELECT BLOBVAL FROM ANNOTEST1 \"\r\n+            + \"WHERE PK = 1\");\r\n+        assertTrue(rs.next());\r\n+\r\n+        JDBCConfiguration conf = (JDBCConfiguration) em.getConfiguration();\r\n+        DBDictionary dict = conf.getDBDictionaryInstance();\r\n+        if (dict.useGetBytesForBlobs)\r\n+            rs.getBytes(1);\r\n+        else if (dict.useGetObjectForBlobs)\r\n+            rs.getObject(1);\r\n+        else {\r\n+            Blob blob = rs.getBlob(1);\r\n+            blob.getBytes(1L, (int) blob.length());\r\n+        }\r\n+        assertEquals(\"Not Null\", new String(pc.getBlob()));\r\n+\r\n+        try {\r\n+            rs.close();\r\n+        } catch (SQLException e) {\r\n+        }\r\n+        try {\r\n+            stmnt.close();\r\n+        } catch (SQLException e) {\r\n+        }\r\n+        try {\r\n+            conn.close();\r\n+        } catch (SQLException e) {\r\n+        }\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testClob()\r\n+        throws Exception {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+\r\n+        AnnoTest1 pc = new AnnoTest1(1);\r\n+        StringBuffer buf = new StringBuffer();\r\n+        for (int i = 0; i < 1000; i++)\r\n+            buf.append((char) ('a' + (i % 24)));\r\n+        pc.setClob(buf.toString());\r\n+        em.persist(pc);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(1));\r\n+        String str = pc.getClob();\r\n+        assertEquals(1000, str.length());\r\n+        for (int i = 0; i < str.length(); i++)\r\n+            assertEquals('a' + (i % 24), str.charAt(i));\r\n+        em.close();\r\n+    }\r\n+}\r"},{"sha":"252524178555fd4799be60a15b84d304e0c4f71a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestTablePerClassInheritance.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestTablePerClassInheritance.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestTablePerClassInheritance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestTablePerClassInheritance.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,101 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.strats.FullClassStrategy;\r\n+import org.apache.openjpa.jdbc.meta.strats.NoneDiscriminatorStrategy;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * <p>Test that InheritanceType.TABLE_PER_CLASS JPA mapping is translated\r\n+ * correctly.  See the <code>kodo.jdbc.meta.tableperclass</code> test package\r\n+ * for more detailed tests of functionality.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class TestTablePerClassInheritance\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(TablePerClass1.class, TablePerClass2.class, EmbedOwner.class,\r\n+            EmbedValue.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testMapping() {\r\n+        ClassMapping mapping = ((JDBCConfiguration) emf.getConfiguration()).\r\n+            getMappingRepositoryInstance().getMapping(TablePerClass2.class,\r\n+            null, true);\r\n+        assertTrue(mapping.getStrategy() instanceof FullClassStrategy);\r\n+        assertTrue(mapping.getDiscriminator().getStrategy()\r\n+            instanceof NoneDiscriminatorStrategy);\r\n+        assertNull(mapping.getJoinForeignKey());\r\n+        assertNull(mapping.getJoinablePCSuperclassMapping());\r\n+        assertEquals(\"TPC_BASIC\", mapping.getFieldMapping(\"basic\").\r\n+            getColumns()[0].getName());\r\n+        ClassMapping embed = mapping.getFieldMapping(\"embed\").\r\n+            getEmbeddedMapping();\r\n+        assertEquals(\"TPC_EMB_BASIC\", embed.getFieldMapping(\"basic\").\r\n+            getColumns()[0].getName());\r\n+\r\n+        ClassMapping sup = mapping.getPCSuperclassMapping();\r\n+        assertEquals(TablePerClass1.class, sup.getDescribedType());\r\n+        assertTrue(sup.getStrategy() instanceof FullClassStrategy);\r\n+        assertTrue(sup.getDiscriminator().getStrategy()\r\n+            instanceof NoneDiscriminatorStrategy);\r\n+        assertEquals(\"TPC_BASIC\", sup.getFieldMapping(\"basic\").\r\n+            getColumns()[0].getName());\r\n+        embed = sup.getFieldMapping(\"embed\").getEmbeddedMapping();\r\n+        assertEquals(\"TPC_EMB_BASIC\", embed.getFieldMapping(\"basic\").\r\n+            getColumns()[0].getName());\r\n+    }\r\n+\r\n+    public void testInsertAndRetrieve() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        TablePerClass1 tpc1 = new TablePerClass1();\r\n+        tpc1.setBasic(1);\r\n+        EmbedValue ev = new EmbedValue();\r\n+        ev.setBasic(\"11\");\r\n+        tpc1.setEmbed(ev);\r\n+        TablePerClass2 tpc2 = new TablePerClass2();\r\n+        tpc2.setBasic(2);\r\n+        tpc2.setBasic2(\"2\");\r\n+        ev = new EmbedValue();\r\n+        ev.setBasic(\"22\");\r\n+        tpc2.setEmbed(ev);\r\n+        em.persistAll(tpc1, tpc2);\r\n+        em.getTransaction().commit();\r\n+        int id1 = tpc1.getPk();\r\n+        int id2 = tpc2.getPk();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        tpc1 = em.find(TablePerClass1.class, id1);\r\n+        assertEquals(1, tpc1.getBasic());\r\n+        assertEquals(\"11\", tpc1.getEmbed().getBasic());\r\n+        tpc2 = (TablePerClass2) em.find(TablePerClass1.class, id2);\r\n+        assertEquals(2, tpc2.getBasic());\r\n+        assertEquals(\"2\", tpc2.getBasic2());\r\n+        assertEquals(\"22\", tpc2.getEmbed().getBasic());\r\n+        em.close();\r\n+    }\r\n+}\r"},{"sha":"3b9ea8165cd9c815bf7115779cfc6a09ffa9d6cc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestVersion.java","status":"added","additions":184,"deletions":0,"changes":184,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestVersion.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestVersion.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -0,0 +1,184 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.annotations;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.strats.NoneVersionStrategy;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Test for opt-lock\r\n+ *\r\n+ * @author Steve Kim\r\n+ */\r\n+public class TestVersion extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(AnnoTest1.class, AnnoTest2.class, AnnoTest3.class, Flat1.class,\r\n+            EmbedOwner.class, EmbedValue.class, CLEAR_TABLES);\r\n+\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AnnoTest1 test1 = new AnnoTest1();\r\n+        test1.setPk(new Long(5));\r\n+        test1.setBasic(50);\r\n+        test1.setTransient(500);\r\n+        em.persist(test1);\r\n+\r\n+        AnnoTest2 test2 = new AnnoTest2();\r\n+        test2.setPk1(5);\r\n+        test2.setPk2(\"bar\");\r\n+        test2.setBasic(\"50\");\r\n+        em.persist(test2);\r\n+\r\n+        AnnoTest3 test3 = new AnnoTest3();\r\n+        test3.setPk(new Long(3));\r\n+        test3.setBasic2(50);\r\n+        em.persist(test3);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testVersionNumeric() {\r\n+        EntityManager em1 = emf.createEntityManager();\r\n+        em1.getTransaction().begin();\r\n+        EntityManager em2 = emf.createEntityManager();\r\n+        em2.getTransaction().begin();\r\n+\r\n+        AnnoTest1 pc1 = em1.find(AnnoTest1.class, new Long(5));\r\n+        AnnoTest1 pc2 = em2.find(AnnoTest1.class, new Long(5));\r\n+        assertEquals(1, pc1.getVersion());\r\n+        assertEquals(1, pc2.getVersion());\r\n+        assertEquals(0, pc1.getTransient());\r\n+        pc1.setBasic(75);\r\n+        pc2.setBasic(75);\r\n+        em1.getTransaction().commit();\r\n+        em1.close();\r\n+\r\n+        em1 = emf.createEntityManager();\r\n+        pc1 = em1.find(AnnoTest1.class, new Long(5));\r\n+        assertEquals(2, pc1.getVersion());\r\n+        em1.close();\r\n+        try {\r\n+            em2.getTransaction().commit();\r\n+            fail(\"Optimistic fail\");\r\n+        } catch (Exception e) {\r\n+        } finally {\r\n+            em2.close();\r\n+        }\r\n+    }\r\n+\r\n+    public void testVersionTimestamp() {\r\n+        EntityManager em1 = emf.createEntityManager();\r\n+        em1.getTransaction().begin();\r\n+        EntityManager em2 = emf.createEntityManager();\r\n+        em2.getTransaction().begin();\r\n+\r\n+        AnnoTest2 pc1 = em1.find(AnnoTest2.class,\r\n+            new AnnoTest2.Oid(5, \"bar\"));\r\n+        AnnoTest2 pc2 = em2.find(AnnoTest2.class,\r\n+            new AnnoTest2.Oid(5, \"bar\"));\r\n+        assertNotNull(pc1.getVersion());\r\n+        assertEquals(pc1.getVersion(), pc2.getVersion());\r\n+        pc1.setBasic(\"75\");\r\n+        pc2.setBasic(\"75\");\r\n+        em1.getTransaction().commit();\r\n+        em1.close();\r\n+\r\n+        em1 = emf.createEntityManager();\r\n+        pc1 = em1.find(AnnoTest2.class,\r\n+            new AnnoTest2.Oid(5, \"bar\"));\r\n+        assertTrue(pc1.getVersion().compareTo(pc2.getVersion()) > 0);\r\n+        em1.close();\r\n+        try {\r\n+            em2.getTransaction().commit();\r\n+            fail(\"Optimistic fail\");\r\n+        } catch (Exception e) {\r\n+        } finally {\r\n+            em2.close();\r\n+        }\r\n+    }\r\n+\r\n+    public void testVersionSubclass() {\r\n+        EntityManager em1 = emf.createEntityManager();\r\n+        em1.getTransaction().begin();\r\n+        EntityManager em2 = emf.createEntityManager();\r\n+        em2.getTransaction().begin();\r\n+\r\n+        AnnoTest3 pc1 = em1.find(AnnoTest3.class, new Long(3));\r\n+        AnnoTest3 pc2 = em2.find(AnnoTest3.class, new Long(3));\r\n+        assertEquals(1, pc1.getVersion());\r\n+        assertEquals(1, pc2.getVersion());\r\n+        pc1.setBasic2(75);\r\n+        pc2.setBasic2(75);\r\n+        em1.getTransaction().commit();\r\n+        em1.close();\r\n+\r\n+        em1 = emf.createEntityManager();\r\n+        pc1 = em1.find(AnnoTest3.class, new Long(3));\r\n+        assertEquals(2, pc1.getVersion());\r\n+        em1.close();\r\n+        try {\r\n+            em2.getTransaction().commit();\r\n+            fail(\"Optimistic fail\");\r\n+        } catch (Exception e) {\r\n+        } finally {\r\n+            em2.close();\r\n+        }\r\n+    }\r\n+\r\n+    public void testVersionNoChange() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+\r\n+        AnnoTest1 pc = em.find(AnnoTest1.class, new Long(5));\r\n+        assertEquals(1, pc.getVersion());\r\n+        assertEquals(0, pc.getTransient());\r\n+        pc.setTransient(750);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        pc = em.find(AnnoTest1.class, new Long(5));\r\n+        assertEquals(1, pc.getVersion());\r\n+        assertEquals(0, pc.getTransient());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testNoDefaultVersionWithoutFieldOrColumn() {\r\n+        ClassMapping cls = ((JDBCConfiguration) emf.getConfiguration()).\r\n+            getMappingRepositoryInstance().getMapping(EmbedOwner.class, \r\n+            null, true);\r\n+        assertEquals(NoneVersionStrategy.getInstance(),\r\n+            cls.getVersion().getStrategy());\r\n+        assertEquals(0, cls.getVersion().getColumns().length);\r\n+    }\r\n+\r\n+    public void testVersionWithField() {\r\n+        ClassMapping cls = ((JDBCConfiguration) emf.getConfiguration()).\r\n+            getMappingRepositoryInstance().getMapping(AnnoTest1.class, \r\n+            null, true);\r\n+        assertTrue(NoneVersionStrategy.getInstance() !=\r\n+            cls.getVersion().getStrategy());\r\n+        assertEquals(1, cls.getVersion().getColumns().length);\r\n+    }\r\n+}\r"},{"sha":"ca4bb7e84013677f8a5edbdd04698b75b287b1e8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/830cc35014e422f0bdf6b43cb7e1c709560876f1/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java?ref=830cc35014e422f0bdf6b43cb7e1c709560876f1","patch":"@@ -171,4 +171,13 @@ protected String entityName(EntityManagerFactory emf, Class c) {\n         ClassMetaData meta = JPAFacadeHelper.getMetaData(emf, c);\n         return (meta == null) ? null : meta.getTypeAlias();\n     }\n+\n+    public static void assertNotEquals(Object o1, Object o2) {\n+        if (o1 == o2)\n+            fail(\"expected args to be different; were the same instance.\");\n+        else if (o1 == null || o2 == null)\n+            return;\n+        else if (o1.equals(o2))\n+            fail(\"expected args to be different; compared equal.\");\n+    }\n }"}]}

