{"sha":"83190655e58bc8d4e769afaedfa50a5f6dcfd84a","node_id":"MDY6Q29tbWl0MjA2MzY0OjgzMTkwNjU1ZTU4YmM4ZDRlNzY5YWZhZWRmYTUwYTVmNmRjZmQ4NGE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-27T23:12:10Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-27T23:12:10Z"},"message":"OPENJPA-522\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.1.x@652026 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a804ad6ea266616ad1ae2317dfa9e96dc1879210","url":"https://api.github.com/repos/apache/openjpa/git/trees/a804ad6ea266616ad1ae2317dfa9e96dc1879210"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/83190655e58bc8d4e769afaedfa50a5f6dcfd84a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/83190655e58bc8d4e769afaedfa50a5f6dcfd84a","html_url":"https://github.com/apache/openjpa/commit/83190655e58bc8d4e769afaedfa50a5f6dcfd84a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/83190655e58bc8d4e769afaedfa50a5f6dcfd84a/comments","author":null,"committer":null,"parents":[{"sha":"cb555369c773e7583ea42c662c9ddecd43743525","url":"https://api.github.com/repos/apache/openjpa/commits/cb555369c773e7583ea42c662c9ddecd43743525","html_url":"https://github.com/apache/openjpa/commit/cb555369c773e7583ea42c662c9ddecd43743525"}],"stats":{"total":188,"additions":183,"deletions":5},"files":[{"sha":"06c8eb98f969e3a244cf73c400de12ae3998410d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/83190655e58bc8d4e769afaedfa50a5f6dcfd84a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/83190655e58bc8d4e769afaedfa50a5f6dcfd84a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=83190655e58bc8d4e769afaedfa50a5f6dcfd84a","patch":"@@ -237,6 +237,7 @@\n     private int _lifeCallbackMode = 0;\r\n \r\n     private transient boolean _initializeWasInvoked = false;\r\n+    private LinkedList _fcs;\r\n \r\n     /**\r\n      * Set the persistence manager's authentication. This is the first\r\n@@ -385,6 +386,20 @@ public FetchConfiguration getFetchConfiguration() {\n         return _fc;\r\n     }\r\n \r\n+    public FetchConfiguration pushFetchConfiguration() {\r\n+        if (_fcs == null)\r\n+            _fcs = new LinkedList();\r\n+        _fcs.add(_fc);\r\n+        _fc = (FetchConfiguration) _fc.clone();\r\n+        return _fc;\r\n+    }\r\n+\r\n+    public void popFetchConfiguration() {\r\n+        if (_fcs == null || _fcs.isEmpty())\r\n+            throw new UserException(_loc.get(\"fetch-configuration-stack-empty\"));\r\n+        _fc = (FetchConfiguration) _fcs.removeLast();\r\n+    }\r\n+\r\n     public int getConnectionRetainMode() {\r\n         return _connRetainMode;\r\n     }\r"},{"sha":"8e97520f1fd1b2072511a3d2f8f64b3922b979e7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/83190655e58bc8d4e769afaedfa50a5f6dcfd84a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","raw_url":"https://github.com/apache/openjpa/raw/83190655e58bc8d4e769afaedfa50a5f6dcfd84a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java?ref=83190655e58bc8d4e769afaedfa50a5f6dcfd84a","patch":"@@ -122,6 +122,22 @@ public FetchConfiguration getFetchConfiguration() {\n         }\n     }\n \n+    public FetchConfiguration pushFetchConfiguration() {\n+        try {\n+            return _broker.pushFetchConfiguration();\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public void popFetchConfiguration() {\n+        try {\n+            _broker.popFetchConfiguration();\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n     public ClassLoader getClassLoader() {\n         try {\n             return _broker.getClassLoader();"},{"sha":"1d8d9d500463cae1353ca19afb0f1576a72b1127","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/83190655e58bc8d4e769afaedfa50a5f6dcfd84a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","raw_url":"https://github.com/apache/openjpa/raw/83190655e58bc8d4e769afaedfa50a5f6dcfd84a/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java?ref=83190655e58bc8d4e769afaedfa50a5f6dcfd84a","patch":"@@ -61,6 +61,27 @@\n      */\n     public FetchConfiguration getFetchConfiguration();\n \n+    /**\n+     * Pushes a new fetch configuration that inherits from the current\n+     * fetch configuration onto a stack, and makes the new configuration\n+     * the active one.\n+     *\n+     * @since 1.1.0\n+     * @return the new fetch configuration\n+     */\n+    public FetchConfiguration pushFetchConfiguration();\n+\n+    /**\n+     * Pops the fetch configuration from the top of the stack, making the\n+     * next one down the active one. This returns void to avoid confusion,\n+     * since fetch configurations tend to be used in method-chaining\n+     * patterns often.\n+     *\n+     * @since 1.1.0\n+     * @throws UserException if the fetch configuration stack is empty\n+     */\n+    public void popFetchConfiguration();\n+\n     /**\n      * Return the current thread's class loader at the time this context\n      * was obtained."},{"sha":"c82129688691560397f3afbea017ce17a855de38","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/83190655e58bc8d4e769afaedfa50a5f6dcfd84a/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/83190655e58bc8d4e769afaedfa50a5f6dcfd84a/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties?ref=83190655e58bc8d4e769afaedfa50a5f6dcfd84a","patch":"@@ -399,3 +399,4 @@ cant-serialize-pessimistic-broker: Serialization not allowed for brokers with \\\n cant-serialize-connected-broker: Serialization not allowed for brokers with \\\n     an active connection to the database.\n no-interface-metadata: No metadata was found for managed interface {0}.\n+fetch-configuration-stack-empty: Fetch configuration stack is empty."},{"sha":"a029d662fbe0e36400fb6ae9b5da1795d0034802","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroupStacks.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/83190655e58bc8d4e769afaedfa50a5f6dcfd84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroupStacks.java","raw_url":"https://github.com/apache/openjpa/raw/83190655e58bc8d4e769afaedfa50a5f6dcfd84a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroupStacks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/TestFetchGroupStacks.java?ref=83190655e58bc8d4e769afaedfa50a5f6dcfd84a","patch":"@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.fetchgroups;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n+import org.apache.openjpa.persistence.PersistenceException;\n+\n+public class TestFetchGroupStacks extends SingleEMTestCase {\n+\n+    public void setUp() {\n+        setUp(FGManager.class, FGDepartment.class, FGEmployee.class,\n+            FGAddress.class);\n+    }\n+\n+    public void testFetchGroupStacks() {\n+        assertFetchGroups();\n+        em.getFetchPlan().addFetchGroup(\"foo\");\n+        assertFetchGroups(\"foo\");\n+        \n+        { // add one new fetch group\n+            em.pushFetchPlan().addFetchGroup(\"bar\"); // push 1\n+            assertFetchGroups(\"foo\", \"bar\");\n+\n+            { // add another one\n+                em.pushFetchPlan().addFetchGroup(\"baz\"); // push 2\n+                assertFetchGroups(\"foo\", \"bar\", \"baz\");\n+\n+                { // add a fourth, plus one that's already there\n+                    em.pushFetchPlan().addFetchGroups(\"quux\", \"foo\"); // push 3\n+                    assertFetchGroups(\"foo\", \"bar\", \"baz\", \"quux\");\n+                    em.popFetchPlan(); // pop 3\n+                }\n+\n+                // \"foo\" should still be there, since it was there before pop 3\n+                assertFetchGroups(\"foo\", \"bar\", \"baz\");\n+                em.popFetchPlan(); // pop 2\n+            }\n+\n+            assertFetchGroups(\"foo\", \"bar\");\n+            em.popFetchPlan(); // pop 1\n+        }\n+        assertFetchGroups(\"foo\");\n+\n+        try {\n+            em.popFetchPlan();\n+            fail(\"should be unbalanced\");\n+        } catch (RuntimeException e) {\n+            assertTrue(e.getMessage().contains(\"stack\"));\n+        }\n+    }\n+\n+    private void assertFetchGroups(String... fgs) {\n+        Set s = new HashSet();\n+        if (fgs != null)\n+            s.addAll(Arrays.asList(fgs));\n+        s.add(\"default\");\n+        assertEquals(s, em.getFetchPlan().getFetchGroups());\n+    }\n+}"},{"sha":"cf591de5a7ce39196c994d6c9def92f6ce1a52b6","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":33,"deletions":5,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/83190655e58bc8d4e769afaedfa50a5f6dcfd84a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/83190655e58bc8d4e769afaedfa50a5f6dcfd84a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=83190655e58bc8d4e769afaedfa50a5f6dcfd84a","patch":"@@ -31,6 +31,8 @@\n import java.util.Arrays;\r\n import java.util.Collection;\r\n import java.util.EnumSet;\r\n+import java.util.Map;\r\n+import java.util.HashMap;\r\n import javax.persistence.EntityManager;\r\n import javax.persistence.FlushModeType;\r\n import javax.persistence.LockModeType;\r\n@@ -51,6 +53,7 @@\n import org.apache.openjpa.kernel.QueryFlushModes;\r\n import org.apache.openjpa.kernel.QueryLanguages;\r\n import org.apache.openjpa.kernel.Seq;\r\n+import org.apache.openjpa.kernel.FetchConfiguration;\r\n import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n import org.apache.openjpa.lib.util.Closeable;\r\n import org.apache.openjpa.lib.util.Localizer;\r\n@@ -80,7 +83,8 @@\n \r\n     private DelegatingBroker _broker;\r\n     private EntityManagerFactoryImpl _emf;\r\n-    private FetchPlan _fetch = null;\r\n+    private Map<FetchConfiguration,FetchPlan> _plans =\r\n+        new HashMap<FetchConfiguration,FetchPlan>(1);\r\n \r\n     private RuntimeExceptionTranslator ret =\r\n         PersistenceExceptions.getRollbackTranslator(this);\r\n@@ -122,10 +126,34 @@ public FetchPlan getFetchPlan() {\n         assertNotCloseInvoked();\r\n         _broker.lock();\r\n         try {\r\n-            if (_fetch == null)\r\n-                _fetch = _emf.toFetchPlan(_broker,\r\n-                    _broker.getFetchConfiguration());\r\n-            return _fetch;\r\n+            FetchConfiguration fc = _broker.getFetchConfiguration();\r\n+            FetchPlan fp = _plans.get(fc);\r\n+            if (fp == null) {\r\n+                fp = _emf.toFetchPlan(_broker, fc);\r\n+                _plans.put(fc, fp);\r\n+            }\r\n+            return fp;\r\n+        } finally {\r\n+            _broker.unlock();\r\n+        }\r\n+    }\r\n+\r\n+    public FetchPlan pushFetchPlan() {\r\n+        assertNotCloseInvoked();\r\n+        _broker.lock();\r\n+        try {\r\n+            _broker.pushFetchConfiguration();\r\n+            return getFetchPlan();\r\n+        } finally {\r\n+            _broker.unlock();\r\n+        }\r\n+    }\r\n+\r\n+    public void popFetchPlan() {\r\n+        assertNotCloseInvoked();\r\n+        _broker.lock();\r\n+        try {\r\n+            _broker.popFetchConfiguration();\r\n         } finally {\r\n             _broker.unlock();\r\n         }\r"},{"sha":"9ca766bf4d0b2a626f09c7d2604e5b0b7735a761","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/83190655e58bc8d4e769afaedfa50a5f6dcfd84a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java","raw_url":"https://github.com/apache/openjpa/raw/83190655e58bc8d4e769afaedfa50a5f6dcfd84a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java?ref=83190655e58bc8d4e769afaedfa50a5f6dcfd84a","patch":"@@ -56,6 +56,24 @@\n      */\n     public FetchPlan getFetchPlan();\n \n+    /**\n+     * Pushes a new fetch plan that inherits from the current fetch plan onto\n+     * a stack, and makes the new plan the active one.\n+     *\n+     * @since 1.1.0\n+     * @return the new fetch plan\n+     */\n+    public FetchPlan pushFetchPlan();\n+\n+    /**\n+     * Pops the fetch plan from the top of the stack, making the next one down\n+     * the active one. This returns void to avoid confusion, since fetch plans\n+     * tend to be used in method-chaining patterns often.\n+     *\n+     * @since 1.1.0\n+     */\n+    public void popFetchPlan();\n+\n     /**\n      * Return the connection retain mode for this entity manager.\n      */"}]}

