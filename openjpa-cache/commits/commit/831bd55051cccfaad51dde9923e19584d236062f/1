{"sha":"831bd55051cccfaad51dde9923e19584d236062f","node_id":"MDY6Q29tbWl0MjA2MzY0OjgzMWJkNTUwNTFjY2NmYWFkNTFkZGU5OTIzZTE5NTg0ZDIzNjA2MmY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-03-21T15:48:30Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-03-21T15:48:30Z"},"message":"OPENJPA-528 committing patch provided by Jeremy Bauer\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@639681 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0c9653c127e2d68db26bcc1bf16c2d6479afb93b","url":"https://api.github.com/repos/apache/openjpa/git/trees/0c9653c127e2d68db26bcc1bf16c2d6479afb93b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/831bd55051cccfaad51dde9923e19584d236062f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/831bd55051cccfaad51dde9923e19584d236062f","html_url":"https://github.com/apache/openjpa/commit/831bd55051cccfaad51dde9923e19584d236062f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/831bd55051cccfaad51dde9923e19584d236062f/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"635ee199fef8533ed5a176e07d40b75dc8a66074","url":"https://api.github.com/repos/apache/openjpa/commits/635ee199fef8533ed5a176e07d40b75dc8a66074","html_url":"https://github.com/apache/openjpa/commit/635ee199fef8533ed5a176e07d40b75dc8a66074"}],"stats":{"total":41,"additions":33,"deletions":8},"files":[{"sha":"d9de442c7105d04f98b9e36f6e2bcdad440a75cf","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":29,"deletions":3,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/831bd55051cccfaad51dde9923e19584d236062f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/831bd55051cccfaad51dde9923e19584d236062f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=831bd55051cccfaad51dde9923e19584d236062f","patch":"@@ -2812,12 +2812,24 @@ public String getValidSequenceName(String name, Schema schema) {\n \n     /**\n      * Make any necessary changes to the given column name to make it valid\n-     * for the current DB.\n+     * for the current DB.  The column name will be made unique for the\n+     * specified table.\n      */\n     public String getValidColumnName(String name, Table table) {\n+        return getValidColumnName(name, table, true);\n+    }\n+\n+    /**\n+     * Make any necessary changes to the given column name to make it valid\n+     * for the current DB.  If checkForUniqueness is true, the column name will \n+     * be made unique for the specified table.\n+     */\n+    public String getValidColumnName(String name, Table table,\n+        boolean checkForUniqueness) {\n         while (name.startsWith(\"_\"))\n             name = name.substring(1);\n-        return makeNameValid(name, table, maxColumnNameLength, NAME_ANY);\n+        return makeNameValid(name, table, maxColumnNameLength, NAME_ANY,\n+            checkForUniqueness);\n     }\n \n     /**\n@@ -2924,6 +2936,20 @@ private static boolean stripVowel(StringBuffer name) {\n      */\n     protected String makeNameValid(String name, NameSet set, int maxLen,\n         int nameType) {\n+        return makeNameValid(name, set, maxLen, nameType, true);\n+    }\n+\n+    /**\n+     * Shortens the given name to the given maximum length, then checks that\n+     * it is not a reserved word. If it is reserved, appends a \"0\". If\n+     * the name conflicts with an existing schema component and uniqueness\n+     * checking is enabled, the last character is replace with '0', then \n+     * '1', etc. \n+     * Note that the given max len may be 0 if the database metadata is \n+     * incomplete.\n+     */\n+    protected String makeNameValid(String name, NameSet set, int maxLen,\n+        int nameType, boolean checkForUniqueness) {\n         if (maxLen < 1)\n             maxLen = 255;\n         if (name.length() > maxLen)\n@@ -2935,7 +2961,7 @@ protected String makeNameValid(String name, NameSet set, int maxLen,\n         }\n \n         // now make sure the name is unique\n-        if (set != null) {\n+        if (set != null && checkForUniqueness) {\n             outer:\n             for (int version = 1, chars = 1; true; version++) {\n                 // for table names, we check for the table itself in case the"},{"sha":"a33e02aeb366597537c99fd085347c92deb9e51f","filename":"openjpa-persistence-jdbc/pom.xml","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/831bd55051cccfaad51dde9923e19584d236062f/openjpa-persistence-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/831bd55051cccfaad51dde9923e19584d236062f/openjpa-persistence-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/pom.xml?ref=831bd55051cccfaad51dde9923e19584d236062f","patch":"@@ -481,8 +481,6 @@\n                         <exclude>org/apache/openjpa/persistence/meta/TestValueStrategies.java</exclude>\n                         <exclude>org/apache/openjpa/persistence/meta/TestXMLPersistenceMetaDataSerializer.java</exclude>\n                   \n-                        <!--  Exclude until root cause of TCK problem is found. -->\n-                        <exclude>org/apache/openjpa/persistence/jdbc/TestFKColumnNames.java</exclude>\n                     </excludes>\n                     <systemProperties>\n                         <property>"},{"sha":"cbaafd4572ab92e88fa78a2cddec1fa9b0b53787","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/PersistenceMappingDefaults.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/831bd55051cccfaad51dde9923e19584d236062f/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/PersistenceMappingDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/831bd55051cccfaad51dde9923e19584d236062f/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/PersistenceMappingDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/PersistenceMappingDefaults.java?ref=831bd55051cccfaad51dde9923e19584d236062f","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.openjpa.persistence.jdbc;\n \n-import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.Discriminator;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -192,8 +191,10 @@ public void populateForeignKeyColumn(ValueMapping vm, String name,\n             if (isRemoveHungarianNotation())\n                 name = removeHungarianNotation(name);\n \n-            name = dict.getValidColumnName(name, local);\n-            col.setName(name + \"_\" + ((Column) target).getName());\n+            name = name + \"_\" + ((Column) target).getName();\n+            // No need to check for uniqueness.\n+            name = dict.getValidColumnName(name, local, false);\n+            col.setName(name);\n         }\n     }\n "}]}

