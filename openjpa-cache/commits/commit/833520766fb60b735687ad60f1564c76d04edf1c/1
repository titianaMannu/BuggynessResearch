{"sha":"833520766fb60b735687ad60f1564c76d04edf1c","node_id":"MDY6Q29tbWl0MjA2MzY0OjgzMzUyMDc2NmZiNjBiNzM1Njg3YWQ2MGYxNTY0Yzc2ZDA0ZWRmMWM=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-08-20T18:32:21Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-08-20T18:32:21Z"},"message":"OPENJPA-526: Insert text more than 4K bytes to Clob column causes SQLException: Exhausted Resultset\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@987598 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"802bb399c141a1d7a224714b4042345f4d009045","url":"https://api.github.com/repos/apache/openjpa/git/trees/802bb399c141a1d7a224714b4042345f4d009045"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/833520766fb60b735687ad60f1564c76d04edf1c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/833520766fb60b735687ad60f1564c76d04edf1c","html_url":"https://github.com/apache/openjpa/commit/833520766fb60b735687ad60f1564c76d04edf1c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/833520766fb60b735687ad60f1564c76d04edf1c/comments","author":null,"committer":null,"parents":[{"sha":"696786e93e3556d8fb3b08de381990c946610308","url":"https://api.github.com/repos/apache/openjpa/commits/696786e93e3556d8fb3b08de381990c946610308","html_url":"https://github.com/apache/openjpa/commit/696786e93e3556d8fb3b08de381990c946610308"}],"stats":{"total":404,"additions":369,"deletions":35},"files":[{"sha":"bc01583bc0467122a866fb79a0d4e2583b26caad","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedBlobFieldStrategy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/833520766fb60b735687ad60f1564c76d04edf1c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedBlobFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/833520766fb60b735687ad60f1564c76d04edf1c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedBlobFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedBlobFieldStrategy.java?ref=833520766fb60b735687ad60f1564c76d04edf1c","patch":"@@ -54,7 +54,7 @@ protected int getExpectedJavaType() {\n     protected void update(OpenJPAStateManager sm, Row row)\n         throws SQLException {\n         byte[] b = (byte[]) sm.getImplData(field.getIndex());\n-        if (b == null || b.length > _maxSize)\n+        if (b == null || (b.length > _maxSize && !field.getColumns()[0].isNotNull()))\n             row.setNull(field.getColumns()[0], true);\n         else {\n             sm.setImplData(field.getIndex(), null);"},{"sha":"bdd88cb38609195d0e0067884c6fb0535fbb3a38","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedByteArrayFieldStrategy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/833520766fb60b735687ad60f1564c76d04edf1c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedByteArrayFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/833520766fb60b735687ad60f1564c76d04edf1c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedByteArrayFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedByteArrayFieldStrategy.java?ref=833520766fb60b735687ad60f1564c76d04edf1c","patch":"@@ -58,7 +58,7 @@ protected void update(OpenJPAStateManager sm, Row row)\n         throws SQLException {\n         byte[] b = PrimitiveWrapperArrays.toByteArray(sm.fetchObject\n             (field.getIndex()));\n-        if (b == null || b.length > _maxSize)\n+        if (b == null || (b.length > _maxSize && !field.getColumns()[0].isNotNull()))\n             row.setBytes(field.getColumns()[0], null);\n         else\n             row.setBytes(field.getColumns()[0], b);"},{"sha":"c81c334d061266653da81c8cfb4cfd6ba7d9c0ce","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedClobFieldStrategy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/833520766fb60b735687ad60f1564c76d04edf1c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedClobFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/833520766fb60b735687ad60f1564c76d04edf1c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedClobFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedClobFieldStrategy.java?ref=833520766fb60b735687ad60f1564c76d04edf1c","patch":"@@ -53,7 +53,7 @@ protected int getExpectedJavaType() {\n     protected void update(OpenJPAStateManager sm, Row row)\n         throws SQLException {\n         String s = sm.fetchString(field.getIndex());\n-        if (s == null || s.length() > _maxSize)\n+        if (s == null || (s.length() > _maxSize && !field.getColumns()[0].isNotNull()))\n             row.setNull(field.getColumns()[0], true);\n         else\n             row.setString(field.getColumns()[0], s);"},{"sha":"4f4fb3ab8a715a51520521c1bcc7a95db69ef0ab","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","status":"modified","additions":23,"deletions":1,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/833520766fb60b735687ad60f1564c76d04edf1c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/833520766fb60b735687ad60f1564c76d04edf1c/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java?ref=833520766fb60b735687ad60f1564c76d04edf1c","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.openjpa.jdbc.sql;\n \n+import java.io.InputStream;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.security.AccessController;\n@@ -38,7 +39,6 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n \n import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n@@ -545,6 +545,28 @@ public void setString(PreparedStatement stmnt, int idx, String val,\n         super.setString(stmnt, idx, val, col);\n     }\n \n+    @Override\n+    public void setBinaryStream(PreparedStatement stmnt, int idx,\n+        InputStream val, int length, Column col)\n+        throws SQLException {\n+        if (length == 0)\n+            stmnt.setBlob(idx, getEmptyBlob());\n+        else {\n+            super.setBinaryStream(stmnt, idx, val, length, col);\n+        }\n+    }\n+\n+    @Override\n+    public void setClobString(PreparedStatement stmnt, int idx, String val,\n+        Column col)\n+        throws SQLException {\n+        if (!useSetStringForClobs && val.length() == 0)\n+            stmnt.setClob(idx, getEmptyClob());\n+        else {\n+            super.setClobString(stmnt, idx, val, col);\n+        }\n+    }\n+\n     @Override\n     public void setNull(PreparedStatement stmnt, int idx, int colType,\n         Column col)"},{"sha":"fa3f0a0a2af5f736fb5b69d5ce1006b22dd3fdad","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestBeforeCommit.java","status":"modified","additions":18,"deletions":4,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/833520766fb60b735687ad60f1564c76d04edf1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestBeforeCommit.java","raw_url":"https://github.com/apache/openjpa/raw/833520766fb60b735687ad60f1564c76d04edf1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestBeforeCommit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestBeforeCommit.java?ref=833520766fb60b735687ad60f1564c76d04edf1c","patch":"@@ -24,6 +24,9 @@\n \n import org.apache.openjpa.event.TransactionEvent;\n import org.apache.openjpa.event.TransactionListener;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.OracleDictionary;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n import org.apache.openjpa.persistence.test.AbstractPersistenceTestCase;\n@@ -32,13 +35,15 @@\n \n     AnEntity ae = null;\n     public final int PKID = 2;\n+    private DBDictionary dict = null;\n \n     private static OpenJPAEntityManagerFactorySPI emf = null;\n \n     public void setUp() {\n         if (emf == null) {\n             emf = createEMF(AnEntity.class);\n         }\n+        dict = ((JDBCConfiguration) emf.getConfiguration()).getDBDictionaryInstance();\n         EntityManager em = emf.createEntityManager();\n         EntityTransaction tran = em.getTransaction();\n \n@@ -62,7 +67,10 @@ public void testQuery() {\n \n         tran.begin();\n         ae = doQuery(em);\n-        assertEquals(\"\", ae.getName());\n+        if (dict instanceof OracleDictionary)\n+            assertNull(ae.getName());\n+        else\n+            assertEquals(\"\", ae.getName());\n         assertEquals(1, ae.getVersion());\n         tran.commit();\n \n@@ -90,7 +98,10 @@ public void testEmptyTransaction() {\n         em.addTransactionListener(this);\n         EntityTransaction tran = em.getTransaction();\n         ae = doQuery(em);\n-        assertEquals(\"\", ae.getName());\n+        if (dict instanceof OracleDictionary)\n+            assertNull(ae.getName());\n+        else \n+            assertEquals(\"\", ae.getName());\n         assertEquals(1, ae.getVersion());\n         em.clear();\n \n@@ -100,12 +111,15 @@ public void testEmptyTransaction() {\n         // when BeforeCommit was fired AE was not managed. As a result its state is out of sync with the database.\n         assertEquals(\"Ava\", ae.getName());\n         ae = doQuery(em);\n-        assertEquals(\"\", ae.getName());\n+        if (dict instanceof OracleDictionary)\n+            assertNull(ae.getName());\n+        else \n+            assertEquals(\"\", ae.getName());\n         assertEquals(1, ae.getVersion());\n     }\n \n     public void beforeCommit(TransactionEvent event) {\n-        ae.setName(ae.getName() + \"Ava\");\n+        ae.setName(ae.getName() == null ?  \"Ava\" : ae.getName()+ \"Ava\");\n     }\n \n     private AnEntity doQuery(EntityManager em) {"},{"sha":"078d7a8f1ecdf1fb025c8b523e78f9f49c3eea4a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestLobs.java","status":"added","additions":215,"deletions":0,"changes":215,"blob_url":"https://github.com/apache/openjpa/blob/833520766fb60b735687ad60f1564c76d04edf1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestLobs.java","raw_url":"https://github.com/apache/openjpa/raw/833520766fb60b735687ad60f1564c76d04edf1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestLobs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestLobs.java?ref=833520766fb60b735687ad60f1564c76d04edf1c","patch":"@@ -0,0 +1,215 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+import javax.persistence.RollbackException;\r\n+\r\n+import junit.framework.AssertionFailedError;\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.Blobs;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.Lobs;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+public class TestLobs extends SingleEMFTestCase {\r\n+    /**\r\n+     * Support method to get a random Byte for testing.\r\n+     */\r\n+    public static Byte randomByte() {\r\n+        return new Byte((byte) (Math.random() * Byte.MAX_VALUE));\r\n+    }\r\n+\r\n+    public void setUp() throws Exception {\r\n+        super.setUp(DROP_TABLES, Lobs.class, Blobs.class);\r\n+    }\r\n+    public void testNullableAndNonNullableBLobs() {\r\n+        // test with null\r\n+        EntityManager em = emf.createEntityManager();\r\n+        Blobs lobs = new Blobs();\r\n+        byte[] bytes = new byte[10];\r\n+        for (int i = 0; i < bytes.length; i++)\r\n+            bytes[i] = randomByte().byteValue();\r\n+\r\n+        em.getTransaction().begin();\r\n+        lobs.setLobNotNullable(bytes);\r\n+        lobs.setLobNullable(null);\r\n+        em.persist(lobs);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        lobs = new Blobs();\r\n+        lobs.setLobNotNullable(null);\r\n+        lobs.setLobNullable(null);\r\n+        em.persist(lobs);\r\n+        try {\r\n+            em.getTransaction().commit();\r\n+        } catch (Exception e) {\r\n+            assertError(e, RollbackException.class);\r\n+        }\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        Query query = em.createQuery(\"select e from Blobs e\");\r\n+        lobs = (Blobs)query.getSingleResult();\r\n+        assertTrue(lobs.getLobNullable() == null || lobs.getLobNullable().length == 0);   // still an empty string\r\n+        em.remove(lobs);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        // test with 0 length bytes\r\n+        bytes = new byte[0];\r\n+        em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        lobs.setLobNotNullable(bytes);\r\n+        lobs.setLobNullable(bytes);\r\n+        em.persist(lobs);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        query = em.createQuery(\"select e from Blobs e\");\r\n+        lobs = (Blobs)query.getSingleResult();\r\n+        assertTrue(lobs.getLobNullable() == null || lobs.getLobNullable().length == 0);\r\n+        assertTrue(lobs.getLobNotNullable() == null || lobs.getLobNotNullable().length == 0);\r\n+        for (int i = 0; i < bytes.length; i++) {\r\n+            assertEquals(bytes[i], lobs.getLobNullable()[i]);\r\n+        }\r\n+        em.remove(lobs);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        // test with large data\r\n+        bytes = new byte[5000];\r\n+        for (int i = 0; i < bytes.length; i++)\r\n+            bytes[i] = randomByte().byteValue();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        lobs = new Blobs();\r\n+        em.getTransaction().begin();\r\n+        lobs.setLobNotNullable(bytes);\r\n+        lobs.setLobNullable(bytes);\r\n+        em.persist(lobs);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        query = em.createQuery(\"select e from Blobs e\");\r\n+        lobs = (Blobs)query.getSingleResult();\r\n+        for (int i = 0; i < 5000; i++) {\r\n+            assertEquals(lobs.getLobNullable()[i], lobs.getLobNotNullable()[i]);\r\n+            assertEquals(bytes[i], lobs.getLobNullable()[i]);\r\n+        }\r\n+        em.remove(lobs);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testNullableAndNonNullableLobs() {\r\n+        // test with null\r\n+        EntityManager em = emf.createEntityManager();\r\n+        Lobs lobs = new Lobs();\r\n+        em.getTransaction().begin();\r\n+        lobs.setLobNotNullable(\"test\");\r\n+        lobs.setLobNullable(null);\r\n+        em.persist(lobs);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        lobs = new Lobs();\r\n+        lobs.setLobNotNullable(null);\r\n+        lobs.setLobNullable(null);\r\n+        em.persist(lobs);\r\n+        try {\r\n+            em.getTransaction().commit();\r\n+        } catch (Exception e) {\r\n+            assertError(e, RollbackException.class);\r\n+        }\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        Query query = em.createQuery(\"select e from Lobs e\");\r\n+        lobs = (Lobs)query.getSingleResult();\r\n+        // Oracle treats \"\" as null\r\n+        assertTrue(lobs.getLobNullable() == null || lobs.getLobNullable().length() == 0);   // still an empty string\r\n+        em.remove(lobs);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        // test with \"\"\r\n+        em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        lobs.setLobNotNullable(\"\");\r\n+        lobs.setLobNullable(\"\");\r\n+        em.persist(lobs);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        query = em.createQuery(\"select e from Lobs e\");\r\n+        lobs = (Lobs)query.getSingleResult();\r\n+        assertTrue(lobs.getLobNullable() == null || lobs.getLobNullable().length() == 0);\r\n+        assertTrue(lobs.getLobNotNullable() == null || lobs.getLobNotNullable().length() == 0);\r\n+        assertEquals(lobs.getLobNullable(), lobs.getLobNotNullable());\r\n+        em.remove(lobs);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        // test with large data\r\n+        String temp = \"\";\r\n+        for (int i = 0; i < 500; i++) // at 400 it changes from strings to Objects\r\n+            temp = temp + \"1234567890\";\r\n+\r\n+        em = emf.createEntityManager();\r\n+        lobs = new Lobs();\r\n+        em.getTransaction().begin();\r\n+        lobs.setLobNotNullable(temp);\r\n+        lobs.setLobNullable(temp);\r\n+        em.persist(lobs);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        query = em.createQuery(\"select e from Lobs e\");\r\n+        lobs = (Lobs)query.getSingleResult();\r\n+        assertEquals(lobs.getLobNullable(), lobs.getLobNotNullable());\r\n+        assertEquals(temp, lobs.getLobNullable());\r\n+        em.remove(lobs);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+\r\n+    void assertError(Throwable actual, Class<? extends Throwable> expected) {\r\n+        if (!expected.isAssignableFrom(actual.getClass())) {\r\n+            actual.printStackTrace();\r\n+            throw new AssertionFailedError(actual.getClass().getName() + \" was raised but expected \"\r\n+                    + expected.getName());\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"69cb132c113b0554d3865d2c43535e46dd354840","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Blobs.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/833520766fb60b735687ad60f1564c76d04edf1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Blobs.java","raw_url":"https://github.com/apache/openjpa/raw/833520766fb60b735687ad60f1564c76d04edf1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Blobs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Blobs.java?ref=833520766fb60b735687ad60f1564c76d04edf1c","patch":"@@ -0,0 +1,75 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel.common.apps;\r\n+\r\n+import java.io.Serializable;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Lob;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name = \"blobs\")\r\n+public class Blobs implements Serializable {\r\n+\r\n+    private static final long serialVersionUID = 1L;\r\n+\r\n+    @Lob\r\n+    @Column(name = \"lobNullable\", nullable = true)\r\n+    protected byte[] lobNullable = null;\r\n+\r\n+    @Lob\r\n+    @Column(name = \"lobNotNullable\", nullable = false)\r\n+    protected byte[] lobNotNullable;;\r\n+\r\n+    @Id\r\n+    public int id;\r\n+\r\n+    public Blobs() {\r\n+    }\r\n+\r\n+    public Blobs(int key) {\r\n+        id = key;\r\n+    }\r\n+\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public byte[] getLobNullable() {\r\n+        return (byte[]) lobNullable;\r\n+    }\r\n+\r\n+    public void setLobNullable(byte[] lob) {\r\n+        this.lobNullable = lob;\r\n+    }\r\n+\r\n+    public byte[] getLobNotNullable() {\r\n+        return (byte[])lobNotNullable;\r\n+    }\r\n+\r\n+    public void setLobNotNullable(byte[] lob) {\r\n+        this.lobNotNullable = lob;\r\n+    }\r\n+}\r"},{"sha":"e841dae1571819a6aa84b2493053ea4baf3f1793","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Lobs.java","status":"modified","additions":18,"deletions":20,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/833520766fb60b735687ad60f1564c76d04edf1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Lobs.java","raw_url":"https://github.com/apache/openjpa/raw/833520766fb60b735687ad60f1564c76d04edf1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Lobs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Lobs.java?ref=833520766fb60b735687ad60f1564c76d04edf1c","patch":"@@ -1,6 +1,3 @@\n-/**\n- *\n- */\n /*\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -22,27 +19,25 @@\n package org.apache.openjpa.persistence.kernel.common.apps;\n \n import java.io.Serializable;\n-import javax.persistence.Basic;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n-import javax.persistence.FetchType;\n import javax.persistence.Id;\n import javax.persistence.Lob;\n import javax.persistence.Table;\n \n-/**\n- * @author aokeke\n- */\n @Entity\n @Table(name = \"lobs\")\n public class Lobs implements Serializable {\n \n     private static final long serialVersionUID = 1L;\n \n     @Lob\n-    @Basic(fetch = FetchType.EAGER)\n-    @Column(name = \"report\")\n-    protected String lob = null;\n+    @Column(name = \"lobNullable\", nullable = true)\n+    protected String lobNullable = null;\n+\n+    @Lob\n+    @Column(name = \"lobNotNullable\", nullable = false)\n+    protected String lobNotNullable = \"\";\n \n     @Id\n     public int id;\n@@ -54,11 +49,6 @@ public Lobs(int key) {\n         id = key;\n     }\n \n-    public Lobs(String report, int key) {\n-        this.lob = report;\n-        this.id = key;\n-    }\n-\n     public int getId() {\n         return id;\n     }\n@@ -67,11 +57,19 @@ public void setId(int id) {\n         this.id = id;\n     }\n \n-    public String getLob() {\n-        return lob;\n+    public String getLobNullable() {\n+        return lobNullable;\n+    }\n+\n+    public void setLobNullable(String lob) {\n+        this.lobNullable = lob;\n+    }\n+\n+    public String getLobNotNullable() {\n+        return lobNotNullable;\n     }\n \n-    public void setLob(String lob) {\n-        this.lob = lob;\n+    public void setLobNotNullable(String lob) {\n+        this.lobNotNullable = lob;\n     }\n }"},{"sha":"c795986ccf3b74c4db58940fad45f2a3eb70306c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","status":"modified","additions":17,"deletions":7,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/833520766fb60b735687ad60f1564c76d04edf1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","raw_url":"https://github.com/apache/openjpa/raw/833520766fb60b735687ad60f1564c76d04edf1c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java?ref=833520766fb60b735687ad60f1564c76d04edf1c","patch":"@@ -21,10 +21,12 @@\n import java.util.List;\n \n import javax.persistence.EntityManager;\n-import javax.persistence.PersistenceException;\n+import javax.persistence.Query;\n import javax.persistence.RollbackException;\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.OracleDictionary;\n import org.apache.openjpa.persistence.InvalidStateException;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n \n@@ -38,8 +40,10 @@\n  */\n public class TestBasicFieldNullity extends AbstractNullityTestCase {\n \n+    private DBDictionary dict = null;\n     public void setUp() {\n         setUp(CLEAR_TABLES, RETAIN_DATA, NullValues.class);\n+        dict = ((JDBCConfiguration)emf.getConfiguration()).getDBDictionaryInstance();\n     }\n \n     public void testNullOnOptionalFieldIsAllowed() {\n@@ -154,14 +158,20 @@ public void testUniqueStringColumnAsEmpty() {\n         assertCommitSucceeds(pc, NEW);\n         \n         String jpql = \"select n from NullValues n where n.uniqueNullable = :p\";\n+        if (dict instanceof OracleDictionary)\n+            jpql = \"select n from NullValues n where n.uniqueNullable IS NULL\";\n         EntityManager em = emf.createEntityManager();\n-        List<NullValues> result = em.createQuery(jpql, NullValues.class)\n-                                    .setParameter(\"p\", EMPTY_STRING)\n-                                    .getResultList();\n+        Query  query = em.createQuery(jpql, NullValues.class);\n+        if (!(dict instanceof OracleDictionary))\n+            query.setParameter(\"p\", EMPTY_STRING);\n+        List<NullValues> result = query.getResultList();\n         assertFalse(result.isEmpty());\n-        for (NullValues n : result)\n-            assertEquals(EMPTY_STRING, n.getUniqueNullable());\n-        \n+        for (NullValues n : result) {\n+            if (dict instanceof OracleDictionary)\n+                assertNull(n.getUniqueNullable());\n+            else\n+                assertEquals(EMPTY_STRING, n.getUniqueNullable()); \n+        }\n     }\n     \n     boolean isUniqueColumnNullable() {"}]}

