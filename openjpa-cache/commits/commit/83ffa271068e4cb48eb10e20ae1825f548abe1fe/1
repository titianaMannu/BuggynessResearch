{"sha":"83ffa271068e4cb48eb10e20ae1825f548abe1fe","node_id":"MDY6Q29tbWl0MjA2MzY0OjgzZmZhMjcxMDY4ZTRjYjQ4ZWIxMGUyMGFlMTgyNWY1NDhhYmUxZmU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-10-21T18:35:27Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-10-21T18:35:27Z"},"message":"OPENJPA-1308:\nRemove extraneous cast of VARCHAR to VARCHAR for DB2.\nSubmitted By: B.J. Reed\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@828135 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2ff7ddb45771f592a01b6aef2ac1f97188036302","url":"https://api.github.com/repos/apache/openjpa/git/trees/2ff7ddb45771f592a01b6aef2ac1f97188036302"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/83ffa271068e4cb48eb10e20ae1825f548abe1fe","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/83ffa271068e4cb48eb10e20ae1825f548abe1fe","html_url":"https://github.com/apache/openjpa/commit/83ffa271068e4cb48eb10e20ae1825f548abe1fe","comments_url":"https://api.github.com/repos/apache/openjpa/commits/83ffa271068e4cb48eb10e20ae1825f548abe1fe/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"dae276b033f79f5c4f914da4258a32daf8ecf38b","url":"https://api.github.com/repos/apache/openjpa/commits/dae276b033f79f5c4f914da4258a32daf8ecf38b","html_url":"https://github.com/apache/openjpa/commit/dae276b033f79f5c4f914da4258a32daf8ecf38b"}],"stats":{"total":176,"additions":160,"deletions":16},"files":[{"sha":"82fce7277ab19dcefb8e3ff3a70072b26fbe653b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/83ffa271068e4cb48eb10e20ae1825f548abe1fe/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java","raw_url":"https://github.com/apache/openjpa/raw/83ffa271068e4cb48eb10e20ae1825f548abe1fe/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToLowerCase.java?ref=83ffa271068e4cb48eb10e20ae1825f548abe1fe","patch":"@@ -43,7 +43,11 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         DBDictionary dict = ctx.store.getDBDictionary();\n         String func = dict.toLowerCaseFunction;\n         dict.assertSupport(func != null, \"ToLowerCaseFunction\");\n-        func = dict.getCastFunction(getValue(), func);\n+        if (getValue() instanceof PCPath) {\n+            func = dict.getCastFunction(getValue(), func, ((PCPath) getValue()).getFieldMapping(state).getColumns()[0]);\n+        } else {\n+            func = dict.getCastFunction(getValue(), func);\n+        }\n \n         int idx = func.indexOf(\"{0}\");\n         buf.append(func.substring(0, idx));"},{"sha":"3914ff1e40457795c42c171da2855d92575c3091","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/83ffa271068e4cb48eb10e20ae1825f548abe1fe/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java","raw_url":"https://github.com/apache/openjpa/raw/83ffa271068e4cb48eb10e20ae1825f548abe1fe/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ToUpperCase.java?ref=83ffa271068e4cb48eb10e20ae1825f548abe1fe","patch":"@@ -43,7 +43,11 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         DBDictionary dict = ctx.store.getDBDictionary();\n         String func = dict.toUpperCaseFunction;\n         dict.assertSupport(func != null, \"ToUpperCaseFunction\");\n-        func = dict.getCastFunction(getValue(), func);\n+        if (getValue() instanceof PCPath) {\n+            func = dict.getCastFunction(getValue(), func, ((PCPath) getValue()).getFieldMapping(state).getColumns()[0]);\n+        } else {\n+            func = dict.getCastFunction(getValue(), func);\n+        }\n \n         int idx = func.indexOf(\"{0}\");\n         buf.append(func.substring(0, idx));"},{"sha":"49ff908876e070c60ee8b47af761892913afe6e5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/83ffa271068e4cb48eb10e20ae1825f548abe1fe/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/83ffa271068e4cb48eb10e20ae1825f548abe1fe/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java?ref=83ffa271068e4cb48eb10e20ae1825f548abe1fe","patch":"@@ -38,13 +38,9 @@ public AbstractDB2Dictionary() {\n \n         // DB2-based databases have restrictions on having uncast parameters\n         // in string functions\n-        toUpperCaseFunction = \"UPPER(CAST({0} AS VARCHAR(\" + varcharCastLength\n-            + \")))\";\n-        toLowerCaseFunction = \"LOWER(CAST({0} AS VARCHAR(\" + varcharCastLength\n-            + \")))\";\n         stringLengthFunction = \"LENGTH({0})\";\n         concatenateFunction = \"(CAST({0} AS VARCHAR(\" + varcharCastLength\n-            + \")))||(CAST({1} AS VARCHAR(1000)))\";\n+            + \")))||(CAST({1} AS VARCHAR(\" + varcharCastLength + \")))\";\n \n         trimLeadingFunction = \"LTRIM({0})\";\n         trimTrailingFunction = \"RTRIM({0})\";\n@@ -60,6 +56,7 @@ public AbstractDB2Dictionary() {\n         supportsLockingWithOuterJoin = false;\n         supportsLockingWithInnerJoin = false;\n         supportsLockingWithSelectRange = true;\n+        supportsCaseConversionForLob = true;\n \n         requiresAutoCommitForMetaData = true;\n         requiresAliasForSubselect = true;"},{"sha":"6e2bcb1237adfcc3af9e883d6ee2e97ea5341fa7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":30,"deletions":3,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/83ffa271068e4cb48eb10e20ae1825f548abe1fe/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/83ffa271068e4cb48eb10e20ae1825f548abe1fe/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=83ffa271068e4cb48eb10e20ae1825f548abe1fe","patch":"@@ -729,9 +729,36 @@ public int getBatchLimit() {\n      * @return a String with the correct CAST function syntax\n      */\n     public String getCastFunction(Val val, String func) {\n-        if (val instanceof Lit || val instanceof Param)\n-            if (func.indexOf(\"VARCHAR\") == -1)\n-                func = addCastAsString(func, \"{0}\", \" AS VARCHAR(1000)\");\n+        if (val instanceof Lit || val instanceof Param) {\n+            if (func.indexOf(\"VARCHAR\") == -1) {\n+                func = addCastAsString(func, \"{0}\", \" AS VARCHAR(\" + varcharCastLength + \")\");\n+            }\n+        }\n+        return func;\n+    }\n+    \n+    /**\n+     * Return the correct CAST function syntax\n+     * \n+     * @param val operand of cast\n+     * @param func original string\n+     * @param col database column\n+     * @return a String with the correct CAST function syntax\n+     */\n+    public String getCastFunction(Val val, String func, Column col) {\n+        boolean doCast = false;\n+        if (val instanceof Lit || val instanceof Param) {\n+        \tdoCast = true;\n+        }\n+        // cast anything not already a VARCHAR to VARCHAR\n+        if (col.getType() != Types.VARCHAR) {\n+            doCast = true;\n+        }\n+        if (doCast == true) {\n+            if (func.indexOf(\"VARCHAR\") == -1) {\n+                func = addCastAsString(func, \"{0}\", \" AS VARCHAR(\" + varcharCastLength + \")\");\n+            }\n+        }\n         return func;\n     }\n "},{"sha":"96cf76fbef1bba2997326af5eb63c7a94b904538","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/83ffa271068e4cb48eb10e20ae1825f548abe1fe/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/83ffa271068e4cb48eb10e20ae1825f548abe1fe/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=83ffa271068e4cb48eb10e20ae1825f548abe1fe","patch":"@@ -239,6 +239,7 @@\n     public boolean supportsModOperator = false;\n     public boolean supportsXMLColumn = false;\n     public boolean reportsSuccessNoInfoOnBatchUpdates = false;\n+    public boolean supportsCaseConversionForLob = false;\n     \n     /**\n      * Some Databases append whitespace after the schema name \n@@ -4400,6 +4401,19 @@ protected long copy(Reader reader, Writer writer) throws IOException {\n     public String getCastFunction(Val val, String func) {\n         return func;\n     }\n+\n+    /**\n+     * Return the correct CAST function syntax.  This should be overriden by subclasses\n+     * that need access to the Column information.\n+     * \n+     * @param val operand of cast\n+     * @param func original string\n+     * @param col database column\n+     * @return a String with the correct CAST function syntax\n+     */\n+    public String getCastFunction(Val val, String func, Column col) {\n+    \treturn getCastFunction (val, func);\n+    }\n     \n     /**\n      * Create an index if necessary for some database tables"},{"sha":"3dee559500785a6c4e61cc14f44fca366210254f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/83ffa271068e4cb48eb10e20ae1825f548abe1fe/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/83ffa271068e4cb48eb10e20ae1825f548abe1fe/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java?ref=83ffa271068e4cb48eb10e20ae1825f548abe1fe","patch":"@@ -45,6 +45,8 @@ public DerbyDictionary() {\n         validationSQL = \"VALUES(1)\";\n         stringLengthFunction = \"LENGTH({0})\";\n         substringFunctionName = \"SUBSTR\";\n+        toUpperCaseFunction = \"UPPER(CAST({0} AS VARCHAR(\" + varcharCastLength + \")))\";\n+        toLowerCaseFunction = \"LOWER(CAST({0} AS VARCHAR(\" + varcharCastLength + \")))\";\n \n         maxConstraintNameLength = 18;\n         maxIndexNameLength = 128;"},{"sha":"eb9a35a8443c6b177aff03283d93ac436901186c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/CompUser.java","status":"modified","additions":37,"deletions":6,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/83ffa271068e4cb48eb10e20ae1825f548abe1fe/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/CompUser.java","raw_url":"https://github.com/apache/openjpa/raw/83ffa271068e4cb48eb10e20ae1825f548abe1fe/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/CompUser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/CompUser.java?ref=83ffa271068e4cb48eb10e20ae1825f548abe1fe","patch":"@@ -18,10 +18,20 @@\n  */\n package org.apache.openjpa.persistence.common.apps;\n \n-import javax.persistence.*;\n-import org.apache.openjpa.persistence.*;\n-\n-import java.util.*;\n+import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.Lob;\n+import javax.persistence.OneToOne;\n+\n+import org.apache.openjpa.persistence.PersistentCollection;\n \n @Entity\n @Inheritance(strategy=InheritanceType.SINGLE_TABLE)\n@@ -37,7 +47,11 @@\n \t@Basic\n \t@Column(name=\"compName\", length=50)\n \tprivate String computerName;\n-\n+    \n+\t@Basic\n+    @Lob\n+    private String nameAsLob;\n+\t\n \t@PersistentCollection\n \tprivate String[] nicknames = new String[0];\n \n@@ -57,6 +71,7 @@ public CompUser(String name, String cName, Address address, int age)\n \t\tthis.computerName = cName;\n \t\tthis.address = address;\n \t\tthis.age = age;\n+\t\tthis.nameAsLob = name;\n \t}\n \n \tpublic String getComputerName() {\n@@ -83,7 +98,15 @@ public Address getAddress() {\n \t\treturn address;\n \t}\n \n-\tpublic void setAddress(Address address) {\n+\tpublic String[] getNicknames() {\n+        return nicknames;\n+    }\n+\n+    public void setNicknames(String[] nicknames) {\n+        this.nicknames = nicknames;\n+    }\n+\n+    public void setAddress(Address address) {\n \t\tthis.address = address;\n \t}\n \n@@ -95,4 +118,12 @@ public void setAge(int age) {\n \t\tthis.age = age;\n \t}\n \n+\tpublic String getNameAsLob() {\n+\t\treturn nameAsLob;\n+\t}\n+\n+\tpublic void setNameAsLob(String nameAsLob) {\n+\t\tthis.nameAsLob = nameAsLob;\n+\t}\n+\n }"},{"sha":"c9d2b288ff02332acd3b50c97478a8abdf1b2ee7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/83ffa271068e4cb48eb10e20ae1825f548abe1fe/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java","raw_url":"https://github.com/apache/openjpa/raw/83ffa271068e4cb48eb10e20ae1825f548abe1fe/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java?ref=83ffa271068e4cb48eb10e20ae1825f548abe1fe","patch":"@@ -311,12 +311,14 @@ public CompUser createUser(String name, String cName, Address add, int age,\n             user.setComputerName(cName);\n             user.setAddress(add);\n             user.setAge(age);\n+            user.setNameAsLob(name);\n         } else {\n             user = new FemaleUser();\n             user.setName(name);\n             user.setComputerName(cName);\n             user.setAddress(add);\n             user.setAge(age);\n+            user.setNameAsLob(name);\n         }\n         return user;\n \t}"},{"sha":"13eb2b1d510622c91fb4f1e4fed5d0ac9c60b4de","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java","status":"modified","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/83ffa271068e4cb48eb10e20ae1825f548abe1fe/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java","raw_url":"https://github.com/apache/openjpa/raw/83ffa271068e4cb48eb10e20ae1825f548abe1fe/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java?ref=83ffa271068e4cb48eb10e20ae1825f548abe1fe","patch":"@@ -21,6 +21,9 @@\n import java.util.List;\n import javax.persistence.EntityManager;\n \n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n import org.apache.openjpa.persistence.common.apps.Address;\n import org.apache.openjpa.persistence.common.apps.CompUser;\n import org.apache.openjpa.persistence.common.apps.FemaleUser;\n@@ -166,6 +169,35 @@ public void testLowerFunc() {\n         endEm(em);\n     }\n \n+    public void testLowerClobFunc() {\n+        OpenJPAEntityManagerSPI em = (OpenJPAEntityManagerSPI) currentEntityManager();\n+        // some databases do not support case conversion on LOBs,\n+        // just skip this test case\n+        DBDictionary dict = ((JDBCConfiguration) em.getConfiguration())\n+            .getDBDictionaryInstance();\n+        if (!dict.supportsCaseConversionForLob) {\n+            return;\n+        }\n+        startTx(em);\n+\n+        CompUser user = em.find(CompUser.class, userid5);\n+        assertNotNull(user);\n+        assertEquals(\"Famzy\", user.getName());\n+\n+        String query = \"UPDATE CompUser e SET \" +\n+                \"e.name = LOWER(e.name) WHERE LOWER(e.nameAsLob)='famzy'\";\n+\n+        int result = em.createQuery(query).executeUpdate();\n+\n+        user = em.find(CompUser.class, userid5);\n+        em.refresh(user);\n+        assertNotNull(user);\n+        assertEquals(\"famzy\", user.getName());\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n     public void testUpperFunc() {\n         EntityManager em = currentEntityManager();\n         startTx(em);\n@@ -188,6 +220,35 @@ public void testUpperFunc() {\n         endEm(em);\n     }\n \n+    public void testUpperClobFunc() {\n+        OpenJPAEntityManagerSPI em = (OpenJPAEntityManagerSPI) currentEntityManager();\n+        // some databases do not support case conversion on LOBs,\n+        // just skip this test case\n+        DBDictionary dict = ((JDBCConfiguration) em.getConfiguration())\n+            .getDBDictionaryInstance();\n+        if (!dict.supportsCaseConversionForLob) {\n+            return;\n+        }\n+        startTx(em);\n+\n+        CompUser user = em.find(CompUser.class, userid5);\n+        assertNotNull(user);\n+        assertEquals(\"Famzy\", user.getName());\n+\n+        String query = \"UPDATE CompUser e SET \" +\n+                \"e.name = UPPER(e.name) WHERE UPPER(e.nameAsLob)='FAMZY'\";\n+\n+        int result = em.createQuery(query).executeUpdate();\n+\n+        user = em.find(CompUser.class, userid5);\n+        em.refresh(user);\n+        assertNotNull(user);\n+        assertEquals(\"FAMZY\", user.getName());\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n     public void testLengthFunc() {\n         EntityManager em = currentEntityManager();\n \n@@ -385,12 +446,14 @@ public CompUser createUser(String name, String cName, Address add, int age,\n             user.setComputerName(cName);\n             user.setAddress(add);\n             user.setAge(age);\n+            user.setNameAsLob(name);\n         } else {\n             user = new FemaleUser();\n             user.setName(name);\n             user.setComputerName(cName);\n             user.setAddress(add);\n             user.setAge(age);\n+            user.setNameAsLob(name);\n         }\n         return user;\n     }"}]}

