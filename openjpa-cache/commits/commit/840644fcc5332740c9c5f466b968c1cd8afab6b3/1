{"sha":"840644fcc5332740c9c5f466b968c1cd8afab6b3","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg0MDY0NGZjYzUzMzI3NDBjOWM1ZjQ2NmI5NjhjMWNkOGFmYWI2YjM=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-04-06T23:22:06Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-04-06T23:22:06Z"},"message":"OPENJPA-182. Changed JDBCFetchPlan.setIsolation() to use enums; added logic to handle enum hints to QueryImpl; moved from IllegalArgumentException to InvalidArgumentException to unify exception processing for both queries and find calls.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@526316 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6858e9714859431b806dddfe2719a5238d390628","url":"https://api.github.com/repos/apache/openjpa/git/trees/6858e9714859431b806dddfe2719a5238d390628"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/840644fcc5332740c9c5f466b968c1cd8afab6b3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/840644fcc5332740c9c5f466b968c1cd8afab6b3","html_url":"https://github.com/apache/openjpa/commit/840644fcc5332740c9c5f466b968c1cd8afab6b3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/840644fcc5332740c9c5f466b968c1cd8afab6b3/comments","author":null,"committer":null,"parents":[{"sha":"82d274abd6499417d3917215f0f24d4894e25453","url":"https://api.github.com/repos/apache/openjpa/commits/82d274abd6499417d3917215f0f24d4894e25453","html_url":"https://github.com/apache/openjpa/commit/82d274abd6499417d3917215f0f24d4894e25453"}],"stats":{"total":182,"additions":140,"deletions":42},"files":[{"sha":"9ed06f6fba52bc25c551ef12a2173c5d199e212c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/840644fcc5332740c9c5f466b968c1cd8afab6b3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/840644fcc5332740c9c5f466b968c1cd8afab6b3/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=840644fcc5332740c9c5f466b968c1cd8afab6b3","patch":"@@ -96,6 +96,7 @@\n import org.apache.openjpa.util.StoreException;\n import org.apache.openjpa.util.UnsupportedException;\n import org.apache.openjpa.util.UserException;\n+import org.apache.openjpa.util.InvalidStateException;\n import serp.util.Numbers;\n import serp.util.Strings;\n \n@@ -2156,9 +2157,8 @@ public SQLBuffer toSelect(SQLBuffer selects, JDBCFetchConfiguration fetch,\n     protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n         boolean forUpdate) {\n         if (fetch != null && fetch.getIsolation() != -1) {\n-            throw new IllegalStateException(_loc.get(\n-                \"isolation-level-config-not-supported\", getClass().getName())\n-                .getMessage());\n+            throw new InvalidStateException(_loc.get(\n+                \"isolation-level-config-not-supported\", getClass().getName()));\n         } else if (forUpdate && !simulateLocking) {\n             assertSupport(supportsSelectForUpdate, \"SupportsSelectForUpdate\");\n             return forUpdateClause;"},{"sha":"ad6980316982fc3d68f4fa58f4aa604a6d287ecc","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/IsolationLevel.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/840644fcc5332740c9c5f466b968c1cd8afab6b3/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/IsolationLevel.java","raw_url":"https://github.com/apache/openjpa/raw/840644fcc5332740c9c5f466b968c1cd8afab6b3/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/IsolationLevel.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/IsolationLevel.java?ref=840644fcc5332740c9c5f466b968c1cd8afab6b3","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc;\n+\n+import java.sql.Connection;\n+\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n+\n+/**\n+ * Isolation levels for use in {@link JDBCFetchPlan#setIsolation}.\n+ *\n+ * @since 0.9.7\n+ */\n+public enum IsolationLevel {\n+    DEFAULT(-1),\n+    NONE(Connection.TRANSACTION_NONE),\n+    READ_UNCOMMITTED(Connection.TRANSACTION_READ_UNCOMMITTED),\n+    READ_COMMITTED(Connection.TRANSACTION_READ_COMMITTED),\n+    REPEATABLE_READ(Connection.TRANSACTION_REPEATABLE_READ),\n+    SERIALIZABLE(Connection.TRANSACTION_SERIALIZABLE);\n+\n+    private final int _connectionConstant;\n+\n+    private IsolationLevel(int connectionConstant) {\n+        _connectionConstant = connectionConstant;\n+    }\n+\n+    protected int getConnectionConstant() {\n+        return _connectionConstant;\n+    }\n+\n+    protected static IsolationLevel fromConnectionConstant(int constant) {\n+        switch(constant) {\n+            case -1:\n+            case JDBCFetchConfiguration.DEFAULT:\n+                return DEFAULT;\n+\n+            case Connection.TRANSACTION_NONE:\n+                return NONE;\n+\n+            case Connection.TRANSACTION_READ_UNCOMMITTED:\n+                return READ_UNCOMMITTED;\n+\n+            case Connection.TRANSACTION_READ_COMMITTED:\n+                return READ_COMMITTED;\n+\n+            case Connection.TRANSACTION_REPEATABLE_READ:\n+                return REPEATABLE_READ;\n+\n+            case Connection.TRANSACTION_SERIALIZABLE:\n+                return SERIALIZABLE;\n+\n+            default:\n+                throw new IllegalArgumentException(\n+                    Integer.valueOf(constant).toString());\n+        }\n+    }\n+}"},{"sha":"80a0b077d07875a8c8391e4fc7d42a5d6d5cbea5","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java","status":"modified","additions":6,"deletions":24,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/840644fcc5332740c9c5f466b968c1cd8afab6b3/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java","raw_url":"https://github.com/apache/openjpa/raw/840644fcc5332740c9c5f466b968c1cd8afab6b3/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java?ref=840644fcc5332740c9c5f466b968c1cd8afab6b3","patch":"@@ -15,8 +15,6 @@\n  */\n package org.apache.openjpa.persistence.jdbc;\n \n-import java.sql.Connection;\n-\n import org.apache.openjpa.jdbc.kernel.EagerFetchModes;\n import org.apache.openjpa.jdbc.kernel.LRSSizes;\n import org.apache.openjpa.jdbc.sql.JoinSyntaxes;\n@@ -118,36 +116,20 @@\n     public JDBCFetchPlan setJoinSyntax(int syntax);\n \n     /**\n-     * <p>The isolation level for queries issued to the database. This overrides\n+     * The isolation level for queries issued to the database. This overrides\n      * the persistence-unit-wide <code>openjpa.jdbc.TransactionIsolation</code>\n-     * value.</p>\n-     *\n-     * <p>Must be one of {@link Connection#TRANSACTION_NONE},\n-     * {@link Connection#TRANSACTION_READ_UNCOMMITTED},\n-     * {@link Connection#TRANSACTION_READ_COMMITTED},\n-     * {@link Connection#TRANSACTION_REPEATABLE_READ}, \n-     * {@link Connection#TRANSACTION_SERIALIZABLE},\n-     * or -1 for the default connection level specified by the context in\n-     * which this fetch plan is being used.</p>\n+     * value.\n      *\n      * @since 0.9.7\n      */\n-    public int getIsolation();\n+    public IsolationLevel getIsolation();\n \n     /**\n-     * <p>The isolation level for queries issued to the database. This overrides\n+     * The isolation level for queries issued to the database. This overrides\n      * the persistence-unit-wide <code>openjpa.jdbc.TransactionIsolation</code>\n-     * value.</p>\n-     *\n-     * <p>Must be one of {@link Connection#TRANSACTION_NONE},\n-     * {@link Connection#TRANSACTION_READ_UNCOMMITTED},\n-     * {@link Connection#TRANSACTION_READ_COMMITTED},\n-     * {@link Connection#TRANSACTION_REPEATABLE_READ},\n-     * {@link Connection#TRANSACTION_SERIALIZABLE},\n-     * or -1 for the default connection level specified by the context in\n-     * which this fetch plan is being used.</p>\n+     * value.\n      *\n      * @since 0.9.7\n      */\n-    public JDBCFetchPlan setIsolation(int level);\n+    public JDBCFetchPlan setIsolation(IsolationLevel level);\n }"},{"sha":"d54054a0f4a484e6cb266326b7a4153098e0b17c","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/840644fcc5332740c9c5f466b968c1cd8afab6b3/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java","raw_url":"https://github.com/apache/openjpa/raw/840644fcc5332740c9c5f466b968c1cd8afab6b3/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java?ref=840644fcc5332740c9c5f466b968c1cd8afab6b3","patch":"@@ -103,12 +103,12 @@ public JDBCFetchPlanImpl setJoinSyntax(int syntax) {\n         return this;\n     }\n \n-    public int getIsolation() {\n-        return _fetch.getIsolation();\n+    public IsolationLevel getIsolation() {\n+        return IsolationLevel.fromConnectionConstant(_fetch.getIsolation());\n     }\n \n-    public JDBCFetchPlan setIsolation(int level) {\n-        _fetch.setIsolation(level);\n+    public JDBCFetchPlan setIsolation(IsolationLevel level) {\n+        _fetch.setIsolation(level.getConnectionConstant());\n         return this;\n     }\n }"},{"sha":"e393df6bf1cc37602b5eb4f191119712f94d9f2b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","status":"modified","additions":41,"deletions":10,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/840644fcc5332740c9c5f466b968c1cd8afab6b3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","raw_url":"https://github.com/apache/openjpa/raw/840644fcc5332740c9c5f466b968c1cd8afab6b3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java?ref=840644fcc5332740c9c5f466b968c1cd8afab6b3","patch":"@@ -15,13 +15,14 @@\n  */\n package org.apache.openjpa.persistence.jdbc;\n \n-import java.sql.Connection;\n-import javax.persistence.PersistenceException;\n+import javax.persistence.Query;\n \n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n import org.apache.openjpa.persistence.simple.AllFieldTypes;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+import org.apache.openjpa.persistence.InvalidStateException;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.DB2Dictionary;\n import org.apache.openjpa.jdbc.sql.HSQLDictionary;\n@@ -36,7 +37,20 @@ public void setUp() {\n             \"openjpa.LockManager\", \"pessimistic\");\n     }\n \n-    public void testIsolationLevelOverride() {\n+    public void testIsolationOverrideViaFetchPlan() {\n+        testIsolationLevelOverride(false, false);\n+    }\n+\n+    public void testIsolationOverrideViaHint() {\n+        testIsolationLevelOverride(true, false);\n+    }\n+\n+    public void testIsolationOverrideViaStringHint() {\n+        testIsolationLevelOverride(true, true);\n+    }\n+\n+    public void testIsolationLevelOverride(boolean useHintsAndQueries,\n+        boolean useStringHints) {\n         OpenJPAEntityManager em =\n             OpenJPAPersistence.cast(emf.createEntityManager());\n         DBDictionary dict = ((JDBCConfiguration) em.getConfiguration())\n@@ -49,9 +63,27 @@ public void testIsolationLevelOverride() {\n         sql.clear();\n         try {\n             em.getTransaction().begin();\n-            ((JDBCFetchPlan) em.getFetchPlan())\n-                .setIsolation(Connection.TRANSACTION_SERIALIZABLE);\n-            em.find(AllFieldTypes.class, 0);\n+            if (useHintsAndQueries) {\n+                Query q = em.createQuery(\n+                    \"select o from AllFieldTypes o where o.intField = :p\");\n+                q.setParameter(\"p\", 0);\n+                if (useStringHints) {\n+                    q.setHint(\"openjpa.FetchPlan.Isolation\", \"SERIALIZABLE\");\n+                } else {\n+                    q.setHint(\"openjpa.FetchPlan.Isolation\",\n+                        IsolationLevel.SERIALIZABLE);\n+                }\n+\n+                assertEquals(IsolationLevel.SERIALIZABLE,\n+                    ((JDBCFetchPlan) ((OpenJPAQuery) q).getFetchPlan())\n+                        .getIsolation());\n+\n+                q.getResultList();\n+            } else {\n+                ((JDBCFetchPlan) em.getFetchPlan())\n+                    .setIsolation(IsolationLevel.SERIALIZABLE);\n+                em.find(AllFieldTypes.class, 0);\n+            }\n \n             if (dict instanceof DB2Dictionary) {\n                 assertEquals(1, sql.size());\n@@ -60,10 +92,9 @@ public void testIsolationLevelOverride() {\n                 fail(\"OpenJPA currently only supports per-query isolation \" +\n                     \"level configuration on the following databases: DB2\");\n             }\n-        } catch (PersistenceException pe) {\n-            // if we're not using DB2, we expect an IllegalStateException.\n-            if (dict instanceof DB2Dictionary\n-                || !(pe.getCause() instanceof IllegalStateException))\n+        } catch (InvalidStateException pe) {\n+            // if we're not using DB2, we expect an InvalidStateException.\n+            if (dict instanceof DB2Dictionary)\n                 throw pe;\n         } finally {\n             em.getTransaction().rollback();"},{"sha":"5def7405778e31caecfdaca621c7a5468eb5b8e8","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":15,"deletions":1,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/840644fcc5332740c9c5f466b968c1cd8afab6b3/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/840644fcc5332740c9c5f466b968c1cd8afab6b3/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=840644fcc5332740c9c5f466b968c1cd8afab6b3","patch":"@@ -26,6 +26,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.lang.reflect.Method;\n import javax.persistence.FlushModeType;\n import javax.persistence.Query;\n import javax.persistence.TemporalType;\n@@ -38,6 +39,7 @@\n import org.apache.openjpa.kernel.exps.FilterListener;\n import org.apache.openjpa.lib.rop.ResultList;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.enhance.Reflection;\n \n /**\n  * Implementation of {@link Query} interface.\n@@ -364,7 +366,7 @@ else if (\"FilterListeners\".equals(k)) {\n                     addAggregateListener(arr[i]);\n             } else if (k.startsWith(\"FetchPlan.\")) {\n                 k = k.substring(\"FetchPlan.\".length());\n-                Filters.hintToSetter(getFetchPlan(), k, value);\n+                hintToSetter(getFetchPlan(), k, value);\n             } else if (k.startsWith(\"hint.\")) {\n                 if (\"hint.OptimizeResultCount\".equals(k)) {\n                     if (value instanceof String) {\n@@ -390,6 +392,18 @@ else if (\"FilterListeners\".equals(k)) {\n         }\n     }\n \n+    private void hintToSetter(FetchPlan fetchPlan, String k, Object value) {\n+        if (fetchPlan == null || k == null)\n+            return;\n+\n+        Method setter = Reflection.findSetter(fetchPlan.getClass(), k, true);\n+        Class paramType = setter.getParameterTypes()[0];\n+        if (Enum.class.isAssignableFrom(paramType) && value instanceof String)\n+            value = Enum.valueOf(paramType, (String) value);\n+        \n+        Filters.hintToSetter(fetchPlan, k, value);\n+    }\n+\n     public OpenJPAQuery setParameter(int position, Calendar value,\n         TemporalType t) {\n         return setParameter(position, (Object) value);"}]}

