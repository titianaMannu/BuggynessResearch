{"sha":"847b33aa6eaba2ea1f8ccd1009baccea79b08f22","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg0N2IzM2FhNmVhYmEyZWExZjhjY2QxMDA5YmFjY2VhNzliMDhmMjI=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2006-12-15T00:04:53Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2006-12-15T00:04:53Z"},"message":"Allow updating in-memory values with complex expressions, rather than just simple Constants and Literals.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@487403 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"563be65c113be57eaf745e0a54d529633cacd10c","url":"https://api.github.com/repos/apache/openjpa/git/trees/563be65c113be57eaf745e0a54d529633cacd10c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/847b33aa6eaba2ea1f8ccd1009baccea79b08f22","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/847b33aa6eaba2ea1f8ccd1009baccea79b08f22","html_url":"https://github.com/apache/openjpa/commit/847b33aa6eaba2ea1f8ccd1009baccea79b08f22","comments_url":"https://api.github.com/repos/apache/openjpa/commits/847b33aa6eaba2ea1f8ccd1009baccea79b08f22/comments","author":null,"committer":null,"parents":[{"sha":"53614b371f55034b142374263fe640eb75181f07","url":"https://api.github.com/repos/apache/openjpa/commits/53614b371f55034b142374263fe640eb75181f07","html_url":"https://github.com/apache/openjpa/commit/53614b371f55034b142374263fe640eb75181f07"}],"stats":{"total":9,"additions":4,"deletions":5},"files":[{"sha":"7416e20bef49f4196ea4d759d6ed43e08ef6177a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/847b33aa6eaba2ea1f8ccd1009baccea79b08f22/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/847b33aa6eaba2ea1f8ccd1009baccea79b08f22/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=847b33aa6eaba2ea1f8ccd1009baccea79b08f22","patch":"@@ -32,8 +32,8 @@\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.kernel.exps.AggregateListener;\n-import org.apache.openjpa.kernel.exps.Constant;\n import org.apache.openjpa.kernel.exps.FilterListener;\n+import org.apache.openjpa.kernel.exps.Val;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.rop.EagerResultList;\n import org.apache.openjpa.lib.rop.MergedResultObjectProvider;\n@@ -1057,10 +1057,9 @@ private void updateInMemory(Object ob, Object[] params) {\n             it.hasNext();) {\n             Map.Entry e = (Map.Entry) it.next();\n             FieldMetaData fmd = (FieldMetaData) e.getKey();\n-            if (!(e.getValue() instanceof Constant))\n-                throw new UserException(_loc.get(\"only-update-constants\"));\n-            Constant value = (Constant) e.getValue();\n-            Object val = value.getValue(params);\n+\n+            Val value = (Val) e.getValue();\n+            Object val = value.evaluate(ob, null, getStoreContext(), params);\n \n             OpenJPAStateManager sm = _broker.getStateManager(ob);\n             int i = fmd.getIndex();"}]}

