{"sha":"853fb319ba81e2ad589ac6a7ce47b45de0a2749d","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg1M2ZiMzE5YmE4MWUyYWQ1ODlhYzZhN2NlNDdiNDVkZTBhMjc0OWQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-03-10T17:15:49Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-03-10T17:15:49Z"},"message":"OPENJPA-35: fixed bulk update / bulk delete logic to properly clear out the data cache as well as the query cache. We could probably change the logic to remove the query cache mutations, since the data cache clear should automatically clear out the query cache as needed. Also changed the test framework a bit to allow for easier test harness creation without using SingleEMTest, which required providing access to the open brokers from AbstractBrokerFactory.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@516750 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"df07b8a48d7182b73972775cebb7a6380f4e9c6f","url":"https://api.github.com/repos/apache/openjpa/git/trees/df07b8a48d7182b73972775cebb7a6380f4e9c6f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/853fb319ba81e2ad589ac6a7ce47b45de0a2749d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/853fb319ba81e2ad589ac6a7ce47b45de0a2749d","html_url":"https://github.com/apache/openjpa/commit/853fb319ba81e2ad589ac6a7ce47b45de0a2749d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/853fb319ba81e2ad589ac6a7ce47b45de0a2749d/comments","author":null,"committer":null,"parents":[{"sha":"b5bab78e043329c97b0ddac1558bd595e5a522aa","url":"https://api.github.com/repos/apache/openjpa/commits/b5bab78e043329c97b0ddac1558bd595e5a522aa","html_url":"https://github.com/apache/openjpa/commit/b5bab78e043329c97b0ddac1558bd595e5a522aa"}],"stats":{"total":307,"additions":228,"deletions":79},"files":[{"sha":"908d461aad03900a6cb51c11f4ebb4e97248939e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","status":"modified","additions":14,"deletions":9,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/853fb319ba81e2ad589ac6a7ce47b45de0a2749d/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/853fb319ba81e2ad589ac6a7ce47b45de0a2749d/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java?ref=853fb319ba81e2ad589ac6a7ce47b45de0a2749d","patch":"@@ -19,7 +19,6 @@\n import java.io.Serializable;\n import java.util.AbstractList;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.BitSet;\n import java.util.Collections;\n import java.util.Date;\n@@ -112,7 +111,7 @@ private List checkCache(QueryKey qk) {\n         if (fetch.getReadLockLevel() > LockLevels.LOCK_NONE)\n             return null;\n \n-        // get the cached oids\n+        // get the cached data\n         QueryResult res = _cache.get(qk);\n         if (res == null)\n             return null;\n@@ -123,7 +122,7 @@ private List checkCache(QueryKey qk) {\n         if (projs == 0) {\n             // make sure the data cache contains the oids for the query result;\n             // if it doesn't, then using the result could be slower than not\n-            // using it becauseo of the individual by-oid lookups\n+            // using it because of the individual by-oid lookups\n             ClassMetaData meta = _repos.getMetaData(getContext().\n                 getCandidateType(), _sctx.getClassLoader(), true);\n             BitSet idxs = meta.getDataCache().containsAll(res);\n@@ -313,36 +312,42 @@ public ResultObjectProvider executeQuery(StoreQuery q, Object[] params,\n          * (such as deletes or updates) are performed so that the\n          * cache remains up-to-date.\n          */\n-        private void clearAccesssPath(StoreQuery q) {\n+        private void clearAccessPath(StoreQuery q) {\n             if (q == null)\n                 return;\n \n             ClassMetaData[] cmd = getAccessPathMetaDatas(q);\n             if (cmd == null || cmd.length == 0)\n                 return;\n \n-            Class[] classes = new Class[cmd.length];\n+            List classes = new ArrayList(cmd.length);\n             for (int i = 0; i < cmd.length; i++)\n-                classes[i] = cmd[i].getDescribedType();\n+                classes.add(cmd[i].getDescribedType());\n \n+            // evict from the query cache\n             QueryCacheStoreQuery cq = (QueryCacheStoreQuery) q;\n             cq.getCache().onTypesChanged(new TypesChangedEvent\n-                (q.getContext(), Arrays.asList(classes)));\n+                (q.getContext(), classes));\n+\n+            // evict from the data cache\n+            for (int i = 0; i < cmd.length; i++)\n+                cmd[i].getDataCache().removeAll(\n+                    cmd[i].getDescribedType(), true);\n         }\n \n         public Number executeDelete(StoreQuery q, Object[] params) {\n             try {\n                 return _ex.executeDelete(unwrap(q), params);\n             } finally {\n-                clearAccesssPath(q);\n+                clearAccessPath(q);\n             }\n         }\n \n         public Number executeUpdate(StoreQuery q, Object[] params) {\n             try {\n                 return _ex.executeUpdate(unwrap(q), params);\n             } finally {\n-                clearAccesssPath(q);\n+                clearAccessPath(q);\n             }\n         }\n "},{"sha":"d7f515d5342415c551d7e959812dbb6d8cf214b4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/853fb319ba81e2ad589ac6a7ce47b45de0a2749d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/853fb319ba81e2ad589ac6a7ce47b45de0a2749d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=853fb319ba81e2ad589ac6a7ce47b45de0a2749d","patch":"@@ -645,6 +645,14 @@ boolean syncWithManagedTransaction(BrokerImpl broker, boolean begin) {\n         }\n     }\n \n+    /**\n+     * Returns a set of all the open brokers associated with this factory. The\n+     * returned set is unmodifiable, and may contain null references.\n+     */\n+    public Collection getOpenBrokers() {\n+        return Collections.unmodifiableCollection(_brokers);\n+    }\n+\n     /**\n      * Simple synchronization listener to remove completed transactions\n      * from our cache."},{"sha":"eb9ac2e86d8689579dda691ed3a65aedfaa82a30","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkJPQLAndDataCache.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/apache/openjpa/blob/853fb319ba81e2ad589ac6a7ce47b45de0a2749d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkJPQLAndDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/853fb319ba81e2ad589ac6a7ce47b45de0a2749d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkJPQLAndDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkJPQLAndDataCache.java?ref=853fb319ba81e2ad589ac6a7ce47b45de0a2749d","patch":"@@ -0,0 +1,91 @@\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\n+import org.apache.openjpa.persistence.test.SingleEMFTest;\n+\n+public class TestBulkJPQLAndDataCache\n+    extends SingleEMFTest {\n+\n+    private Object oid;\n+\n+    public TestBulkJPQLAndDataCache() {\n+        super(AllFieldTypes.class);\n+    }\n+\n+    @Override\n+    protected boolean clearDatabaseInSetUp() {\n+        return true;\n+    }\n+\n+    protected void setEMFProps(Map props) {\n+        super.setEMFProps(props);\n+        props.put(\"openjpa.DataCache\", \"true\");\n+        props.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n+    }\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+\n+        OpenJPAEntityManager em =\n+            OpenJPAPersistence.cast(emf.createEntityManager());\n+        em.getTransaction().begin();\n+        AllFieldTypes pc = new AllFieldTypes();\n+        pc.setStringField(\"DeleteMe\");\n+        em.persist(pc);\n+        oid = em.getObjectId(pc);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testBulkDelete() {\n+        OpenJPAEntityManager em =\n+            OpenJPAPersistence.cast(emf.createEntityManager());\n+\n+        em.getTransaction().begin();\n+        List result = em.createQuery(\"SELECT o FROM AllFieldTypes o\")\n+            .getResultList();\n+        assertEquals(1, result.size());\n+        em.createQuery(\"DELETE FROM AllFieldTypes o\").executeUpdate();\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = OpenJPAPersistence.cast(emf.createEntityManager());\n+\n+        // this assumes that we invalidate the cache, rather than update it\n+        // according to the bulk rule.\n+        assertFalse(OpenJPAPersistence.cast(emf).getStoreCache()\n+            .contains(AllFieldTypes.class, oid));\n+\n+        assertNull(em.find(AllFieldTypes.class, oid));\n+        em.close();\n+    }\n+\n+    public void testBulkUpdate() {\n+        OpenJPAEntityManager em =\n+            OpenJPAPersistence.cast(emf.createEntityManager());\n+\n+        em.getTransaction().begin();\n+        List result = em.createQuery(\"SELECT o FROM AllFieldTypes o \"\n+            + \"WHERE o.intField = 0\").getResultList();\n+        assertEquals(1, result.size());\n+        em.createQuery(\"UPDATE AllFieldTypes o SET o.intField = 10\")\n+            .executeUpdate();\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = OpenJPAPersistence.cast(emf.createEntityManager());\n+\n+        // this assumes that we invalidate the cache, rather than update it\n+        // according to the bulk rule.\n+        assertFalse(OpenJPAPersistence.cast(emf).getStoreCache()\n+            .contains(AllFieldTypes.class, oid));\n+\n+        em.close();\n+    }\n+}"},{"sha":"030779736ac403ed0c3db8f5ba7f069c094a6dcb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTest.java","status":"added","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/853fb319ba81e2ad589ac6a7ce47b45de0a2749d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTest.java","raw_url":"https://github.com/apache/openjpa/raw/853fb319ba81e2ad589ac6a7ce47b45de0a2749d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTest.java?ref=853fb319ba81e2ad589ac6a7ce47b45de0a2749d","patch":"@@ -0,0 +1,106 @@\n+package org.apache.openjpa.persistence.test;\n+\n+import java.util.Map;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n+import javax.persistence.EntityManager;\n+\n+import junit.framework.TestCase;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.kernel.AbstractBrokerFactory;\n+import org.apache.openjpa.kernel.Broker;\n+\n+public abstract class SingleEMFTest extends TestCase {\n+\n+    protected EntityManagerFactory emf;\n+    protected Class[] classes;\n+\n+    public SingleEMFTest(Class... classes) {\n+        this.classes = classes;\n+    }\n+\n+    /**\n+     * Can be overridden to return a list of classes that will be used\n+     * for this test.\n+     */\n+    protected Class[] getClasses() {\n+        return classes;\n+    }\n+\n+    /**\n+     * Modify the properties that are used to create the EntityManagerFactory.\n+     * By default, this will set up the MetaDataFactory with the\n+     * persistent classes for this test case. This method can be overridden\n+     * to add more properties to the map.\n+     */\n+    protected void setEMFProps(Map props) {\n+        // if we have specified a list of persistent classes to examine,\n+        // then set it in the MetaDataFactory so that our automatic\n+        // schema generation will work.\n+        Class[] pclasses = getClasses();\n+        if (pclasses != null) {\n+            StringBuilder str = new StringBuilder();\n+            for (Class c : pclasses)\n+                str.append(str.length() > 0 ? \";\" : \"\").append(c.getName());\n+\n+            props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" + str + \")\");\n+        }\n+\n+        if (clearDatabaseInSetUp()) {\n+            props.put(\"openjpa.jdbc.SynchronizeMappings\",\n+                \"buildSchema(ForeignKeys=true,\" +\n+                    \"SchemaAction='add,deleteTableContents')\");\n+        }\n+    }\n+\n+    protected boolean clearDatabaseInSetUp() {\n+        return false;\n+    }\n+\n+    public EntityManagerFactory emf() {\n+        return emf;\n+    }\n+\n+    public boolean closeEMF() {\n+        if (emf == null)\n+            return false;\n+\n+        if (!emf.isOpen())\n+            return false;\n+\n+        for (Iterator iter = ((AbstractBrokerFactory) OpenJPAPersistence\n+            .toBrokerFactory(emf)).getOpenBrokers().iterator();\n+            iter.hasNext(); ) {\n+            Broker b = (Broker) iter.next();\n+            if (b != null && !b.isClosed()) {\n+                EntityManager em = OpenJPAPersistence.toEntityManager(b);\n+                if (em.getTransaction().isActive())\n+                    em.getTransaction().rollback();\n+                em.close();\n+            }\n+        }\n+\n+        emf.close();\n+        return !emf.isOpen();\n+    }\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        Map props = new HashMap(System.getProperties());\n+        setEMFProps(props);\n+        emf = Persistence.createEntityManagerFactory(\"test\", props);\n+\n+        if (clearDatabaseInSetUp()) // get an EM to trigger schema manipulations\n+            emf.createEntityManager().close();\n+    }\n+\n+    @Override\n+    public void tearDown() throws Exception {\n+        closeEMF();\n+        super.tearDown();\n+    }\n+}\n\\ No newline at end of file"},{"sha":"406d93a6662cd7ddfe33a24950b78c216241700a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMTest.java","status":"modified","additions":9,"deletions":70,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/853fb319ba81e2ad589ac6a7ce47b45de0a2749d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMTest.java","raw_url":"https://github.com/apache/openjpa/raw/853fb319ba81e2ad589ac6a7ce47b45de0a2749d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMTest.java?ref=853fb319ba81e2ad589ac6a7ce47b45de0a2749d","patch":"@@ -19,84 +19,31 @@\n \n import javax.persistence.*;\n \n-import junit.framework.TestCase;\n-import junit.textui.TestRunner;\n-import org.apache.openjpa.persistence.*;\n-\n /**\n  * A base test case that can be used to easily test scenarios where there\n  * is only a single EntityManager at any given time.\n  *\n  * @author Marc Prud'hommeaux\n  */\n-public abstract class SingleEMTest extends TestCase {\n+public abstract class SingleEMTest extends SingleEMFTest {\n \n-    protected EntityManagerFactory emf;\n     protected EntityManager em;\n-    protected Class[] classes;\n \n     public SingleEMTest(Class... classes) {\n-        this.classes = classes;\n-    }\n-\n-    /** \n-     * Can be overridden to return a list of classes that will be used\n-     * for this test.\n-     */\n-    protected Class[] getClasses() { \n-        return classes;\n-    }\n-\n-    /** \n-     * Modify the properties that are used to create the EntityManagerFactory.\n-     * By default, this will set up the MetaDataFactory with the\n-     * persistent classes for this test case. This method can be overridden\n-     * to add more properties to the map.\n-     */\n-    protected void setEMFProps(Map props) {\n-        // if we have specified a list of persistent classes to examine,\n-        // then set it in the MetaDataFactory so that our automatic\n-        // schema generation will work.\n-        Class[] pclasses = getClasses();\n-        if (pclasses != null) {\n-            StringBuilder str = new StringBuilder();\n-            for (Class c : pclasses)\n-                str.append(str.length() > 0 ? \";\" : \"\").append(c.getName());\n-\n-            props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" + str + \")\");\n-        }\n-\n-        if (clearDatabaseInSetUp()) {\n-            props.put(\"openjpa.jdbc.SynchronizeMappings\",\n-                \"buildSchema(ForeignKeys=true,\" +\n-                    \"SchemaAction='add,deleteTableContents')\");\n-        }\n+        super(classes);\n     }\n \n-    protected boolean clearDatabaseInSetUp() {\n-        return false;\n-    }\n-\n-    public void setUp() throws Exception {\n-        Map props = new HashMap(System.getProperties());\n-        setEMFProps(props);\n-        emf = Persistence.createEntityManagerFactory(\"test\", props);\n-    }\n-\n-    /** \n+    /**\n      * Rolls back the current transaction and closes the EntityManager. \n      */\n+    @Override\n     public void tearDown() throws Exception {\n         rollback();\n         close();\n-        closeEMF();\n+        super.tearDown();\n     }\n \n-    public EntityManagerFactory emf() {\n-        return emf;\n-    }\n-\n-    /** \n+    /**\n      * Returns the current EntityManager, creating one from the\n      * EntityManagerFactory if it doesn't already exist. \n      */\n@@ -164,17 +111,10 @@ public boolean close() {\n         return !em.isOpen();\n     }\n \n+    @Override\n     public boolean closeEMF() {\n-        if (emf == null)\n-            return false;\n-\n         close();\n-\n-        if (!emf.isOpen())\n-            return false;\n-\n-        emf.close();\n-        return !emf.isOpen();\n+        return super.closeEMF();\n     }\n \n     /** \n@@ -283,5 +223,4 @@ public int delete(Class... classes) {\n \n         return total;\n     }\n-}\n-\n+}\n\\ No newline at end of file"}]}

