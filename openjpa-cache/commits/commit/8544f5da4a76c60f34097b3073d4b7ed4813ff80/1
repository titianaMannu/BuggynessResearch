{"sha":"8544f5da4a76c60f34097b3073d4b7ed4813ff80","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg1NDRmNWRhNGE3NmM2MGYzNDA5N2IzMDczZDRiN2VkNDgxM2ZmODA=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-04-11T16:56:01Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-04-11T16:56:01Z"},"message":"OPENJPA-1975: add testcase for ConnectedConfiguration\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1091124 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c3388f1ca4bf7e250a5ceb1ddc6cd3cc6497512d","url":"https://api.github.com/repos/apache/openjpa/git/trees/c3388f1ca4bf7e250a5ceb1ddc6cd3cc6497512d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8544f5da4a76c60f34097b3073d4b7ed4813ff80","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8544f5da4a76c60f34097b3073d4b7ed4813ff80","html_url":"https://github.com/apache/openjpa/commit/8544f5da4a76c60f34097b3073d4b7ed4813ff80","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8544f5da4a76c60f34097b3073d4b7ed4813ff80/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"82c79adab1cfa42e67c0d19760dcf9f623b8afd5","url":"https://api.github.com/repos/apache/openjpa/commits/82c79adab1cfa42e67c0d19760dcf9f623b8afd5","html_url":"https://github.com/apache/openjpa/commit/82c79adab1cfa42e67c0d19760dcf9f623b8afd5"}],"stats":{"total":57,"additions":43,"deletions":14},"files":[{"sha":"a91f74f71903f085b2a3332999c50e9ddb0f6fac","filename":"openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/TestDB2Dictionary.java","status":"modified","additions":43,"deletions":14,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/8544f5da4a76c60f34097b3073d4b7ed4813ff80/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/TestDB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/8544f5da4a76c60f34097b3073d4b7ed4813ff80/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/TestDB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/sql/TestDB2Dictionary.java?ref=8544f5da4a76c60f34097b3073d4b7ed4813ff80","patch":"@@ -19,6 +19,7 @@\n package org.apache.openjpa.jdbc.sql;\n \n import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n import java.sql.ResultSet;\n import java.sql.Statement;\n \n@@ -35,20 +36,21 @@\n     final Connection mockConnection = mock(Connection.class);\n     final ResultSet mockRS = mock(ResultSet.class);\n     final DataSource mockDS = mock(DataSource.class);\n+    final DatabaseMetaData mockMetaData = mock(DatabaseMetaData.class);\n \n     final StoreContext sc = null;\n     final String schema = \"abcd\";\n-    \n+\n     /*\n-     * When DS1 is non null we should get a connection and use it to obtain the schema name. \n+     * When DS1 is non null we should get a connection and use it to obtain the schema name.\n      */\n     public void testGetDefaultSchemaNameDS1() throws Exception {\n         // Expected method calls on the mock objects above. If any of these are\n         // do not occur, or if any other methods are invoked on the mock objects\n         // an exception will be thrown and the test will fail.\n         checking(new Expectations() {\n             {\n-                // Wiring, make sure the appropriate mocks are created.                \n+                // Wiring, make sure the appropriate mocks are created.\n                 oneOf(mockConfiguration).getDataSource(with(equal(sc)));\n                 will(returnValue(mockDS));\n \n@@ -83,20 +85,20 @@ public void testGetDefaultSchemaNameDS1() throws Exception {\n         assertNotNull(dict);\n         assertEquals(schema, dict.getDefaultSchemaName());\n     }\n-    \n+\n     /*\n-     * When ds1 is null, fallback to ds2 \n+     * When ds1 is null, fallback to ds2\n      */\n     public void testGetDefaultSchemaNameDS2() throws Exception {\n         // Expected method calls on the mock objects above. If any of these are\n         // do not occur, or if any other methods are invoked on the mock objects\n         // an exception will be thrown and the test will fail.\n         checking(new Expectations() {\n             {\n-                // Wiring, make sure the appropriate mocks are created.                \n+                // Wiring, make sure the appropriate mocks are created.\n                 oneOf(mockConfiguration).getDataSource(with(equal(sc)));\n                 will(returnValue(null));\n-                \n+\n                 oneOf(mockConfiguration).getDataSource2(with(equal(sc)));\n                 will(returnValue(mockDS));\n \n@@ -130,10 +132,10 @@ public void testGetDefaultSchemaNameDS2() throws Exception {\n         dict.setConfiguration(mockConfiguration);\n         assertNotNull(dict);\n         assertEquals(schema, dict.getDefaultSchemaName());\n-    }    \n-    \n+    }\n+\n     /*\n-     * When ds1 is null, fallback to ds2 \n+     * When ds1 is null, fallback to ds2\n      */\n     public void testGetDefaultSchemaNameNoDS() throws Exception {\n         // Expected method calls on the mock objects above. If any of these are\n@@ -144,7 +146,7 @@ public void testGetDefaultSchemaNameNoDS() throws Exception {\n                 // both datasources are null for this test.\n                 oneOf(mockConfiguration).getDataSource(with(equal(sc)));\n                 will(returnValue(null));\n-                \n+\n                 oneOf(mockConfiguration).getDataSource2(with(equal(sc)));\n                 will(returnValue(null));\n \n@@ -157,9 +159,9 @@ public void testGetDefaultSchemaNameNoDS() throws Exception {\n         assertNotNull(dict);\n         assertEquals(null, dict.getDefaultSchemaName());\n     }\n-    \n+\n     /*\n-     * TestWhitespace trim \n+     * TestWhitespace trim\n      */\n     public void testGetDefaultSchemaNameTrimmed() throws Exception {\n         final String schema2 = \"abcd     \";\n@@ -168,7 +170,7 @@ public void testGetDefaultSchemaNameTrimmed() throws Exception {\n         // an exception will be thrown and the test will fail.\n         checking(new Expectations() {\n             {\n-                // Wiring, make sure the appropriate mocks are created.                \n+                // Wiring, make sure the appropriate mocks are created.\n                 oneOf(mockConfiguration).getDataSource(with(equal(sc)));\n                 will(returnValue(mockDS));\n \n@@ -203,4 +205,31 @@ public void testGetDefaultSchemaNameTrimmed() throws Exception {\n         assertNotNull(dict);\n         assertEquals(schema2.trim(), dict.getDefaultSchemaName());\n     }\n+\n+    /*\n+     * Verifies that the ConnectedConfiguration method only uses the DBMetaData to determine the correct behavior.\n+     */\n+    public void testConnectedConfigurationOnlyUsesMetaData() throws Exception {\n+        checking(new Expectations() {\n+            {\n+                // No activity on the connection other than getting the metadata. \n+                allowing(mockConnection).getMetaData();\n+                will(returnValue(mockMetaData));\n+\n+                // anything on the configuration or DBMetaData is fair game. \n+                allowing(mockMetaData); \n+                allowing(mockConfiguration);\n+            }\n+        });\n+\n+        DB2Dictionary dict = new DB2Dictionary();\n+        \n+        // skip all the meta data resolution code. \n+        dict.db2ServerType=DB2Dictionary.db2UDBV82OrLater;\n+        dict.maj=9;\n+        \n+        dict.setConfiguration(mockConfiguration);\n+        assertNotNull(dict);\n+        dict.connectedConfiguration(mockConnection);\n+    }\n }"}]}

