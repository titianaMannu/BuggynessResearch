{"sha":"856fefb2c835fd0e46ce7c2a362720ac7f5b714d","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg1NmZlZmIyYzgzNWZkMGU0NmNlN2MyYTM2MjcyMGFjN2Y1YjcxNGQ=","commit":{"author":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2015-06-22T18:31:06Z"},"committer":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2015-06-22T18:31:06Z"},"message":"OPENJPA-2539: Query Compilation causing inner join table to be randomly generated incorrectly - ported changes to trunk.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1686913 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"27c41507207991e437e07581ff9fe3442da1ac3e","url":"https://api.github.com/repos/apache/openjpa/git/trees/27c41507207991e437e07581ff9fe3442da1ac3e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/856fefb2c835fd0e46ce7c2a362720ac7f5b714d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/856fefb2c835fd0e46ce7c2a362720ac7f5b714d","html_url":"https://github.com/apache/openjpa/commit/856fefb2c835fd0e46ce7c2a362720ac7f5b714d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/856fefb2c835fd0e46ce7c2a362720ac7f5b714d/comments","author":null,"committer":null,"parents":[{"sha":"ea1682c42511894999e7f3c155adf8b4d8785c1c","url":"https://api.github.com/repos/apache/openjpa/commits/ea1682c42511894999e7f3c155adf8b4d8785c1c","html_url":"https://github.com/apache/openjpa/commit/ea1682c42511894999e7f3c155adf8b4d8785c1c"}],"stats":{"total":23,"additions":15,"deletions":8},"files":[{"sha":"4f36a28be39ce63effc35e0e161ce4ea98ee2b9d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":15,"deletions":8,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/856fefb2c835fd0e46ce7c2a362720ac7f5b714d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/856fefb2c835fd0e46ce7c2a362720ac7f5b714d/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=856fefb2c835fd0e46ce7c2a362720ac7f5b714d","patch":"@@ -632,9 +632,9 @@ private Compilation compileForCompilation() {\n      * Find the cached compilation for the current query, creating one if it\n      * does not exist.\n      */\n+    @SuppressWarnings(\"unchecked\")\n     protected Compilation compilationFromCache() {\n-        Map compCache =\n-            _broker.getConfiguration().getQueryCompilationCacheInstance();\n+        Map compCache = _broker.getConfiguration().getQueryCompilationCacheInstance();\n         if (compCache == null || !isParsedQuery()) {\n             return newCompilation();\n         } else {\n@@ -648,17 +648,24 @@ protected Compilation compilationFromCache() {\n             Compilation comp = (Compilation) compCache.get(key);\n \n             // parse declarations if needed\n-            boolean cache = false;\n             if (comp == null) {\n                 comp = newCompilation();\n                 // only cache those queries that can be compiled\n-                cache = comp.storeData != null;\n-            } else\n+                if (comp.storeData != null) {\n+\n+                    synchronized (compCache) {\n+                        Compilation existingComp = (Compilation) compCache.get(key);\n+                        if (existingComp == null) {\n+                            compCache.put(key, comp);\n+                        } else {\n+                            comp = existingComp;\n+                        }\n+                    }\n+                }\n+            } else {\n                 _storeQuery.populateFromCompilation(comp.storeData);\n+            }\n \n-            // cache parsed state if needed\n-            if (cache)\n-                compCache.put(key, comp);\n             return comp;\n         }\n     }"}]}

