{"sha":"85ba2eada3ffc4eeba3ed8e913ccfee560d6b006","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg1YmEyZWFkYTNmZmM0ZWViYTNlZDhlOTEzY2NmZWU1NjBkNmIwMDY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-05-11T21:09:17Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-05-11T21:09:17Z"},"message":"OPENJPA-1662: Remove usage of @Replicated annotation. Replace with openjpa.slice.ReplicatedTypes plug-in.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@943294 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d65efd272c3e7473afe2bae82052f4e46cc142c4","url":"https://api.github.com/repos/apache/openjpa/git/trees/d65efd272c3e7473afe2bae82052f4e46cc142c4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006","html_url":"https://github.com/apache/openjpa/commit/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006","comments_url":"https://api.github.com/repos/apache/openjpa/commits/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/comments","author":null,"committer":null,"parents":[{"sha":"fedcd133d0e32dd53fd2fd33a64cf4a616513c27","url":"https://api.github.com/repos/apache/openjpa/commits/fedcd133d0e32dd53fd2fd33a64cf4a616513c27","html_url":"https://github.com/apache/openjpa/commit/fedcd133d0e32dd53fd2fd33a64cf4a616513c27"}],"stats":{"total":274,"additions":152,"deletions":122},"files":[{"sha":"2d0b01d8ac86e07cefe651ad8a19bb40ab530450","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":1,"deletions":20,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=85ba2eada3ffc4eeba3ed8e913ccfee560d6b006","patch":"@@ -23,14 +23,11 @@\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n import java.security.AccessController;\n-import java.sql.Timestamp;\n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Calendar;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Comparator;\n-import java.util.Date;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n@@ -41,6 +38,7 @@\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.datacache.CacheDistributionPolicy;\n import org.apache.openjpa.datacache.DataCache;\n import org.apache.openjpa.enhance.PCRegistry;\n import org.apache.openjpa.enhance.PersistenceCapable;\n@@ -67,7 +65,6 @@\n import org.apache.openjpa.util.MetaDataException;\n import org.apache.openjpa.util.ObjectId;\n import org.apache.openjpa.util.OpenJPAId;\n-import org.apache.openjpa.util.Proxy;\n import org.apache.openjpa.util.ShortId;\n import org.apache.openjpa.util.StringId;\n import org.apache.openjpa.util.UnsupportedException;\n@@ -182,7 +179,6 @@\n     private int _identity = ID_UNKNOWN;\n     private int _idStrategy = ValueStrategies.NONE;\n     private int _accessType = AccessCode.UNKNOWN;\n-    private boolean _replicated = false;\n     \n     private String _seqName = DEFAULT_STRING;\n     private SequenceMetaData _seqMeta = null;\n@@ -2646,21 +2642,6 @@ public void valueChanged(Value val) {\n     \treturn result.toArray(new String[result.size()]);\n     }\n     \n-    /**\n-     * Affirms the persistence instances of this receiver is replicated across\n-     * multiple databases.\n-     */\n-    public boolean isReplicated() {\n-    \treturn _replicated;\n-    }\n-    \n-    /**\n-     * Sets the persistence instances of this receiver to be replicated across\n-     * multiple databases.\n-     */\n-    public void setReplicated(boolean flag) {\n-    \t_replicated = flag;\n-    }\n \n     public boolean isAbstract() {\n         return _abstract;"},{"sha":"e7dae1b2d1bce9305ca125074a966e163a06e601","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=85ba2eada3ffc4eeba3ed8e913ccfee560d6b006","patch":"@@ -235,7 +235,6 @@\n         _tags.put(ManagedInterface.class, MANAGED_INTERFACE);\n         _tags.put(ReadOnly.class, READ_ONLY);\n         _tags.put(Type.class, TYPE);\n-        _tags.put(Replicated.class, REPLICATED);\n     }\n \n     private final OpenJPAConfiguration _conf;\n@@ -647,9 +646,6 @@ private ClassMetaData parseClassAnnotations() {\n                     if (isMetaDataMode())\n                         parseManagedInterface(meta, (ManagedInterface) anno);\n                     break;\n-                case REPLICATED:\n-                \tmeta.setReplicated(true);\n-                \tbreak;\n                 case ACCESS:\n                     if (isMetaDataMode())\n                         parseAccess(meta, (Access)anno);"},{"sha":"ea2ed8705e55866352f15127e30b4b6aa83af66e","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Replicated.java","status":"removed","additions":0,"deletions":44,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/fedcd133d0e32dd53fd2fd33a64cf4a616513c27/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Replicated.java","raw_url":"https://github.com/apache/openjpa/raw/fedcd133d0e32dd53fd2fd33a64cf4a616513c27/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Replicated.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Replicated.java?ref=fedcd133d0e32dd53fd2fd33a64cf4a616513c27","patch":"@@ -1,44 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.persistence;\n-\n-import static java.lang.annotation.ElementType.TYPE;\n-import static java.lang.annotation.RetentionPolicy.RUNTIME;\n-\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.Target;\n-\n-/**\n- * Annotation to specify the instance of the annotated entity be \n- * replicated across more than one <em>slices</em>. The actual slices where an\n- * instance of the annotated entity will be replicated is determined by \n- * the return value of user-specified \n- * {@link ReplicationPolicy#replicate(Object, java.util.List, Object)}\n- * method. \n- * \n- * @see ReplicationPolicy\n- * \n- * @author Pinaki Poddar\n- *\n- */\n-@Target({ TYPE })\n-@Retention(RUNTIME)\n-public @interface Replicated {\n-\n-}"},{"sha":"ddc34d680a649bd4eaf46c15f94f38201aeedbb8","filename":"openjpa-project/src/doc/manual/ref_guide_slice.xml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-project/src/doc/manual/ref_guide_slice.xml","raw_url":"https://github.com/apache/openjpa/raw/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-project/src/doc/manual/ref_guide_slice.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_slice.xml?ref=85ba2eada3ffc4eeba3ed8e913ccfee560d6b006","patch":"@@ -217,9 +217,9 @@\n \t\t\tsame slice, there can be data elements that are commonly referred by\n \t\t\tmany instances such as Country or Currency code. Such quasi-static \n \t\t\tmaster data can be stored as identical copies in multiple slices. \n-\t\t\tThe user application needs to annotate such entity with\n-\t\t\t<classname>@Replicated</classname> annotation and implement \n-\t\t\ta <classname>org.apache.openjpa.slice.ReplicationPolicy</classname> \n+\t\t\tThe user application must enumerate the replicated entity type names in\n+\t\t\t<classname>openjpa.slice.ReplicatedTypes</classname> as a comma-separated list\n+\t\t\tand implement a <classname>org.apache.openjpa.slice.ReplicationPolicy</classname> \n \t\t\tinterface. The <classname>ReplicationPolicy</classname> interface \n \t\t\tis quite similar to <classname>DistributionPolicy</classname> \n \t\t\tinterface except it returns an array of target slice names instead"},{"sha":"6f3a145bc362f7ba0b851fbd3607dd5f589a5141","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedConfiguration.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedConfiguration.java?ref=85ba2eada3ffc4eeba3ed8e913ccfee560d6b006","patch":"@@ -117,4 +117,6 @@\n      * replicated instances will be replicated across the available slices.\n      */\n     void setReplicationPolicy(String policy);\n+    \n+    boolean isReplicated(Class<?> type);\n }"},{"sha":"f0262f52721e9e498bd73db9a8cc0bf6a5edf7bd","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedQueryImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedQueryImpl.java?ref=85ba2eada3ffc4eeba3ed8e913ccfee560d6b006","patch":"@@ -28,10 +28,10 @@\n  * @author Pinaki Poddar\n  *\n  */\n+@SuppressWarnings(\"serial\")\n public class DistributedQueryImpl extends QueryImpl {\n     private final ReentrantSliceLock _lock;\n-    public DistributedQueryImpl(Broker broker, String language,\n-            StoreQuery storeQuery) {\n+    public DistributedQueryImpl(Broker broker, String language, StoreQuery storeQuery) {\n         super(broker, language, storeQuery);\n         _lock = new ReentrantSliceLock();\n     }"},{"sha":"a7b52e69b367ac05cbe81494f4cd0a00d810608a","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/ReentrantSliceLock.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-slice/src/main/java/org/apache/openjpa/slice/ReentrantSliceLock.java","raw_url":"https://github.com/apache/openjpa/raw/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-slice/src/main/java/org/apache/openjpa/slice/ReentrantSliceLock.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/ReentrantSliceLock.java?ref=85ba2eada3ffc4eeba3ed8e913ccfee560d6b006","patch":"@@ -26,6 +26,7 @@\n  * @author Pinaki Poddar\n  *\n  */\n+@SuppressWarnings(\"serial\")\n public class ReentrantSliceLock extends ReentrantLock {\n \n     public ReentrantSliceLock() {"},{"sha":"083fb39ca533b50293268e012609b5e5ca28f57b","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/ReplicationPolicy.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-slice/src/main/java/org/apache/openjpa/slice/ReplicationPolicy.java","raw_url":"https://github.com/apache/openjpa/raw/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-slice/src/main/java/org/apache/openjpa/slice/ReplicationPolicy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/ReplicationPolicy.java?ref=85ba2eada3ffc4eeba3ed8e913ccfee560d6b006","patch":"@@ -24,12 +24,11 @@\n  * Policy to select one or more of the physical databases referred as \n  * <em>slice</em> in which a given persistent instance will be persisted.\n  * \n- * This interface is invoked for entity types annotated as @Replicated\n+ * This interface is invoked for entity types that are specified as ReplicatedTypes in the configuration.\n  *  \n  * @author Pinaki Poddar \n  * \n  * @see DistributionPolicy\n- * @see Replicated\n  *\n  */\n public interface ReplicationPolicy {"},{"sha":"709568cd6ba6961e9e8d980fb3123ccea7339ac9","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/SliceImplHelper.java","status":"modified","additions":9,"deletions":12,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-slice/src/main/java/org/apache/openjpa/slice/SliceImplHelper.java","raw_url":"https://github.com/apache/openjpa/raw/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-slice/src/main/java/org/apache/openjpa/slice/SliceImplHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/SliceImplHelper.java?ref=85ba2eada3ffc4eeba3ed8e913ccfee560d6b006","patch":"@@ -40,7 +40,7 @@\n \t/**\n \t * Gets the target slices by calling user-specified \n \t * {@link DistributionPolicy} or {@link ReplicationPolicy} \n-     * depending on whether the given instance is {@link Replicated replicated}.\n+     * depending on whether the given instance is {@link DistributedConfiguration#isReplicated(Class) replicated}.\n \t */\n \tpublic static SliceInfo getSlicesByPolicy(Object pc, \n \t\t\tDistributedConfiguration conf, Object ctx) {\n@@ -84,22 +84,19 @@ public static SliceInfo getSlicesByPolicy(OpenJPAStateManager sm,\n \t/**\n \t * Affirms if the given instance be replicated to multiple slices.\n \t */\n-    public static boolean isReplicated(Object pc, OpenJPAConfiguration conf) {\n-\t\tif (pc == null)\n-\t\t\treturn false;\n-\t\tClassMetaData meta = conf.getMetaDataRepositoryInstance()\n-\t\t\t.getMetaData(pc.getClass(), null, false);\n-\t\treturn (meta == null) ? false : meta.isReplicated();\n+    public static boolean isReplicated(Object pc, DistributedConfiguration conf) {\n+        return pc == null ? false : conf.isReplicated(pc.getClass());\n \t}\n \n \t/**\n \t * Affirms if the given instance be replicated to multiple slices.\n \t */\n-\tpublic static boolean isReplicated(OpenJPAStateManager sm) {\n-\t\tif (sm == null)\n-\t\t\treturn false;\n-\t\treturn sm.getMetaData().isReplicated();\n-\t}\n+//\tpublic static boolean isReplicated(OpenJPAStateManager sm) {\n+//\t    return sm == null ? false : \n+//\t\tif (sm == null)\n+//\t\t\treturn false;\n+//\t\treturn sm.getMetaData().isReplicated();\n+//\t}\n \t\n \t/**\n \t * Affirms if the given StateManager has an assigned slice."},{"sha":"95c8650e6462516e171adbdd252e3a997163f807","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/SliceInfo.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-slice/src/main/java/org/apache/openjpa/slice/SliceInfo.java","raw_url":"https://github.com/apache/openjpa/raw/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-slice/src/main/java/org/apache/openjpa/slice/SliceInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/SliceInfo.java?ref=85ba2eada3ffc4eeba3ed8e913ccfee560d6b006","patch":"@@ -37,8 +37,7 @@\n \tprivate final boolean  _isReplicated;\n \tprivate String[] _slices;\n \t\n-\tprivate static transient Localizer _loc = \n-\t\tLocalizer.forPackage(SliceInfo.class);\n+\tprivate static transient Localizer _loc = Localizer.forPackage(SliceInfo.class);\n \t\n     /**\n      * Generic constructor given one or more slice names. \n@@ -105,8 +104,6 @@ public boolean isReplicated() {\n \tpublic SliceInfo setInto(OpenJPAStateManager sm) {\n \t\tif (sm == null)\n \t\t\tthrow new NullPointerException();\n-\t\tif (SliceImplHelper.isReplicated(sm) != isReplicated())\n-\t\t    throw new InternalException();\n \t\tObject previous = sm.setImplData(this, true);\n \t\tif (previous == null || previous instanceof SliceInfo)\n \t\t\treturn (SliceInfo)previous;"},{"sha":"c4a397d30070f1b2988894297b01136fda6ae101","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfiguration.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfiguration.java?ref=85ba2eada3ffc4eeba3ed8e913ccfee560d6b006","patch":"@@ -35,5 +35,5 @@\n      * Gets the master slice.\n      */\n     Slice getMasterSlice();\n-\n+    \n }"},{"sha":"68cc34ef186cb63b83b2a63fbe7273c1b80643f9","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java","status":"modified","additions":59,"deletions":1,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java?ref=85ba2eada3ffc4eeba3ed8e913ccfee560d6b006","patch":"@@ -21,10 +21,13 @@\n import java.sql.Connection;\n import java.sql.SQLException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collections;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n+import java.util.Set;\n \n import javax.sql.DataSource;\n import javax.sql.XADataSource;\n@@ -44,6 +47,8 @@\n import org.apache.openjpa.lib.log.LogFactory;\n import org.apache.openjpa.lib.log.LogFactoryImpl;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.slice.DistributedBrokerImpl;\n import org.apache.openjpa.slice.DistributionPolicy;\n import org.apache.openjpa.slice.ProductDerivation;\n@@ -72,13 +77,16 @@\n     protected StringListValue namesPlugin;\n     public PluginValue distributionPolicyPlugin;\n     public PluginValue replicationPolicyPlugin;\n+    public StringListValue replicatedTypesPlugin;\n+    \n+    private ReplicatedTypeRepository _replicationRepos;\n     \n     public static final String DOT = \".\";\n     public static final String REGEX_DOT = \"\\\\.\";\n     public static final String PREFIX_SLICE = ProductDerivation.PREFIX_SLICE + DOT;\n     public static final String PREFIX_OPENJPA = \"openjpa.\";\n     private static Localizer _loc = Localizer.forPackage(DistributedJDBCConfigurationImpl.class);\n-\n+    \n     /**\n      * Create a configuration and declare the plug-ins.\n      */\n@@ -99,6 +107,9 @@ public DistributedJDBCConfigurationImpl() {\n         replicationPolicyPlugin.setString(\"all\");\n         replicationPolicyPlugin.setDynamic(true);\n         \n+        replicatedTypesPlugin = new StringListValue(PREFIX_SLICE + \"ReplicatedTypes\");\n+        addValue(replicatedTypesPlugin);\n+        \n         lenientPlugin = addBoolean(PREFIX_SLICE + \"Lenient\");\n         lenientPlugin.setDefault(\"true\");\n         \n@@ -552,4 +563,51 @@ public DecoratingDataSource createConnectionFactory() {\n         }\n         return virtualDataSource;\n     }\n+    \n+    public boolean isReplicated(Class<?> cls) {\n+        if (_replicationRepos == null) {\n+            _replicationRepos = new ReplicatedTypeRepository(getMetaDataRepositoryInstance(),\n+                    Arrays.asList(replicatedTypesPlugin.get()));\n+        }\n+        return _replicationRepos.contains(cls);\n+    }\n+    \n+    /**\n+     * A private repository of replicated types.\n+     * \n+     * @author Pinaki Poddar\n+     *\n+     */\n+    private static class ReplicatedTypeRepository {\n+        private Set<Class<?>> _replicatedTypes = new HashSet<Class<?>>();\n+        private Set<Class<?>> _nonreplicatedTypes = new HashSet<Class<?>>();\n+\n+\n+        List<String> names;\n+        MetaDataRepository repos;\n+        \n+        ReplicatedTypeRepository(MetaDataRepository repos, List<String> given) {\n+            names = given;\n+            this.repos = repos;\n+        }\n+        \n+        boolean contains(Class<?> cls) {\n+            if (_replicatedTypes.contains(cls))\n+                return true;\n+            if (_nonreplicatedTypes.contains(cls)) \n+                return false;\n+            ClassMetaData meta = repos.getMetaData(cls, null, false);\n+            if (meta == null) {\n+                _nonreplicatedTypes.add(cls);\n+                return false;\n+            }\n+            boolean replicated = names.contains(meta.getDescribedType().getName());\n+            if (replicated) {\n+                _replicatedTypes.add(cls);\n+            } else {\n+                _nonreplicatedTypes.add(cls);\n+            }\n+            return replicated;\n+        }\n+    }\n }"},{"sha":"8b8589aca830b8f222fbc570a22e80f208fd8e11","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCStoreManager.java","status":"modified","additions":13,"deletions":8,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCStoreManager.java?ref=85ba2eada3ffc4eeba3ed8e913ccfee560d6b006","patch":"@@ -56,6 +56,7 @@\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.slice.DistributedConfiguration;\n import org.apache.openjpa.slice.DistributedStoreManager;\n import org.apache.openjpa.slice.ProductDerivation;\n import org.apache.openjpa.slice.Slice;\n@@ -145,7 +146,7 @@ protected SliceInfo findSliceNames(OpenJPAStateManager sm, Object edata) {\n         SliceInfo result = null;\n         PersistenceCapable pc = sm.getPersistenceCapable();\n         Object ctx = getContext();\n-        if (SliceImplHelper.isReplicated(sm)) {\n+        if (_conf.isReplicated(sm.getMetaData().getDescribedType())) {\n             result = SliceImplHelper.getSlicesByPolicy(pc, _conf, ctx);\n         } else {\n             String origin = estimateSlice(sm, edata);\n@@ -159,7 +160,7 @@ protected SliceInfo findSliceNames(OpenJPAStateManager sm, Object edata) {\n     }\n     \n     private void assignSlice(OpenJPAStateManager sm, String hint) {\n-        if (SliceImplHelper.isReplicated(sm)) {\n+        if (_conf.isReplicated(sm.getMetaData().getDescribedType())) {\n             SliceImplHelper.getSlicesByPolicy(sm, _conf, getContext())\n                 .setInto(sm);\n             return;\n@@ -349,10 +350,10 @@ boolean occurs(OpenJPAStateManager sm,\n      * by the associated slice identifier of each StateManager.\n      */\n     private Map<String, StateManagerSet> bin(Collection sms, Object edata) {\n-        Map<String, StateManagerSet> subsets =  \n-            new HashMap<String, StateManagerSet>();\n-        for (SliceStoreManager slice : _slices)\n-            subsets.put(slice.getName(), new StateManagerSet());\n+        Map<String, StateManagerSet> subsets =  new HashMap<String, StateManagerSet>();\n+        for (SliceStoreManager slice : _slices) {\n+            subsets.put(slice.getName(), new StateManagerSet(_conf));\n+        }\n         for (Object x : sms) {\n             OpenJPAStateManager sm = (OpenJPAStateManager) x;\n             String[] targets = findSliceNames(sm, edata).getSlices();\n@@ -498,7 +499,7 @@ protected RefCountConnection connectInternal() throws SQLException {\n            if (targetNames.contains(slice.getName()))\n               targets.add(slice);\n            }\n-          if (targets.isEmpty())\n+        if (targets.isEmpty())\n             return _slices;\n         return targets;\n     }\n@@ -523,11 +524,15 @@ public Collection call() throws Exception {\n      *  \n      */\n     private static class StateManagerSet extends HashSet<OpenJPAStateManager> {\n+        private final DistributedConfiguration conf;\n         List<OpenJPAStateManager> replicated;\n         \n+        StateManagerSet(DistributedConfiguration conf) {\n+            this.conf = conf;\n+        }\n         @Override\n         public boolean add(OpenJPAStateManager sm) {\n-            boolean isReplicated = sm.getMetaData().isReplicated();\n+            boolean isReplicated =  conf.isReplicated(sm.getMetaData().getDescribedType());\n             if (isReplicated) {\n                 if (replicated == null)\n                     replicated = new ArrayList<OpenJPAStateManager>();"},{"sha":"d27b8d328e1d3c77acb6e690e092c52461fb5e1a","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java?ref=85ba2eada3ffc4eeba3ed8e913ccfee560d6b006","patch":"@@ -45,6 +45,7 @@\n import org.apache.openjpa.lib.rop.RangeResultObjectProvider;\n import org.apache.openjpa.lib.rop.ResultObjectProvider;\n import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.slice.DistributedConfiguration;\n import org.apache.openjpa.slice.SliceThread;\n import org.apache.openjpa.util.StoreException;\n \n@@ -184,19 +185,17 @@ public ResultObjectProvider executeQuery(StoreQuery q,\n          * Scans metadata to find out if a replicated class is the candidate.\n \t\t */\n \t\tboolean containsReplicated(QueryContext query) {\n-\t\t\tClass candidate = query.getCandidateType();\n+\t\t\tClass<?> candidate = query.getCandidateType();\n+\t\t\tDistributedConfiguration conf = (DistributedConfiguration)query.getStoreContext()\n+\t\t\t    .getConfiguration();\n \t\t\tif (candidate != null) {\n-                ClassMetaData meta = query.getStoreContext().getConfiguration()\n-                        .getMetaDataRepositoryInstance().getMetaData(candidate,\n-\t\t\t\t\t\t\t\tnull, true);\n-\t\t\t\tif (meta != null && meta.isReplicated())\n-\t\t\t\t\treturn true;\n+\t\t\t    return conf.isReplicated(candidate);\n \t\t\t}\n \t\t\tClassMetaData[] metas = query.getAccessPathMetaDatas();\n \t\t\tif (metas == null || metas.length < 1)\n \t\t\t\treturn false;\n-\t\t\tfor (ClassMetaData type : metas)\n-\t\t\t\tif (type.isReplicated())\n+\t\t\tfor (ClassMetaData meta : metas)\n+\t\t\t\tif (conf.isReplicated(meta.getDescribedType()))\n \t\t\t\t\treturn true;\n \t\t\treturn false;\n \t\t}"},{"sha":"d2bcb496fa0bd7d6b61fd9e9254c4d4ff3f00901","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/Country.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-slice/src/test/java/org/apache/openjpa/slice/Country.java","raw_url":"https://github.com/apache/openjpa/raw/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-slice/src/test/java/org/apache/openjpa/slice/Country.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/Country.java?ref=85ba2eada3ffc4eeba3ed8e913ccfee560d6b006","patch":"@@ -22,8 +22,6 @@\n import javax.persistence.Id;\n import javax.persistence.Version;\n \n-import org.apache.openjpa.persistence.Replicated;\n-\n /**\n  * A persistence entity to be replicated across multiple databases. A\n  * non-replicated entity can refer to a replicated entity.\n@@ -32,7 +30,6 @@\n  * \n  */\n @Entity\n-@Replicated\n public class Country {\n     @Id\n     private String name;"},{"sha":"fcb99de438e7700d7063c2d8e26c1c107b603848","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/ReplicatedChild.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-slice/src/test/java/org/apache/openjpa/slice/ReplicatedChild.java","raw_url":"https://github.com/apache/openjpa/raw/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-slice/src/test/java/org/apache/openjpa/slice/ReplicatedChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/ReplicatedChild.java?ref=85ba2eada3ffc4eeba3ed8e913ccfee560d6b006","patch":"@@ -22,10 +22,7 @@\n import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n \n-import org.apache.openjpa.persistence.Replicated;\n-\n @Entity\n-@Replicated\n public class ReplicatedChild {\n     @Id \n     private String name;"},{"sha":"036571950c660c7e0da7998694f965ffba93d492","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/ReplicatedParent.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-slice/src/test/java/org/apache/openjpa/slice/ReplicatedParent.java","raw_url":"https://github.com/apache/openjpa/raw/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-slice/src/test/java/org/apache/openjpa/slice/ReplicatedParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/ReplicatedParent.java?ref=85ba2eada3ffc4eeba3ed8e913ccfee560d6b006","patch":"@@ -23,10 +23,7 @@\n \n import javax.persistence.*;\n \n-import org.apache.openjpa.persistence.Replicated;\n-\n @Entity\n-@Replicated\n public class ReplicatedParent {\n     @Id \n     private String name;"},{"sha":"42b96529ac7981369d7483b3e75d4c777c804475","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/TestReplication.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestReplication.java","raw_url":"https://github.com/apache/openjpa/raw/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestReplication.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestReplication.java?ref=85ba2eada3ffc4eeba3ed8e913ccfee560d6b006","patch":"@@ -23,7 +23,7 @@\n import javax.persistence.EntityManager;\n \n /**\n- * Tests that parent-child relation both @Repliated are stored in all replicated\n+ * Tests that parent-child relation both replicated are stored in all replicated\n  * slices.\n  * \n  * <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-981\">OPENJPA-981</A>"},{"sha":"b449bcf7a855a5e6f699fd4a4a52c3a6e49d15c9","filename":"openjpa-slice/src/test/resources/META-INF/persistence.xml","status":"modified","additions":51,"deletions":3,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-slice/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/85ba2eada3ffc4eeba3ed8e913ccfee560d6b006/openjpa-slice/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/resources/META-INF/persistence.xml?ref=85ba2eada3ffc4eeba3ed8e913ccfee560d6b006","patch":"@@ -101,6 +101,8 @@\n             <property name=\"openjpa.QueryCompilationCache\" value=\"false\"/>\n             <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\n             \n+            <property name=\"openjpa.slice.ReplicatedTypes\" value=\"org.apache.openjpa.slice.Country\"/>\n+            \n             <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"unsupported\"/>\n             <property name=\"openjpa.DynamicEnhancementAgent\"   value=\"false\"/>\n       \t</properties>\n@@ -171,12 +173,13 @@\n          <property name=\"openjpa.slice.One.ConnectionURL\" value=\"jdbc:derby:target/database/openjpa-slice1;create=true\"/>\n          <property name=\"openjpa.slice.Two.ConnectionURL\" value=\"jdbc:derby:target/database/openjpa-slice2;create=true\"/>\n          \n+         <property name=\"openjpa.slice.ReplicatedTypes\" value=\"org.apache.openjpa.slice.ReplicatedParent,org.apache.openjpa.slice.ReplicatedChild\"/>\n          <property name=\"openjpa.Multithreaded\" value=\"false\"/>\n          <property name=\"openjpa.Log\" value=\"DefaultLevel=INFO, Enhance=TRACE, SQL=TRACE\"/>\n          <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"refresh\"/>\n          <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\n-            <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"unsupported\"/>\n-            <property name=\"openjpa.DynamicEnhancementAgent\"   value=\"false\"/>\n+         <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"unsupported\"/>\n+         <property name=\"openjpa.DynamicEnhancementAgent\"   value=\"false\"/>\n       </properties>\n    </persistence-unit>\n    \n@@ -228,5 +231,50 @@\n       </properties>\n    </persistence-unit>\n    \n-   \n+   <persistence-unit name=\"perf.mysql.slice\">\n+   \t\t<class>org.apache.openjpa.slice.Person</class>\n+   \t\t<class>org.apache.openjpa.slice.Address</class>\n+   \t\t<class>org.apache.openjpa.slice.Country</class>\n+   \t\t\n+      <properties>\n+         <property name=\"openjpa.BrokerFactory\" value=\"slice\"/>\n+         <property name=\"openjpa.ConnectionDriverName\" value=\"org.apache.commons.dbcp.BasicDataSource\"/>\n+\n+         <property name=\"openjpa.slice.Names\" value=\"S1,S2,S3,S4\"/>\n+         \n+         <property name=\"openjpa.ConnectionUserName\"        value=\"root\"/>\n+         <property name=\"openjpa.ConnectionPassword\"        value=\"\"/>\n+         <property name=\"openjpa.slice.S1.ConnectionProperties\" value=\"DriverClassName=com.mysql.jdbc.Driver,Url=jdbc:mysql://localhost/S1,MaxActive=4\"/>\n+         <property name=\"openjpa.slice.S2.ConnectionProperties\" value=\"DriverClassName=com.mysql.jdbc.Driver,Url=jdbc:mysql://localhost/S2,MaxActive=4\"/>\n+         <property name=\"openjpa.slice.S3.ConnectionProperties\" value=\"DriverClassName=com.mysql.jdbc.Driver,Url=jdbc:mysql://localhost/S3,MaxActive=4\"/>\n+         <property name=\"openjpa.slice.S4.ConnectionProperties\" value=\"DriverClassName=com.mysql.jdbc.Driver,Url=jdbc:mysql://localhost/S4,MaxActive=4\"/>\n+         \n+         <property name=\"openjpa.jdbc.DBDictionary\"        value=\"mysql\"/>\n+         <property name=\"openjpa.Multithreaded\" value=\"false\"/>\n+         <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"refresh\"/>\n+         <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\n+         <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"unsupported\"/>\n+         <property name=\"openjpa.DynamicEnhancementAgent\"   value=\"false\"/>\n+      </properties>\n+   </persistence-unit>\n+   <persistence-unit name=\"perf.mysql.mono\">\n+   \t\t<class>org.apache.openjpa.slice.Person</class>\n+   \t\t<class>org.apache.openjpa.slice.Address</class>\n+   \t\t<class>org.apache.openjpa.slice.Country</class>\n+   \t\t\n+      <properties>\n+         <property name=\"openjpa.ConnectionDriverName\" value=\"org.apache.commons.dbcp.BasicDataSource\"/>\n+         \n+         <property name=\"openjpa.ConnectionUserName\"        value=\"root\"/>\n+         <property name=\"openjpa.ConnectionPassword\"        value=\"\"/>\n+         <property name=\"openjpa.ConnectionProperties\" value=\"DriverClassName=com.mysql.jdbc.Driver,Url=jdbc:mysql://localhost/S,MaxActive=4\"/>\n+         \n+         <property name=\"openjpa.jdbc.DBDictionary\"        value=\"mysql\"/>\n+         <property name=\"openjpa.Multithreaded\" value=\"false\"/>\n+         <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"refresh\"/>\n+         <property name=\"openjpa.jdbc.MappingDefaults\" value=\"DefaultMissingInfo=true\"/>\n+         <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"unsupported\"/>\n+         <property name=\"openjpa.DynamicEnhancementAgent\"   value=\"false\"/>\n+      </properties>\n+   </persistence-unit>\n </persistence>"}]}

