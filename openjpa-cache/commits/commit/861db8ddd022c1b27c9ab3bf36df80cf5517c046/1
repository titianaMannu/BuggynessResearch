{"sha":"861db8ddd022c1b27c9ab3bf36df80cf5517c046","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg2MWRiOGRkZDAyMmMxYjI3YzlhYjNiZjM2ZGY4MGNmNTUxN2MwNDY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-05-01T02:22:35Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-05-01T02:22:35Z"},"message":"OPENJPA-1049: Register type alias for MappedSuperclass.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@770516 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"be9776c34c3687b93c28c9d22bf708b1c2949f17","url":"https://api.github.com/repos/apache/openjpa/git/trees/be9776c34c3687b93c28c9d22bf708b1c2949f17"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/861db8ddd022c1b27c9ab3bf36df80cf5517c046","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/861db8ddd022c1b27c9ab3bf36df80cf5517c046","html_url":"https://github.com/apache/openjpa/commit/861db8ddd022c1b27c9ab3bf36df80cf5517c046","comments_url":"https://api.github.com/repos/apache/openjpa/commits/861db8ddd022c1b27c9ab3bf36df80cf5517c046/comments","author":null,"committer":null,"parents":[{"sha":"f9fd4837b316ad205d27cdf053cf51b757080f8a","url":"https://api.github.com/repos/apache/openjpa/commits/f9fd4837b316ad205d27cdf053cf51b757080f8a","html_url":"https://github.com/apache/openjpa/commit/f9fd4837b316ad205d27cdf053cf51b757080f8a"}],"stats":{"total":19,"additions":14,"deletions":5},"files":[{"sha":"a8cd156880dff85271292c33376b9be4ef1ca36b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/861db8ddd022c1b27c9ab3bf36df80cf5517c046/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/861db8ddd022c1b27c9ab3bf36df80cf5517c046/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=861db8ddd022c1b27c9ab3bf36df80cf5517c046","patch":"@@ -2802,7 +2802,7 @@ private void addStaticInitializer() {\n         code.getstatic().setField(PRE + \"FieldFlags\", byte[].class);\n         code.getstatic().setField(SUPER, Class.class);\n         \n-        if (_meta.isMapped())\n+        if (_meta.isMapped() || _meta.isAbstract())\n             code.constant().setValue(_meta.getTypeAlias());\n         else\n             code.constant().setNull();"},{"sha":"aaedc822503d992fffa6195f4abb6438f98a48e1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedUnqualifiedClassNames.java","status":"modified","additions":13,"deletions":4,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/861db8ddd022c1b27c9ab3bf36df80cf5517c046/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedUnqualifiedClassNames.java","raw_url":"https://github.com/apache/openjpa/raw/861db8ddd022c1b27c9ab3bf36df80cf5517c046/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedUnqualifiedClassNames.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedUnqualifiedClassNames.java?ref=861db8ddd022c1b27c9ab3bf36df80cf5517c046","patch":"@@ -18,14 +18,21 @@\n  */\n package org.apache.openjpa.persistence.inheritance;\n \n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.openjpa.meta.ClassMetaData;\n-import org.apache.openjpa.kernel.AbstractBrokerFactory;\n+import org.apache.openjpa.persistence.test.AllowFailure;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n /**\n  * Test that entities, mapped superclasses, and embeddables can all share\n  * the same short names without any collisions.\n+ * \n+ * This test is modified to ignore conflict of alias between MappedSuperclass\n+ * and derived Entity. This earlier assertion is no more valid after the\n+ * changes introduced to allow MappedSuperclass to be used in query.\n+ * That feature seemed more significant than the feature asserted by this test.\n+ * The details of the change can be found at\n+ * <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-1049\">JIRA</A>\n+ * \n  */\n public class TestSharedUnqualifiedClassNames\n     extends SingleEMFTestCase {\n@@ -42,7 +49,9 @@ public void setUp() {\n         emf.createEntityManager().close();\n     }\n \n-        public void testMappedSuperclass() {\n+    @AllowFailure(message=\"MappedSuperclass can be aliased and has higher\" +\n+    \"search order in alias if it clashes with other types's alias\")\n+    public void testMappedSuperclass() {\n         ClassMetaData meta = emf.getConfiguration()\n             .getMetaDataRepositoryInstance()\n             .getMetaData(\"SharedName1\", getClass().getClassLoader(), true);"}]}

