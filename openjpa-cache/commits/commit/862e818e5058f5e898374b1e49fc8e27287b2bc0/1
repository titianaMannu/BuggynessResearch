{"sha":"862e818e5058f5e898374b1e49fc8e27287b2bc0","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg2MmU4MThlNTA1OGY1ZTg5ODM3NGIxZTQ5ZmM4ZTI3Mjg3YjJiYzA=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2011-05-11T16:19:04Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2011-05-11T16:19:04Z"},"message":"OPENJPA-1989: Flip FeildMetaData.DefaultFetchGroupExplicit flag when parsing ToOne xml relationships.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1101951 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"583c421f6e48b390b7cfce105fecb5740aa7ea8e","url":"https://api.github.com/repos/apache/openjpa/git/trees/583c421f6e48b390b7cfce105fecb5740aa7ea8e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/862e818e5058f5e898374b1e49fc8e27287b2bc0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/862e818e5058f5e898374b1e49fc8e27287b2bc0","html_url":"https://github.com/apache/openjpa/commit/862e818e5058f5e898374b1e49fc8e27287b2bc0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/862e818e5058f5e898374b1e49fc8e27287b2bc0/comments","author":null,"committer":null,"parents":[{"sha":"aa88b32b06ec37c1b618d3e4c2d552b852a0b1b5","url":"https://api.github.com/repos/apache/openjpa/commits/aa88b32b06ec37c1b618d3e4c2d552b852a0b1b5","html_url":"https://github.com/apache/openjpa/commit/aa88b32b06ec37c1b618d3e4c2d552b852a0b1b5"}],"stats":{"total":93,"additions":57,"deletions":36},"files":[{"sha":"bd6a461081cd4ed888f139966af53f4b96cd88f5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":17,"deletions":19,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/862e818e5058f5e898374b1e49fc8e27287b2bc0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/862e818e5058f5e898374b1e49fc8e27287b2bc0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=862e818e5058f5e898374b1e49fc8e27287b2bc0","patch":"@@ -459,7 +459,7 @@ private void setInverseRelation(OpenJPAStateManager owner,\n                 }\n                 Object coll =  owner.fetchObject(fms[i].getIndex());\n                 if (coll instanceof Map)\n-                    coll = ((Map)coll).values();\n+                    coll = ((Map<?,?>)coll).values();\n                 if (coll instanceof Collection<?> && \n                     ((Collection<?>) coll).size() > 0) {\n                     // Found eagerly loaded collection.\n@@ -594,7 +594,7 @@ private Result getInitializeStateUnionResult(final OpenJPAStateManager sm,\n \n         Union union = _sql.newUnion(mappings.length);\n         union.setExpectedResultCount(1, false);\n-        if (fetch.getSubclassFetchMode(mapping) != fetch.EAGER_JOIN)\n+        if (fetch.getSubclassFetchMode(mapping) != EagerFetchModes.EAGER_JOIN)\n             union.abortUnion();\n         union.select(new Union.Selector() {\n             public void select(Select sel, int i) {\n@@ -823,7 +823,7 @@ public ResultObjectProvider executeExtent(ClassMetaData meta,\n \n         ResultObjectProvider[] rops = null;\n         final JDBCFetchConfiguration jfetch = (JDBCFetchConfiguration) fetch;\n-        if (jfetch.getSubclassFetchMode(mapping) != jfetch.EAGER_JOIN)\n+        if (jfetch.getSubclassFetchMode(mapping) != EagerFetchModes.EAGER_JOIN)\n             rops = new ResultObjectProvider[mappings.length];\n \n         try {\n@@ -1232,15 +1232,15 @@ private FieldMapping createEagerSelects(Select sel, ClassMapping mapping,\n         int mode;\n         for (int i = 0; i < fms.length; i++) {\n             mode = fms[i].getEagerFetchMode();\n-            if (mode == fetch.EAGER_NONE)\n+            if (mode == EagerFetchModes.EAGER_NONE)\n                 continue;\n             if (!requiresSelect(fms[i], sm, fields, fetch))\n                 continue;\n \n             // try to select with join first\n-            jtype = (fms[i].getNullValue() == fms[i].NULL_EXCEPTION) \n-                ? sel.EAGER_INNER : sel.EAGER_OUTER;\n-            if (mode != fetch.EAGER_PARALLEL && !fms[i].isEagerSelectToMany()\n+            jtype = (fms[i].getNullValue() == FieldMetaData.NULL_EXCEPTION) \n+                ? Select.EAGER_INNER : Select.EAGER_OUTER;\n+            if (mode != EagerFetchModes.EAGER_PARALLEL && !fms[i].isEagerSelectToMany()\n                 && fms[i].supportsSelect(sel, jtype, sm, this, fetch) > 0\n                 && sel.eagerClone(fms[i], jtype, false, 1) != null)\n                 continue;\n@@ -1252,8 +1252,8 @@ private FieldMapping createEagerSelects(Select sel, ClassMapping mapping,\n             // to use a to-many join also.  currently we limit eager\n             // outer joins to non-LRS, non-ranged selects that don't already\n             // have an eager to-many join\n-            if ((hasJoin || mode == fetch.EAGER_JOIN \n-                || (mode == fetch.DEFAULT && sm != null))\n+            if ((hasJoin || mode == EagerFetchModes.EAGER_JOIN \n+                || (mode == FetchConfiguration.DEFAULT && sm != null))\n                 && fms[i].isEagerSelectToMany()\n                 && !inEagerJoin\n                 && !sel.hasEagerJoin(true)\n@@ -1268,8 +1268,8 @@ private FieldMapping createEagerSelects(Select sel, ClassMapping mapping,\n             }\n \n             // finally, try parallel\n-            if (eager == fetch.EAGER_PARALLEL\n-                && (sels = fms[i].supportsSelect(sel, sel.EAGER_PARALLEL, sm,\n+            if (eager == EagerFetchModes.EAGER_PARALLEL\n+                && (sels = fms[i].supportsSelect(sel, Select.EAGER_PARALLEL, sm,\n                 this, fetch)) != 0)\n                 sel.eagerClone(fms[i], Select.EAGER_PARALLEL, \n                     fms[i].isEagerSelectToMany(), sels);\n@@ -1372,7 +1372,7 @@ private int selectBaseMappings(Select sel, ClassMapping mapping,\n                 seld = Math.max(fseld, seld);\n             } else if (optSelect(fms[i], sel, sm, fetch)) {\n                 fseld = fms[i].select(sel, sm, this, \n-                \tfetch.traverseJDBC(fms[i]), fetch.EAGER_NONE);\n+                \tfetch.traverseJDBC(fms[i]), EagerFetchModes.EAGER_NONE);\n \n                 // don't upgrade seld to > 0 based on these fields, since\n                 // they're not in the calculated field set\n@@ -1412,10 +1412,10 @@ private int selectBaseMappings(Select sel, ClassMapping mapping,\n     private boolean optSelect(FieldMapping fm, Select sel,\n         OpenJPAStateManager sm, JDBCFetchConfiguration fetch) {\n         return !fm.isInDefaultFetchGroup() \n-            && !fm.isDefaultFetchGroupExplicit()\n+             && !fm.isDefaultFetchGroupExplicit()\n             && (sm == null || sm.getPCState() == PCState.TRANSIENT \n             || !sm.getLoaded().get(fm.getIndex()))\n-            && fm.supportsSelect(sel, sel.TYPE_TWO_PART, sm, this, fetch) > 0;\n+            && fm.supportsSelect(sel, Select.TYPE_TWO_PART, sm, this, fetch) > 0;\n     }\n \n     /**\n@@ -1458,7 +1458,7 @@ private void selectSubclassMappings(Select sel, ClassMapping mapping,\n             \tif (fetch.requiresFetch(fms[j]) != FetchConfiguration.FETCH_LOAD\n                     && ((!fms[j].isInDefaultFetchGroup() \n                     && fms[j].isDefaultFetchGroupExplicit())\n-                    || fms[j].supportsSelect(sel, sel.TYPE_TWO_PART, sm, this, \n+                    || fms[j].supportsSelect(sel, Select.TYPE_TWO_PART, sm, this, \n                     fetch) <= 0)) \n             \t\tcontinue;\n \n@@ -1472,10 +1472,8 @@ private void selectSubclassMappings(Select sel, ClassMapping mapping,\n                 }\n \n                 // if can select with tables already selected, do it\n-                if (fms[j].supportsSelect(sel, sel.TYPE_JOINLESS, sm, this,\n-                    fetch) > 0)\n-                    fms[j].select(sel, null, this, fetch.traverseJDBC(fms[j]),\n-                        fetch.EAGER_NONE);\n+                if (fms[j].supportsSelect(sel, Select.TYPE_JOINLESS, sm, this, fetch) > 0)\n+                    fms[j].select(sel, null, this, fetch.traverseJDBC(fms[j]), EagerFetchModes.EAGER_NONE);\n             }\n         }\n     }"},{"sha":"6722d9812a8138c9c30afb0aa91bdfd2c658bc24","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestToOneLazyXmlOverride.java","status":"modified","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/862e818e5058f5e898374b1e49fc8e27287b2bc0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestToOneLazyXmlOverride.java","raw_url":"https://github.com/apache/openjpa/raw/862e818e5058f5e898374b1e49fc8e27287b2bc0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestToOneLazyXmlOverride.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestToOneLazyXmlOverride.java?ref=862e818e5058f5e898374b1e49fc8e27287b2bc0","patch":"@@ -47,11 +47,17 @@ public void testToManyLazyOverride() {\n             resetSQL();\n \n             em.find(XmlOverrideToOneEntity.class, x.getId());\n-            for (String lastSql : sql) {\n-                // Make sure we don't have any joins!\n-                assertFalse(\"Shouldn't have found any instances of join or JOIN in last sql, but did. Last SQL = \"\n-                    + lastSql, lastSql.contains(\"join\") || lastSql.contains(\"JOIN\"));\n-            }\n+\n+            assertTrue(sql.size() == 1);\n+            String lastSql = sql.get(0);\n+            // Make sure we don't have any joins!\n+            assertFalse(\"Shouldn't have found any instances of join or JOIN in last sql, but did. Last SQL = \"\n+                + lastSql, lastSql.contains(\"join\") || lastSql.contains(\"JOIN\"));\n+\n+            // Make sure that we selected lazy join columns.\n+            assertTrue(lastSql.contains(\"o2o\"));\n+            assertTrue(lastSql.contains(\"m2o\"));\n+\n         } finally {\n             if (em.getTransaction().isActive()) {\n                 em.getTransaction().rollback();"},{"sha":"eff8f566963e8b222b2079a84402a80302e76b0b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/XmlOverrideToOneEntity.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/862e818e5058f5e898374b1e49fc8e27287b2bc0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/XmlOverrideToOneEntity.java","raw_url":"https://github.com/apache/openjpa/raw/862e818e5058f5e898374b1e49fc8e27287b2bc0/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/XmlOverrideToOneEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/XmlOverrideToOneEntity.java?ref=862e818e5058f5e898374b1e49fc8e27287b2bc0","patch":"@@ -19,25 +19,34 @@\n  */\n package org.apache.openjpa.persistence.xml;\n \n+import java.util.List;\n+\n import javax.persistence.Entity;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToOne;\n+import javax.persistence.Version;\n \n @Entity\n public class XmlOverrideToOneEntity {\n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     int id;\n \n-    @OneToOne \n+    @OneToOne\n+    @JoinColumn(name=\"o2o\")\n     XmlOverrideToOneEntity otherO2O;\n \n     @ManyToOne\n+    @JoinColumn(name=\"m2o\")\n     XmlOverrideToOneEntity otherM2O;\n-\n+    \n+    @Version\n+    int version;\n+    \n     public long getId() {\n         return id;\n     }"},{"sha":"cf10441ec4f08db9351a9cf0a0cc630dc75de2e2","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/toone-orm.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/862e818e5058f5e898374b1e49fc8e27287b2bc0/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/toone-orm.xml","raw_url":"https://github.com/apache/openjpa/raw/862e818e5058f5e898374b1e49fc8e27287b2bc0/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/toone-orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/toone-orm.xml?ref=862e818e5058f5e898374b1e49fc8e27287b2bc0","patch":"@@ -25,8 +25,10 @@\n \t<entity name=\"XmlOverrideToOneEntity\" class=\"XmlOverrideToOneEntity\">\n \t\t<attributes>\n \t\t\t<many-to-one name=\"otherM2O\" fetch=\"LAZY\">\n+\t\t\t\t<join-column name=\"m2o\"/>\n \t\t\t</many-to-one>\n \t\t\t<one-to-one name=\"otherO2O\" fetch=\"LAZY\">\n+\t\t\t\t<join-column name=\"o2o\"/>\n \t\t\t</one-to-one>\n \t\t</attributes>\n \t</entity>"},{"sha":"8c842c4d3c87a70c17f0ae4d45410a8214af8865","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":16,"deletions":10,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/862e818e5058f5e898374b1e49fc8e27287b2bc0/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/862e818e5058f5e898374b1e49fc8e27287b2bc0/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=862e818e5058f5e898374b1e49fc8e27287b2bc0","patch":"@@ -1471,11 +1471,14 @@ private void assertPC(FieldMetaData fmd, String attr)\n     protected void parseOneToOne(FieldMetaData fmd, Attributes attrs)\n         throws SAXException {\n         String val = attrs.getValue(\"fetch\");\n-        if (val == null) {\n-            fmd.setInDefaultFetchGroup(true);\n-        } else {\n-            fmd.setInDefaultFetchGroup(\"EAGER\".equals(val));\n-        }\n+        boolean dfg = (val != null && val.equals(\"LAZY\")) ? false : true;\n+        \n+        // We need to toggle the DFG explicit flag here because this is used for an optimization when selecting an\n+        // Entity with lazy fields. \n+        fmd.setDefaultFetchGroupExplicit(true);\n+        fmd.setInDefaultFetchGroup(dfg);\n+        fmd.setDefaultFetchGroupExplicit(false);\n+        \n         val = attrs.getValue(\"target-entity\");\n         if (val != null)\n             fmd.setTypeOverride(AnnotationPersistenceMetaDataParser.toOverrideType(classForName(val)));\n@@ -1495,11 +1498,14 @@ protected void parseOneToOne(FieldMetaData fmd, Attributes attrs)\n     protected void parseManyToOne(FieldMetaData fmd, Attributes attrs)\n         throws SAXException {\n         String val = attrs.getValue(\"fetch\");\n-        if (val == null) {\n-            fmd.setInDefaultFetchGroup(true);\n-        } else {\n-            fmd.setInDefaultFetchGroup(\"EAGER\".equals(val));\n-        }\n+        boolean dfg = (val != null && val.equals(\"LAZY\")) ? false : true;\n+        \n+        // We need to toggle the DFG explicit flag here because this is used for an optimization when selecting an\n+        // Entity with lazy fields. \n+        fmd.setDefaultFetchGroupExplicit(true);\n+        fmd.setInDefaultFetchGroup(dfg);\n+        fmd.setDefaultFetchGroupExplicit(false);\n+        \n         val = attrs.getValue(\"target-entity\");\n         if (val != null)\n             fmd.setTypeOverride(AnnotationPersistenceMetaDataParser.toOverrideType(classForName(val)));"}]}

