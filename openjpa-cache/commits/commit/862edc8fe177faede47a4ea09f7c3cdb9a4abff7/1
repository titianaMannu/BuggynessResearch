{"sha":"862edc8fe177faede47a4ea09f7c3cdb9a4abff7","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg2MmVkYzhmZTE3N2ZhZWRlNDdhNGVhMDlmN2MzY2RiOWE0YWJmZjc=","commit":{"author":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2009-05-13T22:54:32Z"},"committer":{"name":"David Ezzio","email":"dezzio@apache.org","date":"2009-05-13T22:54:32Z"},"message":"OpenJPA-1051: Fixed MappingDefaultsImpl to avoid column name duplications when long column names are supplied for a database that accepts only shorter names.  Changes submitted for Ravi Palacherla.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@774580 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"afdf1476b29bebf0f4efe44186a1615956806f4a","url":"https://api.github.com/repos/apache/openjpa/git/trees/afdf1476b29bebf0f4efe44186a1615956806f4a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/862edc8fe177faede47a4ea09f7c3cdb9a4abff7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/862edc8fe177faede47a4ea09f7c3cdb9a4abff7","html_url":"https://github.com/apache/openjpa/commit/862edc8fe177faede47a4ea09f7c3cdb9a4abff7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/862edc8fe177faede47a4ea09f7c3cdb9a4abff7/comments","author":null,"committer":null,"parents":[{"sha":"f81e627b27627374ea9574c6811d51645ba7428a","url":"https://api.github.com/repos/apache/openjpa/commits/f81e627b27627374ea9574c6811d51645ba7428a","html_url":"https://github.com/apache/openjpa/commit/f81e627b27627374ea9574c6811d51645ba7428a"}],"stats":{"total":119,"additions":113,"deletions":6},"files":[{"sha":"5624308e77aa779e3af40b8d47f5ce30b3409958","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/862edc8fe177faede47a4ea09f7c3cdb9a4abff7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","raw_url":"https://github.com/apache/openjpa/raw/862edc8fe177faede47a4ea09f7c3cdb9a4abff7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java?ref=862edc8fe177faede47a4ea09f7c3cdb9a4abff7","patch":"@@ -539,7 +539,9 @@ public void populateDataStoreIdColumns(ClassMapping cls, Table table,\n             else if (_dsIdName != null)\n                 cols[i].setName(_dsIdName + i);\n             correctName(table, cols[i]);\n+            table.addSubColumn(cols[i].getName());\n         }\n+        table.resetSubColumns();\n     }\n \n     /**\n@@ -582,7 +584,9 @@ else if (_versName != null) {\n             } else if (_versName != null)\n                 cols[i].setName(_versName + i);\n             correctName(table, cols[i]);\n+            table.addSubColumn(cols[i].getName());\n         }\n+        table.resetSubColumns();\n     }\n \n     public void populateColumns(Discriminator disc, Table table,\n@@ -593,7 +597,9 @@ public void populateColumns(Discriminator disc, Table table,\n             else if (_discName != null)\n                 cols[i].setName(_discName + i);\n             correctName(table, cols[i]);\n+            table.addSubColumn(cols[i].getName());\n         }\n+        table.resetSubColumns();\n     }\n \n     public void populateJoinColumn(ClassMapping cm, Table local, Table foreign,\n@@ -618,8 +624,11 @@ else if (target instanceof Column)\n \n     public void populateColumns(ValueMapping vm, String name, Table table,\n         Column[] cols) {\n-        for (int i = 0; i < cols.length; i++)\n+        for (int i = 0; i < cols.length; i++) {\n             correctName(table, cols[i]);\n+            table.addSubColumn(cols[i].getName());\n+        }\n+        table.resetSubColumns();\n     }\n \n     public boolean populateOrderColumns(FieldMapping fm, Table table,\n@@ -630,7 +639,9 @@ public boolean populateOrderColumns(FieldMapping fm, Table table,\n             else if (_orderName != null)\n                 cols[i].setName(_orderName + i);\n             correctName(table, cols[i]);\n+            table.addSubColumn(cols[i].getName());\n         }\n+        table.resetSubColumns();\n         return _orderLists && (JavaTypes.ARRAY == fm.getTypeCode()\n             || List.class.isAssignableFrom(fm.getType()));\n     }\n@@ -643,7 +654,9 @@ public boolean populateNullIndicatorColumns(ValueMapping vm, String name,\n             else if (_nullIndName != null)\n                 cols[i].setName(_nullIndName + i);\n             correctName(table, cols[i]);\n+            table.addSubColumn(cols[i].getName());\n         }\n+        table.resetSubColumns();\n         return _addNullInd;\n     }\n "},{"sha":"3f23c97f02cd861bf30615fb7b140bb01f982741","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java","status":"modified","additions":21,"deletions":1,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/862edc8fe177faede47a4ea09f7c3cdb9a4abff7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java","raw_url":"https://github.com/apache/openjpa/raw/862edc8fe177faede47a4ea09f7c3cdb9a4abff7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java?ref=862edc8fe177faede47a4ea09f7c3cdb9a4abff7","patch":"@@ -39,13 +39,17 @@\n \n     private Set _names = null;\n \n+    // an additional names Set for checking name duplication\n+    private Set _subNames = null;\n+\n     /**\n      * Return true if the given name is in use already.\n      */\n     public boolean isNameTaken(String name) {\n         if (name == null)\n             return true;\n-        return _names != null && _names.contains(name.toUpperCase());\n+        return (_names != null && _names.contains(name.toUpperCase())) ||\n+            (_subNames != null && _subNames.contains(name.toUpperCase()));\n     }\n \n     /**\n@@ -77,4 +81,20 @@ protected void removeName(String name) {\n         if (name != null && _names != null)\n             _names.remove(name.toUpperCase());\n     }\n+\n+    /**\n+    * Attempt to add the given name to the set.\n+    *\n+    * @param name the name to add\n+    */\n+    protected void addSubName(String name) {\n+        if (_subNames == null) {\n+            _subNames = new HashSet();\n+        }\n+        _subNames.add(name.toUpperCase());\n+    }\n+\n+    protected void resetSubNames() {\n+        _subNames = null;\n+    }\n }"},{"sha":"3068639a1fc4564bf4d61f5f1bae0f49a5a38575","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","status":"modified","additions":15,"deletions":4,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/862edc8fe177faede47a4ea09f7c3cdb9a4abff7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","raw_url":"https://github.com/apache/openjpa/raw/862edc8fe177faede47a4ea09f7c3cdb9a4abff7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java?ref=862edc8fe177faede47a4ea09f7c3cdb9a4abff7","patch":"@@ -255,8 +255,8 @@ public String getResourceName() {\n     }\n \n     public String[] getColumnNames() {\n-    \treturn _colMap == null ? new String[0] : \n-    \t\t(String[])_colMap.keySet().toArray(new String[_colMap.size()]);\n+        return _colMap == null ? new String[0] : \n+            (String[])_colMap.keySet().toArray(new String[_colMap.size()]);\n     }\n     \n     /**\n@@ -275,8 +275,8 @@ public Column getColumn(String name) {\n      * for dynamic table implementation.\n      */\n     public boolean containsColumn(String name) {\n-    \treturn name != null && _colMap != null \n-    \t\t&& _colMap.containsKey(name.toUpperCase());\n+        return name != null && _colMap != null \n+            && _colMap.containsKey(name.toUpperCase());\n     }\n \n     /**\n@@ -756,4 +756,15 @@ public int getColNumber() {\n     public void setColNumber(int colNum) {\n         _colNum = colNum;\n     }\n+\n+    /**\n+    * Add a column to the subNames set to avoid naming conflict.\n+    */\n+    public void addSubColumn(String name) {\n+        addSubName(name);\n+    }\n+\n+    public void resetSubColumns() {\n+        resetSubNames();\n+    }\n }"},{"sha":"86c1d805c65fc0b32e78030993dcd728ee6f2d4c","filename":"openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingDefaultsImpl.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/862edc8fe177faede47a4ea09f7c3cdb9a4abff7/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingDefaultsImpl.java","raw_url":"https://github.com/apache/openjpa/raw/862edc8fe177faede47a4ea09f7c3cdb9a4abff7/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingDefaultsImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingDefaultsImpl.java?ref=862edc8fe177faede47a4ea09f7c3cdb9a4abff7","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.jdbc.meta;\n+\n+import org.apache.openjpa.jdbc.schema.Table;\n+import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n+\n+import junit.framework.TestCase;\n+\n+public class TestMappingDefaultsImpl extends TestCase {\n+\n+    public void setUp() {\n+    }\n+\n+    /**\n+     * For databases that accept only short column names, test avoidance of \n+     * duplicate column names when populating the table with long column names.\n+     *\n+     * @author Hiroki Tateno\n+     */\n+    public void testPopulateWithLongColumnNames() {\n+        MappingDefaultsImpl mapping = new MappingDefaultsImpl();\n+        JDBCConfiguration conf = new JDBCConfigurationImpl(false, false);\n+        conf.setDBDictionary(\"oracle\");\n+        mapping.setConfiguration(conf);\n+        Table table = new Table(\"testtable\", null);\n+        Column[] cols = new Column[3];\n+        cols[0] = new\n+            Column(\"longnamelongnamelongnamelongnamelongnamelongname1\", null);\n+        cols[1] = new\n+            Column(\"longnamelongnamelongnamelongnamelongnamelongname2\", null);\n+        cols[2] = new\n+            Column(\"longnamelongnamelongnamelongnamelongnamelongname3\", null);\n+        MappingRepository mr = new MappingRepository();\n+        mr.setConfiguration(conf);\n+        Version version = new Version(new ClassMapping(String.class,mr));\n+        mapping.populateColumns(version, table, cols);\n+        assertFalse(\"column names are conflicted : \" + cols[0].getName(),\n+                cols[0].getName().equals(cols[1].getName()));\n+        assertFalse(\"column names are conflicted : \" + cols[0].getName(),\n+                cols[0].getName().equals(cols[2].getName()));\n+        assertFalse(\"column names are conflicted : \" + cols[1].getName(),\n+                cols[1].getName().equals(cols[2].getName()));\n+    }\n+}"}]}

