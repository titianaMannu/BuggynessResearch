{"sha":"8634acd32799725a1cc4ac52f5463df2e3a35f70","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg2MzRhY2QzMjc5OTcyNWExY2M0YWM1MmY1NDYzZGYyZTNhMzVmNzA=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-04-08T20:47:45Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-04-08T20:47:45Z"},"message":"OPENJPA-1604: Committing test changes. Code contributed by Pinaki Poddar and Rick Curtis\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@932105 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b1aad7121e66ae5119229f1f6c051ba07abb9d11","url":"https://api.github.com/repos/apache/openjpa/git/trees/b1aad7121e66ae5119229f1f6c051ba07abb9d11"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8634acd32799725a1cc4ac52f5463df2e3a35f70","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8634acd32799725a1cc4ac52f5463df2e3a35f70","html_url":"https://github.com/apache/openjpa/commit/8634acd32799725a1cc4ac52f5463df2e3a35f70","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8634acd32799725a1cc4ac52f5463df2e3a35f70/comments","author":null,"committer":null,"parents":[{"sha":"43988aba97d8a7f3309da10edda2e9e267da1c1d","url":"https://api.github.com/repos/apache/openjpa/commits/43988aba97d8a7f3309da10edda2e9e267da1c1d","html_url":"https://github.com/apache/openjpa/commit/43988aba97d8a7f3309da10edda2e9e267da1c1d"}],"stats":{"total":116,"additions":111,"deletions":5},"files":[{"sha":"a58ea2a32f8dad6600634963dbf470bdf8eeb553","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/LockEmployee.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/8634acd32799725a1cc4ac52f5463df2e3a35f70/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/LockEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/8634acd32799725a1cc4ac52f5463df2e3a35f70/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/LockEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/LockEmployee.java?ref=8634acd32799725a1cc4ac52f5463df2e3a35f70","patch":"@@ -25,14 +25,18 @@\n \n import javax.persistence.Entity;\n import javax.persistence.Id;\n+import javax.persistence.LockModeType;\n+import javax.persistence.NamedQueries;\n import javax.persistence.NamedQuery;\n import javax.persistence.Version;\n \n-@NamedQuery(\n-        name=\"findEmployeeById\"\n-        , query=\"SELECT c FROM LockEmployee c WHERE c.id = :id\"\n-        )\n-\n+@NamedQueries( {\n+    @NamedQuery(name = \"findEmployeeById\", \n+        query = \"SELECT c FROM LockEmployee c WHERE c.id = :id\"),\n+    @NamedQuery(name = \"findEmployeeByIdWithLock\", \n+        query = \"SELECT c FROM LockEmployee c WHERE c.id = :id\", lockMode = LockModeType.PESSIMISTIC_READ),\n+    @NamedQuery(name = \"findEmployeeByIdWithNoLock\", \n+        query = \"SELECT c FROM LockEmployee c WHERE c.id = :id\", lockMode = LockModeType.NONE) })\n @Entity\n public class LockEmployee implements Externalizable {\n "},{"sha":"c108abaccc4680246df4a22a336e00373aa0a076","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestNamedQueryLockMode.java","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/8634acd32799725a1cc4ac52f5463df2e3a35f70/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestNamedQueryLockMode.java","raw_url":"https://github.com/apache/openjpa/raw/8634acd32799725a1cc4ac52f5463df2e3a35f70/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestNamedQueryLockMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestNamedQueryLockMode.java?ref=8634acd32799725a1cc4ac52f5463df2e3a35f70","patch":"@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.lockmgr;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.TransactionRequiredException;\n+import org.apache.openjpa.persistence.test.AllowFailure;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+/**\n+ * Tests the lock mode on named query emits a FOR UPDATE clause in target SQL\n+ * query.\n+ * \n+ * \n+ */\n+public class TestNamedQueryLockMode extends SQLListenerTestCase {\n+    public void setUp() {\n+        super.setUp(CLEAR_TABLES, LockEmployee.class, \n+            \"openjpa.LockManager\", \"pessimistic\", \n+            \"openjpa.Optimistic\", \"false\"\n+            );\n+    }\n+\n+    public void testForUpdateClausePresentInNamedQueryWithLockMode() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        assertClausePresentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeByIdWithLock\").setParameter(\"id\", 0));\n+        em.getTransaction().rollback();\n+        em.getTransaction().begin();\n+        assertClausePresentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeByIdWithLock\").setParameter(\"id\", 0));\n+        em.getTransaction().rollback();\n+        em.getTransaction().begin();\n+        assertClausePresentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeByIdWithLock\").setParameter(\"id\", 0));\n+        em.getTransaction().rollback();\n+    }\n+\n+    @AllowFailure\n+    public void testNamedQueryWithLockModeMustExecuteInTransaction() {\n+        EntityManager em = emf.createEntityManager();\n+        // execute without a transaction\n+         try {\n+         em.createNamedQuery(\"findEmployeeByIdWithLock\").setParameter(\"id\",\n+         0).getResultList();\n+         fail(\"Expected \" + TransactionRequiredException.class.getName());\n+         } catch (TransactionRequiredException e) {\n+         // Expected\n+         }\n+    }\n+\n+    public void testForUpdateClausePresentInQueryWithDefault() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        assertClausePresentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeById\").setParameter(\"id\", 0));\n+        assertClausePresentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeById\").setParameter(\"id\", 0));\n+        em.getTransaction().commit();\n+    }\n+\n+    @AllowFailure\n+    public void testForUpdateClauseAbsentInQueryWithExplictNoLock() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        assertClauseAbsentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeByIdWithNoLock\").setParameter(\"id\", 0));\n+        assertClauseAbsentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeByIdWithNoLock\").setParameter(\"id\", 0));\n+        em.getTransaction().commit();\n+    }\n+\n+    String getLastSQL() {\n+        String last = sql.get(getSQLCount() - 1);\n+        assertNotNull(\"No last sql found\", last);\n+        return last;\n+    }\n+\n+    void assertClausePresentInSQL(String clause, Query q) {\n+        q.getResultList();\n+        String last = getLastSQL();\n+        assertTrue(clause + \" is not present in \" + last, last.toUpperCase().indexOf(clause) != -1);\n+    }\n+\n+    void assertClauseAbsentInSQL(String clause, Query q) {\n+        q.getResultList();\n+        String last = getLastSQL();\n+        assertTrue(clause + \" is not absent in \" + last, last.toUpperCase().indexOf(clause) == -1);\n+    }\n+}"}]}

