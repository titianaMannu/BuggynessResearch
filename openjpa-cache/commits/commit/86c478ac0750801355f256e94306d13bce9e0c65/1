{"sha":"86c478ac0750801355f256e94306d13bce9e0c65","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg2YzQ3OGFjMDc1MDgwMTM1NWYyNTZlOTQzMDZkMTNiY2U5ZTBjNjU=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2014-09-19T17:59:00Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2014-09-19T17:59:00Z"},"message":"OPENJPA-2505 : Properly init MetaDataRepository when obtaining a reference in EntityManagerFactory.getMetaModel.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1626287 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5f81dfb65edc1efe53572f939fc5aebf6b26f231","url":"https://api.github.com/repos/apache/openjpa/git/trees/5f81dfb65edc1efe53572f939fc5aebf6b26f231"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/86c478ac0750801355f256e94306d13bce9e0c65","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/86c478ac0750801355f256e94306d13bce9e0c65","html_url":"https://github.com/apache/openjpa/commit/86c478ac0750801355f256e94306d13bce9e0c65","comments_url":"https://api.github.com/repos/apache/openjpa/commits/86c478ac0750801355f256e94306d13bce9e0c65/comments","author":null,"committer":null,"parents":[{"sha":"3eaaa0c4b23e649d9962e46547536c51c3f37254","url":"https://api.github.com/repos/apache/openjpa/commits/3eaaa0c4b23e649d9962e46547536c51c3f37254","html_url":"https://github.com/apache/openjpa/commit/3eaaa0c4b23e649d9962e46547536c51c3f37254"}],"stats":{"total":300,"additions":298,"deletions":2},"files":[{"sha":"6383d0f5f02665e5e50e17405baafd97b01e23cf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/init/AddressEntity.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/86c478ac0750801355f256e94306d13bce9e0c65/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/init/AddressEntity.java","raw_url":"https://github.com/apache/openjpa/raw/86c478ac0750801355f256e94306d13bce9e0c65/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/init/AddressEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/init/AddressEntity.java?ref=86c478ac0750801355f256e94306d13bce9e0c65","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.criteria.init;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"ADDRESSES\")\n+public class AddressEntity implements Serializable {\n+\tprivate static final long serialVersionUID = -6392378887188492506L;\n+\n+\t@EmbeddedId\n+    private AddressPk id;\n+\n+    @ManyToOne\n+    @JoinColumn(name = \"USERID\",\n+        nullable = false,\n+        insertable = false,\n+        updatable = false)\n+    private MyUserEntity user;\n+\n+    public AddressEntity() {\n+\n+    }\n+    public AddressEntity(AddressPk p) {\n+        id = p;\n+    }\n+    public MyUserEntity getUser() {\n+        return user;\n+    }\n+\n+\tpublic AddressPk getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(AddressPk id) {\n+\t\tthis.id = id;\n+\t}\n+}"},{"sha":"a0eadf58894dc89d83bfe650691604906846fa33","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/init/AddressPk.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/86c478ac0750801355f256e94306d13bce9e0c65/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/init/AddressPk.java","raw_url":"https://github.com/apache/openjpa/raw/86c478ac0750801355f256e94306d13bce9e0c65/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/init/AddressPk.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/init/AddressPk.java?ref=86c478ac0750801355f256e94306d13bce9e0c65","patch":"@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.criteria.init;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Embeddable;\n+\n+@Embeddable\n+public class AddressPk implements Serializable {\n+\tprivate static final long serialVersionUID = -1108496204649786405L;\n+\n+\t@Column(name = \"ADDRESS_NAME\", nullable = false, updatable = false)\n+    private String addressName;\n+\n+    @Column(name = \"USERID\", nullable = false, updatable = false)\n+    private Long userId;\n+\n+    public AddressPk(String addressName, Long userId) {\n+        this.addressName = addressName;\n+        this.userId = userId;\n+    }\n+\n+    public AddressPk() {\n+    }\n+\n+    @Override\n+\tpublic int hashCode() {\n+\t\tfinal int prime = 31;\n+\t\tint result = 1;\n+\t\tresult = prime * result\n+\t\t\t\t+ ((addressName == null) ? 0 : addressName.hashCode());\n+\t\tresult = prime * result + ((userId == null) ? 0 : userId.hashCode());\n+\t\treturn result;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (this == obj)\n+\t\t\treturn true;\n+\t\tif (obj == null)\n+\t\t\treturn false;\n+\t\tif (getClass() != obj.getClass())\n+\t\t\treturn false;\n+\t\tAddressPk other = (AddressPk) obj;\n+\t\tif (addressName == null) {\n+\t\t\tif (other.addressName != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!addressName.equals(other.addressName))\n+\t\t\treturn false;\n+\t\tif (userId == null) {\n+\t\t\tif (other.userId != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!userId.equals(other.userId))\n+\t\t\treturn false;\n+\t\treturn true;\n+\t}\n+\n+\tpublic String getAddressName() {\n+        return addressName;\n+    }\n+}"},{"sha":"0edb49f7ba5f198a52d406ec8926147872ff3b5a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/init/MyUserEntity.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/86c478ac0750801355f256e94306d13bce9e0c65/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/init/MyUserEntity.java","raw_url":"https://github.com/apache/openjpa/raw/86c478ac0750801355f256e94306d13bce9e0c65/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/init/MyUserEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/init/MyUserEntity.java?ref=86c478ac0750801355f256e94306d13bce9e0c65","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.criteria.init;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"MY_USERS\")\n+public class MyUserEntity {\n+\n+    @Id\n+    @Column(name = \"USERID\", nullable = false, updatable = false)\n+    private Long id;\n+\n+    @Column(name = \"USERNAME\")\n+    private String username;\n+\n+    @OneToMany(mappedBy = \"user\", fetch = FetchType.EAGER, cascade = CascadeType.ALL)\n+    private List<AddressEntity> addresses = new ArrayList<AddressEntity>();\n+\n+    public MyUserEntity() {\n+    }\n+\n+    public MyUserEntity(String uname, Long i) {\n+        username = uname;\n+        id = i;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public List<AddressEntity> getAddresses() {\n+        return addresses;\n+    }\n+\n+    public void setAddresses(List<AddressEntity> addresses) {\n+        this.addresses = addresses;\n+    }\n+\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    public void setUsername(String username) {\n+        this.username = username;\n+    }\n+}"},{"sha":"bcce0c79e935e341d3e3e516a0f0c7e994cd8909","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/init/TestCriteriaInitialization.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/86c478ac0750801355f256e94306d13bce9e0c65/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/init/TestCriteriaInitialization.java","raw_url":"https://github.com/apache/openjpa/raw/86c478ac0750801355f256e94306d13bce9e0c65/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/init/TestCriteriaInitialization.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/init/TestCriteriaInitialization.java?ref=86c478ac0750801355f256e94306d13bce9e0c65","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.criteria.init;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.TypedQuery;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.Root;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestCriteriaInitialization extends SingleEMFTestCase {\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp(CLEAR_TABLES, AddressEntity.class, AddressPk.class, MyUserEntity.class);\n+        EntityManager em = emf.createEntityManager();\n+        try {\n+            em.getTransaction().begin();\n+\n+            em.persist(new MyUserEntity(\"wayne\", Long.valueOf(1)));\n+            em.persist(new MyUserEntity(\"garth\", Long.valueOf(2)));\n+\n+            em.persist(new AddressEntity(new AddressPk(\"street_1\", Long.valueOf(1))));\n+            em.persist(new AddressEntity(new AddressPk(\"street_2\", Long.valueOf(2))));\n+\n+            em.getTransaction().commit();\n+        } finally {\n+            if (em.getTransaction().isActive()) {\n+                em.getTransaction().rollback();\n+            }\n+            em.close();\n+        }\n+    }\n+\n+    public void test() {\n+        emf.close();\n+\n+        EntityManagerFactory oldEmf = emf;\n+        emf = createEMF(AddressEntity.class, AddressPk.class, MyUserEntity.class);\n+        // ensure that we get a fresh emf\n+        assertNotEquals(oldEmf, emf);\n+        emf.getCriteriaBuilder();\n+        EntityManager em = emf.createEntityManager();\n+        try {\n+            CriteriaQuery<MyUserEntity> cq = em.getCriteriaBuilder().createQuery(MyUserEntity.class);\n+            Root<MyUserEntity> from = cq.from(MyUserEntity.class);\n+            CriteriaQuery<MyUserEntity> selectAll = cq.select(from);\n+            TypedQuery<MyUserEntity> query = em.createQuery(selectAll);\n+            List<MyUserEntity> res = query.getResultList();\n+            // Make sure we get two results\n+            assertEquals(2, res.size());\n+        } finally {\n+            em.close();\n+        }\n+    }\n+}"},{"sha":"43ceb4eadcab41095312165f3b02805f92fb4fe3","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/86c478ac0750801355f256e94306d13bce9e0c65/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/86c478ac0750801355f256e94306d13bce9e0c65/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java?ref=86c478ac0750801355f256e94306d13bce9e0c65","patch":"@@ -43,6 +43,7 @@\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Closeable;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.persistence.criteria.CriteriaBuilderImpl;\n import org.apache.openjpa.persistence.criteria.OpenJPACriteriaBuilder;\n import org.apache.openjpa.persistence.meta.MetamodelImpl;\n@@ -342,8 +343,10 @@ public OpenJPAQueryBuilder getDynamicQueryBuilder() {\n \n     public MetamodelImpl getMetamodel() {\n         if (_metaModel == null) {\n-            _metaModel = new MetamodelImpl(getConfiguration()\n-                .getMetaDataRepositoryInstance());\n+            MetaDataRepository mdr = getConfiguration().getMetaDataRepositoryInstance();\n+            mdr.setValidate(MetaDataRepository.VALIDATE_RUNTIME, true);\n+            mdr.setResolve(MetaDataRepository.MODE_MAPPING_INIT, true);\n+            _metaModel = new MetamodelImpl(mdr);\n         }\n         return _metaModel;\n     }"}]}

