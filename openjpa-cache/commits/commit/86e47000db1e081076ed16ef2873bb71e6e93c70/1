{"sha":"86e47000db1e081076ed16ef2873bb71e6e93c70","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg2ZTQ3MDAwZGIxZTA4MTA3NmVkMTZlZjI4NzNiYjcxZTZlOTNjNzA=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-07T23:12:56Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-07T23:12:56Z"},"message":"OPENJPA-86\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@563697 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"54435765252246f050b32d5a0c6163cf11008962","url":"https://api.github.com/repos/apache/openjpa/git/trees/54435765252246f050b32d5a0c6163cf11008962"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/86e47000db1e081076ed16ef2873bb71e6e93c70","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/86e47000db1e081076ed16ef2873bb71e6e93c70","html_url":"https://github.com/apache/openjpa/commit/86e47000db1e081076ed16ef2873bb71e6e93c70","comments_url":"https://api.github.com/repos/apache/openjpa/commits/86e47000db1e081076ed16ef2873bb71e6e93c70/comments","author":null,"committer":null,"parents":[{"sha":"d260d34d69be456f78f195fc2fb075dcfa2aa4fb","url":"https://api.github.com/repos/apache/openjpa/commits/d260d34d69be456f78f195fc2fb075dcfa2aa4fb","html_url":"https://github.com/apache/openjpa/commit/d260d34d69be456f78f195fc2fb075dcfa2aa4fb"}],"stats":{"total":66,"additions":43,"deletions":23},"files":[{"sha":"4e9d47707c688dc21836c564620ccac01cbf6e7f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/SimpleXmlEntity.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/86e47000db1e081076ed16ef2873bb71e6e93c70/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/SimpleXmlEntity.java","raw_url":"https://github.com/apache/openjpa/raw/86e47000db1e081076ed16ef2873bb71e6e93c70/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/SimpleXmlEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/SimpleXmlEntity.java?ref=86e47000db1e081076ed16ef2873bb71e6e93c70","patch":"@@ -20,10 +20,14 @@\n \n public class SimpleXmlEntity {\n \n-    private long id;\n+    private String id;\n     private int version;\n     private String stringField;\n \n+    public String getId() {\n+        return id;\n+    }\n+\n     public String getStringField() {\n         return stringField;\n     }"},{"sha":"18a5f037416972339c3e473e6e93b4553076f75c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestSimpleXmlEntity.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/86e47000db1e081076ed16ef2873bb71e6e93c70/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestSimpleXmlEntity.java","raw_url":"https://github.com/apache/openjpa/raw/86e47000db1e081076ed16ef2873bb71e6e93c70/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestSimpleXmlEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestSimpleXmlEntity.java?ref=86e47000db1e081076ed16ef2873bb71e6e93c70","patch":"@@ -28,6 +28,21 @@ public void setUp() {\n         setUp(SimpleXmlEntity.class);\n     }\n \n+    public void testId() {\n+        em.getTransaction().begin();\n+        SimpleXmlEntity e = new SimpleXmlEntity();\n+        em.persist(e);\n+        em.flush();\n+        assertNotNull(e.getId());\n+        try {\n+            Integer.parseInt(e.getId());\n+            fail(\"uuid-based id should not be an integer; was \" + e.getId());\n+        } catch (NumberFormatException nfe) {\n+            // expected\n+        }\n+        em.getTransaction().rollback();\n+    }\n+\n     public void testNamedQueryInXmlNamedEntity() {\n         em.createNamedQuery(\"SimpleXml.findAll\").getResultList();\n     }"},{"sha":"962b1c5eaae42dee66e580b7da1113b532d5ea0c","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/orm.xml","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/86e47000db1e081076ed16ef2873bb71e6e93c70/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/orm.xml","raw_url":"https://github.com/apache/openjpa/raw/86e47000db1e081076ed16ef2873bb71e6e93c70/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/orm.xml?ref=86e47000db1e081076ed16ef2873bb71e6e93c70","patch":"@@ -32,7 +32,9 @@\n             <query>select o from SimpleXmlEntity o</query>\n         </named-query>\n         <attributes>\n-            <id name=\"id\"/>\n+            <id name=\"id\">\n+                <generated-value generator=\"uuid-hex\"/>\n+            </id>\n             <basic name=\"stringField\"/>\n             <version name=\"version\"/>\n         </attributes>"},{"sha":"b23e83cb3eb5cb67eef5c9e23493f5f08782f062","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":15,"deletions":6,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/86e47000db1e081076ed16ef2873bb71e6e93c70/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/86e47000db1e081076ed16ef2873bb71e6e93c70/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=86e47000db1e081076ed16ef2873bb71e6e93c70","patch":"@@ -1110,21 +1110,30 @@ else if (ro.value() == UpdateAction.IGNORE)\n      * Sets value generation information for the given field.\n      */\n     private void parseGeneratedValue(FieldMetaData fmd, GeneratedValue gen) {\n-        int strat = getGeneratedValueStrategy(fmd, gen.strategy(),\n-            gen.generator());\n+        GenerationType strategy = gen.strategy();\n+        String generator = gen.generator();\n+        parseGeneratedValue(fmd, strategy, generator);\n+    }\n+\n+    /**\n+     * Sets value generation information for the given field.\n+     */\n+    static void parseGeneratedValue(FieldMetaData fmd, GenerationType strategy,\n+        String generator) {\n+        int strat = getGeneratedValueStrategy(fmd, strategy, generator);\n         if (strat != -1)\n             fmd.setValueStrategy(strat);\n         else {\n-            switch (gen.strategy()) {\n+            switch (strategy) {\n                 case TABLE:\n                 case SEQUENCE:\n                     // technically we should have separate system table and\n                     // sequence generators, but it's easier to just rely on\n                     // the system org.apache.openjpa.Sequence setting for both\n-                    if (StringUtils.isEmpty(gen.generator()))\n+                    if (StringUtils.isEmpty(generator))\n                         fmd.setValueSequenceName(SequenceMetaData.NAME_SYSTEM);\n                     else\n-                        fmd.setValueSequenceName(gen.generator());\n+                        fmd.setValueSequenceName(generator);\n                     break;\n                 case AUTO:\n                     fmd.setValueSequenceName(SequenceMetaData.NAME_SYSTEM);\n@@ -1133,7 +1142,7 @@ private void parseGeneratedValue(FieldMetaData fmd, GeneratedValue gen) {\n                     fmd.setValueStrategy(ValueStrategies.AUTOASSIGN);\n                     break;\n                 default:\n-                    throw new UnsupportedException(gen.strategy().toString());\n+                    throw new UnsupportedException(strategy.toString());\n             }\n         }\n     }"},{"sha":"ff5e18b29cc3276095350ad4d846065b844e47cd","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":5,"deletions":15,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/86e47000db1e081076ed16ef2873bb71e6e93c70/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/86e47000db1e081076ed16ef2873bb71e6e93c70/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=86e47000db1e081076ed16ef2873bb71e6e93c70","patch":"@@ -31,6 +31,7 @@\n import java.util.Set;\n import java.util.Stack;\n import javax.persistence.CascadeType;\n+import javax.persistence.GenerationType;\n import static javax.persistence.CascadeType.*;\n \n import org.apache.commons.lang.StringUtils;\n@@ -62,12 +63,9 @@\n import org.apache.openjpa.meta.QueryMetaData;\n import org.apache.openjpa.meta.SequenceMetaData;\n import org.apache.openjpa.meta.ValueMetaData;\n-import org.apache.openjpa.meta.ValueStrategies;\n import static org.apache.openjpa.persistence.MetaDataTag.*;\n import static org.apache.openjpa.persistence.PersistenceStrategy.*;\n import org.apache.openjpa.util.ImplHelper;\n-import org.apache.openjpa.util.UnsupportedException;\n-import serp.util.Strings;\n \n /**\n  * Custom SAX parser used by the system to quickly parse persistence i\n@@ -992,20 +990,12 @@ protected boolean startGeneratedValue(Attributes attrs)\n \n         String strategy = attrs.getValue(\"strategy\");\n         String generator = attrs.getValue(\"generator\");\n+        GenerationType type = StringUtils.isEmpty(strategy)\n+            ? GenerationType.AUTO : GenerationType.valueOf(strategy);\n \n-        // TODO UUID_HEX / UUID_STRING\n         FieldMetaData fmd = (FieldMetaData) currentElement();\n-        if (StringUtils.isEmpty(strategy) || \"AUTO\".equals(strategy))\n-            fmd.setValueSequenceName(SequenceMetaData.NAME_SYSTEM);\n-        else if (\"TABLE\".equals(strategy) || \"SEQUENCE\".equals(strategy)) {\n-            if (StringUtils.isEmpty(generator))\n-                fmd.setValueSequenceName(SequenceMetaData.NAME_SYSTEM);\n-            else\n-                fmd.setValueSequenceName(generator);\n-        } else if (\"IDENTITY\".equals(strategy))\n-            fmd.setValueStrategy(ValueStrategies.AUTOASSIGN);\n-        else\n-            throw new UnsupportedException(strategy);\n+        AnnotationPersistenceMetaDataParser.parseGeneratedValue(fmd, type,\n+            generator);\n         return true;\n     }\n "}]}

