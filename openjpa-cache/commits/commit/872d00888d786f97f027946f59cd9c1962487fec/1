{"sha":"872d00888d786f97f027946f59cd9c1962487fec","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg3MmQwMDg4OGQ3ODZmOTdmMDI3OTQ2ZjU5Y2Q5YzE5NjI0ODdmZWM=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-07-31T15:43:39Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-07-31T15:43:39Z"},"message":"OPENJPA-304.  Changes to DepthFirstAnalysis and associated classes and testcases to resolve IBM JDK and Sun JDK differences.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@561363 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"80edc57dbc3718d17c2414c7feb5fa1f6d53fb10","url":"https://api.github.com/repos/apache/openjpa/git/trees/80edc57dbc3718d17c2414c7feb5fa1f6d53fb10"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/872d00888d786f97f027946f59cd9c1962487fec","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/872d00888d786f97f027946f59cd9c1962487fec","html_url":"https://github.com/apache/openjpa/commit/872d00888d786f97f027946f59cd9c1962487fec","comments_url":"https://api.github.com/repos/apache/openjpa/commits/872d00888d786f97f027946f59cd9c1962487fec/comments","author":null,"committer":null,"parents":[{"sha":"2bc4c4a5526bcf90de8a552f4feaf389a603af9f","url":"https://api.github.com/repos/apache/openjpa/commits/2bc4c4a5526bcf90de8a552f4feaf389a603af9f","html_url":"https://github.com/apache/openjpa/commit/2bc4c4a5526bcf90de8a552f4feaf389a603af9f"}],"stats":{"total":73,"additions":38,"deletions":35},"files":[{"sha":"0f4693b7da474ddff4439c1213684c4f5d23afac","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/DepthFirstAnalysis.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/872d00888d786f97f027946f59cd9c1962487fec/openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/DepthFirstAnalysis.java","raw_url":"https://github.com/apache/openjpa/raw/872d00888d786f97f027946f59cd9c1962487fec/openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/DepthFirstAnalysis.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/DepthFirstAnalysis.java?ref=872d00888d786f97f027946f59cd9c1962487fec","patch":"@@ -216,13 +216,13 @@ private List cycleForBackEdge(Edge edge, List path) {\n         \r\n         List cycle;\r\n         int pos = 0;\r\n-        if (path != null && edge.getFrom() != edge.getTo()) {\r\n+        if (path != null && !edge.getFrom().equals(edge.getTo())) {\r\n             // Not a single edge loop\r\n             pos = findNodeInPath(edge.getTo(), path);\r\n             assert (pos >= 0): _loc.get(\"node-not-on-path\", edge, edge.getTo()); \r\n         } else {\r\n-            assert (edge.getFrom() == edge.getTo()): \r\n-                    _loc.get(\"edge-no-loop\", edge).getMessage();\r\n+            assert (edge.getFrom().equals(edge.getTo())): \r\n+                _loc.get(\"edge-no-loop\", edge).getMessage();\r\n             path = null;\r\n         }\r\n         cycle = buildCycle(edge, path, pos); \r\n@@ -249,8 +249,8 @@ private boolean cycleForForwardEdge(Graph graph, Object node,\n             Edge edge = (Edge) itr.next();\r\n             Object other = edge.getOther(node);\r\n             // Single edge loops are ignored\r\n-            if (node != other) {\r\n-                if (other == cycleTo) {\r\n+            if (!node.equals(other)) {\r\n+                if (other.equals(cycleTo)) {\r\n                     // Cycle complete\r\n                     path.add(edge);\r\n                     found = true;\r\n@@ -279,7 +279,7 @@ private int findNodeInPath(Object node, List path) {\n         int pos = -1;\r\n         if (path != null) {\r\n             for (int i = 0; i < path.size(); i++) {\r\n-                if (((Edge)path.get(i)).getFrom() == node) {\r\n+                if (((Edge)path.get(i)).getFrom().equals(node)) {\r\n                     pos = i;\r\n                 }\r\n             }\r"},{"sha":"94522a8ca25d73cce881aa59cdb0f6bfce7faf14","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/Edge.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/872d00888d786f97f027946f59cd9c1962487fec/openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/Edge.java","raw_url":"https://github.com/apache/openjpa/raw/872d00888d786f97f027946f59cd9c1962487fec/openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/Edge.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/Edge.java?ref=872d00888d786f97f027946f59cd9c1962487fec","patch":"@@ -106,9 +106,9 @@ public Object getTo() {\n      * given node is not part of this edge.\r\n      */\r\n     public Object getOther(Object node) {\r\n-        if (_to == node)\r\n+        if (_to.equals(node))\r\n             return _from;\r\n-        if (_from == node)\r\n+        if (_from.equals(node))\r\n             return _to;\r\n         return null;\r\n     }\r\n@@ -118,7 +118,7 @@ public Object getOther(Object node) {\n      * this method returns true if either side is equal to the given node.\r\n      */\r\n     public boolean isTo(Object node) {\r\n-        return _to == node || (!_directed && _from == node);\r\n+        return _to.equals(node) || (!_directed && _from.equals(node));\r\n     }\r\n \r\n     /**\r\n@@ -127,7 +127,7 @@ public boolean isTo(Object node) {\n      * node.\r\n      */\r\n     public boolean isFrom(Object node) {\r\n-        return _from == node || (!_directed && _to == node);\r\n+        return _from.equals(node) || (!_directed && _to.equals(node));\r\n     }\r\n \r\n     /**\r"},{"sha":"6077e6d0b29b7f41f723f9850d2db5de53b251e1","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/Graph.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/872d00888d786f97f027946f59cd9c1962487fec/openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/Graph.java","raw_url":"https://github.com/apache/openjpa/raw/872d00888d786f97f027946f59cd9c1962487fec/openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/Graph.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/graph/Graph.java?ref=872d00888d786f97f027946f59cd9c1962487fec","patch":"@@ -21,9 +21,9 @@\n import java.util.ArrayList;\r\n import java.util.Collection;\r\n import java.util.Collections;\r\n-import java.util.HashMap;\r\n import java.util.HashSet;\r\n import java.util.Iterator;\r\n+import java.util.LinkedHashMap;\r\n import java.util.Map;\r\n \r\n /**\r\n@@ -36,8 +36,11 @@\n  */\r\n public class Graph {\r\n \r\n-    // map each node to list of edges from that node\r\n-    private final Map _nodes = new HashMap();\r\n+    /**\r\n+     * Map each node to list of edges from that node.\r\n+     * Using a LinkedHashMap to ensure order of iterator processing.\r\n+     */ \r\n+    private final Map _nodes = new LinkedHashMap();\r\n \r\n     /**\r\n      * Clear the graph.\r"},{"sha":"40c663cb1ef0c527685f2bf1af0195368c6496b2","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/graph/TestDepthFirstAnalysis.java","status":"modified","additions":22,"deletions":22,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/872d00888d786f97f027946f59cd9c1962487fec/openjpa-lib/src/test/java/org/apache/openjpa/lib/graph/TestDepthFirstAnalysis.java","raw_url":"https://github.com/apache/openjpa/raw/872d00888d786f97f027946f59cd9c1962487fec/openjpa-lib/src/test/java/org/apache/openjpa/lib/graph/TestDepthFirstAnalysis.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/graph/TestDepthFirstAnalysis.java?ref=872d00888d786f97f027946f59cd9c1962487fec","patch":"@@ -58,23 +58,23 @@ public void setUpGraph1() {\n \r\n     public void setUpGraph2() {\r\n         Graph graph = new Graph();\r\n-        Integer node1 = new Integer(5);\r\n-        Integer node2 = new Integer(4);\r\n+        Integer node1 = new Integer(1);\r\n+        Integer node2 = new Integer(2);\r\n         Integer node3 = new Integer(3);\r\n-        Integer node4 = new Integer(2);\r\n-        Integer node5 = new Integer(1);\r\n-        graph.addNode(node1);\r\n-        graph.addNode(node2);\r\n-        graph.addNode(node3);\r\n-        graph.addNode(node4);\r\n+        Integer node4 = new Integer(4);\r\n+        Integer node5 = new Integer(5);\r\n+        graph.addNode(node2);  // has to be first node for testcase\r\n         graph.addNode(node5);\r\n-        graph.addEdge(new Edge(node1, node2, true));\r\n-        graph.addEdge(new Edge(node2, node3, true));\r\n+        graph.addNode(node4);\r\n+        graph.addNode(node3);\r\n+        graph.addNode(node1);\r\n+        graph.addEdge(new Edge(node5, node4, true));\r\n+        graph.addEdge(new Edge(node4, node3, true));\r\n         graph.addEdge(new Edge(node3, node3, true));\r\n-        graph.addEdge(new Edge(node3, node4, true));\r\n-        graph.addEdge(new Edge(node4, node1, true));\r\n-        graph.addEdge(new Edge(node4, node2, true));\r\n-        graph.addEdge(new Edge(node5, node2, true));\r\n+        graph.addEdge(new Edge(node3, node2, true));\r\n+        graph.addEdge(new Edge(node2, node5, true));\r\n+        graph.addEdge(new Edge(node2, node4, true));\r\n+        graph.addEdge(new Edge(node1, node4, true));\r\n         _dfa = new DepthFirstAnalysis(graph);\r\n     }\r\n \r\n@@ -97,8 +97,8 @@ public void testEdgeTyping() {\n         Iterator itr = edges.iterator();\r\n         Edge edge0 = (Edge) itr.next();\r\n         Edge edge1 = (Edge) itr.next();\r\n-        assertTrue((edge0.getTo() == edge0.getFrom())\r\n-            || edge1.getTo() == edge1.getFrom());\r\n+        assertTrue((edge0.getTo().equals(edge0.getFrom()))\r\n+                || edge1.getTo().equals(edge1.getFrom()));\r\n     }\r\n \r\n     public void testBackEdges() {\r\n@@ -108,17 +108,17 @@ public void testBackEdges() {\n         Iterator itr = edges.iterator();\r\n         Edge edge0 = (Edge) itr.next();\r\n         Edge edge1 = (Edge) itr.next();\r\n-        if (edge0.getTo() == edge0.getFrom()) {\r\n+        if (edge0.getTo().equals(edge0.getFrom())) {\r\n             assertTrue(edge0.getCycle() != null && edge0.getCycle().size() == 1);\r\n             List cycle = edge1.getCycle();\r\n             assertTrue(cycle != null && cycle.size() == 4);\r\n-            assertTrue(((Edge)cycle.get(0)).getFrom() == ((Edge)cycle.get(3)).getTo());\r\n-        } else if (edge1.getTo() == edge1.getFrom()) {\r\n+            assertTrue(((Edge)cycle.get(0)).getFrom().equals(((Edge)cycle.get(3)).getTo()));\r\n+        } else if (edge1.getTo().equals(edge1.getFrom())) {\r\n             assertTrue(edge1.getCycle() != null && edge1.getCycle().size() == 1);            \r\n             assertTrue(edge1 == edge1.getCycle());\r\n             List cycle = edge0.getCycle();\r\n             assertTrue(cycle != null && cycle.size() == 4);\r\n-            assertTrue(((Edge)cycle.get(0)).getFrom() == ((Edge)cycle.get(3)).getTo());\r\n+            assertTrue(((Edge)cycle.get(0)).getFrom().equals(((Edge)cycle.get(3)).getTo()));\r\n         } else {\r\n             // should not happen\r\n             assertFalse(true);\r\n@@ -135,11 +135,11 @@ public void testForwardEdges() {\n         if (edge0.getCycle() == null) {\r\n             List cycle = edge1.getCycle();\r\n             assertTrue(cycle != null && cycle.size() == 3);\r\n-            assertTrue(((Edge)cycle.get(0)).getFrom() == ((Edge)cycle.get(2)).getTo());\r\n+            assertTrue(((Edge)cycle.get(0)).getFrom().equals(((Edge)cycle.get(2)).getTo()));\r\n         } else if (edge1.getCycle() == null) {\r\n             List cycle = edge0.getCycle();\r\n             assertTrue(cycle != null && cycle.size() == 3);\r\n-            assertTrue(((Edge)cycle.get(0)).getFrom() == ((Edge)cycle.get(2)).getTo());\r\n+            assertTrue(((Edge)cycle.get(0)).getFrom().equals(((Edge)cycle.get(2)).getTo()));\r\n         } else {\r\n             // should not happen\r\n             assertFalse(true);\r"}]}

