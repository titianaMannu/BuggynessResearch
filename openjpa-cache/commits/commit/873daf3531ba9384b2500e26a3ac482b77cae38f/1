{"sha":"873daf3531ba9384b2500e26a3ac482b77cae38f","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg3M2RhZjM1MzFiYTkzODRiMjUwMGUyNmEzYWM0ODJiNzdjYWUzOGY=","commit":{"author":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2014-03-23T02:38:08Z"},"committer":{"name":"Heath Thomann","email":"hthomann@apache.org","date":"2014-03-23T02:38:08Z"},"message":"OPENJPA-2475: A query with LEFT FETCH JOIN returns incorrect results - applied fix to trunk.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1580432 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6b47c078da367ae11984f3495bab585c972d2ea9","url":"https://api.github.com/repos/apache/openjpa/git/trees/6b47c078da367ae11984f3495bab585c972d2ea9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/873daf3531ba9384b2500e26a3ac482b77cae38f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/873daf3531ba9384b2500e26a3ac482b77cae38f","html_url":"https://github.com/apache/openjpa/commit/873daf3531ba9384b2500e26a3ac482b77cae38f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/873daf3531ba9384b2500e26a3ac482b77cae38f/comments","author":null,"committer":null,"parents":[{"sha":"fa027f605bffe4daff3aa3d8c18805539fe771ec","url":"https://api.github.com/repos/apache/openjpa/commits/fa027f605bffe4daff3aa3d8c18805539fe771ec","html_url":"https://github.com/apache/openjpa/commit/fa027f605bffe4daff3aa3d8c18805539fe771ec"}],"stats":{"total":324,"additions":314,"deletions":10},"files":[{"sha":"8fc450197e86d3edc19c30075ad8d3034c07d457","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","status":"modified","additions":1,"deletions":9,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/873daf3531ba9384b2500e26a3ac482b77cae38f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/873daf3531ba9384b2500e26a3ac482b77cae38f/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java?ref=873daf3531ba9384b2500e26a3ac482b77cae38f","patch":"@@ -221,11 +221,7 @@ else if (!sel.isDistinct())\n                 joins = sel.outer(joins);\n             if (!selectOid) {\n                 Column[] refs = getJoinForeignKey(elem).getColumns();\n-                if (requiresOrderBy()) {\n-                    sel.orderBy(refs, true, joins, true);\n-                } else {\n-                    sel.select(refs, joins);\n-                }\n+                sel.orderBy(refs, true, joins, true);\n             }\n             field.orderLocal(sel, elem, joins);\n         }\n@@ -630,10 +626,6 @@ public ForeignKey getJoinForeignKey() {\n         return getJoinForeignKey(getDefaultElementMapping(false));\n     }\n     \n-    boolean requiresOrderBy() {\n-    \treturn List.class.isAssignableFrom(field.getProxyType());\n-    }\n-    \n     /**\n      * Gets the identity value of the given instance that is suitable to join to the given foreign key.\n      * The special case of the foreign key being a relation identifier will encode the value. "},{"sha":"0e41e49bc3b76c3a6b51f0bb66554212f4cf598d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMultipleLevelDerivedIdentity1.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/873daf3531ba9384b2500e26a3ac482b77cae38f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMultipleLevelDerivedIdentity1.java","raw_url":"https://github.com/apache/openjpa/raw/873daf3531ba9384b2500e26a3ac482b77cae38f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMultipleLevelDerivedIdentity1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMultipleLevelDerivedIdentity1.java?ref=873daf3531ba9384b2500e26a3ac482b77cae38f","patch":"@@ -39,7 +39,16 @@\n \tprivate static String BOOK_NAME    = \"foo\";\n \tprivate static int    NUM_PAGES    = 3;\n \tprivate static int    NUM_LINES    = 20;\n+\n     public void setUp() throws Exception {\n+        setSupportedDatabases(org.apache.openjpa.jdbc.sql.DerbyDictionary.class,\n+            org.apache.openjpa.jdbc.sql.DB2Dictionary.class, \n+            org.apache.openjpa.jdbc.sql.OracleDictionary.class);\n+        \n+        if (isTestsDisabled()) {\n+            return;\n+        }\n+        \n         super.setUp(DROP_TABLES, Library1.class, Book1.class, Page1.class,\n             BookId1.class, PageId1.class, Line1.class, LineId1.class,\n             \"openjpa.RuntimeUnenhancedClasses\", \"unsupported\");\n@@ -215,7 +224,7 @@ public void testOrderBy() {\n         EntityManager em = emf.createEntityManager();\n         Library1 lib = em.find(Library1.class, LIBRARY_NAME);\n         assertNotNull(lib);\n-        assertSQLFragnments(sql, \"ORDER BY t1.LIBRARY_NAME ASC, t1.BOOK_NAME ASC\");\n+        assertSQLFragnments(sql, \"ORDER BY\", \"t1.LIBRARY_NAME ASC, t1.BOOK_NAME ASC\");\n         em.close();\n     }\n     "},{"sha":"1e04fb1b3e30cf67ccbd32d0df48562097a22deb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/leftfetch/DepartmentTest.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/873daf3531ba9384b2500e26a3ac482b77cae38f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/leftfetch/DepartmentTest.java","raw_url":"https://github.com/apache/openjpa/raw/873daf3531ba9384b2500e26a3ac482b77cae38f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/leftfetch/DepartmentTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/leftfetch/DepartmentTest.java?ref=873daf3531ba9384b2500e26a3ac482b77cae38f","patch":"@@ -0,0 +1,64 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jpql.joins.leftfetch;\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.OneToMany;\r\n+import javax.persistence.OrderBy;\r\n+\r\n+@Entity\r\n+public class DepartmentTest{\r\n+\t\r\n+    @Id\r\n+    private String primaryKey;\r\n+\r\n+    @OrderBy(\"name\")\r\n+    @OneToMany(mappedBy = \"departmentTest\")\r\n+\tprivate Set<PersonTest> persons = new HashSet<PersonTest>();\r\n+\r\n+\tprivate String name;\r\n+\t\r\n+\tpublic Set<PersonTest> getPersons() {\r\n+\t\treturn persons;\r\n+\t}\r\n+\r\n+\tpublic void setPersons(Set<PersonTest> persons) {\r\n+\t\tthis.persons = persons;\r\n+\t}\r\n+\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic String getPrimaryKey() {\r\n+\t\treturn this.primaryKey;\r\n+\t}\r\n+\r\n+\tpublic void setPrimaryKey(String primaryKey) {\r\n+\t\tthis.primaryKey = primaryKey;\r\n+\t}\r\n+}\r"},{"sha":"74392ccb6f35b272cbe52a76822906adedd9df99","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/leftfetch/PersonTest.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/873daf3531ba9384b2500e26a3ac482b77cae38f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/leftfetch/PersonTest.java","raw_url":"https://github.com/apache/openjpa/raw/873daf3531ba9384b2500e26a3ac482b77cae38f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/leftfetch/PersonTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/leftfetch/PersonTest.java?ref=873daf3531ba9384b2500e26a3ac482b77cae38f","patch":"@@ -0,0 +1,70 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jpql.joins.leftfetch;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToOne;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\r\n+\r\n+@Entity\r\n+public class PersonTest  {\r\n+\r\n+\t@Id\r\n+\tprivate String primaryKey;\r\n+\r\n+\t@ManyToOne\r\n+    @ForeignKey\r\n+\tprivate DepartmentTest departmentTest;\r\n+\t\r\n+    private String name;\r\n+    \r\n+\tpublic DepartmentTest getDepartmentTest() {\r\n+\t\treturn departmentTest;\r\n+\t}\r\n+\r\n+\tpublic void setDepartmentTest(DepartmentTest departmentTest) {\r\n+\t\tthis.departmentTest = departmentTest;\r\n+\t}\r\n+\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic String getPrimaryKey() {\r\n+\t\treturn this.primaryKey;\r\n+\t}\r\n+\r\n+\tpublic void setPrimaryKey(String primaryKey) {\r\n+\t\tthis.primaryKey = primaryKey;\r\n+\t}\r\n+\r\n+    @Override\r\n+    public String toString()\r\n+    {\r\n+        final StringBuilder sb = new StringBuilder();\r\n+        sb.append(this.getName()).append(\" - \").append(this.getPrimaryKey()).append(\" \");\r\n+        return sb.toString();\r\n+    }\r\n+}\r"},{"sha":"c20d9ad18a06b01b2f5bf56b0e26d1beaf6f7da3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/leftfetch/TestJoinLeftFetch.java","status":"added","additions":169,"deletions":0,"changes":169,"blob_url":"https://github.com/apache/openjpa/blob/873daf3531ba9384b2500e26a3ac482b77cae38f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/leftfetch/TestJoinLeftFetch.java","raw_url":"https://github.com/apache/openjpa/raw/873daf3531ba9384b2500e26a3ac482b77cae38f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/leftfetch/TestJoinLeftFetch.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/leftfetch/TestJoinLeftFetch.java?ref=873daf3531ba9384b2500e26a3ac482b77cae38f","patch":"@@ -0,0 +1,169 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jpql.joins.leftfetch;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+public class TestJoinLeftFetch extends SingleEMFTestCase {    \r\n+    \r\n+    public void setUp() {\r\n+        setUp(DROP_TABLES, DepartmentTest.class, PersonTest.class);\r\n+        createTestData();\r\n+    }    \r\n+    \r\n+    /*\r\n+     * This test fails (prior to OJ-2475) because the \r\n+     * DepartmentTests are not populated with the correct\r\n+     * number of PersonTests\r\n+     */\r\n+    public void testReadDepartmentsWithLeftJoinFetch() {\r\n+\r\n+        EntityManager em = emf.createEntityManager();\r\n+\r\n+        String qStrDIST = \"SELECT DISTINCT dept FROM DepartmentTest \"\r\n+            + \"dept LEFT JOIN FETCH dept.persons\";\r\n+        \r\n+        Query query = em.createQuery(qStrDIST);\r\n+        List<DepartmentTest> depts = query.getResultList();\r\n+        verifySize(depts);\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void verifySize(List<DepartmentTest> depts){\r\n+        for (DepartmentTest department : depts) {\r\n+            if (department.getPrimaryKey().equals(\"001\")) {           \r\n+//                System.out.println(\"Dept: \" + department.getName());\r\n+  //              Iterator i = department.getPersons().iterator();\r\n+    //            while (i.hasNext()){\r\n+      //              System.out.println(\"i.next() = \" + i.next());\r\n+        //        }\r\n+                assertEquals(\"Size should be 3\", 3, department.getPersons().size());\r\n+            }\r\n+            if (department.getPrimaryKey().equals(\"002\")) {           \r\n+//                System.out.println(\"Dept: \" + department.getName());\r\n+  //              Iterator i = department.getPersons().iterator();\r\n+    //            while (i.hasNext()){\r\n+      //              System.out.println(\"i.next() = \" + i.next());\r\n+        //        }\r\n+                assertEquals(\"Size should be 2\", 2, department.getPersons().size());\r\n+            }\r\n+        }\r\n+    }\r\n+    \r\n+    /*\r\n+     * This test works as expected.\r\n+     */\r\n+    public void testReadDepartmentsWithFetchPlan() {\r\n+\r\n+        EntityManager em = emf.createEntityManager();\r\n+\r\n+        OpenJPAQuery<DepartmentTest> query = OpenJPAPersistence.cast(em.createQuery(\" SELECT dept FROM \"\r\n+            + \" DepartmentTest dept \"));\r\n+        query.getFetchPlan().addField(DepartmentTest.class, \"persons\");\r\n+        \r\n+        verifySize(query.getResultList());\r\n+        \r\n+        em.close();\r\n+    }\r\n+\r\n+    /*\r\n+     * This test works as expected.\r\n+     */\r\n+    public void testReadDepartmentsWithLeftJoinFetchAndOrderBy() {\r\n+\r\n+        EntityManager em = emf.createEntityManager();\r\n+\r\n+        Query query = em.createQuery(\" SELECT dept FROM \" + \" DepartmentTest dept \"\r\n+            + \" LEFT JOIN FETCH dept.persons ORDER BY dept.primaryKey\");\r\n+        verifySize(query.getResultList());\r\n+        \r\n+        em.close();\r\n+    }\r\n+\r\n+    public void createTestData() {\r\n+        // NOTE: This test depends upon the the PersonTest\r\n+        // to be un-ordered w.r.t the DepartmentTest FK.\r\n+        // I've executed a flush after each entity creation \r\n+        // in an attempt that the FKs will not be ordered.  \r\n+        // @OrderBy is used in the DepartmentTest in order\r\n+        // to ensure things aren't orderd by the FK.\r\n+        \r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        \r\n+        DepartmentTest dt1 = new DepartmentTest();\r\n+        dt1.setPrimaryKey(\"001\");\r\n+        dt1.setName(\"Dept001\");\r\n+        em.persist(dt1);\r\n+                \r\n+        DepartmentTest dt2 = new DepartmentTest();\r\n+        dt2.setPrimaryKey(\"002\");\r\n+        dt2.setName(\"Dept002\");\r\n+        em.persist(dt2);  \r\n+        \r\n+        PersonTest pt = new PersonTest();\r\n+        pt.setPrimaryKey(\"1\");\r\n+        pt.setName(\"John\");\r\n+        pt.setDepartmentTest(dt1);\r\n+        em.persist(pt);\r\n+        em.flush();\r\n+\r\n+        pt = new PersonTest();\r\n+        pt.setPrimaryKey(\"2\");\r\n+        pt.setName(\"Mark\");\r\n+        pt.setDepartmentTest(dt1);\r\n+        em.persist(pt);\r\n+        em.flush();\r\n+        \r\n+        pt = new PersonTest();\r\n+        pt.setPrimaryKey(\"3\");\r\n+        pt.setName(\"Stuart\");\r\n+        pt.setDepartmentTest(dt2);\r\n+        em.persist(pt);\r\n+        em.flush();\r\n+        \r\n+        pt = new PersonTest();\r\n+        pt.setPrimaryKey(\"4\");\r\n+        pt.setName(\"Jim\");\r\n+        pt.setDepartmentTest(dt1);\r\n+        em.persist(pt);\r\n+        em.flush();\r\n+\r\n+        pt = new PersonTest();\r\n+        pt.setPrimaryKey(\"5\");\r\n+        pt.setName(\"Fred\");\r\n+        pt.setDepartmentTest(dt2);\r\n+        em.persist(pt);\r\n+        em.flush();\r\n+\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }    \r\n+}\r\n+\r\n+\r\n+\r\n+\r"}]}

