{"sha":"8785be46e71c65c4d87ab59203c17771d9faec26","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg3ODViZTQ2ZTcxYzY1YzRkODdhYjU5MjAzYzE3NzcxZDlmYWVjMjY=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-10-04T19:12:34Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-10-04T19:12:34Z"},"message":"Handle exceptions from transaction listeners appropriately. Allow user to\noverride default CallbackMode for both lifecycle and transaction listeners.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@452981 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"20b49ab8db8f9e61c796e61a8dcca4770ef23253","url":"https://api.github.com/repos/apache/openjpa/git/trees/20b49ab8db8f9e61c796e61a8dcca4770ef23253"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8785be46e71c65c4d87ab59203c17771d9faec26","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8785be46e71c65c4d87ab59203c17771d9faec26","html_url":"https://github.com/apache/openjpa/commit/8785be46e71c65c4d87ab59203c17771d9faec26","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8785be46e71c65c4d87ab59203c17771d9faec26/comments","author":null,"committer":null,"parents":[{"sha":"88acae75c16b0f9307377283fee34c0ad3980417","url":"https://api.github.com/repos/apache/openjpa/commits/88acae75c16b0f9307377283fee34c0ad3980417","html_url":"https://github.com/apache/openjpa/commit/88acae75c16b0f9307377283fee34c0ad3980417"}],"stats":{"total":308,"additions":231,"deletions":77},"files":[{"sha":"b8c8268710cae215b6afab7674038678b3643c14","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","status":"modified","additions":28,"deletions":21,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/8785be46e71c65c4d87ab59203c17771d9faec26/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/8785be46e71c65c4d87ab59203c17771d9faec26/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/LifecycleEventManager.java?ref=8785be46e71c65c4d87ab59203c17771d9faec26","patch":"@@ -52,6 +52,21 @@\n     private List _exceps = new LinkedList();\n     private boolean _firing = false;\n     private boolean _fail = false;\n+    private boolean _failFast = false;\n+\n+    /**\n+     * Whether to fail after first exception when firing events to listeners.\n+     */\n+    public boolean isFailFast() {\n+        return _failFast;\n+    }\n+\n+    /**\n+     * Whether to fail after first exception when firing events to listeners.\n+     */\n+    public void setFailFast(boolean failFast) {\n+        _failFast = failFast;\n+    }\n \n     /**\n      * Register a lifecycle listener for the given classes. If the classes\n@@ -207,22 +222,19 @@ private synchronized boolean hasListeners(Object source,\n         ClassMetaData meta, int type) {\n         if (meta.getLifecycleMetaData().getIgnoreSystemListeners())\n             return false;\n-        boolean failFast = (meta.getRepository().getMetaDataFactory().\n-            getDefaults().getCallbackMode() & CALLBACK_FAIL_FAST) != 0;\n-        if (fireEvent(null, source, null, type, _listeners, true, failFast,\n-            null) == Boolean.TRUE)\n+        if (fireEvent(null, source, null, type, _listeners, true, null) \n+            == Boolean.TRUE)\n             return true;\n         ListenerList system = meta.getRepository().getSystemListeners();\n         if (!system.isEmpty() && fireEvent(null, source, null, type, system,\n-            true, failFast, null) == Boolean.TRUE)\n+            true, null) == Boolean.TRUE)\n             return true;\n         if (_classListeners != null) {\n             Class c = source == null ? meta.getDescribedType() :\n                 source.getClass();\n             do {\n                 if (fireEvent(null, source, null, type, (ListenerList)\n-                    _classListeners.get(c), true, failFast, null)\n-                    == Boolean.TRUE)\n+                    _classListeners.get(c), true, null) == Boolean.TRUE)\n                     return true;\n                 c = c.getSuperclass();\n             } while (c != null && c != Object.class);\n@@ -250,34 +262,30 @@ private synchronized boolean hasListeners(Object source,\n             getDefaults();\n \n         boolean callbacks = def.getCallbacksBeforeListeners(type);\n-        boolean failFast = (def.getCallbackMode() & CALLBACK_FAIL_FAST) != 0;\n-\n         if (callbacks)\n-            makeCallbacks(source, related, meta, type, failFast, exceptions);\n+            makeCallbacks(source, related, meta, type, exceptions);\n \n         LifecycleEvent ev = (LifecycleEvent) fireEvent(null, source, related,\n-            type, _listeners, false, failFast, exceptions);\n+            type, _listeners, false, exceptions);\n \n         if (_classListeners != null) {\n             Class c = source == null ? meta.getDescribedType() :\n                 source.getClass();\n             do {\n                 ev = (LifecycleEvent) fireEvent(ev, source, related, type,\n-                    (ListenerList) _classListeners.get(c), false, failFast,\n-                    exceptions);\n+                    (ListenerList) _classListeners.get(c), false, exceptions);\n                 c = c.getSuperclass();\n             } while (c != null && c != Object.class);\n         }\n \n         // make system listeners\n         if (!meta.getLifecycleMetaData().getIgnoreSystemListeners()) {\n             ListenerList system = meta.getRepository().getSystemListeners();\n-            fireEvent(ev, source, related, type, system, false, failFast,\n-                exceptions);\n+            fireEvent(ev, source, related, type, system, false, exceptions);\n         }\n \n         if (!callbacks)\n-            makeCallbacks(source, related, meta, type, failFast, exceptions);\n+            makeCallbacks(source, related, meta, type, exceptions);\n \n         // create return array before clearing exceptions\n         Exception[] ret;\n@@ -309,7 +317,7 @@ private synchronized boolean hasListeners(Object source,\n      * Make callbacks, recording any exceptions in the given collection.\n      */\n     private void makeCallbacks(Object source, Object related,\n-        ClassMetaData meta, int type, boolean failFast, Collection exceptions) {\n+        ClassMetaData meta, int type, Collection exceptions) {\n         // make lifecycle callbacks\n         LifecycleCallbacks[] callbacks = meta.getLifecycleMetaData().\n             getCallbacks(type);\n@@ -318,7 +326,7 @@ private void makeCallbacks(Object source, Object related,\n                 callbacks[i].makeCallback(source, related, type);\n             } catch (Exception e) {\n                 exceptions.add(e);\n-                if (failFast)\n+                if (_failFast)\n                     _fail = true;\n             }\n         }\n@@ -329,8 +337,7 @@ private void makeCallbacks(Object source, Object related,\n      * listeners. The event may have already been constructed.\n      */\n     private Object fireEvent(LifecycleEvent ev, Object source, Object rel,\n-        int type, ListenerList listeners, boolean mock, boolean failFast,\n-        List exceptions) {\n+        int type, ListenerList listeners, boolean mock, List exceptions) {\n         if (listeners == null || !listeners.hasListeners(type))\n             return null;\n \n@@ -471,7 +478,7 @@ else if (listener instanceof ListenerAdapter) {\n             }\n             catch (Exception e) {\n                 exceptions.add(e);\n-                if (failFast)\n+                if (_failFast)\n                     _fail = true;\n             }\n         }"},{"sha":"df787c92f96310616132d2f224edf2ec05958055","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","status":"modified","additions":24,"deletions":1,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/8785be46e71c65c4d87ab59203c17771d9faec26/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","raw_url":"https://github.com/apache/openjpa/raw/8785be46e71c65c4d87ab59203c17771d9faec26/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java?ref=8785be46e71c65c4d87ab59203c17771d9faec26","patch":"@@ -21,6 +21,7 @@\n import javax.transaction.Synchronization;\n \n import org.apache.openjpa.ee.ManagedRuntime;\n+import org.apache.openjpa.event.CallbackModes;\n import org.apache.openjpa.event.LifecycleEventManager;\n import org.apache.openjpa.lib.util.Closeable;\n import org.apache.openjpa.meta.ClassMetaData;\n@@ -40,7 +41,7 @@\n     extends Synchronization, Connection, LocalTransaction,\n     javax.resource.spi.LocalTransaction, Closeable, StoreContext,\n     ConnectionRetainModes, DetachState, LockLevels,\n-    RestoreState, AutoClear, AutoDetach {\n+    RestoreState, AutoClear, AutoDetach, CallbackModes {\n \n     /**\n      * Set the broker's behavior for implicit actions such as flushing,\n@@ -240,6 +241,18 @@ public void setImplicitBehavior(OpCallbacks call,\n      */\n     public void removeTransactionListener(Object listener);\n \n+    /**\n+     * The callback mode for handling exceptions from transaction event\n+     * listeners.\n+     */\n+    public int getTransactionListenerCallbackMode();\n+\n+    /**\n+     * The callback mode for handling exceptions from transaction event\n+     * listeners.\n+     */\n+    public void setTransactionListenerCallbackMode(int mode);\n+\n     /**\n      * Register a listener for lifecycle-related events on the specified\n      * classes. If the classes are null, all events will be propagated to\n@@ -261,6 +274,16 @@ public void setImplicitBehavior(OpCallbacks call,\n      */\n     public LifecycleEventManager getLifecycleEventManager();\n \n+    /**\n+     * The callback mode for handling exceptions from lifecycle event listeners.\n+     */\n+    public int getLifecycleListenerCallbackMode();\n+\n+    /**\n+     * The callback mode for handling exceptions from lifecycle event listeners.\n+     */\n+    public void setLifecycleListenerCallbackMode(int mode);\n+\n     /**\n      * Begin a transaction.\n      */"},{"sha":"aa97ae2477bef2ceca4b2fd4a3fde60639ffba89","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":86,"deletions":53,"changes":139,"blob_url":"https://github.com/apache/openjpa/blob/8785be46e71c65c4d87ab59203c17771d9faec26/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/8785be46e71c65c4d87ab59203c17771d9faec26/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=8785be46e71c65c4d87ab59203c17771d9faec26","patch":"@@ -212,7 +212,6 @@\n     private int _autoDetach = 0;\n     private int _detachState = DETACH_LOADED;\n     private boolean _detachedNew = true;\n-    private int _callbackMode = CallbackModes.CALLBACK_IGNORE;\n     private boolean _orderDirty = false;\n \n     // status\n@@ -221,7 +220,9 @@\n \n     // event managers\n     private TransactionEventManager _transEventManager = null;\n+    private int _transCallbackMode = 0;\n     private LifecycleEventManager _lifeEventManager = null;\n+    private int _lifeCallbackMode = 0;\n \n     /**\n      * Set the persistence manager's authentication. This is the first\n@@ -251,23 +252,26 @@ public void initialize(AbstractBrokerFactory factory,\n         DelegatingStoreManager sm, boolean managed, int connMode) {\n         _conf = factory.getConfiguration();\n         _compat = _conf.getCompatibilityInstance();\n-\n         _factory = factory;\n         _log = _conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n         _cache = new ManagedCache(newManagedObjectCache());\n-        _lifeEventManager = new LifecycleEventManager();\n-        _callbackMode = _conf.getMetaDataRepositoryInstance().\n-            getMetaDataFactory(). getDefaults().getCallbackMode();\n+        _operating = MapBackedSet.decorate(new IdentityMap());\n         _connRetainMode = connMode;\n         _managed = managed;\n         if (managed)\n             _runtime = _conf.getManagedRuntimeInstance();\n         else\n             _runtime = new LocalManagedRuntime(this);\n \n+        _lifeEventManager = new LifecycleEventManager();\n+        _transEventManager = new TransactionEventManager();\n+        int cmode = _conf.getMetaDataRepositoryInstance().\n+            getMetaDataFactory().getDefaults().getCallbackMode();\n+        setLifecycleListenerCallbackMode(cmode);\n+        setTransactionListenerCallbackMode(cmode);\n+\n         // setup default options\n         _factory.configureBroker(this);\n-        _operating = MapBackedSet.decorate(new IdentityMap());\n \n         // make sure to do this after configuring broker so that store manager\n         // can look to broker configuration; we set both store and lock managers\n@@ -624,6 +628,20 @@ public void removeLifecycleListener(Object listener) {\n         }\n     }\n \n+    public int getLifecycleListenerCallbackMode() {\n+        return _lifeCallbackMode;\n+    }\n+\n+    public void setLifecycleListenerCallbackMode(int mode) {\n+        beginOperation(false);\n+        try {\n+            _lifeCallbackMode = mode;\n+            _lifeEventManager.setFailFast((mode & CALLBACK_FAIL_FAST) != 0);\n+        } finally {\n+            endOperation();\n+        }\n+    }\n+\n     /**\n      * Give state managers access to the lifecycle event manager.\n      */\n@@ -632,41 +650,39 @@ public LifecycleEventManager getLifecycleEventManager() {\n     }\n \n     /**\n-     * Fire lifecycle events, handling any exceptions appropriately.\n+     * Fire given lifecycle event, handling any exceptions appropriately.\n      *\n-     * @return whether events are being processed at this time.\n+     * @return whether events are being processed at this time\n      */\n     boolean fireLifecycleEvent(Object src, Object related, ClassMetaData meta,\n         int eventType) {\n-        if (_lifeEventManager == null) // uninitialized\n+        if (_lifeEventManager == null)\n             return false;\n+        handleCallbackExceptions(_lifeEventManager.fireEvent(src, related, \n+            meta, eventType), _lifeCallbackMode);\n+        return true;\n+    }\n \n-        Exception[] exceps = _lifeEventManager.fireEvent(src, related, meta,\n-            eventType);\n-        if (exceps.length == 0\n-            || (_callbackMode & CallbackModes.CALLBACK_IGNORE) != 0)\n-            return true;\n+    /**\n+     * Take actions on callback exceptions depending on callback mode.\n+     */\n+    private void handleCallbackExceptions(Exception[] exceps, int mode) {\n+        if (exceps.length == 0 || (mode & CALLBACK_IGNORE) != 0)\n+            return;\n \n-        OpenJPAException ke = new CallbackException\n-            (_loc.get(\"callback-err\", meta)).\n+        OpenJPAException ke = new CallbackException(_loc.get(\"callback-err\")).\n             setNestedThrowables(exceps).setFatal(true);\n-        if ((_callbackMode & CallbackModes.CALLBACK_ROLLBACK) != 0\n-            && (_flags & FLAG_ACTIVE) != 0)\n+        if ((mode & CALLBACK_ROLLBACK) != 0 && (_flags & FLAG_ACTIVE) != 0)\n             setRollbackOnlyInternal();\n-        if ((_callbackMode & CallbackModes.CALLBACK_LOG) != 0\n-            && _log.isWarnEnabled())\n+        if ((mode & CALLBACK_LOG) != 0 && _log.isWarnEnabled())\n             _log.warn(ke);\n-        if ((_callbackMode & CallbackModes.CALLBACK_RETHROW) != 0)\n+        if ((mode & CALLBACK_RETHROW) != 0)\n             throw ke;\n-        return true;\n     }\n \n     public void addTransactionListener(Object tl) {\n         beginOperation(false);\n         try {\n-            if (_transEventManager == null)\n-                _transEventManager = new TransactionEventManager();\n-\n             _transEventManager.addListener(tl);\n             if (tl instanceof RemoteCommitEventManager)\n                 _flags |= FLAG_REMOTE_LISTENER;\n@@ -678,15 +694,39 @@ public void addTransactionListener(Object tl) {\n     public void removeTransactionListener(Object tl) {\n         beginOperation(false);\n         try {\n-            if (_transEventManager != null\n-                && _transEventManager.removeListener(tl)\n+            if (_transEventManager.removeListener(tl)\n                 && (tl instanceof RemoteCommitEventManager))\n                 _flags &= ~FLAG_REMOTE_LISTENER;\n         } finally {\n             endOperation();\n         }\n     }\n \n+    public int getTransactionListenerCallbackMode() {\n+        return _transCallbackMode;\n+    }\n+\n+    public void setTransactionListenerCallbackMode(int mode) {\n+        beginOperation(false);\n+        try {\n+            _transCallbackMode = mode;\n+            _transEventManager.setFailFast((mode & CALLBACK_FAIL_FAST) != 0);\n+        } finally {\n+            endOperation();\n+        }\n+    }\n+\n+    /**\n+     * Fire given transaction event, handling any exceptions appropriately.\n+     *\n+     * @return whether events are being processed at this time\n+     */\n+    private void fireTransactionEvent(TransactionEvent trans) {\n+        if (_transEventManager != null)\n+            handleCallbackExceptions(_transEventManager.fireEvent(trans),\n+                _transCallbackMode);\n+    }\n+\n     ///////////\n     // Lookups\n     ///////////\n@@ -1151,9 +1191,8 @@ private void beginInternal() {\n             }\n             _lm.beginTransaction();\n \n-            if (_transEventManager != null\n-                && _transEventManager.hasBeginListeners())\n-                _transEventManager.fireEvent(new TransactionEvent(this,\n+            if (_transEventManager.hasBeginListeners())\n+                fireTransactionEvent(new TransactionEvent(this,\n                     TransactionEvent.AFTER_BEGIN, null, null, null, null));\n         } catch (OpenJPAException ke) {\n             // if we already started the transaction, don't let it commit\n@@ -1755,9 +1794,8 @@ public void afterCompletion(int status) {\n             _flags &= ~FLAG_FLUSHED;\n             _flags &= ~FLAG_TRANS_ENDING;\n \n-            if (_transEventManager != null \n-                && _transEventManager.hasEndListeners()) {\n-                _transEventManager.fireEvent(new TransactionEvent(this,\n+            if (_transEventManager.hasEndListeners()) {\n+                fireTransactionEvent(new TransactionEvent(this,\n                     status == Status.STATUS_COMMITTED\n                         ? TransactionEvent.AFTER_COMMIT_COMPLETE\n                         : TransactionEvent.AFTER_ROLLBACK_COMPLETE,\n@@ -1804,8 +1842,7 @@ protected void flush(int reason) {\n         // special case the remote commit listener used by the datacache cause\n         // we know it doesn't require the commit event when nothing changes\n         boolean flush = (_flags & FLAG_FLUSH_REQUIRED) != 0;\n-        boolean listeners = _transEventManager != null\n-            && (_transEventManager.hasFlushListeners()\n+        boolean listeners = (_transEventManager.hasFlushListeners()\n             || _transEventManager.hasEndListeners())\n             && ((_flags & FLAG_REMOTE_LISTENER) == 0\n             || _transEventManager.getListeners().size() > 1);\n@@ -1840,26 +1877,25 @@ protected void flush(int reason) {\n                 if ((_flags & FLAG_STORE_ACTIVE) == 0)\n                     beginStoreManagerTransaction(false);\n \n-                if (_transEventManager != null\n-                    && (_transEventManager.hasFlushListeners()\n+                if ((_transEventManager.hasFlushListeners()\n                     || _transEventManager.hasEndListeners())\n                     && (flush || reason == FLUSH_COMMIT)) {\n                     // fire events\n                     mobjs = new ManagedObjectCollection(transactional);\n                     if (reason == FLUSH_COMMIT\n                         && _transEventManager.hasEndListeners()) {\n-                        _transEventManager.fireEvent(new TransactionEvent\n-                            (this, TransactionEvent.BEFORE_COMMIT, mobjs,\n-                                _persistedClss, _updatedClss, _deletedClss));\n+                        fireTransactionEvent(new TransactionEvent(this, \n+                            TransactionEvent.BEFORE_COMMIT, mobjs,\n+                            _persistedClss, _updatedClss, _deletedClss));\n \n                         flushAdditions(transactional, reason);\n                         flush = (_flags & FLAG_FLUSH_REQUIRED) != 0;\n                     }\n \n                     if (flush && _transEventManager.hasFlushListeners()) {\n-                        _transEventManager.fireEvent(new TransactionEvent\n-                            (this, TransactionEvent.BEFORE_FLUSH, mobjs,\n-                                _persistedClss, _updatedClss, _deletedClss));\n+                        fireTransactionEvent(new TransactionEvent(this, \n+                            TransactionEvent.BEFORE_FLUSH, mobjs,\n+                            _persistedClss, _updatedClss, _deletedClss));\n                         flushAdditions(transactional, reason);\n                     }\n                 }\n@@ -1922,9 +1958,8 @@ else if (reason != FLUSH_LOGICAL)\n         throwNestedExceptions(exceps, true);\n \n         if (flush && reason != FLUSH_ROLLBACK && reason != FLUSH_LOGICAL\n-            && _transEventManager != null\n             && _transEventManager.hasFlushListeners()) {\n-            _transEventManager.fireEvent(new TransactionEvent(this,\n+            fireTransactionEvent(new TransactionEvent(this,\n                 TransactionEvent.AFTER_FLUSH, mobjs, _persistedClss,\n                 _updatedClss, _deletedClss));\n         }\n@@ -2064,13 +2099,12 @@ protected void endTransaction(int status) {\n \n         // fire after rollback/commit event\n         Collection mobjs = null;\n-        if (_transEventManager != null && _transEventManager.hasEndListeners())\n-        {\n+        if (_transEventManager.hasEndListeners()) {\n             mobjs = new ManagedObjectCollection(transStates);\n             int eventType = (rollback) ? TransactionEvent.AFTER_ROLLBACK\n                 : TransactionEvent.AFTER_COMMIT;\n-            _transEventManager.fireEvent(new TransactionEvent(this, eventType,\n-                mobjs, _persistedClss, _updatedClss, _deletedClss));\n+            fireTransactionEvent(new TransactionEvent(this, eventType, mobjs, \n+                _persistedClss, _updatedClss, _deletedClss));\n         }\n \n         // null transactional caches now so that all the removeFromTransaction\n@@ -2130,10 +2164,9 @@ protected void endTransaction(int status) {\n         _savepointCache = null;\n \n         // fire after state change event\n-        if (_transEventManager != null && _transEventManager.hasEndListeners())\n-            _transEventManager.fireEvent(new TransactionEvent(this,\n-                TransactionEvent.AFTER_STATE_TRANSITIONS, mobjs, null, null,\n-                null));\n+        if (_transEventManager.hasEndListeners())\n+            fireTransactionEvent(new TransactionEvent(this, TransactionEvent.\n+                AFTER_STATE_TRANSITIONS, mobjs, null, null, null));\n \n         // now clear trans cache; keep cleared version rather than\n         // null to avoid having to re-create the set later; more efficient"},{"sha":"d00731871121440f201d3885d2ec7c3f57ae4ff6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","status":"modified","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/8785be46e71c65c4d87ab59203c17771d9faec26/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","raw_url":"https://github.com/apache/openjpa/raw/8785be46e71c65c4d87ab59203c17771d9faec26/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java?ref=8785be46e71c65c4d87ab59203c17771d9faec26","patch":"@@ -794,6 +794,22 @@ public void removeTransactionListener(Object listener) {\n         }\n     }\n \n+    public int getTransactionListenerCallbackMode() {\n+        try {\n+            return _broker.getTransactionListenerCallbackMode();\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public void setTransactionListenerCallbackMode(int mode) {\n+        try {\n+            _broker.setTransactionListenerCallbackMode(mode);\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n     public void addLifecycleListener(Object listener, Class[] classes) {\n         try {\n             _broker.addLifecycleListener(listener, classes);\n@@ -810,6 +826,22 @@ public void removeLifecycleListener(Object listener) {\n         }\n     }\n \n+    public int getLifecycleListenerCallbackMode() {\n+        try {\n+            return _broker.getLifecycleListenerCallbackMode();\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public void setLifecycleListenerCallbackMode(int mode) {\n+        try {\n+            _broker.setLifecycleListenerCallbackMode(mode);\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n     public LifecycleEventManager getLifecycleEventManager() {\n         try {\n             return _broker.getLifecycleEventManager();"},{"sha":"f6eee3f5e5bd291d78fdc41f39a4130fd89ed4c6","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/8785be46e71c65c4d87ab59203c17771d9faec26/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/8785be46e71c65c4d87ab59203c17771d9faec26/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties?ref=8785be46e71c65c4d87ab59203c17771d9faec26","patch":"@@ -320,7 +320,8 @@ savepoint-init: This savepoint has already been initialized.\n savepoint-flush-not-supported: The configured SavepointManager does not \\\n \tsupport incremental flushing when a savepoint has been set.  You must \\\n \trelease your savepoints before flushing.\n-callback-err: An error occured processing callbacks for instance of type \"{0}\".\n+callback-err: Errors occured processing listener callbacks.  See the nested \\\n+    exceptions for details.\n bad-agg-listener-hint: Query hint value \"{0}\" ({1}) cannot be converted into \\\n \tan aggregate listener.\n bad-filter-listener-hint: Query hint value \"{0}\" ({1}) cannot be converted \\"},{"sha":"ca6d25abf9f47c5089247fbef4f03eea0007b252","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractConcurrentEventManager.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/8785be46e71c65c4d87ab59203c17771d9faec26/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractConcurrentEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/8785be46e71c65c4d87ab59203c17771d9faec26/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractConcurrentEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractConcurrentEventManager.java?ref=8785be46e71c65c4d87ab59203c17771d9faec26","patch":"@@ -37,6 +37,7 @@\n     private static Exception[] EMPTY_EXCEPTIONS = new Exception[0];\n \n     private final Collection _listeners;\n+    private boolean _failFast = false;\n \n     /**\n      * Default constructor.\n@@ -45,6 +46,20 @@ public AbstractConcurrentEventManager() {\n         _listeners = newListenerCollection();\n     }\n \n+    /**\n+     * Whether to fail after the first exception thrown by any listener.\n+     */\n+    public boolean isFailFast() {\n+        return _failFast;\n+    }\n+\n+    /**\n+     * Whether to fail after the first exception thrown by any listener.\n+     */\n+    public void setFailFast(boolean failFast) {\n+        _failFast = failFast;\n+    }\n+\n     /**\n      * Register an event listener.\n      */\n@@ -93,6 +108,8 @@ public Collection getListeners() {\n             try {\n                 fireEvent(event, itr.next());\n             } catch (Exception e) {\n+                if (_failFast)\n+                    return new Exception[] { e };\n                 if (exceptions == null)\n                     exceptions = new LinkedList();\n                 exceptions.add(e);"},{"sha":"ebff6a8e0fcf3719a594857692f76b8ad5e21768","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/8785be46e71c65c4d87ab59203c17771d9faec26/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/8785be46e71c65c4d87ab59203c17771d9faec26/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=8785be46e71c65c4d87ab59203c17771d9faec26","patch":"@@ -283,6 +283,14 @@ public void removeTransactionListener(Object listener) {\n         _broker.removeTransactionListener(listener);\n     }\n \n+    public int getTransactionListenerCallbackMode() {\n+        return _broker.getTransactionListenerCallbackMode();\n+    }\n+\n+    public void setTransactionListenerCallbackMode(int mode) {\n+        _broker.setTransactionListenerCallbackMode(mode);\n+    }\n+\n     public void addLifecycleListener(Object listener, Class... classes) {\n         _broker.addLifecycleListener(listener, classes);\n     }\n@@ -291,6 +299,14 @@ public void removeLifecycleListener(Object listener) {\n         _broker.removeLifecycleListener(listener);\n     }\n \n+    public int getLifecycleListenerCallbackMode() {\n+        return _broker.getLifecycleListenerCallbackMode();\n+    }\n+\n+    public void setLifecycleListenerCallbackMode(int mode) {\n+        _broker.setLifecycleListenerCallbackMode(mode);\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n     public <T> T getReference(Class<T> cls, Object oid) {\n         oid = _broker.newObjectId(cls, oid);"},{"sha":"2fec8f7074b3cd1321b0e944635abc8c5ff9d7f6","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java","status":"modified","additions":26,"deletions":1,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/8785be46e71c65c4d87ab59203c17771d9faec26/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java","raw_url":"https://github.com/apache/openjpa/raw/8785be46e71c65c4d87ab59203c17771d9faec26/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java?ref=8785be46e71c65c4d87ab59203c17771d9faec26","patch":"@@ -23,6 +23,7 @@\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.ee.ManagedRuntime;\n+import org.apache.openjpa.event.CallbackModes;\n import org.apache.openjpa.kernel.AutoClear;\n import org.apache.openjpa.kernel.AutoDetach;\n import org.apache.openjpa.kernel.ConnectionRetainModes;\n@@ -41,7 +42,7 @@\n     extends EntityManager, EntityTransaction, javax.resource.cci.Connection,\n     javax.resource.cci.LocalTransaction, javax.resource.spi.LocalTransaction,\n     Closeable, ConnectionRetainModes, DetachState, RestoreState, AutoDetach,\n-    AutoClear {\n+    AutoClear, CallbackModes {\n \n     /**\n      * Return the factory that produced this entity manager.\n@@ -300,6 +301,18 @@\n      */\n     public void removeTransactionListener(Object listener);\n \n+    /**\n+     * The {@link CallbackModes} flags for handling transaction listener\n+     * exceptions.\n+     */\n+    public int getTransactionListenerCallbackMode();\n+\n+    /**\n+     * The {@link CallbackModes} flags for handling transaction listener\n+     * exceptions.\n+     */\n+    public void setTransactionListenerCallbackMode(int callbackMode);\n+\n     /**\n      * Register a listener for lifecycle-related events on the specified\n      * classes. If the classes are null, all events will be propagated to\n@@ -312,6 +325,18 @@\n      */\n     public void removeLifecycleListener(Object listener);\n \n+    /**\n+     * The {@link CallbackModes} flags for handling lifecycle listener\n+     * exceptions.\n+     */\n+    public int getLifecycleListenerCallbackMode();\n+\n+    /**\n+     * The {@link CallbackModes} flags for handling lifecycle listener\n+     * exceptions.\n+     */\n+    public void setLifecycleListenerCallbackMode(int callbackMode);\n+\n     ///////////\n     // Lookups\n     ///////////"}]}

