{"sha":"87e07a9d47a05cb6ee72c80d932a20023a296a15","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg3ZTA3YTlkNDdhMDVjYjZlZTcyYzgwZDkzMmEyMDAyM2EyOTZhMTU=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-10-12T16:17:34Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2009-10-12T16:17:34Z"},"message":"OPENJPA-1344 Add checks for needed exception conditions.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@824406 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9dbd793eb9fe9cd6171773755ac759b78b951fb6","url":"https://api.github.com/repos/apache/openjpa/git/trees/9dbd793eb9fe9cd6171773755ac759b78b951fb6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/87e07a9d47a05cb6ee72c80d932a20023a296a15","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/87e07a9d47a05cb6ee72c80d932a20023a296a15","html_url":"https://github.com/apache/openjpa/commit/87e07a9d47a05cb6ee72c80d932a20023a296a15","comments_url":"https://api.github.com/repos/apache/openjpa/commits/87e07a9d47a05cb6ee72c80d932a20023a296a15/comments","author":null,"committer":null,"parents":[{"sha":"60b8e64ec9e7d10c054faa15ff94885680b98e30","url":"https://api.github.com/repos/apache/openjpa/commits/60b8e64ec9e7d10c054faa15ff94885680b98e30","html_url":"https://github.com/apache/openjpa/commit/60b8e64ec9e7d10c054faa15ff94885680b98e30"}],"stats":{"total":51,"additions":51,"deletions":0},"files":[{"sha":"521d9e407a01dc5a61345b2cf890557511c39b83","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestEmLockMode.java","status":"modified","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/87e07a9d47a05cb6ee72c80d932a20023a296a15/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestEmLockMode.java","raw_url":"https://github.com/apache/openjpa/raw/87e07a9d47a05cb6ee72c80d932a20023a296a15/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestEmLockMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestEmLockMode.java?ref=87e07a9d47a05cb6ee72c80d932a20023a296a15","patch":"@@ -20,6 +20,7 @@\n \n import javax.persistence.EntityManager;\n import javax.persistence.LockModeType;\n+import javax.persistence.TransactionRequiredException;\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfigurationImpl;\n@@ -261,4 +262,52 @@ private void commonTestLockLockModeIsolations(EntityManager em,\n \n         assertEquals(beforeIsolation, fConfig.getIsolation());\n     }\n+\n+    /*\n+     * Test em.getLockMode();\n+     */\n+    public void testGetLockMode() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        LockEmployee employee = em.find(LockEmployee.class, 1);\n+        try {\n+            em.getLockMode(employee);\n+            fail(\"Expecting TransactionRequiredException.\");\n+        } catch (TransactionRequiredException tre) {\n+        } catch (Exception e){\n+            fail(\"Expecting TransactionRequiredException.\");\n+        }\n+\n+        em.getTransaction().begin();\n+        try {\n+            assertEquals(\"getLockMode only allows in transaction.\",LockModeType.NONE, em.getLockMode(employee));\n+        } catch (Exception e){\n+            fail(\"Do not expecting any exception.\");\n+        }        \n+        em.getTransaction().rollback();\n+\n+        em.clear();\n+        em.getTransaction().begin();\n+        try {\n+            // getLockMode on a detached entity;\n+            em.getLockMode(employee);\n+            fail(\"Expecting IllegalArgumentException for getLockMode on a detached entity in an active transaction.\");\n+        } catch (IllegalArgumentException iae) {\n+        } catch (Exception e){\n+            fail(\"Expecting IllegalArgumentException for getLockMode on a detached entity in an active transaction.\");\n+        }        \n+        em.getTransaction().rollback();\n+\n+        em.getTransaction().begin();\n+        try {\n+            employee = em.find(LockEmployee.class, 1, LockModeType.PESSIMISTIC_WRITE);\n+            assertEquals(\"Test getLockMode on non-NONE lock mode type.\", LockModeType.PESSIMISTIC_WRITE, em\n+                    .getLockMode(employee));\n+        } catch (Exception e){\n+            fail(\"Do not expecting any exception.\");\n+        }        \n+        em.getTransaction().rollback();\n+\n+        em.close();\n+    }\n }"},{"sha":"bb58a7aaf4b0ce7d1b8c8b993f8e7a6c587ece20","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/87e07a9d47a05cb6ee72c80d932a20023a296a15/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/87e07a9d47a05cb6ee72c80d932a20023a296a15/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=87e07a9d47a05cb6ee72c80d932a20023a296a15","patch":"@@ -1124,6 +1124,8 @@ public Object getDelegate() {\n \n     public LockModeType getLockMode(Object entity) {\n         assertNotCloseInvoked();\n+        _broker.assertActiveTransaction();\n+        assertValidAttchedEntity(entity);\n         return MixedLockLevelsHelper.fromLockLevel(\n             _broker.getLockLevel(entity));\n     }"}]}

