{"sha":"881461e99aa4584e3631a89027b8d2f185a6a582","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg4MTQ2MWU5OWFhNDU4NGUzNjMxYTg5MDI3YjhkMmYxODVhNmE1ODI=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-06T22:04:15Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-02-06T22:04:15Z"},"message":"Merge from ../../trunk. svn merge -c 596523 ../../trunk; svn merge -c 596661 ../../trunk Merge from ../../trunk. svn merge -c 596661 ../../trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@619175 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9c05fef9ad6691d5572306477898a39634bda048","url":"https://api.github.com/repos/apache/openjpa/git/trees/9c05fef9ad6691d5572306477898a39634bda048"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/881461e99aa4584e3631a89027b8d2f185a6a582","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/881461e99aa4584e3631a89027b8d2f185a6a582","html_url":"https://github.com/apache/openjpa/commit/881461e99aa4584e3631a89027b8d2f185a6a582","comments_url":"https://api.github.com/repos/apache/openjpa/commits/881461e99aa4584e3631a89027b8d2f185a6a582/comments","author":null,"committer":null,"parents":[{"sha":"04c9d4fc23248a950ed7a29e3a0fc69fe5c5c345","url":"https://api.github.com/repos/apache/openjpa/commits/04c9d4fc23248a950ed7a29e3a0fc69fe5c5c345","html_url":"https://github.com/apache/openjpa/commit/04c9d4fc23248a950ed7a29e3a0fc69fe5c5c345"}],"stats":{"total":33,"additions":28,"deletions":5},"files":[{"sha":"d3d83dff31cae15ecdb1b0c18c5ac4a580a59201","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryPagination.java","status":"modified","additions":28,"deletions":5,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/881461e99aa4584e3631a89027b8d2f185a6a582/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryPagination.java","raw_url":"https://github.com/apache/openjpa/raw/881461e99aa4584e3631a89027b8d2f185a6a582/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryPagination.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryPagination.java?ref=881461e99aa4584e3631a89027b8d2f185a6a582","patch":"@@ -18,19 +18,23 @@\n  */\n package org.apache.openjpa.persistence.query;\n \n+import java.util.List;\n import javax.persistence.EntityManager;\n import javax.persistence.Query;\n \n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.DerbyDictionary;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n \n /**\n  * Test that query pagination works properly.\n  */\n public class TestQueryPagination\n-    extends SingleEMFTestCase {\n+    extends SQLListenerTestCase {\n \n     public void setUp() {\n-        setUp(SimpleEntity.class, CLEAR_TABLES);\n+        setUp(SimpleEntity.class, CLEAR_TABLES, \"openjpa.Log\", \"SQL=TRACE\");\n \n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n@@ -70,12 +74,31 @@ public void testAllResultsFirstLast() {\n \n     private void helper(boolean firstFirst, int first, int max, int expected) {\n         EntityManager em = emf.createEntityManager();\n-        Query q = em.createQuery(\"select e from simple e\");\n+        Query q = em.createQuery(\"select e from simple e order by e.value\");\n+        sql.clear();\n+        List<SimpleEntity> fullList = q.getResultList();\n         if (firstFirst)\n             q.setFirstResult(first).setMaxResults(max);\n         else\n             q.setMaxResults(max).setFirstResult(first);\n-        assertEquals(expected, q.getResultList().size());\n+        List<SimpleEntity> list = q.getResultList();\n+        checkSQL();\n+        assertEquals(expected, list.size());\n+        for (int i = 0; i < list.size(); i++) {\n+            assertEquals(\"bar\" + (first + i), list.get(i).getValue());\n+        }\n         em.close();\n     }\n+\n+    private void checkSQL() {\n+        assertEquals(2, sql.size());\n+        String noRange = this.sql.get(0);\n+        String withRange = this.sql.get(1);\n+        DBDictionary dict = ((JDBCConfiguration) emf.getConfiguration())\n+            .getDBDictionaryInstance();\n+        if (dict.supportsSelectStartIndex || dict.supportsSelectEndIndex)\n+            assertNotEquals(noRange, withRange);\n+        else\n+            assertEquals(noRange, withRange);\n+    }\n }\n\\ No newline at end of file"}]}

