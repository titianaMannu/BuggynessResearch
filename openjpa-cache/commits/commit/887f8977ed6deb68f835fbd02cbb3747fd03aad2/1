{"sha":"887f8977ed6deb68f835fbd02cbb3747fd03aad2","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg4N2Y4OTc3ZWQ2ZGViNjhmODM1ZmJkMDJjYmIzNzQ3ZmQwM2FhZDI=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2011-03-02T20:57:03Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2011-03-02T20:57:03Z"},"message":"OPENJPA-1954: Fix ArrayIndexOutOfBoundsException when querying on a version field that is in a MappedSuperclass.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1076370 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8ff2da6f9a56bb0d5040be82a6f96c8feb350136","url":"https://api.github.com/repos/apache/openjpa/git/trees/8ff2da6f9a56bb0d5040be82a6f96c8feb350136"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/887f8977ed6deb68f835fbd02cbb3747fd03aad2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/887f8977ed6deb68f835fbd02cbb3747fd03aad2","html_url":"https://github.com/apache/openjpa/commit/887f8977ed6deb68f835fbd02cbb3747fd03aad2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/887f8977ed6deb68f835fbd02cbb3747fd03aad2/comments","author":null,"committer":null,"parents":[{"sha":"e0a0050e7bec8032ec0160bdf3c955b1e437737c","url":"https://api.github.com/repos/apache/openjpa/commits/e0a0050e7bec8032ec0160bdf3c955b1e437737c","html_url":"https://github.com/apache/openjpa/commit/e0a0050e7bec8032ec0160bdf3c955b1e437737c"}],"stats":{"total":100,"additions":64,"deletions":36},"files":[{"sha":"68cf4839238bbd0731a9d2c5069aa294ddcdba10","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/887f8977ed6deb68f835fbd02cbb3747fd03aad2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","raw_url":"https://github.com/apache/openjpa/raw/887f8977ed6deb68f835fbd02cbb3747fd03aad2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java?ref=887f8977ed6deb68f835fbd02cbb3747fd03aad2","patch":"@@ -1075,9 +1075,14 @@ public FieldMapping getValueMappedByMapping() {\n         // version, it will have a NoneFieldMapping (since the version strategy\n         // for the class takes care of it's mapping), and NoneFieldStrategies\n         // do not have columns.\n-        if (isVersion())\n-            return getDeclaringMapping().getVersion().getColumns();\n-        else\n+        //\n+        // rgc : 2 March 2011 : Still hacky. If the version field is in a mapped super class we need to look\n+        // at the defining metadata to find the correct Version. Not sure why the version for the declaring metadata\n+        // is different than the defining metadata.\n+        if (isVersion()){\n+            ClassMapping cm = (ClassMapping)((FieldMetaData)this).getDefiningMetaData();\n+            return cm.getVersion().getColumns();\n+        }else\n             return _val.getColumns();\n     }\n "},{"sha":"a5aa6040e862ba44bdcfdc4c587ca498e9b0396d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/887f8977ed6deb68f835fbd02cbb3747fd03aad2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/887f8977ed6deb68f835fbd02cbb3747fd03aad2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=887f8977ed6deb68f835fbd02cbb3747fd03aad2","patch":"@@ -2140,7 +2140,8 @@ protected void appendUpdates(Select sel, JDBCStore store, SQLBuffer sql,\n         if (augmentUpdates) {\n             Path path = (Path) updateParams.keySet().iterator().next();\n             FieldMapping fm = (FieldMapping) path.last();\n-            ClassMapping meta = fm.getDeclaringMapping();\n+            \n+            ClassMapping meta = fm.getDefiningMapping();\n             Map<Column,?> updates = meta.getVersion().getBulkUpdateValues();\n             for (Map.Entry e : updates.entrySet()) {\n                 Column col = (Column) e.getKey();"},{"sha":"53858a84ee44a737d8283556f79cf35166306f19","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/BaseTimestampedEntity.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/887f8977ed6deb68f835fbd02cbb3747fd03aad2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/BaseTimestampedEntity.java","raw_url":"https://github.com/apache/openjpa/raw/887f8977ed6deb68f835fbd02cbb3747fd03aad2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/BaseTimestampedEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/BaseTimestampedEntity.java?ref=887f8977ed6deb68f835fbd02cbb3747fd03aad2","patch":"@@ -0,0 +1,37 @@\n+package org.apache.openjpa.persistence.jdbc.update;\n+\n+import java.sql.Timestamp;\n+\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.MappedSuperclass;\n+import javax.persistence.Version;\n+\n+@MappedSuperclass\n+public abstract class BaseTimestampedEntity {\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+    \n+    private String name;\n+    \n+    @Version\n+    private Timestamp version;\n+    \n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    \n+    public Timestamp getVersion() {\n+        return version;\n+    }\n+}"},{"sha":"cb4db1067a0354cc82e8917408e8e0813254dabc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TestTimestampVersion.java","status":"modified","additions":16,"deletions":2,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/887f8977ed6deb68f835fbd02cbb3747fd03aad2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TestTimestampVersion.java","raw_url":"https://github.com/apache/openjpa/raw/887f8977ed6deb68f835fbd02cbb3747fd03aad2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TestTimestampVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TestTimestampVersion.java?ref=887f8977ed6deb68f835fbd02cbb3747fd03aad2","patch":"@@ -19,9 +19,15 @@\n package org.apache.openjpa.persistence.jdbc.update;\n \n import java.sql.Timestamp;\n+import java.util.Date;\n+import java.util.List;\n \n import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n \n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.Version;\n+import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n /**\n@@ -34,7 +40,15 @@\n  */\n public class TestTimestampVersion extends SingleEMFTestCase {\n \tpublic void setUp() {\n-\t\tsuper.setUp(CLEAR_TABLES, TimestampedEntity.class, NumericVersionedEntity.class);\n+        super.setUp(CLEAR_TABLES, TimestampedEntity.class, NumericVersionedEntity.class, BaseTimestampedEntity.class);\n+    }\n+\tpublic void testQueryOnVersion() {\n+\t    EntityManager em = emf.createEntityManager();\n+\t    String pql = \"SELECT s FROM TimestampedEntity s WHERE s.version < :endDate\";\n+        Query queryObj = em.createQuery(pql);\n+        Timestamp t1 = new Timestamp((new Date()).getTime());\n+        queryObj.setParameter(\"endDate\", t1);\n+        List<TimestampedEntity> scenarioList = queryObj.getResultList();\n \t}\n \n     public void testBulkUpdateOnTimestampedVersion() {\n@@ -47,7 +61,7 @@ public void testBulkUpdateOnTimestampedVersion() {\n         \n         try {\n             // delay to ensure the new timestamp exceeds the timer's resolution.\n-            Thread.sleep(1000);\n+            Thread.sleep(1500);\n         } catch (InterruptedException e) {\n         }\n "},{"sha":"a31f7f2120bde8a49bef6b7b1592914e4e59d48c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TimestampedEntity.java","status":"modified","additions":1,"deletions":30,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/887f8977ed6deb68f835fbd02cbb3747fd03aad2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TimestampedEntity.java","raw_url":"https://github.com/apache/openjpa/raw/887f8977ed6deb68f835fbd02cbb3747fd03aad2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TimestampedEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TimestampedEntity.java?ref=887f8977ed6deb68f835fbd02cbb3747fd03aad2","patch":"@@ -18,13 +18,8 @@\n  */\n package org.apache.openjpa.persistence.jdbc.update;\n \n-import java.sql.Timestamp;\n-\n import javax.persistence.Entity;\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.Id;\n import javax.persistence.Table;\n-import javax.persistence.Version;\n \n /**\n  * An entity using a Timestamp as Version field.\n@@ -35,31 +30,7 @@\n  */\n @Entity\n @Table(name=\"TSENTITY1\")\n-public class TimestampedEntity {\n-\t@Id\n-\t@GeneratedValue\n-\tprivate long id;\n-\t\n-\tprivate String name;\n-\t\n-\t@Version\n-\tprivate Timestamp version;\n-\t\n-\n-\tpublic long getId() {\n-\t\treturn id;\n-\t}\n-\n-\tpublic String getName() {\n-\t\treturn name;\n-\t}\n+public class TimestampedEntity extends BaseTimestampedEntity{\n \n-\tpublic void setName(String name) {\n-\t\tthis.name = name;\n-\t}\n-\t\n-\tpublic Timestamp getVersion() {\n-\t    return version;\n-\t}\n \n }"}]}

