{"sha":"88f293dec94ee995603f7c4b895cc26bffb0ac67","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg4ZjI5M2RlYzk0ZWU5OTU2MDNmN2M0Yjg5NWNjMjZiZmZiMGFjNjc=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-15T22:56:44Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-15T22:56:44Z"},"message":"OPENJPA-312.  Committing these changes for Daniel.  I decided to make a common private utility method out of the common code across the proposed patch, but the intent of the original patch is still there.  Thanks, Daniel, for posting the fix.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@566381 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"180e2b3c9087bb79d4ecaebb0d25174ce6bcca61","url":"https://api.github.com/repos/apache/openjpa/git/trees/180e2b3c9087bb79d4ecaebb0d25174ce6bcca61"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/88f293dec94ee995603f7c4b895cc26bffb0ac67","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/88f293dec94ee995603f7c4b895cc26bffb0ac67","html_url":"https://github.com/apache/openjpa/commit/88f293dec94ee995603f7c4b895cc26bffb0ac67","comments_url":"https://api.github.com/repos/apache/openjpa/commits/88f293dec94ee995603f7c4b895cc26bffb0ac67/comments","author":null,"committer":null,"parents":[{"sha":"485527ae0872028121f29eb5b7fd27f75efb5b4a","url":"https://api.github.com/repos/apache/openjpa/commits/485527ae0872028121f29eb5b7fd27f75efb5b4a","html_url":"https://github.com/apache/openjpa/commit/485527ae0872028121f29eb5b7fd27f75efb5b4a"}],"stats":{"total":40,"additions":17,"deletions":23},"files":[{"sha":"b55b6f7c67b5904768f1a65579037947edf4999a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":17,"deletions":23,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/88f293dec94ee995603f7c4b895cc26bffb0ac67/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/88f293dec94ee995603f7c4b895cc26bffb0ac67/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=88f293dec94ee995603f7c4b895cc26bffb0ac67","patch":"@@ -124,6 +124,7 @@\n     // combined list of selected ids and map of each id to its alias\n     protected final Selects _selects = newSelects();\n     private List _ordered = null;\n+    private List _grouped = null;\n \n     // flags\n     private int _flags = 0;\n@@ -1371,11 +1372,7 @@ public void groupBy(SQLBuffer sql) {\n \n     public void groupBy(SQLBuffer sql, Joins joins) {\n         getJoins(joins, true);\n-        if (_grouping == null)\n-            _grouping = new SQLBuffer(_dict);\n-        else\n-            _grouping.append(\", \");\n-        _grouping.append(sql);\n+        groupByAppend(sql.getSQL());\n     }\n \n     public void groupBy(String sql) {\n@@ -1384,42 +1381,39 @@ public void groupBy(String sql) {\n \n     public void groupBy(String sql, Joins joins) {\n         getJoins(joins, true);\n-        if (_grouping == null)\n-            _grouping = new SQLBuffer(_dict);\n-        else\n-            _grouping.append(\", \");\n-        _grouping.append(sql);\n+        groupByAppend(sql);\n     }\n \n     public void groupBy(Column col) {\n         groupBy(col, null);\n     }\n \n     public void groupBy(Column col, Joins joins) {\n-        if (_grouping == null)\n-            _grouping = new SQLBuffer(_dict);\n-        else\n-            _grouping.append(\", \");\n-\n         PathJoins pj = getJoins(joins, true);\n-        _grouping.append(getColumnAlias(col, pj));\n+        groupByAppend(getColumnAlias(col, pj));\n     }\n \n     public void groupBy(Column[] cols) {\n         groupBy(cols, null);\n     }\n \n     public void groupBy(Column[] cols, Joins joins) {\n-        if (_grouping == null)\n-            _grouping = new SQLBuffer(_dict);\n-        else\n-            _grouping.append(\", \");\n-\n         PathJoins pj = getJoins(joins, true);\n         for (int i = 0; i < cols.length; i++) {\n-            if (i > 0)\n+            groupByAppend(getColumnAlias(cols[i], pj));\n+        }\n+    }\n+    \n+    private void groupByAppend(String sql) {\n+        if (_grouped == null || !_grouped.contains(sql)) {\n+            if (_grouping == null) {\n+                _grouping = new SQLBuffer(_dict);\n+                _grouped = new ArrayList();\n+            } else\n                 _grouping.append(\", \");\n-            _grouping.append(getColumnAlias(cols[i], pj));\n+\n+            _grouping.append(sql);\n+            _grouped.add(sql);\n         }\n     }\n "}]}

