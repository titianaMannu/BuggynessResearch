{"sha":"890d16047e3b1feabfd12134168589feb8bc13d2","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg5MGQxNjA0N2UzYjFmZWFiZmQxMjEzNDE2ODU4OWZlYjhiYzEzZDI=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-05T23:20:10Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-05T23:20:10Z"},"message":"Just a couple of new testcases that I used to debug some problems recently.  Turned out to be non-issues, but I thought the testcases still might be worthwhile to have in our bucket.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@562985 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"850809986217a8904bb8e05f96c522cb3b8d02a4","url":"https://api.github.com/repos/apache/openjpa/git/trees/850809986217a8904bb8e05f96c522cb3b8d02a4"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/890d16047e3b1feabfd12134168589feb8bc13d2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/890d16047e3b1feabfd12134168589feb8bc13d2","html_url":"https://github.com/apache/openjpa/commit/890d16047e3b1feabfd12134168589feb8bc13d2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/890d16047e3b1feabfd12134168589feb8bc13d2/comments","author":null,"committer":null,"parents":[{"sha":"17fcd0021173ca14645cc82027102c354f825193","url":"https://api.github.com/repos/apache/openjpa/commits/17fcd0021173ca14645cc82027102c354f825193","html_url":"https://github.com/apache/openjpa/commit/17fcd0021173ca14645cc82027102c354f825193"}],"stats":{"total":104,"additions":102,"deletions":2},"files":[{"sha":"371a74baaa48fed6a63810edb193f58f2c1c2a29","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerClear.java","status":"modified","additions":25,"deletions":2,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/890d16047e3b1feabfd12134168589feb8bc13d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerClear.java","raw_url":"https://github.com/apache/openjpa/raw/890d16047e3b1feabfd12134168589feb8bc13d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerClear.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerClear.java?ref=890d16047e3b1feabfd12134168589feb8bc13d2","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.openjpa.persistence.simple;\n \n-import javax.persistence.EntityManager;\n-\n import junit.textui.TestRunner;\n import org.apache.openjpa.persistence.test.SingleEMTestCase;\n \n@@ -35,6 +33,31 @@ public void setUp() {\n         setUp(AllFieldTypes.class);\n     }\n \n+    public void testDetach() {\n+        // Create EntityManager and Start a transaction (1)\n+        begin();\n+\n+        // Insert a new object and flush\n+        AllFieldTypes testObject1 = new AllFieldTypes();\n+        testObject1.setStringField(\"my test object1\");\n+        persist(testObject1);\n+        em.flush();\n+        assertTrue(\"testObject1 not found in pc\", em.contains(testObject1));\n+\n+        // Insert another object and persist\n+        AllFieldTypes testObject2 = new AllFieldTypes();\n+        testObject1.setStringField(\"my test object2\");\n+        persist(testObject2);\n+        assertTrue(\"testObject2 not found in pc\", em.contains(testObject2));\n+        \n+        // Rollback to clear the PC\n+        rollback();\n+        \n+        assertFalse(\"testObject1 found in pc\", em.contains(testObject1));\n+        assertFalse(\"testObject2 found in pc\", em.contains(testObject2));\n+        \n+    }\n+    \n     public void testClear() {\n         // Create EntityManager and Start a transaction (1)\n         begin();"},{"sha":"7364ba867e0eec140244295b03c7a1005e1522fc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMerge.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/890d16047e3b1feabfd12134168589feb8bc13d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMerge.java","raw_url":"https://github.com/apache/openjpa/raw/890d16047e3b1feabfd12134168589feb8bc13d2/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMerge.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMerge.java?ref=890d16047e3b1feabfd12134168589feb8bc13d2","patch":"@@ -0,0 +1,77 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.simple;\r\n+\r\n+import junit.textui.TestRunner;\r\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n+\r\n+/**\r\n+ * Test case to ensure that the proper JPA merge semantics are processed.\r\n+ *\r\n+ * @author Kevin Sutter\r\n+ */\r\n+public class TestEntityManagerMerge\r\n+    extends SingleEMTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(AllFieldTypes.class);\r\n+    }\r\n+\r\n+    public void testMerge() {\r\n+        // Create EntityManager and Start a transaction (1)\r\n+        begin();\r\n+\r\n+        // Insert a new object into the PC\r\n+        AllFieldTypes testObject = new AllFieldTypes();\r\n+        testObject.setStringField(\"new test object\");\r\n+        persist(testObject);\r\n+        assertTrue(\"testObject not found in pc\", em.contains(testObject));\r\n+        \r\n+        // Modify this object...\r\n+        testObject.setStringField(\"updated test object\");\r\n+\r\n+        // Attempt to merge this updated object into the PC.  Should be ignored.\r\n+        AllFieldTypes mergedObject = em.merge(testObject);\r\n+        assertTrue(\"mergedObject and testObject are not equal\", \r\n+                mergedObject.equals(testObject));\r\n+        assertTrue(\"mergedObject and testObject are not ==\", \r\n+                mergedObject == testObject);\r\n+        assertTrue(\"testObject not found in pc\", em.contains(testObject));\r\n+        assertTrue(\"mergedObject not found in pc\", em.contains(mergedObject));\r\n+        \r\n+        // And, once again...\r\n+        testObject.setStringField(\"yet another update\");\r\n+        AllFieldTypes mergedObject2 = em.merge(testObject);\r\n+        assertTrue(\"mergedObject2 and testObject are not equal\", \r\n+                mergedObject2.equals(testObject));\r\n+        assertTrue(\"mergedObject2 and testObject are not ==\", \r\n+                mergedObject2 == testObject);\r\n+        assertTrue(\"testObject not found in pc\", em.contains(testObject));\r\n+        assertTrue(\"mergedObject2 not found in pc\", em.contains(mergedObject2));\r\n+        \r\n+        // Rollback\r\n+        rollback();\r\n+  \r\n+    }\r\n+    \r\n+    public static void main(String[] args) {\r\n+        TestRunner.run(TestEntityManagerMerge.class);\r\n+    }\r\n+}\r\n+\r"}]}

