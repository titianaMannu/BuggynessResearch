{"sha":"891ccc625c6126e7d2b9a50be5d468927151b74b","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg5MWNjYzYyNWM2MTI2ZTdkMmI5YTUwYmU1ZDQ2ODkyNzE1MWI3NGI=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-02-16T02:12:28Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-02-16T02:12:28Z"},"message":"OPENJPA-1912: Generate externalizable methods correctly for super and subclasses. \nSubmitted By: Mark Struberg\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1071123 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ddbd4529e87711d9a4db0016e1c86a44101827f2","url":"https://api.github.com/repos/apache/openjpa/git/trees/ddbd4529e87711d9a4db0016e1c86a44101827f2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/891ccc625c6126e7d2b9a50be5d468927151b74b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/891ccc625c6126e7d2b9a50be5d468927151b74b","html_url":"https://github.com/apache/openjpa/commit/891ccc625c6126e7d2b9a50be5d468927151b74b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/891ccc625c6126e7d2b9a50be5d468927151b74b/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"8e6a7ae3313edb8ae6c6c37f184ce9b7cd680482","url":"https://api.github.com/repos/apache/openjpa/commits/8e6a7ae3313edb8ae6c6c37f184ce9b7cd680482","html_url":"https://github.com/apache/openjpa/commit/8e6a7ae3313edb8ae6c6c37f184ce9b7cd680482"}],"stats":{"total":232,"additions":223,"deletions":9},"files":[{"sha":"b16b837164ac993f7fee0227e202d40706ced07c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":75,"deletions":8,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/891ccc625c6126e7d2b9a50be5d468927151b74b/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/891ccc625c6126e7d2b9a50be5d468927151b74b/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=891ccc625c6126e7d2b9a50be5d468927151b74b","patch":"@@ -4037,7 +4037,10 @@ private void addReadExternal(boolean parentDetachable,\n         Code code = meth.getCode(true);\n \n         // super.readExternal (in);\n-        Class sup = _meta.getDescribedType().getSuperclass();\n+        // not sure if this works: this is depending on the order of the enhancement!\n+        // if the subclass gets enhanced first, then the superclass misses\n+        // the Externalizable at this point!\n+        Class<?> sup = _meta.getDescribedType().getSuperclass();\n         if (!parentDetachable && Externalizable.class.isAssignableFrom(sup)) {\n             loadManagedInstance(code, false);\n             code.aload().setParam(0);\n@@ -4070,12 +4073,44 @@ private void addReadExternal(boolean parentDetachable,\n                 void.class, new Class[]{ StateManager.class });\n         }\n \n+        addReadExternalFields();\n+\n+        // readExternalFields(in.readObject ());\n+        loadManagedInstance(code, false);\n+        code.aload().setParam(0);\n+        code.invokevirtual().setMethod(\"readExternalFields\",\n+            void.class, inargs);\n+\n+        code.vreturn();\n+        code.calculateMaxStack();\n+        code.calculateMaxLocals();\n+    }\n+\n+    private void addReadExternalFields() throws NoSuchMethodException {\n+        Class<?>[] inargs = new Class[]{ ObjectInput.class };\n+        BCMethod meth = _pc.declareMethod(\"readExternalFields\", void.class, inargs);\n+        meth.setAccessFlags(Constants.ACCESS_PROTECTED);\n+        Exceptions exceps = meth.getExceptions(true);\n+        exceps.addException(IOException.class);\n+        exceps.addException(ClassNotFoundException.class);\n+        Code code = meth.getCode(true);\n+\n+        Class<?> sup = _meta.getPCSuperclass();\n+        if (sup != null) {\n+            //add a call to super.readExternalFields()\n+            loadManagedInstance(code, false);\n+            code.aload().setParam(0);\n+            code.invokespecial().setMethod(sup, \"readExternalFields\", void.class, inargs);\n+        }\n+\n         // read managed fields\n-        FieldMetaData[] fmds = _meta.getFields();\n-        for (int i = 0; i < fmds.length; i++)\n-            if (!fmds[i].isTransient())\n+        FieldMetaData[] fmds = _meta.getDeclaredFields();\n+        for (int i = 0; i < fmds.length; i++) {\n+            if (!fmds[i].isTransient()) {\n                 readExternal(code, fmds[i].getName(),\n                     fmds[i].getDeclaredType(), fmds[i]);\n+            }\n+        }\n \n         code.vreturn();\n         code.calculateMaxStack();\n@@ -4227,12 +4262,44 @@ private void addWriteExternal(boolean parentDetachable,\n         if (go2 != null)\n             go2.setTarget(code.nop());\n \n-        // write managed fields\n-        FieldMetaData[] fmds = _meta.getFields();\n-        for (int i = 0; i < fmds.length; i++)\n-            if (!fmds[i].isTransient())\n+        addWriteExternalFields();\n+\n+        loadManagedInstance(code, false);\n+        code.aload().setParam(0);\n+        code.invokevirtual().setMethod(\"writeExternalFields\",\n+            void.class, outargs);\n+\n+        // return\n+        code.vreturn();\n+        code.calculateMaxStack();\n+        code.calculateMaxLocals();\n+    }\n+\n+\n+    private void addWriteExternalFields()\n+        throws NoSuchMethodException {\n+        Class<?>[] outargs = new Class[]{ ObjectOutput.class };\n+        BCMethod meth = _pc.declareMethod(\"writeExternalFields\", void.class, outargs);\n+        meth.setAccessFlags(Constants.ACCESS_PROTECTED);\n+        Exceptions exceps = meth.getExceptions(true);\n+        exceps.addException(IOException.class);\n+        Code code = meth.getCode(true);\n+\n+        Class<?> sup = _meta.getPCSuperclass();\n+        if (sup != null) {\n+            // add a call to super.readExternalFields()\n+            loadManagedInstance(code, false);\n+            code.aload().setParam(0);\n+            code.invokespecial().setMethod(sup, \"writeExternalFields\", void.class, outargs);\n+        }\n+\n+        FieldMetaData[] fmds = _meta.getDeclaredFields();\n+        for (int i = 0; i < fmds.length; i++) {\n+            if (!fmds[i].isTransient()) {\n                 writeExternal(code, fmds[i].getName(),\n                     fmds[i].getDeclaredType(), fmds[i]);\n+            }\n+        }\n \n         // return\n         code.vreturn();"},{"sha":"8f54170aef41ae56c1f338bb5032865acf42b6a3","filename":"openjpa-persistence-jdbc/src/main/ant/enhancer.xml","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/891ccc625c6126e7d2b9a50be5d468927151b74b/openjpa-persistence-jdbc/src/main/ant/enhancer.xml","raw_url":"https://github.com/apache/openjpa/raw/891ccc625c6126e7d2b9a50be5d468927151b74b/openjpa-persistence-jdbc/src/main/ant/enhancer.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/ant/enhancer.xml?ref=891ccc625c6126e7d2b9a50be5d468927151b74b","patch":"@@ -79,6 +79,8 @@\n             <exclude name=\"**/proxy/entities/*.class\" />\n             <exclude name=\"**/xml/*.class\" />\n             <exclude name=\"**/Unenhanced*.class\" />\n+            <exclude name=\"org/apache/openjpa/enhance/EnhancedSuperClass.class\"/>\n+            <exclude name=\"org/apache/openjpa/enhance/EnhancedSubClass.class\"/>\n             <exclude name=\"**/AbstractUnenhanced*.class\" />\n             <exclude name=\"**/unenhanced/*.class\" />\n \t\t\t<exclude name=\"**/persistence/property/AccessModsEntity.class\"/>\n@@ -119,6 +121,16 @@\n                 <include name=\"**/proxy/entities/*.class\"/>\n             </fileset>\n             <config log=\"${openjpa.Log}\" />\n+        </openjpac>\n+        <!-- Enhance with DetachedStateField=true option -->\n+        <openjpac>\n+            <config propertiesFile=\"${project.build.testOutputDirectory}/org/apache/openjpa/enhance/persistence1.xml\" />\n+            <classpath refid=\"cp\" />\n+            <fileset dir=\"${project.build.testOutputDirectory}\">\n+                <include name=\"org/apache/openjpa/enhance/EnhancedSuperClass.class\"/>\n+                <include name=\"org/apache/openjpa/enhance/EnhancedSubClass.class\"/>\n+            </fileset>\n+            <config log=\"${openjpa.Log}\" />\n         </openjpac>\n \t\t<!-- Enhance delimited identifiers XML-based entities separately -->\n         <openjpac>"},{"sha":"ee7f8cc4bd861d7c3eb17aaf332859f1d6924447","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/EnhancedSubClass.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/891ccc625c6126e7d2b9a50be5d468927151b74b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/EnhancedSubClass.java","raw_url":"https://github.com/apache/openjpa/raw/891ccc625c6126e7d2b9a50be5d468927151b74b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/EnhancedSubClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/EnhancedSubClass.java?ref=891ccc625c6126e7d2b9a50be5d468927151b74b","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.enhance;\n+\n+\n+import javax.persistence.Entity;\n+import java.io.Serializable;\n+\n+/**\n+ * @see TestClassHierarchyEnhancement\n+ */\n+@Entity\n+public class EnhancedSubClass extends EnhancedSuperClass implements Serializable {\n+    private static final long serialVersionUID = 2311337663046757789L;\n+    private String valueInSubclass;\n+\n+    public String getValueInSubclass() {\n+        return valueInSubclass;\n+    }\n+\n+    public void setValueInSubclass(String valueInSubclass) {\n+        this.valueInSubclass = valueInSubclass;\n+    }\n+}\n+"},{"sha":"bf5bc42854b941f1322dab8e64660dbf6c6be98b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/EnhancedSuperClass.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/891ccc625c6126e7d2b9a50be5d468927151b74b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/EnhancedSuperClass.java","raw_url":"https://github.com/apache/openjpa/raw/891ccc625c6126e7d2b9a50be5d468927151b74b/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/EnhancedSuperClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/EnhancedSuperClass.java?ref=891ccc625c6126e7d2b9a50be5d468927151b74b","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.enhance;\n+\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import java.io.Serializable;\n+\n+/**\n+ * @see TestClassHierarchyEnhancement\n+ */\n+@Entity\n+public class EnhancedSuperClass implements Serializable {\n+    private static final long serialVersionUID = -4276267285828916940L;\n+\n+    @Id\n+    @GeneratedValue\n+    private Long id;\n+\n+    private String valueInSuperclass;\n+\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getValueInSuperclass() {\n+        return valueInSuperclass;\n+    }\n+\n+    public void setValueInSuperclass(String valueInSuperclass) {\n+        this.valueInSuperclass = valueInSuperclass;\n+    }\n+}\n+"},{"sha":"db1e92ae828360fd17b2f02ad38a5f97b2cf75ca","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/enhance/persistence1.xml","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/891ccc625c6126e7d2b9a50be5d468927151b74b/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/enhance/persistence1.xml","raw_url":"https://github.com/apache/openjpa/raw/891ccc625c6126e7d2b9a50be5d468927151b74b/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/enhance/persistence1.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/enhance/persistence1.xml?ref=891ccc625c6126e7d2b9a50be5d468927151b74b","patch":"@@ -0,0 +1,37 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.\n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    version=\"1.0\"\n+    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\">\n+\n+    <persistence-unit name=\"enhancertest-pu\">\n+        <class>org.apache.openjpa.enhance.EnhancedSuperClass</class>\n+        <class>org.apache.openjpa.enhance.EnhancedSubClass</class>\n+        <properties>\n+            <property name=\"openjpa.DynamicEnhancementAgent\" value=\"false\"/>\n+            <property name=\"openjpa.DetachState\" value=\"loaded(DetachedStateField=true)\"/>\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\"\n+                    value=\"buildSchema(ForeignKeys=true)\"/>\n+        </properties>\n+    </persistence-unit>\n+\n+</persistence>"},{"sha":"5064025c9bf3da1994925414158725bbfb745978","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/891ccc625c6126e7d2b9a50be5d468927151b74b/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/891ccc625c6126e7d2b9a50be5d468927151b74b/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/pom.xml?ref=891ccc625c6126e7d2b9a50be5d468927151b74b","patch":"@@ -839,7 +839,7 @@\n                 <plugin>\n                     <groupId>org.codehaus.mojo</groupId>\n                     <artifactId>openjpa-maven-plugin</artifactId>\n-                    <version>1.1</version>\n+                    <version>1.2</version>\n                 </plugin>\n                 <plugin>\n                     <groupId>org.apache.maven.plugins</groupId>"}]}

