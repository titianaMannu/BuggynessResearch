{"sha":"8974a099084986706a14419fa3e2298541ee50e1","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg5NzRhMDk5MDg0OTg2NzA2YTE0NDE5ZmEzZTIyOTg1NDFlZTUwZTE=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-02-16T16:02:05Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-02-16T16:02:05Z"},"message":"Only substantive change is flipping the order of the args in an \nImplHelper.isAssignable call in FetchConfigurationImpl.  We want to test \nwhether the type we're traversing to is derived from the type we're traversing\nfrom.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@508459 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8bcf896f9b480d844759247cf7164f5f275cb41c","url":"https://api.github.com/repos/apache/openjpa/git/trees/8bcf896f9b480d844759247cf7164f5f275cb41c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8974a099084986706a14419fa3e2298541ee50e1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8974a099084986706a14419fa3e2298541ee50e1","html_url":"https://github.com/apache/openjpa/commit/8974a099084986706a14419fa3e2298541ee50e1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8974a099084986706a14419fa3e2298541ee50e1/comments","author":null,"committer":null,"parents":[{"sha":"4efc5d69972193ee57032dce319cf1b42e0d65b1","url":"https://api.github.com/repos/apache/openjpa/commits/4efc5d69972193ee57032dce319cf1b42e0d65b1","html_url":"https://github.com/apache/openjpa/commit/4efc5d69972193ee57032dce319cf1b42e0d65b1"}],"stats":{"total":15,"additions":8,"deletions":7},"files":[{"sha":"fed646a71a43efcaa3bd162588ecabe8438a41b9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8974a099084986706a14419fa3e2298541ee50e1/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/8974a099084986706a14419fa3e2298541ee50e1/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java?ref=8974a099084986706a14419fa3e2298541ee50e1","patch":"@@ -558,7 +558,7 @@ private int getAvailableRecursionDepth(FieldMetaData fm, Class type,\n         // see if there's a previous limit\n         int avail = Integer.MIN_VALUE;\n         for (FetchConfigurationImpl f = this; f != null; f = f._parent) {\n-            if (ImplHelper.isAssignable(type, f._fromType)) {\n+            if (ImplHelper.isAssignable(f._fromType, type)) {\n                 avail = f._availableRecursion;\n                 if (traverse)\n                     avail = reduce(avail);"},{"sha":"a3c44bd3543142e018be87c2a94f9659e072fcc1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/8974a099084986706a14419fa3e2298541ee50e1/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","raw_url":"https://github.com/apache/openjpa/raw/8974a099084986706a14419fa3e2298541ee50e1/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java?ref=8974a099084986706a14419fa3e2298541ee50e1","patch":"@@ -205,11 +205,11 @@ public static boolean isManageable(Object instance) {\n      * @return true if the \"to\" class is assignable to the \"from\" class\n      */\n     public static boolean isAssignable(Class from, Class to) {\n-        Boolean isAssignable = null;\n         if (from == null || to == null)\n             return false;\n-        Map assignableTo = (Map) _assignableTypes.get(from);\n \n+        Boolean isAssignable = null;\n+        Map assignableTo = (Map) _assignableTypes.get(from);\n         if (assignableTo == null) { // \"to\" cache doesn't exist, so create it...\n             assignableTo = new ConcurrentHashMap();\n             _assignableTypes.put(from, assignableTo);\n@@ -218,7 +218,7 @@ public static boolean isAssignable(Class from, Class to) {\n         }\n \n         if (isAssignable == null) {// we don't have a record of this pair...\n-            isAssignable = new Boolean(from.isAssignableFrom(to));\n+            isAssignable = Boolean.valueOf(from.isAssignableFrom(to));\n             assignableTo.put(to, isAssignable);\n         }\n "},{"sha":"92749f1739b9dc512b28352d07f8ae6f614764d1","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAId.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/8974a099084986706a14419fa3e2298541ee50e1/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAId.java","raw_url":"https://github.com/apache/openjpa/raw/8974a099084986706a14419fa3e2298541ee50e1/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/OpenJPAId.java?ref=8974a099084986706a14419fa3e2298541ee50e1","patch":"@@ -28,15 +28,16 @@\n public abstract class OpenJPAId\n     implements Comparable, Serializable {\n \n+    // cache the types' generated hashcodes\n+    private static ConcurrentReferenceHashMap _typeCache =\n+        new ConcurrentReferenceHashMap(ReferenceMap.WEAK, ReferenceMap.HARD);\n+\n     protected Class type;\n     protected boolean subs = true;\n \n     // type has his based on the least-derived non-object class so that\n     // user-given ids with non-exact types match ids with exact types\n     private transient int _typeHash = 0;\n-    // cache the types' generated hashcodes\n-    private static ConcurrentReferenceHashMap _typeCache =\n-        new ConcurrentReferenceHashMap(ReferenceMap.WEAK, ReferenceMap.HARD);\n \n     protected OpenJPAId() {\n     }"}]}

