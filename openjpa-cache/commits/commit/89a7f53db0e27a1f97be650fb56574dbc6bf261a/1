{"sha":"89a7f53db0e27a1f97be650fb56574dbc6bf261a","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg5YTdmNTNkYjBlMjdhMWY5N2JlNjUwZmI1NjU3NGRiYzZiZjI2MWE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-14T19:28:39Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-14T19:28:39Z"},"message":"Refactor PersistenceTestCase to AbstractCachedEMFTestCase and AbstractPersistenceTestCase.\nDeprecate old class to allow submodules to compile (can be removed after maven repos is updated).\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@804331 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"edba96c9bcafa50e87d6d51f9bac8855a13a6e4f","url":"https://api.github.com/repos/apache/openjpa/git/trees/edba96c9bcafa50e87d6d51f9bac8855a13a6e4f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/89a7f53db0e27a1f97be650fb56574dbc6bf261a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/89a7f53db0e27a1f97be650fb56574dbc6bf261a","html_url":"https://github.com/apache/openjpa/commit/89a7f53db0e27a1f97be650fb56574dbc6bf261a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/89a7f53db0e27a1f97be650fb56574dbc6bf261a/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"befee1a50b3d15abccb37988adcc0f89b0ce5f5d","url":"https://api.github.com/repos/apache/openjpa/commits/befee1a50b3d15abccb37988adcc0f89b0ce5f5d","html_url":"https://github.com/apache/openjpa/commit/befee1a50b3d15abccb37988adcc0f89b0ce5f5d"}],"stats":{"total":696,"additions":679,"deletions":17},"files":[{"sha":"e93459e59fd009b6a55105e8465c2ea90de04986","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestConstraints.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestConstraints.java","raw_url":"https://github.com/apache/openjpa/raw/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestConstraints.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestConstraints.java?ref=89a7f53db0e27a1f97be650fb56574dbc6bf261a","patch":"@@ -30,6 +30,7 @@\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.test.AbstractCachedEMFTestCase;\n import org.apache.openjpa.persistence.test.PersistenceTestCase;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n@@ -77,7 +78,7 @@\n  *\n  * @version $Rev$ $Date$\n  */\n-public class TestConstraints extends PersistenceTestCase {\n+public class TestConstraints extends AbstractCachedEMFTestCase {\n \n     private static OpenJPAEntityManagerFactorySPI emf = null;\n     "},{"sha":"0f51c04a9fa7f742f12d8b2e32e215aa6496ebe9","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestMappedSuper.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestMappedSuper.java","raw_url":"https://github.com/apache/openjpa/raw/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestMappedSuper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestMappedSuper.java?ref=89a7f53db0e27a1f97be650fb56574dbc6bf261a","patch":"@@ -28,11 +28,12 @@\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.test.AbstractCachedEMFTestCase;\n import org.apache.openjpa.persistence.test.AllowFailure;\n import org.apache.openjpa.persistence.test.PersistenceTestCase;\n \n \n-public class TestMappedSuper extends PersistenceTestCase {\n+public class TestMappedSuper extends AbstractCachedEMFTestCase {\n \n     /*\n      * Verify constraints defined via XML on a mapped superclass are validated."},{"sha":"1680b980a3a461d6b507905580929b305eccdc93","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestValidationGroups.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestValidationGroups.java","raw_url":"https://github.com/apache/openjpa/raw/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestValidationGroups.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestValidationGroups.java?ref=89a7f53db0e27a1f97be650fb56574dbc6bf261a","patch":"@@ -32,6 +32,7 @@\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.test.AbstractCachedEMFTestCase;\n import org.apache.openjpa.persistence.test.PersistenceTestCase;\n \n /**\n@@ -56,7 +57,7 @@\n  *\n  * @version $Rev$ $Date$\n  */\n-public class TestValidationGroups extends PersistenceTestCase {\n+public class TestValidationGroups extends AbstractCachedEMFTestCase {\n \n     /**\n      * 1a) verify validation occurs using the default validation groups"},{"sha":"175bde46f3cc1a94987a79c00f083758d900b962","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestCacheMarshallerEndToEnd.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestCacheMarshallerEndToEnd.java","raw_url":"https://github.com/apache/openjpa/raw/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestCacheMarshallerEndToEnd.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestCacheMarshallerEndToEnd.java?ref=89a7f53db0e27a1f97be650fb56574dbc6bf261a","patch":"@@ -30,11 +30,12 @@\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.query.NamedQueryEntity;\n import org.apache.openjpa.persistence.simple.AllFieldTypes;\n+import org.apache.openjpa.persistence.test.AbstractCachedEMFTestCase;\n import org.apache.openjpa.persistence.test.PersistenceTestCase;\n import org.apache.openjpa.lib.log.Log;\n \n public class TestCacheMarshallerEndToEnd\n-    extends PersistenceTestCase {\n+    extends AbstractCachedEMFTestCase  {\n \n     private static final Object[] STORE_PROPS = new Object[] {\n         \"openjpa.CacheMarshallers\","},{"sha":"40f39bc9f28afc9bfcea8ad64cc0e27fffa6297c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestEnhancementWithMultiplePUs.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestEnhancementWithMultiplePUs.java","raw_url":"https://github.com/apache/openjpa/raw/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestEnhancementWithMultiplePUs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestEnhancementWithMultiplePUs.java?ref=89a7f53db0e27a1f97be650fb56574dbc6bf261a","patch":"@@ -31,12 +31,13 @@\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.meta.MetaDataRepository;\n+import org.apache.openjpa.persistence.test.AbstractCachedEMFTestCase;\n import org.apache.openjpa.persistence.test.PersistenceTestCase;\n import serp.bytecode.BCClass;\n import serp.bytecode.Project;\n \n public class TestEnhancementWithMultiplePUs\n-    extends PersistenceTestCase {\n+    extends AbstractCachedEMFTestCase {\n \n     public void testExplicitEnhancementWithClassNotInFirstPU()\n         throws ClassNotFoundException {"},{"sha":"88619d9462b722ba3f9dfa923f4e06eeba91b52d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/event/TestSJVMRemoteCommitProvider.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/event/TestSJVMRemoteCommitProvider.java","raw_url":"https://github.com/apache/openjpa/raw/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/event/TestSJVMRemoteCommitProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/event/TestSJVMRemoteCommitProvider.java?ref=89a7f53db0e27a1f97be650fb56574dbc6bf261a","patch":"@@ -23,13 +23,14 @@\n import java.util.Collections;\n import javax.persistence.Persistence;\n \n+import org.apache.openjpa.persistence.test.AbstractCachedEMFTestCase;\n import org.apache.openjpa.persistence.test.PersistenceTestCase;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.JPAFacadeHelper;\n \n public class TestSJVMRemoteCommitProvider\n-    extends PersistenceTestCase {\n+extends AbstractCachedEMFTestCase {\n \n     private OpenJPAEntityManagerFactorySPI emf1;\n     private OpenJPAEntityManagerFactorySPI emf2;"},{"sha":"908ddc048f6fcec1dac18bc964805ee8d3875491","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/AbstractWriteBehindTestCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/AbstractWriteBehindTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/AbstractWriteBehindTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/writebehind/AbstractWriteBehindTestCase.java?ref=89a7f53db0e27a1f97be650fb56574dbc6bf261a","patch":"@@ -26,12 +26,13 @@\n import org.apache.openjpa.jdbc.writebehind.entities.SimpleTableGeneratedIdEntity;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.test.AbstractCachedEMFTestCase;\n import org.apache.openjpa.persistence.test.PersistenceTestCase;\n import org.apache.openjpa.writebehind.WriteBehindCache;\n import org.apache.openjpa.writebehind.WriteBehindCacheManager;\n import org.apache.openjpa.writebehind.WriteBehindCallback;\n \n-public abstract class AbstractWriteBehindTestCase extends PersistenceTestCase {\n+public abstract class AbstractWriteBehindTestCase extends AbstractCachedEMFTestCase  {\n     protected static Object[] writeBehindProps =\n         new Object[] { \n             \"openjpa.DataCache\", \"true\","},{"sha":"3fd2a05c8c694530bb2c605f570173606931b995","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestDynamicClassRegistration.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestDynamicClassRegistration.java","raw_url":"https://github.com/apache/openjpa/raw/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestDynamicClassRegistration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestDynamicClassRegistration.java?ref=89a7f53db0e27a1f97be650fb56574dbc6bf261a","patch":"@@ -29,10 +29,11 @@\n import org.apache.openjpa.persistence.JPAFacadeHelper;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.query.SimpleEntity;\n+import org.apache.openjpa.persistence.test.AbstractCachedEMFTestCase;\n import org.apache.openjpa.persistence.test.PersistenceTestCase;\n \n public class TestDynamicClassRegistration\n-    extends PersistenceTestCase {\n+    extends AbstractCachedEMFTestCase {\n \n     private OpenJPAEntityManagerFactorySPI emf;\n "},{"sha":"b989ad7c95ad86fd6d3497e2e840fd065077e332","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java","raw_url":"https://github.com/apache/openjpa/raw/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java?ref=89a7f53db0e27a1f97be650fb56574dbc6bf261a","patch":"@@ -20,10 +20,11 @@\n \n import javax.persistence.EntityManagerFactory;\n \n+import org.apache.openjpa.persistence.test.AbstractCachedEMFTestCase;\n import org.apache.openjpa.persistence.test.PersistenceTestCase;\n import org.apache.openjpa.persistence.JPAFacadeHelper;\n \n-public class TestMetaDataInheritanceComparator extends PersistenceTestCase {\n+public class TestMetaDataInheritanceComparator extends AbstractCachedEMFTestCase {\n \n     public void testInheritanceComparatorWithBase() {\n         inheritanceComparatorHelper(true);"},{"sha":"806b30af1627aaa9c4df015951eee146ac9e3934","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","raw_url":"https://github.com/apache/openjpa/raw/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java?ref=89a7f53db0e27a1f97be650fb56574dbc6bf261a","patch":"@@ -22,10 +22,11 @@\n import org.apache.openjpa.conf.Specification;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.test.AbstractCachedEMFTestCase;\n import org.apache.openjpa.persistence.test.PersistenceTestCase;\n \n public class TestSpecCompatibilityOptions \n-    extends PersistenceTestCase {\n+extends AbstractCachedEMFTestCase {\n     \n     /*\n      * Verifies compatibility options and spec level are appropriate"},{"sha":"b7a71a03575cd2af0d2059fd9829a4307610fc95","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java","raw_url":"https://github.com/apache/openjpa/raw/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheExclusions.java?ref=89a7f53db0e27a1f97be650fb56574dbc6bf261a","patch":"@@ -28,9 +28,10 @@\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.StoreCache;\n+import org.apache.openjpa.persistence.test.AbstractCachedEMFTestCase;\n import org.apache.openjpa.persistence.test.PersistenceTestCase;\n \n-public class TestCacheExclusions extends PersistenceTestCase {\n+public class TestCacheExclusions extends AbstractCachedEMFTestCase {\n \n     private OpenJPAEntityManagerFactorySPI emf = null;\n "},{"sha":"97dc011e1540fdd61b1ac70f8b5e413a4eb29d55","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestEntitiesAsKeys.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestEntitiesAsKeys.java","raw_url":"https://github.com/apache/openjpa/raw/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestEntitiesAsKeys.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestEntitiesAsKeys.java?ref=89a7f53db0e27a1f97be650fb56574dbc6bf261a","patch":"@@ -24,9 +24,10 @@\n import javax.persistence.EntityManager;\n \n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.test.AbstractCachedEMFTestCase;\n import org.apache.openjpa.persistence.test.PersistenceTestCase;\n \n-public class TestEntitiesAsKeys extends PersistenceTestCase {\n+public class TestEntitiesAsKeys extends AbstractCachedEMFTestCase {\n \n     OpenJPAEntityManagerFactorySPI emf =\n         createEMF(MapHolder.class, MapEmbeddable.class, \"openjpa.DataCache\", \"true\", \"openjpa.RemoteCommitProvider\","},{"sha":"e9751414ec6b81c33133a1294a32a32077298196","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMixedAccess.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMixedAccess.java","raw_url":"https://github.com/apache/openjpa/raw/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMixedAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMixedAccess.java?ref=89a7f53db0e27a1f97be650fb56574dbc6bf261a","patch":"@@ -21,9 +21,10 @@\n import javax.persistence.PersistenceException;\n import javax.persistence.EntityManagerFactory;\n \n+import org.apache.openjpa.persistence.test.AbstractCachedEMFTestCase;\n import org.apache.openjpa.persistence.test.PersistenceTestCase;\n \n-public class TestMixedAccess extends PersistenceTestCase {\n+public class TestMixedAccess extends AbstractCachedEMFTestCase {\n \n     public void testMixedAccessEntityError() {\n         try {"},{"sha":"016f7a4d723927de85272ba3e322dbd5777d1f0a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/TestOrderColumnXML.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/TestOrderColumnXML.java","raw_url":"https://github.com/apache/openjpa/raw/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/TestOrderColumnXML.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/order/TestOrderColumnXML.java?ref=89a7f53db0e27a1f97be650fb56574dbc6bf261a","patch":"@@ -44,9 +44,10 @@\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.openjpa.persistence.jdbc.XMLPersistenceMappingParser;\n import org.apache.openjpa.persistence.jdbc.XMLPersistenceMappingSerializer;\n+import org.apache.openjpa.persistence.test.AbstractCachedEMFTestCase;\n import org.apache.openjpa.persistence.test.PersistenceTestCase;\n \n-public class TestOrderColumnXML extends PersistenceTestCase {       \n+public class TestOrderColumnXML extends AbstractCachedEMFTestCase {       \n \n     /*\n      * Validates the use of the nullable attribute on OrderColumn through"},{"sha":"7649bffa981d4c69267feafa3226c631a3defdb2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractCachedEMFTestCase.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractCachedEMFTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractCachedEMFTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractCachedEMFTestCase.java?ref=89a7f53db0e27a1f97be650fb56574dbc6bf261a","patch":"@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.test;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+\n+/**\n+ * Testcase which caches EntityManagerFactories based on the persistence unit name and the properties provided at\n+ * runtime.\n+ * \n+ */\n+public abstract class AbstractCachedEMFTestCase extends AbstractPersistenceTestCase {\n+    private static FixedMap<EMFKey, OpenJPAEntityManagerFactorySPI> _emfs =\n+        new FixedMap<EMFKey, OpenJPAEntityManagerFactorySPI>();\n+\n+    /**\n+     * Create an entity manager factory for persistence unit <code>pu</code>. Put {@link #CLEAR_TABLES} in this list to\n+     * tell the test framework to delete all table contents before running the tests.\n+     * \n+     * @param props\n+     *            list of persistent types used in testing and/or configuration values in the form\n+     *            key,value,key,value...\n+     */\n+    protected OpenJPAEntityManagerFactorySPI createNamedEMF(String pu, Object... props) {\n+        Map<String, Object> map = getPropertiesMap(props);\n+        EMFKey key = new EMFKey(pu, map);\n+        OpenJPAEntityManagerFactorySPI oemf = _emfs.get(key);\n+        if (_fresh || oemf == null || !oemf.isOpen()) {\n+            oemf = super.createNamedEMF(pu, props);\n+            if (!_fresh) {\n+                _emfs.put(key, oemf);\n+            }\n+        }\n+        _fresh = false;\n+        return oemf;\n+    }\n+\n+    private static class FixedMap<K, V> extends LinkedHashMap<K, V> {\n+        private static final long serialVersionUID = -3153852097468390779L;\n+\n+        public boolean removeEldestEntry(Map.Entry<K, V> entry) {\n+            return this.size() > 2;\n+        }\n+    }\n+\n+    private static class EMFKey {\n+        final String unit;\n+        final Map<String, Object> config;\n+\n+        EMFKey(String unit, Map<String, Object> config) {\n+            this.unit = unit;\n+            this.config = config;\n+        }\n+\n+        public int hashCode() {\n+            return (unit != null ? unit.hashCode() : 0) + config.hashCode();\n+        }\n+\n+        public boolean equals(Object other) {\n+            EMFKey that = (EMFKey) other;\n+            return (unit != null ? unit.equals(that.unit) : that.unit == null) && config.equals(that.config);\n+        }\n+    }\n+\n+}"},{"sha":"91b75173ae1165360198e8cc2ddf5ec233ef8360","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractPersistenceTestCase.java","status":"added","additions":563,"deletions":0,"changes":563,"blob_url":"https://github.com/apache/openjpa/blob/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractPersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractPersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractPersistenceTestCase.java?ref=89a7f53db0e27a1f97be650fb56574dbc6bf261a","patch":"@@ -0,0 +1,563 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.test;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestResult;\n+\n+import org.apache.openjpa.kernel.AbstractBrokerFactory;\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+\n+/**\n+ * Base class for Persistence TestCases. This class contains utility methods but does not maintain an EntityManager or\n+ * EntityManagerFactory - these tasks are left for subclasses to handle.\n+ */\n+public abstract class AbstractPersistenceTestCase extends TestCase {\n+    public static final String FRESH_EMF = \"Creates new EntityManagerFactory\";\n+    public static final String RETAIN_DATA = \"Retain data after test run\";\n+    private boolean retainDataOnTearDown;\n+    protected boolean _fresh = false;\n+\n+    public static final String ALLOW_FAILURE_LOG = \"log\";\n+    public static final String ALLOW_FAILURE_IGNORE = \"ignore\";\n+    public static final String ALLOW_FAILURE_SYS_PROP = \"tests.openjpa.allowfailure\";\n+\n+    private static String allowFailureConfig = System.getProperty(ALLOW_FAILURE_SYS_PROP, ALLOW_FAILURE_IGNORE);\n+    /**\n+     * Marker object you pass to {@link #setUp} to indicate that the database table rows should be cleared.\n+     */\n+    protected static final Object CLEAR_TABLES = new Object();\n+\n+    /**\n+     * Marker object you pass to {@link #setUp} to indicate that the database table should be dropped and then\n+     * recreated.\n+     */\n+    protected static final Object DROP_TABLES = new Object();\n+\n+    /**\n+     * The {@link TestResult} instance for the current test run.\n+     */\n+    protected TestResult testResult;\n+\n+    /**\n+     * Create an entity manager factory. Put {@link #CLEAR_TABLES} in this list to tell the test framework to delete all\n+     * table contents before running the tests.\n+     * \n+     * @param props\n+     *            list of persistent types used in testing and/or configuration values in the form\n+     *            key,value,key,value...\n+     */\n+    protected OpenJPAEntityManagerFactorySPI createEMF(final Object... props) {\n+        return createNamedEMF(getPersistenceUnitName(), props);\n+    }\n+\n+    /**\n+     * The name of the persistence unit that this test class should use by default. This defaults to \"test\".\n+     */\n+    protected String getPersistenceUnitName() {\n+        return \"test\";\n+    }\n+\n+    /**\n+     * Create an entity manager factory for persistence unit <code>pu</code>. Put {@link #CLEAR_TABLES} in this list to\n+     * tell the test framework to delete all table contents before running the tests.\n+     * \n+     * @param props\n+     *            list of persistent types used in testing and/or configuration values in the form\n+     *            key,value,key,value...\n+     */\n+    protected OpenJPAEntityManagerFactorySPI createNamedEMF(final String pu, Object... props) {\n+        Map<String, Object> map = getPropertiesMap(props);\n+        OpenJPAEntityManagerFactorySPI oemf = null;\n+        Map<Object, Object> config = new HashMap<Object, Object>(System.getProperties());\n+        config.putAll(map);\n+        oemf = (OpenJPAEntityManagerFactorySPI) Persistence.createEntityManagerFactory(pu, config);\n+        if (oemf == null) {\n+            throw new NullPointerException(\"Expected an entity manager factory \" + \"for the persistence unit named: \\\"\"\n+                + pu + \"\\\"\");\n+        }\n+        return oemf;\n+    }\n+\n+    protected Map<String, Object> getPropertiesMap(Object... props) {\n+        Map<String, Object> map = new HashMap<String, Object>();\n+        List<Class<?>> types = new ArrayList<Class<?>>();\n+        boolean prop = false;\n+\n+        for (int i = 0; props != null && i < props.length; i++) {\n+            if (props[i] == FRESH_EMF) {\n+                _fresh = true;\n+                continue;\n+            }\n+            if (props[i] == RETAIN_DATA) {\n+                retainDataOnTearDown = true;\n+                continue;\n+            }\n+            if (prop) {\n+                map.put((String) props[i - 1], props[i]);\n+                prop = false;\n+            } else if (props[i] == CLEAR_TABLES) {\n+                map.put(\"openjpa.jdbc.SynchronizeMappings\", \"buildSchema(ForeignKeys=true,\"\n+                    + \"SchemaAction='add,deleteTableContents')\");\n+            } else if (props[i] == DROP_TABLES) {\n+                map.put(\"openjpa.jdbc.SynchronizeMappings\", \"buildSchema(ForeignKeys=true,\"\n+                    + \"SchemaAction='drop,add')\");\n+            } else if (props[i] instanceof Class<?>) {\n+                types.add((Class<?>) props[i]);\n+            } else if (props[i] != null) {\n+                prop = true;\n+            }\n+        }\n+\n+        if (!types.isEmpty()) {\n+            StringBuffer buf = new StringBuffer();\n+            for (Class<?> c : types) {\n+                if (buf.length() > 0) {\n+                    buf.append(\";\");\n+                }\n+                buf.append(c.getName());\n+            }\n+            String oldValue =\n+                map.containsKey(\"openjpa.MetaDataFactory\") ? \",\" + map.get(\"openjpa.MetaDataFactory\").toString() : \"\";\n+            map.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" + buf.toString() + oldValue + \")\");\n+        } else {\n+            map.put(\"openjpa.MetaDataFactory\", \"jpa\");\n+        }\n+        return map;\n+    }\n+\n+    @Override\n+    public void run(TestResult testResult) {\n+        this.testResult = testResult;\n+        super.run(testResult);\n+    }\n+\n+    @Override\n+    public void tearDown() throws Exception {\n+        try {\n+            super.tearDown();\n+        } catch (Exception e) {\n+            // if a test failed, swallow any exceptions that happen\n+            // during tear-down, as these just mask the original problem.\n+            if (testResult.wasSuccessful()) {\n+                throw e;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Safely close the given factory.\n+     */\n+    protected boolean closeEMF(EntityManagerFactory emf) {\n+        if (emf == null || !emf.isOpen()) {\n+            return false;\n+        }\n+\n+        closeAllOpenEMs(emf);\n+        emf.close();\n+        return !emf.isOpen();\n+    }\n+\n+    /**\n+     * Closes all open entity managers after first rolling back any open transactions.\n+     */\n+    protected void closeAllOpenEMs(EntityManagerFactory emf) {\n+        if (emf == null || !emf.isOpen()) {\n+            return;\n+        }\n+\n+        for (Broker b : ((AbstractBrokerFactory) JPAFacadeHelper.toBrokerFactory(emf)).getOpenBrokers()) {\n+            if (b != null && !b.isClosed()) {\n+                EntityManager em = JPAFacadeHelper.toEntityManager(b);\n+                if (em.getTransaction().isActive()) {\n+                    em.getTransaction().rollback();\n+                }\n+                em.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Delete all instances of the given types using bulk delete queries, but do not close any open entity managers.\n+     */\n+    protected void clear(EntityManagerFactory emf, Class<?>... types) {\n+        if (emf == null || types.length == 0) {\n+            return;\n+        }\n+\n+        List<ClassMetaData> metas = new ArrayList<ClassMetaData>(types.length);\n+        for (Class<?> c : types) {\n+            ClassMetaData meta = JPAFacadeHelper.getMetaData(emf, c);\n+            if (meta != null) {\n+                metas.add(meta);\n+            }\n+        }\n+        clear(emf, false, metas.toArray(new ClassMetaData[metas.size()]));\n+    }\n+\n+    /**\n+     * Delete all instances of the persistent types registered with the given factory using bulk delete queries, after\n+     * first closing all open entity managers (and rolling back any open transactions).\n+     */\n+    protected void clear(EntityManagerFactory emf) {\n+        if (emf == null) {\n+            return;\n+        }\n+        clear(emf, true, ((OpenJPAEntityManagerFactorySPI) emf).getConfiguration().getMetaDataRepositoryInstance()\n+            .getMetaDatas());\n+    }\n+\n+    /**\n+     * Delete all instances of the given types using bulk delete queries.\n+     * \n+     * @param emf\n+     *            The EntityManagerFactory to use. A new EntityManager will be created from this EMF and used to execute\n+     *            bulk updates.\n+     * @param closeEMs\n+     *            Whether any open EMs should be closed\n+     * @param types\n+     *            the types that will be cleared.\n+     */\n+    private void clear(EntityManagerFactory emf, boolean closeEMs, ClassMetaData... types) {\n+        if (emf == null || types.length == 0) {\n+            return;\n+        }\n+\n+        // prevent deadlock by closing the open entity managers\n+        // and rolling back any open transactions\n+        // before issuing delete statements on a new entity manager.\n+        if (closeEMs) {\n+            closeAllOpenEMs(emf);\n+        }\n+        if (retainDataOnTearDown) {\n+            return;\n+        }\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        for (ClassMetaData meta : types) {\n+            if (!meta.isMapped() || meta.isEmbeddedOnly()\n+                || Modifier.isAbstract(meta.getDescribedType().getModifiers()) \n+                && !isBaseManagedInterface(meta, types)) {\n+                continue;\n+            }\n+            em.createQuery(\"DELETE FROM \" + meta.getTypeAlias() + \" o\").executeUpdate();\n+        }\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    /**\n+     * Return the entity name for the given type.\n+     */\n+    protected String entityName(EntityManagerFactory emf, Class<?> c) {\n+        ClassMetaData meta = JPAFacadeHelper.getMetaData(emf, c);\n+        return (meta == null) ? null : meta.getTypeAlias();\n+    }\n+\n+    /**\n+     * Determines if the class associated with the provided {@link ClassMetaData} is a managed interface and does not\n+     * extend another managed interface.\n+     * \n+     * @param meta\n+     *            {@link ClassMetaData} for the class to examine\n+     * @param types\n+     *            array of class meta data for persistent types\n+     * @return true if the {@link ClassMetaData} is for an interface and the interface does not extend another managed\n+     *         interface\n+     */\n+    private boolean isBaseManagedInterface(ClassMetaData meta, ClassMetaData... types) {\n+\n+        if (Modifier.isInterface(meta.getDescribedType().getModifiers()) && !isExtendedManagedInterface(meta, types)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Determines if the class associated with the provided {@link ClassMetaData} is an interface and if it extends\n+     * another managed interface.\n+     * \n+     * @param meta\n+     *            {@link ClassMetaData} for the class to examine\n+     * @param types\n+     *            array of class meta data for persistent types\n+     * @return true if the {@link ClassMetaData} is for an interface and the interface extends another managed interface\n+     */\n+    private boolean isExtendedManagedInterface(ClassMetaData meta, ClassMetaData... types) {\n+\n+        if (!Modifier.isInterface(meta.getDescribedType().getModifiers())) {\n+            return false;\n+        }\n+\n+        // Run through the interface this class extends. If any of them\n+        // are managed/have class metadata, return true.\n+        Class<?>[] ifaces = meta.getDescribedType().getInterfaces();\n+        for (int i = 0; ifaces != null && i < ifaces.length; i++) {\n+            for (ClassMetaData meta2 : types) {\n+                if (ifaces[i].equals(meta2.getDescribedType())) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public static void assertNotEquals(Object o1, Object o2) {\n+        if (o1 == o2) {\n+            fail(\"expected args to be different; were the same instance.\");\n+        } else if (o1 == null || o2 == null) {\n+            return;\n+        } else if (o1.equals(o2)) {\n+            fail(\"expected args to be different; compared equal.\");\n+        }\n+    }\n+\n+    /**\n+     * Round-trip a serializable object to bytes.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> T roundtrip(T o) throws ClassNotFoundException, IOException {\n+        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream(bytes);\n+        out.writeObject(o);\n+        out.flush();\n+        ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(bytes.toByteArray()));\n+        return (T) in.readObject();\n+    }\n+\n+    // ================================================\n+    // Utility methods for exception handling\n+    // ================================================\n+    /**\n+     * Asserts that the given targetType is assignable from given actual Throwable.\n+     */\n+    protected void assertException(final Throwable actual, Class<?> targetType) {\n+        assertException(actual, targetType, null);\n+    }\n+\n+    /**\n+     * Asserts that the given targetType is assignable from given actual Throwable. Asserts that the nestedType is \n+     * nested (possibly recursively) within the given actual Throwable.\n+     *\n+     * @param actual\n+     *            is the actual throwable to be tested\n+     * @param targetType\n+     *            is expected type or super type of actual. If null, then the check is omitted.\n+     * @param nestedTargetType\n+     *            is expected type of exception nested within actual. If null this search is omitted.\n+     *\n+     */\n+    protected void assertException(final Throwable actual, Class<?> targetType, Class<?> nestedTargetType) {\n+        assertNotNull(actual);\n+        Class<?> actualType = actual.getClass();\n+        if (targetType != null && !targetType.isAssignableFrom(actualType)) {\n+            actual.printStackTrace();\n+            fail(targetType.getName() + \" is not assignable from \" + actualType.getName());\n+        }\n+\n+        if (nestedTargetType != null) {\n+            Throwable nested = actual.getCause();\n+            Class<?> nestedActualType = (nested == null) ? null : nested.getClass();\n+            while (nestedActualType != null) {\n+                if (nestedTargetType.isAssignableFrom(nestedActualType)) {\n+                    return;\n+                } else {\n+                    Throwable next = nested.getCause();\n+                    if (next == null || next == nested) {\n+                        break;\n+                    }\n+                    nestedActualType = next.getClass();\n+                    nested = next;\n+                }\n+            }\n+            actual.printStackTrace();\n+            fail(\"No nested type \" + nestedTargetType + \" in \" + actual);\n+        }\n+    }\n+\n+    /**\n+     * Asserts that the given targetType is assignable from given actual Throwable and that the exception message\n+     * contains the specified message or message fragments.\n+     */\n+    protected void assertExceptionMessage(final Throwable actual, Class<?> targetType, String... messages) {\n+        assertException(actual, targetType, null);\n+        assertMessage(actual, messages);\n+    }\n+\n+    /**\n+     * Assert that each of given keys are present in the message of the given Throwable.\n+     */\n+    protected void assertMessage(Throwable actual, String... keys) {\n+        if (actual == null || keys == null) {\n+            return;\n+        }\n+        String message = actual.getMessage();\n+        for (String key : keys) {\n+            assertTrue(key + \" is not in \" + message, message.contains(key));\n+        }\n+    }\n+\n+    public void printException(Throwable t) {\n+        printException(t, 2);\n+    }\n+\n+    public void printException(Throwable t, int tab) {\n+        if (t == null) {\n+            return;\n+        }\n+        for (int i = 0; i < tab * 4; i++) {\n+            System.out.print(\" \");\n+        }\n+        String sqlState =\n+            (t instanceof SQLException) ? \"(SQLState=\" + ((SQLException) t).getSQLState() + \":\" + t.getMessage() + \")\"\n+                : \"\";\n+        System.out.println(t.getClass().getName() + sqlState);\n+        if (t.getCause() == t) {\n+            return;\n+        }\n+        printException(t.getCause(), tab + 2);\n+    }\n+\n+    /**\n+     * Overrides to allow tests annotated with @AllowFailure to fail. If the test is in error then the normal pathway is\n+     * executed.\n+     */\n+    @Override\n+    public void runBare() throws Throwable {\n+        if (!isRunsOnCurrentPlatform()) {\n+            return;\n+        }\n+        runBare(getAllowFailure());\n+    }\n+\n+    protected void runBare(AllowFailure allowFailureAnnotation) throws Throwable {\n+        boolean allowFailureValue = allowFailureAnnotation == null ? false : allowFailureAnnotation.value();\n+\n+        if (allowFailureValue) {\n+            if (ALLOW_FAILURE_IGNORE.equalsIgnoreCase(allowFailureConfig)) {\n+                return; // skip this test\n+            } else {\n+                try {\n+                    super.runBare();\n+                } catch (Throwable t) {\n+                    if (ALLOW_FAILURE_LOG.equalsIgnoreCase(allowFailureConfig)) {\n+                        System.err.println(\"*** FAILED (but ignored): \" + this);\n+                        System.err.println(\"***              Reason : \" + allowFailureAnnotation.message());\n+                        System.err.println(\"Stacktrace of failure\");\n+                        t.printStackTrace();\n+                    } else {\n+                        throw t;\n+                    }\n+                }\n+            }\n+        } else {\n+            super.runBare();\n+        }\n+    }\n+\n+    /**\n+     * Affirms if the test case or the test method is annotated with\n+     * \n+     * @AllowFailure. Method level annotation has higher precedence than Class level annotation.\n+     */\n+    protected AllowFailure getAllowFailure() {\n+        try {\n+            Method runMethod = getClass().getMethod(getName(), (Class[]) null);\n+            AllowFailure anno = runMethod.getAnnotation(AllowFailure.class);\n+            if (anno != null) {\n+                return anno;\n+            }\n+        } catch (SecurityException e) {\n+            // ignore\n+        } catch (NoSuchMethodException e) {\n+            // ignore\n+        }\n+        return getClass().getAnnotation(AllowFailure.class);\n+    }\n+\n+    /**\n+     * Affirms if either this test has been annotated with @DatabasePlatform and at least one of the specified driver is\n+     * available in the classpath, or no such annotation is used.\n+     * \n+     */\n+    protected boolean isRunsOnCurrentPlatform() {\n+        DatabasePlatform anno = getClass().getAnnotation(DatabasePlatform.class);\n+        if (anno == null) {\n+            return true;\n+        }\n+        if (anno != null) {\n+            String value = anno.value();\n+            if (value == null || value.trim().length() == 0) {\n+                return true;\n+            }\n+            String[] drivers = value.split(\"\\\\,\");\n+            for (String driver : drivers) {\n+                try {\n+                    Class.forName(driver.trim(), false, Thread.currentThread().getContextClassLoader());\n+                    return true;\n+                } catch (Throwable t) {\n+                    // ignore\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Determines whether specified platform is the target database platform in use by the test framework.\n+     * \n+     * @param target\n+     *            platform name (derby, db2, oracle, etc.)\n+     * @return true if the specified platform matches the platform in use\n+     */\n+    public boolean isTargetPlatform(String target) {\n+        String url = getPlatform();\n+        return url != null && url.indexOf(target) != -1;\n+    }\n+\n+    /**\n+     * Returns the platform in use by the test framework\n+     * \n+     * @return the database platform\n+     */\n+    public String getPlatform() {\n+        return System.getProperty(\"platform\", \"derby\");\n+    }\n+\n+}"},{"sha":"02a6ec0a66d394fc2ffdbcf075f869fb7ad3b4cb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java?ref=89a7f53db0e27a1f97be650fb56574dbc6bf261a","patch":"@@ -57,7 +57,7 @@\n  * If a extended test does not want cached EntityManagerFactory\n  * then it must specify FRESH_EMF as one of the arguments of #setUp(Object[]).\n  * \n- * \n+ * @deprecated use AbstractEMFCacheTestCase or AbstractPersistenceTestCase instead\n  */\n public abstract class PersistenceTestCase\n     extends TestCase {"},{"sha":"f9f3a2922b6be8de8df75d085dce0c3dc5fbeb5d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java?ref=89a7f53db0e27a1f97be650fb56574dbc6bf261a","patch":"@@ -37,7 +37,7 @@\n  *   \n  */\n public abstract class SingleEMFTestCase\n-    extends PersistenceTestCase {\n+    extends AbstractCachedEMFTestCase  {\n \n     protected OpenJPAEntityManagerFactorySPI emf;\n "},{"sha":"9f3200ff3aa778647de3f0bbc1f14b5ce850730c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestPersistenceUnitWithoutXSD.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestPersistenceUnitWithoutXSD.java","raw_url":"https://github.com/apache/openjpa/raw/89a7f53db0e27a1f97be650fb56574dbc6bf261a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestPersistenceUnitWithoutXSD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestPersistenceUnitWithoutXSD.java?ref=89a7f53db0e27a1f97be650fb56574dbc6bf261a","patch":"@@ -20,11 +20,12 @@\n \n import javax.persistence.EntityManagerFactory;\n \n+import org.apache.openjpa.persistence.test.AbstractCachedEMFTestCase;\n import org.apache.openjpa.persistence.test.PersistenceTestCase;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n import org.apache.openjpa.enhance.PCEnhancer;\n \n-public class TestPersistenceUnitWithoutXSD extends PersistenceTestCase {\n+public class TestPersistenceUnitWithoutXSD extends AbstractCachedEMFTestCase {\n \n     public void testPersistenceUnitWithoutXSD() {\n         EntityManagerFactory emf = OpenJPAPersistence"}]}

