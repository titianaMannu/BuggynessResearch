{"sha":"89b296fd544c25a36d0abb11f6cd0b6333542068","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg5YjI5NmZkNTQ0YzI1YTM2ZDBhYmIxMWY2Y2QwYjYzMzM1NDIwNjg=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-05-29T21:53:51Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-05-29T21:53:51Z"},"message":"OPENJPA-610: OpenJPA internal exceptions are heuristically translated at facade-level to JPA-defined exception subtypes\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@661498 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d7266c8453c909dbe5ccff243d17a64e9d89dcc2","url":"https://api.github.com/repos/apache/openjpa/git/trees/d7266c8453c909dbe5ccff243d17a64e9d89dcc2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/89b296fd544c25a36d0abb11f6cd0b6333542068","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/89b296fd544c25a36d0abb11f6cd0b6333542068","html_url":"https://github.com/apache/openjpa/commit/89b296fd544c25a36d0abb11f6cd0b6333542068","comments_url":"https://api.github.com/repos/apache/openjpa/commits/89b296fd544c25a36d0abb11f6cd0b6333542068/comments","author":null,"committer":null,"parents":[{"sha":"48b1fb5a370ea5969116332cb486c95e4934c77d","url":"https://api.github.com/repos/apache/openjpa/commits/48b1fb5a370ea5969116332cb486c95e4934c77d","html_url":"https://github.com/apache/openjpa/commit/48b1fb5a370ea5969116332cb486c95e4934c77d"}],"stats":{"total":72,"additions":55,"deletions":17},"files":[{"sha":"4f1121ca1fe401a6fc2400deb38cf8949a740b68","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java","status":"modified","additions":8,"deletions":14,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/89b296fd544c25a36d0abb11f6cd0b6333542068/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java","raw_url":"https://github.com/apache/openjpa/raw/89b296fd544c25a36d0abb11f6cd0b6333542068/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java?ref=89b296fd544c25a36d0abb11f6cd0b6333542068","patch":"@@ -438,28 +438,22 @@ public void verifyDeleteDetectionOnRefresh(boolean useDataCache,\n \t\tassertEquals(useDataCache, dataCache.contains(PObject.class, oid));\r\n \t\t\r\n \t\t/**\r\n-\t\t * refresh behavior depends on current lock. Having no lock will refresh\r\n-\t\t * the instance (wrongly) while any other lock will attempt to fetch the \r\n-\t\t * instance from database (correctly) raising EntityNotFoundException.\r\n+\t\t * refresh behavior no more depends on current lock. Refresh\r\n+\t\t * will always attempt to fetch the instance from database \r\n+\t\t * raising EntityNotFoundException.\r\n \t\t *   \r\n \t\t */\r\n \t\tem.getTransaction().begin();\r\n \t\tif (lock != null)\r\n \t\t\tem.getFetchPlan().setReadLockMode(lock);\r\n \t\ttry {\r\n \t\t\tem.refresh(pc);\r\n-\t\t\tif (lock == null) {\r\n-\t\t\t\tassertEquals(useDataCache ? MARKER_DATACACHE : MARKER_CACHE, pc.getName());\r\n-\t\t\t} else {\r\n-\t\t\t\tfail(\"expected EntityNotFoundException for PObject:\" + oid);\r\n-\t\t\t}\r\n+\t\t\tfail(\"expected EntityNotFoundException for PObject:\" + oid);\r\n+\t\t} catch (EntityNotFoundException ex) {\r\n+\t\t\t// we are good\r\n \t\t} catch (Exception ex) {\r\n-\t\t\tif (ex instanceof EntityNotFoundException || \r\n-\t\t\t\tex instanceof org.apache.openjpa.persistence.EntityNotFoundException) {\r\n-\t\t\t\tif (lock != null) {\r\n-\t\t\t\t\t// we are good\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n+\t\t\tex.printStackTrace();\r\n+\t\t\tfail(\"expected EntityNotFoundException for PObject:\" + oid);\r\n \t\t} finally {\r\n \t\t\tem.getTransaction().rollback();\r\n \t\t}\r"},{"sha":"55d19e61d1ea535c852fb29c409bf6406bb761b3","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","status":"modified","additions":47,"deletions":3,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/89b296fd544c25a36d0abb11f6cd0b6333542068/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","raw_url":"https://github.com/apache/openjpa/raw/89b296fd544c25a36d0abb11f6cd0b6333542068/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java?ref=89b296fd544c25a36d0abb11f6cd0b6333542068","patch":"@@ -22,7 +22,11 @@\n \n import org.apache.openjpa.kernel.Broker;\n import org.apache.openjpa.util.Exceptions;\n+import org.apache.openjpa.util.NoTransactionException;\n+import org.apache.openjpa.util.ObjectExistsException;\n+import org.apache.openjpa.util.ObjectNotFoundException;\n import org.apache.openjpa.util.OpenJPAException;\n+import org.apache.openjpa.util.OptimisticException;\n import org.apache.openjpa.util.RuntimeExceptionTranslator;\n import org.apache.openjpa.util.StoreException;\n import org.apache.openjpa.util.UserException;\n@@ -167,6 +171,12 @@ private static Throwable translateStoreException(OpenJPAException ke) {\n \n     /**\n      * Translate the given user exception.\n+     * If a {link {@link OpenJPAException#getSubtype() sub type} is set on the \n+     * given exception then a corresponding facade-level exception i.e. the\n+     * exceptions that inherit JPA-defined exceptions is generated.\n+     * If given exception is not further classified to a sub type, then \n+     * an [@link {@link #translateInternalException(OpenJPAException)} attempt}\n+     * is made to translate the given OpenJPAException by its internal cause.\n      */\n     private static Exception translateUserException(OpenJPAException ke) {\n         Exception e;\n@@ -193,13 +203,47 @@ private static Exception translateUserException(OpenJPAException ke) {\n                         getFailedObject(ke), ke.isFatal());\n                 break;\n             default:\n-                e = new org.apache.openjpa.persistence.ArgumentException\n-                    (ke.getMessage(), getNestedThrowables(ke),\n-                        getFailedObject(ke), ke.isFatal());\n+            \te = translateCause(ke);\n         }\n         e.setStackTrace(ke.getStackTrace());\n         return e;\n     }\n+    \n+    /**\n+     * Translate to a facade-level exception if the given exception \n+     *     a) has a cause i.e. one and only nested Throwable \n+     * and b) that cause is one of the known internal exception which has a \n+     *        direct facade-level counterpart \n+     *        (for example, ObjectNotFoundException can be translated to \n+     *         EntityNotFoundException). \n+     * If the above conditions are not met then return generic ArgumentException.\n+     * \n+     * In either case, preserve all the details.\n+     */\n+    private static Exception translateCause(OpenJPAException ke) {\n+    \tThrowable cause = ke.getCause();\n+    \tif (cause instanceof ObjectNotFoundException) {\n+    \t\treturn new EntityNotFoundException(\n+    \t\t        ke.getMessage(), getNestedThrowables(ke),\n+            \t    getFailedObject(ke), ke.isFatal());\n+    \t} else if (cause instanceof ObjectExistsException) {\n+    \t\treturn new EntityExistsException(\n+    \t\t        ke.getMessage(), getNestedThrowables(ke),\n+            \t    getFailedObject(ke), ke.isFatal());\n+    \t} else if (cause instanceof NoTransactionException) {\n+    \t\treturn new TransactionRequiredException(\n+        \t\t    ke.getMessage(), getNestedThrowables(ke),\n+                \tgetFailedObject(ke), ke.isFatal());\n+    \t} else if (cause instanceof OptimisticException) {\n+    \t\treturn new OptimisticLockException(\n+        \t\t    ke.getMessage(), getNestedThrowables(ke),\n+                \tgetFailedObject(ke), ke.isFatal());\n+    \t} else {\n+    \t\treturn new org.apache.openjpa.persistence.ArgumentException(\n+        \t\tke.getMessage(), getNestedThrowables(ke),\n+        \t\tgetFailedObject(ke), ke.isFatal());\n+    \t}\n+    }\n \n     /**\n      * Translate the given general exception."}]}

