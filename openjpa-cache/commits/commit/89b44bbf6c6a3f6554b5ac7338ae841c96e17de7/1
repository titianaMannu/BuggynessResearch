{"sha":"89b44bbf6c6a3f6554b5ac7338ae841c96e17de7","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg5YjQ0YmJmNmM2YTNmNjU1NGI1YWM3MzM4YWU4NDFjOTZlMTdkZTc=","commit":{"author":{"name":"Jody Grassel","email":"jgrassel@apache.org","date":"2012-11-27T20:51:44Z"},"committer":{"name":"Jody Grassel","email":"jgrassel@apache.org","date":"2012-11-27T20:51:44Z"},"message":"OPENJPA-2288: MetaDataRepository should be able to filter classes from other app ClassLoaders in JEE Env\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1414398 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b9561031226e247b66dbd4436bc69d8858e7f7b2","url":"https://api.github.com/repos/apache/openjpa/git/trees/b9561031226e247b66dbd4436bc69d8858e7f7b2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/89b44bbf6c6a3f6554b5ac7338ae841c96e17de7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/89b44bbf6c6a3f6554b5ac7338ae841c96e17de7","html_url":"https://github.com/apache/openjpa/commit/89b44bbf6c6a3f6554b5ac7338ae841c96e17de7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/89b44bbf6c6a3f6554b5ac7338ae841c96e17de7/comments","author":null,"committer":null,"parents":[{"sha":"e0d5b0505f2d0d91e08f6aa6806bbbff80bf59ca","url":"https://api.github.com/repos/apache/openjpa/commits/e0d5b0505f2d0d91e08f6aa6806bbbff80bf59ca","html_url":"https://github.com/apache/openjpa/commit/e0d5b0505f2d0d91e08f6aa6806bbbff80bf59ca"}],"stats":{"total":56,"additions":53,"deletions":3},"files":[{"sha":"4cb6da5ca043a9576f7b4d18ab389d6ef65e7931","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/89b44bbf6c6a3f6554b5ac7338ae841c96e17de7/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","raw_url":"https://github.com/apache/openjpa/raw/89b44bbf6c6a3f6554b5ac7338ae841c96e17de7/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java?ref=89b44bbf6c6a3f6554b5ac7338ae841c96e17de7","patch":"@@ -75,6 +75,7 @@\n     private boolean _metaFactoriesAreStrict = false; \n     private boolean _resetFlushFlagForCascadePersist = true;//OPENJPA-2051\n     private boolean _singletonLifecycleEventManager = false;\n+    private boolean _filterPCRegistryClasses = false; // OPENJPA-2288\n     \n     /**\n      * Whether to require exact identity value types when creating object\n@@ -713,4 +714,18 @@ public boolean isSingletonLifecycleEventManager() {\n     public void setSingletonLifecycleEventManager(boolean singleton) {\n         _singletonLifecycleEventManager = singleton;\n     }\n+    \n+    /**\n+     * Whether the metadata processor should filter classes dispatched by the PCRegistry listener system.\n+     **/\n+    public boolean  getFilterPCRegistryClasses() {\n+        return _filterPCRegistryClasses; \n+    }\n+     \n+    /**\n+     * Whether the metadata processor should filter classes dispatched by the PCRegistry listener system.\n+     **/\n+    public void setFilterPCRegistryClasses(boolean bool) {\n+        _filterPCRegistryClasses = bool;\n+    }\n }"},{"sha":"56b09a1261de7dc95f538930ba9aa5f4fdaaf236","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":38,"deletions":3,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/89b44bbf6c6a3f6554b5ac7338ae841c96e17de7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/89b44bbf6c6a3f6554b5ac7338ae841c96e17de7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=89b44bbf6c6a3f6554b5ac7338ae841c96e17de7","patch":"@@ -162,6 +162,9 @@\n     // Entities.\n     private boolean _logEnhancementLevel = true;\n \n+    // A boolean used to decide whether to filter Class<?> objects submitted by the PCRegistry listener system\n+    private boolean _filterRegisteredClasses = false;\n+    \n     /**\n      * Default constructor. Configure via {@link Configurable}.\n      */\n@@ -1635,10 +1638,41 @@ private void loadRegisteredClassMetaData(ClassLoader envLoader) {\n         Collection<String> pcNames = getPersistentTypeNames(false, envLoader);\n         Collection<Class<?>> failed = null;\n         for (int i = 0; i < reg.length; i++) {\n-            // don't process types that aren't listed by the user; may belong\n-            // to a different persistence unit\n-            if (pcNames != null && !pcNames.isEmpty() && !pcNames.contains(reg[i].getName()))\n+            // Don't process types that aren't listed by the user; it may belong to a different persistence unit.\n+            if (pcNames != null && !pcNames.isEmpty() && !pcNames.contains(reg[i].getName())) {\n                 continue;\n+            }\n+            \n+            // If the compatibility option \"filterPCRegistryClasses\" is enabled, then verify that the type is\n+            // accessible to the envLoader/Thread Context ClassLoader\n+            if (_filterRegisteredClasses) {\n+                Log log = (_conf == null) ? null : _conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n+                ClassLoader loadCL = (envLoader != null) ?\n+                        envLoader :\n+                        AccessController.doPrivileged(J2DoPrivHelper.getContextClassLoaderAction());\n+                        \n+                try {\n+                    Class<?> classFromAppClassLoader = Class.forName(reg[i].getName(), true, loadCL);\n+                    \n+                    if (!reg[i].equals(classFromAppClassLoader)) {\n+                        // This is a class that belongs to a ClassLoader not associated with the Application,\n+                        // so it should be processed.\n+                        if (log != null && log.isTraceEnabled()) {\n+                            log.trace(\n+                                \"Metadata Repository will ignore Class \" + reg[i].getName() + \n+                                \", since it originated from a ClassLoader not associated with the application.\");\n+                        }\n+                        continue;\n+                    }\n+                } catch (ClassNotFoundException cnfe) {\n+                    // Catch exception and log its occurrence, and permit MDR processing to continue to preserve\n+                    // original behavior.\n+                    if (log != null && log.isTraceEnabled()) {\n+                        log.trace(\"The Class \" + reg[i].getName() + \" was identified as a persistent class \" +\n+                            \"by configuration, but the Class could not be found.\");\n+                    }\n+                }\n+            }\n \n             checkEnhancementLevel(reg[i]);\n             try {\n@@ -1878,6 +1912,7 @@ public void setMetaModel(ClassMetaData meta, Class<?> m2) {\n     public void setConfiguration(Configuration conf) {\n         _conf = (OpenJPAConfiguration) conf;\n         _log = _conf.getLog(OpenJPAConfiguration.LOG_METADATA);\n+        _filterRegisteredClasses = _conf.getCompatibilityInstance().getFilterPCRegistryClasses();\n     }\n \n     public void startConfiguration() {"}]}

