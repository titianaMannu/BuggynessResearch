{"sha":"89e7531398352ba214faa845098ba773562bdc70","node_id":"MDY6Q29tbWl0MjA2MzY0Ojg5ZTc1MzEzOTgzNTJiYTIxNGZhYTg0NTA5OGJhNzczNTYyYmRjNzA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-10T00:16:25Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-07-10T00:16:25Z"},"message":"Initialize Database Prodcut/Vendor name to empty string to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@675387 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5263ad3f2776fe7e2b5c860033468684e36c6d53","url":"https://api.github.com/repos/apache/openjpa/git/trees/5263ad3f2776fe7e2b5c860033468684e36c6d53"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/89e7531398352ba214faa845098ba773562bdc70","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/89e7531398352ba214faa845098ba773562bdc70","html_url":"https://github.com/apache/openjpa/commit/89e7531398352ba214faa845098ba773562bdc70","comments_url":"https://api.github.com/repos/apache/openjpa/commits/89e7531398352ba214faa845098ba773562bdc70/comments","author":null,"committer":null,"parents":[{"sha":"c7a906314641bc2a3f7d997422028686938c1d55","url":"https://api.github.com/repos/apache/openjpa/commits/c7a906314641bc2a3f7d997422028686938c1d55","html_url":"https://github.com/apache/openjpa/commit/c7a906314641bc2a3f7d997422028686938c1d55"}],"stats":{"total":62,"additions":23,"deletions":39},"files":[{"sha":"69091419f75113f3dfd8e0774d2043abb8d32e9a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":23,"deletions":39,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/89e7531398352ba214faa845098ba773562bdc70/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/89e7531398352ba214faa845098ba773562bdc70/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=89e7531398352ba214faa845098ba773562bdc70","patch":"@@ -72,8 +72,8 @@\n     protected static final String useKeepExclusiveLockClause\r\n         = \"USE AND KEEP EXCLUSIVE LOCKS\";\r\n     protected static final String forReadOnlyClause = \"FOR READ ONLY\";\r\n-    protected String databaseProductName = null;\r\n-    protected String databaseProductVersion = null;\r\n+    protected String databaseProductName = \"\";\r\n+    protected String databaseProductVersion = \"\";\r\n     protected int maj = 0;\r\n     protected int min = 0;\r\n     \r\n@@ -242,8 +242,8 @@ public void connectedConfiguration(Connection conn) throws SQLException {\n     \tsuper.connectedConfiguration(conn);\r\n \r\n     \tDatabaseMetaData metaData = conn.getMetaData();\r\n-        databaseProductName = metaData.getDatabaseProductName();\r\n-        databaseProductVersion = metaData.getDatabaseProductVersion();\r\n+        databaseProductName = nullSafe(metaData.getDatabaseProductName());\r\n+        databaseProductVersion = nullSafe(metaData.getDatabaseProductVersion());\r\n         \r\n         // Determine the type of DB2 database\r\n         // First check for AS/400\r\n@@ -384,51 +384,32 @@ protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n     }\r\n \r\n     public boolean isDB2UDBV82OrLater() {\r\n-        boolean match = false;\r\n-        if (databaseProductName != null &&\r\n-            (databaseProductVersion.indexOf(\"SQL\") != -1\r\n-            || databaseProductName.indexOf(\"DB2/\") != -1)\r\n-            && ((maj == 8 && min >= 2) || (maj >= 9)))\r\n-            match = true;\r\n-        return match;\r\n+        return (databaseProductVersion.indexOf(\"SQL\") != -1\r\n+             || databaseProductName.indexOf(\"DB2/\") != -1)\r\n+             && ((maj == 8 && min >= 2) || (maj >= 9));\r\n     }\r\n \r\n     public boolean isDB2ZOSV8xOrLater() {\r\n-       boolean match = false;\r\n-       if (databaseProductName != null &&\r\n-           (databaseProductVersion.indexOf(\"DSN\") != -1\r\n-           || databaseProductName.indexOf(\"DB2/\") == -1)\r\n-           && maj >= 8)\r\n-           match = true;\r\n-        return match;\r\n+       return (databaseProductVersion.indexOf(\"DSN\") != -1\r\n+            || databaseProductName.indexOf(\"DB2/\") == -1)\r\n+            && maj >= 8;\r\n+           \r\n     }\r\n \r\n     public boolean isDB2ISeriesV5R3OrEarlier() {\r\n-       boolean match = false;\r\n-       if (databaseProductName != null &&\r\n-           databaseProductName.indexOf(\"AS\") != -1\r\n-           && ((maj == 5 && min <=3) || maj < 5))\r\n-           match = true;\r\n-       return match;\r\n+       return (databaseProductName.indexOf(\"AS\") != -1\r\n+           && ((maj == 5 && min <=3) || maj < 5));\r\n     }\r\n \r\n     public boolean isDB2ISeriesV5R4OrLater() {\r\n-       boolean match = false;\r\n-       if (databaseProductName != null &&\r\n-           databaseProductName.indexOf(\"AS\") != -1\r\n-           && (maj >=6 || (maj == 5 && min >=4)))\r\n-           match = true;\r\n-      return match;\r\n+       return databaseProductName.indexOf(\"AS\") != -1\r\n+           && (maj >=6 || (maj == 5 && min >=4));\r\n     }\r\n \r\n     public boolean isDB2UDBV81OrEarlier() {\r\n-        boolean match = false;\r\n-        if (databaseProductName != null &&\r\n-            (databaseProductVersion.indexOf(\"SQL\") != -1 \r\n-            || databaseProductName.indexOf(\"DB2/\") != -1) &&\r\n-            ((maj == 8 && min <= 1) || maj < 8))\r\n-            match = true;\r\n-        return match;\r\n+        return (databaseProductVersion.indexOf(\"SQL\") != -1 \r\n+            || databaseProductName.indexOf(\"DB2/\") != -1) \r\n+            && ((maj == 8 && min <= 1) || maj < 8);\r\n     }\r\n \r\n     /** Get the version Major/Minor for the ISeries\r\n@@ -456,8 +437,7 @@ private void getProductVersionMajorMinorForISeries() {\n                     String s2 =  stringtokenizer.nextToken();\r\n                     min = Integer.parseInt(s2);\r\n                 }\r\n-            }\r\n-            else {\r\n+            } else {\r\n                 index = databaseProductVersion.indexOf('0');\r\n                 if (index != -1) {\r\n                     String s = databaseProductVersion.substring(index);\r\n@@ -844,4 +824,8 @@ public void createIndexIfNecessary(Schema schema, String table,\n             idx.addColumn(pkColumn);\r\n         }\r\n     }\r\n+    \r\n+    String nullSafe(String s) {\r\n+    \treturn s == null ? \"\" : s;\r\n+    }\r\n }\r"}]}

