{"sha":"8a0f2da8fd57cd2bd129e56b66a672d724efe13e","node_id":"MDY6Q29tbWl0MjA2MzY0OjhhMGYyZGE4ZmQ1N2NkMmJkMTI5ZTU2YjY2YTY3MmQ3MjRlZmUxM2U=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-12-02T05:45:56Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-12-02T05:45:56Z"},"message":"OPENJPA-931: derived identity support \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@886055 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a157a463a5a50edf6c57e25c05041ff9081c2f66","url":"https://api.github.com/repos/apache/openjpa/git/trees/a157a463a5a50edf6c57e25c05041ff9081c2f66"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8a0f2da8fd57cd2bd129e56b66a672d724efe13e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8a0f2da8fd57cd2bd129e56b66a672d724efe13e","html_url":"https://github.com/apache/openjpa/commit/8a0f2da8fd57cd2bd129e56b66a672d724efe13e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8a0f2da8fd57cd2bd129e56b66a672d724efe13e/comments","author":null,"committer":null,"parents":[{"sha":"2353db803d1f862a2b1a30052cc56346ac59cf06","url":"https://api.github.com/repos/apache/openjpa/commits/2353db803d1f862a2b1a30052cc56346ac59cf06","html_url":"https://github.com/apache/openjpa/commit/2353db803d1f862a2b1a30052cc56346ac59cf06"}],"stats":{"total":12,"additions":11,"deletions":1},"files":[{"sha":"17d6fc18f339ca64c0972952a1ca25dc207a3813","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8a0f2da8fd57cd2bd129e56b66a672d724efe13e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/8a0f2da8fd57cd2bd129e56b66a672d724efe13e/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=8a0f2da8fd57cd2bd129e56b66a672d724efe13e","patch":"@@ -996,7 +996,7 @@ public Object getJoinValue(Object fieldVal, Column col, JDBCStore store) {\n \n         ClassMapping relmapping = field.getTypeMapping();\n         Joinable j = field.getTypeMapping().assertJoinable(col);\n-        if (ImplHelper.isManageable(fieldVal))\n+        if (ImplHelper.isManageable(fieldVal) && !field.getDefiningMetaData().useIdClassFromParent())\n             fieldVal = store.getContext().getObjectId(fieldVal);\n         if (fieldVal instanceof OpenJPAId)\n             fieldVal = ((OpenJPAId) fieldVal).getIdObject();"},{"sha":"10e6d95a9e21212eea04961fbdc4b82295a79d9a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/8a0f2da8fd57cd2bd129e56b66a672d724efe13e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java","raw_url":"https://github.com/apache/openjpa/raw/8a0f2da8fd57cd2bd129e56b66a672d724efe13e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java?ref=8a0f2da8fd57cd2bd129e56b66a672d724efe13e","patch":"@@ -605,6 +605,11 @@ public void findObj6() {\n         Person3 p0 = persons3.get(\"f_1\");\n         Person3 p1 = p.getMedical().getPatient();\n         assertEquals(p, p1);\n+        em.clear();\n+        \n+        MedicalHistory3 m = em.find(MedicalHistory3.class, new PersonId3(\"f_1\", \"l_1\"));\n+        MedicalHistory3 m0 = medicals3.get(\"f_1\");\n+        assertEquals(m, m0);\n     }\n \n     public void queryObj6() { \n@@ -665,6 +670,11 @@ public void findObj7() {\n         Person4 p0 = persons4.get(\"f_1\");\n         Person4 p1 = p.getMedical().getPatient();\n         assertEquals(p1, p);\n+        em.clear();\n+        \n+        MedicalHistory4 m = em.find(MedicalHistory4.class, new PersonId4(\"f_1\", \"l_1\"));\n+        MedicalHistory4 m0 = medicals4.get(\"f_1\");\n+        assertEquals(m, m0);\n     }\n \n     public void queryObj7() {"}]}

