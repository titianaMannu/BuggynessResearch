{"sha":"8a811f69ea4908955a2c07699110e51135098700","node_id":"MDY6Q29tbWl0MjA2MzY0OjhhODExZjY5ZWE0OTA4OTU1YTJjMDc2OTkxMTBlNTExMzUwOTg3MDA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-14T22:16:45Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-02-14T22:16:45Z"},"message":"OPENJPA-515 Add support for targeted query via query hints\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@627888 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"102deac6e7de7f88588f2770a7033facbf24ee38","url":"https://api.github.com/repos/apache/openjpa/git/trees/102deac6e7de7f88588f2770a7033facbf24ee38"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8a811f69ea4908955a2c07699110e51135098700","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8a811f69ea4908955a2c07699110e51135098700","html_url":"https://github.com/apache/openjpa/commit/8a811f69ea4908955a2c07699110e51135098700","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8a811f69ea4908955a2c07699110e51135098700/comments","author":null,"committer":null,"parents":[{"sha":"caa400cbb335869941d547038008b23f6a7769d5","url":"https://api.github.com/repos/apache/openjpa/commits/caa400cbb335869941d547038008b23f6a7769d5","html_url":"https://github.com/apache/openjpa/commit/caa400cbb335869941d547038008b23f6a7769d5"}],"stats":{"total":117,"additions":94,"deletions":23},"files":[{"sha":"fa86836d345e02b3983f7b7087bd9af85f8cad01","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBrokerImpl.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/8a811f69ea4908955a2c07699110e51135098700/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/8a811f69ea4908955a2c07699110e51135098700/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBrokerImpl.java?ref=8a811f69ea4908955a2c07699110e51135098700","patch":"@@ -50,6 +50,7 @@\n \t * operating set. The slice is assigned only if a StateManager has never\r\n \t * been assigned before.\r\n \t */\r\n+\t@Override\r\n \tpublic OpenJPAStateManager persist(Object pc, Object id, boolean explicit,\r\n \t\t\tOpCallbacks call) {\r\n \t\tOpenJPAStateManager sm = getStateManager(pc);\r"},{"sha":"75c20266597545f8b01d27ab2fde267b6b21875d","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedConfiguration.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/8a811f69ea4908955a2c07699110e51135098700/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/8a811f69ea4908955a2c07699110e51135098700/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedConfiguration.java?ref=8a811f69ea4908955a2c07699110e51135098700","patch":"@@ -38,11 +38,11 @@\n \t/**\r\n \t * Gets the active slice identifiers. This list is determined by the\r\n \t * configuration properties either by explicit listing in \r\n-\t * <code>slice.Names</code> property or by scanning <code>slice.*.*</code>\r\n-\t * properties.\r\n+\t * <code>openjpa.slice.Names</code> property or by scanning \r\n+\t * <code>openjpa.slice.*.*</code> properties.\r\n \t * <br> \r\n \t * The ordering of the slice identifiers is determined when they are\r\n-\t * specified explicitly in <code>slice.Names</code> property or \r\n+\t * specified explicitly in <code>openjpa.slice.Names</code> property or \r\n \t * ordered alphabetically when found by scanning the properties.\r\n \t * <br>\r\n \t * This list always returns the identifiers that are <em>active</em>, slices\r\n@@ -60,7 +60,7 @@\n \t/**\r\n \t * Gets the slices of given status.\r\n \t * @param statuses list of status flags. If null, returns all slices \r\n-\t * irrespective of status;\r\n+\t * irrespective of status.\r\n \t */\r\n \tList<Slice> getSlices(Slice.Status...statuses);\r\n \t\r"},{"sha":"f5750fe9d9f743061549d3abe6b5cd5d775ae792","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributionPolicy.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/8a811f69ea4908955a2c07699110e51135098700/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributionPolicy.java","raw_url":"https://github.com/apache/openjpa/raw/8a811f69ea4908955a2c07699110e51135098700/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributionPolicy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributionPolicy.java?ref=8a811f69ea4908955a2c07699110e51135098700","patch":"@@ -33,13 +33,14 @@\n \t * Gets the name of the slice where a given instance will be stored.\r\n \t *  \r\n \t * @param pc The newly persistent or to-be-merged object. \r\n-\t * @param slices list of names of the configured slices. The ordering of \r\n-\t * the list is either explicit (by the <code>slice.Names</code> property)\r\n-\t * or implicit i.e. alphabetic if <code>slice.Names</code> is unspecified.  \r\n+\t * @param slices list of names of the active slices. The ordering of \r\n+\t * the list is either explicit <code>openjpa.slice.Names</code> property\r\n+\t * or implicit i.e. alphabetic order of available identifiers if \r\n+\t * <code>openjpa.slice.Names</code> is unspecified.  \r\n \t * @param context generic persistence context managing the given instance.\r\n \t * \r\n \t * @return identifier of the slice. This name must match one of the\r\n-\t * configured slice names. \r\n+\t * given slice names. \r\n \t * @see DistributedConfiguration#getActiveSliceNames()\r\n \t */\r\n \tString distribute(Object pc, List<String> slices, Object context);\r"},{"sha":"4f4a89dbfc54bc516711bf13857cd832b31131b6","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/ProductDerivation.java","status":"modified","additions":16,"deletions":3,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/8a811f69ea4908955a2c07699110e51135098700/openjpa-slice/src/main/java/org/apache/openjpa/slice/ProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/8a811f69ea4908955a2c07699110e51135098700/openjpa-slice/src/main/java/org/apache/openjpa/slice/ProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/ProductDerivation.java?ref=8a811f69ea4908955a2c07699110e51135098700","patch":"@@ -27,21 +27,34 @@\n /**\r\n  * Derives configuration for Slice.\r\n  * Introduces a specialized BrokerFactory aliased as <code>slice</code>.\r\n- * All Slice specific configuration is prefixed as <code>slice.XXX</code>\r\n+ * All Slice specific configuration is prefixed as \r\n+ * <code>openjpa.slice.*.*</code>\r\n  * \r\n  * @author Pinaki Poddar \r\n  *\r\n  */\r\n public class ProductDerivation extends AbstractProductDerivation implements\r\n \t\tOpenJPAProductDerivation {\r\n-\r\n+    /**\r\n+     * Prefix for all Slice-specific configuration properties. \r\n+     */\r\n+    public static final String PREFIX_SLICE = \"openjpa.slice\";\r\n+    \r\n+    /**\r\n+     * Hint key <code>openjpa.hint.slice.Target </code> to specify a subset of \r\n+     * slices for query. The value corresponding to the key is comma-separated\r\n+     * list of slice identifiers.\r\n+     *  \r\n+     */\r\n+    public static final String HINT_TARGET  = \"openjpa.hint.slice.Target\";\r\n+    \r\n \t@SuppressWarnings(\"unchecked\")\r\n \tpublic void putBrokerFactoryAliases(Map m) {\r\n \t\tm.put(\"slice\", DistributedJDBCBrokerFactory.class.getName());\r\n \t}\r\n \r\n \tpublic String getConfigurationPrefix() {\r\n-\t\treturn \"openjpa.slice\";\r\n+\t\treturn PREFIX_SLICE;\r\n \t}\r\n \r\n \tpublic int getType() {\r"},{"sha":"9aa8ed90a1c38f184f701a4f5cdebeec3bc78f5c","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/Slice.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/8a811f69ea4908955a2c07699110e51135098700/openjpa-slice/src/main/java/org/apache/openjpa/slice/Slice.java","raw_url":"https://github.com/apache/openjpa/raw/8a811f69ea4908955a2c07699110e51135098700/openjpa-slice/src/main/java/org/apache/openjpa/slice/Slice.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/Slice.java?ref=8a811f69ea4908955a2c07699110e51135098700","patch":"@@ -21,7 +21,8 @@\n import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n \r\n /**\r\n- * Represents a database slice of immutable logical name.\r\n+ * Represents a database slice of immutable logical name, a configuration and\r\n+ * status.\r\n  * \r\n  * @author Pinaki Poddar \r\n  *\r"},{"sha":"5551eb142ed6cc79d7b74a5ebe5029f960629c62","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/8a811f69ea4908955a2c07699110e51135098700/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/8a811f69ea4908955a2c07699110e51135098700/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java?ref=8a811f69ea4908955a2c07699110e51135098700","patch":"@@ -49,6 +49,7 @@\n import org.apache.openjpa.slice.DistributedBrokerImpl;\r\n import org.apache.openjpa.slice.DistributionPolicy;\r\n import org.apache.openjpa.slice.ExecutorServiceValue;\r\n+import org.apache.openjpa.slice.ProductDerivation;\r\n import org.apache.openjpa.slice.Slice;\r\n import org.apache.openjpa.util.UserException;\r\n \r\n@@ -76,10 +77,10 @@\n     protected ExecutorServiceValue executorServicePlugin;\r\n     protected PluginValue distributionPolicyPlugin;\r\n \r\n-    public static final String PREFIX_SLICE = \"openjpa.slice.\";\r\n-    public static final String PREFIX_OPENJPA = \"openjpa.\";\r\n-    public static final String REGEX_DOT = \"\\\\.\";\r\n     public static final String DOT = \".\";\r\n+    public static final String REGEX_DOT = \"\\\\.\";\r\n+    public static final String PREFIX_SLICE = ProductDerivation.PREFIX_SLICE + DOT;\r\n+    public static final String PREFIX_OPENJPA = \"openjpa.\";\r\n     private static Localizer _loc =\r\n             Localizer.forPackage(DistributedJDBCConfigurationImpl.class);\r\n \r\n@@ -322,10 +323,11 @@ void setSlices(Map original) {\n         if (sliceNames.isEmpty()) {\r\n             throw new UserException(_loc.get(\"slice-none-configured\"));\r\n         } \r\n+        String unit = getPersistenceUnitName(original);\r\n         for (String key : sliceNames) {\r\n             JDBCConfiguration child = new JDBCConfigurationImpl();\r\n             child.fromProperties(createSliceProperties(original, key));\r\n-            child.setId(key);\r\n+            child.setId(unit+DOT+key);\r\n             Slice slice = new Slice(key, child);\r\n             _slices.add(slice);\r\n             if (log.isTraceEnabled())\r"},{"sha":"783beffec2c70d2d5f67417c7f9d29d88ec0f9c5","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreManager.java","status":"modified","additions":31,"deletions":2,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/8a811f69ea4908955a2c07699110e51135098700/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/8a811f69ea4908955a2c07699110e51135098700/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreManager.java?ref=8a811f69ea4908955a2c07699110e51135098700","patch":"@@ -21,6 +21,7 @@\n import java.sql.Connection;\r\n import java.sql.SQLException;\r\n import java.util.ArrayList;\r\n+import java.util.Arrays;\r\n import java.util.BitSet;\r\n import java.util.Collection;\r\n import java.util.HashMap;\r\n@@ -61,6 +62,7 @@\n import org.apache.openjpa.meta.ClassMetaData;\r\n import org.apache.openjpa.meta.FieldMetaData;\r\n import org.apache.openjpa.slice.DistributionPolicy;\r\n+import org.apache.openjpa.slice.ProductDerivation;\r\n import org.apache.openjpa.slice.transaction.DistributedNaiveTransaction;\r\n import org.apache.openjpa.slice.transaction.DistributedTransactionManager;\r\n import org.apache.openjpa.slice.transaction.NaiveTransactionManager;\r\n@@ -275,7 +277,8 @@ public ResultObjectProvider executeExtent(ClassMetaData meta,\n             boolean subclasses, FetchConfiguration fetch) {\r\n         ResultObjectProvider[] tmp = new ResultObjectProvider[_slices.size()];\r\n         int i = 0;\r\n-        for (SliceStoreManager slice : _slices) {\r\n+        List<SliceStoreManager> targets = getTargets(fetch);\r\n+        for (SliceStoreManager slice : targets) {\r\n             tmp[i++] = slice.executeExtent(meta, subclasses, fetch);\r\n         }\r\n         return new MergedResultObjectProvider(tmp);\r\n@@ -371,7 +374,8 @@ public boolean initialize(OpenJPAStateManager sm, PCState state,\n                 return lookup(slice).initialize(sm, state, fetch, edata);\r\n         }\r\n         // not a part of Query result load. Look into the slices till found\r\n-        for (SliceStoreManager slice : _slices) {\r\n+        List<SliceStoreManager> targets = getTargets(fetch);\r\n+        for (SliceStoreManager slice : targets) {\r\n             if (slice.initialize(sm, state, fetch, edata)) {\r\n                 sm.setImplData(slice.getName(), true);\r\n                 return true;\r\n@@ -501,6 +505,31 @@ protected RefCountConnection connectInternal() throws SQLException {\n         DistributedConnection con = new DistributedConnection(list);\r\n         return new RefCountConnection(con);\r\n     }\r\n+    \r\n+    /**\r\n+     * Gets the list of slices mentioned as  \r\n+     * {@link ProductDerivation#HINT_TARGET hint} of the given\r\n+     * {@link FetchConfiguration#getHint(String) fetch configuration}. \r\n+     * \r\n+     * @return all active slices if a) the hint is not specified or b) a null \r\n+     * value or c) a non-String or d) matches no active slice.\r\n+     */\r\n+    List<SliceStoreManager> getTargets(FetchConfiguration fetch) {\r\n+        if (fetch == null)\r\n+            return _slices;\r\n+        Object hint = fetch.getHint(ProductDerivation.HINT_TARGET);\r\n+        if (hint == null || !(hint instanceof String)) \r\n+            return _slices;\r\n+        List<String> targetNames = Arrays.asList(hint.toString().split(\"\\\\,\"));\r\n+        List<SliceStoreManager> targets = new ArrayList<SliceStoreManager>();\r\n+        for (SliceStoreManager slice : _slices) {\r\n+           if (targetNames.contains(slice.getName()))\r\n+              targets.add(slice);\r\n+           }\r\n+          if (targets.isEmpty())\r\n+            return _slices;\r\n+        return targets;\r\n+    }\r\n \r\n     private static class Flusher implements Callable<Collection> {\r\n         final SliceStoreManager store;\r"},{"sha":"05c0543b1aed2c279433bd6fb89547b2ac1ce826","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/8a811f69ea4908955a2c07699110e51135098700/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/8a811f69ea4908955a2c07699110e51135098700/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java?ref=8a811f69ea4908955a2c07699110e51135098700","patch":"@@ -29,6 +29,7 @@\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\r\n import org.apache.openjpa.jdbc.kernel.JDBCStoreQuery;\r\n import org.apache.openjpa.kernel.ExpressionStoreQuery;\r\n+import org.apache.openjpa.kernel.FetchConfiguration;\r\n import org.apache.openjpa.kernel.OrderingMergedResultObjectProvider;\r\n import org.apache.openjpa.kernel.QueryContext;\r\n import org.apache.openjpa.kernel.StoreQuery;\r\n@@ -37,6 +38,7 @@\n import org.apache.openjpa.lib.rop.RangeResultObjectProvider;\r\n import org.apache.openjpa.lib.rop.ResultObjectProvider;\r\n import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.slice.ProductDerivation;\r\n import org.apache.openjpa.util.StoreException;\r\n \r\n /**\r\n@@ -63,8 +65,14 @@ void add(StoreQuery q) {\n     public Executor newDataStoreExecutor(ClassMetaData meta, boolean subs) {\r\n     \tParallelExecutor ex = new ParallelExecutor(this, meta, subs, _parser, \r\n     \t\t\tctx.getCompilation());\r\n+    \t\r\n+    \tFetchConfiguration fetch = getContext().getFetchConfiguration();\r\n+    \tDistributedStoreManager store = (DistributedStoreManager)getContext()\r\n+    \t    .getStoreContext().getStoreManager().getInnermostDelegate();\r\n+        List<SliceStoreManager> targets = store.getTargets(fetch);\r\n         for (StoreQuery q:_queries) {\r\n-        \tex.addExecutor(q.newDataStoreExecutor(meta, subs));\r\n+            if (targets.contains(((JDBCStoreQuery)q).getStore()))\r\n+                ex.addExecutor(q.newDataStoreExecutor(meta, subs));\r\n         }\r\n         return ex;\r\n     }\r"},{"sha":"2238a4f15ebe3fff6b8a872374eefc9cd6e954f1","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/PersistenceTestCase.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/8a811f69ea4908955a2c07699110e51135098700/openjpa-slice/src/test/java/org/apache/openjpa/slice/PersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/8a811f69ea4908955a2c07699110e51135098700/openjpa-slice/src/test/java/org/apache/openjpa/slice/PersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/PersistenceTestCase.java?ref=8a811f69ea4908955a2c07699110e51135098700","patch":"@@ -215,10 +215,8 @@ private void clear(EntityManagerFactory emf, boolean closeEMs, ClassMetaData...\n             if (!meta.isMapped() || meta.isEmbeddedOnly() \r\n                 || Modifier.isAbstract(meta.getDescribedType().getModifiers()))\r\n                 continue;\r\n-            List all = em.createQuery(\"SELECT o FROM \" + meta.getTypeAlias() + \" o\").\r\n-                getResultList();\r\n-            for (Object pc:all)\r\n-                em.remove(pc);\r\n+            em.createQuery(\"DELETE FROM \" + meta.getTypeAlias() + \" o\").\r\n+                executeUpdate();\r\n         }\r\n         em.getTransaction().commit();\r\n         em.close();\r"},{"sha":"8a5856cc85d5b8abf114c16ef551bd607355849c","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/8a811f69ea4908955a2c07699110e51135098700/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java","raw_url":"https://github.com/apache/openjpa/raw/8a811f69ea4908955a2c07699110e51135098700/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java?ref=8a811f69ea4908955a2c07699110e51135098700","patch":"@@ -18,11 +18,14 @@\n  */\r\n package org.apache.openjpa.slice;\r\n \r\n+import java.util.ArrayList;\r\n+import java.util.Arrays;\r\n import java.util.List;\r\n \r\n import javax.persistence.EntityManager;\r\n import javax.persistence.Query;\r\n \r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n import org.apache.openjpa.slice.SlicePersistence;\r\n \r\n public class TestQuery extends SliceTestCase {\r\n@@ -83,6 +86,21 @@ public void testSetMaxResult() {\n         assertEquals(limit, result.size());\r\n     }\r\n     \r\n+    public void testHint() {\r\n+        List<String> targets = new ArrayList<String>();\r\n+        targets.add(\"Even\");\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        Query query = em.createQuery(\"SELECT p FROM PObject p\");\r\n+        query.setHint(ProductDerivation.HINT_TARGET, \"Even\");\r\n+        List result = query.getResultList();\r\n+        for (Object pc : result) {\r\n+            String slice = SlicePersistence.getSlice(pc);\r\n+            assertTrue(targets.contains(slice));\r\n+        }\r\n+        em.getTransaction().rollback();\r\n+    }\r\n+    \r\n     protected String getPersistenceUnitName() {\r\n         return \"ordering\";\r\n     }\r"}]}

