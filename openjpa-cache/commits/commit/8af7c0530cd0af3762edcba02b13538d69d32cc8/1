{"sha":"8af7c0530cd0af3762edcba02b13538d69d32cc8","node_id":"MDY6Q29tbWl0MjA2MzY0OjhhZjdjMDUzMGNkMGFmMzc2MmVkY2JhMDJiMTM1MzhkNjlkMzJjYzg=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-02-23T16:59:22Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-02-23T16:59:22Z"},"message":"OPENJPA-838 re-committing Fay's changes. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@747081 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9501e5a33623e43916995b34429df1d756914055","url":"https://api.github.com/repos/apache/openjpa/git/trees/9501e5a33623e43916995b34429df1d756914055"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8af7c0530cd0af3762edcba02b13538d69d32cc8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8af7c0530cd0af3762edcba02b13538d69d32cc8","html_url":"https://github.com/apache/openjpa/commit/8af7c0530cd0af3762edcba02b13538d69d32cc8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8af7c0530cd0af3762edcba02b13538d69d32cc8/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"65abbf40523884cd37fa418ed5c155de84a7fccd","url":"https://api.github.com/repos/apache/openjpa/commits/65abbf40523884cd37fa418ed5c155de84a7fccd","html_url":"https://github.com/apache/openjpa/commit/65abbf40523884cd37fa418ed5c155de84a7fccd"}],"stats":{"total":518,"additions":403,"deletions":115},"files":[{"sha":"52a72d33dd1edb81eaf76f7164deafe7fad7021b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","status":"modified","additions":10,"deletions":98,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/8af7c0530cd0af3762edcba02b13538d69d32cc8/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/8af7c0530cd0af3762edcba02b13538d69d32cc8/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java?ref=8af7c0530cd0af3762edcba02b13538d69d32cc8","patch":"@@ -26,26 +26,20 @@\n import java.util.Map;\n \n import org.apache.openjpa.enhance.PersistenceCapable;\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchConfigurationImpl;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n-import org.apache.openjpa.jdbc.kernel.JDBCStoreManager;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.FieldStrategy;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.sql.Joins;\n-import org.apache.openjpa.jdbc.sql.LogicalUnion;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.jdbc.sql.SelectExecutor;\n-import org.apache.openjpa.jdbc.sql.SelectImpl;\n import org.apache.openjpa.jdbc.sql.Union;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n-import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n@@ -526,86 +520,19 @@ public void load(final OpenJPAStateManager sm, final JDBCStore store,\n             return;\n         }\n \n-        //cache union for field here\n         // select data for this sm\n-        boolean found = true;\n         final ClassMapping[] elems = getIndependentElementMappings(true);\n         final Joins[] resJoins = new Joins[Math.max(1, elems.length)];\n-        List parmList = null;\n-        Union union = null;\n-        SelectImpl sel = null;\n-        Map<JDBCStoreManager.SelectKey, Object[]> storeCollectionUnionCache = null;\n-        JDBCStoreManager.SelectKey selKey = null;\n-        if (!((JDBCStoreManager)store).isQuerySQLCacheOn() || elems.length > 1)\n-            union = newUnion(sm, store, fetch, elems, resJoins);\n-        else {\n-            parmList = new ArrayList();\n-            JDBCFetchConfiguration fetchClone = new JDBCFetchConfigurationImpl();\n-            fetchClone.copy(fetch);\n-           \n-            // to specify the type so that no cast is needed\n-            storeCollectionUnionCache = ((JDBCStoreManager)store).\n-                getCacheMapFromQuerySQLCache(StoreCollectionFieldStrategy.class);\n-            selKey = \n-                new JDBCStoreManager.SelectKey(null, field, fetchClone);\n-            Object[] objs = storeCollectionUnionCache.get(selKey);\n-            if (objs != null) {\n-                union = (Union) objs[0];\n-                resJoins[0] = (Joins) objs[1];\n-            }\n-            else {\n-                synchronized(storeCollectionUnionCache) {\n-                    objs = storeCollectionUnionCache.get(selKey);\n-                    if (objs == null) {\n-                        // select data for this sm\n-                        union = newUnion(sm, store, fetch, elems, resJoins);\n-                        found = false;\n-                    } else {\n-                        union = (Union) objs[0];\n-                        resJoins[0] = (Joins) objs[1];\n-                    }\n-\n-                    sel = ((LogicalUnion.UnionSelect)union.getSelects()[0]).\n-                        getDelegate();\n-                    if (sel.getSQL() == null) {\n-                    \t((SelectImpl)sel).setSQL(store, fetch);\n-                        found = false;\n-                    }\n-\n-                    // only cache the union when elems length is 1 for now\n-                    if (!found) { \n-                        Object[] objs1 = new Object[2];\n-                        objs1[0] = union;\n-                        objs1[1] = resJoins[0];\n-                        ((JDBCStoreManager)store).addToSqlCache(\n-                            storeCollectionUnionCache, selKey, objs1);\n-                     }\n-                }\n-            }\n-            \n-            Log log = store.getConfiguration().\n-                getLog(JDBCConfiguration.LOG_JDBC);\n-            if (log.isTraceEnabled()) {\n-                if (found)\n-                    log.trace(_loc.get(\"cache-hit\", field, this.getClass()));\n-                else\n-                    log.trace(_loc.get(\"cache-missed\", field, this.getClass())); \n+        Union union = store.getSQLFactory().newUnion\n+            (Math.max(1, elems.length));\n+        union.select(new Union.Selector() {\n+            public void select(Select sel, int idx) {\n+                ClassMapping elem = (elems.length == 0) ? null : elems[idx];\n+                resJoins[idx] = selectAll(sel, elem, sm, store, fetch,\n+                    JDBCFetchConfiguration.EAGER_PARALLEL);\n             }\n-            \n-            ClassMapping mapping = field.getDefiningMapping();\n-            Object oid = sm.getObjectId();\n-            Column[] cols = mapping.getPrimaryKeyColumns();\n-            if (sel == null)\n-                sel = ((LogicalUnion.UnionSelect)union.getSelects()[0]).\n-                getDelegate();\n-\n-            sel.wherePrimaryKey(mapping, cols, cols, oid, store, \n-                \tnull, null, parmList);\n-            List nonFKParams = sel.getSQL().getNonFKParameters();\n-            if (nonFKParams != null && nonFKParams.size() > 0) \n-                parmList.addAll(nonFKParams);\n-        }\n-        \n+        });\n+\n         // create proxy\n         Object coll;\n         ChangeTracker ct = null;\n@@ -618,7 +545,7 @@ public void load(final OpenJPAStateManager sm, final JDBCStore store,\n         }\n \n         // load values\n-        Result res = union.execute(store, fetch, parmList);\n+        Result res = union.execute(store, fetch);\n         try {\n             int seq = -1;\n             while (res.next()) {\n@@ -642,21 +569,6 @@ public void load(final OpenJPAStateManager sm, final JDBCStore store,\n             sm.storeObject(field.getIndex(), coll);\n     }\n \n-    protected Union newUnion(final OpenJPAStateManager sm, final JDBCStore store,\n-        final JDBCFetchConfiguration fetch, final ClassMapping[] elems,\n-        final Joins[] resJoins) {\n-        Union union = store.getSQLFactory().newUnion\n-        (Math.max(1, elems.length));\n-        union.select(new Union.Selector() {\n-            public void select(Select sel, int idx) {\n-                ClassMapping elem = (elems.length == 0) ? null : elems[idx];\n-                resJoins[idx] = selectAll(sel, elem, sm, store, fetch,\n-                        JDBCFetchConfiguration.EAGER_PARALLEL);\n-            }\n-        });\n-        return union;\n-    }\n-    \n     /**\n      * Select data for loading, starting in field table.\n      */"},{"sha":"a4d4c22490edb4e7e791ac39b4941e0f9d64e6b8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","status":"modified","additions":0,"deletions":14,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/8af7c0530cd0af3762edcba02b13538d69d32cc8/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","raw_url":"https://github.com/apache/openjpa/raw/8af7c0530cd0af3762edcba02b13538d69d32cc8/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLBuffer.java?ref=8af7c0530cd0af3762edcba02b13538d69d32cc8","patch":"@@ -56,7 +56,6 @@\n     private List _subsels = null;\n     private List _params = null;\n     private List _cols = null;\n-    private List _nonFKParams = null;\n \n     /**\n      * Default constructor.\n@@ -147,11 +146,6 @@ else if (_cols != null)\n                         _cols.add(paramIndex, null);\n             }\n         }\n-        if (buf._nonFKParams != null) {\n-            if (_nonFKParams == null)\n-                _nonFKParams = new ArrayList();\n-            _nonFKParams.addAll(buf._nonFKParams);\n-        }\n     }\n \n     public SQLBuffer append(Table table) {\n@@ -271,11 +265,6 @@ else if (o instanceof Raw)\n                 if (isFK)\n                     break;\n             }\n-            if (!isFK) {\n-                if (_nonFKParams == null)\n-                    _nonFKParams = new ArrayList();\n-                _nonFKParams.add(o);                \n-            }\n         }\n         return this;\n     }\n@@ -399,9 +388,6 @@ public List getParameters() {\n         return (_params == null) ? Collections.EMPTY_LIST : _params;\n     }\n \n-    public List getNonFKParameters() {\n-        return (_nonFKParams == null) ? Collections.EMPTY_LIST : _nonFKParams;\n-    }\n     /**\n      * Return the SQL for this buffer.\n      */"},{"sha":"636f14afd0129814b50f991b78e1edc4dbd3ec02","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryProcedures.java","status":"added","additions":168,"deletions":0,"changes":168,"blob_url":"https://github.com/apache/openjpa/blob/8af7c0530cd0af3762edcba02b13538d69d32cc8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryProcedures.java","raw_url":"https://github.com/apache/openjpa/raw/8af7c0530cd0af3762edcba02b13538d69d32cc8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryProcedures.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryProcedures.java?ref=8af7c0530cd0af3762edcba02b13538d69d32cc8","patch":"@@ -0,0 +1,168 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.query;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DerbyDictionary;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.jdbc.query.domain.Applicant;\n+import org.apache.openjpa.persistence.jdbc.query.procedure.DerbyProcedureList;\n+import org.apache.openjpa.persistence.jdbc.query.procedure.ProcedureList;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Tests that Native queries use only 1-based positional parameters and \n+ * disallows named parameters.\n+ * \n+ * Originally reported in \n+ * <A HRE=\"http://issues.apache.org/jira/browse/OPENJPA-112>OPENJPA-112</A>\n+ *  \n+ * @author B.J. Reed\n+ *\n+ */\n+public class TestNativeQueryProcedures extends SingleEMFTestCase {\n+    ProcedureList procedureList = null;\n+    \n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp(Applicant.class, CLEAR_TABLES);\n+\n+        // Figure out which DB we have and get the proper DB Procedure List\n+        OpenJPAEntityManagerFactorySPI ojpaEmf = \n+            (OpenJPAEntityManagerFactorySPI) emf;\n+        JDBCConfiguration conf = (JDBCConfiguration) ojpaEmf.getConfiguration();\n+        \n+        if (conf.getDBDictionaryInstance() instanceof DerbyDictionary) {\n+            procedureList = new DerbyProcedureList();\n+        }\n+\n+        if (procedureList != null) {\n+            EntityManager em = emf.createEntityManager();\n+            List<String> createList = procedureList.getCreateProcedureList();\n+            try {\n+                for (String createProcedure : createList) {\n+                    em.getTransaction().begin();\n+                    Query query = em.createNativeQuery(createProcedure);\n+                    query.executeUpdate();\n+                    em.getTransaction().commit();\n+                }\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+                em.getTransaction().commit();\n+            }\n+            em.clear();\n+            em.close();\n+        }\n+    }\n+\n+    public void tearDown() throws Exception {\n+        if (procedureList != null) {\n+            EntityManager em = emf.createEntityManager();\n+            List<String> dropList = procedureList.getDropProcedureList();\n+            try {\n+                for (String dropProcedure : dropList) {\n+                    em.getTransaction().begin();\n+                    Query query = em.createNativeQuery(dropProcedure);\n+                    query.executeUpdate();\n+                    em.getTransaction().commit();\n+                }\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+                em.getTransaction().commit();\n+            }\n+            em.clear();\n+            em.close();\n+        }\n+        super.tearDown();\n+    }\n+    \n+    public void testNoReturnNoParamProcedure() {\n+        if (procedureList != null) {\n+            EntityManager em = emf.createEntityManager();\n+\n+            Applicant applicant1 = new Applicant();\n+            applicant1.setName(\"Charlie\");\n+            Applicant applicant2 = new Applicant();\n+            applicant2.setName(\"Snoopy\");\n+\n+            em.getTransaction().begin();\n+            em.persist(applicant1);\n+            em.persist(applicant2);\n+            em.getTransaction().commit();\n+\n+            String sql = procedureList.callAddXToCharlie();\n+\n+            // query.getSingleResult() and query.getResultList() both throw an\n+            // exception: Statement.executeQuery() cannot be called with a\n+            // statement that returns a row count\n+            try {\n+                em.getTransaction().begin();\n+                Query query = em.createNativeQuery(sql);\n+                query.getSingleResult();\n+                em.getTransaction().commit();\n+                fail(\"Expected exception. getSingleResult() with no returns \"+ \n+                    \"should fail.\");\n+            } catch (Exception e) {\n+                //Expected exception\n+                em.getTransaction().rollback();\n+            }\n+            try {\n+                em.getTransaction().begin();\n+                Query query = em.createNativeQuery(sql);\n+                query.getResultList();\n+                em.getTransaction().commit();\n+                fail(\"Expected exception. getResultList() with no returns \" + \n+                    \"should fail.\");\n+            } catch (Exception e) {\n+                //Expected exception\n+                em.getTransaction().rollback();\n+            }\n+\n+            // This one should work properly\n+            try {\n+                em.getTransaction().begin();\n+                Query query = em.createNativeQuery(sql);\n+                query.executeUpdate();\n+                em.getTransaction().commit();\n+            } catch (Exception e) {\n+                fail(\"Caught unexpected exception executing stored procedure: \"\n+                    + e.getMessage());\n+                em.getTransaction().commit();\n+            }\n+        \n+            em.clear();\n+            em.close();\n+            em = emf.createEntityManager();\n+            applicant1 = em.find(Applicant.class, applicant1.getId());\n+            applicant2 = em.find(Applicant.class, applicant2.getId());\n+\n+            // verify one changed and one didn't\n+            assertEquals(\"Charliex\", applicant1.getName());\n+            assertEquals(\"Snoopy\", applicant2.getName());\n+        \n+            em.clear();\n+            em.close();\n+        }\n+    }\n+}\n\\ No newline at end of file"},{"sha":"ba0cce7f3b0b7b513446fc4956f5847759c0832b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Invoice.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/8af7c0530cd0af3762edcba02b13538d69d32cc8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Invoice.java","raw_url":"https://github.com/apache/openjpa/raw/8af7c0530cd0af3762edcba02b13538d69d32cc8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Invoice.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Invoice.java?ref=8af7c0530cd0af3762edcba02b13538d69d32cc8","patch":"@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.query.cache;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.*;\n+/**\n+ * @version $Revision$ $Date$\n+ */\n+@Entity\n+@IdClass(InvoiceKey.class)\n+public class Invoice {\n+\n+    @Id\n+    private int id;\n+    @Id\n+    private String brandName;\n+    \n+    private double price;\n+\n+    @OneToMany(cascade={CascadeType.ALL})\n+    private List<LineItem> lineItems = new ArrayList<LineItem>();\n+\n+    public Invoice() {\n+    }\n+\n+    public Invoice(int id, String brandName, double price) {\n+        this.id = id;\n+        this.brandName = brandName;\n+        this.price = price;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getBrandName() {\n+        return brandName;\n+    }\n+\n+    public void setBrandName(String brandName) {\n+        this.brandName = brandName;\n+    }\n+\n+    public double getPrice() {\n+        return price;\n+    }\n+\n+    public void setPrice(double price) {\n+        this.price = price;\n+    }\n+\n+    public List<LineItem> getLineItems() {\n+        return lineItems;\n+    }\n+\n+    public void setLineItems(List<LineItem> lineItems) {\n+        this.lineItems = lineItems;\n+    }\n+}"},{"sha":"0d49deb27a0bb235b9b4444b8037b24fa171a822","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/InvoiceKey.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/8af7c0530cd0af3762edcba02b13538d69d32cc8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/InvoiceKey.java","raw_url":"https://github.com/apache/openjpa/raw/8af7c0530cd0af3762edcba02b13538d69d32cc8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/InvoiceKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/InvoiceKey.java?ref=8af7c0530cd0af3762edcba02b13538d69d32cc8","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.query.cache;\n+\n+/**\n+ * @version $Revision$ $Date$\n+ */\n+public class InvoiceKey {\n+\n+    private int id;\n+    private String brandName;\n+\n+    public InvoiceKey() {\n+    }\n+\n+    public InvoiceKey(int id, String brandName) {\n+        this.id = id;\n+        this.brandName = brandName;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+\n+        InvoiceKey invoiceKey = (InvoiceKey) o;\n+\n+        if (id != invoiceKey.id) return false;\n+        if (!brandName.equals(invoiceKey.brandName)) return false;\n+\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int result = id;\n+        result = 31 * result + brandName.hashCode();\n+        return result;\n+    }\n+}"},{"sha":"e3c6fff092c6330432be1713af7bd33e2531170f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/LineItem.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/8af7c0530cd0af3762edcba02b13538d69d32cc8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/LineItem.java","raw_url":"https://github.com/apache/openjpa/raw/8af7c0530cd0af3762edcba02b13538d69d32cc8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/LineItem.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/LineItem.java?ref=8af7c0530cd0af3762edcba02b13538d69d32cc8","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.query.cache;\n+import javax.persistence.*;\n+\n+/**\n+ * @version $Revision$ $Date$\n+ */\n+@Entity\n+public class LineItem {\n+\n+    @Id\n+    private String id;\n+    private int quantity;\n+    \n+    @ManyToOne\n+    private Invoice invoice;\n+\n+    public LineItem() {\n+    }\n+\n+    public LineItem(String id, int quantity) {\n+        this.id = id;\n+        this.quantity = quantity;\n+    }\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+\n+    public int getQuantity() {\n+        return quantity;\n+    }\n+\n+    public void setQuantity(int quantity) {\n+        this.quantity = quantity;\n+    }\n+\n+    public Invoice getInvoice() {\n+        return invoice;\n+    }\n+\n+    public void setInvoice(Invoice invoice) {\n+        this.invoice = invoice;\n+    }\n+}\n+"},{"sha":"3808a49e149bbe48a1121d563f3124b048299c13","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java","status":"modified","additions":26,"deletions":3,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/8af7c0530cd0af3762edcba02b13538d69d32cc8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java","raw_url":"https://github.com/apache/openjpa/raw/8af7c0530cd0af3762edcba02b13538d69d32cc8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java?ref=8af7c0530cd0af3762edcba02b13538d69d32cc8","patch":"@@ -18,10 +18,10 @@\n  */\r\n package org.apache.openjpa.persistence.jdbc.query.cache;\r\n \r\n-import java.util.ArrayList;\r\n-import java.util.Collection;\r\n+import java.util.List;\r\n \r\n import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityTransaction;\r\n import javax.persistence.Query;\r\n \r\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n@@ -45,18 +45,21 @@\n  * \r\n  * @author Pinaki Poddar\r\n  * @author Vikram Bhatia\r\n- * \r\n+ * @author David Blevins\r\n  */\r\n public class TestNonPrimaryKeyQueryParameters extends SQLListenerTestCase {\r\n \tprivate static final int FULLTIME_EMPLOYEE_COUNT = 3;\r\n \tprivate static final int PARTTIME_EMPLOYEE_COUNT = 2;\r\n+    private static final int LINEITEM_PER_INVOICE = 1;\r\n \tprivate static final String DEPT_NAME = \"ENGINEERING\";\r\n \r\n \tpublic void setUp() {\r\n \t\tsuper.setUp(CLEAR_TABLES, Department.class, Employee.class,\r\n \t\t\t\tFullTimeEmployee.class, PartTimeEmployee.class,\r\n+\t\t\t\tInvoice.class, LineItem.class,\r\n \t\t\t\t\"openjpa.jdbc.QuerySQLCache\", \"true\");\r\n \t\tcreateDepartment(DEPT_NAME);\r\n+\t\tcreateInvoice();\r\n \t\tsql.clear();\r\n \t}\r\n \r\n@@ -103,6 +106,10 @@ public void testFind() {\n \t\t\t\t.size());\r\n \r\n \t\tassertSQL(\".* AND t0.TYPE = .*\");\r\n+\t\t\r\n+        Invoice invoice = em.find(Invoice.class, new InvoiceKey(1, \"Red\"));\r\n+        List<LineItem> list = invoice.getLineItems();\r\n+        assertEquals(LINEITEM_PER_INVOICE, list.size());\r\n \t\tem.close();\r\n \t}\r\n \r\n@@ -154,4 +161,20 @@ private void createDepartment(String deptName) {\n \t\tem.close();\r\n \r\n \t}\r\n+\t\r\n+    private void createInvoice() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        EntityTransaction tran = em.getTransaction();\r\n+        tran.begin();\r\n+        Invoice invoice = new Invoice(1, \"Red\", 1.30);\r\n+        for (int i = 1;  i <= LINEITEM_PER_INVOICE; i++) {\r\n+            LineItem item = new LineItem(String.valueOf(i), 10);\r\n+            item.setInvoice(invoice);\r\n+            invoice.getLineItems().add(item);\r\n+            em.persist(invoice);\r\n+        }\r\n+        em.flush();\r\n+        tran.commit();\r\n+        em.close();        \r\n+    }\t\r\n }\r"}]}

