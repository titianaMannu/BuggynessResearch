{"sha":"8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","node_id":"MDY6Q29tbWl0MjA2MzY0OjhiNWE3ZjY4YTAwMTZlN2Q1YjVhYzlhMWM5MTM3OTRkY2NkY2VjZDc=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-07-03T22:42:39Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-07-03T22:42:39Z"},"message":"OPENJPA-244 Fixed some formatting inconsistencies with the patch for OPENJPA-244\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@553010 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e9e663b846bbdfb0c6556e3a5657d78774d60efa","url":"https://api.github.com/repos/apache/openjpa/git/trees/e9e663b846bbdfb0c6556e3a5657d78774d60efa"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","html_url":"https://github.com/apache/openjpa/commit/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/comments","author":null,"committer":null,"parents":[{"sha":"0c517d163e355f85ca40673db15a991693bc2d4a","url":"https://api.github.com/repos/apache/openjpa/commits/0c517d163e355f85ca40673db15a991693bc2d4a","html_url":"https://github.com/apache/openjpa/commit/0c517d163e355f85ca40673db15a991693bc2d4a"}],"stats":{"total":1865,"additions":934,"deletions":931},"files":[{"sha":"bffbdf13f02c940d2ebfd0a3ee665e975e238bee","filename":"openjpa-examples/src/main/java/hellojpa/Main.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-examples/src/main/java/hellojpa/Main.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-examples/src/main/java/hellojpa/Main.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/hellojpa/Main.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -64,7 +64,7 @@ public static void main(String[] args) {\n \n         // Go through each of the entities and print out each of their\n         // messages, as well as the date on which it was created \n-        for (Message m : (List<Message>)q.getResultList()) {\n+        for (Message m : (List<Message>) q.getResultList()) {\n             System.out.println(m.getMessage()\n                 + \" (created on: \" + m.getCreated() + \")\"); \n         }"},{"sha":"d9a58cf130a3c1d7e9a3029e6df7073c8a0a1096","filename":"openjpa-examples/src/main/java/relations/Main.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-examples/src/main/java/relations/Main.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-examples/src/main/java/relations/Main.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/src/main/java/relations/Main.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -135,33 +135,33 @@ public static void runQueries(EntityManager em) {\n \n         // Go through each of the entities and print out each of their\n         // messages, as well as the date on which it was created \n-        for (Deity m : (List<Deity>)q.getResultList()) {\n+        for (Deity m : (List<Deity>) q.getResultList()) {\n             System.out.println(m.getName());\n         }\n \n         q = em.createQuery(\"select x from Deity x \"\n             + \"where x.father.name = 'Zeus'\");\n \n-        for (Deity m : (List<Deity>)q.getResultList()) {\n+        for (Deity m : (List<Deity>) q.getResultList()) {\n             System.out.println(\"Child of Zeus: \" + m.getName());\n         }\n \n         q = em.createNamedQuery(\"siblings\").\n             setParameter(1, em.getReference(Deity.class, \"Rhea\"));\n \n-        for (Deity m : (List<Deity>)em.createNamedQuery(\"siblings\").\n+        for (Deity m : (List<Deity>) em.createNamedQuery(\"siblings\").\n             setParameter(1, em.getReference(Deity.class, \"Rhea\")).\n             getResultList()) {\n             System.out.println(\"Siblings of Rhea: \" + m.getName());\n         }\n \n-        for (Deity m : (List<Deity>)em.createNamedQuery(\"half-siblings\").\n+        for (Deity m : (List<Deity>) em.createNamedQuery(\"half-siblings\").\n             setParameter(1, em.getReference(Deity.class, \"Apollo\")).\n             getResultList()) {\n             System.out.println(\"Half-siblings of Apollo: \" + m.getName());\n         }\n \n-        for (Deity m : (List<Deity>)em.createNamedQuery(\"cousins\").\n+        for (Deity m : (List<Deity>) em.createNamedQuery(\"cousins\").\n             setParameter(1, em.getReference(Deity.class, \"Leto\")).\n             getResultList()) {\n             System.out.println(\"Cousins of Leto: \" + m.getName());"},{"sha":"7008ec062300ae41a88ab8d1d2b35dea9ff52082","filename":"openjpa-jdbc-5/src/main/java/org/apache/openjpa/jdbc/meta/strats/XMLValueHandler.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc-5/src/main/java/org/apache/openjpa/jdbc/meta/strats/XMLValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc-5/src/main/java/org/apache/openjpa/jdbc/meta/strats/XMLValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc-5/src/main/java/org/apache/openjpa/jdbc/meta/strats/XMLValueHandler.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -73,7 +73,7 @@ public Object toDataStoreValue(ValueMapping vm, Object val,\n             m.marshal( val, result );\n             return result.toString();\n         }\n-        catch(JAXBException je) {\n+        catch (JAXBException je) {\n             throw new InternalException(je);\n         }\n     }\n@@ -89,7 +89,7 @@ public Object toObjectValue(ValueMapping vm, Object val) {\n             return u.unmarshal(new StreamSource(new StringReader\n                     (val.toString())));\n         }\n-        catch(JAXBException je) {\n+        catch (JAXBException je) {\n             throw new InternalException(je);\n         }\n     }"},{"sha":"6706229a59c839b3703266621fa00656953dbe5c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/MappingToolTask.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -186,7 +186,7 @@ protected void executeOn(String[] files)\n \n         MultiLoaderClassResolver resolver = new MultiLoaderClassResolver();\n         resolver.addClassLoader(loader);\n-        resolver.addClassLoader((ClassLoader)AccessController.doPrivileged( \n+        resolver.addClassLoader((ClassLoader) AccessController.doPrivileged(\n             J2DoPrivHelper.getClassLoaderAction(MappingTool.class)));\n         JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\n         conf.setClassResolver(resolver);"},{"sha":"176547dfba0d67756397ca943f0a9831fa85769f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/ReverseMappingToolTask.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/ReverseMappingToolTask.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/ReverseMappingToolTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/ant/ReverseMappingToolTask.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -262,14 +262,14 @@ protected void executeOn(String[] files)\n         // load customizer properties\n         Properties customProps = new Properties();\n         File propsFile = Files.getFile(customizerProperties, loader);\n-        if (propsFile != null && ((Boolean)AccessController.doPrivileged( \n-            J2DoPrivHelper.existsAction( propsFile ))).booleanValue() ) {\n+        if (propsFile != null && ((Boolean) AccessController.doPrivileged(\n+            J2DoPrivHelper.existsAction(propsFile))).booleanValue()) {\n             FileInputStream fis = null;\n             try {\n                 fis = (FileInputStream) AccessController.doPrivileged(\n                     J2DoPrivHelper.newFileInputStreamAction(propsFile));\n-            } catch( PrivilegedActionException pae ) {\n-                 throw (FileNotFoundException)pae.getException();\n+            } catch (PrivilegedActionException pae) {\n+                 throw (FileNotFoundException) pae.getException();\n             }\n             customProps.load(fis);\n         }\n@@ -278,7 +278,7 @@ protected void executeOn(String[] files)\n         JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\n         flags.customizer = (ReverseCustomizer) Configurations.\n             newInstance(customizerClass, conf, null,\n-                (ClassLoader)AccessController.doPrivileged( \n+                (ClassLoader) AccessController.doPrivileged(\n                     J2DoPrivHelper.getClassLoaderAction(\n                         ReverseCustomizer.class)));\n         if (flags.customizer != null)"},{"sha":"252b75a16686fea08af9a40052fe742624628336","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingRepositoryValue.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingRepositoryValue.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingRepositoryValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/conf/MappingRepositoryValue.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -48,14 +48,14 @@ public Object newInstance(String clsName, Class type,\n         // we need to manually perform the instantiation\n         try {\n             Class cls = Strings.toClass(clsName,\n-                (ClassLoader)AccessController.doPrivileged( \n+                (ClassLoader) AccessController.doPrivileged(\n                     J2DoPrivHelper.getClassLoaderAction(type)));        \n             return cls.getConstructor(new Class[]{ JDBCConfiguration.class }).\n                 newInstance(new Object[]{ conf });\n         } catch (RuntimeException e) {\n             throw e;\n         } catch (InvocationTargetException e) {\n-            if (e.getTargetException()instanceof RuntimeException)\n+            if (e.getTargetException() instanceof RuntimeException)\n                 throw(RuntimeException) e.getTargetException();\n \n             // fall back to default behavior for better error reporting"},{"sha":"6afc604e35ce5700c88c01b5e9dfe864eb3afac0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -252,7 +252,7 @@ public boolean initialize(OpenJPAStateManager sm, PCState state,\n         FetchConfiguration fetch, Object context) {\n         ConnectionInfo info = (ConnectionInfo) context;\n         try {\n-            return initializeState(sm, state, (JDBCFetchConfiguration)fetch, \n+            return initializeState(sm, state, (JDBCFetchConfiguration) fetch, \n                 info);\n         } catch (ClassNotFoundException cnfe) {\n             throw new UserException(cnfe);"},{"sha":"549cf253bfd416c2cd36d47f53d79c3a8ab65bc1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstPath.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstPath.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstPath.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -127,7 +127,8 @@ public void calculateValue(Select sel, ExpContext ctx, ExpState state,\n             action = itr.next();\n             if (action instanceof Class) {\n                 try {\n-                    cstate.value = Filters.convert(cstate.value, (Class)action);\n+                    cstate.value = Filters.convert(cstate.value,\n+                        (Class) action);\n                     continue;\n                 } catch (ClassCastException cce) {\n                     failed = true;"},{"sha":"2eb4fdf482e38710cdb33dc28ba1009cc82abe30","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMappingInfo.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -361,7 +361,7 @@ public void addUnique(Unique unique) {\n         Table table = cm.getTable();\n         Collection result = new ArrayList();\n         while (uniqueConstraints.hasNext()) {\n-            Unique template = (Unique)uniqueConstraints.next();\n+            Unique template = (Unique) uniqueConstraints.next();\n             Column[] templateColumns = template.getColumns();\n             Column[] uniqueColumns = new Column[templateColumns.length];\n             boolean missingColumn = true;\n@@ -380,7 +380,7 @@ public void addUnique(Unique unique) {\n             if (unique != null)\n                 result.add(unique);\n         }\n-        return (Unique[])result.toArray(new Unique[result.size()]);\n+        return (Unique[]) result.toArray(new Unique[result.size()]);\n     }   \n     \n     public File getSourceFile() {"},{"sha":"be24443291048e47b8e1028cbe19d566daac327a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorMappingInfo.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DiscriminatorMappingInfo.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -123,15 +123,15 @@ public void syncWith(Discriminator disc) {\n         // set io before syncing cols\n         setColumnIO(disc.getColumnIO());\n         syncColumns(disc, disc.getColumns(), disc.getValue() != null\n-            && !(disc.getValue()instanceof String));\n+            && !(disc.getValue() instanceof String));\n         syncIndex(disc, disc.getIndex());\n         if (disc.getValue() == Discriminator.NULL)\n             _value = \"null\";\n         else if (disc.getValue() != null)\n             _value = disc.getValue().toString();\n \n         if (disc.getStrategy() == null\n-            || disc.getStrategy()instanceof SuperclassDiscriminatorStrategy)\n+            || disc.getStrategy() instanceof SuperclassDiscriminatorStrategy)\n             return;\n \n         // explicit discriminator strategy if:"},{"sha":"ce1a2f3c1f112265d373396b7fbb9800461457e8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -449,18 +449,18 @@ else if (VerticalClassStrategy.ALIAS.equals(name))\n         try {\n             if (strat == null)\n                 strat = JavaTypes.classForName(name, cls,\n-                    (ClassLoader)AccessController.doPrivileged( \n+                    (ClassLoader) AccessController.doPrivileged(\n                         J2DoPrivHelper.getClassLoaderAction(\n                             ClassStrategy.class)));\n             ClassStrategy strategy = \n-                (ClassStrategy)AccessController.doPrivileged(\n+                (ClassStrategy) AccessController.doPrivileged(\n                     J2DoPrivHelper.newInstanceAction(strat));\n             Configurations.configureInstance(strategy, getConfiguration(),\n                 props);\n             return strategy;\n         } catch (Exception e) {\n             if (e instanceof PrivilegedActionException)\n-                e = ((PrivilegedActionException)e).getException();\n+                e = ((PrivilegedActionException) e).getException();\n             throw new MetaDataException(_loc.get(\"bad-cls-strategy\",\n                 cls, name), e);\n         }\n@@ -483,7 +483,7 @@ protected FieldStrategy namedStrategy(FieldMapping field,\n         name = Configurations.getClassName(name);\n         try {\n             Class c = JavaTypes.classForName(name, field,\n-                (ClassLoader)AccessController.doPrivileged( \n+                (ClassLoader) AccessController.doPrivileged(\n                     J2DoPrivHelper.getClassLoaderAction(FieldStrategy.class)));\n             if (FieldStrategy.class.isAssignableFrom(c)) {\n                 FieldStrategy strat = (FieldStrategy)\n@@ -496,7 +496,7 @@ protected FieldStrategy namedStrategy(FieldMapping field,\n \n             // must be named handler\n             if (installHandlers) {\n-                ValueHandler vh = (ValueHandler)AccessController.doPrivileged(\n+                ValueHandler vh = (ValueHandler) AccessController.doPrivileged(\n                     J2DoPrivHelper.newInstanceAction(c));\n                 Configurations.configureInstance(vh, getConfiguration(),\n                     props);\n@@ -505,7 +505,7 @@ protected FieldStrategy namedStrategy(FieldMapping field,\n             return new HandlerFieldStrategy();\n         } catch (Exception e) {\n             if (e instanceof PrivilegedActionException)\n-                e = ((PrivilegedActionException )e).getException();\n+                e = ((PrivilegedActionException) e).getException();\n             throw new MetaDataException(_loc.get(\"bad-field-strategy\",\n                 field, name), e);\n         }\n@@ -556,7 +556,7 @@ else if (SubclassJoinDiscriminatorStrategy.ALIAS.equals(name))\n             if (strat == null)\n                 strat = JavaTypes.classForName(name,\n                     discrim.getClassMapping(),\n-                    (ClassLoader)AccessController.doPrivileged( \n+                    (ClassLoader) AccessController.doPrivileged(\n                         J2DoPrivHelper.getClassLoaderAction(\n                             DiscriminatorStrategy.class)));\n             DiscriminatorStrategy strategy = (DiscriminatorStrategy)\n@@ -567,7 +567,7 @@ else if (SubclassJoinDiscriminatorStrategy.ALIAS.equals(name))\n             return strategy;\n         } catch (Exception e) {\n             if (e instanceof PrivilegedActionException)\n-                e = ((PrivilegedActionException )e).getException();\n+                e = ((PrivilegedActionException) e).getException();\n             throw new MetaDataException(_loc.get(\"bad-discrim-strategy\",\n                 discrim.getClassMapping(), name), e);\n         }\n@@ -618,7 +618,7 @@ else if (StateComparisonVersionStrategy.ALIAS.equals(name))\n             if (strat == null)\n                 strat = JavaTypes.classForName(name,\n                     version.getClassMapping(),\n-                    (ClassLoader)AccessController.doPrivileged( \n+                    (ClassLoader) AccessController.doPrivileged(\n                         J2DoPrivHelper.getClassLoaderAction(\n                             VersionStrategy.class)));\n         } catch (Exception e) {\n@@ -643,7 +643,7 @@ protected VersionStrategy instantiateVersionStrategy(Class strat,\n             return strategy;\n         } catch (Exception e) {\n             if (e instanceof PrivilegedActionException)\n-                e = ((PrivilegedActionException )e).getException();\n+                e = ((PrivilegedActionException) e).getException();\n             throw new MetaDataException(_loc.get(\"bad-version-strategy\",\n                 version.getClassMapping(), strat + \"\"), e);\n         }\n@@ -941,15 +941,15 @@ private Object mappedStrategy(ValueMapping val, Class type,\n         name = Configurations.getClassName(name);\n         try {\n             Class c = JavaTypes.classForName(name, val,\n-                (ClassLoader)AccessController.doPrivileged( \n+                (ClassLoader) AccessController.doPrivileged(\n                     J2DoPrivHelper.getClassLoaderAction(FieldStrategy.class)));\n             Object o = AccessController.doPrivileged(\n                 J2DoPrivHelper.newInstanceAction(c));\n             Configurations.configureInstance(o, getConfiguration(), props);\n             return o;\n         } catch (Exception e) {\n             if (e instanceof PrivilegedActionException)\n-                e = ((PrivilegedActionException )e).getException();\n+                e = ((PrivilegedActionException) e).getException();\n             throw new MetaDataException(_loc.get(\"bad-mapped-strategy\",\n                 val, name), e);\n         }\n@@ -968,10 +968,10 @@ protected ValueHandler namedHandler(ValueMapping val) {\n         name = Configurations.getClassName(name);\n         try {\n             Class c = JavaTypes.classForName(name, val,\n-                (ClassLoader)AccessController.doPrivileged( \n+                (ClassLoader) AccessController.doPrivileged(\n                     J2DoPrivHelper.getClassLoaderAction(ValueHandler.class)));\n             if (ValueHandler.class.isAssignableFrom(c)) {\n-                ValueHandler vh = (ValueHandler)AccessController.doPrivileged(\n+                ValueHandler vh = (ValueHandler) AccessController.doPrivileged(\n                     J2DoPrivHelper.newInstanceAction(c));\n                 Configurations.configureInstance(vh, getConfiguration(),\n                     props);\n@@ -980,7 +980,7 @@ protected ValueHandler namedHandler(ValueMapping val) {\n             return null; // named field strategy\n         } catch (Exception e) {\n             if (e instanceof PrivilegedActionException)\n-                e = ((PrivilegedActionException )e).getException();\n+                e = ((PrivilegedActionException) e).getException();\n             throw new MetaDataException(_loc.get(\"bad-value-handler\",\n                 val, name), e);\n         }"},{"sha":"84af12c020fea0f7a9cea36162a3850748a585ae","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -1078,12 +1078,12 @@ public static boolean run(JDBCConfiguration conf, String[] args,\n             Class[] types = Services.getImplementorClasses(ImportExport.class);\n             ImportExport[] instances = new ImportExport[types.length];\n             for (int i = 0; i < types.length; i++)\n-                instances[i] = (ImportExport)AccessController.doPrivileged(\n+                instances[i] = (ImportExport) AccessController.doPrivileged(\n                     J2DoPrivHelper.newInstanceAction(types[i]));\n             return instances;\n         } catch (Throwable t) {\n             if (t instanceof PrivilegedActionException)\n-                t = ((PrivilegedActionException)t).getException();\n+                t = ((PrivilegedActionException) t).getException();\n             throw new InternalException(_loc.get(\"importexport-instantiate\"),t);\n         }\n     }"},{"sha":"b87416a6a4be18e54aec84976590e50804f9b050","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ReverseMappingTool.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -1895,14 +1895,14 @@ public static boolean run(JDBCConfiguration conf, String[] args,\n         File customFile = Files.getFile\n             (opts.removeProperty(\"customizerProperties\", \"cp\", null), null);\n         Properties customProps = new Properties();\n-        if (customFile != null && ((Boolean)AccessController.doPrivileged( \n-            J2DoPrivHelper.existsAction( customFile ))).booleanValue()) {\n+        if (customFile != null && ((Boolean) AccessController.doPrivileged(\n+            J2DoPrivHelper.existsAction(customFile))).booleanValue()) {\n             FileInputStream fis = null;\n             try {\n                 fis = (FileInputStream) AccessController.doPrivileged(\n                     J2DoPrivHelper.newFileInputStreamAction(customFile));\n-            } catch( PrivilegedActionException pae ) {\n-                 throw (FileNotFoundException)pae.getException();\n+            } catch (PrivilegedActionException pae) {\n+                 throw (FileNotFoundException) pae.getException();\n             }\n             customProps.load(fis);\n         }"},{"sha":"709f07ab1527eedbe3ee7e4aa54d9a7221fbe016","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionMappingInfo.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionMappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionMappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionMappingInfo.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -73,7 +73,7 @@ public void syncWith(Version version) {\n         syncIndex(version, version.getIndex());\n \n         if (version.getStrategy() == null\n-            || version.getStrategy()instanceof SuperclassVersionStrategy)\n+            || version.getStrategy() instanceof SuperclassVersionStrategy)\n             return;\n \n         // explicit version strategy if:"},{"sha":"60cfbb54bed4a0eee8fd34718a7218f97f0c9d3b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -60,7 +60,7 @@ protected void map(ValueMapping vm, String name, ColumnIO io,\n         for (int i = 0; i < fms.length; i++) {\n             if (fms[i].getManagement() != FieldMapping.MANAGE_PERSISTENT)\n                 continue;\n-            if (!(fms[i].getStrategy()instanceof Embeddable))\n+            if (!(fms[i].getStrategy() instanceof Embeddable))\n                 throw new MetaDataException(_loc.get(\"not-embeddable\",\n                     vm, fms[i]));\n "},{"sha":"8db4751036eac4c58ee40eb86d2987ce828e47bb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/DataSourceFactory.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -112,7 +112,7 @@ public static DataSource newDataSource(JDBCConfiguration conf,\n             // see if their driver name is actually a data source\n             if (DataSource.class.isAssignableFrom(driverClass)) {\n                 return (DataSource) Configurations.newInstance(driver,\n-                    conf, props, (ClassLoader)AccessController.doPrivileged( \n+                    conf, props, (ClassLoader) AccessController.doPrivileged(\n                         J2DoPrivHelper.getClassLoaderAction(\n                             DataSource.class))); \n             }\n@@ -156,7 +156,8 @@ public static DecoratingDataSource decorateDataSource(DataSource ds,\n \n             // ask the DriverDataSource to provide any additional decorators\n             if (ds instanceof DriverDataSource) {\n-                List decs = ((DriverDataSource)ds).createConnectionDecorators();\n+                List decs = ((DriverDataSource) ds).\n+                    createConnectionDecorators();\n                 if (decs != null)\n                     decorators.addAll(decs);\n             }"},{"sha":"88fae0ba52427678f9e6bba0226f2ffe7fb95bcb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/FileSchemaFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/FileSchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/FileSchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/FileSchemaFactory.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -79,7 +79,7 @@ public void endConfiguration() {\n     }\n \n     public SchemaGroup readSchema() {\n-        URL url = (URL)AccessController.doPrivileged( \n+        URL url = (URL) AccessController.doPrivileged(\n             J2DoPrivHelper.getResourceAction(_loader, _fileName)); \n         if (url == null)\n             return new SchemaGroup();"},{"sha":"5a6395914146914c15335c536dbe9d2489749b55","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SimpleDriverDataSource.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -171,14 +171,14 @@ private Driver getDriver() {\n         try {\n             Class c = Class.forName(_connectionDriverName,\n                 true, _classLoader);\n-            _driver = (Driver)AccessController.doPrivileged(\n+            _driver = (Driver) AccessController.doPrivileged(\n                 J2DoPrivHelper.newInstanceAction(c));\n             return _driver;\n         } catch (Exception e) {\n             if (e instanceof RuntimeException)\n                 throw(RuntimeException) e;\n             if (e instanceof PrivilegedActionException)\n-                e = ((PrivilegedActionException)e).getException();\n+                e = ((PrivilegedActionException) e).getException();\n             throw new StoreException(e);\n         }\n     }"},{"sha":"f078b1401190b65f342638388309c91c4aeacf99","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -476,7 +476,7 @@ private String appendExtendedExceptionMsg(String msg, SQLException sqle){\n                     \"[Errp=\" + getSqlErrpMethd.invoke(sqlca, new Object[]{})\r\n                     + \", Errd=\" + errdStr);\r\n \r\n-            String Warn = new String((char[])getSqlWarnMethd.\r\n+            String Warn = new String((char[]) getSqlWarnMethd.\r\n                     invoke(sqlca, new Object[]{}));\r\n             if(Warn.trim().length() != 0)\r\n                 exceptionMsg = exceptionMsg.concat(\", Warn=\" +Warn + \"]\" );\r"},{"sha":"a6d3edcfe13e2397a085dd4680b315326df9c4e1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -890,7 +890,7 @@ public void setDate(PreparedStatement stmnt, int idx, Date val, Column col)\n         else if (col != null && col.getType() == Types.TIME)\n             setTime(stmnt, idx, new Time(val.getTime()), null, col);\n         else if (val instanceof Timestamp)\n-            setTimestamp(stmnt, idx,(Timestamp)val, null, col);   \n+            setTimestamp(stmnt, idx,(Timestamp) val, null, col);   \n         else\n             setTimestamp(stmnt, idx, new Timestamp(val.getTime()), null, col);\n     }"},{"sha":"72ce30fe48c299fba67c6f285bf534e7515a7cc9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionaryFactory.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -121,14 +121,14 @@ private static DBDictionary newDBDictionary(JDBCConfiguration conf,\n         DBDictionary dict = null;\n         try {\n             Class c = Class.forName(dclass, true,\n-                (ClassLoader)AccessController.doPrivileged( \n+                (ClassLoader) AccessController.doPrivileged(\n                     J2DoPrivHelper.getClassLoaderAction(\n                         DBDictionary.class)));\n-            dict = (DBDictionary)AccessController.doPrivileged(\n+            dict = (DBDictionary) AccessController.doPrivileged(\n                 J2DoPrivHelper.newInstanceAction(c));\n         } catch (Exception e) {\n             if (e instanceof PrivilegedActionException)\n-                e = ((PrivilegedActionException)e).getException();\n+                e = ((PrivilegedActionException) e).getException();\n             throw new UserException(e).setFatal(true);\n         }\n "},{"sha":"96e354af44bdbfe2c725f43c69222dc50c963629","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -223,7 +223,7 @@ public void setDouble(PreparedStatement stmnt, int idx, double val,\n         // HSQL has a bug where it cannot store a double if it is\n         // exactly the same as Long.MAX_VALUE or MIN_VALUE\n         if (val == Long.MAX_VALUE || val == Long.MIN_VALUE) {\n-            stmnt.setLong(idx, (long)val);\n+            stmnt.setLong(idx, (long) val);\n         } else  {\n             super.setDouble(stmnt, idx, val, col);\n         }"},{"sha":"0363ab9efed0cb4aa0aba019d42e32c97825392a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -1213,7 +1213,7 @@ private void where(Object oid, ClassMapping mapping, Column[] toCols,\n         int count = 0;\n         for (int i = 0; i < toCols.length; i++, count++) {\n             if (pks == null)\n-                val = (oid == null) ? null : Numbers.valueOf(((Id)oid).getId());\n+                val = (oid == null) ? null : Numbers.valueOf(((Id) oid).getId());\n             else {\n                 // must be app identity; use pk index to get correct pk value\n                 join = mapping.assertJoinable(toCols[i]);\n@@ -2796,7 +2796,7 @@ public Object get(int i) {\n                     Object id = (ident && _idents != null) ? _idents.get(i)\n                         : _ids.get(i);\n                     Object alias = _aliases.get(id);\n-                    if (id instanceof Column && ((Column)id).isXML())\n+                    if (id instanceof Column && ((Column) id).isXML())\n                         alias = alias + _dict.getStringVal;\n                         \n                     String as = null;"},{"sha":"ac009fcfbf00f005a6979a16df9081f003c744b0","filename":"openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -57,7 +57,7 @@ public static void premain(String args, Instrumentation inst) {\n         conf.setConnectionFactoryName(null);\n         // set single class resolver\n         final ClassLoader tmpLoader = new TemporaryClassLoader(\n-            (ClassLoader)AccessController.doPrivileged( \n+            (ClassLoader) AccessController.doPrivileged(\n                 J2DoPrivHelper.getContextClassLoaderAction()));\n         conf.setClassResolver(new ClassResolver() {\n             public ClassLoader getClassLoader(Class context, ClassLoader env) {"},{"sha":"13aee36350b301ce32bc565d0918bab25467a9c8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreBrokerFactory.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -133,7 +133,7 @@ protected StoreManager newStoreManager() {\n     private static AbstractStoreManager createStoreManager(String cls,\n         String props) {\n         AbstractStoreManager store = (AbstractStoreManager) Configurations.\n-            newInstance(cls, (ClassLoader)AccessController.doPrivileged( \n+            newInstance(cls, (ClassLoader) AccessController.doPrivileged(\n                 J2DoPrivHelper.getClassLoaderAction(\n                     AbstractStoreManager.class))); \n         Configurations.configureInstance(store, null, props,"},{"sha":"264f22f72d989ab9f3b452719cfda1dc3707019e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAVersion.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -113,7 +113,7 @@ public String toString() {\n \n         buf.append(\"java.class.path:\\n\");\n         StringTokenizer tok = new StringTokenizer\n-            ((String)AccessController.doPrivileged( \n+            ((String) AccessController.doPrivileged(\n                 J2DoPrivHelper.getPropertyAction(\"java.class.path\")),\n             File.pathSeparator);\n         while (tok.hasMoreTokens()) {\n@@ -138,7 +138,7 @@ public void appendOpenJPABanner(StringBuffer buf) {\n \n     private StringBuffer appendProperty(String prop, StringBuffer buf) {\n         return buf.append(prop).append(\": \")\n-            .append((String)AccessController.doPrivileged( \n+            .append((String) AccessController.doPrivileged(\n                 J2DoPrivHelper.getPropertyAction(prop)));\n     }\n }"},{"sha":"f61bd52bda7fa4bd9745489feb98d6a32b9a92c7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","status":"modified","additions":218,"deletions":218,"changes":436,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -1,85 +1,85 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.ee;\r\n-\r\n-import java.util.LinkedList;\r\n-import java.util.List;\r\n-import javax.transaction.TransactionManager;\r\n-\r\n-import org.apache.openjpa.lib.conf.Configurable;\r\n-import org.apache.openjpa.lib.conf.Configuration;\r\n-import org.apache.openjpa.lib.util.Localizer;\r\n-import org.apache.openjpa.util.InvalidStateException;\r\n-\r\n-/**\r\n- * Implementation of the {@link ManagedRuntime} interface that searches\r\n- * through a set of known JNDI locations and method invocations to locate the\r\n- * appropriate mechanism for obtaining a TransactionManager.\r\n- *  Built in support is provided for the following Application Servers:\r\n- * <ul>\r\n- * <li>Bluestone</li>\r\n- * <li>HP Application Server</li>\r\n- * <li>JBoss</li>\r\n- * <li>JRun</li>\r\n- * <li>OpenEJB</li>\r\n- * <li>Oracle Application Server</li>\r\n- * <li>Orion</li>\r\n- * <li>SunONE</li>\r\n- * <li>Weblogic</li>\r\n- * <li>Websphere</li>\r\n- * </ul>\r\n- *\r\n- * @author Marc Prud'hommeaux\r\n- */\r\n-public class AutomaticManagedRuntime\r\n-    implements ManagedRuntime, Configurable {\r\n-\r\n-    private static final String [] JNDI_LOCS = new String []{\r\n-        \"javax.transaction.TransactionManager\", // weblogic\r\n-        \"java:/TransactionManager\", // jboss & jrun\r\n-        \"java:/DefaultDomain/TransactionManager\", // jrun too\r\n-        \"java:comp/pm/TransactionManager\", // orion & oracle\r\n-        \"java:comp/TransactionManager\", // generic\r\n-        \"java:pm/TransactionManager\", // borland\r\n-    };\r\n-    private static final String [] METHODS = new String[]{\r\n-        \"com.arjuna.jta.JTA_TransactionManager.transactionManager\", // hp\r\n-        \"com.bluestone.jta.SaTransactionManagerFactory.SaGetTransactionManager\",\r\n-        \"org.openejb.OpenEJB.getTransactionManager\",\r\n-        \"com.sun.jts.jta.TransactionManagerImpl.getTransactionManagerImpl\",\r\n-        \"com.inprise.visitransact.jta.TransactionManagerImpl.\"\r\n-            + \"getTransactionManagerImpl\", // borland\r\n-    };\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.ee;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import javax.transaction.TransactionManager;\n+\n+import org.apache.openjpa.lib.conf.Configurable;\n+import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.InvalidStateException;\n+\n+/**\n+ * Implementation of the {@link ManagedRuntime} interface that searches\n+ * through a set of known JNDI locations and method invocations to locate the\n+ * appropriate mechanism for obtaining a TransactionManager.\n+ *  Built in support is provided for the following Application Servers:\n+ * <ul>\n+ * <li>Bluestone</li>\n+ * <li>HP Application Server</li>\n+ * <li>JBoss</li>\n+ * <li>JRun</li>\n+ * <li>OpenEJB</li>\n+ * <li>Oracle Application Server</li>\n+ * <li>Orion</li>\n+ * <li>SunONE</li>\n+ * <li>Weblogic</li>\n+ * <li>Websphere</li>\n+ * </ul>\n+ *\n+ * @author Marc Prud'hommeaux\n+ */\n+public class AutomaticManagedRuntime\n+    implements ManagedRuntime, Configurable {\n+\n+    private static final String [] JNDI_LOCS = new String []{\n+        \"javax.transaction.TransactionManager\", // weblogic\n+        \"java:/TransactionManager\", // jboss & jrun\n+        \"java:/DefaultDomain/TransactionManager\", // jrun too\n+        \"java:comp/pm/TransactionManager\", // orion & oracle\n+        \"java:comp/TransactionManager\", // generic\n+        \"java:pm/TransactionManager\", // borland\n+    };\n+    private static final String [] METHODS = new String[]{\n+        \"com.arjuna.jta.JTA_TransactionManager.transactionManager\", // hp\n+        \"com.bluestone.jta.SaTransactionManagerFactory.SaGetTransactionManager\",\n+        \"org.openejb.OpenEJB.getTransactionManager\",\n+        \"com.sun.jts.jta.TransactionManagerImpl.getTransactionManagerImpl\",\n+        \"com.inprise.visitransact.jta.TransactionManagerImpl.\"\n+            + \"getTransactionManagerImpl\", // borland\n+    };\n \n     private static final ManagedRuntime REGISTRY;\n-    private static final WLSManagedRuntime WLS;\r\n-    private static final SunOneManagedRuntime SUNONE;\r\n-    private static final WASManagedRuntime WAS;\r\n-\r\n-    private static Localizer _loc = Localizer.forPackage\r\n-        (AutomaticManagedRuntime.class);\r\n-\r\n-    static {\r\n-        ManagedRuntime mr = null;\r\n+    private static final WLSManagedRuntime WLS;\n+    private static final SunOneManagedRuntime SUNONE;\n+    private static final WASManagedRuntime WAS;\n+\n+    private static Localizer _loc = Localizer.forPackage\n+        (AutomaticManagedRuntime.class);\n+\n+    static {\n+        ManagedRuntime mr = null;\n \n         mr = null;\n-        try {\r\n+        try {\n             mr = (ManagedRuntime) Class.\n                 forName(\"org.apache.openjpa.ee.RegistryManagedRuntime\").\n                     newInstance();\n@@ -91,38 +91,38 @@\n \n         mr = null;\n         try {\n-            mr = new WLSManagedRuntime();\r\n-        } catch (Throwable t) {\r\n-        }\r\n-        WLS = (WLSManagedRuntime) mr;\r\n-\r\n-        mr = null;\r\n-        try {\r\n-            mr = new SunOneManagedRuntime();\r\n-        } catch (Throwable t) {\r\n-        }\r\n-        SUNONE = (SunOneManagedRuntime) mr;\r\n-\r\n-        mr = null;\r\n-        try {\r\n-            mr = new WASManagedRuntime();\r\n-        }\r\n-        catch(Throwable t) {\r\n-        }\r\n-        WAS= (WASManagedRuntime) mr;\r\n-    }\r\n-\r\n-    private Configuration _conf = null;\r\n-    private ManagedRuntime _runtime = null;\r\n-\r\n-    public TransactionManager getTransactionManager()\r\n-        throws Exception {\r\n-        if (_runtime != null)\r\n-            return _runtime.getTransactionManager();\r\n-\r\n-        List errors = new LinkedList();\r\n-        TransactionManager tm = null;\r\n-\r\n+            mr = new WLSManagedRuntime();\n+        } catch (Throwable t) {\n+        }\n+        WLS = (WLSManagedRuntime) mr;\n+\n+        mr = null;\n+        try {\n+            mr = new SunOneManagedRuntime();\n+        } catch (Throwable t) {\n+        }\n+        SUNONE = (SunOneManagedRuntime) mr;\n+\n+        mr = null;\n+        try {\n+            mr = new WASManagedRuntime();\n+        }\n+        catch (Throwable t) {\n+        }\n+        WAS= (WASManagedRuntime) mr;\n+    }\n+\n+    private Configuration _conf = null;\n+    private ManagedRuntime _runtime = null;\n+\n+    public TransactionManager getTransactionManager()\n+        throws Exception {\n+        if (_runtime != null)\n+            return _runtime.getTransactionManager();\n+\n+        List errors = new LinkedList();\n+        TransactionManager tm = null;\n+\n         // first try the registry, which is the official way to obtain\n         // transaction synchronication in JTA 1.1\n         if (REGISTRY != null) {\n@@ -137,111 +137,111 @@ public TransactionManager getTransactionManager()\n             }\n         }\n \n-        if (WLS != null) {\r\n-            try {\r\n-                tm = WLS.getTransactionManager();\r\n-            } catch (Throwable t) {\r\n-                errors.add(t);\r\n-            }\r\n-            if (tm != null) {\r\n-                _runtime = WLS;\r\n-                return tm;\r\n-            }\r\n-        }\r\n-\r\n-        if (WAS != null) {\r\n-            try {\r\n-                WAS.setConfiguration(_conf);\r\n-                WAS.startConfiguration();\r\n-                WAS.endConfiguration();\r\n-                tm = WAS.getTransactionManager();\r\n-            } catch (Throwable t) {\r\n-                errors.add(t);\r\n-            }\r\n-            if (tm != null) {\r\n-                _runtime = WAS;\r\n-                return tm;\r\n-            }\r\n-        }\r\n-\r\n-        // try to find a jndi runtime\r\n-        JNDIManagedRuntime jmr = new JNDIManagedRuntime();\r\n-        for (int i = 0; i < JNDI_LOCS.length; i++) {\r\n-            jmr.setTransactionManagerName(JNDI_LOCS[i]);\r\n-            try {\r\n-                tm = jmr.getTransactionManager();\r\n-            } catch (Throwable t) {\r\n-                errors.add(t);\r\n-            }\r\n-            if (tm != null) {\r\n-                _runtime = jmr;\r\n-                return tm;\r\n-            }\r\n-        }\r\n-\r\n-        // look for a method runtime\r\n-        InvocationManagedRuntime imr = new InvocationManagedRuntime();\r\n-        for (int i = 0; i < METHODS.length; i++) {\r\n-            imr.setConfiguration(_conf);\r\n-            imr.setTransactionManagerMethod(METHODS[i]);\r\n-            try {\r\n-                tm = imr.getTransactionManager();\r\n-            } catch (Throwable t) {\r\n-                errors.add(t);\r\n-            }\r\n-            if (tm != null) {\r\n-                _runtime = imr;\r\n-                return tm;\r\n-            }\r\n-        }\r\n-\r\n-        if (SUNONE != null) {\r\n-            try {\r\n-                tm = SUNONE.getTransactionManager();\r\n-            } catch (Throwable t) {\r\n-                errors.add(t);\r\n-            }\r\n-            if (tm != null) {\r\n-                _runtime = SUNONE;\r\n-                return tm;\r\n-            }\r\n-        }\r\n-\r\n-        Throwable[] t = (Throwable []) errors.toArray(\r\n-            new Throwable [errors.size()]);\r\n-        throw new InvalidStateException(_loc.get(\"tm-not-found\")).\r\n-            setFatal(true).setNestedThrowables(t);\r\n-    }\r\n-\r\n-    public void setConfiguration(Configuration conf) {\r\n-        _conf = conf;\r\n-    }\r\n-\r\n-    public void startConfiguration() {\r\n-    }\r\n-\r\n-    public void endConfiguration() {\r\n-    }\r\n-\r\n-    public void setRollbackOnly(Throwable cause)\r\n-        throws Exception {\r\n-        // check to see if the runtime is cached\r\n-        if (_runtime == null)\r\n-            getTransactionManager();\r\n-\r\n-        if (_runtime != null)\r\n-            _runtime.setRollbackOnly(cause);\r\n-    }\r\n-\r\n-    public Throwable getRollbackCause()\r\n-        throws Exception {\r\n-        // check to see if the runtime is cached\r\n-        if (_runtime == null)\r\n-            getTransactionManager();\r\n-\r\n-        if (_runtime != null)\r\n-            return _runtime.getRollbackCause();\r\n-\r\n-        return null;\r\n-    }\r\n-}\r\n+        if (WLS != null) {\n+            try {\n+                tm = WLS.getTransactionManager();\n+            } catch (Throwable t) {\n+                errors.add(t);\n+            }\n+            if (tm != null) {\n+                _runtime = WLS;\n+                return tm;\n+            }\n+        }\n+\n+        if (WAS != null) {\n+            try {\n+                WAS.setConfiguration(_conf);\n+                WAS.startConfiguration();\n+                WAS.endConfiguration();\n+                tm = WAS.getTransactionManager();\n+            } catch (Throwable t) {\n+                errors.add(t);\n+            }\n+            if (tm != null) {\n+                _runtime = WAS;\n+                return tm;\n+            }\n+        }\n+\n+        // try to find a jndi runtime\n+        JNDIManagedRuntime jmr = new JNDIManagedRuntime();\n+        for (int i = 0; i < JNDI_LOCS.length; i++) {\n+            jmr.setTransactionManagerName(JNDI_LOCS[i]);\n+            try {\n+                tm = jmr.getTransactionManager();\n+            } catch (Throwable t) {\n+                errors.add(t);\n+            }\n+            if (tm != null) {\n+                _runtime = jmr;\n+                return tm;\n+            }\n+        }\n+\n+        // look for a method runtime\n+        InvocationManagedRuntime imr = new InvocationManagedRuntime();\n+        for (int i = 0; i < METHODS.length; i++) {\n+            imr.setConfiguration(_conf);\n+            imr.setTransactionManagerMethod(METHODS[i]);\n+            try {\n+                tm = imr.getTransactionManager();\n+            } catch (Throwable t) {\n+                errors.add(t);\n+            }\n+            if (tm != null) {\n+                _runtime = imr;\n+                return tm;\n+            }\n+        }\n+\n+        if (SUNONE != null) {\n+            try {\n+                tm = SUNONE.getTransactionManager();\n+            } catch (Throwable t) {\n+                errors.add(t);\n+            }\n+            if (tm != null) {\n+                _runtime = SUNONE;\n+                return tm;\n+            }\n+        }\n+\n+        Throwable[] t = (Throwable []) errors.toArray(\n+            new Throwable [errors.size()]);\n+        throw new InvalidStateException(_loc.get(\"tm-not-found\")).\n+            setFatal(true).setNestedThrowables(t);\n+    }\n+\n+    public void setConfiguration(Configuration conf) {\n+        _conf = conf;\n+    }\n+\n+    public void startConfiguration() {\n+    }\n+\n+    public void endConfiguration() {\n+    }\n+\n+    public void setRollbackOnly(Throwable cause)\n+        throws Exception {\n+        // check to see if the runtime is cached\n+        if (_runtime == null)\n+            getTransactionManager();\n+\n+        if (_runtime != null)\n+            _runtime.setRollbackOnly(cause);\n+    }\n+\n+    public Throwable getRollbackCause()\n+        throws Exception {\n+        // check to see if the runtime is cached\n+        if (_runtime == null)\n+            getTransactionManager();\n+\n+        if (_runtime != null)\n+            return _runtime.getRollbackCause();\n+\n+        return null;\n+    }\n+}"},{"sha":"96bd17db44adc1a6984beb117578bff87eb9ece8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -1419,10 +1419,10 @@ private static Class loadClass(Class context, String name,\n             name = Strings.getPackageName(context) + \".\" + name;\n \n         // first try with regular class loader\n-        ClassLoader loader = (ClassLoader)AccessController.doPrivileged( \n+        ClassLoader loader = (ClassLoader) AccessController.doPrivileged(\n             J2DoPrivHelper.getClassLoaderAction(context)); \n         if (loader == null)\n-            loader = (ClassLoader)AccessController.doPrivileged( \n+            loader = (ClassLoader) AccessController.doPrivileged(\n                 J2DoPrivHelper.getContextClassLoaderAction()); \n         try {\n             return Class.forName(name, false, loader);"},{"sha":"c6e6a12554a154814103e6d3ed95362a68a81f0b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicStorageGenerator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicStorageGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicStorageGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/DynamicStorageGenerator.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -97,7 +97,7 @@\n     // the project/classloader for the classes.\n     private final Project _project = new Project();\n     private final BCClassLoader _loader = new BCClassLoader(_project,\n-        (ClassLoader)AccessController.doPrivileged( \n+        (ClassLoader) AccessController.doPrivileged(\n             J2DoPrivHelper.getClassLoaderAction(DynamicStorage.class)));\n \n     /**"},{"sha":"4c204229acd9d803440fa229a0c5258422f2d5f2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":22,"deletions":22,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -133,7 +133,7 @@\n     static {\n         Class[] classes = Services.getImplementorClasses(\n             AuxiliaryEnhancer.class, \n-            (ClassLoader)AccessController.doPrivileged( \n+            (ClassLoader) AccessController.doPrivileged(\n                 J2DoPrivHelper.getClassLoaderAction(AuxiliaryEnhancer.class)));\n         List auxEnhancers = new ArrayList(classes.length);\n         for (int i = 0; i < classes.length; i++) {\n@@ -484,7 +484,7 @@ private static String getSetterName(FieldMetaData fmd) {\n      * Package-protected and static for testing.\n      */\n     static BCField getReturnedField(BCMethod meth) {\n-        return findField(meth, ((Code)AccessController.doPrivileged( \n+        return findField(meth, ((Code) AccessController.doPrivileged(\n             J2DoPrivHelper.newCodeAction())).xreturn()\n             .setType(meth.getReturnType()), false);\n     }\n@@ -494,7 +494,7 @@ static BCField getReturnedField(BCMethod meth) {\n      * Package-protected and static for testing.\n      */\n     static BCField getAssignedField(BCMethod meth) {\n-        return findField(meth, ((Code)AccessController.doPrivileged( \n+        return findField(meth, ((Code) AccessController.doPrivileged(\n             J2DoPrivHelper.newCodeAction())).putfield(), true);\n     }\n \n@@ -596,7 +596,7 @@ private void processViolations() {\n      */\n     private void replaceAndValidateFieldAccess() {\n         // create template putfield/getfield instructions to search for\n-        Code template = (Code)AccessController.doPrivileged( \n+        Code template = (Code) AccessController.doPrivileged(\n             J2DoPrivHelper.newCodeAction());\n         Instruction put = template.putfield();\n         Instruction get = template.getfield();\n@@ -1204,55 +1204,55 @@ private void addStockMethods()\n         try {\n             // pcGetGenericContext\n             translateFromStateManagerMethod(\n-                (Method)AccessController.doPrivileged(\n+                (Method) AccessController.doPrivileged(\n                     J2DoPrivHelper.getDeclaredMethodAction(\n                         SMTYPE, \"get\" + CONTEXTNAME, (Class[]) null)));\n     \n             // pcFetchObjectId\n             translateFromStateManagerMethod(\n-                (Method)AccessController.doPrivileged(\n+                (Method) AccessController.doPrivileged(\n                     J2DoPrivHelper.getDeclaredMethodAction(\n                         SMTYPE, \"fetchObjectId\", (Class[]) null)));\n     \n             // pcIsDeleted\n             translateFromStateManagerMethod(\n-                (Method)AccessController.doPrivileged(\n+                (Method) AccessController.doPrivileged(\n                     J2DoPrivHelper.getDeclaredMethodAction(\n                         SMTYPE, \"isDeleted\", (Class[]) null)));\n     \n             // pcIsDirty\n             translateFromStateManagerMethod(\n-                (Method)AccessController.doPrivileged(\n+                (Method) AccessController.doPrivileged(\n                     J2DoPrivHelper.getDeclaredMethodAction(\n                         SMTYPE, \"isDirty\", (Class[]) null)));\n     \n             // pcIsNew\n             translateFromStateManagerMethod(\n-                (Method)AccessController.doPrivileged(\n+                (Method) AccessController.doPrivileged(\n                     J2DoPrivHelper.getDeclaredMethodAction(\n                         SMTYPE, \"isNew\", (Class[]) null)));\n     \n             // pcIsPersistent\n             translateFromStateManagerMethod(\n-                (Method)AccessController.doPrivileged(\n+                (Method) AccessController.doPrivileged(\n                     J2DoPrivHelper.getDeclaredMethodAction(\n                         SMTYPE, \"isPersistent\", (Class[]) null)));\n     \n             // pcIsTransactional\n             translateFromStateManagerMethod(\n-                (Method)AccessController.doPrivileged(\n+                (Method) AccessController.doPrivileged(\n                     J2DoPrivHelper.getDeclaredMethodAction(\n                         SMTYPE, \"isTransactional\", (Class[]) null)));\n     \n             // pcSerializing\n             translateFromStateManagerMethod(\n-                (Method)AccessController.doPrivileged(\n+                (Method) AccessController.doPrivileged(\n                     J2DoPrivHelper.getDeclaredMethodAction(\n                         SMTYPE, \"serializing\", (Class[]) null)));\n     \n             // pcDirty\n             translateFromStateManagerMethod(\n-                (Method)AccessController.doPrivileged(\n+                (Method) AccessController.doPrivileged(\n                     J2DoPrivHelper.getDeclaredMethodAction(\n                         SMTYPE, \"dirty\", new Class[]{ String.class })));\n     \n@@ -1265,8 +1265,8 @@ private void addStockMethods()\n             code.areturn();\n             code.calculateMaxStack();\n             code.calculateMaxLocals();\n-        } catch( PrivilegedActionException pae ) {\n-             throw (NoSuchMethodException)pae.getException();\n+        } catch (PrivilegedActionException pae) {\n+             throw (NoSuchMethodException) pae.getException();\n         }\n     }\n \n@@ -2195,8 +2195,8 @@ else if (type.equals(String.class))\n         try {\n             method = (Method) AccessController.doPrivileged(\n                 J2DoPrivHelper.getDeclaredMethodAction(owner, name, params));\n-        } catch( PrivilegedActionException pae ) {\n-             throw (NoSuchMethodException)pae.getException();\n+        } catch (PrivilegedActionException pae) {\n+             throw (NoSuchMethodException) pae.getException();\n         }\n         return method;\n     }\n@@ -2497,7 +2497,7 @@ private void modifyWriteObjectMethod(BCMethod method, boolean full) {\n             code.vreturn();\n         }\n \n-        Instruction tmplate = ((Code)AccessController.doPrivileged( \n+        Instruction tmplate = ((Code) AccessController.doPrivileged(\n             J2DoPrivHelper.newCodeAction())).vreturn();\n         JumpInstruction toret;\n         Instruction ret;\n@@ -2766,7 +2766,7 @@ private Code getOrCreateClassInitCode(boolean replaceLast) {\n         if (clinit != null) {\n             code = clinit.getCode(true);\n             if (replaceLast) {\n-                Code template = (Code)AccessController.doPrivileged( \n+                Code template = (Code) AccessController.doPrivileged(\n                     J2DoPrivHelper.newCodeAction());\n                 code.searchForward(template.vreturn());\n                 code.previous();\n@@ -2808,8 +2808,8 @@ private void addCloningCode() {\n         if (clone == null) {\n             // add clone support for base classes\n             // which also implement cloneable\n-            if (!((Boolean)AccessController.doPrivileged( \n-                    J2DoPrivHelper.isInstanceOfAction( _pc, Cloneable.class )))\n+            if (!((Boolean) AccessController.doPrivileged(\n+                    J2DoPrivHelper.isInstanceOfAction(_pc, Cloneable.class)))\n                     .booleanValue()\n                 || !superName.equals(Object.class.getName()))\n                 return;\n@@ -2838,7 +2838,7 @@ private void addCloningCode() {\n         }\n \n         // create template super.clone () instruction to match against\n-        Instruction template = ((Code)AccessController.doPrivileged( \n+        Instruction template = ((Code) AccessController.doPrivileged(\n             J2DoPrivHelper.newCodeAction())).invokespecial()\n             .setMethod(superName, \"clone\", Object.class.getName(), null);\n "},{"sha":"54a19cf1995e72adf028f9f80378f13b8f712579","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/Reflection.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -118,8 +118,8 @@ public static Method findSetter(Class cls, String prop, Class param,\n      */\n     private static Method getDeclaredMethod(Class cls, String name,\n         Class param) {\n-        Method[] methods = (Method[])AccessController.doPrivileged( \n-            J2DoPrivHelper.getDeclaredMethodsAction( cls ));\n+        Method[] methods = (Method[]) AccessController.doPrivileged(\n+            J2DoPrivHelper.getDeclaredMethodsAction(cls));\n         for (int i = 0 ; i < methods.length; i++) {\n     \t    if (name.equals(methods[i].getName())) {\n                 Class[] methodParams = methods[i].getParameterTypes();\n@@ -163,8 +163,8 @@ public static Field findField(Class cls, String name, boolean mustExist) {\n      * @since 0.9.8\n      */\n     private static Field getDeclaredField(Class cls, String name) {\n-        Field[] fields = (Field[])AccessController.doPrivileged( \n-            J2DoPrivHelper.getDeclaredFieldsAction( cls ));\n+        Field[] fields = (Field[]) AccessController.doPrivileged(\n+            J2DoPrivHelper.getDeclaredFieldsAction(cls));\n         for (int i = 0 ; i < fields.length; i++) {\n     \t    if (name.equals(fields[i].getName()))\n \t\t        return fields[i];"},{"sha":"6889af880141ddb7258b33630a048833b245f9e5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/BeanLifecycleCallbacks.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/event/BeanLifecycleCallbacks.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/event/BeanLifecycleCallbacks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/BeanLifecycleCallbacks.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -67,7 +67,7 @@ private Object newListener(Class cls) {\n                 J2DoPrivHelper.newInstanceAction(cls));\n         } catch (Throwable t) {\n             if (t instanceof PrivilegedActionException)\n-                t = ((PrivilegedActionException )t).getException();            \n+                t = ((PrivilegedActionException) t).getException();            \n             throw new UserException(_loc.get(\"bean-constructor\",\n                 cls.getName()), t);\n         }"},{"sha":"fa25875741ee925fd8a42ecd036baad14edfbe6e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/event/MethodLifecycleCallbacks.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -103,8 +103,8 @@ public String toString() {\n     protected static Method getMethod(Class cls, String method, Class[] args) {\n         Class currentClass = cls;\n         do {\n-            Method[] methods = (Method[])AccessController.doPrivileged( \n-                J2DoPrivHelper.getDeclaredMethodsAction( currentClass )); \n+            Method[] methods = (Method[]) AccessController.doPrivileged(\n+                J2DoPrivHelper.getDeclaredMethodsAction(currentClass)); \n             for (int i = 0; i < methods.length; i++) {\n                 if (!method.equals(methods[i].getName()))\n                     continue;"},{"sha":"4af5d2a8c8c9e874a7ef8f3d29e892f8c26bec9a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Bootstrap.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -116,7 +116,7 @@ private static BrokerFactory invokeFactory(ConfigurationProvider conf,\n             // handle cases where there is a mismatch between loaders by falling\n             // back to the configuration's class loader for broker resolution\n             cls = getFactoryClass(conf,\n-                (ClassLoader)AccessController.doPrivileged( \n+                (ClassLoader) AccessController.doPrivileged(\n                     J2DoPrivHelper.getClassLoaderAction(conf.getClass()))); \n             meth = cls.getMethod(methodName, FACTORY_ARGS); \n         }\n@@ -139,7 +139,7 @@ private static String getFactoryClassName(ConfigurationProvider conf,\n     private static Class getFactoryClass(ConfigurationProvider conf,\n         ClassLoader loader) {\n         if (loader == null)\n-            loader = (ClassLoader)AccessController.doPrivileged( \n+            loader = (ClassLoader) AccessController.doPrivileged(\n                 J2DoPrivHelper.getContextClassLoaderAction()); \n \n         Object cls = BrokerFactoryValue.get(conf);"},{"sha":"75aa0ea66d7a3a441bd037446ca175a34d9f48b6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -258,7 +258,7 @@ public void setAuthentication(String user, String pass) {\n     public void initialize(AbstractBrokerFactory factory,\n         DelegatingStoreManager sm, boolean managed, int connMode) {\n         _initializeWasInvoked = true;\n-        _loader = (ClassLoader)AccessController.doPrivileged( \n+        _loader = (ClassLoader) AccessController.doPrivileged(\n             J2DoPrivHelper.getContextClassLoaderAction());\n         _jca = new JCAHelper();\n         _conf = factory.getConfiguration();\n@@ -4135,7 +4135,7 @@ public Object newInstance(Class cls) {\n         if (!PCRegistry.isRegistered(cls)) {\n             try {\n                 Class.forName(cls.getName(), true, \n-                    (ClassLoader)AccessController.doPrivileged( \n+                    (ClassLoader) AccessController.doPrivileged(\n                         J2DoPrivHelper.getClassLoaderAction(cls)));\n             } catch (Throwable t) {\n             }\n@@ -4275,10 +4275,10 @@ protected PersistenceCapable assertPersistenceCapable(Object obj) {\n             if (intfs[i].getName().equals(PersistenceCapable.class.getName())) {\n                 throw new UserException(_loc.get(\"pc-loader-different\",\n                     Exceptions.toString(obj),\n-                    (ClassLoader)AccessController.doPrivileged( \n+                    (ClassLoader) AccessController.doPrivileged(\n                         J2DoPrivHelper.getClassLoaderAction(\n                             PersistenceCapable.class)),\n-                    (ClassLoader)AccessController.doPrivileged( \n+                    (ClassLoader) AccessController.doPrivileged(\n                         J2DoPrivHelper.getClassLoaderAction(intfs[i]))))\n                     .setFailedObject(obj);\n             }"},{"sha":"e056934155b142c30d7d84c649b1d6b291a88e1e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Filters.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -752,7 +752,7 @@ public static AggregateListener hintToAggregateListener(Object hint,\n                         Class.forName((String) hint, true, loader)));\n             } catch (Exception e) {\n                 if (e instanceof PrivilegedActionException)\n-                    e = ((PrivilegedActionException)e).getException();\n+                    e = ((PrivilegedActionException) e).getException();\n                 cause = e;\n             }\n         }\n@@ -785,13 +785,13 @@ public static AggregateListener hintToAggregateListener(Object hint,\n             AggregateListener[] aggs = new AggregateListener[clss.length];\n             try {\n                 for (int i = 0; i < clss.length; i++)\n-                    aggs[i] = (AggregateListener)AccessController.doPrivileged(\n+                    aggs[i] = (AggregateListener) AccessController.doPrivileged(\n                         J2DoPrivHelper.newInstanceAction(\n                             Class.forName(clss[i], true, loader))); \n                 return aggs;\n             } catch (Exception e) {\n                 if (e instanceof PrivilegedActionException)\n-                    e = ((PrivilegedActionException)e).getException();\n+                    e = ((PrivilegedActionException) e).getException();\n                 cause = e;\n             }\n         }\n@@ -813,12 +813,12 @@ public static FilterListener hintToFilterListener(Object hint,\n         Exception cause = null;\n         if (hint instanceof String) {\n             try {\n-                return (FilterListener)AccessController.doPrivileged(\n+                return (FilterListener) AccessController.doPrivileged(\n                     J2DoPrivHelper.newInstanceAction(\n                         Class.forName((String) hint, true, loader))); \n             } catch (Exception e) {\n                 if (e instanceof PrivilegedActionException)\n-                    e = ((PrivilegedActionException)e).getException();\n+                    e = ((PrivilegedActionException) e).getException();\n                 cause = e;\n             }\n         }\n@@ -850,13 +850,13 @@ public static FilterListener hintToFilterListener(Object hint,\n             FilterListener[] filts = new FilterListener[clss.length];\n             try {\n                 for (int i = 0; i < clss.length; i++)\n-                    filts[i] = (FilterListener)AccessController.doPrivileged(\n+                    filts[i] = (FilterListener) AccessController.doPrivileged(\n                         J2DoPrivHelper.newInstanceAction(\n                             Class.forName(clss[i], true, loader)));\n                 return filts;\n             } catch (Exception e) {\n                 if (e instanceof PrivilegedActionException)\n-                    e = ((PrivilegedActionException)e).getException();\n+                    e = ((PrivilegedActionException) e).getException();\n                 cause = e;\n             }\n         }"},{"sha":"b7a34a6f806828f84b0e1f0df4fb31c7cef1e353","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -717,7 +717,7 @@ private void setValue(int field, Object val, boolean forceInst) {\n                         getMetaData().getDescribedType()));\n             } catch (Exception e) {\n                 if (e instanceof PrivilegedActionException)\n-                    e = ((PrivilegedActionException)e).getException();\n+                    e = ((PrivilegedActionException) e).getException();\n                 throw new GeneralException(e);\n             }\n         } else if (_oid == null)"},{"sha":"fcfaa44b033d728e987310cbbcf67d6145b28a5f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -1557,7 +1557,7 @@ public Class classForName(String name, String[] imports) {\n \n         // first check the aliases map in the MetaDataRepository\n         ClassLoader loader = (_class == null) ? _loader\n-            : (ClassLoader)AccessController.doPrivileged( \n+            : (ClassLoader) AccessController.doPrivileged(\n                 J2DoPrivHelper.getClassLoaderAction(_class)); \n         ClassMetaData meta = _broker.getConfiguration().\n             getMetaDataRepositoryInstance().getMetaData(name, loader, false);"},{"sha":"ea7dc696eb4b6aac1f312833d3b66e0f16a666c6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryLanguages.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryLanguages.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryLanguages.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryLanguages.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -41,14 +41,14 @@\n         // Load and cache all the query languages available in the system.\n         Class[] classes = Services.getImplementorClasses(\n             ExpressionParser.class,\n-            (ClassLoader)AccessController.doPrivileged( \n+            (ClassLoader) AccessController.doPrivileged(\n                 J2DoPrivHelper.getClassLoaderAction(ExpressionParser.class)));\n         for (int i = 0; i < classes.length; i++) {\n             ExpressionParser ep;\n             try {\n-                ep = (ExpressionParser)AccessController.doPrivileged(\n+                ep = (ExpressionParser) AccessController.doPrivileged(\n                     J2DoPrivHelper.newInstanceAction(classes[i]));\n-            } catch( PrivilegedActionException pae ) {\n+            } catch (PrivilegedActionException pae) {\n                 throw new InternalException(pae.getException());\n             } catch (InstantiationException e) {\n                 throw new InternalException(e);"},{"sha":"28f2abee3f625913fda5d9e5b569c0109b1b02f3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ResultPacker.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -252,7 +252,7 @@ private Object packUserType(Object[] result) {\n             return user;\n         } catch (OpenJPAException ke) {\n             throw ke;\n-        } catch( PrivilegedActionException pae ) {\n+        } catch (PrivilegedActionException pae) {\n             throw new UserException(_loc.get(\"pack-instantiation-err\",\n                 _resultClass), pae.getException());\n         } catch (InstantiationException ie) {"},{"sha":"f878b92009a7b51b85fef576984096c6c6693f58","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractCFMetaDataFactory.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -97,8 +97,8 @@ public void setFiles(String files) {\n             File file;\n             for (int i = 0; i < strs.length; i++) {\n                 file = new File(strs[i]);\n-                if (((Boolean)AccessController.doPrivileged( \n-                    J2DoPrivHelper.existsAction( file ))).booleanValue())\n+                if (((Boolean) AccessController.doPrivileged(\n+                    J2DoPrivHelper.existsAction(file))).booleanValue())\n                     this.files.add(file);\n             }\n         }\n@@ -377,8 +377,8 @@ private Set assignDefaultMetaDataFiles(ClassMetaData[] metas,\n                 queries[i].setSource(defaultSourceFile(queries[i],\n                     clsNames), queries[i].getSourceScope(),\n                     queries[i].getSourceType());\n-            if (((Boolean)AccessController.doPrivileged( \n-                J2DoPrivHelper.existsAction( queries[i].getSourceFile())))\n+            if (((Boolean) AccessController.doPrivileged(\n+                J2DoPrivHelper.existsAction(queries[i].getSourceFile())))\n                 .booleanValue()) {\n                 if (files == null)\n                     files = new HashSet();\n@@ -390,7 +390,7 @@ private Set assignDefaultMetaDataFiles(ClassMetaData[] metas,\n                 if (getSourceFile(seqs[i]) == null)\n                     setSourceFile(seqs[i], defaultSourceFile(seqs[i],\n                         clsNames));\n-                if (((Boolean)AccessController.doPrivileged( \n+                if (((Boolean) AccessController.doPrivileged(\n                     J2DoPrivHelper.existsAction(getSourceFile(seqs[i]))))\n                     .booleanValue()) {\n                     if (files == null)\n@@ -418,8 +418,8 @@ private Set assignDefaultQueryFiles(QueryMetaData[] queries,\n             if (queries[i].getSourceFile() == null)\n                 queries[i].setSource(defaultSourceFile(queries[i], clsNames),\n                     queries[i].getSourceScope(), queries[i].getSourceType());\n-            if (((Boolean)AccessController.doPrivileged( \n-                J2DoPrivHelper.existsAction( queries[i].getSourceFile() )))\n+            if (((Boolean) AccessController.doPrivileged(\n+                J2DoPrivHelper.existsAction(queries[i].getSourceFile())))\n                 .booleanValue()) {\n                 if (files == null)\n                     files = new HashSet();\n@@ -683,8 +683,8 @@ private Set parsePersistentTypeNames(ClassLoader loader)\n                         scan(new ZipStreamMetaDataIterator(\n                             new ZipInputStream(is),\n                             newMetaDataFilter()), cparser, names, true, url);\n-                    } catch( PrivilegedActionException pae ) {\n-                        throw (IOException)pae.getException();\n+                    } catch (PrivilegedActionException pae) {\n+                        throw (IOException) pae.getException();\n                     }\n                 } else {\n                     if (log.isTraceEnabled())\n@@ -703,7 +703,7 @@ private Set parsePersistentTypeNames(ClassLoader loader)\n             for (Iterator itr = rsrcs.iterator(); itr.hasNext();) {\n                 rsrc = (String) itr.next();\n                 if (rsrc.endsWith(\".jar\")) {\n-                    url = (URL)AccessController.doPrivileged( \n+                    url = (URL) AccessController.doPrivileged(\n                         J2DoPrivHelper.getResourceAction(loader, rsrc)); \n                     if (url != null) {\n                         if (log.isTraceEnabled())\n@@ -716,8 +716,8 @@ private Set parsePersistentTypeNames(ClassLoader loader)\n                                 (new ZipInputStream(is),\n                                 newMetaDataFilter()), cparser, names, true,\n                                 url);\n-                        } catch( PrivilegedActionException pae ) {\n-                            throw (IOException)pae.getException();\n+                        } catch (PrivilegedActionException pae) {\n+                            throw (IOException) pae.getException();\n                         }\n                     }\n                 } else {"},{"sha":"22396bde158e640f6b68c41bf8ddfb35db16a0fb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -187,7 +187,7 @@ private boolean populateFromPCRegistry(ClassMetaData meta) {\n             FieldMetaData fmd;\n             for (int i = 0; i < fieldNames.length; i ++) {\n                 if (meta.getAccessType() == ClassMetaData.ACCESS_FIELD)\n-                    member = (Field)AccessController.doPrivileged(\n+                    member = (Field) AccessController.doPrivileged(\n                         J2DoPrivHelper.getDeclaredFieldAction(\n                             cls,fieldNames[i])); \n                 else\n@@ -205,7 +205,7 @@ private boolean populateFromPCRegistry(ClassMetaData meta) {\n             throw ke;\n         } catch (Exception e) {\n             if (e instanceof PrivilegedActionException)\n-                e = ((PrivilegedActionException)e).getException();\n+                e = ((PrivilegedActionException) e).getException();\n             throw new UserException(e);\n         }\n     }\n@@ -217,11 +217,11 @@ private void populateFromReflection(ClassMetaData meta) {\n         Member[] members;\n         boolean iface = meta.getDescribedType().isInterface();\n         if (meta.getAccessType() == ClassMetaData.ACCESS_FIELD && !iface)\n-            members = (Field[])AccessController.doPrivileged( \n+            members = (Field[]) AccessController.doPrivileged(\n                 J2DoPrivHelper.getDeclaredFieldsAction(\n                     meta.getDescribedType())); \n         else\n-            members = (Method[])AccessController.doPrivileged( \n+            members = (Method[]) AccessController.doPrivileged(\n                 J2DoPrivHelper.getDeclaredMethodsAction(\n                     meta.getDescribedType())); \n \n@@ -332,7 +332,7 @@ public Member getBackingMember(FieldMetaData fmd) {\n             throw ke;\n         } catch (Exception e) {\n             if (e instanceof PrivilegedActionException)\n-                e = ((PrivilegedActionException)e).getException();\n+                e = ((PrivilegedActionException) e).getException();\n             throw new InternalException(e);\n         }\n     }"},{"sha":"74cfc4df981784a58079d60a8b03a38fe01945b0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -845,8 +845,8 @@ public boolean isAccessibleField(String field) {\n         if (getDeclaredField(field) != null)\n             return true;\n         if (_staticFields == null) {\n-            Field[] fields = (Field[])AccessController.doPrivileged( \n-                J2DoPrivHelper.getDeclaredFieldsAction( _type )); \n+            Field[] fields = (Field[]) AccessController.doPrivileged(\n+                J2DoPrivHelper.getDeclaredFieldsAction(_type)); \n             Set names = new HashSet((int) (fields.length * 1.33 + 1));\n             for (int i = 0; i < fields.length; i++)\n                 if (Modifier.isStatic(fields[i].getModifiers()))"},{"sha":"c00e5089095afbc49ca36d1727c5897c15f2d964","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -1251,7 +1251,7 @@ public Object getFieldValue(Object val, StoreContext ctx) {\n             if (e instanceof OpenJPAException)\n                 throw (OpenJPAException) e;\n             if (e instanceof PrivilegedActionException)\n-                e = ((PrivilegedActionException)e).getException();\n+                e = ((PrivilegedActionException) e).getException();\n             throw new MetaDataException(_loc.get(\"factory-err\", this,\n                 Exceptions.toString(val), e.toString())).setCause(e);\n         }\n@@ -1975,7 +1975,7 @@ public void readExternal(ObjectInput in)\n                 IOException ioe = new IOException(e.getMessage());\n                 ioe.initCause(e);\n                 throw ioe;\n-            } catch( PrivilegedActionException pae ) {\n+            } catch (PrivilegedActionException pae) {\n                 IOException ioe = new IOException(\n                     pae.getException().getMessage());\n                 ioe.initCause(pae);"},{"sha":"dd9dfc1b687d9a2e2356c8b2d2c8074eda7fd409","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InterfaceImplGenerator.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -77,7 +77,7 @@ public synchronized Class createImpl(ClassMetaData meta) {\n         if (impl != null)\n             return impl;\n \n-        ClassLoader parentLoader = (ClassLoader)AccessController.doPrivileged( \n+        ClassLoader parentLoader = (ClassLoader) AccessController.doPrivileged(\n             J2DoPrivHelper.getClassLoaderAction(iface)); \n         BCClassLoader loader = new BCClassLoader(_project, parentLoader);\n         BCClassLoader enhLoader = new BCClassLoader(_enhProject, parentLoader);\n@@ -87,7 +87,7 @@ public synchronized Class createImpl(ClassMetaData meta) {\n         if (sup != null) {\n             bc.setSuperclass(sup.getInterfaceImpl());\n             enhLoader = new BCClassLoader(_enhProject,\n-                (ClassLoader)AccessController.doPrivileged( \n+                (ClassLoader) AccessController.doPrivileged(\n                     J2DoPrivHelper.getClassLoaderAction(\n                         sup.getInterfaceImpl())));\n         }\n@@ -170,8 +170,8 @@ private void addField (BCClass bc, Class iface, FieldMetaData fmd,\n      */\n     private void invalidateNonBeanMethods(BCClass bc, Class iface, \n         Set methods) {\n-        Method[] meths = (Method[])AccessController.doPrivileged( \n-            J2DoPrivHelper.getDeclaredMethodsAction( iface )); \n+        Method[] meths = (Method[]) AccessController.doPrivileged(\n+            J2DoPrivHelper.getDeclaredMethodsAction(iface)); \n         BCMethod meth;\n         Code code;\n         Class type = _repos.getMetaDataFactory().getDefaults().\n@@ -208,7 +208,7 @@ private static Method getMethodSafe(Class iface, String name, Class arg) {\n             return (Method) AccessController.doPrivileged(\n                 J2DoPrivHelper.getDeclaredMethodAction(\n                     iface, name, arg == null ? null : new Class[]{arg}));\n-        } catch( PrivilegedActionException pae ) {\n+        } catch (PrivilegedActionException pae) {\n             throw new InternalException (_loc.get (\"interface-mismatch\", name));\n         }\n     }\n@@ -218,7 +218,7 @@ private static boolean isGetter(Class iface, FieldMetaData fmd) {\n             return true;\n         try {\n             Method meth = (Method) AccessController.doPrivileged(\n-                J2DoPrivHelper.getDeclaredMethodAction( iface, \"is\" +\n+                J2DoPrivHelper.getDeclaredMethodAction(iface, \"is\" +\n                     StringUtils.capitalize(fmd.getName()), (Class[]) null));\n             return meth == null;\n         } catch (PrivilegedActionException pae) {}"},{"sha":"30bc4e77e5501614f14de5a767c15c3fbbb66dc7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -401,7 +401,7 @@ private ClassMetaData getMetaDataInternal(Class cls,\n             if ((_validate & VALIDATE_RUNTIME) != 0) {\n                 try {\n                     Class.forName(cls.getName(), true,\n-                        (ClassLoader)AccessController.doPrivileged( \n+                        (ClassLoader) AccessController.doPrivileged(\n                             J2DoPrivHelper.getClassLoaderAction(cls)));\n                 } catch (Throwable t) {\n                 }\n@@ -980,7 +980,7 @@ private void resolveIdentityClass(Object oid) {\n         if (_log.isTraceEnabled())\n             _log.trace(_loc.get(\"resolve-identity\", oidClass));\n \n-        ClassLoader cl = (ClassLoader)AccessController.doPrivileged( \n+        ClassLoader cl = (ClassLoader) AccessController.doPrivileged(\n             J2DoPrivHelper.getClassLoaderAction(oidClass)); \n         String className;\n         while (oidClass != null && oidClass != Object.class) {"},{"sha":"73f99cb47639911eb837583469e851cba7ddf33b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/SequenceMetaData.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -255,7 +255,7 @@ protected Seq instantiate(ClassLoader envLoader) {\n             String clsName = plugin.getClassName();\n \n             Class cls = Class.forName(clsName, true,\n-                (ClassLoader)AccessController.doPrivileged( \n+                (ClassLoader) AccessController.doPrivileged(\n                     J2DoPrivHelper.getClassLoaderAction(Seq.class)));\n             StringBuffer props = new StringBuffer();\n             if (plugin.getProperties() != null)\n@@ -281,7 +281,7 @@ protected Seq instantiate(ClassLoader envLoader) {\n             throw ke;\n         } catch (Exception e) {\n             if (e instanceof PrivilegedActionException)\n-                e = ((PrivilegedActionException)e).getException();\n+                e = ((PrivilegedActionException) e).getException();\n             throw new MetaDataException(_loc.get(\"cant-init-seq\", _name)).\n                 setCause(e);\n         }"},{"sha":"f13dcc20f10de3780b98403ce56166bcacf1df95","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -194,7 +194,7 @@ public static Object fromPKValues(Object[] pks, ClassMetaData meta) {\n                 J2DoPrivHelper.newInstanceAction(oidType));\n         } catch (Throwable t) {\n             if (t instanceof PrivilegedActionException)\n-                t = ((PrivilegedActionException)t).getException();\n+                t = ((PrivilegedActionException) t).getException();\n             throw new GeneralException(t);\n         }\n \n@@ -328,7 +328,7 @@ private static Object copy(Object oid, ClassMetaData meta,\n                 J2DoPrivHelper.newInstanceAction(oidType));\n         } catch (Throwable t) {\n             if (t instanceof PrivilegedActionException)\n-                t = ((PrivilegedActionException)t).getException();\n+                t = ((PrivilegedActionException) t).getException();\n             throw new GeneralException(t);\n         }\n "},{"sha":"d43eca70156369769c8db8b1a4bee9d2d0ae01f6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ClassResolverImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/util/ClassResolverImpl.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/util/ClassResolverImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ClassResolverImpl.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -40,15 +40,15 @@ public ClassLoader getClassLoader(Class contextClass,\n         // class (the bootstrap loader is the parent of the system loader)\n         ClassLoader contextLoader = null;\n         if (contextClass != null) {\n-            contextLoader = (ClassLoader)AccessController.doPrivileged( \n+            contextLoader = (ClassLoader) AccessController.doPrivileged(\n                 J2DoPrivHelper.getClassLoaderAction(contextClass)); \n             if (contextLoader == null)\n-                contextLoader = (ClassLoader)AccessController.doPrivileged( \n+                contextLoader = (ClassLoader) AccessController.doPrivileged(\n                     J2DoPrivHelper.getSystemClassLoaderAction()); \n         }\n \n         // if there is only one unique loader, just return it\n-        ClassLoader threadLoader = (ClassLoader)AccessController.doPrivileged( \n+        ClassLoader threadLoader = (ClassLoader) AccessController.doPrivileged(\n             J2DoPrivHelper.getContextClassLoaderAction());\n         if ((contextLoader == null || contextLoader == threadLoader)\n             && (envLoader == null || envLoader == threadLoader))"},{"sha":"f13b8bad1a54cf155723df8693bd9a5e52f49c21","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Id.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/util/Id.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/util/Id.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Id.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -78,7 +78,7 @@ public Id(String str, OpenJPAConfiguration conf, ClassLoader brokerLoader) {\n      */\n     public Id(String str, ClassLoader loader) {\n         if (loader == null)\n-            loader = (ClassLoader)AccessController.doPrivileged( \n+            loader = (ClassLoader) AccessController.doPrivileged(\n                 J2DoPrivHelper.getContextClassLoaderAction());\n \n         if (str == null)"},{"sha":"bd2fd656ffeb5230f1040db63c28ff13d5c5a5b3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Proxies.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -48,10 +48,10 @@ public static boolean isOwner(Proxy proxy, OpenJPAStateManager sm,\n     public static void assertAllowedType(Object value, Class allowed) {\n         if (value != null && allowed != null && !allowed.isInstance(value)) {\n             throw new UserException(_loc.get(\"bad-elem-type\", new Object[]{\n-                (ClassLoader)AccessController.doPrivileged( \n+                (ClassLoader) AccessController.doPrivileged(\n                     J2DoPrivHelper.getClassLoaderAction(allowed)),\n                 allowed,\n-                (ClassLoader)AccessController.doPrivileged( \n+                (ClassLoader) AccessController.doPrivileged(\n                     J2DoPrivHelper.getClassLoaderAction(value.getClass())),\n                 value.getClass()\n             }));"},{"sha":"b5f54cb251ee37b598e57d4f2c6118dff2655df7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollections.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollections.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollections.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyCollections.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -287,7 +287,7 @@ public static void beforeRemove(ProxyCollection coll, int index) {\n     public static Object afterRemove(ProxyCollection coll, int index, \n         Object removed) {\n         if (coll.getChangeTracker() != null)\n-            ((CollectionChangeTracker)coll.getChangeTracker()).removed(removed);\n+            ((CollectionChangeTracker) coll.getChangeTracker()).removed(removed);\n         removed(coll, removed, false);\n         return removed;\n     }"},{"sha":"78cb5e7e1fd71095a4c10169fb7f4b5938f227c5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyManagerImpl.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -88,7 +88,7 @@\n         if (JavaVersions.VERSION >= 5) {\n             try {\n                 Class queue = Class.forName(\"java.util.Queue\", false,\n-                    (ClassLoader)AccessController.doPrivileged( \n+                    (ClassLoader) AccessController.doPrivileged(\n                         J2DoPrivHelper.getClassLoaderAction(\n                             Collection.class)));\n                 _stdCollections.put(queue, LinkedList.class);\n@@ -502,9 +502,9 @@ private Proxy instantiateProxy(Class cls, Constructor cons, Object[] args) {\n         } catch (InstantiationException ie) {\n             throw new UnsupportedException(_loc.get(\"cant-newinstance\", \n                 cls.getSuperclass().getName()));\n-        } catch( PrivilegedActionException pae ) {\n+        } catch (PrivilegedActionException pae) {\n             Exception e = pae.getException();\n-            if( e instanceof InstantiationException)\n+            if (e instanceof InstantiationException)\n                 throw new UnsupportedException(_loc.get(\"cant-newinstance\", \n                     cls.getSuperclass().getName()));\n             else\n@@ -519,9 +519,9 @@ private Proxy instantiateProxy(Class cls, Constructor cons, Object[] args) {\n      * classes.\n      */\n     private static ClassLoader getMostDerivedLoader(Class c1, Class c2) {\n-        ClassLoader l1 = (ClassLoader)AccessController.doPrivileged( \n+        ClassLoader l1 = (ClassLoader) AccessController.doPrivileged(\n             J2DoPrivHelper.getClassLoaderAction(c1)); \n-        ClassLoader l2 = (ClassLoader)AccessController.doPrivileged( \n+        ClassLoader l2 = (ClassLoader) AccessController.doPrivileged(\n             J2DoPrivHelper.getClassLoaderAction(c2)); \n         if (l1 == l2)\n             return l1;\n@@ -530,10 +530,10 @@ private static ClassLoader getMostDerivedLoader(Class c1, Class c2) {\n         if (l2 == null)\n             return l1;\n         \n-        for (ClassLoader p = (ClassLoader)AccessController.doPrivileged( \n-                J2DoPrivHelper.getParentAction( l1 )); p != null;\n-                p = (ClassLoader)AccessController.doPrivileged( \n-                    J2DoPrivHelper.getParentAction( p )))\n+        for (ClassLoader p = (ClassLoader) AccessController.doPrivileged(\n+                J2DoPrivHelper.getParentAction(l1)); p != null;\n+                p = (ClassLoader) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getParentAction(p)))\n             if (p == l2)\n                 return l1;\n         return l2;\n@@ -1588,7 +1588,7 @@ private static Constructor findComparatorConstructor(Class cls) {\n     public static void main(String[] args) \n         throws ClassNotFoundException, IOException {\n         File dir = Files.getClassFile(ProxyManagerImpl.class);\n-        dir = (dir == null) ? new File((String)AccessController.doPrivileged( \n+        dir = (dir == null) ? new File((String) AccessController.doPrivileged(\n             J2DoPrivHelper.getPropertyAction(\"user.dir\")))\n             : dir.getParentFile();\n "},{"sha":"d67a07563c6e7a4461a28aca81a3c050747ae343","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/Serialization.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/util/Serialization.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/util/Serialization.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/Serialization.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -131,7 +131,7 @@ protected Class resolveClass(ObjectStreamClass desc)\n         }\n \n         protected void addContextClassLoaders(MultiClassLoader loader) {\n-            loader.addClassLoader((ClassLoader)AccessController.doPrivileged( \n+            loader.addClassLoader((ClassLoader) AccessController.doPrivileged(\n                 J2DoPrivHelper.getContextClassLoaderAction()));\n         }\n     }"},{"sha":"62e6959db271f50163182383dd092fb205e46bbd","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreFacadeTypeRegistry.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreFacadeTypeRegistry.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreFacadeTypeRegistry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreFacadeTypeRegistry.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -42,7 +42,7 @@\n      */\r\n     public void registerImplementation(Class facadeType, Class storeType, \r\n         Class implType) {\r\n-        Object key = (storeType == null) ? (Object)facadeType \r\n+        Object key = (storeType == null) ? (Object) facadeType \r\n             : new Key(facadeType, storeType);\r\n         _impls.put(key, implType);\r\n     }\r"},{"sha":"0adb158fec99bbca021dfd4403a709d5af3c51d0","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/ant/AbstractTask.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -161,7 +161,7 @@ public void execute() throws BuildException {\n             _conf = newConfiguration();\n         if (_conf.getPropertiesResource() == null) {\n             ConfigurationProvider cp = ProductDerivations.loadDefaults\n-                ((ClassLoader)AccessController.doPrivileged(\n+                ((ClassLoader) AccessController.doPrivileged(\n                     J2DoPrivHelper.getClassLoaderAction(_conf.getClass())));\n             if (cp != null)\n                 cp.setInto(_conf);\n@@ -191,8 +191,8 @@ public void execute() throws BuildException {\n                 File f = new File(dsFiles[j]);\n                 if (!f.isFile())\n                     f = new File(ds.getBasedir(), dsFiles[j]);\n-                files.add((String)AccessController.doPrivileged(\n-                    J2DoPrivHelper.getAbsolutePathAction( f )));\n+                files.add((String) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getAbsolutePathAction(f)));\n             }\n         }\n         return (String[]) files.toArray(new String[files.size()]);"},{"sha":"c76e034870e537b5d6e8da92f278f4f3d3e0cf86","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -165,7 +165,7 @@ public ConfigurationImpl(boolean loadGlobals) {\n      */\n     public boolean loadGlobals() {\n         MultiClassLoader loader = new MultiClassLoader();\n-        loader.addClassLoader((ClassLoader)AccessController.doPrivileged( \n+        loader.addClassLoader((ClassLoader) AccessController.doPrivileged(\n             J2DoPrivHelper.getContextClassLoaderAction()));\n         loader.addClassLoader(getClass().getClassLoader());\n         ConfigurationProvider provider = ProductDerivations.loadGlobals(loader);\n@@ -175,7 +175,7 @@ public boolean loadGlobals() {\n         // let system properties override other globals\n         try {\n             fromProperties(new HashMap(\n-                (Properties)AccessController.doPrivileged( \n+                (Properties) AccessController.doPrivileged(\n                     J2DoPrivHelper.getPropertiesAction())));\n         } catch (SecurityException se) {\n             // security manager might disallow\n@@ -418,7 +418,7 @@ public Image getIcon(int kind) {\n                 descs.add(new MethodDescriptor(read));\n             }\n         }\n-        _mds = (MethodDescriptor[])descs.\n+        _mds = (MethodDescriptor[]) descs.\n             toArray(new MethodDescriptor[descs.size()]);\n         return _mds;\n     }"},{"sha":"28fbee5d918f8b833d9b085a86a9c0c552fdfe00","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -212,8 +212,8 @@ static Object newInstance(String clsName, Value val, Configuration conf,\n             return AccessController.doPrivileged(\n                 J2DoPrivHelper.newInstanceAction(cls));\n         } catch (Exception e) {\n-            if( e instanceof PrivilegedActionException) {\n-                e = ((PrivilegedActionException)e).getException();   \n+            if (e instanceof PrivilegedActionException) {\n+                e = ((PrivilegedActionException) e).getException();   \n             }\n             RuntimeException re = new NestableRuntimeException(_loc.get\n                 (\"obj-create\", cls).getMessage(), e);\n@@ -236,32 +236,32 @@ private static ClassLoader findDerivedLoader(Configuration conf,\n         // we always prefer the thread loader, because it's the only thing we\n         // can access that isn't bound to the OpenJPA classloader, unless\n         // the conf object is of a custom class\n-        ClassLoader ctxLoader = (ClassLoader)AccessController.doPrivileged( \n+        ClassLoader ctxLoader = (ClassLoader) AccessController.doPrivileged(\n             J2DoPrivHelper.getContextClassLoaderAction());\n         if (loader == null) {\n             if (ctxLoader != null)\n                 return ctxLoader;\n             if (conf != null)\n-                return (ClassLoader)AccessController.doPrivileged( \n+                return (ClassLoader) AccessController.doPrivileged(\n                     J2DoPrivHelper.getClassLoaderAction(conf.getClass())); \n             return Configurations.class.getClassLoader();\n         }\n \n         for (ClassLoader parent = ctxLoader; parent != null; \n-            parent = (ClassLoader)AccessController.doPrivileged( \n-                J2DoPrivHelper.getParentAction( parent ))) {\n+            parent = (ClassLoader) AccessController.doPrivileged(\n+                J2DoPrivHelper.getParentAction(parent))) {\n             if (parent == loader)\n                 return ctxLoader;\n         }\n         if (conf != null) {\n             for (ClassLoader parent = (ClassLoader)\n-                AccessController.doPrivileged( \n+                AccessController.doPrivileged(\n                     J2DoPrivHelper.getClassLoaderAction(conf.getClass())); \n                 parent != null; \n-                parent = (ClassLoader)AccessController.doPrivileged( \n-                    J2DoPrivHelper.getParentAction( parent ))) {\n+                parent = (ClassLoader) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getParentAction(parent))) {\n                 if (parent == loader)\n-                    return (ClassLoader)AccessController.doPrivileged( \n+                    return (ClassLoader) AccessController.doPrivileged(\n                         J2DoPrivHelper.getClassLoaderAction(conf.getClass())); \n             }\n         }"},{"sha":"0d4bd073f0205ec5e57e631a5d9702606b5c8e0e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/FileValue.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/FileValue.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/FileValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/FileValue.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -59,8 +59,8 @@ public File get() {\n     }\n \n     protected String getInternalString() {\n-        return (value == null) ? null : (String)AccessController.doPrivileged( \n-            J2DoPrivHelper.getAbsolutePathAction( value ));\n+        return (value == null) ? null : (String) AccessController.doPrivileged(\n+            J2DoPrivHelper.getAbsolutePathAction(value));\n     }\n \n     protected void setInternalString(String val) {"},{"sha":"629c0a3c0b959f22afd25b88423ea6580cceca34","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ObjectValue.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -97,10 +97,10 @@ public Object newInstance(String clsName, Class type, Configuration conf,\n             boolean fatal) {\n         ClassLoader cl = (ClassLoader) _classloaderCache.get(type);\n         if (cl == null) {\n-            cl = (ClassLoader)AccessController.doPrivileged( \n+            cl = (ClassLoader) AccessController.doPrivileged(\n                 J2DoPrivHelper.getClassLoaderAction(type));\n             if (cl == null) {  // System classloader is returned as null\n-                cl = (ClassLoader)AccessController.doPrivileged( \n+                cl = (ClassLoader) AccessController.doPrivileged(\n                     J2DoPrivHelper.getSystemClassLoaderAction()); \n             }\n             _classloaderCache.put(type, cl);"},{"sha":"152e6a4316e2cc920d0829f0b25fbdb9567271c4","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ProductDerivations.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -49,7 +49,7 @@\n     private static final Throwable[] _derivationErrors;\n     private static String[] _prefixes;\n     static {\n-        ClassLoader l = (ClassLoader)AccessController.doPrivileged( \n+        ClassLoader l = (ClassLoader) AccessController.doPrivileged(\n             J2DoPrivHelper.getClassLoaderAction(ProductDerivation.class)); \n         _derivationNames = Services.getImplementors(ProductDerivation.class, l);\n         _derivationErrors = new Throwable[_derivationNames.length];\n@@ -64,7 +64,7 @@\n                 derivations.add(d);\n             } catch (Throwable t) {\n                 if (t instanceof PrivilegedActionException)\n-                    t = ((PrivilegedActionException)t).getException();\n+                    t = ((PrivilegedActionException) t).getException();\n                 _derivationErrors[i] = t;\n             }\n         }\n@@ -235,7 +235,7 @@ public static ConfigurationProvider load(String resource, String anchor,\n         if (StringUtils.isEmpty(resource))\n             return null;\n         if (loader == null)\n-            loader = (ClassLoader)AccessController.doPrivileged( \n+            loader = (ClassLoader) AccessController.doPrivileged(\n                 J2DoPrivHelper.getContextClassLoaderAction());\n         ConfigurationProvider provider = null;\n         StringBuffer errs = null;\n@@ -266,7 +266,7 @@ public static ConfigurationProvider load(File file, String anchor,\n         if (file == null)\n             return null;\n         if (loader == null)\n-            loader = (ClassLoader)AccessController.doPrivileged( \n+            loader = (ClassLoader) AccessController.doPrivileged(\n                 J2DoPrivHelper.getContextClassLoaderAction());\n         ConfigurationProvider provider = null;\n         StringBuffer errs = null;\n@@ -281,8 +281,8 @@ public static ConfigurationProvider load(File file, String anchor,\n                 errs.append(_derivations[i].getClass().getName() + \":\" + t);\n             }\n         }\n-        String aPath = (String)AccessController.doPrivileged( \n-            J2DoPrivHelper.getAbsolutePathAction( file ));\n+        String aPath = (String) AccessController.doPrivileged(\n+            J2DoPrivHelper.getAbsolutePathAction(file));\n         reportErrors(errs, aPath);\n         throw new MissingResourceException(aPath, \n             ProductDerivations.class.getName(), aPath);\n@@ -308,7 +308,7 @@ public static ConfigurationProvider loadGlobals(ClassLoader loader) {\n     private static ConfigurationProvider load(ClassLoader loader, \n        boolean globals) {\n         if (loader == null)\n-            loader = (ClassLoader)AccessController.doPrivileged( \n+            loader = (ClassLoader) AccessController.doPrivileged(\n                 J2DoPrivHelper.getContextClassLoaderAction());\n         \n         ConfigurationProvider provider = null;"},{"sha":"bd0a2a4d0c8e849016bf07b71dabc07c9d415db3","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/log/LogFactoryImpl.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -185,10 +185,10 @@ else if (STDERR.equals(file))\n                 _out = new PrintStream((FileOutputStream)\n                     AccessController.doPrivileged(\n                         J2DoPrivHelper.newFileOutputStreamAction(\n-                            (String)AccessController.doPrivileged( \n-                                J2DoPrivHelper.getCanonicalPathAction( f )),\n+                            (String) AccessController.doPrivileged(\n+                                J2DoPrivHelper.getCanonicalPathAction(f)),\n                             true)));\n-            } catch( PrivilegedActionException pae ) {\n+            } catch (PrivilegedActionException pae) {\n                 throw new IllegalArgumentException(_loc.get(\"log-bad-file\",\n                         file) + \" \" + pae.getException());\n             } catch (IOException ioe) {"},{"sha":"a0a3f8e297c2b3e2b70be8f26642416f88709615","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataParser.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/CFMetaDataParser.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -298,7 +298,7 @@ public static Class classForName(String name, String pkg,\n             return null;\n \n         if (loader == null)\n-            loader = (ClassLoader)AccessController.doPrivileged( \n+            loader = (ClassLoader) AccessController.doPrivileged(\n                 J2DoPrivHelper.getContextClassLoaderAction());\n         boolean fullName = name.indexOf('.') != -1;\n         boolean noPackage = StringUtils.isEmpty(pkg);"},{"sha":"4c9526c6822a0bbd41fadc2605ed2fe672871fed","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassArgParser.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -214,8 +214,8 @@ public Map mapTypes(MetaDataIterator itr) {\n                 return new String[]{ getFromClassFile(file) };\n             if (arg.endsWith(\".java\"))\n                 return new String[]{ getFromJavaFile(file) };\n-            if (((Boolean)AccessController.doPrivileged( \n-                J2DoPrivHelper.existsAction( file ))).booleanValue()) {\n+            if (((Boolean) AccessController.doPrivileged(\n+                J2DoPrivHelper.existsAction(file))).booleanValue()) {\n                 Collection col = getFromMetaDataFile(file);\n                 return (String[]) col.toArray(new String[col.size()]);\n             }\n@@ -303,8 +303,8 @@ private String getFromClassFile(File file) throws IOException {\n             fin = (FileInputStream) AccessController.doPrivileged(\n                 J2DoPrivHelper.newFileInputStreamAction(file));\n             return getFromClass(fin);\n-        } catch( PrivilegedActionException pae ) {\n-            throw (FileNotFoundException)pae.getException();\n+        } catch (PrivilegedActionException pae) {\n+            throw (FileNotFoundException) pae.getException();\n         } finally {\n             if (fin != null)\n                 try {"},{"sha":"7bb7f69692256f8228da8c911e4746ba992c2cb8","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassMetaDataIterator.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClassMetaDataIterator.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -82,7 +82,7 @@ public ClassMetaDataIterator(Class cls, String suffix, ClassLoader loader,\n             if (cls != null)\n             {\n                 ClassLoader clsLoader = (ClassLoader)\n-                    AccessController.doPrivileged( \n+                    AccessController.doPrivileged(\n                         J2DoPrivHelper.getClassLoaderAction(cls));\n                 if (clsLoader != null)\n                     multi.addClassLoader(clsLoader);\n@@ -155,11 +155,11 @@ public boolean hasNext() throws IOException {\n             _url = -1;\n             _urls.clear();\n             try {\n-                e = (Enumeration)AccessController.doPrivileged( \n+                e = (Enumeration) AccessController.doPrivileged(\n                     J2DoPrivHelper.getResourcesAction(\n                         _loader, (String) _locs.get(_loc)));\n-            } catch( PrivilegedActionException pae ) {\n-                throw (IOException)pae.getException();\n+            } catch (PrivilegedActionException pae) {\n+                throw (IOException) pae.getException();\n             }    \n             while (e.hasMoreElements())\n                 _urls.add(e.nextElement());\n@@ -177,10 +177,10 @@ public InputStream getInputStream() throws IOException {\n         if (_url == -1 || _url >= _urls.size())\n             throw new IllegalStateException();\n         try {\n-            return (InputStream)AccessController.doPrivileged(\n+            return (InputStream) AccessController.doPrivileged(\n                 J2DoPrivHelper.openStreamAction((URL) _urls.get(_url)));\n-        } catch( PrivilegedActionException pae ) {\n-            throw (IOException)pae.getException();\n+        } catch (PrivilegedActionException pae) {\n+            throw (IOException) pae.getException();\n         }\n     }\n \n@@ -189,8 +189,8 @@ public File getFile() throws IOException {\n             throw new IllegalStateException();\n         File file = new File(URLDecoder.decode(((URL) _urls.get(_url)).\n             getFile()));\n-        return (((Boolean)AccessController.doPrivileged( \n-            J2DoPrivHelper.existsAction( file ))).booleanValue()) ? file:null;\n+        return (((Boolean) AccessController.doPrivileged(\n+            J2DoPrivHelper.existsAction(file))).booleanValue()) ? file:null;\n     }\n \n     public void close() {"},{"sha":"b90772062ee17a58e7189e07c18f5d7c74704239","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClasspathMetaDataIterator.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClasspathMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClasspathMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ClasspathMetaDataIterator.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -50,7 +50,7 @@ public ClasspathMetaDataIterator() throws IOException {\n      */\n     public ClasspathMetaDataIterator(String[] dirs, MetaDataFilter filter)\n         throws IOException {\n-        Properties props = (Properties)AccessController.doPrivileged( \n+        Properties props = (Properties) AccessController.doPrivileged(\n             J2DoPrivHelper.getPropertiesAction()); \n         String path = props.getProperty(\"java.class.path\");\n         String[] tokens = Strings.split(path,\n@@ -61,8 +61,8 @@ public ClasspathMetaDataIterator(String[] dirs, MetaDataFilter filter)\n                 continue;\n \n             File file = new File(tokens[i]);\n-            if (!((Boolean)AccessController.doPrivileged( \n-                J2DoPrivHelper.existsAction( file ))).booleanValue())\n+            if (!((Boolean) AccessController.doPrivileged(\n+                J2DoPrivHelper.existsAction(file))).booleanValue())\n                 continue;\n             if (file.isDirectory())\n                 addIterator(new FileMetaDataIterator(file, filter));"},{"sha":"54fc0734c737a7dfd860fa6ed325fda575034cc2","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -121,8 +121,8 @@ public InputStream getInputStream() throws IOException {\n             fis = (FileInputStream) AccessController.doPrivileged(\n                 J2DoPrivHelper.newFileInputStreamAction(_file));\n             return fis;\n-        } catch( PrivilegedActionException pae ) {\n-            throw (FileNotFoundException)pae.getException();\n+        } catch (PrivilegedActionException pae) {\n+            throw (FileNotFoundException) pae.getException();\n         }\n     }\n \n@@ -148,14 +148,14 @@ public String getName() {\n         }\n \n         public byte[] getContent() throws IOException {\n-            long len = ((Long)AccessController.doPrivileged( \n-                J2DoPrivHelper.lengthAction( _file ))).longValue();\n+            long len = ((Long) AccessController.doPrivileged(\n+                J2DoPrivHelper.lengthAction(_file))).longValue();\n             FileInputStream fin = null;\n             try {\n                 fin = (FileInputStream) AccessController.doPrivileged(\n                     J2DoPrivHelper.newFileInputStreamAction(_file));\n-            } catch( PrivilegedActionException pae ) {\n-                 throw (FileNotFoundException)pae.getException();\n+            } catch (PrivilegedActionException pae) {\n+                 throw (FileNotFoundException) pae.getException();\n             }\n             try {\n                 byte[] content;"},{"sha":"5954061e725366db705e5f8facb67135fe26ce3c","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ResourceMetaDataIterator.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ResourceMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ResourceMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ResourceMetaDataIterator.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -65,15 +65,15 @@ public ResourceMetaDataIterator(String rsrc, ClassLoader loader)\n         }\n \n         try {\n-            Enumeration e = (Enumeration)AccessController.doPrivileged( \n+            Enumeration e = (Enumeration) AccessController.doPrivileged(\n                 J2DoPrivHelper.getResourcesAction(loader, rsrc));\n             while (e.hasMoreElements()) {\n                 if (_urls == null)\n                     _urls = new ArrayList(3);\n                 _urls.add(e.nextElement());\n             }\n-        } catch( PrivilegedActionException pae ) {\n-            throw (IOException)pae.getException();\n+        } catch (PrivilegedActionException pae) {\n+            throw (IOException) pae.getException();\n         }\n     }\n \n@@ -91,10 +91,10 @@ public InputStream getInputStream() throws IOException {\n         if (_url == -1 || _url >= _urls.size())\n             throw new IllegalStateException();\n         try {\n-            return (InputStream)AccessController.doPrivileged(\n+            return (InputStream) AccessController.doPrivileged(\n                 J2DoPrivHelper.openStreamAction((URL) _urls.get(_url)));\n-        } catch( PrivilegedActionException pae ) {\n-            throw (IOException)pae.getException();\n+        } catch (PrivilegedActionException pae) {\n+            throw (IOException) pae.getException();\n         }\n     }\n \n@@ -103,8 +103,8 @@ public File getFile() throws IOException {\n             throw new IllegalStateException();\n         File file = new File(URLDecoder.decode(((URL) _urls.get(_url)).\n             getFile()));\n-        return (((Boolean)AccessController.doPrivileged( \n-            J2DoPrivHelper.existsAction( file ))).booleanValue()) ? file :null;\n+        return (((Boolean) AccessController.doPrivileged(\n+            J2DoPrivHelper.existsAction(file))).booleanValue()) ? file :null;\n     }\n \n     public void close() {"},{"sha":"611b685436fe043e68de9fd91522cb158296b826","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -49,7 +49,7 @@ public static String getSourceLocationMessage(SourceTracker[] trackers) {\n         for (int i = 0; i < trackers.length; i++) {\n             sourceFilePath = (trackers[i].getSourceFile() == null ?\n                 _loc.get(\"source-tracker-file-unknown\").getMessage() :\n-                (String)AccessController.doPrivileged( \n+                (String) AccessController.doPrivileged(\n                     J2DoPrivHelper.getAbsolutePathAction(\n                         trackers[i].getSourceFile())));\n             buf.append(\"  \").append(_loc.get("},{"sha":"423313c139b43a0d56e7556130b5d29c8536e337","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/URLMetaDataIterator.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/URLMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/URLMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/URLMetaDataIterator.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -64,10 +64,10 @@ public InputStream getInputStream() throws IOException {\n         if (_url == null)\n             return null;\n         try {\n-            return (InputStream)AccessController.doPrivileged(\n+            return (InputStream) AccessController.doPrivileged(\n                 J2DoPrivHelper.openStreamAction(_url));\n-        } catch( PrivilegedActionException pae ) {\n-            throw (IOException)pae.getException();\n+        } catch (PrivilegedActionException pae) {\n+            throw (IOException) pae.getException();\n         }\n     }\n \n@@ -77,8 +77,8 @@ public File getFile() {\n         if (_url == null)\n             return null;\n         File file = new File(URLDecoder.decode(_url.getPath()));\n-        return (((Boolean)AccessController.doPrivileged( \n-            J2DoPrivHelper.existsAction( file ))).booleanValue()) ? file:null;\n+        return (((Boolean) AccessController.doPrivileged(\n+            J2DoPrivHelper.existsAction(file))).booleanValue()) ? file:null;\n     }\n \n     public void close() {"},{"sha":"22ab634eda2ab0c3cd9b65e62a7348bba281a87c","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -631,7 +631,7 @@ protected ClassLoader currentClassLoader() {\n         if (_loader != null)\n             return _loader;\n         if (_curLoader == null)\n-            _curLoader = (ClassLoader)AccessController.doPrivileged( \n+            _curLoader = (ClassLoader) AccessController.doPrivileged(\n                 J2DoPrivHelper.getContextClassLoaderAction());\n         return _curLoader;\n     }"},{"sha":"92376405ae591922a8c14916213aaa4258b7700e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataSerializer.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataSerializer.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -138,10 +138,10 @@ protected File prepareWrite(File file) throws IOException {\n         File backup = Files.backup(file, false);\n         if (backup == null) {\n             File parent = file.getParentFile();\n-            if (parent != null && !((Boolean)AccessController.doPrivileged( \n-                J2DoPrivHelper.existsAction( parent ))).booleanValue())\n-                AccessController.doPrivileged( \n-                    J2DoPrivHelper.mkdirsAction( parent ));\n+            if (parent != null && !((Boolean) AccessController.doPrivileged(\n+                J2DoPrivHelper.existsAction(parent))).booleanValue())\n+                AccessController.doPrivileged(\n+                    J2DoPrivHelper.mkdirsAction(parent));\n         }\n         return backup;\n     }\n@@ -198,13 +198,13 @@ public void serialize(File file, int flags) throws IOException {\n         _backup = prepareWrite(file);\n         try {\n             FileWriter out = new FileWriter(\n-                (String)AccessController.doPrivileged( \n-                    J2DoPrivHelper.getCanonicalPathAction( file )),\n+                (String) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getCanonicalPathAction(file)),\n                 (flags & APPEND) > 0);\n             serialize(out, flags);\n             out.close();\n-        } catch( PrivilegedActionException pae ) {\n-            throw (IOException)pae.getException();\n+        } catch (PrivilegedActionException pae) {\n+            throw (IOException) pae.getException();\n         }\n     }\n "},{"sha":"acc4d737685fe730777026bf5430315071120570","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -61,8 +61,8 @@ public ZipFileMetaDataIterator(URL url, MetaDataFilter filter)\n             try {\n                 _file = (ZipFile) AccessController.doPrivileged(\n                     J2DoPrivHelper.getContentAction(con));\n-            } catch( PrivilegedActionException pae ) {\n-                 throw (IOException)pae.getException();\n+            } catch (PrivilegedActionException pae) {\n+                 throw (IOException) pae.getException();\n             }\n         }\n         _filter = filter;"},{"sha":"74c592d78eb160cc765cfae6d2e5142d1a5b87d5","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Files.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Files.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Files.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Files.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -51,17 +51,17 @@\n      * the file does not exist or a backup could not be created, returns null.\n      */\n     public static File backup(File file, boolean copy) {\n-        if (file == null || !((Boolean)AccessController.doPrivileged( \n-            J2DoPrivHelper.existsAction( file ))).booleanValue())\n+        if (file == null || !((Boolean) AccessController.doPrivileged(\n+            J2DoPrivHelper.existsAction(file))).booleanValue())\n             return null;\n \n         // create new file object copy so we don't modify the original\n-        String aPath = (String)AccessController.doPrivileged( \n-            J2DoPrivHelper.getAbsolutePathAction( file ));\n+        String aPath = (String) AccessController.doPrivileged(\n+            J2DoPrivHelper.getAbsolutePathAction(file));\n         File clone = new File(aPath);\n         File bk = new File(aPath + \"~\");\n-        if (!((Boolean)AccessController.doPrivileged( \n-            J2DoPrivHelper.renameToAction( clone, bk ))).booleanValue())\n+        if (!((Boolean) AccessController.doPrivileged(\n+            J2DoPrivHelper.renameToAction(clone, bk))).booleanValue())\n             return null;\n         if (copy) {\n             try {\n@@ -83,17 +83,17 @@ public static File revert(File backup, boolean copy) {\n             return null;\n         if (!backup.getName().endsWith(\"~\"))\n             backup = new File(backup.getPath() + \"~\");\n-        if (!((Boolean)AccessController.doPrivileged( \n-            J2DoPrivHelper.existsAction( backup ))).booleanValue())\n+        if (!((Boolean) AccessController.doPrivileged(\n+            J2DoPrivHelper.existsAction(backup))).booleanValue())\n             return null;\n \n         // create new file object copy so we don't modify the original\n-        String path = (String)AccessController.doPrivileged( \n-            J2DoPrivHelper.getAbsolutePathAction( backup )); \n+        String path = (String) AccessController.doPrivileged(\n+            J2DoPrivHelper.getAbsolutePathAction(backup)); \n         File clone = new File(path);\n         File orig = new File(path.substring(0, path.length() - 1));\n-        if (!((Boolean)AccessController.doPrivileged( \n-            J2DoPrivHelper.renameToAction( clone, orig ))).booleanValue())\n+        if (!((Boolean) AccessController.doPrivileged(\n+            J2DoPrivHelper.renameToAction(clone, orig))).booleanValue())\n             return null;\n         if (copy) {\n             try {\n@@ -132,7 +132,7 @@ private static File getClassFile(Class cls, String ext) {\n         if (innerIdx != -1)\n             name = name.substring(0, innerIdx);\n \n-        URL rsrc = (URL)AccessController.doPrivileged( \n+        URL rsrc = (URL) AccessController.doPrivileged(\n             J2DoPrivHelper.getResourceAction(cls, name + ext)); \n         if (rsrc != null && rsrc.getProtocol().equals(\"file\"))\n             return new File(URLDecoder.decode(rsrc.getFile()));\n@@ -148,34 +148,34 @@ private static File getClassFile(Class cls, String ext) {\n      */\n     public static File getPackageFile(File base, String pkg, boolean mkdirs) {\n         if (base == null)\n-            base = new File((String)AccessController.doPrivileged( \n+            base = new File((String) AccessController.doPrivileged(\n                 J2DoPrivHelper.getPropertyAction(\"user.dir\")));\n         if (StringUtils.isEmpty(pkg)) {\n-            if (mkdirs && !((Boolean)AccessController.doPrivileged( \n-                J2DoPrivHelper.existsAction( base ))).booleanValue())\n+            if (mkdirs && !((Boolean) AccessController.doPrivileged(\n+                J2DoPrivHelper.existsAction(base))).booleanValue())\n                 AccessController.doPrivileged(\n-                    J2DoPrivHelper.mkdirsAction( base ));\n+                    J2DoPrivHelper.mkdirsAction(base));\n             return base;\n         }\n \n         pkg = pkg.replace('.', File.separatorChar);\n         File file = null;\n         try {\n-            if (((String)AccessController.doPrivileged( \n-                J2DoPrivHelper.getCanonicalPathAction( base ))).endsWith(pkg))\n+            if (((String) AccessController.doPrivileged(\n+                J2DoPrivHelper.getCanonicalPathAction(base))).endsWith(pkg))\n                 file = base;\n             else\n                 file = new File(base, pkg);\n-        } catch( PrivilegedActionException pae ) {\n+        } catch (PrivilegedActionException pae) {\n             throw new NestableRuntimeException(\n-                (IOException)pae.getException());\n+                (IOException) pae.getException());\n         } catch (IOException ioe) {\n             throw new NestableRuntimeException(ioe);\n         }\n \n-        if (mkdirs && !((Boolean)AccessController.doPrivileged( \n-            J2DoPrivHelper.existsAction( file ))).booleanValue())\n-            AccessController.doPrivileged(J2DoPrivHelper.mkdirsAction( file ));\n+        if (mkdirs && !((Boolean) AccessController.doPrivileged(\n+            J2DoPrivHelper.existsAction(file))).booleanValue())\n+            AccessController.doPrivileged(J2DoPrivHelper.mkdirsAction(file));\n         return file;\n     }\n \n@@ -195,21 +195,21 @@ public static File getFile(String name, ClassLoader loader) {\n             return null;\n \n         File file = new File(name);\n-        if (((Boolean)AccessController.doPrivileged( \n-            J2DoPrivHelper.existsAction( file ))).booleanValue())\n+        if (((Boolean) AccessController.doPrivileged(\n+            J2DoPrivHelper.existsAction(file))).booleanValue())\n             return file;\n \n         if (loader == null)\n-            loader = (ClassLoader)AccessController.doPrivileged( \n+            loader = (ClassLoader) AccessController.doPrivileged(\n                 J2DoPrivHelper.getContextClassLoaderAction());\n-        URL url = (URL)AccessController.doPrivileged( \n+        URL url = (URL) AccessController.doPrivileged(\n             J2DoPrivHelper.getResourceAction(loader, name)); \n         if (url != null) {\n             String urlFile = url.getFile();\n             if (urlFile != null) {\n                 File rsrc = new File(URLDecoder.decode(urlFile));\n-                if (((Boolean)AccessController.doPrivileged( \n-                    J2DoPrivHelper.existsAction( rsrc ))).booleanValue())\n+                if (((Boolean) AccessController.doPrivileged(\n+                    J2DoPrivHelper.existsAction(rsrc))).booleanValue())\n                     return rsrc;\n             }\n         }\n@@ -257,7 +257,7 @@ public static OutputStream getOutputStream(String file,\n             return (FileOutputStream) AccessController.doPrivileged(\n                 J2DoPrivHelper.newFileOutputStreamAction(\n                     getFile(file, loader)));\n-        } catch( PrivilegedActionException pae ) {\n+        } catch (PrivilegedActionException pae) {\n             throw new NestableRuntimeException(pae.getException());\n         } catch (IOException ioe) {\n             throw new NestableRuntimeException(ioe);\n@@ -269,8 +269,8 @@ public static OutputStream getOutputStream(String file,\n      */\n     public static boolean copy(File from, File to) throws IOException {\n         if (from == null || to == null ||\n-            !((Boolean)AccessController.doPrivileged( \n-                J2DoPrivHelper.existsAction( from ))).booleanValue())\n+            !((Boolean) AccessController.doPrivileged(\n+                J2DoPrivHelper.existsAction(from))).booleanValue())\n             return false;\n \n         FileInputStream in = null;\n@@ -285,8 +285,8 @@ public static boolean copy(File from, File to) throws IOException {\n             for (int b; (b = inbuf.read()) != -1; outbuf.write(b)) ;\n             outbuf.flush();\n             return true;\n-        } catch( PrivilegedActionException pae ) {\n-            throw (FileNotFoundException)pae.getException();\n+        } catch (PrivilegedActionException pae) {\n+            throw (FileNotFoundException) pae.getException();\n         } finally {\n             if (in != null)\n                 try {"},{"sha":"c92c72345e3edef7b255b62e80f17309e1f8070b","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -74,31 +74,31 @@\n  * 2) Methods with no exception thrown. PrivilegedAction is returned from\n  *    J2DoPrivHelper.*Action(). E.g.\n  *      \n- *    ClassLoader loader = (ClassLoader)AccessController.doPrivileged( \n- *                             J2DoPrivHelper.getClassLoaderAction( clazz ));\n+ *    ClassLoader loader = (ClassLoader) AccessController.doPrivileged(\n+ *                             J2DoPrivHelper.getClassLoaderAction(clazz));\n  *                               \n  *    ClassLoader loader = (ClassLoader) (System.getSecurityManager() == null)\n  *                         ? clazz.getClassLoader()\n- *                         : AccessController.doPrivileged( \n- *                             J2DoPrivHelper.getClassLoaderAction( clazz ));\n+ *                         : AccessController.doPrivileged(\n+ *                             J2DoPrivHelper.getClassLoaderAction(clazz));\n  * 3) Methods with exception thrown. PrivilegedExceptionAction is returned\n  *    from J2DoPrivHelper.*Action(). E.g.\n  *    \n  *    try {\n  *      method = (Method) AccessController.doPrivileged(\n  *        J2DoPrivHelper.getDeclaredMethodAction(clazz, name, parameterType));\n- *    } catch( PrivilegedActionException pae ) {\n- *      throw (NoSuchMethodException)pae.getException();\n+ *    } catch (PrivilegedActionException pae) {\n+ *      throw (NoSuchMethodException) pae.getException();\n  *    }\n  *    \n  *    try {\n- *      method = ( System.getSecurityManager() == null )\n+ *      method = (System.getSecurityManager() == null)\n  *        ? clazz.getDeclaredMethod(name,parameterType)\n  *        : (Method) AccessController.doPrivileged(\n  *            J2DoPrivHelper.getDeclaredMethodAction(\n  *              clazz, name, parameterType));\n- *    } catch( PrivilegedActionException pae ) {\n- *        throw (NoSuchMethodException)pae.getException()\n+ *    } catch (PrivilegedActionException pae) {\n+ *        throw (NoSuchMethodException) pae.getException()\n  *    }                               \n  * </xmp> \n  * @author Albert Lee\n@@ -409,7 +409,7 @@ public Object run() throws IOException {\n     public static final PrivilegedAction lengthAction(final File f) {\n         return new PrivilegedAction() {\n             public Object run() {\n-                return new Long( f.length() );\n+                return new Long(f.length());\n             }\n         };\n     }"},{"sha":"40999a7595029b95e8117e2175adedbc882d2e91","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/JavaVersions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/JavaVersions.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/JavaVersions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/JavaVersions.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -46,7 +46,7 @@\n     private static Method INIT_CAUSE = null;\n \n     static {\n-        String specVersion = (String)AccessController.doPrivileged( \n+        String specVersion = (String) AccessController.doPrivileged(\n             J2DoPrivHelper.getPropertyAction(\"java.specification.version\")); \n         if (\"1.2\".equals(specVersion))\n             VERSION = 2;"},{"sha":"7d8210a54cd26c943f8c2a00d78518b0b2397780","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -100,7 +100,7 @@ public static Localizer forPackage(Class cls, Locale locale) {\n             return loc;\n         else {\n             loc = new Localizer(pkg, file, locale, \n-                cls == null ? null:(ClassLoader)AccessController.doPrivileged( \n+                cls == null ? null:(ClassLoader) AccessController.doPrivileged(\n                     J2DoPrivHelper.getClassLoaderAction(cls))); \n             _localizers.put(key, loc);\n             return loc;"},{"sha":"e78e865ab3e0e37238143023292e520bc4e7a5b0","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -48,7 +48,7 @@\n      * The standard system class loader.\n      */\n     public static final ClassLoader SYSTEM_LOADER =\n-        (ClassLoader)AccessController.doPrivileged( \n+        (ClassLoader) AccessController.doPrivileged(\n             J2DoPrivHelper.getSystemClassLoaderAction());\n \n     private List _loaders = new ArrayList(5);\n@@ -85,7 +85,7 @@ public boolean containsClassLoader(ClassLoader loader) {\n         for (int i = 0; i < loaders.length; i++) {\n             loader = (ClassLoader) itr.next();\n             if (loader == THREAD_LOADER)\n-                loader = (ClassLoader)AccessController.doPrivileged( \n+                loader = (ClassLoader) AccessController.doPrivileged(\n                     J2DoPrivHelper.getContextClassLoaderAction());\n             loaders[i] = loader;\n         }\n@@ -98,7 +98,7 @@ public boolean containsClassLoader(ClassLoader loader) {\n     public ClassLoader getClassLoader(int index) {\n         ClassLoader loader = (ClassLoader) _loaders.get(index);\n         if (loader == THREAD_LOADER)\n-            loader = (ClassLoader)AccessController.doPrivileged( \n+            loader = (ClassLoader) AccessController.doPrivileged(\n                 J2DoPrivHelper.getContextClassLoaderAction());\n         return loader;\n     }\n@@ -206,7 +206,7 @@ protected Class findClass(String name) throws ClassNotFoundException {\n         for (Iterator itr = _loaders.iterator(); itr.hasNext();) {\n             loader = (ClassLoader) itr.next();\n             if (loader == THREAD_LOADER)\n-                loader = (ClassLoader)AccessController.doPrivileged( \n+                loader = (ClassLoader) AccessController.doPrivileged(\n                     J2DoPrivHelper.getContextClassLoaderAction());\n             try {\n                 return Class.forName(name, false, loader);\n@@ -222,13 +222,13 @@ protected URL findResource(String name) {\n         for (Iterator itr = _loaders.iterator(); itr.hasNext();) {\n             loader = (ClassLoader) itr.next();\n             if (loader == THREAD_LOADER)\n-                loader = (ClassLoader)AccessController.doPrivileged( \n+                loader = (ClassLoader) AccessController.doPrivileged(\n                     J2DoPrivHelper.getContextClassLoaderAction());\n \n             if (loader == null) // skip \n                 continue;\n \n-            rsrc = (URL)AccessController.doPrivileged( \n+            rsrc = (URL) AccessController.doPrivileged(\n                 J2DoPrivHelper.getResourceAction(loader, name)); \n             if (rsrc != null)\n                 return rsrc;\n@@ -244,20 +244,20 @@ protected Enumeration findResources(String name) throws IOException {\n         for (Iterator itr = _loaders.iterator(); itr.hasNext();) {\n             loader = (ClassLoader) itr.next();\n             if (loader == THREAD_LOADER)\n-                loader = (ClassLoader)AccessController.doPrivileged( \n+                loader = (ClassLoader) AccessController.doPrivileged(\n                     J2DoPrivHelper.getContextClassLoaderAction());\n             \n \n             try {\n-                rsrcs = (Enumeration)AccessController.doPrivileged( \n+                rsrcs = (Enumeration) AccessController.doPrivileged(\n                     J2DoPrivHelper.getResourcesAction(loader, name)); \n                 while (rsrcs.hasMoreElements()) {\n                     rsrc = rsrcs.nextElement();\n                     if (!all.contains(rsrc))\n                         all.addElement(rsrc);\n                 }\n-            } catch( PrivilegedActionException pae ) {\n-                throw (IOException)pae.getException();\n+            } catch (PrivilegedActionException pae) {\n+                throw (IOException) pae.getException();\n             }                \n         }\n         return all.elements();"},{"sha":"722fbf78615508207265c86a3abebafd45fc4a0d","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -369,7 +369,7 @@ else if (params.length == setMeth.getParameterTypes().length\n                 try {\n                     inner = AccessController.doPrivileged(\n                         J2DoPrivHelper.newInstanceAction(innerType));\n-                } catch( PrivilegedActionException pae ) {\n+                } catch (PrivilegedActionException pae) {\n                     throw pae.getException();\n                 }\n                 invoke(match[0], setter, new Object[]{ inner });\n@@ -455,7 +455,7 @@ private Object stringToObject(String str, Class type) throws Exception {\n         try {\n             return AccessController.doPrivileged(\n                 J2DoPrivHelper.newInstanceAction(subType));\n-        } catch( PrivilegedActionException pae ) {\n+        } catch (PrivilegedActionException pae) {\n             throw pae.getException();\n         }\n     }"},{"sha":"b814cfcf83cb8984209a699a5450ede44b645028","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParameterTemplate.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParameterTemplate.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParameterTemplate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParameterTemplate.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -211,7 +211,7 @@ public String toString() {\n                 if (_params.containsKey(param.toString()))\n                     copy.append(_params.get(param.toString()));\n                 else\n-                    copy.append((String)AccessController.doPrivileged( \n+                    copy.append((String) AccessController.doPrivileged(\n                         J2DoPrivHelper.getPropertyAction(param.toString())));\n                 param = null;\n             } else if (param != null)"},{"sha":"7dabf83784262dc41c3b00cb0885904bd1f6f5e0","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -85,12 +85,12 @@\n     public static String[] getImplementors(String serviceName,\n         ClassLoader loader) {\n         if (loader == null)\n-            loader = (ClassLoader)AccessController.doPrivileged( \n+            loader = (ClassLoader) AccessController.doPrivileged(\n                 J2DoPrivHelper.getContextClassLoaderAction());\n \n         try {\n             Set resourceList = new TreeSet();\n-            Enumeration resources = (Enumeration)AccessController.doPrivileged( \n+            Enumeration resources = (Enumeration) AccessController.doPrivileged(\n                 J2DoPrivHelper.getResourcesAction(loader, PREFIX + serviceName)); \n             while (resources.hasMoreElements())\n                 addResources((URL) resources.nextElement(), resourceList);\n@@ -178,7 +178,7 @@ private static void addResources(URL url, Set set) throws IOException {\n     public static Class[] getImplementorClasses(String serviceName,\n         ClassLoader loader, boolean skipMissing) throws ClassNotFoundException {\n         if (loader == null)\n-            loader = (ClassLoader)AccessController.doPrivileged( \n+            loader = (ClassLoader) AccessController.doPrivileged(\n                 J2DoPrivHelper.getContextClassLoaderAction());\n \n         String[] names = getImplementors(serviceName, loader);"},{"sha":"43fe7bc5d57c172194f87feb9662a2043ecc3a65","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StreamResourceBundleProvider.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StreamResourceBundleProvider.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StreamResourceBundleProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StreamResourceBundleProvider.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -38,7 +38,7 @@ public ResourceBundle findResource(String name, Locale locale,\n         ClassLoader loader) {\n         String rsrc = name.replace('.', '/') + \".properties\";\n         if (loader == null)\n-            loader = (ClassLoader)AccessController.doPrivileged( \n+            loader = (ClassLoader) AccessController.doPrivileged(\n                 J2DoPrivHelper.getContextClassLoaderAction());\n \n         InputStream in = loader.getResourceAsStream(rsrc);"},{"sha":"fb8a117b6a36941a4ba1a93a459247904ce3efc1","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -88,7 +88,7 @@\n     // when it overflows\n     private static long _lastMillis = 0L;\n     private static final int MAX_14BIT = 0x3FFF;\n-    private static short _seq = (short)RANDOM.nextInt(MAX_14BIT);\n+    private static short _seq = (short) RANDOM.nextInt(MAX_14BIT);\n \n     /*\n      * Static initializer to get the IP address of the host machine.\n@@ -216,7 +216,7 @@ private static long getUUIDTime() {\n     private static void incrementSequence() {\n         // increment, but if it's greater than its 14-bits, reset it\n         if (++_seq > MAX_14BIT) {\n-            _seq = (short)RANDOM.nextInt(MAX_14BIT);  // semi-random\n+            _seq = (short) RANDOM.nextInt(MAX_14BIT);  // semi-random\n         }\n     }\n "},{"sha":"dfedda2aba36cc8156b79c80cef7a2ec08c664e2","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ZipResourceBundleProvider.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ZipResourceBundleProvider.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ZipResourceBundleProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ZipResourceBundleProvider.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -40,7 +40,7 @@ public ResourceBundle findResource(String name, Locale locale,\n         ClassLoader loader) {\n         String rsrc = name.replace('.', '/') + \".properties\";\n         if (loader == null)\n-            loader = (ClassLoader)AccessController.doPrivileged( \n+            loader = (ClassLoader) AccessController.doPrivileged(\n                 J2DoPrivHelper.getContextClassLoaderAction());\n \n         InputStream in = loader.getResourceAsStream(rsrc);"},{"sha":"06bf5f3f95105b174a94279cf1f1824603c43826","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Utils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Utils.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Utils.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/Utils.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -55,7 +55,7 @@\n     static {\n         NanoTimer timer = null;\n         try {\n-            String nanoTimerClassName = (String)AccessController.doPrivileged( \n+            String nanoTimerClassName = (String) AccessController.doPrivileged(\n                 J2DoPrivHelper.getPropertyAction(providerProp)); \n             if (nanoTimerClassName != null) {\n                 Class cls = Class.forName(nanoTimerClassName);"},{"sha":"7ffc3b40b8f4c12e95b889ac8ef921798c768f34","filename":"openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -886,10 +886,10 @@ private boolean startUniqueConstraint(Attributes attrs)\n      * ClassMappingInfo. \n      */\n     private void endUniqueConstraint() {\n-        Unique unique = (Unique)popElement();\n+        Unique unique = (Unique) popElement();\n         Object current = currentElement();\n         if (current instanceof ClassMapping && _secondaryTable == null)\n-            ((ClassMapping)current).getMappingInfo().addUnique(unique);\n+            ((ClassMapping) current).getMappingInfo().addUnique(unique);\n     }\n     \n     /**\n@@ -899,7 +899,7 @@ private void endUniqueConstraint() {\n     private boolean endColumnName() {\n         Object current = currentElement();\n         if (current instanceof Unique) {\n-            Unique unique = (Unique)current;\n+            Unique unique = (Unique) current;\n             Column column = new Column();\n             column.setName(this.currentText());\n             unique.addColumn(column);"},{"sha":"5a673922c3c601b0de8aa77f1ab9ead70a357864","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestIsolationLevelOverride.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -83,8 +83,8 @@ public void testIsolationLevelOverride(boolean useHintsAndQueries,\n \n                 q.getResultList();\n                 if (dict instanceof DB2Dictionary) {\n-                    if ((((DB2Dictionary)dict).getDb2ServerType() == 1)\n-                        || (((DB2Dictionary)dict).getDb2ServerType()== 2)) {\n+                    if ((((DB2Dictionary) dict).getDb2ServerType() == 1)\n+                        || (((DB2Dictionary) dict).getDb2ServerType()== 2)) {\n                         assertEquals(1, sql.size());\n                         assertSQL(\"SELECT t0.id, t0.booleanField, t0.byteField,\"\n                             + \" t0.charField, t0.dateField, t0.doubleField,\"\n@@ -94,8 +94,8 @@ public void testIsolationLevelOverride(boolean useHintsAndQueries,\n                             + \" FOR UPDATE OF\");\n                     }\n                     // it is DB2 v82 or later\n-                    else if ((((DB2Dictionary)dict).getDb2ServerType() == 3)\n-                        || (((DB2Dictionary)dict).getDb2ServerType() == 4)) {\n+                    else if ((((DB2Dictionary) dict).getDb2ServerType() == 3)\n+                        || (((DB2Dictionary) dict).getDb2ServerType() == 4)) {\n                         assertEquals(1, sql.size());\n                         assertSQL(\"SELECT t0.id, t0.booleanField, t0.byteField,\"\n                             + \" t0.charField, t0.dateField, t0.doubleField,\"\n@@ -105,7 +105,7 @@ else if ((((DB2Dictionary)dict).getDb2ServerType() == 3)\n                             + \" FOR READ ONLY WITH RR USE AND KEEP \" \n                             + \"UPDATE LOCKS\");\n                     }\n-                    else if (((DB2Dictionary)dict).getDb2ServerType() == 5) {\n+                    else if (((DB2Dictionary) dict).getDb2ServerType() == 5) {\n                         assertEquals(1, sql.size());\n                         assertSQL(\"SELECT t0.id, t0.booleanField, t0.byteField,\"\n                             + \" t0.charField, t0.dateField, t0.doubleField,\"\n@@ -126,8 +126,8 @@ else if (((DB2Dictionary)dict).getDb2ServerType() == 5) {\n                     .setIsolation(IsolationLevel.SERIALIZABLE);\n                 em.find(AllFieldTypes.class, 0);\n                 if (dict instanceof DB2Dictionary ) {\n-                    if ((((DB2Dictionary)dict).getDb2ServerType() == 1)\n-                        || (((DB2Dictionary)dict).getDb2ServerType()== 2)) {\n+                    if ((((DB2Dictionary) dict).getDb2ServerType() == 1)\n+                        || (((DB2Dictionary) dict).getDb2ServerType()== 2)) {\n                         assertEquals(1, sql.size());\n                         assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n                             + \"t0.charField, t0.dateField, t0.doubleField,\"\n@@ -137,8 +137,8 @@ else if (((DB2Dictionary)dict).getDb2ServerType() == 5) {\n                             + \" FOR UPDATE OF optimize for 1 row\");\n                     }\n                     // it is DB2 v82 or later\n-                    else if ((((DB2Dictionary)dict).getDb2ServerType() == 3)\n-                        || (((DB2Dictionary)dict).getDb2ServerType() == 4)) {\n+                    else if ((((DB2Dictionary) dict).getDb2ServerType() == 3)\n+                        || (((DB2Dictionary) dict).getDb2ServerType() == 4)) {\n                         assertEquals(1, sql.size());\n                         assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n                             + \"t0.charField, t0.dateField, t0.doubleField,\"\n@@ -148,7 +148,7 @@ else if ((((DB2Dictionary)dict).getDb2ServerType() == 3)\n                             + \" FOR READ ONLY WITH RR USE AND KEEP UPDATE LOCKS\" \n                             + \" optimize for 1 row\");\n                     }\n-                    else if (((DB2Dictionary)dict).getDb2ServerType() == 5) {\n+                    else if (((DB2Dictionary) dict).getDb2ServerType() == 5) {\n                         assertEquals(1, sql.size());\n                         assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n                             + \"t0.charField, t0.dateField, t0.doubleField,\""},{"sha":"cb39b9a372200577b2ec64e5bbfb187d49199f85","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestSelectForUpdateOverride.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -59,8 +59,8 @@ public void testSelectForUpdateOverride() {\n             em.find(AllFieldTypes.class, 0);\n             assertEquals(1, sql.size());\n             if (dict instanceof DB2Dictionary) {\n-                if ((((DB2Dictionary)dict).getDb2ServerType() == 1)\n-                    || (((DB2Dictionary)dict).getDb2ServerType()== 2)) {\n+                if ((((DB2Dictionary) dict).getDb2ServerType() == 1)\n+                    || (((DB2Dictionary) dict).getDb2ServerType()== 2)) {\n                     assertEquals(1, sql.size());\n                     assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n                         + \"t0.charField, t0.dateField, t0.doubleField,\"\n@@ -70,8 +70,8 @@ public void testSelectForUpdateOverride() {\n                         + \" FOR UPDATE OF optimize for 1 row\");\n                 }\n                 // it is DB2 v82 or later\n-                else if ((((DB2Dictionary)dict).getDb2ServerType() == 3)\n-                    || (((DB2Dictionary)dict).getDb2ServerType() == 4)) {\n+                else if ((((DB2Dictionary) dict).getDb2ServerType() == 3)\n+                    || (((DB2Dictionary) dict).getDb2ServerType() == 4)) {\n                     assertEquals(1, sql.size());\n                     assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n                         + \"t0.charField, t0.dateField, t0.doubleField,\"\n@@ -81,7 +81,7 @@ else if ((((DB2Dictionary)dict).getDb2ServerType() == 3)\n                         + \" FOR READ ONLY WITH RS USE AND KEEP UPDATE LOCKS\" \n                         + \" optimize for 1 row\");\n                 }\n-                else if (((DB2Dictionary)dict).getDb2ServerType() == 5) {\n+                else if (((DB2Dictionary) dict).getDb2ServerType() == 5) {\n                     assertEquals(1, sql.size());\n                     assertSQL(\"SELECT t0.booleanField, t0.byteField, \"\n                         + \"t0.charField, t0.dateField, t0.doubleField,\""},{"sha":"c4e53ade1de818da7b0c10a6b328545070e841f6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwnerId.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwnerId.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwnerId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwnerId.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -30,7 +30,7 @@\n \tstatic {\n \t\t// register persistent class in JVM\n \t\ttry { Class.forName(\"org.apache.openjpa.persistence.relations.ManyOneCompoundIdOwner\"); }\n-\t\tcatch(Exception e) {}\n+\t\tcatch (Exception e) {}\n \t}\n \n \tpublic long entityId;"},{"sha":"23c4b959de2118f9eba387d63f874cc4aebcb596","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyOneAsId.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyOneAsId.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyOneAsId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyOneAsId.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -343,7 +343,8 @@ public void testCompoundQuery() {\n             + \"where e.longId = :cid and e.entityId.id = :id\");\n         q.setParameter(\"cid\", cid);\n         q.setParameter(\"id\", id);\n-        ManyOneCompoundIdOwner pc = (ManyOneCompoundIdOwner)q.getSingleResult();\n+        ManyOneCompoundIdOwner pc = (ManyOneCompoundIdOwner)\n+            q.getSingleResult();\n         assertNotNull(pc);\n         assertEquals(\"cparent\", pc.getName());\n         em.close();"},{"sha":"ef52a8bb4b0039d70f3a2bb6aae4e3d2c1c2d7ba","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -661,17 +661,17 @@ protected File getSourceFile() {\n             cls = cls.getEnclosingClass();\n \n         String rsrc = StringUtils.replace(cls.getName(), \".\", \"/\");\n-        ClassLoader loader = (ClassLoader)AccessController.doPrivileged( \n+        ClassLoader loader = (ClassLoader) AccessController.doPrivileged(\n             J2DoPrivHelper.getClassLoaderAction(cls)); \n         if (loader == null)\n-            loader = (ClassLoader)AccessController.doPrivileged( \n+            loader = (ClassLoader) AccessController.doPrivileged(\n                 J2DoPrivHelper.getSystemClassLoaderAction()); \n         if (loader == null)\n             return null;\n-        URL url = (URL)AccessController.doPrivileged( \n+        URL url = (URL) AccessController.doPrivileged(\n             J2DoPrivHelper.getResourceAction(loader, rsrc + \".java\")); \n         if (url == null) {\n-            url = (URL)AccessController.doPrivileged( \n+            url = (URL) AccessController.doPrivileged(\n                 J2DoPrivHelper.getResourceAction(loader, rsrc + \".class\")); \n             if (url == null)\n                 return null;\n@@ -756,7 +756,7 @@ else if (!StringUtils.isEmpty(detached.fieldName()))\n             else\n                 meta.setDetachedState(detached.fieldName());\n         } else {\n-            Field[] fields = (Field[])AccessController.doPrivileged( \n+            Field[] fields = (Field[]) AccessController.doPrivileged(\n                 J2DoPrivHelper.getDeclaredFieldsAction(\n                     meta.getDescribedType())); \n             for (int i = 0; i < fields.length; i++)\n@@ -798,8 +798,8 @@ else if (!StringUtils.isEmpty(detached.fieldName()))\n         MethodKey key;\n         Set<MethodKey> seen = new HashSet<MethodKey>();\n         do {\n-            for (Method m : (Method[])AccessController.doPrivileged( \n-                J2DoPrivHelper.getDeclaredMethodsAction( sup ))) {\n+            for (Method m : (Method[]) AccessController.doPrivileged(\n+                J2DoPrivHelper.getDeclaredMethodsAction(sup))) {\n                 mods = m.getModifiers();\n                 if (Modifier.isStatic(mods) || Modifier.isFinal(mods) ||\n                     Object.class.equals(m.getDeclaringClass()))\n@@ -1050,7 +1050,7 @@ private void parseMemberAnnotations(FieldMetaData fmd) {\n                     break;\n                 case LOAD_FETCH_GROUP:\n                 \tif (isMetaDataMode())\n-                \t\tfmd.setLoadFetchGroup(((LoadFetchGroup)anno).value());\n+                \t\tfmd.setLoadFetchGroup(((LoadFetchGroup) anno).value());\n                 \tbreak;\n                 case LRS:\n                     if (isMetaDataMode())"},{"sha":"d63a3820f2c30c7ecae0ba730162a90c32b670b0","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataParsers.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataParsers.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataParsers.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataParsers.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -77,7 +77,7 @@ public static void validateMethodsForSameCallback(Class cls,\n         for (LifecycleCallbacks lc: callbacks) {\n             if (!(lc instanceof MethodLifecycleCallbacks))\n                 continue;\n-            Method exists = ((MethodLifecycleCallbacks)lc).getCallbackMethod();\n+            Method exists = ((MethodLifecycleCallbacks) lc).getCallbackMethod();\n             if (!exists.getDeclaringClass().equals(method.getDeclaringClass()))\n                 continue;\n "},{"sha":"bf3b5921219f8b1140030bb16642ca96b9678ef8","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -252,11 +252,11 @@ private int getAccessType(Class cls) {\n             return ClassMetaData.ACCESS_UNKNOWN;\n \n         int access = 0;\n-        if (usesAccess((Field[])AccessController.doPrivileged( \n-            J2DoPrivHelper.getDeclaredFieldsAction( cls ))))\n+        if (usesAccess((Field[]) AccessController.doPrivileged(\n+            J2DoPrivHelper.getDeclaredFieldsAction(cls))))\n             access |= ClassMetaData.ACCESS_FIELD;\n-        if (usesAccess((Method[])AccessController.doPrivileged( \n-            J2DoPrivHelper.getDeclaredMethodsAction( cls ))))\n+        if (usesAccess((Method[]) AccessController.doPrivileged(\n+            J2DoPrivHelper.getDeclaredMethodsAction(cls))))\n             access |= ClassMetaData.ACCESS_PROPERTY;\n         return (access == 0) ? getAccessType(cls.getSuperclass()) : access;\n     }"},{"sha":"2daae2e51ecabe554a181a3e7ef16be0da508b30","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -440,12 +440,12 @@ protected File defaultSourceFile(SequenceMetaData seq, Map clsNames) {\n     private File defaultXMLFile() {\n         ClassLoader loader = repos.getConfiguration().\n             getClassResolverInstance().getClassLoader(getClass(), null);\n-        URL rsrc = (URL)AccessController.doPrivileged( \n+        URL rsrc = (URL) AccessController.doPrivileged(\n             J2DoPrivHelper.getResourceAction(loader, \"META-INF/orm.xml\"));\n         if (rsrc != null) {\n             File file = new File(rsrc.getFile());\n-            if (((Boolean)AccessController.doPrivileged( \n-                J2DoPrivHelper.existsAction( file ))).booleanValue())\n+            if (((Boolean) AccessController.doPrivileged(\n+                J2DoPrivHelper.existsAction(file))).booleanValue())\n                 return file;\n         }\n         return new File(\"orm.xml\");"},{"sha":"8e08d5257b6b786aed39153ca07bc781a88cf073","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -109,7 +109,7 @@ public boolean beforeConfigurationLoad(Configuration c) {\n     @Override\n     public boolean afterSpecificationSet(Configuration c) {\n       if (!(c instanceof OpenJPAConfigurationImpl)\n-         || !SPEC_JPA.equals(((OpenJPAConfiguration)c).getSpecification()))\n+         || !SPEC_JPA.equals(((OpenJPAConfiguration) c).getSpecification()))\n           return false;\n  \n         OpenJPAConfigurationImpl conf = (OpenJPAConfigurationImpl) c;\n@@ -248,23 +248,23 @@ private Boolean load(ConfigurationProviderImpl cp, String rsrc,\n         String name, Map m, ClassLoader loader, boolean explicit)\n         throws IOException {\n         if (loader == null)\n-            loader = (ClassLoader)AccessController.doPrivileged( \n+            loader = (ClassLoader) AccessController.doPrivileged(\n                 J2DoPrivHelper.getContextClassLoaderAction());\n \n         Enumeration<URL> urls = null;\n         try {\n-            urls = (Enumeration)AccessController.doPrivileged( \n+            urls = (Enumeration) AccessController.doPrivileged(\n                 J2DoPrivHelper.getResourcesAction(loader, rsrc)); \n             if (!urls.hasMoreElements()) {\n                 if (!rsrc.startsWith(\"META-INF\"))\n-                    urls = (Enumeration)AccessController.doPrivileged( \n+                    urls = (Enumeration) AccessController.doPrivileged(\n                         J2DoPrivHelper.getResourcesAction(\n                             loader, \"META-INF/\" + rsrc)); \n                 if (!urls.hasMoreElements())\n                     return null;\n             }\n-        } catch( PrivilegedActionException pae ) {\n-            throw (IOException)pae.getException();\n+        } catch (PrivilegedActionException pae) {\n+            throw (IOException) pae.getException();\n         }\n \n         ConfigurationParser parser = new ConfigurationParser(m);\n@@ -346,7 +346,7 @@ private PersistenceUnitInfoImpl findUnit(List<PersistenceUnitInfoImpl>\n             return true;\n \n         if (loader == null)\n-            loader = (ClassLoader)AccessController.doPrivileged( \n+            loader = (ClassLoader) AccessController.doPrivileged(\n                 J2DoPrivHelper.getContextClassLoaderAction());\n         try {\n             if (PersistenceProviderImpl.class.isAssignableFrom"},{"sha":"db14c5d7fb82dd9c0b87998bd90ee9666731825f","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -94,7 +94,7 @@ public ClassLoader getClassLoader() {\n \n     public ClassLoader getNewTempClassLoader() {\n         return new TemporaryClassLoader(\n-            (ClassLoader)AccessController.doPrivileged( \n+            (ClassLoader) AccessController.doPrivileged(\n                 J2DoPrivHelper.getContextClassLoaderAction()));\n     }\n \n@@ -204,15 +204,15 @@ public void addJarFileName(String name) {\n         MultiClassLoader loader = new MultiClassLoader();\n         loader.addClassLoader(getClass().getClassLoader());\n         loader.addClassLoader(MultiClassLoader.THREAD_LOADER);\n-        URL url = (URL)AccessController.doPrivileged( \n+        URL url = (URL) AccessController.doPrivileged(\n             J2DoPrivHelper.getResourceAction(loader, name));\n         if (url != null) {\n             addJarFile(url);\n             return;\n         }\n \n         // jar file is not a resource; check classpath\n-        String[] cp = ((String)AccessController.doPrivileged( \n+        String[] cp = ((String) AccessController.doPrivileged(\n             J2DoPrivHelper.getPropertyAction(\"java.class.path\"))) \n             .split(J2DoPrivHelper.getPathSeparator());\n         for (int i = 0; i < cp.length; i++) {"},{"sha":"ed3d9d6e1fb487ba61507fde2763267438d0568a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -1121,7 +1121,7 @@ private FieldMetaData parseField(Attributes attrs)\n                 }\n             } catch (Exception e) {\n                 if (e instanceof PrivilegedActionException)\n-                    e = ((PrivilegedActionException)e).getException();\n+                    e = ((PrivilegedActionException) e).getException();\n                 throw getException(_loc.get(\"invalid-attr\", name, meta), e);\n             }\n "},{"sha":"247c8d12ad12e9c0a0a7ed45356d76fb7f8f4e12","filename":"openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLFileHandler.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLFileHandler.java","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLFileHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLFileHandler.java?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -80,10 +80,10 @@ public XMLFileHandler(XMLConfiguration conf) {\n      */\n     public Collection load(ClassMetaData meta) {\n         File f = getFile(meta);\n-        if (!((Boolean)AccessController.doPrivileged( \n-            J2DoPrivHelper.existsAction( f ))).booleanValue() || \n-            ((Long)AccessController.doPrivileged( \n-            J2DoPrivHelper.lengthAction( f ))).longValue() == 0)\n+        if (!((Boolean) AccessController.doPrivileged(\n+            J2DoPrivHelper.existsAction(f))).booleanValue() || \n+            ((Long) AccessController.doPrivileged(\n+            J2DoPrivHelper.lengthAction(f))).longValue() == 0)\n             return Collections.EMPTY_SET;\n         try {\n             return read(f);\n@@ -133,10 +133,10 @@ public void store(ClassMetaData meta, Collection datas) {\n             throw new InternalException();\n \n         File f = getFile(meta);\n-        if (!((Boolean)AccessController.doPrivileged( \n-            J2DoPrivHelper.existsAction( f.getParentFile() ))).booleanValue())\n-            AccessController.doPrivileged( \n-                J2DoPrivHelper.mkdirsAction( f.getParentFile() ));\n+        if (!((Boolean) AccessController.doPrivileged(\n+            J2DoPrivHelper.existsAction(f.getParentFile()))).booleanValue())\n+            AccessController.doPrivileged(\n+                J2DoPrivHelper.mkdirsAction(f.getParentFile()));\n \n         FileWriter fw = null;\n         try {"},{"sha":"3a6f9a191a7b8fafa3e53be8749ffbdd53fbd679","filename":"pom.xml","status":"modified","additions":347,"deletions":347,"changes":694,"blob_url":"https://github.com/apache/openjpa/blob/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/pom.xml?ref=8b5a7f68a0016e7d5b5ac9a1c913794dccdcecd7","patch":"@@ -1,347 +1,347 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n-         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n-         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\r\n-            http://maven.apache.org/maven-v4_0_0.xsd\">\r\n-    <modelVersion>4.0.0</modelVersion>\r\n-    <prerequisites>\r\n-        <maven>2.0.4</maven>\r\n-    </prerequisites>\r\n-    <groupId>org.apache.openjpa</groupId>\r\n-    <artifactId>openjpa-parent</artifactId>\r\n-    <packaging>pom</packaging>\r\n-    <name>OpenJPA</name>\r\n-    <description>OpenJPA</description>\r\n-\r\n-    <properties>\r\n-        <scm.dir>svn.apache.org/repos/asf/openjpa/trunk</scm.dir>\r\n-    </properties>\r\n-\r\n-    <!--\r\n-        Changing this version needs to also be done in all children poms\r\n-        See: http://jira.codehaus.org/browse/MNG-624\r\n-    -->\r\n-    <version>1.0.0-SNAPSHOT</version>\r\n-    <url>http://incubator.apache.org/projects/openjpa</url>\r\n-    <issueManagement>\r\n-        <system>jira</system>\r\n-        <url>http://issues.apache.org/jira/browse/OPENJPA</url>\r\n-    </issueManagement>\r\n-    <inceptionYear>2006</inceptionYear>\r\n-    <mailingLists>\r\n-        <mailingList>\r\n-            <name>OpenJPA Developer List</name>\r\n-            <subscribe>open-jpa-dev-subscribe@incubator.apache.org</subscribe>\r\n-            <unsubscribe>open-jpa-dev-unsubscribe@incubator.apache.org</unsubscribe>\r\n-            <post>open-jpa-dev@incubator.apache.org</post>\r\n-            <archive>http://mail-archives.apache.org/mod_mbox/incubator-open-jpa-dev/</archive>\r\n-        </mailingList>\r\n-        <mailingList>\r\n-            <name>OpenJPA Commits List</name>\r\n-            <subscribe>open-jpa-commits-subscribe@incubator.apache.org</subscribe>\r\n-            <unsubscribe>open-jpa-commits-unsubscribe@incubator.apache.org</unsubscribe>\r\n-            <post>open-jpa-commits@incubator.apache.org</post>\r\n-            <archive>http://mail-archives.apache.org/mod_mbox/incubator-open-jpa-commits/</archive>\r\n-        </mailingList>\r\n-    </mailingLists>\r\n-    <developers>\r\n-        <developer>\r\n-            <name>Patrick Linskey</name>\r\n-            <id>plinskey</id>\r\n-            <organization>BEA Systems, Inc.</organization>\r\n-            <email>plinskey@bea.com</email>\r\n-        </developer>\r\n-        <developer>\r\n-            <name>Abe White</name>\r\n-            <id>awhite</id>\r\n-            <organization>BEA Systems, Inc.</organization>\r\n-            <email>awhite@bea.com</email>\r\n-        </developer>\r\n-        <developer>\r\n-            <name>Steve Kim</name>\r\n-            <id>stkim</id>\r\n-            <organization>BEA Systems, Inc.</organization>\r\n-            <email>stkim@bea.com</email>\r\n-        </developer>\r\n-        <developer>\r\n-            <name>Marc Prud'hommeaux</name>\r\n-            <id>mprudhom</id>\r\n-            <organization>BEA Systems, Inc.</organization>\r\n-            <email>mprudhom@bea.com</email>\r\n-        </developer>\r\n-    </developers>\r\n-    <licenses>\r\n-        <license>\r\n-            <name>Apache Software License 2.0</name>\r\n-            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\r\n-            <distribution>repo</distribution>\r\n-        </license>\r\n-    </licenses>\r\n-    <organization>\r\n-        <name>Apache Software Foundation</name>\r\n-        <url>http://www.apache.org</url>\r\n-    </organization>\r\n-    <scm>\r\n-        <connection>scm:svn:http://${scm.dir}</connection>\r\n-        <developerConnection>scm:svn:https://${scm.dir}</developerConnection>\r\n-        <url>https://${scm.dir}</url>\r\n-    </scm>\r\n-    <modules>\r\n-        <module>openjpa-lib</module>\r\n-        <module>openjpa-kernel</module>\r\n-        <module>openjpa-jdbc</module>\r\n-        <module>openjpa-xmlstore</module>\r\n-        <module>openjpa-all</module>\r\n-        <module>openjpa-project</module>\r\n-        <module>openjpa-integration</module>\r\n-    </modules>\r\n-    <profiles>\r\n-        <profile>\r\n-            <id>jdk1.5</id>\r\n-            <activation>\r\n-                <jdk>1.5</jdk>\r\n-            </activation>\r\n-            <modules>\r\n-                <module>openjpa-persistence</module>\r\n-                <module>openjpa-persistence-jdbc</module>\r\n-                <module>openjpa-kernel-5</module>\r\n-                <module>openjpa-jdbc-5</module>\r\n-                <module>openjpa-examples</module>\r\n-            </modules>\r\n-        </profile>\r\n-        <profile>\r\n-            <id>release</id>\r\n-            <activation>\r\n-                <property>\r\n-                    <name>release</name>\r\n-                </property>\r\n-            </activation>\r\n-            <modules>\r\n-                <module>openjpa-project</module>\r\n-            </modules>\r\n-        </profile>\r\n-\r\n-        <!--\r\n-            Generate the documentation using the YDoc UML generation plugin.\r\n-            Assumes you have the YDoc libraries locally, as well as a valid\r\n-            YDoc license file. Example usage for building the docs:\r\n-\r\n-            mvn process-classes -Pydoc-profile,javadoc-profile -Dydoc.home=${HOME}/.m2/privaterepos/ydoc/ydoc-2.2_04-jdk1.5 -Dydoc.license=${HOME}/.m2/privaterepos/ydoc/ydoc.license\r\n-        -->\r\n-        <profile>\r\n-            <id>ydoc-profile</id>\r\n-            <properties>\r\n-                <javadoc.additionalparam>\r\n-                    -generic\r\n-                    -umlautogen\r\n-                    -tag param\r\n-                    -tag return\r\n-                    -tag see\r\n-                    -ytag y.uml\r\n-                    -license ${ydoc.license}\r\n-                    -filter ydoc.filters.ExcludeFilter\r\n-                    -filterpath ${ydoc.home}/lib/ydoc.jar\r\n-                    -doclet ydoc.doclets.YStandard\r\n-                    -docletpath ${ydoc.home}/lib/ydoc.jar${path.separator}${ydoc.home}/lib/class2svg.jar${path.separator}${ydoc.home}/resources\r\n-                    ${ydoc.params}\r\n-                </javadoc.additionalparam>\r\n-            </properties>\r\n-        </profile>\r\n-\r\n-        <profile>\r\n-            <!--                        \r\n-                Javadoc profile. Docs can be built by running:\r\n-                    mvn process-resources -Dtest=false -Pjavadoc-profile\r\n-            -->  \r\n-            <id>javadoc-profile</id>\r\n-            <build>\r\n-                <plugins>\r\n-                    <plugin>\r\n-                        <groupId>org.apache.maven.plugins</groupId>\r\n-                        <artifactId>maven-javadoc-plugin</artifactId>\r\n-                        <version>2.2</version>\r\n-                        <executions>\r\n-                            <execution>\r\n-                                <phase>process-classes</phase>\r\n-                                <goals><goal>javadoc</goal></goals>\r\n-                                <configuration>\r\n-                                    <additionalparam>\r\n-                                        ${javadoc.additionalparam}\r\n-                                    </additionalparam>\r\n-                                    <aggregate>true</aggregate>\r\n-                                    <subpackages>org.apache.openjpa</subpackages>\r\n-\r\n-                                    <verbose>false</verbose>\r\n-                                    <!-- <linksource>true</linksource> -->\r\n-                                    <maxmemory>512m</maxmemory>\r\n-                                    <links>\r\n-                                        <link>http://java.sun.com/j2se/1.5.0/docs/api</link>\r\n-                                        <link>http://java.sun.com/javaee/5/docs/api</link>\r\n-                                        <link>http://jakarta.apache.org/commons/collections/api-release</link>\r\n-                                    </links>\r\n-                                </configuration>\r\n-                            </execution>\r\n-                        </executions>\r\n-                    </plugin>\r\n-                </plugins>\r\n-            </build>\r\n-            <activation>\r\n-                <property>\r\n-                    <name>builddocs</name>\r\n-                    <value>true</value>\r\n-                </property>\r\n-            </activation>\r\n-        </profile>\r\n-\r\n-        <profile>\r\n-            <id>enable-security</id>\r\n-            <activation>\r\n-                <activeByDefault>false</activeByDefault>\r\n-            </activation>\r\n-            <properties>\r\n-                <test.env>-Dtest.basedir=${basedir}/..</test.env>\r\n-                <policy.file>${basedir}/../openjpa-persistence-jdbc/src/test/resources/j2.security.test.policy</policy.file>\r\n-                <surefire.jvm.args>-Djava.security.manager -Djava.security.policy=${policy.file} ${test.env}</surefire.jvm.args>\r\n-            </properties>\r\n-        </profile>\r\n-\r\n-    </profiles>\r\n-\r\n-    <repositories>\r\n-        <repository>\r\n-            <id>central</id>\r\n-            <name>Maven Repository Switchboard</name>\r\n-            <url>http://www.ibiblio.org/maven2</url>\r\n-        </repository>\r\n-        <repository>\r\n-    \t    <id>java.net</id>\r\n-\t        <url>https://maven-repository.dev.java.net/nonav/repository</url>\r\n-\t        <layout>legacy</layout>\r\n-        </repository>\r\n-    </repositories>\r\n-    <dependencies>\r\n-        <dependency>\r\n-            <groupId>junit</groupId>\r\n-            <artifactId>junit</artifactId>\r\n-            <version>3.8.1</version>\r\n-            <scope>test</scope>\r\n-        </dependency>\r\n-    </dependencies>\r\n-    <build>\r\n-        <resources>\r\n-            <resource>\r\n-                <directory>src/main/resources</directory>\r\n-            </resource>\r\n-            <!-- also include license and notice files in all the jars -->\r\n-            <resource>\r\n-                <directory>${basedir}/../openjpa-project/</directory>\r\n-                <includes>\r\n-                    <include>NOTICE.txt</include>\r\n-                    <include>LICENSE.txt</include>\r\n-                    <include>DISCLAIMER.txt</include>\r\n-                </includes>\r\n-                <targetPath>META-INF</targetPath>\r\n-            </resource>\r\n-        </resources>\r\n-        <pluginManagement>\r\n-            <plugins>\r\n-                <plugin>\r\n-                    <groupId>org.apache.maven.plugins</groupId>\r\n-                    <artifactId>maven-compiler-plugin</artifactId>\r\n-                    <configuration>\r\n-                        <source>1.5</source>\r\n-                        <target>1.5</target>\r\n-                    </configuration>\r\n-                </plugin>\r\n-                <plugin>\r\n-                    <groupId>org.apache.maven.plugins</groupId>\r\n-                    <artifactId>maven-jar-plugin</artifactId>\r\n-                    <version>2.1</version>\r\n-                    <configuration>\r\n-                        <archive>\r\n-                            <manifest>\r\n-                                <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>\r\n-                                <addDefaultImplementationEntries>true</addDefaultImplementationEntries>\r\n-                            </manifest>\r\n-                        </archive>\r\n-                    </configuration>\r\n-                </plugin>\r\n-                <plugin>\r\n-                    <groupId>org.apache.maven.plugins</groupId>\r\n-                    <artifactId>maven-surefire-plugin</artifactId>\r\n-                    <version>2.2</version>\r\n-                    <configuration>\r\n-                        <argLine>${surefire.jvm.args}</argLine>\r\n-                        <useFile>false</useFile>\r\n-                        <trimStackTrace>false</trimStackTrace>\r\n-                        <useSystemClassLoader>true</useSystemClassLoader>\r\n-                    </configuration>\r\n-                </plugin>\r\n-            </plugins>\r\n-        </pluginManagement>\r\n-    </build>\r\n-    <reporting>\r\n-        <plugins>\r\n-            <plugin>\r\n-                <artifactId>maven-project-info-reports-plugin</artifactId>\r\n-                <reportSets>\r\n-                    <reportSet>\r\n-                        <reports>\r\n-                            <report>jdepend-maven-plugin</report>\r\n-                            <!-- <report>jxr-maven-plugin</report> -->\r\n-                            <report>surefire-report-maven-plugin</report>\r\n-                            <report>maven-javadoc-plugin</report>\r\n-                            <report>project-team</report>\r\n-                            <report>mailing-list</report>\r\n-                            <report>issue-tracking</report>\r\n-                            <report>license</report>\r\n-                            <report>scm</report>\r\n-                        </reports>\r\n-                    </reportSet>\r\n-                </reportSets>\r\n-            </plugin>\r\n-            <plugin>\r\n-                <artifactId>maven-surefire-plugin</artifactId>\r\n-            </plugin>\r\n-            <plugin>\r\n-                <groupId>org.codehaus.mojo</groupId>\r\n-                <artifactId>taglist-maven-plugin</artifactId>\r\n-            </plugin>\r\n-        </plugins>\r\n-    </reporting>\r\n-\r\n-\r\n-    <distributionManagement>\r\n-      <repository>\r\n-        <id>people.apache.org</id>\r\n-        <url>scp://people.apache.org/www/people.apache.org/repo/m2-incubating-repository/</url>\r\n-      </repository>\r\n-      <snapshotRepository>\r\n-        <id>people.apache.org</id>\r\n-        <url>scp://people.apache.org/www/people.apache.org/repo/m2-snapshot-repository/</url>\r\n-        <uniqueVersion>false</uniqueVersion>\r\n-      </snapshotRepository>\r\n-      <site>\r\n-        <id>people.apache.org</id>\r\n-        <url>scpexe://people.apache.org/home/mprudhom/public_html/openjpa/site/</url>\r\n-      </site>\r\n-    </distributionManagement>\r\n-</project>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n+            http://maven.apache.org/maven-v4_0_0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <prerequisites>\n+        <maven>2.0.4</maven>\n+    </prerequisites>\n+    <groupId>org.apache.openjpa</groupId>\n+    <artifactId>openjpa-parent</artifactId>\n+    <packaging>pom</packaging>\n+    <name>OpenJPA</name>\n+    <description>OpenJPA</description>\n+\n+    <properties>\n+        <scm.dir>svn.apache.org/repos/asf/openjpa/trunk</scm.dir>\n+    </properties>\n+\n+    <!--\n+        Changing this version needs to also be done in all children poms\n+        See: http://jira.codehaus.org/browse/MNG-624\n+    -->\n+    <version>1.0.0-SNAPSHOT</version>\n+    <url>http://incubator.apache.org/projects/openjpa</url>\n+    <issueManagement>\n+        <system>jira</system>\n+        <url>http://issues.apache.org/jira/browse/OPENJPA</url>\n+    </issueManagement>\n+    <inceptionYear>2006</inceptionYear>\n+    <mailingLists>\n+        <mailingList>\n+            <name>OpenJPA Developer List</name>\n+            <subscribe>open-jpa-dev-subscribe@incubator.apache.org</subscribe>\n+            <unsubscribe>open-jpa-dev-unsubscribe@incubator.apache.org</unsubscribe>\n+            <post>open-jpa-dev@incubator.apache.org</post>\n+            <archive>http://mail-archives.apache.org/mod_mbox/incubator-open-jpa-dev/</archive>\n+        </mailingList>\n+        <mailingList>\n+            <name>OpenJPA Commits List</name>\n+            <subscribe>open-jpa-commits-subscribe@incubator.apache.org</subscribe>\n+            <unsubscribe>open-jpa-commits-unsubscribe@incubator.apache.org</unsubscribe>\n+            <post>open-jpa-commits@incubator.apache.org</post>\n+            <archive>http://mail-archives.apache.org/mod_mbox/incubator-open-jpa-commits/</archive>\n+        </mailingList>\n+    </mailingLists>\n+    <developers>\n+        <developer>\n+            <name>Patrick Linskey</name>\n+            <id>plinskey</id>\n+            <organization>BEA Systems, Inc.</organization>\n+            <email>plinskey@bea.com</email>\n+        </developer>\n+        <developer>\n+            <name>Abe White</name>\n+            <id>awhite</id>\n+            <organization>BEA Systems, Inc.</organization>\n+            <email>awhite@bea.com</email>\n+        </developer>\n+        <developer>\n+            <name>Steve Kim</name>\n+            <id>stkim</id>\n+            <organization>BEA Systems, Inc.</organization>\n+            <email>stkim@bea.com</email>\n+        </developer>\n+        <developer>\n+            <name>Marc Prud'hommeaux</name>\n+            <id>mprudhom</id>\n+            <organization>BEA Systems, Inc.</organization>\n+            <email>mprudhom@bea.com</email>\n+        </developer>\n+    </developers>\n+    <licenses>\n+        <license>\n+            <name>Apache Software License 2.0</name>\n+            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n+            <distribution>repo</distribution>\n+        </license>\n+    </licenses>\n+    <organization>\n+        <name>Apache Software Foundation</name>\n+        <url>http://www.apache.org</url>\n+    </organization>\n+    <scm>\n+        <connection>scm:svn:http://${scm.dir}</connection>\n+        <developerConnection>scm:svn:https://${scm.dir}</developerConnection>\n+        <url>https://${scm.dir}</url>\n+    </scm>\n+    <modules>\n+        <module>openjpa-lib</module>\n+        <module>openjpa-kernel</module>\n+        <module>openjpa-jdbc</module>\n+        <module>openjpa-xmlstore</module>\n+        <module>openjpa-all</module>\n+        <module>openjpa-project</module>\n+        <module>openjpa-integration</module>\n+    </modules>\n+    <profiles>\n+        <profile>\n+            <id>jdk1.5</id>\n+            <activation>\n+                <jdk>1.5</jdk>\n+            </activation>\n+            <modules>\n+                <module>openjpa-persistence</module>\n+                <module>openjpa-persistence-jdbc</module>\n+                <module>openjpa-kernel-5</module>\n+                <module>openjpa-jdbc-5</module>\n+                <module>openjpa-examples</module>\n+            </modules>\n+        </profile>\n+        <profile>\n+            <id>release</id>\n+            <activation>\n+                <property>\n+                    <name>release</name>\n+                </property>\n+            </activation>\n+            <modules>\n+                <module>openjpa-project</module>\n+            </modules>\n+        </profile>\n+\n+        <!--\n+            Generate the documentation using the YDoc UML generation plugin.\n+            Assumes you have the YDoc libraries locally, as well as a valid\n+            YDoc license file. Example usage for building the docs:\n+\n+            mvn process-classes -Pydoc-profile,javadoc-profile -Dydoc.home=${HOME}/.m2/privaterepos/ydoc/ydoc-2.2_04-jdk1.5 -Dydoc.license=${HOME}/.m2/privaterepos/ydoc/ydoc.license\n+        -->\n+        <profile>\n+            <id>ydoc-profile</id>\n+            <properties>\n+                <javadoc.additionalparam>\n+                    -generic\n+                    -umlautogen\n+                    -tag param\n+                    -tag return\n+                    -tag see\n+                    -ytag y.uml\n+                    -license ${ydoc.license}\n+                    -filter ydoc.filters.ExcludeFilter\n+                    -filterpath ${ydoc.home}/lib/ydoc.jar\n+                    -doclet ydoc.doclets.YStandard\n+                    -docletpath ${ydoc.home}/lib/ydoc.jar${path.separator}${ydoc.home}/lib/class2svg.jar${path.separator}${ydoc.home}/resources\n+                    ${ydoc.params}\n+                </javadoc.additionalparam>\n+            </properties>\n+        </profile>\n+\n+        <profile>\n+            <!--                        \n+                Javadoc profile. Docs can be built by running:\n+                    mvn process-resources -Dtest=false -Pjavadoc-profile\n+            -->  \n+            <id>javadoc-profile</id>\n+            <build>\n+                <plugins>\n+                    <plugin>\n+                        <groupId>org.apache.maven.plugins</groupId>\n+                        <artifactId>maven-javadoc-plugin</artifactId>\n+                        <version>2.2</version>\n+                        <executions>\n+                            <execution>\n+                                <phase>process-classes</phase>\n+                                <goals><goal>javadoc</goal></goals>\n+                                <configuration>\n+                                    <additionalparam>\n+                                        ${javadoc.additionalparam}\n+                                    </additionalparam>\n+                                    <aggregate>true</aggregate>\n+                                    <subpackages>org.apache.openjpa</subpackages>\n+\n+                                    <verbose>false</verbose>\n+                                    <!-- <linksource>true</linksource> -->\n+                                    <maxmemory>512m</maxmemory>\n+                                    <links>\n+                                        <link>http://java.sun.com/j2se/1.5.0/docs/api</link>\n+                                        <link>http://java.sun.com/javaee/5/docs/api</link>\n+                                        <link>http://jakarta.apache.org/commons/collections/api-release</link>\n+                                    </links>\n+                                </configuration>\n+                            </execution>\n+                        </executions>\n+                    </plugin>\n+                </plugins>\n+            </build>\n+            <activation>\n+                <property>\n+                    <name>builddocs</name>\n+                    <value>true</value>\n+                </property>\n+            </activation>\n+        </profile>\n+\n+        <profile>\n+            <id>enable-security</id>\n+            <activation>\n+                <activeByDefault>false</activeByDefault>\n+            </activation>\n+            <properties>\n+                <test.env>-Dtest.basedir=${basedir}/..</test.env>\n+                <policy.file>${basedir}/../openjpa-persistence-jdbc/src/test/resources/j2.security.test.policy</policy.file>\n+                <surefire.jvm.args>-Djava.security.manager -Djava.security.policy=${policy.file} ${test.env}</surefire.jvm.args>\n+            </properties>\n+        </profile>\n+\n+    </profiles>\n+\n+    <repositories>\n+        <repository>\n+            <id>central</id>\n+            <name>Maven Repository Switchboard</name>\n+            <url>http://www.ibiblio.org/maven2</url>\n+        </repository>\n+        <repository>\n+    \t    <id>java.net</id>\n+\t        <url>https://maven-repository.dev.java.net/nonav/repository</url>\n+\t        <layout>legacy</layout>\n+        </repository>\n+    </repositories>\n+    <dependencies>\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <version>3.8.1</version>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+    <build>\n+        <resources>\n+            <resource>\n+                <directory>src/main/resources</directory>\n+            </resource>\n+            <!-- also include license and notice files in all the jars -->\n+            <resource>\n+                <directory>${basedir}/../openjpa-project/</directory>\n+                <includes>\n+                    <include>NOTICE.txt</include>\n+                    <include>LICENSE.txt</include>\n+                    <include>DISCLAIMER.txt</include>\n+                </includes>\n+                <targetPath>META-INF</targetPath>\n+            </resource>\n+        </resources>\n+        <pluginManagement>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-compiler-plugin</artifactId>\n+                    <configuration>\n+                        <source>1.5</source>\n+                        <target>1.5</target>\n+                    </configuration>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-jar-plugin</artifactId>\n+                    <version>2.1</version>\n+                    <configuration>\n+                        <archive>\n+                            <manifest>\n+                                <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>\n+                                <addDefaultImplementationEntries>true</addDefaultImplementationEntries>\n+                            </manifest>\n+                        </archive>\n+                    </configuration>\n+                </plugin>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-surefire-plugin</artifactId>\n+                    <version>2.2</version>\n+                    <configuration>\n+                        <argLine>${surefire.jvm.args}</argLine>\n+                        <useFile>false</useFile>\n+                        <trimStackTrace>false</trimStackTrace>\n+                        <useSystemClassLoader>true</useSystemClassLoader>\n+                    </configuration>\n+                </plugin>\n+            </plugins>\n+        </pluginManagement>\n+    </build>\n+    <reporting>\n+        <plugins>\n+            <plugin>\n+                <artifactId>maven-project-info-reports-plugin</artifactId>\n+                <reportSets>\n+                    <reportSet>\n+                        <reports>\n+                            <report>jdepend-maven-plugin</report>\n+                            <!-- <report>jxr-maven-plugin</report> -->\n+                            <report>surefire-report-maven-plugin</report>\n+                            <report>maven-javadoc-plugin</report>\n+                            <report>project-team</report>\n+                            <report>mailing-list</report>\n+                            <report>issue-tracking</report>\n+                            <report>license</report>\n+                            <report>scm</report>\n+                        </reports>\n+                    </reportSet>\n+                </reportSets>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>taglist-maven-plugin</artifactId>\n+            </plugin>\n+        </plugins>\n+    </reporting>\n+\n+\n+    <distributionManagement>\n+      <repository>\n+        <id>people.apache.org</id>\n+        <url>scp://people.apache.org/www/people.apache.org/repo/m2-incubating-repository/</url>\n+      </repository>\n+      <snapshotRepository>\n+        <id>people.apache.org</id>\n+        <url>scp://people.apache.org/www/people.apache.org/repo/m2-snapshot-repository/</url>\n+        <uniqueVersion>false</uniqueVersion>\n+      </snapshotRepository>\n+      <site>\n+        <id>people.apache.org</id>\n+        <url>scpexe://people.apache.org/home/mprudhom/public_html/openjpa/site/</url>\n+      </site>\n+    </distributionManagement>\n+</project>"}]}

