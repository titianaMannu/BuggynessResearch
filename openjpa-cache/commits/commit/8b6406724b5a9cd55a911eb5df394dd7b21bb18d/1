{"sha":"8b6406724b5a9cd55a911eb5df394dd7b21bb18d","node_id":"MDY6Q29tbWl0MjA2MzY0OjhiNjQwNjcyNGI1YTljZDU1YTkxMWViNWRmMzk0ZGQ3YjIxYmIxOGQ=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-12-22T00:21:17Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-12-22T00:21:17Z"},"message":"Always merge new MetaDataFactory settings with any previous settings \nbecause many of its properties are often set implicitly and aren't meant to\nerase other settings.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@489520 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f8f0e24e497afb2fff4163f1843fe783bb2e6999","url":"https://api.github.com/repos/apache/openjpa/git/trees/f8f0e24e497afb2fff4163f1843fe783bb2e6999"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8b6406724b5a9cd55a911eb5df394dd7b21bb18d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8b6406724b5a9cd55a911eb5df394dd7b21bb18d","html_url":"https://github.com/apache/openjpa/commit/8b6406724b5a9cd55a911eb5df394dd7b21bb18d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8b6406724b5a9cd55a911eb5df394dd7b21bb18d/comments","author":null,"committer":null,"parents":[{"sha":"aecff50b27d17904a7b9cb6de00df032f01425dd","url":"https://api.github.com/repos/apache/openjpa/commits/aecff50b27d17904a7b9cb6de00df032f01425dd","html_url":"https://github.com/apache/openjpa/commit/aecff50b27d17904a7b9cb6de00df032f01425dd"}],"stats":{"total":139,"additions":123,"deletions":16},"files":[{"sha":"b256916ff20edff27f1f5415a98a18d40e3c905f","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","status":"modified","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/8b6406724b5a9cd55a911eb5df394dd7b21bb18d/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","raw_url":"https://github.com/apache/openjpa/raw/8b6406724b5a9cd55a911eb5df394dd7b21bb18d/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configurations.java?ref=8b6406724b5a9cd55a911eb5df394dd7b21bb18d","patch":"@@ -99,6 +99,41 @@ public static String getPlugin(String clsName, String props) {\n         return clsName + \"(\" + props + \")\";\n     }\n \n+    /**\n+     * Return a plugin string that combines the properties of the given plugin\n+     * strings, where properties of <code>override</code> will override the\n+     * same properties of <code>orig</code>.\n+     */\n+    public static String combinePlugins(String orig, String override) {\n+        if (StringUtils.isEmpty(orig))\n+            return override;\n+        if (StringUtils.isEmpty(override))\n+            return orig;\n+\n+        String origCls = getClassName(orig);\n+        String overrideCls = getClassName(override);\n+        String cls;\n+        if (StringUtils.isEmpty(origCls))\n+            cls = overrideCls;\n+        else if (StringUtils.isEmpty(overrideCls))\n+            cls = origCls;\n+        else if (!origCls.equals(overrideCls))\n+            return override; // completely different plugin\n+        else\n+            cls = origCls;\n+\n+        String origProps = getProperties(orig);\n+        String overrideProps = getProperties(override);\n+        if (StringUtils.isEmpty(origProps))\n+            return getPlugin(cls, overrideProps);\n+        if (StringUtils.isEmpty(overrideProps))\n+            return getPlugin(cls, origProps);\n+\n+        Properties props = parseProperties(origProps);\n+        props.putAll(parseProperties(overrideProps));\n+        return getPlugin(cls, serializeProperties(props)); \n+    }\n+\n     /**\n      * Create the instance with the given class name, using the given\n      * class loader. No configuration of the instance is performed by"},{"sha":"f67b4092812191b31f34bc4c7bc25d56294f8655","filename":"openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurations.java","status":"modified","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/8b6406724b5a9cd55a911eb5df394dd7b21bb18d/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurations.java","raw_url":"https://github.com/apache/openjpa/raw/8b6406724b5a9cd55a911eb5df394dd7b21bb18d/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurations.java?ref=8b6406724b5a9cd55a911eb5df394dd7b21bb18d","patch":"@@ -12,6 +12,9 @@\n  */\n package org.apache.openjpa.lib.conf;\n \n+import java.util.HashMap;\n+import java.util.Map;\n+\n import org.apache.openjpa.lib.test.AbstractTestCase;\n import org.apache.openjpa.lib.util.Options;\n \n@@ -77,6 +80,62 @@ public void testParseProperties() {\n         assertEquals(\"baz baz\", opts.getProperty(\"biz\"));\n     }\n \n+    public void testCombinePlugins() {\n+        assertPluginsCombined(\"jpa\", null, \n+            null, null,\n+            \"jpa\", null);\n+        assertPluginsCombined(\"jpa\", null,\n+            \"jpa\", null,\n+            \"jpa\", null);\n+        assertPluginsCombined(\"jdo\", null,\n+            \"jpa\", null,\n+            \"jpa\", null);\n+        assertPluginsCombined(\"jdo\", new String[] { \"foo\", \"bar\" },\n+            \"jpa\", null,\n+            \"jpa\", null);\n+        assertPluginsCombined(\"jdo\", new String[] { \"foo\", \"bar\" },\n+            \"jpa\", new String[] { \"biz\", \"baz\" },\n+            \"jpa\", new String[] { \"biz\", \"baz\" }); \n+        assertPluginsCombined(\"jdo\", new String[] { \"foo\", \"bar\" },\n+            null, new String[] { \"biz\", \"baz\" },\n+            \"jdo\", new String[] { \"foo\", \"bar\", \"biz\", \"baz\" }); \n+        assertPluginsCombined(null, new String[] { \"foo\", \"bar\" },\n+            null, new String[] { \"biz\", \"baz\" },\n+            null, new String[] { \"foo\", \"bar\", \"biz\", \"baz\" }); \n+        assertPluginsCombined(null, new String[] { \"foo\", \"bar\" },\n+            \"jpa\", new String[] { \"biz\", \"baz\" },\n+            \"jpa\", new String[] { \"foo\", \"bar\", \"biz\", \"baz\" }); \n+        assertPluginsCombined(\"jpa\", new String[] { \"foo\", \"bar\" },\n+            \"jpa\", new String[] { \"biz\", \"baz\" },\n+            \"jpa\", new String[] { \"foo\", \"bar\", \"biz\", \"baz\" }); \n+        assertPluginsCombined(\"jpa\", new String[] { \"foo\", \"bar\" },\n+            \"jpa\", new String[] { \"foo\", \"baz\" },\n+            \"jpa\", new String[] { \"foo\", \"baz\" }); \n+    }\n+\n+    private void assertPluginsCombined(String cls1, String[] props1,\n+        String cls2, String[] props2, String expCls, String[] expProps) {\n+        String plugin1 = Configurations.getPlugin(cls1, \n+            Configurations.serializeProperties(toProperties(props1)));\n+        String plugin2 = Configurations.getPlugin(cls2, \n+            Configurations.serializeProperties(toProperties(props2)));\n+\n+        String res = Configurations.combinePlugins(plugin1, plugin2);\n+        String resCls = Configurations.getClassName(res);\n+        Map resProps = Configurations.parseProperties(Configurations.\n+            getProperties(res));\n+        assertEquals(expCls, resCls);\n+        assertEquals(toProperties(expProps), resProps);\n+    }\n+\n+    private static Map toProperties(String[] props) {\n+        Map map = new HashMap();\n+        if (props != null)\n+            for (int i = 0; i < props.length; i++)\n+                map.put(props[i], props[++i]);\n+        return map;\n+    }\n+\n     public static void main(String[] args) {\n         main(TestConfigurations.class);\n     }"},{"sha":"ec67d85a258d232a214c94f17bfde270c4cdc46b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","status":"modified","additions":22,"deletions":4,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/8b6406724b5a9cd55a911eb5df394dd7b21bb18d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/8b6406724b5a9cd55a911eb5df394dd7b21bb18d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java?ref=8b6406724b5a9cd55a911eb5df394dd7b21bb18d","patch":"@@ -32,10 +32,11 @@\n import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n import org.apache.openjpa.conf.OpenJPAProductDerivation;\n import org.apache.openjpa.lib.conf.AbstractProductDerivation;\n-import org.apache.openjpa.lib.conf.ProductDerivations;\n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n+import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.conf.MapConfigurationProvider;\n+import org.apache.openjpa.lib.conf.ProductDerivations;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.meta.XMLMetaDataParser;\n import org.apache.openjpa.lib.util.Localizer;\n@@ -382,10 +383,27 @@ public void setSource(String source) {\n \n         @Override\n         public void setInto(Configuration conf) {\n-            if (conf instanceof OpenJPAConfiguration)\n-                ((OpenJPAConfiguration) conf).setSpecification(SPEC_JPA);\n-            super.setInto(conf, null);\n+            if (conf instanceof OpenJPAConfiguration) {\n+                OpenJPAConfiguration oconf = (OpenJPAConfiguration) conf;\n+                oconf.setSpecification(SPEC_JPA);\n+\n+                // we merge several persistence.xml elements into the \n+                // MetaDataFactory property implicitly.  if the user has a\n+                // global openjpa.xml with this property set, its value will\n+                // get overwritten by our implicit setting.  so instead, combine\n+                // the global value with our settings\n+                String orig = oconf.getMetaDataFactory();\n+                if (!StringUtils.isEmpty(orig)) {\n+                    String key = ProductDerivations.getConfigurationKey\n+                        (\"MetaDataFactory\", getProperties());\n+                    Object override = getProperties().get(key);\n+                    if (override instanceof String)\n+                        addProperty(key, Configurations.combinePlugins(orig, \n+                            (String) override));\n+                }\n+            }\n \n+            super.setInto(conf, null);\n             Log log = conf.getConfigurationLog();\n             if (log.isTraceEnabled()) {\n                 String src = (_source == null) ? \"?\" : _source;"},{"sha":"5352a18a5ec7443b58e9f733619ff68bcb6122c0","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","status":"modified","additions":7,"deletions":12,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/8b6406724b5a9cd55a911eb5df394dd7b21bb18d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","raw_url":"https://github.com/apache/openjpa/raw/8b6406724b5a9cd55a911eb5df394dd7b21bb18d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java?ref=8b6406724b5a9cd55a911eb5df394dd7b21bb18d","patch":"@@ -33,6 +33,7 @@\n \n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.lib.conf.ProductDerivations;\n import org.apache.openjpa.lib.meta.SourceTracker;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.lib.util.MultiClassLoader;\n@@ -404,20 +405,14 @@ public static Map toOpenJPAProperties(PersistenceUnitInfo info) {\n             }\n             metaFactoryProps.put(\"Resources\", rsrcs.toString());\n         }\n+\n+        // set persistent class locations as properties of metadata factory,\n+        // combining them with any existing metadata factory props\n         if (!metaFactoryProps.isEmpty()) {\n-            // set persistent class locations as properties of metadata factory\n-            String factory = (String) Configurations.getProperty\n+            String key = ProductDerivations.getConfigurationKey\n                 (\"MetaDataFactory\", map);\n-            if (factory == null)\n-                factory = Configurations.serializeProperties(metaFactoryProps);\n-            else {\n-                String clsName = Configurations.getClassName(factory);\n-                metaFactoryProps.putAll(Configurations.parseProperties\n-                    (Configurations.getProperties(factory)));\n-                factory = Configurations.getPlugin(clsName,\n-                    Configurations.serializeProperties(metaFactoryProps));\n-            }\n-            map.put(\"openjpa.MetaDataFactory\", factory);\n+            map.put(key, Configurations.combinePlugins((String) map.get(key),\n+                Configurations.serializeProperties(metaFactoryProps)));\n         }\n         \n         // always record provider name for product derivations to access"}]}

