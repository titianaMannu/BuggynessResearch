{"sha":"8c1175054f028ef00d219c054b66fd6634eca020","node_id":"MDY6Q29tbWl0MjA2MzY0OjhjMTE3NTA1NGYwMjhlZjAwZDIxOWMwNTRiNjZmZDY2MzRlY2EwMjA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-18T18:32:19Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-18T18:32:19Z"},"message":"OPENJPA-1583: Timestamp version field in bulk update\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@924938 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d24edb9176aadc364bb3255a5622c7868b82cbe5","url":"https://api.github.com/repos/apache/openjpa/git/trees/d24edb9176aadc364bb3255a5622c7868b82cbe5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8c1175054f028ef00d219c054b66fd6634eca020","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8c1175054f028ef00d219c054b66fd6634eca020","html_url":"https://github.com/apache/openjpa/commit/8c1175054f028ef00d219c054b66fd6634eca020","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8c1175054f028ef00d219c054b66fd6634eca020/comments","author":null,"committer":null,"parents":[{"sha":"bd9b59c90f575b71a7167b48fadfb35ffa61449a","url":"https://api.github.com/repos/apache/openjpa/commits/bd9b59c90f575b71a7167b48fadfb35ffa61449a","html_url":"https://github.com/apache/openjpa/commit/bd9b59c90f575b71a7167b48fadfb35ffa61449a"}],"stats":{"total":252,"additions":239,"deletions":13},"files":[{"sha":"710c6e24d5f6bb9b841037e56fa08cb5fbe8aaae","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/8c1175054f028ef00d219c054b66fd6634eca020/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java","raw_url":"https://github.com/apache/openjpa/raw/8c1175054f028ef00d219c054b66fd6634eca020/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Version.java?ref=8c1175054f028ef00d219c054b66fd6634eca020","patch":"@@ -368,12 +368,12 @@ public String toString() {\n     }\n \n     /**\n-     * @return a Map<Column,String> specifying how to update each version\n+     * @return a Map<Column,Object> specifying how to update each version\n      * column in this instance during a bulk update.\n      *\n      * @since 1.0.0\n      */\n-    public Map getBulkUpdateValues() {\n+    public Map<Column,?> getBulkUpdateValues() {\n         return _strategy.getBulkUpdateValues();\n     }\n }"},{"sha":"47a541140a3054e41fdb9cd3fa6ad5fb8c2668f0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/8c1175054f028ef00d219c054b66fd6634eca020/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/8c1175054f028ef00d219c054b66fd6634eca020/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/VersionStrategy.java?ref=8c1175054f028ef00d219c054b66fd6634eca020","patch":"@@ -22,6 +22,7 @@\n import java.util.Map;\n \n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n+import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n@@ -77,10 +78,10 @@ public boolean checkVersion(OpenJPAStateManager sm, JDBCStore store,\n     public int compareVersion(Object v1, Object v2);\n \n     /**\n-     * @return a Map<Column,String> specifying how to update each version\n+     * @return a Map<Column,Object> specifying how to update each version\n      * column during a bulk update.\n      *\n      * @since 1.0.0\n      */\n-    public Map getBulkUpdateValues();\n+    public Map<Column,? extends Object> getBulkUpdateValues();\n }"},{"sha":"b7560e89b30b22defec34d5be56557aed65abc1b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NumberVersionStrategy.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/8c1175054f028ef00d219c054b66fd6634eca020/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NumberVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/8c1175054f028ef00d219c054b66fd6634eca020/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NumberVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/NumberVersionStrategy.java?ref=8c1175054f028ef00d219c054b66fd6634eca020","patch":"@@ -65,9 +65,9 @@ protected Object nextVersion(Object version) {\n         return ((Number) version).intValue() + 1;\n     }\n \n-    public Map getBulkUpdateValues() {\n+    public Map<Column,String> getBulkUpdateValues() {\n         Column[] cols = vers.getColumns();\n-        Map map = new HashMap(cols.length);\n+        Map<Column,String> map = new HashMap<Column,String>(cols.length);\n         for (int i = 0; i < cols.length; i++)\n             map.put(cols[i], cols[i].getName() + \" + 1\");\n         return map;"},{"sha":"d4303b3776d8179510edd95cefd24596c161d21c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":11,"deletions":7,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/8c1175054f028ef00d219c054b66fd6634eca020/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/8c1175054f028ef00d219c054b66fd6634eca020/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=8c1175054f028ef00d219c054b66fd6634eca020","patch":"@@ -2134,14 +2134,18 @@ protected void appendUpdates(Select sel, JDBCStore store, SQLBuffer sql,\n             Path path = (Path) updateParams.keySet().iterator().next();\n             FieldMapping fm = (FieldMapping) path.last();\n             ClassMapping meta = fm.getDeclaringMapping();\n-            Map updates = meta.getVersion().getBulkUpdateValues();\n-            for (Iterator iter = updates.entrySet().iterator();\n-                iter.hasNext(); ) {\n-                Map.Entry e = (Map.Entry) iter.next();\n+            Map<Column,?> updates = meta.getVersion().getBulkUpdateValues();\n+            for (Map.Entry e : updates.entrySet()) {\n                 Column col = (Column) e.getKey();\n-                String val = (String) e.getValue();\n-                sql.append(\", \").append(toDBName(col.getIdentifier()))\n-                    .append(\" = \").append(val);\n+                Object val = e.getValue();\n+                sql.append(\", \").append(toDBName(col.getIdentifier())).append(\" = \");\n+                // Version update value for Numeric version is encoded in a String\n+                // to make SQL such as version = version+1 while Time stamp version is parameterized\n+                if (val instanceof String) {\n+                    sql.append((String)val);\n+                } else {\n+                    sql.appendValue(val);\n+                }\n             }\n         }\n     }"},{"sha":"4ec37b043861ce8bb4f4050c8d9f93cd8ebe9111","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/NumericVersionedEntity.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/8c1175054f028ef00d219c054b66fd6634eca020/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/NumericVersionedEntity.java","raw_url":"https://github.com/apache/openjpa/raw/8c1175054f028ef00d219c054b66fd6634eca020/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/NumericVersionedEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/NumericVersionedEntity.java?ref=8c1175054f028ef00d219c054b66fd6634eca020","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.update;\n+\n+import java.sql.Timestamp;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Version;\n+\n+/**\n+ * An entity using a Timestamp as Version field.\n+ * \n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+public class NumericVersionedEntity {\n+\t@Id\n+\t@GeneratedValue\n+\tprivate long id;\n+\t\n+\tprivate String name;\n+\t\n+\t@Version\n+\tprivate int version;\n+\t\n+\n+\tpublic long getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\t\n+\tpublic int getVersion() {\n+\t    return version;\n+\t}\n+\n+}"},{"sha":"d505c92498b9bf67d9f1ee588dc3bc982069e3f9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TestTimestampVersion.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/8c1175054f028ef00d219c054b66fd6634eca020/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TestTimestampVersion.java","raw_url":"https://github.com/apache/openjpa/raw/8c1175054f028ef00d219c054b66fd6634eca020/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TestTimestampVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TestTimestampVersion.java?ref=8c1175054f028ef00d219c054b66fd6634eca020","patch":"@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.update;\n+\n+import java.sql.Timestamp;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Tests for update on entity that uses a Timestamp as version.\n+ * \n+ * @see <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-1583\">OPENJPA-1583</A>\n+ *     \n+ * @author Pinaki Poddar\n+ * \n+ */\n+public class TestTimestampVersion extends SingleEMFTestCase {\n+\tpublic void setUp() {\n+\t\tsuper.setUp(CLEAR_TABLES, TimestampedEntity.class, NumericVersionedEntity.class);\n+\t}\n+\n+    public void testBulkUpdateOnTimestampedVersion() {\n+        TimestampedEntity pc = new TimestampedEntity();\n+        pc.setName(\"Original\");\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(pc);\n+        em.getTransaction().commit();\n+        \n+        em.getTransaction().begin();\n+        Timestamp oldVersion = pc.getVersion();\n+        String jpql = \"UPDATE TimestampedEntity t SET t.name=:newname WHERE t.name=:oldname\";\n+        em.createQuery(jpql)\n+          .setParameter(\"newname\", \"Updated\")\n+          .setParameter(\"oldname\", \"Original\")\n+          .executeUpdate();\n+        em.getTransaction().commit();\n+        \n+        em.getTransaction().begin();\n+        em.refresh(pc);\n+        Timestamp newVersion = pc.getVersion();\n+        assertTrue(newVersion.after(oldVersion));\n+    }\n+    \n+    public void testBulkUpdateOnNumericVersion() {\n+        NumericVersionedEntity pc = new NumericVersionedEntity();\n+        pc.setName(\"Original\");\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(pc);\n+        em.getTransaction().commit();\n+        \n+        em.getTransaction().begin();\n+        int oldVersion = pc.getVersion();\n+        String jpql = \"UPDATE NumericVersionedEntity t SET t.name=:newname WHERE t.name=:oldname\";\n+        em.createQuery(jpql)\n+          .setParameter(\"newname\", \"Updated\")\n+          .setParameter(\"oldname\", \"Original\")\n+          .executeUpdate();\n+        em.getTransaction().commit();\n+        \n+        em.getTransaction().begin();\n+        em.refresh(pc);\n+        int newVersion = pc.getVersion();\n+        assertEquals(newVersion, oldVersion+1);\n+    }\n+\n+\t\n+}"},{"sha":"c312888836356dce77c53d85e0f68686802390a0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TimestampedEntity.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/8c1175054f028ef00d219c054b66fd6634eca020/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TimestampedEntity.java","raw_url":"https://github.com/apache/openjpa/raw/8c1175054f028ef00d219c054b66fd6634eca020/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TimestampedEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TimestampedEntity.java?ref=8c1175054f028ef00d219c054b66fd6634eca020","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.update;\n+\n+import java.sql.Timestamp;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Version;\n+\n+/**\n+ * An entity using a Timestamp as Version field.\n+ * \n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+public class TimestampedEntity {\n+\t@Id\n+\t@GeneratedValue\n+\tprivate long id;\n+\t\n+\tprivate String name;\n+\t\n+\t@Version\n+\tprivate Timestamp version;\n+\t\n+\n+\tpublic long getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\t\n+\tpublic Timestamp getVersion() {\n+\t    return version;\n+\t}\n+\n+}"}]}

