{"sha":"8c1710ed6376296daf967b32a7f48332ec1f3654","node_id":"MDY6Q29tbWl0MjA2MzY0OjhjMTcxMGVkNjM3NjI5NmRhZjk2N2IzMmE3ZjQ4MzMyZWMxZjM2NTQ=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-27T16:26:52Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-07-27T16:26:52Z"},"message":"OPENJPA-297\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@560304 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"92e54152fe413c822924d046d02811959d93de92","url":"https://api.github.com/repos/apache/openjpa/git/trees/92e54152fe413c822924d046d02811959d93de92"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8c1710ed6376296daf967b32a7f48332ec1f3654","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8c1710ed6376296daf967b32a7f48332ec1f3654","html_url":"https://github.com/apache/openjpa/commit/8c1710ed6376296daf967b32a7f48332ec1f3654","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8c1710ed6376296daf967b32a7f48332ec1f3654/comments","author":null,"committer":null,"parents":[{"sha":"747226b1d6dc6d57fd28332b4c2a4b0c4ad7a59c","url":"https://api.github.com/repos/apache/openjpa/commits/747226b1d6dc6d57fd28332b4c2a4b0c4ad7a59c","html_url":"https://github.com/apache/openjpa/commit/747226b1d6dc6d57fd28332b4c2a4b0c4ad7a59c"}],"stats":{"total":191,"additions":159,"deletions":32},"files":[{"sha":"81c464674f509e2da41a928bbd3c319b5e824205","filename":"openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","status":"modified","additions":53,"deletions":16,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/8c1710ed6376296daf967b32a7f48332ec1f3654/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","raw_url":"https://github.com/apache/openjpa/raw/8c1710ed6376296daf967b32a7f48332ec1f3654/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel-5/src/main/java/org/apache/openjpa/enhance/ManagedClassSubclasser.java?ref=8c1710ed6376296daf967b32a7f48332ec1f3654","patch":"@@ -35,6 +35,8 @@\n import org.apache.openjpa.util.GeneratedClasses;\r\n import org.apache.openjpa.util.InternalException;\r\n import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.meta.FieldMetaData;\r\n+import org.apache.openjpa.meta.JavaTypes;\r\n import serp.bytecode.BCClass;\r\n \r\n /**\r\n@@ -74,7 +76,8 @@\n             return Collections.EMPTY_LIST;\r\n \r\n         Log log = conf.getLog(OpenJPAConfiguration.LOG_ENHANCE);\r\n-        if (ClassRedefiner.canRedefineClasses())\r\n+        boolean redefine = ClassRedefiner.canRedefineClasses();\r\n+        if (redefine)\r\n             log.info(_loc.get(\"enhance-and-subclass-no-redef-start\",\r\n                 classes));\r\n         else\r\n@@ -88,21 +91,24 @@\n             final Class cls = (Class) iter.next();\r\n             final PCEnhancer enhancer = new PCEnhancer(conf, cls);\r\n \r\n-            // set this before enhancement as well as after since enhancement\r\n-            // uses a different metadata repository, and the value of this\r\n-            // setting matters in the enhancement contract.\r\n-            setDetachedState(enhancer.getMetaData());\r\n-\r\n             enhancer.setBytecodeWriter(new BytecodeWriter() {\r\n                 public void write(BCClass bc) throws IOException {\r\n                     ManagedClassSubclasser.write(bc, enhancer, map,\r\n                         cls, subs, ints);\r\n                 }\r\n             });\r\n-            if (ClassRedefiner.canRedefineClasses())\r\n+            if (redefine)\r\n                 enhancer.setRedefine(true);\r\n             enhancer.setCreateSubclass(true);\r\n             enhancer.setAddDefaultConstructor(true);\r\n+\r\n+            // set this before enhancement as well as after since enhancement\r\n+            // uses a different metadata repository, and the metadata config\r\n+            // matters in the enhancement contract. Don't do any warning here,\r\n+            // since we'll issue warnings when we do the final metadata\r\n+            // reconfiguration at the end of this method.\r\n+            configureMetaData(enhancer.getMetaData(), conf, redefine, false);\r\n+\r\n             enhancer.run();\r\n             try {\r\n                 enhancer.record();\r\n@@ -115,16 +121,54 @@ public void write(BCClass bc) throws IOException {\n         ClassRedefiner.redefineClasses(conf, map);\r\n         for (Class cls : map.keySet()) {\r\n             setIntercepting(conf, envLoader, cls);\r\n-            configureMetaData(conf, envLoader, cls);\r\n+            configureMetaData(conf, envLoader, cls, redefine);\r\n         }\r\n         for (Class cls : (Collection<Class>) subs)\r\n-            configureMetaData(conf, envLoader, cls);\r\n+            configureMetaData(conf, envLoader, cls, redefine);\r\n         for (Class cls : (Collection<Class>) ints)\r\n             setIntercepting(conf, envLoader, cls);\r\n \r\n         return subs;\r\n     }\r\n \r\n+    private static void configureMetaData(OpenJPAConfiguration conf,\r\n+        ClassLoader envLoader, Class cls, boolean redefineAvailable) {\r\n+        ClassMetaData meta = conf.getMetaDataRepositoryInstance()\r\n+            .getMetaData(cls, envLoader, true);\r\n+        configureMetaData(meta, conf, redefineAvailable, true);\r\n+    }\r\n+\r\n+    private static void configureMetaData(ClassMetaData meta,\r\n+        OpenJPAConfiguration conf, boolean redefineAvailable, boolean warn) {\r\n+\r\n+        setDetachedState(meta);\r\n+\r\n+        if (warn && meta.getAccessType() == ClassMetaData.ACCESS_FIELD\r\n+            && !redefineAvailable) {\r\n+            // only warn about declared fields; superclass fields will be\r\n+            // warned about when the superclass is handled\r\n+            for (FieldMetaData fmd : meta.getDeclaredFields()) {\r\n+                switch (fmd.getTypeCode()) {\r\n+                    case JavaTypes.COLLECTION:\r\n+                    case JavaTypes.MAP:\r\n+                        // we can lazily load these, since we own the\r\n+                        // relationship container\r\n+                        break;\r\n+                    default:\r\n+                        if (!fmd.isInDefaultFetchGroup()\r\n+                            && !(fmd.isVersion() || fmd.isPrimaryKey())) {\r\n+                            Log log = conf.getLog(\r\n+                                OpenJPAConfiguration.LOG_ENHANCE);\r\n+                            log.warn(_loc.get(\"subclasser-fetch-group-override\",\r\n+                                meta.getDescribedType().getName(),\r\n+                                fmd.getName()));\r\n+                            fmd.setInDefaultFetchGroup(true);\r\n+                        }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n     private static void write(BCClass bc, PCEnhancer enhancer,\r\n         Map<Class, byte[]> map, Class cls, List subs, List ints)\r\n         throws IOException {\r\n@@ -158,13 +202,6 @@ private static void setIntercepting(OpenJPAConfiguration conf,\n         meta.setIntercepting(true);\r\n     }\r\n \r\n-    private static void configureMetaData(OpenJPAConfiguration conf,\r\n-        ClassLoader envLoader, Class cls) {\r\n-        ClassMetaData meta = conf.getMetaDataRepositoryInstance()\r\n-            .getMetaData(cls, envLoader, true);\r\n-        setDetachedState(meta);\r\n-    }\r\n-\r\n     /**\r\n      * If the metadata is configured to use a synthetic\r\n      * detached state, reset it to not use a detached\r"},{"sha":"9df55adc59eaae3fc2382314fcc0b794bba7c8b6","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/8c1710ed6376296daf967b32a7f48332ec1f3654/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/8c1710ed6376296daf967b32a7f48332ec1f3654/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties?ref=8c1710ed6376296daf967b32a7f48332ec1f3654","patch":"@@ -187,3 +187,7 @@ subclasser-native-methods-not-allowed: The method {1} in type {0} is native. \\\n     OpenJPA requires methods in unenhanced instances to be non-native.\n subclasser-static-methods-not-supported: The method {1} in type {0} is static. \\\n     OpenJPA requires methods in unenhanced instances to be non-static.\n+subclasser-fetch-group-override: The field {1} in type {0} is configured to be \\\n+    lazily loaded, but lazy loading is not available for classes that use field\\\n+    access when not running the OpenJPA enhancer or when dynamic class \\\n+    redefinition is not available."},{"sha":"1875aca001eedbb57aa7249bd33966878c29d161","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/AbstractUnenhancedClassTest.java","status":"modified","additions":52,"deletions":8,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/8c1710ed6376296daf967b32a7f48332ec1f3654/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/AbstractUnenhancedClassTest.java","raw_url":"https://github.com/apache/openjpa/raw/8c1710ed6376296daf967b32a7f48332ec1f3654/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/AbstractUnenhancedClassTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/AbstractUnenhancedClassTest.java?ref=8c1710ed6376296daf967b32a7f48332ec1f3654","patch":"@@ -39,7 +39,6 @@\n \r\n     // ##### To do:\r\n     // - clearing in pnew property-access without redefinition\r\n-    // - lazy loading override for -to-one field types\r\n     // - figure out how to auto-test the redefinition code, either in Java 5\r\n     //   or in Java 6\r\n     // - run CTS in the following combinations:\r\n@@ -48,8 +47,7 @@\n     //   * Java 5 without javaagent\r\n \r\n     public void setUp() {\r\n-        setUp(getUnenhancedClass(), getUnenhancedSubclass(), CLEAR_TABLES,\r\n-            \"openjpa.Log\", \"Enhance=TRACE\");\r\n+        setUp(getUnenhancedClass(), getUnenhancedSubclass(), CLEAR_TABLES);\r\n         // trigger class redefinition\r\n         emf.createEntityManager().close();\r\n     }\r\n@@ -237,17 +235,17 @@ public void testPCSubclassName() {\n             PCEnhancer.toPCSubclassName(getUnenhancedClass()));\r\n     }\r\n \r\n-    public void testLazyLoadingInUserCreatedInstance()\r\n+    public void testEvictionInUserCreatedInstance()\r\n         throws NoSuchFieldException, IllegalAccessException {\r\n-        lazyLoading(true);\r\n+        evictionHelper(true);\r\n     }\r\n \r\n-    public void testLazyLoadingInOpenJPACreatedInstance()\r\n+    public void testEvictionInOpenJPACreatedInstance()\r\n         throws NoSuchFieldException, IllegalAccessException {\r\n-        lazyLoading(false);\r\n+        evictionHelper(false);\r\n     }\r\n \r\n-    private void lazyLoading(boolean userDefined)\r\n+    private void evictionHelper(boolean userDefined)\r\n         throws NoSuchFieldException, IllegalAccessException {\r\n         OpenJPAEntityManager em = emf.createEntityManager();\r\n         UnenhancedType un = newUnenhancedInstance();\r\n@@ -303,6 +301,52 @@ private void lazyLoading(boolean userDefined)\n         em.close();\r\n     }\r\n \r\n+    public void testLazyLoading()\r\n+        throws NoSuchFieldException, IllegalAccessException {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        UnenhancedType un = newUnenhancedInstance();\r\n+        em.getTransaction().begin();\r\n+        em.persist(un);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        un = em.find(getUnenhancedClass(), un.getId());\r\n+        assertTrue(getUnenhancedClass() != un.getClass());\r\n+        OpenJPAStateManager sm = (OpenJPAStateManager)\r\n+            ImplHelper.toPersistenceCapable(un, null).pcGetStateManager();\r\n+\r\n+        // we only expect lazy loading to work when we can redefine classes\r\n+        // or when accessing a property-access record that OpenJPA created.\r\n+        if (ClassRedefiner.canRedefineClasses()\r\n+            || (sm.getMetaData().getAccessType() != ClassMetaData.ACCESS_FIELD))\r\n+        {\r\n+            assertFalse(sm.getLoaded()\r\n+                .get(sm.getMetaData().getField(\"lazyField\").getIndex()));\r\n+\r\n+            // make sure that the value was cleared\r\n+            Field field = getUnenhancedClass().getDeclaredField(\"lazyField\");\r\n+            field.setAccessible(true);\r\n+            assertEquals(null, field.get(un));\r\n+        } else {\r\n+            // unredefined field access\r\n+            assertTrue(sm.getLoaded()\r\n+                .get(sm.getMetaData().getField(\"lazyField\").getIndex()));\r\n+\r\n+            // make sure that the value was loaded already\r\n+            Field field = getUnenhancedClass().getDeclaredField(\"lazyField\");\r\n+            field.setAccessible(true);\r\n+            assertEquals(\"lazy\", field.get(un));\r\n+        }\r\n+\r\n+        // make sure that the value is available, one way or another\r\n+        assertEquals(\"lazy\", un.getLazyField());\r\n+        assertTrue(sm.getLoaded()\r\n+            .get(sm.getMetaData().getField(\"lazyField\").getIndex()));\r\n+\r\n+        em.close();\r\n+    }\r\n+\r\n     public void testSerializationOfUserDefinedInstance()\r\n         throws IOException, ClassNotFoundException {\r\n         serializationHelper(true, false);\r"},{"sha":"a8894f603048831a058f2636766aa7e68aa551c9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedFieldAccess.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/8c1710ed6376296daf967b32a7f48332ec1f3654/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedFieldAccess.java","raw_url":"https://github.com/apache/openjpa/raw/8c1710ed6376296daf967b32a7f48332ec1f3654/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedFieldAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedFieldAccess.java?ref=8c1710ed6376296daf967b32a7f48332ec1f3654","patch":"@@ -26,6 +26,8 @@\n import javax.persistence.Inheritance;\r\n import javax.persistence.InheritanceType;\r\n import javax.persistence.Table;\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.FetchType;\r\n \r\n import org.apache.openjpa.persistence.DetachedState;\r\n \r\n@@ -39,6 +41,9 @@\n     @Version public int version;\r\n     protected String stringField = \"foo\";\r\n \r\n+    @Basic(fetch = FetchType.LAZY)\r\n+    private String lazyField = \"lazy\";\r\n+\r\n     public int getId() {\r\n         return id;\r\n     }\r\n@@ -51,6 +56,10 @@ public String getStringField() {\n         return stringField;\r\n     }\r\n \r\n+    public String getLazyField() {\r\n+        return lazyField;\r\n+    }\r\n+\r\n     public boolean equals(Object o) {\r\n         if (o == this)\r\n             return true;\r"},{"sha":"dc0de4b7433ff5bb2543953b164a8dea82e0cd6b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedPropertyAccess.java","status":"modified","additions":14,"deletions":5,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/8c1710ed6376296daf967b32a7f48332ec1f3654/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedPropertyAccess.java","raw_url":"https://github.com/apache/openjpa/raw/8c1710ed6376296daf967b32a7f48332ec1f3654/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedPropertyAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedPropertyAccess.java?ref=8c1710ed6376296daf967b32a7f48332ec1f3654","patch":"@@ -27,8 +27,7 @@\n import javax.persistence.Inheritance;\r\n import javax.persistence.InheritanceType;\r\n import javax.persistence.Table;\r\n-\r\n-import org.apache.openjpa.persistence.DetachedState;\r\n+import javax.persistence.FetchType;\r\n \r\n @Entity\r\n @Table(name=\"UN_PROP\")\r\n@@ -39,6 +38,7 @@\n     private int id;\r\n     private int version;\r\n     private String sf = \"foo\";\r\n+    private String lazyField = \"lazy\";\r\n \r\n     @Id @GeneratedValue\r\n     public int getId() {\r\n@@ -58,13 +58,22 @@ protected void setVersion(int v) {\n         version = v;\r\n     }\r\n \r\n+    @Basic\r\n+    public String getStringField() {\r\n+        return sf;\r\n+    }\r\n+\r\n     public void setStringField(String s) {\r\n         sf = s;\r\n     }\r\n \r\n-    @Basic\r\n-    public String getStringField() {\r\n-        return sf;\r\n+    @Basic(fetch = FetchType.LAZY)\r\n+    public String getLazyField() {\r\n+        return lazyField;\r\n+    }\r\n+\r\n+    public void setLazyField(String s) {\r\n+        lazyField = s;\r\n     }\r\n \r\n     public boolean equals(Object o) {\r"},{"sha":"707eb31390284ce2ab3ef0fca4bc37d1de3af34c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedType.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/8c1710ed6376296daf967b32a7f48332ec1f3654/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedType.java","raw_url":"https://github.com/apache/openjpa/raw/8c1710ed6376296daf967b32a7f48332ec1f3654/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedType.java?ref=8c1710ed6376296daf967b32a7f48332ec1f3654","patch":"@@ -23,9 +23,12 @@\n  */\r\n public interface UnenhancedType {\r\n \r\n+    int getId();\r\n+\r\n     void setStringField(String s);\r\n     String getStringField();\r\n-    int getId();\r\n+\r\n+    String getLazyField();\r\n \r\n     Object clone() throws CloneNotSupportedException;\r\n }\r"},{"sha":"7cff80dbbbfc058fdee023b38345188de800c2a8","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","status":"modified","additions":18,"deletions":1,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/8c1710ed6376296daf967b32a7f48332ec1f3654/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/8c1710ed6376296daf967b32a7f48332ec1f3654/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java?ref=8c1710ed6376296daf967b32a7f48332ec1f3654","patch":"@@ -50,13 +50,15 @@\n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.meta.AbstractMetaDataDefaults;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.ValueMetaData;\n import static org.apache.openjpa.persistence.PersistenceStrategy.*;\n import org.apache.openjpa.util.MetaDataException;\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n \n /**\n  * JPA-based metadata defaults.\n@@ -294,10 +296,13 @@ protected boolean isDefaultPersistent(ClassMetaData meta, Member member,\n                         meta.getDescribedType(), \"set\" +\n                         StringUtils.capitalize(name), new Class[] { \n                             ((Method) member).getReturnType() }));\n-                if (setter == null)\n+                if (setter == null) {\n+                    logNoSetter(meta, name, null);\n                     return false;\n+                }\n             } catch (Exception e) {\n                 // e.g., NoSuchMethodException\n+                logNoSetter(meta, name, e);\n                 return false;\n             }\n         }\n@@ -307,4 +312,16 @@ protected boolean isDefaultPersistent(ClassMetaData meta, Member member,\n             return false;\n         return true;\n \t}\n+\n+    private void logNoSetter(ClassMetaData meta, String name, Exception e) {\n+        Log log = meta.getRepository().getConfiguration()\n+            .getLog(OpenJPAConfiguration.LOG_METADATA);\n+        if (log.isWarnEnabled())\n+            log.warn(_loc.get(\"no-setter-for-getter\", name,\n+                meta.getDescribedType().getName()));\n+        else if (log.isTraceEnabled())\n+            // log the exception, if any, if we're in trace-level debugging\n+            log.warn(_loc.get(\"no-setter-for-getter\", name,\n+                meta.getDescribedType().getName()), e);\n+    }\n }"},{"sha":"78a22f9b6cff87a1c3b410984656808dc06583fe","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/8c1710ed6376296daf967b32a7f48332ec1f3654/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/8c1710ed6376296daf967b32a7f48332ec1f3654/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties?ref=8c1710ed6376296daf967b32a7f48332ec1f3654","patch":"@@ -121,7 +121,11 @@ map-persistent-types-skipping-non-url: Skipping persistent type location \\\n map-persistent-types-skipping-class: Skipping persistent type location \\\n     association for location \"{0}\" since it is a class, and will not \\\n     need to be re-parsed later.\n-    \n+no-setter-for-getter: No setter was found for method {0} in type {1} while \\\n+    searching for persistent properties. This method will be ignored. If you \\\n+    intended for this to be persistent, please add a corresponding setter, \\\n+    or switch to field access for this type hierarchy.\n+\n EntityManagerFactory-name: EntityManagerFactory implementation\n EntityManagerFactory-desc: Allows extension of standard \\\n     org.apache.openjpa.persistence.EntityManagerFactoryImpl for custom behavior."}]}

