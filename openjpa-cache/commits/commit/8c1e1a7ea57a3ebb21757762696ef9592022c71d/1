{"sha":"8c1e1a7ea57a3ebb21757762696ef9592022c71d","node_id":"MDY6Q29tbWl0MjA2MzY0OjhjMWUxYTdlYTU3YTNlYmIyMTc1Nzc2MjY5NmVmOTU5MjAyMmM3MWQ=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-17T07:49:13Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2009-09-17T07:49:13Z"},"message":"OPENJPA-1253: support non-default uni-directional OneToMany using foreign key strategy, using JoinColumn annotation. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@816085 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"02498e6d0ca8823542d67c1d7a621f99f761befa","url":"https://api.github.com/repos/apache/openjpa/git/trees/02498e6d0ca8823542d67c1d7a621f99f761befa"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8c1e1a7ea57a3ebb21757762696ef9592022c71d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8c1e1a7ea57a3ebb21757762696ef9592022c71d","html_url":"https://github.com/apache/openjpa/commit/8c1e1a7ea57a3ebb21757762696ef9592022c71d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8c1e1a7ea57a3ebb21757762696ef9592022c71d/comments","author":null,"committer":null,"parents":[{"sha":"72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2","url":"https://api.github.com/repos/apache/openjpa/commits/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2","html_url":"https://github.com/apache/openjpa/commit/72f2cb8516ee11accbb4cda1ed7c6d8479b79ee2"}],"stats":{"total":306,"additions":286,"deletions":20},"files":[{"sha":"9426a463fda7fb43b22f897142dee01b271ab494","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/8c1e1a7ea57a3ebb21757762696ef9592022c71d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","raw_url":"https://github.com/apache/openjpa/raw/8c1e1a7ea57a3ebb21757762696ef9592022c71d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java?ref=8c1e1a7ea57a3ebb21757762696ef9592022c71d","patch":"@@ -28,6 +28,7 @@\n import java.util.List;\n import java.util.Map;\n \n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.meta.strats.BlobValueHandler;\n import org.apache.openjpa.jdbc.meta.strats.ByteArrayValueHandler;\n@@ -964,8 +965,18 @@ private boolean useInverseKeyMapping(FieldMapping field) {\n         // an association table\n         FieldMappingInfo info = field.getMappingInfo();\n         ValueMapping elem = field.getElementMapping();\n-        return info.getTableName() == null && info.getColumns().isEmpty()\n+        boolean useInverseKeyMapping = info.getTableName() == null && info.getColumns().isEmpty()\n             && !elem.getValueInfo().getColumns().isEmpty();\n+        \n+        OpenJPAConfiguration conf = field.getRepository().getConfiguration();\n+        boolean isNonDefaultMappingAllowed = field.getRepository().\n+            getMetaDataFactory().getDefaults().isNonDefaultMappingAllowed(conf);\n+        if (isNonDefaultMappingAllowed && field.getValueInfo().getColumns().size() > 0) {\n+            // uni-/M-1/joinColumn ==> useInverseKeyMapping (foreign key strategy)\n+            field.getElementMapping().getValueInfo().setColumns(field.getValueInfo().getColumns());\n+            return true;\n+        }\n+        return useInverseKeyMapping;\n     }\n \n     /**"},{"sha":"89c06b261505c4d5ba06233aff815c5843c322e5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/8c1e1a7ea57a3ebb21757762696ef9592022c71d/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","raw_url":"https://github.com/apache/openjpa/raw/8c1e1a7ea57a3ebb21757762696ef9592022c71d/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java?ref=8c1e1a7ea57a3ebb21757762696ef9592022c71d","patch":"@@ -64,6 +64,7 @@\n     private boolean _superclassDiscriminatorStrategyByDefault = true;\n     private boolean _isAbstractMappingUniDirectional = false;\n     private boolean _isJoinColumnAllowedForToManyRelation = false;\n+    private boolean _isNonDefaultMappingAllowed = false;\n     \n     /**\n      * Whether to require exact identity value types when creating object\n@@ -476,4 +477,27 @@ public void setJoinColumnAllowedForToManyRelation(boolean isJoinColumnAllowedFor\n     public boolean isJoinColumnAllowedForToManyRelation() {\n         return _isJoinColumnAllowedForToManyRelation;\n     }\n+\n+    /**\n+     * Whether OpenJPA allows non-default entity relationship mapping. \n+     * Prior to OpenJPA 2.0, the non-default entity relationship mapping\n+     * is not allowed. JPA 2.0 spec relaxes this restriction. The\n+     * default value is false.\n+     * @since 2.0.0\n+     */\n+    public void setNonDefaultMappingAllowed(boolean isNonDefaultMappingAllowed) {\n+        _isNonDefaultMappingAllowed = isNonDefaultMappingAllowed;\n+    }\n+\n+    /**\n+     * Whether OpenJPA allows non-default entity relationship mapping. \n+     * Prior to OpenJPA 2.0, the non-default entity relationship mapping\n+     * is not allowed. JPA 2.0 spec relaxes this restriction. The\n+     * default value is false.\n+     * @since 2.0.0\n+     */\n+    public boolean isNonDefaultMappingAllowed() {\n+        return _isNonDefaultMappingAllowed;\n+    }\n+\n }"},{"sha":"0542e59115c6d30c0bdb4b63c8415859188bb6b4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/8c1e1a7ea57a3ebb21757762696ef9592022c71d/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/8c1e1a7ea57a3ebb21757762696ef9592022c71d/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java?ref=8c1e1a7ea57a3ebb21757762696ef9592022c71d","patch":"@@ -121,4 +121,10 @@ public Member getMemberByProperty(ClassMetaData meta, String attribute,\n      */\n     public boolean isJoinColumnAllowedForToManyRelation(OpenJPAConfiguration conf);\n \n+    /**\n+     * Whether non-default mapping is allowed.\n+     * @since 2.0.0\n+     */\n+    public boolean isNonDefaultMappingAllowed(OpenJPAConfiguration conf);\n+    \n }"},{"sha":"72aa8f5541739f75f38af68169ec725c7c47d5c9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/8c1e1a7ea57a3ebb21757762696ef9592022c71d/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/8c1e1a7ea57a3ebb21757762696ef9592022c71d/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java?ref=8c1e1a7ea57a3ebb21757762696ef9592022c71d","patch":"@@ -167,4 +167,7 @@ public boolean isJoinColumnAllowedForToManyRelation(OpenJPAConfiguration conf) {\n         return false;\n     }\n     \n+    public boolean isNonDefaultMappingAllowed(OpenJPAConfiguration conf) {\n+        return false;\n+    }\n }"},{"sha":"5436c93cc6c025ca041c576efc4c14f03318a26a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8c1e1a7ea57a3ebb21757762696ef9592022c71d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC.java","raw_url":"https://github.com/apache/openjpa/raw/8c1e1a7ea57a3ebb21757762696ef9592022c71d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/EntityC.java?ref=8c1e1a7ea57a3ebb21757762696ef9592022c71d","patch":"@@ -21,8 +21,6 @@\n import javax.persistence.Entity;\n import javax.persistence.GeneratedValue;\n import javax.persistence.Id;\n-import javax.persistence.JoinColumn;\n-import javax.persistence.JoinTable;\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n "},{"sha":"446dacf92353d9c462347a808b305095e398510a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","status":"modified","additions":99,"deletions":11,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/8c1e1a7ea57a3ebb21757762696ef9592022c71d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","raw_url":"https://github.com/apache/openjpa/raw/8c1e1a7ea57a3ebb21757762696ef9592022c71d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/TestSpecCompatibilityOptions.java?ref=8c1e1a7ea57a3ebb21757762696ef9592022c71d","patch":"@@ -18,17 +18,30 @@\n  */\n package org.apache.openjpa.persistence.compat;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n \n import org.apache.openjpa.conf.Compatibility;\n import org.apache.openjpa.conf.Specification;\n+import org.apache.openjpa.lib.jdbc.AbstractJDBCListener;\n+import org.apache.openjpa.lib.jdbc.JDBCEvent;\n+import org.apache.openjpa.lib.jdbc.JDBCListener;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.jdbc.SQLSniffer;\n import org.apache.openjpa.persistence.test.AbstractCachedEMFTestCase;\n \n public class TestSpecCompatibilityOptions \n extends AbstractCachedEMFTestCase {\n     \n+    protected List<String> sql = new ArrayList<String>();\n+    protected int sqlCount;\n+\n     /*\n      * Verifies compatibility options and spec level are appropriate\n      * for a version 2 persistence.xml\n@@ -84,11 +97,11 @@ public void testJPA2CompatibilityOptions() {\n      * a mapped superclass. \n      */\n     public void testMappedSuperClass() {\n-        OpenJPAEntityManagerFactorySPI emf =\n-            (OpenJPAEntityManagerFactorySPI)OpenJPAPersistence.\n-                createEntityManagerFactory(\"persistence_2_0\",\n-                    \"org/apache/openjpa/persistence/compat/\" +\n-                    \"persistence_2_0.xml\");\n+        List<Class<?>> types = new ArrayList<Class<?>>();\n+        types.add(EntityA.class);\n+        types.add(EntityB.class);\n+        types.add(MappedSuper.class);\n+        OpenJPAEntityManagerFactorySPI emf = createEMF2_0(types);\n         EntityManager em = null;\n         try {\n             em = emf.createEntityManager();\n@@ -118,20 +131,95 @@ public void testMappedSuperClass() {\n      * Per JPA 2.0, JoinColumn annotation is allowed on OneToMany relations.\n      */\n     public void testJoinColumnOnToManyRelation() {\n-        OpenJPAEntityManagerFactorySPI emf =\n-            (OpenJPAEntityManagerFactorySPI)OpenJPAPersistence.\n-                createEntityManagerFactory(\"persistence_2_0\",\n-                    \"org/apache/openjpa/persistence/compat/\" +\n-                    \"persistence_2_0.xml\");\n+        List<Class<?>> types = new ArrayList<Class<?>>();\n+        types.add(EntityC.class);\n+        types.add(Bi_1ToM_FK.class);\n+        types.add(Uni_1ToM_FK.class);\n+        types.add(Uni_1ToM_JT.class);\n+\n+        OpenJPAEntityManagerFactorySPI emf = createEMF2_0(types);\n+        EntityManager em = emf.createEntityManager();\n+\n         try {\n-            EntityManager em = emf.createEntityManager();\n             // trigger table creation\n             em.getTransaction().begin();\n             em.getTransaction().commit();\n             em.close();\n             emf.close();\n+            if (!SQLSniffer.matches(sql, \"CREATE TABLE JnCol_C\", \"Bi1MFK_ColA\"))\n+                fail(\"JoinColumn annotation fails to be with OneToMany relation\");\n         } catch (Exception e) {\n             fail(\"JoinColumn annotation fails to be with OneToMany relation\");\n         }\n     }\n+\n+    /*\n+     * Per JPA 2.0, non-default mapping of uni-directional OneToMany using\n+     * foreign key strategy is allowed.\n+     */\n+    public void testNonDefaultUniOneToManyRelationUsingForeignKey() {\n+        List<Class<?>> types = new ArrayList<Class<?>>();\n+        types.add(EntityC.class);\n+        types.add(Bi_1ToM_FK.class);\n+        types.add(Uni_1ToM_FK.class);\n+        types.add(Uni_1ToM_JT.class);\n+        OpenJPAEntityManagerFactorySPI emf = createEMF2_0(types);\n+        EntityManager em = emf.createEntityManager();\n+        \n+        try {\n+            // trigger table creation\n+            Uni_1ToM_FK uni1mfk = new Uni_1ToM_FK();\n+            uni1mfk.setName(\"test\");\n+            EntityC c = new EntityC();\n+            c.setName(\"c\");\n+            List cs = new ArrayList();\n+            cs.add(c);\n+            uni1mfk.setEntityAs(cs);\n+            em.persist(uni1mfk);\n+            em.persist(c);\n+            em.getTransaction().begin();\n+            em.getTransaction().commit();\n+            em.close();\n+            emf.close();\n+            if (!SQLSniffer.matches(sql, \"CREATE TABLE JnCol_C\", \"Uni1MFK_ColA\"))\n+                fail(\"JoinColumn annotation fails to be with OneToMany relation\");\n+        } catch (Exception e) {\n+            fail(\"Non-default uni-directional OneToMany Using foreign key fails\");\n+        }\n+    }\n+\n+    private OpenJPAEntityManagerFactorySPI createEMF2_0(List<Class<?>> types) {\n+        Map<Object,Object> map = new HashMap<Object,Object>();\n+        map.put(\"openjpa.jdbc.JDBCListeners\", \n+                new JDBCListener[] { \n+                    this.new Listener() \n+                });\n+        map.put(\"openjpa.jdbc.SynchronizeMappings\", \n+            \"buildSchema(ForeignKeys=true,SchemaAction='drop,add')\");\n+\n+        StringBuffer buf = new StringBuffer();\n+        for (Class<?> c : types) {\n+            if (buf.length() > 0) {\n+                buf.append(\";\");\n+            }\n+            buf.append(c.getName());\n+        }\n+        String oldValue =\n+            map.containsKey(\"openjpa.MetaDataFactory\") ? \",\" + map.get(\"openjpa.MetaDataFactory\").toString() : \"\";\n+        map.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" + buf.toString() + oldValue + \")\");\n+        return (OpenJPAEntityManagerFactorySPI)OpenJPAPersistence.\n+                createEntityManagerFactory(\"persistence_2_0\",\n+                    \"org/apache/openjpa/persistence/compat/\" +\n+                    \"persistence_2_0.xml\", map);        \n+    }\n+    \n+    public class Listener extends AbstractJDBCListener {\n+        @Override\n+        public void beforeExecuteStatement(JDBCEvent event) {\n+            if (event.getSQL() != null && sql != null) {\n+                sql.add(event.getSQL());\n+                sqlCount++;\n+            }\n+        }\n+    }\n }"},{"sha":"d5b12bc1852943b6ea59e3e10926b4c3d149e408","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1ToM_FK.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/8c1e1a7ea57a3ebb21757762696ef9592022c71d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1ToM_FK.java","raw_url":"https://github.com/apache/openjpa/raw/8c1e1a7ea57a3ebb21757762696ef9592022c71d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1ToM_FK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1ToM_FK.java?ref=8c1e1a7ea57a3ebb21757762696ef9592022c71d","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.compat;\n+\n+import java.util.List;\n+\n+import javax.persistence.*;\n+\n+//non-default mapping\n+//Sec 11.1.36, Example 3: \n+//    Unidirectional One-to-Many association using a foreign key mapping\n+//    In Customer class:\n+//    @OneToMany(orphanRemoval=true)\n+//    @JoinColumn(name=\"CUST_ID\") // join column is in table for Order\n+//    public Set<Order> getOrders() {return orders;}\n+\n+@Entity\n+public class Uni_1ToM_FK {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @OneToMany\n+    @JoinColumn(name=\"Uni1MFK_ColA\")\n+    private List<EntityC> entityAs = null;\n+    \n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public List<EntityC> getEntityAs() { \n+        return entityAs; \n+    }\n+\n+    public void setEntityAs(List<EntityC> entityAs) { \n+        this.entityAs = entityAs; \n+    }\n+}"},{"sha":"abe6935049cc8453e5a014d9cece324742bf4bf1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1ToM_JT.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/8c1e1a7ea57a3ebb21757762696ef9592022c71d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1ToM_JT.java","raw_url":"https://github.com/apache/openjpa/raw/8c1e1a7ea57a3ebb21757762696ef9592022c71d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1ToM_JT.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/compat/Uni_1ToM_JT.java?ref=8c1e1a7ea57a3ebb21757762696ef9592022c71d","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.compat;\n+\n+import java.util.List;\n+\n+import javax.persistence.*;\n+\n+\n+@Entity\n+public class Uni_1ToM_JT {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @OneToMany\n+    @JoinTable(\n+            name=\"Uni_1TOM_JT_C\",\n+            joinColumns=\n+            @JoinColumn(name=\"Uni1MJT_ID\", referencedColumnName=\"ID\"),\n+            inverseJoinColumns=\n+            @JoinColumn(name=\"C_ID\", referencedColumnName=\"ID\")\n+            )    \n+    private List<EntityC> entityAs = null;\n+    \n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public List<EntityC> getEntityAs() { \n+        return entityAs; \n+    }\n+\n+    public void setEntityAs(List<EntityC> entityAs) { \n+        this.entityAs = entityAs; \n+    }\n+}"},{"sha":"a1d82424e8c6df98ac4599f64b3e81a0dc323dbd","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/compat/persistence_2_0.xml","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/8c1e1a7ea57a3ebb21757762696ef9592022c71d/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/compat/persistence_2_0.xml","raw_url":"https://github.com/apache/openjpa/raw/8c1e1a7ea57a3ebb21757762696ef9592022c71d/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/compat/persistence_2_0.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/compat/persistence_2_0.xml?ref=8c1e1a7ea57a3ebb21757762696ef9592022c71d","patch":"@@ -24,11 +24,5 @@\n         http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\"\n     version=\"2.0\" >\n     <persistence-unit name=\"persistence_2_0\" transaction-type=\"RESOURCE_LOCAL\">\n-\t<class>org.apache.openjpa.persistence.compat.EntityA</class>\n-\t<class>org.apache.openjpa.persistence.compat.EntityB</class>\n-\t<class>org.apache.openjpa.persistence.compat.EntityC</class>\n-\t<class>org.apache.openjpa.persistence.compat.MappedSuper</class>\n-\t<class>org.apache.openjpa.persistence.compat.Bi_1ToM_FK</class>\n-    \n     </persistence-unit>\n </persistence>\n\\ No newline at end of file"},{"sha":"51e832439af72e91b6d19afe4a542eafaf2a3543","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/8c1e1a7ea57a3ebb21757762696ef9592022c71d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/8c1e1a7ea57a3ebb21757762696ef9592022c71d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java?ref=8c1e1a7ea57a3ebb21757762696ef9592022c71d","patch":"@@ -133,6 +133,7 @@\n     protected SetterFilter setterFilter = new SetterFilter();\n     private Boolean _isAbstractMappingUniDirectional = null;\n     private Boolean _isJoinColumnAllowedForToManyRelation = null;\n+    private Boolean _isNonDefaultMappingAllowed = null;\n     \n     public PersistenceMetaDataDefaults() {\n         setCallbackMode(CALLBACK_RETHROW | CALLBACK_ROLLBACK |\n@@ -884,4 +885,15 @@ public void setJoinColumnAllowedForToManyRelation(OpenJPAConfiguration conf) {\n         _isJoinColumnAllowedForToManyRelation = conf.getCompatibilityInstance().\n             isJoinColumnAllowedForToManyRelation();\n     }\n+\n+    public boolean isNonDefaultMappingAllowed(OpenJPAConfiguration conf) {\n+        if (_isNonDefaultMappingAllowed == null)\n+            setNonDefaultMappingAllowed(conf);\n+        return _isNonDefaultMappingAllowed;\n+    }\n+\n+    public void setNonDefaultMappingAllowed(OpenJPAConfiguration conf) {\n+        _isNonDefaultMappingAllowed = conf.getCompatibilityInstance().\n+            isNonDefaultMappingAllowed();\n+    }\n }"},{"sha":"1e7550031daa1a0f1f624f6d16f4ec574165e796","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/8c1e1a7ea57a3ebb21757762696ef9592022c71d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/8c1e1a7ea57a3ebb21757762696ef9592022c71d/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java?ref=8c1e1a7ea57a3ebb21757762696ef9592022c71d","patch":"@@ -187,6 +187,7 @@ public boolean afterSpecificationSet(Configuration c) {\n         } else {\n             compatibility.setAbstractMappingUniDirectional(true);\n             compatibility.setJoinColumnAllowedForToManyRelation(true);\n+            compatibility.setNonDefaultMappingAllowed(true);\n         }\n         return true;\n     }"}]}

