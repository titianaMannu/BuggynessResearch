{"sha":"8c28c6bcbd2a4df40197db2a3e49fad68771c450","node_id":"MDY6Q29tbWl0MjA2MzY0OjhjMjhjNmJjYmQyYTRkZjQwMTk3ZGIyYTNlNDlmYWQ2ODc3MWM0NTA=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T01:20:14Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-21T01:20:14Z"},"message":"Improved debugging to reduce verbosity when not in TRACE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567896 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"82a1216b0802b823ca37077a9014efe5176ce462","url":"https://api.github.com/repos/apache/openjpa/git/trees/82a1216b0802b823ca37077a9014efe5176ce462"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8c28c6bcbd2a4df40197db2a3e49fad68771c450","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8c28c6bcbd2a4df40197db2a3e49fad68771c450","html_url":"https://github.com/apache/openjpa/commit/8c28c6bcbd2a4df40197db2a3e49fad68771c450","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8c28c6bcbd2a4df40197db2a3e49fad68771c450/comments","author":null,"committer":null,"parents":[{"sha":"e26e15496eda708f4e519328c834a4d08eccb25f","url":"https://api.github.com/repos/apache/openjpa/commits/e26e15496eda708f4e519328c834a4d08eccb25f","html_url":"https://github.com/apache/openjpa/commit/e26e15496eda708f4e519328c834a4d08eccb25f"}],"stats":{"total":22,"additions":17,"deletions":5},"files":[{"sha":"e0b766ce9db8f7220daee253dd3690857613c71b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","status":"modified","additions":13,"deletions":5,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/8c28c6bcbd2a4df40197db2a3e49fad68771c450/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/8c28c6bcbd2a4df40197db2a3e49fad68771c450/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java?ref=8c28c6bcbd2a4df40197db2a3e49fad68771c450","patch":"@@ -28,14 +28,15 @@\n import javax.persistence.spi.PersistenceProvider;\n import javax.persistence.spi.PersistenceUnitInfo;\n \n+import org.apache.openjpa.conf.BrokerValue;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n-import org.apache.openjpa.conf.BrokerValue;\n import org.apache.openjpa.enhance.PCClassFileTransformer;\n import org.apache.openjpa.kernel.Bootstrap;\n import org.apache.openjpa.kernel.BrokerFactory;\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.MetaDataModes;\n import org.apache.openjpa.meta.MetaDataRepository;\n@@ -117,11 +118,18 @@ public EntityManagerFactory createContainerEntityManagerFactory(\n \n             BrokerFactory factory = Bootstrap.newBrokerFactory(cp, \n                 pui.getClassLoader());\n-            if (transformerException != null)\n-                factory.getConfiguration().getLog(\n-                    OpenJPAConfiguration.LOG_RUNTIME).warn(\n-                        _loc.get(\"transformer-registration-error\", pui),\n+            if (transformerException != null) {\n+                Log log = factory.getConfiguration().getLog(\n+                    OpenJPAConfiguration.LOG_RUNTIME);\n+                if (log.isTraceEnabled()) {\n+                    log.warn(\n+                        _loc.get(\"transformer-registration-error-ex\", pui),\n                         transformerException);\n+                } else {\n+                    log.warn(\n+                        _loc.get(\"transformer-registration-error\", pui));\n+                }\n+            }\n             return JPAFacadeHelper.toEntityManagerFactory(factory);\n         } catch (Exception e) {\n             throw PersistenceExceptions.toPersistenceException(e);"},{"sha":"c276ef84edf30526a05ba4e7f6b7e9536cdc8eea","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/8c28c6bcbd2a4df40197db2a3e49fad68771c450/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/8c28c6bcbd2a4df40197db2a3e49fad68771c450/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties?ref=8c28c6bcbd2a4df40197db2a3e49fad68771c450","patch":"@@ -126,6 +126,10 @@ no-setter-for-getter: No setter was found for method {0} in type {1} while \\\n     intended for this to be persistent, please add a corresponding setter, \\\n     or switch to field access for this type hierarchy.\n transformer-registration-error: An error occurred while registering a \\\n+    ClassTransformer with {0}. The error has been consumed. To see it, set \\\n+    your openjpa.Runtime log level to TRACE. Load-time class transformation \\\n+    will not be available.\n+transformer-registration-error-ex: An error occurred while registering a \\\n     ClassTransformer with {0}. The error is logged along with this warning. \\\n     Load-time class transformation will not be available.\n "}]}

