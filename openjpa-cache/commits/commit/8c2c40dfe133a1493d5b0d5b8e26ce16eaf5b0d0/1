{"sha":"8c2c40dfe133a1493d5b0d5b8e26ce16eaf5b0d0","node_id":"MDY6Q29tbWl0MjA2MzY0OjhjMmM0MGRmZTEzM2ExNDkzZDViMGQ1YjhlMjZjZTE2ZWFmNWIwZDA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2006-08-04T21:14:48Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2006-08-04T21:14:48Z"},"message":"Added provisions for auxiliary enhancers to omit specific methods to be enhanced\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@428886 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"72c43679bd4940a3b5b5efd0a05cd19d035b3c1d","url":"https://api.github.com/repos/apache/openjpa/git/trees/72c43679bd4940a3b5b5efd0a05cd19d035b3c1d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8c2c40dfe133a1493d5b0d5b8e26ce16eaf5b0d0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8c2c40dfe133a1493d5b0d5b8e26ce16eaf5b0d0","html_url":"https://github.com/apache/openjpa/commit/8c2c40dfe133a1493d5b0d5b8e26ce16eaf5b0d0","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8c2c40dfe133a1493d5b0d5b8e26ce16eaf5b0d0/comments","author":null,"committer":null,"parents":[{"sha":"f70f99e638dad59987486faa23597cfd077c7a10","url":"https://api.github.com/repos/apache/openjpa/commits/f70f99e638dad59987486faa23597cfd077c7a10","html_url":"https://github.com/apache/openjpa/commit/f70f99e638dad59987486faa23597cfd077c7a10"}],"stats":{"total":59,"additions":42,"deletions":17},"files":[{"sha":"eee7415d5335b4f4ae59518011e527ca69a792b6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":42,"deletions":17,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/8c2c40dfe133a1493d5b0d5b8e26ce16eaf5b0d0/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/8c2c40dfe133a1493d5b0d5b8e26ce16eaf5b0d0/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=8c2c40dfe133a1493d5b0d5b8e26ce16eaf5b0d0","patch":"@@ -536,14 +536,14 @@ private void replaceAndValidateFieldAccess() {\n         // look through all methods; this is done before any methods are added\n         // so we don't need to worry about excluding synthetic methods.\n         BCMethod[] methods = _pc.getDeclaredMethods();\n+        Set nonEnhancedMethods = getUnenhancedMethods();\n         Code code;\n         for (int i = 0; i < methods.length; i++) {\n             code = methods[i].getCode(false);\n \n-            // don't modify some of the InstanceCallbacks methods\n+            // don't modify the methods specified by the auxiliary enhancers\n             if (code != null\n-                && !(PRE + \"PostLoad\").equals(methods[i].getName())\n-                && !(PRE + \"PreClear\").equals(methods[i].getName())) {\n+            \t&& !nonEnhancedMethods.contains(methods[i].getName())) {\n                 replaceAndValidateFieldAccess(code, get, true, stat);\n                 replaceAndValidateFieldAccess(code, put, false, stat);\n             }\n@@ -2607,24 +2607,48 @@ private BCClass getObjectIdBytecode(Class cls) {\n         return bc;\n     }\n \n+    /**\n+     * Gets the auxiliary enhancers registered as {@link Services services}.\n+     * Multi-call safe -- the first call locates the auxiliary enhancers,\n+     * subsequent calls merely returns the existing set.\n+     * \n+     * @return array of auxiliary enhancers. empty array if none is registered.\n+     */\n+    public AuxiliaryEnhancer[] getAuxiliaryEnhancers() {\n+\t\tif (_auxEnhancers == null) {\n+\t\t    try {\n+\t\t\tClass[] classes = Services\n+\t\t\t    .getImplementorClasses(AuxiliaryEnhancer.class);\n+\t\t\t_auxEnhancers = new AuxiliaryEnhancer[classes.length];\n+\t\t\tfor (int i = 0; i < _auxEnhancers.length; i++)\n+\t\t\t    _auxEnhancers[i] = (AuxiliaryEnhancer) classes[i]\n+\t\t\t\t.newInstance();\n+\t\t    } catch (Throwable t) {\n+\t\t\t    throw new GeneralException(t);\n+\t\t    }\n+\t\t}\n+    \treturn _auxEnhancers;\t\n+    }\n+    \n     /**\n      * Allow any registered auxiliary code generators to run.\n      */\n     private void runAuxiliaryEnhancers() {\n-\tif (_auxEnhancers == null) {\n-\t    try {\n-\t\tClass[] classes = Services\n-\t\t    .getImplementorClasses(AuxiliaryEnhancer.class);\n-\t\t_auxEnhancers = new AuxiliaryEnhancer[classes.length];\n-\t\tfor (int i = 0; i < _auxEnhancers.length; i++)\n-\t\t    _auxEnhancers[i] = (AuxiliaryEnhancer) classes[i]\n-\t\t\t.newInstance();\n-\t    } catch (Throwable t) {\n-\t\tthrow new GeneralException(t);\n-\t    }\n-\t}\n-\tfor (int i = 0; i < _auxEnhancers.length; i++)\n-\t    _auxEnhancers[i].run(_pc, _meta);\n+    \tAuxiliaryEnhancer[] auxEnhancers = getAuxiliaryEnhancers();\n+    \tfor (int i = 0; i < auxEnhancers.length; i++)\n+    \t\tauxEnhancers[i].run(_pc, _meta);\n+    }\n+    \n+    private Set getUnenhancedMethods() {\n+    \tSet result = new HashSet();\n+    \tAuxiliaryEnhancer[] auxEnhancers = getAuxiliaryEnhancers();\n+    \tfor (int i = 0; i < auxEnhancers.length; i++) {\n+    \t\tSet contrib = auxEnhancers[i].getUnenhancedMethods();\n+    \t\tif (contrib != null || !contrib.isEmpty()) {\n+    \t\t\tresult.addAll(contrib);\n+     \t\t}\n+     \t}\n+    \treturn result;\n     }\n \n     /**\n@@ -3485,5 +3509,6 @@ else if (status == ENHANCE_AWARE) {\n \tpublic static interface AuxiliaryEnhancer\n \t{\n \t\tpublic void run (BCClass bc, ClassMetaData meta);\n+\t\tpublic Set getUnenhancedMethods();\n \t}\n }"}]}

