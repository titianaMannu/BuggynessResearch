{"sha":"8c4cf9511edfc1a505ae639204b14f06a12ce739","node_id":"MDY6Q29tbWl0MjA2MzY0OjhjNGNmOTUxMWVkZmMxYTUwNWFlNjM5MjA0YjE0ZjA2YTEyY2U3Mzk=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-16T03:49:23Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-01-16T03:49:23Z"},"message":"OPENJPA-488, OPENJPA-489, OPENJPA-490, OPENJPA-491, OPENJPA-492\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@612345 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8a78b8938e2678a2878fddc0ea52301d32f78022","url":"https://api.github.com/repos/apache/openjpa/git/trees/8a78b8938e2678a2878fddc0ea52301d32f78022"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8c4cf9511edfc1a505ae639204b14f06a12ce739","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8c4cf9511edfc1a505ae639204b14f06a12ce739","html_url":"https://github.com/apache/openjpa/commit/8c4cf9511edfc1a505ae639204b14f06a12ce739","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8c4cf9511edfc1a505ae639204b14f06a12ce739/comments","author":null,"committer":null,"parents":[{"sha":"72f7d7ce4365d531bc1111fee278256bd994a21f","url":"https://api.github.com/repos/apache/openjpa/commits/72f7d7ce4365d531bc1111fee278256bd994a21f","html_url":"https://github.com/apache/openjpa/commit/72f7d7ce4365d531bc1111fee278256bd994a21f"}],"stats":{"total":648,"additions":537,"deletions":111},"files":[{"sha":"af138d57a1327bb52de4cfa23f0cad144551fa66","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","status":"modified","additions":35,"deletions":14,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/8c4cf9511edfc1a505ae639204b14f06a12ce739/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/8c4cf9511edfc1a505ae639204b14f06a12ce739/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java?ref=8c4cf9511edfc1a505ae639204b14f06a12ce739","patch":"@@ -26,6 +26,8 @@\n public abstract class AbstractDB2Dictionary\n     extends DBDictionary {\n \n+    public int varcharCastLength = 1000;\n+\n     public AbstractDB2Dictionary() {\n         numericTypeName = \"DOUBLE\";\n         bitTypeName = \"SMALLINT\";\n@@ -36,11 +38,13 @@ public AbstractDB2Dictionary() {\n \n         // DB2-based databases have restrictions on having uncast parameters\n         // in string functions\n-        toUpperCaseFunction = \"UPPER(CAST({0} AS VARCHAR(1000)))\";\n-        toLowerCaseFunction = \"LOWER(CAST({0} AS VARCHAR(1000)))\";\n+        toUpperCaseFunction = \"UPPER(CAST({0} AS VARCHAR(\" + varcharCastLength\n+            + \")))\";\n+        toLowerCaseFunction = \"LOWER(CAST({0} AS VARCHAR(\" + varcharCastLength\n+            + \")))\";\n         stringLengthFunction = \"LENGTH({0})\";\n-        concatenateFunction = \"(CAST({0} AS VARCHAR(1000)))||\"\n-            + \"(CAST({1} AS VARCHAR(1000)))\";\n+        concatenateFunction = \"(CAST({0} AS VARCHAR(\" + varcharCastLength\n+            + \")))||(CAST({1} AS VARCHAR(1000)))\";\n \n         trimLeadingFunction = \"LTRIM({0})\";\n         trimTrailingFunction = \"RTRIM({0})\";\n@@ -74,9 +78,11 @@ public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,\n         FilterValue start) {\n         buf.append(\"(LOCATE(CAST((\");\n         find.appendTo(buf);\n-        buf.append(\") AS VARCHAR(1000)), CAST((\");\n+        buf.append(\") AS VARCHAR(\").append(Integer.toString(varcharCastLength))\n+            .append(\")), CAST((\");\n         str.appendTo(buf);\n-        buf.append(\") AS VARCHAR(1000))\");\n+        buf.append(\") AS VARCHAR(\").append(Integer.toString(varcharCastLength))\n+            .append(\"))\");\n         if (start != null) {\n             buf.append(\", CAST((\");\n             start.appendTo(buf);\n@@ -89,15 +95,30 @@ public void substring(SQLBuffer buf, FilterValue str, FilterValue start,\n         FilterValue end) {\n         buf.append(\"SUBSTR(CAST((\");\n         str.appendTo(buf);\n-        buf.append(\") AS VARCHAR(1000)), CAST((\");\n-        start.appendTo(buf);\n-        buf.append(\") AS INTEGER) + 1\");\n-        if (end != null) {\n-            buf.append(\", CAST((\");\n-            end.appendTo(buf);\n-            buf.append(\") AS INTEGER) - CAST((\");\n+        buf.append(\") AS VARCHAR(\").append(Integer.toString(varcharCastLength))\n+            .append(\")), \");\n+        if (start.getValue() instanceof Number) {\n+            long startLong = toLong(start);\n+            buf.append(Long.toString(startLong + 1));\n+        } else {\n+            buf.append(\"CAST((\");\n             start.appendTo(buf);\n-            buf.append(\") AS INTEGER)\");\n+            buf.append(\") AS INTEGER) + 1\");\n+        }\n+        if (end != null) {\n+            buf.append(\", \");\n+            if (start.getValue() instanceof Number\n+                && end.getValue() instanceof Number) {\n+                long startLong = toLong(start);\n+                long endLong = toLong(end);\n+                buf.append(Long.toString(endLong - startLong));\n+            } else {\n+                buf.append(\"CAST((\");\n+                end.appendTo(buf);\n+                buf.append(\") AS INTEGER) - CAST((\");\n+                start.appendTo(buf);\n+                buf.append(\") AS INTEGER)\");\n+            }\n         }\n         buf.append(\")\");\n     }"},{"sha":"fffef75b9f4685038a0cb1f5ef9d1324ab2ffa63","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractSQLServerDictionary.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/8c4cf9511edfc1a505ae639204b14f06a12ce739/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractSQLServerDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/8c4cf9511edfc1a505ae639204b14f06a12ce739/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractSQLServerDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractSQLServerDictionary.java?ref=8c4cf9511edfc1a505ae639204b14f06a12ce739","patch":"@@ -117,23 +117,23 @@ protected void appendSelectRange(SQLBuffer buf, long start, long end,\n \n     public void substring(SQLBuffer buf, FilterValue str, FilterValue start,\n         FilterValue end) {\n-        buf.append(\"SUBSTRING(\");\n-        str.appendTo(buf);\n-        buf.append(\", \");\n-        start.appendTo(buf);\n-        buf.append(\" + 1, \");\n-        if (end != null) {\n-            buf.append(\"(\");\n-            end.appendTo(buf);\n-            buf.append(\")\");\n-        } else {\n+        if (end != null)\n+            super.substring(buf, str, start, end);\n+        else {\n+            // ### it would be good to change this logic as in DBDictionary to\n+            // ### simplify the generated SQL\n+            buf.append(\"SUBSTRING(\");\n+            str.appendTo(buf);\n+            buf.append(\", \");\n+            start.appendTo(buf);\n+            buf.append(\" + 1, \");\n             buf.append(\"LEN(\");\n             str.appendTo(buf);\n             buf.append(\")\");\n+            buf.append(\" - (\");\n+            start.appendTo(buf);\n+            buf.append(\"))\");\n         }\n-        buf.append(\" - (\");\n-        start.appendTo(buf);\n-        buf.append(\"))\");\n     }\n \n     public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,"},{"sha":"735c9d499485dce0f6bc6510a893fd6af3ae07f5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AccessDictionary.java","status":"modified","additions":2,"deletions":17,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/8c4cf9511edfc1a505ae639204b14f06a12ce739/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AccessDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/8c4cf9511edfc1a505ae639204b14f06a12ce739/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AccessDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AccessDictionary.java?ref=8c4cf9511edfc1a505ae639204b14f06a12ce739","patch":"@@ -63,6 +63,8 @@ public AccessDictionary() {\n         supportsForeignKeys = false;\n         supportsDeferredConstraints = false;\n         maxIndexesPerTable = 32;\n+\n+        substringFunctionName = \"MID\";\n     }\n \n     public void setLong(PreparedStatement stmnt, int idx, long val, Column col)\n@@ -75,22 +77,5 @@ public void setLong(PreparedStatement stmnt, int idx, long val, Column col)\n         else\n             stmnt.setDouble(idx, val);\n     }\n-\n-    public void substring(SQLBuffer buf, FilterValue str, FilterValue start,\n-        FilterValue end) {\n-        buf.append(\"MID(\");\n-        str.appendTo(buf);\n-        buf.append(\", (\");\n-        start.appendTo(buf);\n-        buf.append(\" + 1)\");\n-        if (end != null) {\n-            buf.append(\", (\");\n-            end.appendTo(buf);\n-            buf.append(\" - \");\n-            start.appendTo(buf);\n-            buf.append(\")\");\n-        }\n-        buf.append(\")\");\n-    }\n }\n "},{"sha":"c42d7340d1f7a2d53a6d47198684b0a9b1260c3d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":27,"deletions":9,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/8c4cf9511edfc1a505ae639204b14f06a12ce739/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/8c4cf9511edfc1a505ae639204b14f06a12ce739/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=8c4cf9511edfc1a505ae639204b14f06a12ce739","patch":"@@ -86,6 +86,7 @@\n import org.apache.openjpa.jdbc.schema.Unique;\n import org.apache.openjpa.kernel.Filters;\n import org.apache.openjpa.kernel.exps.Path;\n+import org.apache.openjpa.kernel.exps.Literal;\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.jdbc.ConnectionDecorator;\n@@ -2494,21 +2495,38 @@ public void assertSupport(boolean feature, String property) {\n      */\n     public void substring(SQLBuffer buf, FilterValue str, FilterValue start,\n         FilterValue end) {\n-        buf.append(substringFunctionName).append(\"((\");\n+        buf.append(substringFunctionName).append(\"(\");\n         str.appendTo(buf);\n-        buf.append(\"), (\");\n-        start.appendTo(buf);\n-        buf.append(\" + 1)\");\n-        if (end != null) {\n-            buf.append(\", (\");\n-            end.appendTo(buf);\n-            buf.append(\" - (\");\n+        buf.append(\", \");\n+        if (start instanceof Number) {\n+            long startLong = toLong(start);\n+            buf.append(Long.toString(startLong + 1));\n+        } else {\n+            buf.append(\"(\");\n             start.appendTo(buf);\n-            buf.append(\"))\");\n+            buf.append(\" + 1)\");\n+        }\n+        if (end != null) {\n+            buf.append(\", \");\n+            if (start.getValue() instanceof Number\n+                && end.getValue() instanceof Number) {\n+                long startLong = toLong(start);\n+                long endLong = toLong(end);\n+                buf.append(Long.toString(endLong - startLong));\n+            } else {\n+                end.appendTo(buf);\n+                buf.append(\" - (\");\n+                start.appendTo(buf);\n+                buf.append(\")\");\n+            }\n         }\n         buf.append(\")\");\n     }\n \n+    long toLong(FilterValue litValue) {\n+        return ((Number) litValue.getValue()).longValue();\n+    }\n+\n     /**\n      * Invoke this database's indexOf function.\n      *"},{"sha":"fa62991c2bb0292c8fc0b83157db52c8f5c14e9a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java","status":"modified","additions":0,"deletions":17,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/8c4cf9511edfc1a505ae639204b14f06a12ce739/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/8c4cf9511edfc1a505ae639204b14f06a12ce739/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/H2Dictionary.java?ref=8c4cf9511edfc1a505ae639204b14f06a12ce739","patch":"@@ -193,23 +193,6 @@ protected void appendSelectRange(SQLBuffer buf, long start, long end,\n             buf.append(\" OFFSET \").appendValue(start);\n     }\n \n-    public void substring(SQLBuffer buf, FilterValue str, FilterValue start,\n-        FilterValue end) {\n-        buf.append(\"SUBSTR(\");\n-        str.appendTo(buf);\n-        buf.append(\", (\");\n-        start.appendTo(buf);\n-        buf.append(\" + 1)\");\n-        if (end != null) {\n-            buf.append(\", (\");\n-            end.appendTo(buf);\n-            buf.append(\" - \");\n-            start.appendTo(buf);\n-            buf.append(\")\");\n-        }\n-        buf.append(\")\");\n-    }\n-\n     public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,\n         FilterValue start) {\n         buf.append(\"(POSITION(\");"},{"sha":"d99a374b3af27852a936929cf1b43d4db1e8a073","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","status":"modified","additions":2,"deletions":17,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/8c4cf9511edfc1a505ae639204b14f06a12ce739/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/8c4cf9511edfc1a505ae639204b14f06a12ce739/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java?ref=8c4cf9511edfc1a505ae639204b14f06a12ce739","patch":"@@ -157,6 +157,8 @@ public OracleDictionary() {\n             \"LONG\", \"MAXEXTENTS\", \"MINUS\", \"MODE\", \"NOAUDIT\", \"NOCOMPRESS\",\n             \"NOWAIT\", \"OFFLINE\", \"ONLINE\", \"PCTFREE\", \"ROW\",\n         }));\n+\n+        substringFunctionName = \"SUBSTR\";\n     }\n \n     public void endConfiguration() {\n@@ -427,23 +429,6 @@ public String getSelectOperation(JDBCFetchConfiguration fetch) {\n         return select;\n     }\n \n-    public void substring(SQLBuffer buf, FilterValue str, FilterValue start,\n-        FilterValue end) {\n-        buf.append(\"SUBSTR(\");\n-        str.appendTo(buf);\n-        buf.append(\", (\");\n-        start.appendTo(buf);\n-        buf.append(\" + 1)\");\n-        if (end != null) {\n-            buf.append(\", (\");\n-            end.appendTo(buf);\n-            buf.append(\" - \");\n-            start.appendTo(buf);\n-            buf.append(\")\");\n-        }\n-        buf.append(\")\");\n-    }\n-\n     public void setString(PreparedStatement stmnt, int idx, String val,\n         Column col)\n         throws SQLException {"},{"sha":"58071387729de53b9a33912b8b29850b2864c6c9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionFactory.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/8c4cf9511edfc1a505ae639204b14f06a12ce739/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionFactory.java","raw_url":"https://github.com/apache/openjpa/raw/8c4cf9511edfc1a505ae639204b14f06a12ce739/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/ExpressionFactory.java?ref=8c4cf9511edfc1a505ae639204b14f06a12ce739","patch":"@@ -334,7 +334,8 @@ public Value newExtension(FilterListener listener, Value target,\n \n     /**\n      * Return a value representing the {@link String#substring} function on\n-     * the given target with the given args.\n+     * the given target with the given args. As with {@link String#substring},\n+     * the start index is zero-based, and the second argument is the end index.\n      */\n     public Value substring(Value str, Value args);\n "},{"sha":"84a17b38b5932ab2aa4faa562a98d171a46f292f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":31,"deletions":18,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/8c4cf9511edfc1a505ae639204b14f06a12ce739/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/8c4cf9511edfc1a505ae639204b14f06a12ce739/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=8c4cf9511edfc1a505ae639204b14f06a12ce739","patch":"@@ -977,21 +977,28 @@ else if (node.getChildCount() == 2\n                 // arg2 is the end index): we perform the translation by\n                 // adding one to the first argument, and then adding the\n                 // first argument to the second argument to get the endIndex\n-                //\n-                // ### we could get rid of some messy expressions by checking for\n-                // the common case where the arguments are specified as\n-                // a literal, in which case we could just do the calculations\n-                // in memory; otherwise we wind up with ugly looking SQL like:\n-                // SELECT ... FROM ... t1\n-                // (SUBSTRING(t1.ASTR, (? - ?) + 1, (? + (? - ?)) - ((? - ?))) = ?)\n-                // [params=(long) 2, (int) 1, (long) 2, (long) 2, (int) 1,\n-                // (long) 2, (int) 1, (String) oo\n-                return factory.substring(val1, factory.newArgumentList\n-                    (factory.subtract(val2, factory.newLiteral\n-                        (Numbers.valueOf(1), Literal.TYPE_NUMBER)),\n-                        (factory.add(val3,\n-                            (factory.subtract(val2, factory.newLiteral\n-                                (Numbers.valueOf(1), Literal.TYPE_NUMBER)))))));\n+                Value start;\n+                Value end;\n+                if (val2 instanceof Literal && val3 instanceof Literal) {\n+                    // optimize SQL for the common case of two literals\n+                    long jpqlStart = ((Number) ((Literal) val2).getValue())\n+                        .longValue();\n+                    long length = ((Number) ((Literal) val3).getValue())\n+                        .longValue();\n+                    start = factory.newLiteral(new Long(jpqlStart - 1),\n+                        Literal.TYPE_NUMBER);\n+                    long endIndex = length + (jpqlStart - 1);\n+                    end = factory.newLiteral(new Long(endIndex),\n+                        Literal.TYPE_NUMBER);\n+                } else {\n+                    start = factory.subtract(val2, factory.newLiteral\n+                        (Numbers.valueOf(1), Literal.TYPE_NUMBER));\n+                    end = factory.add(val3,\n+                        (factory.subtract(val2, factory.newLiteral\n+                            (Numbers.valueOf(1), Literal.TYPE_NUMBER))));\n+                }\n+                return factory.substring(val1, factory.newArgumentList(\n+                    start, end));\n \n             case JJTLOCATE:\n                 // as with SUBSTRING (above), the semantics for LOCATE differ\n@@ -1067,6 +1074,15 @@ else if (node.getChildCount() == 2\n             case JJTCURRENTTIMESTAMP:\n                 return factory.getCurrentTimestamp();\n \n+            case JJTSELECTEXTENSION:\n+                return eval(node.children[0]);\n+\n+            case JJTGROUPBYEXTENSION:\n+                return eval(node.children[0]);\n+\n+            case JJTORDERBYEXTENSION:\n+                return eval(node.children[0]);\n+\n             default:\n                 throw parseException(EX_FATAL, \"bad-tree\",\n                     new Object[]{ node }, null);\n@@ -1669,9 +1685,6 @@ private static JPQLNode parse(String jpql) {\n                 // parser may sometimes (unfortunately) throw\n                 throw new UserException(_loc.get(\"parse-error\",\n                     new Object[]{ e.toString(), jpql }));\n-            } catch (ParseException e) {\n-                throw new UserException(_loc.get(\"parse-error\",\n-                    new Object[]{ e.toString(), jpql }), e);\n             }\n         }\n "},{"sha":"78c9253ce7cf68a53ecdff73c5d3d40472925189","filename":"openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","status":"modified","additions":30,"deletions":3,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/8c4cf9511edfc1a505ae639204b14f06a12ce739/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","raw_url":"https://github.com/apache/openjpa/raw/8c4cf9511edfc1a505ae639204b14f06a12ce739/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt?ref=8c4cf9511edfc1a505ae639204b14f06a12ce739","patch":"@@ -64,6 +64,7 @@ import java.io.*;\n public class JPQL\n {\n \tString jpql;\n+\tboolean extensionsEnabled = true;\n \n \n \tpublic JPQL (String jpql)\n@@ -498,6 +499,13 @@ void select_expression() #SELECTEXPRESSION : { }\n \t\t| identification_variable()\n \t\t| (<OBJECT> \"(\" identification_variable() \")\")\n \t\t| constructor_expression()\n+\t\t| select_extension()\n+}\n+\n+\n+void select_extension() #SELECTEXTENSION(extensionsEnabled) : { }\n+{\n+    scalar_function()\n }\n \n \n@@ -506,12 +514,12 @@ void subselect_expressions() #SELECTEXPRESSIONS : { }\n \tsubselect_expression() (<COMMA> subselect_expression())*\n }\n \n+\n void subselect_expression() #SELECTEXPRESSION : { }\n {\n \tLOOKAHEAD(path()) path() \n \t\t| aggregate_select_expression()\n \t\t| LOOKAHEAD(1) identification_variable()\n-\n }\n \n \n@@ -615,7 +623,13 @@ void groupby_clause() #GROUPBY : { }\n \n void groupby_item() : { }\n {\n-\tLOOKAHEAD(path()) path() | identification_variable()\n+\tLOOKAHEAD(path()) path() | identification_variable() | groupby_extension()\n+}\n+\n+\n+void groupby_extension() #GROUPBYEXTENSION(extensionsEnabled) : { }\n+{\n+    scalar_function()\n }\n \n \n@@ -841,6 +855,12 @@ void datetime_comp() : { }\n \t)\n }\n \n+void scalar_function() : { }\n+{\n+    functions_returning_numerics()\n+        | functions_returning_datetime()\n+        | functions_returning_strings()\n+}\n \n void arithmetic_value() : { }\n {\n@@ -1073,7 +1093,14 @@ void orderby_clause() #ORDERBY : { }\n \n void orderby_item() #ORDERBYITEM : { }\n {\n-\tpath() [ <ASC> #ASCENDING | <DESC> #DESCENDING ]\n+\t(LOOKAHEAD(path()) path() | orderby_extension())\n+\t    [ <ASC> #ASCENDING | <DESC> #DESCENDING ]\n+}\n+\n+\n+void orderby_extension() #ORDERBYEXTENSION(extensionsEnabled) : { }\n+{\n+    aggregate_select_expression()\n }\n \n "},{"sha":"4d60de1ec1ec6ec0ecec8f976aa8b290762b80db","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestJDBCGrouping.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/8c4cf9511edfc1a505ae639204b14f06a12ce739/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestJDBCGrouping.java","raw_url":"https://github.com/apache/openjpa/raw/8c4cf9511edfc1a505ae639204b14f06a12ce739/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestJDBCGrouping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestJDBCGrouping.java?ref=8c4cf9511edfc1a505ae639204b14f06a12ce739","patch":"@@ -0,0 +1,30 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query;\r\n+\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.persistence.query.GroupingTestCase;\r\n+\r\n+public class TestJDBCGrouping extends GroupingTestCase {\r\n+\r\n+    protected void prepareQuery(Query q) {\r\n+        // nothing to do for JDBC case\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"a96d59ee523e8d1579f07415cd75e00bed74911a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/GroupingTestCase.java","status":"added","additions":277,"deletions":0,"changes":277,"blob_url":"https://github.com/apache/openjpa/blob/8c4cf9511edfc1a505ae639204b14f06a12ce739/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/GroupingTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/8c4cf9511edfc1a505ae639204b14f06a12ce739/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/GroupingTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/GroupingTestCase.java?ref=8c4cf9511edfc1a505ae639204b14f06a12ce739","patch":"@@ -0,0 +1,277 @@\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.*;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n+import org.apache.openjpa.persistence.ArgumentException;\r\n+\r\n+/**\r\n+ * <p>Tests grouping and having capabilities.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public abstract class GroupingTestCase\r\n+    extends SingleEMTestCase {\r\n+\r\n+    protected abstract void prepareQuery(Query q);\r\n+\r\n+    public void setUp() {\r\n+        super.setUp(AllFieldTypes.class, CLEAR_TABLES, \"openjpa.Log\", \"SQL=TRACE\");\r\n+\r\n+        AllFieldTypes pc1 = new AllFieldTypes();\r\n+        AllFieldTypes pc2 = new AllFieldTypes();\r\n+        AllFieldTypes pc3 = new AllFieldTypes();\r\n+        AllFieldTypes pc4 = new AllFieldTypes();\r\n+\r\n+        // pc1 and pc2, pc3 and pc4 grouped on intField, shortField\r\n+        pc1.setIntField(1);\r\n+        pc1.setShortField((short) -1);\r\n+        pc2.setIntField(1);\r\n+        pc2.setShortField((short) -1);\r\n+        pc3.setIntField(2);\r\n+        pc3.setShortField((short) -2);\r\n+        pc4.setIntField(2);\r\n+        pc4.setShortField((short) -2);\r\n+\r\n+        // pc1 and pc2 grouped on stringField\r\n+        pc1.setStringField(\"abc\");\r\n+        pc2.setStringField(\"acd\");\r\n+        pc3.setStringField(\"def\");\r\n+        pc4.setStringField(\"efg\");\r\n+\r\n+        // pc2 and pc3 grouped on byteField\r\n+        pc2.setByteField((byte) 1);\r\n+        pc3.setByteField((byte) 1);\r\n+        pc1.setByteField((byte) 0);\r\n+        pc4.setByteField((byte) 2);\r\n+\r\n+        // longField is unique id\r\n+        pc1.setLongField(1L);\r\n+        pc2.setLongField(2L);\r\n+        pc3.setLongField(3L);\r\n+        pc4.setLongField(4L);\r\n+\r\n+        // set up some relations\r\n+        pc1.setSelfOneOne(pc4);\r\n+        pc2.setSelfOneOne(pc3);\r\n+        pc3.setSelfOneOne(pc2);\r\n+        pc4.setSelfOneOne(pc1);\r\n+\r\n+        // if variable testing, set up some 1-Ms instead of the 1-1s above\r\n+        if (getName().startsWith(\"testVariable\")) {\r\n+            pc1.setSelfOneOne(pc1);\r\n+            pc2.setSelfOneOne(pc1);\r\n+            pc1.getSelfOneMany().add(pc1);\r\n+            pc1.getSelfOneMany().add(pc2);\r\n+\r\n+            pc3.setSelfOneOne(pc3);\r\n+            pc4.setSelfOneOne(pc3);\r\n+            pc3.getSelfOneMany().add(pc3);\r\n+            pc3.getSelfOneMany().add(pc4);\r\n+        }\r\n+\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.persist(pc1);\r\n+        em.persist(pc2);\r\n+        em.persist(pc3);\r\n+        em.persist(pc4);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testSimpleGroup() {\r\n+        Query q = em.createQuery(\"select o.intField from AllFieldTypes o \" +\r\n+            \"group by o.intField order by o.intField asc\");\r\n+        prepareQuery(q);\r\n+        List res = q.getResultList();\r\n+        assertEquals(2, res.size());\r\n+        Iterator itr = res.iterator();\r\n+        assertEquals(new Integer(1), itr.next());\r\n+        assertEquals(new Integer(2), itr.next());\r\n+        assertTrue(!itr.hasNext());\r\n+    }\r\n+\r\n+    public void testOrderByAggregate() {\r\n+        // this is an extension of JPQL\r\n+        Query q = em.createQuery(\"select sum(o.shortField) \" +\r\n+            \"from AllFieldTypes o\"\r\n+            + \" group by o.intField order by sum(o.shortField) asc\");\r\n+        prepareQuery(q);\r\n+        // this might fail in MySQL\r\n+        List res = q.getResultList();\r\n+        assertEquals(2, res.size());\r\n+        Iterator itr = res.iterator();\r\n+        assertEquals(new Long(-4), itr.next());\r\n+        assertEquals(new Long(-2), itr.next());\r\n+        assertTrue(!itr.hasNext());\r\n+    }\r\n+\r\n+    public void testCompoundGroupSame() {\r\n+        Query q = em.createQuery(\"select o.intField from AllFieldTypes o \" +\r\n+            \"group by o.intField, o.shortField order by o.shortField asc\");\r\n+        prepareQuery(q);\r\n+        List res = q.getResultList();\r\n+        assertEquals(2, res.size());\r\n+        Iterator itr = res.iterator();\r\n+        assertEquals(new Integer(2), itr.next());\r\n+        assertEquals(new Integer(1), itr.next());\r\n+        assertTrue(!itr.hasNext());\r\n+    }\r\n+\r\n+    public void testCompoundGroupDifferent() {\r\n+        Query q = em.createQuery(\"select o.intField from AllFieldTypes o \" +\r\n+            \"group by o.intField, o.byteField order by o.intField asc\");\r\n+        prepareQuery(q);\r\n+        List res = q.getResultList();\r\n+        assertEquals(4, res.size());\r\n+        Iterator itr = res.iterator();\r\n+        assertEquals(new Integer(1), itr.next());\r\n+        assertEquals(new Integer(1), itr.next());\r\n+        assertEquals(new Integer(2), itr.next());\r\n+        assertEquals(new Integer(2), itr.next());\r\n+        assertTrue(!itr.hasNext());\r\n+    }\r\n+\r\n+    public void testDifferentGroupLengths() {\r\n+        Query q = em.createQuery(\"select o.byteField from AllFieldTypes o\"\r\n+            + \" group by o.byteField order by o.byteField asc\");\r\n+        prepareQuery(q);\r\n+        List res = q.getResultList();\r\n+        assertEquals(3, res.size());\r\n+        Iterator itr = res.iterator();\r\n+        assertEquals((byte) 0, itr.next());\r\n+        assertEquals((byte) 1, itr.next());\r\n+        assertEquals((byte) 2, itr.next());\r\n+        assertTrue(!itr.hasNext());\r\n+    }\r\n+\r\n+    public void testGroupRelationField() {\r\n+        Query q = em.createQuery(\"select o.selfOneOne.intField \" +\r\n+            \"from AllFieldTypes o group by o.selfOneOne.intField \" +\r\n+            \"order by o.selfOneOne.intField asc\");\r\n+        prepareQuery(q);\r\n+        List res = q.getResultList();\r\n+        assertEquals(2, res.size());\r\n+        Iterator itr = res.iterator();\r\n+        assertEquals(new Integer(1), itr.next());\r\n+        assertEquals(new Integer(2), itr.next());\r\n+        assertTrue(!itr.hasNext());\r\n+    }\r\n+\r\n+    public void testSubstringInGroupBy() {\r\n+        // this is an extension of JPQL\r\n+        Query q = em.createQuery(\"select substring(o.stringField, 1, 1), \" +\r\n+            \"count(o) from AllFieldTypes o \" +\r\n+            \"group by substring(o.stringField, 1, 1)\");\r\n+        prepareQuery(q);\r\n+        List res = q.getResultList();\r\n+        assertEquals(3, res.size());\r\n+\r\n+        q = em.createQuery(\"select substring(o.stringField, 1, 2), count(o) \" +\r\n+            \"from AllFieldTypes o group by substring(o.stringField, 1, 2)\");\r\n+        prepareQuery(q);\r\n+        res = q.getResultList();\r\n+        assertEquals(4, res.size());\r\n+    }\r\n+\r\n+    public void testGroupedAggregate() {\r\n+        Query q = em.createQuery(\"select count(o) from AllFieldTypes o \" +\r\n+            \"group by o.byteField order by o.byteField asc\");\r\n+        prepareQuery(q);\r\n+        List res = q.getResultList();\r\n+        assertEquals(3, res.size());\r\n+        Iterator itr = res.iterator();\r\n+        assertEquals(new Long(1), itr.next());\r\n+        assertEquals(new Long(2), itr.next());\r\n+        assertEquals(new Long(1), itr.next());\r\n+        assertTrue(!itr.hasNext());\r\n+    }\r\n+\r\n+    public void testGroupedRelationAggregate() {\r\n+        Query q = em.createQuery(\"select count(o), max(o.selfOneOne.longField)\"\r\n+            + \" from AllFieldTypes o group by o.intField\"\r\n+            + \" order by o.intField asc\");\r\n+        List res = q.getResultList();\r\n+        assertEquals(2, res.size());\r\n+        Iterator itr = res.iterator();\r\n+        Object[] o = (Object[]) itr.next();\r\n+        assertEquals(new Long(2), o[0]);\r\n+        assertEquals(new Long(4), o[1]);\r\n+        o = (Object[]) itr.next();\r\n+        assertEquals(new Long(2), o[0]);\r\n+        assertEquals(new Long(2), o[1]);\r\n+        assertTrue(!itr.hasNext());\r\n+    }\r\n+\r\n+    public void testGroupedMixedProjection() {\r\n+        Query q = em.createQuery(\"select count(o), o.shortField \" +\r\n+            \"from AllFieldTypes o group by o.intField, o.shortField \" +\r\n+            \"order by o.intField asc\");\r\n+        prepareQuery(q);\r\n+        List res = q.getResultList();\r\n+        assertEquals(2, res.size());\r\n+        Iterator itr = res.iterator();\r\n+        Object[] o = (Object[]) itr.next();\r\n+        assertEquals(new Long(2), o[0]);\r\n+        assertEquals(new Short((short) -1), o[1]);\r\n+        o = (Object[]) itr.next();\r\n+        assertEquals(new Long(2), o[0]);\r\n+        assertEquals(new Short((short) -2), o[1]);\r\n+        assertTrue(!itr.hasNext());\r\n+    }\r\n+\r\n+    public void testSimpleHaving() {\r\n+        Query q = em.createQuery(\"select o.intField from AllFieldTypes o \" +\r\n+            \"group by o.intField having o.intField < 2\");\r\n+        prepareQuery(q);\r\n+        assertEquals(new Integer(1), q.getSingleResult());\r\n+    }\r\n+\r\n+    public void testAggregateHaving() {\r\n+        Query q = em.createQuery(\"select o.byteField from AllFieldTypes o \" +\r\n+            \"group by o.byteField having count(o) > 1\");\r\n+        prepareQuery(q);\r\n+        assertEquals(new Byte((byte) 1), q.getSingleResult());\r\n+    }\r\n+\r\n+    public void testMixedHaving() {\r\n+        Query q = em.createQuery(\"select o.byteField from AllFieldTypes o \" +\r\n+            \"group by o.byteField having count(o) > 1 or o.byteField = 0 \" +\r\n+            \"order by o.byteField asc\");\r\n+        prepareQuery(q);\r\n+        List res = q.getResultList();\r\n+        assertEquals(2, res.size());\r\n+        Iterator itr = res.iterator();\r\n+        assertEquals(new Byte((byte) 0), itr.next());\r\n+        assertEquals(new Byte((byte) 1), itr.next());\r\n+        assertTrue(!itr.hasNext());\r\n+    }\r\n+\r\n+    public void testVariableGroup() {\r\n+        Query q = em.createQuery(\"select max(other.longField) \" +\r\n+            \"from AllFieldTypes o, AllFieldTypes other \" +\r\n+            \"where other member of o.selfOneMany \" +\r\n+            \"group by other.intField order by other.intField asc\");\r\n+        prepareQuery(q);\r\n+        List res = q.getResultList();\r\n+        assertEquals(2, res.size());\r\n+        Iterator itr = res.iterator();\r\n+        assertEquals(new Long(2), itr.next());\r\n+        assertEquals(new Long(4), itr.next());\r\n+        assertTrue(!itr.hasNext());\r\n+    }\r\n+\r\n+    public void testVariableHaving() {\r\n+        Query q = em.createQuery(\"select max(o.longField), other.byteField \" +\r\n+            \"from AllFieldTypes o, AllFieldTypes other \" +\r\n+            \"where other member of o.selfOneMany \" +\r\n+            \"group by other.byteField having sum(other.intField) = 2\");\r\n+        prepareQuery(q);\r\n+        assertEquals(new Long(3), ((Object[])q.getSingleResult())[0]);\r\n+    }\r\n+}\r"},{"sha":"ee68659c01aa92dac81d195abb22096aaf5acfe7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryPagination.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8c4cf9511edfc1a505ae639204b14f06a12ce739/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryPagination.java","raw_url":"https://github.com/apache/openjpa/raw/8c4cf9511edfc1a505ae639204b14f06a12ce739/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryPagination.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryPagination.java?ref=8c4cf9511edfc1a505ae639204b14f06a12ce739","patch":"@@ -34,7 +34,7 @@\n     extends SQLListenerTestCase {\n \n     public void setUp() {\n-        setUp(SimpleEntity.class, CLEAR_TABLES, \"openjpa.Log\", \"SQL=TRACE\");\n+        setUp(SimpleEntity.class, CLEAR_TABLES);\n \n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();"},{"sha":"82d884045af0b4c37e260e86367466aee4f7a3e3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubstring.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/8c4cf9511edfc1a505ae639204b14f06a12ce739/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubstring.java","raw_url":"https://github.com/apache/openjpa/raw/8c4cf9511edfc1a505ae639204b14f06a12ce739/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubstring.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubstring.java?ref=8c4cf9511edfc1a505ae639204b14f06a12ce739","patch":"@@ -0,0 +1,61 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n+\r\n+public class TestSubstring extends SingleEMTestCase {\r\n+\r\n+    public void setUp() {\r\n+        super.setUp(SimpleEntity.class, CLEAR_TABLES, \"openjpa.Log\", \"SQL=TRACE\");\r\n+\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.persist(new SimpleEntity(\"foo\", \"bar\"));\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testSingleCharacterSubstringInWhere() {\r\n+        assertEquals((long) 1, em.createQuery(\"select count(o) from simple o \" +\r\n+            \"where substring(o.value, 1, 1) = 'b'\").getSingleResult());\r\n+        assertEquals((long) 1, em.createQuery(\"select count(o) from simple o \" +\r\n+            \"where substring(o.value, 2, 1) = 'a'\").getSingleResult());\r\n+        assertEquals((long) 1, em.createQuery(\"select count(o) from simple o \" +\r\n+            \"where substring(o.value, 3, 1) = 'r'\").getSingleResult());\r\n+    }\r\n+\r\n+    public void testMultiCharacterSubstringInWhere() {\r\n+        assertEquals((long) 1, em.createQuery(\"select count(o) from simple o \" +\r\n+            \"where substring(o.value, 1, 2) = 'ba'\").getSingleResult());\r\n+        assertEquals((long) 1, em.createQuery(\"select count(o) from simple o \" +\r\n+            \"where substring(o.value, 2, 2) = 'ar'\").getSingleResult());\r\n+    }\r\n+\r\n+    public void testSubstringInSelect() {\r\n+        assertEquals(\"b\", em.createQuery(\"select substring(o.value, 1, 1) \" +\r\n+            \"from simple o\").getSingleResult());\r\n+        assertEquals(\"a\", em.createQuery(\"select substring(o.value, 2, 1) \" +\r\n+            \"from simple o\").getSingleResult());\r\n+        assertEquals(\"r\", em.createQuery(\"select substring(o.value, 3, 1) \" +\r\n+            \"from simple o\").getSingleResult());\r\n+    }\r\n+}\r"},{"sha":"7d2768de6d82859df9551f229d86a37cc60b1811","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/AllFieldTypes.java","status":"modified","additions":26,"deletions":1,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/8c4cf9511edfc1a505ae639204b14f06a12ce739/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/AllFieldTypes.java","raw_url":"https://github.com/apache/openjpa/raw/8c4cf9511edfc1a505ae639204b14f06a12ce739/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/AllFieldTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/AllFieldTypes.java?ref=8c4cf9511edfc1a505ae639204b14f06a12ce739","patch":"@@ -25,14 +25,18 @@\n import java.util.Date;\n import java.util.HashSet;\n import java.util.Set;\n+import java.util.List;\n+import java.util.ArrayList;\n import javax.persistence.Entity;\n import javax.persistence.Version;\n+import javax.persistence.OneToOne;\n+import javax.persistence.OneToMany;\n \n import org.apache.openjpa.persistence.PersistentCollection;\n \n @Entity\n public class AllFieldTypes {\n-    \n+\n     public static enum EnumType {Value1, Value2};\n     \n     // @Basic types\n@@ -74,6 +78,12 @@\n     @PersistentCollection\n     private int[] arrayOfInts;\n \n+    // one-to-one and one-to-many relations to self\n+    @OneToOne\n+    private AllFieldTypes selfOneOne;\n+    @OneToMany\n+    private List<AllFieldTypes> selfOneMany = new ArrayList<AllFieldTypes>();\n+\n     public void setShortField(short shortField) {\n         this.shortField = shortField;\n     }\n@@ -338,5 +348,20 @@ public void setWShortField(Short shortField) {\n         wShortField = shortField;\n     }\n \n+    public AllFieldTypes getSelfOneOne() {\n+        return selfOneOne;\n+    }\n+    \n+    public void setSelfOneOne(AllFieldTypes selfOneOne) {\n+        this.selfOneOne = selfOneOne;\n+    }\n+\n+    public List<AllFieldTypes> getSelfOneMany() {\n+        return selfOneMany;\n+    }\n+\n+    public void setSelfOneMany(List<AllFieldTypes> selfOneMany) {\n+        this.selfOneMany = selfOneMany;\n+    }\n }\n "}]}

