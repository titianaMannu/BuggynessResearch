{"sha":"8c8e250f402125bcf6a05ef696e33db5417371dd","node_id":"MDY6Q29tbWl0MjA2MzY0OjhjOGUyNTBmNDAyMTI1YmNmNmEwNWVmNjk2ZTMzZGI1NDE3MzcxZGQ=","commit":{"author":{"name":"Jody Grassel","email":"jgrassel@apache.org","date":"2012-05-04T14:18:19Z"},"committer":{"name":"Jody Grassel","email":"jgrassel@apache.org","date":"2012-05-04T14:18:19Z"},"message":"OPENJPA-2133: OpenJPA doesn't find custom mappings with an applicable class loader\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1333982 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"81723e1bd31e5b4a6bed180003c442dd429b0e8f","url":"https://api.github.com/repos/apache/openjpa/git/trees/81723e1bd31e5b4a6bed180003c442dd429b0e8f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8c8e250f402125bcf6a05ef696e33db5417371dd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8c8e250f402125bcf6a05ef696e33db5417371dd","html_url":"https://github.com/apache/openjpa/commit/8c8e250f402125bcf6a05ef696e33db5417371dd","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8c8e250f402125bcf6a05ef696e33db5417371dd/comments","author":null,"committer":null,"parents":[{"sha":"432499a3a69acdd985b321fd9ef3101430fa7b54","url":"https://api.github.com/repos/apache/openjpa/commits/432499a3a69acdd985b321fd9ef3101430fa7b54","html_url":"https://github.com/apache/openjpa/commit/432499a3a69acdd985b321fd9ef3101430fa7b54"}],"stats":{"total":19,"additions":15,"deletions":4},"files":[{"sha":"f3f865cae10e96a5817af2465ca392cab9d819b3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/8c8e250f402125bcf6a05ef696e33db5417371dd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","raw_url":"https://github.com/apache/openjpa/raw/8c8e250f402125bcf6a05ef696e33db5417371dd/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java?ref=8c8e250f402125bcf6a05ef696e33db5417371dd","patch":"@@ -546,7 +546,7 @@ else if (VerticalClassStrategy.ALIAS.equals(name))\n                 strat = JavaTypes.classForName(name, cls,\n                     AccessController.doPrivileged(\n                         J2DoPrivHelper.getClassLoaderAction(\n-                            ClassStrategy.class)));\n+                            ClassStrategy.class)), false);\n             ClassStrategy strategy = \n                 (ClassStrategy) AccessController.doPrivileged(\n                     J2DoPrivHelper.newInstanceAction(strat));\n@@ -579,7 +579,7 @@ protected FieldStrategy namedStrategy(FieldMapping field,\n         try {\n             Class<?> c = JavaTypes.classForName(name, field,\n                 AccessController.doPrivileged(\n-                    J2DoPrivHelper.getClassLoaderAction(FieldStrategy.class)));\n+                    J2DoPrivHelper.getClassLoaderAction(FieldStrategy.class)), false);\n             if (FieldStrategy.class.isAssignableFrom(c)) {\n                 FieldStrategy strat = (FieldStrategy)\n                     AccessController.doPrivileged(\n@@ -653,7 +653,7 @@ else if (SubclassJoinDiscriminatorStrategy.ALIAS.equals(name))\n                     discrim.getClassMapping(),\n                     AccessController.doPrivileged(\n                         J2DoPrivHelper.getClassLoaderAction(\n-                            DiscriminatorStrategy.class)));\n+                            DiscriminatorStrategy.class)), false);\n             DiscriminatorStrategy strategy = (DiscriminatorStrategy)\n                 AccessController.doPrivileged(\n                     J2DoPrivHelper.newInstanceAction(strat));\n@@ -719,7 +719,7 @@ else if (StateComparisonVersionStrategy.ALIAS.equals(name))\n                     version.getClassMapping(),\n                     AccessController.doPrivileged(\n                         J2DoPrivHelper.getClassLoaderAction(\n-                            VersionStrategy.class)));\n+                            VersionStrategy.class)), false);\n         } catch (Exception e) {\n             throw new MetaDataException(_loc.get(\"bad-version-strategy\",\n                 version.getClassMapping(), name), e);"},{"sha":"0735e603248c187d42c00f75a88060d3c76f16dd","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/8c8e250f402125bcf6a05ef696e33db5417371dd/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java","raw_url":"https://github.com/apache/openjpa/raw/8c8e250f402125bcf6a05ef696e33db5417371dd/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/JavaTypes.java?ref=8c8e250f402125bcf6a05ef696e33db5417371dd","patch":"@@ -186,6 +186,17 @@ public static int getTypeCode(Class<?> type) {\n         return classForName(name, context, context.getDescribedType(), null,\n             loader);\n     }\n+    \n+    /**\n+     * Check the given name against the same set of standard packages used\n+     * when parsing metadata.\n+     * \n+     * @param mustExist Whether the supplied loader <b>must</b> be able to load the class. If true no attempt to use a\n+     * different classloader will be made. If false the ClassResolver from the configuration will be used. \n+     */\n+    public static Class<?> classForName(String name, ClassMetaData context, ClassLoader loader, boolean mustExist) {\n+        return classForName(name, context, context.getDescribedType(), null, loader, mustExist);\n+    }\n \n     /**\n      * Check the given name against the same set of standard packages used"}]}

