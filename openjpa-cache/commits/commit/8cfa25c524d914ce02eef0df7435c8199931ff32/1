{"sha":"8cfa25c524d914ce02eef0df7435c8199931ff32","node_id":"MDY6Q29tbWl0MjA2MzY0OjhjZmEyNWM1MjRkOTE0Y2UwMmVlZjBkZjc0MzVjODE5OTkzMWZmMzI=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-07-22T17:41:30Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-07-22T17:41:30Z"},"message":"OPENJPA-241 Extra SQL on lazy CMR load\ncommit openjpa_241.patch on behalf of Fay Wang\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@678828 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9578e617879b0ea745218096364a0877ea097b6b","url":"https://api.github.com/repos/apache/openjpa/git/trees/9578e617879b0ea745218096364a0877ea097b6b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8cfa25c524d914ce02eef0df7435c8199931ff32","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8cfa25c524d914ce02eef0df7435c8199931ff32","html_url":"https://github.com/apache/openjpa/commit/8cfa25c524d914ce02eef0df7435c8199931ff32","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8cfa25c524d914ce02eef0df7435c8199931ff32/comments","author":null,"committer":null,"parents":[{"sha":"b4c557d0c052726037f32430f038d059fc9aceaf","url":"https://api.github.com/repos/apache/openjpa/commits/b4c557d0c052726037f32430f038d059fc9aceaf","html_url":"https://github.com/apache/openjpa/commit/b4c557d0c052726037f32430f038d059fc9aceaf"}],"stats":{"total":142,"additions":139,"deletions":3},"files":[{"sha":"7434efde55add1e6856a44c7c6fac1d3689dc132","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":20,"deletions":1,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/8cfa25c524d914ce02eef0df7435c8199931ff32/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/8cfa25c524d914ce02eef0df7435c8199931ff32/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=8cfa25c524d914ce02eef0df7435c8199931ff32","patch":"@@ -349,6 +349,13 @@ protected boolean initializeState(OpenJPAStateManager sm, PCState state,\n             // from the indicator is a subclass of expected type\n             sm.initialize(type, state);\n \n+            if (info != null && info.result != null) {\n+                FieldMapping mappedByFieldMapping = info.result.\n+                    getMappedByFieldMapping();\n+                Object mappedByObject = info.result.getMappedByValue();\n+                if (mappedByFieldMapping != null && mappedByObject != null)\n+                    setMappedBy(sm, mappedByFieldMapping, mappedByObject);\n+            }\n             // load the selected mappings into the given state manager\n             if (res != null) {\n                 // re-get the mapping in case the instance was a subclass\n@@ -362,7 +369,19 @@ protected boolean initializeState(OpenJPAStateManager sm, PCState state,\n                 res.close();\n         }\n     }\n-    \n+\n+    protected void setMappedBy(OpenJPAStateManager sm,\n+        FieldMapping mappedByFieldMapping, Object mappedByObject) {\n+        ClassMapping mapping = (ClassMapping) sm.getMetaData();\n+        FieldMapping[] fms = mapping.getDeclaredFieldMappings();\n+        for (int i = 0; i < fms.length; i++) {\n+            if (fms[i] == mappedByFieldMapping) {\n+                sm.storeObject(fms[i].getIndex(), mappedByObject);\n+                return;\n+            }\n+        }\n+    }\n+\n     /**\n      * This method is to provide override for non-JDBC or JDBC-like \n      * implementation of getting version from the result set."},{"sha":"70707efeca82872e6e35c4d31d6d9a89c499743c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","status":"modified","additions":53,"deletions":2,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/8cfa25c524d914ce02eef0df7435c8199931ff32/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/8cfa25c524d914ce02eef0df7435c8199931ff32/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java?ref=8cfa25c524d914ce02eef0df7435c8199931ff32","patch":"@@ -25,6 +25,7 @@\n import java.util.List;\n import java.util.Map;\n \n+import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfigurationImpl;\n@@ -33,19 +34,20 @@\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.FieldStrategy;\n+import org.apache.openjpa.jdbc.meta.ValueMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.LogicalUnion;\n import org.apache.openjpa.jdbc.sql.Result;\n-import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n import org.apache.openjpa.jdbc.sql.SelectExecutor;\n import org.apache.openjpa.jdbc.sql.SelectImpl;\n import org.apache.openjpa.jdbc.sql.Union;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.ChangeTracker;\n import org.apache.openjpa.util.Id;\n@@ -305,13 +307,61 @@ private Map processEagerParallelResult(OpenJPAStateManager sm,\n \n             if (field.getOrderColumn() != null)\n                 seq = res.getInt(field.getOrderColumn(), orderJoins) + 1;\n-            add(store, coll, loadElement(null, store, fetch, res, dataJoins));\n+\n+            // for inverseEager field\n+            setMappedBy(oid, sm, coll, res);\n+            Object val = loadElement(null, store, fetch, res, dataJoins);\n+            add(store, coll, val);\n         }\n         res.close();\n \n         return rels;\n     }\n \n+    private void setMappedBy(Object oid, OpenJPAStateManager sm, Object coll,\n+        Result res) {\n+        // for inverseEager field\n+        FieldMapping mappedByFieldMapping = field.getMappedByMapping();\n+        PersistenceCapable mappedByValue = null;\n+        \n+        if (mappedByFieldMapping != null) {\n+            ValueMapping val = mappedByFieldMapping.getValueMapping();\n+            ClassMetaData decMeta = val.getTypeMetaData();\n+            // this inverse field does not have corresponding classMapping\n+            // its value may be a collection/map etc.\n+            if (decMeta == null) \n+                return;\n+        \t\n+            if (oid.equals(sm.getObjectId())) {\n+                mappedByValue = sm.getPersistenceCapable();\n+                res.setMappedByFieldMapping(mappedByFieldMapping);\n+                res.setMappedByValue(mappedByValue);\n+            } else if (coll instanceof Collection && \n+                ((Collection) coll).size() > 0) {\n+                // Customer (1) <--> Orders(n)\n+                // coll contains the values of the toMany field (Orders)\n+                // get the StateManager of this toMany value\n+                // and find the value of the inverse mappedBy field (Customer)\n+                // for this toMacdny field\n+                PersistenceCapable pc = (PersistenceCapable)\n+                    ((Collection) coll).iterator().next();\n+                OpenJPAStateManager sm1 = (OpenJPAStateManager) pc.\n+                    pcGetStateManager();\n+                FieldMapping[] fms = ((ClassMapping) sm1.getMetaData()).\n+                    getDeclaredFieldMappings();\n+                for (int i = 0; i < fms.length; i++) {\n+                    if (fms[i] == mappedByFieldMapping) {\n+                        res.setMappedByValue(sm1.fetchObject(fms[i].\n+                            getIndex()));\n+                        break;\n+                    }\n+                } \n+            } else {\n+                res.setMappedByValue(null);\n+            }\n+        }        \n+    }\n+\n     /**\n      * Extract the oid value from the given result. If the next oid is the\n      * same as the given one, returns the given JVM instance.\n@@ -555,6 +605,7 @@ public void load(final OpenJPAStateManager sm, final JDBCStore store,\n             while (res.next()) {\n                 if (ct != null && field.getOrderColumn() != null)\n                     seq = res.getInt(field.getOrderColumn());\n+                setMappedBy(sm.getObjectId(), sm, coll, res);\n                \tadd(store, coll, loadElement(sm, store, fetch, res,\n            \t        resJoins[res.indexOf()]));\n             }"},{"sha":"7bfe2af98ecfaebde72fae1cbb01980ffae52027","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/8cfa25c524d914ce02eef0df7435c8199931ff32/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java","raw_url":"https://github.com/apache/openjpa/raw/8cfa25c524d914ce02eef0df7435c8199931ff32/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java?ref=8cfa25c524d914ce02eef0df7435c8199931ff32","patch":"@@ -80,6 +80,8 @@\n     private boolean _locking = false;\n     private boolean _ignoreNext = false;\n     private boolean _last = false;\n+    private FieldMapping _mappedByFieldMapping = null;\n+    private Object _mappedByValue = null;\n \n     public Object getEager(FieldMapping key) {\n         Map map = getEagerMap(true);\n@@ -118,6 +120,8 @@ protected void setEagerMap(Map eager) {\n      */\n     public void close() {\n         closeEagerMap(_eager);\n+        _mappedByFieldMapping = null;\n+        _mappedByValue = null;\n     }\n \n     /**\n@@ -238,6 +242,22 @@ public void setBaseMapping(ClassMapping base) {\n         _base = base;\n     }\n \n+    public FieldMapping getMappedByFieldMapping() {\n+        return (_gotEager) ? null : _mappedByFieldMapping;\n+    }\n+\n+    public void setMappedByFieldMapping(FieldMapping fieldMapping) {\n+        _mappedByFieldMapping = fieldMapping;\n+    }\n+\n+    public Object getMappedByValue() {\n+        return (_gotEager) ? null : _mappedByValue;\n+    }\n+\n+    public void setMappedByValue(Object mappedByValue) {\n+        _mappedByValue = mappedByValue;\n+    }\n+\n     public int indexOf() {\n         return _index;\n     }"},{"sha":"2702aab559ebb8c25a3142c191d18dbe02ec8ded","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MergedResult.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/8cfa25c524d914ce02eef0df7435c8199931ff32/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MergedResult.java","raw_url":"https://github.com/apache/openjpa/raw/8cfa25c524d914ce02eef0df7435c8199931ff32/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MergedResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MergedResult.java?ref=8cfa25c524d914ce02eef0df7435c8199931ff32","patch":"@@ -211,6 +211,22 @@ public void setBaseMapping(ClassMapping mapping) {\n         _res[_idx].setBaseMapping(mapping);\n     }\n \n+    public FieldMapping getMappedByFieldMapping() {\n+        return _res[_idx].getMappedByFieldMapping();\n+    }\n+\n+    public void setMappedByFieldMapping(FieldMapping fieldMapping) {\n+        _res[_idx].setMappedByFieldMapping(fieldMapping);\n+    }\n+\n+    public Object getMappedByValue() {\n+        return _res[_idx].getMappedByValue();\n+    }\n+\n+    public void setMappedByValue(Object mappedByValue) {\n+        _res[_idx].setMappedByValue(mappedByValue);\n+    }\n+\n     public int indexOf() {\n         return _res[_idx].indexOf();\n     }"},{"sha":"8f5c729f4c762ea3a24e0a1c24a91a3dfa7bce14","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java","status":"modified","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/8cfa25c524d914ce02eef0df7435c8199931ff32/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java","raw_url":"https://github.com/apache/openjpa/raw/8cfa25c524d914ce02eef0df7435c8199931ff32/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java?ref=8cfa25c524d914ce02eef0df7435c8199931ff32","patch":"@@ -160,6 +160,36 @@ public boolean containsAll(Column[] cols, Joins joins)\n      */\n     public void setBaseMapping(ClassMapping mapping);\n \n+    /**\n+     * If this is the result used to select a toMany relationship,\n+     * the mappedByFieldMapping is field mapping representing \n+     * the inverse relationship. This is to avoid unneeded  \n+     * extra sql to retrieve the eager inverse field.\n+     */\n+    public FieldMapping getMappedByFieldMapping();\n+\n+    /**\n+     * If this is the result used to select a toMany relationship,\n+     * the mappedByFieldMapping is field mapping representing \n+     * the inverse relationship. This is to avoid unneeded  \n+     * extra sql to retrieve the eager inverse field.\n+     */\n+    public void setMappedByFieldMapping(FieldMapping fieldMapping);\n+\n+    /**\n+     * If this is the result used to select a toMany relationship,\n+     * the mappedByValue is value of the owner of the toMany relationship. \n+     * This is to avoid unneeded extra sql to retrieve the eager inverse field.\n+     */\n+    public Object getMappedByValue();\n+\n+    /**\n+     * If this is the result used to select a toMany relationship,\n+     * the mappedByValue is value of the owner of the toMany relationship. \n+     * This is to avoid unneeded extra sql to retrieve the eager inverse field.\n+     */\n+    public void setMappedByValue(Object mappedByValue);\n+\n     /**\n      * The index of the select within the UNION that the current row\n      * corresponds to, or 0."}]}

