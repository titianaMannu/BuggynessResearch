{"sha":"8d1dacad825e9ec3115596170b0cc13b2d2278b3","node_id":"MDY6Q29tbWl0MjA2MzY0OjhkMWRhY2FkODI1ZTllYzMxMTU1OTYxNzBiMGNjMTNiMmQyMjc4YjM=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-08-16T05:52:17Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2007-08-16T05:52:17Z"},"message":"Adding support for change of configuration properties after the configuration has been frozen. \nThree methods have been added to Configuration:\n  i) Configuration.getDynamicValues() returns list of Values that are dynamically modifiable.\n ii) Configuration.isDynamic(String property) affirms if the named property is dynamically modifiable.\niii) Configuration.modifyDynamic(String property, Object value) modifies the named property value even when Configuration.isReadOnly().\n\n  Currently, OpenJPAConfigurationImpl.getDynamicValues() return 3 simple IntValue properties {dataCacheTimeout, fetchBatchSize, lockTimeout) \n \n  \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@566494 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cda96df7bd2774b658e486e56591f81aa4897906","url":"https://api.github.com/repos/apache/openjpa/git/trees/cda96df7bd2774b658e486e56591f81aa4897906"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8d1dacad825e9ec3115596170b0cc13b2d2278b3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8d1dacad825e9ec3115596170b0cc13b2d2278b3","html_url":"https://github.com/apache/openjpa/commit/8d1dacad825e9ec3115596170b0cc13b2d2278b3","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8d1dacad825e9ec3115596170b0cc13b2d2278b3/comments","author":null,"committer":null,"parents":[{"sha":"88f293dec94ee995603f7c4b895cc26bffb0ac67","url":"https://api.github.com/repos/apache/openjpa/commits/88f293dec94ee995603f7c4b895cc26bffb0ac67","html_url":"https://github.com/apache/openjpa/commit/88f293dec94ee995603f7c4b895cc26bffb0ac67"}],"stats":{"total":184,"additions":180,"deletions":4},"files":[{"sha":"0c792298bd86d346f28cd770c8b30dcb688f0df4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/8d1dacad825e9ec3115596170b0cc13b2d2278b3/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/8d1dacad825e9ec3115596170b0cc13b2d2278b3/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=8d1dacad825e9ec3115596170b0cc13b2d2278b3","patch":"@@ -1437,4 +1437,9 @@ protected void preClose() {\n     public Log getConfigurationLog() {\n         return getLog(LOG_RUNTIME);\n     }\n+    \n+    public Value[] getDynamicValues() {\n+    \treturn new Value[] {dataCacheTimeout,fetchBatchSize,lockTimeout};\n+    }\n+\n }"},{"sha":"d7dbe1af7ab4f6c1ad736e34d27ca37da4493489","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/8d1dacad825e9ec3115596170b0cc13b2d2278b3/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","raw_url":"https://github.com/apache/openjpa/raw/8d1dacad825e9ec3115596170b0cc13b2d2278b3/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Configuration.java?ref=8d1dacad825e9ec3115596170b0cc13b2d2278b3","patch":"@@ -223,4 +223,22 @@\n      * Return a copy of this configuration.\n      */\n     public Object clone();\n+    \n+    /**\n+     * Modifies a <em>dynamic</em> property of this receiver even when \n+     * {@link #setReadOnly(boolean) frozen}. \n+     */\n+    public void modifyDynamic(String property, Object newValue);\n+    \n+    /**\n+     * Affirms if the given property can be modified <em>dynamically</em> i.e.\n+     * even after the receiver is {@link #setReadOnly(boolean) frozen}. \n+     */\n+    public boolean isDynamic(String property);\n+    \n+    /**\n+     * Gets the values that can be modified <em>dynamically</em> i.e.\n+     * even after the receiver is {@link #setReadOnly(boolean) frozen}. \n+     */\n+    public Value[] getDynamicValues();\n }"},{"sha":"bbf651e8bf65de1f1ded5b8965467c76ac6c0e25","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":34,"deletions":4,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/8d1dacad825e9ec3115596170b0cc13b2d2278b3/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/8d1dacad825e9ec3115596170b0cc13b2d2278b3/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=8d1dacad825e9ec3115596170b0cc13b2d2278b3","patch":"@@ -803,17 +803,16 @@ public boolean equals(Object other) {\n         ConfigurationImpl conf = (ConfigurationImpl) other;\n         Map p1 = (_props == null) ? toProperties(false) : _props;\n         Map p2 = (conf._props == null) ? conf.toProperties(false) : conf._props;\n-        return p1.equals(p2);\n+        return excludeDynamic(p1).equals(excludeDynamic(p2));\n     }\n \n     /**\n      * Computes hash code based on the properties returned from\n      * {@link #toProperties}.\n      */\n     public int hashCode() {\n-        if (_props != null)\n-            return _props.hashCode();\n-        return toProperties(false).hashCode();\n+    \tMap copy = (_props == null) ? toProperties(false) : _props;\n+    \treturn excludeDynamic(copy).hashCode();\n     }\n \n     /**\n@@ -989,4 +988,35 @@ public PluginListValue addPluginList(String property) {\n         addValue(val);\n         return val;\n     }\n+    \n+    public void modifyDynamic(String property, Object newValue) {\n+    \tif (!isDynamic(property)) \n+    \t\tthrow new RuntimeException(_loc.get(\"not-dynamic\", property)\n+    \t\t\t.toString());\n+    \tValue value = getValue(property);\n+    \tvalue.setObject(newValue);\n+    }\n+    \n+    public boolean isDynamic(String property) {\n+    \tValue[] dynamicValues = getDynamicValues();\n+    \tfor (int i=0; i<dynamicValues.length; i++) \n+    \t\tif (dynamicValues[i].getProperty().equals(property))\n+    \t\t\treturn true;\n+    \treturn false;\n+    }\n+    \n+    public Value[] getDynamicValues() {\n+    \treturn new Value[0];\n+    }\n+    \n+    Map excludeDynamic(Map map) {\n+    \tif (map == null)\n+    \t\treturn null;\n+    \tMap copy = new HashMap(map);\n+    \tValue[] dynamicValues = getDynamicValues();\n+    \tfor (int i=0; i<dynamicValues.length; i++) {\n+    \t\tConfigurations.removeProperty(dynamicValues[i].getProperty(), copy);\n+    \t}\n+    \treturn copy;\n+    }\n }"},{"sha":"36b4a153926fc5a18c96d7cc4b20f626b45c0e72","filename":"openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8d1dacad825e9ec3115596170b0cc13b2d2278b3/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/8d1dacad825e9ec3115596170b0cc13b2d2278b3/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties?ref=8d1dacad825e9ec3115596170b0cc13b2d2278b3","patch":"@@ -110,3 +110,5 @@ Id-type: General\n Id-cat: General\n Id-displayorder: 50\n Id-expert: true\n+\n+not-dynamic: Can not modify \"{0}\" to \"{1}\" because the property is not dynamic."},{"sha":"8a9534e18b6d71d7e03a696b1057ddb7332d2466","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestDynamicConfiguration.java","status":"added","additions":121,"deletions":0,"changes":121,"blob_url":"https://github.com/apache/openjpa/blob/8d1dacad825e9ec3115596170b0cc13b2d2278b3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestDynamicConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/8d1dacad825e9ec3115596170b0cc13b2d2278b3/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestDynamicConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestDynamicConfiguration.java?ref=8d1dacad825e9ec3115596170b0cc13b2d2278b3","patch":"@@ -0,0 +1,121 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.conf;\r\n+\r\n+import javax.persistence.Persistence;\r\n+import org.apache.openjpa.persistence.test.*;\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.lib.conf.Value;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+\r\n+/**\r\n+ * Tests dynamic modification of configuration property.\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+public class TestDynamicConfiguration extends SingleEMFTestCase {\r\n+\t\r\n+\tpublic void testConfigurationIsEqualByValueAndHashCode() {\r\n+\t\tOpenJPAEntityManagerFactory emf1 = createEMF();\r\n+\t\tassertNotNull(emf1);\r\n+\t\tOpenJPAConfiguration conf1 = emf1.getConfiguration();\r\n+\t\t\r\n+\t\tOpenJPAEntityManagerFactory emf2 = createEMF();\r\n+\t\tassertNotNull(emf2);\r\n+\t\tOpenJPAConfiguration conf2 = emf2.getConfiguration();\r\n+\t\t\r\n+\t\tassertFalse(emf1==emf2);\r\n+\t\tassertFalse(emf1.equals(emf2));\r\n+\t\tassertFalse(conf1==conf2);\r\n+\t\tassertEquals(conf1, conf2);\r\n+\t\tassertEquals(conf1.hashCode(), conf2.hashCode());\r\n+\t\tassertEquals(conf1.toProperties(false), conf2.toProperties(false));\r\n+\t}\r\n+\t\r\n+\tpublic void testConfigurationIsReadOnlyAfterFirstConstruction() {\r\n+\t\tOpenJPAEntityManagerFactory emf = createEMF();\r\n+\t\tassertNotNull(emf);\r\n+\t\tOpenJPAConfiguration conf = emf.getConfiguration();\r\n+\t\tassertFalse(conf.isReadOnly());\r\n+\t\temf.createEntityManager();\r\n+\t\tassertTrue(conf.isReadOnly());\r\n+\t}\r\n+\t\r\n+\tpublic void testDynamicValuesCanNotBeChangedDirectly() {\r\n+\t\tOpenJPAEntityManagerFactory emf = createEMF();\r\n+\t\tassertNotNull(emf);\r\n+\t\temf.createEntityManager();\r\n+\t\tOpenJPAConfiguration conf = emf.getConfiguration();\r\n+\t\t\r\n+\t\tValue[] dynamicValues = conf.getDynamicValues();\r\n+\t\tassertTrue(dynamicValues.length>0);\r\n+\t\tassertTrue(conf.isDynamic(\"LockTimeout\"));\r\n+\r\n+\t\tint oldValue = conf.getLockTimeout();\r\n+\t\tint newValue = oldValue + 10;\r\n+\t\ttry {\r\n+\t\t\tconf.setLockTimeout(newValue);\r\n+\t\t\tfail(\"Expected exception to modify configuration directly\");\r\n+\t\t} catch (Exception ex) { // good\r\n+\t\t\tassertEquals(oldValue, conf.getLockTimeout());\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\tpublic void testDynamicValuesCanBeChanged() {\r\n+\t\tOpenJPAEntityManagerFactory emf = createEMF();\r\n+\t\tassertNotNull(emf);\r\n+\t\tOpenJPAConfiguration conf = emf.getConfiguration();\r\n+\t\t\r\n+\t\tValue[] dynamicValues = conf.getDynamicValues();\r\n+\t\tassertTrue(dynamicValues.length>0);\r\n+\t\tassertTrue(conf.isDynamic(\"LockTimeout\"));\r\n+\r\n+\t\tint oldValue = conf.getLockTimeout();\r\n+\t\tint newValue = oldValue + 10;\r\n+\t\t\r\n+\t\tconf.modifyDynamic(\"LockTimeout\", newValue);\r\n+\t\tassertEquals(newValue, conf.getLockTimeout());\r\n+\t}\r\n+\r\n+\tpublic void testDynamicValuesAreCorrectlySet() {\r\n+\t\tOpenJPAEntityManagerFactory emf = createEMF();\r\n+\t\tassertNotNull(emf);\r\n+\t\tOpenJPAConfiguration conf = emf.getConfiguration();\r\n+\t\t\r\n+\t\tValue[] dynamicValues = conf.getDynamicValues();\r\n+\t\tassertTrue(dynamicValues.length>0);\r\n+\t\tassertTrue(conf.isDynamic(\"LockTimeout\"));\r\n+\t}\r\n+\t\r\n+\tpublic void testDynamicChangeDoesNotChangeHashCode() {\r\n+\t\tOpenJPAEntityManagerFactory emf = createEMF();\r\n+\t\tassertNotNull(emf);\r\n+\t\tOpenJPAConfiguration conf1 = emf.getConfiguration();\r\n+\t\t\r\n+\t\tint oldValue = conf1.getLockTimeout();\r\n+\t\tint newValue = oldValue+10;\r\n+\t\tint oldHash = conf1.hashCode();\r\n+\t\tconf1.modifyDynamic(\"LockTimeout\", newValue);\r\n+\t\tint newHash = conf1.hashCode();\r\n+\t\t\r\n+\t\tassertEquals(oldHash, newHash);\r\n+\t}\r\n+}\r"}]}

