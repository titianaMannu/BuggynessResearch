{"sha":"8dd6857f67991d646727bfd3597d8b5b9b03d69f","node_id":"MDY6Q29tbWl0MjA2MzY0OjhkZDY4NTdmNjc5OTFkNjQ2NzI3YmZkMzU5N2Q4YjViOWIwM2Q2OWY=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-20T23:19:05Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2007-08-20T23:19:05Z"},"message":"OPENJPA-314, OPENJPA-315\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@567875 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c76f1b66073645115804f54d243a58259c81353a","url":"https://api.github.com/repos/apache/openjpa/git/trees/c76f1b66073645115804f54d243a58259c81353a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8dd6857f67991d646727bfd3597d8b5b9b03d69f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8dd6857f67991d646727bfd3597d8b5b9b03d69f","html_url":"https://github.com/apache/openjpa/commit/8dd6857f67991d646727bfd3597d8b5b9b03d69f","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8dd6857f67991d646727bfd3597d8b5b9b03d69f/comments","author":null,"committer":null,"parents":[{"sha":"0a40e8c9a40d16300a94f7c46de76129327ee810","url":"https://api.github.com/repos/apache/openjpa/commits/0a40e8c9a40d16300a94f7c46de76129327ee810","html_url":"https://github.com/apache/openjpa/commit/0a40e8c9a40d16300a94f7c46de76129327ee810"}],"stats":{"total":389,"additions":377,"deletions":12},"files":[{"sha":"28ade53003b812c6e6c24d90bdd81d39c1b9cd1e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8dd6857f67991d646727bfd3597d8b5b9b03d69f/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/8dd6857f67991d646727bfd3597d8b5b9b03d69f/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=8dd6857f67991d646727bfd3597d8b5b9b03d69f","patch":"@@ -2608,7 +2608,7 @@ private void addStaticInitializer() {\n         Code code = getOrCreateClassInitCode(true);\n         if (_meta.getPCSuperclass() != null) {\n             if (getCreateSubclass()) {\n-                code.constant().setValue(_meta.getFields().length);\n+                code.constant().setValue(0);\n                 code.putstatic().setField(INHERIT, int.class);\n             } else {\n                 // pcInheritedFieldCount = <superClass>.pcGetManagedFieldCount()"},{"sha":"0a9bd27676762c0220ffc87b8ecf23b8cb4d8910","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/8dd6857f67991d646727bfd3597d8b5b9b03d69f/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","raw_url":"https://github.com/apache/openjpa/raw/8dd6857f67991d646727bfd3597d8b5b9b03d69f/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java?ref=8dd6857f67991d646727bfd3597d8b5b9b03d69f","patch":"@@ -128,41 +128,41 @@ public static Object fromPKValues(Object[] pks, ClassMetaData meta) {\n                     if (!convert && !(val instanceof Byte))\n                         throw new ClassCastException(\"!(x instanceof Byte)\");\n                     return new ByteId(meta.getDescribedType(),\n-                        ((Number) val).byteValue());\n+                        val == null ? 0 : ((Number) val).byteValue());\n                 case JavaTypes.CHAR:\n                 case JavaTypes.CHAR_OBJ:\n                     return new CharId(meta.getDescribedType(),\n-                        ((Character) val).charValue());\n+                        val == null ? 0 : ((Character) val).charValue());\n                 case JavaTypes.DOUBLE:\n                 case JavaTypes.DOUBLE_OBJ:\n                     if (!convert && !(val instanceof Double))\n                         throw new ClassCastException(\"!(x instanceof Double)\");\n                     return new DoubleId(meta.getDescribedType(),\n-                        ((Number) val).doubleValue());\n+                        val == null ? 0 : ((Number) val).doubleValue());\n                 case JavaTypes.FLOAT:\n                 case JavaTypes.FLOAT_OBJ:\n                     if (!convert && !(val instanceof Float))\n                         throw new ClassCastException(\"!(x instanceof Float)\");\n                     return new FloatId(meta.getDescribedType(),\n-                        ((Number) val).floatValue());\n+                        val == null ? 0 : ((Number) val).floatValue());\n                 case JavaTypes.INT:\n                 case JavaTypes.INT_OBJ:\n                     if (!convert && !(val instanceof Integer))\n                         throw new ClassCastException(\"!(x instanceof Integer)\");\n                     return new IntId(meta.getDescribedType(),\n-                        ((Number) val).intValue());\n+                        val == null ? 0 : ((Number) val).intValue());\n                 case JavaTypes.LONG:\n                 case JavaTypes.LONG_OBJ:\n                     if (!convert && !(val instanceof Long))\n                         throw new ClassCastException(\"!(x instanceof Long)\");\n                     return new LongId(meta.getDescribedType(),\n-                        ((Number) val).longValue());\n+                        val == null ? 0 : ((Number) val).longValue());\n                 case JavaTypes.SHORT:\n                 case JavaTypes.SHORT_OBJ:\n                     if (!convert && !(val instanceof Short))\n                         throw new ClassCastException(\"!(x instanceof Short)\");\n                     return new ShortId(meta.getDescribedType(),\n-                        ((Number) val).shortValue());\n+                        val == null ? 0 : ((Number) val).shortValue());\n                 case JavaTypes.STRING:\n                     return new StringId(meta.getDescribedType(), (String) val);\n                 case JavaTypes.DATE:"},{"sha":"28418629d24404bbef2290f2cc39c9c1da3568cd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/AbstractUnenhancedClassTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/8dd6857f67991d646727bfd3597d8b5b9b03d69f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/AbstractUnenhancedClassTest.java","raw_url":"https://github.com/apache/openjpa/raw/8dd6857f67991d646727bfd3597d8b5b9b03d69f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/AbstractUnenhancedClassTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/AbstractUnenhancedClassTest.java?ref=8dd6857f67991d646727bfd3597d8b5b9b03d69f","patch":"@@ -314,8 +314,7 @@ private void evictionHelper(boolean userDefined)\n \r\n             // make sure that the value was cleared...\r\n             Field field = getUnenhancedClass().getDeclaredField(\r\n-                this instanceof TestUnenhancedFieldAccess\r\n-                    ? \"stringField\" : \"sf\");\r\n+                isFieldAccessTest() ? \"stringField\" : \"sf\");\r\n             field.setAccessible(true);\r\n             assertEquals(null, field.get(un));\r\n \r\n@@ -331,15 +330,16 @@ private void evictionHelper(boolean userDefined)\n \r\n             // make sure that the value was not cleared\r\n             Field field = getUnenhancedClass().getDeclaredField(\r\n-                this instanceof TestUnenhancedFieldAccess\r\n-                    ? \"stringField\" : \"sf\");\r\n+                isFieldAccessTest() ? \"stringField\" : \"sf\");\r\n             field.setAccessible(true);\r\n             assertEquals(\"foo\", field.get(un));\r\n         }\r\n \r\n         em.close();\r\n     }\r\n \r\n+    protected abstract boolean isFieldAccessTest();\r\n+\r\n     public void testLazyLoading()\r\n         throws NoSuchFieldException, IllegalAccessException {\r\n         OpenJPAEntityManager em = emf.createEntityManager();\r"},{"sha":"bbfe16e6ba68112d922b21813b24e3bc3e4ddcd9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedCompoundPKSubclass.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/8dd6857f67991d646727bfd3597d8b5b9b03d69f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedCompoundPKSubclass.java","raw_url":"https://github.com/apache/openjpa/raw/8dd6857f67991d646727bfd3597d8b5b9b03d69f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedCompoundPKSubclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedCompoundPKSubclass.java?ref=8dd6857f67991d646727bfd3597d8b5b9b03d69f","patch":"@@ -0,0 +1,57 @@\n+/**\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ *  See the License for the specific language governing permissions and\r\n+ *  limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n+\r\n+public class TestUnenhancedCompoundPKSubclass extends SingleEMTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(UnenhancedCompoundPKFieldAccessSuperclass.class,\r\n+            UnenhancedCompoundPKFieldAccessSubclass.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testCompoundPKFieldAccessUserDefined() {\r\n+        UnenhancedCompoundPKFieldAccessSuperclass un =\r\n+            new UnenhancedCompoundPKFieldAccessSubclass(17, 31);\r\n+        UnenhancedCompoundPKFieldAccessSuperclass.PK oid =\r\n+            new UnenhancedCompoundPKFieldAccessSuperclass.PK(17, 31);\r\n+        compoundPKHelper(un, oid, true);\r\n+    }\r\n+\r\n+    public void testCompoundPKFieldAccessOpenJPADefined() {\r\n+        UnenhancedCompoundPKFieldAccessSuperclass un =\r\n+            new UnenhancedCompoundPKFieldAccessSubclass(17, 31);\r\n+        UnenhancedCompoundPKFieldAccessSuperclass.PK oid =\r\n+            new UnenhancedCompoundPKFieldAccessSuperclass.PK(17, 31);\r\n+        compoundPKHelper(un, oid, false);\r\n+    }\r\n+\r\n+    private void compoundPKHelper(Object o, Object oid, boolean userDefined) {\r\n+        em.getTransaction().begin();\r\n+        em.persist(o);\r\n+        em.getTransaction().commit();\r\n+\r\n+        if (!userDefined) {\r\n+            em.close();\r\n+            em = emf.createEntityManager();\r\n+        }\r\n+\r\n+        em.find(o.getClass(), oid);\r\n+    }\r\n+}\r"},{"sha":"b3a2b255d88b1340eead36c415b05f2d52f1f6f3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedFieldAccess.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/8dd6857f67991d646727bfd3597d8b5b9b03d69f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedFieldAccess.java","raw_url":"https://github.com/apache/openjpa/raw/8dd6857f67991d646727bfd3597d8b5b9b03d69f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedFieldAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedFieldAccess.java?ref=8dd6857f67991d646727bfd3597d8b5b9b03d69f","patch":"@@ -36,4 +36,8 @@ protected UnenhancedType newUnenhancedInstance() {\n     protected UnenhancedSubtype newUnenhancedSubclassInstance() {\r\n         return new UnenhancedFieldAccessSubclass();\r\n     }\r\n+\r\n+    protected boolean isFieldAccessTest() {\r\n+        return true;\r\n+    }\r\n }\r"},{"sha":"616f34b1d1e26d9b29225477f359a6d9839a822a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedFieldAccessPrimitiveWrapper.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/8dd6857f67991d646727bfd3597d8b5b9b03d69f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedFieldAccessPrimitiveWrapper.java","raw_url":"https://github.com/apache/openjpa/raw/8dd6857f67991d646727bfd3597d8b5b9b03d69f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedFieldAccessPrimitiveWrapper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedFieldAccessPrimitiveWrapper.java?ref=8dd6857f67991d646727bfd3597d8b5b9b03d69f","patch":"@@ -0,0 +1,42 @@\n+/**\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ *  See the License for the specific language governing permissions and\r\n+ *  limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+public class TestUnenhancedFieldAccessPrimitiveWrapper\r\n+    extends AbstractUnenhancedClassTest {\r\n+\r\n+    protected Class<? extends UnenhancedType> getUnenhancedClass() {\r\n+        return UnenhancedFieldAccessPrimitiveWrapper.class;\r\n+    }\r\n+\r\n+    protected UnenhancedType newUnenhancedInstance() {\r\n+        return new UnenhancedFieldAccessPrimitiveWrapper();\r\n+    }\r\n+\r\n+    protected Class<? extends UnenhancedSubtype> getUnenhancedSubclass() {\r\n+        return UnenhancedFieldAccessPrimitiveWrapperSubclass.class;\r\n+    }\r\n+\r\n+    protected UnenhancedSubtype newUnenhancedSubclassInstance() {\r\n+        return new UnenhancedFieldAccessPrimitiveWrapperSubclass();\r\n+    }\r\n+\r\n+    protected boolean isFieldAccessTest() {\r\n+        return true;\r\n+    }\r\n+}\r"},{"sha":"d8618d153f5af8e8fd5dc7c6c20c323a77e288c7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedPropertyAccess.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/8dd6857f67991d646727bfd3597d8b5b9b03d69f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedPropertyAccess.java","raw_url":"https://github.com/apache/openjpa/raw/8dd6857f67991d646727bfd3597d8b5b9b03d69f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedPropertyAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedPropertyAccess.java?ref=8dd6857f67991d646727bfd3597d8b5b9b03d69f","patch":"@@ -36,4 +36,8 @@ protected UnenhancedType newUnenhancedInstance() {\n     protected UnenhancedSubtype newUnenhancedSubclassInstance() {\r\n         return new UnenhancedPropertyAccessSubclass();\r\n     }\r\n+\r\n+    protected boolean isFieldAccessTest() {\r\n+        return false;\r\n+    }\r\n }\n\\ No newline at end of file"},{"sha":"d1b007fd29069215b0111afb1a49ec0b46ed09f3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedCompoundPKFieldAccessSubclass.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/8dd6857f67991d646727bfd3597d8b5b9b03d69f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedCompoundPKFieldAccessSubclass.java","raw_url":"https://github.com/apache/openjpa/raw/8dd6857f67991d646727bfd3597d8b5b9b03d69f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedCompoundPKFieldAccessSubclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedCompoundPKFieldAccessSubclass.java?ref=8dd6857f67991d646727bfd3597d8b5b9b03d69f","patch":"@@ -0,0 +1,34 @@\n+/**\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ *  See the License for the specific language governing permissions and\r\n+ *  limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.IdClass;\r\n+\r\n+@Entity\r\n+@IdClass(UnenhancedCompoundPKFieldAccessSubclass.PK.class)\r\n+public class UnenhancedCompoundPKFieldAccessSubclass\r\n+    extends UnenhancedCompoundPKFieldAccessSuperclass {\r\n+\r\n+    public UnenhancedCompoundPKFieldAccessSubclass() {\r\n+    }\r\n+\r\n+    public UnenhancedCompoundPKFieldAccessSubclass(int i0, int i1) {\r\n+        super(i0, i1);\r\n+    }\r\n+}\r"},{"sha":"a791c05f86442b7d15e27b3b47885ce070c5b9bf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedCompoundPKFieldAccessSuperclass.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/8dd6857f67991d646727bfd3597d8b5b9b03d69f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedCompoundPKFieldAccessSuperclass.java","raw_url":"https://github.com/apache/openjpa/raw/8dd6857f67991d646727bfd3597d8b5b9b03d69f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedCompoundPKFieldAccessSuperclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedCompoundPKFieldAccessSuperclass.java?ref=8dd6857f67991d646727bfd3597d8b5b9b03d69f","patch":"@@ -0,0 +1,88 @@\n+/**\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ *  See the License for the specific language governing permissions and\r\n+ *  limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+import javax.persistence.Id;\r\n+import javax.persistence.IdClass;\r\n+import javax.persistence.MappedSuperclass;\r\n+\r\n+@MappedSuperclass\r\n+@IdClass(UnenhancedCompoundPKFieldAccessSuperclass.PK.class)\r\n+public class UnenhancedCompoundPKFieldAccessSuperclass {\r\n+\r\n+    @Id\r\n+    private int id0;\r\n+    @Id\r\n+    private int id1;\r\n+\r\n+    protected UnenhancedCompoundPKFieldAccessSuperclass() {\r\n+    }\r\n+\r\n+    public UnenhancedCompoundPKFieldAccessSuperclass(int i0, int i1) {\r\n+        id0 = i0;\r\n+        id1 = i1;\r\n+    }\r\n+\r\n+    public static class PK {\r\n+\r\n+        static {\r\n+            // register persistent class in JVM\r\n+            try {\r\n+                Class.forName(\r\n+                    UnenhancedCompoundPKFieldAccessSuperclass.class.getName());\r\n+            } catch (Exception e) {\r\n+                // ignore\r\n+            }\r\n+        }\r\n+\r\n+        public int id0;\r\n+        public int id1;\r\n+\r\n+        public PK() {\r\n+        }\r\n+\r\n+        public PK(int i0, int i1) {\r\n+            id0 = i0;\r\n+            id1 = i1;\r\n+        }\r\n+\r\n+        public String toString() {\r\n+            return String.valueOf(id0)\r\n+                + \"::\" + String.valueOf(id1);\r\n+        }\r\n+\r\n+        public int hashCode() {\r\n+            int rs = 17;\r\n+            rs = rs * 37 + (int) (id0 ^ (id1 >>> 32));\r\n+            rs = rs * 37 + (int) (id0 ^ (id1 >>> 32));\r\n+            return rs;\r\n+        }\r\n+\r\n+        public boolean equals(Object obj) {\r\n+            if (this == obj)\r\n+                return true;\r\n+            if (obj == null || obj.getClass() != getClass())\r\n+                return false;\r\n+\r\n+            UnenhancedCompoundPKFieldAccessSuperclass.PK other =\r\n+                (UnenhancedCompoundPKFieldAccessSuperclass.PK) obj;\r\n+            return (id0 == other.id0)\r\n+                && (id1 == other.id1);\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"d7d799f9fcb4b53e5417539a9efc83175b8f8fb3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedFieldAccessPrimitiveWrapper.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/8dd6857f67991d646727bfd3597d8b5b9b03d69f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedFieldAccessPrimitiveWrapper.java","raw_url":"https://github.com/apache/openjpa/raw/8dd6857f67991d646727bfd3597d8b5b9b03d69f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedFieldAccessPrimitiveWrapper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedFieldAccessPrimitiveWrapper.java?ref=8dd6857f67991d646727bfd3597d8b5b9b03d69f","patch":"@@ -0,0 +1,81 @@\n+/**\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ *  See the License for the specific language governing permissions and\r\n+ *  limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+import java.io.Serializable;\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity\r\n+@Table(name = \"UN_FIELD_WRAP\")\r\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n+public class UnenhancedFieldAccessPrimitiveWrapper\r\n+    implements UnenhancedType, Serializable, Cloneable {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    private Integer id;\r\n+    @Version\r\n+    public int version;\r\n+    protected String stringField = \"foo\";\r\n+\r\n+    @Basic(fetch = FetchType.LAZY)\r\n+    private String lazyField = \"lazy\";\r\n+\r\n+    public int getId() {\r\n+        return id == null ? -1 : id;\r\n+    }\r\n+\r\n+    public void setStringField(String s) {\r\n+        stringField = s;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return stringField;\r\n+    }\r\n+\r\n+    public String getLazyField() {\r\n+        return lazyField;\r\n+    }\r\n+\r\n+    public boolean equals(Object o) {\r\n+        if (o == this)\r\n+            return true;\r\n+        if (o == null)\r\n+            return false;\r\n+        if (!getClass().isAssignableFrom(o.getClass()))\r\n+            return false;\r\n+\r\n+        return id == ((UnenhancedFieldAccessPrimitiveWrapper) o).id;\r\n+    }\r\n+\r\n+    public int hashCode() {\r\n+        return id == null ? 0 : id;\r\n+    }\r\n+\r\n+    public Object clone() throws CloneNotSupportedException {\r\n+        return super.clone();\r\n+    }\r\n+}\r"},{"sha":"f5125fcd6ee878f619704cbdb53ff1aa0474322a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedFieldAccessPrimitiveWrapperSubclass.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/8dd6857f67991d646727bfd3597d8b5b9b03d69f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedFieldAccessPrimitiveWrapperSubclass.java","raw_url":"https://github.com/apache/openjpa/raw/8dd6857f67991d646727bfd3597d8b5b9b03d69f/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedFieldAccessPrimitiveWrapperSubclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedFieldAccessPrimitiveWrapperSubclass.java?ref=8dd6857f67991d646727bfd3597d8b5b9b03d69f","patch":"@@ -0,0 +1,55 @@\n+/**\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ *  See the License for the specific language governing permissions and\r\n+ *  limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.enhance;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.OneToOne;\r\n+\r\n+@Entity\r\n+public class UnenhancedFieldAccessPrimitiveWrapperSubclass\r\n+    extends UnenhancedFieldAccessPrimitiveWrapper\r\n+    implements UnenhancedSubtype {\r\n+\r\n+    @OneToOne(cascade = CascadeType.ALL)\r\n+    private UnenhancedFieldAccessPrimitiveWrapper related;\r\n+    private int intField;\r\n+\r\n+    public UnenhancedType getRelated() {\r\n+        return related;\r\n+    }\r\n+\r\n+    public void setRelated(UnenhancedType related) {\r\n+        this.related = (UnenhancedFieldAccessPrimitiveWrapper) related;\r\n+    }\r\n+\r\n+    public void setIntField(int i) {\r\n+        intField = i;\r\n+    }\r\n+\r\n+    public int getIntField() {\r\n+        return intField;\r\n+    }\r\n+\r\n+    public Object clone() throws CloneNotSupportedException {\r\n+        UnenhancedFieldAccessPrimitiveWrapperSubclass un =\r\n+            (UnenhancedFieldAccessPrimitiveWrapperSubclass) super.clone();\r\n+        un.setRelated((UnenhancedType) getRelated().clone());\r\n+        return un;\r\n+    }\r\n+}\r"}]}

