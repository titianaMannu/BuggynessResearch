{"sha":"8e668339157786e48087de6f33432b8337d86716","node_id":"MDY6Q29tbWl0MjA2MzY0OjhlNjY4MzM5MTU3Nzg2ZTQ4MDg3ZGU2ZjMzNDMyYjgzMzdkODY3MTY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2006-08-04T22:02:51Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2006-08-04T22:02:51Z"},"message":"changed auxiliary enhancer interface\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@428897 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b80cf18bf39abab2fbd35dece2a3d4caabacba45","url":"https://api.github.com/repos/apache/openjpa/git/trees/b80cf18bf39abab2fbd35dece2a3d4caabacba45"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8e668339157786e48087de6f33432b8337d86716","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8e668339157786e48087de6f33432b8337d86716","html_url":"https://github.com/apache/openjpa/commit/8e668339157786e48087de6f33432b8337d86716","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8e668339157786e48087de6f33432b8337d86716/comments","author":null,"committer":null,"parents":[{"sha":"8c2c40dfe133a1493d5b0d5b8e26ce16eaf5b0d0","url":"https://api.github.com/repos/apache/openjpa/commits/8c2c40dfe133a1493d5b0d5b8e26ce16eaf5b0d0","html_url":"https://github.com/apache/openjpa/commit/8c2c40dfe133a1493d5b0d5b8e26ce16eaf5b0d0"}],"stats":{"total":23,"additions":12,"deletions":11},"files":[{"sha":"2d3b8174cb80ac406636068d69576703ac2a3b01","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":12,"deletions":11,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/8e668339157786e48087de6f33432b8337d86716/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/8e668339157786e48087de6f33432b8337d86716/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=8e668339157786e48087de6f33432b8337d86716","patch":"@@ -536,14 +536,12 @@ private void replaceAndValidateFieldAccess() {\n         // look through all methods; this is done before any methods are added\n         // so we don't need to worry about excluding synthetic methods.\n         BCMethod[] methods = _pc.getDeclaredMethods();\n-        Set nonEnhancedMethods = getUnenhancedMethods();\n         Code code;\n         for (int i = 0; i < methods.length; i++) {\n             code = methods[i].getCode(false);\n \n             // don't modify the methods specified by the auxiliary enhancers\n-            if (code != null\n-            \t&& !nonEnhancedMethods.contains(methods[i].getName())) {\n+            if (code != null && !skipEnhance(methods[i])) {\n                 replaceAndValidateFieldAccess(code, get, true, stat);\n                 replaceAndValidateFieldAccess(code, put, false, stat);\n             }\n@@ -2639,16 +2637,19 @@ private void runAuxiliaryEnhancers() {\n     \t\tauxEnhancers[i].run(_pc, _meta);\n     }\n     \n-    private Set getUnenhancedMethods() {\n-    \tSet result = new HashSet();\n+    /**\n+     * Affirms if the given method be skipped.\n+     * \n+     * @param method method to be skipped or not\n+     * @return true if any of the auxiliary enhancers skips the given method.\n+     */\n+    private boolean skipEnhance(BCMethod method) {\n     \tAuxiliaryEnhancer[] auxEnhancers = getAuxiliaryEnhancers();\n     \tfor (int i = 0; i < auxEnhancers.length; i++) {\n-    \t\tSet contrib = auxEnhancers[i].getUnenhancedMethods();\n-    \t\tif (contrib != null || !contrib.isEmpty()) {\n-    \t\t\tresult.addAll(contrib);\n-     \t\t}\n+    \t\tif (auxEnhancers[i].skipEnhance(method))\n+    \t\t\treturn true;\n      \t}\n-    \treturn result;\n+    \treturn false;\n     }\n \n     /**\n@@ -3509,6 +3510,6 @@ else if (status == ENHANCE_AWARE) {\n \tpublic static interface AuxiliaryEnhancer\n \t{\n \t\tpublic void run (BCClass bc, ClassMetaData meta);\n-\t\tpublic Set getUnenhancedMethods();\n+\t\tpublic boolean skipEnhance(BCMethod m);\n \t}\n }"}]}

