{"sha":"8e9696522573e9892b4b8aa56d6c311f639847ee","node_id":"MDY6Q29tbWl0MjA2MzY0OjhlOTY5NjUyMjU3M2U5ODkyYjRiOGFhNTZkNmMzMTFmNjM5ODQ3ZWU=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-10T16:58:44Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-09-10T16:58:44Z"},"message":"OPENJPA-1288: alias() first version. Assumes in-place change and does not create new instance. Retired TupleElementImpl.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@813514 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"52bba5b443dfb1932e515f54d13bf3dbf772e33d","url":"https://api.github.com/repos/apache/openjpa/git/trees/52bba5b443dfb1932e515f54d13bf3dbf772e33d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8e9696522573e9892b4b8aa56d6c311f639847ee","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8e9696522573e9892b4b8aa56d6c311f639847ee","html_url":"https://github.com/apache/openjpa/commit/8e9696522573e9892b4b8aa56d6c311f639847ee","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8e9696522573e9892b4b8aa56d6c311f639847ee/comments","author":null,"committer":null,"parents":[{"sha":"5113654485807a7884796562b9c62d56a2ec7999","url":"https://api.github.com/repos/apache/openjpa/commits/5113654485807a7884796562b9c62d56a2ec7999","html_url":"https://github.com/apache/openjpa/commit/5113654485807a7884796562b9c62d56a2ec7999"}],"stats":{"total":581,"additions":151,"deletions":430},"files":[{"sha":"03a4f473252c169b7935b8a47524ee49494981b1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/CriteriaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8e9696522573e9892b4b8aa56d6c311f639847ee/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/CriteriaTest.java","raw_url":"https://github.com/apache/openjpa/raw/8e9696522573e9892b4b8aa56d6c311f639847ee/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/CriteriaTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/CriteriaTest.java?ref=8e9696522573e9892b4b8aa56d6c311f639847ee","patch":"@@ -76,7 +76,7 @@ protected void setAuditor(SQLAuditor auditor) {\n         CriteriaTest.auditor = auditor;\n     }\n \n-    protected CriteriaBuilder getCriteriaBuilder() {\n+    protected OpenJPACriteriaBuilder getCriteriaBuilder() {\n         return cb;\n     }\n "},{"sha":"67f4262c83455757caa0330572e177744bec34b9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestMetaModelTypesafeCriteria.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/8e9696522573e9892b4b8aa56d6c311f639847ee/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestMetaModelTypesafeCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/8e9696522573e9892b4b8aa56d6c311f639847ee/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestMetaModelTypesafeCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestMetaModelTypesafeCriteria.java?ref=8e9696522573e9892b4b8aa56d6c311f639847ee","patch":"@@ -224,8 +224,8 @@ public void testFunctionalExpressionInProjection() {\n         Root<Customer> c = q.from(Customer.class);\n         Join<Customer, Order> o = c.join(customer_.getSet(\"orders\", Order.class));\n         Join<Customer, Address> a = c.join(customer_.getSingularAttribute(\"address\", Address.class));\n-        Expression<Double> taxedCost = cb.prod(o.get(order_.getSingularAttribute(\"totalCost\", Double.class)), 1.08);\n-        taxedCost.alias(\"taxedCost\");\n+        Expression<Double> taxedCost = (Expression<Double>)cb.prod(o.get(order_.getSingularAttribute(\"totalCost\", \n+                Double.class)), 1.08).alias(\"taxedCost\");\n         q.where(cb.equal(a.get(address_.getSingularAttribute(\"state\", String.class)), \"CA\"), \n                 cb.equal(a.get(address_.getSingularAttribute(\"county\", String.class)), \"Santa Clara\"));\n         q.multiselect(o.get(order_.getSingularAttribute(\"quantity\", Integer.class)),\n@@ -550,8 +550,8 @@ public void testOrderingWithNumericalExpressionInSelection() {\n         Root<Customer> c = q.from(Customer.class);\n         Join<Customer, Order> o = c.join(customer_.getSet(\"orders\",  Order.class));\n         Join<Customer, Address> a = c.join(customer_.getSingularAttribute(\"address\", Address.class));\n-        Expression<Double> taxedCost = cb.prod(o.get(order_.getSingularAttribute(\"totalCost\", Double.class)), 1.08);\n-        taxedCost.alias(\"taxedCost\");\n+        Expression<Double> taxedCost = (Expression<Double>)cb.prod(o.get(order_.getSingularAttribute(\"totalCost\", \n+                Double.class)), 1.08).alias(\"taxedCost\");\n         q.where(cb.equal(a.get(address_.getSingularAttribute(\"state\", String.class)), \"CA\"), \n                 cb.equal(a.get(address_.getSingularAttribute(\"county\", String.class)), \"Santa Clara\"));\n         q.orderBy(cb.asc(o.get(order_.getSingularAttribute(\"quantity\", Integer.class))),"},{"sha":"914e1538f7ab6f69206b2eecca54a48b05abe658","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestStringCriteria.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/8e9696522573e9892b4b8aa56d6c311f639847ee/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestStringCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/8e9696522573e9892b4b8aa56d6c311f639847ee/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestStringCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestStringCriteria.java?ref=8e9696522573e9892b4b8aa56d6c311f639847ee","patch":"@@ -29,6 +29,7 @@\n import javax.persistence.criteria.ListJoin;\n import javax.persistence.criteria.MapJoin;\n import javax.persistence.criteria.ParameterExpression;\n+import javax.persistence.criteria.Path;\n import javax.persistence.criteria.Root;\n import javax.persistence.criteria.SetJoin;\n import javax.persistence.criteria.Subquery;\n@@ -41,6 +42,7 @@ public void testCriteria() {\n         String jpql = \"select c from Customer c where c.name='Autowest Toyota'\";\n         CriteriaQuery<Customer> q = cb.createQuery(Customer.class);\n         Root<Customer> customer = q.from(Customer.class);\n+        Path<String> path = customer.<String>get(\"name\");\n         q.select(customer).where(cb.equal(customer.get(\"name\"), \"Autowest Toyota\"));\n \n         assertEquivalence(q, jpql);\n@@ -138,8 +140,8 @@ public void testExpressions() {\n         SetJoin<Customer, Order> o = c.joinSet(\"orders\");\n         Join<Customer, Address> a  = c.join(\"address\");\n         q.where(cb.equal(a.get(\"state\"), \"CA\"), cb.equal(a.get(\"county\"), \"Santa Clara\"));\n-        Expression<Float> productTerm = cb.toFloat(cb.prod(o.get(\"totalCost\").as(Float.class), 1.08));\n-        productTerm.alias(\"taxedCost\");\n+        Expression<Float> productTerm = (Expression<Float>)cb.toFloat(cb.prod(o.get(\"totalCost\").as(Float.class), 1.08))\n+           .alias(\"taxedCost\");\n         q.multiselect(o.get(\"quantity\"), productTerm, a.get(\"zipCode\"));\n \n         assertEquivalence(q, jpql);\n@@ -387,8 +389,8 @@ public void testOrdering3() {\n         SetJoin<Customer, Order> o = c.joinSet(\"orders\");\n         Join<Customer, Address> a = c.join(\"address\");\n         q.where(cb.equal(a.get(\"state\"), \"CA\"), cb.equal(a.get(\"county\"), \"Santa Clara\"));\n-        Expression<Float> productTerm = cb.toFloat(cb.prod(o.get(\"totalCost\").as(Float.class), 1.08));\n-        productTerm.alias(\"taxedCost\");\n+        Expression<Float> productTerm = (Expression<Float>)cb.toFloat(cb.prod(o.get(\"totalCost\").as(Float.class), 1.08))\n+            .alias(\"taxedCost\");\n         q.orderBy(cb.asc(o.get(\"quantity\")), cb.asc(productTerm), cb.asc(a.get(\"zipCode\")));\n         q.multiselect(o.get(\"quantity\"), productTerm, a.get(\"zipCode\"));\n "},{"sha":"f08851fba3c82d5cb9ef93ad1e43534d84172537","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypeSafeCondExpression.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/8e9696522573e9892b4b8aa56d6c311f639847ee/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypeSafeCondExpression.java","raw_url":"https://github.com/apache/openjpa/raw/8e9696522573e9892b4b8aa56d6c311f639847ee/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypeSafeCondExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypeSafeCondExpression.java?ref=8e9696522573e9892b4b8aa56d6c311f639847ee","patch":"@@ -789,5 +789,4 @@ public void testGeneralCaseExpression4() {\n         \n         assertEquivalence(q, query);\n     }\n-\n }"},{"sha":"57ebd418696bfd96beddb335cb3e1aa6bd9ae043","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","status":"modified","additions":17,"deletions":2,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/8e9696522573e9892b4b8aa56d6c311f639847ee/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/8e9696522573e9892b4b8aa56d6c311f639847ee/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java?ref=8e9696522573e9892b4b8aa56d6c311f639847ee","patch":"@@ -34,6 +34,7 @@\n import javax.persistence.criteria.MapJoin;\n import javax.persistence.criteria.ParameterExpression;\n import javax.persistence.criteria.Root;\n+import javax.persistence.criteria.Selection;\n import javax.persistence.criteria.SetJoin;\n import javax.persistence.criteria.Subquery;\n \n@@ -806,8 +807,7 @@ public void testOrdering3() {\n         Root<Customer> c = q.from(Customer.class);\n         Join<Customer, Order> o = c.join(Customer_.orders);\n         Join<Customer, Address> a = c.join(Customer_.address);\n-        Expression<Double> taxedCost = cb.prod(o.get(Order_.totalCost), 1.08);\n-        taxedCost.alias(\"taxedCost\");\n+        Expression<Double> taxedCost = (Expression<Double>)cb.prod(o.get(Order_.totalCost), 1.08).alias(\"taxedCost\");\n         q.where(cb.equal(a.get(Address_.state), \"CA\"), \n                 cb.equal(a.get(Address_.county), \"Santa Clara\"));\n         q.orderBy(cb.asc(o.get(Order_.quantity)), \n@@ -1260,4 +1260,19 @@ public void testJoinKey() {\n             assertEquals(jResult.get(i).getName(), cResult.get(i).getName());\n         }\n     }\n+    \n+    public void testAlias() {\n+        String jpql = \"SELECT AVG(a.balance) AS x FROM Account a ORDER BY x\";\n+\n+        OpenJPACriteriaQuery<Double> c = cb.createQuery(Double.class);\n+        Root<Account> account = c.from(Account.class);\n+        Expression<Double> original = cb.avg(account.get(Account_.balance));\n+        Expression<Double> aliased = (Expression<Double>)original.alias(\"x\");\n+        c.orderBy(cb.asc(aliased));\n+        assertSame(original, aliased);\n+        assertEquals(\"x\", aliased.getAlias());\n+        c.select(aliased);\n+        assertEquivalence(c, jpql);\n+        assertEquals(jpql, c.toCQL());\n+    }\n }"},{"sha":"1e7e637a4688eecfa7db0b4168dc08d945bb6021","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/TupleElementImpl.java","status":"removed","additions":0,"deletions":51,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/5113654485807a7884796562b9c62d56a2ec7999/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/TupleElementImpl.java","raw_url":"https://github.com/apache/openjpa/raw/5113654485807a7884796562b9c62d56a2ec7999/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/TupleElementImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/TupleElementImpl.java?ref=5113654485807a7884796562b9c62d56a2ec7999","patch":"@@ -1,51 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package org.apache.openjpa.persistence;\n-\n-import javax.persistence.TupleElement;\n-\n-/**\n- * A single dimension of projection in query result.\n- * \n- * @author Pinaki Poddar\n- *\n- * @param <X> type of the result\n- */\n-public class TupleElementImpl<X> implements TupleElement<X> {\n-    private String _alias;\n-    protected final Class<X> _cls;\n-\n-    protected TupleElementImpl(Class<X> cls) {\n-        _cls = cls;\n-    }\n-    \n-    public final String getAlias() {\n-        return _alias;\n-    }\n-\n-    protected TupleElement<X> setAlias(String alias) {\n-        _alias = alias;\n-        return this;\n-    }\n-\n-    public Class<X> getJavaType() {\n-        return _cls;\n-    }\n-}"},{"sha":"fac43c2acca31647f67d118a44a7fc51d42d8a36","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/AliasContext.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/8e9696522573e9892b4b8aa56d6c311f639847ee/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/AliasContext.java","raw_url":"https://github.com/apache/openjpa/raw/8e9696522573e9892b4b8aa56d6c311f639847ee/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/AliasContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/AliasContext.java?ref=8e9696522573e9892b4b8aa56d6c311f639847ee","patch":"@@ -25,12 +25,13 @@\n \n /**\n  * The context holds named variables for nodes of CriteriaQuery.\n- * Creates unique alias for the nodes.\n+ * Can create unique alias for the nodes that has not been aliased explicitly.\n  *  \n  * @author Pinaki Poddar\n+ * @since 2.0.0\n  *\n  */\n-public interface AliasContext {\n+interface AliasContext {\n     /**\n      * Gets the alias for the given node.\n      * If no alias is set on the given node then create an alias, assign it to\n@@ -70,5 +71,4 @@\n      * Return null if the node is not registered.     \n      */\n     Value getRegisteredValue(Selection<?> node);\n-    \n }"},{"sha":"214f9466ea8eb76dbe1d64aa38fbe628188fec9d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilder.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/8e9696522573e9892b4b8aa56d6c311f639847ee/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/8e9696522573e9892b4b8aa56d6c311f639847ee/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaBuilder.java?ref=8e9696522573e9892b4b8aa56d6c311f639847ee","patch":"@@ -41,6 +41,7 @@\n import javax.persistence.criteria.Subquery;\n import javax.persistence.metamodel.Attribute;\n import javax.persistence.metamodel.ManagedType;\n+import javax.persistence.metamodel.Metamodel;\n \n import org.apache.openjpa.kernel.ExpressionStoreQuery;\n import org.apache.openjpa.kernel.exps.ExpressionFactory;\n@@ -71,6 +72,10 @@ public CriteriaBuilder setMetaModel(MetamodelImpl featureSelection) {\n         _model = featureSelection;\n         return this;\n     }\n+    \n+    public Metamodel getMetamodel() {\n+        return _model;\n+    }\n \n     public QueryExpressions eval(Object parsed, ExpressionStoreQuery query,\n         ExpressionFactory factory, ClassMetaData candidate) {\n@@ -310,7 +315,7 @@ public Predicate isFalse(Expression<Boolean> x) {\n     }\n \n     public <E, C extends Collection<E>> Predicate isMember(Expression<E> e, Expression<C> c) {\n-        return new Expressions.IsMember<E>((Class<E>)e.getJavaType(), e, c);\n+        return new Expressions.IsMember<E>(e, c);\n     }\n \n     public <C extends Collection<?>> Predicate isNotEmpty(Expression<C> collection) {"},{"sha":"3ce3fb96526c9e10bdaaf070f1ad5ec890be8442","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpression.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/8e9696522573e9892b4b8aa56d6c311f639847ee/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpression.java","raw_url":"https://github.com/apache/openjpa/raw/8e9696522573e9892b4b8aa56d6c311f639847ee/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaExpression.java?ref=8e9696522573e9892b4b8aa56d6c311f639847ee","patch":"@@ -19,7 +19,7 @@\n package org.apache.openjpa.persistence.criteria;\n \n /**\n- * Interface to support Visitor pattern on Criteria Query nodes.\n+ * Interface to support Visitor pattern and CQL conversion of Criteria Query nodes.\n  * \n  * @author Pinaki Poddar\n  * @since 2.0.0\n@@ -42,4 +42,9 @@\n      * Get a string representation of this node as a variable in the context of the given query.\n      */\n     StringBuilder asVariable(AliasContext q);\n+    \n+    /**\n+     * Get a string representation of this node as a projection term in the context of the given query.\n+     */\n+    StringBuilder asProjection(AliasContext q);\n }"},{"sha":"ca43ad6944fd2d2e3973bb50ba6337b5b727783e","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/8e9696522573e9892b4b8aa56d6c311f639847ee/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/8e9696522573e9892b4b8aa56d6c311f639847ee/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java?ref=8e9696522573e9892b4b8aa56d6c311f639847ee","patch":"@@ -467,7 +467,7 @@ Context ctx() {\n     //\n     \n     /**\n-     * Gets the alias of the given node. Creates if necessary.\n+     * Gets the alias of the given node. Creates an automatic alias, if necessary.\n      */\n     public String getAlias(Selection<?> selection) {\n         String alias = selection.getAlias();\n@@ -478,7 +478,7 @@ public String getAlias(Selection<?> selection) {\n         alias = ALIAS_BASE + (++aliasCount);\n         while (_aliases.containsValue(alias))\n             alias = ALIAS_BASE + (++aliasCount);\n-        selection.alias(alias);\n+        ((SelectionImpl<?>)selection).setAutoAlias(alias);\n         _aliases.put(selection, alias);\n         return _aliases.get(selection);\n     }\n@@ -652,7 +652,7 @@ public String toCQL() {\n     void render(StringBuilder buffer, Set<Root<?>> roots, List<Join<?,?>> correlatedJoins) {\n         buffer.append(\"SELECT \");\n         if (isDistinct()) buffer.append(\" DISTINCT \");\n-        buffer.append(_selection != null ? ((CriteriaExpression)_selection).asValue(this) : \"*\");\n+        buffer.append(_selection != null ? ((CriteriaExpression)_selection).asProjection(this) : \"*\");\n         buffer.append(\" FROM \");\n         renderRoots(buffer, roots);\n         renderJoins(buffer, correlatedJoins);"},{"sha":"7227ec695d9122dce346827613539820db679eb1","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ExpressionImpl.java","status":"modified","additions":10,"deletions":25,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/8e9696522573e9892b4b8aa56d6c311f639847ee/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ExpressionImpl.java","raw_url":"https://github.com/apache/openjpa/raw/8e9696522573e9892b4b8aa56d6c311f639847ee/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ExpressionImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/ExpressionImpl.java?ref=8e9696522573e9892b4b8aa56d6c311f639847ee","patch":"@@ -29,7 +29,7 @@\n import org.apache.openjpa.persistence.meta.MetamodelImpl;\n \n /**\n- * Expression for Criteria query.\n+ * Expression node for Criteria query.\n  * \n  * @param <X> the type of the value this expression represents.\n  * \n@@ -45,20 +45,16 @@ public ExpressionImpl(Class<X> cls) {\n     }\n \n     /**\n-     * Perform a typecast upon the expression.\n-     * Warning: may result in a runtime failure.\n-     * @param type \n-     * @return expression\n+     * Creates a new expression of the given type. If the given type is same as this expression's type then\n+     * returns the same instance. \n+     * May cause runtime cast failure if this expression's immutable type is not convertible to the given type. \n      */\n     public <Y> Expression<Y> as(Class<Y> type) {\n        return type == getJavaType() ? (Expression<Y>)this : new Expressions.CastAs<Y>(type, this);\n     }\n \n     /**\n-     * Apply a predicate to test whether the expression is a member\n-     * of the argument list.\n-     * @param values\n-     * @return predicate testing for membership in the list\n+     * Create a predicate to test whether this expression is a member of the given argument values.\n      */\n    public Predicate in(Object... values) {\n         In<X> result = new Expressions.In<X>(this);\n@@ -68,10 +64,7 @@ public Predicate in(Object... values) {\n     }\n \n    /**\n-    * Apply a predicate to test whether the expression is a member\n-    * of the argument list.\n-    * @param values\n-    * @return predicate testing for membership\n+    * Create a predicate to test whether this expression is a member of the given argument expressions.\n     */\n     public Predicate in(Expression<?>... values) {\n         In<X> result = new Expressions.In<X>(this);\n@@ -81,10 +74,7 @@ public Predicate in(Expression<?>... values) {\n     }\n \n     /**\n-     * Apply a predicate to test whether the expression is a member\n-     * of the collection.\n-     * @param values collection\n-     * @return predicate testing for membership\n+     * Create a predicate to test whether this expression is a member of the given collection element values.\n      */\n     public Predicate in(Collection<?> values) {\n         In<X> result = new Expressions.In<X>(this);\n@@ -94,10 +84,7 @@ public Predicate in(Collection<?> values) {\n     }\n \n     /**\n-     * Apply a predicate to test whether the expression is a member\n-     * of the collection.\n-     * @param values expression corresponding to collection\n-     * @return predicate testing for membership\n+     * Create a predicate to test whether this expression is a member of the given expression representing a collection.\n      */\n     public Predicate in(Expression<Collection<?>> values) {\n         In<X> result = new Expressions.In<X>(this);\n@@ -106,16 +93,14 @@ public Predicate in(Expression<Collection<?>> values) {\n     }\n \n     /**\n-     *  Apply a predicate to test whether the expression is not null.\n-     *  @return predicate testing whether the expression is not null.\n+     *  Create a predicate to test whether this expression is not null.\n      */\n     public Predicate isNotNull() {\n     \treturn new Expressions.IsNotNull(this);\n     }\n \n     /**\n-     *  Apply a predicate to test whether the expression is null.\n-     *  @return predicate testing whether the expression is null\n+     *  Create a predicate to test whether this expression is null.\n      */\n     public Predicate isNull() {\n     \treturn new Expressions.IsNull(this);"},{"sha":"e20530ddc552bbbc16b0f94872cf3b73f3d7895b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","status":"modified","additions":26,"deletions":54,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/8e9696522573e9892b4b8aa56d6c311f639847ee/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","raw_url":"https://github.com/apache/openjpa/raw/8e9696522573e9892b4b8aa56d6c311f639847ee/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/Expressions.java?ref=8e9696522573e9892b4b8aa56d6c311f639847ee","patch":"@@ -268,12 +268,7 @@ public BinaryLogicalExpression(Expression<?> x, Expression<?> y) {\n             e1 = (ExpressionImpl<?>)x;\n             e2 = (ExpressionImpl<?>)y;\n         }\n-        \n-//        @Override\n-//        public PredicateImpl clone() {\n-//            return new BinaryLogicalExpression(e1, e2);\n-//        }\n-        \n+                \n         public void acceptVisit(CriteriaExpressionVisitor visitor) {\n             Expressions.acceptVisit(visitor, this, e1, e2);\n         }\n@@ -535,27 +530,27 @@ public StringBuilder asValue(AliasContext q) {\n         private ExpressionImpl<Integer> from;\n         private ExpressionImpl<String> path;\n         \n-        public Locate(Expression<String> x, Expression<String> y, Expression<Integer> from) {\n+        public Locate(Expression<String> path, Expression<String> pattern, Expression<Integer> from) {\n             super(Integer.class);\n-            path = (ExpressionImpl<String>)x;\n-            pattern = (ExpressionImpl<String>)y;\n+            this.path = (ExpressionImpl<String>)path;\n+            this.pattern = (ExpressionImpl<String>)pattern;\n             this.from = (ExpressionImpl<Integer>)from;\n         }\n \n-        public Locate(Expression<String> x, Expression<String> y) {\n-            this(x, y, null);\n+        public Locate(Expression<String> path, Expression<String> pattern) {\n+            this(path, pattern, null);\n          }\n         \n-        public Locate(Expression<String> x, String y) {\n-            this(x, new Constant<String>(y), null);\n+        public Locate(Expression<String> path, String pattern) {\n+            this(path, new Constant<String>(pattern), null);\n         }\n         \n-        public Locate(String x, Expression<String> y) {\n-            this(new Constant<String>(x), y, null);\n+        public Locate(String path, Expression<String> pattern) {\n+            this(new Constant<String>(path), pattern, null);\n         }\n         \n-        public Locate(Expression<String> x, String y, int from) {\n-            this(x, new Constant<String>(y), new Constant<Integer>(from));\n+        public Locate(Expression<String> path, String pattern, int from) {\n+            this(path, new Constant<String>(pattern), new Constant<Integer>(from));\n         }\n \n         @Override\n@@ -994,15 +989,15 @@ public StringBuilder asValue(AliasContext q) {\n     }\n \n     public static class Between<Y extends Comparable<Y>> extends PredicateImpl.And {\n-        private final ExpressionImpl<?> e;\n-        private final ExpressionImpl<?> v1;\n-        private final ExpressionImpl<?> v2;\n+        private final ExpressionImpl<? extends Y> e;\n+        private final ExpressionImpl<? extends Y> v1;\n+        private final ExpressionImpl<? extends Y> v2;\n         \n         public Between(Expression<? extends Y> v, Expression<? extends Y> x, Expression<? extends Y> y) {\n             super(new GreaterThanEqual(v,x), new LessThanEqual(v,y));\n-            e = (ExpressionImpl<?>)v;\n-            v1 = (ExpressionImpl<?>)x;\n-            v2 = (ExpressionImpl<?>)y;\n+            e = (ExpressionImpl<? extends Y>)v;\n+            v1 = (ExpressionImpl<? extends Y>)x;\n+            v2 = (ExpressionImpl<? extends Y>)y;\n         }\n         \n         public Between(Expression<? extends Y> v, Y x, Y y) {\n@@ -1182,18 +1177,14 @@ public StringBuilder asValue(AliasContext q) {\n         final ExpressionImpl<E> element;\n         final ExpressionImpl<?> collection;\n         \n-        public IsMember(Class<E> t, Expression<E> element, Expression<?> collection) {\n+        public IsMember(Expression<E> element, Expression<?> collection) {\n             super();\n             this.element = (ExpressionImpl<E>)element;\n             this.collection = (ExpressionImpl<?>)collection;\n         }\n         \n-        public IsMember(Class<E> t, E element, Expression<?> collection) {\n-            this(t, new Constant<E>(element), collection);\n-        }\n-        \n         public IsMember(E element, Expression<?> collection) {\n-            this((Class<E>)element.getClass(), element, collection);\n+            this(new Constant<E>(element), collection);\n         }\n         \n         @Override\n@@ -1567,12 +1558,16 @@ public SimpleCase(Expression<C> expr) {\n             return caseOperand;\n         }\n \n-        public SimpleCase<C,R> when(C when, Expression<? extends R> then) {\n-            whens.add(new Constant<C>(when));\n+        public SimpleCase<C,R> when(Expression<C> when, Expression<? extends R> then) {\n+            whens.add(when);\n             thens.add(then);\n             return this;\n         }\n \n+        public SimpleCase<C,R> when(C when, Expression<? extends R> then) {\n+            return when(new Constant<C>(when), then);\n+        }\n+\n         public SimpleCase<C,R> when(C when, R then) {\n             return when(when, new Expressions.Constant<R>(then));\n         }\n@@ -1828,27 +1823,4 @@ public void acceptVisit(CriteriaExpressionVisitor visitor) {\n             Expressions.acceptVisit(visitor, this, _args);\n         }\n     }\n-\n-    public static class DelegatingExpression<X> extends ExpressionImpl<X> {\n-        final ExpressionImpl<? extends X> _delegate;\n-        public DelegatingExpression(ExpressionImpl<? extends X> del) {\n-            super((Class<X>)del.getJavaType());\n-            _delegate = del;\n-        }\n-        \n-        @Override\n-        Value toValue(ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n-            return _delegate.toValue(factory, featureSelection, q);\n-        }\n-        \n-        @Override\n-        public org.apache.openjpa.kernel.exps.Expression toKernelExpression(\n-            ExpressionFactory factory, MetamodelImpl featureSelection, CriteriaQueryImpl<?> q) {\n-            return _delegate.toKernelExpression(factory, featureSelection, q);\n-        }\n-        \n-        public void acceptVisit(CriteriaExpressionVisitor visitor) {\n-            Expressions.acceptVisit(visitor, this, _delegate);\n-        }\n-    }\n }"},{"sha":"fe03480ed4f5e1c1117e4537c1db7555ac54be3f","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/OrderImpl.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/8e9696522573e9892b4b8aa56d6c311f639847ee/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/OrderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/8e9696522573e9892b4b8aa56d6c311f639847ee/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/OrderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/OrderImpl.java?ref=8e9696522573e9892b4b8aa56d6c311f639847ee","patch":"@@ -61,7 +61,12 @@ public void acceptVisit(CriteriaExpressionVisitor visitor) {\n     }\n     \n     public StringBuilder asValue(AliasContext q) {\n-        return e.asValue(q).append(_ascending ? \"\" : \" DESC\");\n+        return (e.isAutoAliased() ? e.asValue(q) : new StringBuilder(e.getAlias()))\n+            .append(_ascending ? \"\" : \" DESC\");\n+    }\n+    \n+    public StringBuilder asProjection(AliasContext q) {\n+        throw new IllegalStateException(this + \" can not be rendered as projection\");\n     }\n     \n     public StringBuilder asVariable(AliasContext q) {"},{"sha":"bb359483340e07500ae3f8fad206ba19d2ef8b3c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SelectionImpl.java","status":"modified","additions":63,"deletions":9,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/8e9696522573e9892b4b8aa56d6c311f639847ee/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SelectionImpl.java","raw_url":"https://github.com/apache/openjpa/raw/8e9696522573e9892b4b8aa56d6c311f639847ee/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SelectionImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/SelectionImpl.java?ref=8e9696522573e9892b4b8aa56d6c311f639847ee","patch":"@@ -23,35 +23,85 @@\n import javax.persistence.criteria.Expression;\n import javax.persistence.criteria.Selection;\n \n-import org.apache.openjpa.persistence.TupleElementImpl;\n-\n /**\n- * An item selected in the projection clause of  Criteria query.\n+ * An item selected in the projection clause of Criteria query.\n+ * Base implementation for all concrete expressions.\n  * \n  * @author Pinaki Poddar\n  *\n  * @param <X>\n  */\n-public class SelectionImpl<X> extends TupleElementImpl<X> \n-    implements Selection<X>, CriteriaExpression {\n+public abstract class SelectionImpl<X> implements Selection<X>, CriteriaExpression {\n+    private final Class<X> _cls;\n+    private String _alias;\n+    private Boolean _autoAliased;\n     \n+    /**\n+     * Construct with the immutable type represented by this selection term.\n+     */\n     public SelectionImpl(Class<X> cls) {\n-        super(cls);\n+        _cls = cls;\n     }\n-\n+    \n+    /**\n+     * Gets the immutable type represented by this selection term.\n+     */\n+    public Class<X> getJavaType() {\n+        return _cls;\n+    }\n+    \n+    /**\n+     * Gets the alias set of this selection term.\n+     */\n+    public String getAlias() {\n+        return _alias; \n+    }\n+    \n+    /**\n+     * Sets the alias on this selection term.\n+     */\n     public Selection<X> alias(String alias) {\n-        super.setAlias(alias);\n+        _alias = alias;\n+        _autoAliased = false;\n         return this;\n     }\n+    \n+    /**\n+     * Sets the alias of this expression internally. Only valid if the expression is not aliased explicitly\n+     * by calling {@linkplain #alias(String)}.\n+     */\n+    void setAutoAlias(String alias) {\n+        if (Boolean.FALSE.equals(_autoAliased))\n+            throw new IllegalStateException(this + \" has been aliased. Can not set alias automatically\");\n+        _alias = alias;\n+        _autoAliased = true;\n+    }\n+    \n+    /**\n+     * Affirms if the alias of this expression is assigned automatically.\n+     */\n+    boolean isAutoAliased() {\n+        return _autoAliased == null ? true : _autoAliased.booleanValue();\n+    }  \n \n+    /**\n+     * Throws IllegalStateException because a selection term, by default, consists of single value.\n+     */\n     public List<Selection<?>> getCompoundSelectionItems() {\n         throw new IllegalStateException(this + \" is not a compound selection\");\n     }\n \n+    /**\n+     * Returns false because a selection term, by default, consists of single value.\n+     */\n     public boolean isCompoundSelection() {\n         return false;\n     }\n     \n+    //  ------------------------------------------------------------------------------------\n+    //  Contract for CriteriaExpression implemented mostly as a no-op for easier derivation.\n+    //  ------------------------------------------------------------------------------------\n+    \n     public StringBuilder asValue(AliasContext q) {\n         throw new IllegalStateException(this.getClass().getSimpleName() + \" can not be rendered as value\");\n     }\n@@ -60,8 +110,12 @@ public StringBuilder asVariable(AliasContext q) {\n         throw new IllegalStateException(this.getClass().getSimpleName() + \" can not be rendered as variable\");\n     }\n     \n+    public final StringBuilder asProjection(AliasContext q) {\n+        String as = (isAutoAliased() ? \"\" : \" AS \" + getAlias());\n+        return asValue(q).append(as);\n+    }\n+    \n     public void acceptVisit(CriteriaExpressionVisitor visitor) {\n         Expressions.acceptVisit(visitor, this, (Expression<?>[])null);\n     }\n-\n }"},{"sha":"8da7232f3971573fb59080fdda8bf09532cc70e2","filename":"openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestTupleImpl.java","status":"removed","additions":0,"deletions":270,"changes":270,"blob_url":"https://github.com/apache/openjpa/blob/5113654485807a7884796562b9c62d56a2ec7999/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestTupleImpl.java","raw_url":"https://github.com/apache/openjpa/raw/5113654485807a7884796562b9c62d56a2ec7999/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestTupleImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestTupleImpl.java?ref=5113654485807a7884796562b9c62d56a2ec7999","patch":"@@ -1,270 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package org.apache.openjpa.persistence;\n-\n-import java.util.List;\n-\n-import javax.persistence.Tuple;\n-import javax.persistence.TupleElement;\n-import javax.persistence.criteria.Selection;\n-\n-import org.apache.openjpa.lib.util.Localizer;\n-\n-import junit.framework.TestCase;\n-\n-/**\n- * Test the following methods in TupleImpl\n- * <ul>\n- * <li>Tuple</li>\n- * <ul>\n- * <li>get(int)</li>\n- * <li>get(int, Class<X>)</li>\n- * <li>get(String)</li>\n- * <li>get(String, Class<X>)</li>\n- * <li>get(TupleElement<X>)</li>\n- * <li>getElements()</li>\n- * <li>toArray()</li>\n- * </ul>\n- * <li>TupleImpl</li>\n- * <ul>\n- * <li>get(Object)</li>\n- * <li>getValues()</li>\n- * <li>put(Object, Object)</li>\n- * </ul>\n- * </ul>\n- */\n-public class TestTupleImpl extends TestCase {\n-    protected Order _order = new Order();\n-    protected Product _product = new Product();\n-    protected Item _item = new Item();\n-    protected Store _store = new Store();\n-    protected UrgentOrder _urgentOrder = new UrgentOrder();\n-    protected Tuple tuple = getTuple();\n-\n-    public void setUp() {\n-    }\n-\n-    /**\n-     * Default tuple with some arbitrary pseudo entities\n-     * \n-     * @return\n-     */\n-    protected TupleImpl getTuple() {\n-        TupleElement<Order> order = new TupleElementImpl<Order>(Order.class).setAlias(\"alias1\"); \n-        TupleElement<Product> product = new TupleElementImpl<Product>(Product.class).setAlias(\"alias2\");\n-        TupleElement<Item> item = new TupleElementImpl<Item>(Item.class).setAlias(\"alias3\");\n-        TupleElement<Store> store = new TupleElementImpl<Store>(Store.class).setAlias(\"alias4\");\n-        TupleElement<UrgentOrder> urgentOrder = new TupleElementImpl<UrgentOrder>(UrgentOrder.class).setAlias(\"alias5\");\n-        TupleFactory factory = new TupleFactory(order, product, item, store, urgentOrder);\n-        TupleImpl tuple = factory.newInstance();\n-        tuple.put(0, _order);\n-        tuple.put(1, _product);\n-        tuple.put(2, _item);\n-        tuple.put(3, _store);\n-        tuple.put(4, _urgentOrder);\n-        return tuple;\n-    }\n-\n-    public void testGetInt() {\n-        assertEquals(_order, tuple.get(0));\n-        assertEquals(_product, tuple.get(1));\n-        assertEquals(_item, tuple.get(2));\n-        assertEquals(_store, tuple.get(3));\n-        assertEquals(_urgentOrder, tuple.get(4));\n-    }\n-\n-    public void testGetIntNegativeValueThrowsException() {\n-        try {\n-            Object o = tuple.get(-1);\n-            fail(\"tuple.get(-1) should throw IllegalArgumentException\");\n-            o.toString(); // clean up meaningless compiler warning\n-        } catch (IllegalArgumentException iae) {\n-            // expected\n-        }\n-    }\n-\n-    public void testGetIntOutOfRangeThrowsException() {\n-        try {\n-            Object o = tuple.get(10);\n-            fail(\"tuple.get(i) where i > size of TupleElements should throw IllegalArgumentException\");\n-            o.toString(); // clean up meaningless compiler warning\n-        } catch (IllegalArgumentException iae) {\n-            // expected\n-        }\n-        try {\n-            Object o = tuple.get(Integer.MAX_VALUE);\n-            fail(\"tuple.get(i) where i > size of TupleElements should throw IllegalArgumentException\");\n-            o.toString(); // clean up meaningless compiler warning\n-        } catch (IllegalArgumentException iae) {\n-            // expected\n-        }\n-    }\n-\n-    public void testGetIntClass() {\n-        assertEquals(_order, tuple.get(0, Order.class));\n-        assertEquals(_product, tuple.get(1, Product.class));\n-        assertEquals(_item, tuple.get(2, Item.class));\n-        assertEquals(_store, tuple.get(3, Store.class));\n-        assertEquals(_urgentOrder, tuple.get(4, UrgentOrder.class));\n-\n-        assertEquals(_urgentOrder, tuple.get(4, Order.class));\n-\n-    }\n-\n-    public void testGetIntClassExceptions() {\n-        // duplicate code, but could be useful later if impl changes.\n-        try {\n-            Object o = tuple.get(-1, Order.class);\n-            fail(\"tuple.get(-1) should throw IllegalArgumentException\");\n-            o.toString(); // clean up meaningless compiler warning\n-        } catch (IllegalArgumentException iae) {\n-            // expected\n-        }\n-        try {\n-            Object o = tuple.get(200, Product.class);\n-            fail(\"tuple.get(i) where i > size of TupleElements should throw IllegalArgumentException\");\n-            o.toString(); // clean up meaningless compiler warning\n-        } catch (IllegalArgumentException iae) {\n-            // expected\n-        }\n-\n-        try {\n-            Product product = (Product) tuple.get(0, Product.class);\n-            fail(\"Expecting IllegalArgumentException when the wrong type is specified on Tuple.get(int, Class)\");\n-            product.toString(); // remove compiler warning for unused variable <sigh>\n-        } catch (IllegalArgumentException iae) {\n-            // expected\n-        }\n-        try {\n-            tuple.get(0, UrgentOrder.class);\n-            fail(\"Should not be able to upcast Order to UrgentOrder\");\n-        } catch (IllegalArgumentException iae) {\n-            // expected\n-        }\n-    }\n-\n-    public void testGetString() {\n-        assertEquals(_order, tuple.get(\"alias1\"));\n-        assertEquals(_product, tuple.get(\"alias2\"));\n-        assertEquals(_item, tuple.get(\"alias3\"));\n-        assertEquals(_store, tuple.get(\"alias4\"));\n-        assertEquals(_urgentOrder, tuple.get(\"alias5\"));\n-\n-        try {\n-            tuple.get(\"NotAnAlias\");\n-            fail(\"Expected an IllegalArgumentException for an alias that wasn't found\");\n-        } catch (IllegalArgumentException iae) {\n-            // expected\n-        }\n-        try {\n-            tuple.get((String) null);\n-            fail(\"Expected an IllegalArgumentException for null alias\");\n-        } catch (IllegalArgumentException iae) {\n-            // expected\n-        }\n-        try {\n-            tuple.get(\"\");\n-            fail(\"Expected an IllegalArgumentException for null alias\");\n-        } catch (IllegalArgumentException iae) {\n-            // expected\n-        }\n-    }\n-\n-    public void testGetStringClass() {\n-        // TODO MDD convert to equals tests\n-        assertTrue(tuple.get(\"alias1\", Order.class) instanceof Order);\n-        assertTrue(tuple.get(\"alias2\", Product.class) instanceof Product);\n-        assertTrue(tuple.get(\"alias3\", Item.class) instanceof Item);\n-        assertTrue(tuple.get(\"alias4\", Store.class) instanceof Store);\n-\n-        try {\n-            tuple.get(\"NotAnAlias\", Product.class);\n-            fail(\"Expected an IllegalArgumentException for an alias that wasn't found\");\n-        } catch (IllegalArgumentException iae) {\n-            // expected\n-        }\n-        try {\n-            tuple.get((String) null, Item.class);\n-            fail(\"Expected an IllegalArgumentException for null alias\");\n-        } catch (IllegalArgumentException iae) {\n-            // expected\n-        }\n-        try {\n-            tuple.get(\"\", Store.class);\n-            fail(\"Expected an IllegalArgumentException for null alias\");\n-        } catch (IllegalArgumentException iae) {\n-            // expected\n-        }\n-    }\n-\n-    public void testToArray() {\n-        Object[] objects = tuple.toArray();\n-        assertEquals(5, objects.length);\n-        assertEquals(_order, objects[0]);\n-        assertEquals(_product, objects[1]);\n-        assertEquals(_item, objects[2]);\n-        assertEquals(_store, objects[3]);\n-        assertEquals(_urgentOrder, objects[4]);\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public void testGetElements() {\n-        List<TupleElement<?>> elements = tuple.getElements();\n-        assertEquals(5, elements.size());\n-\n-        TupleElement<Order> orderElement = (TupleElement<Order>) elements.get(0);\n-        TupleElement<Product> productElement = (TupleElement<Product>) elements.get(1);\n-        TupleElement<Item> itemElement = (TupleElement<Item>) elements.get(2);\n-        TupleElement<Store> storeElement = (TupleElement<Store>) elements.get(3);\n-        TupleElement<UrgentOrder> urgentOrderElement = (TupleElement<UrgentOrder>) elements.get(4);\n-\n-        assertEquals(\"alias1\", orderElement.getAlias());\n-        assertEquals(Order.class, orderElement.getJavaType());\n-        assertEquals(\"alias2\", productElement.getAlias());\n-        assertEquals(Product.class, productElement.getJavaType());\n-        assertEquals(\"alias3\", itemElement.getAlias());\n-        assertEquals(Item.class, itemElement.getJavaType());\n-        assertEquals(\"alias4\", storeElement.getAlias());\n-        assertEquals(Store.class, storeElement.getJavaType());\n-        assertEquals(\"alias5\", urgentOrderElement.getAlias());\n-        assertEquals(UrgentOrder.class, urgentOrderElement.getJavaType());\n-    }\n-    \n-    \n-\n-    // Begin fake entities.\n-    class Order {\n-        // public Order() {\n-        // new Exception().printStackTrace();\n-        // }\n-    }\n-\n-    class UrgentOrder extends Order {\n-    }\n-\n-    class Item {\n-    }\n-\n-    class Product {\n-    }\n-\n-    class Store {\n-    }\n-}"}]}

