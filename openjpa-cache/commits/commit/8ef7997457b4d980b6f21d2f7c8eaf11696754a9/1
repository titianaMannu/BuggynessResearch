{"sha":"8ef7997457b4d980b6f21d2f7c8eaf11696754a9","node_id":"MDY6Q29tbWl0MjA2MzY0OjhlZjc5OTc0NTdiNGQ5ODBiNmYyMWQyZjdjOGVhZjExNjk2NzU0YTk=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-01-17T15:35:45Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2008-01-17T15:35:45Z"},"message":"OPENJPA-437.  Changed AbstractBrokerFactory.loadPersistentTypes to be synchronized to get around the multi-threading issue during broker creation.\n\nAlso, migrated the change for OPENJPA-449 from trunk to the 1.0.x branch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@612846 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e51dd8687c6b7a601fbfd4f13aa74f6f80d03bd2","url":"https://api.github.com/repos/apache/openjpa/git/trees/e51dd8687c6b7a601fbfd4f13aa74f6f80d03bd2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8ef7997457b4d980b6f21d2f7c8eaf11696754a9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8ef7997457b4d980b6f21d2f7c8eaf11696754a9","html_url":"https://github.com/apache/openjpa/commit/8ef7997457b4d980b6f21d2f7c8eaf11696754a9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8ef7997457b4d980b6f21d2f7c8eaf11696754a9/comments","author":null,"committer":null,"parents":[{"sha":"b013b6fd4a420dcb5dffd97e6e99669e67286d3e","url":"https://api.github.com/repos/apache/openjpa/commits/b013b6fd4a420dcb5dffd97e6e99669e67286d3e","html_url":"https://github.com/apache/openjpa/commit/b013b6fd4a420dcb5dffd97e6e99669e67286d3e"}],"stats":{"total":11,"additions":8,"deletions":3},"files":[{"sha":"016159b7c2ae3c8f65967dc9d39baa87301249ae","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/8ef7997457b4d980b6f21d2f7c8eaf11696754a9/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/8ef7997457b4d980b6f21d2f7c8eaf11696754a9/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=8ef7997457b4d980b6f21d2f7c8eaf11696754a9","patch":"@@ -133,6 +133,7 @@ protected static AbstractBrokerFactory getPooledFactory(Map map) {\n      */\n     protected AbstractBrokerFactory(OpenJPAConfiguration config) {\n         _conf = config;\n+        _pcClassLoaders = new ReferenceHashSet(ReferenceHashSet.WEAK);\n     }\n \n     /**\n@@ -231,8 +232,13 @@ protected void addListeners(BrokerImpl broker) {\n     /**\n      * Load the configured persistent classes list. Performed automatically\n      * whenever a broker is created.\n+     * \n+     * This method is synchronized due to the possible creation of new brokers\n+     * (entity managers) by multiple threads (clients).  The two data structures\n+     * used by this method (_pcClassNames and _pcClassLoaders) are not thread\n+     * safe and this was an easy, efficient solution (OPENJPA-437).\n      */\n-    private void loadPersistentTypes(ClassLoader envLoader) {\n+    private synchronized void loadPersistentTypes(ClassLoader envLoader) {\n         // no listed persistent types?\n         if (_pcClassNames != null && _pcClassNames.isEmpty())\n             return;\n@@ -245,7 +251,7 @@ private void loadPersistentTypes(ClassLoader envLoader) {\n             Collection clss = _conf.getMetaDataRepositoryInstance().\n                 loadPersistentTypes(false, loader);\n             if (clss.isEmpty())\n-                _pcClassNames = Collections.EMPTY_SET;\n+                _pcClassNames = Collections.EMPTY_LIST;\n             else {\n                 _pcClassNames = new ArrayList(clss.size());\n                 for (Iterator itr = clss.iterator(); itr.hasNext();) {\n@@ -254,7 +260,6 @@ private void loadPersistentTypes(ClassLoader envLoader) {\n                     if (needsSub(cls))\n                         toRedefine.add(cls);\n                 }\n-                _pcClassLoaders = new ReferenceHashSet(ReferenceHashSet.WEAK);\n                 _pcClassLoaders.add(loader);\n             }\n         } else {"}]}

