{"sha":"8efffbdd4b07489628d6a33730b99b2a8ebcbf8e","node_id":"MDY6Q29tbWl0MjA2MzY0OjhlZmZmYmRkNGIwNzQ4OTYyOGQ2YTMzNzMwYjk5YjJhOGViY2JmOGU=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-11-07T22:38:37Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-11-07T22:38:37Z"},"message":"Test for the OpenJPAQuery.setSubclasses method.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@472310 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bdfe7fe0674ddb1fd321b55a679c70ee89e550ca","url":"https://api.github.com/repos/apache/openjpa/git/trees/bdfe7fe0674ddb1fd321b55a679c70ee89e550ca"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8efffbdd4b07489628d6a33730b99b2a8ebcbf8e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8efffbdd4b07489628d6a33730b99b2a8ebcbf8e","html_url":"https://github.com/apache/openjpa/commit/8efffbdd4b07489628d6a33730b99b2a8ebcbf8e","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8efffbdd4b07489628d6a33730b99b2a8ebcbf8e/comments","author":null,"committer":null,"parents":[{"sha":"3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4","url":"https://api.github.com/repos/apache/openjpa/commits/3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4","html_url":"https://github.com/apache/openjpa/commit/3b9fa1f25aa4e19b858e43e3ad8710e2b7dbdba4"}],"stats":{"total":168,"additions":164,"deletions":4},"files":[{"sha":"cc075dff5e195cf06d2f2e5827a073aa33d4282b","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/8efffbdd4b07489628d6a33730b99b2a8ebcbf8e/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/8efffbdd4b07489628d6a33730b99b2a8ebcbf8e/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/meta/localizer.properties?ref=8efffbdd4b07489628d6a33730b99b2a8ebcbf8e","patch":"@@ -290,7 +290,7 @@ no-meta: Type \"{0}\" does not have persistence metadata.\n bad-bk-file: Could not create a backup file for \"{0}\".\n running-all-classes: No targets were given.  Running on all classes listed in \\\n \tyour configuration, or all persistent classes in the classpath if no \\\n-\tclasses are configured.\n+\tclasses are configured.  Use -help to display tool usage information.\n fatal-change: There has been a fatal change to the definition of \"{0}\" or its \\\n \tschema since it was last mapped, or the mapping you defined is invalid:\\n\\\n \t{1}\\nOpenJPA will attempt to create a new mapping."},{"sha":"548f414b40e725aea54e88c2f539e06d108db1fc","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/8efffbdd4b07489628d6a33730b99b2a8ebcbf8e/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/8efffbdd4b07489628d6a33730b99b2a8ebcbf8e/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties?ref=8efffbdd4b07489628d6a33730b99b2a8ebcbf8e","patch":"@@ -1,10 +1,11 @@\n needs-runtime-enhance: \"{0}\" requires runtime enhancement: {1}\n runtime-enhance-pcclasses: You have enabled runtime enhancement, but have not \\\n-\tspecified the set of persistent classes.  OpenJPA must look for metadata for \\\n-\tevery loaded class, which might increase class load times significantly.\n+\tspecified the set of persistent classes.  OpenJPA must look for metadata \\\n+    for every loaded class, which might increase class load times significantly.\n running-all-classes: No targets were given.  Running on all classes in your \\\n     persistent classes list, or all metadata files in classpath directories if \\\n-\tyou have not listed your persistent classes.\n+\tyou have not listed your persistent classes.  Use -help to display tool \\\n+    usage information.\n detach-custom-ser: Type \"{0}\" is set to detach on serialize, but implements \\\n \ta custom readObject and/or writeObject method.  You cannot use custom \\\n \tserialization with detachment. "},{"sha":"bbf03fded9bc2951194e3e6517e49ff91dd9790b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntity.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/8efffbdd4b07489628d6a33730b99b2a8ebcbf8e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntity.java","raw_url":"https://github.com/apache/openjpa/raw/8efffbdd4b07489628d6a33730b99b2a8ebcbf8e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntity.java?ref=8efffbdd4b07489628d6a33730b99b2a8ebcbf8e","patch":"@@ -19,10 +19,13 @@\n import javax.persistence.Entity;\r\n import javax.persistence.GeneratedValue;\r\n import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n import javax.persistence.ManyToOne;\r\n import javax.persistence.Version;\r\n \r\n @Entity\r\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n public class ManyOneEntity {\r\n \r\n     @Id\r"},{"sha":"86ef9828c8873d047514ee0a6cdeec0da850fcb6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntitySub.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/8efffbdd4b07489628d6a33730b99b2a8ebcbf8e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntitySub.java","raw_url":"https://github.com/apache/openjpa/raw/8efffbdd4b07489628d6a33730b99b2a8ebcbf8e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntitySub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntitySub.java?ref=8efffbdd4b07489628d6a33730b99b2a8ebcbf8e","patch":"@@ -0,0 +1,33 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class ManyOneEntitySub \r\n+    extends ManyOneEntity {\r\n+\r\n+    private int subInt;\r\n+\r\n+    public int getSubInt() { \r\n+        return subInt; \r\n+    }\r\n+\r\n+    public void setSubInt(int subInt) { \r\n+        this.subInt = subInt; \r\n+    }\r\n+}\r"},{"sha":"9f306c350e3e1dfcc3b98fc2958e30fc75be567f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryExcludingSubclasses.java","status":"added","additions":123,"deletions":0,"changes":123,"blob_url":"https://github.com/apache/openjpa/blob/8efffbdd4b07489628d6a33730b99b2a8ebcbf8e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryExcludingSubclasses.java","raw_url":"https://github.com/apache/openjpa/raw/8efffbdd4b07489628d6a33730b99b2a8ebcbf8e/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryExcludingSubclasses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryExcludingSubclasses.java?ref=8efffbdd4b07489628d6a33730b99b2a8ebcbf8e","patch":"@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n+import javax.persistence.Query;\n+\n+import junit.framework.TestCase;\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+\n+/**\n+ * Test that we can exclude subclass instances from query results.\n+ *\n+ * @author Abe White\n+ */\n+public class TestQueryExcludingSubclasses\n+    extends TestCase {\n+\n+    private EntityManagerFactory emf;\n+\n+    public void setUp() {\n+        Map props = new HashMap();\n+        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" \n+            + ManyOneEntity.class.getName() + \";\"\n+            + ManyOneEntitySub.class.getName() + \")\");\n+        emf = Persistence.createEntityManagerFactory(\"test\", props);\n+\n+        ManyOneEntity e1 = new ManyOneEntity();\n+        e1.setName(\"e1\"); \n+        ManyOneEntity e2 = new ManyOneEntity();\n+        e2.setName(\"e2\"); \n+        ManyOneEntity invalid = new ManyOneEntity();\n+        invalid.setName(\"invalid\"); \n+        ManyOneEntitySub esub1 = new ManyOneEntitySub();\n+        esub1.setName(\"esub1\"); \n+        ManyOneEntitySub esub2 = new ManyOneEntitySub();\n+        esub2.setName(\"esub2\"); \n+        ManyOneEntitySub invalidsub = new ManyOneEntitySub();\n+        invalidsub.setName(\"invalidsub\"); \n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(e1);\n+        em.persist(e2);\n+        em.persist(invalid);\n+        em.persist(esub1);\n+        em.persist(esub2);\n+        em.persist(invalidsub);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void tearDown() {\n+        if (emf == null)\n+            return;\n+        try {\n+            EntityManager em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            em.createQuery(\"delete from ManyOneEntity\").executeUpdate();\n+            em.getTransaction().commit();\n+            em.close();\n+            emf.close();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void testQuery() {\n+        EntityManager em = emf.createEntityManager();\n+        Query q = em.createQuery(\"select e from ManyOneEntity e \"\n+            + \"where e.name like 'e%' order by e.name asc\");\n+        List<ManyOneEntity> res = (List<ManyOneEntity>) q.getResultList();\n+        assertEquals(4, res.size());\n+        for (int i = 0; i < 2; i++) {\n+            assertEquals(ManyOneEntity.class, res.get(i).getClass());\n+            assertEquals(\"e\" + (i + 1), res.get(i).getName());\n+        }\n+        for (int i = 0; i < 2; i++) {\n+            assertEquals(ManyOneEntitySub.class, res.get(i + 2).getClass());\n+            assertEquals(\"esub\" + (i + 1), res.get(i + 2).getName());\n+        }\n+        em.close();\n+    }\n+\n+    public void testQueryExcludingSubclasses() {\n+        EntityManager em = emf.createEntityManager();\n+        Query q = em.createQuery(\"select e from ManyOneEntity e \"\n+            + \"where e.name like 'e%' order by e.name asc\");\n+        ((OpenJPAQuery) q).setSubclasses(false);\n+        List<ManyOneEntity> res = (List<ManyOneEntity>) q.getResultList();\n+        assertEquals(2, res.size());\n+        for (int i = 0; i < res.size(); i++) {\n+            assertEquals(ManyOneEntity.class, res.get(i).getClass());\n+            assertEquals(\"e\" + (i + 1), res.get(i).getName());\n+        }\n+        em.close();\n+    }\n+\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestQueryExcludingSubclasses.class);\n+    }\n+}\n+"}]}

