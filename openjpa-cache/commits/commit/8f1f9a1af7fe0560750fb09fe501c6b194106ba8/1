{"sha":"8f1f9a1af7fe0560750fb09fe501c6b194106ba8","node_id":"MDY6Q29tbWl0MjA2MzY0OjhmMWY5YTFhZjdmZTA1NjA3NTBmYjA5ZmU1MDFjNmIxOTQxMDZiYTg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-05-03T06:45:58Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-05-03T06:45:58Z"},"message":"[OPENJPA-2698] Applying the provided patch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1793617 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"de823e09c3abb9669a4dea01eae790c5839bfa31","url":"https://api.github.com/repos/apache/openjpa/git/trees/de823e09c3abb9669a4dea01eae790c5839bfa31"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8f1f9a1af7fe0560750fb09fe501c6b194106ba8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8f1f9a1af7fe0560750fb09fe501c6b194106ba8","html_url":"https://github.com/apache/openjpa/commit/8f1f9a1af7fe0560750fb09fe501c6b194106ba8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8f1f9a1af7fe0560750fb09fe501c6b194106ba8/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"49c1478cf3f107d9f7069bf2102d8cf0b6ca2b12","url":"https://api.github.com/repos/apache/openjpa/commits/49c1478cf3f107d9f7069bf2102d8cf0b6ca2b12","html_url":"https://github.com/apache/openjpa/commit/49c1478cf3f107d9f7069bf2102d8cf0b6ca2b12"}],"stats":{"total":53,"additions":53,"deletions":0},"files":[{"sha":"dd817f9c7e2ff6b426d584e70574cee6f3f4cfde","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Employee.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/8f1f9a1af7fe0560750fb09fe501c6b194106ba8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/8f1f9a1af7fe0560750fb09fe501c6b194106ba8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Employee.java?ref=8f1f9a1af7fe0560750fb09fe501c6b194106ba8","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.openjpa.persistence.jdbc.sqlcache;\n \n+import java.util.Date;\n+\n import javax.persistence.*;\n \n @Entity\n@@ -45,6 +47,10 @@\n \t@Enumerated(EnumType.ORDINAL)\n \tprivate Category hireStatus;\n \n+\tprivate Date startDate;\n+\n+\tprivate Date endDate;\n+\n \tpublic boolean isManager() {\n         return isManager;\n     }\n@@ -97,4 +103,19 @@ public Category getCurrentStatus(Category status) {\n         return status;\n     }\n \n+\tpublic Date getStartDate() {\n+\t\treturn startDate;\n+\t}\n+\n+\tpublic void setStartDate(Date startDate) {\n+\t\tthis.startDate = startDate;\n+\t}\n+\n+\tpublic Date getEndDate() {\n+\t\treturn endDate;\n+\t}\n+\n+\tpublic void setEndDate(Date endDate) {\n+\t\tthis.endDate = endDate;\n+\t}\n }"},{"sha":"8bf9a5637359a013641d8aaf4a786c79a8626d1a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","status":"modified","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/8f1f9a1af7fe0560750fb09fe501c6b194106ba8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/8f1f9a1af7fe0560750fb09fe501c6b194106ba8/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java?ref=8f1f9a1af7fe0560750fb09fe501c6b194106ba8","patch":"@@ -20,7 +20,10 @@\n \n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Calendar;\n import java.util.Collections;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Properties;\n@@ -84,6 +87,12 @@\n     public static final int[]    START_YEARS      = {1900, 2000, 2010 };\n \tpublic static final String[] DEPARTMENT_NAMES = {\"Marketing\", \"Sales\", \"Engineering\" };\n     public static final String[] EMPLOYEE_NAMES   = {\"Tom\", \"Dick\", \"Harray\" };\n+    public static final Date[] EMPLOYEE_START_DATES = {new GregorianCalendar(2017, Calendar.FEBRUARY, 12).getTime(), \n+    \t\tnew GregorianCalendar(2014, Calendar.JANUARY, 1).getTime(), \n+    \t\tnew GregorianCalendar(2014, Calendar.JANUARY, 1).getTime()};\n+    public static final Date[] EMPLOYEE_END_DATES = {new GregorianCalendar(2999, Calendar.JANUARY, 1).getTime(), \n+    \t\tnew GregorianCalendar(2999, Calendar.JANUARY, 1).getTime(), \n+    \t\tnew GregorianCalendar(2016, Calendar.DECEMBER, 31).getTime()};\n \tpublic static final String[] CITY_NAMES       = {\"Tulsa\", \"Durban\", \"Harlem\"};\n \t\n     public static final String EXCLUDED_QUERY_1 = \"select count(p) from Company p\";\n@@ -145,6 +154,9 @@ void createTestData() {\n \t            for (int k = 0; k < EMPLOYEE_NAMES.length; k++) {\n \t                Employee emp = new Employee();\n \t                emp.setName(EMPLOYEE_NAMES[k]);\n+\t                emp.setStartDate(EMPLOYEE_START_DATES[k]);\n+\t                emp.setEndDate(EMPLOYEE_END_DATES[k]);\n+\n \t                Address addr = new Address();\n \t                addr.setCity(CITY_NAMES[k]);\n                     em.persist(emp);\n@@ -1323,6 +1335,26 @@ long run(String jpql, boolean isNamedQuery, Object[] params, int expectedCount,\n         return stats.get(N/2);\n     }   \n     \n+    public void testRepeatedQueryInBetweenParameters() {\n+    \tOpenJPAEntityManager em = emf.createEntityManager();\n+    \tem.clear();\n+\n+    \tString jpql1 = \"SELECT e FROM Employee e\";\n+    \tint employeeSize = em.createQuery(jpql1, Employee.class).getResultList().size();\n+\n+    \tString jpql2 = \"SELECT e FROM Employee e WHERE :baseDate between e.startDate AND e.endDate\";\n+    \tTypedQuery<Employee> q1 = em.createQuery(jpql2, Employee.class);\n+    \tq1.setParameter(\"baseDate\", new GregorianCalendar(2016, Calendar.JUNE, 1).getTime());\n+    \tint count2016 = (int)(employeeSize * ((double)2/3));\n+\n+\t\tassertEquals(count2016, q1.getResultList().size());\n+\n+\t\tTypedQuery<Employee> q2 = em.createQuery(jpql2, Employee.class);\n+    \tq2.setParameter(\"baseDate\", new GregorianCalendar(2017, Calendar.JUNE, 1).getTime());\n+    \tint count2017 = (int)(employeeSize * ((double)2/3));\n+\n+\t\tassertEquals(count2017, q2.getResultList().size());\n+    }\n     \n     void parameterize(Query q, Object[] params) {\n         if (params == null)"}]}

