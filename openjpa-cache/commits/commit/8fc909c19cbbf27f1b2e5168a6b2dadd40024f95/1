{"sha":"8fc909c19cbbf27f1b2e5168a6b2dadd40024f95","node_id":"MDY6Q29tbWl0MjA2MzY0OjhmYzkwOWMxOWNiYmYyN2YxYjJlNTE2OGE2YjJkYWRkNDAwMjRmOTU=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2008-08-27T16:39:29Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2008-08-27T16:39:29Z"},"message":"Apply patch for OPENJPA-699.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@689518 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8bc40ba41d8bad875d20c8313267e2d34a3ec686","url":"https://api.github.com/repos/apache/openjpa/git/trees/8bc40ba41d8bad875d20c8313267e2d34a3ec686"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/8fc909c19cbbf27f1b2e5168a6b2dadd40024f95","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/8fc909c19cbbf27f1b2e5168a6b2dadd40024f95","html_url":"https://github.com/apache/openjpa/commit/8fc909c19cbbf27f1b2e5168a6b2dadd40024f95","comments_url":"https://api.github.com/repos/apache/openjpa/commits/8fc909c19cbbf27f1b2e5168a6b2dadd40024f95/comments","author":null,"committer":null,"parents":[{"sha":"cb3e1705f59e37319e9aa34f4a1220cd0d542f24","url":"https://api.github.com/repos/apache/openjpa/commits/cb3e1705f59e37319e9aa34f4a1220cd0d542f24","html_url":"https://github.com/apache/openjpa/commit/cb3e1705f59e37319e9aa34f4a1220cd0d542f24"}],"stats":{"total":337,"additions":249,"deletions":88},"files":[{"sha":"349b3de7aaf319664bb03c34006caebcfa063a68","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","status":"modified","additions":249,"deletions":88,"changes":337,"blob_url":"https://github.com/apache/openjpa/blob/8fc909c19cbbf27f1b2e5168a6b2dadd40024f95/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","raw_url":"https://github.com/apache/openjpa/raw/8fc909c19cbbf27f1b2e5168a6b2dadd40024f95/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/jdbc/LoggingConnectionDecorator.java?ref=8fc909c19cbbf27f1b2e5168a6b2dadd40024f95","patch":"@@ -222,70 +222,107 @@ public LoggingConnection(Connection conn) throws SQLException {\n \n         protected PreparedStatement prepareStatement(String sql, boolean wrap)\n             throws SQLException {\n+            SQLException err = null;\n             try {\n                 PreparedStatement stmnt = super.prepareStatement(sql, false);\n                 return new LoggingPreparedStatement(stmnt, sql);\n             } catch (SQLException se) {\n-                throw wrap(se, sql);\n+                err = wrap(se, sql);\n+                throw err;\n+            }  finally {\n+                handleSQLErrors(err);\n             }\n         }\n \n         protected PreparedStatement prepareStatement(String sql, int rsType,\n             int rsConcur, boolean wrap) throws SQLException {\n+            SQLException err = null;\n             try {\n                 PreparedStatement stmnt = super.prepareStatement\n                     (sql, rsType, rsConcur, false);\n                 return new LoggingPreparedStatement(stmnt, sql);\n             } catch (SQLException se) {\n-                throw wrap(se, sql);\n+                err =  wrap(se, sql);\n+                throw err;\n+            } finally {\n+                handleSQLErrors(err);\n             }\n         }\n \n         protected Statement createStatement(boolean wrap) throws SQLException {\n-            Statement stmnt = super.createStatement(false);\n-            return new LoggingStatement(stmnt);\n+            SQLException err = null;\n+            try {\n+                Statement stmnt = super.createStatement(false);\n+                return new LoggingStatement(stmnt);\n+            }catch (SQLException se) {\n+                err = se;\n+                throw se;\n+            } finally {\n+                handleSQLErrors(err);\n+            }\n         }\n \n         protected Statement createStatement(int type, int concurrency,\n             boolean wrap) throws SQLException {\n-            Statement stmnt = super.createStatement(type, concurrency, false);\n-            return new LoggingStatement(stmnt);\n+            SQLException err = null;\n+            try {\n+                Statement stmnt = super.createStatement(type, concurrency, \n+                    false);\n+                return new LoggingStatement(stmnt);\n+            } catch (SQLException se) {\n+                err = se;\n+                throw se;\n+            } finally {\n+                handleSQLErrors(err);\n+            }\n         }\n         \n         protected CallableStatement prepareCall(String sql, boolean wrap) \n             throws SQLException {\n-        \ttry {\n-        \t\tCallableStatement stmt = super.prepareCall(sql, wrap);\n-        \t\treturn new LoggingCallableStatement(stmt, sql);\n-        \t} catch (SQLException se) {\n-        \t\tthrow wrap(se, sql);\n-        \t}\n+            SQLException err = null;\n+            try {\n+                CallableStatement stmt = super.prepareCall(sql, wrap);\n+                return new LoggingCallableStatement(stmt, sql);\n+            } catch (SQLException se) {\n+                err = wrap(se, sql);\n+                throw err;\n+            } finally {\n+                handleSQLErrors(err);\n+            }\n         }\n \n         public void commit() throws SQLException {\n             long start = System.currentTimeMillis();\n+            SQLException err = null;            \n             try {\n                 super.commit();\n+            } catch (SQLException se) {\n+                err = se;\n+                throw se;\n             } finally {\n                 if (_logs.isJDBCEnabled())\n                     _logs.logJDBC(\"commit\", start, this);\n-                handleSQLWarning();\n+                handleSQLErrors(err);\n             }\n         }\n \n         public void rollback() throws SQLException {\n             long start = System.currentTimeMillis();\n+            SQLException err = null;            \n             try {\n                 super.rollback();\n+            } catch (SQLException se) {\n+                err = se;\n+                throw se;\n             } finally {\n                 if (_logs.isJDBCEnabled())\n                     _logs.logJDBC(\"rollback\", start, this);\n-                handleSQLWarning();\n+                handleSQLErrors(err);\n             }\n         }\n \n         public void close() throws SQLException {\n-            long start = System.currentTimeMillis();\n+            long start = System.currentTimeMillis();       \n             try {\n                 super.close();\n             } finally {\n@@ -296,30 +333,42 @@ public void close() throws SQLException {\n \n         public Savepoint setSavepoint() throws SQLException {\n             long start = System.currentTimeMillis();\n+            SQLException err = null;            \n             try {\n                 return super.setSavepoint();\n+            } catch (SQLException se) {\n+                err = se;\n+                throw se;\n             } finally {\n                 if (_logs.isJDBCEnabled())\n                     _logs.logJDBC(\"savepoint\", start, this);\n-                handleSQLWarning();\n+                handleSQLErrors(err);\n             }\n         }\n \n         public Savepoint setSavepoint(String name) throws SQLException {\n             long start = System.currentTimeMillis();\n+            SQLException err = null;            \n             try {\n                 return super.setSavepoint(name);\n+            } catch (SQLException se) {\n+                err = se;\n+                throw se;\n             } finally {\n                 if (_logs.isJDBCEnabled())\n                     _logs.logJDBC(\"savepoint: \" + name, start, this);\n-                handleSQLWarning();\n+                handleSQLErrors(err);\n             }\n         }\n \n         public void rollback(Savepoint savepoint) throws SQLException {\n             long start = System.currentTimeMillis();\n+            SQLException err = null;            \n             try {\n                 super.rollback(savepoint);\n+            } catch (SQLException se) {\n+                err = se;\n+                throw se;\n             } finally {\n                 if (_logs.isJDBCEnabled()) {\n                     String name = null;\n@@ -330,14 +379,18 @@ public void rollback(Savepoint savepoint) throws SQLException {\n                     }\n                     _logs.logJDBC(\"rollback: \" + name, start, this);\n                 }\n-                handleSQLWarning();\n+                handleSQLErrors(err);\n             }\n         }\n \n         public void releaseSavepoint(Savepoint savepoint) throws SQLException {\n             long start = System.currentTimeMillis();\n+            SQLException err = null;            \n             try {\n                 super.releaseSavepoint(savepoint);\n+            } catch (SQLException se) {\n+                err = se;\n+                throw se;\n             } finally {\n                 if (_logs.isJDBCEnabled()) {\n                     String name = null;\n@@ -348,66 +401,85 @@ public void releaseSavepoint(Savepoint savepoint) throws SQLException {\n                     }\n                     _logs.logJDBC(\"release: \" + name, start, this);\n                 }\n-                handleSQLWarning();\n+                handleSQLErrors(err);\n             }\n         }\n \n         protected Statement createStatement(int resultSetType,\n             int resultSetConcurrency, int resultSetHoldability, boolean wrap)\n             throws SQLException {\n-            Statement stmnt = super.createStatement(resultSetType,\n-                resultSetConcurrency, resultSetHoldability, false);\n-            handleSQLWarning();\n-            return new LoggingStatement(stmnt);\n+            SQLException err = null;\n+            try {\n+                Statement stmnt = super.createStatement(resultSetType,\n+                    resultSetConcurrency, resultSetHoldability, false);\n+                return new LoggingStatement(stmnt);\n+            }catch (SQLException se) {\n+                err = se;\n+                throw se;\n+            } finally {\n+                handleSQLErrors(err);\n+            }\n         }\n \n         protected PreparedStatement prepareStatement(String sql,\n             int resultSetType, int resultSetConcurrency,\n             int resultSetHoldability, boolean wrap) throws SQLException {\n+            SQLException err = null;\n             try {\n                 PreparedStatement stmnt = super.prepareStatement\n                     (sql, resultSetType, resultSetConcurrency,\n                         resultSetHoldability, false);\n-                handleSQLWarning();\n                 return new LoggingPreparedStatement(stmnt, sql);\n             } catch (SQLException se) {\n-                throw wrap(se, sql);\n+                err = wrap(se, sql);\n+                throw err;\n+            } finally {\n+                handleSQLErrors(err);\n             }\n         }\n \n         protected PreparedStatement prepareStatement(String sql,\n             int autoGeneratedKeys, boolean wrap) throws SQLException {\n+            SQLException err = null;\n             try {\n                 PreparedStatement stmnt = super.prepareStatement\n                     (sql, autoGeneratedKeys, false);\n-                handleSQLWarning();\n                 return new LoggingPreparedStatement(stmnt, sql);\n             } catch (SQLException se) {\n-                throw wrap(se, sql);\n+                err = wrap(se, sql);\n+                throw err;\n+            } finally {\n+                handleSQLErrors(err);\n             }\n         }\n \n         protected PreparedStatement prepareStatement(String sql,\n             int[] columnIndexes, boolean wrap) throws SQLException {\n+            SQLException err = null;\n             try {\n                 PreparedStatement stmnt = super.prepareStatement\n                     (sql, columnIndexes, false);\n-                handleSQLWarning();\n                 return new LoggingPreparedStatement(stmnt, sql);\n             } catch (SQLException se) {\n-                throw wrap(se, sql);\n+                err = wrap(se, sql);\n+                throw err;\n+            } finally {\n+                handleSQLErrors(err);\n             }\n         }\n \n         protected PreparedStatement prepareStatement(String sql,\n             String[] columnNames, boolean wrap) throws SQLException {\n+            SQLException err = null;\n             try {\n                 PreparedStatement stmnt = super.prepareStatement\n                     (sql, columnNames, false);\n-                handleSQLWarning();\n                 return new LoggingPreparedStatement(stmnt, sql);\n             } catch (SQLException se) {\n-                throw wrap(se, sql);\n+                err = wrap(se, sql);\n+                throw err;\n+            } finally {\n+                handleSQLErrors(err);\n             }\n         }\n \n@@ -439,55 +511,74 @@ private void logBatchSQL(Statement stmnt) throws SQLException {\n             if (_logs.isSQLEnabled())\n                 _logs.logSQL(\"executing batch \" + stmnt, this);\n         }\n-\n+        \n         /**\n          * Handle any {@link SQLWarning}s on the current {@link Connection}.\n-         *\n+         * Chain throwed SQLWarnings to SQLException.\n          * @see #handleSQLWarning(SQLWarning)\n          */\n-        private void handleSQLWarning() throws SQLException {\n+        private void handleSQLErrors(SQLException err) throws SQLException {\n             if (_warningAction == WARN_IGNORE)\n                 return;\n \n             try {\n                 handleSQLWarning(getWarnings());\n+            } catch (SQLException warning) {\n+                if (err != null)\n+                    err.setNextException(warning);\n+                else\n+                    throw warning;\n             } finally {\n                 clearWarnings();\n             }\n         }\n \n         /**\n          * Handle any {@link SQLWarning}s on the specified {@link Statement}.\n+         * Chain throwed SQLWarnings to SQLException.\n          *\n          * @see #handleSQLWarning(SQLWarning)\n          */\n-        private void handleSQLWarning(Statement stmnt) throws SQLException {\n+        private void handleSQLErrors(Statement stmnt, SQLException err) \n+            throws SQLException {\n             if (_warningAction == WARN_IGNORE)\n-                return;\n-\n+                return; \n+            \n             try {\n                 handleSQLWarning(stmnt.getWarnings());\n+            } catch (SQLException warning) {\n+                if (err != null)\n+                    err.setNextException(warning);\n+                else\n+                    throw warning;\n             } finally {\n                 stmnt.clearWarnings();\n             }\n-        }\n-\n+        }        \n+        \n         /**\n          * Handle any {@link SQLWarning}s on the specified {@link ResultSet}.\n-         *\n+         * Chain throwed SQLWarnings to SQLException.\n+         * \n          * @see #handleSQLWarning(SQLWarning)\n          */\n-        private void handleSQLWarning(ResultSet rs) throws SQLException {\n+        private void handleSQLErrors(ResultSet rs, SQLException err) \n+            throws SQLException {\n             if (_warningAction == WARN_IGNORE)\n                 return;\n-\n+            \n             try {\n                 handleSQLWarning(rs.getWarnings());\n+            } catch (SQLException warning){\n+                if (err != null)\n+                    err.setNextException(warning);\n+                else\n+                    throw warning;\n             } finally {\n                 rs.clearWarnings();\n             }\n         }\n-\n+        \n         /**\n          * Handle the specified {@link SQLWarning} depending on the\n          * setting of the {@link #setWarningAction} attribute.\n@@ -753,41 +844,47 @@ protected ResultSet executeQuery(String sql, boolean wrap)\n                 _sql = sql;\n                 logSQL(this);\n                 long start = System.currentTimeMillis();\n+                SQLException err = null;\n                 try {\n                     return super.executeQuery(sql, wrap);\n-                } catch (SQLException se) {\n-                    throw wrap(se, LoggingStatement.this);\n+                } catch (SQLException se) {               \t\n+                    err = wrap(se, LoggingStatement.this);\n+                    throw err;\n                 } finally {\n                     logTime(start);\n-                    handleSQLWarning(LoggingStatement.this);\n+                    handleSQLErrors(LoggingStatement.this, err);\n                 }\n             }\n \n             public int executeUpdate(String sql) throws SQLException {\n                 _sql = sql;\n                 logSQL(this);\n                 long start = System.currentTimeMillis();\n+                SQLException err = null;\n                 try {\n                     return super.executeUpdate(sql);\n-                } catch (SQLException se) {\n-                    throw wrap(se, LoggingStatement.this);\n+                } catch (SQLException se) {                \t\n+                    err = wrap(se, LoggingStatement.this);\n+                    throw err;\n                 } finally {\n                     logTime(start);\n-                    handleSQLWarning(LoggingStatement.this);\n+                    handleSQLErrors(LoggingStatement.this, err);\n                 }\n             }\n \n             public boolean execute(String sql) throws SQLException {\n                 _sql = sql;\n                 logSQL(this);\n                 long start = System.currentTimeMillis();\n+                SQLException err = null;\n                 try {\n                     return super.execute(sql);\n                 } catch (SQLException se) {\n-                    throw wrap(se, LoggingStatement.this);\n+                    err = wrap(se, LoggingStatement.this);\n+                    throw err;\n                 } finally {\n                     logTime(start);\n-                    handleSQLWarning(LoggingStatement.this);\n+                    handleSQLErrors(LoggingStatement.this, err);\n                 }\n             }\n         }\n@@ -815,76 +912,87 @@ protected ResultSet executeQuery(String sql, boolean wrap)\n                 throws SQLException {\n                 logSQL(this);\n                 long start = System.currentTimeMillis();\n+                SQLException err = null;\n                 try {\n                     return super.executeQuery(sql, wrap);\n                 } catch (SQLException se) {\n-                    throw wrap(se, LoggingPreparedStatement.this);\n+                    err = wrap(se, LoggingPreparedStatement.this);\n+                    throw err;\n                 } finally {\n                     logTime(start);\n                     clearLogParameters(true);\n-                    handleSQLWarning(LoggingPreparedStatement.this);\n+                    handleSQLErrors(LoggingPreparedStatement.this, err);\n                 }\n             }\n \n             public int executeUpdate(String sql) throws SQLException {\n                 logSQL(this);\n                 long start = System.currentTimeMillis();\n+                SQLException err = null;\n                 try {\n                     return super.executeUpdate(sql);\n                 } catch (SQLException se) {\n-                    throw wrap(se, LoggingPreparedStatement.this);\n+                    err =  wrap(se, LoggingPreparedStatement.this);\n+                    throw err;\n                 } finally {\n                     logTime(start);\n                     clearLogParameters(true);\n-                    handleSQLWarning(LoggingPreparedStatement.this);\n+                    handleSQLErrors(LoggingPreparedStatement.this, err);\n                 }\n             }\n \n             public boolean execute(String sql) throws SQLException {\n                 logSQL(this);\n                 long start = System.currentTimeMillis();\n+                SQLException err = null;\n                 try {\n                     return super.execute(sql);\n                 } catch (SQLException se) {\n-                    throw wrap(se, LoggingPreparedStatement.this);\n+                    err = wrap(se, LoggingPreparedStatement.this);\n+                    throw err;\n                 } finally {\n                     logTime(start);\n                     clearLogParameters(true);\n-                    handleSQLWarning(LoggingPreparedStatement.this);\n+                    handleSQLErrors(LoggingPreparedStatement.this, err);\n                 }\n             }\n \n             protected ResultSet executeQuery(boolean wrap) throws SQLException {\n                 logSQL(this);\n                 long start = System.currentTimeMillis();\n+                SQLException err = null;\n                 try {\n                     return super.executeQuery(wrap);\n                 } catch (SQLException se) {\n-                    throw wrap(se, LoggingPreparedStatement.this);\n+                    err = wrap(se, LoggingPreparedStatement.this);\n+                    throw err;\n                 } finally {\n                     logTime(start);\n                     clearLogParameters(true);\n-                    handleSQLWarning(LoggingPreparedStatement.this);\n+                    handleSQLErrors(LoggingPreparedStatement.this, err);\n                 }\n             }\n \n             public int executeUpdate() throws SQLException {\n                 logSQL(this);\n                 long start = System.currentTimeMillis();\n+                SQLException err = null;\n                 try {\n                     return super.executeUpdate();\n                 } catch (SQLException se) {\n-                    throw wrap(se, LoggingPreparedStatement.this);\n+                    err = wrap(se, LoggingPreparedStatement.this);\n+                    throw err;\n                 } finally {\n                     logTime(start);\n                     clearLogParameters(true);\n-                    handleSQLWarning(LoggingPreparedStatement.this);\n+                    handleSQLErrors(LoggingPreparedStatement.this, err);\n                 }\n             }\n \n             public int[] executeBatch() throws SQLException {\n                 logBatchSQL(this);\n                 long start = System.currentTimeMillis();\n+                SQLException err = null;\n                 try {\n                     return super.executeBatch();\n                 } catch (SQLException se) {\n@@ -920,25 +1028,28 @@ public int executeUpdate() throws SQLException {\n                                 _params = (List) _paramBatch.get(index);\n                         }\n                     }\n-                    throw wrap(se, LoggingPreparedStatement.this);\n+                    err = wrap(se, LoggingPreparedStatement.this);\n+                    throw err;\n                 } finally {\n                     logTime(start);\n                     clearLogParameters(true);\n-                    handleSQLWarning(LoggingPreparedStatement.this);\n+                    handleSQLErrors(LoggingPreparedStatement.this, err);\n                 }\n             }\n \n             public boolean execute() throws SQLException {\n                 logSQL(this);\n                 long start = System.currentTimeMillis();\n+                SQLException err = null;\n                 try {\n                     return super.execute();\n                 } catch (SQLException se) {\n-                    throw wrap(se, LoggingPreparedStatement.this);\n+                    err = wrap(se, LoggingPreparedStatement.this);\n+                    throw err;\n                 } finally {\n                     logTime(start);\n                     clearLogParameters(true);\n-                    handleSQLWarning(LoggingPreparedStatement.this);\n+                    handleSQLErrors(LoggingPreparedStatement.this, err);\n                 }\n             }\n \n@@ -1235,74 +1346,110 @@ public LoggingResultSet(ResultSet rs, Statement stmnt) {\n             }\n \n             public boolean next() throws SQLException {\n+                SQLException err = null;\n                 try {\n                     return super.next();\n+                } catch (SQLException se) {\n+                    err = se;\n+                    throw se;\n                 } finally {\n-                    handleSQLWarning(LoggingResultSet.this);\n+                    handleSQLErrors(LoggingResultSet.this, err);\n                 }\n             }\n \n             public void close() throws SQLException {\n+                SQLException err = null;            \t\n                 try {\n                     super.close();\n+                } catch (SQLException se) {\n+                    err = se;\n+                    throw se;\n                 } finally {\n-                    handleSQLWarning(LoggingResultSet.this);\n+                    handleSQLErrors(LoggingResultSet.this, err);\n                 }\n             }\n \n             public void beforeFirst() throws SQLException {\n+                SQLException err = null;            \t\n                 try {\n                     super.beforeFirst();\n+                } catch (SQLException se) {\n+                    err = se;\n+                    throw se;\n                 } finally {\n-                    handleSQLWarning(LoggingResultSet.this);\n+                    handleSQLErrors(LoggingResultSet.this, err);\n                 }\n             }\n \n             public void afterLast() throws SQLException {\n+                SQLException err = null;            \t\n                 try {\n                     super.afterLast();\n+                } catch (SQLException se) {\n+                    err = se;\n+                    throw se;\n                 } finally {\n-                    handleSQLWarning(LoggingResultSet.this);\n+                    handleSQLErrors(LoggingResultSet.this, err);\n                 }\n             }\n \n             public boolean first() throws SQLException {\n+                SQLException err = null;            \t\n                 try {\n                     return super.first();\n+                } catch (SQLException se) {\n+                    err = se;\n+                    throw se;\n                 } finally {\n-                    handleSQLWarning(LoggingResultSet.this);\n+                    handleSQLErrors(LoggingResultSet.this, err);\n                 }\n             }\n \n             public boolean last() throws SQLException {\n+                SQLException err = null;            \t\n                 try {\n                     return super.last();\n+                } catch (SQLException se) {\n+                    err = se;\n+                    throw se;\n                 } finally {\n-                    handleSQLWarning(LoggingResultSet.this);\n+                    handleSQLErrors(LoggingResultSet.this, err);\n                 }\n             }\n \n             public boolean absolute(int a) throws SQLException {\n+                SQLException err = null;            \t\n                 try {\n                     return super.absolute(a);\n+                } catch (SQLException se) {\n+                    err = se;\n+                    throw se;\n                 } finally {\n-                    handleSQLWarning(LoggingResultSet.this);\n+                    handleSQLErrors(LoggingResultSet.this, err);\n                 }\n             }\n \n             public boolean relative(int a) throws SQLException {\n+                SQLException err = null;            \t\n                 try {\n                     return super.relative(a);\n+                } catch (SQLException se) {\n+                    err = se;\n+                    throw se;\n                 } finally {\n-                    handleSQLWarning(LoggingResultSet.this);\n+                    handleSQLErrors(LoggingResultSet.this, err);\n                 }\n             }\n \n             public boolean previous() throws SQLException {\n+                SQLException err = null;            \t\n                 try {\n                     return super.previous();\n+                } catch (SQLException se) {\n+                    err = se;\n+                    throw se;\n                 } finally {\n-                    handleSQLWarning(LoggingResultSet.this);\n+                    handleSQLErrors(LoggingResultSet.this, err);\n                 }\n             }\n         }\n@@ -1334,76 +1481,87 @@ protected ResultSet executeQuery(String sql, boolean wrap)\n                 throws SQLException {\n                 logSQL(this);\n                 long start = System.currentTimeMillis();\n+                SQLException err = null;\n                 try {\n                     return super.executeQuery(sql, wrap);\n                 } catch (SQLException se) {\n-                    throw wrap(se, LoggingCallableStatement.this);\n+                    err = wrap(se, LoggingCallableStatement.this);\n+                    throw err;\n                 } finally {\n                     logTime(start);\n                     clearLogParameters(true);\n-                    handleSQLWarning(LoggingCallableStatement.this);\n+                    handleSQLErrors(LoggingCallableStatement.this, err);\n                 }\n             }\n \n             public int executeUpdate(String sql) throws SQLException {\n                 logSQL(this);\n                 long start = System.currentTimeMillis();\n+                SQLException err = null;\n                 try {\n                     return super.executeUpdate(sql);\n                 } catch (SQLException se) {\n-                    throw wrap(se, LoggingCallableStatement.this);\n+                    err = wrap(se, LoggingCallableStatement.this);\n+                    throw err;\n                 } finally {\n                     logTime(start);\n                     clearLogParameters(true);\n-                    handleSQLWarning(LoggingCallableStatement.this);\n+                    handleSQLErrors(LoggingCallableStatement.this, err);\n                 }\n             }\n \n             public boolean execute(String sql) throws SQLException {\n                 logSQL(this);\n                 long start = System.currentTimeMillis();\n+                SQLException err = null;\n                 try {\n                     return super.execute(sql);\n                 } catch (SQLException se) {\n-                    throw wrap(se, LoggingCallableStatement.this);\n+                    err = wrap(se, LoggingCallableStatement.this);\n+                    throw err;\n                 } finally {\n                     logTime(start);\n                     clearLogParameters(true);\n-                    handleSQLWarning(LoggingCallableStatement.this);\n+                    handleSQLErrors(LoggingCallableStatement.this, err);\n                 }\n             }\n \n             protected ResultSet executeQuery(boolean wrap) throws SQLException {\n                 logSQL(this);\n                 long start = System.currentTimeMillis();\n+                SQLException err = null;\n                 try {\n                     return super.executeQuery(wrap);\n                 } catch (SQLException se) {\n-                    throw wrap(se, LoggingCallableStatement.this);\n+                    err = wrap(se, LoggingCallableStatement.this);\n+                    throw err;\n                 } finally {\n                     logTime(start);\n                     clearLogParameters(true);\n-                    handleSQLWarning(LoggingCallableStatement.this);\n+                    handleSQLErrors(LoggingCallableStatement.this, err);\n                 }\n             }\n \n             public int executeUpdate() throws SQLException {\n                 logSQL(this);\n                 long start = System.currentTimeMillis();\n+                SQLException err = null;                \n                 try {\n                     return super.executeUpdate();\n                 } catch (SQLException se) {\n-                    throw wrap(se, LoggingCallableStatement.this);\n+                    err = wrap(se, LoggingCallableStatement.this);\n+                    throw err;\n                 } finally {\n                     logTime(start);\n                     clearLogParameters(true);\n-                    handleSQLWarning(LoggingCallableStatement.this);\n+                    handleSQLErrors(LoggingCallableStatement.this, err);\n                 }\n             }\n \n             public int[] executeBatch() throws SQLException {\n                 logBatchSQL(this);\n                 long start = System.currentTimeMillis();\n+                SQLException err = null;                \n                 try {\n                     return super.executeBatch();\n                 } catch (SQLException se) {\n@@ -1439,25 +1597,28 @@ public int executeUpdate() throws SQLException {\n                                 _params = (List) _paramBatch.get(index);\n                         }\n                     }\n-                    throw wrap(se, LoggingCallableStatement.this);\n+                    err = wrap(se, LoggingCallableStatement.this);\n+                    throw err;\n                 } finally {\n                     logTime(start);\n                     clearLogParameters(true);\n-                    handleSQLWarning(LoggingCallableStatement.this);\n+                    handleSQLErrors(LoggingCallableStatement.this, err);\n                 }\n             }\n \n             public boolean execute() throws SQLException {\n                 logSQL(this);\n                 long start = System.currentTimeMillis();\n+                SQLException err = null;                \n                 try {\n                     return super.execute();\n                 } catch (SQLException se) {\n-                    throw wrap(se, LoggingCallableStatement.this);\n+                    err = wrap(se, LoggingCallableStatement.this);\n+                    throw err;\n                 } finally {\n                     logTime(start);\n                     clearLogParameters(true);\n-                    handleSQLWarning(LoggingCallableStatement.this);\n+                    handleSQLErrors(LoggingCallableStatement.this, err);\n                 }\n             }\n "}]}

