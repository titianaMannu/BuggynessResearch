{"sha":"9005cabc4f4632ec3d1a7053c56fddb7dd477013","node_id":"MDY6Q29tbWl0MjA2MzY0OjkwMDVjYWJjNGY0NjMyZWMzZDFhNzA1M2M1NmZkZGI3ZGQ0NzcwMTM=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-10-14T17:22:59Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2008-10-14T17:22:59Z"},"message":"OPENJPA-744 Extra SQL on LAZY/EAGER  ManyToOne relation\nFurther improved for performance when OneToMany is fetch EAGER, the inverse ManyToOne relations are set such that relation fields in entities after detach remain valid.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.2.x@704586 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d4ce3a68a42331c72593e051ee71431e8d9f64fc","url":"https://api.github.com/repos/apache/openjpa/git/trees/d4ce3a68a42331c72593e051ee71431e8d9f64fc"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9005cabc4f4632ec3d1a7053c56fddb7dd477013","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9005cabc4f4632ec3d1a7053c56fddb7dd477013","html_url":"https://github.com/apache/openjpa/commit/9005cabc4f4632ec3d1a7053c56fddb7dd477013","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9005cabc4f4632ec3d1a7053c56fddb7dd477013/comments","author":null,"committer":null,"parents":[{"sha":"99103ed94dde120d63c33eed076890b1640ecf0a","url":"https://api.github.com/repos/apache/openjpa/commits/99103ed94dde120d63c33eed076890b1640ecf0a","html_url":"https://github.com/apache/openjpa/commit/99103ed94dde120d63c33eed076890b1640ecf0a"}],"stats":{"total":321,"additions":316,"deletions":5},"files":[{"sha":"d3e5d7c449cc083fe79bc14a9cd897f84814b6e0","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":76,"deletions":1,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/9005cabc4f4632ec3d1a7053c56fddb7dd477013/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/9005cabc4f4632ec3d1a7053c56fddb7dd477013/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=9005cabc4f4632ec3d1a7053c56fddb7dd477013","patch":"@@ -35,6 +35,7 @@\n \n import javax.sql.DataSource;\n \n+import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.event.OrphanedKeyAction;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.conf.QuerySQLCacheValue;\n@@ -354,14 +355,27 @@ protected boolean initializeState(OpenJPAStateManager sm, PCState state,\n                     getMappedByFieldMapping();\n                 Object mappedByObject = info.result.getMappedByValue();\n                 if (mappedByFieldMapping != null && mappedByObject != null)\n-                    setMappedBy(sm, mappedByFieldMapping, mappedByObject);\n+                    if (mappedByObject instanceof OpenJPAId)\n+                        // The inverse relation can not be set since\n+                        // we are eagerly loading this sm for\n+                        // a sm owner that is still in the process of \n+                        // initializing itself.\n+                        // Remember owner oid by setIntermediate().\n+                        // The inverse relation is set later by\n+                        // setInverseRelation() when the sm owner is fully\n+                        // initialized.\n+                        sm.setIntermediate(mappedByFieldMapping.getIndex(),\n+                            mappedByObject);\n+                    else\n+                        setMappedBy(sm, mappedByFieldMapping, mappedByObject);\n             }\n             // load the selected mappings into the given state manager\n             if (res != null) {\n                 // re-get the mapping in case the instance was a subclass\n                 mapping = (ClassMapping) sm.getMetaData();\n                 load(mapping, sm, fetch, res);\n                 getVersion(mapping, sm, res);\n+                setInverseRelation(sm, mapping, res);\n             }\n             return true;\n         } finally {\n@@ -370,6 +384,47 @@ protected boolean initializeState(OpenJPAStateManager sm, PCState state,\n         }\n     }\n \n+    private void setInverseRelation(OpenJPAStateManager owner,\n+        ClassMapping mapping, Result res) {\n+        FieldMapping[] fms = mapping.getFieldMappings();\n+\n+        // At this point, the owner is fully initialized.\n+        // Check if the owner has eagerly loaded ToMany relations.\n+        for (int i = 0; i < fms.length; i++) {\n+            if (res.getEager(fms[i]) != null) {\n+                Object coll =  owner.fetchObject(fms[i].getIndex());\n+                if (coll instanceof Collection && \n+                    ((Collection) coll).size() > 0) {\n+                    // Found eagerly loaded collection.\n+                    // Publisher (1) <==>  (M) Magazine\n+                    //    publisher has a EAGER OneToMany relation\n+                    //    magazine has a EAGER or LAZY ManyToOne publisher\n+                    // For each member (Magazine) in the collection, \n+                    // set its inverse relation (Publisher).\n+                    for (Iterator itr = ((Collection) coll).iterator();\n+                        itr.hasNext();) {\n+                        PersistenceCapable pc = (PersistenceCapable) itr.next();\n+                        OpenJPAStateManager sm = (OpenJPAStateManager) pc.\n+                            pcGetStateManager();\n+                        FieldMapping[] fmd = ((ClassMapping) sm.getMetaData()).\n+                            getFieldMappings();\n+                        for (int j = 0; j < fmd.length; j++) {\n+                            Object oid = sm.getIntermediate(fmd[j].getIndex());\n+                            // if oid was setIntermediate() previously\n+                            // and it is the same as the owner,\n+                            // then set the inverse relation\n+                            if (oid != null &&\n+                                oid.equals(owner.getObjectId())) {\n+                                sm.storeObject(fmd[j].getIndex(),\n+                                    owner.getPersistenceCapable());\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     protected void setMappedBy(OpenJPAStateManager sm,\n         FieldMapping mappedByFieldMapping, Object mappedByObject) {\n         ClassMapping mapping = (ClassMapping) sm.getMetaData();\n@@ -914,9 +969,29 @@ public Object load(ClassMapping mapping, JDBCFetchConfiguration fetch,\n         ConnectionInfo info = new ConnectionInfo();\n         info.result = result;\n         info.mapping = mapping;\n+\n+        // if inverse relation is known, exclude loading during find\n+        exclude = excludeInverseRelation(mapping, info, exclude);\n         return _ctx.find(oid, fetch, exclude, info, 0);\n     }\n \n+    private BitSet excludeInverseRelation(ClassMapping mapping,\n+        ConnectionInfo info, BitSet exclude) {\n+        FieldMapping inverse = info.result.getMappedByFieldMapping();\n+        if (inverse != null) {\n+            FieldMapping[] fms = mapping.getDefinedFieldMappings();\n+            if (exclude == null)\n+                exclude = new BitSet(fms.length);\n+            for (int i = 0; i < fms.length; i++) {\n+                if (fms[i] == inverse) {\n+                    exclude.set(fms[i].getIndex());\n+                    break;\n+                }\n+            }\n+        }\n+        return exclude;\n+    }\n+\n     /**\n      * Load the given state manager with data from the result set. Only\n      * mappings originally selected will be loaded."},{"sha":"5901466281bbbff277745f5bf2b1b02899184bff","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","status":"modified","additions":19,"deletions":2,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/9005cabc4f4632ec3d1a7053c56fddb7dd477013/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/9005cabc4f4632ec3d1a7053c56fddb7dd477013/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java?ref=9005cabc4f4632ec3d1a7053c56fddb7dd477013","patch":"@@ -312,8 +312,8 @@ private Map processEagerParallelResult(OpenJPAStateManager sm,\n             if (field.getOrderColumn() != null)\n                 seq = res.getInt(field.getOrderColumn(), orderJoins) + 1;\n \n-            // for inverseEager field\n-            setMappedBy(oid, sm, coll, res);\n+            // for inverse relation field\n+            setMappedBy(oid, res);\n             Object val = loadElement(null, store, fetch, res, dataJoins);\n             add(store, coll, val);\n         }\n@@ -322,6 +322,23 @@ private Map processEagerParallelResult(OpenJPAStateManager sm,\n         return rels;\n     }\n \n+    private void setMappedBy(Object oid, Result res) {\n+        //  for inverse toOne relation field\n+        FieldMapping mappedByFieldMapping = field.getMappedByMapping();\n+        \n+        if (mappedByFieldMapping != null) {\n+            ValueMapping val = mappedByFieldMapping.getValueMapping();\n+            ClassMetaData decMeta = val.getTypeMetaData();\n+            // this inverse field does not have corresponding classMapping\n+            // its value may be a collection/map etc.\n+            if (decMeta == null) \n+                return;\n+            \n+            res.setMappedByFieldMapping(mappedByFieldMapping);\n+            res.setMappedByValue(oid);\n+        }\n+    }\n+\n     private void setMappedBy(Object oid, OpenJPAStateManager sm, Object coll,\n         Result res) {\n         // for inverseEager field"},{"sha":"664bae729d13c43f77c8dac2200d878b8fa31a44","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Magazine.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/9005cabc4f4632ec3d1a7053c56fddb7dd477013/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Magazine.java","raw_url":"https://github.com/apache/openjpa/raw/9005cabc4f4632ec3d1a7053c56fddb7dd477013/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Magazine.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Magazine.java?ref=9005cabc4f4632ec3d1a7053c56fddb7dd477013","patch":"@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.FetchType;\n+import java.sql.Date;\n+\n+@Entity\n+public class Magazine implements Serializable {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @Column(name=\"id\")\n+    private int id;\n+\n+    @Column(name=\"name\")\n+    private String name;\n+    \n+    @Column(name=\"date_published\")\n+    private Date datePublished;\n+\n+    @ManyToOne(fetch=FetchType.LAZY)\n+    @JoinColumn(name=\"id_publisher\")\n+    private Publisher idPublisher;\n+\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public int getId() {\n+        return this.id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public Publisher getIdPublisher() {\n+        return this.idPublisher;\n+    }\n+\n+    public void setIdPublisher(Publisher idPublisher) {\n+        this.idPublisher = idPublisher;\n+    }\n+    \n+    public Date getDatePublished() {\n+        return datePublished;\n+    }\n+\n+    public void setDatePublished(Date datePublished) {\n+        this.datePublished = datePublished;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return name;\n+    }\n+}"},{"sha":"ea0f51d8fde0e536156494a07a287aa572139084","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Publisher.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/9005cabc4f4632ec3d1a7053c56fddb7dd477013/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Publisher.java","raw_url":"https://github.com/apache/openjpa/raw/9005cabc4f4632ec3d1a7053c56fddb7dd477013/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Publisher.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Publisher.java?ref=9005cabc4f4632ec3d1a7053c56fddb7dd477013","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.OneToMany;\n+import java.util.Set;\n+\n+@Entity\n+public class Publisher implements Serializable {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @Column(name=\"id\")\n+    private int id;\n+\n+    @Column(name=\"name\")\n+    private String name;\n+\n+    @OneToMany(mappedBy=\"idPublisher\",  fetch=FetchType.EAGER)\n+    private Set<Magazine> magazineCollection;\n+\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public int getId() {\n+        return this.id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public Set<Magazine> getMagazineCollection() {\n+        return this.magazineCollection;\n+    }\n+\n+    public void setMagazineCollection(Set<Magazine> magazineCollection) {\n+        this.magazineCollection = magazineCollection;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return name;\n+    }\n+}"},{"sha":"d4be3634cd884256e95fdeddeac6b779ebf50d1f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java","status":"modified","additions":56,"deletions":2,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/9005cabc4f4632ec3d1a7053c56fddb7dd477013/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java","raw_url":"https://github.com/apache/openjpa/raw/9005cabc4f4632ec3d1a7053c56fddb7dd477013/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java?ref=9005cabc4f4632ec3d1a7053c56fddb7dd477013","patch":"@@ -21,12 +21,16 @@\n import java.util.Collection;\r\n import java.util.Iterator;\r\n import java.util.List;\r\n+import java.util.Set;\r\n+\r\n import javax.persistence.EntityManager;\r\n import javax.persistence.Query;\r\n \r\n import junit.textui.TestRunner;\r\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+import org.apache.openjpa.persistence.query.Magazine;\r\n+import org.apache.openjpa.persistence.query.Publisher;\r\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n \r\n \r\n@@ -36,7 +40,8 @@\n     public void setUp() {\r\n         setUp(Customer.class, Customer.CustomerKey.class, Order.class, \r\n         \tEntityAInverseEager.class, EntityA1InverseEager.class, EntityA2InverseEager.class, \r\n-        \tEntityBInverseEager.class, EntityCInverseEager.class, EntityDInverseEager.class);\r\n+        \tEntityBInverseEager.class, EntityCInverseEager.class, EntityDInverseEager.class,\r\n+            Publisher.class, Magazine.class);\r\n         \r\n         EntityManager em = emf.createEntityManager();\r\n         em.getTransaction().begin();\r\n@@ -93,7 +98,29 @@ public void setUp() {\n             c1.setD(d1);\r\n             d1.setC(c1);\r\n         }\r\n-        \r\n+\r\n+        Publisher p1 = new Publisher();\r\n+        p1.setName(\"publisher1\");\r\n+        em.persist(p1);\r\n+   \r\n+        for (int i = 0; i < 4; i++) {\r\n+            Magazine magazine = new Magazine();\r\n+            magazine.setIdPublisher(p1);\r\n+            magazine.setName(\"magagine\"+i+\"_\"+p1.getName());\r\n+            em.persist(magazine);\r\n+        }\r\n+\r\n+        Publisher p2 = new Publisher();\r\n+        p2.setName(\"publisher2\");\r\n+        em.persist(p2);\r\n+   \r\n+        for (int i = 0; i < 4; i++) {\r\n+            Magazine magazine = new Magazine();\r\n+            magazine.setIdPublisher(p2);\r\n+            magazine.setName(\"magagine\"+i+\"_\"+p2.getName());\r\n+            em.persist(magazine);\r\n+        }\r\n+\r\n         em.flush();\r\n         em.getTransaction().commit();\r\n         em.close();\r\n@@ -197,6 +224,33 @@ public void testOneToManyInheritanceQuery() {\n         em.close();\r\n     }\r\n \r\n+    public void testOneToManyEagerInverseLazyQuery() {\r\n+        sql.clear();\r\n+\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        String query = \"select p FROM Publisher p\";\r\n+        Query q = em.createQuery(query);\r\n+        List list = q.getResultList();\r\n+        assertEquals(2, list.size());\r\n+        assertEquals(2, sql.size());\r\n+\r\n+        sql.clear();\r\n+        em.clear();\r\n+        for (int i = 0; i < list.size(); i++) {\r\n+            Publisher p = (Publisher) list.get(i);\r\n+            Set<Magazine> magazines = p.getMagazineCollection();\r\n+            assertEquals(4, magazines.size());\r\n+            for (Iterator iter = magazines.iterator(); iter.hasNext();) {\r\n+                Magazine m = (Magazine) iter.next();\r\n+                Publisher mp = m.getIdPublisher();\r\n+                assertEquals(p, mp);\r\n+            }\r\n+        }\r\n+\r\n+        assertEquals(0, sql.size());\r\n+        em.close();\r\n+    }\r\n+\r\n     public static void main(String[] args) {\r\n         TestRunner.run(TestInverseEagerSQL.class);\r\n     }\r"}]}

