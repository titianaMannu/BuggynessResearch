{"sha":"901c70e1d6a726c769fc08d80422126591b0f9ad","node_id":"MDY6Q29tbWl0MjA2MzY0OjkwMWM3MGUxZDZhNzI2Yzc2OWZjMDhkODA0MjIxMjY1OTFiMGY5YWQ=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2012-05-18T15:08:50Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2012-05-18T15:08:50Z"},"message":"OPENJPA-2199 - If inverse relation is removed (nulled out) when commit, attempt to find the target type from initialized object in the state manager to complete the update graph for foreign key constraint detection between the relationships.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1340123 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7a6b4a68eba30073d569d1663d153cf35aea3b72","url":"https://api.github.com/repos/apache/openjpa/git/trees/7a6b4a68eba30073d569d1663d153cf35aea3b72"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/901c70e1d6a726c769fc08d80422126591b0f9ad","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/901c70e1d6a726c769fc08d80422126591b0f9ad","html_url":"https://github.com/apache/openjpa/commit/901c70e1d6a726c769fc08d80422126591b0f9ad","comments_url":"https://api.github.com/repos/apache/openjpa/commits/901c70e1d6a726c769fc08d80422126591b0f9ad/comments","author":null,"committer":null,"parents":[{"sha":"61b023c7842ba0cdde6305f1be742f773d0f3b84","url":"https://api.github.com/repos/apache/openjpa/commits/61b023c7842ba0cdde6305f1be742f773d0f3b84","html_url":"https://github.com/apache/openjpa/commit/61b023c7842ba0cdde6305f1be742f773d0f3b84"}],"stats":{"total":271,"additions":270,"deletions":1},"files":[{"sha":"1d95ca228ddf8d630b3f632ff86a6760b0417e84","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/901c70e1d6a726c769fc08d80422126591b0f9ad/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/901c70e1d6a726c769fc08d80422126591b0f9ad/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=901c70e1d6a726c769fc08d80422126591b0f9ad","patch":"@@ -404,8 +404,12 @@ public void delete(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n \n             // if our foreign key has a delete action, we need to set the\n             // related object so constraints can be evaluated\n+            Object lastRelPc = sm.fetchObjectField(field.getIndex());\n+            if( lastRelPc == null) {\n+            \tlastRelPc = sm.fetchInitialField(field.getIndex());\n+            }\n             OpenJPAStateManager rel = RelationStrategies.getStateManager\n-                (sm.fetchObjectField(field.getIndex()), store.getContext());\n+                (lastRelPc, store.getContext());\n             if (rel != null) {\n                 ForeignKey fk = field.getForeignKey((ClassMapping)\n                     rel.getMetaData());"},{"sha":"65fa3aa9589fbd10de16a66866bf1420bfb4a7aa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Child.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/901c70e1d6a726c769fc08d80422126591b0f9ad/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Child.java","raw_url":"https://github.com/apache/openjpa/raw/901c70e1d6a726c769fc08d80422126591b0f9ad/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Child.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Child.java?ref=901c70e1d6a726c769fc08d80422126591b0f9ad","patch":"@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.io.Serializable;\n+import java.util.Collection;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\n+\n+@Entity\n+@Table(name = \"JPAORPHAN_CHILD\")\n+public class Child implements Serializable {\n+    private static final long serialVersionUID = 3974762966445439153L;\n+\n+    @Id\n+    private int id;\n+\n+    @ForeignKey\n+    @ManyToOne(fetch = FetchType.EAGER, cascade = CascadeType.MERGE)\n+    private Parent parent;\n+\n+    private String name;\n+\n+    @OneToMany(mappedBy = \"child\", cascade = CascadeType.ALL, fetch = FetchType.EAGER, orphanRemoval = true)\n+    private Collection<GrandChild> grandChilds;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public Parent getParent() {\n+        return parent;\n+    }\n+\n+    public void setParent(Parent parent) {\n+        this.parent = parent;\n+    }\n+\n+    public Collection<GrandChild> getGrandChilds() {\n+        return grandChilds;\n+    }\n+\n+    public void setGrandChilds(Collection<GrandChild> grandChilds) {\n+        this.grandChilds = grandChilds;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"9faf07bc3a76b944ff44b7c7db015720a46dbc29","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/GrandChild.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/901c70e1d6a726c769fc08d80422126591b0f9ad/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/GrandChild.java","raw_url":"https://github.com/apache/openjpa/raw/901c70e1d6a726c769fc08d80422126591b0f9ad/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/GrandChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/GrandChild.java?ref=901c70e1d6a726c769fc08d80422126591b0f9ad","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\n+\n+@Entity\n+@Table(name = \"JPAORPHAN_GRANDCHILD\")\n+public class GrandChild implements Serializable {\n+    private static final long serialVersionUID = 898044136658616065L;\n+\n+    @Id\n+    private int id;\n+\n+    @ForeignKey\n+    @ManyToOne(fetch = FetchType.EAGER, cascade = CascadeType.MERGE)\n+    private Child child;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public Child getChild() {\n+        return child;\n+    }\n+\n+    public void setChild(Child child) {\n+        this.child = child;\n+    }\n+}"},{"sha":"0882701dcbd969341607e82cd8df7685dce733bb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Parent.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/901c70e1d6a726c769fc08d80422126591b0f9ad/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Parent.java","raw_url":"https://github.com/apache/openjpa/raw/901c70e1d6a726c769fc08d80422126591b0f9ad/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Parent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Parent.java?ref=901c70e1d6a726c769fc08d80422126591b0f9ad","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.io.Serializable;\n+import java.util.Collection;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"JPAORPHAN_PARENT\")\n+public class Parent implements Serializable {\n+    private static final long serialVersionUID = -1735171751389872136L;\n+\n+    @Id\n+    private int id;\n+\n+    @OneToMany(mappedBy = \"parent\", cascade = CascadeType.ALL, fetch = FetchType.EAGER, orphanRemoval = true)\n+    private Collection<Child> childs;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public Collection<Child> getChilds() {\n+        return childs;\n+    }\n+\n+    public void setChilds(Collection<Child> childs) {\n+        this.childs = childs;\n+    }\n+}"},{"sha":"f79decd566c87552eb249777152ecbd32aa5752e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationOrphanRemoval.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/901c70e1d6a726c769fc08d80422126591b0f9ad/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationOrphanRemoval.java","raw_url":"https://github.com/apache/openjpa/raw/901c70e1d6a726c769fc08d80422126591b0f9ad/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationOrphanRemoval.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationOrphanRemoval.java?ref=901c70e1d6a726c769fc08d80422126591b0f9ad","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.Arrays;\n+\n+import javax.persistence.EntityTransaction;\n+\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n+\n+public class TestRelationOrphanRemoval extends SingleEMTestCase {\n+\n+    public void setUp() {\n+        setUp(Parent.class, Child.class, GrandChild.class, CLEAR_TABLES\n+             );\n+    }\n+\n+    public void testRelationOrphanRemoval() {\n+        EntityTransaction tx = em.getTransaction();\n+\n+        int origId = 10;\n+        int id = origId;\n+\n+        Parent parent = new Parent();\n+        parent.setId(id++);\n+        Child child = new Child();\n+        child.setId(id++);\n+        GrandChild grandChild = new GrandChild();\n+        grandChild.setId(id++);\n+        parent.setChilds(Arrays.asList(child));\n+        child.setParent(parent);\n+        child.setGrandChilds(Arrays.asList(grandChild));\n+        grandChild.setChild(child);\n+\n+        tx.begin();\n+        em.persist(parent);\n+        tx.commit();\n+\n+        tx.begin();\n+        parent = em.find(Parent.class, new Integer(origId));\n+        child = parent.getChilds().iterator().next();\n+        grandChild = child.getGrandChilds().iterator().next();\n+        child.setName(\"Test\");\n+\n+        grandChild.setChild(null);\n+        child.setGrandChilds(null);\n+        child.setParent(null);\n+        parent.setChilds(null);\n+        tx.commit();\n+    }\n+}"}]}

