{"sha":"90355300bbec7ad38404dee8b25e3a4eb017e5aa","node_id":"MDY6Q29tbWl0MjA2MzY0OjkwMzU1MzAwYmJlYzdhZDM4NDA0ZGVlOGIyNWUzYTRlYjAxN2U1YWE=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-04-26T19:34:34Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-04-26T19:34:34Z"},"message":"OPENJPA-1604 Added Optimistic check as part the logic for setting the default lock mode for named queries in order to retain 1.x behavior.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@938203 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"21c67564b5749557da6cbb14a0c18222b0e08d40","url":"https://api.github.com/repos/apache/openjpa/git/trees/21c67564b5749557da6cbb14a0c18222b0e08d40"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/90355300bbec7ad38404dee8b25e3a4eb017e5aa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/90355300bbec7ad38404dee8b25e3a4eb017e5aa","html_url":"https://github.com/apache/openjpa/commit/90355300bbec7ad38404dee8b25e3a4eb017e5aa","comments_url":"https://api.github.com/repos/apache/openjpa/commits/90355300bbec7ad38404dee8b25e3a4eb017e5aa/comments","author":null,"committer":null,"parents":[{"sha":"6bc7930a1477f98192c064ed402ef43587997087","url":"https://api.github.com/repos/apache/openjpa/commits/6bc7930a1477f98192c064ed402ef43587997087","html_url":"https://github.com/apache/openjpa/commit/6bc7930a1477f98192c064ed402ef43587997087"}],"stats":{"total":135,"additions":133,"deletions":2},"files":[{"sha":"7710fd51e5e35b88e03b560f53516e3dda489eef","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestOptimisticNamedQueryLockMode.java","status":"added","additions":129,"deletions":0,"changes":129,"blob_url":"https://github.com/apache/openjpa/blob/90355300bbec7ad38404dee8b25e3a4eb017e5aa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestOptimisticNamedQueryLockMode.java","raw_url":"https://github.com/apache/openjpa/raw/90355300bbec7ad38404dee8b25e3a4eb017e5aa/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestOptimisticNamedQueryLockMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestOptimisticNamedQueryLockMode.java?ref=90355300bbec7ad38404dee8b25e3a4eb017e5aa","patch":"@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.lockmgr;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.LockModeType;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.FetchPlan;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+import org.apache.openjpa.persistence.TransactionRequiredException;\n+import org.apache.openjpa.persistence.test.AllowFailure;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+/**\n+ * Tests whether the lock mode on named query emits a FOR UPDATE clause in target SQL\n+ * query when Optimistic=true (default), with pessimistic lock manager.\n+ */\n+public class TestOptimisticNamedQueryLockMode extends SQLListenerTestCase {\n+    public void setUp() {\n+        super.setUp(CLEAR_TABLES, LockEmployee.class, \n+            \"openjpa.LockManager\", \"pessimistic\"\n+            );\n+    }\n+\n+    /*\n+     * Optimistic=true, but a lock mode specified - assert statement will lock.\n+     */\n+    public void testForUpdateClausePresentInNamedQueryWithLockMode() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        assertClausePresentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeByIdWithLock\").setParameter(\"id\", 0));\n+        em.getTransaction().rollback();\n+        em.getTransaction().begin();\n+        assertClausePresentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeByIdWithLock\").setParameter(\"id\", 0));\n+        em.getTransaction().rollback();\n+        em.getTransaction().begin();\n+        assertClausePresentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeByIdWithLock\").setParameter(\"id\", 0));\n+        em.getTransaction().rollback();\n+        em.close();\n+    }\n+\n+    /*\n+     * Optimistic=true, but a no lock mode specified - assert statement does not lock.\n+     */\n+    public void testForUpdateClausePresentInQueryWithDefault() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        assertClauseAbsentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeById\").setParameter(\"id\", 0));\n+        assertClauseAbsentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeById\").setParameter(\"id\", 0));\n+        \n+        OpenJPAEntityManager oem = (OpenJPAEntityManager)em;\n+        OpenJPAQuery<?> q = oem.createNamedQuery(\"findEmployeeById\").setParameter(\"id\", 0); \n+        FetchPlan fp = q.getFetchPlan();\n+        fp.setReadLockMode(LockModeType.NONE);\n+\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+    \n+    /*\n+     * Optimistic=true, lock mode = none set explicitly on the fetch plan.\n+     */\n+    public void testForUpdateClauseAbsentInQueryWithFetchPlanNoneLockMode() {\n+        OpenJPAEntityManagerSPI em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        \n+        OpenJPAQuery<?> q = em.createNamedQuery(\"findEmployeeById\").setParameter(\"id\", 0); \n+        FetchPlan fp = q.getFetchPlan();\n+        fp.setReadLockMode(LockModeType.NONE);\n+        assertClauseAbsentInSQL(\"FOR UPDATE\", q);\n+        \n+        q = em.createNamedQuery(\"findEmployeeByIdWithNoLock\").setParameter(\"id\", 0); \n+        fp = q.getFetchPlan();\n+        fp.setReadLockMode(LockModeType.NONE);\n+        assertClauseAbsentInSQL(\"FOR UPDATE\", q);\n+        \n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    /*\n+    * Optimistic = false, explicit no locking on the named query\n+    */\n+    public void testForUpdateClauseAbsentInQueryWithExplictNoLock() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        assertClauseAbsentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeByIdWithNoLock\").setParameter(\"id\", 0));\n+        assertClauseAbsentInSQL(\"FOR UPDATE\", em.createNamedQuery(\"findEmployeeByIdWithNoLock\").setParameter(\"id\", 0));\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    String getLastSQL() {\n+        String last = sql.get(getSQLCount() - 1);\n+        assertNotNull(\"No last sql found\", last);\n+        return last;\n+    }\n+\n+    void assertClausePresentInSQL(String clause, Query q) {\n+        q.getResultList();\n+        String last = getLastSQL();\n+        assertTrue(clause + \" is not present in \" + last, last.toUpperCase().indexOf(clause) != -1);\n+    }\n+\n+    void assertClauseAbsentInSQL(String clause, Query q) {\n+        q.getResultList();\n+        String last = getLastSQL();\n+        assertTrue(clause + \" is not absent in \" + last, last.toUpperCase().indexOf(clause) == -1);\n+    }\n+}"},{"sha":"862625c39fb68e883a5fbec258fc96dbce1abc71","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/90355300bbec7ad38404dee8b25e3a4eb017e5aa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/90355300bbec7ad38404dee8b25e3a4eb017e5aa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=90355300bbec7ad38404dee8b25e3a4eb017e5aa","patch":"@@ -1848,10 +1848,11 @@ private LockModeType processNamedQueryLockModeType(NamedQuery query) {\n         LockModeType lmt = query.lockMode();\n         if (query.lockMode() != null) {\n             String lm = _conf.getLockManager();\n+            boolean optimistic = _conf.getOptimistic();\n             if (lm != null) {\n                 lm = lm.toLowerCase();\n                 if (lm.contains(\"pessimistic\")) {\n-                    if (lmt == LockModeType.NONE) {\n+                    if (lmt == LockModeType.NONE && !optimistic) {\n                         if (_log.isWarnEnabled() == true) {\n                             _log.warn(_loc.get(\"override-named-query-lock-mode\", new String[] { \"annotation\",\n                                 query.name(), _cls.getName() }));"},{"sha":"fa90b805c94c515994c6eb73390e8bd5c0db922e","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/90355300bbec7ad38404dee8b25e3a4eb017e5aa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/90355300bbec7ad38404dee8b25e3a4eb017e5aa/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=90355300bbec7ad38404dee8b25e3a4eb017e5aa","patch":"@@ -1708,10 +1708,11 @@ private LockModeType processNamedQueryLockModeType(Log log, String lockModeStrin\n         }\n         LockModeType lmt = LockModeType.valueOf(lockModeString);\n         String lm = _conf.getLockManager();\n+        boolean optimistic = _conf.getOptimistic();\n         if (lm != null) {\n             lm = lm.toLowerCase();\n             if (lm.contains(\"pessimistic\")) {\n-                if (lmt == LockModeType.NONE) {\n+                if (lmt == LockModeType.NONE && !optimistic) {\n                     if (log != null && log.isWarnEnabled() == true) {\n                         log.warn(_loc.get(\"override-named-query-lock-mode\", new String[] { \"xml\", queryName,\n                             _cls.getName() }));"}]}

