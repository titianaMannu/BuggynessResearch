{"sha":"90373cb93fbff9cb8605401f4ff64d15b300e858","node_id":"MDY6Q29tbWl0MjA2MzY0OjkwMzczY2I5M2ZiZmY5Y2I4NjA1NDAxZjRmZjY0ZDE1YjMwMGU4NTg=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-07-16T22:39:06Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-07-16T22:39:06Z"},"message":"OPENJPA-1726: fix the locate and substring for Postgres as it only accepts integer as the start index.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@964967 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"63c7e9df8b6022a26e6f16f50a7e88957d24ac97","url":"https://api.github.com/repos/apache/openjpa/git/trees/63c7e9df8b6022a26e6f16f50a7e88957d24ac97"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/90373cb93fbff9cb8605401f4ff64d15b300e858","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/90373cb93fbff9cb8605401f4ff64d15b300e858","html_url":"https://github.com/apache/openjpa/commit/90373cb93fbff9cb8605401f4ff64d15b300e858","comments_url":"https://api.github.com/repos/apache/openjpa/commits/90373cb93fbff9cb8605401f4ff64d15b300e858/comments","author":null,"committer":null,"parents":[{"sha":"68208302996c67f39d3db78498ea6b1e51be39d8","url":"https://api.github.com/repos/apache/openjpa/commits/68208302996c67f39d3db78498ea6b1e51be39d8","html_url":"https://github.com/apache/openjpa/commit/68208302996c67f39d3db78498ea6b1e51be39d8"}],"stats":{"total":27,"additions":23,"deletions":4},"files":[{"sha":"0af26ec3f10386e36f629c0f0f3a3b6456c10c8b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","status":"modified","additions":23,"deletions":4,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/90373cb93fbff9cb8605401f4ff64d15b300e858/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/90373cb93fbff9cb8605401f4ff64d15b300e858/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/jpql/JPQLExpressionBuilder.java?ref=90373cb93fbff9cb8605401f4ff64d15b300e858","patch":"@@ -1287,7 +1287,12 @@ else if (node.getChildCount() == 2\n                 if (node.children.length == 3) {\n                     val1 = getValue(child(node, 0, 3));\n                     val2 = getValue(child(node, 1, 3));\n-                    val3 = getValue(child(node, 2, 3));\n+                    JPQLNode child3 = child(node, 2, 3);\n+                    if (child3.id == JJTINTEGERLITERAL)\n+                        val3 = getIntegerValue(child3);\n+                    else\n+                        val3 = getValue(child3);\n+                    \n                 } else if (node.children.length == 2) {\n                     val1 = getValue(child(node, 0, 2));\n                     val2 = getValue(child(node, 1, 2));\n@@ -1306,9 +1311,13 @@ else if (node.getChildCount() == 2\n                 Value locatePath = getValue(firstChild(node));\n                 Value locateSearch = getValue(secondChild(node));\n                 Value locateFromIndex = null;\n-                if (node.getChildCount() > 2) // optional start index arg\n-                    locateFromIndex = getValue(thirdChild(node));\n-\n+                if (node.getChildCount() > 2) { // optional start index arg\n+                    JPQLNode child3 = thirdChild(node);\n+                    if (child3.id == JJTINTEGERLITERAL) {\n+                        locateFromIndex = getIntegerValue(child3);\n+                    } else\n+                        locateFromIndex = getValue(child3);\n+                }\n                 setImplicitType(locatePath, TYPE_STRING);\n                 setImplicitType(locateSearch, TYPE_STRING);\n \n@@ -1405,6 +1414,16 @@ else if (node.getChildCount() == 2\n         }\n     }\n     \n+    private Value getIntegerValue(JPQLNode node) {\n+        BigDecimal bigdec = new BigDecimal\n+        (node.text.endsWith(\"l\") || node.text.endsWith(\"L\")\n+            ? node.text.substring(0, node.text.length() - 1)\n+            : node.text).\n+        multiply(new BigDecimal(negative(node)));\n+        return factory.newLiteral(Integer.valueOf(bigdec.intValue()),\n+                Literal.TYPE_NUMBER);        \n+    }\n+    \n     /**\n      * Converts JPQL substring() function to OpenJPA ExpressionFactory \n      * substring() arguments."}]}

