{"sha":"90b84c5d73db4d0d7fa3e5520358912961b59c43","node_id":"MDY6Q29tbWl0MjA2MzY0OjkwYjg0YzVkNzNkYjRkMGQ3ZmEzZTU1MjAzNTg5MTI5NjFiNTljNDM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-22T23:37:24Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-22T23:37:24Z"},"message":"OPENJPA-896. Setting eol-style:native and removing windows eol characters from source files.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@757278 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"acb22a46ce954612c3f359175e18ce97ad6ecf85","url":"https://api.github.com/repos/apache/openjpa/git/trees/acb22a46ce954612c3f359175e18ce97ad6ecf85"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/90b84c5d73db4d0d7fa3e5520358912961b59c43","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/90b84c5d73db4d0d7fa3e5520358912961b59c43","html_url":"https://github.com/apache/openjpa/commit/90b84c5d73db4d0d7fa3e5520358912961b59c43","comments_url":"https://api.github.com/repos/apache/openjpa/commits/90b84c5d73db4d0d7fa3e5520358912961b59c43/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"c3175eea3c3885286898170fae6b487b070f60b5","url":"https://api.github.com/repos/apache/openjpa/commits/c3175eea3c3885286898170fae6b487b070f60b5","html_url":"https://github.com/apache/openjpa/commit/c3175eea3c3885286898170fae6b487b070f60b5"}],"stats":{"total":382166,"additions":191083,"deletions":191083},"files":[{"sha":"993fe78ce1c62c1808878bb08d364b7e897b2bc3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/xml/EntityB.java","status":"modified","additions":63,"deletions":63,"changes":126,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/xml/EntityB.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/xml/EntityB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/xml/EntityB.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,63 +1,63 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.annotations.xml;\r\n-\r\n-import javax.persistence.Basic;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.GenerationType;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-import javax.persistence.NamedQuery;\r\n-\r\n-/**\r\n- * Used to test effect of metadata-complete tag. \r\n- * \r\n- * The annotations should be processed in conjunction with corresponding orm.xml \r\n- * \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-@Entity\r\n-@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n-@NamedQuery(name=\"EntityB.SelectOne\", query=\"SELECT b FROM DerivedB b WHERE name=?1\")\r\n-public class EntityB {\r\n-\t@Id\r\n-\t@GeneratedValue(strategy=GenerationType.IDENTITY)\r\n-\tprivate long id;\r\n-\t\r\n-\t@Basic(optional=true)\r\n-\tprivate String name;\r\n-\r\n-\t\r\n-\tpublic long getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\r\n-\r\n-\tpublic String getName() {\r\n-\t\treturn name;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setName(String name) {\r\n-\t\tthis.name = name;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.annotations.xml;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.NamedQuery;\n+\n+/**\n+ * Used to test effect of metadata-complete tag. \n+ * \n+ * The annotations should be processed in conjunction with corresponding orm.xml \n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\n+@NamedQuery(name=\"EntityB.SelectOne\", query=\"SELECT b FROM DerivedB b WHERE name=?1\")\n+public class EntityB {\n+\t@Id\n+\t@GeneratedValue(strategy=GenerationType.IDENTITY)\n+\tprivate long id;\n+\t\n+\t@Basic(optional=true)\n+\tprivate String name;\n+\n+\t\n+\tpublic long getId() {\n+\t\treturn id;\n+\t}\n+\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+}"},{"sha":"abd49facd08bc576098f56dbd1001faafdc84268","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/xml/TestMetaDataComplete.java","status":"modified","additions":124,"deletions":124,"changes":248,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/xml/TestMetaDataComplete.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/xml/TestMetaDataComplete.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/xml/TestMetaDataComplete.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,124 +1,124 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.annotations.xml;\r\n-\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.jdbc.meta.strats.FlatClassStrategy;\r\n-import org.apache.openjpa.jdbc.meta.strats.FullClassStrategy;\r\n-import org.apache.openjpa.jdbc.meta.strats.VerticalClassStrategy;\r\n-import org.apache.openjpa.meta.ClassMetaData;\r\n-import org.apache.openjpa.meta.MetaDataRepository;\r\n-import org.apache.openjpa.meta.ValueStrategies;\r\n-import org.apache.openjpa.persistence.ArgumentException;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * Tests metadata-complete tag switches off any annotation processing.\r\n- * \r\n- * EntityA uses metadata-complete tag and hence all its annotated mapping info\r\n- * must not be processed.\r\n- * \r\n- * EntityB does not use metadata-complete tag and hence its mapping info should\r\n- * be combination of annotation mapping info overwritten by xml description\r\n- * mapping info.\r\n- * \r\n- * @author Pinaki Poddar\r\n- * \r\n- */\r\n-public class TestMetaDataComplete extends SingleEMFTestCase {\r\n-\tprivate static OpenJPAEntityManagerFactorySPI oemf;\r\n-\r\n-\tprivate static ClassMetaData entityA, entityB, derivedA, derivedB;\r\n-\r\n-\tpublic void setUp() throws Exception {\r\n-\t\tif (oemf == null) {\r\n-\t\t\tsuper.setUp(EntityA.class, EntityB.class, DerivedA.class,\r\n-\t\t\t\t\tDerivedB.class);\r\n-\t\t\toemf = (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence\r\n-\t\t\t\t\t.cast(emf);\r\n-\t\t\tMetaDataRepository repos = oemf.getConfiguration()\r\n-\t\t\t\t\t.getMetaDataRepositoryInstance();\r\n-\r\n-\t\t\tentityA = repos.getMetaData(EntityA.class, null, true);\r\n-\t\t\tentityB = repos.getMetaData(EntityB.class, null, true);\r\n-\t\t\tderivedA = repos.getMetaData(DerivedA.class, null, true);\r\n-\t\t\tderivedB = repos.getMetaData(DerivedB.class, null, true);\r\n-\t\t}\r\n-\t}\r\n-\r\n-\tpublic void tearDown() {\r\n-\r\n-\t}\r\n-\r\n-\tprotected String getPersistenceUnitName() {\r\n-\t\treturn \"test-metadata-complete\";\r\n-\t}\r\n-\r\n-\tpublic void testIgnoresClassAnnotationIfMetaDataComplete() {\r\n-\t\t// inheritance strategy of EntityA by annotation is SINGLE_TABLE\r\n-\t\t// inheritance strategy of EntityA in xml descriptor is JOINED\r\n-\t\tassertEquals(FullClassStrategy.class, ((ClassMapping) entityA)\r\n-\t\t\t\t.getStrategy().getClass());\r\n-\t\tassertEquals(VerticalClassStrategy.class, ((ClassMapping) derivedA)\r\n-\t\t\t\t.getStrategy().getClass());\r\n-\t}\r\n-\r\n-\tpublic void testProcessesClassAnnotationIfMetaDataIsNotComplete() {\r\n-\t\t// inheritance strategy of EntityB by annotation is SINGLE_TABLE\r\n-\t\t// inheritance strategy of EntityB in xml descriptor is not specified\r\n-\t\tassertEquals(FullClassStrategy.class, ((ClassMapping) entityB)\r\n-\t\t\t\t.getStrategy().getClass());\r\n-\t\tassertEquals(FlatClassStrategy.class, ((ClassMapping) derivedB)\r\n-\t\t\t\t.getStrategy().getClass());\r\n-\t}\r\n-\r\n-\tpublic void testIgnoresFieldAnnotationIfMetaDataComplete() {\r\n-\t\t// generation strategy of EntityA.id by annotation is IDENTITY\r\n-\t\t// inheritance strategy of EntityA in xml descriptor is SEQUENCE\r\n-\t\tint valueStrategyA = entityA.getField(\"id\").getValueStrategy();\r\n-\t\tassertEquals(ValueStrategies.SEQUENCE, valueStrategyA);\r\n-\t}\r\n-\r\n-\tpublic void testProcessesFieldAnnotationIfMetaDataIsNotComplete() {\r\n-\t\t// generation strategy of EntityB.id by annotation is IDENTITY\r\n-\t\t// inheritance strategy of EntityA in xml descriptor is not specified\r\n-\t\tint valueStrategyB = entityB.getField(\"id\").getValueStrategy();\r\n-\t\tassertEquals(ValueStrategies.AUTOASSIGN, valueStrategyB);\r\n-\t}\r\n-\r\n-\tpublic void testIgnoresNamedQueryIfMetaDataComplete() {\r\n-\t\t// DerivedA has annotated NamedQuery\r\n-\t\tString namedQuery = \"DerivedA.SelectAll\";\r\n-\t\ttry {\r\n-\t\t\toemf.createEntityManager().createNamedQuery(namedQuery);\r\n-\t\t\tfail(\"Expected not to find NamedQuery [\" + namedQuery + \"]\");\r\n-\t\t} catch (ArgumentException e) {\r\n-\t\t\tassertTrue(e.getMessage().contains(namedQuery));\r\n-\t\t}\r\n-\t}\r\n-\r\n-\tpublic void testProcessesNamedQueryIfMetaDataIsNotComplete() {\r\n-\t\t// EntityB has annotated NamedQuery\r\n-\t\t// EntityB has a Named Query in xml descriptor\r\n-\t\toemf.createEntityManager().createNamedQuery(\"EntityB.SelectOne\");\r\n-\t\toemf.createEntityManager().createNamedQuery(\"EntityB.SelectAll\");\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.annotations.xml;\n+\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.strats.FlatClassStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.FullClassStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.VerticalClassStrategy;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.MetaDataRepository;\n+import org.apache.openjpa.meta.ValueStrategies;\n+import org.apache.openjpa.persistence.ArgumentException;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Tests metadata-complete tag switches off any annotation processing.\n+ * \n+ * EntityA uses metadata-complete tag and hence all its annotated mapping info\n+ * must not be processed.\n+ * \n+ * EntityB does not use metadata-complete tag and hence its mapping info should\n+ * be combination of annotation mapping info overwritten by xml description\n+ * mapping info.\n+ * \n+ * @author Pinaki Poddar\n+ * \n+ */\n+public class TestMetaDataComplete extends SingleEMFTestCase {\n+\tprivate static OpenJPAEntityManagerFactorySPI oemf;\n+\n+\tprivate static ClassMetaData entityA, entityB, derivedA, derivedB;\n+\n+\tpublic void setUp() throws Exception {\n+\t\tif (oemf == null) {\n+\t\t\tsuper.setUp(EntityA.class, EntityB.class, DerivedA.class,\n+\t\t\t\t\tDerivedB.class);\n+\t\t\toemf = (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence\n+\t\t\t\t\t.cast(emf);\n+\t\t\tMetaDataRepository repos = oemf.getConfiguration()\n+\t\t\t\t\t.getMetaDataRepositoryInstance();\n+\n+\t\t\tentityA = repos.getMetaData(EntityA.class, null, true);\n+\t\t\tentityB = repos.getMetaData(EntityB.class, null, true);\n+\t\t\tderivedA = repos.getMetaData(DerivedA.class, null, true);\n+\t\t\tderivedB = repos.getMetaData(DerivedB.class, null, true);\n+\t\t}\n+\t}\n+\n+\tpublic void tearDown() {\n+\n+\t}\n+\n+\tprotected String getPersistenceUnitName() {\n+\t\treturn \"test-metadata-complete\";\n+\t}\n+\n+\tpublic void testIgnoresClassAnnotationIfMetaDataComplete() {\n+\t\t// inheritance strategy of EntityA by annotation is SINGLE_TABLE\n+\t\t// inheritance strategy of EntityA in xml descriptor is JOINED\n+\t\tassertEquals(FullClassStrategy.class, ((ClassMapping) entityA)\n+\t\t\t\t.getStrategy().getClass());\n+\t\tassertEquals(VerticalClassStrategy.class, ((ClassMapping) derivedA)\n+\t\t\t\t.getStrategy().getClass());\n+\t}\n+\n+\tpublic void testProcessesClassAnnotationIfMetaDataIsNotComplete() {\n+\t\t// inheritance strategy of EntityB by annotation is SINGLE_TABLE\n+\t\t// inheritance strategy of EntityB in xml descriptor is not specified\n+\t\tassertEquals(FullClassStrategy.class, ((ClassMapping) entityB)\n+\t\t\t\t.getStrategy().getClass());\n+\t\tassertEquals(FlatClassStrategy.class, ((ClassMapping) derivedB)\n+\t\t\t\t.getStrategy().getClass());\n+\t}\n+\n+\tpublic void testIgnoresFieldAnnotationIfMetaDataComplete() {\n+\t\t// generation strategy of EntityA.id by annotation is IDENTITY\n+\t\t// inheritance strategy of EntityA in xml descriptor is SEQUENCE\n+\t\tint valueStrategyA = entityA.getField(\"id\").getValueStrategy();\n+\t\tassertEquals(ValueStrategies.SEQUENCE, valueStrategyA);\n+\t}\n+\n+\tpublic void testProcessesFieldAnnotationIfMetaDataIsNotComplete() {\n+\t\t// generation strategy of EntityB.id by annotation is IDENTITY\n+\t\t// inheritance strategy of EntityA in xml descriptor is not specified\n+\t\tint valueStrategyB = entityB.getField(\"id\").getValueStrategy();\n+\t\tassertEquals(ValueStrategies.AUTOASSIGN, valueStrategyB);\n+\t}\n+\n+\tpublic void testIgnoresNamedQueryIfMetaDataComplete() {\n+\t\t// DerivedA has annotated NamedQuery\n+\t\tString namedQuery = \"DerivedA.SelectAll\";\n+\t\ttry {\n+\t\t\toemf.createEntityManager().createNamedQuery(namedQuery);\n+\t\t\tfail(\"Expected not to find NamedQuery [\" + namedQuery + \"]\");\n+\t\t} catch (ArgumentException e) {\n+\t\t\tassertTrue(e.getMessage().contains(namedQuery));\n+\t\t}\n+\t}\n+\n+\tpublic void testProcessesNamedQueryIfMetaDataIsNotComplete() {\n+\t\t// EntityB has annotated NamedQuery\n+\t\t// EntityB has a Named Query in xml descriptor\n+\t\toemf.createEntityManager().createNamedQuery(\"EntityB.SelectOne\");\n+\t\toemf.createEntityManager().createNamedQuery(\"EntityB.SelectAll\");\n+\t}\n+}"},{"sha":"1636b5f94097537c4c36b926e5d9e4afcc7a6302","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/TestQueryCache.java","status":"modified","additions":183,"deletions":183,"changes":366,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/TestQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/TestQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/TestQueryCache.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,183 +1,183 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.cache;\r\n-\r\n-import java.util.List;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.NamedQuery;\r\n-\r\n-import org.apache.openjpa.persistence.cache.common.apps.Entity1;\r\n-import org.apache.openjpa.persistence.cache.common.apps.Entity2;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-@NamedQuery(name = \"setParam1\",\r\n-    query = \"SELECT o FROM Entity1 o WHERE o.pk LIKE :pk\")\r\n-public class TestQueryCache extends AbstractTestCase {\r\n-\r\n-    EntityManager em;\r\n-\r\n-    public TestQueryCache(String name) {\r\n-        super(name);\r\n-        System.setProperty(\"cactus.contextURL\",\r\n-            \"http://localhost:9000/cachecactus\");\r\n-        em = currentEntityManager();\r\n-    }\r\n-\r\n-    /*public static Test suite()\r\n-    {\r\n-        ServletTestSuite suite = new ServletTestSuite();\r\n-        suite.addTestSuite(TestQueryCache.class);\r\n-        return suite;\r\n-    }*/\r\n-    public void setUp() {\r\n-        System.setProperty(\"cactus.contextURL\",\r\n-            \"http://localhost:9000/cactuswebapp\");\r\n-\r\n-        //deleteAll(Entity2.class);\r\n-        deleteAll(Entity1.class);\r\n-\r\n-        int instNum = 10;\r\n-\r\n-        startTx(em);\r\n-\r\n-        //create and persist multiple entity1 instances\r\n-        for (int i = 0; i < instNum; i++) {\r\n-            Entity1 ent = new Entity1(i, \"string\" + i, i + 2);\r\n-            Entity2 ent2 = new Entity2(i * 2, \"ent2\" + i, i);\r\n-            ent.setEntity2Field(ent2);\r\n-            em.persist(ent);\r\n-        }\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testResultList() {\r\n-        em = currentEntityManager();\r\n-        List list = em.createQuery(\"Select object(o) from Entity1 o\")\r\n-            .getResultList();\r\n-\r\n-        assertEquals(10, list.size());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testGetSingleList() {\r\n-        em = currentEntityManager();\r\n-        String curr = 2 + \"\";\r\n-\r\n-        Entity1 ret = (Entity1) em\r\n-            .createQuery(\"SELECT o FROM Entity1 o WHERE o.pk LIKE :pk\")\r\n-            .setParameter(\"pk\", curr)\r\n-            .getSingleResult();\r\n-\r\n-        assertNotNull(ret);\r\n-        assertEquals(\"string2\", ret.getStringField());\r\n-        assertEquals(4, ret.getIntField());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testExecuteUpdate() {\r\n-        String curr = 2 + \"\";\r\n-        String curr2 = 22 + \"\";\r\n-\r\n-        em = currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        Entity1 entity1 = (Entity1) em\r\n-            .createQuery(\"SELECT o FROM Entity1 o WHERE o.pk LIKE :pk\")\r\n-            .setParameter(\"pk\", curr)\r\n-            .getSingleResult();\r\n-\r\n-        int ret = em.createQuery(\"Delete FROM Entity1 o WHERE o.pk LIKE :pk\")\r\n-            .setParameter(\"pk\", curr)\r\n-            .executeUpdate();\r\n-        assertEquals(ret, 1);\r\n-\r\n-//cascade remove doesn't remove the entity2\r\n-        int retTmp = em.createQuery(\"Delete FROM Entity2 o WHERE o.pk LIKE :pk\")\r\n-            .setParameter(\"pk\", entity1.getEntity2Field().getPk())\r\n-            .executeUpdate();\r\n-\r\n-        int ret2 = em.createQuery(\"Delete FROM Entity1 o WHERE o.pk LIKE :pk\")\r\n-            .setParameter(\"pk\", curr2)\r\n-            .executeUpdate();\r\n-\r\n-        assertEquals(ret2, 0);\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testSetMaxResults() {\r\n-        em = currentEntityManager();\r\n-\r\n-        List l = em.createQuery(\"Select object(o) from Entity1 o\")\r\n-            .setMaxResults(5)\r\n-            .getResultList();\r\n-\r\n-        assertNotNull(l);\r\n-        assertEquals(5, l.size());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testSetFirstResults() {\r\n-        em = currentEntityManager();\r\n-\r\n-        List l = em.createQuery(\"Select object(o) from Entity1 o\")\r\n-            .setFirstResult(3)\r\n-            .getResultList();\r\n-\r\n-        Entity1 ent = (Entity1) l.get(0);\r\n-\r\n-        assertNotNull(ent);\r\n-        assertEquals(\"string3\", ent.getStringField());\r\n-        assertEquals(5, ent.getIntField());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    // Tests Binding an argument to a named parameter.\r\n-    // pk, the named parameter --Not working yet--\r\n-    public void xxxtestSetParameter1() {\r\n-\r\n-        em = currentEntityManager();\r\n-        String curr = 2 + \"\";\r\n-\r\n-        List ret = em.createQuery(\"SELECT o FROM Entity1 o WHERE o.pk LIKE :pk\")\r\n-            .setParameter(\"pk\", curr)\r\n-            .getResultList();\r\n-\r\n-        assertNotNull(ret);\r\n-        assertEquals(1, ret.size());\r\n-\r\n-        ret = em.createNamedQuery(\"setParam1\")\r\n-            .setParameter(\"pk\", curr)\r\n-            .getResultList();\r\n-\r\n-        assertNotNull(ret);\r\n-        assertEquals(1, ret.size());\r\n-\r\n-        endTx(em);\r\n-    }\r\n-\r\n-    //rest of the interface is tested by the CTS\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache;\n+\n+import java.util.List;\n+import javax.persistence.EntityManager;\n+import javax.persistence.NamedQuery;\n+\n+import org.apache.openjpa.persistence.cache.common.apps.Entity1;\n+import org.apache.openjpa.persistence.cache.common.apps.Entity2;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+@NamedQuery(name = \"setParam1\",\n+    query = \"SELECT o FROM Entity1 o WHERE o.pk LIKE :pk\")\n+public class TestQueryCache extends AbstractTestCase {\n+\n+    EntityManager em;\n+\n+    public TestQueryCache(String name) {\n+        super(name);\n+        System.setProperty(\"cactus.contextURL\",\n+            \"http://localhost:9000/cachecactus\");\n+        em = currentEntityManager();\n+    }\n+\n+    /*public static Test suite()\n+    {\n+        ServletTestSuite suite = new ServletTestSuite();\n+        suite.addTestSuite(TestQueryCache.class);\n+        return suite;\n+    }*/\n+    public void setUp() {\n+        System.setProperty(\"cactus.contextURL\",\n+            \"http://localhost:9000/cactuswebapp\");\n+\n+        //deleteAll(Entity2.class);\n+        deleteAll(Entity1.class);\n+\n+        int instNum = 10;\n+\n+        startTx(em);\n+\n+        //create and persist multiple entity1 instances\n+        for (int i = 0; i < instNum; i++) {\n+            Entity1 ent = new Entity1(i, \"string\" + i, i + 2);\n+            Entity2 ent2 = new Entity2(i * 2, \"ent2\" + i, i);\n+            ent.setEntity2Field(ent2);\n+            em.persist(ent);\n+        }\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testResultList() {\n+        em = currentEntityManager();\n+        List list = em.createQuery(\"Select object(o) from Entity1 o\")\n+            .getResultList();\n+\n+        assertEquals(10, list.size());\n+\n+        endEm(em);\n+    }\n+\n+    public void testGetSingleList() {\n+        em = currentEntityManager();\n+        String curr = 2 + \"\";\n+\n+        Entity1 ret = (Entity1) em\n+            .createQuery(\"SELECT o FROM Entity1 o WHERE o.pk LIKE :pk\")\n+            .setParameter(\"pk\", curr)\n+            .getSingleResult();\n+\n+        assertNotNull(ret);\n+        assertEquals(\"string2\", ret.getStringField());\n+        assertEquals(4, ret.getIntField());\n+\n+        endEm(em);\n+    }\n+\n+    public void testExecuteUpdate() {\n+        String curr = 2 + \"\";\n+        String curr2 = 22 + \"\";\n+\n+        em = currentEntityManager();\n+        startTx(em);\n+\n+        Entity1 entity1 = (Entity1) em\n+            .createQuery(\"SELECT o FROM Entity1 o WHERE o.pk LIKE :pk\")\n+            .setParameter(\"pk\", curr)\n+            .getSingleResult();\n+\n+        int ret = em.createQuery(\"Delete FROM Entity1 o WHERE o.pk LIKE :pk\")\n+            .setParameter(\"pk\", curr)\n+            .executeUpdate();\n+        assertEquals(ret, 1);\n+\n+//cascade remove doesn't remove the entity2\n+        int retTmp = em.createQuery(\"Delete FROM Entity2 o WHERE o.pk LIKE :pk\")\n+            .setParameter(\"pk\", entity1.getEntity2Field().getPk())\n+            .executeUpdate();\n+\n+        int ret2 = em.createQuery(\"Delete FROM Entity1 o WHERE o.pk LIKE :pk\")\n+            .setParameter(\"pk\", curr2)\n+            .executeUpdate();\n+\n+        assertEquals(ret2, 0);\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testSetMaxResults() {\n+        em = currentEntityManager();\n+\n+        List l = em.createQuery(\"Select object(o) from Entity1 o\")\n+            .setMaxResults(5)\n+            .getResultList();\n+\n+        assertNotNull(l);\n+        assertEquals(5, l.size());\n+\n+        endEm(em);\n+    }\n+\n+    public void testSetFirstResults() {\n+        em = currentEntityManager();\n+\n+        List l = em.createQuery(\"Select object(o) from Entity1 o\")\n+            .setFirstResult(3)\n+            .getResultList();\n+\n+        Entity1 ent = (Entity1) l.get(0);\n+\n+        assertNotNull(ent);\n+        assertEquals(\"string3\", ent.getStringField());\n+        assertEquals(5, ent.getIntField());\n+\n+        endEm(em);\n+    }\n+\n+    // Tests Binding an argument to a named parameter.\n+    // pk, the named parameter --Not working yet--\n+    public void xxxtestSetParameter1() {\n+\n+        em = currentEntityManager();\n+        String curr = 2 + \"\";\n+\n+        List ret = em.createQuery(\"SELECT o FROM Entity1 o WHERE o.pk LIKE :pk\")\n+            .setParameter(\"pk\", curr)\n+            .getResultList();\n+\n+        assertNotNull(ret);\n+        assertEquals(1, ret.size());\n+\n+        ret = em.createNamedQuery(\"setParam1\")\n+            .setParameter(\"pk\", curr)\n+            .getResultList();\n+\n+        assertNotNull(ret);\n+        assertEquals(1, ret.size());\n+\n+        endTx(em);\n+    }\n+\n+    //rest of the interface is tested by the CTS\n+}"},{"sha":"1ab7d99a3b78db6799f105c60615b2a12b9be4e0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/BidirectionalOne2OneOwned.java","status":"modified","additions":89,"deletions":89,"changes":178,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/BidirectionalOne2OneOwned.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/BidirectionalOne2OneOwned.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/BidirectionalOne2OneOwned.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,89 +1,89 @@\n-package org.apache.openjpa.persistence.cache.common.apps;\r\n-\r\n-import javax.persistence.*;\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-\r\n-/**\r\n- * A persistent entity that is owned by unidirectional single-valued \r\n- * relationship.\r\n- * A unidirectional relationship has only one owning side and the other side\r\n- * called as owned side is this receiver.\r\n- * Given the following relationship between Entity A and Entity B:\r\n- *   Entity A refers a single instance of Entity B \r\n- *   Entity B does not refer Entity A (owner)\r\n- * Entity A is called owner and Entity B is called owned with respect\r\n- * to the above relationship.\r\n- * \r\n- * Used to test identical application behavior with or without DataCache.\r\n- * \r\n- * @see BidirectionalOne2OneOwned\r\n- * @see TestDataCacheBehavesIdentical\r\n- * @see Section 2.1.8.3 of JPA Specification Version 1.0\r\n- * \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-\r\n-@Entity\r\n-public class BidirectionalOne2OneOwned {\r\n-\t@Id\r\n-\tprivate long id;\r\n-\t\r\n-\tprivate String name;\r\n-\t\r\n-\t@OneToOne(mappedBy=\"owned\")\r\n-\tprivate BidirectionalOne2OneOwner owner;\r\n-\t\r\n-\t@Version\r\n-\tprivate int version;\r\n-\r\n-\tpublic long getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\r\n-\tpublic void setId(long id) {\r\n-\t\tthis.id = id;\r\n-\t}\r\n-\r\n-\tpublic String getName() {\r\n-\t\treturn name;\r\n-\t}\r\n-\r\n-\tpublic void setName(String name) {\r\n-\t\tthis.name = name;\r\n-\t}\r\n-\r\n-\tpublic BidirectionalOne2OneOwner getOwner() {\r\n-\t\treturn owner;\r\n-\t}\r\n-\r\n-\tpublic void setOwner(BidirectionalOne2OneOwner owner) {\r\n-\t\tthis.owner = owner;\r\n-\t}\r\n-\r\n-\tpublic int getVersion() {\r\n-\t\treturn version;\r\n-\t}\r\n-\t\r\n-\tpublic String toString() {\r\n-\t\treturn this.getClass().getSimpleName() + \":\" + id + \":\" + name;\r\n-\t}\r\n-\r\n-}\r\n+package org.apache.openjpa.persistence.cache.common.apps;\n+\n+import javax.persistence.*;\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+\n+/**\n+ * A persistent entity that is owned by unidirectional single-valued \n+ * relationship.\n+ * A unidirectional relationship has only one owning side and the other side\n+ * called as owned side is this receiver.\n+ * Given the following relationship between Entity A and Entity B:\n+ *   Entity A refers a single instance of Entity B \n+ *   Entity B does not refer Entity A (owner)\n+ * Entity A is called owner and Entity B is called owned with respect\n+ * to the above relationship.\n+ * \n+ * Used to test identical application behavior with or without DataCache.\n+ * \n+ * @see BidirectionalOne2OneOwned\n+ * @see TestDataCacheBehavesIdentical\n+ * @see Section 2.1.8.3 of JPA Specification Version 1.0\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+\n+@Entity\n+public class BidirectionalOne2OneOwned {\n+\t@Id\n+\tprivate long id;\n+\t\n+\tprivate String name;\n+\t\n+\t@OneToOne(mappedBy=\"owned\")\n+\tprivate BidirectionalOne2OneOwner owner;\n+\t\n+\t@Version\n+\tprivate int version;\n+\n+\tpublic long getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(long id) {\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic BidirectionalOne2OneOwner getOwner() {\n+\t\treturn owner;\n+\t}\n+\n+\tpublic void setOwner(BidirectionalOne2OneOwner owner) {\n+\t\tthis.owner = owner;\n+\t}\n+\n+\tpublic int getVersion() {\n+\t\treturn version;\n+\t}\n+\t\n+\tpublic String toString() {\n+\t\treturn this.getClass().getSimpleName() + \":\" + id + \":\" + name;\n+\t}\n+\n+}"},{"sha":"caf7ff8787327210e41cd3aa584ebae8bcfb6971","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/BidirectionalOne2OneOwner.java","status":"modified","additions":86,"deletions":86,"changes":172,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/BidirectionalOne2OneOwner.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/BidirectionalOne2OneOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/BidirectionalOne2OneOwner.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,86 +1,86 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-\r\n-package org.apache.openjpa.persistence.cache.common.apps;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-/**\r\n- * A persistent entity that owns bidirectional single-valued relationship.\r\n- * A bidirectional relationship has only an owning side, which is this receiver.\r\n- * Given the following relationship between Entity A and Entity B:\r\n- *   Entity A refers to a single instance of Entity B \r\n- *   Entity B refers to a single instance of Entity A \r\n- * If Entity B qualifies its relation to the Entity A with mappedBy \r\n- * annotation qualifier then Entity B is called owned and Entity A is called \r\n- * owner with respect to the above relationship.\r\n- * \r\n- * Used to test identical application behavior with or without DataCache.\r\n- * \r\n- * @see BidirectionalOne2OneOwned\r\n- * \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-@Entity\r\n-public class BidirectionalOne2OneOwner {\r\n-\t@Id\r\n-\tprivate long id;\r\n-\t\r\n-\tprivate String name;\r\n-\t\r\n-\t@OneToOne\r\n-\tprivate BidirectionalOne2OneOwned owned;\r\n-\t\r\n-\t@Version\r\n-\tprivate int version;\r\n-\r\n-\tpublic long getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\r\n-\tpublic void setId(long id) {\r\n-\t\tthis.id = id;\r\n-\t}\r\n-\r\n-\tpublic String getName() {\r\n-\t\treturn name;\r\n-\t}\r\n-\r\n-\tpublic void setName(String name) {\r\n-\t\tthis.name = name;\r\n-\t}\r\n-\r\n-\tpublic BidirectionalOne2OneOwned getOwned() {\r\n-\t\treturn owned;\r\n-\t}\r\n-\r\n-\tpublic void setOwned(BidirectionalOne2OneOwned owned) {\r\n-\t\tthis.owned = owned;\r\n-\t}\r\n-\t\r\n-\tpublic int getVersion() {\r\n-\t\treturn version;\r\n-\t}\r\n-\t\r\n-\tpublic String toString() {\r\n-\t\treturn this.getClass().getSimpleName() + \":\" + id + \":\" + name;\r\n-\t}\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+\n+package org.apache.openjpa.persistence.cache.common.apps;\n+\n+import javax.persistence.*;\n+\n+/**\n+ * A persistent entity that owns bidirectional single-valued relationship.\n+ * A bidirectional relationship has only an owning side, which is this receiver.\n+ * Given the following relationship between Entity A and Entity B:\n+ *   Entity A refers to a single instance of Entity B \n+ *   Entity B refers to a single instance of Entity A \n+ * If Entity B qualifies its relation to the Entity A with mappedBy \n+ * annotation qualifier then Entity B is called owned and Entity A is called \n+ * owner with respect to the above relationship.\n+ * \n+ * Used to test identical application behavior with or without DataCache.\n+ * \n+ * @see BidirectionalOne2OneOwned\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+public class BidirectionalOne2OneOwner {\n+\t@Id\n+\tprivate long id;\n+\t\n+\tprivate String name;\n+\t\n+\t@OneToOne\n+\tprivate BidirectionalOne2OneOwned owned;\n+\t\n+\t@Version\n+\tprivate int version;\n+\n+\tpublic long getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(long id) {\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic BidirectionalOne2OneOwned getOwned() {\n+\t\treturn owned;\n+\t}\n+\n+\tpublic void setOwned(BidirectionalOne2OneOwned owned) {\n+\t\tthis.owned = owned;\n+\t}\n+\t\n+\tpublic int getVersion() {\n+\t\treturn version;\n+\t}\n+\t\n+\tpublic String toString() {\n+\t\treturn this.getClass().getSimpleName() + \":\" + id + \":\" + name;\n+\t}\n+\n+}"},{"sha":"379003f88e5515e1bbeb0da1c9ac55dda7a8ef24","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/Entity1.java","status":"modified","additions":99,"deletions":99,"changes":198,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/Entity1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/Entity1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/Entity1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,99 +1,99 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.cache.common.apps;\r\n-\r\n-import java.io.Serializable;\r\n-import javax.persistence.Basic;\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.EntityResult;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-import javax.persistence.OneToOne;\r\n-import javax.persistence.SqlResultSetMapping;\r\n-import javax.persistence.Version;\r\n-\r\n-@Entity\r\n-@Inheritance(strategy = InheritanceType.JOINED)\r\n-@SqlResultSetMapping(name = \"NativeTestResult\",\r\n-    entities = @EntityResult(entityClass = Entity1.class))\r\n-public class Entity1 implements Serializable {\r\n-\r\n-    private static final long serialVersionUID = 2882935803066041165L;\r\n-\r\n-    @Id\r\n-    protected long pk;\r\n-\r\n-    @Basic\r\n-    @Column(length = 35)\r\n-    protected String stringField;\r\n-\r\n-    @Basic\r\n-    protected int intField;\r\n-\r\n-    @OneToOne(cascade = { CascadeType.REMOVE, CascadeType.PERSIST })\r\n-    protected Entity2 entity2Field;\r\n-\r\n-    @Version\r\n-    protected int versionField;\r\n-\r\n-    public Entity1() {\r\n-    }\r\n-\r\n-    public Entity1(long pk, String stringField, int intField) {\r\n-        this.pk = pk;\r\n-        this.stringField = stringField;\r\n-        this.intField = intField;\r\n-    }\r\n-\r\n-    public long getPk() {\r\n-        return pk;\r\n-    }\r\n-\r\n-    public void setStringField(String val) {\r\n-        stringField = val;\r\n-    }\r\n-\r\n-    public String getStringField() {\r\n-        return stringField;\r\n-    }\r\n-\r\n-    public void setIntField(int val) {\r\n-        intField = val;\r\n-    }\r\n-\r\n-    public int getIntField() {\r\n-        return intField;\r\n-    }\r\n-\r\n-    public void setEntity2Field(Entity2 val) {\r\n-        entity2Field = val;\r\n-    }\r\n-\r\n-    public Entity2 getEntity2Field() {\r\n-        return entity2Field;\r\n-    }\r\n-\r\n-    public String toString() {\r\n-        return (\"PK: \" + pk + \" StringField: \" + stringField + \" IntField: \" +\r\n-            intField);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.common.apps;\n+\n+import java.io.Serializable;\n+import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EntityResult;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.OneToOne;\n+import javax.persistence.SqlResultSetMapping;\n+import javax.persistence.Version;\n+\n+@Entity\n+@Inheritance(strategy = InheritanceType.JOINED)\n+@SqlResultSetMapping(name = \"NativeTestResult\",\n+    entities = @EntityResult(entityClass = Entity1.class))\n+public class Entity1 implements Serializable {\n+\n+    private static final long serialVersionUID = 2882935803066041165L;\n+\n+    @Id\n+    protected long pk;\n+\n+    @Basic\n+    @Column(length = 35)\n+    protected String stringField;\n+\n+    @Basic\n+    protected int intField;\n+\n+    @OneToOne(cascade = { CascadeType.REMOVE, CascadeType.PERSIST })\n+    protected Entity2 entity2Field;\n+\n+    @Version\n+    protected int versionField;\n+\n+    public Entity1() {\n+    }\n+\n+    public Entity1(long pk, String stringField, int intField) {\n+        this.pk = pk;\n+        this.stringField = stringField;\n+        this.intField = intField;\n+    }\n+\n+    public long getPk() {\n+        return pk;\n+    }\n+\n+    public void setStringField(String val) {\n+        stringField = val;\n+    }\n+\n+    public String getStringField() {\n+        return stringField;\n+    }\n+\n+    public void setIntField(int val) {\n+        intField = val;\n+    }\n+\n+    public int getIntField() {\n+        return intField;\n+    }\n+\n+    public void setEntity2Field(Entity2 val) {\n+        entity2Field = val;\n+    }\n+\n+    public Entity2 getEntity2Field() {\n+        return entity2Field;\n+    }\n+\n+    public String toString() {\n+        return (\"PK: \" + pk + \" StringField: \" + stringField + \" IntField: \" +\n+            intField);\n+    }\n+}"},{"sha":"db3e279b1eeb380f14132dcfcbd285045c1b06d3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/Entity2.java","status":"modified","additions":82,"deletions":82,"changes":164,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/Entity2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/Entity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/Entity2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,82 +1,82 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.cache.common.apps;\r\n-\r\n-import java.io.Serializable;\r\n-import javax.persistence.Basic;\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-\r\n-//@Entity(name=\"entity2ExplicitName\")\r\n-@Entity\r\n-@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n-public class Entity2 implements Serializable {\r\n-\r\n-    /**\r\n-     *\r\n-     */\r\n-    private static final long serialVersionUID = 4723739219953167343L;\r\n-\r\n-    @Id\r\n-    protected long pk;\r\n-\r\n-    @Basic\r\n-    @Column(length = 35)\r\n-    protected String stringField;\r\n-\r\n-    @Basic\r\n-    protected int intField;\r\n-\r\n-    public Entity2() {\r\n-    }\r\n-\r\n-    public Entity2(long pk, String stringField, int intField) {\r\n-        this.pk = pk;\r\n-        this.stringField = stringField;\r\n-        this.intField = intField;\r\n-    }\r\n-\r\n-    public long getPk() {\r\n-        return pk;\r\n-    }\r\n-\r\n-    public void setStringField(String val) {\r\n-        stringField = val;\r\n-    }\r\n-\r\n-    public String getStringField() {\r\n-        return stringField;\r\n-    }\r\n-\r\n-    public void setIntField(int val) {\r\n-        intField = val;\r\n-    }\r\n-\r\n-    public int getIntField() {\r\n-        return intField;\r\n-    }\r\n-\r\n-    public String toString() {\r\n-        return (\"PK: \" + pk + \" StringField: \" + stringField + \" IntField: \" +\r\n-            intField);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.common.apps;\n+\n+import java.io.Serializable;\n+import javax.persistence.Basic;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+\n+//@Entity(name=\"entity2ExplicitName\")\n+@Entity\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n+public class Entity2 implements Serializable {\n+\n+    /**\n+     *\n+     */\n+    private static final long serialVersionUID = 4723739219953167343L;\n+\n+    @Id\n+    protected long pk;\n+\n+    @Basic\n+    @Column(length = 35)\n+    protected String stringField;\n+\n+    @Basic\n+    protected int intField;\n+\n+    public Entity2() {\n+    }\n+\n+    public Entity2(long pk, String stringField, int intField) {\n+        this.pk = pk;\n+        this.stringField = stringField;\n+        this.intField = intField;\n+    }\n+\n+    public long getPk() {\n+        return pk;\n+    }\n+\n+    public void setStringField(String val) {\n+        stringField = val;\n+    }\n+\n+    public String getStringField() {\n+        return stringField;\n+    }\n+\n+    public void setIntField(int val) {\n+        intField = val;\n+    }\n+\n+    public int getIntField() {\n+        return intField;\n+    }\n+\n+    public String toString() {\n+        return (\"PK: \" + pk + \" StringField: \" + stringField + \" IntField: \" +\n+            intField);\n+    }\n+}"},{"sha":"520657eb5e593e11db75a16c660653e34f0e66d0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/UnidirectionalOne2OneOwned.java","status":"modified","additions":77,"deletions":77,"changes":154,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/UnidirectionalOne2OneOwned.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/UnidirectionalOne2OneOwned.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/UnidirectionalOne2OneOwned.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,77 +1,77 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-\r\n-package org.apache.openjpa.persistence.cache.common.apps;\r\n-\r\n-import javax.persistence.*;\r\n-/**\r\n- * A persistent entity that is owned by unidirectional single-valued \r\n- * relationship.\r\n- * A unidirectional relationship has only one owning side and the other side\r\n- * called as owned side is this receiver.\r\n- * Given the following relationship between Entity A and Entity B:\r\n- *   Entity A refers a single instance of Entity B \r\n- *   Entity B does not refer Entity A (owner)\r\n- * Entity A is called owner and Entity B is called owned with respect\r\n- * to the above relationship.\r\n- * \r\n- * Used to test identical application behavior with or without DataCache.\r\n- * \r\n- * @see UnidirectionalOne2OneOwned\r\n- * @see TestDataCacheBehavesIdentical\r\n- * @see Section 2.1.8.3 of JPA Specification Version 1.0\r\n- * \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-\r\n-@Entity\r\n-public class UnidirectionalOne2OneOwned {\r\n-\t@Id\r\n-\tprivate long id;\r\n-\t\r\n-\tprivate String name;\r\n-\t\r\n-\t@Version\r\n-\tprivate int version;\r\n-\r\n-\tpublic long getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\r\n-\tpublic void setId(long id) {\r\n-\t\tthis.id = id;\r\n-\t}\r\n-\r\n-\tpublic String getName() {\r\n-\t\treturn name;\r\n-\t}\r\n-\r\n-\tpublic void setName(String name) {\r\n-\t\tthis.name = name;\r\n-\t}\r\n-\r\n-\tpublic int getVersion() {\r\n-\t\treturn version;\r\n-\t}\r\n-\t\r\n-\tpublic String toString() {\r\n-\t\treturn this.getClass().getSimpleName() + \":\" + id + \":\" + name;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+\n+package org.apache.openjpa.persistence.cache.common.apps;\n+\n+import javax.persistence.*;\n+/**\n+ * A persistent entity that is owned by unidirectional single-valued \n+ * relationship.\n+ * A unidirectional relationship has only one owning side and the other side\n+ * called as owned side is this receiver.\n+ * Given the following relationship between Entity A and Entity B:\n+ *   Entity A refers a single instance of Entity B \n+ *   Entity B does not refer Entity A (owner)\n+ * Entity A is called owner and Entity B is called owned with respect\n+ * to the above relationship.\n+ * \n+ * Used to test identical application behavior with or without DataCache.\n+ * \n+ * @see UnidirectionalOne2OneOwned\n+ * @see TestDataCacheBehavesIdentical\n+ * @see Section 2.1.8.3 of JPA Specification Version 1.0\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+\n+@Entity\n+public class UnidirectionalOne2OneOwned {\n+\t@Id\n+\tprivate long id;\n+\t\n+\tprivate String name;\n+\t\n+\t@Version\n+\tprivate int version;\n+\n+\tpublic long getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(long id) {\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic int getVersion() {\n+\t\treturn version;\n+\t}\n+\t\n+\tpublic String toString() {\n+\t\treturn this.getClass().getSimpleName() + \":\" + id + \":\" + name;\n+\t}\n+}"},{"sha":"558d85a86660487a0ed88bd022a2030fd8ab9988","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/UnidirectionalOne2OneOwner.java","status":"modified","additions":87,"deletions":87,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/UnidirectionalOne2OneOwner.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/UnidirectionalOne2OneOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/common/apps/UnidirectionalOne2OneOwner.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,87 +1,87 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-\r\n-package org.apache.openjpa.persistence.cache.common.apps;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-/**\r\n- * A persistent entity that owns unidirectional single-valued relationship.\r\n- * A unidirectional relationship has only one owning side, which is this \r\n- * receiver.\r\n- * Given the following relationship between Entity A and Entity B:\r\n- *   Entity A refers a single instance of Entity B \r\n- *   Entity B does not refer Entity A (owner)\r\n- * Entity A is called owner and Entity B is called owned with respect\r\n- * to the above relationship.\r\n- * \r\n- * Used to test identical application behavior with or without DataCache.\r\n- * \r\n- * @see UnidirectionalOne2OneOwned\r\n- * @see TestDataCacheBehavesIdentical\r\n- * @see Section 2.1.8.3 of JPA Specification Version 1.0\r\n- * \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-@Entity\r\n-public class UnidirectionalOne2OneOwner {\r\n-\t@Id\r\n-\tprivate long id;\r\n-\t\r\n-\tprivate String name;\r\n-\t\r\n-\t@OneToOne\r\n-\tprivate UnidirectionalOne2OneOwned owned;\r\n-\t\r\n-\t@Version\r\n-\tprivate int version;\r\n-\r\n-\tpublic long getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\r\n-\tpublic void setId(long id) {\r\n-\t\tthis.id = id;\r\n-\t}\r\n-\r\n-\tpublic String getName() {\r\n-\t\treturn name;\r\n-\t}\r\n-\r\n-\tpublic void setName(String name) {\r\n-\t\tthis.name = name;\r\n-\t}\r\n-\r\n-\tpublic UnidirectionalOne2OneOwned getOwned() {\r\n-\t\treturn owned;\r\n-\t}\r\n-\r\n-\tpublic void setOwned(UnidirectionalOne2OneOwned owned) {\r\n-\t\tthis.owned = owned;\r\n-\t}\r\n-\t\r\n-\tpublic int getVersion() {\r\n-\t\treturn version;\r\n-\t}\r\n-\t\r\n-\tpublic String toString() {\r\n-\t\treturn this.getClass().getSimpleName() + \":\" + id + \":\" + name;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+\n+package org.apache.openjpa.persistence.cache.common.apps;\n+\n+import javax.persistence.*;\n+\n+/**\n+ * A persistent entity that owns unidirectional single-valued relationship.\n+ * A unidirectional relationship has only one owning side, which is this \n+ * receiver.\n+ * Given the following relationship between Entity A and Entity B:\n+ *   Entity A refers a single instance of Entity B \n+ *   Entity B does not refer Entity A (owner)\n+ * Entity A is called owner and Entity B is called owned with respect\n+ * to the above relationship.\n+ * \n+ * Used to test identical application behavior with or without DataCache.\n+ * \n+ * @see UnidirectionalOne2OneOwned\n+ * @see TestDataCacheBehavesIdentical\n+ * @see Section 2.1.8.3 of JPA Specification Version 1.0\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+public class UnidirectionalOne2OneOwner {\n+\t@Id\n+\tprivate long id;\n+\t\n+\tprivate String name;\n+\t\n+\t@OneToOne\n+\tprivate UnidirectionalOne2OneOwned owned;\n+\t\n+\t@Version\n+\tprivate int version;\n+\n+\tpublic long getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(long id) {\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic UnidirectionalOne2OneOwned getOwned() {\n+\t\treturn owned;\n+\t}\n+\n+\tpublic void setOwned(UnidirectionalOne2OneOwned owned) {\n+\t\tthis.owned = owned;\n+\t}\n+\t\n+\tpublic int getVersion() {\n+\t\treturn version;\n+\t}\n+\t\n+\tpublic String toString() {\n+\t\treturn this.getClass().getSimpleName() + \":\" + id + \":\" + name;\n+\t}\n+}"},{"sha":"05ed3493fdc58c53daa645febc953b936b41d33c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/EntityListenerEntity.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/EntityListenerEntity.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/EntityListenerEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/EntityListenerEntity.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,49 +1,49 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.callbacks;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.EntityListeners;\r\n-\r\n-@Entity\r\n-@EntityListeners(value = ListenerImpl.class)\r\n-public class EntityListenerEntity implements ListenerTestEntity {\r\n-    @Id @GeneratedValue\r\n-    private long id;\r\n-\r\n-    private int value;\r\n-\r\n-    public long getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(long id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public int getValue() {\r\n-        return value;\r\n-    }\r\n-\r\n-    public void setValue(int value) {\r\n-        this.value = value;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.callbacks;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.EntityListeners;\n+\n+@Entity\n+@EntityListeners(value = ListenerImpl.class)\n+public class EntityListenerEntity implements ListenerTestEntity {\n+    @Id @GeneratedValue\n+    private long id;\n+\n+    private int value;\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public int getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(int value) {\n+        this.value = value;\n+    }\n+}"},{"sha":"2b13764fba949b3424a444de42a01302ff964f61","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/GlobalListenerEntity.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/GlobalListenerEntity.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/GlobalListenerEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/GlobalListenerEntity.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,50 +1,50 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.callbacks;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.EntityListeners;\r\n-\r\n-import org.apache.openjpa.persistence.callbacks.ListenerImpl;\r\n-\r\n-@Entity\r\n-public class GlobalListenerEntity implements ListenerTestEntity {\r\n-    @Id @GeneratedValue\r\n-    private long id;\r\n-\r\n-    private int value;\r\n-\r\n-    public long getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(long id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public int getValue() {\r\n-        return value;\r\n-    }\r\n-\r\n-    public void setValue(int value) {\r\n-        this.value = value;\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.callbacks;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.EntityListeners;\n+\n+import org.apache.openjpa.persistence.callbacks.ListenerImpl;\n+\n+@Entity\n+public class GlobalListenerEntity implements ListenerTestEntity {\n+    @Id @GeneratedValue\n+    private long id;\n+\n+    private int value;\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public int getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(int value) {\n+        this.value = value;\n+    }\n }\n\\ No newline at end of file"},{"sha":"39ef5ea8a20dc9cb3f99473fa076cb127f478357","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerImpl.java","status":"modified","additions":73,"deletions":73,"changes":146,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerImpl.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,73 +1,73 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.callbacks;\r\n-\r\n-import javax.persistence.PrePersist;\r\n-import javax.persistence.PostPersist;\r\n-import javax.persistence.PostLoad;\r\n-import javax.persistence.PreUpdate;\r\n-import javax.persistence.PostUpdate;\r\n-import javax.persistence.PreRemove;\r\n-import javax.persistence.PostRemove;\r\n-\r\n-public class ListenerImpl {\r\n-\r\n-    static int prePersistCount;\r\n-    static int postPersistCount;\r\n-    static int preUpdateCount;\r\n-    static int postUpdateCount;\r\n-    static int preRemoveCount;\r\n-    static int postRemoveCount;\r\n-    static int postLoadCount;\r\n-\r\n-    @PrePersist\r\n-    public void prePersist(Object o) {\r\n-        prePersistCount++;\r\n-    }\r\n-\r\n-    @PostPersist\r\n-    public void postPersist(Object o) {\r\n-        postPersistCount++;\r\n-    }\r\n-\r\n-    @PostLoad\r\n-    public void postLoad(Object o) {\r\n-        postLoadCount++;\r\n-    }\r\n-\r\n-    @PreUpdate\r\n-    public void preUpdate(Object o) {\r\n-        preUpdateCount++;\r\n-    }\r\n-\r\n-    @PostUpdate\r\n-    public void postUpdate(Object o) {\r\n-        postUpdateCount++;\r\n-    }\r\n-\r\n-    @PreRemove\r\n-    public void preRemove(Object o) {\r\n-        preRemoveCount++;\r\n-    }\r\n-\r\n-    @PostRemove\r\n-    public void postRemove(Object o) {\r\n-        postRemoveCount++;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.callbacks;\n+\n+import javax.persistence.PrePersist;\n+import javax.persistence.PostPersist;\n+import javax.persistence.PostLoad;\n+import javax.persistence.PreUpdate;\n+import javax.persistence.PostUpdate;\n+import javax.persistence.PreRemove;\n+import javax.persistence.PostRemove;\n+\n+public class ListenerImpl {\n+\n+    static int prePersistCount;\n+    static int postPersistCount;\n+    static int preUpdateCount;\n+    static int postUpdateCount;\n+    static int preRemoveCount;\n+    static int postRemoveCount;\n+    static int postLoadCount;\n+\n+    @PrePersist\n+    public void prePersist(Object o) {\n+        prePersistCount++;\n+    }\n+\n+    @PostPersist\n+    public void postPersist(Object o) {\n+        postPersistCount++;\n+    }\n+\n+    @PostLoad\n+    public void postLoad(Object o) {\n+        postLoadCount++;\n+    }\n+\n+    @PreUpdate\n+    public void preUpdate(Object o) {\n+        preUpdateCount++;\n+    }\n+\n+    @PostUpdate\n+    public void postUpdate(Object o) {\n+        postUpdateCount++;\n+    }\n+\n+    @PreRemove\n+    public void preRemove(Object o) {\n+        preRemoveCount++;\n+    }\n+\n+    @PostRemove\n+    public void postRemove(Object o) {\n+        postRemoveCount++;\n+    }\n+}"},{"sha":"7d009a87d32d1172de6c9ff85930bc296bc81b12","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerTestEntity.java","status":"modified","additions":28,"deletions":28,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerTestEntity.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerTestEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/ListenerTestEntity.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,28 +1,28 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.callbacks;\r\n-\r\n-public interface ListenerTestEntity {\r\n-\r\n-    public long getId();\r\n-\r\n-    public int getValue();\r\n-\r\n-    public void setValue(int val);\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.callbacks;\n+\n+public interface ListenerTestEntity {\n+\n+    public long getId();\n+\n+    public int getValue();\n+\n+    public void setValue(int val);\n+}"},{"sha":"87b5d0489c363242420c454c3a42bf4788e4257a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/Message.java","status":"modified","additions":113,"deletions":113,"changes":226,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/Message.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/Message.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/Message.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,114 +1,114 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.callbacks;\r\n-\r\n-import java.util.Date;\r\n-\r\n-import javax.persistence.Basic;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.EntityListeners;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Version;\r\n-\r\n-/**\r\n- * A very simple persistent entity that holds a \"message\", has a \"created\" field\r\n- * that is initialized to the time at which the object was created, and an id\r\n- * field that is initialized to the current time.\r\n- */\r\n-@Entity\r\n-@EntityListeners(value = MessageListenerImpl.class)\r\n-public class Message {\r\n-    @Id\r\n-    @GeneratedValue\r\n-    private long id;\r\n-\r\n-    @Basic\r\n-    private String message;\r\n-\r\n-    @Basic\r\n-    private Date created = null;\r\n-\r\n-    @Basic\r\n-    private Date updated = null;\r\n-\r\n-    @Version\r\n-    Integer version;\r\n-\r\n-    public Message() {\r\n-    }\r\n-\r\n-    public Message(String msg) {\r\n-        message = msg;\r\n-    }\r\n-\r\n-    public void setId(long val) {\r\n-        id = val;\r\n-    }\r\n-\r\n-    public long getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setMessage(String msg) {\r\n-        message = msg;\r\n-    }\r\n-\r\n-    public String getMessage() {\r\n-        return message;\r\n-    }\r\n-\r\n-    public void setCreated(Date date) {\r\n-        created = date;\r\n-    }\r\n-\r\n-    public Date getCreated() {\r\n-        return created;\r\n-    }\r\n-\r\n-    public Integer getVersion() {\r\n-        return version;\r\n-    }\r\n-\r\n-    public void setVersion(Integer version) {\r\n-        this.version = version;\r\n-    }\r\n-\r\n-    public Date getUpdated() {\r\n-        return updated;\r\n-    }\r\n-\r\n-    public void setUpdated(Date updated) {\r\n-        this.updated = updated;\r\n-    }\r\n-\r\n-    @Override\r\n-    public boolean equals(Object o) {\r\n-        if (o instanceof Message) {\r\n-            Message other = (Message) o;\r\n-            return other.getId() == this.getId();\r\n-        }\r\n-        return false;\r\n-    }\r\n-\r\n-    @Override\r\n-    public int hashCode() {\r\n-        return super.hashCode();\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.callbacks;\n+\n+import java.util.Date;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.EntityListeners;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+/**\n+ * A very simple persistent entity that holds a \"message\", has a \"created\" field\n+ * that is initialized to the time at which the object was created, and an id\n+ * field that is initialized to the current time.\n+ */\n+@Entity\n+@EntityListeners(value = MessageListenerImpl.class)\n+public class Message {\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    @Basic\n+    private String message;\n+\n+    @Basic\n+    private Date created = null;\n+\n+    @Basic\n+    private Date updated = null;\n+\n+    @Version\n+    Integer version;\n+\n+    public Message() {\n+    }\n+\n+    public Message(String msg) {\n+        message = msg;\n+    }\n+\n+    public void setId(long val) {\n+        id = val;\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setMessage(String msg) {\n+        message = msg;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public void setCreated(Date date) {\n+        created = date;\n+    }\n+\n+    public Date getCreated() {\n+        return created;\n+    }\n+\n+    public Integer getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(Integer version) {\n+        this.version = version;\n+    }\n+\n+    public Date getUpdated() {\n+        return updated;\n+    }\n+\n+    public void setUpdated(Date updated) {\n+        this.updated = updated;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (o instanceof Message) {\n+            Message other = (Message) o;\n+            return other.getId() == this.getId();\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return super.hashCode();\n+    }\n }\n\\ No newline at end of file"},{"sha":"9141e1e71db3b8462b39608148726874eaf86313","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/MessageListenerImpl.java","status":"modified","additions":102,"deletions":102,"changes":204,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/MessageListenerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/MessageListenerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/MessageListenerImpl.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,102 +1,102 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.callbacks;\r\n-\r\n-import java.util.Date;\r\n-\r\n-import javax.persistence.PrePersist;\r\n-import javax.persistence.PostPersist;\r\n-import javax.persistence.PostLoad;\r\n-import javax.persistence.PreUpdate;\r\n-import javax.persistence.PostUpdate;\r\n-import javax.persistence.PreRemove;\r\n-import javax.persistence.PostRemove;\r\n-\r\n-public class MessageListenerImpl {\r\n-\r\n-    public static int prePersistCount;\r\n-    public static int postPersistCount;\r\n-    public static int preUpdateCount;\r\n-    public static int postUpdateCount;\r\n-    public static int preRemoveCount;\r\n-    public static int postRemoveCount;\r\n-    public static int postLoadCount;\r\n-\r\n-    @PrePersist\r\n-    public void prePersist(Object o) {\r\n-        prePersistCount++;\r\n-\r\n-        if (o instanceof Message) {\r\n-            ((Message) o).setCreated(new Date());\r\n-            ((Message) o).setUpdated(new Date());\r\n-        }\r\n-    }\r\n-\r\n-    @PostPersist\r\n-    public void postPersist(Object o) {\r\n-        postPersistCount++;\r\n-    }\r\n-\r\n-    @PostLoad\r\n-    public void postLoad(Object o) {\r\n-        postLoadCount++;\r\n-    }\r\n-\r\n-    @PreUpdate\r\n-    public void preUpdate(Object o) {\r\n-        preUpdateCount++;\r\n-\r\n-        if (o instanceof Message) {\r\n-            ((Message) o).setUpdated(new Date());\r\n-        }\r\n-    }\r\n-\r\n-    @PostUpdate\r\n-    public void postUpdate(Object o) {\r\n-        postUpdateCount++;\r\n-    }\r\n-\r\n-    @PreRemove\r\n-    public void preRemove(Object o) {\r\n-        preRemoveCount++;\r\n-    }\r\n-\r\n-    @PostRemove\r\n-    public void postRemove(Object o) {\r\n-        postRemoveCount++;\r\n-    }\r\n-\r\n-    public static void resetCounters() {\r\n-        prePersistCount = 0;\r\n-        postPersistCount = 0;\r\n-        preUpdateCount = 0;\r\n-        postUpdateCount = 0;\r\n-        preRemoveCount = 0;\r\n-        postRemoveCount = 0;\r\n-        postLoadCount = 0;\r\n-    }\r\n-\r\n-    public static String getStates() {\r\n-        return \"prePersistCount = \" + prePersistCount + \", postPersistCount = \"\r\n-            + postPersistCount + \", preUpdateCount = \" + preUpdateCount\r\n-            + \", postUpdateCount = \" + postUpdateCount + \", preRemoveCount = \"\r\n-            + preRemoveCount + \", postRemoveCount = \" + postRemoveCount\r\n-            + \", postLoadCount = \" + postLoadCount;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.callbacks;\n+\n+import java.util.Date;\n+\n+import javax.persistence.PrePersist;\n+import javax.persistence.PostPersist;\n+import javax.persistence.PostLoad;\n+import javax.persistence.PreUpdate;\n+import javax.persistence.PostUpdate;\n+import javax.persistence.PreRemove;\n+import javax.persistence.PostRemove;\n+\n+public class MessageListenerImpl {\n+\n+    public static int prePersistCount;\n+    public static int postPersistCount;\n+    public static int preUpdateCount;\n+    public static int postUpdateCount;\n+    public static int preRemoveCount;\n+    public static int postRemoveCount;\n+    public static int postLoadCount;\n+\n+    @PrePersist\n+    public void prePersist(Object o) {\n+        prePersistCount++;\n+\n+        if (o instanceof Message) {\n+            ((Message) o).setCreated(new Date());\n+            ((Message) o).setUpdated(new Date());\n+        }\n+    }\n+\n+    @PostPersist\n+    public void postPersist(Object o) {\n+        postPersistCount++;\n+    }\n+\n+    @PostLoad\n+    public void postLoad(Object o) {\n+        postLoadCount++;\n+    }\n+\n+    @PreUpdate\n+    public void preUpdate(Object o) {\n+        preUpdateCount++;\n+\n+        if (o instanceof Message) {\n+            ((Message) o).setUpdated(new Date());\n+        }\n+    }\n+\n+    @PostUpdate\n+    public void postUpdate(Object o) {\n+        postUpdateCount++;\n+    }\n+\n+    @PreRemove\n+    public void preRemove(Object o) {\n+        preRemoveCount++;\n+    }\n+\n+    @PostRemove\n+    public void postRemove(Object o) {\n+        postRemoveCount++;\n+    }\n+\n+    public static void resetCounters() {\n+        prePersistCount = 0;\n+        postPersistCount = 0;\n+        preUpdateCount = 0;\n+        postUpdateCount = 0;\n+        preRemoveCount = 0;\n+        postRemoveCount = 0;\n+        postLoadCount = 0;\n+    }\n+\n+    public static String getStates() {\n+        return \"prePersistCount = \" + prePersistCount + \", postPersistCount = \"\n+            + postPersistCount + \", preUpdateCount = \" + preUpdateCount\n+            + \", postUpdateCount = \" + postUpdateCount + \", preRemoveCount = \"\n+            + preRemoveCount + \", postRemoveCount = \" + postRemoveCount\n+            + \", postLoadCount = \" + postLoadCount;\n+    }\n+}"},{"sha":"741c78d571604ebebfb8b3224d58e8e7102e2950","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/PostPersistEntity.java","status":"modified","additions":75,"deletions":75,"changes":150,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/PostPersistEntity.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/PostPersistEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/PostPersistEntity.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,75 +1,75 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.callbacks;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.PostPersist;\r\n-\r\n-/**\r\n- * A persistent entity to test that when PostPersist callback is invoked can\r\n- * be configured. Also the auto-generated persistent identity is assigned when \r\n- * PostPersist is invoked.\r\n- *  \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-@Entity\r\n-public class PostPersistEntity {\r\n-    @Id\r\n-    @GeneratedValue\r\n-    private long id;\r\n-    \r\n-    private String name;\r\n-    \r\n-    transient int postPersistCallbackCount;\r\n-    transient long idOnCallback;\r\n-    \r\n-    @PostPersist\r\n-    public void postPersist() {\r\n-        postPersistCallbackCount++;\r\n-        idOnCallback = ((Long)getByReflection(\"id\")).longValue();\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    public long getId() {\r\n-        return id;\r\n-    }\r\n-    \r\n-    /**\r\n-     * Gets value of the named field by reflection to ensure that the field is\r\n-     * not loaded as a side-effect to access it.\r\n-     * @return\r\n-     */\r\n-    Object getByReflection(String f) {\r\n-        try {\r\n-            return getClass().getDeclaredField(f).get(this);\r\n-        } catch (Exception e) {\r\n-            throw new RuntimeException(e);\r\n-        } \r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.callbacks;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.PostPersist;\n+\n+/**\n+ * A persistent entity to test that when PostPersist callback is invoked can\n+ * be configured. Also the auto-generated persistent identity is assigned when \n+ * PostPersist is invoked.\n+ *  \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+public class PostPersistEntity {\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+    \n+    private String name;\n+    \n+    transient int postPersistCallbackCount;\n+    transient long idOnCallback;\n+    \n+    @PostPersist\n+    public void postPersist() {\n+        postPersistCallbackCount++;\n+        idOnCallback = ((Long)getByReflection(\"id\")).longValue();\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+    \n+    /**\n+     * Gets value of the named field by reflection to ensure that the field is\n+     * not loaded as a side-effect to access it.\n+     * @return\n+     */\n+    Object getByReflection(String f) {\n+        try {\n+            return getClass().getDeclaredField(f).get(this);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        } \n+    }\n+}"},{"sha":"621180768fcf366cdd8521186941159331987896","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestEntityListeners.java","status":"modified","additions":114,"deletions":114,"changes":228,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestEntityListeners.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestEntityListeners.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestEntityListeners.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,114 +1,114 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.callbacks;\r\n-\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-public class TestEntityListeners extends SingleEMFTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(CLEAR_TABLES);\r\n-        ListenerImpl.prePersistCount = 0;\r\n-        ListenerImpl.postPersistCount = 0;\r\n-        ListenerImpl.preUpdateCount = 0;\r\n-        ListenerImpl.postUpdateCount = 0;\r\n-        ListenerImpl.preRemoveCount = 0;\r\n-        ListenerImpl.postRemoveCount = 0;\r\n-        ListenerImpl.postLoadCount = 0;\r\n-    }\r\n-\r\n-    @Override\r\n-    protected String getPersistenceUnitName() {\r\n-        return \"listener-pu\";\r\n-    }\r\n-\r\n-    public void testEntityListeners() {\r\n-        helper(true);\r\n-    }\r\n-\r\n-    public void testGlobalListeners() {\r\n-        helper(false);\r\n-    }\r\n-\r\n-    public void helper(boolean entityListeners) {\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        try {\r\n-            em.getTransaction().begin();\r\n-            ListenerTestEntity o;\r\n-            if (entityListeners)\r\n-                o = new EntityListenerEntity();\r\n-            else\r\n-                o = new GlobalListenerEntity();\r\n-            em.persist(o);\r\n-\r\n-            assertStatus(1, 0, 0, 0, 0, 0, 0);\r\n-\r\n-            em.getTransaction().commit();\r\n-            long id = o.getId();\r\n-            em.close();\r\n-\r\n-            assertStatus(1, 1, 0, 0, 0, 0, 0);\r\n-\r\n-            em = emf.createEntityManager();\r\n-            em.getTransaction().begin();\r\n-            if (entityListeners)\r\n-                o = em.find(EntityListenerEntity.class, id);\r\n-            else\r\n-                o = em.find(GlobalListenerEntity.class, id);\r\n-\r\n-            assertNotNull(o);\r\n-            assertStatus(1, 1, 0, 0, 0, 0, 1);\r\n-\r\n-            o.setValue(o.getValue() + 1);\r\n-\r\n-            em.flush();\r\n-            assertStatus(1, 1, 1, 1, 0, 0, 1);\r\n-\r\n-            em.remove(o);\r\n-            assertStatus(1, 1, 1, 1, 1, 0, 1);\r\n-\r\n-            em.getTransaction().commit();\r\n-\r\n-            assertStatus(1, 1, 1, 1, 1, 1, 1);\r\n-\r\n-            em.close();\r\n-        } finally {\r\n-            if (em != null && em.getTransaction().isActive())\r\n-                em.getTransaction().rollback();\r\n-            if (em != null && em.isOpen())\r\n-                em.close();\r\n-        }\r\n-    }\r\n-\r\n-    private void assertStatus(\r\n-        int prePersist, int postPersist,\r\n-        int preUpdate, int postUpdate,\r\n-        int preRemove, int postRemove,\r\n-        int postLoad) {\r\n-        assertEquals(prePersist, ListenerImpl.prePersistCount);\r\n-        assertEquals(postPersist, ListenerImpl.postPersistCount);\r\n-        assertEquals(preUpdate, ListenerImpl.preUpdateCount);\r\n-        assertEquals(postUpdate, ListenerImpl.postUpdateCount);\r\n-        assertEquals(preRemove, ListenerImpl.preRemoveCount);\r\n-        assertEquals(postRemove, ListenerImpl.postRemoveCount);\r\n-        assertEquals(postLoad, ListenerImpl.postLoadCount);\r\n-    }\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.callbacks;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+public class TestEntityListeners extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(CLEAR_TABLES);\n+        ListenerImpl.prePersistCount = 0;\n+        ListenerImpl.postPersistCount = 0;\n+        ListenerImpl.preUpdateCount = 0;\n+        ListenerImpl.postUpdateCount = 0;\n+        ListenerImpl.preRemoveCount = 0;\n+        ListenerImpl.postRemoveCount = 0;\n+        ListenerImpl.postLoadCount = 0;\n+    }\n+\n+    @Override\n+    protected String getPersistenceUnitName() {\n+        return \"listener-pu\";\n+    }\n+\n+    public void testEntityListeners() {\n+        helper(true);\n+    }\n+\n+    public void testGlobalListeners() {\n+        helper(false);\n+    }\n+\n+    public void helper(boolean entityListeners) {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        try {\n+            em.getTransaction().begin();\n+            ListenerTestEntity o;\n+            if (entityListeners)\n+                o = new EntityListenerEntity();\n+            else\n+                o = new GlobalListenerEntity();\n+            em.persist(o);\n+\n+            assertStatus(1, 0, 0, 0, 0, 0, 0);\n+\n+            em.getTransaction().commit();\n+            long id = o.getId();\n+            em.close();\n+\n+            assertStatus(1, 1, 0, 0, 0, 0, 0);\n+\n+            em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            if (entityListeners)\n+                o = em.find(EntityListenerEntity.class, id);\n+            else\n+                o = em.find(GlobalListenerEntity.class, id);\n+\n+            assertNotNull(o);\n+            assertStatus(1, 1, 0, 0, 0, 0, 1);\n+\n+            o.setValue(o.getValue() + 1);\n+\n+            em.flush();\n+            assertStatus(1, 1, 1, 1, 0, 0, 1);\n+\n+            em.remove(o);\n+            assertStatus(1, 1, 1, 1, 1, 0, 1);\n+\n+            em.getTransaction().commit();\n+\n+            assertStatus(1, 1, 1, 1, 1, 1, 1);\n+\n+            em.close();\n+        } finally {\n+            if (em != null && em.getTransaction().isActive())\n+                em.getTransaction().rollback();\n+            if (em != null && em.isOpen())\n+                em.close();\n+        }\n+    }\n+\n+    private void assertStatus(\n+        int prePersist, int postPersist,\n+        int preUpdate, int postUpdate,\n+        int preRemove, int postRemove,\n+        int postLoad) {\n+        assertEquals(prePersist, ListenerImpl.prePersistCount);\n+        assertEquals(postPersist, ListenerImpl.postPersistCount);\n+        assertEquals(preUpdate, ListenerImpl.preUpdateCount);\n+        assertEquals(postUpdate, ListenerImpl.postUpdateCount);\n+        assertEquals(preRemove, ListenerImpl.preRemoveCount);\n+        assertEquals(postRemove, ListenerImpl.postRemoveCount);\n+        assertEquals(postLoad, ListenerImpl.postLoadCount);\n+    }\n+\n+}"},{"sha":"9b96f02e7efc0997be9969d36f8200da98710e7d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestMessageListeners.java","status":"modified","additions":188,"deletions":188,"changes":376,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestMessageListeners.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestMessageListeners.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestMessageListeners.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,188 +1,188 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.callbacks;\r\n-\r\n-import javax.persistence.Query;\r\n-\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-public class TestMessageListeners extends SingleEMFTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(DROP_TABLES);\r\n-    }\r\n-\r\n-    @Override\r\n-    protected String getPersistenceUnitName() {\r\n-        return \"listener-pu\";\r\n-    }\r\n-\r\n-    public void testUpdateInPrePersist() {\r\n-        // Create a new EntityManager from the EntityManagerFactory. The\r\n-        // EntityManager is the main object in the persistence API, and is\r\n-        // used to create, delete, and query objects, as well as access\r\n-        // the current transaction\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        try {\r\n-            // Begin a new local transaction so that we can persist a new entity\r\n-            em.getTransaction().begin();\r\n-\r\n-            MessageListenerImpl.resetCounters();\r\n-\r\n-            // Create and persist a new Message entity\r\n-            Message message = new Message(\"Hello Persistence!\");\r\n-            assertNull(\"Test message's created field to be null.\", message\r\n-                .getCreated());\r\n-            assertNull(\"Test message's updated field to be null.\", message\r\n-                .getUpdated());\r\n-\r\n-            em.persist(message);\r\n-\r\n-            // Pre-persist invoked, created and updated fields set\r\n-            assertStatus(1, 0, 0, 0, 0, 0, 0);\r\n-            assertNotNull(\"Test message's created field being set.\", message\r\n-                .getCreated());\r\n-            assertNotNull(\"Test message's updated field being set.\", message\r\n-                .getUpdated());\r\n-\r\n-            em.flush();\r\n-            // Post-persist invoked\r\n-            assertStatus(1, 1, 0, 0, 0, 0, 0);\r\n-\r\n-            em.clear();\r\n-\r\n-            // Perform a simple query to get the Message\r\n-            Query q = em.createQuery(\"select m from Message m where m.id=\"\r\n-                + message.getId());\r\n-            Message m = (Message) q.getSingleResult();\r\n-\r\n-            assertEquals(\"Test first expected message.\", \"Hello Persistence!\",\r\n-                m.getMessage());\r\n-            assertNotNull(\"Test message's created field being set.\", m\r\n-                .getCreated());\r\n-            assertNotNull(\"Test message's updated field being set.\", m\r\n-                .getUpdated());\r\n-\r\n-            // query trigger a load because em is cleared.\r\n-            assertStatus(1, 1, 0, 0, 0, 0, 1);\r\n-\r\n-            em.getTransaction().commit();\r\n-\r\n-            // since data is flushed, commit data with no event fired.\r\n-            assertStatus(1, 1, 0, 0, 0, 0, 1);\r\n-        } finally {\r\n-            if (em != null && em.getTransaction().isActive())\r\n-                em.getTransaction().rollback();\r\n-            if (em != null && em.isOpen())\r\n-                em.close();\r\n-        }\r\n-    }\r\n-\r\n-    public void testUpdateInPreUpdate() {\r\n-        // Create a new EntityManager from the EntityManagerFactory. The\r\n-        // EntityManager is the main object in the persistence API, and is\r\n-        // used to create, delete, and query objects, as well as access\r\n-        // the current transaction\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        try {\r\n-            // Begin a new local transaction so that we can persist a new entity\r\n-            em.getTransaction().begin();\r\n-\r\n-            MessageListenerImpl.resetCounters();\r\n-\r\n-            // Create and persist a new Message entity\r\n-            Message message = new Message(\"Hello Persistence!\");\r\n-            assertNull(\"Test message's created field to be null.\", message\r\n-                .getCreated());\r\n-            assertNull(\"Test message's updated field to be null.\", message\r\n-                .getUpdated());\r\n-\r\n-            em.persist(message);\r\n-\r\n-            // Pre-persist invoked, created and updated fields set\r\n-            assertStatus(1, 0, 0, 0, 0, 0, 0);\r\n-            assertNotNull(\"Test message's created field being set.\", message\r\n-                .getCreated());\r\n-            assertNotNull(\"Test message's updated field being set.\", message\r\n-                .getUpdated());\r\n-\r\n-            // Perform a simple query to get the Message\r\n-            Query q = em.createQuery(\"select m from Message m where m.id=\"\r\n-                + message.getId());\r\n-            Message m = (Message) q.getSingleResult();\r\n-            assertEquals(\"Test first expected message.\", \"Hello Persistence!\",\r\n-                m.getMessage());\r\n-            assertNotNull(\"Test message's created field being set.\", m\r\n-                .getCreated());\r\n-            assertNotNull(\"Test message's updated field being set.\", m\r\n-                .getUpdated());\r\n-\r\n-            // Query cause flush to occur, hence fire the postPersist event\r\n-            assertStatus(1, 1, 0, 0, 0, 0, 0);\r\n-\r\n-            // Create and persist another new Message entity\r\n-            message = new Message(\"Hello Persistence 2!\");\r\n-            assertNull(\"Test message's created field to be null.\", message\r\n-                .getCreated());\r\n-            assertNull(\"Test message's updated field to be null.\", message\r\n-                .getUpdated());\r\n-\r\n-            em.persist(message);\r\n-\r\n-            // Pre-persist invoked, created and updated fields set\r\n-            assertStatus(2, 1, 0, 0, 0, 0, 0);\r\n-            assertNotNull(\"Test message's created field being set.\", message\r\n-                .getCreated());\r\n-            assertNotNull(\"Test message's updated field being set.\", message\r\n-                .getUpdated());\r\n-\r\n-            em.getTransaction().commit();\r\n-\r\n-            // Complete the 2nd @postPersist\r\n-            assertStatus(2, 2, 0, 0, 0, 0, 0);\r\n-\r\n-\t\t\t// Make an update to trigger the pre/postUpdater callbacks\r\n-            em.getTransaction().begin();\r\n-            message = em.find(Message.class,message.getId());\r\n-            message.setMessage(\"Update field and trigger pre/postUpdate\");\r\n-            em.getTransaction().commit();\r\n-            \r\n-            // Complete the 2nd @postPersist\r\n-            assertStatus(2, 2, 1, 1, 0, 0, 0);\r\n-\r\n-        } finally {\r\n-            if (em != null && em.getTransaction().isActive())\r\n-                em.getTransaction().rollback();\r\n-            if (em != null && em.isOpen())\r\n-                em.close();\r\n-        }\r\n-    }\r\n-\r\n-    private void assertStatus(int prePersist, int postPersist, int preUpdate,\r\n-        int postUpdate, int preRemove, int postRemove, int postLoad) {\r\n-        assertEquals(prePersist, MessageListenerImpl.prePersistCount);\r\n-        assertEquals(postPersist, MessageListenerImpl.postPersistCount);\r\n-        assertEquals(preUpdate, MessageListenerImpl.preUpdateCount);\r\n-        assertEquals(postUpdate, MessageListenerImpl.postUpdateCount);\r\n-        assertEquals(preRemove, MessageListenerImpl.preRemoveCount);\r\n-        assertEquals(postRemove, MessageListenerImpl.postRemoveCount);\r\n-        assertEquals(postLoad, MessageListenerImpl.postLoadCount);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.callbacks;\n+\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+public class TestMessageListeners extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(DROP_TABLES);\n+    }\n+\n+    @Override\n+    protected String getPersistenceUnitName() {\n+        return \"listener-pu\";\n+    }\n+\n+    public void testUpdateInPrePersist() {\n+        // Create a new EntityManager from the EntityManagerFactory. The\n+        // EntityManager is the main object in the persistence API, and is\n+        // used to create, delete, and query objects, as well as access\n+        // the current transaction\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        try {\n+            // Begin a new local transaction so that we can persist a new entity\n+            em.getTransaction().begin();\n+\n+            MessageListenerImpl.resetCounters();\n+\n+            // Create and persist a new Message entity\n+            Message message = new Message(\"Hello Persistence!\");\n+            assertNull(\"Test message's created field to be null.\", message\n+                .getCreated());\n+            assertNull(\"Test message's updated field to be null.\", message\n+                .getUpdated());\n+\n+            em.persist(message);\n+\n+            // Pre-persist invoked, created and updated fields set\n+            assertStatus(1, 0, 0, 0, 0, 0, 0);\n+            assertNotNull(\"Test message's created field being set.\", message\n+                .getCreated());\n+            assertNotNull(\"Test message's updated field being set.\", message\n+                .getUpdated());\n+\n+            em.flush();\n+            // Post-persist invoked\n+            assertStatus(1, 1, 0, 0, 0, 0, 0);\n+\n+            em.clear();\n+\n+            // Perform a simple query to get the Message\n+            Query q = em.createQuery(\"select m from Message m where m.id=\"\n+                + message.getId());\n+            Message m = (Message) q.getSingleResult();\n+\n+            assertEquals(\"Test first expected message.\", \"Hello Persistence!\",\n+                m.getMessage());\n+            assertNotNull(\"Test message's created field being set.\", m\n+                .getCreated());\n+            assertNotNull(\"Test message's updated field being set.\", m\n+                .getUpdated());\n+\n+            // query trigger a load because em is cleared.\n+            assertStatus(1, 1, 0, 0, 0, 0, 1);\n+\n+            em.getTransaction().commit();\n+\n+            // since data is flushed, commit data with no event fired.\n+            assertStatus(1, 1, 0, 0, 0, 0, 1);\n+        } finally {\n+            if (em != null && em.getTransaction().isActive())\n+                em.getTransaction().rollback();\n+            if (em != null && em.isOpen())\n+                em.close();\n+        }\n+    }\n+\n+    public void testUpdateInPreUpdate() {\n+        // Create a new EntityManager from the EntityManagerFactory. The\n+        // EntityManager is the main object in the persistence API, and is\n+        // used to create, delete, and query objects, as well as access\n+        // the current transaction\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        try {\n+            // Begin a new local transaction so that we can persist a new entity\n+            em.getTransaction().begin();\n+\n+            MessageListenerImpl.resetCounters();\n+\n+            // Create and persist a new Message entity\n+            Message message = new Message(\"Hello Persistence!\");\n+            assertNull(\"Test message's created field to be null.\", message\n+                .getCreated());\n+            assertNull(\"Test message's updated field to be null.\", message\n+                .getUpdated());\n+\n+            em.persist(message);\n+\n+            // Pre-persist invoked, created and updated fields set\n+            assertStatus(1, 0, 0, 0, 0, 0, 0);\n+            assertNotNull(\"Test message's created field being set.\", message\n+                .getCreated());\n+            assertNotNull(\"Test message's updated field being set.\", message\n+                .getUpdated());\n+\n+            // Perform a simple query to get the Message\n+            Query q = em.createQuery(\"select m from Message m where m.id=\"\n+                + message.getId());\n+            Message m = (Message) q.getSingleResult();\n+            assertEquals(\"Test first expected message.\", \"Hello Persistence!\",\n+                m.getMessage());\n+            assertNotNull(\"Test message's created field being set.\", m\n+                .getCreated());\n+            assertNotNull(\"Test message's updated field being set.\", m\n+                .getUpdated());\n+\n+            // Query cause flush to occur, hence fire the postPersist event\n+            assertStatus(1, 1, 0, 0, 0, 0, 0);\n+\n+            // Create and persist another new Message entity\n+            message = new Message(\"Hello Persistence 2!\");\n+            assertNull(\"Test message's created field to be null.\", message\n+                .getCreated());\n+            assertNull(\"Test message's updated field to be null.\", message\n+                .getUpdated());\n+\n+            em.persist(message);\n+\n+            // Pre-persist invoked, created and updated fields set\n+            assertStatus(2, 1, 0, 0, 0, 0, 0);\n+            assertNotNull(\"Test message's created field being set.\", message\n+                .getCreated());\n+            assertNotNull(\"Test message's updated field being set.\", message\n+                .getUpdated());\n+\n+            em.getTransaction().commit();\n+\n+            // Complete the 2nd @postPersist\n+            assertStatus(2, 2, 0, 0, 0, 0, 0);\n+\n+\t\t\t// Make an update to trigger the pre/postUpdater callbacks\n+            em.getTransaction().begin();\n+            message = em.find(Message.class,message.getId());\n+            message.setMessage(\"Update field and trigger pre/postUpdate\");\n+            em.getTransaction().commit();\n+            \n+            // Complete the 2nd @postPersist\n+            assertStatus(2, 2, 1, 1, 0, 0, 0);\n+\n+        } finally {\n+            if (em != null && em.getTransaction().isActive())\n+                em.getTransaction().rollback();\n+            if (em != null && em.isOpen())\n+                em.close();\n+        }\n+    }\n+\n+    private void assertStatus(int prePersist, int postPersist, int preUpdate,\n+        int postUpdate, int preRemove, int postRemove, int postLoad) {\n+        assertEquals(prePersist, MessageListenerImpl.prePersistCount);\n+        assertEquals(postPersist, MessageListenerImpl.postPersistCount);\n+        assertEquals(preUpdate, MessageListenerImpl.preUpdateCount);\n+        assertEquals(postUpdate, MessageListenerImpl.postUpdateCount);\n+        assertEquals(preRemove, MessageListenerImpl.preRemoveCount);\n+        assertEquals(postRemove, MessageListenerImpl.postRemoveCount);\n+        assertEquals(postLoad, MessageListenerImpl.postLoadCount);\n+    }\n+}"},{"sha":"64467c21da1ff3203bf0a397e2b93f07b3153a72","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestPostPersistCallback.java","status":"modified","additions":96,"deletions":96,"changes":192,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestPostPersistCallback.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestPostPersistCallback.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestPostPersistCallback.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,96 +1,96 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.callbacks;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * Tests when PostPersist is invoked can be configured.\r\n- *  \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-public class TestPostPersistCallback extends SingleEMFTestCase {\r\n-    \r\n-    public void testPostPersistCalledAfterFlush() {\r\n-        super.setUp(CLEAR_TABLES, PostPersistEntity.class);\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        PostPersistEntity pc = new PostPersistEntity();\r\n-        \r\n-        em.persist(pc);\r\n-        \r\n-        // nor is postPersist() callback invoked\r\n-        assertEquals(0, pc.postPersistCallbackCount);\r\n-        assertEquals(0, pc.idOnCallback);\r\n-        \r\n-        em.flush();\r\n-        \r\n-        // postPersist() callback invoked\r\n-        assertFalse(pc.getId() == 0);\r\n-        assertEquals(1, pc.postPersistCallbackCount);\r\n-        assertEquals(pc.getId(), pc.idOnCallback);\r\n-        \r\n-        em.getTransaction().commit();\r\n-        \r\n-        assertFalse(pc.getId() == 0);\r\n-        assertEquals(1, pc.postPersistCallbackCount);\r\n-        assertEquals(pc.getId(), pc.idOnCallback);\r\n-    }\r\n-    \r\n-    public void testPostPersistCalledAfterCommit() {\r\n-        super.setUp(CLEAR_TABLES, PostPersistEntity.class);\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        PostPersistEntity pc = new PostPersistEntity();\r\n-        \r\n-        em.persist(pc);\r\n-        \r\n-        assertEquals(0, pc.postPersistCallbackCount);\r\n-        assertEquals(0, pc.idOnCallback);\r\n-        \r\n-        em.getTransaction().commit();\r\n-        \r\n-        assertFalse(pc.getId() == 0);\r\n-        assertEquals(1, pc.postPersistCallbackCount);\r\n-        assertEquals(pc.getId(), pc.idOnCallback);\r\n-    }\r\n-    \r\n-    public void testPostPersistCalledAfterPersist() {\r\n-        super.setUp(CLEAR_TABLES, PostPersistEntity.class, \r\n-            \"openjpa.Callbacks\", \"PostPersistCallbackImmediate=true\");\r\n-        assertTrue(emf.getConfiguration().getCallbackOptionsInstance()\r\n-            .getPostPersistCallbackImmediate());\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        PostPersistEntity pc = new PostPersistEntity();\r\n-        \r\n-        em.persist(pc);\r\n-        \r\n-        assertEquals(1, pc.postPersistCallbackCount);\r\n-        assertEquals(pc.getId(), pc.idOnCallback);\r\n-        \r\n-        em.getTransaction().commit();\r\n-        \r\n-        assertEquals(1, pc.postPersistCallbackCount);\r\n-        assertEquals(pc.getId(), pc.idOnCallback);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.callbacks;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Tests when PostPersist is invoked can be configured.\n+ *  \n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class TestPostPersistCallback extends SingleEMFTestCase {\n+    \n+    public void testPostPersistCalledAfterFlush() {\n+        super.setUp(CLEAR_TABLES, PostPersistEntity.class);\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        PostPersistEntity pc = new PostPersistEntity();\n+        \n+        em.persist(pc);\n+        \n+        // nor is postPersist() callback invoked\n+        assertEquals(0, pc.postPersistCallbackCount);\n+        assertEquals(0, pc.idOnCallback);\n+        \n+        em.flush();\n+        \n+        // postPersist() callback invoked\n+        assertFalse(pc.getId() == 0);\n+        assertEquals(1, pc.postPersistCallbackCount);\n+        assertEquals(pc.getId(), pc.idOnCallback);\n+        \n+        em.getTransaction().commit();\n+        \n+        assertFalse(pc.getId() == 0);\n+        assertEquals(1, pc.postPersistCallbackCount);\n+        assertEquals(pc.getId(), pc.idOnCallback);\n+    }\n+    \n+    public void testPostPersistCalledAfterCommit() {\n+        super.setUp(CLEAR_TABLES, PostPersistEntity.class);\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        PostPersistEntity pc = new PostPersistEntity();\n+        \n+        em.persist(pc);\n+        \n+        assertEquals(0, pc.postPersistCallbackCount);\n+        assertEquals(0, pc.idOnCallback);\n+        \n+        em.getTransaction().commit();\n+        \n+        assertFalse(pc.getId() == 0);\n+        assertEquals(1, pc.postPersistCallbackCount);\n+        assertEquals(pc.getId(), pc.idOnCallback);\n+    }\n+    \n+    public void testPostPersistCalledAfterPersist() {\n+        super.setUp(CLEAR_TABLES, PostPersistEntity.class, \n+            \"openjpa.Callbacks\", \"PostPersistCallbackImmediate=true\");\n+        assertTrue(emf.getConfiguration().getCallbackOptionsInstance()\n+            .getPostPersistCallbackImmediate());\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        PostPersistEntity pc = new PostPersistEntity();\n+        \n+        em.persist(pc);\n+        \n+        assertEquals(1, pc.postPersistCallbackCount);\n+        assertEquals(pc.getId(), pc.idOnCallback);\n+        \n+        em.getTransaction().commit();\n+        \n+        assertEquals(1, pc.postPersistCallbackCount);\n+        assertEquals(pc.getId(), pc.idOnCallback);\n+    }\n+}"},{"sha":"0b09aa1aa8b628fa59c818f02da6fd6936e1ae8d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Address.java","status":"modified","additions":94,"deletions":94,"changes":188,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Address.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Address.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Address.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,94 +1,94 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.common.apps;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-public class Address\r\n-{\r\n-\t@Basic\r\n-\t@Column(length=50)\r\n-\tprivate String streetAd;\r\n-\r\n-\t@Basic\r\n-\t@Column(length=50)\r\n-\tprivate String city;\r\n-\r\n-\t@Basic\r\n-\t@Column(length=50)\r\n-\tprivate String country;\r\n-\r\n-\t@Basic\r\n-\t@Column(length=25)\r\n-\tprivate String zipcode;\r\n-\r\n-\t@OneToOne(mappedBy=\"address\")\r\n-\tprivate CompUser user;\r\n-\r\n-\t@Id\r\n-\t@GeneratedValue(strategy=GenerationType.AUTO)\r\n-\tprivate int id;\r\n-\r\n-\tpublic Address(){}\r\n-\r\n-\tpublic Address(String streetAd, String city, String country, String zipcode)\r\n-\t{\r\n-\t\tthis.streetAd = streetAd;\r\n-\t\tthis.city = city;\r\n-\t\tthis.country = country;\r\n-\t\tthis.zipcode = zipcode;\r\n-\t}\r\n-\r\n-\tpublic String getCity() {\r\n-\t\treturn city;\r\n-\t}\r\n-\r\n-\tpublic void setCity(String city) {\r\n-\t\tthis.city = city;\r\n-\t}\r\n-\r\n-\tpublic String getCountry() {\r\n-\t\treturn country;\r\n-\t}\r\n-\r\n-\tpublic void setCountry(String country) {\r\n-\t\tthis.country = country;\r\n-\t}\r\n-\r\n-\tpublic int getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\r\n-\tpublic String getStreetAd() {\r\n-\t\treturn streetAd;\r\n-\t}\r\n-\r\n-\tpublic void setStreetAd(String streetAd) {\r\n-\t\tthis.streetAd = streetAd;\r\n-\t}\r\n-\r\n-\tpublic String getZipcode() {\r\n-\t\treturn zipcode;\r\n-\t}\r\n-\r\n-\tpublic void setZipcode(String zipcode) {\r\n-\t\tthis.zipcode = zipcode;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.common.apps;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+public class Address\n+{\n+\t@Basic\n+\t@Column(length=50)\n+\tprivate String streetAd;\n+\n+\t@Basic\n+\t@Column(length=50)\n+\tprivate String city;\n+\n+\t@Basic\n+\t@Column(length=50)\n+\tprivate String country;\n+\n+\t@Basic\n+\t@Column(length=25)\n+\tprivate String zipcode;\n+\n+\t@OneToOne(mappedBy=\"address\")\n+\tprivate CompUser user;\n+\n+\t@Id\n+\t@GeneratedValue(strategy=GenerationType.AUTO)\n+\tprivate int id;\n+\n+\tpublic Address(){}\n+\n+\tpublic Address(String streetAd, String city, String country, String zipcode)\n+\t{\n+\t\tthis.streetAd = streetAd;\n+\t\tthis.city = city;\n+\t\tthis.country = country;\n+\t\tthis.zipcode = zipcode;\n+\t}\n+\n+\tpublic String getCity() {\n+\t\treturn city;\n+\t}\n+\n+\tpublic void setCity(String city) {\n+\t\tthis.city = city;\n+\t}\n+\n+\tpublic String getCountry() {\n+\t\treturn country;\n+\t}\n+\n+\tpublic void setCountry(String country) {\n+\t\tthis.country = country;\n+\t}\n+\n+\tpublic int getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic String getStreetAd() {\n+\t\treturn streetAd;\n+\t}\n+\n+\tpublic void setStreetAd(String streetAd) {\n+\t\tthis.streetAd = streetAd;\n+\t}\n+\n+\tpublic String getZipcode() {\n+\t\treturn zipcode;\n+\t}\n+\n+\tpublic void setZipcode(String zipcode) {\n+\t\tthis.zipcode = zipcode;\n+\t}\n+}"},{"sha":"c3405f1dd639f8d394cb8f7b1bd45a4219055ded","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/ArtCourse.java","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/ArtCourse.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/ArtCourse.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/ArtCourse.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,48 +1,48 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.common.apps;\r\n-\r\n-import javax.persistence.DiscriminatorValue;\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-@DiscriminatorValue(\"Art\")\r\n-public class ArtCourse extends Course\r\n-{\r\n-\tprivate static final long serialVersionUID = 1L;\r\n-\r\n-\tprivate String relCourse;\r\n-\r\n-\tpublic ArtCourse(String relCourse)\r\n-\t{\r\n-\t\tthis.relCourse = relCourse;\r\n-\t}\r\n-\r\n-\tpublic ArtCourse(int id, String relCourse)\r\n-\t{\r\n-\t\tsuper(id);\r\n-\t\tthis.relCourse = relCourse;\r\n-\t}\r\n-\r\n-\tpublic String getRelCourse()\r\n-\t{\r\n-\t\treturn relCourse;\r\n-\t}\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.common.apps;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+\n+@Entity\n+@DiscriminatorValue(\"Art\")\n+public class ArtCourse extends Course\n+{\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tprivate String relCourse;\n+\n+\tpublic ArtCourse(String relCourse)\n+\t{\n+\t\tthis.relCourse = relCourse;\n+\t}\n+\n+\tpublic ArtCourse(int id, String relCourse)\n+\t{\n+\t\tsuper(id);\n+\t\tthis.relCourse = relCourse;\n+\t}\n+\n+\tpublic String getRelCourse()\n+\t{\n+\t\treturn relCourse;\n+\t}\n+\n+}"},{"sha":"8ab45f11b88bed25e9d725259bce628307129454","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/CompUser.java","status":"modified","additions":98,"deletions":98,"changes":196,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/CompUser.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/CompUser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/CompUser.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,98 +1,98 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.common.apps;\r\n-\r\n-import javax.persistence.*;\r\n-import org.apache.openjpa.persistence.*;\r\n-\r\n-import java.util.*;\r\n-\r\n-@Entity\r\n-@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n-public class CompUser\r\n-{\r\n-\t@Basic\r\n-\t@Column(length=50)\r\n-\tprivate String name;\r\n-\r\n-\t@Basic\r\n-\tprivate int age;\r\n-\r\n-\t@Basic\r\n-\t@Column(name=\"compName\", length=50)\r\n-\tprivate String computerName;\r\n-\r\n-\t@PersistentCollection\r\n-\tprivate String[] nicknames = new String[0];\r\n-\r\n-\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n-\t@JoinColumn(name=\"ADD_ID\")\r\n-\tprivate Address address;\r\n-\r\n-\t@Id\r\n-\t@GeneratedValue(strategy=GenerationType.AUTO)\r\n-\tpublic int userid;\r\n-\r\n-\tpublic CompUser(){}\r\n-\r\n-\tpublic CompUser(String name, String cName, Address address, int age)\r\n-\t{\r\n-\t\tthis.name = name;\r\n-\t\tthis.computerName = cName;\r\n-\t\tthis.address = address;\r\n-\t\tthis.age = age;\r\n-\t}\r\n-\r\n-\tpublic String getComputerName() {\r\n-\t\treturn computerName;\r\n-\t}\r\n-\r\n-\tpublic void setComputerName(String computerName) {\r\n-\t\tthis.computerName = computerName;\r\n-\t}\r\n-\r\n-\tpublic String getName() {\r\n-\t\treturn name;\r\n-\t}\r\n-\r\n-\tpublic void setName(String name) {\r\n-\t\tthis.name = name;\r\n-\t}\r\n-\r\n-\tpublic int getUserid() {\r\n-\t\treturn userid;\r\n-\t}\r\n-\r\n-\tpublic Address getAddress() {\r\n-\t\treturn address;\r\n-\t}\r\n-\r\n-\tpublic void setAddress(Address address) {\r\n-\t\tthis.address = address;\r\n-\t}\r\n-\r\n-\tpublic int getAge() {\r\n-\t\treturn age;\r\n-\t}\r\n-\r\n-\tpublic void setAge(int age) {\r\n-\t\tthis.age = age;\r\n-\t}\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.common.apps;\n+\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.*;\n+\n+import java.util.*;\n+\n+@Entity\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\n+public class CompUser\n+{\n+\t@Basic\n+\t@Column(length=50)\n+\tprivate String name;\n+\n+\t@Basic\n+\tprivate int age;\n+\n+\t@Basic\n+\t@Column(name=\"compName\", length=50)\n+\tprivate String computerName;\n+\n+\t@PersistentCollection\n+\tprivate String[] nicknames = new String[0];\n+\n+\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\n+\t@JoinColumn(name=\"ADD_ID\")\n+\tprivate Address address;\n+\n+\t@Id\n+\t@GeneratedValue(strategy=GenerationType.AUTO)\n+\tpublic int userid;\n+\n+\tpublic CompUser(){}\n+\n+\tpublic CompUser(String name, String cName, Address address, int age)\n+\t{\n+\t\tthis.name = name;\n+\t\tthis.computerName = cName;\n+\t\tthis.address = address;\n+\t\tthis.age = age;\n+\t}\n+\n+\tpublic String getComputerName() {\n+\t\treturn computerName;\n+\t}\n+\n+\tpublic void setComputerName(String computerName) {\n+\t\tthis.computerName = computerName;\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic int getUserid() {\n+\t\treturn userid;\n+\t}\n+\n+\tpublic Address getAddress() {\n+\t\treturn address;\n+\t}\n+\n+\tpublic void setAddress(Address address) {\n+\t\tthis.address = address;\n+\t}\n+\n+\tpublic int getAge() {\n+\t\treturn age;\n+\t}\n+\n+\tpublic void setAge(int age) {\n+\t\tthis.age = age;\n+\t}\n+\n+}"},{"sha":"74a6f9b9a0f4addfd88519310917dd0d4478f66f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/ComplexEmbeddedPC.java","status":"modified","additions":77,"deletions":77,"changes":154,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/ComplexEmbeddedPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/ComplexEmbeddedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/ComplexEmbeddedPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,77 +1,77 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.common.apps;\r\n-\r\n-\r\n-import java.util.*;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-\r\n-/**\r\n- *\t<p>Embedded type used in testing.</p>\r\n- *\r\n- *\t@author\t\tAbe White\r\n- */\r\n-@Entity\r\n-public class ComplexEmbeddedPC\r\n-{\r\n-\t@Basic\r\n-\tprivate String \t\t\t\tstringField;\r\n-\r\n-\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n-\tprivate EmbeddedOwnerPC\t\townerField;\r\n-\r\n-\tprivate Set\t\t\t\t\tstringSet = new HashSet ();\r\n-\r\n-\r\n-\tpublic String getStringField ()\r\n-\t{\r\n-\t\treturn this.stringField;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setStringField (String stringField)\r\n-\t{\r\n-\t\tthis.stringField = stringField;\r\n-\t}\r\n-\r\n-\r\n-\tpublic EmbeddedOwnerPC getOwnerField ()\r\n-\t{\r\n-\t\treturn this.ownerField;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setOwnerField (EmbeddedOwnerPC ownerField)\r\n-\t{\r\n-\t\tthis.ownerField = ownerField;\r\n-\t}\r\n-\r\n-\r\n-\tpublic Set getStringSet ()\r\n-\t{\r\n-\t\treturn this.stringSet;\r\n-\t}\r\n-\r\n-\tpublic void setStringSet (Set stringSet)\r\n-\t{\r\n-\t\tthis.stringSet = stringSet;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.common.apps;\n+\n+\n+import java.util.*;\n+\n+import javax.persistence.*;\n+\n+\n+/**\n+ *\t<p>Embedded type used in testing.</p>\n+ *\n+ *\t@author\t\tAbe White\n+ */\n+@Entity\n+public class ComplexEmbeddedPC\n+{\n+\t@Basic\n+\tprivate String \t\t\t\tstringField;\n+\n+\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\n+\tprivate EmbeddedOwnerPC\t\townerField;\n+\n+\tprivate Set\t\t\t\t\tstringSet = new HashSet ();\n+\n+\n+\tpublic String getStringField ()\n+\t{\n+\t\treturn this.stringField;\n+\t}\n+\n+\n+\tpublic void setStringField (String stringField)\n+\t{\n+\t\tthis.stringField = stringField;\n+\t}\n+\n+\n+\tpublic EmbeddedOwnerPC getOwnerField ()\n+\t{\n+\t\treturn this.ownerField;\n+\t}\n+\n+\n+\tpublic void setOwnerField (EmbeddedOwnerPC ownerField)\n+\t{\n+\t\tthis.ownerField = ownerField;\n+\t}\n+\n+\n+\tpublic Set getStringSet ()\n+\t{\n+\t\treturn this.stringSet;\n+\t}\n+\n+\tpublic void setStringSet (Set stringSet)\n+\t{\n+\t\tthis.stringSet = stringSet;\n+\t}\n+}"},{"sha":"0d73f98ed824fb9cc664982c665ef38e5c31b4ec","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Course.java","status":"modified","additions":82,"deletions":82,"changes":164,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Course.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Course.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Course.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,82 +1,82 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.common.apps;\r\n-\r\n-import java.io.Serializable;\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n-public class Course implements Serializable\r\n-{\r\n-\t@Transient\r\n-\tprivate static final long serialVersionUID = 1L;\r\n-\r\n-\t@Basic\r\n-\tprivate String name;\r\n-\r\n-\t@Basic\r\n-\tprivate int units;\r\n-\r\n-\t@ManyToMany(mappedBy=\"course\")\r\n-\tprivate List<Student> students;\r\n-\r\n-\t@Id\r\n-\tprivate int courseId;\r\n-\r\n-\tpublic Course(){}\r\n-\r\n-\tpublic Course(int courseId)\r\n-\t{\r\n-\t\tthis.courseId = courseId;\r\n-\t}\r\n-\r\n-\tpublic Course(String name, int units, int courseId)\r\n-\t{\r\n-\t\tthis.name = name;\r\n-\t\tthis.units = units;\r\n-\t\tthis.courseId = courseId;\r\n-\t}\r\n-\r\n-\tpublic int getCourseId() {\r\n-\t\treturn courseId;\r\n-\t}\r\n-\r\n-\tpublic void setCourseId(int courseId) {\r\n-\t\tthis.courseId = courseId;\r\n-\t}\r\n-\r\n-\tpublic String getName() {\r\n-\t\treturn name;\r\n-\t}\r\n-\r\n-\tpublic void setName(String name) {\r\n-\t\tthis.name = name;\r\n-\t}\r\n-\r\n-\tpublic int getUnits() {\r\n-\t\treturn units;\r\n-\t}\r\n-\r\n-\tpublic void setUnits(int units) {\r\n-\t\tthis.units = units;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.common.apps;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\n+public class Course implements Serializable\n+{\n+\t@Transient\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\t@Basic\n+\tprivate String name;\n+\n+\t@Basic\n+\tprivate int units;\n+\n+\t@ManyToMany(mappedBy=\"course\")\n+\tprivate List<Student> students;\n+\n+\t@Id\n+\tprivate int courseId;\n+\n+\tpublic Course(){}\n+\n+\tpublic Course(int courseId)\n+\t{\n+\t\tthis.courseId = courseId;\n+\t}\n+\n+\tpublic Course(String name, int units, int courseId)\n+\t{\n+\t\tthis.name = name;\n+\t\tthis.units = units;\n+\t\tthis.courseId = courseId;\n+\t}\n+\n+\tpublic int getCourseId() {\n+\t\treturn courseId;\n+\t}\n+\n+\tpublic void setCourseId(int courseId) {\n+\t\tthis.courseId = courseId;\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic int getUnits() {\n+\t\treturn units;\n+\t}\n+\n+\tpublic void setUnits(int units) {\n+\t\tthis.units = units;\n+\t}\n+}"},{"sha":"eba988c794a2265e5351af322a5a75fc30c21a79","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Department.java","status":"modified","additions":70,"deletions":70,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Department.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Department.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Department.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,70 +1,70 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.common.apps;\r\n-\r\n-import javax.persistence.*;\r\n-import java.io.*;\r\n-import java.util.*;\r\n-\r\n-\r\n-@Entity\r\n-public class Department implements Serializable\r\n-{\r\n-\t@Transient\r\n-\tprivate static final long serialVersionUID = 1L;\r\n-\r\n-\t@Id\r\n-\tprivate int id;\r\n-\r\n-\t@Basic\r\n-\tprivate String name;\r\n-\r\n-\t@ManyToMany(mappedBy=\"department\")\r\n-\tprivate List<Student> slist;\r\n-\r\n-\tpublic Department(){}\r\n-\r\n-\tpublic Department(int id)\r\n-\t{\r\n-\t\tthis.id = id;\r\n-\t}\r\n-\r\n-\tpublic Department(String name, List<Student> slist, int id)\r\n-\t{\r\n-\t\tthis.name = name;\r\n-\t\tthis.slist = slist;\r\n-\t\tthis.id = id;\r\n-\t}\r\n-\r\n-\tpublic String getName() {\r\n-\t\treturn name;\r\n-\t}\r\n-\r\n-\tpublic void setName(String name) {\r\n-\t\tthis.name = name;\r\n-\t}\r\n-\r\n-\tpublic List<Student> getSlist() {\r\n-\t\treturn slist;\r\n-\t}\r\n-\r\n-\tpublic void setSlist(List<Student> slist) {\r\n-\t\tthis.slist = slist;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.common.apps;\n+\n+import javax.persistence.*;\n+import java.io.*;\n+import java.util.*;\n+\n+\n+@Entity\n+public class Department implements Serializable\n+{\n+\t@Transient\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\t@Id\n+\tprivate int id;\n+\n+\t@Basic\n+\tprivate String name;\n+\n+\t@ManyToMany(mappedBy=\"department\")\n+\tprivate List<Student> slist;\n+\n+\tpublic Department(){}\n+\n+\tpublic Department(int id)\n+\t{\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic Department(String name, List<Student> slist, int id)\n+\t{\n+\t\tthis.name = name;\n+\t\tthis.slist = slist;\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic List<Student> getSlist() {\n+\t\treturn slist;\n+\t}\n+\n+\tpublic void setSlist(List<Student> slist) {\n+\t\tthis.slist = slist;\n+\t}\n+}"},{"sha":"75d01759ee8e14ae64d6abfad4bfa824fc94e7a1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/EmbeddedOwnerPC.java","status":"modified","additions":158,"deletions":158,"changes":316,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/EmbeddedOwnerPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/EmbeddedOwnerPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/EmbeddedOwnerPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,158 +1,158 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.common.apps;\r\n-\r\n-import java.io.Serializable;\r\n-\r\n-import javax.persistence.Basic;\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.IdClass;\r\n-import javax.persistence.JoinColumn;\r\n-import javax.persistence.OneToOne;\r\n-import javax.persistence.Table;\r\n-\r\n-\r\n-/**\r\n- *\t<p>Persistent type used in testing embedded instances.</p>\r\n- *\r\n- *\t@author\t\tAbe White\r\n- */\r\n-@Entity\r\n-@Table(name=\"embownpc\")\r\n-@IdClass(EmbeddedOwnerPC.EmbKey.class)\r\n-public class EmbeddedOwnerPC\r\n-{\r\n-\t@Id\r\n-\tprivate int\t\t\t\t\tid1;\r\n-\t@Id\r\n-\tprivate int\t\t\t\t\tid2;\r\n-\t@Basic\r\n-\tprivate String\t\t\t\tstringField;\r\n-\r\n-\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n-\tprivate EmbeddedPC \t\t\tembedded;\r\n-\r\n-\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n-\tprivate ComplexEmbeddedPC\tcomplexEmbedded;\r\n-\r\n-\r\n-\tprotected EmbeddedOwnerPC ()\r\n-\t{\r\n-\t}\r\n-\r\n-\tpublic EmbeddedOwnerPC (int id1, int id2)\r\n-\t{\r\n-\t\tthis.id1 = id1;\r\n-\t\tthis.id2 = id2;\r\n-\t}\r\n-\r\n-\r\n-\tpublic int getId1 ()\r\n-\t{\r\n-\t\treturn id1;\r\n-\t}\r\n-\r\n-\r\n-\tpublic int getId2 ()\r\n-\t{\r\n-\t\treturn id2;\r\n-\t}\r\n-\r\n-\r\n-\tpublic EmbeddedPC getEmbedded ()\r\n-\t{\r\n-\t\treturn this.embedded;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setEmbedded (EmbeddedPC embedded)\r\n-\t{\r\n-\t\tthis.embedded = embedded;\r\n-\t}\r\n-\r\n-\r\n-\tpublic String getStringField ()\r\n-\t{\r\n-\t\treturn this.stringField;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setStringField (String stringField)\r\n-\t{\r\n-\t\tthis.stringField = stringField;\r\n-\t}\r\n-\r\n-\r\n-\tpublic ComplexEmbeddedPC getComplexEmbedded ()\r\n-\t{\r\n-\t\treturn this.complexEmbedded;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setComplexEmbedded (ComplexEmbeddedPC complexEmbedded)\r\n-\t{\r\n-\t\tthis.complexEmbedded = complexEmbedded;\r\n-\t}\r\n-\r\n-\tpublic static class EmbKey implements Serializable\r\n-\t{\r\n-\t\tpublic int\t\t\t\t\tid1;\r\n-\t\tpublic int\t\t\t\t\tid2;\r\n-\r\n-\t\tpublic EmbKey()\r\n-\t\t{\r\n-\t\t}\r\n-\r\n-\t\tpublic EmbKey (String str)\r\n-\t\t{\r\n-\t\t\tint index = str.indexOf (\":\");\r\n-\t\t\tif (index != -1)\r\n-\t\t\t{\r\n-\t\t\t\tid1 = Integer.parseInt (str.substring (0, index));\r\n-\t\t\t\tid2 = Integer.parseInt(str.substring (index + 1));\r\n-\t\t\t}\r\n-\t\t}\r\n-\r\n-\t\t@Override\r\n-\t\tpublic boolean equals(Object other)\r\n-\t\t{\r\n-\t\t\tif(!(other instanceof EmbKey))\r\n-\t\t\t\t  return false;\r\n-\r\n-\t     \tEmbKey touse = (EmbKey)other;\r\n-\r\n-\t\t\tif (id2 == 0 && touse.id2 != 0)\r\n-\t\t\t\treturn false;\r\n-\t\t\tif (id2 != 0 && touse.id2 == 0)\r\n-\t\t\t\treturn false;\r\n-\t\t\tif (!(id1 == touse.id1))\r\n-\t\t\t\treturn false;\r\n-\r\n-\t\t\treturn true;\r\n-\t\t}\r\n-\r\n-\t\t@Override\r\n-\t\tpublic int hashCode()\r\n-\t\t{\r\n-\t\t\treturn (id1 + id2+\"\").hashCode();\r\n-\t\t}\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.common.apps;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+\n+\n+/**\n+ *\t<p>Persistent type used in testing embedded instances.</p>\n+ *\n+ *\t@author\t\tAbe White\n+ */\n+@Entity\n+@Table(name=\"embownpc\")\n+@IdClass(EmbeddedOwnerPC.EmbKey.class)\n+public class EmbeddedOwnerPC\n+{\n+\t@Id\n+\tprivate int\t\t\t\t\tid1;\n+\t@Id\n+\tprivate int\t\t\t\t\tid2;\n+\t@Basic\n+\tprivate String\t\t\t\tstringField;\n+\n+\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\n+\tprivate EmbeddedPC \t\t\tembedded;\n+\n+\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\n+\tprivate ComplexEmbeddedPC\tcomplexEmbedded;\n+\n+\n+\tprotected EmbeddedOwnerPC ()\n+\t{\n+\t}\n+\n+\tpublic EmbeddedOwnerPC (int id1, int id2)\n+\t{\n+\t\tthis.id1 = id1;\n+\t\tthis.id2 = id2;\n+\t}\n+\n+\n+\tpublic int getId1 ()\n+\t{\n+\t\treturn id1;\n+\t}\n+\n+\n+\tpublic int getId2 ()\n+\t{\n+\t\treturn id2;\n+\t}\n+\n+\n+\tpublic EmbeddedPC getEmbedded ()\n+\t{\n+\t\treturn this.embedded;\n+\t}\n+\n+\n+\tpublic void setEmbedded (EmbeddedPC embedded)\n+\t{\n+\t\tthis.embedded = embedded;\n+\t}\n+\n+\n+\tpublic String getStringField ()\n+\t{\n+\t\treturn this.stringField;\n+\t}\n+\n+\n+\tpublic void setStringField (String stringField)\n+\t{\n+\t\tthis.stringField = stringField;\n+\t}\n+\n+\n+\tpublic ComplexEmbeddedPC getComplexEmbedded ()\n+\t{\n+\t\treturn this.complexEmbedded;\n+\t}\n+\n+\n+\tpublic void setComplexEmbedded (ComplexEmbeddedPC complexEmbedded)\n+\t{\n+\t\tthis.complexEmbedded = complexEmbedded;\n+\t}\n+\n+\tpublic static class EmbKey implements Serializable\n+\t{\n+\t\tpublic int\t\t\t\t\tid1;\n+\t\tpublic int\t\t\t\t\tid2;\n+\n+\t\tpublic EmbKey()\n+\t\t{\n+\t\t}\n+\n+\t\tpublic EmbKey (String str)\n+\t\t{\n+\t\t\tint index = str.indexOf (\":\");\n+\t\t\tif (index != -1)\n+\t\t\t{\n+\t\t\t\tid1 = Integer.parseInt (str.substring (0, index));\n+\t\t\t\tid2 = Integer.parseInt(str.substring (index + 1));\n+\t\t\t}\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean equals(Object other)\n+\t\t{\n+\t\t\tif(!(other instanceof EmbKey))\n+\t\t\t\t  return false;\n+\n+\t     \tEmbKey touse = (EmbKey)other;\n+\n+\t\t\tif (id2 == 0 && touse.id2 != 0)\n+\t\t\t\treturn false;\n+\t\t\tif (id2 != 0 && touse.id2 == 0)\n+\t\t\t\treturn false;\n+\t\t\tif (!(id1 == touse.id1))\n+\t\t\t\treturn false;\n+\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic int hashCode()\n+\t\t{\n+\t\t\treturn (id1 + id2+\"\").hashCode();\n+\t\t}\n+\t}\n+}"},{"sha":"404ce1d0ca546f63ad73a146940d6b23390c43dd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/EmbeddedPC.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/EmbeddedPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/EmbeddedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/EmbeddedPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,60 +1,60 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.common.apps;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-\r\n-/**\r\n- *\t<p>Embedded type used in testing.</p>\r\n- *\r\n- *\t@author\t\tAbe White\r\n- */\r\n-@Entity\r\n-@Table(name=\"embpc\")\r\n-public class EmbeddedPC\r\n-{\r\n-\t@Id\r\n-\tprivate int\t\tintField;\r\n-\r\n-\tprivate String \tstringField;\r\n-\r\n-\r\n-\tpublic int getIntField ()\r\n-\t{\r\n-\t\treturn this.intField;\r\n-\t}\r\n-\r\n-\tpublic void setIntField (int intField)\r\n-\t{\r\n-\t\tthis.intField = intField;\r\n-\t}\r\n-\r\n-\r\n-\tpublic String getStringField ()\r\n-\t{\r\n-\t\treturn this.stringField;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setStringField (String stringField)\r\n-\t{\r\n-\t\tthis.stringField = stringField;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.common.apps;\n+\n+import javax.persistence.*;\n+\n+\n+/**\n+ *\t<p>Embedded type used in testing.</p>\n+ *\n+ *\t@author\t\tAbe White\n+ */\n+@Entity\n+@Table(name=\"embpc\")\n+public class EmbeddedPC\n+{\n+\t@Id\n+\tprivate int\t\tintField;\n+\n+\tprivate String \tstringField;\n+\n+\n+\tpublic int getIntField ()\n+\t{\n+\t\treturn this.intField;\n+\t}\n+\n+\tpublic void setIntField (int intField)\n+\t{\n+\t\tthis.intField = intField;\n+\t}\n+\n+\n+\tpublic String getStringField ()\n+\t{\n+\t\treturn this.stringField;\n+\t}\n+\n+\n+\tpublic void setStringField (String stringField)\n+\t{\n+\t\tthis.stringField = stringField;\n+\t}\n+}"},{"sha":"04f6da6d2f33fbc0763e6e16c40597cb0beab9a0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Entity1.java","status":"modified","additions":117,"deletions":117,"changes":234,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Entity1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Entity1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Entity1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,117 +1,117 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.common.apps;\r\n-\r\n-import java.io.Serializable;\r\n-\r\n-import javax.persistence.Basic;\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.EntityResult;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-import javax.persistence.OneToOne;\r\n-import javax.persistence.SqlResultSetMapping;\r\n-import javax.persistence.Table;\r\n-import javax.persistence.Version;\r\n-\r\n-\r\n-@Entity\r\n-@Table(name=\"entity_1\")\r\n-@Inheritance(strategy=InheritanceType.JOINED)\r\n-@SqlResultSetMapping(name=\"NativeTestResult\", entities=@EntityResult(entityClass=Entity1.class))\r\n-public class Entity1 implements Serializable\r\n-{\r\n-\tprivate static final long serialVersionUID = 2882935803066041165L;\r\n-\r\n-\t@Id\r\n-\tprotected long pk;\r\n-\r\n-\t@Basic\r\n-\t@Column(length=35)\r\n-\tprotected String stringField;\r\n-\r\n-\t@Basic\r\n-\tprotected int intField;\r\n-\r\n-\t@OneToOne(cascade={CascadeType.REMOVE, CascadeType.PERSIST})\r\n-\tprotected Entity2 entity2Field;\r\n-\r\n-\t@Version\r\n-\tprotected int versionField;\r\n-\r\n-\tpublic Entity1()\r\n-\t{}\r\n-\r\n-\tpublic Entity1 (long pk, String stringField, int intField)\r\n-\t{\r\n-\t\tthis.pk = pk;\r\n-\t\tthis.stringField = stringField;\r\n-\t\tthis.intField = intField;\r\n-\t}\r\n-\r\n-\r\n-\tpublic long getPk ()\r\n-\t{\r\n-\t\treturn pk;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setStringField (String val)\r\n-\t{\r\n-\t\tstringField = val;\r\n-\t}\r\n-\r\n-\r\n-\tpublic String getStringField ()\r\n-\t{\r\n-\t\treturn stringField;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setIntField (int val)\r\n-\t{\r\n-\t\tintField = val;\r\n-\t}\r\n-\r\n-\r\n-\tpublic int getIntField ()\r\n-\t{\r\n-\t\treturn intField;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setEntity2Field (Entity2 val)\r\n-\t{\r\n-\t\tentity2Field = val;\r\n-\t}\r\n-\r\n-\r\n-\tpublic Entity2 getEntity2Field ()\r\n-\t{\r\n-\t\treturn entity2Field;\r\n-\t}\r\n-\r\n-\tpublic String toString()\r\n-\t{\r\n-\t\treturn(\"PK: \"+pk+\" StringField: \"+stringField+\" IntField: \"+intField);\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.common.apps;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EntityResult;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.OneToOne;\n+import javax.persistence.SqlResultSetMapping;\n+import javax.persistence.Table;\n+import javax.persistence.Version;\n+\n+\n+@Entity\n+@Table(name=\"entity_1\")\n+@Inheritance(strategy=InheritanceType.JOINED)\n+@SqlResultSetMapping(name=\"NativeTestResult\", entities=@EntityResult(entityClass=Entity1.class))\n+public class Entity1 implements Serializable\n+{\n+\tprivate static final long serialVersionUID = 2882935803066041165L;\n+\n+\t@Id\n+\tprotected long pk;\n+\n+\t@Basic\n+\t@Column(length=35)\n+\tprotected String stringField;\n+\n+\t@Basic\n+\tprotected int intField;\n+\n+\t@OneToOne(cascade={CascadeType.REMOVE, CascadeType.PERSIST})\n+\tprotected Entity2 entity2Field;\n+\n+\t@Version\n+\tprotected int versionField;\n+\n+\tpublic Entity1()\n+\t{}\n+\n+\tpublic Entity1 (long pk, String stringField, int intField)\n+\t{\n+\t\tthis.pk = pk;\n+\t\tthis.stringField = stringField;\n+\t\tthis.intField = intField;\n+\t}\n+\n+\n+\tpublic long getPk ()\n+\t{\n+\t\treturn pk;\n+\t}\n+\n+\n+\tpublic void setStringField (String val)\n+\t{\n+\t\tstringField = val;\n+\t}\n+\n+\n+\tpublic String getStringField ()\n+\t{\n+\t\treturn stringField;\n+\t}\n+\n+\n+\tpublic void setIntField (int val)\n+\t{\n+\t\tintField = val;\n+\t}\n+\n+\n+\tpublic int getIntField ()\n+\t{\n+\t\treturn intField;\n+\t}\n+\n+\n+\tpublic void setEntity2Field (Entity2 val)\n+\t{\n+\t\tentity2Field = val;\n+\t}\n+\n+\n+\tpublic Entity2 getEntity2Field ()\n+\t{\n+\t\treturn entity2Field;\n+\t}\n+\n+\tpublic String toString()\n+\t{\n+\t\treturn(\"PK: \"+pk+\" StringField: \"+stringField+\" IntField: \"+intField);\n+\t}\n+}"},{"sha":"a535cc75a647a8b7fceb2eec6400fce847f16135","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Entity2.java","status":"modified","additions":99,"deletions":99,"changes":198,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Entity2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Entity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Entity2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,99 +1,99 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.common.apps;\r\n-\r\n-import java.io.Serializable;\r\n-\r\n-import javax.persistence.Basic;\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-\r\n-\r\n-//@Entity(name=\"entity2ExplicitName\")\r\n-//@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n-/**FIX-ME \r\n- * \r\n- * It should complain if i uncomment the above strategies...but it does\r\n- */\r\n-@Entity\r\n-public class Entity2 implements Serializable\r\n-{\r\n-\t/**\r\n-\t *\r\n-\t */\r\n-\tprivate static final long serialVersionUID = 4723739219953167343L;\r\n-\r\n-\t@Id\r\n-\tprotected long pk;\r\n-\r\n-\t@Basic\r\n-\t@Column(length=35)\r\n-\tprotected String stringField;\r\n-\r\n-\t@Basic\r\n-\tprotected int intField;\r\n-\r\n-\tpublic Entity2()\r\n-\t{}\r\n-\r\n-\r\n-\tpublic Entity2 (long pk, String stringField, int intField)\r\n-\t{\r\n-\t\tthis.pk = pk;\r\n-\t\tthis.stringField = stringField;\r\n-\t\tthis.intField = intField;\r\n-\t}\r\n-\r\n-\r\n-\tpublic long getPk ()\r\n-\t{\r\n-\t\treturn pk;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setStringField (String val)\r\n-\t{\r\n-\t\tstringField = val;\r\n-\t}\r\n-\r\n-\r\n-\tpublic String getStringField ()\r\n-\t{\r\n-\t\treturn stringField;\r\n-\t}\r\n-\r\n-\tpublic void setIntField (int val)\r\n-\t{\r\n-\t\tintField = val;\r\n-\t}\r\n-\r\n-\r\n-\tpublic int getIntField ()\r\n-\t{\r\n-\t\treturn intField;\r\n-\t}\r\n-\r\n-\tpublic String toString()\r\n-\t{\r\n-\t\treturn(\"PK: \"+pk+\" StringField: \"+stringField+\" IntField: \"+intField);\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.common.apps;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+\n+\n+//@Entity(name=\"entity2ExplicitName\")\n+//@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\n+/**FIX-ME \n+ * \n+ * It should complain if i uncomment the above strategies...but it does\n+ */\n+@Entity\n+public class Entity2 implements Serializable\n+{\n+\t/**\n+\t *\n+\t */\n+\tprivate static final long serialVersionUID = 4723739219953167343L;\n+\n+\t@Id\n+\tprotected long pk;\n+\n+\t@Basic\n+\t@Column(length=35)\n+\tprotected String stringField;\n+\n+\t@Basic\n+\tprotected int intField;\n+\n+\tpublic Entity2()\n+\t{}\n+\n+\n+\tpublic Entity2 (long pk, String stringField, int intField)\n+\t{\n+\t\tthis.pk = pk;\n+\t\tthis.stringField = stringField;\n+\t\tthis.intField = intField;\n+\t}\n+\n+\n+\tpublic long getPk ()\n+\t{\n+\t\treturn pk;\n+\t}\n+\n+\n+\tpublic void setStringField (String val)\n+\t{\n+\t\tstringField = val;\n+\t}\n+\n+\n+\tpublic String getStringField ()\n+\t{\n+\t\treturn stringField;\n+\t}\n+\n+\tpublic void setIntField (int val)\n+\t{\n+\t\tintField = val;\n+\t}\n+\n+\n+\tpublic int getIntField ()\n+\t{\n+\t\treturn intField;\n+\t}\n+\n+\tpublic String toString()\n+\t{\n+\t\treturn(\"PK: \"+pk+\" StringField: \"+stringField+\" IntField: \"+intField);\n+\t}\n+}"},{"sha":"e0077a43959e355c0126d17287ac122eebcb009d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/FemaleUser.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/FemaleUser.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/FemaleUser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/FemaleUser.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,35 +1,35 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.common.apps;\r\n-\r\n-import javax.persistence.DiscriminatorValue;\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity(name=\"FemUser\")\r\n-@DiscriminatorValue(value=\"F\")\r\n-public class FemaleUser extends CompUser\r\n-{\r\n-\r\n-\tpublic FemaleUser(){}\r\n-\r\n-\tpublic FemaleUser(String name, String cname, Address add, int age, int id)\r\n-\t{\r\n-\t\tsuper(name, cname, add, age);\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.common.apps;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+\n+@Entity(name=\"FemUser\")\n+@DiscriminatorValue(value=\"F\")\n+public class FemaleUser extends CompUser\n+{\n+\n+\tpublic FemaleUser(){}\n+\n+\tpublic FemaleUser(String name, String cname, Address add, int age, int id)\n+\t{\n+\t\tsuper(name, cname, add, age);\n+\t}\n+}"},{"sha":"463ff2617ae49f3a278c44f8a9a3d13cda777983","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/MaleUser.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/MaleUser.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/MaleUser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/MaleUser.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,33 +1,33 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.common.apps;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-@DiscriminatorValue(value=\"M\")\r\n-public class MaleUser extends CompUser\r\n-{\r\n-\tpublic MaleUser(){}\r\n-\r\n-\tpublic MaleUser(String name, String cname, Address add, int age, int id)\r\n-\t{\r\n-\t\tsuper(name, cname, add, age);\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.common.apps;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@DiscriminatorValue(value=\"M\")\n+public class MaleUser extends CompUser\n+{\n+\tpublic MaleUser(){}\n+\n+\tpublic MaleUser(String name, String cname, Address add, int age, int id)\n+\t{\n+\t\tsuper(name, cname, add, age);\n+\t}\n+}"},{"sha":"a74e3b45a459293047343ea9e53bc13dd3750aa9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/RuntimeTest1.java","status":"modified","additions":143,"deletions":143,"changes":286,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/RuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/RuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/RuntimeTest1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,143 +1,143 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.common.apps;\r\n-\r\n-import java.io.*;\r\n-import java.math.*;\r\n-import java.util.*;\r\n-\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.FetchType;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-import javax.persistence.OneToMany;\r\n-import javax.persistence.OneToOne;\r\n-import javax.persistence.Table;\r\n-import javax.persistence.Transient;\r\n-\r\n-\r\n-/**\r\n- *\t<p>Persitent type used in testing.</p>\r\n- *\r\n- *\t@author\t\tAbe White\r\n- */\r\n-@Entity\r\n-@Table(name=\"rtest1\")\r\n-@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n-public class RuntimeTest1 implements Serializable\r\n-{\r\n-\r\n-\tprivate static final long serialVersionUID = 1L;\r\n-\r\n-\t@Transient\r\n-\tpublic static final String someStaticField = \"someField\";\r\n-\r\n-\tprivate Locale\t\tlocaleField;\r\n-\r\n-\t@Id\r\n-\tprivate int\t\t\tintField;\r\n-\r\n-\t@Column(length=35)\r\n-\tprivate String\t\tstringField;\r\n-\r\n-\t// transactional only\r\n-\t@Column(length=35)\r\n-\tpublic String\t\ttransString;\r\n-\r\n-\t// relations\r\n-\t//@Transient\r\n-\t@OneToOne(fetch=FetchType.LAZY, cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n-\tprivate RuntimeTest1\tselfOneOne;\r\n-\r\n-\t@Transient\r\n-\tprivate Set\t\tselfOneMany = new HashSet ();\r\n-\r\n-\r\n-\tpublic RuntimeTest1 ()\r\n-\t{}\r\n-\r\n-\tpublic RuntimeTest1(int key)\r\n-\t{\r\n-\t\tthis.intField = key;\r\n-\t}\r\n-\r\n-\tpublic RuntimeTest1 (String str, int i)\r\n-\t{\r\n-\t\tstringField = str;\r\n-\t\tintField = i;\r\n-\t}\r\n-\r\n-\tpublic int getIntField ()\r\n-\t{\r\n-\t\treturn this.intField;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setIntField (int intField)\r\n-\t{\r\n-\t\tthis.intField = intField;\r\n-\t}\r\n-\r\n-\tpublic String getStringField ()\r\n-\t{\r\n-\t\treturn this.stringField;\r\n-\t}\r\n-\r\n-\tpublic void setStringField (String stringField)\r\n-\t{\r\n-\t\tthis.stringField = stringField;\r\n-\t}\r\n-\r\n-\tpublic RuntimeTest1 getSelfOneOne ()\r\n-\t{\r\n-\t\treturn this.selfOneOne;\r\n-\t}\r\n-\r\n-\tpublic void setSelfOneOne (RuntimeTest1 selfOneOne)\r\n-\t{\r\n-\t\tthis.selfOneOne = selfOneOne;\r\n-\t}\r\n-\r\n-\tpublic Set getSelfOneMany ()\r\n-\t{\r\n-\t\treturn this.selfOneMany;\r\n-\t}\r\n-\r\n-\tpublic void setSelfOneMany (Set selfOneMany)\r\n-\t{\r\n-\t\tthis.selfOneMany = selfOneMany;\r\n-\t}\r\n-\r\n-\tpublic String toString()\r\n-\t{\r\n-\t\treturn \"IntField: \"+intField+\", StringField: \"+stringField+\" .\";\r\n-\t}\r\n-\r\n-\tpublic Locale getLocaleField() {\r\n-\t\treturn localeField;\r\n-\t}\r\n-\r\n-\tpublic void setLocaleField(Locale localeField) {\r\n-\t\tthis.localeField = localeField;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.common.apps;\n+\n+import java.io.*;\n+import java.math.*;\n+import java.util.*;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import javax.persistence.Transient;\n+\n+\n+/**\n+ *\t<p>Persitent type used in testing.</p>\n+ *\n+ *\t@author\t\tAbe White\n+ */\n+@Entity\n+@Table(name=\"rtest1\")\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\n+public class RuntimeTest1 implements Serializable\n+{\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\t@Transient\n+\tpublic static final String someStaticField = \"someField\";\n+\n+\tprivate Locale\t\tlocaleField;\n+\n+\t@Id\n+\tprivate int\t\t\tintField;\n+\n+\t@Column(length=35)\n+\tprivate String\t\tstringField;\n+\n+\t// transactional only\n+\t@Column(length=35)\n+\tpublic String\t\ttransString;\n+\n+\t// relations\n+\t//@Transient\n+\t@OneToOne(fetch=FetchType.LAZY, cascade={CascadeType.PERSIST, CascadeType.REMOVE})\n+\tprivate RuntimeTest1\tselfOneOne;\n+\n+\t@Transient\n+\tprivate Set\t\tselfOneMany = new HashSet ();\n+\n+\n+\tpublic RuntimeTest1 ()\n+\t{}\n+\n+\tpublic RuntimeTest1(int key)\n+\t{\n+\t\tthis.intField = key;\n+\t}\n+\n+\tpublic RuntimeTest1 (String str, int i)\n+\t{\n+\t\tstringField = str;\n+\t\tintField = i;\n+\t}\n+\n+\tpublic int getIntField ()\n+\t{\n+\t\treturn this.intField;\n+\t}\n+\n+\n+\tpublic void setIntField (int intField)\n+\t{\n+\t\tthis.intField = intField;\n+\t}\n+\n+\tpublic String getStringField ()\n+\t{\n+\t\treturn this.stringField;\n+\t}\n+\n+\tpublic void setStringField (String stringField)\n+\t{\n+\t\tthis.stringField = stringField;\n+\t}\n+\n+\tpublic RuntimeTest1 getSelfOneOne ()\n+\t{\n+\t\treturn this.selfOneOne;\n+\t}\n+\n+\tpublic void setSelfOneOne (RuntimeTest1 selfOneOne)\n+\t{\n+\t\tthis.selfOneOne = selfOneOne;\n+\t}\n+\n+\tpublic Set getSelfOneMany ()\n+\t{\n+\t\treturn this.selfOneMany;\n+\t}\n+\n+\tpublic void setSelfOneMany (Set selfOneMany)\n+\t{\n+\t\tthis.selfOneMany = selfOneMany;\n+\t}\n+\n+\tpublic String toString()\n+\t{\n+\t\treturn \"IntField: \"+intField+\", StringField: \"+stringField+\" .\";\n+\t}\n+\n+\tpublic Locale getLocaleField() {\n+\t\treturn localeField;\n+\t}\n+\n+\tpublic void setLocaleField(Locale localeField) {\n+\t\tthis.localeField = localeField;\n+\t}\n+}"},{"sha":"ffda367060053f3f25ae1d5629b21f3d5aeb5c11","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/RuntimeTest2.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/RuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/RuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/RuntimeTest2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,64 +1,64 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.common.apps;\r\n-\r\n-import javax.persistence.DiscriminatorValue;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.Table;\r\n-\r\n-\r\n-/**\r\n- *\t<p>Persitent type used in testing.</p>\r\n- *\r\n- *\t@author\t\tAbe White\r\n- */\r\n-@Entity\r\n-@DiscriminatorValue(\"RT2\")\r\n-public class RuntimeTest2 extends RuntimeTest1\r\n-{\r\n-\tprivate static final long serialVersionUID = 1L;\r\n-\tprivate int intField2;\r\n-\r\n-\tpublic RuntimeTest2 (int key)\r\n-\t{\r\n-\t\tsuper(key);\r\n-\t}\r\n-\r\n-\tpublic RuntimeTest2 (String str, int i)\r\n-\t{\r\n-\t\tsuper (str, i);\r\n-\t}\r\n-\r\n-\tpublic int getIntField2 ()\r\n-\t{\r\n-\t\treturn this.intField2;\r\n-\t}\r\n-\r\n-\tpublic void setIntField2 (int intField2)\r\n-\t{\r\n-\t\tthis.intField2 = intField2;\r\n-\t}\r\n-\r\n-\tpublic String toString()\r\n-\t{\r\n-\t\treturn \"IntField: \"+intField2+\", StringField: \"+super.getStringField()+\" .\";\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.common.apps;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.Table;\n+\n+\n+/**\n+ *\t<p>Persitent type used in testing.</p>\n+ *\n+ *\t@author\t\tAbe White\n+ */\n+@Entity\n+@DiscriminatorValue(\"RT2\")\n+public class RuntimeTest2 extends RuntimeTest1\n+{\n+\tprivate static final long serialVersionUID = 1L;\n+\tprivate int intField2;\n+\n+\tpublic RuntimeTest2 (int key)\n+\t{\n+\t\tsuper(key);\n+\t}\n+\n+\tpublic RuntimeTest2 (String str, int i)\n+\t{\n+\t\tsuper (str, i);\n+\t}\n+\n+\tpublic int getIntField2 ()\n+\t{\n+\t\treturn this.intField2;\n+\t}\n+\n+\tpublic void setIntField2 (int intField2)\n+\t{\n+\t\tthis.intField2 = intField2;\n+\t}\n+\n+\tpublic String toString()\n+\t{\n+\t\treturn \"IntField: \"+intField2+\", StringField: \"+super.getStringField()+\" .\";\n+\t}\n+}"},{"sha":"c968e1ab045c983896091499387b7e933166091f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/ScienceCourse.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/ScienceCourse.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/ScienceCourse.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/ScienceCourse.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,47 +1,47 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.common.apps;\r\n-\r\n-import javax.persistence.DiscriminatorValue;\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-@DiscriminatorValue(\"Science\")\r\n-public class ScienceCourse extends Course\r\n-{\r\n-\tprivate static final long serialVersionUID = 1L;\r\n-\r\n-\tprivate String relCourse;\r\n-\r\n-\tpublic ScienceCourse(String relCourse)\r\n-\t{\r\n-\t\tthis.relCourse = relCourse;\r\n-\t}\r\n-\r\n-\tpublic ScienceCourse(int id, String relCourse)\r\n-\t{\r\n-\t\tsuper(id);\r\n-\t\tthis.relCourse = relCourse;\r\n-\t}\r\n-\r\n-\tpublic String getRelCourse()\r\n-\t{\r\n-\t\treturn relCourse;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.common.apps;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+\n+@Entity\n+@DiscriminatorValue(\"Science\")\n+public class ScienceCourse extends Course\n+{\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tprivate String relCourse;\n+\n+\tpublic ScienceCourse(String relCourse)\n+\t{\n+\t\tthis.relCourse = relCourse;\n+\t}\n+\n+\tpublic ScienceCourse(int id, String relCourse)\n+\t{\n+\t\tsuper(id);\n+\t\tthis.relCourse = relCourse;\n+\t}\n+\n+\tpublic String getRelCourse()\n+\t{\n+\t\treturn relCourse;\n+\t}\n+}"},{"sha":"bfe3b9d614da2a79ff264aef42fe58c14cdcd26e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Student.java","status":"modified","additions":87,"deletions":87,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Student.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Student.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/apps/Student.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,87 +1,87 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.common.apps;\r\n-\r\n-import java.io.Serializable;\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-public class Student implements Serializable {\r\n-\r\n-\t@Transient\r\n-\tprivate static final long serialVersionUID = 1L;\r\n-\r\n-\t@Id\r\n-\t@Column(length=50)\r\n-\tprivate String name;\r\n-\r\n-\t@ManyToMany(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n-\t@JoinTable(name=\"STUD_COURSE\",\r\n-\t\t            joinColumns=@JoinColumn(name=\"STUD_ID\"),\r\n-\t\t            inverseJoinColumns=@JoinColumn(name=\"CRSE_ID\"))\r\n-\tprivate List<Course> course;\r\n-\r\n-\t@ManyToMany(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n-\t@JoinTable(name=\"STUD_DEP\",\r\n-\t\t            joinColumns=@JoinColumn(name=\"STUD_ID\"),\r\n-\t\t            inverseJoinColumns=@JoinColumn(name=\"DEP_ID\"))\r\n-\tprivate List<Department> department;\r\n-\r\n-\tpublic Student(){}\r\n-\r\n-\tpublic Student(String name)\r\n-\t{\r\n-\t\tthis.name = name;\r\n-\t}\r\n-\r\n-\tpublic Student(String name, List<Course> clist, List<Department> dlist)\r\n-\t{\r\n-\t\tthis.name = name;\r\n-\t\tthis.course = clist;\r\n-\t\tthis.department = dlist;\r\n-\t}\r\n-\r\n-\tpublic List<Course> getCourse() {\r\n-\t\treturn course;\r\n-\t}\r\n-\r\n-\tpublic void setCourse(List<Course> course) {\r\n-\t\tthis.course = course;\r\n-\t}\r\n-\r\n-\tpublic List<Department> getDepartment() {\r\n-\t\treturn department;\r\n-\t}\r\n-\r\n-\tpublic void setDepartment(List<Department> department) {\r\n-\t\tthis.department = department;\r\n-\t}\r\n-\r\n-\tpublic String getName()\r\n-\t{\r\n-\t\treturn name;\r\n-\t}\r\n-\r\n-\tpublic void setName(String name)\r\n-\t{\r\n-\t\tthis.name = name;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.common.apps;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+public class Student implements Serializable {\n+\n+\t@Transient\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\t@Id\n+\t@Column(length=50)\n+\tprivate String name;\n+\n+\t@ManyToMany(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\n+\t@JoinTable(name=\"STUD_COURSE\",\n+\t\t            joinColumns=@JoinColumn(name=\"STUD_ID\"),\n+\t\t            inverseJoinColumns=@JoinColumn(name=\"CRSE_ID\"))\n+\tprivate List<Course> course;\n+\n+\t@ManyToMany(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\n+\t@JoinTable(name=\"STUD_DEP\",\n+\t\t            joinColumns=@JoinColumn(name=\"STUD_ID\"),\n+\t\t            inverseJoinColumns=@JoinColumn(name=\"DEP_ID\"))\n+\tprivate List<Department> department;\n+\n+\tpublic Student(){}\n+\n+\tpublic Student(String name)\n+\t{\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic Student(String name, List<Course> clist, List<Department> dlist)\n+\t{\n+\t\tthis.name = name;\n+\t\tthis.course = clist;\n+\t\tthis.department = dlist;\n+\t}\n+\n+\tpublic List<Course> getCourse() {\n+\t\treturn course;\n+\t}\n+\n+\tpublic void setCourse(List<Course> course) {\n+\t\tthis.course = course;\n+\t}\n+\n+\tpublic List<Department> getDepartment() {\n+\t\treturn department;\n+\t}\n+\n+\tpublic void setDepartment(List<Department> department) {\n+\t\tthis.department = department;\n+\t}\n+\n+\tpublic String getName()\n+\t{\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name)\n+\t{\n+\t\tthis.name = name;\n+\t}\n+}"},{"sha":"fe473bc064cb10847de0c81bfa6de9fa6f451068","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/AbstractTestCase.java","status":"modified","additions":1216,"deletions":1216,"changes":2432,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/AbstractTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/AbstractTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/AbstractTestCase.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,1216 +1,1216 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.common.utils;\r\n-\r\n-import java.util.Map;\r\n-import java.util.Date;\r\n-import java.util.Collection;\r\n-import java.util.EnumSet;\r\n-import java.util.ArrayList;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Iterator;\r\n-import java.util.Collections;\r\n-import java.util.LinkedList;\r\n-import java.util.StringTokenizer;\r\n-import java.util.ListIterator;\r\n-import java.util.NoSuchElementException;\r\n-import java.util.Arrays;\r\n-import java.util.Comparator;\r\n-import java.math.BigInteger;\r\n-import java.math.BigDecimal;\r\n-import java.lang.reflect.InvocationTargetException;\r\n-import java.lang.reflect.Method;\r\n-import java.beans.BeanInfo;\r\n-import java.beans.Introspector;\r\n-import java.beans.PropertyDescriptor;\r\n-import java.io.IOException;\r\n-import java.io.ByteArrayOutputStream;\r\n-import java.io.ObjectOutputStream;\r\n-import java.io.ByteArrayInputStream;\r\n-import java.io.ObjectInputStream;\r\n-import java.io.StringWriter;\r\n-import java.io.PrintWriter;\r\n-import java.io.PrintStream;\r\n-import java.net.URL;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.Query;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import javax.management.IntrospectionException;\r\n-\r\n-import org.apache.regexp.RESyntaxException;\r\n-import org.apache.regexp.RE;\r\n-import org.apache.regexp.REUtil;\r\n-import org.apache.openjpa.persistence.test.PersistenceTestCase;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n-import org.apache.openjpa.kernel.BrokerFactory;\r\n-import org.apache.openjpa.lib.log.Log;\r\n-import org.apache.openjpa.meta.ClassMetaData;\r\n-\r\n-public abstract class AbstractTestCase extends PersistenceTestCase {\r\n-\r\n-    private String persistenceXmlResource;\r\n-    private Map<Map,OpenJPAEntityManagerFactory> emfs =\r\n-        new HashMap<Map,OpenJPAEntityManagerFactory>();\r\n-    private OpenJPAEntityManager currentEntityManager;\r\n-\r\n-    protected enum Platform {\r\n-        EMPRESS,\r\n-        HYPERSONIC,\r\n-        POSTGRESQL,\r\n-        MYSQL,\r\n-        SQLSERVER,\r\n-        DB2,\r\n-        ORACLE,\r\n-        DERBY,\r\n-        INFORMIX,\r\n-        POINTBASE,\r\n-        SYBASE,\r\n-    }\r\n-\r\n-    protected String multiThreadExecuting = null;\r\n-    protected boolean inTimeoutThread = false;\r\n-\r\n-\r\n-    public AbstractTestCase(String name, String s) {\r\n-        setName(name);\r\n-        persistenceXmlResource = computePersistenceXmlResource(s);\r\n-    }\r\n-\r\n-    public void tearDown() throws Exception {\r\n-        try {\r\n-            super.tearDown();\r\n-        } finally {\r\n-            for (EntityManagerFactory emf : emfs.values()) {\r\n-                try {\r\n-                    closeEMF(emf);\r\n-                } catch (Exception e) {\r\n-                    e.printStackTrace();\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    public AbstractTestCase() {\r\n-    }\r\n-\r\n-    public AbstractTestCase(String name) {\r\n-        setName(name);\r\n-    }\r\n-\r\n-    protected String computePersistenceXmlResource(String s) {\r\n-        String resourceName = getClass().getPackage().getName()\r\n-            .replaceAll(\"\\\\.\", \"/\");\r\n-        resourceName += \"/common/apps/META-INF/persistence.xml\";\r\n-        URL resource = getClass().getClassLoader().getResource(resourceName);\r\n-        if (resource != null)\r\n-            return resourceName;\r\n-        return defaultPersistenceXmlResource();\r\n-    }\r\n-\r\n-    protected String defaultPersistenceXmlResource() {\r\n-        return \"org/apache/openjpa/persistence/\" +\r\n-            \"common/apps/META-INF/persistence.xml\";\r\n-    }\r\n-\r\n-    protected OpenJPAStateManager getStateManager(Object obj,\r\n-        EntityManager em) {\r\n-        return JPAFacadeHelper.toBroker(em).getStateManager(obj);\r\n-    }\r\n-\r\n-    protected int deleteAll(Class type, EntityManager em) {\r\n-        ClassMetaData meta = JPAFacadeHelper.getMetaData(em, type);\r\n-        if (meta != null)\r\n-            return em.createQuery(\"delete from \" + meta.getTypeAlias())\r\n-                .executeUpdate();\r\n-        else\r\n-            return -1;\r\n-    }\r\n-\r\n-    protected int deleteAll(Class... types) {\r\n-        EntityManager em = getEmf().createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        int ret = 0;\r\n-        for (Class type : types)\r\n-            ret += deleteAll(type, em);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-        return ret;\r\n-    }\r\n-\r\n-    protected OpenJPAEntityManagerFactory getEmf(Map map) {\r\n-        if (map == null)\r\n-            map = new HashMap();\r\n-        Collection keys = new ArrayList();\r\n-        for (Object key : map.keySet())\r\n-            if (key.toString().startsWith(\"kodo\"))\r\n-                keys.add(key);\r\n-        if (keys.size() > 0)\r\n-            throw new IllegalArgumentException(\r\n-                \"kodo-prefixed properties must be converted to openjpa. \" +\r\n-                    \"Properties: \" + keys);\r\n-\r\n-        addProperties(map);\r\n-\r\n-        OpenJPAEntityManagerFactory emf = emfs.get(map);\r\n-        if (emf == null) {\r\n-            emf = OpenJPAPersistence.createEntityManagerFactory(\r\n-                \"TestConv\", persistenceXmlResource, map);\r\n-            emfs.put(map, emf);\r\n-        }\r\n-        return emf;\r\n-    }\r\n-\r\n-    protected void addProperties(Map map) {\r\n-        if (!map.containsKey(\"openjpa.jdbc.SynchronizeMappings\"))\r\n-            map.put(\"openjpa.jdbc.SynchronizeMappings\",\r\n-                \"buildSchema(ForeignKeys=true,\" +\r\n-                    \"SchemaAction='add,deleteTableContents')\");\r\n-    }\r\n-\r\n-    protected OpenJPAEntityManagerFactory getEmf() {\r\n-        Map m = new HashMap();\r\n-        return getEmf(m);\r\n-    }\r\n-\r\n-    protected BrokerFactory getBrokerFactory() {\r\n-        return JPAFacadeHelper.toBrokerFactory(getEmf());\r\n-    }\r\n-\r\n-    protected BrokerFactory getBrokerFactory(String[] args) {\r\n-        if (args.length % 2 != 0)\r\n-            throw new IllegalArgumentException(\r\n-                \"odd number of elements in arg array\");\r\n-        Map map = new HashMap();\r\n-        for (int i = 0; i < args.length; i = i + 2)\r\n-            map.put(args[i], args[i+1]);\r\n-        return JPAFacadeHelper.toBrokerFactory(getEmf(map));\r\n-    }\r\n-\r\n-    protected OpenJPAEntityManager currentEntityManager() {\r\n-        if (currentEntityManager == null || !currentEntityManager.isOpen())\r\n-            currentEntityManager = getEmf().createEntityManager();\r\n-        return currentEntityManager;\r\n-    }\r\n-\r\n-    protected void startTx(EntityManager em) {\r\n-        em.getTransaction().begin();\r\n-    }\r\n-\r\n-    protected boolean isActiveTx(EntityManager em) {\r\n-        return em.getTransaction().isActive();\r\n-    }\r\n-\r\n-    protected void endTx(EntityManager em) {\r\n-        if (em.getTransaction().isActive()) {\r\n-            if (em.getTransaction().getRollbackOnly())\r\n-                em.getTransaction().rollback();\r\n-            else\r\n-                em.getTransaction().commit();\r\n-        }\r\n-    }\r\n-\r\n-    protected void rollbackTx(EntityManager em) {\r\n-        em.getTransaction().rollback();\r\n-    }\r\n-\r\n-    protected void endEm(EntityManager em) {\r\n-        if (em.isOpen())\r\n-            em.close();\r\n-        if (em == currentEntityManager)\r\n-        currentEntityManager = null;\r\n-    }\r\n-\r\n-    protected Object getStackTrace(Throwable t) {\r\n-        throw new UnsupportedOperationException();\r\n-    }\r\n-\r\n-    protected OpenJPAConfiguration getConfiguration() {\r\n-        return getEmf().getConfiguration();\r\n-    }\r\n-\r\n-    protected Platform getCurrentPlatform() {\r\n-        throw new UnsupportedOperationException();\r\n-    }\r\n-\r\n-    protected void bug(int id, String s) {\r\n-        bug(id, null, s);\r\n-    }\r\n-    \r\n-    protected void bug(Platform platform, int id, Throwable t, String s) {\r\n-        bug(EnumSet.of(platform), id, t, s);\r\n-    }\r\n-\r\n-    protected void bug(EnumSet<Platform> platforms, int id, Throwable t, String s) {\r\n-        if (platforms.contains(getCurrentPlatform()))\r\n-            bug(id, t, s);\r\n-        else\r\n-            fail(String.format(\r\n-                \"bug %s is unexpectedly occurring on platform %s\",\r\n-                id, getCurrentPlatform()));\r\n-    }\r\n-\r\n-    protected void bug(int id, Throwable t, String s) {\r\n-        if (t != null) {\r\n-            if (t instanceof RuntimeException)\r\n-                throw (RuntimeException) t;\r\n-            else\r\n-                throw new RuntimeException(t);\r\n-        } else {\r\n-            fail(s);\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Support method to get a random Integer for testing.\r\n-     */\r\n-    public static Integer randomInt() {\r\n-        return new Integer((int) (Math.random() * Integer.MAX_VALUE));\r\n-    }\r\n-\r\n-    /**\r\n-     * Support method to get a random Character for testing.\r\n-     */\r\n-    public static Character randomChar() {\r\n-        char [] TEST_CHAR_ARRAY = new char []{\r\n-            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\r\n-            'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\r\n-            's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '1',\r\n-            '2', '3', '4', '5', '6', '7', '8', '9' };\r\n-\r\n-        return new Character(TEST_CHAR_ARRAY[\r\n-                (int) (Math.random() * TEST_CHAR_ARRAY.length)]);\r\n-    }\r\n-\r\n-    /**\r\n-     * Support method to get a random Long for testing.\r\n-     */\r\n-    public static Long randomLong() {\r\n-        return new Long((long) (Math.random() * Long.MAX_VALUE));\r\n-    }\r\n-\r\n-    /**\r\n-     * Support method to get a random Short for testing.\r\n-     */\r\n-    public static Short randomShort() {\r\n-        return new Short((short) (Math.random() * Short.MAX_VALUE));\r\n-    }\r\n-\r\n-    /**\r\n-     * Support method to get a random Double for testing.\r\n-     */\r\n-    public static Double randomDouble() {\r\n-        return new Double((double) (Math.round(Math.random() * 5000d)) / 1000d);\r\n-    }\r\n-\r\n-    /**\r\n-     * Support method to get a random Float for testing.\r\n-     */\r\n-    public static Float randomFloat() {\r\n-        return new Float((float) (Math.round(Math.random() * 5000f)) / 1000f);\r\n-    }\r\n-\r\n-    /**\r\n-     * Support method to get a random Byte for testing.\r\n-     */\r\n-    public static Byte randomByte() {\r\n-        return new Byte((byte) (Math.random() * Byte.MAX_VALUE));\r\n-    }\r\n-\r\n-    /**\r\n-     * Support method to get a random Boolean for testing.\r\n-     */\r\n-    public static Boolean randomBoolean() {\r\n-        return new Boolean(Math.random() > 0.5 ? true : false);\r\n-    }\r\n-\r\n-    /**\r\n-     * Support method to get a random Date for testing.\r\n-     */\r\n-    public static Date randomDate() {\r\n-        long millis = (long) (Math.random() * System.currentTimeMillis());\r\n-\r\n-        // round millis to the nearest 1000: this is because some\r\n-        // databases do not store the milliseconds correctly (e.g., MySQL).\r\n-        // This is a really a bug we should fix. FC #27.\r\n-        millis -= (millis % 1000);\r\n-\r\n-        return new Date(millis);\r\n-    }\r\n-\r\n-    /**\r\n-     * Support method to get a random String for testing.\r\n-     */\r\n-    public static String randomString() {\r\n-        // default to a small string, in case column sizes are\r\n-        // limited (such as with a string primary key)\r\n-        return randomString(50);\r\n-    }\r\n-\r\n-    /**\r\n-     * Support method to get a random String for testing.\r\n-     */\r\n-    public static String randomString(int len) {\r\n-        StringBuffer buf = new StringBuffer();\r\n-        for (int i = 0; i < (int) (Math.random() * len) + 1; i++)\r\n-            buf.append(randomChar());\r\n-        return buf.toString();\r\n-    }\r\n-\r\n-    /**\r\n-     * Support method to get a random clob for testing.\r\n-     */\r\n-    public static String randomClob() {\r\n-        StringBuffer sbuf = new StringBuffer();\r\n-        while (sbuf.length() < (5 * 1024)) // at least 5K\r\n-        {\r\n-            sbuf.append(randomString(1024));\r\n-        }\r\n-\r\n-        return sbuf.toString();\r\n-    }\r\n-\r\n-    /**\r\n-     * Support method to get a random BigInteger for testing.\r\n-     */\r\n-    public static BigInteger randomBigInteger() {\r\n-        // too many of our test databases don't support bigints > MAX_LONG:\r\n-        // I don't like it, but for now, let's only test below MAX_LONG\r\n-        BigInteger lng = new BigInteger(\r\n-                ((long) (Math.random() * Long.MAX_VALUE)) + \"\");\r\n-\r\n-        BigInteger multiplier = new BigInteger(\"1\");\r\n-        // (1 + (int)(Math.random () * 10000)) + \"\");\r\n-        if (Math.random() < 0.5)\r\n-            multiplier = multiplier.multiply(new BigInteger(\"-1\"));\r\n-\r\n-        return lng.multiply(multiplier);\r\n-    }\r\n-\r\n-    /**\r\n-     * Support method to get a random BigDecimal for testing.\r\n-     */\r\n-    public static BigDecimal randomBigDecimal() {\r\n-        BigInteger start = randomBigInteger();\r\n-        String str = start.toString();\r\n-        // truncate off the last 8 digits: we still get some\r\n-        // overflows with lame databases.\r\n-        for (int i = 0; i < 8; i++)\r\n-            if (str.length() > 2)\r\n-                str = str.substring(0, str.length() - 1);\r\n-        start = new BigInteger(str);\r\n-\r\n-        String val = start + \".\"\r\n-                + ((int) (Math.random() * 10))\r\n-                + ((int) (Math.random() * 10))\r\n-                + ((int) (Math.random() * 10))\r\n-                + ((int) (Math.random() * 10))\r\n-                + ((int) (Math.random() * 10))\r\n-                + ((int) (Math.random() * 10))\r\n-                + ((int) (Math.random() * 10))\r\n-                + ((int) (Math.random() * 10))\r\n-                + ((int) (Math.random() * 10))\r\n-                + ((int) (Math.random() * 10));\r\n-\r\n-        return new BigDecimal(val);\r\n-    }\r\n-\r\n-    /**\r\n-     * Support method to get a random blob for testing.\r\n-     */\r\n-    public static byte[] randomBlob() {\r\n-        // up to 100K blob\r\n-        byte [] blob = new byte [(int) (Math.random() * 1024 * 100)];\r\n-        for (int i = 0; i < blob.length; i++)\r\n-            blob[i] = randomByte().byteValue();\r\n-\r\n-        return blob;\r\n-    }\r\n-\r\n-    /**\r\n-     * Invoke setters for pimitives and primitive wrappers on the\r\n-     * specified object.\r\n-     */\r\n-    public static Object randomizeBean(Object bean)\r\n-    throws IntrospectionException, IllegalAccessException,\r\n-        InvocationTargetException, java.beans.IntrospectionException {\r\n-        BeanInfo info = Introspector.getBeanInfo(bean.getClass());\r\n-        PropertyDescriptor[] props = info.getPropertyDescriptors();\r\n-        for (int i = 0; i < props.length; i++) {\r\n-            Method write = props[i].getWriteMethod();\r\n-            if (write == null)\r\n-                continue;\r\n-\r\n-            Class [] params = write.getParameterTypes();\r\n-            if (params == null || params.length != 1)\r\n-                continue;\r\n-\r\n-            Class paramType = params[0];\r\n-            Object arg = null;\r\n-\r\n-            if (paramType == boolean.class || paramType == Boolean.class)\r\n-                arg = randomBoolean();\r\n-            else if (paramType == byte.class || paramType == Byte.class)\r\n-                arg = randomByte();\r\n-            else if (paramType == char.class || paramType == Character.class)\r\n-                arg = randomChar();\r\n-            else if (paramType == short.class || paramType == Short.class)\r\n-                arg = randomShort();\r\n-            else if (paramType == int.class || paramType == Integer.class)\r\n-                arg = randomInt();\r\n-            else if (paramType == long.class || paramType == Long.class)\r\n-                arg = randomLong();\r\n-            else if (paramType == double.class || paramType == Double.class)\r\n-                arg = randomDouble();\r\n-            else if (paramType == float.class || paramType == Float.class)\r\n-                arg = randomFloat();\r\n-            else if (paramType == String.class)\r\n-                arg = randomString();\r\n-            else if (paramType == BigInteger.class)\r\n-                arg = randomBigInteger();\r\n-            else if (paramType == BigDecimal.class)\r\n-                arg = randomBigDecimal();\r\n-            else if (paramType == Date.class)\r\n-                arg = randomDate();\r\n-\r\n-            if (arg != null)\r\n-                write.invoke(bean, new Object []{ arg });\r\n-        }\r\n-\r\n-        return bean;\r\n-    }\r\n-\r\n-    protected void assertSize(int size, Collection c) {\r\n-        assertEquals(size, c.size());\r\n-    }\r\n-\r\n-    protected void assertSize(int size, Query q) {\r\n-        assertEquals(size, q.getResultList().size());\r\n-    }\r\n-\r\n-    /**\r\n-     * Serialize and deserialize the object.\r\n-     *\r\n-     * @param validateEquality make sure the hashCode and equals\r\n-     * methods hold true\r\n-     */\r\n-    public static Object roundtrip(Object orig, boolean validateEquality)\r\n-        throws IOException, ClassNotFoundException {\r\n-        assertNotNull(orig);\r\n-\r\n-        ByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n-        ObjectOutputStream out = new ObjectOutputStream(bout);\r\n-        out.writeObject(orig);\r\n-        ByteArrayInputStream bin = new ByteArrayInputStream(\r\n-            bout.toByteArray());\r\n-        ObjectInputStream in = new ObjectInputStream(bin);\r\n-        Object result = in.readObject();\r\n-\r\n-        if (validateEquality) {\r\n-            assertEquals(orig.hashCode(), result.hashCode());\r\n-            assertEquals(orig, result);\r\n-        }\r\n-\r\n-        return result;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return true if the specified input matches the regular expression regex.\r\n-     */\r\n-    public static boolean matches(String regex, String input)\r\n-        throws RESyntaxException {\r\n-        RE re = REUtil.createRE(regex);\r\n-        return re.match(input);\r\n-    }\r\n-\r\n-    public static void assertMatches(String regex, String input) {\r\n-        try {\r\n-            if (!(matches(regex, input)))\r\n-                fail(\"Expected regular expression: <\" + regex + \">\"\r\n-                    + \" did not match: <\" + input + \">\");\r\n-        } catch (RESyntaxException e) {\r\n-            throw new IllegalArgumentException(e.toString());\r\n-        }\r\n-    }\r\n-\r\n-    public static void assertNotMatches(String regex, String input) {\r\n-        try {\r\n-            if (matches(regex, input))\r\n-                fail(\"Regular expression: <\" + regex + \">\"\r\n-                    + \" should not match: <\" + input + \">\");\r\n-        } catch (RESyntaxException e) {\r\n-            throw new IllegalArgumentException(e.toString());\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Check the list if strings and return the ones that match\r\n-     * the specified match.\r\n-     */\r\n-    public static List matches(String regex, Collection input)\r\n-        throws RESyntaxException {\r\n-        List matches = new ArrayList();\r\n-        for (Iterator i = input.iterator(); i.hasNext();) {\r\n-            String check = (String) i.next();\r\n-            if (matches(regex, check))\r\n-                matches.add(check);\r\n-        }\r\n-\r\n-        return matches;\r\n-    }\r\n-\r\n-    /**\r\n-     * Assert that the specified collection of Strings contains at least\r\n-     * one string that matches the specified regular expression.\r\n-     */\r\n-    public static void assertMatches(String regex, Collection input) {\r\n-        try {\r\n-            if (matches(regex, input).size() == 0)\r\n-                fail(\"The specified list of size \" + input.size()\r\n-                    + \" did not contain any strings that match the\"\r\n-                    + \" specified regular expression(\\\"\" + regex + \"\\\")\");\r\n-        } catch (RESyntaxException e) {\r\n-            throw new IllegalArgumentException(e.toString());\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Assert that the specified collection of Strings does not match\r\n-     * the specified regular expression.\r\n-     */\r\n-    public static void assertNotMatches(String regex, Collection input) {\r\n-        try {\r\n-            List matches;\r\n-\r\n-            if (((matches = matches(regex, input))).size() > 0)\r\n-                fail(\"The specified list of size \" + input.size()\r\n-                    + \" did contain one or more strings that matchs the\"\r\n-                    + \" specified illegal regular expression\"\r\n-                    + \" (\\\"\" + regex + \"\\\").\"\r\n-                    + \" First example of a matching message is: \"\r\n-                    + matches.iterator().next());\r\n-        } catch (RESyntaxException e) {\r\n-            throw new IllegalArgumentException(e.toString());\r\n-        }\r\n-    }\r\n-\r\n-    protected Log getLog() {\r\n-        return getConfiguration().getLog(\"Tests\");\r\n-    }\r\n-\r\n-    ///////////////////\r\n-    // Multi threading\r\n-    ///////////////////\r\n-\r\n-    /**\r\n-     * Re-execute the invoking method a random number of times\r\n-     * in a random number of Threads.\r\n-     */\r\n-    public void mttest() throws ThreadingException {\r\n-        // 6 iterations in 8 threads is a good trade-off between\r\n-        // tests taking way too long and having a decent chance of\r\n-        // identifying MT problems.\r\n-        int iterations = 6;\r\n-        int threads = 8;\r\n-\r\n-        mttest(threads, iterations);\r\n-    }\r\n-\r\n-    /**\r\n-     * Execute the calling method <code>iterations</code>\r\n-     * times in <code>threads</code> Threads.\r\n-     */\r\n-    public void mttest(int threads, int iterations) {\r\n-        mttest(0, threads, iterations);\r\n-    }\r\n-\r\n-    public void mttest(int serialCount, int threads, int iterations)\r\n-        throws ThreadingException {\r\n-        String methodName = callingMethod(\"mttest\");\r\n-        mttest(serialCount, threads, iterations, methodName, new Object [0]);\r\n-    }\r\n-\r\n-    /**\r\n-     * Execute a test method in multiple threads.\r\n-     *\r\n-     * @param threads the number of Threads to run in\r\n-     * @param iterations the number of times the method should\r\n-     * be execute in a single Thread\r\n-     * @param method the name of the method to execute\r\n-     * @param args the arguments to pass to the method\r\n-     * @throws ThreadingException if an errors occur in\r\n-     * any of the Threads. The actual exceptions\r\n-     * will be embedded in the exception. Note that\r\n-     * this means that assert() failures will be\r\n-     * treated as errors rather than warnings.\r\n-     * @author Marc Prud'hommeaux\r\n-     */\r\n-    public void mttest(int threads, int iterations, final String method,\r\n-        final Object [] args) throws ThreadingException {\r\n-        mttest(0, threads, iterations, method, args);\r\n-    }\r\n-\r\n-    public void mttest(int serialCount,\r\n-        int threads, int iterations, final String method, final Object [] args)\r\n-        throws ThreadingException {\r\n-        if (multiThreadExecuting != null && multiThreadExecuting.equals(method))\r\n-        {\r\n-            // we are currently executing in multi-threaded mode:\r\n-            // don't deadlock!\r\n-            return;\r\n-        }\r\n-\r\n-        multiThreadExecuting = method;\r\n-\r\n-        try {\r\n-            Class [] paramClasses = new Class [args.length];\r\n-            for (int i = 0; i < paramClasses.length; i++)\r\n-                paramClasses[i] = args[i].getClass();\r\n-\r\n-            final Method meth;\r\n-\r\n-            try {\r\n-                meth = getClass().getMethod(method, paramClasses);\r\n-            } catch (NoSuchMethodException nsme) {\r\n-                throw new ThreadingException(nsme.toString(), nsme);\r\n-            }\r\n-\r\n-            final Object thiz = this;\r\n-\r\n-            mttest(\"reflection invocation: (\" + method + \")\",\r\n-                serialCount, threads, iterations, new VolatileRunnable() {\r\n-                public void run() throws Exception {\r\n-                    meth.invoke(thiz, args);\r\n-                }\r\n-            });\r\n-        } finally {\r\n-            multiThreadExecuting = null;\r\n-        }\r\n-    }\r\n-\r\n-    public void mttest(String title, final int threads, final int iterations,\r\n-        final VolatileRunnable runner) throws ThreadingException {\r\n-        mttest(title, 0, threads, iterations, runner);\r\n-    }\r\n-\r\n-    /**\r\n-     * Execute a test method in multiple threads.\r\n-     *\r\n-     * @param title a description of the test, for inclusion in the\r\n-     * error message\r\n-     * @param serialCount the number of times to run the method\r\n-     * serially before spawning threads.\r\n-     * @param threads the number of Threads to run in\r\n-     * @param iterations the number of times the method should\r\n-     * @param runner the VolatileRunnable that will execute\r\n-     * the actual test from within the Thread.\r\n-     * @throws ThreadingException if an errors occur in\r\n-     * any of the Threads. The actual exceptions\r\n-     * will be embedded in the exception. Note that\r\n-     * this means that assert() failures will be\r\n-     * treated as errors rather than warnings.\r\n-     * @author Marc Prud'hommeaux be execute in a single Thread\r\n-     * @author Marc Prud'hommeaux\r\n-     */\r\n-    public void mttest(String title, final int serialCount,\r\n-        final int threads, final int iterations, final VolatileRunnable runner)\r\n-        throws ThreadingException {\r\n-        final List exceptions = Collections.synchronizedList(new LinkedList());\r\n-\r\n-        Thread [] runners = new Thread [threads];\r\n-\r\n-        final long startMillis = System.currentTimeMillis() + 1000;\r\n-\r\n-        for (int i = 1; i <= threads; i++) {\r\n-            final int thisThread = i;\r\n-\r\n-            runners[i - 1] =\r\n-                new Thread(title + \" [\" + i + \" of \" + threads + \"]\") {\r\n-                    public void run() {\r\n-                        // do our best to have all threads start at the exact\r\n-                        // same time. This is imperfect, but the closer we\r\n-                        // get to everyone starting at the same time, the\r\n-                        // better chance we have for identifying MT problems.\r\n-                        while (System.currentTimeMillis() < startMillis)\r\n-                            yield();\r\n-\r\n-                        int thisIteration = 1;\r\n-                        try {\r\n-                            for (; thisIteration <= iterations; thisIteration++)\r\n-                            {\r\n-                                // go go go!\r\n-                                runner.run();\r\n-                            }\r\n-                        } catch (Throwable error) {\r\n-                            synchronized (exceptions) {\r\n-                                // embed the exception into something that gives\r\n-                                // us some more information about the threading\r\n-                                // environment\r\n-                                exceptions.add(new ThreadingException(\"thread=\"\r\n-                                    + this.toString()\r\n-                                    + \";threadNum=\" + thisThread\r\n-                                    + \";maxThreads=\" + threads\r\n-                                    + \";iteration=\" + thisIteration\r\n-                                    + \";maxIterations=\" + iterations, error));\r\n-                            }\r\n-                        }\r\n-                    }\r\n-                };\r\n-        }\r\n-\r\n-        // start the serial tests(does not spawn the threads)\r\n-        for (int i = 0; i < serialCount; i++) {\r\n-            runners[0].run();\r\n-        }\r\n-\r\n-        // start the multithreaded\r\n-        for (int i = 0; i < threads; i++) {\r\n-            runners[i].start();\r\n-        }\r\n-\r\n-        // wait for them all to complete\r\n-        for (int i = 0; i < threads; i++) {\r\n-            try {\r\n-                runners[i].join();\r\n-            } catch (InterruptedException e) {\r\n-            }\r\n-        }\r\n-\r\n-        if (exceptions.size() == 0)\r\n-            return; // sweeeeeeeet: no errors\r\n-\r\n-        // embed all the exceptions that were throws into a\r\n-        // ThreadingException\r\n-        Throwable [] errors = (Throwable []) exceptions.toArray(\r\n-            new Throwable [0]);\r\n-        throw new ThreadingException(\"The \"\r\n-            + errors.length + \" embedded errors \"\r\n-            + \"occured in the execution of \" + iterations + \" iterations \"\r\n-            + \"of \" + threads + \" threads: [\" + title + \"]\", errors);\r\n-    }\r\n-\r\n-    /**\r\n-     * Check to see if we are in the top-level execution stack.\r\n-     */\r\n-    public boolean isRootThread() {\r\n-        return multiThreadExecuting == null;\r\n-    }\r\n-\r\n-    /**\r\n-     * A Runnable that can throw an Exception: used to test cases.\r\n-     */\r\n-    public static interface VolatileRunnable {\r\n-\r\n-        public void run() throws Exception;\r\n-    }\r\n-\r\n-    /**\r\n-     * Exception for errors caught during threading tests.\r\n-     */\r\n-    public class ThreadingException extends RuntimeException {\r\n-\r\n-        private final Throwable[] _nested;\r\n-\r\n-        public ThreadingException(String msg, Throwable nested) {\r\n-            super(msg);\r\n-            if (nested == null)\r\n-                _nested = new Throwable[0];\r\n-            else\r\n-                _nested = new Throwable[]{ nested };\r\n-        }\r\n-\r\n-        public ThreadingException(String msg, Throwable[] nested) {\r\n-            super(msg);\r\n-            if (nested == null)\r\n-                _nested = new Throwable[0];\r\n-            else\r\n-                _nested = nested;\r\n-        }\r\n-\r\n-        public void printStackTrace() {\r\n-            printStackTrace(System.out);\r\n-        }\r\n-\r\n-        public void printStackTrace(PrintStream out) {\r\n-            printStackTrace(new PrintWriter(out));\r\n-        }\r\n-\r\n-        public void printStackTrace(PrintWriter out) {\r\n-            super.printStackTrace(out);\r\n-            for (int i = 0; i < _nested.length; i++) {\r\n-                out.print(\"Nested Throwable #\" + (i + 1) + \": \");\r\n-                _nested[i].printStackTrace(out);\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Return the last method name that called this one by\r\n-     * parsing the current stack trace.\r\n-     *\r\n-     * @param exclude a method name to skip\r\n-     * @throws IllegalStateException If the calling method could not be\r\n-     * identified.\r\n-     * @author Marc Prud'hommeaux\r\n-     */\r\n-    public String callingMethod(String exclude) {\r\n-        // determine the currently executing method by\r\n-        // looking at the stack track. Hackish, but convenient.\r\n-        StringWriter sw = new StringWriter();\r\n-        new Exception().printStackTrace(new PrintWriter(sw));\r\n-        for (StringTokenizer stackTrace = new StringTokenizer(sw.toString(),\r\n-            System.getProperty(\"line.separator\"));\r\n-            stackTrace.hasMoreTokens();) {\r\n-            String line = stackTrace.nextToken().trim();\r\n-\r\n-            // not a stack trace element\r\n-            if (!(line.startsWith(\"at \")))\r\n-                continue;\r\n-\r\n-            String fullMethodName = line.substring(0, line.indexOf(\"(\"));\r\n-\r\n-            String shortMethodName = fullMethodName.substring(\r\n-                fullMethodName.lastIndexOf(\".\") + 1);\r\n-\r\n-            // skip our own methods!\r\n-            if (shortMethodName.equals(\"callingMethod\"))\r\n-                continue;\r\n-            if (exclude != null && shortMethodName.equals(exclude))\r\n-                continue;\r\n-\r\n-            return shortMethodName;\r\n-        }\r\n-\r\n-        throw new IllegalStateException(\"Could not identify calling \"\r\n-            + \"method in stack trace\");\r\n-    }\r\n-\r\n-    //////////\r\n-    // Timing\r\n-    //////////\r\n-\r\n-    /**\r\n-     * Sleep the current Thread for a random amount of time from 0-1000 ms.\r\n-     */\r\n-    public void sleepRandom() {\r\n-        sleepRandom(1000);\r\n-    }\r\n-\r\n-    /**\r\n-     * Sleep the current Thread for a random amount of time from\r\n-     * 0-<code>max</code> ms.\r\n-     */\r\n-    public void sleepRandom(int max) {\r\n-        try {\r\n-            Thread.currentThread().sleep((long) (Math.random() * max));\r\n-        } catch (InterruptedException ex) {\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Re-run this method in the current thread, timing out\r\n-     * after the specified number of seconds.\r\n-     * Usage:\r\n-     * <pre> public void timeOutOperation() { if (timeout(5 * 1000)) return;\r\n-     *  Thread.currentThread().sleep(10 * 1000); }\r\n-     * </pre>\r\n-     * <p/>\r\n-     * <p/>\r\n-     * <strong>Warning</strong> this method should be used sparingly,\r\n-     * and only when you expect that a timeout will <strong>not</strong>\r\n-     * occur. It utilized the deprecated {@link Thread#stop()} and\r\n-     * {@link Thread#interrupt} methods, which can leave monitors in an\r\n-     * invalid state. It is only used because it provides more\r\n-     * meaningful information than just seeing that the entire autobuild\r\n-     * timed out.\r\n-     *\r\n-     * @param millis the number of milliseconds we should wait.\r\n-     * @return true if we are are in the thread that requested the\r\n-     *         timeout, false if we are in the timeout thread itself.\r\n-     */\r\n-    public boolean timeout(long millis) throws Throwable {\r\n-        String methodName = callingMethod(\"timeout\");\r\n-        return timeout(millis, methodName);\r\n-    }\r\n-\r\n-    /**\r\n-     * @see #timeout(long)\r\n-     */\r\n-    public boolean timeout(long millis, String methodName) throws Throwable {\r\n-        // we are in the timing out-thread: do nothing so the\r\n-        // actual test method can run\r\n-        if (inTimeoutThread)\r\n-            return false;\r\n-\r\n-        inTimeoutThread = true;\r\n-        long endTime = System.currentTimeMillis() + millis;\r\n-\r\n-        try {\r\n-            final Method method = getClass().\r\n-                getMethod(methodName, (Class[]) null);\r\n-            final Object thz = this;\r\n-\r\n-            // spawn thread\r\n-            TimeOutThread tot = new TimeOutThread(\"TimeOutThread [\"\r\n-                + methodName + \"] (\" + millis + \"ms)\") {\r\n-                public void run() {\r\n-                    try {\r\n-                        method.invoke(thz, (Object[]) null);\r\n-                    } catch (Throwable t) {\r\n-                        throwable = t;\r\n-                    } finally {\r\n-                        completed = true;\r\n-                    }\r\n-                }\r\n-            };\r\n-\r\n-            tot.start();\r\n-\r\n-            // wait for the completion or a timeout to occur\r\n-            tot.join(millis);\r\n-\r\n-            // have we timed out? Kill the thread and throw an exception\r\n-            if (System.currentTimeMillis() >= endTime) {\r\n-                // if we are waiting on a monitor, this will give\r\n-                // us a useful stack trace.\r\n-                try {\r\n-                    tot.interrupt();\r\n-                } catch (Throwable e) {\r\n-                }\r\n-                Thread.currentThread().sleep(500);\r\n-\r\n-                // try to kill the thread\r\n-                try {\r\n-                    tot.stop();\r\n-                } catch (Throwable e) {\r\n-                }\r\n-                Thread.currentThread().sleep(500);\r\n-\r\n-                throw new OperationTimedOutException(\"Execution of \\\"\"\r\n-                    + methodName + \"\\\" timed out after \"\r\n-                    + millis + \" milliseconds\", tot.throwable);\r\n-            }\r\n-\r\n-            // throw any exceptions that may have occured\r\n-            if (tot.throwable != null)\r\n-                throw tot.throwable;\r\n-\r\n-            // I guess everything was OK\r\n-            return true;\r\n-        } finally {\r\n-            inTimeoutThread = false;\r\n-        }\r\n-    }\r\n-\r\n-    private static class TimeOutThread extends Thread {\r\n-\r\n-        public Throwable throwable = null;\r\n-        public boolean completed = false;\r\n-\r\n-        public TimeOutThread(String name) {\r\n-            super(name);\r\n-            setDaemon(true);\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Indicates that a timeout occured.\r\n-     */\r\n-    public static class OperationTimedOutException extends RuntimeException {\r\n-\r\n-        private final Throwable _err;\r\n-\r\n-        public OperationTimedOutException(String msg, Throwable throwable) {\r\n-            super(msg);\r\n-            _err = throwable;\r\n-        }\r\n-\r\n-        public void printStackTrace() {\r\n-            printStackTrace(System.out);\r\n-        }\r\n-\r\n-        public void printStackTrace(PrintStream out) {\r\n-            printStackTrace(new PrintWriter(out));\r\n-        }\r\n-\r\n-        public void printStackTrace(PrintWriter out) {\r\n-            super.printStackTrace(out);\r\n-            if (_err != null) {\r\n-                out.print(\"Nested Throwable: \");\r\n-                _err.printStackTrace(out);\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    ///////////////\r\n-    // Collections\r\n-    ///////////////\r\n-\r\n-    /**\r\n-     * Validate that the specified {@link Collection} fulfills the\r\n-     * Collection contract as specified by the Collections API.\r\n-     * <p/>\r\n-     * <strong>Note</strong>: does not validate mutable operations\r\n-     */\r\n-    public static void validateCollection(Collection collection) {\r\n-        int size = collection.size();\r\n-        int iterated = 0;\r\n-        // ensure we can walk along the iterator\r\n-        for (Iterator i = collection.iterator(); i.hasNext();) {\r\n-            iterated++;\r\n-            i.next();\r\n-        }\r\n-\r\n-        // ensure the number of values iterated is the same as the list size\r\n-        assertEquals(size, iterated);\r\n-\r\n-        // also validate the list\r\n-        if (collection instanceof List) {\r\n-            List ll = new ArrayList();\r\n-            for (int i = 0; i < 100; i++)\r\n-                ll.add(new Integer(i));\r\n-            validateList((List) ll);\r\n-            validateList((List) collection);\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Validate that the specified {@link List} fulfills the\r\n-     * List contract as specified by the Collections API.\r\n-     * <p/>\r\n-     * <strong>Note</strong>: does not validate mutable operations\r\n-     */\r\n-    public static void validateList(List list) {\r\n-        Object [] coreValues = list.toArray();\r\n-        Object [] values1 = new Object [list.size()];\r\n-        Object [] values2 = new Object [list.size()];\r\n-        Object [] values3 = new Object [list.size()];\r\n-        Object [] values4 = new Object [list.size()];\r\n-\r\n-        // fill sequential index access list\r\n-        for (int i = 0; i < list.size(); i++)\r\n-            values1[i] = list.get(i);\r\n-\r\n-        // fill sequential list\r\n-        int index = 0;\r\n-        ListIterator iter;\r\n-        for (iter = list.listIterator(0); iter.hasNext();) {\r\n-            assertEquals(index, iter.nextIndex());\r\n-            assertEquals(index, iter.previousIndex() + 1);\r\n-            values2[index] = iter.next();\r\n-            assertTrue(list.contains(values2[index]));\r\n-            index++;\r\n-        }\r\n-\r\n-        // ensure NoSuchElementException is thrown as appropriate\r\n-        try {\r\n-            iter.next();\r\n-            fail(\"next() should have resulted in a NoSuchElementException\");\r\n-        } catch (NoSuchElementException e) {\r\n-        } // as expected\r\n-\r\n-        // fill reverse sequential list\r\n-        int back = 0;\r\n-        for (iter = list.listIterator(list.size()); iter.hasPrevious();) {\r\n-            assertEquals(index, iter.previousIndex() + 1);\r\n-            assertEquals(index, iter.nextIndex());\r\n-            values3[--index] = iter.previous();\r\n-            back++;\r\n-        }\r\n-        assertEquals(list.size(), back);\r\n-\r\n-        // ensure NoSuchElementException is thrown as appropriate\r\n-        try {\r\n-            iter.previous();\r\n-            fail(\"previous() should have resulted in a \"\r\n-                + \"NoSuchElementException\");\r\n-        } catch (NoSuchElementException e) {\r\n-        } // as expected\r\n-\r\n-        // fill random access list\r\n-        List indices = new LinkedList();\r\n-        for (int i = 0; i < list.size(); i++)\r\n-            indices.add(new Integer(i));\r\n-\r\n-        for (int i = 0; i < list.size(); i++) {\r\n-            int rand = (int) (Math.random() * indices.size());\r\n-            Integer randIndex = (Integer) indices.remove(rand);\r\n-            values4[randIndex.intValue()] = list.get(randIndex.intValue());\r\n-        }\r\n-\r\n-        assertEquals(Arrays.asList(coreValues), Arrays.asList(values1));\r\n-        assertIdentical(Arrays.asList(coreValues), Arrays.asList(values1));\r\n-        assertEquals(Arrays.asList(coreValues), Arrays.asList(values2));\r\n-        assertIdentical(Arrays.asList(coreValues), Arrays.asList(values2));\r\n-        assertEquals(Arrays.asList(coreValues), Arrays.asList(values4));\r\n-        assertIdentical(Arrays.asList(coreValues), Arrays.asList(values4));\r\n-        assertEquals(Arrays.asList(coreValues), Arrays.asList(values3));\r\n-        assertIdentical(Arrays.asList(coreValues), Arrays.asList(values3));\r\n-    }\r\n-\r\n-    /**\r\n-     * Assert that the given List contain the exact same\r\n-     * elements. This is different than the normal List contract, which\r\n-     * states that list1.equals(list2) if each element e1.equals(e2).\r\n-     * This method asserts that e1 == n2.\r\n-     */\r\n-    public static void assertIdentical(List c1, List c2) {\r\n-        assertEquals(c1.size(), c2.size());\r\n-        for (Iterator i1 = c1.iterator(), i2 = c2.iterator();\r\n-            i1.hasNext() && i2.hasNext();)\r\n-            assertTrue(i1.next() == i2.next());\r\n-    }\r\n-\r\n-    /**\r\n-     * Assert that the collection parameter is already ordered\r\n-     * according to the specified comparator.\r\n-     */\r\n-    public void assertOrdered(Collection c, Comparator comp) {\r\n-        List l1 = new LinkedList(c);\r\n-        List l2 = new LinkedList(c);\r\n-        assertEquals(l1, l2);\r\n-        Collections.sort(l2, comp);\r\n-        assertEquals(l1, l2);\r\n-        Collections.sort(l1, comp);\r\n-        assertEquals(l1, l2);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.common.utils;\n+\n+import java.util.Map;\n+import java.util.Date;\n+import java.util.Collection;\n+import java.util.EnumSet;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Iterator;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.StringTokenizer;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.math.BigInteger;\n+import java.math.BigDecimal;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.beans.BeanInfo;\n+import java.beans.Introspector;\n+import java.beans.PropertyDescriptor;\n+import java.io.IOException;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.ByteArrayInputStream;\n+import java.io.ObjectInputStream;\n+import java.io.StringWriter;\n+import java.io.PrintWriter;\n+import java.io.PrintStream;\n+import java.net.URL;\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+import javax.persistence.EntityManagerFactory;\n+import javax.management.IntrospectionException;\n+\n+import org.apache.regexp.RESyntaxException;\n+import org.apache.regexp.RE;\n+import org.apache.regexp.REUtil;\n+import org.apache.openjpa.persistence.test.PersistenceTestCase;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.kernel.BrokerFactory;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.meta.ClassMetaData;\n+\n+public abstract class AbstractTestCase extends PersistenceTestCase {\n+\n+    private String persistenceXmlResource;\n+    private Map<Map,OpenJPAEntityManagerFactory> emfs =\n+        new HashMap<Map,OpenJPAEntityManagerFactory>();\n+    private OpenJPAEntityManager currentEntityManager;\n+\n+    protected enum Platform {\n+        EMPRESS,\n+        HYPERSONIC,\n+        POSTGRESQL,\n+        MYSQL,\n+        SQLSERVER,\n+        DB2,\n+        ORACLE,\n+        DERBY,\n+        INFORMIX,\n+        POINTBASE,\n+        SYBASE,\n+    }\n+\n+    protected String multiThreadExecuting = null;\n+    protected boolean inTimeoutThread = false;\n+\n+\n+    public AbstractTestCase(String name, String s) {\n+        setName(name);\n+        persistenceXmlResource = computePersistenceXmlResource(s);\n+    }\n+\n+    public void tearDown() throws Exception {\n+        try {\n+            super.tearDown();\n+        } finally {\n+            for (EntityManagerFactory emf : emfs.values()) {\n+                try {\n+                    closeEMF(emf);\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        }\n+    }\n+\n+    public AbstractTestCase() {\n+    }\n+\n+    public AbstractTestCase(String name) {\n+        setName(name);\n+    }\n+\n+    protected String computePersistenceXmlResource(String s) {\n+        String resourceName = getClass().getPackage().getName()\n+            .replaceAll(\"\\\\.\", \"/\");\n+        resourceName += \"/common/apps/META-INF/persistence.xml\";\n+        URL resource = getClass().getClassLoader().getResource(resourceName);\n+        if (resource != null)\n+            return resourceName;\n+        return defaultPersistenceXmlResource();\n+    }\n+\n+    protected String defaultPersistenceXmlResource() {\n+        return \"org/apache/openjpa/persistence/\" +\n+            \"common/apps/META-INF/persistence.xml\";\n+    }\n+\n+    protected OpenJPAStateManager getStateManager(Object obj,\n+        EntityManager em) {\n+        return JPAFacadeHelper.toBroker(em).getStateManager(obj);\n+    }\n+\n+    protected int deleteAll(Class type, EntityManager em) {\n+        ClassMetaData meta = JPAFacadeHelper.getMetaData(em, type);\n+        if (meta != null)\n+            return em.createQuery(\"delete from \" + meta.getTypeAlias())\n+                .executeUpdate();\n+        else\n+            return -1;\n+    }\n+\n+    protected int deleteAll(Class... types) {\n+        EntityManager em = getEmf().createEntityManager();\n+        em.getTransaction().begin();\n+        int ret = 0;\n+        for (Class type : types)\n+            ret += deleteAll(type, em);\n+        em.getTransaction().commit();\n+        em.close();\n+        return ret;\n+    }\n+\n+    protected OpenJPAEntityManagerFactory getEmf(Map map) {\n+        if (map == null)\n+            map = new HashMap();\n+        Collection keys = new ArrayList();\n+        for (Object key : map.keySet())\n+            if (key.toString().startsWith(\"kodo\"))\n+                keys.add(key);\n+        if (keys.size() > 0)\n+            throw new IllegalArgumentException(\n+                \"kodo-prefixed properties must be converted to openjpa. \" +\n+                    \"Properties: \" + keys);\n+\n+        addProperties(map);\n+\n+        OpenJPAEntityManagerFactory emf = emfs.get(map);\n+        if (emf == null) {\n+            emf = OpenJPAPersistence.createEntityManagerFactory(\n+                \"TestConv\", persistenceXmlResource, map);\n+            emfs.put(map, emf);\n+        }\n+        return emf;\n+    }\n+\n+    protected void addProperties(Map map) {\n+        if (!map.containsKey(\"openjpa.jdbc.SynchronizeMappings\"))\n+            map.put(\"openjpa.jdbc.SynchronizeMappings\",\n+                \"buildSchema(ForeignKeys=true,\" +\n+                    \"SchemaAction='add,deleteTableContents')\");\n+    }\n+\n+    protected OpenJPAEntityManagerFactory getEmf() {\n+        Map m = new HashMap();\n+        return getEmf(m);\n+    }\n+\n+    protected BrokerFactory getBrokerFactory() {\n+        return JPAFacadeHelper.toBrokerFactory(getEmf());\n+    }\n+\n+    protected BrokerFactory getBrokerFactory(String[] args) {\n+        if (args.length % 2 != 0)\n+            throw new IllegalArgumentException(\n+                \"odd number of elements in arg array\");\n+        Map map = new HashMap();\n+        for (int i = 0; i < args.length; i = i + 2)\n+            map.put(args[i], args[i+1]);\n+        return JPAFacadeHelper.toBrokerFactory(getEmf(map));\n+    }\n+\n+    protected OpenJPAEntityManager currentEntityManager() {\n+        if (currentEntityManager == null || !currentEntityManager.isOpen())\n+            currentEntityManager = getEmf().createEntityManager();\n+        return currentEntityManager;\n+    }\n+\n+    protected void startTx(EntityManager em) {\n+        em.getTransaction().begin();\n+    }\n+\n+    protected boolean isActiveTx(EntityManager em) {\n+        return em.getTransaction().isActive();\n+    }\n+\n+    protected void endTx(EntityManager em) {\n+        if (em.getTransaction().isActive()) {\n+            if (em.getTransaction().getRollbackOnly())\n+                em.getTransaction().rollback();\n+            else\n+                em.getTransaction().commit();\n+        }\n+    }\n+\n+    protected void rollbackTx(EntityManager em) {\n+        em.getTransaction().rollback();\n+    }\n+\n+    protected void endEm(EntityManager em) {\n+        if (em.isOpen())\n+            em.close();\n+        if (em == currentEntityManager)\n+        currentEntityManager = null;\n+    }\n+\n+    protected Object getStackTrace(Throwable t) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    protected OpenJPAConfiguration getConfiguration() {\n+        return getEmf().getConfiguration();\n+    }\n+\n+    protected Platform getCurrentPlatform() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    protected void bug(int id, String s) {\n+        bug(id, null, s);\n+    }\n+    \n+    protected void bug(Platform platform, int id, Throwable t, String s) {\n+        bug(EnumSet.of(platform), id, t, s);\n+    }\n+\n+    protected void bug(EnumSet<Platform> platforms, int id, Throwable t, String s) {\n+        if (platforms.contains(getCurrentPlatform()))\n+            bug(id, t, s);\n+        else\n+            fail(String.format(\n+                \"bug %s is unexpectedly occurring on platform %s\",\n+                id, getCurrentPlatform()));\n+    }\n+\n+    protected void bug(int id, Throwable t, String s) {\n+        if (t != null) {\n+            if (t instanceof RuntimeException)\n+                throw (RuntimeException) t;\n+            else\n+                throw new RuntimeException(t);\n+        } else {\n+            fail(s);\n+        }\n+    }\n+\n+    /**\n+     * Support method to get a random Integer for testing.\n+     */\n+    public static Integer randomInt() {\n+        return new Integer((int) (Math.random() * Integer.MAX_VALUE));\n+    }\n+\n+    /**\n+     * Support method to get a random Character for testing.\n+     */\n+    public static Character randomChar() {\n+        char [] TEST_CHAR_ARRAY = new char []{\n+            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\n+            'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\n+            's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '1',\n+            '2', '3', '4', '5', '6', '7', '8', '9' };\n+\n+        return new Character(TEST_CHAR_ARRAY[\n+                (int) (Math.random() * TEST_CHAR_ARRAY.length)]);\n+    }\n+\n+    /**\n+     * Support method to get a random Long for testing.\n+     */\n+    public static Long randomLong() {\n+        return new Long((long) (Math.random() * Long.MAX_VALUE));\n+    }\n+\n+    /**\n+     * Support method to get a random Short for testing.\n+     */\n+    public static Short randomShort() {\n+        return new Short((short) (Math.random() * Short.MAX_VALUE));\n+    }\n+\n+    /**\n+     * Support method to get a random Double for testing.\n+     */\n+    public static Double randomDouble() {\n+        return new Double((double) (Math.round(Math.random() * 5000d)) / 1000d);\n+    }\n+\n+    /**\n+     * Support method to get a random Float for testing.\n+     */\n+    public static Float randomFloat() {\n+        return new Float((float) (Math.round(Math.random() * 5000f)) / 1000f);\n+    }\n+\n+    /**\n+     * Support method to get a random Byte for testing.\n+     */\n+    public static Byte randomByte() {\n+        return new Byte((byte) (Math.random() * Byte.MAX_VALUE));\n+    }\n+\n+    /**\n+     * Support method to get a random Boolean for testing.\n+     */\n+    public static Boolean randomBoolean() {\n+        return new Boolean(Math.random() > 0.5 ? true : false);\n+    }\n+\n+    /**\n+     * Support method to get a random Date for testing.\n+     */\n+    public static Date randomDate() {\n+        long millis = (long) (Math.random() * System.currentTimeMillis());\n+\n+        // round millis to the nearest 1000: this is because some\n+        // databases do not store the milliseconds correctly (e.g., MySQL).\n+        // This is a really a bug we should fix. FC #27.\n+        millis -= (millis % 1000);\n+\n+        return new Date(millis);\n+    }\n+\n+    /**\n+     * Support method to get a random String for testing.\n+     */\n+    public static String randomString() {\n+        // default to a small string, in case column sizes are\n+        // limited (such as with a string primary key)\n+        return randomString(50);\n+    }\n+\n+    /**\n+     * Support method to get a random String for testing.\n+     */\n+    public static String randomString(int len) {\n+        StringBuffer buf = new StringBuffer();\n+        for (int i = 0; i < (int) (Math.random() * len) + 1; i++)\n+            buf.append(randomChar());\n+        return buf.toString();\n+    }\n+\n+    /**\n+     * Support method to get a random clob for testing.\n+     */\n+    public static String randomClob() {\n+        StringBuffer sbuf = new StringBuffer();\n+        while (sbuf.length() < (5 * 1024)) // at least 5K\n+        {\n+            sbuf.append(randomString(1024));\n+        }\n+\n+        return sbuf.toString();\n+    }\n+\n+    /**\n+     * Support method to get a random BigInteger for testing.\n+     */\n+    public static BigInteger randomBigInteger() {\n+        // too many of our test databases don't support bigints > MAX_LONG:\n+        // I don't like it, but for now, let's only test below MAX_LONG\n+        BigInteger lng = new BigInteger(\n+                ((long) (Math.random() * Long.MAX_VALUE)) + \"\");\n+\n+        BigInteger multiplier = new BigInteger(\"1\");\n+        // (1 + (int)(Math.random () * 10000)) + \"\");\n+        if (Math.random() < 0.5)\n+            multiplier = multiplier.multiply(new BigInteger(\"-1\"));\n+\n+        return lng.multiply(multiplier);\n+    }\n+\n+    /**\n+     * Support method to get a random BigDecimal for testing.\n+     */\n+    public static BigDecimal randomBigDecimal() {\n+        BigInteger start = randomBigInteger();\n+        String str = start.toString();\n+        // truncate off the last 8 digits: we still get some\n+        // overflows with lame databases.\n+        for (int i = 0; i < 8; i++)\n+            if (str.length() > 2)\n+                str = str.substring(0, str.length() - 1);\n+        start = new BigInteger(str);\n+\n+        String val = start + \".\"\n+                + ((int) (Math.random() * 10))\n+                + ((int) (Math.random() * 10))\n+                + ((int) (Math.random() * 10))\n+                + ((int) (Math.random() * 10))\n+                + ((int) (Math.random() * 10))\n+                + ((int) (Math.random() * 10))\n+                + ((int) (Math.random() * 10))\n+                + ((int) (Math.random() * 10))\n+                + ((int) (Math.random() * 10))\n+                + ((int) (Math.random() * 10));\n+\n+        return new BigDecimal(val);\n+    }\n+\n+    /**\n+     * Support method to get a random blob for testing.\n+     */\n+    public static byte[] randomBlob() {\n+        // up to 100K blob\n+        byte [] blob = new byte [(int) (Math.random() * 1024 * 100)];\n+        for (int i = 0; i < blob.length; i++)\n+            blob[i] = randomByte().byteValue();\n+\n+        return blob;\n+    }\n+\n+    /**\n+     * Invoke setters for pimitives and primitive wrappers on the\n+     * specified object.\n+     */\n+    public static Object randomizeBean(Object bean)\n+    throws IntrospectionException, IllegalAccessException,\n+        InvocationTargetException, java.beans.IntrospectionException {\n+        BeanInfo info = Introspector.getBeanInfo(bean.getClass());\n+        PropertyDescriptor[] props = info.getPropertyDescriptors();\n+        for (int i = 0; i < props.length; i++) {\n+            Method write = props[i].getWriteMethod();\n+            if (write == null)\n+                continue;\n+\n+            Class [] params = write.getParameterTypes();\n+            if (params == null || params.length != 1)\n+                continue;\n+\n+            Class paramType = params[0];\n+            Object arg = null;\n+\n+            if (paramType == boolean.class || paramType == Boolean.class)\n+                arg = randomBoolean();\n+            else if (paramType == byte.class || paramType == Byte.class)\n+                arg = randomByte();\n+            else if (paramType == char.class || paramType == Character.class)\n+                arg = randomChar();\n+            else if (paramType == short.class || paramType == Short.class)\n+                arg = randomShort();\n+            else if (paramType == int.class || paramType == Integer.class)\n+                arg = randomInt();\n+            else if (paramType == long.class || paramType == Long.class)\n+                arg = randomLong();\n+            else if (paramType == double.class || paramType == Double.class)\n+                arg = randomDouble();\n+            else if (paramType == float.class || paramType == Float.class)\n+                arg = randomFloat();\n+            else if (paramType == String.class)\n+                arg = randomString();\n+            else if (paramType == BigInteger.class)\n+                arg = randomBigInteger();\n+            else if (paramType == BigDecimal.class)\n+                arg = randomBigDecimal();\n+            else if (paramType == Date.class)\n+                arg = randomDate();\n+\n+            if (arg != null)\n+                write.invoke(bean, new Object []{ arg });\n+        }\n+\n+        return bean;\n+    }\n+\n+    protected void assertSize(int size, Collection c) {\n+        assertEquals(size, c.size());\n+    }\n+\n+    protected void assertSize(int size, Query q) {\n+        assertEquals(size, q.getResultList().size());\n+    }\n+\n+    /**\n+     * Serialize and deserialize the object.\n+     *\n+     * @param validateEquality make sure the hashCode and equals\n+     * methods hold true\n+     */\n+    public static Object roundtrip(Object orig, boolean validateEquality)\n+        throws IOException, ClassNotFoundException {\n+        assertNotNull(orig);\n+\n+        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream(bout);\n+        out.writeObject(orig);\n+        ByteArrayInputStream bin = new ByteArrayInputStream(\n+            bout.toByteArray());\n+        ObjectInputStream in = new ObjectInputStream(bin);\n+        Object result = in.readObject();\n+\n+        if (validateEquality) {\n+            assertEquals(orig.hashCode(), result.hashCode());\n+            assertEquals(orig, result);\n+        }\n+\n+        return result;\n+    }\n+\n+    /**\n+     * @return true if the specified input matches the regular expression regex.\n+     */\n+    public static boolean matches(String regex, String input)\n+        throws RESyntaxException {\n+        RE re = REUtil.createRE(regex);\n+        return re.match(input);\n+    }\n+\n+    public static void assertMatches(String regex, String input) {\n+        try {\n+            if (!(matches(regex, input)))\n+                fail(\"Expected regular expression: <\" + regex + \">\"\n+                    + \" did not match: <\" + input + \">\");\n+        } catch (RESyntaxException e) {\n+            throw new IllegalArgumentException(e.toString());\n+        }\n+    }\n+\n+    public static void assertNotMatches(String regex, String input) {\n+        try {\n+            if (matches(regex, input))\n+                fail(\"Regular expression: <\" + regex + \">\"\n+                    + \" should not match: <\" + input + \">\");\n+        } catch (RESyntaxException e) {\n+            throw new IllegalArgumentException(e.toString());\n+        }\n+    }\n+\n+    /**\n+     * Check the list if strings and return the ones that match\n+     * the specified match.\n+     */\n+    public static List matches(String regex, Collection input)\n+        throws RESyntaxException {\n+        List matches = new ArrayList();\n+        for (Iterator i = input.iterator(); i.hasNext();) {\n+            String check = (String) i.next();\n+            if (matches(regex, check))\n+                matches.add(check);\n+        }\n+\n+        return matches;\n+    }\n+\n+    /**\n+     * Assert that the specified collection of Strings contains at least\n+     * one string that matches the specified regular expression.\n+     */\n+    public static void assertMatches(String regex, Collection input) {\n+        try {\n+            if (matches(regex, input).size() == 0)\n+                fail(\"The specified list of size \" + input.size()\n+                    + \" did not contain any strings that match the\"\n+                    + \" specified regular expression(\\\"\" + regex + \"\\\")\");\n+        } catch (RESyntaxException e) {\n+            throw new IllegalArgumentException(e.toString());\n+        }\n+    }\n+\n+    /**\n+     * Assert that the specified collection of Strings does not match\n+     * the specified regular expression.\n+     */\n+    public static void assertNotMatches(String regex, Collection input) {\n+        try {\n+            List matches;\n+\n+            if (((matches = matches(regex, input))).size() > 0)\n+                fail(\"The specified list of size \" + input.size()\n+                    + \" did contain one or more strings that matchs the\"\n+                    + \" specified illegal regular expression\"\n+                    + \" (\\\"\" + regex + \"\\\").\"\n+                    + \" First example of a matching message is: \"\n+                    + matches.iterator().next());\n+        } catch (RESyntaxException e) {\n+            throw new IllegalArgumentException(e.toString());\n+        }\n+    }\n+\n+    protected Log getLog() {\n+        return getConfiguration().getLog(\"Tests\");\n+    }\n+\n+    ///////////////////\n+    // Multi threading\n+    ///////////////////\n+\n+    /**\n+     * Re-execute the invoking method a random number of times\n+     * in a random number of Threads.\n+     */\n+    public void mttest() throws ThreadingException {\n+        // 6 iterations in 8 threads is a good trade-off between\n+        // tests taking way too long and having a decent chance of\n+        // identifying MT problems.\n+        int iterations = 6;\n+        int threads = 8;\n+\n+        mttest(threads, iterations);\n+    }\n+\n+    /**\n+     * Execute the calling method <code>iterations</code>\n+     * times in <code>threads</code> Threads.\n+     */\n+    public void mttest(int threads, int iterations) {\n+        mttest(0, threads, iterations);\n+    }\n+\n+    public void mttest(int serialCount, int threads, int iterations)\n+        throws ThreadingException {\n+        String methodName = callingMethod(\"mttest\");\n+        mttest(serialCount, threads, iterations, methodName, new Object [0]);\n+    }\n+\n+    /**\n+     * Execute a test method in multiple threads.\n+     *\n+     * @param threads the number of Threads to run in\n+     * @param iterations the number of times the method should\n+     * be execute in a single Thread\n+     * @param method the name of the method to execute\n+     * @param args the arguments to pass to the method\n+     * @throws ThreadingException if an errors occur in\n+     * any of the Threads. The actual exceptions\n+     * will be embedded in the exception. Note that\n+     * this means that assert() failures will be\n+     * treated as errors rather than warnings.\n+     * @author Marc Prud'hommeaux\n+     */\n+    public void mttest(int threads, int iterations, final String method,\n+        final Object [] args) throws ThreadingException {\n+        mttest(0, threads, iterations, method, args);\n+    }\n+\n+    public void mttest(int serialCount,\n+        int threads, int iterations, final String method, final Object [] args)\n+        throws ThreadingException {\n+        if (multiThreadExecuting != null && multiThreadExecuting.equals(method))\n+        {\n+            // we are currently executing in multi-threaded mode:\n+            // don't deadlock!\n+            return;\n+        }\n+\n+        multiThreadExecuting = method;\n+\n+        try {\n+            Class [] paramClasses = new Class [args.length];\n+            for (int i = 0; i < paramClasses.length; i++)\n+                paramClasses[i] = args[i].getClass();\n+\n+            final Method meth;\n+\n+            try {\n+                meth = getClass().getMethod(method, paramClasses);\n+            } catch (NoSuchMethodException nsme) {\n+                throw new ThreadingException(nsme.toString(), nsme);\n+            }\n+\n+            final Object thiz = this;\n+\n+            mttest(\"reflection invocation: (\" + method + \")\",\n+                serialCount, threads, iterations, new VolatileRunnable() {\n+                public void run() throws Exception {\n+                    meth.invoke(thiz, args);\n+                }\n+            });\n+        } finally {\n+            multiThreadExecuting = null;\n+        }\n+    }\n+\n+    public void mttest(String title, final int threads, final int iterations,\n+        final VolatileRunnable runner) throws ThreadingException {\n+        mttest(title, 0, threads, iterations, runner);\n+    }\n+\n+    /**\n+     * Execute a test method in multiple threads.\n+     *\n+     * @param title a description of the test, for inclusion in the\n+     * error message\n+     * @param serialCount the number of times to run the method\n+     * serially before spawning threads.\n+     * @param threads the number of Threads to run in\n+     * @param iterations the number of times the method should\n+     * @param runner the VolatileRunnable that will execute\n+     * the actual test from within the Thread.\n+     * @throws ThreadingException if an errors occur in\n+     * any of the Threads. The actual exceptions\n+     * will be embedded in the exception. Note that\n+     * this means that assert() failures will be\n+     * treated as errors rather than warnings.\n+     * @author Marc Prud'hommeaux be execute in a single Thread\n+     * @author Marc Prud'hommeaux\n+     */\n+    public void mttest(String title, final int serialCount,\n+        final int threads, final int iterations, final VolatileRunnable runner)\n+        throws ThreadingException {\n+        final List exceptions = Collections.synchronizedList(new LinkedList());\n+\n+        Thread [] runners = new Thread [threads];\n+\n+        final long startMillis = System.currentTimeMillis() + 1000;\n+\n+        for (int i = 1; i <= threads; i++) {\n+            final int thisThread = i;\n+\n+            runners[i - 1] =\n+                new Thread(title + \" [\" + i + \" of \" + threads + \"]\") {\n+                    public void run() {\n+                        // do our best to have all threads start at the exact\n+                        // same time. This is imperfect, but the closer we\n+                        // get to everyone starting at the same time, the\n+                        // better chance we have for identifying MT problems.\n+                        while (System.currentTimeMillis() < startMillis)\n+                            yield();\n+\n+                        int thisIteration = 1;\n+                        try {\n+                            for (; thisIteration <= iterations; thisIteration++)\n+                            {\n+                                // go go go!\n+                                runner.run();\n+                            }\n+                        } catch (Throwable error) {\n+                            synchronized (exceptions) {\n+                                // embed the exception into something that gives\n+                                // us some more information about the threading\n+                                // environment\n+                                exceptions.add(new ThreadingException(\"thread=\"\n+                                    + this.toString()\n+                                    + \";threadNum=\" + thisThread\n+                                    + \";maxThreads=\" + threads\n+                                    + \";iteration=\" + thisIteration\n+                                    + \";maxIterations=\" + iterations, error));\n+                            }\n+                        }\n+                    }\n+                };\n+        }\n+\n+        // start the serial tests(does not spawn the threads)\n+        for (int i = 0; i < serialCount; i++) {\n+            runners[0].run();\n+        }\n+\n+        // start the multithreaded\n+        for (int i = 0; i < threads; i++) {\n+            runners[i].start();\n+        }\n+\n+        // wait for them all to complete\n+        for (int i = 0; i < threads; i++) {\n+            try {\n+                runners[i].join();\n+            } catch (InterruptedException e) {\n+            }\n+        }\n+\n+        if (exceptions.size() == 0)\n+            return; // sweeeeeeeet: no errors\n+\n+        // embed all the exceptions that were throws into a\n+        // ThreadingException\n+        Throwable [] errors = (Throwable []) exceptions.toArray(\n+            new Throwable [0]);\n+        throw new ThreadingException(\"The \"\n+            + errors.length + \" embedded errors \"\n+            + \"occured in the execution of \" + iterations + \" iterations \"\n+            + \"of \" + threads + \" threads: [\" + title + \"]\", errors);\n+    }\n+\n+    /**\n+     * Check to see if we are in the top-level execution stack.\n+     */\n+    public boolean isRootThread() {\n+        return multiThreadExecuting == null;\n+    }\n+\n+    /**\n+     * A Runnable that can throw an Exception: used to test cases.\n+     */\n+    public static interface VolatileRunnable {\n+\n+        public void run() throws Exception;\n+    }\n+\n+    /**\n+     * Exception for errors caught during threading tests.\n+     */\n+    public class ThreadingException extends RuntimeException {\n+\n+        private final Throwable[] _nested;\n+\n+        public ThreadingException(String msg, Throwable nested) {\n+            super(msg);\n+            if (nested == null)\n+                _nested = new Throwable[0];\n+            else\n+                _nested = new Throwable[]{ nested };\n+        }\n+\n+        public ThreadingException(String msg, Throwable[] nested) {\n+            super(msg);\n+            if (nested == null)\n+                _nested = new Throwable[0];\n+            else\n+                _nested = nested;\n+        }\n+\n+        public void printStackTrace() {\n+            printStackTrace(System.out);\n+        }\n+\n+        public void printStackTrace(PrintStream out) {\n+            printStackTrace(new PrintWriter(out));\n+        }\n+\n+        public void printStackTrace(PrintWriter out) {\n+            super.printStackTrace(out);\n+            for (int i = 0; i < _nested.length; i++) {\n+                out.print(\"Nested Throwable #\" + (i + 1) + \": \");\n+                _nested[i].printStackTrace(out);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Return the last method name that called this one by\n+     * parsing the current stack trace.\n+     *\n+     * @param exclude a method name to skip\n+     * @throws IllegalStateException If the calling method could not be\n+     * identified.\n+     * @author Marc Prud'hommeaux\n+     */\n+    public String callingMethod(String exclude) {\n+        // determine the currently executing method by\n+        // looking at the stack track. Hackish, but convenient.\n+        StringWriter sw = new StringWriter();\n+        new Exception().printStackTrace(new PrintWriter(sw));\n+        for (StringTokenizer stackTrace = new StringTokenizer(sw.toString(),\n+            System.getProperty(\"line.separator\"));\n+            stackTrace.hasMoreTokens();) {\n+            String line = stackTrace.nextToken().trim();\n+\n+            // not a stack trace element\n+            if (!(line.startsWith(\"at \")))\n+                continue;\n+\n+            String fullMethodName = line.substring(0, line.indexOf(\"(\"));\n+\n+            String shortMethodName = fullMethodName.substring(\n+                fullMethodName.lastIndexOf(\".\") + 1);\n+\n+            // skip our own methods!\n+            if (shortMethodName.equals(\"callingMethod\"))\n+                continue;\n+            if (exclude != null && shortMethodName.equals(exclude))\n+                continue;\n+\n+            return shortMethodName;\n+        }\n+\n+        throw new IllegalStateException(\"Could not identify calling \"\n+            + \"method in stack trace\");\n+    }\n+\n+    //////////\n+    // Timing\n+    //////////\n+\n+    /**\n+     * Sleep the current Thread for a random amount of time from 0-1000 ms.\n+     */\n+    public void sleepRandom() {\n+        sleepRandom(1000);\n+    }\n+\n+    /**\n+     * Sleep the current Thread for a random amount of time from\n+     * 0-<code>max</code> ms.\n+     */\n+    public void sleepRandom(int max) {\n+        try {\n+            Thread.currentThread().sleep((long) (Math.random() * max));\n+        } catch (InterruptedException ex) {\n+        }\n+    }\n+\n+    /**\n+     * Re-run this method in the current thread, timing out\n+     * after the specified number of seconds.\n+     * Usage:\n+     * <pre> public void timeOutOperation() { if (timeout(5 * 1000)) return;\n+     *  Thread.currentThread().sleep(10 * 1000); }\n+     * </pre>\n+     * <p/>\n+     * <p/>\n+     * <strong>Warning</strong> this method should be used sparingly,\n+     * and only when you expect that a timeout will <strong>not</strong>\n+     * occur. It utilized the deprecated {@link Thread#stop()} and\n+     * {@link Thread#interrupt} methods, which can leave monitors in an\n+     * invalid state. It is only used because it provides more\n+     * meaningful information than just seeing that the entire autobuild\n+     * timed out.\n+     *\n+     * @param millis the number of milliseconds we should wait.\n+     * @return true if we are are in the thread that requested the\n+     *         timeout, false if we are in the timeout thread itself.\n+     */\n+    public boolean timeout(long millis) throws Throwable {\n+        String methodName = callingMethod(\"timeout\");\n+        return timeout(millis, methodName);\n+    }\n+\n+    /**\n+     * @see #timeout(long)\n+     */\n+    public boolean timeout(long millis, String methodName) throws Throwable {\n+        // we are in the timing out-thread: do nothing so the\n+        // actual test method can run\n+        if (inTimeoutThread)\n+            return false;\n+\n+        inTimeoutThread = true;\n+        long endTime = System.currentTimeMillis() + millis;\n+\n+        try {\n+            final Method method = getClass().\n+                getMethod(methodName, (Class[]) null);\n+            final Object thz = this;\n+\n+            // spawn thread\n+            TimeOutThread tot = new TimeOutThread(\"TimeOutThread [\"\n+                + methodName + \"] (\" + millis + \"ms)\") {\n+                public void run() {\n+                    try {\n+                        method.invoke(thz, (Object[]) null);\n+                    } catch (Throwable t) {\n+                        throwable = t;\n+                    } finally {\n+                        completed = true;\n+                    }\n+                }\n+            };\n+\n+            tot.start();\n+\n+            // wait for the completion or a timeout to occur\n+            tot.join(millis);\n+\n+            // have we timed out? Kill the thread and throw an exception\n+            if (System.currentTimeMillis() >= endTime) {\n+                // if we are waiting on a monitor, this will give\n+                // us a useful stack trace.\n+                try {\n+                    tot.interrupt();\n+                } catch (Throwable e) {\n+                }\n+                Thread.currentThread().sleep(500);\n+\n+                // try to kill the thread\n+                try {\n+                    tot.stop();\n+                } catch (Throwable e) {\n+                }\n+                Thread.currentThread().sleep(500);\n+\n+                throw new OperationTimedOutException(\"Execution of \\\"\"\n+                    + methodName + \"\\\" timed out after \"\n+                    + millis + \" milliseconds\", tot.throwable);\n+            }\n+\n+            // throw any exceptions that may have occured\n+            if (tot.throwable != null)\n+                throw tot.throwable;\n+\n+            // I guess everything was OK\n+            return true;\n+        } finally {\n+            inTimeoutThread = false;\n+        }\n+    }\n+\n+    private static class TimeOutThread extends Thread {\n+\n+        public Throwable throwable = null;\n+        public boolean completed = false;\n+\n+        public TimeOutThread(String name) {\n+            super(name);\n+            setDaemon(true);\n+        }\n+    }\n+\n+    /**\n+     * Indicates that a timeout occured.\n+     */\n+    public static class OperationTimedOutException extends RuntimeException {\n+\n+        private final Throwable _err;\n+\n+        public OperationTimedOutException(String msg, Throwable throwable) {\n+            super(msg);\n+            _err = throwable;\n+        }\n+\n+        public void printStackTrace() {\n+            printStackTrace(System.out);\n+        }\n+\n+        public void printStackTrace(PrintStream out) {\n+            printStackTrace(new PrintWriter(out));\n+        }\n+\n+        public void printStackTrace(PrintWriter out) {\n+            super.printStackTrace(out);\n+            if (_err != null) {\n+                out.print(\"Nested Throwable: \");\n+                _err.printStackTrace(out);\n+            }\n+        }\n+    }\n+\n+    ///////////////\n+    // Collections\n+    ///////////////\n+\n+    /**\n+     * Validate that the specified {@link Collection} fulfills the\n+     * Collection contract as specified by the Collections API.\n+     * <p/>\n+     * <strong>Note</strong>: does not validate mutable operations\n+     */\n+    public static void validateCollection(Collection collection) {\n+        int size = collection.size();\n+        int iterated = 0;\n+        // ensure we can walk along the iterator\n+        for (Iterator i = collection.iterator(); i.hasNext();) {\n+            iterated++;\n+            i.next();\n+        }\n+\n+        // ensure the number of values iterated is the same as the list size\n+        assertEquals(size, iterated);\n+\n+        // also validate the list\n+        if (collection instanceof List) {\n+            List ll = new ArrayList();\n+            for (int i = 0; i < 100; i++)\n+                ll.add(new Integer(i));\n+            validateList((List) ll);\n+            validateList((List) collection);\n+        }\n+    }\n+\n+    /**\n+     * Validate that the specified {@link List} fulfills the\n+     * List contract as specified by the Collections API.\n+     * <p/>\n+     * <strong>Note</strong>: does not validate mutable operations\n+     */\n+    public static void validateList(List list) {\n+        Object [] coreValues = list.toArray();\n+        Object [] values1 = new Object [list.size()];\n+        Object [] values2 = new Object [list.size()];\n+        Object [] values3 = new Object [list.size()];\n+        Object [] values4 = new Object [list.size()];\n+\n+        // fill sequential index access list\n+        for (int i = 0; i < list.size(); i++)\n+            values1[i] = list.get(i);\n+\n+        // fill sequential list\n+        int index = 0;\n+        ListIterator iter;\n+        for (iter = list.listIterator(0); iter.hasNext();) {\n+            assertEquals(index, iter.nextIndex());\n+            assertEquals(index, iter.previousIndex() + 1);\n+            values2[index] = iter.next();\n+            assertTrue(list.contains(values2[index]));\n+            index++;\n+        }\n+\n+        // ensure NoSuchElementException is thrown as appropriate\n+        try {\n+            iter.next();\n+            fail(\"next() should have resulted in a NoSuchElementException\");\n+        } catch (NoSuchElementException e) {\n+        } // as expected\n+\n+        // fill reverse sequential list\n+        int back = 0;\n+        for (iter = list.listIterator(list.size()); iter.hasPrevious();) {\n+            assertEquals(index, iter.previousIndex() + 1);\n+            assertEquals(index, iter.nextIndex());\n+            values3[--index] = iter.previous();\n+            back++;\n+        }\n+        assertEquals(list.size(), back);\n+\n+        // ensure NoSuchElementException is thrown as appropriate\n+        try {\n+            iter.previous();\n+            fail(\"previous() should have resulted in a \"\n+                + \"NoSuchElementException\");\n+        } catch (NoSuchElementException e) {\n+        } // as expected\n+\n+        // fill random access list\n+        List indices = new LinkedList();\n+        for (int i = 0; i < list.size(); i++)\n+            indices.add(new Integer(i));\n+\n+        for (int i = 0; i < list.size(); i++) {\n+            int rand = (int) (Math.random() * indices.size());\n+            Integer randIndex = (Integer) indices.remove(rand);\n+            values4[randIndex.intValue()] = list.get(randIndex.intValue());\n+        }\n+\n+        assertEquals(Arrays.asList(coreValues), Arrays.asList(values1));\n+        assertIdentical(Arrays.asList(coreValues), Arrays.asList(values1));\n+        assertEquals(Arrays.asList(coreValues), Arrays.asList(values2));\n+        assertIdentical(Arrays.asList(coreValues), Arrays.asList(values2));\n+        assertEquals(Arrays.asList(coreValues), Arrays.asList(values4));\n+        assertIdentical(Arrays.asList(coreValues), Arrays.asList(values4));\n+        assertEquals(Arrays.asList(coreValues), Arrays.asList(values3));\n+        assertIdentical(Arrays.asList(coreValues), Arrays.asList(values3));\n+    }\n+\n+    /**\n+     * Assert that the given List contain the exact same\n+     * elements. This is different than the normal List contract, which\n+     * states that list1.equals(list2) if each element e1.equals(e2).\n+     * This method asserts that e1 == n2.\n+     */\n+    public static void assertIdentical(List c1, List c2) {\n+        assertEquals(c1.size(), c2.size());\n+        for (Iterator i1 = c1.iterator(), i2 = c2.iterator();\n+            i1.hasNext() && i2.hasNext();)\n+            assertTrue(i1.next() == i2.next());\n+    }\n+\n+    /**\n+     * Assert that the collection parameter is already ordered\n+     * according to the specified comparator.\n+     */\n+    public void assertOrdered(Collection c, Comparator comp) {\n+        List l1 = new LinkedList(c);\n+        List l2 = new LinkedList(c);\n+        assertEquals(l1, l2);\n+        Collections.sort(l2, comp);\n+        assertEquals(l1, l2);\n+        Collections.sort(l1, comp);\n+        assertEquals(l1, l2);\n+    }\n+}"},{"sha":"11be3beeae39e4a1de9f7172f27cf124d7154e74","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/BufferedLogFactory.java","status":"modified","additions":101,"deletions":101,"changes":202,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/BufferedLogFactory.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/BufferedLogFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/BufferedLogFactory.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,101 +1,101 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.common.utils;\r\n-\r\n-import java.util.*;\r\n-\r\n-import org.apache.openjpa.lib.log.*;\r\n-\r\n-/**\r\n- * Simple default log implementation to test whether certain messages\r\n- * are logged or not.\r\n- *\r\n- * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n- */\r\n-public class BufferedLogFactory\r\n-    extends LogFactoryImpl {\r\n-\r\n-    private int bufferSize = 10000;\r\n-    private List buffer = new ArrayList();\r\n-    private List disallowedMessages = new LinkedList();\r\n-\r\n-    protected LogImpl newLogImpl() {\r\n-        return new BufferedLog();\r\n-    }\r\n-\r\n-    public List getBuffer() {\r\n-        return Collections.unmodifiableList(buffer);\r\n-    }\r\n-\r\n-    public void clear() {\r\n-        buffer.clear();\r\n-    }\r\n-\r\n-    public void clearDisallowedMessages() {\r\n-        disallowedMessages.clear();\r\n-    }\r\n-\r\n-    public void addDisallowedMessage(String regexp) {\r\n-        disallowedMessages.add(regexp);\r\n-    }\r\n-\r\n-    public boolean removeDisallowedMessage(String regexp) {\r\n-        return disallowedMessages.remove(regexp);\r\n-    }\r\n-\r\n-    public List getDisallowedMessages() {\r\n-        return Collections.unmodifiableList(disallowedMessages);\r\n-    }\r\n-\r\n-    public void assertLogMessage(String regex) {\r\n-    \tAbstractTestCase.assertMatches(regex, getBuffer());\r\n-    }\r\n-\r\n-    public void assertNoLogMessage(String regex) {\r\n-    \tAbstractTestCase.assertNotMatches(regex, getBuffer());\r\n-    }\r\n-\r\n-    public void setBufferSize(int bufferSize) {\r\n-        this.bufferSize = bufferSize;\r\n-    }\r\n-\r\n-    public int getBufferSize() {\r\n-        return this.bufferSize;\r\n-    }\r\n-\r\n-    public class BufferedLog\r\n-        extends LogFactoryImpl.LogImpl {\r\n-\r\n-        protected void log(short level, String message, Throwable t) {\r\n-            super.log(level, message, t);\r\n-            buffer.add(message);\r\n-\r\n-            // trim to max buffer length\r\n-            while (buffer.size() > getBufferSize())\r\n-                buffer.iterator().remove();\r\n-\r\n-            if (disallowedMessages.size() > 0) {\r\n-                for (Iterator i = disallowedMessages.iterator(); i.hasNext();) {\r\n-                    String regex = (String) i.next();\r\n-                    AbstractTestCase.assertNotMatches(regex, message);\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.common.utils;\n+\n+import java.util.*;\n+\n+import org.apache.openjpa.lib.log.*;\n+\n+/**\n+ * Simple default log implementation to test whether certain messages\n+ * are logged or not.\n+ *\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\n+ */\n+public class BufferedLogFactory\n+    extends LogFactoryImpl {\n+\n+    private int bufferSize = 10000;\n+    private List buffer = new ArrayList();\n+    private List disallowedMessages = new LinkedList();\n+\n+    protected LogImpl newLogImpl() {\n+        return new BufferedLog();\n+    }\n+\n+    public List getBuffer() {\n+        return Collections.unmodifiableList(buffer);\n+    }\n+\n+    public void clear() {\n+        buffer.clear();\n+    }\n+\n+    public void clearDisallowedMessages() {\n+        disallowedMessages.clear();\n+    }\n+\n+    public void addDisallowedMessage(String regexp) {\n+        disallowedMessages.add(regexp);\n+    }\n+\n+    public boolean removeDisallowedMessage(String regexp) {\n+        return disallowedMessages.remove(regexp);\n+    }\n+\n+    public List getDisallowedMessages() {\n+        return Collections.unmodifiableList(disallowedMessages);\n+    }\n+\n+    public void assertLogMessage(String regex) {\n+    \tAbstractTestCase.assertMatches(regex, getBuffer());\n+    }\n+\n+    public void assertNoLogMessage(String regex) {\n+    \tAbstractTestCase.assertNotMatches(regex, getBuffer());\n+    }\n+\n+    public void setBufferSize(int bufferSize) {\n+        this.bufferSize = bufferSize;\n+    }\n+\n+    public int getBufferSize() {\n+        return this.bufferSize;\n+    }\n+\n+    public class BufferedLog\n+        extends LogFactoryImpl.LogImpl {\n+\n+        protected void log(short level, String message, Throwable t) {\n+            super.log(level, message, t);\n+            buffer.add(message);\n+\n+            // trim to max buffer length\n+            while (buffer.size() > getBufferSize())\n+                buffer.iterator().remove();\n+\n+            if (disallowedMessages.size() > 0) {\n+                for (Iterator i = disallowedMessages.iterator(); i.hasNext();) {\n+                    String regex = (String) i.next();\n+                    AbstractTestCase.assertNotMatches(regex, message);\n+                }\n+            }\n+        }\n+    }\n+}"},{"sha":"99a58814f0e2755b512d9e4f4ef3fe8795603a38","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/Bug.java","status":"modified","additions":80,"deletions":80,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/Bug.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/Bug.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/common/utils/Bug.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,80 +1,80 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.common.utils;\r\n-\r\n-import java.io.*;\r\n-\r\n-import junit.framework.*;\r\n-\r\n-/**\r\n- * Extension of an assertion error that indicates to the outside\r\n- * build process (if any) that an assertion failed due to a known\r\n- * bug.\r\n- *\r\n- * @author Marc Prud'hommeaux\r\n- */\r\n-public class Bug\r\n-    extends AssertionFailedError {\r\n-\r\n-    public static final String BUG_TOKEN = \"SOLARBUG\";\r\n-    public static final String BUG_DELIMITER = \"|\";\r\n-\r\n-    private Throwable error = null;\r\n-    private int trackingId;\r\n-\r\n-    // the the static factory method, please\r\n-    private Bug(int trackingId, Throwable t, String message) {\r\n-        super(BUG_DELIMITER + BUG_TOKEN + BUG_DELIMITER\r\n-            + trackingId + BUG_DELIMITER + message);\r\n-        this.trackingId = trackingId;\r\n-        error = t;\r\n-\r\n-        printStackTrace(System.err);\r\n-    }\r\n-\r\n-    public static Bug bug(int trackingId, Throwable t, String message) {\r\n-        return new Bug(trackingId, t, message);\r\n-    }\r\n-\r\n-    public void printStackTrace(PrintWriter pw) {\r\n-        super.printStackTrace(pw);\r\n-        if (error != null) {\r\n-            pw.println(\"Embedded error message:\");\r\n-            error.printStackTrace(pw);\r\n-        }\r\n-    }\r\n-\r\n-    public void printStackTrace(PrintStream ps) {\r\n-        super.printStackTrace(ps);\r\n-        if (error != null) {\r\n-            ps.println(\"Embedded error message:\");\r\n-            error.printStackTrace(ps);\r\n-        }\r\n-    }\r\n-\r\n-    public String getMessage() {\r\n-        return super.getMessage() + \" [reported bug #\" + trackingId + \"]\";\r\n-    }\r\n-\r\n-    public int getTrackingId() {\r\n-        return trackingId;\r\n-    }\r\n-}\r\n-\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.common.utils;\n+\n+import java.io.*;\n+\n+import junit.framework.*;\n+\n+/**\n+ * Extension of an assertion error that indicates to the outside\n+ * build process (if any) that an assertion failed due to a known\n+ * bug.\n+ *\n+ * @author Marc Prud'hommeaux\n+ */\n+public class Bug\n+    extends AssertionFailedError {\n+\n+    public static final String BUG_TOKEN = \"SOLARBUG\";\n+    public static final String BUG_DELIMITER = \"|\";\n+\n+    private Throwable error = null;\n+    private int trackingId;\n+\n+    // the the static factory method, please\n+    private Bug(int trackingId, Throwable t, String message) {\n+        super(BUG_DELIMITER + BUG_TOKEN + BUG_DELIMITER\n+            + trackingId + BUG_DELIMITER + message);\n+        this.trackingId = trackingId;\n+        error = t;\n+\n+        printStackTrace(System.err);\n+    }\n+\n+    public static Bug bug(int trackingId, Throwable t, String message) {\n+        return new Bug(trackingId, t, message);\n+    }\n+\n+    public void printStackTrace(PrintWriter pw) {\n+        super.printStackTrace(pw);\n+        if (error != null) {\n+            pw.println(\"Embedded error message:\");\n+            error.printStackTrace(pw);\n+        }\n+    }\n+\n+    public void printStackTrace(PrintStream ps) {\n+        super.printStackTrace(ps);\n+        if (error != null) {\n+            ps.println(\"Embedded error message:\");\n+            error.printStackTrace(ps);\n+        }\n+    }\n+\n+    public String getMessage() {\n+        return super.getMessage() + \" [reported bug #\" + trackingId + \"]\";\n+    }\n+\n+    public int getTrackingId() {\n+        return trackingId;\n+    }\n+}\n+\n+"},{"sha":"d945f60b4f2636b96bd5f160110e182c802ed579","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestOpenJPAConfiguration.java","status":"modified","additions":236,"deletions":236,"changes":472,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestOpenJPAConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestOpenJPAConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/conf/TestOpenJPAConfiguration.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,236 +1,236 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.conf;\r\n-\r\n-import java.beans.PropertyDescriptor;\r\n-import java.lang.reflect.Method;\r\n-import java.util.ArrayList;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Properties;\r\n-\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-import org.apache.openjpa.persistence.common.utils.BufferedLogFactory;\r\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n-import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\r\n-import org.apache.openjpa.lib.conf.Configuration;\r\n-import org.apache.openjpa.lib.conf.Configurations;\r\n-import org.apache.openjpa.lib.conf.PluginValue;\r\n-import org.apache.openjpa.lib.conf.Value;\r\n-\r\n-/**\r\n- * <p>Tests the JDO configuration classes.</p>\r\n- *\r\n- * @author Marc Prud'hommeaux\r\n- */\r\n-public class TestOpenJPAConfiguration\r\n-    extends AbstractTestCase {\r\n-\r\n-    public TestOpenJPAConfiguration(String test) {\r\n-        super(test, \"confcactusapp\");\r\n-    }\r\n-\r\n-    /**\r\n-     * Test that you can set the connection factory and other properties as\r\n-     * objects.\r\n-     */\r\n-    public void testSetObjects() {\r\n-        Map map = new HashMap();\r\n-        Object cfactory = new Object();\r\n-        Object cfactory2 = new Object();\r\n-        map.put(\"openjpa.ConnectionFactory\", cfactory);\r\n-        map.put(\"openjpa.ConnectionFactory2\", cfactory2);\r\n-        map.put(\"openjpa.Optimistic\", Boolean.FALSE);\r\n-        map.put(\"openjpa.LockTimeout\", new Integer(503));\r\n-        map.put(\"javax.persistence.query.timeout\", new Integer(1500));\r\n-\r\n-        // use new conf so no unexpected restrictions on type of connection\r\n-        // factory\r\n-        OpenJPAConfiguration conf = new OpenJPAConfigurationImpl(true, false);\r\n-        conf.fromProperties(map);\r\n-        assertEquals(cfactory, conf.getConnectionFactory());\r\n-        assertEquals(cfactory2, conf.getConnectionFactory2());\r\n-        assertEquals(false, conf.getOptimistic());\r\n-        assertEquals(503, conf.getLockTimeout());\r\n-        assertEquals(1500, conf.getQueryTimeout());\r\n-\r\n-        OpenJPAConfiguration conf2 = new OpenJPAConfigurationImpl(true, false);\r\n-        conf2.fromProperties(map);\r\n-        assertEquals(conf, conf2);\r\n-\r\n-        Map p = conf.toProperties(false);\r\n-        assertTrue(!p.containsKey(\"openjpa.ConnectionFactory\"));\r\n-        assertTrue(!p.containsKey(\"openjpa.ConnectionFactory2\"));\r\n-        assertEquals(\"false\", p.get(\"openjpa.Optimistic\"));\r\n-        assertEquals(\"503\", p.get(\"openjpa.LockTimeout\"));\r\n-        assertEquals(p, conf2.toProperties(false));\r\n-\r\n-        map.put(\"openjpa.LockTimeout\", new Integer(504));\r\n-        OpenJPAConfiguration conf3 = new OpenJPAConfigurationImpl(true, false);\r\n-        conf3.fromProperties(map);\r\n-        assertNotEquals(conf, conf3);\r\n-    }\r\n-\r\n-    public void testClassAliases()\r\n-        throws Exception {\r\n-        OpenJPAConfiguration conf = getConfiguration();\r\n-        if (!(conf instanceof OpenJPAConfigurationImpl))\r\n-            return;\r\n-\r\n-        Value[] values = ((OpenJPAConfigurationImpl) conf).getValues();\r\n-        String[] aliases;\r\n-        String clsName;\r\n-        List failures = new ArrayList();\r\n-        for (int i = 0; i < values.length; i++) {\r\n-            if (!(values[i] instanceof PluginValue))\r\n-                continue;\r\n-\r\n-            aliases = values[i].getAliases();\r\n-            for (int j = 0; j < aliases.length; j += 2) {\r\n-                try {\r\n-                    clsName = Configurations.getClassName(aliases[j + 1]);\r\n-                    if (clsName != null)\r\n-                        Class.forName(clsName);\r\n-                } catch (ClassNotFoundException cnfe) {\r\n-                    failures.add(\"Key: \" + aliases[j] + \" for property \"\r\n-                        + values[i].getProperty() + \" does not list a valid \"\r\n-                        + \"class: \" + aliases[j + 1]);\r\n-                } catch (UnsupportedClassVersionError ucve) {\r\n-                    //### JDK 5 plugin; ignore\r\n-                }\r\n-            }\r\n-        }\r\n-        if (failures.size() != 0)\r\n-            fail(failures.toString());\r\n-    }\r\n-\r\n-    public void testBeanAccessors()\r\n-        throws Exception {\r\n-        OpenJPAConfiguration conf = getConfiguration();\r\n-        OpenJPAConfigurationImpl simp = (OpenJPAConfigurationImpl) conf.clone();\r\n-\r\n-        Value[] values = simp.getValues();\r\n-        PropertyDescriptor[] pds = simp.getPropertyDescriptors();\r\n-        List failures = new ArrayList();\r\n-        for (int i = 0; i < values.length; i++) {\r\n-            try {\r\n-                assertNotNull(pds[i].getShortDescription());\r\n-                assertNotNull(pds[i].getDisplayName());\r\n-                \r\n-                // skip the EntityManagerFactory property added by\r\n-                // product derivation code as it has no accessor methods\r\n-                if (\"EntityManagerFactory\".equals(values[i].getProperty()))\r\n-                        continue;\r\n-                        \r\n-                Method getter = pds[i].getReadMethod();\r\n-                Method setter = pds[i].getWriteMethod();\r\n-                assertNotNull(getter);\r\n-                assertNotNull(setter);\r\n-\r\n-                assertNotNull(\"Missing attribute (\"\r\n-                    + Configuration.ATTRIBUTE_TYPE\r\n-                    + \") for property \" + pds[i].getName(),\r\n-                    pds[i].getValue(Configuration.ATTRIBUTE_TYPE));\r\n-\r\n-                assertNotNull(\"Missing attribute (\"\r\n-                    + Configuration.ATTRIBUTE_CATEGORY\r\n-                    + \") for property \" + pds[i].getName(),\r\n-                    pds[i].getValue(Configuration.ATTRIBUTE_CATEGORY));\r\n-\r\n-                assertNotNull(\"Missing attribute (\"\r\n-                    + Configuration.ATTRIBUTE_ORDER\r\n-                    + \") for property \" + pds[i].getName(),\r\n-                    pds[i].getValue(Configuration.ATTRIBUTE_ORDER));\r\n-\r\n-                pds[i].getReadMethod().invoke(simp, (Object[]) null);\r\n-\r\n-            } catch (Exception e) {\r\n-                failures.add(pds[i].getName());\r\n-            }\r\n-        }\r\n-        if (failures.size() != 0)\r\n-            fail(\"not all properties had valid comments / setters / getters.\"\r\n-                + \" failed props: \" + failures);\r\n-    }\r\n-\r\n-    /**\r\n-     * Tests that invalid plug-in values throw the appropriate exception\r\n-     * type.\r\n-     */\r\n-    public void testInvalidPlugins() {\r\n-        OpenJPAConfiguration config = new OpenJPAConfigurationImpl();\r\n-        config.setLog(\"log3j\");\r\n-        try {\r\n-            config.getLogFactory().getLog(\"Foo\");\r\n-            fail(\"getting the Foo log should have failed\");\r\n-        } catch (RuntimeException re) {\r\n-            // as expected ... make sure the exception suggests the\r\n-            // name \"log4j\" in the message\r\n-            assertTrue(-1 != re.getMessage().indexOf(\"log4j\"));\r\n-        }\r\n-    }\r\n-\r\n-    public void testInvalidConfigurationWarnings() {\r\n-        Properties props = new Properties();\r\n-        props.setProperty(\"openjpa.MaxxFetchDepth\", \"1\");\r\n-\r\n-        OpenJPAConfiguration config = new OpenJPAConfigurationImpl();\r\n-        // track the messages\r\n-        BufferedLogFactory log = new BufferedLogFactory();\r\n-        config.setLogFactory(log);\r\n-\r\n-        config.fromProperties(props);\r\n-\r\n-        // make sure we got a warning that contains the string with the\r\n-        // bad property name and a hint for the valid property name.\r\n-        log.assertLogMessage(\"*\\\"openjpa.MaxxFetchDepth\\\"*\");\r\n-        log.assertLogMessage(\"*\\\"openjpa.MaxFetchDepth\\\"*\");\r\n-\r\n-        log.clear();\r\n-\r\n-        // now make sure we do *not* try to validate sub-configurations (such\r\n-        // as openjpa.jdbc.Foo).\r\n-        props.clear();\r\n-        props.setProperty(\"openjpa.jdbc.Foo\", \"XXX\");\r\n-        props.setProperty(\"oponjpa\", \"XXX\");\r\n-        config.fromProperties(props);\r\n-        log.assertNoLogMessage(\"*\\\"openjpa.jdbc.Foo\\\"*\");\r\n-        log.assertNoLogMessage(\"*\\\"oponjpa\\\"*\");\r\n-    }\r\n-\r\n-    /**\r\n-     * Tests that invalid fixed-list values throw the appropriate exception\r\n-     * type.\r\n-     */\r\n-    public void testInvalidNonPluginValues() {\r\n-        OpenJPAConfiguration config = new OpenJPAConfigurationImpl();\r\n-        try {\r\n-            config.setConnectionFactoryMode(\"aoeu\");\r\n-            fail(\"setting the ConnectionFactoryMode to aoeu should fail\");\r\n-        } catch (RuntimeException re) {\r\n-            // as expected ... make sure the exception suggests the\r\n-            // valid names in the message.\r\n-            assertTrue(-1 != re.getMessage().indexOf(\"managed\"));\r\n-            assertTrue(-1 != re.getMessage().indexOf(\"local\"));\r\n-            assertTrue(-1 != re.getMessage().indexOf(\"true\"));\r\n-            assertTrue(-1 != re.getMessage().indexOf(\"false\"));\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.conf;\n+\n+import java.beans.PropertyDescriptor;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+import org.apache.openjpa.persistence.common.utils.BufferedLogFactory;\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n+import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.lib.conf.PluginValue;\n+import org.apache.openjpa.lib.conf.Value;\n+\n+/**\n+ * <p>Tests the JDO configuration classes.</p>\n+ *\n+ * @author Marc Prud'hommeaux\n+ */\n+public class TestOpenJPAConfiguration\n+    extends AbstractTestCase {\n+\n+    public TestOpenJPAConfiguration(String test) {\n+        super(test, \"confcactusapp\");\n+    }\n+\n+    /**\n+     * Test that you can set the connection factory and other properties as\n+     * objects.\n+     */\n+    public void testSetObjects() {\n+        Map map = new HashMap();\n+        Object cfactory = new Object();\n+        Object cfactory2 = new Object();\n+        map.put(\"openjpa.ConnectionFactory\", cfactory);\n+        map.put(\"openjpa.ConnectionFactory2\", cfactory2);\n+        map.put(\"openjpa.Optimistic\", Boolean.FALSE);\n+        map.put(\"openjpa.LockTimeout\", new Integer(503));\n+        map.put(\"javax.persistence.query.timeout\", new Integer(1500));\n+\n+        // use new conf so no unexpected restrictions on type of connection\n+        // factory\n+        OpenJPAConfiguration conf = new OpenJPAConfigurationImpl(true, false);\n+        conf.fromProperties(map);\n+        assertEquals(cfactory, conf.getConnectionFactory());\n+        assertEquals(cfactory2, conf.getConnectionFactory2());\n+        assertEquals(false, conf.getOptimistic());\n+        assertEquals(503, conf.getLockTimeout());\n+        assertEquals(1500, conf.getQueryTimeout());\n+\n+        OpenJPAConfiguration conf2 = new OpenJPAConfigurationImpl(true, false);\n+        conf2.fromProperties(map);\n+        assertEquals(conf, conf2);\n+\n+        Map p = conf.toProperties(false);\n+        assertTrue(!p.containsKey(\"openjpa.ConnectionFactory\"));\n+        assertTrue(!p.containsKey(\"openjpa.ConnectionFactory2\"));\n+        assertEquals(\"false\", p.get(\"openjpa.Optimistic\"));\n+        assertEquals(\"503\", p.get(\"openjpa.LockTimeout\"));\n+        assertEquals(p, conf2.toProperties(false));\n+\n+        map.put(\"openjpa.LockTimeout\", new Integer(504));\n+        OpenJPAConfiguration conf3 = new OpenJPAConfigurationImpl(true, false);\n+        conf3.fromProperties(map);\n+        assertNotEquals(conf, conf3);\n+    }\n+\n+    public void testClassAliases()\n+        throws Exception {\n+        OpenJPAConfiguration conf = getConfiguration();\n+        if (!(conf instanceof OpenJPAConfigurationImpl))\n+            return;\n+\n+        Value[] values = ((OpenJPAConfigurationImpl) conf).getValues();\n+        String[] aliases;\n+        String clsName;\n+        List failures = new ArrayList();\n+        for (int i = 0; i < values.length; i++) {\n+            if (!(values[i] instanceof PluginValue))\n+                continue;\n+\n+            aliases = values[i].getAliases();\n+            for (int j = 0; j < aliases.length; j += 2) {\n+                try {\n+                    clsName = Configurations.getClassName(aliases[j + 1]);\n+                    if (clsName != null)\n+                        Class.forName(clsName);\n+                } catch (ClassNotFoundException cnfe) {\n+                    failures.add(\"Key: \" + aliases[j] + \" for property \"\n+                        + values[i].getProperty() + \" does not list a valid \"\n+                        + \"class: \" + aliases[j + 1]);\n+                } catch (UnsupportedClassVersionError ucve) {\n+                    //### JDK 5 plugin; ignore\n+                }\n+            }\n+        }\n+        if (failures.size() != 0)\n+            fail(failures.toString());\n+    }\n+\n+    public void testBeanAccessors()\n+        throws Exception {\n+        OpenJPAConfiguration conf = getConfiguration();\n+        OpenJPAConfigurationImpl simp = (OpenJPAConfigurationImpl) conf.clone();\n+\n+        Value[] values = simp.getValues();\n+        PropertyDescriptor[] pds = simp.getPropertyDescriptors();\n+        List failures = new ArrayList();\n+        for (int i = 0; i < values.length; i++) {\n+            try {\n+                assertNotNull(pds[i].getShortDescription());\n+                assertNotNull(pds[i].getDisplayName());\n+                \n+                // skip the EntityManagerFactory property added by\n+                // product derivation code as it has no accessor methods\n+                if (\"EntityManagerFactory\".equals(values[i].getProperty()))\n+                        continue;\n+                        \n+                Method getter = pds[i].getReadMethod();\n+                Method setter = pds[i].getWriteMethod();\n+                assertNotNull(getter);\n+                assertNotNull(setter);\n+\n+                assertNotNull(\"Missing attribute (\"\n+                    + Configuration.ATTRIBUTE_TYPE\n+                    + \") for property \" + pds[i].getName(),\n+                    pds[i].getValue(Configuration.ATTRIBUTE_TYPE));\n+\n+                assertNotNull(\"Missing attribute (\"\n+                    + Configuration.ATTRIBUTE_CATEGORY\n+                    + \") for property \" + pds[i].getName(),\n+                    pds[i].getValue(Configuration.ATTRIBUTE_CATEGORY));\n+\n+                assertNotNull(\"Missing attribute (\"\n+                    + Configuration.ATTRIBUTE_ORDER\n+                    + \") for property \" + pds[i].getName(),\n+                    pds[i].getValue(Configuration.ATTRIBUTE_ORDER));\n+\n+                pds[i].getReadMethod().invoke(simp, (Object[]) null);\n+\n+            } catch (Exception e) {\n+                failures.add(pds[i].getName());\n+            }\n+        }\n+        if (failures.size() != 0)\n+            fail(\"not all properties had valid comments / setters / getters.\"\n+                + \" failed props: \" + failures);\n+    }\n+\n+    /**\n+     * Tests that invalid plug-in values throw the appropriate exception\n+     * type.\n+     */\n+    public void testInvalidPlugins() {\n+        OpenJPAConfiguration config = new OpenJPAConfigurationImpl();\n+        config.setLog(\"log3j\");\n+        try {\n+            config.getLogFactory().getLog(\"Foo\");\n+            fail(\"getting the Foo log should have failed\");\n+        } catch (RuntimeException re) {\n+            // as expected ... make sure the exception suggests the\n+            // name \"log4j\" in the message\n+            assertTrue(-1 != re.getMessage().indexOf(\"log4j\"));\n+        }\n+    }\n+\n+    public void testInvalidConfigurationWarnings() {\n+        Properties props = new Properties();\n+        props.setProperty(\"openjpa.MaxxFetchDepth\", \"1\");\n+\n+        OpenJPAConfiguration config = new OpenJPAConfigurationImpl();\n+        // track the messages\n+        BufferedLogFactory log = new BufferedLogFactory();\n+        config.setLogFactory(log);\n+\n+        config.fromProperties(props);\n+\n+        // make sure we got a warning that contains the string with the\n+        // bad property name and a hint for the valid property name.\n+        log.assertLogMessage(\"*\\\"openjpa.MaxxFetchDepth\\\"*\");\n+        log.assertLogMessage(\"*\\\"openjpa.MaxFetchDepth\\\"*\");\n+\n+        log.clear();\n+\n+        // now make sure we do *not* try to validate sub-configurations (such\n+        // as openjpa.jdbc.Foo).\n+        props.clear();\n+        props.setProperty(\"openjpa.jdbc.Foo\", \"XXX\");\n+        props.setProperty(\"oponjpa\", \"XXX\");\n+        config.fromProperties(props);\n+        log.assertNoLogMessage(\"*\\\"openjpa.jdbc.Foo\\\"*\");\n+        log.assertNoLogMessage(\"*\\\"oponjpa\\\"*\");\n+    }\n+\n+    /**\n+     * Tests that invalid fixed-list values throw the appropriate exception\n+     * type.\n+     */\n+    public void testInvalidNonPluginValues() {\n+        OpenJPAConfiguration config = new OpenJPAConfigurationImpl();\n+        try {\n+            config.setConnectionFactoryMode(\"aoeu\");\n+            fail(\"setting the ConnectionFactoryMode to aoeu should fail\");\n+        } catch (RuntimeException re) {\n+            // as expected ... make sure the exception suggests the\n+            // valid names in the message.\n+            assertTrue(-1 != re.getMessage().indexOf(\"managed\"));\n+            assertTrue(-1 != re.getMessage().indexOf(\"local\"));\n+            assertTrue(-1 != re.getMessage().indexOf(\"true\"));\n+            assertTrue(-1 != re.getMessage().indexOf(\"false\"));\n+        }\n+    }\n+}"},{"sha":"782fa5b8e8c57a7b8969a41d385f95e87e7e4a3b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Account.java","status":"modified","additions":40,"deletions":40,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Account.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Account.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Account.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,40 +1,40 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.criteria;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Table;\r\n-\r\n-/**\r\n- * Persistent class used in testing QueryDefinition API.\r\n- * \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-@Entity\r\n-@Table(name=\"CR_ACCOUNT\")\r\n-public class Account {\r\n-\t@Id\r\n-\t@GeneratedValue\r\n-\tprivate long id;\r\n-\t\r\n-\tprivate int balance;\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.criteria;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+/**\n+ * Persistent class used in testing QueryDefinition API.\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+@Table(name=\"CR_ACCOUNT\")\n+public class Account {\n+\t@Id\n+\t@GeneratedValue\n+\tprivate long id;\n+\t\n+\tprivate int balance;\n+}"},{"sha":"928e8f90a9c7532b0aeab4996680a484ba40e8f3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Address.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Address.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Address.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Address.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,46 +1,46 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.criteria;\r\n-\r\n-import javax.persistence.Embeddable;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Table;\r\n-\r\n-/**\r\n- * Used for testing Criteria API.\r\n- * The fields are sometimes not declared as there is no validation yet during \r\n- * Query construction.\r\n- * \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-@Entity\r\n-@Table(name=\"CR_ADDRESS\")\r\n-@Embeddable\r\n-public class Address {\r\n-\t@Id\r\n-\t@GeneratedValue\r\n-\tprivate long id;\r\n-\r\n-\tprivate String state;\r\n-\tprivate String county;\r\n-\tprivate String zipCode;\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.criteria;\n+\n+import javax.persistence.Embeddable;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+/**\n+ * Used for testing Criteria API.\n+ * The fields are sometimes not declared as there is no validation yet during \n+ * Query construction.\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+@Table(name=\"CR_ADDRESS\")\n+@Embeddable\n+public class Address {\n+\t@Id\n+\t@GeneratedValue\n+\tprivate long id;\n+\n+\tprivate String state;\n+\tprivate String county;\n+\tprivate String zipCode;\n+}"},{"sha":"95bd363725bd1cfd2461e56169f8afc42ebb46a3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Contact.java","status":"modified","additions":34,"deletions":34,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Contact.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Contact.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Contact.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,34 +1,34 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.criteria;\r\n-\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.Embeddable;\r\n-import javax.persistence.OneToMany;\r\n-import javax.persistence.OneToOne;\r\n-\r\n-@Embeddable\r\n-public class Contact {\r\n-\t@OneToOne \r\n-\tprivate Address address;\r\n-\t\r\n-\t@OneToMany\r\n-\tprivate List<Phone> phones;\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.criteria;\n+\n+import java.util.List;\n+\n+import javax.persistence.Embeddable;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+\n+@Embeddable\n+public class Contact {\n+\t@OneToOne \n+\tprivate Address address;\n+\t\n+\t@OneToMany\n+\tprivate List<Phone> phones;\n+}"},{"sha":"1214af90922b964742190a40b4f5a311bfd28b43","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Contractor.java","status":"modified","additions":28,"deletions":28,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Contractor.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Contractor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Contractor.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,28 +1,28 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.criteria;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"CR_CONTRACTOR\")\r\n-public class Contractor {\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.criteria;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"CR_CONTRACTOR\")\n+public class Contractor {\n+\n+}"},{"sha":"6a417c4558613098dde45d789da419ea4ee58dc4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Course.java","status":"modified","additions":37,"deletions":37,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Course.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Course.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Course.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,37 +1,37 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.criteria;\r\n-\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.OneToMany;\r\n-import javax.persistence.OrderBy;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"CR_COURSE\")\r\n-\r\n-public class Course {\r\n-\tprivate String name;\r\n-\t\r\n-\t@OneToMany\r\n-\t@OrderBy\r\n-\tprivate List<Student> studentWaitList;\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.criteria;\n+\n+import java.util.List;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OrderBy;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"CR_COURSE\")\n+\n+public class Course {\n+\tprivate String name;\n+\t\n+\t@OneToMany\n+\t@OrderBy\n+\tprivate List<Student> studentWaitList;\n+}"},{"sha":"54d0964d568a75c6f76cf1875c63f57dd5df15d6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/CreditCard.java","status":"modified","additions":39,"deletions":39,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/CreditCard.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/CreditCard.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/CreditCard.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,39 +1,39 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.criteria;\r\n-\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.OneToMany;\r\n-import javax.persistence.OneToOne;\r\n-import javax.persistence.OrderBy;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"CR_CREDITCARD\")\r\n-\r\n-public class CreditCard {\r\n-\t@OneToOne\r\n-\tprivate Employee holder;\r\n-\t\r\n-\t@OneToMany\r\n-\t@OrderBy\r\n-\tprivate List<Transaction> transactionHistory;\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.criteria;\n+\n+import java.util.List;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+import javax.persistence.OrderBy;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"CR_CREDITCARD\")\n+\n+public class CreditCard {\n+\t@OneToOne\n+\tprivate Employee holder;\n+\t\n+\t@OneToMany\n+\t@OrderBy\n+\tprivate List<Transaction> transactionHistory;\n+}"},{"sha":"83e0d74bfce2541bcf675b9176c99b40302639c5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Customer.java","status":"modified","additions":57,"deletions":57,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Customer.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Customer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Customer.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,57 +1,57 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.criteria;\r\n-\r\n-import java.util.List;\r\n-import java.util.Set;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.ManyToOne;\r\n-import javax.persistence.OneToMany;\r\n-import javax.persistence.OneToOne;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"CR_CUSTOMER\")\r\n-\r\n-public class Customer {\r\n-\tprivate long id;\r\n-\tprivate String firstName;\r\n-\tprivate String lastName;\r\n-\t@OneToMany\r\n-\tprivate Set<Order> orders;\r\n-\tprivate int status;\r\n-\tprivate int balanceOwned;\r\n-\t@OneToOne\r\n-\tprivate Address address;\r\n-\t\r\n-\tprivate int filledOrderCount;\r\n-\tprivate String country;\r\n-\t\r\n-\t@OneToMany\r\n-\tprivate List<Account> accounts;\r\n-\t\r\n-\tpublic Customer() {\r\n-\t\t\r\n-\t}\r\n-\t\r\n-\tpublic Customer(long id, int status, int count) {\r\n-\t\t\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.criteria;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"CR_CUSTOMER\")\n+\n+public class Customer {\n+\tprivate long id;\n+\tprivate String firstName;\n+\tprivate String lastName;\n+\t@OneToMany\n+\tprivate Set<Order> orders;\n+\tprivate int status;\n+\tprivate int balanceOwned;\n+\t@OneToOne\n+\tprivate Address address;\n+\t\n+\tprivate int filledOrderCount;\n+\tprivate String country;\n+\t\n+\t@OneToMany\n+\tprivate List<Account> accounts;\n+\t\n+\tpublic Customer() {\n+\t\t\n+\t}\n+\t\n+\tpublic Customer(long id, int status, int count) {\n+\t\t\n+\t}\n+}"},{"sha":"eab7bee713dd6b061f57f0620dd0fa0d8fb06487","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Department.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Department.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Department.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Department.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,35 +1,35 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.criteria;\r\n-\r\n-import java.util.Set;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.OneToMany;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"CR_DEPARTMENT\")\r\n-\r\n-public class Department {\r\n-\tprivate int deptNo;\r\n-\tprivate String name;\r\n-\t@OneToMany\r\n-\tprivate Set<Employee> employees;\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.criteria;\n+\n+import java.util.Set;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"CR_DEPARTMENT\")\n+\n+public class Department {\n+\tprivate int deptNo;\n+\tprivate String name;\n+\t@OneToMany\n+\tprivate Set<Employee> employees;\n+}"},{"sha":"dbe5478bf2563f35dc076513069f17824fc2dcd6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Employee.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Employee.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,46 +1,46 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.criteria;\r\n-\r\n-import javax.persistence.Embedded;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.ManyToOne;\r\n-import javax.persistence.OneToOne;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"CR_EMPLOYEE\")\r\n-\r\n-public class Employee {\r\n-\tprivate String name;\r\n-\t@Embedded\r\n-\tprivate Contact contactInfo;\r\n-\t@ManyToOne\r\n-\tprivate Department department;\r\n-\tprivate int rating;\r\n-\tprivate float salary;\r\n-\t@OneToOne\r\n-\tprivate Employee spouse;\r\n-\t@ManyToOne\r\n-\tprivate Manager manager;\r\n-\t\r\n-\t@OneToOne\r\n-\tFrequentFlierPlan frequentFlierPlan;\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.criteria;\n+\n+import javax.persistence.Embedded;\n+import javax.persistence.Entity;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"CR_EMPLOYEE\")\n+\n+public class Employee {\n+\tprivate String name;\n+\t@Embedded\n+\tprivate Contact contactInfo;\n+\t@ManyToOne\n+\tprivate Department department;\n+\tprivate int rating;\n+\tprivate float salary;\n+\t@OneToOne\n+\tprivate Employee spouse;\n+\t@ManyToOne\n+\tprivate Manager manager;\n+\t\n+\t@OneToOne\n+\tFrequentFlierPlan frequentFlierPlan;\n+\n+}"},{"sha":"9870b3b52288c60957bcae4b6a3fc2b928ed8513","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Exempt.java","status":"modified","additions":29,"deletions":29,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Exempt.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Exempt.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Exempt.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,29 +1,29 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.criteria;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"CR_EXEMPT\")\r\n-\r\n-public class Exempt {\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.criteria;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"CR_EXEMPT\")\n+\n+public class Exempt {\n+\n+}"},{"sha":"5c67343cd2a4172ed7818b2cbbc77ceb960d53f7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/FrequentFlierPlan.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/FrequentFlierPlan.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/FrequentFlierPlan.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/FrequentFlierPlan.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,9 +1,9 @@\n-package org.apache.openjpa.persistence.criteria;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class FrequentFlierPlan {\r\n-\tprivate String name;\r\n-\tprivate int annualMiles;\r\n-}\r\n+package org.apache.openjpa.persistence.criteria;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class FrequentFlierPlan {\n+\tprivate String name;\n+\tprivate int annualMiles;\n+}"},{"sha":"bd9e376adf7dbc3aca564756261d033e4db95220","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Item.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Item.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Item.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Item.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,35 +1,35 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.criteria;\r\n-\r\n-import java.util.Map;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.OneToMany;\r\n-import javax.persistence.OneToOne;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"CR_ITEM\")\r\n-\r\n-public class Item {\r\n-\tprivate String name;\r\n-\t@OneToMany\r\n-\tprivate Map<String, Photo> photos;\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.criteria;\n+\n+import java.util.Map;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"CR_ITEM\")\n+\n+public class Item {\n+\tprivate String name;\n+\t@OneToMany\n+\tprivate Map<String, Photo> photos;\n+}"},{"sha":"37e4b3551c81cc63238e2da9c51a2a66f06d5da8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/LineItem.java","status":"modified","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/LineItem.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/LineItem.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/LineItem.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,32 +1,32 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.criteria;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.ManyToOne;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"CR_LINEITEM\")\r\n-\r\n-public class LineItem {\r\n-\tprivate int price;\r\n-\t@ManyToOne\r\n-\tprivate Order order;\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.criteria;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"CR_LINEITEM\")\n+\n+public class LineItem {\n+\tprivate int price;\n+\t@ManyToOne\n+\tprivate Order order;\n+}"},{"sha":"2622c08f91f41466435780fc7e85a8f9a03d6bda","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Manager.java","status":"modified","additions":29,"deletions":29,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Manager.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Manager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Manager.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,29 +1,29 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.criteria;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"CR_MANAGER\")\r\n-\r\n-public class Manager {\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.criteria;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"CR_MANAGER\")\n+\n+public class Manager {\n+\n+}"},{"sha":"da938ecbb098e2169114a8c2b3425fecc516f9c7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java","status":"modified","additions":41,"deletions":41,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Order.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,41 +1,41 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.criteria;\r\n-\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.ManyToOne;\r\n-import javax.persistence.OneToMany;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"CR_ORDER\")\r\n-public class Order {\r\n-\tprivate int quantity;\r\n-\tprivate int cost;\r\n-\tprivate int totalcost;\r\n-\tprivate int count;\r\n-\t@ManyToOne\r\n-\tprivate Customer customer;\r\n-\t\r\n-\t@OneToMany(mappedBy=\"order\")\r\n-\tprivate List<LineItem> lineItems;\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.criteria;\n+\n+import java.util.List;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"CR_ORDER\")\n+public class Order {\n+\tprivate int quantity;\n+\tprivate int cost;\n+\tprivate int totalcost;\n+\tprivate int count;\n+\t@ManyToOne\n+\tprivate Customer customer;\n+\t\n+\t@OneToMany(mappedBy=\"order\")\n+\tprivate List<LineItem> lineItems;\n+\n+}"},{"sha":"ffc1c01fe0a38c4fc7229ef502941d39b3bb88e4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Person.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Person.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Person.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,35 +1,35 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.criteria;\r\n-\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.OneToMany;\r\n-import javax.persistence.Table;\r\n-\r\n-import org.apache.openjpa.persistence.PersistentCollection;\r\n-\r\n-@Entity\r\n-@Table(name=\"CR_PERSON\")\r\n-\r\n-public class Person {\r\n-\t@PersistentCollection\r\n-\tprivate List<String> nicknames;\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.criteria;\n+\n+import java.util.List;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.PersistentCollection;\n+\n+@Entity\n+@Table(name=\"CR_PERSON\")\n+\n+public class Person {\n+\t@PersistentCollection\n+\tprivate List<String> nicknames;\n+}"},{"sha":"23c10384d726def1393024d8cfc1ebf91ac27e5f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Phone.java","status":"modified","additions":29,"deletions":29,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Phone.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Phone.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Phone.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,29 +1,29 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.criteria;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"CR_PHONE\")\r\n-\r\n-public class Phone {\r\n-\tprivate String vendor;\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.criteria;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"CR_PHONE\")\n+\n+public class Phone {\n+\tprivate String vendor;\n+}"},{"sha":"65161530c67c354e30f036106dab8710825236dc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Photo.java","status":"modified","additions":29,"deletions":29,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Photo.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Photo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Photo.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,29 +1,29 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.criteria;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"CR_PHOTO\")\r\n-\r\n-public class Photo {\r\n-\tprivate String label;\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.criteria;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"CR_PHOTO\")\n+\n+public class Photo {\n+\tprivate String label;\n+}"},{"sha":"730ae4bc6d2d15a0be3e13dcfbbfbdb3b531d1f7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/StringComparison.java","status":"modified","additions":121,"deletions":121,"changes":242,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/StringComparison.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/StringComparison.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/StringComparison.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,121 +1,121 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.criteria;\r\n-\r\n-import java.io.IOException;\r\n-import java.io.StreamTokenizer;\r\n-import java.io.StringReader;\r\n-import java.util.ArrayList;\r\n-import java.util.Arrays;\r\n-import java.util.List;\r\n-\r\n-/**\r\n- * Compares a pair of String ignoring case-sensitivity of set of reserved words.\r\n- * \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-public class StringComparison {\r\n-\tprivate static List<String> _reserved = Arrays.asList(new String[] {\r\n-\t\t\t\"ALL\", \"AND\", \"ANY\", \"AS\", \"ASC\", \"AVG\",  \r\n-\t\t\t\"BETWEEN\", \"BIT_LENGTH\", \"BY\", \r\n-\t\t\t\"CASE\", \"CHAR_LENGTH\", \"CHARACTER_LENGTH\", \"CLASS\", \"COALESCE\", \r\n-\t\t\t\"COUNT\",\"CURRENT_DATE\", \"CURRENT_TIME\", \"CURRENT_TIMESTAMP\",\r\n-\t\t\t\"DELETE\", \"DESC\", \"DISTINCT\", \r\n-\t\t\t\"EMPTY\", \"ENTRY\", \"EXISTS\",\r\n-\t\t\t\"FALSE\", \"FETCH\", \"FROM\", \r\n-\t\t\t\"GROUP\",\r\n-\t\t\t\"HAVING\",\r\n-\t\t\t\"IN\", \"INDEX\", \"INNER\", \"IS\",\r\n-\t\t\t\"JOIN\",\r\n-\t\t\t\"KEY\",\r\n-\t\t\t\"LEFT\", \"LIKE\", \"LOWER\",\r\n-\t\t\t\"MAX\", \"MEMBER\", \"MIN\", \"MOD\", \r\n-\t\t\t\"NEW\", \"NOT\", \"NULL\", \"NULLIF\",\r\n-\t\t\t\"OBJECT\", \"OF\", \"OR\", \"ORDER\", \"OUTER\",\r\n-\t\t\t\"POSITION\",\r\n-\t\t\t\"SELECT\", \"SOME\", \"SUM\",\r\n-\t\t\t\"THEN\", \"TRIM\", \"TRUE\", \"TYPE\",\r\n-\t\t\t\"UNKNOWN\", \"UPDATE\", \"UPPER\",\r\n-\t\t\t\"VALUE\",\r\n-\t\t\t\"WHEN\", \"WHERE\", \r\n-\t});\r\n-\t\r\n-\tprivate boolean isReservedWord(String s) {\r\n-\t\treturn _reserved.contains(s.toUpperCase());\r\n-\t}\r\n-\t\r\n-\tpublic List<String> tokenize(String s) throws IOException {\r\n-\t\tList<String> list = new ArrayList<String>();\r\n-\t\tStreamTokenizer tok = new StreamTokenizer(new StringReader(s));\r\n-\t\ttok.resetSyntax();\r\n-\t\ttok.wordChars('a', 'z');\r\n-\t\ttok.wordChars('0', '9');\r\n-\t\ttok.wordChars('A', 'Z');\r\n-\t\ttok.wordChars('\\'', '\\'');\r\n-\t\ttok.wordChars('=', '=');\r\n-\t\ttok.wordChars('>', '>');\r\n-\t\ttok.wordChars('<', '<');\r\n-\t\ttok.wordChars('!', '!');\r\n-\t\ttok.wordChars('.', '.');\r\n-\t\tfor (int ttype; (ttype = tok.nextToken()) != StreamTokenizer.TT_EOF;) {\r\n-\t\t\tif (ttype == StreamTokenizer.TT_WORD)\r\n-\t\t\t\tlist.add(tok.sval);\r\n-\t\t}\r\n-\t\treturn list;\r\n-\t}\r\n-\t\r\n-\tpublic boolean compare(String s1, String s2) {\r\n-\t\ttry {\r\n-\t\t\tList<String> list1 = tokenize(s1);\r\n-\t\t\tList<String> list2 = tokenize(s2);\r\n-\t\t\tif (list1.size() != list2.size()) {\r\n-\t\t\t\tSystem.err.println(\"Unequal tokens \" + list1.size() + \"!=\" +  list2.size());\r\n-\t\t\t\treturn false;\r\n-\t\t\t}\r\n-\t\t\tfor (int i = 0; i < list1.size(); i++) {\r\n-\t\t\t\tString a = list1.get(i);\r\n-\t\t\t\tString b = list2.get(i);\r\n-\t\t\t\tboolean match = isReservedWord(a) ? a.equalsIgnoreCase(b) : a.equals(b);\r\n-\t\t\t\tif (!match) {\r\n-\t\t\t\t\tSystem.err.println(\"[\" + a + \"] does not match [\" + b + \"]\");\r\n-\t\t\t\t\treturn false;\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n-\t\t\treturn true;\r\n-\t\t} catch (IOException e) {\r\n-\t\t\te.printStackTrace();\r\n-\t\t}\r\n-\t\treturn false;\r\n-\t}\r\n-\t\r\n-\tpublic static void main(String[] args) throws Exception {\r\n-\t\tStringComparison c = new StringComparison();\r\n-\t\tString s1 = \"SELECT DISTINCT o FROM Order AS o JOIN o.lineItems AS l WHERE l.shipped != FALSE and l.name like 'hello'\";\r\n-\t\tString s2 = \"select DISTINCT o FROM Order AS o  JOIN o.lineItems AS  l WHERE l.shipped !=  FALSE and l.name like 'hello'\";\r\n-\t\tboolean match = c.compare(s1, s2);\r\n-\t\tif (!match) {\r\n-\t\t\tSystem.err.println(s1);\r\n-\t\t\tSystem.err.println(c.tokenize(s1));\r\n-\t\t\tSystem.err.println(s2);\r\n-\t\t\tSystem.err.println(c.tokenize(s2));\r\n-\t\t}\r\n-\t}\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.criteria;\n+\n+import java.io.IOException;\n+import java.io.StreamTokenizer;\n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * Compares a pair of String ignoring case-sensitivity of set of reserved words.\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class StringComparison {\n+\tprivate static List<String> _reserved = Arrays.asList(new String[] {\n+\t\t\t\"ALL\", \"AND\", \"ANY\", \"AS\", \"ASC\", \"AVG\",  \n+\t\t\t\"BETWEEN\", \"BIT_LENGTH\", \"BY\", \n+\t\t\t\"CASE\", \"CHAR_LENGTH\", \"CHARACTER_LENGTH\", \"CLASS\", \"COALESCE\", \n+\t\t\t\"COUNT\",\"CURRENT_DATE\", \"CURRENT_TIME\", \"CURRENT_TIMESTAMP\",\n+\t\t\t\"DELETE\", \"DESC\", \"DISTINCT\", \n+\t\t\t\"EMPTY\", \"ENTRY\", \"EXISTS\",\n+\t\t\t\"FALSE\", \"FETCH\", \"FROM\", \n+\t\t\t\"GROUP\",\n+\t\t\t\"HAVING\",\n+\t\t\t\"IN\", \"INDEX\", \"INNER\", \"IS\",\n+\t\t\t\"JOIN\",\n+\t\t\t\"KEY\",\n+\t\t\t\"LEFT\", \"LIKE\", \"LOWER\",\n+\t\t\t\"MAX\", \"MEMBER\", \"MIN\", \"MOD\", \n+\t\t\t\"NEW\", \"NOT\", \"NULL\", \"NULLIF\",\n+\t\t\t\"OBJECT\", \"OF\", \"OR\", \"ORDER\", \"OUTER\",\n+\t\t\t\"POSITION\",\n+\t\t\t\"SELECT\", \"SOME\", \"SUM\",\n+\t\t\t\"THEN\", \"TRIM\", \"TRUE\", \"TYPE\",\n+\t\t\t\"UNKNOWN\", \"UPDATE\", \"UPPER\",\n+\t\t\t\"VALUE\",\n+\t\t\t\"WHEN\", \"WHERE\", \n+\t});\n+\t\n+\tprivate boolean isReservedWord(String s) {\n+\t\treturn _reserved.contains(s.toUpperCase());\n+\t}\n+\t\n+\tpublic List<String> tokenize(String s) throws IOException {\n+\t\tList<String> list = new ArrayList<String>();\n+\t\tStreamTokenizer tok = new StreamTokenizer(new StringReader(s));\n+\t\ttok.resetSyntax();\n+\t\ttok.wordChars('a', 'z');\n+\t\ttok.wordChars('0', '9');\n+\t\ttok.wordChars('A', 'Z');\n+\t\ttok.wordChars('\\'', '\\'');\n+\t\ttok.wordChars('=', '=');\n+\t\ttok.wordChars('>', '>');\n+\t\ttok.wordChars('<', '<');\n+\t\ttok.wordChars('!', '!');\n+\t\ttok.wordChars('.', '.');\n+\t\tfor (int ttype; (ttype = tok.nextToken()) != StreamTokenizer.TT_EOF;) {\n+\t\t\tif (ttype == StreamTokenizer.TT_WORD)\n+\t\t\t\tlist.add(tok.sval);\n+\t\t}\n+\t\treturn list;\n+\t}\n+\t\n+\tpublic boolean compare(String s1, String s2) {\n+\t\ttry {\n+\t\t\tList<String> list1 = tokenize(s1);\n+\t\t\tList<String> list2 = tokenize(s2);\n+\t\t\tif (list1.size() != list2.size()) {\n+\t\t\t\tSystem.err.println(\"Unequal tokens \" + list1.size() + \"!=\" +  list2.size());\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tfor (int i = 0; i < list1.size(); i++) {\n+\t\t\t\tString a = list1.get(i);\n+\t\t\t\tString b = list2.get(i);\n+\t\t\t\tboolean match = isReservedWord(a) ? a.equalsIgnoreCase(b) : a.equals(b);\n+\t\t\t\tif (!match) {\n+\t\t\t\t\tSystem.err.println(\"[\" + a + \"] does not match [\" + b + \"]\");\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn true;\n+\t\t} catch (IOException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\treturn false;\n+\t}\n+\t\n+\tpublic static void main(String[] args) throws Exception {\n+\t\tStringComparison c = new StringComparison();\n+\t\tString s1 = \"SELECT DISTINCT o FROM Order AS o JOIN o.lineItems AS l WHERE l.shipped != FALSE and l.name like 'hello'\";\n+\t\tString s2 = \"select DISTINCT o FROM Order AS o  JOIN o.lineItems AS  l WHERE l.shipped !=  FALSE and l.name like 'hello'\";\n+\t\tboolean match = c.compare(s1, s2);\n+\t\tif (!match) {\n+\t\t\tSystem.err.println(s1);\n+\t\t\tSystem.err.println(c.tokenize(s1));\n+\t\t\tSystem.err.println(s2);\n+\t\t\tSystem.err.println(c.tokenize(s2));\n+\t\t}\n+\t}\n+\n+}"},{"sha":"d7e627a37c42f8889277c6f7e7fc2458e3ea164b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Student.java","status":"modified","additions":29,"deletions":29,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Student.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Student.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Student.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,29 +1,29 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.criteria;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"CR_STUDENT\")\r\n-\r\n-public class Student {\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.criteria;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"CR_STUDENT\")\n+\n+public class Student {\n+\n+}"},{"sha":"d9ea3ff6fa66f8707fb2aa07f2a1ac6988642552","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCriteria.java","status":"modified","additions":585,"deletions":585,"changes":1170,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestCriteria.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,585 +1,585 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-\r\n-package org.apache.openjpa.persistence.criteria;\r\n-\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.Query;\r\n-\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.query.DomainObject;\r\n-import org.apache.openjpa.persistence.query.Expression;\r\n-import org.apache.openjpa.persistence.query.OpenJPAQueryBuilder;\r\n-import org.apache.openjpa.persistence.query.QueryBuilderImpl;\r\n-import org.apache.openjpa.persistence.query.QueryDefinition;\r\n-import org.apache.openjpa.persistence.query.SelectItem;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-\r\n-/**\r\n- * Tests QueryDefinition via a set of example use cases from Criteria API \r\n- * Section of Java Persistence API Version 2.0 [1].\r\n- * \r\n- * For each use case, a corresponding JPQL String is specified. The dynamically\r\n- * constructed QueryDefinition and JPQL are both executed and their results\r\n- * are compared for verification. As some of the use cases employ few \r\n- * yet unimplemented JPQL 2.0 constructs such as KEY() or INDEX() or CASE, \r\n- * when such queries fail to execute, the JPQL String is literally compared\r\n- * to the stringified QueryDefinition.\r\n- * \r\n- * [1] <A href=\"http://jcp.org/aboutJava/communityprocess/pr/jsr317/index.html\">\r\n- * JPA API Specification Version 2.0</A>\r\n- * \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-public class TestCriteria extends SingleEMFTestCase {\r\n-\tprotected OpenJPAQueryBuilder qb; \r\n-\tprivate static OpenJPAEntityManagerFactory emf = null;\r\n-\tprotected StringComparison comparator = new StringComparison();\r\n-\t\r\n-\tpublic void setUp() {\r\n-\t\tif (emf == null) {\r\n-\t\t    super.setUp(DROP_TABLES,\r\n-\t\t    \tAccount.class,\r\n-\t\t\t\tAddress.class, \r\n-\t\t\t\tContact.class,\r\n-\t\t\t\tContractor.class, \r\n-\t\t\t\tCourse.class, \r\n-\t\t\t\tCreditCard.class, \r\n-\t\t\t\tCustomer.class, \r\n-\t\t\t\tDepartment.class, \r\n-\t\t\t\tEmployee.class, \r\n-\t\t\t\tExempt.class, \r\n-\t\t\t\tFrequentFlierPlan.class,\r\n-\t\t\t\tItem.class,\r\n-\t\t\t\tLineItem.class,\r\n-\t\t\t\tManager.class, \r\n-\t\t\t\tPerson.class, \r\n-\t\t\t\tOrder.class, \r\n-\t\t\t\tPhone.class,\r\n-\t\t\t\tPhoto.class,\r\n-\t\t\t\tStudent.class, \r\n-\t\t\t\tTransaction.class,\r\n-\t\t\t\tVideoStore.class);\r\n-\t\t\temf = super.emf;\r\n-\t\t} \r\n-\t\tqb = (QueryBuilderImpl)emf.getDynamicQueryBuilder();\r\n-\t\temf.createEntityManager();\r\n-\t}\r\n-\t\r\n-\tpublic void tearDown() {\r\n-\t\t// do nothing as we may not have a database connection\r\n-\t}\r\n-\t\r\n-\tpublic void testMultipleDomainOfSameClass() {\r\n-\t\tDomainObject o1 = qb.createQueryDefinition(Order.class);\r\n-\t\tDomainObject o2 = o1.addRoot(Order.class);\r\n-\t\to1.select(o1)\r\n-\t\t  .where(o1.get(\"quantity\").greaterThan(o2.get(\"quantity\"))\r\n-\t\t    .and(o2.get(\"customer\").get(\"lastName\").equal(\"Smith\"))\r\n-\t\t    .and(o2.get(\"customer\").get(\"firstName\").equal(\"John\")));\r\n-\t\t\r\n-\t\tString jpql = \"select o from Order o, Order o2\" +\r\n-\t\t              \" where o.quantity > o2.quantity\" +\r\n-\t\t              \" and o2.customer.lastName = 'Smith'\" +\r\n-\t\t              \" and o2.customer.firstName = 'John'\";\r\n-\t\tcompare(jpql, o1);\r\n-\t}\r\n-\r\n-\tpublic void testFetchJoin() {\r\n-\t\tDomainObject d = qb.createQueryDefinition(Department.class);\r\n-\t\td.leftJoinFetch(\"employees\");\r\n-\t\td.where(d.get(\"deptNo\").equal(1));\r\n-\t\t\r\n-\t\t\r\n-\t\tString jpql = \"select d from Department d\" +\r\n-\t\t              \" LEFT JOIN FETCH d.employees\" +\r\n-\t\t              \" where d.deptNo = 1\";\r\n-\t\tcompare(jpql, d);\r\n-\t}\r\n-\t\r\n-\tpublic void testMultipartNavigation() {\r\n-\t\tDomainObject e = qb.createQueryDefinition(Employee.class);\r\n-\t\tDomainObject p = e.join(\"contactInfo\").join(\"phones\");\r\n-\t\te.where(e.get(\"contactInfo\").get(\"address\").get(\"zipCode\")\r\n-\t\t\t\t.equal(\"95094\")).select(p.get(\"vendor\"));\r\n-\t\t\t\t\r\n-\t\t\r\n-\t\tString jpql = \"select p.vendor from Employee e\" +\r\n-\t\t              \" JOIN e.contactInfo c JOIN c.phones p\" +\r\n-\t\t              \" where e.contactInfo.address.zipCode = '95094'\";\r\n-\t\tcompare(jpql, e);\r\n-\t}\r\n-\t\r\n-\tpublic void testOperatorPath() {\r\n-\t\tQueryDefinition qdef = qb.createQueryDefinition();\r\n-\t\tDomainObject item = qdef.addRoot(Item.class);\r\n-\t\tDomainObject photo = item.join(\"photos\");\r\n-\t\tqdef.select(item.get(\"name\"), photo.value())\r\n-\t\t    .where(photo.key().like(\"egret\"));\r\n-\t\t\r\n-\t\t\r\n-\t\tString jpql = \"select i.name, VALUE(p)\"\r\n-\t\t\t        + \" from Item i join i.photos p\"\r\n-\t\t\t        + \" where KEY(p) like 'egret'\";\r\n-\t\tcompare(jpql, qdef);\r\n-\t}\r\n-\t\r\n-\tpublic void testLiteral() {\r\n-\t\tDomainObject c = qb.createQueryDefinition(Customer.class);\r\n-\t\tDomainObject o = c.join(\"orders\");\r\n-\t\tDomainObject a = c.join(\"address\");\r\n-\t\to.where(a.get(\"state\").equal(\"CA\").and(a.get(\"county\").equal(\"Santa Clara\")));\r\n-\t\to.select(o.get(\"quantity\"), o.get(\"cost\").times(1.08), a.get(\"zipCode\"));\r\n-\t\t\r\n-\t\tString jpql = \"select o.quantity, o.cost*1.08, a.zipCode\" +\r\n-\t\t              \" from Customer c join c.orders o join c.address a\" +\r\n-\t\t              \" where a.state = 'CA' and a.county = 'Santa Clara'\";\r\n-\t\tcompare(jpql, c);\r\n-\t}\r\n-\t\r\n-\tpublic void testTypeExpression() {\r\n-\t\tDomainObject e = qb.createQueryDefinition(Employee.class);\r\n-\t\te.select(e.type())\r\n-\t\t .where(e.type().equal(Exempt.class).not());\r\n-\t\t\r\n-\t\tString jpql = \"select TYPE(e)\" +\r\n-\t\t              \" from Employee e\" +\r\n-\t\t              \" where TYPE(e) <> Exempt\";\r\n-\t\tcompare(jpql, e);\r\n-\t}\r\n-\r\n-\tpublic void testIndex() {\r\n-\t\tDomainObject c = qb.createQueryDefinition(Course.class);\r\n-\t\tDomainObject w = c.join(\"studentWaitList\");\r\n-\t\tc.where(c.get(\"name\").equal(\"Calculus\").and(w.index().equal(0)))\r\n-\t\t .select(w.get(\"name\"));\r\n-\t\t\r\n-\t\tString jpql = \"select s.name\" +\r\n-\t\t              \" from Course c join c.studentWaitList s\" +\r\n-\t\t              \" where c.name = 'Calculus' and INDEX(s) = 0\";\r\n-\t\tcompare(jpql, c);\r\n-\t}\r\n-\t\r\n-\tpublic void testSum() {\r\n-\t\tDomainObject o = qb.createQueryDefinition(Order.class);\r\n-\t\tDomainObject l = o.join(\"lineItems\");\r\n-\t\tDomainObject c = o.join(\"customer\");\r\n-\t\tc.where(c.get(\"lastName\").equal(\"Smith\").and(c.get(\"firstName\").equal(\"John\")))\r\n-\t\t .select(l.get(\"price\").sum());\r\n-\t\t\r\n-\t\tString jpql = \"select SUM(l.price)\" +\r\n-\t\t              \" from Order o join o.lineItems l JOIN o.customer c\" +\r\n-\t\t              \" where c.lastName = 'Smith' and c.firstName = 'John'\";\r\n-\t\tcompare(jpql, c);\r\n-\t}\r\n-\t\r\n-\tpublic void testSize() {\r\n-\t\tDomainObject d = qb.createQueryDefinition(Department.class);\r\n-\t\td.where(d.get(\"name\").equal(\"Sales\"))\r\n-\t\t .select(d.get(\"employees\").size());\r\n-\t\t\r\n-\t\tString jpql = \"select SIZE(d.employees)\" +\r\n-\t\t              \" from Department d \" +\r\n-\t\t              \" where d.name = 'Sales'\";\r\n-\t\tcompare(jpql, d);\r\n-\t}\r\n-\t\r\n-\tpublic void testGeneralCase() {\r\n-\t\tDomainObject e = qb.createQueryDefinition(Employee.class);\r\n-\t\te.where(e.get(\"department\").get(\"name\").equal(\"Engineering\"));\r\n-\t\te.select(e.get(\"name\"),\r\n-\t\te.generalCase()\r\n-\t\t.when(e.get(\"rating\").equal(1))\r\n-\t\t.then(e.get(\"salary\").times(1.1))\r\n-\t\t.when(e.get(\"rating\").equal(2))\r\n-\t\t.then(e.get(\"salary\").times(1.2))\r\n-\t\t.elseCase(e.get(\"salary\").times(1.01)));\r\n-\t\t\r\n-\t\tString jpql = \"SELECT e.name,\"\r\n-\t\t\t\t\t+ \" CASE WHEN e.rating = 1 THEN e.salary * 1.1\"\r\n-\t\t\t\t\t+ \" WHEN e.rating = 2 THEN e.salary * 1.2\"\r\n-\t\t\t\t\t+ \" ELSE e.salary * 1.01\"\r\n-\t\t\t\t\t+ \" END\"\r\n-\t\t\t\t\t+ \" FROM Employee e\"\r\n-\t\t\t\t\t+ \" WHERE e.department.name = 'Engineering'\";\r\n-\t\t\r\n-\t\tcompare(jpql, e);\r\n-\t}\r\n-\t\r\n-\tpublic void testMemberOf() {\r\n-\t\tDomainObject p = qb.createQueryDefinition(Person.class);\r\n-\t\tp.where(p.literal(\"Joe\").member(p.get(\"nicknames\")));\r\n-\t\t\r\n-\t\tString jpql = \"select p from Person p \" +\r\n-\t\t              \" where 'Joe' MEMBER OF p.nicknames\";\r\n-\t\tcompare(jpql, p);\r\n-\t}\r\n-\t\r\n-\tpublic void testParamater() {\r\n-\t\tQueryDefinition qdef = qb.createQueryDefinition();\r\n-\t\tDomainObject customer = qdef.addRoot(Customer.class);\r\n-\t\tqdef.where(customer.get(\"status\").equal(qdef.param(\"status\")));\r\n-\t\t\r\n-\t\tString jpql = \"select c from Customer c \" +\r\n-\t\t              \" where c.status = :status\";\r\n-\t\tcompare(jpql, qdef, \"status\", 1);\r\n-\t}\r\n-\t\r\n-\tpublic void testBetween() {\r\n-\t\tDomainObject c = qb.createQueryDefinition(CreditCard.class);\r\n-\t\tDomainObject t = c.join(\"transactionHistory\");\r\n-\t\tc.select(t).where(c.get(\"holder\").get(\"name\").equal(\"John Doe\")\r\n-\t\t\t\t.and(t.index().between(0, 9)));\r\n-\t\t\r\n-\t\t\r\n-\t\tString jpql = \"select t from CreditCard c JOIN c.transactionHistory t\" +\r\n-\t\t              \" where c.holder.name = 'John Doe' AND INDEX(t) \" +\r\n-\t\t              \" BETWEEN 0 AND 9\";\r\n-\t\t\r\n-\t\tcompare(jpql, c);\r\n-\t}\r\n-\t\r\n-\tpublic void testIsEmpty() {\r\n-\t\tDomainObject o = qb.createQueryDefinition(Order.class);\r\n-\t\to.where(o.get(\"lineItems\").isEmpty());\r\n-\t\t\r\n-\t\t\r\n-\t\tString jpql = \"select o from Order o \" +\r\n-\t\t              \" where o.lineItems IS EMPTY\";\r\n-\t\tcompare(jpql, o);\r\n-\t}\r\n-\t\r\n-\tpublic void testNonCorrelatedSubQuery() {\r\n-\t\tQueryDefinition q1 = qb.createQueryDefinition();\r\n-\t\tDomainObject goodCustomer = q1.addRoot(Customer.class);\r\n-\t\t\r\n-\t\tQueryDefinition q2 = qb.createQueryDefinition();\r\n-\t\tDomainObject customer = q2.addRoot(Customer.class);\r\n-\t\t\r\n-\t\tq1.where(goodCustomer.get(\"balanceOwned\")\r\n-\t\t\t\t.lessThan(q2.select(customer.get(\"balanceOwned\").avg())));\r\n-\t\t\r\n-\t\tString jpql = \"select c from Customer c \"\r\n-\t\t\t\t\t+ \" where c.balanceOwned < \" \r\n-\t\t\t\t\t+ \"(select AVG(c2.balanceOwned) from Customer c2)\";\r\n-\t\tcompare(jpql, q1);\r\n-\t}\r\n-\r\n-\tpublic void testNew() {\r\n-\t\tQueryDefinition q = qb.createQueryDefinition();\r\n-\t\tDomainObject customer = q.addRoot(Customer.class);\r\n-\t\tDomainObject order = customer.join(\"orders\");\r\n-\t\tq.where(order.get(\"count\").greaterThan(100))\r\n-\t\t .select(q.newInstance(Customer.class, customer.get(\"id\"),\r\n-\t\t                                       customer.get(\"status\"),\r\n-\t\t                                       order.get(\"count\")));\r\n-\t\t\r\n-\t\t\r\n-\t\tString jpql = \"SELECT NEW org.apache.openjpa.persistence.criteria.Customer\" \r\n-\t\t\t\t\t+ \"(c.id, c.status, o.count)\"\r\n-\t\t\t\t\t+ \" FROM Customer c JOIN c.orders o\" \r\n-\t\t\t\t\t+ \" WHERE o.count > 100\";\r\n-\t\tcompare(jpql, q);\r\n-\t}\r\n-\t\r\n-\tpublic void testKeyValueOperatorPath() {\r\n-\t\tQueryDefinition q = qb.createQueryDefinition();\r\n-\t\tDomainObject v = q.addRoot(VideoStore.class);\r\n-\t\tDomainObject i = v.join(\"videoInventory\");\r\n-\t\tq.where(v.get(\"location\").get(\"zipCode\").equal(\"94301\")\r\n-\t\t .and(i.value().greaterThan(0)));\r\n-\t\tq.select(v.get(\"location\").get(\"street\"), i.key().get(\"title\"), i.value());\r\n-\t\t\r\n-\t\tString jpql = \"SELECT v.location.street, KEY(v2).title, VALUE(v2)\" \r\n-\t\t\t\t\t+ \" FROM VideoStore v JOIN v.videoInventory v2\"\r\n-\t\t\t\t\t+ \" WHERE v.location.zipCode = '94301' AND VALUE(v2) > 0\";\r\n-\t\t\r\n-\t\tcompare(jpql, q);\r\n-\t}\r\n-\t\r\n-\tpublic void testGroupByHaving() {\r\n-\t\tQueryDefinition q = qb.createQueryDefinition();\r\n-\t\tDomainObject customer = q.addRoot(Customer.class);\r\n-\t\tq.select(customer.get(\"status\"), customer.get(\"filledOrderCount\").avg(),\r\n-\t\t         customer.count())\r\n-\t\t .groupBy(customer.get(\"status\"))\r\n-\t\t .having(customer.get(\"status\").in(1, 2));\r\n-\t\t\r\n-\t\tString jpql = \"SELECT c.status, AVG(c.filledOrderCount), COUNT(c)\"\r\n-\t\t\t\t\t+ \" FROM Customer c\"\r\n-\t\t\t\t\t+ \" GROUP BY c.status\"\r\n-\t\t\t\t\t+ \" HAVING c.status IN (1, 2)\";\r\n-\t\t\r\n-\t\tcompare(jpql, q);\r\n-\t}\r\n-\t\r\n-\tpublic void testGroupByHaving2() {\r\n-\t\tQueryDefinition q = qb.createQueryDefinition();\r\n-\t\tDomainObject customer = q.addRoot(Customer.class);\r\n-\t\tq.select(customer.get(\"country\"), customer.count())\r\n-\t\t .groupBy(customer.get(\"country\"))\r\n-\t\t .having(customer.count().greaterThan(30));\r\n-\t\t\r\n-\t\tString jpql = \"SELECT c.country, COUNT(c)\" \r\n-\t\t\t\t\t+ \" FROM Customer c\"\r\n-\t\t\t\t\t+ \" GROUP BY c.country\"\r\n-\t\t\t\t\t+ \" HAVING COUNT(c) > 30\";\r\n-\t\tcompare(jpql, q);\r\n-\t}\r\n-\t\r\n-\tpublic void testOrderBy() {\r\n-\t\tQueryDefinition q = qb.createQueryDefinition();\r\n-\t\tDomainObject customer = q.addRoot(Customer.class);\r\n-\t\tDomainObject order = customer.join(\"orders\");\r\n-\t\tDomainObject address = customer.join(\"address\");\r\n-\t\tq.where(address.get(\"state\").equal(\"CA\"))\r\n-\t\t.select(order)\r\n-\t\t.orderBy(order.get(\"quantity\").desc(), order.get(\"totalcost\"));\r\n-\t\tString jpql = \"SELECT o\"\r\n-\t\t\t\t\t+ \" FROM Customer c JOIN c.orders o JOIN c.address a\"\r\n-\t\t\t\t\t+ \" WHERE a.state = 'CA'\"\r\n-\t\t\t\t\t+ \" ORDER BY o.quantity DESC, o.totalcost\";\t\t\r\n-\t\tcompare(jpql, q);\r\n-\t}\r\n-\t\r\n-\tpublic void testOrderBy2() {\r\n-\t\tQueryDefinition q = qb.createQueryDefinition();\r\n-\t\tDomainObject customer = q.addRoot(Customer.class);\r\n-\t\tDomainObject order = customer.join(\"orders\");\r\n-\t\tDomainObject address = customer.join(\"address\");\r\n-\t\tq.where(address.get(\"state\").equal(\"CA\"))\r\n-\t\t.select(order.get(\"quantity\"), address.get(\"zipCode\"))\r\n-\t\t.orderBy(order.get(\"quantity\").desc(), address.get(\"zipCode\"));\r\n-\t\tString jpql = \"SELECT o.quantity, a.zipCode\"\r\n-\t\t\t\t\t+ \" FROM Customer c JOIN c.orders o JOIN c.address a\"\r\n-\t\t\t\t\t+ \" WHERE a.state = 'CA'\"\r\n-\t\t\t\t\t+ \" ORDER BY o.quantity DESC, a.zipCode\";\r\n-\t\tcompare(jpql, q);\r\n-\t}\r\n-\t\r\n-\tpublic void testOrderByExpression() {\r\n-\t\tDomainObject o = qb.createQueryDefinition(Order.class);\r\n-\t\tDomainObject a = o.join(\"customer\").join(\"address\");\r\n-\t\tSelectItem taxedCost = o.get(\"cost\").times(1.08);\r\n-\t\to.select(o.get(\"quantity\"), taxedCost, a.get(\"zipCode\"))\r\n-\t\t.where(a.get(\"state\").equal(\"CA\")\r\n-\t\t.and(a.get(\"county\").equal(\"Santa Clara\")))\r\n-\t\t.orderBy(o.get(\"quantity\"), taxedCost, a.get(\"zipCode\"));\r\n-\t\t\r\n-\t\tString jpql = \"SELECT o.quantity, o.cost*1.08 as o2, a.zipCode\" \r\n-\t\t\t\t\t+ \" FROM Order o JOIN o.customer c JOIN c.address a\"\r\n-\t\t\t\t\t+ \" WHERE a.state = 'CA' AND a.county = 'Santa Clara'\"\r\n-\t\t\t\t\t+ \" ORDER BY o.quantity, o2, a.zipCode\";\r\n-\t\t\r\n-\t\tcompare(jpql, o);\r\n-\t}\r\n-\t\r\n-\tpublic void testCorrelatedSubquery() {\r\n-\t\tQueryDefinition q1 = qb.createQueryDefinition();\r\n-\t\tDomainObject emp = q1.addRoot(Employee.class);\r\n-\t\t\r\n-\t\tQueryDefinition q2 = qb.createQueryDefinition();\r\n-\t\tDomainObject spouseEmp = q2.addRoot(Employee.class);\r\n-\t\t\r\n-\t\tq2.where(spouseEmp.equal(emp.get(\"spouse\"))).select(spouseEmp);\r\n-\t\tq1.selectDistinct(emp).where(q2.exists());\r\n-\t\t\r\n-\t\tString jpql = \"SELECT DISTINCT e \"\r\n-\t\t\t\t\t+ \" FROM Employee e\"\r\n-\t\t\t\t\t+ \" WHERE EXISTS (\"\r\n-\t\t\t\t\t        + \" SELECT e2 \" \r\n-\t\t\t\t\t        + \" FROM Employee e2\"\r\n-\t\t\t\t\t        + \" WHERE e2 = e.spouse)\";\r\n-\t\t\r\n-\t\tcompare(jpql, q1);\r\n-\t}\r\n-\t\r\n-\tpublic void testCreateSubquery() {\r\n-\t\tDomainObject customer = qb.createQueryDefinition(Customer.class);\r\n-\t\tDomainObject order = qb.createSubqueryDefinition(customer.get(\"orders\"));\r\n-\t\tcustomer.where(order.select(order.get(\"cost\").avg()).greaterThan(100));\r\n-\t\t\r\n-\t\tString jpql = \"SELECT c \"\r\n-\t\t\t\t\t+ \" FROM Customer c\"\r\n-\t\t\t\t\t+ \" WHERE (SELECT AVG(o.cost) FROM c.orders o) > 100\";\r\n-\t\t\r\n-\t\tcompare(jpql, customer);\r\n-\t}\r\n-\t\r\n-\tpublic void testTypeList() {\r\n-\t\tDomainObject q = qb.createQueryDefinition(Employee.class);\r\n-\t\tq.where(q.type().in(Exempt.class, Contractor.class));\r\n-\t\t\r\n-\t\tString jpql = \"SELECT e \"\r\n-\t\t\t+ \" FROM Employee e\"\r\n-\t\t\t+ \" WHERE TYPE(e) IN (Exempt, Contractor)\";\r\n-\t\t\r\n-\t\tcompare(jpql, q);\r\n-\t}\r\n-\t\r\n-\tpublic void testStringList() {\r\n-\t\tDomainObject q = qb.createQueryDefinition(Customer.class);\r\n-\t\tq.where(q.get(\"country\").in(\"USA\", \"UK\", \"France\"));\r\n-\t\t\r\n-\t\tString jpql = \"SELECT c \"\r\n-\t\t\t+ \" FROM Customer c\"\r\n-\t\t\t+ \" WHERE c.country IN ('USA', 'UK', 'France')\";\r\n-\t\tcompare(jpql, q);\r\n-\t}\r\n-\t\r\n-\tpublic void testConcat() {\r\n-\t\tDomainObject e = qb.createQueryDefinition(Employee.class);\r\n-\t\tDomainObject f = e.join(\"frequentFlierPlan\");\r\n-\t\tExpression c = \r\n-\t\te.generalCase().when(f.get(\"annualMiles\").greaterThan(50000)).then(\"Platinum\")\r\n-\t\t               .when(f.get(\"annualMiles\").greaterThan(25000)).then(\"Gold\")\r\n-\t\t               .elseCase(\"XYZ\");\r\n-\t\te.select(e.get(\"name\"), f.get(\"name\"), e.concat(c,e.literal(\"Frequent Flyer\")));\r\n-\t\t\r\n-\t\tString jpql = \"SELECT e.name, f.name, CONCAT(\" \r\n-\t\t\t+ \" CASE WHEN f.annualMiles > 50000 THEN 'Platinum'\" \r\n-\t\t\t+ \" WHEN f.annualMiles > 25000 THEN 'Gold'\" \r\n-\t\t\t+ \" ELSE 'XYZ' END, 'Frequent Flyer')\" \r\n-\t\t\t+ \" FROM Employee e JOIN e.frequentFlierPlan f\";\r\n-\t\t\t\r\n-\t\tcompare(jpql, e);\r\n-\t}\r\n-\t\r\n-\tpublic void testCorrelatedSubquerySpecialCase1() {\r\n-\t\tDomainObject o = qb.createQueryDefinition(Order.class);\r\n-\t\tDomainObject a = qb.createSubqueryDefinition(o.get(\"customer\").get(\"accounts\"));\r\n-\t\to.select(o)\r\n-\t\t .where(o.literal(10000).lessThan(a.select(a.get(\"balance\")).all()));\r\n-\t\t\r\n-\t\tString jpql = \"select o from Order o\"\r\n-\t\t\t        + \" where 10000 < ALL \"\r\n-\t\t\t        + \" (select a.balance from o.customer c join o.customer.accounts a)\";\r\n-\t\t\r\n-\t\tcompare(jpql, o);\r\n-\t}\r\n-\t\r\n-\tpublic void testCorrelatedSubquerySpecialCase2() {\r\n-\t\tDomainObject o = qb.createQueryDefinition(Order.class);\r\n-\t\tDomainObject c = o.join(\"customer\");\r\n-\t\tDomainObject a = qb.createSubqueryDefinition(c.get(\"accounts\"));\r\n-\t\to.select(o)\r\n-\t\t .where(o.literal(10000).lessThan(a.select(a.get(\"balance\")).all()));\r\n-\t\t\r\n-\t\tString jpql = \"select o from Order o JOIN o.customer c\"\r\n-\t\t\t        + \" where 10000 < ALL \"\r\n-\t\t\t        + \" (select a.balance from c.accounts a)\";\r\n-\t\t\r\n-\t\tcompare(jpql, o);\r\n-\t}\r\n-\t\r\n-\tpublic void testRecursiveDefinitionIsNotAllowed() {\r\n-\t\tDomainObject q = qb.createQueryDefinition(Customer.class);\r\n-\t\tq.where(q.exists().and(q.get(\"name\").equal(\"wrong\")));\r\n-\t\t\r\n-\t\ttry {\r\n-\t\t\tqb.toJPQL(q);\r\n-\t\t\tfail();\r\n-\t\t} catch (RuntimeException e) {\r\n-\t\t\t// good\r\n-\t\t}\r\n-\t}\r\n-\t\r\n-\t// ---------------------------------------------------------------------\r\n-\t// verification methods\r\n-\t// ---------------------------------------------------------------------\r\n-\t\r\n-\t/**\r\n-\t * Compare by executing the queries generated from the given JPQL and \r\n-\t * QueryDefinition. \r\n-\t */\r\n-\tvoid compare(String jpql, QueryDefinition q) {\r\n-\t\tcompare(jpql, q, (Object[])null);\r\n-\t}\r\n-\t\r\n-\t/**\r\n-\t * Compare hand crafted JPQL and QueryDefinition.\r\n-\t * If skip is null then execute both queries against the database, otherwise\r\n-\t * compare them literally. \r\n-\t */\r\n-\tvoid compare(String jpql, QueryDefinition q, Object...p) {\r\n-\t\texecuteActually(jpql, q, p);\r\n-\t}\r\n-\t\r\n-\t/**\r\n-\t * Compare the string version of QueryDefinition and given JPQL string with\r\n-\t * some flexibility of case-insensitive reserved words.\r\n-\t */\r\n-\tprivate void compareLiterally(String jpql, QueryDefinition q) {\r\n-\t\tString actual = qb.toJPQL(q);\r\n-\t\tif (!comparator.compare(jpql,actual)) \r\n-\t\t\tfail(\"\\r\\nExpected: [\" + jpql + \"]\\r\\nActual  : [\" + actual + \"]\");\r\n-\t}\r\n-\t\r\n-\t/**\r\n-\t * Executes the given JPQL and QueryDefinition independently and compare \r\n-\t * their results.\r\n-\t */\r\n-\tprivate void executeActually(String jpql, QueryDefinition q, Object...p) {\r\n-\t\tOpenJPAEntityManager em = emf.createEntityManager();\r\n-\t\tList<?> criteriaResult = null;\r\n-\t\tList<?> jpqlResult = null;\r\n-\t\tThrowable criteriaError = null;\r\n-\t\tThrowable jpqlError = null;\r\n-\t\t\r\n-\t\ttry {\r\n-\t\t\tQuery cq = em.createDynamicQuery(q);\r\n-\t\t\tsetParameters(cq, p);\r\n-\t\t\tcriteriaResult = cq.getResultList();\r\n-\t\t} catch (Exception e) {\r\n-\t\t\tcriteriaError = e;\t\r\n-\t\t}\r\n-\t\ttry {\r\n-\t\t\tQuery nq = em.createQuery(jpql);\r\n-\t\t\tsetParameters(nq, p);\r\n-\t\t\tjpqlResult = nq.getResultList();\r\n-\t\t} catch (Exception e) {\r\n-\t\t\tjpqlError = e;\r\n-\t\t}\r\n-\t\t\r\n-\t\tif (criteriaError == null && jpqlError == null) {\r\n-\t\t\tassertEquals(criteriaResult.size(), jpqlResult.size());\r\n-\t\t} else if (criteriaError != null && jpqlError == null) {\r\n-\t\t\tfail(\"QueryDefinition generated invalid JPQL\\r\\n\" \r\n-\t\t\t\t+ \"Criteria [\" + qb.toJPQL(q) + \"]\\r\\n\"\r\n-\t\t\t\t+ \"error : \" + criteriaError.getMessage());\r\n-\t\t} else if (criteriaError == null && jpqlError != null) {\r\n-\t\t\tfail(\"Handcrafted JPQL is invalid \\r\\n\" \r\n-\t\t\t\t\t+ \"JPQL [\" + jpql + \"]\\r\\n\"\r\n-\t\t\t\t\t+ \"error : \" + jpqlError.getMessage());\r\n-\t\t} else {\r\n-\t\t\tcompareLiterally(jpql, q);\r\n-\t\t}\r\n-\t}\r\n-\t\r    void setParameters(Query q, Object...p) {\r\n-\t\tif (p == null)\r\n-\t\t\treturn;\r\n-\t\tfor (int i = 0; i < p.length; i += 2) {\r\n-\t\t\tq.setParameter(p[i].toString(), p[i+1]);\r\n-\t\t}\r\n-    } \r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+\n+package org.apache.openjpa.persistence.criteria;\n+\n+import java.util.List;\n+\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.query.DomainObject;\n+import org.apache.openjpa.persistence.query.Expression;\n+import org.apache.openjpa.persistence.query.OpenJPAQueryBuilder;\n+import org.apache.openjpa.persistence.query.QueryBuilderImpl;\n+import org.apache.openjpa.persistence.query.QueryDefinition;\n+import org.apache.openjpa.persistence.query.SelectItem;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+\n+/**\n+ * Tests QueryDefinition via a set of example use cases from Criteria API \n+ * Section of Java Persistence API Version 2.0 [1].\n+ * \n+ * For each use case, a corresponding JPQL String is specified. The dynamically\n+ * constructed QueryDefinition and JPQL are both executed and their results\n+ * are compared for verification. As some of the use cases employ few \n+ * yet unimplemented JPQL 2.0 constructs such as KEY() or INDEX() or CASE, \n+ * when such queries fail to execute, the JPQL String is literally compared\n+ * to the stringified QueryDefinition.\n+ * \n+ * [1] <A href=\"http://jcp.org/aboutJava/communityprocess/pr/jsr317/index.html\">\n+ * JPA API Specification Version 2.0</A>\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class TestCriteria extends SingleEMFTestCase {\n+\tprotected OpenJPAQueryBuilder qb; \n+\tprivate static OpenJPAEntityManagerFactory emf = null;\n+\tprotected StringComparison comparator = new StringComparison();\n+\t\n+\tpublic void setUp() {\n+\t\tif (emf == null) {\n+\t\t    super.setUp(DROP_TABLES,\n+\t\t    \tAccount.class,\n+\t\t\t\tAddress.class, \n+\t\t\t\tContact.class,\n+\t\t\t\tContractor.class, \n+\t\t\t\tCourse.class, \n+\t\t\t\tCreditCard.class, \n+\t\t\t\tCustomer.class, \n+\t\t\t\tDepartment.class, \n+\t\t\t\tEmployee.class, \n+\t\t\t\tExempt.class, \n+\t\t\t\tFrequentFlierPlan.class,\n+\t\t\t\tItem.class,\n+\t\t\t\tLineItem.class,\n+\t\t\t\tManager.class, \n+\t\t\t\tPerson.class, \n+\t\t\t\tOrder.class, \n+\t\t\t\tPhone.class,\n+\t\t\t\tPhoto.class,\n+\t\t\t\tStudent.class, \n+\t\t\t\tTransaction.class,\n+\t\t\t\tVideoStore.class);\n+\t\t\temf = super.emf;\n+\t\t} \n+\t\tqb = (QueryBuilderImpl)emf.getDynamicQueryBuilder();\n+\t\temf.createEntityManager();\n+\t}\n+\t\n+\tpublic void tearDown() {\n+\t\t// do nothing as we may not have a database connection\n+\t}\n+\t\n+\tpublic void testMultipleDomainOfSameClass() {\n+\t\tDomainObject o1 = qb.createQueryDefinition(Order.class);\n+\t\tDomainObject o2 = o1.addRoot(Order.class);\n+\t\to1.select(o1)\n+\t\t  .where(o1.get(\"quantity\").greaterThan(o2.get(\"quantity\"))\n+\t\t    .and(o2.get(\"customer\").get(\"lastName\").equal(\"Smith\"))\n+\t\t    .and(o2.get(\"customer\").get(\"firstName\").equal(\"John\")));\n+\t\t\n+\t\tString jpql = \"select o from Order o, Order o2\" +\n+\t\t              \" where o.quantity > o2.quantity\" +\n+\t\t              \" and o2.customer.lastName = 'Smith'\" +\n+\t\t              \" and o2.customer.firstName = 'John'\";\n+\t\tcompare(jpql, o1);\n+\t}\n+\n+\tpublic void testFetchJoin() {\n+\t\tDomainObject d = qb.createQueryDefinition(Department.class);\n+\t\td.leftJoinFetch(\"employees\");\n+\t\td.where(d.get(\"deptNo\").equal(1));\n+\t\t\n+\t\t\n+\t\tString jpql = \"select d from Department d\" +\n+\t\t              \" LEFT JOIN FETCH d.employees\" +\n+\t\t              \" where d.deptNo = 1\";\n+\t\tcompare(jpql, d);\n+\t}\n+\t\n+\tpublic void testMultipartNavigation() {\n+\t\tDomainObject e = qb.createQueryDefinition(Employee.class);\n+\t\tDomainObject p = e.join(\"contactInfo\").join(\"phones\");\n+\t\te.where(e.get(\"contactInfo\").get(\"address\").get(\"zipCode\")\n+\t\t\t\t.equal(\"95094\")).select(p.get(\"vendor\"));\n+\t\t\t\t\n+\t\t\n+\t\tString jpql = \"select p.vendor from Employee e\" +\n+\t\t              \" JOIN e.contactInfo c JOIN c.phones p\" +\n+\t\t              \" where e.contactInfo.address.zipCode = '95094'\";\n+\t\tcompare(jpql, e);\n+\t}\n+\t\n+\tpublic void testOperatorPath() {\n+\t\tQueryDefinition qdef = qb.createQueryDefinition();\n+\t\tDomainObject item = qdef.addRoot(Item.class);\n+\t\tDomainObject photo = item.join(\"photos\");\n+\t\tqdef.select(item.get(\"name\"), photo.value())\n+\t\t    .where(photo.key().like(\"egret\"));\n+\t\t\n+\t\t\n+\t\tString jpql = \"select i.name, VALUE(p)\"\n+\t\t\t        + \" from Item i join i.photos p\"\n+\t\t\t        + \" where KEY(p) like 'egret'\";\n+\t\tcompare(jpql, qdef);\n+\t}\n+\t\n+\tpublic void testLiteral() {\n+\t\tDomainObject c = qb.createQueryDefinition(Customer.class);\n+\t\tDomainObject o = c.join(\"orders\");\n+\t\tDomainObject a = c.join(\"address\");\n+\t\to.where(a.get(\"state\").equal(\"CA\").and(a.get(\"county\").equal(\"Santa Clara\")));\n+\t\to.select(o.get(\"quantity\"), o.get(\"cost\").times(1.08), a.get(\"zipCode\"));\n+\t\t\n+\t\tString jpql = \"select o.quantity, o.cost*1.08, a.zipCode\" +\n+\t\t              \" from Customer c join c.orders o join c.address a\" +\n+\t\t              \" where a.state = 'CA' and a.county = 'Santa Clara'\";\n+\t\tcompare(jpql, c);\n+\t}\n+\t\n+\tpublic void testTypeExpression() {\n+\t\tDomainObject e = qb.createQueryDefinition(Employee.class);\n+\t\te.select(e.type())\n+\t\t .where(e.type().equal(Exempt.class).not());\n+\t\t\n+\t\tString jpql = \"select TYPE(e)\" +\n+\t\t              \" from Employee e\" +\n+\t\t              \" where TYPE(e) <> Exempt\";\n+\t\tcompare(jpql, e);\n+\t}\n+\n+\tpublic void testIndex() {\n+\t\tDomainObject c = qb.createQueryDefinition(Course.class);\n+\t\tDomainObject w = c.join(\"studentWaitList\");\n+\t\tc.where(c.get(\"name\").equal(\"Calculus\").and(w.index().equal(0)))\n+\t\t .select(w.get(\"name\"));\n+\t\t\n+\t\tString jpql = \"select s.name\" +\n+\t\t              \" from Course c join c.studentWaitList s\" +\n+\t\t              \" where c.name = 'Calculus' and INDEX(s) = 0\";\n+\t\tcompare(jpql, c);\n+\t}\n+\t\n+\tpublic void testSum() {\n+\t\tDomainObject o = qb.createQueryDefinition(Order.class);\n+\t\tDomainObject l = o.join(\"lineItems\");\n+\t\tDomainObject c = o.join(\"customer\");\n+\t\tc.where(c.get(\"lastName\").equal(\"Smith\").and(c.get(\"firstName\").equal(\"John\")))\n+\t\t .select(l.get(\"price\").sum());\n+\t\t\n+\t\tString jpql = \"select SUM(l.price)\" +\n+\t\t              \" from Order o join o.lineItems l JOIN o.customer c\" +\n+\t\t              \" where c.lastName = 'Smith' and c.firstName = 'John'\";\n+\t\tcompare(jpql, c);\n+\t}\n+\t\n+\tpublic void testSize() {\n+\t\tDomainObject d = qb.createQueryDefinition(Department.class);\n+\t\td.where(d.get(\"name\").equal(\"Sales\"))\n+\t\t .select(d.get(\"employees\").size());\n+\t\t\n+\t\tString jpql = \"select SIZE(d.employees)\" +\n+\t\t              \" from Department d \" +\n+\t\t              \" where d.name = 'Sales'\";\n+\t\tcompare(jpql, d);\n+\t}\n+\t\n+\tpublic void testGeneralCase() {\n+\t\tDomainObject e = qb.createQueryDefinition(Employee.class);\n+\t\te.where(e.get(\"department\").get(\"name\").equal(\"Engineering\"));\n+\t\te.select(e.get(\"name\"),\n+\t\te.generalCase()\n+\t\t.when(e.get(\"rating\").equal(1))\n+\t\t.then(e.get(\"salary\").times(1.1))\n+\t\t.when(e.get(\"rating\").equal(2))\n+\t\t.then(e.get(\"salary\").times(1.2))\n+\t\t.elseCase(e.get(\"salary\").times(1.01)));\n+\t\t\n+\t\tString jpql = \"SELECT e.name,\"\n+\t\t\t\t\t+ \" CASE WHEN e.rating = 1 THEN e.salary * 1.1\"\n+\t\t\t\t\t+ \" WHEN e.rating = 2 THEN e.salary * 1.2\"\n+\t\t\t\t\t+ \" ELSE e.salary * 1.01\"\n+\t\t\t\t\t+ \" END\"\n+\t\t\t\t\t+ \" FROM Employee e\"\n+\t\t\t\t\t+ \" WHERE e.department.name = 'Engineering'\";\n+\t\t\n+\t\tcompare(jpql, e);\n+\t}\n+\t\n+\tpublic void testMemberOf() {\n+\t\tDomainObject p = qb.createQueryDefinition(Person.class);\n+\t\tp.where(p.literal(\"Joe\").member(p.get(\"nicknames\")));\n+\t\t\n+\t\tString jpql = \"select p from Person p \" +\n+\t\t              \" where 'Joe' MEMBER OF p.nicknames\";\n+\t\tcompare(jpql, p);\n+\t}\n+\t\n+\tpublic void testParamater() {\n+\t\tQueryDefinition qdef = qb.createQueryDefinition();\n+\t\tDomainObject customer = qdef.addRoot(Customer.class);\n+\t\tqdef.where(customer.get(\"status\").equal(qdef.param(\"status\")));\n+\t\t\n+\t\tString jpql = \"select c from Customer c \" +\n+\t\t              \" where c.status = :status\";\n+\t\tcompare(jpql, qdef, \"status\", 1);\n+\t}\n+\t\n+\tpublic void testBetween() {\n+\t\tDomainObject c = qb.createQueryDefinition(CreditCard.class);\n+\t\tDomainObject t = c.join(\"transactionHistory\");\n+\t\tc.select(t).where(c.get(\"holder\").get(\"name\").equal(\"John Doe\")\n+\t\t\t\t.and(t.index().between(0, 9)));\n+\t\t\n+\t\t\n+\t\tString jpql = \"select t from CreditCard c JOIN c.transactionHistory t\" +\n+\t\t              \" where c.holder.name = 'John Doe' AND INDEX(t) \" +\n+\t\t              \" BETWEEN 0 AND 9\";\n+\t\t\n+\t\tcompare(jpql, c);\n+\t}\n+\t\n+\tpublic void testIsEmpty() {\n+\t\tDomainObject o = qb.createQueryDefinition(Order.class);\n+\t\to.where(o.get(\"lineItems\").isEmpty());\n+\t\t\n+\t\t\n+\t\tString jpql = \"select o from Order o \" +\n+\t\t              \" where o.lineItems IS EMPTY\";\n+\t\tcompare(jpql, o);\n+\t}\n+\t\n+\tpublic void testNonCorrelatedSubQuery() {\n+\t\tQueryDefinition q1 = qb.createQueryDefinition();\n+\t\tDomainObject goodCustomer = q1.addRoot(Customer.class);\n+\t\t\n+\t\tQueryDefinition q2 = qb.createQueryDefinition();\n+\t\tDomainObject customer = q2.addRoot(Customer.class);\n+\t\t\n+\t\tq1.where(goodCustomer.get(\"balanceOwned\")\n+\t\t\t\t.lessThan(q2.select(customer.get(\"balanceOwned\").avg())));\n+\t\t\n+\t\tString jpql = \"select c from Customer c \"\n+\t\t\t\t\t+ \" where c.balanceOwned < \" \n+\t\t\t\t\t+ \"(select AVG(c2.balanceOwned) from Customer c2)\";\n+\t\tcompare(jpql, q1);\n+\t}\n+\n+\tpublic void testNew() {\n+\t\tQueryDefinition q = qb.createQueryDefinition();\n+\t\tDomainObject customer = q.addRoot(Customer.class);\n+\t\tDomainObject order = customer.join(\"orders\");\n+\t\tq.where(order.get(\"count\").greaterThan(100))\n+\t\t .select(q.newInstance(Customer.class, customer.get(\"id\"),\n+\t\t                                       customer.get(\"status\"),\n+\t\t                                       order.get(\"count\")));\n+\t\t\n+\t\t\n+\t\tString jpql = \"SELECT NEW org.apache.openjpa.persistence.criteria.Customer\" \n+\t\t\t\t\t+ \"(c.id, c.status, o.count)\"\n+\t\t\t\t\t+ \" FROM Customer c JOIN c.orders o\" \n+\t\t\t\t\t+ \" WHERE o.count > 100\";\n+\t\tcompare(jpql, q);\n+\t}\n+\t\n+\tpublic void testKeyValueOperatorPath() {\n+\t\tQueryDefinition q = qb.createQueryDefinition();\n+\t\tDomainObject v = q.addRoot(VideoStore.class);\n+\t\tDomainObject i = v.join(\"videoInventory\");\n+\t\tq.where(v.get(\"location\").get(\"zipCode\").equal(\"94301\")\n+\t\t .and(i.value().greaterThan(0)));\n+\t\tq.select(v.get(\"location\").get(\"street\"), i.key().get(\"title\"), i.value());\n+\t\t\n+\t\tString jpql = \"SELECT v.location.street, KEY(v2).title, VALUE(v2)\" \n+\t\t\t\t\t+ \" FROM VideoStore v JOIN v.videoInventory v2\"\n+\t\t\t\t\t+ \" WHERE v.location.zipCode = '94301' AND VALUE(v2) > 0\";\n+\t\t\n+\t\tcompare(jpql, q);\n+\t}\n+\t\n+\tpublic void testGroupByHaving() {\n+\t\tQueryDefinition q = qb.createQueryDefinition();\n+\t\tDomainObject customer = q.addRoot(Customer.class);\n+\t\tq.select(customer.get(\"status\"), customer.get(\"filledOrderCount\").avg(),\n+\t\t         customer.count())\n+\t\t .groupBy(customer.get(\"status\"))\n+\t\t .having(customer.get(\"status\").in(1, 2));\n+\t\t\n+\t\tString jpql = \"SELECT c.status, AVG(c.filledOrderCount), COUNT(c)\"\n+\t\t\t\t\t+ \" FROM Customer c\"\n+\t\t\t\t\t+ \" GROUP BY c.status\"\n+\t\t\t\t\t+ \" HAVING c.status IN (1, 2)\";\n+\t\t\n+\t\tcompare(jpql, q);\n+\t}\n+\t\n+\tpublic void testGroupByHaving2() {\n+\t\tQueryDefinition q = qb.createQueryDefinition();\n+\t\tDomainObject customer = q.addRoot(Customer.class);\n+\t\tq.select(customer.get(\"country\"), customer.count())\n+\t\t .groupBy(customer.get(\"country\"))\n+\t\t .having(customer.count().greaterThan(30));\n+\t\t\n+\t\tString jpql = \"SELECT c.country, COUNT(c)\" \n+\t\t\t\t\t+ \" FROM Customer c\"\n+\t\t\t\t\t+ \" GROUP BY c.country\"\n+\t\t\t\t\t+ \" HAVING COUNT(c) > 30\";\n+\t\tcompare(jpql, q);\n+\t}\n+\t\n+\tpublic void testOrderBy() {\n+\t\tQueryDefinition q = qb.createQueryDefinition();\n+\t\tDomainObject customer = q.addRoot(Customer.class);\n+\t\tDomainObject order = customer.join(\"orders\");\n+\t\tDomainObject address = customer.join(\"address\");\n+\t\tq.where(address.get(\"state\").equal(\"CA\"))\n+\t\t.select(order)\n+\t\t.orderBy(order.get(\"quantity\").desc(), order.get(\"totalcost\"));\n+\t\tString jpql = \"SELECT o\"\n+\t\t\t\t\t+ \" FROM Customer c JOIN c.orders o JOIN c.address a\"\n+\t\t\t\t\t+ \" WHERE a.state = 'CA'\"\n+\t\t\t\t\t+ \" ORDER BY o.quantity DESC, o.totalcost\";\t\t\n+\t\tcompare(jpql, q);\n+\t}\n+\t\n+\tpublic void testOrderBy2() {\n+\t\tQueryDefinition q = qb.createQueryDefinition();\n+\t\tDomainObject customer = q.addRoot(Customer.class);\n+\t\tDomainObject order = customer.join(\"orders\");\n+\t\tDomainObject address = customer.join(\"address\");\n+\t\tq.where(address.get(\"state\").equal(\"CA\"))\n+\t\t.select(order.get(\"quantity\"), address.get(\"zipCode\"))\n+\t\t.orderBy(order.get(\"quantity\").desc(), address.get(\"zipCode\"));\n+\t\tString jpql = \"SELECT o.quantity, a.zipCode\"\n+\t\t\t\t\t+ \" FROM Customer c JOIN c.orders o JOIN c.address a\"\n+\t\t\t\t\t+ \" WHERE a.state = 'CA'\"\n+\t\t\t\t\t+ \" ORDER BY o.quantity DESC, a.zipCode\";\n+\t\tcompare(jpql, q);\n+\t}\n+\t\n+\tpublic void testOrderByExpression() {\n+\t\tDomainObject o = qb.createQueryDefinition(Order.class);\n+\t\tDomainObject a = o.join(\"customer\").join(\"address\");\n+\t\tSelectItem taxedCost = o.get(\"cost\").times(1.08);\n+\t\to.select(o.get(\"quantity\"), taxedCost, a.get(\"zipCode\"))\n+\t\t.where(a.get(\"state\").equal(\"CA\")\n+\t\t.and(a.get(\"county\").equal(\"Santa Clara\")))\n+\t\t.orderBy(o.get(\"quantity\"), taxedCost, a.get(\"zipCode\"));\n+\t\t\n+\t\tString jpql = \"SELECT o.quantity, o.cost*1.08 as o2, a.zipCode\" \n+\t\t\t\t\t+ \" FROM Order o JOIN o.customer c JOIN c.address a\"\n+\t\t\t\t\t+ \" WHERE a.state = 'CA' AND a.county = 'Santa Clara'\"\n+\t\t\t\t\t+ \" ORDER BY o.quantity, o2, a.zipCode\";\n+\t\t\n+\t\tcompare(jpql, o);\n+\t}\n+\t\n+\tpublic void testCorrelatedSubquery() {\n+\t\tQueryDefinition q1 = qb.createQueryDefinition();\n+\t\tDomainObject emp = q1.addRoot(Employee.class);\n+\t\t\n+\t\tQueryDefinition q2 = qb.createQueryDefinition();\n+\t\tDomainObject spouseEmp = q2.addRoot(Employee.class);\n+\t\t\n+\t\tq2.where(spouseEmp.equal(emp.get(\"spouse\"))).select(spouseEmp);\n+\t\tq1.selectDistinct(emp).where(q2.exists());\n+\t\t\n+\t\tString jpql = \"SELECT DISTINCT e \"\n+\t\t\t\t\t+ \" FROM Employee e\"\n+\t\t\t\t\t+ \" WHERE EXISTS (\"\n+\t\t\t\t\t        + \" SELECT e2 \" \n+\t\t\t\t\t        + \" FROM Employee e2\"\n+\t\t\t\t\t        + \" WHERE e2 = e.spouse)\";\n+\t\t\n+\t\tcompare(jpql, q1);\n+\t}\n+\t\n+\tpublic void testCreateSubquery() {\n+\t\tDomainObject customer = qb.createQueryDefinition(Customer.class);\n+\t\tDomainObject order = qb.createSubqueryDefinition(customer.get(\"orders\"));\n+\t\tcustomer.where(order.select(order.get(\"cost\").avg()).greaterThan(100));\n+\t\t\n+\t\tString jpql = \"SELECT c \"\n+\t\t\t\t\t+ \" FROM Customer c\"\n+\t\t\t\t\t+ \" WHERE (SELECT AVG(o.cost) FROM c.orders o) > 100\";\n+\t\t\n+\t\tcompare(jpql, customer);\n+\t}\n+\t\n+\tpublic void testTypeList() {\n+\t\tDomainObject q = qb.createQueryDefinition(Employee.class);\n+\t\tq.where(q.type().in(Exempt.class, Contractor.class));\n+\t\t\n+\t\tString jpql = \"SELECT e \"\n+\t\t\t+ \" FROM Employee e\"\n+\t\t\t+ \" WHERE TYPE(e) IN (Exempt, Contractor)\";\n+\t\t\n+\t\tcompare(jpql, q);\n+\t}\n+\t\n+\tpublic void testStringList() {\n+\t\tDomainObject q = qb.createQueryDefinition(Customer.class);\n+\t\tq.where(q.get(\"country\").in(\"USA\", \"UK\", \"France\"));\n+\t\t\n+\t\tString jpql = \"SELECT c \"\n+\t\t\t+ \" FROM Customer c\"\n+\t\t\t+ \" WHERE c.country IN ('USA', 'UK', 'France')\";\n+\t\tcompare(jpql, q);\n+\t}\n+\t\n+\tpublic void testConcat() {\n+\t\tDomainObject e = qb.createQueryDefinition(Employee.class);\n+\t\tDomainObject f = e.join(\"frequentFlierPlan\");\n+\t\tExpression c = \n+\t\te.generalCase().when(f.get(\"annualMiles\").greaterThan(50000)).then(\"Platinum\")\n+\t\t               .when(f.get(\"annualMiles\").greaterThan(25000)).then(\"Gold\")\n+\t\t               .elseCase(\"XYZ\");\n+\t\te.select(e.get(\"name\"), f.get(\"name\"), e.concat(c,e.literal(\"Frequent Flyer\")));\n+\t\t\n+\t\tString jpql = \"SELECT e.name, f.name, CONCAT(\" \n+\t\t\t+ \" CASE WHEN f.annualMiles > 50000 THEN 'Platinum'\" \n+\t\t\t+ \" WHEN f.annualMiles > 25000 THEN 'Gold'\" \n+\t\t\t+ \" ELSE 'XYZ' END, 'Frequent Flyer')\" \n+\t\t\t+ \" FROM Employee e JOIN e.frequentFlierPlan f\";\n+\t\t\t\n+\t\tcompare(jpql, e);\n+\t}\n+\t\n+\tpublic void testCorrelatedSubquerySpecialCase1() {\n+\t\tDomainObject o = qb.createQueryDefinition(Order.class);\n+\t\tDomainObject a = qb.createSubqueryDefinition(o.get(\"customer\").get(\"accounts\"));\n+\t\to.select(o)\n+\t\t .where(o.literal(10000).lessThan(a.select(a.get(\"balance\")).all()));\n+\t\t\n+\t\tString jpql = \"select o from Order o\"\n+\t\t\t        + \" where 10000 < ALL \"\n+\t\t\t        + \" (select a.balance from o.customer c join o.customer.accounts a)\";\n+\t\t\n+\t\tcompare(jpql, o);\n+\t}\n+\t\n+\tpublic void testCorrelatedSubquerySpecialCase2() {\n+\t\tDomainObject o = qb.createQueryDefinition(Order.class);\n+\t\tDomainObject c = o.join(\"customer\");\n+\t\tDomainObject a = qb.createSubqueryDefinition(c.get(\"accounts\"));\n+\t\to.select(o)\n+\t\t .where(o.literal(10000).lessThan(a.select(a.get(\"balance\")).all()));\n+\t\t\n+\t\tString jpql = \"select o from Order o JOIN o.customer c\"\n+\t\t\t        + \" where 10000 < ALL \"\n+\t\t\t        + \" (select a.balance from c.accounts a)\";\n+\t\t\n+\t\tcompare(jpql, o);\n+\t}\n+\t\n+\tpublic void testRecursiveDefinitionIsNotAllowed() {\n+\t\tDomainObject q = qb.createQueryDefinition(Customer.class);\n+\t\tq.where(q.exists().and(q.get(\"name\").equal(\"wrong\")));\n+\t\t\n+\t\ttry {\n+\t\t\tqb.toJPQL(q);\n+\t\t\tfail();\n+\t\t} catch (RuntimeException e) {\n+\t\t\t// good\n+\t\t}\n+\t}\n+\t\n+\t// ---------------------------------------------------------------------\n+\t// verification methods\n+\t// ---------------------------------------------------------------------\n+\t\n+\t/**\n+\t * Compare by executing the queries generated from the given JPQL and \n+\t * QueryDefinition. \n+\t */\n+\tvoid compare(String jpql, QueryDefinition q) {\n+\t\tcompare(jpql, q, (Object[])null);\n+\t}\n+\t\n+\t/**\n+\t * Compare hand crafted JPQL and QueryDefinition.\n+\t * If skip is null then execute both queries against the database, otherwise\n+\t * compare them literally. \n+\t */\n+\tvoid compare(String jpql, QueryDefinition q, Object...p) {\n+\t\texecuteActually(jpql, q, p);\n+\t}\n+\t\n+\t/**\n+\t * Compare the string version of QueryDefinition and given JPQL string with\n+\t * some flexibility of case-insensitive reserved words.\n+\t */\n+\tprivate void compareLiterally(String jpql, QueryDefinition q) {\n+\t\tString actual = qb.toJPQL(q);\n+\t\tif (!comparator.compare(jpql,actual)) \n+\t\t\tfail(\"\\r\\nExpected: [\" + jpql + \"]\\r\\nActual  : [\" + actual + \"]\");\n+\t}\n+\t\n+\t/**\n+\t * Executes the given JPQL and QueryDefinition independently and compare \n+\t * their results.\n+\t */\n+\tprivate void executeActually(String jpql, QueryDefinition q, Object...p) {\n+\t\tOpenJPAEntityManager em = emf.createEntityManager();\n+\t\tList<?> criteriaResult = null;\n+\t\tList<?> jpqlResult = null;\n+\t\tThrowable criteriaError = null;\n+\t\tThrowable jpqlError = null;\n+\t\t\n+\t\ttry {\n+\t\t\tQuery cq = em.createDynamicQuery(q);\n+\t\t\tsetParameters(cq, p);\n+\t\t\tcriteriaResult = cq.getResultList();\n+\t\t} catch (Exception e) {\n+\t\t\tcriteriaError = e;\t\n+\t\t}\n+\t\ttry {\n+\t\t\tQuery nq = em.createQuery(jpql);\n+\t\t\tsetParameters(nq, p);\n+\t\t\tjpqlResult = nq.getResultList();\n+\t\t} catch (Exception e) {\n+\t\t\tjpqlError = e;\n+\t\t}\n+\t\t\n+\t\tif (criteriaError == null && jpqlError == null) {\n+\t\t\tassertEquals(criteriaResult.size(), jpqlResult.size());\n+\t\t} else if (criteriaError != null && jpqlError == null) {\n+\t\t\tfail(\"QueryDefinition generated invalid JPQL\\r\\n\" \n+\t\t\t\t+ \"Criteria [\" + qb.toJPQL(q) + \"]\\r\\n\"\n+\t\t\t\t+ \"error : \" + criteriaError.getMessage());\n+\t\t} else if (criteriaError == null && jpqlError != null) {\n+\t\t\tfail(\"Handcrafted JPQL is invalid \\r\\n\" \n+\t\t\t\t\t+ \"JPQL [\" + jpql + \"]\\r\\n\"\n+\t\t\t\t\t+ \"error : \" + jpqlError.getMessage());\n+\t\t} else {\n+\t\t\tcompareLiterally(jpql, q);\n+\t\t}\n+\t}\n+\t\r    void setParameters(Query q, Object...p) {\n+\t\tif (p == null)\n+\t\t\treturn;\n+\t\tfor (int i = 0; i < p.length; i += 2) {\n+\t\t\tq.setParameter(p[i].toString(), p[i+1]);\n+\t\t}\n+    } \n+}"},{"sha":"c1512bd1f93ba6563cd4a15700859577c79b6345","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Transaction.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Transaction.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Transaction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/Transaction.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,10 +1,10 @@\n-package org.apache.openjpa.persistence.criteria;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"CR_TRANSACTION\")\r\n-public class Transaction {\r\n-\r\n-}\r\n+package org.apache.openjpa.persistence.criteria;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"CR_TRANSACTION\")\n+public class Transaction {\n+\n+}"},{"sha":"5bc655bc6a5a6ef7ec92080a288690d65ab6fd02","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/VideoStore.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/VideoStore.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/VideoStore.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/VideoStore.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,33 +1,33 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.criteria;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Table;\r\n-\r\n-/**\r\n- * \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-@Entity\r\n-@Table(name=\"CR_VIDEOSTORE\")\r\n-public class VideoStore {\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.criteria;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+\n+/**\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+@Table(name=\"CR_VIDEOSTORE\")\n+public class VideoStore {\n+\n+}"},{"sha":"6f438b1c3b829701daaa24ee1eefe41f72d50832","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheLoadTest.java","status":"modified","additions":178,"deletions":178,"changes":356,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheLoadTest.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheLoadTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheLoadTest.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,178 +1,178 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.Collection;\r\n-import java.util.HashMap;\r\n-import java.util.Iterator;\r\n-import java.util.Map;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.datacache.common.apps.AttachA;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.AttachB;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.AttachC;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.AttachD;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.AttachE;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-/**\r\n- * Tests load on the cache. To run:\r\n- * <p/>\r\n- * java -Dkodo.properties=hsql.properties -Dcachetest.threads=30\r\n- * -Dcachetest.iterations=1000 kodo.datacache.CacheLoadTest\r\n- *\r\n- * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n- */\r\n-public class CacheLoadTest\r\n-    extends AbstractTestCase {\r\n-\r\n-    private EntityManagerFactory emf;\r\n-    protected int threadCount =\r\n-        Integer.getInteger(\"cachetest.threads\", 30).intValue();\r\n-    protected int interationCount =\r\n-        Integer.getInteger(\"cachetest.iterations\", 1000).intValue();\r\n-\r\n-    public void setUp() {\r\n-        Map propsMap = new HashMap();\r\n-        propsMap.put(\"openjpa.DataCache\", \"true\");\r\n-        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n-        propsMap.put(\"openjpa.QueryCache\", \"true\");\r\n-        emf = getEmf(propsMap);\r\n-    }\r\n-\r\n-    public void testCacheLoad()\r\n-        throws Exception {\r\n-        mttest(Integer.getInteger(\"cachetest.threads\", 30).intValue(),\r\n-            Integer.getInteger(\"cachetest.iterations\", 1000).intValue());\r\n-\r\n-        switch ((int) (Math.random() * 4)) {\r\n-            case 0:\r\n-                insert();\r\n-                break;\r\n-            case 1:\r\n-                query();\r\n-                break;\r\n-            case 2:\r\n-                delete();\r\n-                break;\r\n-            case 3:\r\n-                read();\r\n-                break;\r\n-        }\r\n-    }\r\n-\r\n-    private int rnd(int num) {\r\n-        return randomInt().intValue() % num;\r\n-    }\r\n-\r\n-    private void insert()\r\n-        throws Exception {\r\n-\r\n-        EntityManager em = emf.createEntityManager();\r\n-        startTx(em);\r\n-\r\n-        for (int i = 0; i < (rnd(100)); i++) {\r\n-            em.persist(randomizeBean(rndclass().newInstance()));\r\n-        }\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    private void query() {\r\n-\r\n-        OpenJPAEntityManager em =\r\n-            (OpenJPAEntityManager) emf.createEntityManager();\r\n-\r\n-        String[] filters = new String[]{\r\n-            \"select from \" + AttachA.class.getName() + \" where aint > 0\",\r\n-            \"select from \" + AttachA.class.getName() + \" where aint < 0\",\r\n-            \"select from \" + AttachB.class.getName() + \" where aint > 0\",\r\n-            \"select from \" + AttachB.class.getName() + \" where aint < 0\",\r\n-            \"select from \" + AttachC.class.getName() + \" where aint > 0\",\r\n-            \"select from \" + AttachC.class.getName() + \" where aint < 0\",\r\n-        };\r\n-\r\n-        for (int i = 0; i < rnd(50); i++) {\r\n-            try {\r\n-                new ArrayList((Collection) em\r\n-                    .createQuery(\"org.apache.openjpa.kernel.jpql.JPQL\",\r\n-                        filters[randomInt().intValue() % filters.length]).\r\n-                    getResultList());\r\n-            } catch (IllegalStateException e) {\r\n-                e.printStackTrace();\r\n-            }\r\n-        }\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    private void delete() {\r\n-\r\n-        try {\r\n-            OpenJPAEntityManager em =\r\n-                (OpenJPAEntityManager) emf.createEntityManager();\r\n-            startTx(em);\r\n-\r\n-            for (Iterator i = em.createExtent(rndclass(), Math.random() > 0.5f).\r\n-                iterator(); i.hasNext();) {\r\n-                Object o = i.next();\r\n-                if (Math.random() > 0.6f)\r\n-                    em.remove(o);\r\n-            }\r\n-\r\n-            endTx(em);\r\n-            endEm(em);\r\n-        } catch (IllegalStateException e) {\r\n-            e.printStackTrace();\r\n-        } catch (Exception e) {\r\n-            e.printStackTrace();\r\n-        }\r\n-    }\r\n-\r\n-    private void read() {\r\n-\r\n-        OpenJPAEntityManager em =\r\n-            (OpenJPAEntityManager) emf.createEntityManager();\r\n-\r\n-        for (Iterator i = em.createExtent(rndclass(), Math.random() > 0.5f).\r\n-            iterator(); i.hasNext();) {\r\n-            Object o = i.next();\r\n-        }\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    private Class rndclass() {\r\n-        Class[] c = new Class[]{\r\n-            AttachA.class,\r\n-            AttachB.class,\r\n-            AttachC.class,\r\n-            AttachD.class,\r\n-            AttachE.class,\r\n-        };\r\n-\r\n-        return c[(int) (Math.random() * c.length)];\r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+\n+import org.apache.openjpa.persistence.datacache.common.apps.AttachA;\n+import org.apache.openjpa.persistence.datacache.common.apps.AttachB;\n+import org.apache.openjpa.persistence.datacache.common.apps.AttachC;\n+import org.apache.openjpa.persistence.datacache.common.apps.AttachD;\n+import org.apache.openjpa.persistence.datacache.common.apps.AttachE;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+/**\n+ * Tests load on the cache. To run:\n+ * <p/>\n+ * java -Dkodo.properties=hsql.properties -Dcachetest.threads=30\n+ * -Dcachetest.iterations=1000 kodo.datacache.CacheLoadTest\n+ *\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\n+ */\n+public class CacheLoadTest\n+    extends AbstractTestCase {\n+\n+    private EntityManagerFactory emf;\n+    protected int threadCount =\n+        Integer.getInteger(\"cachetest.threads\", 30).intValue();\n+    protected int interationCount =\n+        Integer.getInteger(\"cachetest.iterations\", 1000).intValue();\n+\n+    public void setUp() {\n+        Map propsMap = new HashMap();\n+        propsMap.put(\"openjpa.DataCache\", \"true\");\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n+        propsMap.put(\"openjpa.QueryCache\", \"true\");\n+        emf = getEmf(propsMap);\n+    }\n+\n+    public void testCacheLoad()\n+        throws Exception {\n+        mttest(Integer.getInteger(\"cachetest.threads\", 30).intValue(),\n+            Integer.getInteger(\"cachetest.iterations\", 1000).intValue());\n+\n+        switch ((int) (Math.random() * 4)) {\n+            case 0:\n+                insert();\n+                break;\n+            case 1:\n+                query();\n+                break;\n+            case 2:\n+                delete();\n+                break;\n+            case 3:\n+                read();\n+                break;\n+        }\n+    }\n+\n+    private int rnd(int num) {\n+        return randomInt().intValue() % num;\n+    }\n+\n+    private void insert()\n+        throws Exception {\n+\n+        EntityManager em = emf.createEntityManager();\n+        startTx(em);\n+\n+        for (int i = 0; i < (rnd(100)); i++) {\n+            em.persist(randomizeBean(rndclass().newInstance()));\n+        }\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    private void query() {\n+\n+        OpenJPAEntityManager em =\n+            (OpenJPAEntityManager) emf.createEntityManager();\n+\n+        String[] filters = new String[]{\n+            \"select from \" + AttachA.class.getName() + \" where aint > 0\",\n+            \"select from \" + AttachA.class.getName() + \" where aint < 0\",\n+            \"select from \" + AttachB.class.getName() + \" where aint > 0\",\n+            \"select from \" + AttachB.class.getName() + \" where aint < 0\",\n+            \"select from \" + AttachC.class.getName() + \" where aint > 0\",\n+            \"select from \" + AttachC.class.getName() + \" where aint < 0\",\n+        };\n+\n+        for (int i = 0; i < rnd(50); i++) {\n+            try {\n+                new ArrayList((Collection) em\n+                    .createQuery(\"org.apache.openjpa.kernel.jpql.JPQL\",\n+                        filters[randomInt().intValue() % filters.length]).\n+                    getResultList());\n+            } catch (IllegalStateException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+\n+        endEm(em);\n+    }\n+\n+    private void delete() {\n+\n+        try {\n+            OpenJPAEntityManager em =\n+                (OpenJPAEntityManager) emf.createEntityManager();\n+            startTx(em);\n+\n+            for (Iterator i = em.createExtent(rndclass(), Math.random() > 0.5f).\n+                iterator(); i.hasNext();) {\n+                Object o = i.next();\n+                if (Math.random() > 0.6f)\n+                    em.remove(o);\n+            }\n+\n+            endTx(em);\n+            endEm(em);\n+        } catch (IllegalStateException e) {\n+            e.printStackTrace();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    private void read() {\n+\n+        OpenJPAEntityManager em =\n+            (OpenJPAEntityManager) emf.createEntityManager();\n+\n+        for (Iterator i = em.createExtent(rndclass(), Math.random() > 0.5f).\n+            iterator(); i.hasNext();) {\n+            Object o = i.next();\n+        }\n+\n+        endEm(em);\n+    }\n+\n+    private Class rndclass() {\n+        Class[] c = new Class[]{\n+            AttachA.class,\n+            AttachB.class,\n+            AttachC.class,\n+            AttachD.class,\n+            AttachE.class,\n+        };\n+\n+        return c[(int) (Math.random() * c.length)];\n+    }\n+}\n+"},{"sha":"fa09b23c94bf2464987d8d4b1c25111ea72b3c4d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTest.java","status":"modified","additions":1591,"deletions":1591,"changes":3182,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTest.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTest.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"55c0117a89a21adaec11749bf7eba5fa24c8938a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTestBroker.java","status":"modified","additions":74,"deletions":74,"changes":148,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTestBroker.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTestBroker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTestBroker.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,74 +1,74 @@\n-//This class access the private class QueryCacheStoreQuery.\r\n-//So this has to be in kodo.datacache package\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import java.util.Collections;\r\n-import java.util.List;\r\n-\r\n-import org.apache.openjpa.datacache.QueryCacheStoreQuery.CachedList;\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.kernel.BrokerImpl;\r\n-import org.apache.openjpa.kernel.QueryImpl;\r\n-import org.apache.openjpa.kernel.StoreQuery;\r\n-import org.apache.openjpa.lib.rop.ListResultList;\r\n-import org.apache.openjpa.lib.rop.ListResultObjectProvider;\r\n-import org.apache.openjpa.lib.rop.ResultObjectProvider;\r\n-\r\n-/**\r\n- * <p>\r\n- * Used to mark cached query results for testing.\r\n- * </p>\r\n- */\r\n-public class CacheTestBroker extends BrokerImpl {\r\n-\r\n-    protected QueryImpl newQueryImpl(String language, StoreQuery sq) {\r\n-        return new CacheTestQuery(this, language, sq);\r\n-    }\r\n-\r\n-    public static class CachedQueryResult extends ListResultList {\r\n-\r\n-        public CachedQueryResult(List list) {\r\n-            super(list);\r\n-        }\r\n-    }\r\n-\r\n-    private static class CacheTestQuery extends QueryImpl {\r\n-\r\n-        public CacheTestQuery(Broker broker, String language,\r\n-            StoreQuery query) {\r\n-            super(broker, language, query);\r\n-        }\r\n-\r\n-        protected Object toResult(StoreQuery q, StoreQuery.Executor ex,\r\n-            ResultObjectProvider rop, StoreQuery.Range range)\r\n-            throws Exception {\r\n-            boolean cached = rop instanceof ListResultObjectProvider\r\n-                && (((ListResultObjectProvider) rop)\r\n-                .getDelegate() instanceof CachedList ||\r\n-                ((ListResultObjectProvider) rop)\r\n-                    .getDelegate() == Collections.EMPTY_LIST);\r\n-            Object res = super.toResult(q, ex, rop, range);\r\n-            if (cached && res instanceof List)\r\n-                return new CachedQueryResult((List) res);\r\n-            return res;\r\n-        }\r\n-    }\r\n-}\r\n+//This class access the private class QueryCacheStoreQuery.\n+//So this has to be in kodo.datacache package\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.openjpa.datacache.QueryCacheStoreQuery.CachedList;\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.kernel.BrokerImpl;\n+import org.apache.openjpa.kernel.QueryImpl;\n+import org.apache.openjpa.kernel.StoreQuery;\n+import org.apache.openjpa.lib.rop.ListResultList;\n+import org.apache.openjpa.lib.rop.ListResultObjectProvider;\n+import org.apache.openjpa.lib.rop.ResultObjectProvider;\n+\n+/**\n+ * <p>\n+ * Used to mark cached query results for testing.\n+ * </p>\n+ */\n+public class CacheTestBroker extends BrokerImpl {\n+\n+    protected QueryImpl newQueryImpl(String language, StoreQuery sq) {\n+        return new CacheTestQuery(this, language, sq);\n+    }\n+\n+    public static class CachedQueryResult extends ListResultList {\n+\n+        public CachedQueryResult(List list) {\n+            super(list);\n+        }\n+    }\n+\n+    private static class CacheTestQuery extends QueryImpl {\n+\n+        public CacheTestQuery(Broker broker, String language,\n+            StoreQuery query) {\n+            super(broker, language, query);\n+        }\n+\n+        protected Object toResult(StoreQuery q, StoreQuery.Executor ex,\n+            ResultObjectProvider rop, StoreQuery.Range range)\n+            throws Exception {\n+            boolean cached = rop instanceof ListResultObjectProvider\n+                && (((ListResultObjectProvider) rop)\n+                .getDelegate() instanceof CachedList ||\n+                ((ListResultObjectProvider) rop)\n+                    .getDelegate() == Collections.EMPTY_LIST);\n+            Object res = super.toResult(q, ex, rop, range);\n+            if (cached && res instanceof List)\n+                return new CachedQueryResult((List) res);\n+            return res;\n+        }\n+    }\n+}"},{"sha":"767ecb20846f00a800c7911bb2f0d5b66e2a6bd3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTestHelper.java","status":"modified","additions":118,"deletions":118,"changes":236,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTestHelper.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTestHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/CacheTestHelper.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,118 +1,118 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import java.util.Collection;\r\n-import java.util.Iterator;\r\n-import java.util.NoSuchElementException;\r\n-\r\n-import org.apache.openjpa.datacache.DataCache;\r\n-import org.apache.openjpa.datacache.QueryCache;\r\n-import org.apache.openjpa.datacache.QueryKey;\r\n-import org.apache.openjpa.datacache.DataCacheManager;\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.kernel.BrokerFactory;\r\n-import org.apache.openjpa.kernel.Query;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-class CacheTestHelper {\r\n-\r\n-    static void checkCache(AbstractTestCase tc, DataCache cache, Object[] ids,\r\n-        boolean[] stati) {\r\n-        for (int i = 0; i < ids.length; i++) {\r\n-            if (stati[i])\r\n-                tc.assertTrue(\"id \" + i + \" (\" + ids[i]\r\n-                    + \") was not in cache; should have been\",\r\n-                    cache.contains(ids[i]));\r\n-            else\r\n-                tc.assertFalse(\"id \" + i + \" (\" + ids[i]\r\n-                    + \") was in cache; should not have been\",\r\n-                    cache.contains(ids[i]));\r\n-        }\r\n-    }\r\n-\r\n-    static void assertInCache(AbstractTestCase tc, Query q, Boolean inCache) {\r\n-        assertInCache(tc, q, inCache, new Object[0]);\r\n-    }\r\n-\r\n-    /**\r\n-     * Test whether the given query has valid cached results.\r\n-     *\r\n-     * @param inCache if {@link Boolean#TRUE}, the query must have valid\r\n-     * cached results; if {@link Boolean#FALSE} the query\r\n-     * must not have any cached results; if null the\r\n-     * query may have cached results, but they cannot be\r\n-     * valid (i.e. they can't be returned to the user)\r\n-     */\r\n-    static void assertInCache(AbstractTestCase tc, Query query, Boolean inCache,\r\n-        Object[] args) {\r\n-        QueryKey qk = QueryKey.newInstance(query, args);\r\n-        Broker broker = query.getBroker();\r\n-        BrokerFactory factory = broker.getBrokerFactory();\r\n-\r\n-        QueryCache qc = cacheManager(factory).getSystemQueryCache();\r\n-        if (inCache == Boolean.FALSE && qc.get(qk) != null) {\r\n-            tc.fail(\"query should not be in cache; was.\");\r\n-        } else if (inCache == Boolean.TRUE || (inCache == null\r\n-            && qc.get(qk) != null)) {\r\n-            Object res = (args == null) ? query.execute()\r\n-                : query.execute(args);\r\n-            if (inCache == Boolean.TRUE &&\r\n-                !isCachedResult(res, inCache, query.getBroker()))\r\n-                tc.fail(\"query should be in cache; was not.\");\r\n-            else if (inCache == null &&\r\n-                isCachedResult(res, inCache, query.getBroker()))\r\n-                tc.fail(\"query should not be returned to user; was.\");\r\n-            query.closeAll();\r\n-        }\r\n-    }\r\n-\r\n-    private static boolean isCachedResult(Object res, Boolean expected,\r\n-        Broker broker) {\r\n-        // we can only check for a CachedQueryResult if the\r\n-        // Broker was configured to be a CacheTestBroker\r\n-        if (!(broker instanceof CacheTestBroker))\r\n-            throw new IllegalArgumentException(\"Broker was not set to be \"\r\n-                + \"a CacheTestBroker, making it impossible to verify \"\r\n-                + \"if query result is cached\");\r\n-\r\n-        if (res instanceof Collection)\r\n-            return res instanceof CacheTestBroker.CachedQueryResult;\r\n-        // no way to tell if unique results from cache\r\n-        return expected.booleanValue();\r\n-    }\r\n-\r\n-    static void iterate(Collection c) {\r\n-        // iterate through the collection so that the results have an\r\n-        // opportunity to register themselves with the PM.\r\n-        int count = 0;\r\n-        for (Iterator iter = c.iterator(); iter.hasNext();) {\r\n-            try {\r\n-                count++;\r\n-                iter.next();\r\n-            } catch (NoSuchElementException e) {\r\n-                throw e;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    static DataCacheManager cacheManager(BrokerFactory factory) {\r\n-        return factory.getConfiguration().getDataCacheManagerInstance();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.openjpa.datacache.DataCache;\n+import org.apache.openjpa.datacache.QueryCache;\n+import org.apache.openjpa.datacache.QueryKey;\n+import org.apache.openjpa.datacache.DataCacheManager;\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.kernel.BrokerFactory;\n+import org.apache.openjpa.kernel.Query;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+class CacheTestHelper {\n+\n+    static void checkCache(AbstractTestCase tc, DataCache cache, Object[] ids,\n+        boolean[] stati) {\n+        for (int i = 0; i < ids.length; i++) {\n+            if (stati[i])\n+                tc.assertTrue(\"id \" + i + \" (\" + ids[i]\n+                    + \") was not in cache; should have been\",\n+                    cache.contains(ids[i]));\n+            else\n+                tc.assertFalse(\"id \" + i + \" (\" + ids[i]\n+                    + \") was in cache; should not have been\",\n+                    cache.contains(ids[i]));\n+        }\n+    }\n+\n+    static void assertInCache(AbstractTestCase tc, Query q, Boolean inCache) {\n+        assertInCache(tc, q, inCache, new Object[0]);\n+    }\n+\n+    /**\n+     * Test whether the given query has valid cached results.\n+     *\n+     * @param inCache if {@link Boolean#TRUE}, the query must have valid\n+     * cached results; if {@link Boolean#FALSE} the query\n+     * must not have any cached results; if null the\n+     * query may have cached results, but they cannot be\n+     * valid (i.e. they can't be returned to the user)\n+     */\n+    static void assertInCache(AbstractTestCase tc, Query query, Boolean inCache,\n+        Object[] args) {\n+        QueryKey qk = QueryKey.newInstance(query, args);\n+        Broker broker = query.getBroker();\n+        BrokerFactory factory = broker.getBrokerFactory();\n+\n+        QueryCache qc = cacheManager(factory).getSystemQueryCache();\n+        if (inCache == Boolean.FALSE && qc.get(qk) != null) {\n+            tc.fail(\"query should not be in cache; was.\");\n+        } else if (inCache == Boolean.TRUE || (inCache == null\n+            && qc.get(qk) != null)) {\n+            Object res = (args == null) ? query.execute()\n+                : query.execute(args);\n+            if (inCache == Boolean.TRUE &&\n+                !isCachedResult(res, inCache, query.getBroker()))\n+                tc.fail(\"query should be in cache; was not.\");\n+            else if (inCache == null &&\n+                isCachedResult(res, inCache, query.getBroker()))\n+                tc.fail(\"query should not be returned to user; was.\");\n+            query.closeAll();\n+        }\n+    }\n+\n+    private static boolean isCachedResult(Object res, Boolean expected,\n+        Broker broker) {\n+        // we can only check for a CachedQueryResult if the\n+        // Broker was configured to be a CacheTestBroker\n+        if (!(broker instanceof CacheTestBroker))\n+            throw new IllegalArgumentException(\"Broker was not set to be \"\n+                + \"a CacheTestBroker, making it impossible to verify \"\n+                + \"if query result is cached\");\n+\n+        if (res instanceof Collection)\n+            return res instanceof CacheTestBroker.CachedQueryResult;\n+        // no way to tell if unique results from cache\n+        return expected.booleanValue();\n+    }\n+\n+    static void iterate(Collection c) {\n+        // iterate through the collection so that the results have an\n+        // opportunity to register themselves with the PM.\n+        int count = 0;\n+        for (Iterator iter = c.iterator(); iter.hasNext();) {\n+            try {\n+                count++;\n+                iter.next();\n+            } catch (NoSuchElementException e) {\n+                throw e;\n+            }\n+        }\n+    }\n+\n+    static DataCacheManager cacheManager(BrokerFactory factory) {\n+        return factory.getConfiguration().getDataCacheManagerInstance();\n+    }\n+}"},{"sha":"ac4fe9febc617b60527ef110cfd27a2e5dc85874","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/DistributedCacheTest.java","status":"modified","additions":81,"deletions":81,"changes":162,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/DistributedCacheTest.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/DistributedCacheTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/DistributedCacheTest.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,81 +1,81 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import org.apache.openjpa.lib.conf.Configurations;\r\n-\r\n-/**\r\n- * Distributed cache test.\r\n- */\r\n-public class DistributedCacheTest\r\n-    extends CacheTest {\r\n-\r\n-    private static String cache = null;\r\n-    private static String queryCache = null;\r\n-    private static String provider = null;\r\n-\r\n-    public static void setCache(String plugin) {\r\n-        cache = plugin;\r\n-    }\r\n-\r\n-    public static void setQueryCache(String plugin) {\r\n-        queryCache = plugin;\r\n-    }\r\n-\r\n-    public static void setRemoteCommitProvider(String plugin) {\r\n-        provider = plugin;\r\n-    }\r\n-\r\n-    public DistributedCacheTest(String test) {\r\n-        super(test);\r\n-    }\r\n-\r\n-    public DistributedCacheTest(String test, Class testClass) {\r\n-        super(test);\r\n-    }\r\n-\r\n-    protected String[] getConfs() {\r\n-        return getConfs(true);\r\n-    }\r\n-\r\n-    protected String[] getConfs2() {\r\n-        return getConfs(false);\r\n-    }\r\n-\r\n-    protected String[] getConfs(boolean confs1) {\r\n-        String fullProvider = provider;\r\n-        String props = Configurations.getProperties\r\n-            (System.getProperty(\"openjpa.RemoteCommitProvider\"));\r\n-        if (props == null || props.length() == 0)\r\n-            props = Configurations.getProperties(provider);\r\n-        else\r\n-            fullProvider = Configurations.getPlugin(provider, props);\r\n-        if (props == null || props.length() == 0)\r\n-            throw new IllegalStateException\r\n-                (\"must specify -Dkodo.RemoteCommitProvider=?\");\r\n-\r\n-        return new String[]{\r\n-            // use this property to differentiate factory\r\n-            \"openjpa.DataCache\", cache + \", true(Name=\" + confs1 + \")\",\r\n-            \"openjpa.QueryCache\", queryCache,\r\n-            \"openjpa.RemoteCommitProvider\", fullProvider,\r\n-            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\r\n-        };\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import org.apache.openjpa.lib.conf.Configurations;\n+\n+/**\n+ * Distributed cache test.\n+ */\n+public class DistributedCacheTest\n+    extends CacheTest {\n+\n+    private static String cache = null;\n+    private static String queryCache = null;\n+    private static String provider = null;\n+\n+    public static void setCache(String plugin) {\n+        cache = plugin;\n+    }\n+\n+    public static void setQueryCache(String plugin) {\n+        queryCache = plugin;\n+    }\n+\n+    public static void setRemoteCommitProvider(String plugin) {\n+        provider = plugin;\n+    }\n+\n+    public DistributedCacheTest(String test) {\n+        super(test);\n+    }\n+\n+    public DistributedCacheTest(String test, Class testClass) {\n+        super(test);\n+    }\n+\n+    protected String[] getConfs() {\n+        return getConfs(true);\n+    }\n+\n+    protected String[] getConfs2() {\n+        return getConfs(false);\n+    }\n+\n+    protected String[] getConfs(boolean confs1) {\n+        String fullProvider = provider;\n+        String props = Configurations.getProperties\n+            (System.getProperty(\"openjpa.RemoteCommitProvider\"));\n+        if (props == null || props.length() == 0)\n+            props = Configurations.getProperties(provider);\n+        else\n+            fullProvider = Configurations.getPlugin(provider, props);\n+        if (props == null || props.length() == 0)\n+            throw new IllegalStateException\n+                (\"must specify -Dkodo.RemoteCommitProvider=?\");\n+\n+        return new String[]{\n+            // use this property to differentiate factory\n+            \"openjpa.DataCache\", cache + \", true(Name=\" + confs1 + \")\",\n+            \"openjpa.QueryCache\", queryCache,\n+            \"openjpa.RemoteCommitProvider\", fullProvider,\n+            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\n+        };\n+    }\n+}"},{"sha":"5fa00056b2ed4b6af11592f9402bdaf1a3bd9a92","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/IdentityIdClass.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/IdentityIdClass.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/IdentityIdClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/IdentityIdClass.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,33 +1,33 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.GenerationType;\r\n-import javax.persistence.Id;\r\n-\r\n-@Entity\r\n-public class IdentityIdClass {\r\n-    @Id\r\n-    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n-    private int id;\r\n-\r\n-    private String stringField;\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class IdentityIdClass {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private int id;\n+\n+    private String stringField;\n+}"},{"sha":"48dfc2fe7009288899dba539b59b84abdae8e208","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OptimisticLockInstance.java","status":"modified","additions":58,"deletions":58,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OptimisticLockInstance.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OptimisticLockInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OptimisticLockInstance.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,58 +1,58 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Version;\r\n-import javax.persistence.GeneratedValue;\r\n-\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"OPTIMISTIC_LOCK_INSTANCE\")\r\n-public class OptimisticLockInstance {\r\n-    @Id @GeneratedValue \r\n-    private int pk;\r\n-\r\n-    @Version \r\n-    private int oplock;\r\n-\r\n-    private String str;\r\n-    private int intField;\r\n-\r\n-    protected OptimisticLockInstance() { }\r\n-\r\n-    public OptimisticLockInstance(String str) {\r\n-        this.str = str;\r\n-    }\r\n-\r\n-    public int getPK() {\r\n-        return pk;\r\n-    }\r\n-\r\n-    public int getOpLock() {\r\n-        return oplock;\r\n-    }\r\n-\r\n-    public String getStr() {\r\n-        return str;\r\n-    }\r\n-}\r\n-  \r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+import javax.persistence.GeneratedValue;\n+\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"OPTIMISTIC_LOCK_INSTANCE\")\n+public class OptimisticLockInstance {\n+    @Id @GeneratedValue \n+    private int pk;\n+\n+    @Version \n+    private int oplock;\n+\n+    private String str;\n+    private int intField;\n+\n+    protected OptimisticLockInstance() { }\n+\n+    public OptimisticLockInstance(String str) {\n+        this.str = str;\n+    }\n+\n+    public int getPK() {\n+        return pk;\n+    }\n+\n+    public int getOpLock() {\n+        return oplock;\n+    }\n+\n+    public String getStr() {\n+        return str;\n+    }\n+}\n+  "},{"sha":"601bdb67a55223f53b16a1253c42523a014543fa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OrderedOneManyChild.java","status":"modified","additions":59,"deletions":59,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OrderedOneManyChild.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OrderedOneManyChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OrderedOneManyChild.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,59 +1,59 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import javax.persistence.Id;\r\n-import javax.persistence.ManyToOne;\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class OrderedOneManyChild {\r\n-    @Id\r\n-    private long id;\r\n-\r\n-    private String name;\r\n-\r\n-    @ManyToOne\r\n-    private OrderedOneManyParent parent;\r\n-    \r\n-    public long getId() { \r\n-        return id; \r\n-    }\r\n-\r\n-    public void setId(long id) { \r\n-        this.id = id; \r\n-    }\r\n-\r\n-    public String getName() { \r\n-        return name; \r\n-    }\r\n-\r\n-    public void setName(String name) { \r\n-        this.name = name; \r\n-    }\r\n-\r\n-    public OrderedOneManyParent getParent() { \r\n-        return parent; \r\n-    }\r\n-\r\n-    public void setParent(OrderedOneManyParent parent) { \r\n-        this.parent = parent; \r\n-    }\r\n-    \r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class OrderedOneManyChild {\n+    @Id\n+    private long id;\n+\n+    private String name;\n+\n+    @ManyToOne\n+    private OrderedOneManyParent parent;\n+    \n+    public long getId() { \n+        return id; \n+    }\n+\n+    public void setId(long id) { \n+        this.id = id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public OrderedOneManyParent getParent() { \n+        return parent; \n+    }\n+\n+    public void setParent(OrderedOneManyParent parent) { \n+        this.parent = parent; \n+    }\n+    \n+}"},{"sha":"0b6caa9c40acdc1cf8b3a395d5aaaa3db03c2807","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OrderedOneManyParent.java","status":"modified","additions":59,"deletions":59,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OrderedOneManyParent.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OrderedOneManyParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/OrderedOneManyParent.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,59 +1,59 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.OneToMany;\r\n-import javax.persistence.OrderBy;\r\n-\r\n-@Entity\r\n-public class OrderedOneManyParent {\r\n-\t@Id\r\n-    @GeneratedValue\r\n-    private long id;\r\n-\r\n-    private String name;\r\n-\r\n-    @OneToMany(mappedBy=\"parent\")\r\n-    @OrderBy(\"name ASC\")\r\n-    private List<OrderedOneManyChild> children = \r\n-        new ArrayList<OrderedOneManyChild>();\r\n-\r\n-    public long getId() { \r\n-        return id; \r\n-    }\r\n-\r\n-    public List<OrderedOneManyChild> getChildren() { \r\n-        return children; \r\n-    }\r\n-\r\n-    public String getName() { \r\n-        return name; \r\n-    }\r\n-\r\n-    public void setName(String name) { \r\n-        this.name = name; \r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OrderBy;\n+\n+@Entity\n+public class OrderedOneManyParent {\n+\t@Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @OneToMany(mappedBy=\"parent\")\n+    @OrderBy(\"name ASC\")\n+    private List<OrderedOneManyChild> children = \n+        new ArrayList<OrderedOneManyChild>();\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public List<OrderedOneManyChild> getChildren() { \n+        return children; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+}\n+"},{"sha":"becb017e968756a45cebaef05d610831e39f1bb5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestAutoIncrementAndDataCaching.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestAutoIncrementAndDataCaching.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestAutoIncrementAndDataCaching.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestAutoIncrementAndDataCaching.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,53 +1,53 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-public class TestAutoIncrementAndDataCaching\r\n-    extends SingleEMFTestCase {\r\n-\r\n-    @Override\r\n-    public void setUp() {\r\n-        setUp(IdentityIdClass.class, CLEAR_TABLES,\r\n-            \"openjpa.DataCache\", \"true\",\r\n-            \"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n-    }\r\n-\r\n-    public void testSimpleDataCacheOperation() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        em.persist(new IdentityIdClass());\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testAccessIdBeforeCommit() {\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        IdentityIdClass o = new IdentityIdClass();\r\n-        em.persist(o);\r\n-        em.getObjectId(o);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestAutoIncrementAndDataCaching\n+    extends SingleEMFTestCase {\n+\n+    @Override\n+    public void setUp() {\n+        setUp(IdentityIdClass.class, CLEAR_TABLES,\n+            \"openjpa.DataCache\", \"true\",\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\");\n+    }\n+\n+    public void testSimpleDataCacheOperation() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(new IdentityIdClass());\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testAccessIdBeforeCommit() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        IdentityIdClass o = new IdentityIdClass();\n+        em.persist(o);\n+        em.getObjectId(o);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n }\n\\ No newline at end of file"},{"sha":"1206f10430c553f6a2351a8e2b8c8cdfff6e6c1b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkUpdatesAndVersionColumn.java","status":"modified","additions":100,"deletions":100,"changes":200,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkUpdatesAndVersionColumn.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkUpdatesAndVersionColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestBulkUpdatesAndVersionColumn.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,100 +1,100 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.LockModeType;\r\n-import javax.persistence.OptimisticLockException;\r\n-import javax.persistence.RollbackException;\r\n-\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n-\r\n-public class TestBulkUpdatesAndVersionColumn\r\n-    extends SingleEMFTestCase {\r\n-\r\n-    public void setUp() throws Exception {\r\n-        setUp(\"openjpa.DataCache\", \"true\",\r\n-            \"openjpa.RemoteCommitProvider\", \"sjvm\",\r\n-            OptimisticLockInstance.class, CLEAR_TABLES);\r\n-\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        OptimisticLockInstance pc = new OptimisticLockInstance(\"foo\");\r\n-        em.persist(pc);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testSelectOnOplockField() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.createQuery(\"select o from OptimisticLockInstance o \"\r\n-            + \"where o.oplock = 0\").getResultList();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testOplockFieldMapping() {\r\n-        ClassMapping cm = (ClassMapping) JPAFacadeHelper.getMetaData(\r\n-            emf, OptimisticLockInstance.class);\r\n-        FieldMapping fm = cm.getFieldMapping(\"oplock\");\r\n-        assertEquals(1, fm.getColumns().length);\r\n-    }\r\n-\r\n-    public void testBulkUpdateWithManualVersionIncrement() {\r\n-        bulkUpdateHelper(true);\r\n-    }\r\n-\r\n-    public void testBulkUpdateWithoutManualVersionIncrement() {\r\n-        bulkUpdateHelper(false);\r\n-    }\r\n-\r\n-    private void bulkUpdateHelper(boolean incrementVersionField) {\r\n-        EntityManager em = emf.createEntityManager();\r\n-\r\n-        em.getTransaction().begin();\r\n-        OptimisticLockInstance oli = (OptimisticLockInstance) em.createQuery(\r\n-            \"SELECT o FROM OptimisticLockInstance o WHERE o.str = 'foo'\")\r\n-            .getSingleResult();\r\n-        assertNotNull(oli);\r\n-        em.lock(oli, LockModeType.READ);\r\n-\r\n-        EntityManager em2 = emf.createEntityManager();\r\n-        em2.getTransaction().begin();\r\n-        em2.createQuery(\"UPDATE OptimisticLockInstance o SET o.str = 'foo', \"\r\n-            + \"o.intField = o.intField + 1\"\r\n-            + (incrementVersionField ? \", o.oplock = o.oplock + 1 \" : \"\")\r\n-            + \"WHERE o.str = 'foo'\")\r\n-            .executeUpdate();\r\n-        em2.getTransaction().commit();\r\n-        em2.close();\r\n-\r\n-        try {\r\n-            em.getTransaction().commit();\r\n-            fail(\"transaction should have failed\");\r\n-        } catch (RollbackException re) {\r\n-            assertTrue(\"nested exception must be an oplock exception\",\r\n-                re.getCause() instanceof OptimisticLockException);\r\n-        } finally {\r\n-            em.close();\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.LockModeType;\n+import javax.persistence.OptimisticLockException;\n+import javax.persistence.RollbackException;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n+\n+public class TestBulkUpdatesAndVersionColumn\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() throws Exception {\n+        setUp(\"openjpa.DataCache\", \"true\",\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\",\n+            OptimisticLockInstance.class, CLEAR_TABLES);\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        OptimisticLockInstance pc = new OptimisticLockInstance(\"foo\");\n+        em.persist(pc);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testSelectOnOplockField() {\n+        EntityManager em = emf.createEntityManager();\n+        em.createQuery(\"select o from OptimisticLockInstance o \"\n+            + \"where o.oplock = 0\").getResultList();\n+        em.close();\n+    }\n+\n+    public void testOplockFieldMapping() {\n+        ClassMapping cm = (ClassMapping) JPAFacadeHelper.getMetaData(\n+            emf, OptimisticLockInstance.class);\n+        FieldMapping fm = cm.getFieldMapping(\"oplock\");\n+        assertEquals(1, fm.getColumns().length);\n+    }\n+\n+    public void testBulkUpdateWithManualVersionIncrement() {\n+        bulkUpdateHelper(true);\n+    }\n+\n+    public void testBulkUpdateWithoutManualVersionIncrement() {\n+        bulkUpdateHelper(false);\n+    }\n+\n+    private void bulkUpdateHelper(boolean incrementVersionField) {\n+        EntityManager em = emf.createEntityManager();\n+\n+        em.getTransaction().begin();\n+        OptimisticLockInstance oli = (OptimisticLockInstance) em.createQuery(\n+            \"SELECT o FROM OptimisticLockInstance o WHERE o.str = 'foo'\")\n+            .getSingleResult();\n+        assertNotNull(oli);\n+        em.lock(oli, LockModeType.READ);\n+\n+        EntityManager em2 = emf.createEntityManager();\n+        em2.getTransaction().begin();\n+        em2.createQuery(\"UPDATE OptimisticLockInstance o SET o.str = 'foo', \"\n+            + \"o.intField = o.intField + 1\"\n+            + (incrementVersionField ? \", o.oplock = o.oplock + 1 \" : \"\")\n+            + \"WHERE o.str = 'foo'\")\n+            .executeUpdate();\n+        em2.getTransaction().commit();\n+        em2.close();\n+\n+        try {\n+            em.getTransaction().commit();\n+            fail(\"transaction should have failed\");\n+        } catch (RollbackException re) {\n+            assertTrue(\"nested exception must be an oplock exception\",\n+                re.getCause() instanceof OptimisticLockException);\n+        } finally {\n+            em.close();\n+        }\n+    }\n+}"},{"sha":"0108ae5e0859d6c73138f4b9c31961da67a2227c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheMultiThreadedLoad.java","status":"modified","additions":41,"deletions":41,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheMultiThreadedLoad.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheMultiThreadedLoad.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestCacheMultiThreadedLoad.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,41 +1,41 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-/**\r\n- * Multi-threaded cache load test for running in the autobuild.\r\n- *\r\n- * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n- */\r\n-public class TestCacheMultiThreadedLoad\r\n-    extends CacheLoadTest {\r\n-\r\n-    public TestCacheMultiThreadedLoad() {\r\n-        // pared down iteration and thread count for running in the\r\n-        // autobbuild\r\n-        interationCount = 400;\r\n-        threadCount = 10;\r\n-    }\r\n-\r\n-    public boolean skipTest() {\r\n-        return true;\r\n-    }\r\n-}\r\n-\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+/**\n+ * Multi-threaded cache load test for running in the autobuild.\n+ *\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\n+ */\n+public class TestCacheMultiThreadedLoad\n+    extends CacheLoadTest {\n+\n+    public TestCacheMultiThreadedLoad() {\n+        // pared down iteration and thread count for running in the\n+        // autobbuild\n+        interationCount = 400;\n+        threadCount = 10;\n+    }\n+\n+    public boolean skipTest() {\n+        return true;\n+    }\n+}\n+\n+"},{"sha":"26a2613e9ec1bf8875ef977dfb70c440e344c8c0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestConcurrentDataCache.java","status":"modified","additions":55,"deletions":55,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestConcurrentDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestConcurrentDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestConcurrentDataCache.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,55 +1,55 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-/**\r\n- * Test data caching across multiple factories in the same JVM, using\r\n- * the single-JVM commit provider to communicate updates..\r\n- */\r\n-public class TestConcurrentDataCache\r\n-    extends CacheTest {\r\n-\r\n-    public TestConcurrentDataCache(String test) {\r\n-        super(test);\r\n-    }\r\n-\r\n-    protected String[] getConfs() {\r\n-        return new String[]{\r\n-            // the second cache is there solely to differentiate between\r\n-            // this PMF and the PMF created from confs2 below\r\n-            \"openjpa.DataCache\",\r\n-            \"concurrent, concurrent(Name=differentiatingProperty1)\",\r\n-            \"openjpa.QueryCache\", \"true\",\r\n-            \"openjpa.RemoteCommitProvider\", \"sjvm\",\r\n-            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\r\n-        };\r\n-    }\r\n-\r\n-    protected String[] getConfs2() {\r\n-        return new String[]{\r\n-            // the second cache is there solely to differentiate between\r\n-            // this PMF and the PMF created from confs above\r\n-            \"openjpa.DataCache\",\r\n-            \"concurrent, concurrent(Name=differentiatingProperty2)\",\r\n-            \"openjpa.QueryCache\", \"concurrent\",\r\n-            \"openjpa.RemoteCommitProvider\", \"sjvm\",\r\n-            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\r\n-        };\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+/**\n+ * Test data caching across multiple factories in the same JVM, using\n+ * the single-JVM commit provider to communicate updates..\n+ */\n+public class TestConcurrentDataCache\n+    extends CacheTest {\n+\n+    public TestConcurrentDataCache(String test) {\n+        super(test);\n+    }\n+\n+    protected String[] getConfs() {\n+        return new String[]{\n+            // the second cache is there solely to differentiate between\n+            // this PMF and the PMF created from confs2 below\n+            \"openjpa.DataCache\",\n+            \"concurrent, concurrent(Name=differentiatingProperty1)\",\n+            \"openjpa.QueryCache\", \"true\",\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\",\n+            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\n+        };\n+    }\n+\n+    protected String[] getConfs2() {\n+        return new String[]{\n+            // the second cache is there solely to differentiate between\n+            // this PMF and the PMF created from confs above\n+            \"openjpa.DataCache\",\n+            \"concurrent, concurrent(Name=differentiatingProperty2)\",\n+            \"openjpa.QueryCache\", \"concurrent\",\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\",\n+            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\n+        };\n+    }\n+}"},{"sha":"d0ceaa10c22563860e9574aa1e1ef2d69161d88c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java","status":"modified","additions":524,"deletions":524,"changes":1048,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheBehavesIdentical.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,524 +1,524 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.LockModeType;\r\n-\r\n-import org.apache.openjpa.persistence.EntityManagerImpl;\r\n-import org.apache.openjpa.persistence.EntityNotFoundException;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n-import org.apache.openjpa.persistence.StoreCache;\r\n-import org.apache.openjpa.persistence.StoreCacheImpl;\r\n-import org.apache.openjpa.persistence.cache.common.apps.BidirectionalOne2OneOwned;\r\n-import org.apache.openjpa.persistence.cache.common.apps.BidirectionalOne2OneOwner;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.PObject;\r\n-\r\n-/**\r\n- * Tests various application behavior with or without DataCache.\r\n- * Ideally, an application should behave identically irrespective of the \r\n- * DataCache. However, purpose of this test is to identify specific scenarios\r\n- * where this ideal is violated. The test case also demonstrates, wherever\r\n- * possible, what extra step an application may take to ensure that its \r\n- * behavior with or without DataCache remains identical.   \r\n- * \r\n- * So far following use cases are found to demonstrate behavioral differences:\r\n- * 1. Inconsistent bidirectional relation\r\n- * 2. Refresh\r\n- * \r\n- * @author Pinaki Poddar\r\n- * \r\n- */\r\n-public class TestDataCacheBehavesIdentical extends AbstractTestCase {\r\n-\tprivate static OpenJPAEntityManagerFactorySPI emfWithDataCache;\r\n-\tprivate static OpenJPAEntityManagerFactorySPI emfWithoutDataCache;\r\n-\t\r\n-\tprivate static final boolean WITH_DATACACHE = true;\r\n-\tprivate static final boolean CONSISTENT = true;\r\n-\tprivate static final boolean DIRTY = true;\r\n-\tprivate static final boolean REFRESH_FROM_DATACACHE = true;\r\n-\tprivate static final LockModeType NOLOCK = null;\r\n-\tprivate static final Class ENTITY_NOT_FOUND_ERROR = EntityNotFoundException.class;\r\n-\tprivate static final Class NO_ERROR = null;\r\n-\r\n-\tprivate static final String MARKER_DATACACHE = \"in DataCache\";\r\n-\tprivate static final String MARKER_DATABASE  = \"in Database\";\r\n-\tprivate static final String MARKER_CACHE     = \"in Object Cache\";\r\n-\tprivate static final String MARKER_DIRTY_CACHE = \"in Object Cache (dirty)\";\r\n-\tprivate static long ID_COUNTER = System.currentTimeMillis();\r\n-\t\r\n-\r\n-\t/**\r\n-\t * Sets up two EntityManagerFactory: one with DataCache another without.\r\n-\t */\r\n-\tpublic void setUp() throws Exception {\r\n-\t\tsuper.setUp();\r\n-\t\tif (emfWithDataCache == null) {\r\n-\t\t\temfWithDataCache = createEMF(\r\n-\t\t\t\t\t\"openjpa.jdbc.SynchronizeMappings\",\t\"buildSchema\", \r\n-\t\t\t\t\t\"openjpa.RuntimeUnenhancedClasses\",\t\"unsupported\", \r\n-\t\t\t\t\t\"openjpa.DataCache\", \"true\",\r\n-\t\t\t\t\t\"openjpa.RemoteCommitProvider\", \"sjvm\",\r\n-\t\t\t\t\t\"openjpa.jdbc.UpdateManager\", \"constraint\",\r\n-\t\t\t\t\tPObject.class,\r\n-\t\t\t\t\tBidirectionalOne2OneOwner.class,\r\n-\t\t\t\t\tBidirectionalOne2OneOwned.class, CLEAR_TABLES);\r\n-\t\t\temfWithoutDataCache = createEMF(\r\n-\t\t\t\t\t\"openjpa.RuntimeUnenhancedClasses\",\t\"unsupported\", \r\n-\t\t\t\t\t\"openjpa.DataCache\", \"false\",\r\n-\t\t\t\t\t\"openjpa.jdbc.UpdateManager\", \"constraint\",\r\n-\t\t\t\t\tPObject.class,\r\n-\t\t\t\t\tBidirectionalOne2OneOwned.class,\r\n-\t\t\t\t\tBidirectionalOne2OneOwner.class, CLEAR_TABLES);\r\n-\r\n-\t\t\tassertNotNull(emfWithDataCache);\r\n-\t\t\tassertNotNull(emfWithoutDataCache);\r\n-\r\n-\t\t\t// StoreCache is, by design, always non-null \r\n-\t\t\tassertNotNull(emfWithDataCache.getStoreCache());\r\n-\t\t\tassertNotNull(emfWithoutDataCache.getStoreCache());\r\n-\r\n-\t\t\t// however, following distinguishes whether DataCache is active  \r\n-\t\t\tassertTrue(isDataCacheActive(emfWithDataCache));\r\n-\t\t\tassertFalse(isDataCacheActive(emfWithoutDataCache));\r\n-\t\t}\r\n-\t}\r\n-\t\r\n-\t/**\r\n-\t * Affirms via internal structures if the given factory is configured with\r\n-\t * active DataCache. Because, even when DataCache is configured to be\r\n-\t * false, a no-op StoreCache is instantiated by design.\r\n-\t */\r\n-\tboolean isDataCacheActive(OpenJPAEntityManagerFactorySPI emf) {\r\n-\t\treturn ((StoreCacheImpl) emf.getStoreCache()).getDelegate() != null\r\n-\t\t    && emf.getConfiguration()\r\n-\t\t          .getDataCacheManagerInstance()\r\n-\t\t          .getSystemDataCache() != null;\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Create one-to-one bidirectional relation (may or may not be consistent)\r\n-\t * between two pairs of instances. Creates four instances Owner1, Owned1,\r\n-\t * Owner2, Owned2. The first instance has the given id. The id of the other\r\n-\t * instances monotonically increase by 1. The relationship is set either\r\n-\t * consistently or inconsistently. Consistent relation is when Owner1 points\r\n-\t * to Owned1 and Owned1 points back to Owner1. Inconsistent relation is when\r\n-\t * Owner1 points to Owned1 but Owned1 points to Owner2 instead of Owner1.\r\n-\t * \r\n-\t * \r\n-\t * @param em\r\n-\t *            the entity manager to persist the instances\r\n-\t * @param id\r\n-\t *            the identifier of the first owner instance. The identifier for\r\n-\t *            the other instances are sequential in order of creation.\r\n-\t * @param consistent\r\n-\t *            if true sets the relationship as consistent.\r\n-\t */\r\n-\tpublic void createBidirectionalRelation(EntityManager em, long id,\r\n-\t\t\tboolean consistent) {\r\n-\t\tBidirectionalOne2OneOwner owner1 = new BidirectionalOne2OneOwner();\r\n-\t\tBidirectionalOne2OneOwned owned1 = new BidirectionalOne2OneOwned();\r\n-\t\tBidirectionalOne2OneOwner owner2 = new BidirectionalOne2OneOwner();\r\n-\t\tBidirectionalOne2OneOwned owned2 = new BidirectionalOne2OneOwned();\r\n-\t\t\r\n-\t\towner1.setId(id++);\r\n-\t\towned1.setId(id++);\r\n-\t\towner2.setId(id++);\r\n-\t\towned2.setId(id++);\r\n-\t\t\r\n-\t\towner1.setName(\"Owner1\");\r\n-\t\towned1.setName(\"Owned1\");\r\n-\t\towned2.setName(\"Owned2\");\r\n-\t\towner2.setName(\"Owner2\");\r\n-\r\n-\t\towner1.setOwned(owned1);\r\n-\t\towner2.setOwned(owned2);\r\n-\r\n-\t\tif (consistent) {\r\n-\t\t\towned1.setOwner(owner1);\r\n-\t\t\towned2.setOwner(owner2);\r\n-\t\t} else {\r\n-\t\t\towned1.setOwner(owner2);\r\n-\t\t\towned2.setOwner(owner1);\r\n-\t\t}\r\n-\r\n-\t\tem.getTransaction().begin();\r\n-\t\tem.persist(owner1);\r\n-\t\tem.persist(owned1);\r\n-\t\tem.persist(owner2);\r\n-\t\tem.persist(owned2);\r\n-\t\tem.getTransaction().commit();\r\n-\t\tem.clear();\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Verifies that bidirectionally related objects can be persisted \r\n-\t * and later retrieved in a different transaction. \r\n-\t * \r\n-\t * Creates interrelated set of four instances.\r\n-\t * Establish their relation either consistently or inconsistently based\r\n-\t * on the given flag.\r\n-\t * Persist them and then clear the context. \r\n-\t * Fetch the instances in memory again by their identifiers. \r\n-\t * Compare the interrelations between the fetched instances with the \r\n-\t * relations of the original instances (which can be consistent or \r\n-\t * inconsistent). \r\n-\t * \r\n-\t * The mapping specification is such that the bidirectional relation is \r\n-\t * stored in database by a single foreign key. Hence database relation\r\n-\t * is always consistent. Hence the instances retrieved from database are\r\n-\t * always consistently related irrespective of whether they were created\r\n-\t * with consistent or inconsistent relation.\r\n-\t * However, when the instances are retrieved from the data cache, data cache\r\n-\t * will preserve the in-memory relations even when they are inconsistent.\r\n-\t *    \r\n-\t * @param useDataCache\r\n-\t *            use DataCache\r\n-\t * @param consistent\r\n-\t *            assume that the relationship were created as consistent.\r\n-\t */\r\n-\tpublic void verifyBidirectionalRelation(boolean useDataCache,\r\n-\t\t\tboolean createConsistent, boolean expectConsistent) {\r\n-\t\tEntityManager em = (useDataCache) \r\n-\t\t                 ? emfWithDataCache.createEntityManager() \r\n-\t\t                 : emfWithoutDataCache.createEntityManager();\r\n-\t\t                 \r\n-\t\tlong id = ID_COUNTER++;\r\n-\t\tID_COUNTER += 4;\r\n-\t\tcreateBidirectionalRelation(em, id, createConsistent);\r\n-\t\t\r\n-\t\t\r\n-\t\tBidirectionalOne2OneOwner owner1 = em.find(BidirectionalOne2OneOwner.class, id);\r\n-\t\tBidirectionalOne2OneOwned owned1 = em.find(BidirectionalOne2OneOwned.class, id + 1);\r\n-\t\tBidirectionalOne2OneOwner owner2 = em.find(BidirectionalOne2OneOwner.class, id + 2);\r\n-\t\tBidirectionalOne2OneOwned owned2 = em.find(BidirectionalOne2OneOwned.class, id + 3);\r\n-\r\n-\t\tassertNotNull(owner1);\r\n-\t\tassertNotNull(owner2);\r\n-\t\tassertNotNull(owned1);\r\n-\t\tassertNotNull(owned2);\r\n-\r\n-\t\tassertEquals(owner1, expectConsistent \r\n-\t\t\t\t\t? owner1.getOwned().getOwner() \r\n-\t\t\t\t\t: owner2.getOwned().getOwner());\r\n-\t\tassertEquals(owner2, expectConsistent \r\n-\t\t\t\t\t? owner2.getOwned().getOwner() \r\n-\t\t\t\t    : owner1.getOwned().getOwner());\r\n-\r\n-\r\n-\t\tassertEquals(owned1, owner1.getOwned());\r\n-\t\tassertEquals(expectConsistent ? owner1 : owner2, owned1.getOwner());\r\n-\t\tassertEquals(owned2, owner2.getOwned());\r\n-\t\tassertEquals(expectConsistent ? owner2 : owner1, owned2.getOwner());\r\n-\t}\r\n-\r\n-\tpublic void testConsitentBidirectionalRelationIsPreservedWithDataCache() {\r\n-\t\tverifyBidirectionalRelation(WITH_DATACACHE, CONSISTENT, CONSISTENT);\r\n-\t}\r\n-\r\n-\tpublic void testConsitentBidirectionalRelationIsPreservedWithoutDataCache() {\r\n-\t\tverifyBidirectionalRelation(!WITH_DATACACHE, CONSISTENT, CONSISTENT);\r\n-\t}\r\n-\r\n-\tpublic void testInconsitentBidirectionalRelationIsPreservedWithDataCache() {\r\n-\t\tverifyBidirectionalRelation(WITH_DATACACHE, !CONSISTENT, !CONSISTENT);\r\n-\t}\r\n-\r\n-\tpublic void testInconsitentBidirectionalRelationIsNotPreservedWithoutDataCache() {\r\n-\t\tverifyBidirectionalRelation(!WITH_DATACACHE, !CONSISTENT, CONSISTENT);\r\n-\t}\r\n-\t\r\n-\t/**\r\n-\t * Verify that refresh() may fetch state from either the data cache or the\r\n-\t * database based on different conditions. \r\n-\t * The conditions that impact are \r\n-\t * a) whether current lock is stronger than NONE \r\n-\t * b) whether the instance being refreshed is dirty\r\n-\t * \r\n-\t * An instance is created with data cache marker and persisted. \r\n-\t * A native SQL is used to update the database record with database marker. \r\n-\t * The in-memory instance is not aware of this out-of-band update. \r\n-\t * Then the in-memory instance is refreshed. The marker of the refreshed \r\n-\t * instance tells whether the instance is refreshed from the data cache\r\n-\t * of the database. \r\n-\t * \r\n-\t * @param useDataCache flags if data cache is active. if not, then surely\r\n-\t * refresh always fetch state from the database.\r\n-\t * \r\n-\t * @param datacache the marker for the copy of the data cached instance\r\n-\t * @param database the marker for the database record\r\n-\t * @param lock lock to be used\r\n-\t * @param makeDirtyBeforeRefresh flags if the instance be dirtied before\r\n-\t * refresh()\r\n-\t * @param expected The expected marker i.e. where the state is refreshed \r\n-\t * from. This should be always <code>MARKER_DATABASE</code>.\r\n-\t * a) whether DataCache is active\r\n-\t * b) whether current Lock is stronger than NOLOCK\r\n-\t * c) whether the object to be refreshed is dirty\r\n-\t * \r\n-\t * The following truth table enumerates the possibilities\r\n-\t * \r\n-\t * Use Cache?   Lock?   Dirty?     Target\r\n-\t *    Y          Y       Y         Database\r\n-\t *    Y          N       Y         Data Cache\r\n-\t *    Y          Y       N         Data Cache\r\n-\t *    Y          N       N         Data Cache\r\n-\t *    \r\n-\t *    N          Y       Y         Database\r\n-\t *    N          N       Y         Database\r\n-\t *    N          Y       N         Object Cache\r\n-\t *    N          N       N         Object Cache\r\n-\r\n-\t */\r\n-\tpublic void verifyRefresh(boolean useDataCache, LockModeType lock, \r\n-\t\t\tboolean makeDirtyBeforeRefresh, boolean refreshFromDataCache, \r\n-\t\t\tString expected) {\r\n-\t\tOpenJPAEntityManagerFactorySPI emf = (useDataCache)\r\n-\t\t\t? emfWithDataCache : emfWithoutDataCache;\r\n-\t\temf.getConfiguration().setRefreshFromDataCache(refreshFromDataCache);\r\n-\t\tOpenJPAEntityManagerSPI em = emf.createEntityManager();\r\n-        \r\n-\t\tem.getTransaction().begin();\r\n-\t\tPObject pc = new PObject();\r\n-\t\tpc.setName(useDataCache ? MARKER_DATACACHE : MARKER_CACHE);\r\n-\t\tem.persist(pc);\r\n-\t\tem.getTransaction().commit();\r\n-\t\t\r\n-\t\tObject oid = pc.getId();\r\n-\t\tStoreCache dataCache = emf.getStoreCache();\r\n-\t\tassertEquals(useDataCache, dataCache.contains(PObject.class, oid));\r\n-\t\t\r\n-\t\t// Modify the record in the database in a separate transaction using\r\n-\t\t// native SQL so that the in-memory instance is not altered \r\n-\t\tem.getTransaction().begin();\r\n-\t\tString sql = \"UPDATE POBJECT SET NAME='\"+ MARKER_DATABASE +\"' WHERE id=\"+oid;\r\n-\t\tem.createNativeQuery(sql).executeUpdate();\r\n-\t\tem.getTransaction().commit();\r\n-\t\t\r\n-\t\tassertEquals(useDataCache ? MARKER_DATACACHE : MARKER_CACHE, pc.getName());\r\n-\t\t\r\n-\t\tem.getTransaction().begin();\r\n-\t\tif (makeDirtyBeforeRefresh) {\r\n-\t\t\tpc.setName(MARKER_DIRTY_CACHE);\r\n-\t\t} \r\n-\t\tassertEquals(makeDirtyBeforeRefresh, em.isDirty(pc));\r\n-\r\n-\t\tif (lock != null) {\r\n-\t\t\t((EntityManagerImpl)em).getFetchPlan().setReadLockMode(lock);\r\n-\t\t}\r\n-\t\tem.refresh(pc);\r\n-\t\t\r\n-\t\tassertEquals(expected, pc.getName());\r\n-\t\tem.getTransaction().commit();\r\n-\t}\r\n-\t\r\n-\t/**\r\n-\t * The expected marker i.e. where the state is refreshed from depends on\r\n-\t * a) whether DataCache is active\r\n-\t * b) whether current Lock is stronger than NOLOCK\r\n-\t * c) whether the object to be refreshed is dirty\r\n-\t * \r\n-\t * The following truth table enumerates the possibilities\r\n-\t * \r\n-\t * Use Cache?   Lock?   Dirty?     Target\r\n-\t *    Y          Y       Y         Database\r\n-\t *    Y          N       Y         Data Cache\r\n-\t *    Y          Y       N         Data Cache\r\n-\t *    Y          N       N         Data Cache\r\n-\t *    \r\n-\t *    N          Y       Y         Database\r\n-\t *    N          N       Y         Database\r\n-\t *    N          Y       N         Object Cache\r\n-\t *    N          N       N         Object Cache\r\n-\t *    \r\n-\t * @param datacache the marker for \r\n-\t * @param database\r\n-\t * @param useDataCache\r\n-\t * @param lock\r\n-\t * @param makeDirtyBeforeRefresh\r\n-\t * @return\r\n-\t */\r\n-\tString getExpectedMarker(boolean useDataCache, LockModeType lock, \r\n-\t\t\tboolean makeDirtyBeforeRefresh) {\r\n-\t\tif (useDataCache) {\r\n-\t\t\treturn (lock != null) ? MARKER_DATABASE : MARKER_DATACACHE; \r\n-\t\t} else {\r\n-\t\t\treturn MARKER_DATABASE;\r\n-\t\t}\r\n-\t}\r\n-\t\r\n-\tpublic void testDirtyRefreshWithNoLockHitsDatabase() {\r\n-\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n-\t}\r\n-\t\r\n-\tpublic void testDirtyRefreshWithNoLockHitsDataCache() {\r\n-\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n-\t}\r\n-\t\r\n-\tpublic void testCleanRefreshWithNoLockDoesNotHitDatabase() {\r\n-\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n-\t}\r\n-\t\r\n-\tpublic void testCleanRefreshWithNoLockHitsDataCache() {\r\n-\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, !DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n-\t}\r\n-\t\r\n-\tpublic void testDirtyRefreshWithReadLockHitsDatabase() {\r\n-\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n-\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n-\t}\r\n-\t\r\n-\tpublic void testCleanRefreshWithReadLockDoesNotHitDatabase() {\r\n-\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, !DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n-\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n-\t}\r\n-\t\r\n-\tpublic void testDirtyRefreshWithWriteLockHitsDatabase() {\r\n-\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n-\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n-\t}\r\n-\t\r\n-\tpublic void testCleanRefreshWithWriteLockDoesNotHitDatabase() {\r\n-\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, !DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n-\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\r\n-\t}\r\n-\t\r\n-\tpublic void testDirtyRefreshWithoutDataCacheAlwaysHitsDatabase() {\r\n-\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n-\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n-\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n-\t\t\r\n-\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n-\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n-\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATABASE);\r\n-\t}\r\n-\t\r\n-\tpublic void testCleanRefreshWithoutDataCacheDoesNotHitDatabase() {\r\n-\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, !DIRTY, REFRESH_FROM_DATACACHE, MARKER_CACHE);\r\n-\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, !DIRTY, REFRESH_FROM_DATACACHE,  MARKER_CACHE);\r\n-\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, !DIRTY, REFRESH_FROM_DATACACHE,  MARKER_CACHE);\r\n-\t\t\r\n-\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_CACHE);\r\n-\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_CACHE);\r\n-\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_CACHE);\r\n-\t}\r\n-\t\r\n-\t/**\r\n-\t * Verify behavior of refreshing an instance which has been deleted by\r\n-\t * out-of-band process (e.g. a native SQL in a separate transaction).\r\n-\t * The behavior differs when refresh() without a lock fetches the data from\r\n-\t * DataCache even when the original database record is deleted.\r\n-\t * \r\n-\t * @param useDataCache\r\n-\t * @param lock\r\n-\t */\r\n-\tpublic void verifyDeleteDetectionOnRefresh(boolean useDataCache, \r\n-\t\t\tboolean dirty, LockModeType lock, Class expectedExceptionType) {\r\n-\t\tOpenJPAEntityManagerFactorySPI emf = (useDataCache)\r\n-\t\t\t? emfWithDataCache : emfWithoutDataCache;\r\n-\t\t\t\r\n-\t\tOpenJPAEntityManagerSPI em = emf.createEntityManager();\r\n-        \r\n-\t\tem.getTransaction().begin();\r\n-\t\tPObject pc = new PObject();\r\n-\t\tpc.setName(useDataCache ? MARKER_DATACACHE : MARKER_CACHE);\r\n-\t\tem.persist(pc);\r\n-\t\tem.getTransaction().commit();\r\n-\t\t\r\n-\t\tObject oid = pc.getId();\r\n-\t\tStoreCache dataCache = emf.getStoreCache();\r\n-\t\tassertEquals(useDataCache, dataCache.contains(PObject.class, oid));\r\n-\t\t\r\n-\t\t// delete the record in the database in a separate transaction using\r\n-\t\t// native SQL so that the in-memory instance is not altered \r\n-\t\tem.getTransaction().begin();\r\n-\t\tString sql = \"DELETE FROM POBJECT WHERE id=\"+oid;\r\n-\t\tem.createNativeQuery(sql).executeUpdate();\r\n-\t\tem.getTransaction().commit();\r\n-\t\t\r\n-\t\t// the object cache does not know that the record was deleted\r\n-\t\tassertTrue(em.contains(pc));\r\n-\t\t// nor does the data cache\r\n-\t\tassertEquals(useDataCache, dataCache.contains(PObject.class, oid));\r\n-\t\t\r\n-\t\t/**\r\n-\t\t * refresh behavior no more depends on current lock. Refresh\r\n-\t\t * will always attempt to fetch the instance from database \r\n-\t\t * raising EntityNotFoundException.\r\n-\t\t *   \r\n-\t\t */\r\n-\t\tem.getTransaction().begin();\r\n-\t\tem.getFetchPlan().setReadLockMode(lock);\r\n-\t\tif (dirty) \r\n-\t\t\tpc.setName(\"Dirty Name\");\r\n-\t\ttry {\r\n-\t\t\tem.refresh(pc);\r\n-\t\t\tif (expectedExceptionType != null) {\r\n-\t\t\t\tfail(\"expected \" + expectedExceptionType.getSimpleName() + \r\n-\t\t\t\t\t\t\" for PObject:\" + oid);\r\n-\t\t\t}\r\n-\t\t} catch (Exception ex) {\r\n-\t\t\tboolean expectedException = expectedExceptionType != null &&\r\n-\t\t\t    expectedExceptionType.isAssignableFrom(ex.getClass());\r\n-\t\t\tif (!expectedException) {\r\n-\t\t\t\tex.printStackTrace();\r\n-\t\t\t\tString error = (expectedExceptionType == null) \r\n-\t\t\t\t\t? \"no exception\" : expectedExceptionType.getName();\r\n-\t\t\t\tfail(\"expected \" + error + \" for PObject:\" + oid);\r\n-\t\t\t}\r\n-\t\t} finally {\r\n-\t\t\tem.getTransaction().rollback();\r\n-\t\t}\r\n-\t}\r\n-\r\n-\tpublic void testDeleteIsNotDetectedOnCleanRefreshWithoutLockWithDataCache() {\r\n-\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, !DIRTY, NOLOCK, NO_ERROR);\r\n-\t}\r\n-\t\r\n-\tpublic void testDeleteIsDetectedOnCleanRefreshWithLockWithDataCache() {\r\n-\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, !DIRTY, LockModeType.READ, ENTITY_NOT_FOUND_ERROR);\r\n-\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, !DIRTY, LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\r\n-\t}\r\n-\r\n-\tpublic void testDeleteIsNotDetectedOnDirtyRefreshWithoutLockWithDataCache() {\r\n-\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, NOLOCK, NO_ERROR);\t\r\n-\t}\r\n-\t\r\n-\tpublic void testDeleteIsDetectedOnDirtyRefreshWithLockWithDataCache() {\r\n-\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, LockModeType.READ, ENTITY_NOT_FOUND_ERROR);\r\n-\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\r\n-\t}\r\n-\t\r\n-\tpublic void testDeleteIsDetectedOnDirtyRefreshWitDataCache() {\r\n-\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, LockModeType.READ, ENTITY_NOT_FOUND_ERROR);\r\n-\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\r\n-\t}\r\n-\t\r\n-\tpublic void testDeleteIsDetectedOnCleanRefreshWithoutLockWithoutDataCache() {\r\n-\t\tverifyDeleteDetectionOnRefresh(!WITH_DATACACHE, !DIRTY, NOLOCK, ENTITY_NOT_FOUND_ERROR);\r\n-\t}\r\n-\t\r\n-\tpublic void testDeleteIsDetectedOnCleanRefreshWithLockWithoutDataCache() {\r\n-\t\tverifyDeleteDetectionOnRefresh(!WITH_DATACACHE, !DIRTY, LockModeType.READ, ENTITY_NOT_FOUND_ERROR);\r\n-\t\tverifyDeleteDetectionOnRefresh(!WITH_DATACACHE, !DIRTY, LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\r\n-\t}\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.LockModeType;\n+\n+import org.apache.openjpa.persistence.EntityManagerImpl;\n+import org.apache.openjpa.persistence.EntityNotFoundException;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.StoreCache;\n+import org.apache.openjpa.persistence.StoreCacheImpl;\n+import org.apache.openjpa.persistence.cache.common.apps.BidirectionalOne2OneOwned;\n+import org.apache.openjpa.persistence.cache.common.apps.BidirectionalOne2OneOwner;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+import org.apache.openjpa.persistence.datacache.common.apps.PObject;\n+\n+/**\n+ * Tests various application behavior with or without DataCache.\n+ * Ideally, an application should behave identically irrespective of the \n+ * DataCache. However, purpose of this test is to identify specific scenarios\n+ * where this ideal is violated. The test case also demonstrates, wherever\n+ * possible, what extra step an application may take to ensure that its \n+ * behavior with or without DataCache remains identical.   \n+ * \n+ * So far following use cases are found to demonstrate behavioral differences:\n+ * 1. Inconsistent bidirectional relation\n+ * 2. Refresh\n+ * \n+ * @author Pinaki Poddar\n+ * \n+ */\n+public class TestDataCacheBehavesIdentical extends AbstractTestCase {\n+\tprivate static OpenJPAEntityManagerFactorySPI emfWithDataCache;\n+\tprivate static OpenJPAEntityManagerFactorySPI emfWithoutDataCache;\n+\t\n+\tprivate static final boolean WITH_DATACACHE = true;\n+\tprivate static final boolean CONSISTENT = true;\n+\tprivate static final boolean DIRTY = true;\n+\tprivate static final boolean REFRESH_FROM_DATACACHE = true;\n+\tprivate static final LockModeType NOLOCK = null;\n+\tprivate static final Class ENTITY_NOT_FOUND_ERROR = EntityNotFoundException.class;\n+\tprivate static final Class NO_ERROR = null;\n+\n+\tprivate static final String MARKER_DATACACHE = \"in DataCache\";\n+\tprivate static final String MARKER_DATABASE  = \"in Database\";\n+\tprivate static final String MARKER_CACHE     = \"in Object Cache\";\n+\tprivate static final String MARKER_DIRTY_CACHE = \"in Object Cache (dirty)\";\n+\tprivate static long ID_COUNTER = System.currentTimeMillis();\n+\t\n+\n+\t/**\n+\t * Sets up two EntityManagerFactory: one with DataCache another without.\n+\t */\n+\tpublic void setUp() throws Exception {\n+\t\tsuper.setUp();\n+\t\tif (emfWithDataCache == null) {\n+\t\t\temfWithDataCache = createEMF(\n+\t\t\t\t\t\"openjpa.jdbc.SynchronizeMappings\",\t\"buildSchema\", \n+\t\t\t\t\t\"openjpa.RuntimeUnenhancedClasses\",\t\"unsupported\", \n+\t\t\t\t\t\"openjpa.DataCache\", \"true\",\n+\t\t\t\t\t\"openjpa.RemoteCommitProvider\", \"sjvm\",\n+\t\t\t\t\t\"openjpa.jdbc.UpdateManager\", \"constraint\",\n+\t\t\t\t\tPObject.class,\n+\t\t\t\t\tBidirectionalOne2OneOwner.class,\n+\t\t\t\t\tBidirectionalOne2OneOwned.class, CLEAR_TABLES);\n+\t\t\temfWithoutDataCache = createEMF(\n+\t\t\t\t\t\"openjpa.RuntimeUnenhancedClasses\",\t\"unsupported\", \n+\t\t\t\t\t\"openjpa.DataCache\", \"false\",\n+\t\t\t\t\t\"openjpa.jdbc.UpdateManager\", \"constraint\",\n+\t\t\t\t\tPObject.class,\n+\t\t\t\t\tBidirectionalOne2OneOwned.class,\n+\t\t\t\t\tBidirectionalOne2OneOwner.class, CLEAR_TABLES);\n+\n+\t\t\tassertNotNull(emfWithDataCache);\n+\t\t\tassertNotNull(emfWithoutDataCache);\n+\n+\t\t\t// StoreCache is, by design, always non-null \n+\t\t\tassertNotNull(emfWithDataCache.getStoreCache());\n+\t\t\tassertNotNull(emfWithoutDataCache.getStoreCache());\n+\n+\t\t\t// however, following distinguishes whether DataCache is active  \n+\t\t\tassertTrue(isDataCacheActive(emfWithDataCache));\n+\t\t\tassertFalse(isDataCacheActive(emfWithoutDataCache));\n+\t\t}\n+\t}\n+\t\n+\t/**\n+\t * Affirms via internal structures if the given factory is configured with\n+\t * active DataCache. Because, even when DataCache is configured to be\n+\t * false, a no-op StoreCache is instantiated by design.\n+\t */\n+\tboolean isDataCacheActive(OpenJPAEntityManagerFactorySPI emf) {\n+\t\treturn ((StoreCacheImpl) emf.getStoreCache()).getDelegate() != null\n+\t\t    && emf.getConfiguration()\n+\t\t          .getDataCacheManagerInstance()\n+\t\t          .getSystemDataCache() != null;\n+\t}\n+\n+\t/**\n+\t * Create one-to-one bidirectional relation (may or may not be consistent)\n+\t * between two pairs of instances. Creates four instances Owner1, Owned1,\n+\t * Owner2, Owned2. The first instance has the given id. The id of the other\n+\t * instances monotonically increase by 1. The relationship is set either\n+\t * consistently or inconsistently. Consistent relation is when Owner1 points\n+\t * to Owned1 and Owned1 points back to Owner1. Inconsistent relation is when\n+\t * Owner1 points to Owned1 but Owned1 points to Owner2 instead of Owner1.\n+\t * \n+\t * \n+\t * @param em\n+\t *            the entity manager to persist the instances\n+\t * @param id\n+\t *            the identifier of the first owner instance. The identifier for\n+\t *            the other instances are sequential in order of creation.\n+\t * @param consistent\n+\t *            if true sets the relationship as consistent.\n+\t */\n+\tpublic void createBidirectionalRelation(EntityManager em, long id,\n+\t\t\tboolean consistent) {\n+\t\tBidirectionalOne2OneOwner owner1 = new BidirectionalOne2OneOwner();\n+\t\tBidirectionalOne2OneOwned owned1 = new BidirectionalOne2OneOwned();\n+\t\tBidirectionalOne2OneOwner owner2 = new BidirectionalOne2OneOwner();\n+\t\tBidirectionalOne2OneOwned owned2 = new BidirectionalOne2OneOwned();\n+\t\t\n+\t\towner1.setId(id++);\n+\t\towned1.setId(id++);\n+\t\towner2.setId(id++);\n+\t\towned2.setId(id++);\n+\t\t\n+\t\towner1.setName(\"Owner1\");\n+\t\towned1.setName(\"Owned1\");\n+\t\towned2.setName(\"Owned2\");\n+\t\towner2.setName(\"Owner2\");\n+\n+\t\towner1.setOwned(owned1);\n+\t\towner2.setOwned(owned2);\n+\n+\t\tif (consistent) {\n+\t\t\towned1.setOwner(owner1);\n+\t\t\towned2.setOwner(owner2);\n+\t\t} else {\n+\t\t\towned1.setOwner(owner2);\n+\t\t\towned2.setOwner(owner1);\n+\t\t}\n+\n+\t\tem.getTransaction().begin();\n+\t\tem.persist(owner1);\n+\t\tem.persist(owned1);\n+\t\tem.persist(owner2);\n+\t\tem.persist(owned2);\n+\t\tem.getTransaction().commit();\n+\t\tem.clear();\n+\t}\n+\n+\t/**\n+\t * Verifies that bidirectionally related objects can be persisted \n+\t * and later retrieved in a different transaction. \n+\t * \n+\t * Creates interrelated set of four instances.\n+\t * Establish their relation either consistently or inconsistently based\n+\t * on the given flag.\n+\t * Persist them and then clear the context. \n+\t * Fetch the instances in memory again by their identifiers. \n+\t * Compare the interrelations between the fetched instances with the \n+\t * relations of the original instances (which can be consistent or \n+\t * inconsistent). \n+\t * \n+\t * The mapping specification is such that the bidirectional relation is \n+\t * stored in database by a single foreign key. Hence database relation\n+\t * is always consistent. Hence the instances retrieved from database are\n+\t * always consistently related irrespective of whether they were created\n+\t * with consistent or inconsistent relation.\n+\t * However, when the instances are retrieved from the data cache, data cache\n+\t * will preserve the in-memory relations even when they are inconsistent.\n+\t *    \n+\t * @param useDataCache\n+\t *            use DataCache\n+\t * @param consistent\n+\t *            assume that the relationship were created as consistent.\n+\t */\n+\tpublic void verifyBidirectionalRelation(boolean useDataCache,\n+\t\t\tboolean createConsistent, boolean expectConsistent) {\n+\t\tEntityManager em = (useDataCache) \n+\t\t                 ? emfWithDataCache.createEntityManager() \n+\t\t                 : emfWithoutDataCache.createEntityManager();\n+\t\t                 \n+\t\tlong id = ID_COUNTER++;\n+\t\tID_COUNTER += 4;\n+\t\tcreateBidirectionalRelation(em, id, createConsistent);\n+\t\t\n+\t\t\n+\t\tBidirectionalOne2OneOwner owner1 = em.find(BidirectionalOne2OneOwner.class, id);\n+\t\tBidirectionalOne2OneOwned owned1 = em.find(BidirectionalOne2OneOwned.class, id + 1);\n+\t\tBidirectionalOne2OneOwner owner2 = em.find(BidirectionalOne2OneOwner.class, id + 2);\n+\t\tBidirectionalOne2OneOwned owned2 = em.find(BidirectionalOne2OneOwned.class, id + 3);\n+\n+\t\tassertNotNull(owner1);\n+\t\tassertNotNull(owner2);\n+\t\tassertNotNull(owned1);\n+\t\tassertNotNull(owned2);\n+\n+\t\tassertEquals(owner1, expectConsistent \n+\t\t\t\t\t? owner1.getOwned().getOwner() \n+\t\t\t\t\t: owner2.getOwned().getOwner());\n+\t\tassertEquals(owner2, expectConsistent \n+\t\t\t\t\t? owner2.getOwned().getOwner() \n+\t\t\t\t    : owner1.getOwned().getOwner());\n+\n+\n+\t\tassertEquals(owned1, owner1.getOwned());\n+\t\tassertEquals(expectConsistent ? owner1 : owner2, owned1.getOwner());\n+\t\tassertEquals(owned2, owner2.getOwned());\n+\t\tassertEquals(expectConsistent ? owner2 : owner1, owned2.getOwner());\n+\t}\n+\n+\tpublic void testConsitentBidirectionalRelationIsPreservedWithDataCache() {\n+\t\tverifyBidirectionalRelation(WITH_DATACACHE, CONSISTENT, CONSISTENT);\n+\t}\n+\n+\tpublic void testConsitentBidirectionalRelationIsPreservedWithoutDataCache() {\n+\t\tverifyBidirectionalRelation(!WITH_DATACACHE, CONSISTENT, CONSISTENT);\n+\t}\n+\n+\tpublic void testInconsitentBidirectionalRelationIsPreservedWithDataCache() {\n+\t\tverifyBidirectionalRelation(WITH_DATACACHE, !CONSISTENT, !CONSISTENT);\n+\t}\n+\n+\tpublic void testInconsitentBidirectionalRelationIsNotPreservedWithoutDataCache() {\n+\t\tverifyBidirectionalRelation(!WITH_DATACACHE, !CONSISTENT, CONSISTENT);\n+\t}\n+\t\n+\t/**\n+\t * Verify that refresh() may fetch state from either the data cache or the\n+\t * database based on different conditions. \n+\t * The conditions that impact are \n+\t * a) whether current lock is stronger than NONE \n+\t * b) whether the instance being refreshed is dirty\n+\t * \n+\t * An instance is created with data cache marker and persisted. \n+\t * A native SQL is used to update the database record with database marker. \n+\t * The in-memory instance is not aware of this out-of-band update. \n+\t * Then the in-memory instance is refreshed. The marker of the refreshed \n+\t * instance tells whether the instance is refreshed from the data cache\n+\t * of the database. \n+\t * \n+\t * @param useDataCache flags if data cache is active. if not, then surely\n+\t * refresh always fetch state from the database.\n+\t * \n+\t * @param datacache the marker for the copy of the data cached instance\n+\t * @param database the marker for the database record\n+\t * @param lock lock to be used\n+\t * @param makeDirtyBeforeRefresh flags if the instance be dirtied before\n+\t * refresh()\n+\t * @param expected The expected marker i.e. where the state is refreshed \n+\t * from. This should be always <code>MARKER_DATABASE</code>.\n+\t * a) whether DataCache is active\n+\t * b) whether current Lock is stronger than NOLOCK\n+\t * c) whether the object to be refreshed is dirty\n+\t * \n+\t * The following truth table enumerates the possibilities\n+\t * \n+\t * Use Cache?   Lock?   Dirty?     Target\n+\t *    Y          Y       Y         Database\n+\t *    Y          N       Y         Data Cache\n+\t *    Y          Y       N         Data Cache\n+\t *    Y          N       N         Data Cache\n+\t *    \n+\t *    N          Y       Y         Database\n+\t *    N          N       Y         Database\n+\t *    N          Y       N         Object Cache\n+\t *    N          N       N         Object Cache\n+\n+\t */\n+\tpublic void verifyRefresh(boolean useDataCache, LockModeType lock, \n+\t\t\tboolean makeDirtyBeforeRefresh, boolean refreshFromDataCache, \n+\t\t\tString expected) {\n+\t\tOpenJPAEntityManagerFactorySPI emf = (useDataCache)\n+\t\t\t? emfWithDataCache : emfWithoutDataCache;\n+\t\temf.getConfiguration().setRefreshFromDataCache(refreshFromDataCache);\n+\t\tOpenJPAEntityManagerSPI em = emf.createEntityManager();\n+        \n+\t\tem.getTransaction().begin();\n+\t\tPObject pc = new PObject();\n+\t\tpc.setName(useDataCache ? MARKER_DATACACHE : MARKER_CACHE);\n+\t\tem.persist(pc);\n+\t\tem.getTransaction().commit();\n+\t\t\n+\t\tObject oid = pc.getId();\n+\t\tStoreCache dataCache = emf.getStoreCache();\n+\t\tassertEquals(useDataCache, dataCache.contains(PObject.class, oid));\n+\t\t\n+\t\t// Modify the record in the database in a separate transaction using\n+\t\t// native SQL so that the in-memory instance is not altered \n+\t\tem.getTransaction().begin();\n+\t\tString sql = \"UPDATE POBJECT SET NAME='\"+ MARKER_DATABASE +\"' WHERE id=\"+oid;\n+\t\tem.createNativeQuery(sql).executeUpdate();\n+\t\tem.getTransaction().commit();\n+\t\t\n+\t\tassertEquals(useDataCache ? MARKER_DATACACHE : MARKER_CACHE, pc.getName());\n+\t\t\n+\t\tem.getTransaction().begin();\n+\t\tif (makeDirtyBeforeRefresh) {\n+\t\t\tpc.setName(MARKER_DIRTY_CACHE);\n+\t\t} \n+\t\tassertEquals(makeDirtyBeforeRefresh, em.isDirty(pc));\n+\n+\t\tif (lock != null) {\n+\t\t\t((EntityManagerImpl)em).getFetchPlan().setReadLockMode(lock);\n+\t\t}\n+\t\tem.refresh(pc);\n+\t\t\n+\t\tassertEquals(expected, pc.getName());\n+\t\tem.getTransaction().commit();\n+\t}\n+\t\n+\t/**\n+\t * The expected marker i.e. where the state is refreshed from depends on\n+\t * a) whether DataCache is active\n+\t * b) whether current Lock is stronger than NOLOCK\n+\t * c) whether the object to be refreshed is dirty\n+\t * \n+\t * The following truth table enumerates the possibilities\n+\t * \n+\t * Use Cache?   Lock?   Dirty?     Target\n+\t *    Y          Y       Y         Database\n+\t *    Y          N       Y         Data Cache\n+\t *    Y          Y       N         Data Cache\n+\t *    Y          N       N         Data Cache\n+\t *    \n+\t *    N          Y       Y         Database\n+\t *    N          N       Y         Database\n+\t *    N          Y       N         Object Cache\n+\t *    N          N       N         Object Cache\n+\t *    \n+\t * @param datacache the marker for \n+\t * @param database\n+\t * @param useDataCache\n+\t * @param lock\n+\t * @param makeDirtyBeforeRefresh\n+\t * @return\n+\t */\n+\tString getExpectedMarker(boolean useDataCache, LockModeType lock, \n+\t\t\tboolean makeDirtyBeforeRefresh) {\n+\t\tif (useDataCache) {\n+\t\t\treturn (lock != null) ? MARKER_DATABASE : MARKER_DATACACHE; \n+\t\t} else {\n+\t\t\treturn MARKER_DATABASE;\n+\t\t}\n+\t}\n+\t\n+\tpublic void testDirtyRefreshWithNoLockHitsDatabase() {\n+\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\n+\t}\n+\t\n+\tpublic void testDirtyRefreshWithNoLockHitsDataCache() {\n+\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\n+\t}\n+\t\n+\tpublic void testCleanRefreshWithNoLockDoesNotHitDatabase() {\n+\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\n+\t}\n+\t\n+\tpublic void testCleanRefreshWithNoLockHitsDataCache() {\n+\t\tverifyRefresh(WITH_DATACACHE, NOLOCK, !DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\n+\t}\n+\t\n+\tpublic void testDirtyRefreshWithReadLockHitsDatabase() {\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATABASE);\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATABASE);\n+\t}\n+\t\n+\tpublic void testCleanRefreshWithReadLockDoesNotHitDatabase() {\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, !DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.READ, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\n+\t}\n+\t\n+\tpublic void testDirtyRefreshWithWriteLockHitsDatabase() {\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATABASE);\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATABASE);\n+\t}\n+\t\n+\tpublic void testCleanRefreshWithWriteLockDoesNotHitDatabase() {\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, !DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\n+\t\tverifyRefresh(WITH_DATACACHE, LockModeType.WRITE, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATACACHE);\n+\t}\n+\t\n+\tpublic void testDirtyRefreshWithoutDataCacheAlwaysHitsDatabase() {\n+\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATABASE);\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATABASE);\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, DIRTY, REFRESH_FROM_DATACACHE, MARKER_DATABASE);\n+\t\t\n+\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATABASE);\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATABASE);\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, DIRTY, !REFRESH_FROM_DATACACHE, MARKER_DATABASE);\n+\t}\n+\t\n+\tpublic void testCleanRefreshWithoutDataCacheDoesNotHitDatabase() {\n+\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, !DIRTY, REFRESH_FROM_DATACACHE, MARKER_CACHE);\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, !DIRTY, REFRESH_FROM_DATACACHE,  MARKER_CACHE);\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, !DIRTY, REFRESH_FROM_DATACACHE,  MARKER_CACHE);\n+\t\t\n+\t\tverifyRefresh(!WITH_DATACACHE, NOLOCK, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_CACHE);\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.READ, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_CACHE);\n+\t\tverifyRefresh(!WITH_DATACACHE, LockModeType.WRITE, !DIRTY, !REFRESH_FROM_DATACACHE, MARKER_CACHE);\n+\t}\n+\t\n+\t/**\n+\t * Verify behavior of refreshing an instance which has been deleted by\n+\t * out-of-band process (e.g. a native SQL in a separate transaction).\n+\t * The behavior differs when refresh() without a lock fetches the data from\n+\t * DataCache even when the original database record is deleted.\n+\t * \n+\t * @param useDataCache\n+\t * @param lock\n+\t */\n+\tpublic void verifyDeleteDetectionOnRefresh(boolean useDataCache, \n+\t\t\tboolean dirty, LockModeType lock, Class expectedExceptionType) {\n+\t\tOpenJPAEntityManagerFactorySPI emf = (useDataCache)\n+\t\t\t? emfWithDataCache : emfWithoutDataCache;\n+\t\t\t\n+\t\tOpenJPAEntityManagerSPI em = emf.createEntityManager();\n+        \n+\t\tem.getTransaction().begin();\n+\t\tPObject pc = new PObject();\n+\t\tpc.setName(useDataCache ? MARKER_DATACACHE : MARKER_CACHE);\n+\t\tem.persist(pc);\n+\t\tem.getTransaction().commit();\n+\t\t\n+\t\tObject oid = pc.getId();\n+\t\tStoreCache dataCache = emf.getStoreCache();\n+\t\tassertEquals(useDataCache, dataCache.contains(PObject.class, oid));\n+\t\t\n+\t\t// delete the record in the database in a separate transaction using\n+\t\t// native SQL so that the in-memory instance is not altered \n+\t\tem.getTransaction().begin();\n+\t\tString sql = \"DELETE FROM POBJECT WHERE id=\"+oid;\n+\t\tem.createNativeQuery(sql).executeUpdate();\n+\t\tem.getTransaction().commit();\n+\t\t\n+\t\t// the object cache does not know that the record was deleted\n+\t\tassertTrue(em.contains(pc));\n+\t\t// nor does the data cache\n+\t\tassertEquals(useDataCache, dataCache.contains(PObject.class, oid));\n+\t\t\n+\t\t/**\n+\t\t * refresh behavior no more depends on current lock. Refresh\n+\t\t * will always attempt to fetch the instance from database \n+\t\t * raising EntityNotFoundException.\n+\t\t *   \n+\t\t */\n+\t\tem.getTransaction().begin();\n+\t\tem.getFetchPlan().setReadLockMode(lock);\n+\t\tif (dirty) \n+\t\t\tpc.setName(\"Dirty Name\");\n+\t\ttry {\n+\t\t\tem.refresh(pc);\n+\t\t\tif (expectedExceptionType != null) {\n+\t\t\t\tfail(\"expected \" + expectedExceptionType.getSimpleName() + \n+\t\t\t\t\t\t\" for PObject:\" + oid);\n+\t\t\t}\n+\t\t} catch (Exception ex) {\n+\t\t\tboolean expectedException = expectedExceptionType != null &&\n+\t\t\t    expectedExceptionType.isAssignableFrom(ex.getClass());\n+\t\t\tif (!expectedException) {\n+\t\t\t\tex.printStackTrace();\n+\t\t\t\tString error = (expectedExceptionType == null) \n+\t\t\t\t\t? \"no exception\" : expectedExceptionType.getName();\n+\t\t\t\tfail(\"expected \" + error + \" for PObject:\" + oid);\n+\t\t\t}\n+\t\t} finally {\n+\t\t\tem.getTransaction().rollback();\n+\t\t}\n+\t}\n+\n+\tpublic void testDeleteIsNotDetectedOnCleanRefreshWithoutLockWithDataCache() {\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, !DIRTY, NOLOCK, NO_ERROR);\n+\t}\n+\t\n+\tpublic void testDeleteIsDetectedOnCleanRefreshWithLockWithDataCache() {\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, !DIRTY, LockModeType.READ, ENTITY_NOT_FOUND_ERROR);\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, !DIRTY, LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\n+\t}\n+\n+\tpublic void testDeleteIsNotDetectedOnDirtyRefreshWithoutLockWithDataCache() {\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, NOLOCK, NO_ERROR);\t\n+\t}\n+\t\n+\tpublic void testDeleteIsDetectedOnDirtyRefreshWithLockWithDataCache() {\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, LockModeType.READ, ENTITY_NOT_FOUND_ERROR);\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\n+\t}\n+\t\n+\tpublic void testDeleteIsDetectedOnDirtyRefreshWitDataCache() {\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, LockModeType.READ, ENTITY_NOT_FOUND_ERROR);\n+\t\tverifyDeleteDetectionOnRefresh(WITH_DATACACHE, DIRTY, LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\n+\t}\n+\t\n+\tpublic void testDeleteIsDetectedOnCleanRefreshWithoutLockWithoutDataCache() {\n+\t\tverifyDeleteDetectionOnRefresh(!WITH_DATACACHE, !DIRTY, NOLOCK, ENTITY_NOT_FOUND_ERROR);\n+\t}\n+\t\n+\tpublic void testDeleteIsDetectedOnCleanRefreshWithLockWithoutDataCache() {\n+\t\tverifyDeleteDetectionOnRefresh(!WITH_DATACACHE, !DIRTY, LockModeType.READ, ENTITY_NOT_FOUND_ERROR);\n+\t\tverifyDeleteDetectionOnRefresh(!WITH_DATACACHE, !DIRTY, LockModeType.WRITE, ENTITY_NOT_FOUND_ERROR);\n+\t}\n+\n+}"},{"sha":"d800ec33b215895d0d4ebbbcaa9da3e93bd64e56","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheOptimisticLockRecovery.java","status":"modified","additions":175,"deletions":175,"changes":350,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheOptimisticLockRecovery.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheOptimisticLockRecovery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheOptimisticLockRecovery.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,175 +1,175 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import java.sql.Connection;\r\n-import java.sql.PreparedStatement;\r\n-import java.sql.SQLException;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.RollbackException;\r\n-import javax.persistence.LockModeType;\r\n-import javax.sql.DataSource;\r\n-\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-import org.apache.openjpa.event.RemoteCommitListener;\r\n-import org.apache.openjpa.event.RemoteCommitEvent;\r\n-\r\n-public class TestDataCacheOptimisticLockRecovery\r\n-    extends SingleEMFTestCase {\r\n-\r\n-    private int pk;\r\n-    private int remoteCommitEventStaleCount = 0;\r\n-    private Object staleOid;\r\n-\r\n-    public void setUp() {\r\n-        setUp(\"openjpa.DataCache\", \"true\",\r\n-            \"openjpa.RemoteCommitProvider\", \"sjvm\",\r\n-            OptimisticLockInstance.class);\r\n-\r\n-        emf.getConfiguration().getRemoteCommitEventManager().addListener(\r\n-            new RemoteCommitListener() {\r\n-                public void afterCommit(RemoteCommitEvent e) {\r\n-                    if (e.getPayloadType() ==\r\n-                        RemoteCommitEvent.PAYLOAD_LOCAL_STALE_DETECTION) {\r\n-                        remoteCommitEventStaleCount++;\r\n-                        staleOid = e.getUpdatedObjectIds().iterator().next();\r\n-                    }\r\n-                }\r\n-\r\n-                public void close() {\r\n-                }\r\n-            }\r\n-        );\r\n-\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        OptimisticLockInstance oli = new OptimisticLockInstance(\"foo\");\r\n-        em.persist(oli);\r\n-        em.getTransaction().commit();\r\n-        pk = oli.getPK();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testOptimisticLockRecovery() \r\n-        throws SQLException {\r\n-\r\n-        EntityManager em;\r\n-        \r\n-        // 1. get the oplock value for the instance after commit and\r\n-        // get a read lock to ensure that we check for the optimistic\r\n-        // lock column at tx commit.\r\n-        em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        OptimisticLockInstance oli = em.find(OptimisticLockInstance.class, pk);\r\n-        Object oid = JPAFacadeHelper.toOpenJPAObjectId(\r\n-            JPAFacadeHelper.getMetaData(oli),\r\n-            OpenJPAPersistence.cast(em).getObjectId(oli));\r\n-        int firstOpLockValue = oli.getOpLock();\r\n-        em.lock(oli, LockModeType.READ);\r\n-\r\n-        // 2. make a change to the instance's optimistic lock column\r\n-        // via direct SQL in a separate transaction\r\n-        int secondOpLockValue = firstOpLockValue + 1;\r\n-\r\n-        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI)\r\n-            OpenJPAPersistence.cast(em).getEntityManagerFactory();\r\n-        DataSource ds = (DataSource) emf.getConfiguration()\r\n-            .getConnectionFactory();\r\n-        Connection c = ds.getConnection();\r\n-        c.setAutoCommit(false);\r\n-        PreparedStatement ps = c.prepareStatement(\r\n-            \"UPDATE OPTIMISTIC_LOCK_INSTANCE SET OPLOCK = ? WHERE PK = ?\");\r\n-        ps.setInt(1, secondOpLockValue);\r\n-        ps.setInt(2, pk);\r\n-        assertEquals(1, ps.executeUpdate());\r\n-        c.commit();\r\n-        \r\n-        // 3. commit the transaction, catching the expected oplock\r\n-        // exception\r\n-        try {\r\n-            em.getTransaction().commit();\r\n-            fail(\"tx should have failed due to out-of-band oplock change\");\r\n-        } catch (RollbackException re) {\r\n-            // expected\r\n-        } finally {\r\n-            if (em.getTransaction().isActive())\r\n-                em.getTransaction().rollback();\r\n-        }\r\n-\r\n-        // 4. check that the corresponding remote commit event was fired\r\n-        assertEquals(1, remoteCommitEventStaleCount);\r\n-        assertEquals(oid, staleOid);\r\n-\r\n-        // 5. obtain the object in a new persistence context and\r\n-        // assert that the oplock column is set to the one that\r\n-        // happened in the out-of-band transaction\r\n-        em.close();\r\n-        em = this.emf.createEntityManager();\r\n-        oli = em.find(OptimisticLockInstance.class, pk);\r\n-\r\n-        // If this fails, then the data cache has the wrong value.\r\n-        // This is what this test case is designed to exercise.\r\n-        assertEquals(\"data cache is not being cleared when oplock \"\r\n-            + \"violations occur\", secondOpLockValue, oli.getOpLock());\r\n-\r\n-        // 6. get a read lock on the instance and commit the tx; this\r\n-        // time it should go through\r\n-        em.getTransaction().begin();\r\n-        em.lock(oli, LockModeType.READ);\r\n-        try {\r\n-            em.getTransaction().commit();\r\n-        } catch (RollbackException e) {\r\n-            throw e;\r\n-        } finally {\r\n-            if (em.getTransaction().isActive())\r\n-                em.getTransaction().rollback();\r\n-        }\r\n-        em.close();\r\n-    }\r\n-    \r\n-    public void testExpectedOptimisticLockException() {\r\n-        EntityManager em;\r\n-        \r\n-        // 1. start a new tx\r\n-        em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        em.lock(em.find(OptimisticLockInstance.class, pk), LockModeType.READ);\r\n-        \r\n-        // 2. start another tx, and cause a version increment\r\n-        EntityManager em2 = emf.createEntityManager();\r\n-        em2.getTransaction().begin();\r\n-        em2.lock(em2.find(OptimisticLockInstance.class, pk), \r\n-            LockModeType.WRITE);\r\n-        em2.getTransaction().commit();\r\n-        em2.close();\r\n-        \r\n-        // 3. try to commit. this should fail, as this is a regular optimistic\r\n-        // lock failure situation.\r\n-        try {\r\n-            em.getTransaction().commit();\r\n-            fail(\"write lock in em2 should trigger an optimistic lock failure\");\r\n-        } catch (RollbackException pe) {\r\n-            // expected\r\n-        }\r\n-        em.close();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import javax.persistence.EntityManager;\n+import javax.persistence.RollbackException;\n+import javax.persistence.LockModeType;\n+import javax.sql.DataSource;\n+\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+import org.apache.openjpa.event.RemoteCommitListener;\n+import org.apache.openjpa.event.RemoteCommitEvent;\n+\n+public class TestDataCacheOptimisticLockRecovery\n+    extends SingleEMFTestCase {\n+\n+    private int pk;\n+    private int remoteCommitEventStaleCount = 0;\n+    private Object staleOid;\n+\n+    public void setUp() {\n+        setUp(\"openjpa.DataCache\", \"true\",\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\",\n+            OptimisticLockInstance.class);\n+\n+        emf.getConfiguration().getRemoteCommitEventManager().addListener(\n+            new RemoteCommitListener() {\n+                public void afterCommit(RemoteCommitEvent e) {\n+                    if (e.getPayloadType() ==\n+                        RemoteCommitEvent.PAYLOAD_LOCAL_STALE_DETECTION) {\n+                        remoteCommitEventStaleCount++;\n+                        staleOid = e.getUpdatedObjectIds().iterator().next();\n+                    }\n+                }\n+\n+                public void close() {\n+                }\n+            }\n+        );\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        OptimisticLockInstance oli = new OptimisticLockInstance(\"foo\");\n+        em.persist(oli);\n+        em.getTransaction().commit();\n+        pk = oli.getPK();\n+        em.close();\n+    }\n+\n+    public void testOptimisticLockRecovery() \n+        throws SQLException {\n+\n+        EntityManager em;\n+        \n+        // 1. get the oplock value for the instance after commit and\n+        // get a read lock to ensure that we check for the optimistic\n+        // lock column at tx commit.\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        OptimisticLockInstance oli = em.find(OptimisticLockInstance.class, pk);\n+        Object oid = JPAFacadeHelper.toOpenJPAObjectId(\n+            JPAFacadeHelper.getMetaData(oli),\n+            OpenJPAPersistence.cast(em).getObjectId(oli));\n+        int firstOpLockValue = oli.getOpLock();\n+        em.lock(oli, LockModeType.READ);\n+\n+        // 2. make a change to the instance's optimistic lock column\n+        // via direct SQL in a separate transaction\n+        int secondOpLockValue = firstOpLockValue + 1;\n+\n+        OpenJPAEntityManagerFactorySPI emf = (OpenJPAEntityManagerFactorySPI)\n+            OpenJPAPersistence.cast(em).getEntityManagerFactory();\n+        DataSource ds = (DataSource) emf.getConfiguration()\n+            .getConnectionFactory();\n+        Connection c = ds.getConnection();\n+        c.setAutoCommit(false);\n+        PreparedStatement ps = c.prepareStatement(\n+            \"UPDATE OPTIMISTIC_LOCK_INSTANCE SET OPLOCK = ? WHERE PK = ?\");\n+        ps.setInt(1, secondOpLockValue);\n+        ps.setInt(2, pk);\n+        assertEquals(1, ps.executeUpdate());\n+        c.commit();\n+        \n+        // 3. commit the transaction, catching the expected oplock\n+        // exception\n+        try {\n+            em.getTransaction().commit();\n+            fail(\"tx should have failed due to out-of-band oplock change\");\n+        } catch (RollbackException re) {\n+            // expected\n+        } finally {\n+            if (em.getTransaction().isActive())\n+                em.getTransaction().rollback();\n+        }\n+\n+        // 4. check that the corresponding remote commit event was fired\n+        assertEquals(1, remoteCommitEventStaleCount);\n+        assertEquals(oid, staleOid);\n+\n+        // 5. obtain the object in a new persistence context and\n+        // assert that the oplock column is set to the one that\n+        // happened in the out-of-band transaction\n+        em.close();\n+        em = this.emf.createEntityManager();\n+        oli = em.find(OptimisticLockInstance.class, pk);\n+\n+        // If this fails, then the data cache has the wrong value.\n+        // This is what this test case is designed to exercise.\n+        assertEquals(\"data cache is not being cleared when oplock \"\n+            + \"violations occur\", secondOpLockValue, oli.getOpLock());\n+\n+        // 6. get a read lock on the instance and commit the tx; this\n+        // time it should go through\n+        em.getTransaction().begin();\n+        em.lock(oli, LockModeType.READ);\n+        try {\n+            em.getTransaction().commit();\n+        } catch (RollbackException e) {\n+            throw e;\n+        } finally {\n+            if (em.getTransaction().isActive())\n+                em.getTransaction().rollback();\n+        }\n+        em.close();\n+    }\n+    \n+    public void testExpectedOptimisticLockException() {\n+        EntityManager em;\n+        \n+        // 1. start a new tx\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.lock(em.find(OptimisticLockInstance.class, pk), LockModeType.READ);\n+        \n+        // 2. start another tx, and cause a version increment\n+        EntityManager em2 = emf.createEntityManager();\n+        em2.getTransaction().begin();\n+        em2.lock(em2.find(OptimisticLockInstance.class, pk), \n+            LockModeType.WRITE);\n+        em2.getTransaction().commit();\n+        em2.close();\n+        \n+        // 3. try to commit. this should fail, as this is a regular optimistic\n+        // lock failure situation.\n+        try {\n+            em.getTransaction().commit();\n+            fail(\"write lock in em2 should trigger an optimistic lock failure\");\n+        } catch (RollbackException pe) {\n+            // expected\n+        }\n+        em.close();\n+    }\n+}"},{"sha":"d0bd13ed9f2a4b256123d0aa2a7e3390c142fc46","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCachePCDataGenerator.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCachePCDataGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCachePCDataGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCachePCDataGenerator.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,46 +1,46 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-/**\r\n- * Extend the single-JVM cache test to test dynamic pcdata.\r\n- */\r\n-public class TestDataCachePCDataGenerator\r\n-    extends TestSJVMCache {\r\n-\r\n-    public TestDataCachePCDataGenerator(String test) {\r\n-        super(test);\r\n-    }\r\n-\r\n-    protected String[] getConfs() {\r\n-        return addGenerator(super.getConfs());\r\n-    }\r\n-\r\n-    protected String[] getConfs2() {\r\n-        return addGenerator(super.getConfs2());\r\n-    }\r\n-\r\n-    private String[] addGenerator(String[] confs) {\r\n-        String[] copy = new String[confs.length + 2];\r\n-        System.arraycopy(confs, 0, copy, 0, confs.length);\r\n-        copy[confs.length] = \"openjpa.DynamicDataStructs\";\r\n-        copy[confs.length + 1] = \"true\";\r\n-        return copy;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+/**\n+ * Extend the single-JVM cache test to test dynamic pcdata.\n+ */\n+public class TestDataCachePCDataGenerator\n+    extends TestSJVMCache {\n+\n+    public TestDataCachePCDataGenerator(String test) {\n+        super(test);\n+    }\n+\n+    protected String[] getConfs() {\n+        return addGenerator(super.getConfs());\n+    }\n+\n+    protected String[] getConfs2() {\n+        return addGenerator(super.getConfs2());\n+    }\n+\n+    private String[] addGenerator(String[] confs) {\n+        String[] copy = new String[confs.length + 2];\n+        System.arraycopy(confs, 0, copy, 0, confs.length);\n+        copy[confs.length] = \"openjpa.DynamicDataStructs\";\n+        copy[confs.length + 1] = \"true\";\n+        return copy;\n+    }\n+}"},{"sha":"bef983d42cba7ece612d4c3c0c0eceba34fc714a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheScheduler.java","status":"modified","additions":228,"deletions":228,"changes":456,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheScheduler.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheScheduler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDataCacheScheduler.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,228 +1,228 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import java.util.Calendar;\r\n-import java.util.Date;\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.datacache.common.apps.ScheduledEviction;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n-import org.apache.openjpa.datacache.DataCache;\r\n-import org.apache.openjpa.datacache.DataCacheScheduler;\r\n-import org.apache.openjpa.datacache.ConcurrentDataCache;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-import org.apache.openjpa.util.Id;\r\n-\r\n-public class TestDataCacheScheduler\r\n-    extends AbstractTestCase {\r\n-\r\n-    private static final String MINUTES = getMinutes();\r\n-\r\n-    public TestDataCacheScheduler(String str) {\r\n-        super(str, \"datacachecactusapp\");\r\n-    }\r\n-\r\n-    private static String getMinutes() {\r\n-        StringBuffer buf = new StringBuffer();\r\n-        for (int i = 0; i < 60; i++) {\r\n-            if (i % 2 == 0)\r\n-                buf.append(i).append(',');\r\n-        }\r\n-        return buf.toString();\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(ScheduledEviction.class);\r\n-    }\r\n-\r\n-    public void testRuntime()\r\n-        throws Exception {\r\n-        String sched = MINUTES + \" * * * *\";\r\n-        Map propsMap = new HashMap();\r\n-        propsMap\r\n-            .put(\"openjpa.DataCache\", \"true(EvictionSchedule=\\\"\" + sched + \"\\\")\");\r\n-        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n-        propsMap.put(\"openjpa.FlushBeforeQueries\", \"true\");\r\n-        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\r\n-        OpenJPAEntityManagerFactory emf =\r\n-            (OpenJPAEntityManagerFactory) getEmf(propsMap);\r\n-\r\n-        ((OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(emf))\r\n-            .getConfiguration().getDataCacheManagerInstance()\r\n-            .getDataCacheScheduler().setInterval(1);\r\n-        DataCache cache = JPAFacadeHelper.getMetaData(emf,\r\n-            ScheduledEviction.class).getDataCache();\r\n-\r\n-        OpenJPAEntityManager em = (OpenJPAEntityManager) emf\r\n-            .createEntityManager();\r\n-        startTx(em);\r\n-        ScheduledEviction pc = new ScheduledEviction(\"Foo\");\r\n-        em.persist(pc);\r\n-        Object oid = em.getObjectId(pc);\r\n-        Object oidwithclass = new Id(ScheduledEviction.class, oid.toString());\r\n-        endTx(em);\r\n-        endEm(em);\r\n-\r\n-        cache.clear();// clear and wait until next run.\r\n-        Calendar cal = Calendar.getInstance();\r\n-        cal.setTime(new Date());\r\n-        if (cal.get(Calendar.MINUTE) % 2 == 0)\r\n-            Thread.currentThread().sleep\r\n-                ((60 - cal.get(Calendar.SECOND)) * 1000);\r\n-        cal.setTime(new Date());\r\n-        assertTrue(cal.get(Calendar.MINUTE) % 2 == 1);\r\n-        em = (OpenJPAEntityManager) emf.createEntityManager();\r\n-        em.find(ScheduledEviction.class, oid);\r\n-        endEm(em);\r\n-        assertTrue(cache.contains(oidwithclass));\r\n-\r\n-        Thread.currentThread().sleep(130 * 1000);\r\n-        assertFalse(cache.contains(oidwithclass));\r\n-        emf.close();\r\n-    }\r\n-\r\n-    /**\r\n-     * too slow ! *\r\n-     */\r\n-    //FIXME Seetha Sep 26,2006\r\n-    /*public void XXXtestRunnable()\r\n-        throws Exception {\r\n-        KodoPersistenceManager pm = getPM();\r\n-        OpenJPAConfiguration conf = pm.getConfiguration();\r\n-        DataCacheScheduler scheduler = new DataCacheScheduler(conf);\r\n-        scheduler.setInterval(1);\r\n-\r\n-        Calendar cal = Calendar.getInstance();\r\n-        cal.setTime(new Date());\r\n-        int minute = (cal.get(Calendar.MINUTE) + 2) % 60;\r\n-        StringBuffer sched = new StringBuffer();\r\n-        sched.append(minute).append(' ');\r\n-        sched.append(\"* \");\r\n-        sched.append(\"* \");\r\n-        sched.append(\"* \");\r\n-        sched.append(\"* \");\r\n-        DummyCache cache = new DummyCache();\r\n-        scheduler.scheduleEviction(cache, sched.toString());\r\n-\r\n-        Thread thread = new Thread(scheduler);\r\n-        thread.setDaemon(true);\r\n-        thread.start();\r\n-        // test that it did not run yet...\r\n-        Thread.currentThread().sleep(90 * 1000); // 90 seconds\r\n-        assertEquals(0, cache.clearCount);\r\n-        // test that it ran...\r\n-        Thread.currentThread().sleep(45 * 1000); // 45 seconds\r\n-        assertEquals(1, cache.clearCount);\r\n-        // test that it wasn't too eager\r\n-        Thread.currentThread().sleep(50 * 1000); // 90 seconds\r\n-        assertEquals(1, cache.clearCount);\r\n-        scheduler.stop();\r\n-    }*/\r\n-\r\n-    /**\r\n-     * too slow *\r\n-     */\r\n-    /* public void XXXtestMonth()\r\n-        throws Exception {\r\n-        Calendar cal = Calendar.getInstance();\r\n-        cal.setTime(new Date());\r\n-        int month = cal.get(Calendar.MONTH);\r\n-        int month2 = month + 1;\r\n-        if (month2 > 12)\r\n-            month2 = 1;\r\n-        doTest(\"* * \" + month + \" *\", \"* * \" + month2 + \" *\");\r\n-    }*/\r\n-\r\n-    /**\r\n-     * too slow *\r\n-     */\r\n-    /* public void XXXtestDayOfMonth()\r\n-        throws Exception {\r\n-        Calendar cal = Calendar.getInstance();\r\n-        cal.setTime(new Date());\r\n-        int dom = cal.get(Calendar.DAY_OF_MONTH);\r\n-        doTest(\"* \" + dom + \" * *\", \"* \" + (dom % 12 + 1) + \" * *\");\r\n-    }*/\r\n-    public void testDayOfWeek()\r\n-        throws Exception {\r\n-        Calendar cal = Calendar.getInstance();\r\n-        cal.setTime(new Date());\r\n-        int day = cal.get(Calendar.DAY_OF_WEEK);\r\n-        doTest(\"* * * \" + day, \"* * * \" + (day % 7 + 1));\r\n-    }\r\n-\r\n-    public void testHour()\r\n-        throws Exception {\r\n-        Calendar cal = Calendar.getInstance();\r\n-        cal.setTime(new Date());\r\n-        int hour = cal.get(Calendar.HOUR_OF_DAY);\r\n-        doTest(hour + \" * * *\", ((hour + 1) % 24) + \" * * *\");\r\n-    }\r\n-\r\n-    /**\r\n-     * Pass in 4 out of 5 tokens.\r\n-     */\r\n-    private void doTest(String valid, String invalid)\r\n-        throws Exception {\r\n-\r\n-        OpenJPAEntityManagerFactory emf =\r\n-            (OpenJPAEntityManagerFactory) getEmf();\r\n-        OpenJPAConfiguration conf =\r\n-            ((OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(emf))\r\n-                .getConfiguration();\r\n-\r\n-        DataCacheScheduler scheduler = new DataCacheScheduler(conf);\r\n-        scheduler.setInterval(1);\r\n-\r\n-        Calendar cal = Calendar.getInstance();\r\n-        cal.setTime(new Date());\r\n-        String sched = ((cal.get(Calendar.MINUTE) + 1) % 60) + \" \";\r\n-        DummyCache validCache = new DummyCache();\r\n-        scheduler.scheduleEviction(validCache, sched + valid);\r\n-        DummyCache invalidCache = new DummyCache();\r\n-        scheduler.scheduleEviction(invalidCache, sched + invalid);\r\n-        Thread thread = new Thread(scheduler);\r\n-        thread.setDaemon(true);\r\n-        thread.start();\r\n-        // test that it did not run yet...\r\n-        Thread.currentThread().sleep(70 * 1000); // 70 seconds\r\n-        scheduler.stop();\r\n-//        assertEquals(2, validCache.clearCount);\r\n-        assertTrue(\"Wrong invocation count: \" + validCache.clearCount,\r\n-            validCache.clearCount == 1 || validCache.clearCount == 2);\r\n-        assertEquals(0, invalidCache.clearCount);\r\n-    }\r\n-\r\n-    private class DummyCache extends ConcurrentDataCache {\r\n-\r\n-        int clearCount = 0;\r\n-\r\n-        public void clear() {\r\n-            clearCount++;\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+\n+import org.apache.openjpa.persistence.datacache.common.apps.ScheduledEviction;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.datacache.DataCache;\n+import org.apache.openjpa.datacache.DataCacheScheduler;\n+import org.apache.openjpa.datacache.ConcurrentDataCache;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.util.Id;\n+\n+public class TestDataCacheScheduler\n+    extends AbstractTestCase {\n+\n+    private static final String MINUTES = getMinutes();\n+\n+    public TestDataCacheScheduler(String str) {\n+        super(str, \"datacachecactusapp\");\n+    }\n+\n+    private static String getMinutes() {\n+        StringBuffer buf = new StringBuffer();\n+        for (int i = 0; i < 60; i++) {\n+            if (i % 2 == 0)\n+                buf.append(i).append(',');\n+        }\n+        return buf.toString();\n+    }\n+\n+    public void setUp() {\n+        deleteAll(ScheduledEviction.class);\n+    }\n+\n+    public void testRuntime()\n+        throws Exception {\n+        String sched = MINUTES + \" * * * *\";\n+        Map propsMap = new HashMap();\n+        propsMap\n+            .put(\"openjpa.DataCache\", \"true(EvictionSchedule=\\\"\" + sched + \"\\\")\");\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n+        propsMap.put(\"openjpa.FlushBeforeQueries\", \"true\");\n+        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\n+        OpenJPAEntityManagerFactory emf =\n+            (OpenJPAEntityManagerFactory) getEmf(propsMap);\n+\n+        ((OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(emf))\n+            .getConfiguration().getDataCacheManagerInstance()\n+            .getDataCacheScheduler().setInterval(1);\n+        DataCache cache = JPAFacadeHelper.getMetaData(emf,\n+            ScheduledEviction.class).getDataCache();\n+\n+        OpenJPAEntityManager em = (OpenJPAEntityManager) emf\n+            .createEntityManager();\n+        startTx(em);\n+        ScheduledEviction pc = new ScheduledEviction(\"Foo\");\n+        em.persist(pc);\n+        Object oid = em.getObjectId(pc);\n+        Object oidwithclass = new Id(ScheduledEviction.class, oid.toString());\n+        endTx(em);\n+        endEm(em);\n+\n+        cache.clear();// clear and wait until next run.\n+        Calendar cal = Calendar.getInstance();\n+        cal.setTime(new Date());\n+        if (cal.get(Calendar.MINUTE) % 2 == 0)\n+            Thread.currentThread().sleep\n+                ((60 - cal.get(Calendar.SECOND)) * 1000);\n+        cal.setTime(new Date());\n+        assertTrue(cal.get(Calendar.MINUTE) % 2 == 1);\n+        em = (OpenJPAEntityManager) emf.createEntityManager();\n+        em.find(ScheduledEviction.class, oid);\n+        endEm(em);\n+        assertTrue(cache.contains(oidwithclass));\n+\n+        Thread.currentThread().sleep(130 * 1000);\n+        assertFalse(cache.contains(oidwithclass));\n+        emf.close();\n+    }\n+\n+    /**\n+     * too slow ! *\n+     */\n+    //FIXME Seetha Sep 26,2006\n+    /*public void XXXtestRunnable()\n+        throws Exception {\n+        KodoPersistenceManager pm = getPM();\n+        OpenJPAConfiguration conf = pm.getConfiguration();\n+        DataCacheScheduler scheduler = new DataCacheScheduler(conf);\n+        scheduler.setInterval(1);\n+\n+        Calendar cal = Calendar.getInstance();\n+        cal.setTime(new Date());\n+        int minute = (cal.get(Calendar.MINUTE) + 2) % 60;\n+        StringBuffer sched = new StringBuffer();\n+        sched.append(minute).append(' ');\n+        sched.append(\"* \");\n+        sched.append(\"* \");\n+        sched.append(\"* \");\n+        sched.append(\"* \");\n+        DummyCache cache = new DummyCache();\n+        scheduler.scheduleEviction(cache, sched.toString());\n+\n+        Thread thread = new Thread(scheduler);\n+        thread.setDaemon(true);\n+        thread.start();\n+        // test that it did not run yet...\n+        Thread.currentThread().sleep(90 * 1000); // 90 seconds\n+        assertEquals(0, cache.clearCount);\n+        // test that it ran...\n+        Thread.currentThread().sleep(45 * 1000); // 45 seconds\n+        assertEquals(1, cache.clearCount);\n+        // test that it wasn't too eager\n+        Thread.currentThread().sleep(50 * 1000); // 90 seconds\n+        assertEquals(1, cache.clearCount);\n+        scheduler.stop();\n+    }*/\n+\n+    /**\n+     * too slow *\n+     */\n+    /* public void XXXtestMonth()\n+        throws Exception {\n+        Calendar cal = Calendar.getInstance();\n+        cal.setTime(new Date());\n+        int month = cal.get(Calendar.MONTH);\n+        int month2 = month + 1;\n+        if (month2 > 12)\n+            month2 = 1;\n+        doTest(\"* * \" + month + \" *\", \"* * \" + month2 + \" *\");\n+    }*/\n+\n+    /**\n+     * too slow *\n+     */\n+    /* public void XXXtestDayOfMonth()\n+        throws Exception {\n+        Calendar cal = Calendar.getInstance();\n+        cal.setTime(new Date());\n+        int dom = cal.get(Calendar.DAY_OF_MONTH);\n+        doTest(\"* \" + dom + \" * *\", \"* \" + (dom % 12 + 1) + \" * *\");\n+    }*/\n+    public void testDayOfWeek()\n+        throws Exception {\n+        Calendar cal = Calendar.getInstance();\n+        cal.setTime(new Date());\n+        int day = cal.get(Calendar.DAY_OF_WEEK);\n+        doTest(\"* * * \" + day, \"* * * \" + (day % 7 + 1));\n+    }\n+\n+    public void testHour()\n+        throws Exception {\n+        Calendar cal = Calendar.getInstance();\n+        cal.setTime(new Date());\n+        int hour = cal.get(Calendar.HOUR_OF_DAY);\n+        doTest(hour + \" * * *\", ((hour + 1) % 24) + \" * * *\");\n+    }\n+\n+    /**\n+     * Pass in 4 out of 5 tokens.\n+     */\n+    private void doTest(String valid, String invalid)\n+        throws Exception {\n+\n+        OpenJPAEntityManagerFactory emf =\n+            (OpenJPAEntityManagerFactory) getEmf();\n+        OpenJPAConfiguration conf =\n+            ((OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(emf))\n+                .getConfiguration();\n+\n+        DataCacheScheduler scheduler = new DataCacheScheduler(conf);\n+        scheduler.setInterval(1);\n+\n+        Calendar cal = Calendar.getInstance();\n+        cal.setTime(new Date());\n+        String sched = ((cal.get(Calendar.MINUTE) + 1) % 60) + \" \";\n+        DummyCache validCache = new DummyCache();\n+        scheduler.scheduleEviction(validCache, sched + valid);\n+        DummyCache invalidCache = new DummyCache();\n+        scheduler.scheduleEviction(invalidCache, sched + invalid);\n+        Thread thread = new Thread(scheduler);\n+        thread.setDaemon(true);\n+        thread.start();\n+        // test that it did not run yet...\n+        Thread.currentThread().sleep(70 * 1000); // 70 seconds\n+        scheduler.stop();\n+//        assertEquals(2, validCache.clearCount);\n+        assertTrue(\"Wrong invocation count: \" + validCache.clearCount,\n+            validCache.clearCount == 1 || validCache.clearCount == 2);\n+        assertEquals(0, invalidCache.clearCount);\n+    }\n+\n+    private class DummyCache extends ConcurrentDataCache {\n+\n+        int clearCount = 0;\n+\n+        public void clear() {\n+            clearCount++;\n+        }\n+    }\n+}"},{"sha":"98729c1d3903f49ae4e348777d8c85aee667ea6a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDistributedKodoDataCache.java","status":"modified","additions":357,"deletions":357,"changes":714,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDistributedKodoDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDistributedKodoDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestDistributedKodoDataCache.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,357 +1,357 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import java.util.Collection;\r\n-import java.util.HashMap;\r\n-import java.util.Iterator;\r\n-import java.util.Map;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.datacache.common.apps.RuntimeTest1;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.RuntimeTest2;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-import org.apache.openjpa.datacache.DataCache;\r\n-import org.apache.openjpa.event.TCPRemoteCommitProvider;\r\n-import org.apache.openjpa.lib.conf.Configurations;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n-import org.apache.openjpa.util.Id;\r\n-\r\n-public class TestDistributedKodoDataCache extends AbstractTestCase {\r\n-\r\n-    // We want more than 1 instance of each type of class.\r\n-    private static final int NUM_OBJECTS = 4;\r\n-\r\n-    private Object[] _runtime1sOids;\r\n-\r\n-    private Object[] _runtime2sOids;\r\n-\r\n-    private Object spec_oid;\r\n-\r\n-    public TestDistributedKodoDataCache(String test) {\r\n-        super(test, \"datacachecactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(RuntimeTest1.class);\r\n-        deleteAll(RuntimeTest2.class);\r\n-    }\r\n-\r\n-    private interface ChangeOperation {\r\n-\r\n-        public String getName();\r\n-\r\n-        public void operation(OpenJPAEntityManagerFactory kpmf,\r\n-            boolean asLarge);\r\n-    }\r\n-\r\n-    private class performAsModify implements ChangeOperation {\r\n-\r\n-        public String getName() {\r\n-            return \"Modify SpecialRuntimeTest1\";\r\n-        }\r\n-\r\n-        public void operation(OpenJPAEntityManagerFactory kpmf,\r\n-            boolean asLarge) {\r\n-            OpenJPAEntityManager pm;\r\n-            pm = (OpenJPAEntityManager) kpmf.createEntityManager();\r\n-            if (asLarge)\r\n-                //pm.setLargeTransaction(true);\r\n-                pm.setTrackChangesByType(true);\r\n-            startTx(pm);\r\n-            RuntimeTest1 special = pm.find(RuntimeTest1.class, spec_oid);\r\n-            assertNotNull(special);\r\n-            special.setStringField(\"SpeicalRuntimeTest1_MODIFIED\");\r\n-\r\n-            endTx(pm);\r\n-            endEm(pm);\r\n-        }\r\n-    }\r\n-\r\n-    private class performAsDelete implements ChangeOperation {\r\n-\r\n-        public String getName() {\r\n-            return \"Delete SpecialRuntimeTest1\";\r\n-        }\r\n-\r\n-        public void operation(OpenJPAEntityManagerFactory kpmf,\r\n-            boolean asLarge) {\r\n-            OpenJPAEntityManager pm;\r\n-            pm = (OpenJPAEntityManager) kpmf.createEntityManager();\r\n-            if (asLarge)\r\n-                //pm.setLargeTransaction(true);\r\n-                pm.setTrackChangesByType(true);\r\n-            startTx(pm);\r\n-            RuntimeTest1 specialObj = pm.find(RuntimeTest1.class, spec_oid);\r\n-            assertNotNull(specialObj);\r\n-\r\n-            pm.remove(specialObj);\r\n-\r\n-            endTx(pm);\r\n-            endEm(pm);\r\n-        }\r\n-    }\r\n-\r\n-    public void testNormalTransAndDataCacheDelete() {\r\n-        coreTestTransAndChange(new performAsDelete(), false, true);\r\n-    }\r\n-\r\n-    public void testNormalTransAndDataCacheModify() {\r\n-        coreTestTransAndChange(new performAsModify(), false, false);\r\n-    }\r\n-\r\n-    public void testLargeTransAndDataCacheDelete() {\r\n-        coreTestTransAndChange(new performAsDelete(), true, true);\r\n-    }\r\n-\r\n-    public void testLargeTransAndDataCacheModify() {\r\n-        coreTestTransAndChange(new performAsModify(), true, false);\r\n-    }\r\n-\r\n-    public void coreTestTransAndChange(ChangeOperation changeOperation,\r\n-        boolean asLargeTransaction, boolean isDelete) {\r\n-        // Create two pmfs in a cluster that are using RCPTCP.\r\n-        OpenJPAEntityManagerFactory pmfSender = createDistinctFactory(\r\n-            TCPRemoteCommitProvider.class,\r\n-            \"Port=5636, Addresses=127.0.0.1:6636\");\r\n-        OpenJPAEntityManagerFactory pmfReceiver = createDistinctFactory(\r\n-            TCPRemoteCommitProvider.class,\r\n-            \"Port=6636, Addresses=127.0.0.1:5636\");\r\n-        // Get the datacaches from each pmf\r\n-        DataCache dcSender =\r\n-            ((OpenJPAEntityManagerFactorySPI) pmfSender).getConfiguration()\r\n-                .getDataCacheManagerInstance().getSystemDataCache();\r\n-        DataCache dcReceiver =\r\n-            ((OpenJPAEntityManagerFactorySPI) pmfReceiver).getConfiguration()\r\n-                .getDataCacheManagerInstance().getSystemDataCache();\r\n-\r\n-        deleteAll(RuntimeTest1.class);\r\n-        deleteAll(RuntimeTest2.class);\r\n-\r\n-        _runtime1sOids = null;\r\n-        _runtime2sOids = null;\r\n-\r\n-        String transType = \"normal\";\r\n-        String rcpType = \"OIDs\";\r\n-        if (asLargeTransaction) {\r\n-            transType = \"large\";\r\n-            rcpType = \"classes\";\r\n-        }\r\n-        System.out.println(\"-------------------\");\r\n-        System.out\r\n-            .println(\r\n-                \"2 PMFs created, acting as a cluster using ports 5636 and 6636\");\r\n-        System.out.println(\"Testing scenario:\");\r\n-        System.out\r\n-            .println(\"  1 Seed datastore with instances of RuntimeTest1 AND \"\r\n-                + \"RuntimeTest2 objs.\\n\"\r\n-                + \"  2 pmf2 fills its cache with both sets of objs.\\n\"\r\n-                + \"  3 pmf1 does a \"\r\n-                + transType\r\n-                + \" tx that invokes an operation of \"\r\n-                + changeOperation.getName()\r\n-                + \" to affect a single Runtime1 \\n\"\r\n-                + \"    assert that both pmf1 and pmf2's data caches dropped all\"\r\n-                + \"Runtime1s\");\r\n-        System.out.println(\"Remote commit event is transmiting \" + rcpType);\r\n-\r\n-        // Create runtimes1s and 2s.\r\n-        // Noraml transaction\r\n-        OpenJPAEntityManager pmSender = (OpenJPAEntityManager) pmfSender\r\n-            .createEntityManager();\r\n-        seedDataStore(pmSender, NUM_OBJECTS);\r\n-        endEm(pmSender);\r\n-\r\n-        // wait a bit so they get stored\r\n-        pause(1);\r\n-\r\n-        OpenJPAEntityManager pm2;\r\n-        pm2 = (OpenJPAEntityManager) pmfReceiver.createEntityManager();\r\n-        performLoadAll(pm2);\r\n-        endEm(pm2);\r\n-\r\n-        pmSender = (OpenJPAEntityManager) pmfSender.createEntityManager();\r\n-        performLoadAll(pmSender);\r\n-        endEm(pmSender);\r\n-\r\n-        // assert that pmf2's data cache now has all the Runtime1 and 2s.\r\n-        for (int i = 0; i < _runtime1sOids.length; i++) {\r\n-            assertTrue(dcReceiver.contains(\r\n-                Id.newInstance(RuntimeTest1.class, _runtime1sOids[i])));\r\n-        }\r\n-        for (int i = 0; i < _runtime2sOids.length; i++) {\r\n-            assertTrue(dcReceiver.contains(\r\n-                Id.newInstance(RuntimeTest2.class, _runtime2sOids[i])));\r\n-        }\r\n-\r\n-        // Modify or delete exactly 1 RuntimeTest1 object during a\r\n-        // largeTransaction\r\n-        changeOperation.operation(pmfSender, asLargeTransaction);\r\n-\r\n-        // assert that pmf1's data cache now only has Runtime2 objects\r\n-        if (asLargeTransaction) {\r\n-            for (int i = 0; i < _runtime1sOids.length; i++) {\r\n-                assertFalse(dcSender.contains(\r\n-                    Id.newInstance(RuntimeTest1.class, _runtime1sOids[i])));\r\n-            }\r\n-        } else {\r\n-            // Normal transaction\r\n-            for (int i = 0; i < _runtime1sOids.length; i++) {\r\n-                if (isDelete && i == 0) {\r\n-                    assertFalse(dcSender.contains(\r\n-                        Id.newInstance(RuntimeTest1.class, _runtime1sOids[i])));\r\n-                } else {\r\n-                    // modified the first elemnt, which just updated it.\r\n-                    // (for Kodo's data cache).\r\n-                    assertTrue(dcSender.contains(\r\n-                        Id.newInstance(RuntimeTest1.class, _runtime1sOids[i])));\r\n-                }\r\n-            }\r\n-        }\r\n-        for (int i = 0; i < _runtime2sOids.length; i++) {\r\n-            assertTrue(dcSender.contains(\r\n-                Id.newInstance(RuntimeTest2.class, _runtime2sOids[i])));\r\n-        }\r\n-        // wait a tiny bit so the rce propagates\r\n-        pause(2);\r\n-        // assert the pmf2's data cache also now only has Runtime2 objects\r\n-        if (asLargeTransaction) {\r\n-            for (int i = 0; i < _runtime1sOids.length; i++) {\r\n-                assertFalse(dcReceiver.contains(Id.newInstance(\r\n-                    RuntimeTest1.class, _runtime1sOids[i]))); //failing here\r\n-            }\r\n-        } else {\r\n-            for (int i = 0; i < _runtime1sOids.length; i++) {\r\n-                if (i == 0) {\r\n-                    assertFalse(dcReceiver.contains(Id.newInstance(\r\n-                        RuntimeTest1.class,\r\n-                        _runtime1sOids[i])));  //failing here\r\n-                } else {\r\n-                    assertTrue(dcReceiver.contains(\r\n-                        Id.newInstance(RuntimeTest1.class, _runtime1sOids[i])));\r\n-                }\r\n-            }\r\n-        }\r\n-        for (int i = 0; i < _runtime2sOids.length; i++) {\r\n-            assertTrue(dcReceiver.contains(\r\n-                Id.newInstance(RuntimeTest2.class, _runtime2sOids[i])));\r\n-        }\r\n-\r\n-        // shutdown\r\n-        pmfSender.close();\r\n-        pmfReceiver.close();\r\n-    }\r\n-\r\n-    protected void performLoadAll(OpenJPAEntityManager pm)\r\n-    // load in (and thus cache) all the 1s and 2s\r\n-    {\r\n-        startTx(pm);\r\n-        RuntimeTest1 temp1;\r\n-        Collection runtime1s = (Collection) pm\r\n-            .createQuery(\"SELECT a FROM RuntimeTest1 a\").getResultList();\r\n-\r\n-        for (Iterator itr = runtime1s.iterator(); itr.hasNext();)\r\n-            temp1 = (RuntimeTest1) itr.next();\r\n-        RuntimeTest2 temp2;\r\n-        Collection runtime2s = (Collection) pm\r\n-            .createQuery(\"SELECT a FROM RuntimeTest2 a\").getResultList();\r\n-\r\n-        for (Iterator itr = runtime2s.iterator(); itr.hasNext();)\r\n-            temp2 = (RuntimeTest2) itr.next();\r\n-        endTx(pm);\r\n-    }\r\n-\r\n-    protected void seedDataStore(OpenJPAEntityManager pm, int numObjects) {\r\n-        startTx(pm);\r\n-        // create objects\r\n-        RuntimeTest1[] persistables = new RuntimeTest1[numObjects];\r\n-        _runtime1sOids = new Object[numObjects];\r\n-        for (int i = 0; i < persistables.length; i++) {\r\n-            persistables[i] = new RuntimeTest1(\"foo #\" + i, i);\r\n-            pm.persist(persistables[i]);\r\n-            _runtime1sOids[i] = pm.getObjectId(persistables[i]);\r\n-            if (i == 0) {\r\n-                persistables[i].setStringField(\"SpecialRuntimeTest1\");\r\n-                spec_oid = pm.getObjectId(persistables[i]);\r\n-            }\r\n-        }\r\n-        RuntimeTest2[] persistables2 = new RuntimeTest2[numObjects];\r\n-        _runtime2sOids = new Object[numObjects];\r\n-        for (int i = 0; i < persistables2.length; i++) {\r\n-            persistables2[i] = new RuntimeTest2(\"bar #\" + i, i);\r\n-            pm.persist(persistables2[i]);\r\n-            _runtime2sOids[i] = pm.getObjectId(persistables2[i]);\r\n-        }\r\n-        endTx(pm);\r\n-    }\r\n-\r\n-    static int _fetchGroupSerial = 0;\r\n-\r\n-    protected OpenJPAEntityManagerFactory createDistinctFactory(\r\n-        Class providerClass, String classProps1) {\r\n-        Map propsMap;\r\n-\r\n-        if (providerClass != null) {\r\n-            // This test is for the combination of RCP, largeTrans,\r\n-            // and Kodo's builtin DataCache.\r\n-            // use this property to differentiate the factory\r\n-\r\n-            propsMap = new HashMap();\r\n-            propsMap.put(\"openjpa.DataCache\", \"lru\");\r\n-            propsMap.put(\"openjpa.RemoteCommitProvider\", Configurations.getPlugin(\r\n-                providerClass.getName(), classProps1));\r\n-            propsMap.put(\"openjpa.FetchGroups\", \"differentiatingFetchGroup\"\r\n-                + _fetchGroupSerial);\r\n-        } else {\r\n-            // No RCP\r\n-            propsMap = new HashMap();\r\n-            propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n-            propsMap.put(\"openjpa.FetchGroups\", \"differentiatingFetchGroup\"\r\n-                + _fetchGroupSerial);\r\n-        }\r\n-        _fetchGroupSerial += 1;\r\n-\r\n-        return (OpenJPAEntityManagerFactory) getEmf(propsMap);\r\n-    }\r\n-\r\n-    private void pause(double seconds) {\r\n-        try {\r\n-            Thread.currentThread().yield();\r\n-            Thread.currentThread().sleep((int) seconds * 1000);\r\n-        }\r\n-        catch (Exception e) {\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-/*\r\n- remove all Runteim1, and 2\r\n- create a few 1 and 2s\r\n- get them into the cache, assert\r\n- large transaction, and modify a runtime2, assert cache only has runtime1s\r\n-\r\n-\r\n- remove all Runteim1, and 2\r\n- create a few 1 and 2s\r\n- get them into the cache, assert\r\n- large transaction, delete a runtime2, assert cache only has runteime1s\r\n- */\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+\n+import org.apache.openjpa.persistence.datacache.common.apps.RuntimeTest1;\n+import org.apache.openjpa.persistence.datacache.common.apps.RuntimeTest2;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+import org.apache.openjpa.datacache.DataCache;\n+import org.apache.openjpa.event.TCPRemoteCommitProvider;\n+import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.util.Id;\n+\n+public class TestDistributedKodoDataCache extends AbstractTestCase {\n+\n+    // We want more than 1 instance of each type of class.\n+    private static final int NUM_OBJECTS = 4;\n+\n+    private Object[] _runtime1sOids;\n+\n+    private Object[] _runtime2sOids;\n+\n+    private Object spec_oid;\n+\n+    public TestDistributedKodoDataCache(String test) {\n+        super(test, \"datacachecactusapp\");\n+    }\n+\n+    public void setUp() {\n+        deleteAll(RuntimeTest1.class);\n+        deleteAll(RuntimeTest2.class);\n+    }\n+\n+    private interface ChangeOperation {\n+\n+        public String getName();\n+\n+        public void operation(OpenJPAEntityManagerFactory kpmf,\n+            boolean asLarge);\n+    }\n+\n+    private class performAsModify implements ChangeOperation {\n+\n+        public String getName() {\n+            return \"Modify SpecialRuntimeTest1\";\n+        }\n+\n+        public void operation(OpenJPAEntityManagerFactory kpmf,\n+            boolean asLarge) {\n+            OpenJPAEntityManager pm;\n+            pm = (OpenJPAEntityManager) kpmf.createEntityManager();\n+            if (asLarge)\n+                //pm.setLargeTransaction(true);\n+                pm.setTrackChangesByType(true);\n+            startTx(pm);\n+            RuntimeTest1 special = pm.find(RuntimeTest1.class, spec_oid);\n+            assertNotNull(special);\n+            special.setStringField(\"SpeicalRuntimeTest1_MODIFIED\");\n+\n+            endTx(pm);\n+            endEm(pm);\n+        }\n+    }\n+\n+    private class performAsDelete implements ChangeOperation {\n+\n+        public String getName() {\n+            return \"Delete SpecialRuntimeTest1\";\n+        }\n+\n+        public void operation(OpenJPAEntityManagerFactory kpmf,\n+            boolean asLarge) {\n+            OpenJPAEntityManager pm;\n+            pm = (OpenJPAEntityManager) kpmf.createEntityManager();\n+            if (asLarge)\n+                //pm.setLargeTransaction(true);\n+                pm.setTrackChangesByType(true);\n+            startTx(pm);\n+            RuntimeTest1 specialObj = pm.find(RuntimeTest1.class, spec_oid);\n+            assertNotNull(specialObj);\n+\n+            pm.remove(specialObj);\n+\n+            endTx(pm);\n+            endEm(pm);\n+        }\n+    }\n+\n+    public void testNormalTransAndDataCacheDelete() {\n+        coreTestTransAndChange(new performAsDelete(), false, true);\n+    }\n+\n+    public void testNormalTransAndDataCacheModify() {\n+        coreTestTransAndChange(new performAsModify(), false, false);\n+    }\n+\n+    public void testLargeTransAndDataCacheDelete() {\n+        coreTestTransAndChange(new performAsDelete(), true, true);\n+    }\n+\n+    public void testLargeTransAndDataCacheModify() {\n+        coreTestTransAndChange(new performAsModify(), true, false);\n+    }\n+\n+    public void coreTestTransAndChange(ChangeOperation changeOperation,\n+        boolean asLargeTransaction, boolean isDelete) {\n+        // Create two pmfs in a cluster that are using RCPTCP.\n+        OpenJPAEntityManagerFactory pmfSender = createDistinctFactory(\n+            TCPRemoteCommitProvider.class,\n+            \"Port=5636, Addresses=127.0.0.1:6636\");\n+        OpenJPAEntityManagerFactory pmfReceiver = createDistinctFactory(\n+            TCPRemoteCommitProvider.class,\n+            \"Port=6636, Addresses=127.0.0.1:5636\");\n+        // Get the datacaches from each pmf\n+        DataCache dcSender =\n+            ((OpenJPAEntityManagerFactorySPI) pmfSender).getConfiguration()\n+                .getDataCacheManagerInstance().getSystemDataCache();\n+        DataCache dcReceiver =\n+            ((OpenJPAEntityManagerFactorySPI) pmfReceiver).getConfiguration()\n+                .getDataCacheManagerInstance().getSystemDataCache();\n+\n+        deleteAll(RuntimeTest1.class);\n+        deleteAll(RuntimeTest2.class);\n+\n+        _runtime1sOids = null;\n+        _runtime2sOids = null;\n+\n+        String transType = \"normal\";\n+        String rcpType = \"OIDs\";\n+        if (asLargeTransaction) {\n+            transType = \"large\";\n+            rcpType = \"classes\";\n+        }\n+        System.out.println(\"-------------------\");\n+        System.out\n+            .println(\n+                \"2 PMFs created, acting as a cluster using ports 5636 and 6636\");\n+        System.out.println(\"Testing scenario:\");\n+        System.out\n+            .println(\"  1 Seed datastore with instances of RuntimeTest1 AND \"\n+                + \"RuntimeTest2 objs.\\n\"\n+                + \"  2 pmf2 fills its cache with both sets of objs.\\n\"\n+                + \"  3 pmf1 does a \"\n+                + transType\n+                + \" tx that invokes an operation of \"\n+                + changeOperation.getName()\n+                + \" to affect a single Runtime1 \\n\"\n+                + \"    assert that both pmf1 and pmf2's data caches dropped all\"\n+                + \"Runtime1s\");\n+        System.out.println(\"Remote commit event is transmiting \" + rcpType);\n+\n+        // Create runtimes1s and 2s.\n+        // Noraml transaction\n+        OpenJPAEntityManager pmSender = (OpenJPAEntityManager) pmfSender\n+            .createEntityManager();\n+        seedDataStore(pmSender, NUM_OBJECTS);\n+        endEm(pmSender);\n+\n+        // wait a bit so they get stored\n+        pause(1);\n+\n+        OpenJPAEntityManager pm2;\n+        pm2 = (OpenJPAEntityManager) pmfReceiver.createEntityManager();\n+        performLoadAll(pm2);\n+        endEm(pm2);\n+\n+        pmSender = (OpenJPAEntityManager) pmfSender.createEntityManager();\n+        performLoadAll(pmSender);\n+        endEm(pmSender);\n+\n+        // assert that pmf2's data cache now has all the Runtime1 and 2s.\n+        for (int i = 0; i < _runtime1sOids.length; i++) {\n+            assertTrue(dcReceiver.contains(\n+                Id.newInstance(RuntimeTest1.class, _runtime1sOids[i])));\n+        }\n+        for (int i = 0; i < _runtime2sOids.length; i++) {\n+            assertTrue(dcReceiver.contains(\n+                Id.newInstance(RuntimeTest2.class, _runtime2sOids[i])));\n+        }\n+\n+        // Modify or delete exactly 1 RuntimeTest1 object during a\n+        // largeTransaction\n+        changeOperation.operation(pmfSender, asLargeTransaction);\n+\n+        // assert that pmf1's data cache now only has Runtime2 objects\n+        if (asLargeTransaction) {\n+            for (int i = 0; i < _runtime1sOids.length; i++) {\n+                assertFalse(dcSender.contains(\n+                    Id.newInstance(RuntimeTest1.class, _runtime1sOids[i])));\n+            }\n+        } else {\n+            // Normal transaction\n+            for (int i = 0; i < _runtime1sOids.length; i++) {\n+                if (isDelete && i == 0) {\n+                    assertFalse(dcSender.contains(\n+                        Id.newInstance(RuntimeTest1.class, _runtime1sOids[i])));\n+                } else {\n+                    // modified the first elemnt, which just updated it.\n+                    // (for Kodo's data cache).\n+                    assertTrue(dcSender.contains(\n+                        Id.newInstance(RuntimeTest1.class, _runtime1sOids[i])));\n+                }\n+            }\n+        }\n+        for (int i = 0; i < _runtime2sOids.length; i++) {\n+            assertTrue(dcSender.contains(\n+                Id.newInstance(RuntimeTest2.class, _runtime2sOids[i])));\n+        }\n+        // wait a tiny bit so the rce propagates\n+        pause(2);\n+        // assert the pmf2's data cache also now only has Runtime2 objects\n+        if (asLargeTransaction) {\n+            for (int i = 0; i < _runtime1sOids.length; i++) {\n+                assertFalse(dcReceiver.contains(Id.newInstance(\n+                    RuntimeTest1.class, _runtime1sOids[i]))); //failing here\n+            }\n+        } else {\n+            for (int i = 0; i < _runtime1sOids.length; i++) {\n+                if (i == 0) {\n+                    assertFalse(dcReceiver.contains(Id.newInstance(\n+                        RuntimeTest1.class,\n+                        _runtime1sOids[i])));  //failing here\n+                } else {\n+                    assertTrue(dcReceiver.contains(\n+                        Id.newInstance(RuntimeTest1.class, _runtime1sOids[i])));\n+                }\n+            }\n+        }\n+        for (int i = 0; i < _runtime2sOids.length; i++) {\n+            assertTrue(dcReceiver.contains(\n+                Id.newInstance(RuntimeTest2.class, _runtime2sOids[i])));\n+        }\n+\n+        // shutdown\n+        pmfSender.close();\n+        pmfReceiver.close();\n+    }\n+\n+    protected void performLoadAll(OpenJPAEntityManager pm)\n+    // load in (and thus cache) all the 1s and 2s\n+    {\n+        startTx(pm);\n+        RuntimeTest1 temp1;\n+        Collection runtime1s = (Collection) pm\n+            .createQuery(\"SELECT a FROM RuntimeTest1 a\").getResultList();\n+\n+        for (Iterator itr = runtime1s.iterator(); itr.hasNext();)\n+            temp1 = (RuntimeTest1) itr.next();\n+        RuntimeTest2 temp2;\n+        Collection runtime2s = (Collection) pm\n+            .createQuery(\"SELECT a FROM RuntimeTest2 a\").getResultList();\n+\n+        for (Iterator itr = runtime2s.iterator(); itr.hasNext();)\n+            temp2 = (RuntimeTest2) itr.next();\n+        endTx(pm);\n+    }\n+\n+    protected void seedDataStore(OpenJPAEntityManager pm, int numObjects) {\n+        startTx(pm);\n+        // create objects\n+        RuntimeTest1[] persistables = new RuntimeTest1[numObjects];\n+        _runtime1sOids = new Object[numObjects];\n+        for (int i = 0; i < persistables.length; i++) {\n+            persistables[i] = new RuntimeTest1(\"foo #\" + i, i);\n+            pm.persist(persistables[i]);\n+            _runtime1sOids[i] = pm.getObjectId(persistables[i]);\n+            if (i == 0) {\n+                persistables[i].setStringField(\"SpecialRuntimeTest1\");\n+                spec_oid = pm.getObjectId(persistables[i]);\n+            }\n+        }\n+        RuntimeTest2[] persistables2 = new RuntimeTest2[numObjects];\n+        _runtime2sOids = new Object[numObjects];\n+        for (int i = 0; i < persistables2.length; i++) {\n+            persistables2[i] = new RuntimeTest2(\"bar #\" + i, i);\n+            pm.persist(persistables2[i]);\n+            _runtime2sOids[i] = pm.getObjectId(persistables2[i]);\n+        }\n+        endTx(pm);\n+    }\n+\n+    static int _fetchGroupSerial = 0;\n+\n+    protected OpenJPAEntityManagerFactory createDistinctFactory(\n+        Class providerClass, String classProps1) {\n+        Map propsMap;\n+\n+        if (providerClass != null) {\n+            // This test is for the combination of RCP, largeTrans,\n+            // and Kodo's builtin DataCache.\n+            // use this property to differentiate the factory\n+\n+            propsMap = new HashMap();\n+            propsMap.put(\"openjpa.DataCache\", \"lru\");\n+            propsMap.put(\"openjpa.RemoteCommitProvider\", Configurations.getPlugin(\n+                providerClass.getName(), classProps1));\n+            propsMap.put(\"openjpa.FetchGroups\", \"differentiatingFetchGroup\"\n+                + _fetchGroupSerial);\n+        } else {\n+            // No RCP\n+            propsMap = new HashMap();\n+            propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n+            propsMap.put(\"openjpa.FetchGroups\", \"differentiatingFetchGroup\"\n+                + _fetchGroupSerial);\n+        }\n+        _fetchGroupSerial += 1;\n+\n+        return (OpenJPAEntityManagerFactory) getEmf(propsMap);\n+    }\n+\n+    private void pause(double seconds) {\n+        try {\n+            Thread.currentThread().yield();\n+            Thread.currentThread().sleep((int) seconds * 1000);\n+        }\n+        catch (Exception e) {\n+        }\n+    }\n+}\n+\n+/*\n+ remove all Runteim1, and 2\n+ create a few 1 and 2s\n+ get them into the cache, assert\n+ large transaction, and modify a runtime2, assert cache only has runtime1s\n+\n+\n+ remove all Runteim1, and 2\n+ create a few 1 and 2s\n+ get them into the cache, assert\n+ large transaction, delete a runtime2, assert cache only has runteime1s\n+ */\n+"},{"sha":"80f024e4ad335f609fbd873193b3f512b23cf9da","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestEmbeddedCollection.java","status":"modified","additions":123,"deletions":123,"changes":246,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestEmbeddedCollection.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestEmbeddedCollection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestEmbeddedCollection.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,123 +1,123 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-import org.apache.openjpa.persistence.StoreCacheImpl;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.EmbeddedEntity;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.EmbeddingOwnerEntity;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * Test removing members of embedded collection with active DataCache.\r\n- * \r\n- * Originally reported in \r\n- * <HREF=\"http://issues.apache.org/jira/browse/OPENJPA-625\">OPENJPA-625</A>\r\n- * \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-public class TestEmbeddedCollection extends SingleEMFTestCase {\r\n-\r\n-\tprivate static final int SIZE = 4;\r\n-\tprivate static OpenJPAEntityManagerFactorySPI emf = null;\r\n-\t/**\r\n-\t * Sets up EntityManagerFactory: with DataCache.\r\n-\t */\r\n-\tpublic void setUp() throws Exception {\r\n-\t\tif (emf == null) {\r\n-\t\t\tsuper.setUp(\"openjpa.jdbc.SynchronizeMappings\", \"buildSchema\",\r\n-\t\t\t\t\t\"openjpa.RuntimeUnenhancedClasses\", \"unsupported\",\r\n-\t\t\t\t\t\"openjpa.DataCache\", \"true\", \"openjpa.RemoteCommitProvider\",\r\n-\t\t\t\t\t\"sjvm\", \"openjpa.jdbc.UpdateManager\", \"constraint\",\r\n-\t\t\t\t\tEmbeddingOwnerEntity.class, \r\n-\t\t\t\t\tEmbeddedEntity.class,\r\n-\t\t\t\t\tCLEAR_TABLES);\r\n-\t\t\temf = super.emf;\r\n-\t\t\t\r\n-\t\t\tcreateData();\r\n-\t\t}\r\n-\t\tassertNotNull(emf);\r\n-\t\tassertNotNull(emf.getStoreCache());\r\n-\t\tassertTrue(isDataCacheActive(emf));\r\n-\t}\r\n-\r\n-\tboolean isDataCacheActive(OpenJPAEntityManagerFactorySPI emf) {\r\n-\t\treturn ((StoreCacheImpl) emf.getStoreCache()).getDelegate() != null\r\n-\t\t\t\t&& emf.getConfiguration().getDataCacheManagerInstance()\r\n-\t\t\t\t\t\t.getSystemDataCache() != null;\r\n-\t}\r\n-\t\r\n-\t@Override\r\n-\tpublic void tearDown() throws Exception {\r\n-\t\t\r\n-\t}\r\n-\t\r\n-\tpublic void createData() {\r\n-\t\tEmbeddingOwnerEntity owner = new EmbeddingOwnerEntity();\r\n-\t\tfor (int i = 0; i < SIZE; i++) {\r\n-\t\t\tEmbeddedEntity member = new EmbeddedEntity();\r\n-\t\t\tmember.setMarker(\"Member-\" + i);\r\n-\t\t\towner.addMember(member);\r\n-\t\t}\r\n-\t\tEntityManager em = emf.createEntityManager();\r\n-\t\tem.getTransaction().begin();\r\n-\t\tem.persist(owner);\r\n-\t\tem.getTransaction().commit();\r\n-\t\tObject id = OpenJPAPersistence.cast(em).getObjectId(owner);\r\n-\t\tem.clear();\r\n-\r\n-\t\tEmbeddingOwnerEntity test = em.find(EmbeddingOwnerEntity.class, id);\r\n-\t\tassertNotNull(test);\r\n-\t\tList<EmbeddedEntity> members = test.getMembers();\r\n-\t\tassertNotNull(members);\r\n-\t\tassertEquals(SIZE, members.size());\r\n-\t\tfor (int i = 0; i < SIZE; i++)\r\n-\t\t\tmembers.get(i).getMarker().equals(\"Member-\" + i);\r\n-\t}\r\n-\r\n-\tpublic void testRemoveMemberFromEmbeddedCollection() {\r\n-\t\tEntityManager em = emf.createEntityManager();\r\n-\t\tem.getTransaction().begin();\r\n-\t\tList<EmbeddingOwnerEntity> result = em.createQuery(\r\n-\t\t\t\t\"SELECT p FROM EmbeddingOwnerEntity p\").getResultList();\r\n-\r\n-\t\tassertNotNull(result);\r\n-\t\tassertFalse(result.isEmpty());\r\n-\r\n-\t\tEmbeddingOwnerEntity owner = result.get(0);\r\n-\t\tObject id = owner.getId();\r\n-\t\t\r\n-\t\tassertTrue(emf.getStoreCache().contains(EmbeddingOwnerEntity.class, id));\r\n-\t\t\r\n-\t\tList<EmbeddedEntity> members = owner.getMembers();\r\n-\t\tmembers.remove(0);\r\n-\t\towner.removeMember(0);\r\n-\t\towner.removeMember(members.get(0));\r\n-\t\tem.getTransaction().commit();\r\n-\t\t\r\n-\t\tassertEquals(owner.getMembers().size(), SIZE-3); \r\n-\t}\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.StoreCacheImpl;\n+import org.apache.openjpa.persistence.datacache.common.apps.EmbeddedEntity;\n+import org.apache.openjpa.persistence.datacache.common.apps.EmbeddingOwnerEntity;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test removing members of embedded collection with active DataCache.\n+ * \n+ * Originally reported in \n+ * <HREF=\"http://issues.apache.org/jira/browse/OPENJPA-625\">OPENJPA-625</A>\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class TestEmbeddedCollection extends SingleEMFTestCase {\n+\n+\tprivate static final int SIZE = 4;\n+\tprivate static OpenJPAEntityManagerFactorySPI emf = null;\n+\t/**\n+\t * Sets up EntityManagerFactory: with DataCache.\n+\t */\n+\tpublic void setUp() throws Exception {\n+\t\tif (emf == null) {\n+\t\t\tsuper.setUp(\"openjpa.jdbc.SynchronizeMappings\", \"buildSchema\",\n+\t\t\t\t\t\"openjpa.RuntimeUnenhancedClasses\", \"unsupported\",\n+\t\t\t\t\t\"openjpa.DataCache\", \"true\", \"openjpa.RemoteCommitProvider\",\n+\t\t\t\t\t\"sjvm\", \"openjpa.jdbc.UpdateManager\", \"constraint\",\n+\t\t\t\t\tEmbeddingOwnerEntity.class, \n+\t\t\t\t\tEmbeddedEntity.class,\n+\t\t\t\t\tCLEAR_TABLES);\n+\t\t\temf = super.emf;\n+\t\t\t\n+\t\t\tcreateData();\n+\t\t}\n+\t\tassertNotNull(emf);\n+\t\tassertNotNull(emf.getStoreCache());\n+\t\tassertTrue(isDataCacheActive(emf));\n+\t}\n+\n+\tboolean isDataCacheActive(OpenJPAEntityManagerFactorySPI emf) {\n+\t\treturn ((StoreCacheImpl) emf.getStoreCache()).getDelegate() != null\n+\t\t\t\t&& emf.getConfiguration().getDataCacheManagerInstance()\n+\t\t\t\t\t\t.getSystemDataCache() != null;\n+\t}\n+\t\n+\t@Override\n+\tpublic void tearDown() throws Exception {\n+\t\t\n+\t}\n+\t\n+\tpublic void createData() {\n+\t\tEmbeddingOwnerEntity owner = new EmbeddingOwnerEntity();\n+\t\tfor (int i = 0; i < SIZE; i++) {\n+\t\t\tEmbeddedEntity member = new EmbeddedEntity();\n+\t\t\tmember.setMarker(\"Member-\" + i);\n+\t\t\towner.addMember(member);\n+\t\t}\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\tem.getTransaction().begin();\n+\t\tem.persist(owner);\n+\t\tem.getTransaction().commit();\n+\t\tObject id = OpenJPAPersistence.cast(em).getObjectId(owner);\n+\t\tem.clear();\n+\n+\t\tEmbeddingOwnerEntity test = em.find(EmbeddingOwnerEntity.class, id);\n+\t\tassertNotNull(test);\n+\t\tList<EmbeddedEntity> members = test.getMembers();\n+\t\tassertNotNull(members);\n+\t\tassertEquals(SIZE, members.size());\n+\t\tfor (int i = 0; i < SIZE; i++)\n+\t\t\tmembers.get(i).getMarker().equals(\"Member-\" + i);\n+\t}\n+\n+\tpublic void testRemoveMemberFromEmbeddedCollection() {\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\tem.getTransaction().begin();\n+\t\tList<EmbeddingOwnerEntity> result = em.createQuery(\n+\t\t\t\t\"SELECT p FROM EmbeddingOwnerEntity p\").getResultList();\n+\n+\t\tassertNotNull(result);\n+\t\tassertFalse(result.isEmpty());\n+\n+\t\tEmbeddingOwnerEntity owner = result.get(0);\n+\t\tObject id = owner.getId();\n+\t\t\n+\t\tassertTrue(emf.getStoreCache().contains(EmbeddingOwnerEntity.class, id));\n+\t\t\n+\t\tList<EmbeddedEntity> members = owner.getMembers();\n+\t\tmembers.remove(0);\n+\t\towner.removeMember(0);\n+\t\towner.removeMember(members.get(0));\n+\t\tem.getTransaction().commit();\n+\t\t\n+\t\tassertEquals(owner.getMembers().size(), SIZE-3); \n+\t}\n+\n+}"},{"sha":"ae80be19ca2ab5c28141c59083d86491295b7fe6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestFlushDataCache.java","status":"modified","additions":102,"deletions":102,"changes":204,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestFlushDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestFlushDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestFlushDataCache.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,102 +1,102 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import java.util.Collection;\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.datacache.common.apps.FlushDataCacheObject;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-public class TestFlushDataCache\r\n-    extends AbstractTestCase {\r\n-\r\n-    public TestFlushDataCache(String str) {\r\n-        super(str, \"datacachecactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(FlushDataCacheObject.class);\r\n-    }\r\n-\r\n-    public void testQueryFlushPlusDataCache() {\r\n-        Map propsMap = new HashMap();\r\n-        propsMap.put(\"openjpa.DataCache\", \"true\");\r\n-        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n-        propsMap.put(\"openjpa.FlushBeforeQueries\", \"true\");\r\n-        //propsMap.put(\"javax.jdo.option.IgnoreCache\", \"false\");\r\n-        //propsMap.put(\"openjpa.BrokerImpl\", \"kodo.datacache.CacheTestBroker\");//CacheTestBroker.class.getName ());\r\n-        EntityManagerFactory emf = getEmf(propsMap);\r\n-\r\n-        try {\r\n-\r\n-            //assertEquals(Class.forName(\"openjpa.datacache.CacheTestBroker\",true,emf.getClass().getClassLoader()).getClassLoader(),emf.getClass().getClassLoader());\r\n-            //Thread.currentThread().setContextClassLoader(emf.getClass().getClassLoader());\r\n-            Class.forName(\"org.apache.openjpa.persistence.datacache.CacheTestBroker\", true,\r\n-                Thread.currentThread().getContextClassLoader());\r\n-        } catch (Exception e) {\r\n-\r\n-        }\r\n-\r\n-        EntityManager em = emf.createEntityManager();\r\n-        startTx(em);\r\n-        FlushDataCacheObject o = new FlushDataCacheObject();\r\n-        o.setString(\"foo\");\r\n-        em.persist(o);\r\n-        endTx(em);\r\n-        //Object oid = JDOHelper.getObjectId (o);\r\n-        endEm(em);\r\n-\r\n-        em = emf.createEntityManager();\r\n-        startTx(em);\r\n-\r\n-        Collection c = (Collection) em.createQuery(\r\n-            \"select a FROM \" + FlushDataCacheObject.class.getSimpleName() +\r\n-                \" a where a.string = 'foo'\").getResultList();\r\n-\r\n-        assertEquals(1, c.size());\r\n-        em.remove(c.iterator().next());\r\n-\r\n-        c = (Collection) em.createQuery(\r\n-            \"select a FROM \" + FlushDataCacheObject.class.getSimpleName() +\r\n-                \" a where a.string = 'foo'\").getResultList();\r\n-        assertEquals(0, c.size());\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testEmptyCommit() {\r\n-        Map propsMap = new HashMap();\r\n-        propsMap.put(\"openjpa.DataCache\", \"true\");\r\n-        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n-        propsMap.put(\"openjpa.FlushBeforeQueries\", \"true\");\r\n-        //propsMap.put(\"javax.jdo.option.IgnoreCache\", \"false\");\r\n-        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\r\n-        EntityManagerFactory emf = getEmf(propsMap);\r\n-        EntityManager em = emf.createEntityManager();\r\n-        startTx(em);\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+\n+import org.apache.openjpa.persistence.datacache.common.apps.FlushDataCacheObject;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+public class TestFlushDataCache\n+    extends AbstractTestCase {\n+\n+    public TestFlushDataCache(String str) {\n+        super(str, \"datacachecactusapp\");\n+    }\n+\n+    public void setUp() {\n+        deleteAll(FlushDataCacheObject.class);\n+    }\n+\n+    public void testQueryFlushPlusDataCache() {\n+        Map propsMap = new HashMap();\n+        propsMap.put(\"openjpa.DataCache\", \"true\");\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n+        propsMap.put(\"openjpa.FlushBeforeQueries\", \"true\");\n+        //propsMap.put(\"javax.jdo.option.IgnoreCache\", \"false\");\n+        //propsMap.put(\"openjpa.BrokerImpl\", \"kodo.datacache.CacheTestBroker\");//CacheTestBroker.class.getName ());\n+        EntityManagerFactory emf = getEmf(propsMap);\n+\n+        try {\n+\n+            //assertEquals(Class.forName(\"openjpa.datacache.CacheTestBroker\",true,emf.getClass().getClassLoader()).getClassLoader(),emf.getClass().getClassLoader());\n+            //Thread.currentThread().setContextClassLoader(emf.getClass().getClassLoader());\n+            Class.forName(\"org.apache.openjpa.persistence.datacache.CacheTestBroker\", true,\n+                Thread.currentThread().getContextClassLoader());\n+        } catch (Exception e) {\n+\n+        }\n+\n+        EntityManager em = emf.createEntityManager();\n+        startTx(em);\n+        FlushDataCacheObject o = new FlushDataCacheObject();\n+        o.setString(\"foo\");\n+        em.persist(o);\n+        endTx(em);\n+        //Object oid = JDOHelper.getObjectId (o);\n+        endEm(em);\n+\n+        em = emf.createEntityManager();\n+        startTx(em);\n+\n+        Collection c = (Collection) em.createQuery(\n+            \"select a FROM \" + FlushDataCacheObject.class.getSimpleName() +\n+                \" a where a.string = 'foo'\").getResultList();\n+\n+        assertEquals(1, c.size());\n+        em.remove(c.iterator().next());\n+\n+        c = (Collection) em.createQuery(\n+            \"select a FROM \" + FlushDataCacheObject.class.getSimpleName() +\n+                \" a where a.string = 'foo'\").getResultList();\n+        assertEquals(0, c.size());\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testEmptyCommit() {\n+        Map propsMap = new HashMap();\n+        propsMap.put(\"openjpa.DataCache\", \"true\");\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n+        propsMap.put(\"openjpa.FlushBeforeQueries\", \"true\");\n+        //propsMap.put(\"javax.jdo.option.IgnoreCache\", \"false\");\n+        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\n+        EntityManagerFactory emf = getEmf(propsMap);\n+        EntityManager em = emf.createEntityManager();\n+        startTx(em);\n+        endTx(em);\n+        endEm(em);\n+    }\n+}"},{"sha":"59735eb4e768df98ee960d5efae342de8057655d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQL2Queries.java","status":"modified","additions":134,"deletions":134,"changes":268,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQL2Queries.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQL2Queries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQL2Queries.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,134 +1,134 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import java.util.Collection;\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-import javax.persistence.EntityManagerFactory;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild1;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.kernel.BrokerFactory;\r\n-import org.apache.openjpa.kernel.Query;\r\n-import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-\r\n-public class TestJPQL2Queries\r\n-    extends AbstractTestCase {\r\n-\r\n-    public TestJPQL2Queries(String test) {\r\n-        super(test, \"datacachecactusapp\");\r\n-    }\r\n-\r\n-    private BrokerFactory _factory;\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(CacheObjectA.class);\r\n-\r\n-        Map propsMap = new HashMap();\r\n-        propsMap.put(\"openjpa.DataCache\", \"true\");\r\n-        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n-        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\r\n-        EntityManagerFactory emf = getEmf(propsMap);\r\n-        _factory = JPAFacadeHelper.toBrokerFactory(emf);\r\n-        Broker broker = _factory.newBroker();\r\n-        broker.begin();\r\n-        for (int i = 0; i < 50; i++)\r\n-            broker.persist(new CacheObjectAChild1(\"\", \"JPQL2Queries\", i),\r\n-                null);\r\n-        broker.commit();\r\n-        broker.close();\r\n-\r\n-        CacheTestHelper.cacheManager(_factory).getSystemQueryCache().clear();\r\n-    }\r\n-\r\n-    public void tearDown()\r\n-        throws Exception {\r\n-        try {\r\n-            _factory.close();\r\n-        } catch (Exception e) {\r\n-        }\r\n-\r\n-        super.tearDown();\r\n-    }\r\n-\r\n-    public void testUpperRange() {\r\n-        rangeTestHelper(0, 10);\r\n-    }\r\n-\r\n-    public void testLowerRange() {\r\n-        rangeTestHelper(5, 50);\r\n-    }\r\n-\r\n-    public void testBothRanges() {\r\n-        rangeTestHelper(20, 28);\r\n-    }\r\n-\r\n-    private void rangeTestHelper(final int start, final int end) {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \" +\r\n-            CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n-        q.setRange(start, end);\r\n-\r\n-        // should not yet be in the cache\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.FALSE);\r\n-        Collection c = (Collection) q.execute();\r\n-\r\n-        // iterate the results. This will cause the query to be\r\n-        // enlisted in the cache.\r\n-        CacheTestHelper.iterate(c);\r\n-        assertEquals(end - start, c.size());\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        broker.close();\r\n-\r\n-        broker = _factory.newBroker();\r\n-        q = broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \" +\r\n-            CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n-        q.setRange(start, end);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-        c = (Collection) q.execute();\r\n-        assertEquals(end - start, c.size());\r\n-\r\n-        // now check if a smaller range is in cache\r\n-        q = broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \" +\r\n-            CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n-        q.setRange(start, end - 1);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.FALSE);\r\n-        c = (Collection) q.execute();\r\n-        assertEquals(end - start - 1, c.size());\r\n-        broker.close();\r\n-    }\r\n-\r\n-    public void testResultClassIsCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \" +\r\n-            CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n-        q.setResultType(Object.class);\r\n-        Collection c = (Collection) q.execute();\r\n-        CacheTestHelper.iterate(c);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.persistence.EntityManagerFactory;\n+\n+\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA;\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild1;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.kernel.BrokerFactory;\n+import org.apache.openjpa.kernel.Query;\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+\n+public class TestJPQL2Queries\n+    extends AbstractTestCase {\n+\n+    public TestJPQL2Queries(String test) {\n+        super(test, \"datacachecactusapp\");\n+    }\n+\n+    private BrokerFactory _factory;\n+\n+    public void setUp() {\n+        deleteAll(CacheObjectA.class);\n+\n+        Map propsMap = new HashMap();\n+        propsMap.put(\"openjpa.DataCache\", \"true\");\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n+        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\n+        EntityManagerFactory emf = getEmf(propsMap);\n+        _factory = JPAFacadeHelper.toBrokerFactory(emf);\n+        Broker broker = _factory.newBroker();\n+        broker.begin();\n+        for (int i = 0; i < 50; i++)\n+            broker.persist(new CacheObjectAChild1(\"\", \"JPQL2Queries\", i),\n+                null);\n+        broker.commit();\n+        broker.close();\n+\n+        CacheTestHelper.cacheManager(_factory).getSystemQueryCache().clear();\n+    }\n+\n+    public void tearDown()\n+        throws Exception {\n+        try {\n+            _factory.close();\n+        } catch (Exception e) {\n+        }\n+\n+        super.tearDown();\n+    }\n+\n+    public void testUpperRange() {\n+        rangeTestHelper(0, 10);\n+    }\n+\n+    public void testLowerRange() {\n+        rangeTestHelper(5, 50);\n+    }\n+\n+    public void testBothRanges() {\n+        rangeTestHelper(20, 28);\n+    }\n+\n+    private void rangeTestHelper(final int start, final int end) {\n+        Broker broker = _factory.newBroker();\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \" +\n+            CacheObjectAChild1.class.getSimpleName() + \" a\");\n+        q.setRange(start, end);\n+\n+        // should not yet be in the cache\n+        CacheTestHelper.assertInCache(this, q, Boolean.FALSE);\n+        Collection c = (Collection) q.execute();\n+\n+        // iterate the results. This will cause the query to be\n+        // enlisted in the cache.\n+        CacheTestHelper.iterate(c);\n+        assertEquals(end - start, c.size());\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        broker.close();\n+\n+        broker = _factory.newBroker();\n+        q = broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \" +\n+            CacheObjectAChild1.class.getSimpleName() + \" a\");\n+        q.setRange(start, end);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+        c = (Collection) q.execute();\n+        assertEquals(end - start, c.size());\n+\n+        // now check if a smaller range is in cache\n+        q = broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \" +\n+            CacheObjectAChild1.class.getSimpleName() + \" a\");\n+        q.setRange(start, end - 1);\n+        CacheTestHelper.assertInCache(this, q, Boolean.FALSE);\n+        c = (Collection) q.execute();\n+        assertEquals(end - start - 1, c.size());\n+        broker.close();\n+    }\n+\n+    public void testResultClassIsCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \" +\n+            CacheObjectAChild1.class.getSimpleName() + \" a\");\n+        q.setResultType(Object.class);\n+        Collection c = (Collection) q.execute();\n+        CacheTestHelper.iterate(c);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+    }\n+}"},{"sha":"d5e254a022018c3755db69defc6b323175830122","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQL2ResultsAndResultClasses.java","status":"modified","additions":472,"deletions":472,"changes":944,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQL2ResultsAndResultClasses.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQL2ResultsAndResultClasses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQL2ResultsAndResultClasses.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,472 +1,472 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import java.util.Collection;\r\n-import java.util.Date;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import javax.persistence.EntityManagerFactory;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild1;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectB;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectWithExternalizedFields;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.kernel.BrokerFactory;\r\n-import org.apache.openjpa.kernel.Query;\r\n-import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-\r\n-public class TestJPQL2ResultsAndResultClasses\r\n-    extends AbstractTestCase {\r\n-\r\n-    public TestJPQL2ResultsAndResultClasses(String test) {\r\n-        super(test, \"datacachecactusapp\");\r\n-    }\r\n-\r\n-    private BrokerFactory _factory;\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(CacheObjectA.class);\r\n-        deleteAll(CacheObjectWithExternalizedFields.class);\r\n-\r\n-        Map propsMap = new HashMap();\r\n-        propsMap.put(\"openjpa.DataCache\", \"true\");\r\n-        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n-        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\r\n-        EntityManagerFactory emf =\r\n-            getEmf(propsMap);\r\n-        _factory = JPAFacadeHelper.toBrokerFactory(emf);\r\n-        Broker broker = _factory.newBroker();\r\n-        try {\r\n-            broker.begin();\r\n-        } catch (Exception e) {\r\n-            System.out.println(\r\n-                \"Exception in TestJPQL2ResultsAndResultClasses setup : \\n\" +\r\n-                    getStackTrace(e));\r\n-        }\r\n-\r\n-        int j = 0;\r\n-        for (int i = 0; i < 10; i++) {\r\n-            // make some common names so that GROUP BY is useful.\r\n-            if (i % 2 == 0)\r\n-                j++;\r\n-            CacheObjectA o;\r\n-            broker.persist(o = new CacheObjectAChild1(\"\", \"results-\" + j, i),\r\n-                null);\r\n-\r\n-            o.setDate(new Date());\r\n-            o.setDateArray(new Date[]{ new Date(10), new Date(20) });\r\n-\r\n-            if (i < 5)\r\n-                o.setRelatedB(new CacheObjectB());\r\n-        }\r\n-\r\n-        //Seetha Oct 30,2006\r\n-        //deleteAll closes the TX.  So use the local\r\n-        //deleteAll fn.\r\n-        //deleteAll(CacheObjectWithExternalizedFields.class,());\r\n-        //deleteAll(broker,CacheObjectWithExternalizedFields.class,true);\r\n-\r\n-        CacheObjectWithExternalizedFields o =\r\n-            new CacheObjectWithExternalizedFields();\r\n-        broker.persist(o, null);\r\n-        o.setCls(Broker.class);\r\n-\r\n-        broker.commit();\r\n-        broker.close();\r\n-\r\n-        CacheTestHelper.cacheManager(_factory).getSystemQueryCache().clear();\r\n-    }\r\n-\r\n-    public void tearDown()\r\n-        throws Exception {\r\n-        _factory.close();\r\n-\r\n-        super.tearDown();\r\n-    }\r\n-\r\n-    public void testAggregateResultIsCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL, \"select max(a.age) FROM \" +\r\n-                CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n-\r\n-        Object o = q.execute();\r\n-        assertEquals(Long.class, o.getClass());\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        o = q.execute();\r\n-        assertEquals(Long.class, o.getClass());\r\n-    }\r\n-\r\n-    public void testAggregateNonUniqueResultIsCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL, \"select max(a.age) FROM \" +\r\n-                CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n-        q.setUnique(false);\r\n-        List res = (List) q.execute();\r\n-        assertEquals(1, res.size());\r\n-        Object o = res.get(0);\r\n-        assertEquals(Long.class, o.getClass());\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        res = (List) q.execute();\r\n-        assertEquals(1, res.size());\r\n-        o = res.get(0);\r\n-        assertEquals(Long.class, o.getClass());\r\n-    }\r\n-\r\n-    public void testProjectionResultIsCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.age FROM \" +\r\n-            CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n-        Collection c = (Collection) q.execute();\r\n-        CacheTestHelper.iterate(c);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        c = (Collection) q.execute();\r\n-        Object o = c.iterator().next();\r\n-        assertEquals(Long.class, o.getClass());\r\n-    }\r\n-\r\n-    public void testProjectionOfThisIsCached() {\r\n-        // ##### need to test single projection\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a FROM \" +\r\n-            CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n-        //CacheObjectAChild1.class, \"select this\");\r\n-        Collection c = (Collection) q.execute();\r\n-        CacheTestHelper.iterate(c);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        c = (Collection) q.execute();\r\n-        Object o = c.iterator().next();\r\n-        assertEquals(CacheObjectAChild1.class, o.getClass());\r\n-        assertNotNull(broker.getObjectId(o));\r\n-    }\r\n-\r\n-    public void testProjectionResultWithThisIsCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.name,a FROM \" +\r\n-                CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n-        Collection c = (Collection) q.execute();\r\n-        CacheTestHelper.iterate(c);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        c = (Collection) q.execute();\r\n-        Object[] result = (Object[]) c.iterator().next();\r\n-        assertEquals(2, result.length);\r\n-        assertEquals(String.class, result[0].getClass());\r\n-        assertEquals(CacheObjectAChild1.class, result[1].getClass());\r\n-        assertNotNull(broker.getObjectId(result[1]));\r\n-    }\r\n-\r\n-    public void testNullProjectionValues() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.locale FROM \" +\r\n-                CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n-        Collection c = (Collection) q.execute();\r\n-        CacheTestHelper.iterate(c);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        c = (Collection) q.execute();\r\n-        assertNull(c.iterator().next());\r\n-    }\r\n-\r\n-    public void testNullAndNotNullProjectionValues() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker\r\n-                .newQuery(JPQLParser.LANG_JPQL, \"select a.name,a.locale FROM \" +\r\n-                    CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n-\r\n-        Collection c = (Collection) q.execute();\r\n-        CacheTestHelper.iterate(c);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        c = (Collection) q.execute();\r\n-        Object[] result = (Object[]) c.iterator().next();\r\n-        assertEquals(2, result.length);\r\n-        assertEquals(String.class, result[0].getClass());\r\n-        assertNull(result[1]);\r\n-    }\r\n-\r\n-    public void XXXtestNullAggregateValues() {\r\n-        // ???\r\n-    }\r\n-\r\n-    public void testMultipleAggregateResultIsCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL,\r\n-                \"select max(a.age), avg(a.age), count(a.age) FROM \" +\r\n-                    CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n-\r\n-        Object o = q.execute();\r\n-        assertEquals(Object[].class, o.getClass());\r\n-        assertEquals(3, ((Object[]) o).length);\r\n-        assertEquals(Long.class, ((Object[]) o)[0].getClass());\r\n-\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        o = q.execute();\r\n-        assertEquals(Object[].class, o.getClass());\r\n-        assertEquals(3, ((Object[]) o).length);\r\n-        assertEquals(Long.class, ((Object[]) o)[0].getClass());\r\n-    }\r\n-\r\n-    public void testFieldUsedTwice() {\r\n-        // Postgres bug\r\n-        Broker broker = _factory.newBroker();\r\n-        // group avoids postgres bug\r\n-        Query q = broker\r\n-            .newQuery(JPQLParser.LANG_JPQL, \"select a.age, avg(a.age) FROM \" +\r\n-                CacheObjectAChild1.class.getSimpleName() +\r\n-                \" a  group by a.age\");\r\n-        Collection c = (Collection) q.execute();\r\n-        CacheTestHelper.iterate(c);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-    }\r\n-\r\n-    public void testAggregateAndProjection() {\r\n-        // Postgres bug\r\n-        Broker broker = _factory.newBroker();\r\n-        // group avoids postgres bug\r\n-        Query q = broker\r\n-            .newQuery(JPQLParser.LANG_JPQL, \"select a.name, avg(a.age) FROM \" +\r\n-                CacheObjectAChild1.class.getSimpleName() +\r\n-                \" a  group by a.name\");\r\n-\r\n-        List l = (List) q.execute();\r\n-        CacheTestHelper.iterate(l);\r\n-        assertEquals(Object[].class, l.get(0).getClass());\r\n-        assertEquals(2, ((Object[]) l.get(0)).length);\r\n-        assertEquals(String.class, ((Object[]) l.get(0))[0].getClass());\r\n-\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        l = (List) q.execute();\r\n-        assertEquals(Object[].class, l.get(0).getClass());\r\n-        assertEquals(2, ((Object[]) l.get(0)).length);\r\n-        assertEquals(String.class, ((Object[]) l.get(0))[0].getClass());\r\n-    }\r\n-\r\n-    //FIXME Seetha Dec 19,2006\r\n-    /*public void testMath() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL,\"select avg(a.age) FROM \"+\r\n-                    CacheObjectAChild1.class.getSimpleName()+\" a\");\r\n-        Number n = (Number) q.execute();\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-        n = (Number) q.execute();\r\n-    }*/\r\n-\r\n-    public void testResultClassIsCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \" +\r\n-            CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n-        q.setResultType(Object.class);\r\n-        Collection c = (Collection) q.execute();\r\n-        CacheTestHelper.iterate(c);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-    }\r\n-\r\n-    public void testGroupingIsCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL, \"select max(a.age) FROM \" +\r\n-                CacheObjectAChild1.class.getSimpleName() +\r\n-                \" a  group by a.name\");\r\n-\r\n-        Collection c = (Collection) q.execute();\r\n-        CacheTestHelper.iterate(c);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        c = (Collection) q.execute();\r\n-        Object o = c.iterator().next();\r\n-        assertEquals(Long.class, o.getClass());\r\n-    }\r\n-\r\n-    public void testAggregateProjectionGroupingIsCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL,\r\n-                \"select a.name, max(a.age) FROM \" +\r\n-                    CacheObjectAChild1.class.getSimpleName() +\r\n-                    \" a  group by a.name\");\r\n-\r\n-        Collection c = (Collection) q.execute();\r\n-        CacheTestHelper.iterate(c);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        c = (Collection) q.execute();\r\n-        Object[] result = (Object[]) c.iterator().next();\r\n-        assertEquals(2, result.length);\r\n-        assertEquals(String.class, result[0].getClass());\r\n-        assertEquals(Long.class, result[1].getClass());\r\n-    }\r\n-\r\n-    public void testUniqueResultsAreCachedAndConsistent() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL, \"select a FROM \" +\r\n-                CacheObjectAChild1.class.getSimpleName() +\r\n-                \" a  where a.age =1\");\r\n-\r\n-        q.setUnique(true);\r\n-        CacheObjectAChild1 a = (CacheObjectAChild1) q.execute();\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        CacheObjectAChild1 a2 = (CacheObjectAChild1) q.execute();\r\n-        assertTrue(a == a2);\r\n-    }\r\n-\r\n-    public void testMutableProjectionFieldsAreCopied() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.date FROM \" +\r\n-            CacheObjectAChild1.class.getSimpleName() + \" a  where a.age=1\");\r\n-\r\n-        q.setUnique(true);\r\n-        Date d0 = (Date) q.execute(); // get it in cache\r\n-        Date d1 = (Date) q.execute();\r\n-        assertNotSame(d0, d1);\r\n-\r\n-        Date d2 = (Date) q.execute();\r\n-        assertNotSame(d1, d2);\r\n-    }\r\n-\r\n-    public void testArrayProjectionFieldsAreNotCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.dateArray FROM \" +\r\n-                CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n-\r\n-        try {\r\n-            q.execute();\r\n-            fail(\"Allowed array projection query.\");\r\n-        } catch (Exception e) {\r\n-        }\r\n-    }\r\n-\r\n-    public void testCollectionProjectionFieldsAreNotCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.stringColl FROM \" +\r\n-                CacheObjectAChild1.class.getSimpleName() + \" a\");\r\n-\r\n-        try {\r\n-            q.execute();\r\n-            fail(\"Allowed array projection query.\");\r\n-        } catch (Exception e) {\r\n-        }\r\n-    }\r\n-\r\n-    public void testExternalizedSingleValueFieldIsNotCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.cls FROM \" +\r\n-            CacheObjectWithExternalizedFields.class.getSimpleName() + \" a\");\r\n-\r\n-        q.setUnique(true);\r\n-        Object o = q.execute(); // get it in cache\r\n-        // ##### assertEquals (Class.class, o);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.FALSE);\r\n-    }\r\n-\r\n-    public void testMutatedQueryReturnsNewResults() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL,\r\n-                \"select a.name, max(a.age) FROM \" +\r\n-                    CacheObjectAChild1.class.getSimpleName() +\r\n-                    \" a group by a.name\");\r\n-\r\n-        List l = (List) q.execute();\r\n-        CacheTestHelper.iterate(l);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        l = (List) q.execute();\r\n-        Object[] result = (Object[]) l.get(0);\r\n-        assertEquals(2, result.length);\r\n-        assertEquals(String.class, result[0].getClass());\r\n-        assertEquals(Long.class, result[1].getClass());\r\n-\r\n-        // now, mutate the query and see what happens\r\n-        q.setQuery(\"select max(a.age),a.name FROM \" +\r\n-            CacheObjectAChild1.class.getSimpleName() + \" a group by a.name\");\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.FALSE);\r\n-        l = (List) q.execute();\r\n-        result = (Object[]) l.get(0);\r\n-        assertEquals(2, result.length);\r\n-        assertEquals(Long.class, result[0].getClass());\r\n-        assertEquals(String.class, result[1].getClass());\r\n-        CacheTestHelper.iterate(l);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        l = (List) q.execute();\r\n-        result = (Object[]) l.get(0);\r\n-        assertEquals(2, result.length);\r\n-        assertEquals(Long.class, result[0].getClass());\r\n-        assertEquals(String.class, result[1].getClass());\r\n-    }\r\n-\r\n-    public void XXXtestExternalizedContainerFieldIsExternalized() {\r\n-    }\r\n-\r\n-    public void XXXtestSerializedSingleValueFieldIsSerialized() {\r\n-    }\r\n-\r\n-    public void XXXtestSerializedContainerFieldIsSerialized() {\r\n-    }\r\n-\r\n-    public void XXXtestCustomMappedSingleValueFieldIsHandled() {\r\n-    }\r\n-\r\n-    public void XXXtestCustomMappedContainerFieldIsHandled() {\r\n-    }\r\n-\r\n-    private static int deleteAll(Broker broker, Class clazz,\r\n-        boolean subclasses) {\r\n-        final boolean useDeleteByQuery = false;\r\n-\r\n-        if (useDeleteByQuery) {\r\n-            org.apache.openjpa.kernel.Query query =\r\n-                broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \" +\r\n-                    clazz.getSimpleName() + \" a\");\r\n-            query.setCandidateType(clazz, subclasses);\r\n-            return (int) query.deleteAll();\r\n-        } else {\r\n-            org.apache.openjpa.kernel.Extent extent =\r\n-                broker.newExtent(clazz, subclasses);\r\n-            List list = extent.list();\r\n-            int size = list.size();\r\n-            broker.deleteAll(list, null);\r\n-            return size;\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.persistence.EntityManagerFactory;\n+\n+\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA;\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild1;\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectB;\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectWithExternalizedFields;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.kernel.BrokerFactory;\n+import org.apache.openjpa.kernel.Query;\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+\n+public class TestJPQL2ResultsAndResultClasses\n+    extends AbstractTestCase {\n+\n+    public TestJPQL2ResultsAndResultClasses(String test) {\n+        super(test, \"datacachecactusapp\");\n+    }\n+\n+    private BrokerFactory _factory;\n+\n+    public void setUp() {\n+        deleteAll(CacheObjectA.class);\n+        deleteAll(CacheObjectWithExternalizedFields.class);\n+\n+        Map propsMap = new HashMap();\n+        propsMap.put(\"openjpa.DataCache\", \"true\");\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n+        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\n+        EntityManagerFactory emf =\n+            getEmf(propsMap);\n+        _factory = JPAFacadeHelper.toBrokerFactory(emf);\n+        Broker broker = _factory.newBroker();\n+        try {\n+            broker.begin();\n+        } catch (Exception e) {\n+            System.out.println(\n+                \"Exception in TestJPQL2ResultsAndResultClasses setup : \\n\" +\n+                    getStackTrace(e));\n+        }\n+\n+        int j = 0;\n+        for (int i = 0; i < 10; i++) {\n+            // make some common names so that GROUP BY is useful.\n+            if (i % 2 == 0)\n+                j++;\n+            CacheObjectA o;\n+            broker.persist(o = new CacheObjectAChild1(\"\", \"results-\" + j, i),\n+                null);\n+\n+            o.setDate(new Date());\n+            o.setDateArray(new Date[]{ new Date(10), new Date(20) });\n+\n+            if (i < 5)\n+                o.setRelatedB(new CacheObjectB());\n+        }\n+\n+        //Seetha Oct 30,2006\n+        //deleteAll closes the TX.  So use the local\n+        //deleteAll fn.\n+        //deleteAll(CacheObjectWithExternalizedFields.class,());\n+        //deleteAll(broker,CacheObjectWithExternalizedFields.class,true);\n+\n+        CacheObjectWithExternalizedFields o =\n+            new CacheObjectWithExternalizedFields();\n+        broker.persist(o, null);\n+        o.setCls(Broker.class);\n+\n+        broker.commit();\n+        broker.close();\n+\n+        CacheTestHelper.cacheManager(_factory).getSystemQueryCache().clear();\n+    }\n+\n+    public void tearDown()\n+        throws Exception {\n+        _factory.close();\n+\n+        super.tearDown();\n+    }\n+\n+    public void testAggregateResultIsCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select max(a.age) FROM \" +\n+                CacheObjectAChild1.class.getSimpleName() + \" a\");\n+\n+        Object o = q.execute();\n+        assertEquals(Long.class, o.getClass());\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        o = q.execute();\n+        assertEquals(Long.class, o.getClass());\n+    }\n+\n+    public void testAggregateNonUniqueResultIsCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select max(a.age) FROM \" +\n+                CacheObjectAChild1.class.getSimpleName() + \" a\");\n+        q.setUnique(false);\n+        List res = (List) q.execute();\n+        assertEquals(1, res.size());\n+        Object o = res.get(0);\n+        assertEquals(Long.class, o.getClass());\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        res = (List) q.execute();\n+        assertEquals(1, res.size());\n+        o = res.get(0);\n+        assertEquals(Long.class, o.getClass());\n+    }\n+\n+    public void testProjectionResultIsCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.age FROM \" +\n+            CacheObjectAChild1.class.getSimpleName() + \" a\");\n+        Collection c = (Collection) q.execute();\n+        CacheTestHelper.iterate(c);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        c = (Collection) q.execute();\n+        Object o = c.iterator().next();\n+        assertEquals(Long.class, o.getClass());\n+    }\n+\n+    public void testProjectionOfThisIsCached() {\n+        // ##### need to test single projection\n+        Broker broker = _factory.newBroker();\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a FROM \" +\n+            CacheObjectAChild1.class.getSimpleName() + \" a\");\n+        //CacheObjectAChild1.class, \"select this\");\n+        Collection c = (Collection) q.execute();\n+        CacheTestHelper.iterate(c);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        c = (Collection) q.execute();\n+        Object o = c.iterator().next();\n+        assertEquals(CacheObjectAChild1.class, o.getClass());\n+        assertNotNull(broker.getObjectId(o));\n+    }\n+\n+    public void testProjectionResultWithThisIsCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.name,a FROM \" +\n+                CacheObjectAChild1.class.getSimpleName() + \" a\");\n+        Collection c = (Collection) q.execute();\n+        CacheTestHelper.iterate(c);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        c = (Collection) q.execute();\n+        Object[] result = (Object[]) c.iterator().next();\n+        assertEquals(2, result.length);\n+        assertEquals(String.class, result[0].getClass());\n+        assertEquals(CacheObjectAChild1.class, result[1].getClass());\n+        assertNotNull(broker.getObjectId(result[1]));\n+    }\n+\n+    public void testNullProjectionValues() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.locale FROM \" +\n+                CacheObjectAChild1.class.getSimpleName() + \" a\");\n+        Collection c = (Collection) q.execute();\n+        CacheTestHelper.iterate(c);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        c = (Collection) q.execute();\n+        assertNull(c.iterator().next());\n+    }\n+\n+    public void testNullAndNotNullProjectionValues() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker\n+                .newQuery(JPQLParser.LANG_JPQL, \"select a.name,a.locale FROM \" +\n+                    CacheObjectAChild1.class.getSimpleName() + \" a\");\n+\n+        Collection c = (Collection) q.execute();\n+        CacheTestHelper.iterate(c);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        c = (Collection) q.execute();\n+        Object[] result = (Object[]) c.iterator().next();\n+        assertEquals(2, result.length);\n+        assertEquals(String.class, result[0].getClass());\n+        assertNull(result[1]);\n+    }\n+\n+    public void XXXtestNullAggregateValues() {\n+        // ???\n+    }\n+\n+    public void testMultipleAggregateResultIsCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL,\n+                \"select max(a.age), avg(a.age), count(a.age) FROM \" +\n+                    CacheObjectAChild1.class.getSimpleName() + \" a\");\n+\n+        Object o = q.execute();\n+        assertEquals(Object[].class, o.getClass());\n+        assertEquals(3, ((Object[]) o).length);\n+        assertEquals(Long.class, ((Object[]) o)[0].getClass());\n+\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        o = q.execute();\n+        assertEquals(Object[].class, o.getClass());\n+        assertEquals(3, ((Object[]) o).length);\n+        assertEquals(Long.class, ((Object[]) o)[0].getClass());\n+    }\n+\n+    public void testFieldUsedTwice() {\n+        // Postgres bug\n+        Broker broker = _factory.newBroker();\n+        // group avoids postgres bug\n+        Query q = broker\n+            .newQuery(JPQLParser.LANG_JPQL, \"select a.age, avg(a.age) FROM \" +\n+                CacheObjectAChild1.class.getSimpleName() +\n+                \" a  group by a.age\");\n+        Collection c = (Collection) q.execute();\n+        CacheTestHelper.iterate(c);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+    }\n+\n+    public void testAggregateAndProjection() {\n+        // Postgres bug\n+        Broker broker = _factory.newBroker();\n+        // group avoids postgres bug\n+        Query q = broker\n+            .newQuery(JPQLParser.LANG_JPQL, \"select a.name, avg(a.age) FROM \" +\n+                CacheObjectAChild1.class.getSimpleName() +\n+                \" a  group by a.name\");\n+\n+        List l = (List) q.execute();\n+        CacheTestHelper.iterate(l);\n+        assertEquals(Object[].class, l.get(0).getClass());\n+        assertEquals(2, ((Object[]) l.get(0)).length);\n+        assertEquals(String.class, ((Object[]) l.get(0))[0].getClass());\n+\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        l = (List) q.execute();\n+        assertEquals(Object[].class, l.get(0).getClass());\n+        assertEquals(2, ((Object[]) l.get(0)).length);\n+        assertEquals(String.class, ((Object[]) l.get(0))[0].getClass());\n+    }\n+\n+    //FIXME Seetha Dec 19,2006\n+    /*public void testMath() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL,\"select avg(a.age) FROM \"+\n+                    CacheObjectAChild1.class.getSimpleName()+\" a\");\n+        Number n = (Number) q.execute();\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+        n = (Number) q.execute();\n+    }*/\n+\n+    public void testResultClassIsCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \" +\n+            CacheObjectAChild1.class.getSimpleName() + \" a\");\n+        q.setResultType(Object.class);\n+        Collection c = (Collection) q.execute();\n+        CacheTestHelper.iterate(c);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+    }\n+\n+    public void testGroupingIsCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select max(a.age) FROM \" +\n+                CacheObjectAChild1.class.getSimpleName() +\n+                \" a  group by a.name\");\n+\n+        Collection c = (Collection) q.execute();\n+        CacheTestHelper.iterate(c);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        c = (Collection) q.execute();\n+        Object o = c.iterator().next();\n+        assertEquals(Long.class, o.getClass());\n+    }\n+\n+    public void testAggregateProjectionGroupingIsCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL,\n+                \"select a.name, max(a.age) FROM \" +\n+                    CacheObjectAChild1.class.getSimpleName() +\n+                    \" a  group by a.name\");\n+\n+        Collection c = (Collection) q.execute();\n+        CacheTestHelper.iterate(c);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        c = (Collection) q.execute();\n+        Object[] result = (Object[]) c.iterator().next();\n+        assertEquals(2, result.length);\n+        assertEquals(String.class, result[0].getClass());\n+        assertEquals(Long.class, result[1].getClass());\n+    }\n+\n+    public void testUniqueResultsAreCachedAndConsistent() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select a FROM \" +\n+                CacheObjectAChild1.class.getSimpleName() +\n+                \" a  where a.age =1\");\n+\n+        q.setUnique(true);\n+        CacheObjectAChild1 a = (CacheObjectAChild1) q.execute();\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        CacheObjectAChild1 a2 = (CacheObjectAChild1) q.execute();\n+        assertTrue(a == a2);\n+    }\n+\n+    public void testMutableProjectionFieldsAreCopied() {\n+        Broker broker = _factory.newBroker();\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.date FROM \" +\n+            CacheObjectAChild1.class.getSimpleName() + \" a  where a.age=1\");\n+\n+        q.setUnique(true);\n+        Date d0 = (Date) q.execute(); // get it in cache\n+        Date d1 = (Date) q.execute();\n+        assertNotSame(d0, d1);\n+\n+        Date d2 = (Date) q.execute();\n+        assertNotSame(d1, d2);\n+    }\n+\n+    public void testArrayProjectionFieldsAreNotCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.dateArray FROM \" +\n+                CacheObjectAChild1.class.getSimpleName() + \" a\");\n+\n+        try {\n+            q.execute();\n+            fail(\"Allowed array projection query.\");\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    public void testCollectionProjectionFieldsAreNotCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.stringColl FROM \" +\n+                CacheObjectAChild1.class.getSimpleName() + \" a\");\n+\n+        try {\n+            q.execute();\n+            fail(\"Allowed array projection query.\");\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    public void testExternalizedSingleValueFieldIsNotCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.cls FROM \" +\n+            CacheObjectWithExternalizedFields.class.getSimpleName() + \" a\");\n+\n+        q.setUnique(true);\n+        Object o = q.execute(); // get it in cache\n+        // ##### assertEquals (Class.class, o);\n+        CacheTestHelper.assertInCache(this, q, Boolean.FALSE);\n+    }\n+\n+    public void testMutatedQueryReturnsNewResults() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL,\n+                \"select a.name, max(a.age) FROM \" +\n+                    CacheObjectAChild1.class.getSimpleName() +\n+                    \" a group by a.name\");\n+\n+        List l = (List) q.execute();\n+        CacheTestHelper.iterate(l);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        l = (List) q.execute();\n+        Object[] result = (Object[]) l.get(0);\n+        assertEquals(2, result.length);\n+        assertEquals(String.class, result[0].getClass());\n+        assertEquals(Long.class, result[1].getClass());\n+\n+        // now, mutate the query and see what happens\n+        q.setQuery(\"select max(a.age),a.name FROM \" +\n+            CacheObjectAChild1.class.getSimpleName() + \" a group by a.name\");\n+        CacheTestHelper.assertInCache(this, q, Boolean.FALSE);\n+        l = (List) q.execute();\n+        result = (Object[]) l.get(0);\n+        assertEquals(2, result.length);\n+        assertEquals(Long.class, result[0].getClass());\n+        assertEquals(String.class, result[1].getClass());\n+        CacheTestHelper.iterate(l);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        l = (List) q.execute();\n+        result = (Object[]) l.get(0);\n+        assertEquals(2, result.length);\n+        assertEquals(Long.class, result[0].getClass());\n+        assertEquals(String.class, result[1].getClass());\n+    }\n+\n+    public void XXXtestExternalizedContainerFieldIsExternalized() {\n+    }\n+\n+    public void XXXtestSerializedSingleValueFieldIsSerialized() {\n+    }\n+\n+    public void XXXtestSerializedContainerFieldIsSerialized() {\n+    }\n+\n+    public void XXXtestCustomMappedSingleValueFieldIsHandled() {\n+    }\n+\n+    public void XXXtestCustomMappedContainerFieldIsHandled() {\n+    }\n+\n+    private static int deleteAll(Broker broker, Class clazz,\n+        boolean subclasses) {\n+        final boolean useDeleteByQuery = false;\n+\n+        if (useDeleteByQuery) {\n+            org.apache.openjpa.kernel.Query query =\n+                broker.newQuery(JPQLParser.LANG_JPQL, \"Select a FROM \" +\n+                    clazz.getSimpleName() + \" a\");\n+            query.setCandidateType(clazz, subclasses);\n+            return (int) query.deleteAll();\n+        } else {\n+            org.apache.openjpa.kernel.Extent extent =\n+                broker.newExtent(clazz, subclasses);\n+            List list = extent.list();\n+            int size = list.size();\n+            broker.deleteAll(list, null);\n+            return size;\n+        }\n+    }\n+}"},{"sha":"65eb511b042211eb69e1798a10173a42f2055364","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQLRelationProjections.java","status":"modified","additions":219,"deletions":219,"changes":438,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQLRelationProjections.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQLRelationProjections.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestJPQLRelationProjections.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,219 +1,219 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import java.util.Collection;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import javax.persistence.EntityManagerFactory;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild1;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectE;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectJ;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.SelfReferencingCacheTestObject;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.kernel.BrokerFactory;\r\n-import org.apache.openjpa.kernel.Query;\r\n-import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-import org.apache.openjpa.util.UserException;\r\n-\r\n-public class TestJPQLRelationProjections\r\n-    extends AbstractTestCase {\r\n-\r\n-    public TestJPQLRelationProjections(String test) {\r\n-        super(test, \"datacachecactusapp\");\r\n-    }\r\n-\r\n-    private BrokerFactory _factory;\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(CacheObjectJ.class);\r\n-        deleteAll(CacheObjectE.class);\r\n-        deleteAll(SelfReferencingCacheTestObject.class);\r\n-\r\n-        Map propsMap = new HashMap();\r\n-        propsMap.put(\"openjpa.DataCache\", \"true\");\r\n-        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n-        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\r\n-\r\n-        EntityManagerFactory emf = getEmf(propsMap);\r\n-        _factory = JPAFacadeHelper.toBrokerFactory(emf);\r\n-        Broker broker = _factory.newBroker();\r\n-        try {\r\n-            broker.begin();\r\n-        } catch (Exception e) {\r\n-            fail(\"Set up failed due to exception : \\n\" +\r\n-                getStackTrace(e));\r\n-        }\r\n-        int j = 0;\r\n-        for (int i = 0; i < 6; i++) {\r\n-            CacheObjectE e;\r\n-            if (i < 3)\r\n-                e = new CacheObjectE(i + \"\");\r\n-            else\r\n-                e = null;\r\n-\r\n-            // make some common names so that GROUP BY is useful.\r\n-            if (i % 2 == 0)\r\n-                j++;\r\n-            broker.persist(new CacheObjectJ(\"projections-\" + j, e), null);\r\n-        }\r\n-\r\n-        broker.persist(new SelfReferencingCacheTestObject(\"foo\",\r\n-            new SelfReferencingCacheTestObject(\"bar\", null)), null);\r\n-\r\n-        broker.commit();\r\n-        broker.close();\r\n-\r\n-        CacheTestHelper.cacheManager(_factory).getSystemQueryCache().clear();\r\n-    }\r\n-\r\n-    public void tearDown()\r\n-        throws Exception {\r\n-        _factory.close();\r\n-\r\n-        super.tearDown();\r\n-    }\r\n-\r\n-    public void testNullRelatedPCIsCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.e FROM \" +\r\n-            CacheObjectJ.class.getSimpleName() + \" a where a.e is null\");\r\n-\r\n-        Collection c = (Collection) q.execute();\r\n-        CacheTestHelper.iterate(c);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        c = (Collection) q.execute();\r\n-        assertNull(c.iterator().next());\r\n-    }\r\n-\r\n-    public void testNullRelatedPCAndProjectionIsCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.str,a.e FROM \" +\r\n-                CacheObjectJ.class.getSimpleName() + \" a where a.e is null\");\r\n-\r\n-        Collection c = (Collection) q.execute();\r\n-        CacheTestHelper.iterate(c);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        c = (Collection) q.execute();\r\n-        Object[] result = (Object[]) c.iterator().next();\r\n-        assertEquals(2, result.length);\r\n-        assertEquals(String.class, result[0].getClass());\r\n-        assertNull(result[1]);\r\n-    }\r\n-\r\n-    public void testNonNullRelatedPCIsCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.e FROM \" +\r\n-            CacheObjectJ.class.getSimpleName() + \" a where a.e  is not null\");\r\n-\r\n-        Collection c = (Collection) q.execute();\r\n-        CacheTestHelper.iterate(c);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        c = (Collection) q.execute();\r\n-        assertEquals(CacheObjectE.class, c.iterator().next().getClass());\r\n-    }\r\n-\r\n-    public void testNonNullRelatedPCAndProjectionIsCached() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.str,a.e FROM \" +\r\n-                CacheObjectJ.class.getSimpleName() +\r\n-                \" a where a.e is not null\");\r\n-\r\n-        Collection c = (Collection) q.execute();\r\n-        CacheTestHelper.iterate(c);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        c = (Collection) q.execute();\r\n-        Object[] result = (Object[]) c.iterator().next();\r\n-        assertEquals(2, result.length);\r\n-        assertEquals(String.class, result[0].getClass());\r\n-        assertEquals(CacheObjectE.class, result[1].getClass());\r\n-    }\r\n-\r\n-    public void testEmbeddedFields() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL, \"select embedded FROM \" +\r\n-                SelfReferencingCacheTestObject.class.getSimpleName() +\r\n-                \" a where a.str='foo'\");\r\n-\r\n-        List l = null;\r\n-        try {\r\n-            l = (List) q.execute();\r\n-            assertEquals(CacheObjectAChild1.class, l.get(0).getClass());\r\n-        } catch (UserException ue) {\r\n-            //bug(1150, \"embedded-field projections cause exception\");\r\n-            ue.printStackTrace();\r\n-            return;\r\n-        }\r\n-\r\n-        CacheTestHelper.iterate(l);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        l = (List) q.execute();\r\n-        assertEquals(CacheObjectAChild1.class, l.get(0).getClass());\r\n-    }\r\n-\r\n-    public void testNonNullRelationOfSameTypeAsCandidate() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.o FROM \" +\r\n-            SelfReferencingCacheTestObject.class.getSimpleName() +\r\n-            \" a where a.o IS NOT NULL\");\r\n-\r\n-        List l = (List) q.execute();\r\n-        assertEquals(SelfReferencingCacheTestObject.class,\r\n-            l.get(0).getClass());\r\n-        assertEquals(\"bar\",\r\n-            ((SelfReferencingCacheTestObject) l.get(0)).getStr());\r\n-        CacheTestHelper.iterate(l);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        l = (List) q.execute();\r\n-        assertEquals(SelfReferencingCacheTestObject.class,\r\n-            l.get(0).getClass());\r\n-        assertEquals(\"bar\",\r\n-            ((SelfReferencingCacheTestObject) l.get(0)).getStr());\r\n-    }\r\n-\r\n-    public void testNullRelationOfSameTypeAsCandidate() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.o FROM \" +\r\n-            SelfReferencingCacheTestObject.class.getSimpleName() +\r\n-            \" a where a.o IS NULL\");\r\n-\r\n-        List l = (List) q.execute();\r\n-        assertNull(l.get(0));\r\n-        CacheTestHelper.iterate(l);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\r\n-\r\n-        l = (List) q.execute();\r\n-        assertNull(l.get(0));\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.persistence.EntityManagerFactory;\n+\n+\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild1;\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectE;\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectJ;\n+import org.apache.openjpa.persistence.datacache.common.apps.SelfReferencingCacheTestObject;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.kernel.BrokerFactory;\n+import org.apache.openjpa.kernel.Query;\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.util.UserException;\n+\n+public class TestJPQLRelationProjections\n+    extends AbstractTestCase {\n+\n+    public TestJPQLRelationProjections(String test) {\n+        super(test, \"datacachecactusapp\");\n+    }\n+\n+    private BrokerFactory _factory;\n+\n+    public void setUp() {\n+        deleteAll(CacheObjectJ.class);\n+        deleteAll(CacheObjectE.class);\n+        deleteAll(SelfReferencingCacheTestObject.class);\n+\n+        Map propsMap = new HashMap();\n+        propsMap.put(\"openjpa.DataCache\", \"true\");\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n+        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\n+\n+        EntityManagerFactory emf = getEmf(propsMap);\n+        _factory = JPAFacadeHelper.toBrokerFactory(emf);\n+        Broker broker = _factory.newBroker();\n+        try {\n+            broker.begin();\n+        } catch (Exception e) {\n+            fail(\"Set up failed due to exception : \\n\" +\n+                getStackTrace(e));\n+        }\n+        int j = 0;\n+        for (int i = 0; i < 6; i++) {\n+            CacheObjectE e;\n+            if (i < 3)\n+                e = new CacheObjectE(i + \"\");\n+            else\n+                e = null;\n+\n+            // make some common names so that GROUP BY is useful.\n+            if (i % 2 == 0)\n+                j++;\n+            broker.persist(new CacheObjectJ(\"projections-\" + j, e), null);\n+        }\n+\n+        broker.persist(new SelfReferencingCacheTestObject(\"foo\",\n+            new SelfReferencingCacheTestObject(\"bar\", null)), null);\n+\n+        broker.commit();\n+        broker.close();\n+\n+        CacheTestHelper.cacheManager(_factory).getSystemQueryCache().clear();\n+    }\n+\n+    public void tearDown()\n+        throws Exception {\n+        _factory.close();\n+\n+        super.tearDown();\n+    }\n+\n+    public void testNullRelatedPCIsCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.e FROM \" +\n+            CacheObjectJ.class.getSimpleName() + \" a where a.e is null\");\n+\n+        Collection c = (Collection) q.execute();\n+        CacheTestHelper.iterate(c);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        c = (Collection) q.execute();\n+        assertNull(c.iterator().next());\n+    }\n+\n+    public void testNullRelatedPCAndProjectionIsCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.str,a.e FROM \" +\n+                CacheObjectJ.class.getSimpleName() + \" a where a.e is null\");\n+\n+        Collection c = (Collection) q.execute();\n+        CacheTestHelper.iterate(c);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        c = (Collection) q.execute();\n+        Object[] result = (Object[]) c.iterator().next();\n+        assertEquals(2, result.length);\n+        assertEquals(String.class, result[0].getClass());\n+        assertNull(result[1]);\n+    }\n+\n+    public void testNonNullRelatedPCIsCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.e FROM \" +\n+            CacheObjectJ.class.getSimpleName() + \" a where a.e  is not null\");\n+\n+        Collection c = (Collection) q.execute();\n+        CacheTestHelper.iterate(c);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        c = (Collection) q.execute();\n+        assertEquals(CacheObjectE.class, c.iterator().next().getClass());\n+    }\n+\n+    public void testNonNullRelatedPCAndProjectionIsCached() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.str,a.e FROM \" +\n+                CacheObjectJ.class.getSimpleName() +\n+                \" a where a.e is not null\");\n+\n+        Collection c = (Collection) q.execute();\n+        CacheTestHelper.iterate(c);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        c = (Collection) q.execute();\n+        Object[] result = (Object[]) c.iterator().next();\n+        assertEquals(2, result.length);\n+        assertEquals(String.class, result[0].getClass());\n+        assertEquals(CacheObjectE.class, result[1].getClass());\n+    }\n+\n+    public void testEmbeddedFields() {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select embedded FROM \" +\n+                SelfReferencingCacheTestObject.class.getSimpleName() +\n+                \" a where a.str='foo'\");\n+\n+        List l = null;\n+        try {\n+            l = (List) q.execute();\n+            assertEquals(CacheObjectAChild1.class, l.get(0).getClass());\n+        } catch (UserException ue) {\n+            //bug(1150, \"embedded-field projections cause exception\");\n+            ue.printStackTrace();\n+            return;\n+        }\n+\n+        CacheTestHelper.iterate(l);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        l = (List) q.execute();\n+        assertEquals(CacheObjectAChild1.class, l.get(0).getClass());\n+    }\n+\n+    public void testNonNullRelationOfSameTypeAsCandidate() {\n+        Broker broker = _factory.newBroker();\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.o FROM \" +\n+            SelfReferencingCacheTestObject.class.getSimpleName() +\n+            \" a where a.o IS NOT NULL\");\n+\n+        List l = (List) q.execute();\n+        assertEquals(SelfReferencingCacheTestObject.class,\n+            l.get(0).getClass());\n+        assertEquals(\"bar\",\n+            ((SelfReferencingCacheTestObject) l.get(0)).getStr());\n+        CacheTestHelper.iterate(l);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        l = (List) q.execute();\n+        assertEquals(SelfReferencingCacheTestObject.class,\n+            l.get(0).getClass());\n+        assertEquals(\"bar\",\n+            ((SelfReferencingCacheTestObject) l.get(0)).getStr());\n+    }\n+\n+    public void testNullRelationOfSameTypeAsCandidate() {\n+        Broker broker = _factory.newBroker();\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a.o FROM \" +\n+            SelfReferencingCacheTestObject.class.getSimpleName() +\n+            \" a where a.o IS NULL\");\n+\n+        List l = (List) q.execute();\n+        assertNull(l.get(0));\n+        CacheTestHelper.iterate(l);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE);\n+\n+        l = (List) q.execute();\n+        assertNull(l.get(0));\n+    }\n+}"},{"sha":"660f726002cc0885081b571b99e0d0fab1f01177","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestLocalCache.java","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestLocalCache.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestLocalCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestLocalCache.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,48 +1,48 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-/**\r\n- * Test the local cache. Tests only a single PMF.\r\n- */\r\n-public class TestLocalCache\r\n-    extends CacheTest {\r\n-\r\n-    public TestLocalCache(String test) {\r\n-        super(test);\r\n-    }\r\n-\r\n-    protected String[] getConfs() {\r\n-        return new String[]{\r\n-            \"openjpa.DataCache\", \"true\",\r\n-            \"openjpa.QueryCache\", \"true\",\r\n-            \"openjpa.RemoteCommitProvider\", \"sjvm\",\r\n-            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\r\n-        };\r\n-    }\r\n-\r\n-    protected String[] getConfs2() {\r\n-        return new String[]{\r\n-            \"openjpa.DataCache\", \"true\",\r\n-            \"openjpa.QueryCache\", \"true\",\r\n-            \"openjpa.RemoteCommitProvider\", \"sjvm\",\r\n-            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\r\n-        };\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+/**\n+ * Test the local cache. Tests only a single PMF.\n+ */\n+public class TestLocalCache\n+    extends CacheTest {\n+\n+    public TestLocalCache(String test) {\n+        super(test);\n+    }\n+\n+    protected String[] getConfs() {\n+        return new String[]{\n+            \"openjpa.DataCache\", \"true\",\n+            \"openjpa.QueryCache\", \"true\",\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\",\n+            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\n+        };\n+    }\n+\n+    protected String[] getConfs2() {\n+        return new String[]{\n+            \"openjpa.DataCache\", \"true\",\n+            \"openjpa.QueryCache\", \"true\",\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\",\n+            \"openjpa.BrokerImpl\", CacheTestBroker.class.getName(),\n+        };\n+    }\n+}"},{"sha":"20ce60eeba563bf990fda171e4e03cfdee0d2799","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestMutableParameters.java","status":"modified","additions":172,"deletions":172,"changes":344,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestMutableParameters.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestMutableParameters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestMutableParameters.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,172 +1,172 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import java.util.Collection;\r\n-import java.util.Date;\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-import javax.persistence.EntityManagerFactory;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild1;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.kernel.BrokerFactory;\r\n-import org.apache.openjpa.kernel.Query;\r\n-import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-\r\n-public class TestMutableParameters\r\n-    extends AbstractTestCase {\r\n-\r\n-    public TestMutableParameters(String test) {\r\n-        super(test, \"datacachecactusapp\");\r\n-    }\r\n-\r\n-    private BrokerFactory _factory;\r\n-    private Date _startDate;\r\n-\r\n-    public void setUp()\r\n-        throws Exception {\r\n-        deleteAll(CacheObjectA.class);\r\n-        Map propsMap = new HashMap();\r\n-        propsMap.put(\"openjpa.DataCache\", \"true\");\r\n-        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n-        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\r\n-\r\n-        EntityManagerFactory emf = getEmf(propsMap);\r\n-        _factory = JPAFacadeHelper.toBrokerFactory(emf);\r\n-\r\n-        // create a very early date so that when we mutate it, we\r\n-        // won't need to worry about precision issues.\r\n-        _startDate = new java.text.SimpleDateFormat(\"dd/MM/yyyy\").\r\n-            parse(\"01/01/1990\");\r\n-        Broker broker = _factory.newBroker();\r\n-        broker.begin();\r\n-        for (int i = 0; i < 50; i++) {\r\n-            CacheObjectAChild1 o = new CacheObjectAChild1\r\n-                (\"\", \"JPQL2Queries\", i);\r\n-            o.setDate(_startDate);\r\n-            broker.persist(o, null);\r\n-        }\r\n-        broker.commit();\r\n-        broker.close();\r\n-\r\n-        CacheTestHelper.cacheManager(_factory).getSystemQueryCache().clear();\r\n-    }\r\n-\r\n-    public void tearDown()\r\n-        throws Exception {\r\n-        try {\r\n-            _factory.close();\r\n-        } catch (Exception e) {\r\n-        }\r\n-\r\n-        super.tearDown();\r\n-    }\r\n-\r\n-    public void testMutatedDateParameter() {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q = broker.newQuery(JPQLParser.LANG_JPQL,\r\n-            \"select a from \" +\r\n-                CacheObjectAChild1.class.getSimpleName() +\r\n-                \" a where a.date < :p_date\");\r\n-        Date d = new Date();\r\n-        Collection c = (Collection) q.execute(new Object[]{ d });\r\n-        CacheTestHelper.iterate(c);\r\n-        int initialSize = c.size();\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE,\r\n-            new Object[]{ d });\r\n-        d.setTime(_startDate.getTime());\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.FALSE,\r\n-            new Object[]{ d });\r\n-        c = (Collection) q.execute(new Object[]{ d });\r\n-\r\n-        assertFalse(new Integer(initialSize).equals(new Integer(c.size())));\r\n-    }\r\n-\r\n-    //FIXME Seetha Nov 10,2006\r\n-    //need to find the JPQL query for :p_age contains\r\n-    /*\r\n-    public void testMutatedSetParameter() {\r\n-        mutatedCollectionParameterHelper(true);\r\n-    }\r\n-\r\n-    public void testMutatedListParameter() {\r\n-        mutatedCollectionParameterHelper(false);\r\n-    }\r\n-\r\n-    public void mutatedCollectionParameterHelper(boolean set) {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL,\r\n-                    \"select a from \"+\r\n-                    CacheObjectAChild1.class.getSimpleName()+ \"a :p_ages.contains (age)\");\r\n-        Collection c_param;\r\n-        if (set)\r\n-            c_param = new HashSet();\r\n-        else\r\n-            c_param = new LinkedList();\r\n-        c_param.add(new Long(0));\r\n-        c_param.add(new Long(1));\r\n-        Collection c = (Collection) q.execute(new Object[]{ c_param });\r\n-        CacheTestHelper.iterate(c);\r\n-        int initialSize = c.size();\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE,\r\n-            new Object[]{ c_param });\r\n-        c_param.add(new Long(2));\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.FALSE,\r\n-            new Object[]{ c_param });\r\n-        c = (Collection) q.execute(new Object[]{ c_param });\r\n-        assertFalse(new Integer(initialSize).equals(new Integer(c.size())));\r\n-    }\r\n-\r\n-    public void testMutatedSetParameterDates() {\r\n-        mutatedCollectionParameterDatesHelper(true);\r\n-    }\r\n-\r\n-    public void testMutatedListParameterDates() {\r\n-        mutatedCollectionParameterDatesHelper(false);\r\n-    }\r\n-\r\n-    public void mutatedCollectionParameterDatesHelper(boolean set) {\r\n-        Broker broker = _factory.newBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL, CacheObjectAChild1.class,\r\n-                \":p_dates.contains (date)\");\r\n-        Collection c_param;\r\n-        if (set)\r\n-            c_param = new HashSet();\r\n-        else\r\n-            c_param = new LinkedList();\r\n-        c_param.add(new Date());\r\n-        c_param.add(new Date(System.currentTimeMillis() - 1000));\r\n-        Collection c = (Collection) q.execute(new Object[]{ c_param });\r\n-        CacheTestHelper.iterate(c);\r\n-        int initialSize = c.size();\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE,\r\n-            new Object[]{ c_param });\r\n-        c_param.add(new Date(System.currentTimeMillis() - 500));\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.FALSE,\r\n-            new Object[]{ c_param });\r\n-    }*/\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.persistence.EntityManagerFactory;\n+\n+\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA;\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild1;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.kernel.BrokerFactory;\n+import org.apache.openjpa.kernel.Query;\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+\n+public class TestMutableParameters\n+    extends AbstractTestCase {\n+\n+    public TestMutableParameters(String test) {\n+        super(test, \"datacachecactusapp\");\n+    }\n+\n+    private BrokerFactory _factory;\n+    private Date _startDate;\n+\n+    public void setUp()\n+        throws Exception {\n+        deleteAll(CacheObjectA.class);\n+        Map propsMap = new HashMap();\n+        propsMap.put(\"openjpa.DataCache\", \"true\");\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n+        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\n+\n+        EntityManagerFactory emf = getEmf(propsMap);\n+        _factory = JPAFacadeHelper.toBrokerFactory(emf);\n+\n+        // create a very early date so that when we mutate it, we\n+        // won't need to worry about precision issues.\n+        _startDate = new java.text.SimpleDateFormat(\"dd/MM/yyyy\").\n+            parse(\"01/01/1990\");\n+        Broker broker = _factory.newBroker();\n+        broker.begin();\n+        for (int i = 0; i < 50; i++) {\n+            CacheObjectAChild1 o = new CacheObjectAChild1\n+                (\"\", \"JPQL2Queries\", i);\n+            o.setDate(_startDate);\n+            broker.persist(o, null);\n+        }\n+        broker.commit();\n+        broker.close();\n+\n+        CacheTestHelper.cacheManager(_factory).getSystemQueryCache().clear();\n+    }\n+\n+    public void tearDown()\n+        throws Exception {\n+        try {\n+            _factory.close();\n+        } catch (Exception e) {\n+        }\n+\n+        super.tearDown();\n+    }\n+\n+    public void testMutatedDateParameter() {\n+        Broker broker = _factory.newBroker();\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL,\n+            \"select a from \" +\n+                CacheObjectAChild1.class.getSimpleName() +\n+                \" a where a.date < :p_date\");\n+        Date d = new Date();\n+        Collection c = (Collection) q.execute(new Object[]{ d });\n+        CacheTestHelper.iterate(c);\n+        int initialSize = c.size();\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE,\n+            new Object[]{ d });\n+        d.setTime(_startDate.getTime());\n+        CacheTestHelper.assertInCache(this, q, Boolean.FALSE,\n+            new Object[]{ d });\n+        c = (Collection) q.execute(new Object[]{ d });\n+\n+        assertFalse(new Integer(initialSize).equals(new Integer(c.size())));\n+    }\n+\n+    //FIXME Seetha Nov 10,2006\n+    //need to find the JPQL query for :p_age contains\n+    /*\n+    public void testMutatedSetParameter() {\n+        mutatedCollectionParameterHelper(true);\n+    }\n+\n+    public void testMutatedListParameter() {\n+        mutatedCollectionParameterHelper(false);\n+    }\n+\n+    public void mutatedCollectionParameterHelper(boolean set) {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL,\n+                    \"select a from \"+\n+                    CacheObjectAChild1.class.getSimpleName()+ \"a :p_ages.contains (age)\");\n+        Collection c_param;\n+        if (set)\n+            c_param = new HashSet();\n+        else\n+            c_param = new LinkedList();\n+        c_param.add(new Long(0));\n+        c_param.add(new Long(1));\n+        Collection c = (Collection) q.execute(new Object[]{ c_param });\n+        CacheTestHelper.iterate(c);\n+        int initialSize = c.size();\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE,\n+            new Object[]{ c_param });\n+        c_param.add(new Long(2));\n+        CacheTestHelper.assertInCache(this, q, Boolean.FALSE,\n+            new Object[]{ c_param });\n+        c = (Collection) q.execute(new Object[]{ c_param });\n+        assertFalse(new Integer(initialSize).equals(new Integer(c.size())));\n+    }\n+\n+    public void testMutatedSetParameterDates() {\n+        mutatedCollectionParameterDatesHelper(true);\n+    }\n+\n+    public void testMutatedListParameterDates() {\n+        mutatedCollectionParameterDatesHelper(false);\n+    }\n+\n+    public void mutatedCollectionParameterDatesHelper(boolean set) {\n+        Broker broker = _factory.newBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL, CacheObjectAChild1.class,\n+                \":p_dates.contains (date)\");\n+        Collection c_param;\n+        if (set)\n+            c_param = new HashSet();\n+        else\n+            c_param = new LinkedList();\n+        c_param.add(new Date());\n+        c_param.add(new Date(System.currentTimeMillis() - 1000));\n+        Collection c = (Collection) q.execute(new Object[]{ c_param });\n+        CacheTestHelper.iterate(c);\n+        int initialSize = c.size();\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE,\n+            new Object[]{ c_param });\n+        c_param.add(new Date(System.currentTimeMillis() - 500));\n+        CacheTestHelper.assertInCache(this, q, Boolean.FALSE,\n+            new Object[]{ c_param });\n+    }*/\n+}"},{"sha":"967c95b882d7744b172ad4a362a8796cff51df68","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestOrderbyInDataCache.java","status":"modified","additions":115,"deletions":115,"changes":230,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestOrderbyInDataCache.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestOrderbyInDataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestOrderbyInDataCache.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,115 +1,115 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * Defined ordering is only applied when the collection is loaded from the datastore.\r\n- * It is not maintained by Openjpa as you modify the collection in memory. \r\n- * Openjpa invalid data cache in case the persistence operation may result cache in wrong order.\r\n- * This test suite tests various cases for the above problem.\r\n- */\r\n-public class TestOrderbyInDataCache extends SingleEMFTestCase {\r\n-\tprivate long pid;\r\n-    public void setUp() {\r\n-        setUp(\"openjpa.DataCache\", \"true\", \r\n-            \"openjpa.RemoteCommitProvider\", \"sjvm\", \r\n-            OrderedOneManyParent.class,\r\n-            OrderedOneManyChild.class, CLEAR_TABLES);\r\n-\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        OrderedOneManyParent prt = new OrderedOneManyParent();\r\n-        prt.setName(\"Maria\");\r\n-        em.persist(prt);\r\n-        //insert child in reverse order\r\n-        for (int i = 4; i > 1; i--) {\r\n-        \tOrderedOneManyChild child = new OrderedOneManyChild();\r\n-            child.setId(i);\r\n-            child.setName(\"child\" + i);\r\n-            child.setParent(prt);\r\n-            prt.getChildren().add(child);\r\n-            em.persist(child);\r\n-        }        \r\n-        em.getTransaction().commit();\r\n-        pid = prt.getId();\r\n-        em.close();\r\n-    }\r\n-\r\n-    /**\r\n-     * Test if child list is in order after new child list is added in setup().\r\n-     *\r\n-     */\r\n-    public void testGetChildList(){\r\n-    \tEntityManager em = emf.createEntityManager();\r\n-    \tOrderedOneManyParent prt = em.find(OrderedOneManyParent.class, pid);\r\n-        assertEquals(3, prt.getChildren().size());\r\n-        //the order should be \"child2\", \"child3\", \"child4\"\r\n-        for (int i = 1; i < 4; i++) {\r\n-            assertEquals(\"child\" + (i + 1), prt.getChildren().\r\n-                get(i-1).getName());\r\n-        }   \r\n-        em.close();\r\n-    }\r\n-    \r\n-    public void testInsertChild() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        OrderedOneManyParent prt = em.find(OrderedOneManyParent.class, pid);\r\n-        OrderedOneManyChild child = new OrderedOneManyChild();\r\n-        child.setId(1);\r\n-        child.setName(\"child1\");\r\n-        child.setParent(prt);\r\n-        prt.getChildren().add(child);\r\n-        em.persist(child);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-        \r\n-        //obtain object in new persistence context\r\n-        em = emf.createEntityManager();\r\n-        prt = em.find(OrderedOneManyParent.class, pid);\r\n-        assertEquals(4, prt.getChildren().size());\r\n-        //the order should be \"child1\", \"child2\", \"child3\", \"child4\"\r\n-        for (int i = 1; i < 5; i++) {\r\n-            assertEquals(\"child\" + i, prt.getChildren().\r\n-                get(i-1).getName());\r\n-        }          \r\n-        em.close();\r\n-    }\r\n-    \r\n-    public void testUpdateChildName() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        OrderedOneManyChild child = em.find(OrderedOneManyChild.class, 4);\r\n-        child.setName(\"child1\");\r\n-        em.persist(child);\r\n-        em.getTransaction().commit();\r\n-        OrderedOneManyParent prt = em.find(OrderedOneManyParent.class, pid);\r\n-        assertEquals(3, prt.getChildren().size());\r\n-        //the order should be \"child1\", \"child2\", \"child3\"\r\n-        for (int i = 1; i < 4; i++) {\r\n-            assertEquals(\"child\" + i, prt.getChildren().\r\n-                get(i-1).getName());\r\n-        }          \r\n-        em.close();    \t\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Defined ordering is only applied when the collection is loaded from the datastore.\n+ * It is not maintained by Openjpa as you modify the collection in memory. \n+ * Openjpa invalid data cache in case the persistence operation may result cache in wrong order.\n+ * This test suite tests various cases for the above problem.\n+ */\n+public class TestOrderbyInDataCache extends SingleEMFTestCase {\n+\tprivate long pid;\n+    public void setUp() {\n+        setUp(\"openjpa.DataCache\", \"true\", \n+            \"openjpa.RemoteCommitProvider\", \"sjvm\", \n+            OrderedOneManyParent.class,\n+            OrderedOneManyChild.class, CLEAR_TABLES);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        OrderedOneManyParent prt = new OrderedOneManyParent();\n+        prt.setName(\"Maria\");\n+        em.persist(prt);\n+        //insert child in reverse order\n+        for (int i = 4; i > 1; i--) {\n+        \tOrderedOneManyChild child = new OrderedOneManyChild();\n+            child.setId(i);\n+            child.setName(\"child\" + i);\n+            child.setParent(prt);\n+            prt.getChildren().add(child);\n+            em.persist(child);\n+        }        \n+        em.getTransaction().commit();\n+        pid = prt.getId();\n+        em.close();\n+    }\n+\n+    /**\n+     * Test if child list is in order after new child list is added in setup().\n+     *\n+     */\n+    public void testGetChildList(){\n+    \tEntityManager em = emf.createEntityManager();\n+    \tOrderedOneManyParent prt = em.find(OrderedOneManyParent.class, pid);\n+        assertEquals(3, prt.getChildren().size());\n+        //the order should be \"child2\", \"child3\", \"child4\"\n+        for (int i = 1; i < 4; i++) {\n+            assertEquals(\"child\" + (i + 1), prt.getChildren().\n+                get(i-1).getName());\n+        }   \n+        em.close();\n+    }\n+    \n+    public void testInsertChild() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        OrderedOneManyParent prt = em.find(OrderedOneManyParent.class, pid);\n+        OrderedOneManyChild child = new OrderedOneManyChild();\n+        child.setId(1);\n+        child.setName(\"child1\");\n+        child.setParent(prt);\n+        prt.getChildren().add(child);\n+        em.persist(child);\n+        em.getTransaction().commit();\n+        em.close();\n+        \n+        //obtain object in new persistence context\n+        em = emf.createEntityManager();\n+        prt = em.find(OrderedOneManyParent.class, pid);\n+        assertEquals(4, prt.getChildren().size());\n+        //the order should be \"child1\", \"child2\", \"child3\", \"child4\"\n+        for (int i = 1; i < 5; i++) {\n+            assertEquals(\"child\" + i, prt.getChildren().\n+                get(i-1).getName());\n+        }          \n+        em.close();\n+    }\n+    \n+    public void testUpdateChildName() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        OrderedOneManyChild child = em.find(OrderedOneManyChild.class, 4);\n+        child.setName(\"child1\");\n+        em.persist(child);\n+        em.getTransaction().commit();\n+        OrderedOneManyParent prt = em.find(OrderedOneManyParent.class, pid);\n+        assertEquals(3, prt.getChildren().size());\n+        //the order should be \"child1\", \"child2\", \"child3\"\n+        for (int i = 1; i < 4; i++) {\n+            assertEquals(\"child\" + i, prt.getChildren().\n+                get(i-1).getName());\n+        }          \n+        em.close();    \t\n+    }\n+}"},{"sha":"75bf2f02f624a4bc42c686018b45751a5983dae4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestPCParametersInQueries.java","status":"modified","additions":97,"deletions":97,"changes":194,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestPCParametersInQueries.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestPCParametersInQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestPCParametersInQueries.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,97 +1,97 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-import java.util.Collection;\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-import javax.persistence.EntityManagerFactory;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectE;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectJ;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.kernel.BrokerFactory;\r\n-import org.apache.openjpa.kernel.Query;\r\n-import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-\r\n-/**\r\n- * New test case.\r\n- */\r\n-public class TestPCParametersInQueries extends AbstractTestCase {\r\n-\r\n-    public TestPCParametersInQueries(String test) {\r\n-        super(test, \"datacachecactusapp\");\r\n-    }\r\n-\r\n-    private BrokerFactory _factory;\r\n-    private Object _eId;\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(CacheObjectA.class);\r\n-\r\n-        Map propsMap = new HashMap();\r\n-        propsMap.put(\"openjpa.DataCache\", \"true\");\r\n-        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n-        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\r\n-        EntityManagerFactory emf = getEmf(propsMap);\r\n-        _factory = JPAFacadeHelper.toBrokerFactory(emf);\r\n-\r\n-        Broker broker = _factory.newBroker();\r\n-        broker.begin();\r\n-        CacheObjectE e = new CacheObjectE(\"bar\");\r\n-        CacheObjectJ j = new CacheObjectJ(\"foo\", e);\r\n-        broker.persist(j, null);\r\n-        broker.persist(e, null);\r\n-        broker.commit();\r\n-        _eId = broker.getObjectId(e);\r\n-        broker.close();\r\n-    }\r\n-\r\n-    public void testPCParameter() {\r\n-        Broker broker = _factory.newBroker();\r\n-        broker.begin();\r\n-        CacheObjectE e = (CacheObjectE) broker.find(_eId, true, null);\r\n-        Query q = broker.newQuery(JPQLParser.LANG_JPQL,\r\n-            \"select a from \" +\r\n-                CacheObjectJ.class.getSimpleName() + \" a where a.e = :param\");\r\n-\r\n-        Collection c = (Collection) q.execute(new Object[]{ e });\r\n-        CacheTestHelper.iterate(c);\r\n-        Object o = c.iterator().next();\r\n-        assertTrue(o instanceof CacheObjectJ);\r\n-        CacheTestHelper.assertInCache(this, q, Boolean.TRUE, new Object[]{ e });\r\n-\r\n-        q = broker.newQuery(JPQLParser.LANG_JPQL,\r\n-            \"select a from \" +\r\n-                CacheObjectJ.class.getSimpleName() + \" a where a.e = :param\");\r\n-\r\n-        c = (Collection) q.execute(new Object[]{ e });\r\n-        Object o2 = c.iterator().next();\r\n-        assertTrue(o2 instanceof CacheObjectJ);\r\n-        assertTrue(o == o2);\r\n-\r\n-        broker.commit();\r\n-        broker.close();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.persistence.EntityManagerFactory;\n+\n+\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA;\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectE;\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectJ;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.kernel.BrokerFactory;\n+import org.apache.openjpa.kernel.Query;\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+\n+/**\n+ * New test case.\n+ */\n+public class TestPCParametersInQueries extends AbstractTestCase {\n+\n+    public TestPCParametersInQueries(String test) {\n+        super(test, \"datacachecactusapp\");\n+    }\n+\n+    private BrokerFactory _factory;\n+    private Object _eId;\n+\n+    public void setUp() {\n+        deleteAll(CacheObjectA.class);\n+\n+        Map propsMap = new HashMap();\n+        propsMap.put(\"openjpa.DataCache\", \"true\");\n+        propsMap.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n+        propsMap.put(\"openjpa.BrokerImpl\", CacheTestBroker.class.getName());\n+        EntityManagerFactory emf = getEmf(propsMap);\n+        _factory = JPAFacadeHelper.toBrokerFactory(emf);\n+\n+        Broker broker = _factory.newBroker();\n+        broker.begin();\n+        CacheObjectE e = new CacheObjectE(\"bar\");\n+        CacheObjectJ j = new CacheObjectJ(\"foo\", e);\n+        broker.persist(j, null);\n+        broker.persist(e, null);\n+        broker.commit();\n+        _eId = broker.getObjectId(e);\n+        broker.close();\n+    }\n+\n+    public void testPCParameter() {\n+        Broker broker = _factory.newBroker();\n+        broker.begin();\n+        CacheObjectE e = (CacheObjectE) broker.find(_eId, true, null);\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL,\n+            \"select a from \" +\n+                CacheObjectJ.class.getSimpleName() + \" a where a.e = :param\");\n+\n+        Collection c = (Collection) q.execute(new Object[]{ e });\n+        CacheTestHelper.iterate(c);\n+        Object o = c.iterator().next();\n+        assertTrue(o instanceof CacheObjectJ);\n+        CacheTestHelper.assertInCache(this, q, Boolean.TRUE, new Object[]{ e });\n+\n+        q = broker.newQuery(JPQLParser.LANG_JPQL,\n+            \"select a from \" +\n+                CacheObjectJ.class.getSimpleName() + \" a where a.e = :param\");\n+\n+        c = (Collection) q.execute(new Object[]{ e });\n+        Object o2 = c.iterator().next();\n+        assertTrue(o2 instanceof CacheObjectJ);\n+        assertTrue(o == o2);\n+\n+        broker.commit();\n+        broker.close();\n+    }\n+}"},{"sha":"f4bf2ad002feb4ddd212f04580e49ca6d5991d9b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestQueryResultTypes.java","status":"modified","additions":98,"deletions":98,"changes":196,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestQueryResultTypes.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestQueryResultTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestQueryResultTypes.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,98 +1,98 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.datacache;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA;\r\n-import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectB;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.kernel.Query;\r\n-import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-\r\n-/**\r\n- * Test some assumptions about query result metadata that the query\r\n- * cache relies on.\r\n- */\r\n-public class TestQueryResultTypes extends AbstractTestCase {\r\n-\r\n-    public TestQueryResultTypes(String test) {\r\n-        super(test, \"datacachecactusapp\");\r\n-    }\r\n-\r\n-    public void testQueryResultTypesWithThis() {\r\n-        Broker broker = getBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.name,a FROM \" +\r\n-                CacheObjectA.class.getSimpleName() + \" a\");\r\n-\r\n-        Class[] types = q.getProjectionTypes();\r\n-        assertEquals(2, types.length);\r\n-        assertEquals(String.class, types[0]);\r\n-        assertEquals(CacheObjectA.class, types[1]);\r\n-    }\r\n-\r\n-    public void testQueryResultTypesWithRelated() {\r\n-        Broker broker = getBroker();\r\n-        Query q = broker\r\n-            .newQuery(JPQLParser.LANG_JPQL, \"select a.name,a.relatedB FROM \" +\r\n-                CacheObjectA.class.getSimpleName() + \" a\");\r\n-\r\n-        //CacheObjectA.class,           \"select name, relatedB\");\r\n-        Class[] types = q.getProjectionTypes();\r\n-        assertEquals(2, types.length);\r\n-        assertEquals(String.class, types[0]);\r\n-        assertEquals(CacheObjectB.class, types[1]);\r\n-    }\r\n-\r\n-    public void testSingleProjectionOfNonThisRelation() {\r\n-        Broker broker = getBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.relatedB FROM \" +\r\n-                CacheObjectA.class.getSimpleName() + \" a\");\r\n-\r\n-        Class[] types = q.getProjectionTypes();\r\n-        assertEquals(1, types.length);\r\n-        assertEquals(CacheObjectB.class, types[0]);\r\n-    }\r\n-\r\n-    public void testSingleProjectionOfThisRelation() {\r\n-        Broker broker = getBroker();\r\n-        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a FROM \" +\r\n-            CacheObjectA.class.getSimpleName() + \" a\");\r\n-        Class[] types = q.getProjectionTypes();\r\n-        assertEquals(0, types.length);\r\n-    }\r\n-\r\n-    public void testNoResultClause() {\r\n-        Broker broker = getBroker();\r\n-        Query q =\r\n-            broker.newQuery(JPQLParser.LANG_JPQL, \"select a FROM \" +\r\n-                CacheObjectA.class.getSimpleName() + \" a\");\r\n-        Class[] types = q.getProjectionTypes();\r\n-        assertEquals(0, types.length);\r\n-    }\r\n-\r\n-    private Broker getBroker() {\r\n-        return JPAFacadeHelper\r\n-            .toBroker(currentEntityManager());\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.datacache;\n+\n+\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA;\n+import org.apache.openjpa.persistence.datacache.common.apps.CacheObjectB;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.kernel.Query;\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+\n+/**\n+ * Test some assumptions about query result metadata that the query\n+ * cache relies on.\n+ */\n+public class TestQueryResultTypes extends AbstractTestCase {\n+\n+    public TestQueryResultTypes(String test) {\n+        super(test, \"datacachecactusapp\");\n+    }\n+\n+    public void testQueryResultTypesWithThis() {\n+        Broker broker = getBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.name,a FROM \" +\n+                CacheObjectA.class.getSimpleName() + \" a\");\n+\n+        Class[] types = q.getProjectionTypes();\n+        assertEquals(2, types.length);\n+        assertEquals(String.class, types[0]);\n+        assertEquals(CacheObjectA.class, types[1]);\n+    }\n+\n+    public void testQueryResultTypesWithRelated() {\n+        Broker broker = getBroker();\n+        Query q = broker\n+            .newQuery(JPQLParser.LANG_JPQL, \"select a.name,a.relatedB FROM \" +\n+                CacheObjectA.class.getSimpleName() + \" a\");\n+\n+        //CacheObjectA.class,           \"select name, relatedB\");\n+        Class[] types = q.getProjectionTypes();\n+        assertEquals(2, types.length);\n+        assertEquals(String.class, types[0]);\n+        assertEquals(CacheObjectB.class, types[1]);\n+    }\n+\n+    public void testSingleProjectionOfNonThisRelation() {\n+        Broker broker = getBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select a.relatedB FROM \" +\n+                CacheObjectA.class.getSimpleName() + \" a\");\n+\n+        Class[] types = q.getProjectionTypes();\n+        assertEquals(1, types.length);\n+        assertEquals(CacheObjectB.class, types[0]);\n+    }\n+\n+    public void testSingleProjectionOfThisRelation() {\n+        Broker broker = getBroker();\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL, \"select a FROM \" +\n+            CacheObjectA.class.getSimpleName() + \" a\");\n+        Class[] types = q.getProjectionTypes();\n+        assertEquals(0, types.length);\n+    }\n+\n+    public void testNoResultClause() {\n+        Broker broker = getBroker();\n+        Query q =\n+            broker.newQuery(JPQLParser.LANG_JPQL, \"select a FROM \" +\n+                CacheObjectA.class.getSimpleName() + \" a\");\n+        Class[] types = q.getProjectionTypes();\n+        assertEquals(0, types.length);\n+    }\n+\n+    private Broker getBroker() {\n+        return JPAFacadeHelper\n+            .toBroker(currentEntityManager());\n+    }\n+}"},{"sha":"3d392eae3128b21bc8a9c623ee56d54e0633bd60","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestResultShapes.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestResultShapes.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestResultShapes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestResultShapes.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"5e4972985bfbd938eeb4ce27b0451e804f402af0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestSJVMCache.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestSJVMCache.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestSJVMCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestSJVMCache.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"fadaefa9d8965d72af7a77afea607526bd567cb5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestUniteratedQueryResult.java","status":"modified","additions":102,"deletions":102,"changes":204,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestUniteratedQueryResult.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestUniteratedQueryResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestUniteratedQueryResult.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"b8aca768f342cd0a2576cbf96224186211e755b9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AppIdCacheObject.java","status":"modified","additions":38,"deletions":38,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AppIdCacheObject.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AppIdCacheObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AppIdCacheObject.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"9f16187c2cb74dbcd6a39246c32680b0b3654d83","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachA.java","status":"modified","additions":86,"deletions":86,"changes":172,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachA.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachA.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"40e393ed83636f7e5089d38b810ecebd54ccfeb9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachB.java","status":"modified","additions":76,"deletions":76,"changes":152,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachB.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachB.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"d7d86fd7e552d4c3dc7784eabb0fba2bbfd75f4c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachC.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"eb8fc5552393359074354618974cf2182eaab424","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachD.java","status":"modified","additions":121,"deletions":121,"changes":242,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachD.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachD.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"2f636c95339512962b1a8167f90b1cea9ce7a03b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachE.java","status":"modified","additions":85,"deletions":85,"changes":170,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachE.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachE.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"3e5a8f2b47afa29d067ece68b446c5da81cbb1c4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachF.java","status":"modified","additions":135,"deletions":135,"changes":270,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachF.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/AttachF.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"2298e47d21fed3c4cf46d3ed5648d9d48ab0ceb0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectA.java","status":"modified","additions":263,"deletions":263,"changes":526,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectA.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectA.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"85b3fa5dea7b793edebcd85a787eb710d37ec789","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectAChild1.java","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectAChild1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectAChild1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectAChild1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a71b76db91716f7cfbe21a7d4f2d4615efd7fed9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectAChild2.java","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectAChild2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectAChild2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectAChild2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e12505669ad2e2bc281f5ae299caca29f5e0414d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectB.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectB.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectB.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1b7db9c8cc298370c3c98e860f7a9db7cfe8a4f3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectBChild1.java","status":"modified","additions":44,"deletions":44,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectBChild1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectBChild1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectBChild1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"53b148bb0b336aac83f693e78d0e8d655b6003a9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectC.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"591d0c8be4f133dc7bcb927772d1b086d6bd7845","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectD.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectD.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectD.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"4291c34d76362e6a3d54851082c5b8fa0dd866c4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectE.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectE.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectE.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"d414c2cd0ac0c8fa4590e7d72747c236ce257b36","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectF.java","status":"modified","additions":39,"deletions":39,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectF.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectF.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"75f7a06fe7febdb12d58382caab094ceaef5e8be","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectG.java","status":"modified","additions":39,"deletions":39,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectG.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectG.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f19557b61c211660a3b3882f5b5d98601950b21b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectH.java","status":"modified","additions":39,"deletions":39,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectH.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectH.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectH.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"3b5fa61ca3a4cfb32531c5379b74e0dbfa29e281","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectInterface.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectInterface.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectInterface.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e15cc44f6ec600721e317638ed2d0b90e5e7bdf3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectJ.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectJ.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectJ.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectJ.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"b5812e7bd7361985d351df0af95ce483b269580f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectWithExternalizedFields.java","status":"modified","additions":39,"deletions":39,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectWithExternalizedFields.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectWithExternalizedFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/CacheObjectWithExternalizedFields.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1402339b839366ec6a8e3b4723d72d8d4acd40ca","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddedEntity.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddedEntity.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddedEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddedEntity.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"d8fea935e1721874a79d750942af2cc989f6f29b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddingOwnerEntity.java","status":"modified","additions":73,"deletions":73,"changes":146,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddingOwnerEntity.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddingOwnerEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/EmbeddingOwnerEntity.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6531a298555b104324c59cd17cbb3f4844125f50","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/FlushDataCacheObject.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/FlushDataCacheObject.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/FlushDataCacheObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/FlushDataCacheObject.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"73b993252f38702a53016ce38ce72435fc632e6a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/PObject.java","status":"modified","additions":57,"deletions":57,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/PObject.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/PObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/PObject.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ed5d4bdb3ab7fd255803ac63fe11ce4a5fc60a96","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/RuntimeTest1.java","status":"modified","additions":284,"deletions":284,"changes":568,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/RuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/RuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/RuntimeTest1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"4e1b58a0b88d858c5b5d81aef510a431499f6c88","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/RuntimeTest2.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/RuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/RuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/RuntimeTest2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"7ec91ec15d948ec7d518cece0b767ce4928677e1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/ScheduledEviction.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/ScheduledEviction.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/ScheduledEviction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/ScheduledEviction.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6d712ab9b484d5a9af414ba89984caf6898472fb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/SelfReferencingCacheTestObject.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/SelfReferencingCacheTestObject.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/SelfReferencingCacheTestObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/SelfReferencingCacheTestObject.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"d3699ca2e6f5143079ffe8adacdd529b573ecf8f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/TransactionalClassPC.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/TransactionalClassPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/TransactionalClassPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/common/apps/TransactionalClassPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"09bac06794847b13a17267242ebc55e371760a67","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/stats/TestStatistics.java","status":"modified","additions":107,"deletions":107,"changes":214,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/stats/TestStatistics.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/stats/TestStatistics.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/stats/TestStatistics.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"2aea112c2ecd6542c97f915f0272fdccd00c4b3b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/DetachmentOneManyChild.java","status":"modified","additions":66,"deletions":66,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/DetachmentOneManyChild.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/DetachmentOneManyChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/DetachmentOneManyChild.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"7ba8a6ed5beeddc81bf5e37adfe1f89e45630dee","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/DetachmentOneManyParent.java","status":"modified","additions":63,"deletions":63,"changes":126,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/DetachmentOneManyParent.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/DetachmentOneManyParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/DetachmentOneManyParent.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"78da840180aaa2b393610a70732cbeec4341d210","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetach.java","status":"modified","additions":200,"deletions":200,"changes":400,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetach.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetach.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetach.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"07188585c5fa3c1337dbce9720f8890fe039efda","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Address.java","status":"modified","additions":78,"deletions":78,"changes":156,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Address.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Address.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Address.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"23bfc9792c255ea24b3c1ea921026df2a618fa3e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/BaseEntity.java","status":"modified","additions":41,"deletions":41,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/BaseEntity.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/BaseEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/BaseEntity.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"04c5dad83ca8e874113d7dd26f1bbcaf39c95162","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Company1.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Company1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Company1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Company1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e0eb0612dc548b86cbd30222dee315412318e862","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Company2.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Company2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Company2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Company2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"144bbc53a9708e136fc1122678189b8a794ff99c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/CompanyXml.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/CompanyXml.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/CompanyXml.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/CompanyXml.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1121c30725a68fc77da991b3baceec2223940fd6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/ContactInfo.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/ContactInfo.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/ContactInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/ContactInfo.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"8f7ced660bd242db9d70a9a49316e8166a24af4a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/CustomerXml.java","status":"modified","additions":84,"deletions":84,"changes":168,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/CustomerXml.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/CustomerXml.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/CustomerXml.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6ca2136c3e819f7442b4fe8a6be41d6e0966324d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Department1.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Department1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Department1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Department1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"90d09362c9b0154b5be68fee20ec08207e8d1b31","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Department2.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Department2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Department2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Department2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e9462f441f4a75007ae56dd54ac203d585ec52fa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Department3.java","status":"modified","additions":55,"deletions":55,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Department3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Department3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Department3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"b60fcdc09fd1fdcd5db810a7b17ac55466846f83","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/DepartmentXml.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/DepartmentXml.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/DepartmentXml.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/DepartmentXml.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"9a2a106a42d08c46e3381b23d0d1e4a1915eda4c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Division.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Division.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Division.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Division.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"3e59ab53e908c8026c223b2c36aed83555978989","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/DivisionXml.java","status":"modified","additions":41,"deletions":41,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/DivisionXml.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/DivisionXml.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/DivisionXml.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"2c008351bf592427eb9f3bc7ad719e16dcd6a333","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"cc59299cd0d76242af6e1032e8d50873c23a695a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EmbedXml.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EmbedXml.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EmbedXml.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EmbedXml.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1e07e7d12ba14bcfb125e9f0b45286af72f3108a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_Coll_Embed.java","status":"modified","additions":77,"deletions":77,"changes":154,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_Coll_Embed.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_Coll_Embed.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_Coll_Embed.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"fa67439e334afc100b07f841815390626b37c07a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_Coll_Integer.java","status":"modified","additions":67,"deletions":67,"changes":134,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_Coll_Integer.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_Coll_Integer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_Coll_Integer.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"2007dffaf6a07b9bbcbbb9779cd3fc290a114bf9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_Embed.java","status":"modified","additions":71,"deletions":71,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_Embed.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_Embed.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_Embed.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e5068402fc3ac0c0e45e64345b774f42c39c8e39","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_EmbedXml.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_EmbedXml.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_EmbedXml.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_EmbedXml.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1398f86bad427953e7d81a16301de081d6118b66","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_Embed_ToMany.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_Embed_ToMany.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_Embed_ToMany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_Embed_ToMany.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"88139a5d180c1a49f559c67114c0babdfa66827d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_ToMany.java","status":"modified","additions":68,"deletions":68,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_ToMany.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_ToMany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_ToMany.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"54f17389e496f83b108292ed6c17794fe28b8879","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_ToOne.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_ToOne.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_ToOne.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Embed_ToOne.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"00f6a83eace83a75671ed092d96c1ad61d1039dc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Employee.java","status":"modified","additions":70,"deletions":70,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Employee.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"b18a85b52315dc6715473b64ddb1f33ee4446d22","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Employee1.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Employee1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Employee1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Employee1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"b1a48d444598027758e203d75dfdd859f14b0653","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Employee2.java","status":"modified","additions":55,"deletions":55,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Employee2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Employee2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Employee2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ec4e778d24108e52ddeb1fbde57906c63e336739","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Employee3.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Employee3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Employee3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Employee3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"12ec526c83b6c5bddb5e347b89a0999fb2c46647","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EmployeeName3.java","status":"modified","additions":68,"deletions":68,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EmployeeName3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EmployeeName3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EmployeeName3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f15bbf1f69fb06938f9667fb20b1905e0fdcd2a3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EmployeePK2.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EmployeePK2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EmployeePK2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EmployeePK2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f7fd640921e7b8c77d446f56dead8ee504b77424","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EmployeeXml.java","status":"modified","additions":39,"deletions":39,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EmployeeXml.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EmployeeXml.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EmployeeXml.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"3e2958c142e461b3d1fbbaccce074704c342a513","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Coll_Embed_Embed.java","status":"modified","additions":79,"deletions":79,"changes":158,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Coll_Embed_Embed.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Coll_Embed_Embed.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Coll_Embed_Embed.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"00594f5cb08e2f2aec5e5b66dec7612ee205b386","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Coll_Embed_EmbedXml.java","status":"modified","additions":74,"deletions":74,"changes":148,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Coll_Embed_EmbedXml.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Coll_Embed_EmbedXml.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Coll_Embed_EmbedXml.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"bb7844a1c1c970528359394147e3278c31775492","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Coll_Embed_ToOne.java","status":"modified","additions":94,"deletions":94,"changes":188,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Coll_Embed_ToOne.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Coll_Embed_ToOne.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Coll_Embed_ToOne.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6e1a1175a6490ad2732c2db0d0056c2ab021f545","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Coll_String.java","status":"modified","additions":82,"deletions":82,"changes":164,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Coll_String.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Coll_String.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Coll_String.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"62ac1330f1a8f9bad171ac44206da37267dc7a71","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Coll_StringXml.java","status":"modified","additions":80,"deletions":80,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Coll_StringXml.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Coll_StringXml.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Coll_StringXml.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"9ba2518dec015e3123ff94ef58b794fff0c94964","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Coll_Embed.java","status":"modified","additions":82,"deletions":82,"changes":164,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Coll_Embed.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Coll_Embed.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Coll_Embed.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"15cde879540b4e677539efe459b18b64efdbfcc8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Coll_Integer.java","status":"modified","additions":74,"deletions":74,"changes":148,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Coll_Integer.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Coll_Integer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Coll_Integer.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a78dbe97aeb7b1f16833a3d1ebba4a8d9439d1a1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Embed.java","status":"modified","additions":75,"deletions":75,"changes":150,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Embed.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Embed.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Embed.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"3daeaf63f15ea4f054437af261fec0dc2436d041","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Embed_ToMany.java","status":"modified","additions":75,"deletions":75,"changes":150,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Embed_ToMany.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Embed_ToMany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_Embed_ToMany.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6f93c06a029d811b652bab80c4bd8ba955addd97","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_ToMany.java","status":"modified","additions":75,"deletions":75,"changes":150,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_ToMany.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_ToMany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_ToMany.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c4652418fb1941f171b7cb1fefabc56ffc84277f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_ToOne.java","status":"modified","additions":75,"deletions":75,"changes":150,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_ToOne.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_ToOne.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityA_Embed_ToOne.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"5c46ecdc46dc102423afbc121f48c1c10705e6e4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityB1.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityB1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityB1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/EntityB1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"5209c5b2701ddbe2bdd5b563cd014b3bf199af72","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Geocode.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Geocode.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Geocode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Geocode.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1df14b058c8cf1c39579346e8d141c06dd708df0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Item1.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Item1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Item1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Item1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"31fcfa716e4c8724ee2a16b39c13b1b5f302e2ba","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Item2.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Item2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Item2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Item2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"4cde6eb3c75272dd6e081636d0cc4ecadd7e72fc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Item3.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Item3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Item3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/Item3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"0e9784fa61745e3267603def4fd4400d730da864","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/ItemXml.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/ItemXml.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/ItemXml.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/ItemXml.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"0bb011e4b1b0b33ceb432eb0fd8cf6de2831235a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/JobInfo.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/JobInfo.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/JobInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/JobInfo.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a424a373954f13293cd4b060b4e20c864cf44823","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/LocationDetails.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/LocationDetails.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/LocationDetails.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/LocationDetails.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"cf13d132bb09dc0a861c72c12105e685c084bfa1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/OrderXml.java","status":"modified","additions":61,"deletions":61,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/OrderXml.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/OrderXml.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/OrderXml.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"7e8264bae5b5fc915633f157f558d7eaab8fddae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/ParkingSpot.java","status":"modified","additions":57,"deletions":57,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/ParkingSpot.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/ParkingSpot.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/ParkingSpot.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"8a3a67b7cf190c73dae3894d92dab78caad5071f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/PhoneNumber.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/PhoneNumber.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/PhoneNumber.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/PhoneNumber.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"3ecfc4734253f5b9d1e4cae3c7e89baff6b0e6e1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/ProgramManager.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/ProgramManager.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/ProgramManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/ProgramManager.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e4b57bc69f9e5780b25a457af3df7059820819ca","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","status":"modified","additions":1533,"deletions":1533,"changes":3066,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddable.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c02cc4835a88f4d18b8df5d3b398ea3885a4518d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddableXml.java","status":"modified","additions":733,"deletions":733,"changes":1466,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddableXml.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddableXml.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbeddableXml.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"d203bfc2d7e9aa7590c2d668a8bfa4a4cd4da7b5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbedded.java","status":"modified","additions":158,"deletions":158,"changes":316,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbedded.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbedded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbedded.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1798aa320ed6b6690c0912fd70bf7e7cc8b8b20d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/VicePresident.java","status":"modified","additions":59,"deletions":59,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/VicePresident.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/VicePresident.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/VicePresident.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"86df195f979ec41cc4b438b2b3bbc119ff2dd167","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/VicePresidentXml.java","status":"modified","additions":41,"deletions":41,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/VicePresidentXml.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/VicePresidentXml.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/VicePresidentXml.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6178b15c05e075489eeaab458a759c5ab82d4007","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/AbstractEmployee.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/AbstractEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/AbstractEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/AbstractEmployee.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"0ce93fbc6dbab61c02935f864eed7c3f0be19fa4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Address.java","status":"modified","additions":95,"deletions":95,"changes":190,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Address.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Address.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Address.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"aba21e8628fe46f61eefde145147147afef619c9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/AddressXml.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/AddressXml.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/AddressXml.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/AddressXml.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"aec706a567fef80bef01ee502686278b4782b31f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/ContactInfo.java","status":"modified","additions":58,"deletions":58,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/ContactInfo.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/ContactInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/ContactInfo.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6163543d124620acfeb0d114944a436721394527","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Customer.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Customer.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Customer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Customer.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"d9957791096f71f4bb06a94f5bd4c31af96f4e9a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/CustomerXml.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/CustomerXml.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/CustomerXml.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/CustomerXml.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ecbb661b8016779ffc4ca3af95d63394d1ab1bc1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/EmergencyContactInfo.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/EmergencyContactInfo.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/EmergencyContactInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/EmergencyContactInfo.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"8f367f3cd34b8e27b7e2b29da15bebc56186d11b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Employee.java","status":"modified","additions":98,"deletions":98,"changes":196,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Employee.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1e86791a3690b89cc52ba81fe1e948864dc31dc0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/JobInfo.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/JobInfo.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/JobInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/JobInfo.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"34effd0e24385a5e080b624b67172b0875b66d0a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/PartTimeEmployee.java","status":"modified","additions":57,"deletions":57,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/PartTimeEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/PartTimeEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/PartTimeEmployee.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"5c39496b7b73b59f9a2c71708d88c6d7dab74967","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/PhoneNumber.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/PhoneNumber.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/PhoneNumber.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/PhoneNumber.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e10e57a590689e362903b632d179e16c534adbff","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/ProgramManager.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/ProgramManager.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/ProgramManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/ProgramManager.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"fc46789506272c1321cebb7e435b80e93ac16809","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Project.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Project.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Project.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Project.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"2258746456c637b105a8820d44e38ac3c08b98e2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/PropertyInfo.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/PropertyInfo.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/PropertyInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/PropertyInfo.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"216c59117c78e3024f251faa4e5e978e77c29516","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/PropertyOwner.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/PropertyOwner.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/PropertyOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/PropertyOwner.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6a827601dc0572dc22e816d41ad8669b61689511","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/PropertyRecord.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/PropertyRecord.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/PropertyRecord.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/PropertyRecord.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a0caaf9d59a61ccfdb6ff7469868c17a113a8c80","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/TestAssocOverrides.java","status":"modified","additions":278,"deletions":278,"changes":556,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/TestAssocOverrides.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/TestAssocOverrides.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/TestAssocOverrides.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"d6eabd667dd4a63f77743809859456bb40fcf933","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/TestAttrOverrides.java","status":"modified","additions":214,"deletions":214,"changes":428,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/TestAttrOverrides.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/TestAttrOverrides.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/TestAttrOverrides.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ad6f5eda98c5050522f454082f1f9e3de5a1fd6e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/TestAttrOverridesXml.java","status":"modified","additions":116,"deletions":116,"changes":232,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/TestAttrOverridesXml.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/TestAttrOverridesXml.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/TestAttrOverridesXml.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"5506d65f1e9f8c89f95e66b262e0e427c28e669d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Zipcode.java","status":"modified","additions":62,"deletions":62,"changes":124,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Zipcode.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Zipcode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/Zipcode.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"186e0c71681dfb360b69033219bc27356841c733","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/ZipcodeXml.java","status":"modified","additions":40,"deletions":40,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/ZipcodeXml.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/ZipcodeXml.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/attrOverrides/ZipcodeXml.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"0502ef484bbb65bf5aa5c23f70ae629dc2e1f313","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestClone.java","status":"modified","additions":98,"deletions":98,"changes":196,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestClone.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestClone.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestClone.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"5cf43a423ff1e2ccd7cfa127bd1b87e4e82f0bdb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestDynamicStorageGenerator.java","status":"modified","additions":79,"deletions":79,"changes":158,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestDynamicStorageGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestDynamicStorageGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestDynamicStorageGenerator.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c78838bafb8362dbafe787978bfb00eae208f9f4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestNoNoArgs.java","status":"modified","additions":78,"deletions":78,"changes":156,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestNoNoArgs.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestNoNoArgs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestNoNoArgs.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"d45a0fa0f1570f3f28ddd324cef2a4e68464b39f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestSubclassedBehavior.java","status":"modified","additions":559,"deletions":559,"changes":1118,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestSubclassedBehavior.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestSubclassedBehavior.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestSubclassedBehavior.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e76c1d5c0a0e245210cc3974f9813f4f60f6fb0c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BackingFieldNameMismatchInstance.java","status":"modified","additions":68,"deletions":68,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BackingFieldNameMismatchInstance.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BackingFieldNameMismatchInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BackingFieldNameMismatchInstance.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"00ea60ff90922161b76d422644aea40b1a6ebf62","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BaseEntity.java","status":"modified","additions":75,"deletions":75,"changes":150,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BaseEntity.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BaseEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BaseEntity.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a8d96fc4deb5f13b700bd702b573b902abe30600","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BasicSubclassInstance.java","status":"modified","additions":63,"deletions":63,"changes":126,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BasicSubclassInstance.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BasicSubclassInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/BasicSubclassInstance.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"624b393d50b8cbbcd304e0297ce1e51a47f74155","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DerivedEntity.java","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DerivedEntity.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DerivedEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DerivedEntity.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"057dc92064d1f8cada418b6ca39282fc47ec2d87","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DetachablePC.java","status":"modified","additions":30,"deletions":30,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DetachablePC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DetachablePC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DetachablePC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"3e86379316547976bc6b78c193875425d8175a57","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DetachableVersionedPC.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DetachableVersionedPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DetachableVersionedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/DetachableVersionedPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e4bd48e366f4efc48569a02704f54badfd281150","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/Entity1.java","status":"modified","additions":101,"deletions":101,"changes":202,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/Entity1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/Entity1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/Entity1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"b45037195fbd84d3fb1a29a500cab81f997deef6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/Entity2.java","status":"modified","additions":86,"deletions":86,"changes":172,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/Entity2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/Entity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/Entity2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"4cda6ca2c6ba3eb47a5c61ac80a27f4c12a405e9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/ManagedInverseTestInstance.java","status":"modified","additions":73,"deletions":73,"changes":146,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/ManagedInverseTestInstance.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/ManagedInverseTestInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/ManagedInverseTestInstance.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"2dacbe242e963c283df0727eb19f555e4496bee5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/ManagedInverseTestInstance2.java","status":"modified","additions":73,"deletions":73,"changes":146,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/ManagedInverseTestInstance2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/ManagedInverseTestInstance2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/ManagedInverseTestInstance2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c2423e13b31748b2bf190dd230ce9e83cdc02a64","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/No2NoArgs.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/No2NoArgs.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/No2NoArgs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/No2NoArgs.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"586a9769eca2024ba9f47de26ec6ad3ee96718c9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/No3NoArgs.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/No3NoArgs.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/No3NoArgs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/No3NoArgs.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"3073a23f37e99011839e621410a2c98c77976514","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NoClone.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NoClone.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NoClone.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NoClone.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"21abd09ab2fc00ad631fe56b9f2682745c60caf5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NoNoArgs.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NoNoArgs.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NoNoArgs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NoNoArgs.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"43abc9178dc2209d67bb9e0efa78c84a328dc447","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NonPCClone.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NonPCClone.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NonPCClone.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/NonPCClone.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"8f645182c784f5a0fec680289692d6266c4b56e6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/PCClone.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/PCClone.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/PCClone.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/PCClone.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"3711aa5b069efde1b601d38b67ae6dd3f8066847","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/SubclassClone.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/SubclassClone.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/SubclassClone.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/SubclassClone.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"0d6310156b7dc87473b1e6bb386d06df92b477ed","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/SubclassTestInstance.java","status":"modified","additions":30,"deletions":30,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/SubclassTestInstance.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/SubclassTestInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/SubclassTestInstance.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e96be065fbc92afe3fca6aa62af9cb177e492d21","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Dependent1.java","status":"modified","additions":68,"deletions":68,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Dependent1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Dependent1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Dependent1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f848e74936d416ec70de0b47deae50bea8ecb0cc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Dependent2.java","status":"modified","additions":68,"deletions":68,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Dependent2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Dependent2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Dependent2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"7c13245e5f69314e5540d18c1aacee32b17bb805","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Dependent3.java","status":"modified","additions":82,"deletions":82,"changes":164,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Dependent3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Dependent3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Dependent3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c2826846d293c7d64824a40e619ddc3984a26eaf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/DependentId1.java","status":"modified","additions":68,"deletions":68,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/DependentId1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/DependentId1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/DependentId1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"41752f1aa436f222b2e46353e7ddd08a305453d9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/DependentId2.java","status":"modified","additions":69,"deletions":69,"changes":138,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/DependentId2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/DependentId2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/DependentId2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e2aa43ee98aea3871aa58d2af5d2ef412e0f3656","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/DependentId3.java","status":"modified","additions":81,"deletions":81,"changes":162,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/DependentId3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/DependentId3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/DependentId3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"4ebab7660a395bd23d005977a0943876d6cc566f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Employee1.java","status":"modified","additions":89,"deletions":89,"changes":178,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Employee1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Employee1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Employee1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"364b171d81ee73c16dbbdebff943aefbc1951e77","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Employee2.java","status":"modified","additions":78,"deletions":78,"changes":156,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Employee2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Employee2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Employee2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ea7f6e103e0be2c97e2e557d274f165f42f00688","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Employee3.java","status":"modified","additions":87,"deletions":87,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Employee3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Employee3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Employee3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ca0d51c79f9866ee1b9cee1659906a4afeba5689","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/EmployeeId2.java","status":"modified","additions":71,"deletions":71,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/EmployeeId2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/EmployeeId2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/EmployeeId2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"07035bb49d03e5ebe9f270072a8b22e0fdab4540","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/MedicalHistory1.java","status":"modified","additions":78,"deletions":78,"changes":156,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/MedicalHistory1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/MedicalHistory1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/MedicalHistory1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"0586a895e4ab2ec64a8dffe1b1af54e3aff41093","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/MedicalHistory2.java","status":"modified","additions":82,"deletions":82,"changes":164,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/MedicalHistory2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/MedicalHistory2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/MedicalHistory2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"3ce97d2d7a399f9aadbb3ae0c6b2828f8c553af4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/MedicalHistory3.java","status":"modified","additions":68,"deletions":68,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/MedicalHistory3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/MedicalHistory3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/MedicalHistory3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6c77e5d5d0c47742e82a5bb4d53b7b30af35531e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/MedicalHistory4.java","status":"modified","additions":69,"deletions":69,"changes":138,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/MedicalHistory4.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/MedicalHistory4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/MedicalHistory4.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"68d95e76a9d46f70957429c019639484eb9f9965","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Parent3.java","status":"modified","additions":76,"deletions":76,"changes":152,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Parent3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Parent3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Parent3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"04da47f3679d3788e3e5350c2e27a023b5ce4781","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Person1.java","status":"modified","additions":69,"deletions":69,"changes":138,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Person1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Person1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Person1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"95465535dd188ee68269ad021e51f642f85a7fd9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Person2.java","status":"modified","additions":81,"deletions":81,"changes":162,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Person2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Person2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Person2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6f3d0fa6fd97b90fc099ae97ad65b17935ff436f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Person3.java","status":"modified","additions":83,"deletions":83,"changes":166,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Person3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Person3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Person3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"75b21902f6c039d41983c6435113c86f97a00e1e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Person4.java","status":"modified","additions":71,"deletions":71,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Person4.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Person4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/Person4.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"02a9cc0c7058cf0c7494ecc3dc57d74579dde50b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/PersonId1.java","status":"modified","additions":70,"deletions":70,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/PersonId1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/PersonId1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/PersonId1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"61a318a6065e5da9093eea47238d55916c9be2df","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/PersonId3.java","status":"modified","additions":70,"deletions":70,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/PersonId3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/PersonId3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/PersonId3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"085625f30f61454b8c86655b97c3875d14bfb18e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/PersonId4.java","status":"modified","additions":73,"deletions":73,"changes":146,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/PersonId4.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/PersonId4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/PersonId4.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"7f2540b20a349da277bab515fa4101694c6afb01","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java","status":"modified","additions":644,"deletions":644,"changes":1288,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/identity/TestMappedById.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"167b64e2d84ce753a791484d55fa65c2eba89cab","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/TestCascades.java","status":"modified","additions":1142,"deletions":1142,"changes":2284,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/TestCascades.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/TestCascades.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/TestCascades.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"70bfa218a14220abe46e7cb54e254ad5d41030a5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/common/apps/CascadesEntity.java","status":"modified","additions":112,"deletions":112,"changes":224,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/common/apps/CascadesEntity.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/common/apps/CascadesEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/entityoperation/common/apps/CascadesEntity.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"cab5b092bb52b654bd283eaaa951cb12702a9d98","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/JMSRemoteEventsTest.java","status":"modified","additions":101,"deletions":101,"changes":202,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/JMSRemoteEventsTest.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/JMSRemoteEventsTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/JMSRemoteEventsTest.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"29335533db7539e14f9c150ff8287fb983f9861e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/RemoteEventBase.java","status":"modified","additions":237,"deletions":237,"changes":474,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/RemoteEventBase.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/RemoteEventBase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/RemoteEventBase.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a11f8c0490cd4789e9cf89c6219feb9f7993befd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestEvents.java","status":"modified","additions":255,"deletions":255,"changes":510,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestEvents.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestEvents.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestEvents.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"802557211a80c2d3a3c9f40daa1d890bd85e25e5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestFakeRemoteEvents.java","status":"modified","additions":226,"deletions":226,"changes":452,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestFakeRemoteEvents.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestFakeRemoteEvents.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestFakeRemoteEvents.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"caeccd3a46e88e49f27243d129ceb23da900b222","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestLifecycleEventManager.java","status":"modified","additions":222,"deletions":222,"changes":444,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestLifecycleEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestLifecycleEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestLifecycleEventManager.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e30dd4f813725420d568998bbeae8a549d996de9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestLocalRemoteEvents.java","status":"modified","additions":40,"deletions":40,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestLocalRemoteEvents.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestLocalRemoteEvents.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestLocalRemoteEvents.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a84491ee7412f9f910ff4c973915548b628d2dae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestOrphanedKeyAction.java","status":"modified","additions":136,"deletions":136,"changes":272,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestOrphanedKeyAction.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestOrphanedKeyAction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestOrphanedKeyAction.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"8445541d43cac8c1f8dc76d6edcbc51898f26860","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteClassChanges.java","status":"modified","additions":273,"deletions":273,"changes":546,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteClassChanges.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteClassChanges.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteClassChanges.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ba3f219e75d9a936841ce4cf52863a003d95e3ec","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteEvents.java","status":"modified","additions":42,"deletions":42,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteEvents.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteEvents.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteEvents.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c28fed6d7e3a702017db5b4a9aca1bd12d798c24","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteEventsDuration.java","status":"modified","additions":278,"deletions":278,"changes":556,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteEventsDuration.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteEventsDuration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteEventsDuration.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"947623d1bb0d3a2b5eda34a534c6c191607e9ad0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteRecovery.java","status":"modified","additions":327,"deletions":327,"changes":654,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteRecovery.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteRecovery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteRecovery.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"56bfbb599b51af1f3b0c9f80bc895da7849f6c5f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteRecoveryTransmitAdds.java","status":"modified","additions":335,"deletions":335,"changes":670,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteRecoveryTransmitAdds.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteRecoveryTransmitAdds.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/TestTCPRemoteRecoveryTransmitAdds.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e7777bbe756f1e6fd6d0aa3baedf7cf5eeae5a38","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/Duration.java","status":"modified","additions":236,"deletions":236,"changes":472,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/Duration.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/Duration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/Duration.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"9a5935db600f9ebc6200c6b2bb455c8d598dc2ba","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest1.java","status":"modified","additions":279,"deletions":279,"changes":558,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"73b7b2a14b327a773b3ed4f4ec12b543bc92c810","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest2.java","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a3616c893de427d2fa9fe48217828da3149fbd7c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest4.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest4.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/RuntimeTest4.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f61aa78fa5f83c7aa7c9cbf830c1d135a73cc7d5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/TransactionalClassPC.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/TransactionalClassPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/TransactionalClassPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/event/common/apps/TransactionalClassPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"01ce72aefe5fdd32148bd048ad8687bb315470d7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/PObject.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"62b67f3de0b7254fea334aff79bed3c5a99ed8c0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java","status":"modified","additions":234,"deletions":234,"changes":468,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestException.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f24944b3d0a6127ee6f02e26fee4146076bf5b72","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGAddress.java","status":"modified","additions":105,"deletions":105,"changes":210,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGAddress.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGAddress.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGAddress.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"fdb7a2156b2bce5114cb97f7036fe9602ca40ff6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGDepartment.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGDepartment.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGDepartment.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGDepartment.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"242a09c3227a33a56618aa1fb7805f7bad80c0d1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGEmployee.java","status":"modified","additions":174,"deletions":174,"changes":348,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGEmployee.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ec2f5062db30b71118905e1ab508f71c3532f726","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGManager.java","status":"modified","additions":72,"deletions":72,"changes":144,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGManager.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fetchgroups/FGManager.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e9d4b99d51754deb3c1f96187f0fe58410e414d3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/EnumFieldType.java","status":"modified","additions":63,"deletions":63,"changes":126,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/EnumFieldType.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/EnumFieldType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/EnumFieldType.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"8b1bc084abfaded0295fa5e5ec6f27e84801e1a6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/EnumSetOwner.java","status":"modified","additions":75,"deletions":75,"changes":150,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/EnumSetOwner.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/EnumSetOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/EnumSetOwner.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"5912f6ffbbcf9ea384e2be1cab978d06e6a8306d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/SampleEnum.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/SampleEnum.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/SampleEnum.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/SampleEnum.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"d0a1fe951da85603d2a1a4de939c2513e1cd2bae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestEnumQueryConstructor.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestEnumQueryConstructor.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestEnumQueryConstructor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestEnumQueryConstructor.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"aec9b9c6e60c6fe87469ec985d65532543fb8f69","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestEnumSets.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestEnumSets.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestEnumSets.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestEnumSets.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c950d9e36e54e3507f2e8c54d7abe3e0a0560fcb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestEnumsInJPQL.java","status":"modified","additions":127,"deletions":127,"changes":254,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestEnumsInJPQL.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestEnumsInJPQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/fields/TestEnumsInJPQL.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ca20eae8300bce9cbb5e2161ae6f9a72e9959eb0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/CustomSeq.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/CustomSeq.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/CustomSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/CustomSeq.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"90c2dd503d4e4c5556b288835ca2d72659c403df","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable3.java","status":"modified","additions":84,"deletions":84,"changes":168,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e624e67f9e03125347b211a35847c6e312391ce2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable4.java","status":"modified","additions":84,"deletions":84,"changes":168,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable4.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable4.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"91957c4700320fb58b5ebfab6a2a1f3a49d855d5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/GeneratedValues.java","status":"modified","additions":128,"deletions":128,"changes":256,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/GeneratedValues.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/GeneratedValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/GeneratedValues.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"0a7f6dcabcda6421a0000f914613ad3d3ae58585","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java","status":"modified","additions":218,"deletions":218,"changes":436,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"7e624c248d9fe783ade8c82d9e188841968ba4c0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/HungarianNotationFieldDuplicates.java","status":"modified","additions":34,"deletions":34,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/HungarianNotationFieldDuplicates.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/HungarianNotationFieldDuplicates.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/HungarianNotationFieldDuplicates.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"8787c0ca63fb83a7f67a5917d84938a137bbeb77","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/HungarianNotationFields.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/HungarianNotationFields.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/HungarianNotationFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/HungarianNotationFields.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"bd90d148dc72cdc17edefb061e7ce8ab761b3b1b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/OtherClass.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/OtherClass.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/OtherClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/OtherClass.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c409f6afb4e81025dd84802755167e7ecd12acb5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/TestHungarianNotationRemoval.java","status":"modified","additions":87,"deletions":87,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/TestHungarianNotationRemoval.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/TestHungarianNotationRemoval.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/hugariannotation/TestHungarianNotationRemoval.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"4a58be28ea33356a0e0d4df24c98abfa08dfd2d2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigDecimalIdEntity.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigDecimalIdEntity.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigDecimalIdEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigDecimalIdEntity.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1b56f4ef92f2499081d5ea0b548d3b642aac3ee0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigIntegerIdEntity.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigIntegerIdEntity.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigIntegerIdEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/SQLBigIntegerIdEntity.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"8ebe90cc582f0fe20ff7157eb403c0392a5b8a3a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigDecimalId.java","status":"modified","additions":61,"deletions":61,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigDecimalId.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigDecimalId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigDecimalId.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"812784f76167d23c318071354edda128c1fdde3f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigIntegerId.java","status":"modified","additions":62,"deletions":62,"changes":124,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigIntegerId.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigIntegerId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/TestSQLBigIntegerId.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"b442917faa976369d559923627fa99a787072bec","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenEntityL3Sibling.java","status":"modified","additions":37,"deletions":37,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenEntityL3Sibling.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenEntityL3Sibling.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenEntityL3Sibling.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a9e52afe7c78de3faa1e2a067ce8980f50c0b655","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestIdentityWithSingleTableStrategy.java","status":"modified","additions":86,"deletions":86,"changes":172,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestIdentityWithSingleTableStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestIdentityWithSingleTableStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestIdentityWithSingleTableStrategy.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"b7ad1369f2d8c9391f60823b6c3268b23964db6b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedUnqualifiedClassNames.java","status":"modified","additions":62,"deletions":62,"changes":124,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedUnqualifiedClassNames.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedUnqualifiedClassNames.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedUnqualifiedClassNames.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"81da48fbd21bf2bb6b06fb36834dd38bcccbe4df","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/RelationOwner.java","status":"modified","additions":42,"deletions":42,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/RelationOwner.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/RelationOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/RelationOwner.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"49a4d2ceee23a32ea7677175e5e01b78855bf45d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SubID.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SubID.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SubID.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SubID.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"29bad7826e2bf7a2942629edad56b104789bca03","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Subclass.java","status":"modified","additions":34,"deletions":34,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Subclass.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Subclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Subclass.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"}]}

